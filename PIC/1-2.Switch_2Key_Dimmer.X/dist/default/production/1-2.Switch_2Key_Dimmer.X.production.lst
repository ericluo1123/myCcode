

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Nov 13 09:15:14 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	intentry,global,class=CODE,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	dabs	1,0x7E,2
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  0008                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0099                     	;# 
   191  009A                     	;# 
   192  009B                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  0116                     	;# 
   201  0117                     	;# 
   202  011D                     	;# 
   203  018C                     	;# 
   204  018D                     	;# 
   205  018E                     	;# 
   206  0191                     	;# 
   207  0191                     	;# 
   208  0192                     	;# 
   209  0193                     	;# 
   210  0193                     	;# 
   211  0194                     	;# 
   212  0195                     	;# 
   213  0196                     	;# 
   214  0197                     	;# 
   215  0199                     	;# 
   216  019A                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019C                     	;# 
   222  019C                     	;# 
   223  019D                     	;# 
   224  019E                     	;# 
   225  019F                     	;# 
   226  020D                     	;# 
   227  0210                     	;# 
   228  0211                     	;# 
   229  0211                     	;# 
   230  0212                     	;# 
   231  0212                     	;# 
   232  0213                     	;# 
   233  0213                     	;# 
   234  0214                     	;# 
   235  0214                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0216                     	;# 
   240  0216                     	;# 
   241  0217                     	;# 
   242  0217                     	;# 
   243  0291                     	;# 
   244  0291                     	;# 
   245  0292                     	;# 
   246  0293                     	;# 
   247  0298                     	;# 
   248  0298                     	;# 
   249  0299                     	;# 
   250  029A                     	;# 
   251  0394                     	;# 
   252  0395                     	;# 
   253  0396                     	;# 
   254  0FE4                     	;# 
   255  0FE5                     	;# 
   256  0FE6                     	;# 
   257  0FE7                     	;# 
   258  0FE8                     	;# 
   259  0FE9                     	;# 
   260  0FEA                     	;# 
   261  0FEB                     	;# 
   262  0FED                     	;# 
   263  0FEE                     	;# 
   264  0FEF                     	;# 
   265  0000                     	;# 
   266  0001                     	;# 
   267  0002                     	;# 
   268  0003                     	;# 
   269  0004                     	;# 
   270  0005                     	;# 
   271  0006                     	;# 
   272  0007                     	;# 
   273  0008                     	;# 
   274  0009                     	;# 
   275  000A                     	;# 
   276  000B                     	;# 
   277  000C                     	;# 
   278  000D                     	;# 
   279  000E                     	;# 
   280  0010                     	;# 
   281  0011                     	;# 
   282  0012                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0016                     	;# 
   286  0017                     	;# 
   287  0018                     	;# 
   288  0019                     	;# 
   289  001A                     	;# 
   290  001B                     	;# 
   291  001C                     	;# 
   292  008C                     	;# 
   293  008D                     	;# 
   294  008E                     	;# 
   295  0090                     	;# 
   296  0091                     	;# 
   297  0092                     	;# 
   298  0095                     	;# 
   299  0096                     	;# 
   300  0097                     	;# 
   301  0099                     	;# 
   302  009A                     	;# 
   303  009B                     	;# 
   304  009B                     	;# 
   305  009C                     	;# 
   306  009D                     	;# 
   307  009E                     	;# 
   308  010C                     	;# 
   309  010D                     	;# 
   310  010E                     	;# 
   311  0116                     	;# 
   312  0117                     	;# 
   313  011D                     	;# 
   314  018C                     	;# 
   315  018D                     	;# 
   316  018E                     	;# 
   317  0191                     	;# 
   318  0191                     	;# 
   319  0192                     	;# 
   320  0193                     	;# 
   321  0193                     	;# 
   322  0194                     	;# 
   323  0195                     	;# 
   324  0196                     	;# 
   325  0197                     	;# 
   326  0199                     	;# 
   327  019A                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019C                     	;# 
   333  019C                     	;# 
   334  019D                     	;# 
   335  019E                     	;# 
   336  019F                     	;# 
   337  020D                     	;# 
   338  0210                     	;# 
   339  0211                     	;# 
   340  0211                     	;# 
   341  0212                     	;# 
   342  0212                     	;# 
   343  0213                     	;# 
   344  0213                     	;# 
   345  0214                     	;# 
   346  0214                     	;# 
   347  0215                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0216                     	;# 
   351  0216                     	;# 
   352  0217                     	;# 
   353  0217                     	;# 
   354  0291                     	;# 
   355  0291                     	;# 
   356  0292                     	;# 
   357  0293                     	;# 
   358  0298                     	;# 
   359  0298                     	;# 
   360  0299                     	;# 
   361  029A                     	;# 
   362  0394                     	;# 
   363  0395                     	;# 
   364  0396                     	;# 
   365  0FE4                     	;# 
   366  0FE5                     	;# 
   367  0FE6                     	;# 
   368  0FE7                     	;# 
   369  0FE8                     	;# 
   370  0FE9                     	;# 
   371  0FEA                     	;# 
   372  0FEB                     	;# 
   373  0FED                     	;# 
   374  0FEE                     	;# 
   375  0FEF                     	;# 
   376  0000                     	;# 
   377  0001                     	;# 
   378  0002                     	;# 
   379  0003                     	;# 
   380  0004                     	;# 
   381  0005                     	;# 
   382  0006                     	;# 
   383  0007                     	;# 
   384  0008                     	;# 
   385  0009                     	;# 
   386  000A                     	;# 
   387  000B                     	;# 
   388  000C                     	;# 
   389  000D                     	;# 
   390  000E                     	;# 
   391  0010                     	;# 
   392  0011                     	;# 
   393  0012                     	;# 
   394  0015                     	;# 
   395  0016                     	;# 
   396  0016                     	;# 
   397  0017                     	;# 
   398  0018                     	;# 
   399  0019                     	;# 
   400  001A                     	;# 
   401  001B                     	;# 
   402  001C                     	;# 
   403  008C                     	;# 
   404  008D                     	;# 
   405  008E                     	;# 
   406  0090                     	;# 
   407  0091                     	;# 
   408  0092                     	;# 
   409  0095                     	;# 
   410  0096                     	;# 
   411  0097                     	;# 
   412  0099                     	;# 
   413  009A                     	;# 
   414  009B                     	;# 
   415  009B                     	;# 
   416  009C                     	;# 
   417  009D                     	;# 
   418  009E                     	;# 
   419  010C                     	;# 
   420  010D                     	;# 
   421  010E                     	;# 
   422  0116                     	;# 
   423  0117                     	;# 
   424  011D                     	;# 
   425  018C                     	;# 
   426  018D                     	;# 
   427  018E                     	;# 
   428  0191                     	;# 
   429  0191                     	;# 
   430  0192                     	;# 
   431  0193                     	;# 
   432  0193                     	;# 
   433  0194                     	;# 
   434  0195                     	;# 
   435  0196                     	;# 
   436  0197                     	;# 
   437  0199                     	;# 
   438  019A                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019C                     	;# 
   444  019C                     	;# 
   445  019D                     	;# 
   446  019E                     	;# 
   447  019F                     	;# 
   448  020D                     	;# 
   449  0210                     	;# 
   450  0211                     	;# 
   451  0211                     	;# 
   452  0212                     	;# 
   453  0212                     	;# 
   454  0213                     	;# 
   455  0213                     	;# 
   456  0214                     	;# 
   457  0214                     	;# 
   458  0215                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0216                     	;# 
   462  0216                     	;# 
   463  0217                     	;# 
   464  0217                     	;# 
   465  0291                     	;# 
   466  0291                     	;# 
   467  0292                     	;# 
   468  0293                     	;# 
   469  0298                     	;# 
   470  0298                     	;# 
   471  0299                     	;# 
   472  029A                     	;# 
   473  0394                     	;# 
   474  0395                     	;# 
   475  0396                     	;# 
   476  0FE4                     	;# 
   477  0FE5                     	;# 
   478  0FE6                     	;# 
   479  0FE7                     	;# 
   480  0FE8                     	;# 
   481  0FE9                     	;# 
   482  0FEA                     	;# 
   483  0FEB                     	;# 
   484  0FED                     	;# 
   485  0FEE                     	;# 
   486  0FEF                     	;# 
   487  0000                     	;# 
   488  0001                     	;# 
   489  0002                     	;# 
   490  0003                     	;# 
   491  0004                     	;# 
   492  0005                     	;# 
   493  0006                     	;# 
   494  0007                     	;# 
   495  0008                     	;# 
   496  0009                     	;# 
   497  000A                     	;# 
   498  000B                     	;# 
   499  000C                     	;# 
   500  000D                     	;# 
   501  000E                     	;# 
   502  0010                     	;# 
   503  0011                     	;# 
   504  0012                     	;# 
   505  0015                     	;# 
   506  0016                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  001A                     	;# 
   512  001B                     	;# 
   513  001C                     	;# 
   514  008C                     	;# 
   515  008D                     	;# 
   516  008E                     	;# 
   517  0090                     	;# 
   518  0091                     	;# 
   519  0092                     	;# 
   520  0095                     	;# 
   521  0096                     	;# 
   522  0097                     	;# 
   523  0099                     	;# 
   524  009A                     	;# 
   525  009B                     	;# 
   526  009B                     	;# 
   527  009C                     	;# 
   528  009D                     	;# 
   529  009E                     	;# 
   530  010C                     	;# 
   531  010D                     	;# 
   532  010E                     	;# 
   533  0116                     	;# 
   534  0117                     	;# 
   535  011D                     	;# 
   536  018C                     	;# 
   537  018D                     	;# 
   538  018E                     	;# 
   539  0191                     	;# 
   540  0191                     	;# 
   541  0192                     	;# 
   542  0193                     	;# 
   543  0193                     	;# 
   544  0194                     	;# 
   545  0195                     	;# 
   546  0196                     	;# 
   547  0197                     	;# 
   548  0199                     	;# 
   549  019A                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019C                     	;# 
   555  019C                     	;# 
   556  019D                     	;# 
   557  019E                     	;# 
   558  019F                     	;# 
   559  020D                     	;# 
   560  0210                     	;# 
   561  0211                     	;# 
   562  0211                     	;# 
   563  0212                     	;# 
   564  0212                     	;# 
   565  0213                     	;# 
   566  0213                     	;# 
   567  0214                     	;# 
   568  0214                     	;# 
   569  0215                     	;# 
   570  0215                     	;# 
   571  0215                     	;# 
   572  0216                     	;# 
   573  0216                     	;# 
   574  0217                     	;# 
   575  0217                     	;# 
   576  0291                     	;# 
   577  0291                     	;# 
   578  0292                     	;# 
   579  0293                     	;# 
   580  0298                     	;# 
   581  0298                     	;# 
   582  0299                     	;# 
   583  029A                     	;# 
   584  0394                     	;# 
   585  0395                     	;# 
   586  0396                     	;# 
   587  0FE4                     	;# 
   588  0FE5                     	;# 
   589  0FE6                     	;# 
   590  0FE7                     	;# 
   591  0FE8                     	;# 
   592  0FE9                     	;# 
   593  0FEA                     	;# 
   594  0FEB                     	;# 
   595  0FED                     	;# 
   596  0FEE                     	;# 
   597  0FEF                     	;# 
   598  0000                     	;# 
   599  0001                     	;# 
   600  0002                     	;# 
   601  0003                     	;# 
   602  0004                     	;# 
   603  0005                     	;# 
   604  0006                     	;# 
   605  0007                     	;# 
   606  0008                     	;# 
   607  0009                     	;# 
   608  000A                     	;# 
   609  000B                     	;# 
   610  000C                     	;# 
   611  000D                     	;# 
   612  000E                     	;# 
   613  0010                     	;# 
   614  0011                     	;# 
   615  0012                     	;# 
   616  0015                     	;# 
   617  0016                     	;# 
   618  0016                     	;# 
   619  0017                     	;# 
   620  0018                     	;# 
   621  0019                     	;# 
   622  001A                     	;# 
   623  001B                     	;# 
   624  001C                     	;# 
   625  008C                     	;# 
   626  008D                     	;# 
   627  008E                     	;# 
   628  0090                     	;# 
   629  0091                     	;# 
   630  0092                     	;# 
   631  0095                     	;# 
   632  0096                     	;# 
   633  0097                     	;# 
   634  0099                     	;# 
   635  009A                     	;# 
   636  009B                     	;# 
   637  009B                     	;# 
   638  009C                     	;# 
   639  009D                     	;# 
   640  009E                     	;# 
   641  010C                     	;# 
   642  010D                     	;# 
   643  010E                     	;# 
   644  0116                     	;# 
   645  0117                     	;# 
   646  011D                     	;# 
   647  018C                     	;# 
   648  018D                     	;# 
   649  018E                     	;# 
   650  0191                     	;# 
   651  0191                     	;# 
   652  0192                     	;# 
   653  0193                     	;# 
   654  0193                     	;# 
   655  0194                     	;# 
   656  0195                     	;# 
   657  0196                     	;# 
   658  0197                     	;# 
   659  0199                     	;# 
   660  019A                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019C                     	;# 
   666  019C                     	;# 
   667  019D                     	;# 
   668  019E                     	;# 
   669  019F                     	;# 
   670  020D                     	;# 
   671  0210                     	;# 
   672  0211                     	;# 
   673  0211                     	;# 
   674  0212                     	;# 
   675  0212                     	;# 
   676  0213                     	;# 
   677  0213                     	;# 
   678  0214                     	;# 
   679  0214                     	;# 
   680  0215                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0216                     	;# 
   684  0216                     	;# 
   685  0217                     	;# 
   686  0217                     	;# 
   687  0291                     	;# 
   688  0291                     	;# 
   689  0292                     	;# 
   690  0293                     	;# 
   691  0298                     	;# 
   692  0298                     	;# 
   693  0299                     	;# 
   694  029A                     	;# 
   695  0394                     	;# 
   696  0395                     	;# 
   697  0396                     	;# 
   698  0FE4                     	;# 
   699  0FE5                     	;# 
   700  0FE6                     	;# 
   701  0FE7                     	;# 
   702  0FE8                     	;# 
   703  0FE9                     	;# 
   704  0FEA                     	;# 
   705  0FEB                     	;# 
   706  0FED                     	;# 
   707  0FEE                     	;# 
   708  0FEF                     	;# 
   709  0000                     	;# 
   710  0001                     	;# 
   711  0002                     	;# 
   712  0003                     	;# 
   713  0004                     	;# 
   714  0005                     	;# 
   715  0006                     	;# 
   716  0007                     	;# 
   717  0008                     	;# 
   718  0009                     	;# 
   719  000A                     	;# 
   720  000B                     	;# 
   721  000C                     	;# 
   722  000D                     	;# 
   723  000E                     	;# 
   724  0010                     	;# 
   725  0011                     	;# 
   726  0012                     	;# 
   727  0015                     	;# 
   728  0016                     	;# 
   729  0016                     	;# 
   730  0017                     	;# 
   731  0018                     	;# 
   732  0019                     	;# 
   733  001A                     	;# 
   734  001B                     	;# 
   735  001C                     	;# 
   736  008C                     	;# 
   737  008D                     	;# 
   738  008E                     	;# 
   739  0090                     	;# 
   740  0091                     	;# 
   741  0092                     	;# 
   742  0095                     	;# 
   743  0096                     	;# 
   744  0097                     	;# 
   745  0099                     	;# 
   746  009A                     	;# 
   747  009B                     	;# 
   748  009B                     	;# 
   749  009C                     	;# 
   750  009D                     	;# 
   751  009E                     	;# 
   752  010C                     	;# 
   753  010D                     	;# 
   754  010E                     	;# 
   755  0116                     	;# 
   756  0117                     	;# 
   757  011D                     	;# 
   758  018C                     	;# 
   759  018D                     	;# 
   760  018E                     	;# 
   761  0191                     	;# 
   762  0191                     	;# 
   763  0192                     	;# 
   764  0193                     	;# 
   765  0193                     	;# 
   766  0194                     	;# 
   767  0195                     	;# 
   768  0196                     	;# 
   769  0197                     	;# 
   770  0199                     	;# 
   771  019A                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019C                     	;# 
   777  019C                     	;# 
   778  019D                     	;# 
   779  019E                     	;# 
   780  019F                     	;# 
   781  020D                     	;# 
   782  0210                     	;# 
   783  0211                     	;# 
   784  0211                     	;# 
   785  0212                     	;# 
   786  0212                     	;# 
   787  0213                     	;# 
   788  0213                     	;# 
   789  0214                     	;# 
   790  0214                     	;# 
   791  0215                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0216                     	;# 
   795  0216                     	;# 
   796  0217                     	;# 
   797  0217                     	;# 
   798  0291                     	;# 
   799  0291                     	;# 
   800  0292                     	;# 
   801  0293                     	;# 
   802  0298                     	;# 
   803  0298                     	;# 
   804  0299                     	;# 
   805  029A                     	;# 
   806  0394                     	;# 
   807  0395                     	;# 
   808  0396                     	;# 
   809  0FE4                     	;# 
   810  0FE5                     	;# 
   811  0FE6                     	;# 
   812  0FE7                     	;# 
   813  0FE8                     	;# 
   814  0FE9                     	;# 
   815  0FEA                     	;# 
   816  0FEB                     	;# 
   817  0FED                     	;# 
   818  0FEE                     	;# 
   819  0FEF                     	;# 
   820  0000                     	;# 
   821  0001                     	;# 
   822  0002                     	;# 
   823  0003                     	;# 
   824  0004                     	;# 
   825  0005                     	;# 
   826  0006                     	;# 
   827  0007                     	;# 
   828  0008                     	;# 
   829  0009                     	;# 
   830  000A                     	;# 
   831  000B                     	;# 
   832  000C                     	;# 
   833  000D                     	;# 
   834  000E                     	;# 
   835  0010                     	;# 
   836  0011                     	;# 
   837  0012                     	;# 
   838  0015                     	;# 
   839  0016                     	;# 
   840  0016                     	;# 
   841  0017                     	;# 
   842  0018                     	;# 
   843  0019                     	;# 
   844  001A                     	;# 
   845  001B                     	;# 
   846  001C                     	;# 
   847  008C                     	;# 
   848  008D                     	;# 
   849  008E                     	;# 
   850  0090                     	;# 
   851  0091                     	;# 
   852  0092                     	;# 
   853  0095                     	;# 
   854  0096                     	;# 
   855  0097                     	;# 
   856  0099                     	;# 
   857  009A                     	;# 
   858  009B                     	;# 
   859  009B                     	;# 
   860  009C                     	;# 
   861  009D                     	;# 
   862  009E                     	;# 
   863  010C                     	;# 
   864  010D                     	;# 
   865  010E                     	;# 
   866  0116                     	;# 
   867  0117                     	;# 
   868  011D                     	;# 
   869  018C                     	;# 
   870  018D                     	;# 
   871  018E                     	;# 
   872  0191                     	;# 
   873  0191                     	;# 
   874  0192                     	;# 
   875  0193                     	;# 
   876  0193                     	;# 
   877  0194                     	;# 
   878  0195                     	;# 
   879  0196                     	;# 
   880  0197                     	;# 
   881  0199                     	;# 
   882  019A                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019C                     	;# 
   888  019C                     	;# 
   889  019D                     	;# 
   890  019E                     	;# 
   891  019F                     	;# 
   892  020D                     	;# 
   893  0210                     	;# 
   894  0211                     	;# 
   895  0211                     	;# 
   896  0212                     	;# 
   897  0212                     	;# 
   898  0213                     	;# 
   899  0213                     	;# 
   900  0214                     	;# 
   901  0214                     	;# 
   902  0215                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0216                     	;# 
   906  0216                     	;# 
   907  0217                     	;# 
   908  0217                     	;# 
   909  0291                     	;# 
   910  0291                     	;# 
   911  0292                     	;# 
   912  0293                     	;# 
   913  0298                     	;# 
   914  0298                     	;# 
   915  0299                     	;# 
   916  029A                     	;# 
   917  0394                     	;# 
   918  0395                     	;# 
   919  0396                     	;# 
   920  0FE4                     	;# 
   921  0FE5                     	;# 
   922  0FE6                     	;# 
   923  0FE7                     	;# 
   924  0FE8                     	;# 
   925  0FE9                     	;# 
   926  0FEA                     	;# 
   927  0FEB                     	;# 
   928  0FED                     	;# 
   929  0FEE                     	;# 
   930  0FEF                     	;# 
   931  0000                     	;# 
   932  0001                     	;# 
   933  0002                     	;# 
   934  0003                     	;# 
   935  0004                     	;# 
   936  0005                     	;# 
   937  0006                     	;# 
   938  0007                     	;# 
   939  0008                     	;# 
   940  0009                     	;# 
   941  000A                     	;# 
   942  000B                     	;# 
   943  000C                     	;# 
   944  000D                     	;# 
   945  000E                     	;# 
   946  0010                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0015                     	;# 
   950  0016                     	;# 
   951  0016                     	;# 
   952  0017                     	;# 
   953  0018                     	;# 
   954  0019                     	;# 
   955  001A                     	;# 
   956  001B                     	;# 
   957  001C                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  0090                     	;# 
   962  0091                     	;# 
   963  0092                     	;# 
   964  0095                     	;# 
   965  0096                     	;# 
   966  0097                     	;# 
   967  0099                     	;# 
   968  009A                     	;# 
   969  009B                     	;# 
   970  009B                     	;# 
   971  009C                     	;# 
   972  009D                     	;# 
   973  009E                     	;# 
   974  010C                     	;# 
   975  010D                     	;# 
   976  010E                     	;# 
   977  0116                     	;# 
   978  0117                     	;# 
   979  011D                     	;# 
   980  018C                     	;# 
   981  018D                     	;# 
   982  018E                     	;# 
   983  0191                     	;# 
   984  0191                     	;# 
   985  0192                     	;# 
   986  0193                     	;# 
   987  0193                     	;# 
   988  0194                     	;# 
   989  0195                     	;# 
   990  0196                     	;# 
   991  0197                     	;# 
   992  0199                     	;# 
   993  019A                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019C                     	;# 
   999  019C                     	;# 
  1000  019D                     	;# 
  1001  019E                     	;# 
  1002  019F                     	;# 
  1003  020D                     	;# 
  1004  0210                     	;# 
  1005  0211                     	;# 
  1006  0211                     	;# 
  1007  0212                     	;# 
  1008  0212                     	;# 
  1009  0213                     	;# 
  1010  0213                     	;# 
  1011  0214                     	;# 
  1012  0214                     	;# 
  1013  0215                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0216                     	;# 
  1017  0216                     	;# 
  1018  0217                     	;# 
  1019  0217                     	;# 
  1020  0291                     	;# 
  1021  0291                     	;# 
  1022  0292                     	;# 
  1023  0293                     	;# 
  1024  0298                     	;# 
  1025  0298                     	;# 
  1026  0299                     	;# 
  1027  029A                     	;# 
  1028  0394                     	;# 
  1029  0395                     	;# 
  1030  0396                     	;# 
  1031  0FE4                     	;# 
  1032  0FE5                     	;# 
  1033  0FE6                     	;# 
  1034  0FE7                     	;# 
  1035  0FE8                     	;# 
  1036  0FE9                     	;# 
  1037  0FEA                     	;# 
  1038  0FEB                     	;# 
  1039  0FED                     	;# 
  1040  0FEE                     	;# 
  1041  0FEF                     	;# 
  1042  0000                     	;# 
  1043  0001                     	;# 
  1044  0002                     	;# 
  1045  0003                     	;# 
  1046  0004                     	;# 
  1047  0005                     	;# 
  1048  0006                     	;# 
  1049  0007                     	;# 
  1050  0008                     	;# 
  1051  0009                     	;# 
  1052  000A                     	;# 
  1053  000B                     	;# 
  1054  000C                     	;# 
  1055  000D                     	;# 
  1056  000E                     	;# 
  1057  0010                     	;# 
  1058  0011                     	;# 
  1059  0012                     	;# 
  1060  0015                     	;# 
  1061  0016                     	;# 
  1062  0016                     	;# 
  1063  0017                     	;# 
  1064  0018                     	;# 
  1065  0019                     	;# 
  1066  001A                     	;# 
  1067  001B                     	;# 
  1068  001C                     	;# 
  1069  008C                     	;# 
  1070  008D                     	;# 
  1071  008E                     	;# 
  1072  0090                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0095                     	;# 
  1076  0096                     	;# 
  1077  0097                     	;# 
  1078  0099                     	;# 
  1079  009A                     	;# 
  1080  009B                     	;# 
  1081  009B                     	;# 
  1082  009C                     	;# 
  1083  009D                     	;# 
  1084  009E                     	;# 
  1085  010C                     	;# 
  1086  010D                     	;# 
  1087  010E                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  011D                     	;# 
  1091  018C                     	;# 
  1092  018D                     	;# 
  1093  018E                     	;# 
  1094  0191                     	;# 
  1095  0191                     	;# 
  1096  0192                     	;# 
  1097  0193                     	;# 
  1098  0193                     	;# 
  1099  0194                     	;# 
  1100  0195                     	;# 
  1101  0196                     	;# 
  1102  0197                     	;# 
  1103  0199                     	;# 
  1104  019A                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019C                     	;# 
  1110  019C                     	;# 
  1111  019D                     	;# 
  1112  019E                     	;# 
  1113  019F                     	;# 
  1114  020D                     	;# 
  1115  0210                     	;# 
  1116  0211                     	;# 
  1117  0211                     	;# 
  1118  0212                     	;# 
  1119  0212                     	;# 
  1120  0213                     	;# 
  1121  0213                     	;# 
  1122  0214                     	;# 
  1123  0214                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0216                     	;# 
  1128  0216                     	;# 
  1129  0217                     	;# 
  1130  0217                     	;# 
  1131  0291                     	;# 
  1132  0291                     	;# 
  1133  0292                     	;# 
  1134  0293                     	;# 
  1135  0298                     	;# 
  1136  0298                     	;# 
  1137  0299                     	;# 
  1138  029A                     	;# 
  1139  0394                     	;# 
  1140  0395                     	;# 
  1141  0396                     	;# 
  1142  0FE4                     	;# 
  1143  0FE5                     	;# 
  1144  0FE6                     	;# 
  1145  0FE7                     	;# 
  1146  0FE8                     	;# 
  1147  0FE9                     	;# 
  1148  0FEA                     	;# 
  1149  0FEB                     	;# 
  1150  0FED                     	;# 
  1151  0FEE                     	;# 
  1152  0FEF                     	;# 
  1153  0000                     	;# 
  1154  0001                     	;# 
  1155  0002                     	;# 
  1156  0003                     	;# 
  1157  0004                     	;# 
  1158  0005                     	;# 
  1159  0006                     	;# 
  1160  0007                     	;# 
  1161  0008                     	;# 
  1162  0009                     	;# 
  1163  000A                     	;# 
  1164  000B                     	;# 
  1165  000C                     	;# 
  1166  000D                     	;# 
  1167  000E                     	;# 
  1168  0010                     	;# 
  1169  0011                     	;# 
  1170  0012                     	;# 
  1171  0015                     	;# 
  1172  0016                     	;# 
  1173  0016                     	;# 
  1174  0017                     	;# 
  1175  0018                     	;# 
  1176  0019                     	;# 
  1177  001A                     	;# 
  1178  001B                     	;# 
  1179  001C                     	;# 
  1180  008C                     	;# 
  1181  008D                     	;# 
  1182  008E                     	;# 
  1183  0090                     	;# 
  1184  0091                     	;# 
  1185  0092                     	;# 
  1186  0095                     	;# 
  1187  0096                     	;# 
  1188  0097                     	;# 
  1189  0099                     	;# 
  1190  009A                     	;# 
  1191  009B                     	;# 
  1192  009B                     	;# 
  1193  009C                     	;# 
  1194  009D                     	;# 
  1195  009E                     	;# 
  1196  010C                     	;# 
  1197  010D                     	;# 
  1198  010E                     	;# 
  1199  0116                     	;# 
  1200  0117                     	;# 
  1201  011D                     	;# 
  1202  018C                     	;# 
  1203  018D                     	;# 
  1204  018E                     	;# 
  1205  0191                     	;# 
  1206  0191                     	;# 
  1207  0192                     	;# 
  1208  0193                     	;# 
  1209  0193                     	;# 
  1210  0194                     	;# 
  1211  0195                     	;# 
  1212  0196                     	;# 
  1213  0197                     	;# 
  1214  0199                     	;# 
  1215  019A                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019C                     	;# 
  1221  019C                     	;# 
  1222  019D                     	;# 
  1223  019E                     	;# 
  1224  019F                     	;# 
  1225  020D                     	;# 
  1226  0210                     	;# 
  1227  0211                     	;# 
  1228  0211                     	;# 
  1229  0212                     	;# 
  1230  0212                     	;# 
  1231  0213                     	;# 
  1232  0213                     	;# 
  1233  0214                     	;# 
  1234  0214                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0216                     	;# 
  1239  0216                     	;# 
  1240  0217                     	;# 
  1241  0217                     	;# 
  1242  0291                     	;# 
  1243  0291                     	;# 
  1244  0292                     	;# 
  1245  0293                     	;# 
  1246  0298                     	;# 
  1247  0298                     	;# 
  1248  0299                     	;# 
  1249  029A                     	;# 
  1250  0394                     	;# 
  1251  0395                     	;# 
  1252  0396                     	;# 
  1253  0FE4                     	;# 
  1254  0FE5                     	;# 
  1255  0FE6                     	;# 
  1256  0FE7                     	;# 
  1257  0FE8                     	;# 
  1258  0FE9                     	;# 
  1259  0FEA                     	;# 
  1260  0FEB                     	;# 
  1261  0FED                     	;# 
  1262  0FEE                     	;# 
  1263  0FEF                     	;# 
  1264  0000                     	;# 
  1265  0001                     	;# 
  1266  0002                     	;# 
  1267  0003                     	;# 
  1268  0004                     	;# 
  1269  0005                     	;# 
  1270  0006                     	;# 
  1271  0007                     	;# 
  1272  0008                     	;# 
  1273  0009                     	;# 
  1274  000A                     	;# 
  1275  000B                     	;# 
  1276  000C                     	;# 
  1277  000D                     	;# 
  1278  000E                     	;# 
  1279  0010                     	;# 
  1280  0011                     	;# 
  1281  0012                     	;# 
  1282  0015                     	;# 
  1283  0016                     	;# 
  1284  0016                     	;# 
  1285  0017                     	;# 
  1286  0018                     	;# 
  1287  0019                     	;# 
  1288  001A                     	;# 
  1289  001B                     	;# 
  1290  001C                     	;# 
  1291  008C                     	;# 
  1292  008D                     	;# 
  1293  008E                     	;# 
  1294  0090                     	;# 
  1295  0091                     	;# 
  1296  0092                     	;# 
  1297  0095                     	;# 
  1298  0096                     	;# 
  1299  0097                     	;# 
  1300  0099                     	;# 
  1301  009A                     	;# 
  1302  009B                     	;# 
  1303  009B                     	;# 
  1304  009C                     	;# 
  1305  009D                     	;# 
  1306  009E                     	;# 
  1307  010C                     	;# 
  1308  010D                     	;# 
  1309  010E                     	;# 
  1310  0116                     	;# 
  1311  0117                     	;# 
  1312  011D                     	;# 
  1313  018C                     	;# 
  1314  018D                     	;# 
  1315  018E                     	;# 
  1316  0191                     	;# 
  1317  0191                     	;# 
  1318  0192                     	;# 
  1319  0193                     	;# 
  1320  0193                     	;# 
  1321  0194                     	;# 
  1322  0195                     	;# 
  1323  0196                     	;# 
  1324  0197                     	;# 
  1325  0199                     	;# 
  1326  019A                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019C                     	;# 
  1332  019C                     	;# 
  1333  019D                     	;# 
  1334  019E                     	;# 
  1335  019F                     	;# 
  1336  020D                     	;# 
  1337  0210                     	;# 
  1338  0211                     	;# 
  1339  0211                     	;# 
  1340  0212                     	;# 
  1341  0212                     	;# 
  1342  0213                     	;# 
  1343  0213                     	;# 
  1344  0214                     	;# 
  1345  0214                     	;# 
  1346  0215                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0216                     	;# 
  1350  0216                     	;# 
  1351  0217                     	;# 
  1352  0217                     	;# 
  1353  0291                     	;# 
  1354  0291                     	;# 
  1355  0292                     	;# 
  1356  0293                     	;# 
  1357  0298                     	;# 
  1358  0298                     	;# 
  1359  0299                     	;# 
  1360  029A                     	;# 
  1361  0394                     	;# 
  1362  0395                     	;# 
  1363  0396                     	;# 
  1364  0FE4                     	;# 
  1365  0FE5                     	;# 
  1366  0FE6                     	;# 
  1367  0FE7                     	;# 
  1368  0FE8                     	;# 
  1369  0FE9                     	;# 
  1370  0FEA                     	;# 
  1371  0FEB                     	;# 
  1372  0FED                     	;# 
  1373  0FEE                     	;# 
  1374  0FEF                     	;# 
  1375  0000                     	;# 
  1376  0001                     	;# 
  1377  0002                     	;# 
  1378  0003                     	;# 
  1379  0004                     	;# 
  1380  0005                     	;# 
  1381  0006                     	;# 
  1382  0007                     	;# 
  1383  0008                     	;# 
  1384  0009                     	;# 
  1385  000A                     	;# 
  1386  000B                     	;# 
  1387  000C                     	;# 
  1388  000D                     	;# 
  1389  000E                     	;# 
  1390  0010                     	;# 
  1391  0011                     	;# 
  1392  0012                     	;# 
  1393  0015                     	;# 
  1394  0016                     	;# 
  1395  0016                     	;# 
  1396  0017                     	;# 
  1397  0018                     	;# 
  1398  0019                     	;# 
  1399  001A                     	;# 
  1400  001B                     	;# 
  1401  001C                     	;# 
  1402  008C                     	;# 
  1403  008D                     	;# 
  1404  008E                     	;# 
  1405  0090                     	;# 
  1406  0091                     	;# 
  1407  0092                     	;# 
  1408  0095                     	;# 
  1409  0096                     	;# 
  1410  0097                     	;# 
  1411  0099                     	;# 
  1412  009A                     	;# 
  1413  009B                     	;# 
  1414  009B                     	;# 
  1415  009C                     	;# 
  1416  009D                     	;# 
  1417  009E                     	;# 
  1418  010C                     	;# 
  1419  010D                     	;# 
  1420  010E                     	;# 
  1421  0116                     	;# 
  1422  0117                     	;# 
  1423  011D                     	;# 
  1424  018C                     	;# 
  1425  018D                     	;# 
  1426  018E                     	;# 
  1427  0191                     	;# 
  1428  0191                     	;# 
  1429  0192                     	;# 
  1430  0193                     	;# 
  1431  0193                     	;# 
  1432  0194                     	;# 
  1433  0195                     	;# 
  1434  0196                     	;# 
  1435  0197                     	;# 
  1436  0199                     	;# 
  1437  019A                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019C                     	;# 
  1443  019C                     	;# 
  1444  019D                     	;# 
  1445  019E                     	;# 
  1446  019F                     	;# 
  1447  020D                     	;# 
  1448  0210                     	;# 
  1449  0211                     	;# 
  1450  0211                     	;# 
  1451  0212                     	;# 
  1452  0212                     	;# 
  1453  0213                     	;# 
  1454  0213                     	;# 
  1455  0214                     	;# 
  1456  0214                     	;# 
  1457  0215                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0216                     	;# 
  1461  0216                     	;# 
  1462  0217                     	;# 
  1463  0217                     	;# 
  1464  0291                     	;# 
  1465  0291                     	;# 
  1466  0292                     	;# 
  1467  0293                     	;# 
  1468  0298                     	;# 
  1469  0298                     	;# 
  1470  0299                     	;# 
  1471  029A                     	;# 
  1472  0394                     	;# 
  1473  0395                     	;# 
  1474  0396                     	;# 
  1475  0FE4                     	;# 
  1476  0FE5                     	;# 
  1477  0FE6                     	;# 
  1478  0FE7                     	;# 
  1479  0FE8                     	;# 
  1480  0FE9                     	;# 
  1481  0FEA                     	;# 
  1482  0FEB                     	;# 
  1483  0FED                     	;# 
  1484  0FEE                     	;# 
  1485  0FEF                     	;# 
  1486  0000                     	;# 
  1487  0001                     	;# 
  1488  0002                     	;# 
  1489  0003                     	;# 
  1490  0004                     	;# 
  1491  0005                     	;# 
  1492  0006                     	;# 
  1493  0007                     	;# 
  1494  0008                     	;# 
  1495  0009                     	;# 
  1496  000A                     	;# 
  1497  000B                     	;# 
  1498  000C                     	;# 
  1499  000D                     	;# 
  1500  000E                     	;# 
  1501  0010                     	;# 
  1502  0011                     	;# 
  1503  0012                     	;# 
  1504  0015                     	;# 
  1505  0016                     	;# 
  1506  0016                     	;# 
  1507  0017                     	;# 
  1508  0018                     	;# 
  1509  0019                     	;# 
  1510  001A                     	;# 
  1511  001B                     	;# 
  1512  001C                     	;# 
  1513  008C                     	;# 
  1514  008D                     	;# 
  1515  008E                     	;# 
  1516  0090                     	;# 
  1517  0091                     	;# 
  1518  0092                     	;# 
  1519  0095                     	;# 
  1520  0096                     	;# 
  1521  0097                     	;# 
  1522  0099                     	;# 
  1523  009A                     	;# 
  1524  009B                     	;# 
  1525  009B                     	;# 
  1526  009C                     	;# 
  1527  009D                     	;# 
  1528  009E                     	;# 
  1529  010C                     	;# 
  1530  010D                     	;# 
  1531  010E                     	;# 
  1532  0116                     	;# 
  1533  0117                     	;# 
  1534  011D                     	;# 
  1535  018C                     	;# 
  1536  018D                     	;# 
  1537  018E                     	;# 
  1538  0191                     	;# 
  1539  0191                     	;# 
  1540  0192                     	;# 
  1541  0193                     	;# 
  1542  0193                     	;# 
  1543  0194                     	;# 
  1544  0195                     	;# 
  1545  0196                     	;# 
  1546  0197                     	;# 
  1547  0199                     	;# 
  1548  019A                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019C                     	;# 
  1554  019C                     	;# 
  1555  019D                     	;# 
  1556  019E                     	;# 
  1557  019F                     	;# 
  1558  020D                     	;# 
  1559  0210                     	;# 
  1560  0211                     	;# 
  1561  0211                     	;# 
  1562  0212                     	;# 
  1563  0212                     	;# 
  1564  0213                     	;# 
  1565  0213                     	;# 
  1566  0214                     	;# 
  1567  0214                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0216                     	;# 
  1572  0216                     	;# 
  1573  0217                     	;# 
  1574  0217                     	;# 
  1575  0291                     	;# 
  1576  0291                     	;# 
  1577  0292                     	;# 
  1578  0293                     	;# 
  1579  0298                     	;# 
  1580  0298                     	;# 
  1581  0299                     	;# 
  1582  029A                     	;# 
  1583  0394                     	;# 
  1584  0395                     	;# 
  1585  0396                     	;# 
  1586  0FE4                     	;# 
  1587  0FE5                     	;# 
  1588  0FE6                     	;# 
  1589  0FE7                     	;# 
  1590  0FE8                     	;# 
  1591  0FE9                     	;# 
  1592  0FEA                     	;# 
  1593  0FEB                     	;# 
  1594  0FED                     	;# 
  1595  0FEE                     	;# 
  1596  0FEF                     	;# 
  1597  0000                     	;# 
  1598  0001                     	;# 
  1599  0002                     	;# 
  1600  0003                     	;# 
  1601  0004                     	;# 
  1602  0005                     	;# 
  1603  0006                     	;# 
  1604  0007                     	;# 
  1605  0008                     	;# 
  1606  0009                     	;# 
  1607  000A                     	;# 
  1608  000B                     	;# 
  1609  000C                     	;# 
  1610  000D                     	;# 
  1611  000E                     	;# 
  1612  0010                     	;# 
  1613  0011                     	;# 
  1614  0012                     	;# 
  1615  0015                     	;# 
  1616  0016                     	;# 
  1617  0016                     	;# 
  1618  0017                     	;# 
  1619  0018                     	;# 
  1620  0019                     	;# 
  1621  001A                     	;# 
  1622  001B                     	;# 
  1623  001C                     	;# 
  1624  008C                     	;# 
  1625  008D                     	;# 
  1626  008E                     	;# 
  1627  0090                     	;# 
  1628  0091                     	;# 
  1629  0092                     	;# 
  1630  0095                     	;# 
  1631  0096                     	;# 
  1632  0097                     	;# 
  1633  0099                     	;# 
  1634  009A                     	;# 
  1635  009B                     	;# 
  1636  009B                     	;# 
  1637  009C                     	;# 
  1638  009D                     	;# 
  1639  009E                     	;# 
  1640  010C                     	;# 
  1641  010D                     	;# 
  1642  010E                     	;# 
  1643  0116                     	;# 
  1644  0117                     	;# 
  1645  011D                     	;# 
  1646  018C                     	;# 
  1647  018D                     	;# 
  1648  018E                     	;# 
  1649  0191                     	;# 
  1650  0191                     	;# 
  1651  0192                     	;# 
  1652  0193                     	;# 
  1653  0193                     	;# 
  1654  0194                     	;# 
  1655  0195                     	;# 
  1656  0196                     	;# 
  1657  0197                     	;# 
  1658  0199                     	;# 
  1659  019A                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019C                     	;# 
  1665  019C                     	;# 
  1666  019D                     	;# 
  1667  019E                     	;# 
  1668  019F                     	;# 
  1669  020D                     	;# 
  1670  0210                     	;# 
  1671  0211                     	;# 
  1672  0211                     	;# 
  1673  0212                     	;# 
  1674  0212                     	;# 
  1675  0213                     	;# 
  1676  0213                     	;# 
  1677  0214                     	;# 
  1678  0214                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0216                     	;# 
  1683  0216                     	;# 
  1684  0217                     	;# 
  1685  0217                     	;# 
  1686  0291                     	;# 
  1687  0291                     	;# 
  1688  0292                     	;# 
  1689  0293                     	;# 
  1690  0298                     	;# 
  1691  0298                     	;# 
  1692  0299                     	;# 
  1693  029A                     	;# 
  1694  0394                     	;# 
  1695  0395                     	;# 
  1696  0396                     	;# 
  1697  0FE4                     	;# 
  1698  0FE5                     	;# 
  1699  0FE6                     	;# 
  1700  0FE7                     	;# 
  1701  0FE8                     	;# 
  1702  0FE9                     	;# 
  1703  0FEA                     	;# 
  1704  0FEB                     	;# 
  1705  0FED                     	;# 
  1706  0FEE                     	;# 
  1707  0FEF                     	;# 
  1708  0000                     	;# 
  1709  0001                     	;# 
  1710  0002                     	;# 
  1711  0003                     	;# 
  1712  0004                     	;# 
  1713  0005                     	;# 
  1714  0006                     	;# 
  1715  0007                     	;# 
  1716  0008                     	;# 
  1717  0009                     	;# 
  1718  000A                     	;# 
  1719  000B                     	;# 
  1720  000C                     	;# 
  1721  000D                     	;# 
  1722  000E                     	;# 
  1723  0010                     	;# 
  1724  0011                     	;# 
  1725  0012                     	;# 
  1726  0015                     	;# 
  1727  0016                     	;# 
  1728  0016                     	;# 
  1729  0017                     	;# 
  1730  0018                     	;# 
  1731  0019                     	;# 
  1732  001A                     	;# 
  1733  001B                     	;# 
  1734  001C                     	;# 
  1735  008C                     	;# 
  1736  008D                     	;# 
  1737  008E                     	;# 
  1738  0090                     	;# 
  1739  0091                     	;# 
  1740  0092                     	;# 
  1741  0095                     	;# 
  1742  0096                     	;# 
  1743  0097                     	;# 
  1744  0099                     	;# 
  1745  009A                     	;# 
  1746  009B                     	;# 
  1747  009B                     	;# 
  1748  009C                     	;# 
  1749  009D                     	;# 
  1750  009E                     	;# 
  1751  010C                     	;# 
  1752  010D                     	;# 
  1753  010E                     	;# 
  1754  0116                     	;# 
  1755  0117                     	;# 
  1756  011D                     	;# 
  1757  018C                     	;# 
  1758  018D                     	;# 
  1759  018E                     	;# 
  1760  0191                     	;# 
  1761  0191                     	;# 
  1762  0192                     	;# 
  1763  0193                     	;# 
  1764  0193                     	;# 
  1765  0194                     	;# 
  1766  0195                     	;# 
  1767  0196                     	;# 
  1768  0197                     	;# 
  1769  0199                     	;# 
  1770  019A                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019C                     	;# 
  1776  019C                     	;# 
  1777  019D                     	;# 
  1778  019E                     	;# 
  1779  019F                     	;# 
  1780  020D                     	;# 
  1781  0210                     	;# 
  1782  0211                     	;# 
  1783  0211                     	;# 
  1784  0212                     	;# 
  1785  0212                     	;# 
  1786  0213                     	;# 
  1787  0213                     	;# 
  1788  0214                     	;# 
  1789  0214                     	;# 
  1790  0215                     	;# 
  1791  0215                     	;# 
  1792  0215                     	;# 
  1793  0216                     	;# 
  1794  0216                     	;# 
  1795  0217                     	;# 
  1796  0217                     	;# 
  1797  0291                     	;# 
  1798  0291                     	;# 
  1799  0292                     	;# 
  1800  0293                     	;# 
  1801  0298                     	;# 
  1802  0298                     	;# 
  1803  0299                     	;# 
  1804  029A                     	;# 
  1805  0394                     	;# 
  1806  0395                     	;# 
  1807  0396                     	;# 
  1808  0FE4                     	;# 
  1809  0FE5                     	;# 
  1810  0FE6                     	;# 
  1811  0FE7                     	;# 
  1812  0FE8                     	;# 
  1813  0FE9                     	;# 
  1814  0FEA                     	;# 
  1815  0FEB                     	;# 
  1816  0FED                     	;# 
  1817  0FEE                     	;# 
  1818  0FEF                     	;# 
  1819  0000                     	;# 
  1820  0001                     	;# 
  1821  0002                     	;# 
  1822  0003                     	;# 
  1823  0004                     	;# 
  1824  0005                     	;# 
  1825  0006                     	;# 
  1826  0007                     	;# 
  1827  0008                     	;# 
  1828  0009                     	;# 
  1829  000A                     	;# 
  1830  000B                     	;# 
  1831  000C                     	;# 
  1832  000D                     	;# 
  1833  000E                     	;# 
  1834  0010                     	;# 
  1835  0011                     	;# 
  1836  0012                     	;# 
  1837  0015                     	;# 
  1838  0016                     	;# 
  1839  0016                     	;# 
  1840  0017                     	;# 
  1841  0018                     	;# 
  1842  0019                     	;# 
  1843  001A                     	;# 
  1844  001B                     	;# 
  1845  001C                     	;# 
  1846  008C                     	;# 
  1847  008D                     	;# 
  1848  008E                     	;# 
  1849  0090                     	;# 
  1850  0091                     	;# 
  1851  0092                     	;# 
  1852  0095                     	;# 
  1853  0096                     	;# 
  1854  0097                     	;# 
  1855  0099                     	;# 
  1856  009A                     	;# 
  1857  009B                     	;# 
  1858  009B                     	;# 
  1859  009C                     	;# 
  1860  009D                     	;# 
  1861  009E                     	;# 
  1862  010C                     	;# 
  1863  010D                     	;# 
  1864  010E                     	;# 
  1865  0116                     	;# 
  1866  0117                     	;# 
  1867  011D                     	;# 
  1868  018C                     	;# 
  1869  018D                     	;# 
  1870  018E                     	;# 
  1871  0191                     	;# 
  1872  0191                     	;# 
  1873  0192                     	;# 
  1874  0193                     	;# 
  1875  0193                     	;# 
  1876  0194                     	;# 
  1877  0195                     	;# 
  1878  0196                     	;# 
  1879  0197                     	;# 
  1880  0199                     	;# 
  1881  019A                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019C                     	;# 
  1887  019C                     	;# 
  1888  019D                     	;# 
  1889  019E                     	;# 
  1890  019F                     	;# 
  1891  020D                     	;# 
  1892  0210                     	;# 
  1893  0211                     	;# 
  1894  0211                     	;# 
  1895  0212                     	;# 
  1896  0212                     	;# 
  1897  0213                     	;# 
  1898  0213                     	;# 
  1899  0214                     	;# 
  1900  0214                     	;# 
  1901  0215                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0216                     	;# 
  1905  0216                     	;# 
  1906  0217                     	;# 
  1907  0217                     	;# 
  1908  0291                     	;# 
  1909  0291                     	;# 
  1910  0292                     	;# 
  1911  0293                     	;# 
  1912  0298                     	;# 
  1913  0298                     	;# 
  1914  0299                     	;# 
  1915  029A                     	;# 
  1916  0394                     	;# 
  1917  0395                     	;# 
  1918  0396                     	;# 
  1919  0FE4                     	;# 
  1920  0FE5                     	;# 
  1921  0FE6                     	;# 
  1922  0FE7                     	;# 
  1923  0FE8                     	;# 
  1924  0FE9                     	;# 
  1925  0FEA                     	;# 
  1926  0FEB                     	;# 
  1927  0FED                     	;# 
  1928  0FEE                     	;# 
  1929  0FEF                     	;# 
  1930  0000                     	;# 
  1931  0001                     	;# 
  1932  0002                     	;# 
  1933  0003                     	;# 
  1934  0004                     	;# 
  1935  0005                     	;# 
  1936  0006                     	;# 
  1937  0007                     	;# 
  1938  0008                     	;# 
  1939  0009                     	;# 
  1940  000A                     	;# 
  1941  000B                     	;# 
  1942  000C                     	;# 
  1943  000D                     	;# 
  1944  000E                     	;# 
  1945  0010                     	;# 
  1946  0011                     	;# 
  1947  0012                     	;# 
  1948  0015                     	;# 
  1949  0016                     	;# 
  1950  0016                     	;# 
  1951  0017                     	;# 
  1952  0018                     	;# 
  1953  0019                     	;# 
  1954  001A                     	;# 
  1955  001B                     	;# 
  1956  001C                     	;# 
  1957  008C                     	;# 
  1958  008D                     	;# 
  1959  008E                     	;# 
  1960  0090                     	;# 
  1961  0091                     	;# 
  1962  0092                     	;# 
  1963  0095                     	;# 
  1964  0096                     	;# 
  1965  0097                     	;# 
  1966  0099                     	;# 
  1967  009A                     	;# 
  1968  009B                     	;# 
  1969  009B                     	;# 
  1970  009C                     	;# 
  1971  009D                     	;# 
  1972  009E                     	;# 
  1973  010C                     	;# 
  1974  010D                     	;# 
  1975  010E                     	;# 
  1976  0116                     	;# 
  1977  0117                     	;# 
  1978  011D                     	;# 
  1979  018C                     	;# 
  1980  018D                     	;# 
  1981  018E                     	;# 
  1982  0191                     	;# 
  1983  0191                     	;# 
  1984  0192                     	;# 
  1985  0193                     	;# 
  1986  0193                     	;# 
  1987  0194                     	;# 
  1988  0195                     	;# 
  1989  0196                     	;# 
  1990  0197                     	;# 
  1991  0199                     	;# 
  1992  019A                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019C                     	;# 
  1998  019C                     	;# 
  1999  019D                     	;# 
  2000  019E                     	;# 
  2001  019F                     	;# 
  2002  020D                     	;# 
  2003  0210                     	;# 
  2004  0211                     	;# 
  2005  0211                     	;# 
  2006  0212                     	;# 
  2007  0212                     	;# 
  2008  0213                     	;# 
  2009  0213                     	;# 
  2010  0214                     	;# 
  2011  0214                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0216                     	;# 
  2016  0216                     	;# 
  2017  0217                     	;# 
  2018  0217                     	;# 
  2019  0291                     	;# 
  2020  0291                     	;# 
  2021  0292                     	;# 
  2022  0293                     	;# 
  2023  0298                     	;# 
  2024  0298                     	;# 
  2025  0299                     	;# 
  2026  029A                     	;# 
  2027  0394                     	;# 
  2028  0395                     	;# 
  2029  0396                     	;# 
  2030  0FE4                     	;# 
  2031  0FE5                     	;# 
  2032  0FE6                     	;# 
  2033  0FE7                     	;# 
  2034  0FE8                     	;# 
  2035  0FE9                     	;# 
  2036  0FEA                     	;# 
  2037  0FEB                     	;# 
  2038  0FED                     	;# 
  2039  0FEE                     	;# 
  2040  0FEF                     	;# 
  2041                           
  2042                           	psect	idataBANK4
  2043  1F0E                     __pidataBANK4:	
  2044                           
  2045                           ;initializer for __product
  2046  1F0E  3463               	retlw	99
  2047  1F0F  3402               	retlw	2
  2048  1F10  3400               	retlw	0
  2049  1F11  3400               	retlw	0
  2050  1F12  3400               	retlw	0
  2051  1F13  3400               	retlw	0
  2052  1F14  3400               	retlw	0
  2053  1F15  3400               	retlw	0
  2054  1F16  3400               	retlw	0
  2055  1F17  3400               	retlw	0
  2056  1F18  3400               	retlw	0
  2057  1F19  3400               	retlw	0
  2058  1F1A  34FF               	retlw	255
  2059  1F1B  34FF               	retlw	255
  2060  1F1C  34FF               	retlw	255
  2061  1F1D  3400               	retlw	0
  2062  1F1E  3400               	retlw	0
  2063  1F1F  3400               	retlw	0
  2064  1F20  3400               	retlw	0
  2065  1F21  3400               	retlw	0
  2066  1F22  3400               	retlw	0
  2067  1F23  3400               	retlw	0
  2068  1F24  3400               	retlw	0
  2069  1F25  3400               	retlw	0
  2070  1F26  3400               	retlw	0
  2071  1F27  3400               	retlw	0
  2072  1F28  3400               	retlw	0
  2073  1F29  3400               	retlw	0
  2074  1F2A  3400               	retlw	0
  2075  1F2B  3400               	retlw	0
  2076  1F2C  3400               	retlw	0
  2077  1F2D  3400               	retlw	0
  2078                           
  2079                           	psect	stringtext
  2080  1000                     __pstringtext:	
  2081  1000                     _CC2500_registers_address:	
  2082  1000  3403               	retlw	3
  2083  1001  3416               	retlw	22
  2084  1002  3417               	retlw	23
  2085  1003  341E               	retlw	30
  2086  1004  341F               	retlw	31
  2087  1005  3420               	retlw	32
  2088  1006  342A               	retlw	42
  2089  1007  342B               	retlw	43
  2090  1008  340B               	retlw	11
  2091  1009  340C               	retlw	12
  2092  100A  340D               	retlw	13
  2093  100B  340E               	retlw	14
  2094  100C  340F               	retlw	15
  2095  100D  3410               	retlw	16
  2096  100E  3411               	retlw	17
  2097  100F  3412               	retlw	18
  2098  1010  3413               	retlw	19
  2099  1011  3414               	retlw	20
  2100  1012  340A               	retlw	10
  2101  1013  3415               	retlw	21
  2102  1014  3421               	retlw	33
  2103  1015  3422               	retlw	34
  2104  1016  3418               	retlw	24
  2105  1017  3419               	retlw	25
  2106  1018  341A               	retlw	26
  2107  1019  341B               	retlw	27
  2108  101A  341C               	retlw	28
  2109  101B  341D               	retlw	29
  2110  101C  3423               	retlw	35
  2111  101D  3424               	retlw	36
  2112  101E  3425               	retlw	37
  2113  101F  3426               	retlw	38
  2114  1020  3429               	retlw	41
  2115  1021  342C               	retlw	44
  2116  1022  342D               	retlw	45
  2117  1023  342E               	retlw	46
  2118  1024  3400               	retlw	0
  2119  1025  3401               	retlw	1
  2120  1026  3402               	retlw	2
  2121  1027  3407               	retlw	7
  2122  1028  3408               	retlw	8
  2123  1029  3409               	retlw	9
  2124  102A  3406               	retlw	6
  2125  102B  3404               	retlw	4
  2126  102C  3405               	retlw	5
  2127  102D  3427               	retlw	39
  2128  102E  3428               	retlw	40
  2129  102F                     __end_of_CC2500_registers_address:	
  2130  102F                     _CC2500_rfSettings:	
  2131  102F  3407               	retlw	7
  2132  1030  3407               	retlw	7
  2133  1031  3430               	retlw	48
  2134  1032  3487               	retlw	135
  2135  1033  346B               	retlw	107
  2136  1034  34F8               	retlw	248
  2137  1035  347F               	retlw	127
  2138  1036  343F               	retlw	63
  2139  1037  3409               	retlw	9
  2140  1038  3400               	retlw	0
  2141  1039  345C               	retlw	92
  2142  103A  34A7               	retlw	167
  2143  103B  3462               	retlw	98
  2144  103C  3486               	retlw	134
  2145  103D  3483               	retlw	131
  2146  103E  3403               	retlw	3
  2147  103F  3422               	retlw	34
  2148  1040  34F8               	retlw	248
  2149  1041  3400               	retlw	0
  2150  1042  3444               	retlw	68
  2151  1043  34B6               	retlw	182
  2152  1044  3410               	retlw	16
  2153  1045  3418               	retlw	24
  2154  1046  341D               	retlw	29
  2155  1047  341C               	retlw	28
  2156  1048  34C7               	retlw	199
  2157  1049  3400               	retlw	0
  2158  104A  34B2               	retlw	178
  2159  104B  34EA               	retlw	234
  2160  104C  340A               	retlw	10
  2161  104D  3400               	retlw	0
  2162  104E  3411               	retlw	17
  2163  104F  3459               	retlw	89
  2164  1050  3488               	retlw	136
  2165  1051  3431               	retlw	49
  2166  1052  340B               	retlw	11
  2167  1053  342F               	retlw	47
  2168  1054  342E               	retlw	46
  2169  1055  3406               	retlw	6
  2170  1056  3404               	retlw	4
  2171  1057  3405               	retlw	5
  2172  1058  3400               	retlw	0
  2173  1059  3430               	retlw	48
  2174  105A  34D3               	retlw	211
  2175  105B  3491               	retlw	145
  2176  105C  3441               	retlw	65
  2177  105D  3400               	retlw	0
  2178  105E                     __end_of_CC2500_rfSettings:	
  2179  105E                     _CC2500_patable_vaule:	
  2180  105E  34FE               	retlw	254
  2181  105F  34FE               	retlw	254
  2182  1060  34FE               	retlw	254
  2183  1061  34FE               	retlw	254
  2184  1062  34FE               	retlw	254
  2185  1063  34FE               	retlw	254
  2186  1064  34FE               	retlw	254
  2187  1065  34FE               	retlw	254
  2188  1066                     __end_of_CC2500_patable_vaule:	
  2189                           
  2190                           	psect	nvCOMMON
  2191  007B                     __pnvCOMMON:	
  2192  007B                     _product:	
  2193  007B                     	ds	1
  2194  000C                     _PORTA	set	12
  2195  000D                     _PORTB	set	13
  2196  000E                     _PORTC	set	14
  2197  0018                     _T1CON	set	24
  2198  0017                     _TMR1H	set	23
  2199  0016                     _TMR1L	set	22
  2200  005F                     _GIE	set	95
  2201  005B                     _IOCIE	set	91
  2202  0058                     _IOCIF	set	88
  2203  005E                     _PEIE	set	94
  2204  0060                     _RA0	set	96
  2205  0063                     _RA3	set	99
  2206  0064                     _RA4	set	100
  2207  0066                     _RA6	set	102
  2208  0067                     _RA7	set	103
  2209  0068                     _RB0	set	104
  2210  0069                     _RB1	set	105
  2211  006A                     _RB2	set	106
  2212  006B                     _RB3	set	107
  2213  006C                     _RB4	set	108
  2214  006D                     _RB5	set	109
  2215  0070                     _RC0	set	112
  2216  0071                     _RC1	set	113
  2217  0072                     _RC2	set	114
  2218  0074                     _RC4	set	116
  2219  0075                     _RC5	set	117
  2220  0077                     _RC7	set	119
  2221  0088                     _TMR1IF	set	136
  2222  009D                     _ADCON0	set	157
  2223  009E                     _ADCON1	set	158
  2224  009C                     _ADRESH	set	156
  2225  009B                     _ADRESL	set	155
  2226  0099                     _OSCCON	set	153
  2227  008C                     _TRISA	set	140
  2228  008D                     _TRISB	set	141
  2229  008E                     _TRISC	set	142
  2230  0097                     _WDTCON	set	151
  2231  04E9                     _GO_nDONE	set	1257
  2232  0488                     _TMR1IE	set	1160
  2233  0117                     _FVRCON	set	279
  2234  010C                     _LATA	set	268
  2235  010D                     _LATB	set	269
  2236  010E                     _LATC	set	270
  2237  018C                     _ANSELA	set	396
  2238  018D                     _ANSELB	set	397
  2239  018E                     _ANSELC	set	398
  2240  0192                     _PMADRH	set	402
  2241  0191                     _PMADRL	set	401
  2242  0196                     _PMCON2	set	406
  2243  0194                     _PMDATH	set	404
  2244  0193                     _PMDATL	set	403
  2245  0CAE                     _CFGS	set	3246
  2246  0CAC                     _FREE	set	3244
  2247  0CAD                     _LWLO	set	3245
  2248  0CA8                     _RD	set	3240
  2249  0CA9                     _WR	set	3241
  2250  0CAA                     _WREN	set	3242
  2251  1069                     _WPUB1	set	4201
  2252  106A                     _WPUB2	set	4202
  2253  0396                     _IOCBF	set	918
  2254  0395                     _IOCBN	set	917
  2255  0394                     _IOCBP	set	916
  2256  1CB2                     _IOCBF2	set	7346
  2257                           
  2258                           ; #config settings
  2259  0000                     
  2260                           	psect	cinit
  2261  0015                     start_initialization:	
  2262  0015                     __initialization:	
  2263                           
  2264                           ; Clear objects allocated to BITCOMMON
  2265  0015  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2266                           
  2267                           ; Clear objects allocated to COMMON
  2268  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2269  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2270  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2271  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2272                           
  2273                           ; Clear objects allocated to BANK1
  2274  001A  30A0               	movlw	low __pbssBANK1
  2275  001B  0084               	movwf	4
  2276  001C  3000               	movlw	high __pbssBANK1
  2277  001D  0085               	movwf	5
  2278  001E  304A               	movlw	74
  2279  001F  319B  232C  3180   	fcall	clear_ram0
  2280                           
  2281                           ; Clear objects allocated to BANK2
  2282  0022  3020               	movlw	low __pbssBANK2
  2283  0023  0084               	movwf	4
  2284  0024  3001               	movlw	high __pbssBANK2
  2285  0025  0085               	movwf	5
  2286  0026  304D               	movlw	77
  2287  0027  319B  232C  3180   	fcall	clear_ram0
  2288                           
  2289                           ; Clear objects allocated to BANK3
  2290  002A  30A0               	movlw	low __pbssBANK3
  2291  002B  0084               	movwf	4
  2292  002C  3001               	movlw	high __pbssBANK3
  2293  002D  0085               	movwf	5
  2294  002E  3045               	movlw	69
  2295  002F  319B  232C  3180   	fcall	clear_ram0
  2296                           
  2297                           ; Clear objects allocated to BANK4
  2298  0032  3020               	movlw	low __pbssBANK4
  2299  0033  0084               	movwf	4
  2300  0034  3002               	movlw	high __pbssBANK4
  2301  0035  0085               	movwf	5
  2302  0036  3025               	movlw	37
  2303  0037  319B  232C  3180   	fcall	clear_ram0
  2304                           
  2305                           ; Initialize objects allocated to BANK4
  2306  003A  300E               	movlw	low __pidataBANK4
  2307  003B  0084               	movwf	4
  2308  003C  309F               	movlw	(high __pidataBANK4)| (0+128)
  2309  003D  0085               	movwf	5
  2310  003E  3045               	movlw	low __pdataBANK4
  2311  003F  0086               	movwf	6
  2312  0040  3002               	movlw	high __pdataBANK4
  2313  0041  0087               	movwf	7
  2314  0042  3020               	movlw	32
  2315  0043  319B  2326         	fcall	init_ram
  2316  0045                     end_of_initialization:	
  2317                           ;End of C runtime variable initialization code
  2318                           
  2319  0045                     __end_of__initialization:	
  2320  0045  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2321  0046  0020               	movlb	0
  2322  0047  3196  2E9A         	ljmp	_main	;jump to C main() function
  2323                           
  2324                           	psect	bitbssCOMMON
  2325  03D0                     __pbitbssCOMMON:	
  2326  03D0                     _Receive_OK:	
  2327  03D0                     	ds	1
  2328  03D1                     _Transceive_OK:	
  2329  03D1                     	ds	1
  2330                           
  2331                           	psect	bssCOMMON
  2332  0076                     __pbssCOMMON:	
  2333  0076                     _DelayOff:	
  2334  0076                     	ds	1
  2335  0077                     _DimmerLights:	
  2336  0077                     	ds	1
  2337  0078                     _DimmerLightsIntr:	
  2338  0078                     	ds	1
  2339  0079                     _Sw:	
  2340  0079                     	ds	1
  2341                           
  2342                           	psect	bssBANK1
  2343  00A0                     __pbssBANK1:	
  2344  00A0                     _myMain:	
  2345  00A0                     	ds	16
  2346  00B0                     _Buz1:	
  2347  00B0                     	ds	12
  2348  00BC                     _RF1:	
  2349  00BC                     	ds	12
  2350  00C8                     _Dimmer:	
  2351  00C8                     	ds	3
  2352  00CB                     _CRC:	
  2353  00CB                     	ds	1
  2354  00CC                     _DimmerLights11:	
  2355  00CC                     	ds	1
  2356  00CD                     _DimmerLights22:	
  2357  00CD                     	ds	1
  2358  00CE                     _DimmerLightsIntrIOC:	
  2359  00CE                     	ds	1
  2360  00CF                     _LED:	
  2361  00CF                     	ds	1
  2362  00D0                     _RSSI:	
  2363  00D0                     	ds	1
  2364  00D1                     _Rx_Length:	
  2365  00D1                     	ds	1
  2366  00D2                     _SPI0Buffer:	
  2367  00D2                     	ds	1
  2368  00D3                     _SwDetect:	
  2369  00D3                     	ds	1
  2370  00D4                     _Tx_Length:	
  2371  00D4                     	ds	1
  2372  00D5                     _r_address:	
  2373  00D5                     	ds	1
  2374  00D6                     _r_data:	
  2375  00D6                     	ds	1
  2376  00D7                     _s_data:	
  2377  00D7                     	ds	1
  2378  00D8                     _Temp:	
  2379  00D8                     	ds	18
  2380                           
  2381                           	psect	bssBANK2
  2382  0120                     __pbssBANK2:	
  2383  0120                     _Timer1:	
  2384  0120                     	ds	3
  2385  0123                     _RF_Count:	
  2386  0123                     	ds	2
  2387  0125                     _WDT:	
  2388  0125                     	ds	2
  2389  0127                     _Load:	
  2390  0127                     	ds	45
  2391  0154                     _Sw1:	
  2392  0154                     	ds	9
  2393  015D                     _VarErrLED:	
  2394  015D                     	ds	4
  2395  0161                     _VarLED1:	
  2396  0161                     	ds	4
  2397  0165                     _VarLED2:	
  2398  0165                     	ds	4
  2399  0169                     _DlySw1:	
  2400  0169                     	ds	2
  2401  016B                     _DlySw2:	
  2402  016B                     	ds	2
  2403                           
  2404                           	psect	bssBANK3
  2405  01A0                     __pbssBANK3:	
  2406  01A0                     _RF_Data:	
  2407  01A0                     	ds	30
  2408  01BE                     _DimmerLights1:	
  2409  01BE                     	ds	15
  2410  01CD                     _DimmerLights2:	
  2411  01CD                     	ds	15
  2412  01DC                     _Sw2:	
  2413  01DC                     	ds	9
  2414                           
  2415                           	psect	bssBANK4
  2416  0220                     __pbssBANK4:	
  2417  0220                     _Memory:	
  2418  0220                     	ds	37
  2419                           
  2420                           	psect	dataBANK4
  2421  0245                     __pdataBANK4:	
  2422  0245                     __product:	
  2423  0245                     	ds	32
  2424                           
  2425                           	psect	clrtext
  2426  1B2C                     clear_ram0:	
  2427                           ;	Called with FSR0 containing the base address, and
  2428                           ;	WREG with the size to clear
  2429                           
  2430  1B2C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2431  1B2D                     clrloop0:	
  2432  1B2D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2433  1B2E  3101               	addfsr 0,1
  2434  1B2F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2435  1B30  2B2D               	goto	clrloop0	;have we reached the end yet?
  2436  1B31  3400               	retlw	0	;all done for this memory range, return
  2437                           
  2438                           	psect	inittext
  2439  1B26                     init_ram:	
  2440  1B26  00FE               	movwf	126
  2441  1B27                     initloop:	
  2442  1B27  0012               	moviw fsr0++
  2443  1B28  001E               	movwi fsr1++
  2444  1B29  0BFE               	decfsz	126,f
  2445  1B2A  2B27               	goto	initloop
  2446  1B2B  3400               	retlw	0
  2447                           
  2448                           	psect	cstackBANK3
  2449  01E5                     __pcstackBANK3:	
  2450  01E5                     ?_main:	
  2451  01E5                     main@argc:	
  2452                           ; 2 bytes @ 0x0
  2453                           
  2454                           
  2455                           ; 2 bytes @ 0x0
  2456  01E5                     	ds	2
  2457  01E7                     main@argv:	
  2458                           
  2459                           ; 2 bytes @ 0x2
  2460  01E7                     	ds	2
  2461                           
  2462                           	psect	cstackBANK1
  2463  00EA                     __pcstackBANK1:	
  2464  00EA                     setMain_Exception@buz:	
  2465                           
  2466                           ; 1 bytes @ 0x0
  2467  00EA                     	ds	1
  2468  00EB                     _setMain_Exception$3935:	
  2469                           
  2470                           ; 2 bytes @ 0x1
  2471  00EB                     	ds	2
  2472  00ED                     setMain_Exception@status:	
  2473                           
  2474                           ; 1 bytes @ 0x3
  2475  00ED                     	ds	1
  2476  00EE                     setMain_Exception@command:	
  2477                           
  2478                           ; 1 bytes @ 0x4
  2479  00EE                     	ds	1
  2480                           
  2481                           	psect	cstackCOMMON
  2482  0070                     __pcstackCOMMON:	
  2483  0070                     ?_Timeout_Counter:	
  2484  0070                     ?_set_TimeoutCleared:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_CC2500_WriteByte:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_CC2500_WriteCommand:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_CC2500_ReadStatus:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_CC2500_ReadByte:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_CC2500_PowerRST:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_CC2500_InitSetREG:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_CC2500_InitPATable:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_CC2500_ClearTXFIFO:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_CC2500_ClearRXFIFO:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_CC2500_FrequencyCabr:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_CC2500_SIDLEMode:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_DlyOff_Initialization:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_DlyOff_Main:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_setDimmerLights_SwOn:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_setDimmerLights_SwOff:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_setDimmerLights_Initialization:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_Dimmer_Initialization:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_setDimmerLights_Main:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_setTxData:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_setDimmerLights_Line:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_setLED_Initialization:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_setLED_Main:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_Fosc_Set:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_IO_Set:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_TMR1_Set:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_ADC_Set:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_IOC_Set:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_WDT_Set:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_IOC_ISR:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_TMR1_ISR:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_Flash_Memory_Write:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_Flash_Memory_Modify:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_WDT_Clearing:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_myMain_Initialization:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_Temp_Initialization:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_Load_Initialization:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_Switch_Initialization:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_RF_Initialization:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_getLoad_AD:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_getTemp_AD:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_my_MainTimer:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_Temp_Main:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_Load_Main:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_Switch_Main:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_RF_Main:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_setLoad_AH_AL_Restore:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_setTemp_Initialization:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_setTemp_Main:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setRF_Initialization:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setRF_Main:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_getRxData:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setLog_Code:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setControl_Lights_Table:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setRFSW_Control:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setRFSW_AdjControl:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setRF_DimmerValue:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setSw_Initialization:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setSw_Main:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_Buzzer_Initialization:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_Buzzer_Main:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_CC2500_TxData:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_CC2500_RxData:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_CC2500_PowerOnInitial:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_DelayOffPointSelect:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_DelayOff_Initialization:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_DelayOff_Main:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_DimmerIntrIOCPointSelect:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ??_DimmerIntrIOCPointSelect:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_DimmerIntrPointSelect:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ??_DimmerIntrPointSelect:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_setDimmerLights_IntrControl:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_DimmerLightsPointSelect:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_DimmerLights_Initialization:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_DimmerLights_Main:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_setDimmerLights_AdjControl:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_setDimmerLights_ErrorClose:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_setDimmerLights_AdjRF:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_LedPointSelect:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_LED_Initialization:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_LED_Main:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Mcu_Initialization:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_ISR:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_setDimmerReClock:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Flash_Memory_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Flash_Memory_Main:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_Flash_Memory_Unlock:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_Flash_Memory_Erasing:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_setMemory_Modify:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setMemory_LoopSave:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_WDT_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_setMain_Exception:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_setRF_Learn:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_TouchPower:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_SwPointSelect:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_getDimmerLights_Status:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_DelayTimejudge:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778  0070                     ?_getMain_All_Error_Status:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0070                     ?_getLoad_OK:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?_getMain_LightsStatus:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787  0070                     ?_getPercentValue:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0070                     ?_Flash_Memory_Read:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793  0070                     ?_getRF_KeyStatus:	
  2794                           ; 1 bytes @ 0x0
  2795                           
  2796  0070                     ?_getSw_KeyStatus:	
  2797                           ; 1 bytes @ 0x0
  2798                           
  2799  0070                     ?_getAll_DimmerLights_AdjGO:	
  2800                           ; 1 bytes @ 0x0
  2801                           
  2802  0070                     ?_getDimmer_LoadOK:	
  2803                           ; 1 bytes @ 0x0
  2804                           
  2805  0070                     ?_getDimmerLights_Line:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808  0070                     ?_setPercentValue:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ?_getMain_Lights_Count:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ?_getMain_LoadOK:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817                           
  2818                           ; 1 bytes @ 0x0
  2819  0070                     	ds	1
  2820  0071                     DimmerIntrIOCPointSelect@lights:	
  2821  0071                     DimmerIntrPointSelect@lights:	
  2822                           ; 1 bytes @ 0x1
  2823                           
  2824                           
  2825                           ; 1 bytes @ 0x1
  2826  0071                     	ds	1
  2827  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2828  0072                     ??_setDimmerLights_IntrControl:	
  2829                           ; 0 bytes @ 0x2
  2830                           
  2831  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2832                           ; 0 bytes @ 0x2
  2833                           
  2834                           
  2835                           ; 1 bytes @ 0x2
  2836  0072                     	ds	1
  2837  0073                     ??_IOC_ISR:	
  2838  0073                     ??_setDimmerReClock:	
  2839                           ; 0 bytes @ 0x3
  2840                           
  2841                           
  2842                           ; 0 bytes @ 0x3
  2843  0073                     	ds	1
  2844  0074                     setDimmerLights_IntrControl@lights:	
  2845                           
  2846                           ; 1 bytes @ 0x4
  2847  0074                     	ds	1
  2848  0075                     ??_TMR1_ISR:	
  2849  0075                     ??_ISR:	
  2850                           ; 0 bytes @ 0x5
  2851                           
  2852                           
  2853                           ; 0 bytes @ 0x5
  2854  0075                     	ds	1
  2855                           
  2856                           	psect	cstackBANK0
  2857  0020                     __pcstackBANK0:	
  2858  0020                     ??_Timeout_Counter:	
  2859  0020                     ??_set_TimeoutCleared:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_CC2500_WriteByte:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_CC2500_ReadByte:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ?_DelayTime_1us:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_Dimmer_Initialization:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_getMain_All_Error_Status:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_getLoad_OK:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_setTxData:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_setDimmerLights_Line:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_Fosc_Set:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_IO_Set:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_TMR1_Set:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_ADC_Set:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_IOC_Set:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_WDT_Set:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_Flash_Memory_Read:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ?_setMemory_Data:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ??_Flash_Memory_Write:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_WDT_Clearing:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_myMain_Initialization:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ??_Temp_Initialization:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ??_setLoad_AH_AL_Restore:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_setTemp_Initialization:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ??_setRF_Initialization:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ??_getRF_KeyStatus:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0020                     ??_Buzzer_Initialization:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0020                     ??_Buzzer_Main:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0020                     ??_DelayOffPointSelect:	
  2941                           ; 0 bytes @ 0x0
  2942                           
  2943  0020                     ??_DimmerLightsPointSelect:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0020                     ??_getSw_KeyStatus:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0020                     ??_getAll_DimmerLights_AdjGO:	
  2950                           ; 0 bytes @ 0x0
  2951                           
  2952  0020                     ??_getDimmer_LoadOK:	
  2953                           ; 0 bytes @ 0x0
  2954                           
  2955  0020                     ??_getDimmerLights_Line:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0020                     ??_LedPointSelect:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0020                     ??_Flash_Memory_Unlock:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0020                     ??_Flash_Memory_Erasing:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0020                     ??_setMemory_Modify:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_setMemory_LoopSave:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_WDT_Main:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_getMain_Lights_Count:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_setRF_Learn:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_TouchPower:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_SwPointSelect:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ?___bmul:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ?_getBuz_GO:	
  2992                           ; 1 bytes @ 0x0
  2993                           
  2994  0020                     ?_getAD:	
  2995                           ; 2 bytes @ 0x0
  2996                           
  2997  0020                     ?___awdiv:	
  2998                           ; 2 bytes @ 0x0
  2999                           
  3000  0020                     ?___ftpack:	
  3001                           ; 2 bytes @ 0x0
  3002                           
  3003  0020                     getDimmer_LoadOK@status:	
  3004                           ; 3 bytes @ 0x0
  3005                           
  3006  0020                     setDimmerLights_Line@lights:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009  0020                     getAD@adcon1:	
  3010                           ; 1 bytes @ 0x0
  3011                           
  3012  0020                     setMemory_Data@data:	
  3013                           ; 1 bytes @ 0x0
  3014                           
  3015  0020                     getMain_Lights_Count@count:	
  3016                           ; 1 bytes @ 0x0
  3017                           
  3018  0020                     getLoad_OK@ok:	
  3019                           ; 1 bytes @ 0x0
  3020                           
  3021  0020                     ___bmul@multiplicand:	
  3022                           ; 1 bytes @ 0x0
  3023                           
  3024  0020                     DelayTime_1us@count:	
  3025                           ; 1 bytes @ 0x0
  3026                           
  3027  0020                     ___awdiv@divisor:	
  3028                           ; 2 bytes @ 0x0
  3029                           
  3030  0020                     ___ftpack@arg:	
  3031                           ; 2 bytes @ 0x0
  3032                           
  3033                           
  3034                           ; 3 bytes @ 0x0
  3035  0020                     	ds	1
  3036  0021                     ??_setMemory_Data:	
  3037  0021                     ??_RF_Initialization:	
  3038                           ; 0 bytes @ 0x1
  3039                           
  3040  0021                     ??_Mcu_Initialization:	
  3041                           ; 0 bytes @ 0x1
  3042                           
  3043  0021                     ??_getMain_LoadOK:	
  3044                           ; 0 bytes @ 0x1
  3045                           
  3046  0021                     ??___bmul:	
  3047                           ; 0 bytes @ 0x1
  3048                           
  3049  0021                     CC2500_WriteByte@loop_a:	
  3050                           ; 0 bytes @ 0x1
  3051                           
  3052  0021                     CC2500_ReadByte@loop_b:	
  3053                           ; 1 bytes @ 0x1
  3054                           
  3055  0021                     DelayOffPointSelect@sw:	
  3056                           ; 1 bytes @ 0x1
  3057                           
  3058  0021                     DimmerLightsPointSelect@lights:	
  3059                           ; 1 bytes @ 0x1
  3060                           
  3061  0021                     _getSw_KeyStatus$2573:	
  3062                           ; 1 bytes @ 0x1
  3063                           
  3064  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3065                           ; 1 bytes @ 0x1
  3066                           
  3067  0021                     getDimmerLights_Line@line:	
  3068                           ; 1 bytes @ 0x1
  3069                           
  3070  0021                     LedPointSelect@led:	
  3071                           ; 1 bytes @ 0x1
  3072                           
  3073  0021                     Flash_Memory_Read@i:	
  3074                           ; 1 bytes @ 0x1
  3075                           
  3076  0021                     Flash_Memory_Write@i:	
  3077                           ; 1 bytes @ 0x1
  3078                           
  3079  0021                     setMemory_Modify@command:	
  3080                           ; 1 bytes @ 0x1
  3081                           
  3082  0021                     setMemory_LoopSave@command:	
  3083                           ; 1 bytes @ 0x1
  3084                           
  3085  0021                     getMain_Lights_Count@status3:	
  3086                           ; 1 bytes @ 0x1
  3087                           
  3088  0021                     setLoad_AH_AL_Restore@i:	
  3089                           ; 1 bytes @ 0x1
  3090                           
  3091  0021                     setRF_Learn@command:	
  3092                           ; 1 bytes @ 0x1
  3093                           
  3094  0021                     getRF_KeyStatus@key:	
  3095                           ; 1 bytes @ 0x1
  3096                           
  3097  0021                     SwPointSelect@sw:	
  3098                           ; 1 bytes @ 0x1
  3099                           
  3100  0021                     _getMain_All_Error_Status$3952:	
  3101                           ; 1 bytes @ 0x1
  3102                           
  3103                           
  3104                           ; 2 bytes @ 0x1
  3105  0021                     	ds	1
  3106  0022                     ??_CC2500_WriteCommand:	
  3107  0022                     ??_CC2500_ReadStatus:	
  3108                           ; 0 bytes @ 0x2
  3109                           
  3110  0022                     ??_DelayTime_1us:	
  3111                           ; 0 bytes @ 0x2
  3112                           
  3113  0022                     ?_CC2500_WriteREG:	
  3114                           ; 0 bytes @ 0x2
  3115                           
  3116  0022                     ??_DlyOff_Initialization:	
  3117                           ; 0 bytes @ 0x2
  3118                           
  3119  0022                     ??_getDimmerLights_Status:	
  3120                           ; 0 bytes @ 0x2
  3121                           
  3122  0022                     ??_setDimmerLights_Initialization:	
  3123                           ; 0 bytes @ 0x2
  3124                           
  3125  0022                     ?_setDimmerLights_Trigger:	
  3126                           ; 0 bytes @ 0x2
  3127                           
  3128  0022                     ?_setDimmerLights_TriggerAdj:	
  3129                           ; 0 bytes @ 0x2
  3130                           
  3131  0022                     ?_setLED:	
  3132                           ; 0 bytes @ 0x2
  3133                           
  3134  0022                     ??_setLED_Main:	
  3135                           ; 0 bytes @ 0x2
  3136                           
  3137  0022                     ??_Load_Initialization:	
  3138                           ; 0 bytes @ 0x2
  3139                           
  3140  0022                     ??_getBuz_GO:	
  3141                           ; 0 bytes @ 0x2
  3142                           
  3143  0022                     CC2500_WriteREG@value:	
  3144                           ; 0 bytes @ 0x2
  3145                           
  3146  0022                     DlyOff_Initialization@sw:	
  3147                           ; 1 bytes @ 0x2
  3148                           
  3149  0022                     getDimmerLights_Status@lights:	
  3150                           ; 1 bytes @ 0x2
  3151                           
  3152  0022                     _getSw_KeyStatus$2574:	
  3153                           ; 1 bytes @ 0x2
  3154                           
  3155  0022                     _getAll_DimmerLights_AdjGO$2577:	
  3156                           ; 1 bytes @ 0x2
  3157                           
  3158  0022                     setDimmerLights_Trigger@command:	
  3159                           ; 1 bytes @ 0x2
  3160                           
  3161  0022                     setDimmerLights_TriggerAdj@command:	
  3162                           ; 1 bytes @ 0x2
  3163                           
  3164  0022                     setLED@command:	
  3165                           ; 1 bytes @ 0x2
  3166                           
  3167  0022                     Flash_Memory_Read@address:	
  3168                           ; 1 bytes @ 0x2
  3169                           
  3170  0022                     setMemory_Data@address:	
  3171                           ; 1 bytes @ 0x2
  3172                           
  3173  0022                     getMain_Lights_Count@status1:	
  3174                           ; 1 bytes @ 0x2
  3175                           
  3176  0022                     getMain_LoadOK@ok:	
  3177                           ; 1 bytes @ 0x2
  3178                           
  3179  0022                     _getRF_KeyStatus$5717:	
  3180                           ; 1 bytes @ 0x2
  3181                           
  3182  0022                     ___bmul@product:	
  3183                           ; 1 bytes @ 0x2
  3184                           
  3185  0022                     DelayTime_1us@i:	
  3186                           ; 1 bytes @ 0x2
  3187                           
  3188  0022                     ___awdiv@dividend:	
  3189                           ; 2 bytes @ 0x2
  3190                           
  3191                           
  3192                           ; 2 bytes @ 0x2
  3193  0022                     	ds	1
  3194  0023                     ??_CC2500_WriteREG:	
  3195  0023                     ??_setDimmerLights_Trigger:	
  3196                           ; 0 bytes @ 0x3
  3197                           
  3198  0023                     ??_setDimmerLights_TriggerAdj:	
  3199                           ; 0 bytes @ 0x3
  3200                           
  3201  0023                     ??_setLED:	
  3202                           ; 0 bytes @ 0x3
  3203                           
  3204  0023                     ??_DelayOff_Initialization:	
  3205                           ; 0 bytes @ 0x3
  3206                           
  3207  0023                     ??_getAD:	
  3208                           ; 0 bytes @ 0x3
  3209                           
  3210  0023                     CC2500_WriteCommand@command:	
  3211                           ; 0 bytes @ 0x3
  3212                           
  3213  0023                     CC2500_ReadStatus@status_addr:	
  3214                           ; 1 bytes @ 0x3
  3215                           
  3216  0023                     setDimmerLights_Initialization@lights:	
  3217                           ; 1 bytes @ 0x3
  3218                           
  3219  0023                     getDimmerLights_Status@status:	
  3220                           ; 1 bytes @ 0x3
  3221                           
  3222  0023                     getSw_KeyStatus@status:	
  3223                           ; 1 bytes @ 0x3
  3224                           
  3225  0023                     setLED@led:	
  3226                           ; 1 bytes @ 0x3
  3227                           
  3228  0023                     getAD@adcon0:	
  3229                           ; 1 bytes @ 0x3
  3230                           
  3231  0023                     Flash_Memory_Read@ret:	
  3232                           ; 1 bytes @ 0x3
  3233                           
  3234  0023                     getMain_Lights_Count@status2:	
  3235                           ; 1 bytes @ 0x3
  3236                           
  3237  0023                     ___bmul@multiplier:	
  3238                           ; 1 bytes @ 0x3
  3239                           
  3240  0023                     ___ftpack@exp:	
  3241                           ; 1 bytes @ 0x3
  3242                           
  3243  0023                     _getMain_All_Error_Status$3961:	
  3244                           ; 1 bytes @ 0x3
  3245                           
  3246                           
  3247                           ; 2 bytes @ 0x3
  3248  0023                     	ds	1
  3249  0024                     ??_CC2500_ClearTXFIFO:	
  3250  0024                     ??_CC2500_ClearRXFIFO:	
  3251                           ; 0 bytes @ 0x4
  3252                           
  3253  0024                     ??_CC2500_SIDLEMode:	
  3254                           ; 0 bytes @ 0x4
  3255                           
  3256  0024                     ??_DelayTimejudge:	
  3257                           ; 0 bytes @ 0x4
  3258                           
  3259  0024                     ??_getMain_LightsStatus:	
  3260                           ; 0 bytes @ 0x4
  3261                           
  3262  0024                     ??_setLED_Initialization:	
  3263                           ; 0 bytes @ 0x4
  3264                           
  3265  0024                     ??_Flash_Memory_Modify:	
  3266                           ; 0 bytes @ 0x4
  3267                           
  3268  0024                     ??_getLoad_AD:	
  3269                           ; 0 bytes @ 0x4
  3270                           
  3271  0024                     ??_getTemp_AD:	
  3272                           ; 0 bytes @ 0x4
  3273                           
  3274  0024                     ??_setSw_Initialization:	
  3275                           ; 0 bytes @ 0x4
  3276                           
  3277  0024                     ??_CC2500_TxData:	
  3278                           ; 0 bytes @ 0x4
  3279                           
  3280  0024                     ??_CC2500_RxData:	
  3281                           ; 0 bytes @ 0x4
  3282                           
  3283  0024                     ??_DimmerLights_Initialization:	
  3284                           ; 0 bytes @ 0x4
  3285                           
  3286  0024                     ??___awdiv:	
  3287                           ; 0 bytes @ 0x4
  3288                           
  3289  0024                     CC2500_WriteREG@w_addr:	
  3290                           ; 0 bytes @ 0x4
  3291                           
  3292  0024                     getSw_KeyStatus@sw:	
  3293                           ; 1 bytes @ 0x4
  3294                           
  3295  0024                     setDimmerLights_Trigger@lights:	
  3296                           ; 1 bytes @ 0x4
  3297                           
  3298  0024                     setDimmerLights_TriggerAdj@lights:	
  3299                           ; 1 bytes @ 0x4
  3300                           
  3301  0024                     setLED_Initialization@led:	
  3302                           ; 1 bytes @ 0x4
  3303                           
  3304  0024                     setLED_Main@led:	
  3305                           ; 1 bytes @ 0x4
  3306                           
  3307  0024                     setSw_Initialization@sw:	
  3308                           ; 1 bytes @ 0x4
  3309                           
  3310  0024                     ___ftpack@sign:	
  3311                           ; 1 bytes @ 0x4
  3312                           
  3313  0024                     getBuz_GO@i:	
  3314                           ; 1 bytes @ 0x4
  3315                           
  3316  0024                     DelayTime_1us@j:	
  3317                           ; 2 bytes @ 0x4
  3318                           
  3319                           
  3320                           ; 2 bytes @ 0x4
  3321  0024                     	ds	1
  3322  0025                     ??_CC2500_InitSetREG:	
  3323  0025                     ??_CC2500_InitPATable:	
  3324                           ; 0 bytes @ 0x5
  3325                           
  3326  0025                     ??_Switch_Initialization:	
  3327                           ; 0 bytes @ 0x5
  3328                           
  3329  0025                     ??___ftpack:	
  3330                           ; 0 bytes @ 0x5
  3331                           
  3332  0025                     ??_setDimmerLights_AdjControl:	
  3333                           ; 0 bytes @ 0x5
  3334                           
  3335  0025                     ??_LED_Initialization:	
  3336                           ; 0 bytes @ 0x5
  3337                           
  3338  0025                     ??_LED_Main:	
  3339                           ; 0 bytes @ 0x5
  3340                           
  3341  0025                     CC2500_TxData@loop_e:	
  3342                           ; 0 bytes @ 0x5
  3343                           
  3344  0025                     CC2500_RxData@loop_f:	
  3345                           ; 1 bytes @ 0x5
  3346                           
  3347  0025                     Flash_Memory_Modify@i:	
  3348                           ; 1 bytes @ 0x5
  3349                           
  3350  0025                     getMain_LightsStatus@count:	
  3351                           ; 1 bytes @ 0x5
  3352                           
  3353  0025                     getMain_All_Error_Status@command:	
  3354                           ; 1 bytes @ 0x5
  3355                           
  3356  0025                     getTemp_AD@channel:	
  3357                           ; 1 bytes @ 0x5
  3358                           
  3359  0025                     ___awdiv@counter:	
  3360                           ; 1 bytes @ 0x5
  3361                           
  3362                           
  3363                           ; 1 bytes @ 0x5
  3364  0025                     	ds	1
  3365  0026                     ??_CC2500_PowerRST:	
  3366  0026                     ??_CC2500_FrequencyCabr:	
  3367                           ; 0 bytes @ 0x6
  3368                           
  3369  0026                     CC2500_InitSetREG@temp1:	
  3370                           ; 0 bytes @ 0x6
  3371                           
  3372  0026                     CC2500_InitPATable@temp:	
  3373                           ; 1 bytes @ 0x6
  3374                           
  3375  0026                     DelayTimejudge@i:	
  3376                           ; 1 bytes @ 0x6
  3377                           
  3378  0026                     setDimmerLights_AdjControl@idle:	
  3379                           ; 1 bytes @ 0x6
  3380                           
  3381  0026                     getMain_All_Error_Status@status:	
  3382                           ; 1 bytes @ 0x6
  3383                           
  3384  0026                     getLoad_AD@channel:	
  3385                           ; 1 bytes @ 0x6
  3386                           
  3387  0026                     ___awdiv@sign:	
  3388                           ; 1 bytes @ 0x6
  3389                           
  3390  0026                     getMain_LightsStatus@i:	
  3391                           ; 1 bytes @ 0x6
  3392                           
  3393                           
  3394                           ; 2 bytes @ 0x6
  3395  0026                     	ds	1
  3396  0027                     ?_setDimmerLights:	
  3397  0027                     ??_setTemp_Main:	
  3398                           ; 0 bytes @ 0x7
  3399                           
  3400  0027                     CC2500_InitSetREG@temp2:	
  3401                           ; 0 bytes @ 0x7
  3402                           
  3403  0027                     CC2500_InitPATable@loop_d:	
  3404                           ; 1 bytes @ 0x7
  3405                           
  3406  0027                     DelayTimejudge@j:	
  3407                           ; 1 bytes @ 0x7
  3408                           
  3409  0027                     _setDimmerLights_AdjControl$2589:	
  3410                           ; 1 bytes @ 0x7
  3411                           
  3412  0027                     setDimmerLights@status:	
  3413                           ; 1 bytes @ 0x7
  3414                           
  3415  0027                     getLoad_AD@k:	
  3416                           ; 1 bytes @ 0x7
  3417                           
  3418  0027                     ___awdiv@quotient:	
  3419                           ; 1 bytes @ 0x7
  3420                           
  3421                           
  3422                           ; 2 bytes @ 0x7
  3423  0027                     	ds	1
  3424  0028                     ??_setDimmerLights:	
  3425  0028                     ?___awtoft:	
  3426                           ; 0 bytes @ 0x8
  3427                           
  3428  0028                     CC2500_InitSetREG@loop_c:	
  3429                           ; 3 bytes @ 0x8
  3430                           
  3431  0028                     DelayTimejudge@k:	
  3432                           ; 1 bytes @ 0x8
  3433                           
  3434  0028                     setDimmerLights_AdjControl@sw:	
  3435                           ; 1 bytes @ 0x8
  3436                           
  3437  0028                     getMain_LightsStatus@status:	
  3438                           ; 1 bytes @ 0x8
  3439                           
  3440  0028                     getLoad_AD@j:	
  3441                           ; 1 bytes @ 0x8
  3442                           
  3443  0028                     ___awtoft@c:	
  3444                           ; 1 bytes @ 0x8
  3445                           
  3446                           
  3447                           ; 2 bytes @ 0x8
  3448  0028                     	ds	1
  3449  0029                     ??_Temp_Main:	
  3450  0029                     ??_Load_Main:	
  3451                           ; 0 bytes @ 0x9
  3452                           
  3453  0029                     ?_setBuz:	
  3454                           ; 0 bytes @ 0x9
  3455                           
  3456  0029                     ??_CC2500_PowerOnInitial:	
  3457                           ; 0 bytes @ 0x9
  3458                           
  3459  0029                     ??_Flash_Memory_Main:	
  3460                           ; 0 bytes @ 0x9
  3461                           
  3462  0029                     DelayTimejudge@value:	
  3463                           ; 0 bytes @ 0x9
  3464                           
  3465  0029                     setDimmerLights@lights:	
  3466                           ; 1 bytes @ 0x9
  3467                           
  3468  0029                     getLoad_AD@i:	
  3469                           ; 1 bytes @ 0x9
  3470                           
  3471  0029                     setBuz@time:	
  3472                           ; 1 bytes @ 0x9
  3473                           
  3474                           
  3475                           ; 2 bytes @ 0x9
  3476  0029                     	ds	1
  3477  002A                     ?_setDelayOff_GO:	
  3478  002A                     setDelayOff_GO@command:	
  3479                           ; 0 bytes @ 0xA
  3480                           
  3481                           
  3482                           ; 1 bytes @ 0xA
  3483  002A                     	ds	1
  3484  002B                     ??_setBuz:	
  3485  002B                     ??___awtoft:	
  3486                           ; 0 bytes @ 0xB
  3487                           
  3488  002B                     setDelayOff_GO@value:	
  3489                           ; 0 bytes @ 0xB
  3490                           
  3491  002B                     Load_Main@j:	
  3492                           ; 1 bytes @ 0xB
  3493                           
  3494                           
  3495                           ; 1 bytes @ 0xB
  3496  002B                     	ds	1
  3497  002C                     ??_setDelayOff_GO:	
  3498  002C                     setBuz@count:	
  3499                           ; 0 bytes @ 0xC
  3500                           
  3501  002C                     Load_Main@adjgo:	
  3502                           ; 1 bytes @ 0xC
  3503                           
  3504                           
  3505                           ; 1 bytes @ 0xC
  3506  002C                     	ds	1
  3507  002D                     ??_my_MainTimer:	
  3508  002D                     ??_setLog_Code:	
  3509                           ; 0 bytes @ 0xD
  3510                           
  3511  002D                     _Load_Main$4316:	
  3512                           ; 0 bytes @ 0xD
  3513                           
  3514  002D                     ___awtoft@sign:	
  3515                           ; 1 bytes @ 0xD
  3516                           
  3517                           
  3518                           ; 1 bytes @ 0xD
  3519  002D                     	ds	1
  3520  002E                     ?___ftdiv:	
  3521  002E                     ?___ftmul:	
  3522                           ; 3 bytes @ 0xE
  3523                           
  3524  002E                     setDelayOff_GO@sw:	
  3525                           ; 3 bytes @ 0xE
  3526                           
  3527  002E                     Load_Main@error:	
  3528                           ; 1 bytes @ 0xE
  3529                           
  3530  002E                     ___ftdiv@f2:	
  3531                           ; 1 bytes @ 0xE
  3532                           
  3533  002E                     ___ftmul@f1:	
  3534                           ; 3 bytes @ 0xE
  3535                           
  3536                           
  3537                           ; 3 bytes @ 0xE
  3538  002E                     	ds	1
  3539  002F                     Load_Main@i:	
  3540                           
  3541                           ; 1 bytes @ 0xF
  3542  002F                     	ds	2
  3543  0031                     ___ftdiv@f1:	
  3544  0031                     ___ftmul@f2:	
  3545                           ; 3 bytes @ 0x11
  3546                           
  3547                           
  3548                           ; 3 bytes @ 0x11
  3549  0031                     	ds	3
  3550  0034                     ??___ftdiv:	
  3551  0034                     ??___ftmul:	
  3552                           ; 0 bytes @ 0x14
  3553                           
  3554                           
  3555                           ; 0 bytes @ 0x14
  3556  0034                     	ds	4
  3557  0038                     ___ftdiv@cntr:	
  3558  0038                     ___ftmul@exp:	
  3559                           ; 1 bytes @ 0x18
  3560                           
  3561                           
  3562                           ; 1 bytes @ 0x18
  3563  0038                     	ds	1
  3564  0039                     ___ftdiv@f3:	
  3565  0039                     ___ftmul@f3_as_product:	
  3566                           ; 3 bytes @ 0x19
  3567                           
  3568                           
  3569                           ; 3 bytes @ 0x19
  3570  0039                     	ds	3
  3571  003C                     ___ftdiv@exp:	
  3572  003C                     ___ftmul@cntr:	
  3573                           ; 1 bytes @ 0x1C
  3574                           
  3575                           
  3576                           ; 1 bytes @ 0x1C
  3577  003C                     	ds	1
  3578  003D                     ___ftdiv@sign:	
  3579  003D                     ___ftmul@sign:	
  3580                           ; 1 bytes @ 0x1D
  3581                           
  3582                           
  3583                           ; 1 bytes @ 0x1D
  3584  003D                     	ds	1
  3585  003E                     ?___ftadd:	
  3586  003E                     ___ftadd@f1:	
  3587                           ; 3 bytes @ 0x1E
  3588                           
  3589                           
  3590                           ; 3 bytes @ 0x1E
  3591  003E                     	ds	3
  3592  0041                     ___ftadd@f2:	
  3593                           
  3594                           ; 3 bytes @ 0x21
  3595  0041                     	ds	3
  3596  0044                     ??___ftadd:	
  3597                           
  3598                           ; 0 bytes @ 0x24
  3599  0044                     	ds	4
  3600  0048                     ___ftadd@sign:	
  3601                           
  3602                           ; 1 bytes @ 0x28
  3603  0048                     	ds	1
  3604  0049                     ___ftadd@exp2:	
  3605                           
  3606                           ; 1 bytes @ 0x29
  3607  0049                     	ds	1
  3608  004A                     ___ftadd@exp1:	
  3609                           
  3610                           ; 1 bytes @ 0x2A
  3611  004A                     	ds	1
  3612  004B                     ?___fttol:	
  3613  004B                     ___fttol@f1:	
  3614                           ; 4 bytes @ 0x2B
  3615                           
  3616                           
  3617                           ; 3 bytes @ 0x2B
  3618  004B                     	ds	4
  3619  004F                     ??___fttol:	
  3620                           
  3621                           ; 0 bytes @ 0x2F
  3622  004F                     	ds	4
  3623  0053                     ___fttol@sign1:	
  3624                           
  3625                           ; 1 bytes @ 0x33
  3626  0053                     	ds	1
  3627  0054                     ___fttol@lval:	
  3628                           
  3629                           ; 4 bytes @ 0x34
  3630  0054                     	ds	4
  3631  0058                     ___fttol@exp1:	
  3632                           
  3633                           ; 1 bytes @ 0x38
  3634  0058                     	ds	1
  3635  0059                     ??_getPercentValue:	
  3636  0059                     ??_setPercentValue:	
  3637                           ; 0 bytes @ 0x39
  3638                           
  3639  0059                     setPercentValue@value:	
  3640                           ; 0 bytes @ 0x39
  3641                           
  3642                           
  3643                           ; 1 bytes @ 0x39
  3644  0059                     	ds	1
  3645  005A                     setPercentValue@i:	
  3646                           
  3647                           ; 3 bytes @ 0x3A
  3648  005A                     	ds	1
  3649  005B                     getPercentValue@value:	
  3650                           
  3651                           ; 1 bytes @ 0x3B
  3652  005B                     	ds	1
  3653  005C                     getPercentValue@i:	
  3654                           
  3655                           ; 3 bytes @ 0x3C
  3656  005C                     	ds	1
  3657  005D                     ?_setRF_DimmerLights:	
  3658  005D                     ??_Flash_Memory_Initialization:	
  3659                           ; 0 bytes @ 0x3D
  3660                           
  3661  005D                     setRF_DimmerLights@on:	
  3662                           ; 0 bytes @ 0x3D
  3663                           
  3664                           
  3665                           ; 1 bytes @ 0x3D
  3666  005D                     	ds	1
  3667  005E                     ??_setRF_DimmerLights:	
  3668  005E                     Flash_Memory_Initialization@i:	
  3669                           ; 0 bytes @ 0x3E
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0x3E
  3673  005E                     	ds	1
  3674  005F                     ??_setDimmerLights_AdjRF:	
  3675                           
  3676                           ; 0 bytes @ 0x3F
  3677  005F                     	ds	1
  3678  0060                     setDimmerLights_AdjRF@lights:	
  3679  0060                     setRF_DimmerLights@status:	
  3680                           ; 1 bytes @ 0x40
  3681                           
  3682                           
  3683                           ; 1 bytes @ 0x40
  3684  0060                     	ds	1
  3685  0061                     ??_setRF_DimmerValue:	
  3686  0061                     setRF_DimmerLights@lights:	
  3687                           ; 0 bytes @ 0x41
  3688                           
  3689                           
  3690                           ; 1 bytes @ 0x41
  3691  0061                     	ds	1
  3692  0062                     ??_setDimmerLights_SwOn:	
  3693  0062                     ??_setDimmerLights_SwOff:	
  3694                           ; 0 bytes @ 0x42
  3695                           
  3696  0062                     ?_setDimmerLights_Adj:	
  3697                           ; 0 bytes @ 0x42
  3698                           
  3699  0062                     setDimmerLights_Adj@status:	
  3700                           ; 0 bytes @ 0x42
  3701                           
  3702                           
  3703                           ; 1 bytes @ 0x42
  3704  0062                     	ds	1
  3705  0063                     ??_setDimmerLights_Adj:	
  3706  0063                     setDimmerLights_SwOn@idle:	
  3707                           ; 0 bytes @ 0x43
  3708                           
  3709  0063                     setRF_DimmerValue@lights:	
  3710                           ; 1 bytes @ 0x43
  3711                           
  3712                           
  3713                           ; 1 bytes @ 0x43
  3714  0063                     	ds	1
  3715  0064                     ??_setRFSW_AdjControl:	
  3716  0064                     setDimmerLights_SwOn@sw:	
  3717                           ; 0 bytes @ 0x44
  3718                           
  3719  0064                     setDimmerLights_SwOff@command:	
  3720                           ; 1 bytes @ 0x44
  3721                           
  3722  0064                     setDimmerLights_Adj@lights:	
  3723                           ; 1 bytes @ 0x44
  3724                           
  3725                           
  3726                           ; 1 bytes @ 0x44
  3727  0064                     	ds	1
  3728  0065                     ??_setDimmerLights_Main:	
  3729  0065                     setDimmerLights_Main@lights:	
  3730                           ; 0 bytes @ 0x45
  3731                           
  3732  0065                     setDimmerLights_SwOff@sw:	
  3733                           ; 1 bytes @ 0x45
  3734                           
  3735                           
  3736                           ; 1 bytes @ 0x45
  3737  0065                     	ds	1
  3738  0066                     ??_DlyOff_Main:	
  3739  0066                     ??_setRFSW_Control:	
  3740                           ; 0 bytes @ 0x46
  3741                           
  3742  0066                     ??_setSw_Main:	
  3743                           ; 0 bytes @ 0x46
  3744                           
  3745  0066                     ??_DimmerLights_Main:	
  3746                           ; 0 bytes @ 0x46
  3747                           
  3748  0066                     ??_setDimmerLights_ErrorClose:	
  3749                           ; 0 bytes @ 0x46
  3750                           
  3751  0066                     setRFSW_AdjControl@sw:	
  3752                           ; 0 bytes @ 0x46
  3753                           
  3754                           
  3755                           ; 1 bytes @ 0x46
  3756  0066                     	ds	1
  3757  0067                     setDimmerLights_ErrorClose@count:	
  3758  0067                     setRFSW_Control@sw:	
  3759                           ; 1 bytes @ 0x47
  3760                           
  3761                           
  3762                           ; 1 bytes @ 0x47
  3763  0067                     	ds	1
  3764  0068                     ??_getRxData:	
  3765  0068                     ??_setControl_Lights_Table:	
  3766                           ; 0 bytes @ 0x48
  3767                           
  3768  0068                     DlyOff_Main@sw:	
  3769                           ; 0 bytes @ 0x48
  3770                           
  3771  0068                     setDimmerLights_ErrorClose@lights:	
  3772                           ; 1 bytes @ 0x48
  3773                           
  3774  0068                     setSw_Main@sw:	
  3775                           ; 1 bytes @ 0x48
  3776                           
  3777  0068                     _DimmerLights_Main$2509:	
  3778                           ; 1 bytes @ 0x48
  3779                           
  3780                           
  3781                           ; 2 bytes @ 0x48
  3782  0068                     	ds	1
  3783  0069                     ??_DelayOff_Main:	
  3784  0069                     getRxData@error:	
  3785                           ; 0 bytes @ 0x49
  3786                           
  3787  0069                     setDimmerLights_ErrorClose@i:	
  3788                           ; 1 bytes @ 0x49
  3789                           
  3790                           
  3791                           ; 2 bytes @ 0x49
  3792  0069                     	ds	1
  3793  006A                     ??_setRF_Main:	
  3794                           
  3795                           ; 0 bytes @ 0x4A
  3796  006A                     	ds	1
  3797  006B                     ??_setMain_Exception:	
  3798  006B                     setRF_Main@loop_f:	
  3799                           ; 0 bytes @ 0x4B
  3800                           
  3801                           
  3802                           ; 1 bytes @ 0x4B
  3803  006B                     	ds	1
  3804  006C                     setRF_Main@Receive_OK:	
  3805                           
  3806                           ; 1 bytes @ 0x4C
  3807  006C                     	ds	1
  3808  006D                     ??_Switch_Main:	
  3809  006D                     setRF_Main@error:	
  3810                           ; 0 bytes @ 0x4D
  3811                           
  3812                           
  3813                           ; 1 bytes @ 0x4D
  3814  006D                     	ds	1
  3815  006E                     ??_RF_Main:	
  3816  006E                     Switch_Main@error:	
  3817                           ; 0 bytes @ 0x4E
  3818                           
  3819                           
  3820                           ; 1 bytes @ 0x4E
  3821  006E                     	ds	1
  3822  006F                     ??_main:	
  3823                           
  3824                           	psect	maintext
  3825  169A                     __pmaintext:	
  3826                           ; 0 bytes @ 0x4F
  3827 ;;
  3828 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3829 ;;
  3830 ;; *************** function _main *****************
  3831 ;; Defined at:
  3832 ;;		line 7 in file "../src/Main_B1.c"
  3833 ;; Parameters:    Size  Location     Type
  3834 ;;  argc            2    0[BANK3 ] int 
  3835 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3836 ;; Auto vars:     Size  Location     Type
  3837 ;;		None
  3838 ;; Return value:  Size  Location     Type
  3839 ;;                  2    0[BANK3 ] int 
  3840 ;; Registers used:
  3841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3842 ;; Tracked objects:
  3843 ;;		On entry : 17F/0
  3844 ;;		On exit  : 0/0
  3845 ;;		Unchanged: 0/0
  3846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3847 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3850 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3851 ;;Total ram usage:        4 bytes
  3852 ;; Hardware stack levels required when called:   15
  3853 ;; This function calls:
  3854 ;;		_Buzzer_Initialization
  3855 ;;		_Buzzer_Main
  3856 ;;		_CC2500_PowerOnInitial
  3857 ;;		_DelayOff_Initialization
  3858 ;;		_DelayOff_Main
  3859 ;;		_DimmerLights_Initialization
  3860 ;;		_DimmerLights_Main
  3861 ;;		_Flash_Memory_Initialization
  3862 ;;		_Flash_Memory_Main
  3863 ;;		_LED_Initialization
  3864 ;;		_LED_Main
  3865 ;;		_Load_Initialization
  3866 ;;		_Load_Main
  3867 ;;		_Mcu_Initialization
  3868 ;;		_RF_Initialization
  3869 ;;		_RF_Main
  3870 ;;		_Switch_Initialization
  3871 ;;		_Switch_Main
  3872 ;;		_Temp_Initialization
  3873 ;;		_Temp_Main
  3874 ;;		_WDT_Main
  3875 ;;		_getLoad_AD
  3876 ;;		_getTemp_AD
  3877 ;;		_myMain_Initialization
  3878 ;;		_my_MainTimer
  3879 ;; This function is called by:
  3880 ;;		Startup code after reset
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           
  3885                           ;psect for function _main
  3886  169A                     _main:	
  3887                           
  3888                           ;Main_B1.c: 8: myMain_Initialization();
  3889                           
  3890                           ;incstack = 0
  3891                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3892  169A  319C  240A  3196   	fcall	_myMain_Initialization
  3893                           
  3894                           ;Main_B1.c: 9: Mcu_Initialization();
  3895  169D  319C  2492  3196   	fcall	_Mcu_Initialization
  3896                           
  3897                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3898  16A0  3186  2695  3196   	fcall	_Flash_Memory_Initialization
  3899                           
  3900                           ;Main_B1.c: 11: LED_Initialization();
  3901  16A3  319B  23A4  3196   	fcall	_LED_Initialization
  3902                           
  3903                           ;Main_B1.c: 12: Buzzer_Initialization();
  3904  16A6  319B  2301  3196   	fcall	_Buzzer_Initialization
  3905                           
  3906                           ;Main_B1.c: 14: ;;
  3907                           ;Main_B1.c: 15: Temp_Initialization();
  3908  16A9  319B  230A  3196   	fcall	_Temp_Initialization
  3909                           
  3910                           ;Main_B1.c: 16: Load_Initialization();
  3911  16AC  319B  2321  3196   	fcall	_Load_Initialization
  3912                           
  3913                           ;Main_B1.c: 17: ;;
  3914                           ;Main_B1.c: 18: DelayOff_Initialization();
  3915  16AF  319B  2341  3196   	fcall	_DelayOff_Initialization
  3916                           
  3917                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3918  16B2  319D  25BC  3196   	fcall	_DimmerLights_Initialization
  3919                           
  3920                           ;Main_B1.c: 21: ;;
  3921                           ;Main_B1.c: 22: ;;
  3922                           ;Main_B1.c: 23: ;;
  3923                           ;Main_B1.c: 24: Switch_Initialization();
  3924  16B5  319B  23E0  3196   	fcall	_Switch_Initialization
  3925                           
  3926                           ;Main_B1.c: 25: RF_Initialization();
  3927  16B8  319B  2304  3196   	fcall	_RF_Initialization
  3928                           
  3929                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3930  16BB  319D  2567  3196   	fcall	_CC2500_PowerOnInitial
  3931  16BE                     l10667:	
  3932                           ;Main_B1.c: 27: ;;
  3933                           ;Main_B1.c: 29: while (1) {
  3934                           
  3935                           
  3936                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  3937  16BE  0021               	movlb	1	; select bank1
  3938  16BF  1C20               	btfss	_myMain^(0+128),0
  3939  16C0  2EC9               	goto	l10671
  3940                           
  3941                           ;Main_B1.c: 37: getLoad_AD(0x05);
  3942  16C1  3005               	movlw	5
  3943  16C2  318C  24F0  3196   	fcall	_getLoad_AD
  3944                           
  3945                           ;Main_B1.c: 41: getTemp_AD(0x09);
  3946  16C5  3009               	movlw	9
  3947  16C6  3192  22F0  3196   	fcall	_getTemp_AD
  3948  16C9                     l10671:	
  3949                           
  3950                           ;Main_B1.c: 56: }
  3951                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  3952  16C9  0022               	movlb	2	; select bank2
  3953  16CA  1C20               	btfss	_Timer1^(0+256),0
  3954  16CB  2EBE               	goto	l10667
  3955                           
  3956                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  3957  16CC  1020               	bcf	_Timer1^(0+256),0
  3958                           
  3959                           ;Main_B1.c: 94: my_MainTimer();
  3960  16CD  3193  2327  3196   	fcall	_my_MainTimer
  3961                           
  3962                           ;Main_B1.c: 95: WDT_Main();
  3963  16D0  319C  24A4  3196   	fcall	_WDT_Main
  3964                           
  3965                           ;Main_B1.c: 96: ;;
  3966                           ;Main_B1.c: 97: ;;
  3967                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  3968  16D3  0021               	movlb	1	; select bank1
  3969  16D4  1C20               	btfss	_myMain^(0+128),0
  3970  16D5  2EBE               	goto	l10667
  3971                           
  3972                           ;Main_B1.c: 99: Flash_Memory_Main();
  3973  16D6  3192  2284  3196   	fcall	_Flash_Memory_Main
  3974                           
  3975                           ;Main_B1.c: 101: LED_Main();
  3976  16D9  319B  23B0  3196   	fcall	_LED_Main
  3977                           
  3978                           ;Main_B1.c: 102: Buzzer_Main();
  3979  16DC  3194  2468  3196   	fcall	_Buzzer_Main
  3980                           
  3981                           ;Main_B1.c: 104: ;;
  3982                           ;Main_B1.c: 105: Temp_Main();
  3983  16DF  319B  230D  3196   	fcall	_Temp_Main
  3984                           
  3985                           ;Main_B1.c: 106: Load_Main();
  3986  16E2  3183  236A  3196   	fcall	_Load_Main
  3987                           
  3988                           ;Main_B1.c: 107: ;;
  3989                           ;Main_B1.c: 109: ;;
  3990                           ;Main_B1.c: 110: DimmerLights_Main();
  3991  16E5  3191  21E6  3196   	fcall	_DimmerLights_Main
  3992                           
  3993                           ;Main_B1.c: 111: Switch_Main();
  3994  16E8  319F  27B7  3196   	fcall	_Switch_Main
  3995                           
  3996                           ;Main_B1.c: 112: ;;
  3997                           ;Main_B1.c: 113: ;;
  3998                           ;Main_B1.c: 115: RF_Main();
  3999  16EB  319B  2307  3196   	fcall	_RF_Main
  4000                           
  4001                           ;Main_B1.c: 116: DelayOff_Main();
  4002  16EE  319B  2349  3196   	fcall	_DelayOff_Main
  4003                           
  4004                           ;Main_B1.c: 117: ;;
  4005  16F1  2EBE               	goto	l10667
  4006  16F2                     __end_of_main:	
  4007                           ;Main_B1.c: 125: }
  4008                           ;Main_B1.c: 126: }
  4009                           ;Main_B1.c: 160: }
  4010                           ;Main_B1.c: 161: return (0);
  4011                           ;	Return value of _main is never used
  4012                           
  4013                           
  4014                           	psect	text1
  4015  1327                     __ptext1:	
  4016 ;; *************** function _my_MainTimer *****************
  4017 ;; Defined at:
  4018 ;;		line 180 in file "../src/Main_B1.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;		None
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;		None
  4023 ;; Return value:  Size  Location     Type
  4024 ;;		None               void
  4025 ;; Registers used:
  4026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;Total ram usage:        0 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:    7
  4039 ;; This function calls:
  4040 ;;		_setBuz
  4041 ;; This function is called by:
  4042 ;;		_main
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           
  4047                           ;psect for function _my_MainTimer
  4048  1327                     _my_MainTimer:	
  4049                           
  4050                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  4051                           
  4052                           ;incstack = 0
  4053                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4054  1327  0021               	movlb	1	; select bank1
  4055  1328  1820               	btfsc	_myMain^(0+128),0
  4056  1329  2B48               	goto	l10431
  4057                           
  4058                           ;Main_B1.c: 183: myMain.PowerCount++;
  4059  132A  3001               	movlw	1
  4060  132B  07A2               	addwf	(_myMain^(0+128)+2),f
  4061  132C  3000               	movlw	0
  4062  132D  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4063                           
  4064                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  4065  132E  3002               	movlw	2
  4066  132F  3EA0               	addlw	_myMain& (0+255)
  4067  1330  0086               	movwf	6
  4068  1331  0187               	clrf	7
  4069  1332  3F40               	moviw [0]fsr1
  4070  1333  3A96               	xorlw	150
  4071  1334  1D03               	skipz
  4072  1335  2B38               	goto	u11885
  4073  1336  3F41               	moviw [1]fsr1
  4074  1337  3A00               	xorlw	0
  4075  1338                     u11885:	
  4076  1338  1D03               	skipz
  4077  1339  0008               	return
  4078                           
  4079                           ;Main_B1.c: 185: {
  4080                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  4081  133A  01A2               	clrf	(_myMain^(0+128)+2)
  4082  133B  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4083                           
  4084                           ;Main_B1.c: 187: myMain.PowerON = 1;
  4085  133C  1420               	bsf	_myMain^(0+128),0
  4086                           
  4087                           ;Main_B1.c: 193: setBuz(3, 50);
  4088  133D  3032               	movlw	50
  4089  133E  0020               	movlb	0	; select bank0
  4090  133F  00A9               	movwf	setBuz@time
  4091  1340  3000               	movlw	0
  4092  1341  00AA               	movwf	setBuz@time+1
  4093  1342  3003               	movlw	3
  4094  1343  3196  26F2         	fcall	_setBuz
  4095                           
  4096                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  4097  1345  0021               	movlb	1	; select bank1
  4098  1346  1620               	bsf	_myMain^(0+128),4
  4099                           
  4100                           ;Main_B1.c: 203: }
  4101                           ;Main_B1.c: 204: } else {
  4102  1347  0008               	return
  4103  1348                     l10431:	
  4104                           
  4105                           ;Main_B1.c: 212: myMain.Count1++;
  4106  1348  3001               	movlw	1
  4107  1349  07A6               	addwf	(_myMain^(0+128)+6),f
  4108  134A  3000               	movlw	0
  4109  134B  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4110                           
  4111                           ;Main_B1.c: 213: if (myMain.Count1 == 100)
  4112  134C  3006               	movlw	6
  4113  134D  3EA0               	addlw	_myMain& (0+255)
  4114  134E  0086               	movwf	6
  4115  134F  0187               	clrf	7
  4116  1350  3F40               	moviw [0]fsr1
  4117  1351  3A64               	xorlw	100
  4118  1352  1D03               	skipz
  4119  1353  2B56               	goto	u11895
  4120  1354  3F41               	moviw [1]fsr1
  4121  1355  3A00               	xorlw	0
  4122  1356                     u11895:	
  4123  1356  1D03               	skipz
  4124  1357  0008               	return
  4125                           
  4126                           ;Main_B1.c: 214: {
  4127                           ;Main_B1.c: 215: myMain.Count1 = 0;
  4128  1358  01A6               	clrf	(_myMain^(0+128)+6)
  4129  1359  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4130                           
  4131                           ;Main_B1.c: 227: if (myMain.Flag) {
  4132  135A  1CA0               	btfss	_myMain^(0+128),1
  4133  135B  2B5E               	goto	l1556
  4134                           
  4135                           ;Main_B1.c: 228: myMain.Flag = 0;
  4136  135C  10A0               	bcf	_myMain^(0+128),1
  4137                           
  4138                           ;Main_B1.c: 237: } else {
  4139  135D  0008               	return
  4140  135E                     l1556:	
  4141                           
  4142                           ;Main_B1.c: 238: myMain.Flag = 1;
  4143  135E  14A0               	bsf	_myMain^(0+128),1
  4144  135F  0008               	return
  4145  1360                     __end_of_my_MainTimer:	
  4146                           
  4147                           	psect	text2
  4148  1C0A                     __ptext2:	
  4149 ;; *************** function _myMain_Initialization *****************
  4150 ;; Defined at:
  4151 ;;		line 167 in file "../src/Main_B1.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;		None
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;		None
  4156 ;; Return value:  Size  Location     Type
  4157 ;;		None               void
  4158 ;; Registers used:
  4159 ;;		wreg, fsr1l, fsr1h
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4168 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;Total ram usage:        1 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    5
  4172 ;; This function calls:
  4173 ;;		Nothing
  4174 ;; This function is called by:
  4175 ;;		_main
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           
  4180                           ;psect for function _myMain_Initialization
  4181  1C0A                     _myMain_Initialization:	
  4182                           
  4183                           ;Main_B1.c: 169: product = &_product;
  4184                           
  4185                           ;incstack = 0
  4186                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4187  1C0A  3045               	movlw	__product& (0+255)
  4188  1C0B  0020               	movlb	0	; select bank0
  4189  1C0C  00A0               	movwf	??_myMain_Initialization
  4190  1C0D  0820               	movf	??_myMain_Initialization,w
  4191  1C0E  00FB               	movwf	_product
  4192                           
  4193                           ;Main_B1.c: 170: product->Data[20] = 210;
  4194  1C0F  30D2               	movlw	210
  4195  1C10  00A0               	movwf	??_myMain_Initialization
  4196  1C11  087B               	movf	_product,w
  4197  1C12  3E14               	addlw	20
  4198  1C13  0086               	movwf	6
  4199  1C14  3002               	movlw	2	; select bank4/5
  4200  1C15  0087               	movwf	7
  4201  1C16  0820               	movf	??_myMain_Initialization,w
  4202  1C17  0081               	movwf	1
  4203  1C18  0008               	return
  4204  1C19                     __end_of_myMain_Initialization:	
  4205                           
  4206                           	psect	text3
  4207  12F0                     __ptext3:	
  4208 ;; *************** function _getTemp_AD *****************
  4209 ;; Defined at:
  4210 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;  channel         1    wreg     unsigned char 
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;  channel         1    5[BANK0 ] unsigned char 
  4215 ;; Return value:  Size  Location     Type
  4216 ;;		None               void
  4217 ;; Registers used:
  4218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4228 ;;Total ram usage:        2 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    7
  4231 ;; This function calls:
  4232 ;;		_getAD
  4233 ;; This function is called by:
  4234 ;;		_main
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           
  4239                           ;psect for function _getTemp_AD
  4240  12F0                     _getTemp_AD:	
  4241                           
  4242                           ;incstack = 0
  4243                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4244                           ;getTemp_AD@channel stored from wreg
  4245  12F0  0020               	movlb	0	; select bank0
  4246  12F1  00A5               	movwf	getTemp_AD@channel
  4247                           
  4248                           ;OverTemperature_B1.c: 33: if (Temp.ADtoGO == 1) {
  4249  12F2  0021               	movlb	1	; select bank1
  4250  12F3  1D58               	btfss	_Temp^(0+128),2
  4251  12F4  0008               	return
  4252                           
  4253                           ;OverTemperature_B1.c: 34: Temp.GO = 1;
  4254  12F5  1658               	bsf	_Temp^(0+128),4
  4255                           
  4256                           ;OverTemperature_B1.c: 35: Temp.ADRES = getAD(channel, 0xf0);
  4257  12F6  30F0               	movlw	240
  4258  12F7  0020               	movlb	0	; select bank0
  4259  12F8  00A4               	movwf	??_getTemp_AD
  4260  12F9  0824               	movf	??_getTemp_AD,w
  4261  12FA  00A0               	movwf	getAD@adcon1
  4262  12FB  0825               	movf	getTemp_AD@channel,w
  4263  12FC  319E  26EE  3192   	fcall	_getAD
  4264  12FF  0020               	movlb	0	; select bank0
  4265  1300  0821               	movf	?_getAD+1,w
  4266  1301  0021               	movlb	1	; select bank1
  4267  1302  01E5               	clrf	((_Temp+1)^(0+128)+12)
  4268  1303  07E5               	addwf	((_Temp+1)^(0+128)+12),f
  4269  1304  0020               	movlb	0	; select bank0
  4270  1305  0820               	movf	?_getAD,w
  4271  1306  0021               	movlb	1	; select bank1
  4272  1307  01E4               	clrf	(_Temp^(0+128)+12)
  4273  1308  07E4               	addwf	(_Temp^(0+128)+12),f
  4274                           
  4275                           ;OverTemperature_B1.c: 36: if (Temp.ADH[0] < Temp.ADRES) {
  4276  1309  0865               	movf	((_Temp+1)^(0+128)+12),w
  4277  130A  0261               	subwf	((_Temp+1)^(0+128)+8),w
  4278  130B  1D03               	skipz
  4279  130C  2B0F               	goto	u11855
  4280  130D  0864               	movf	(_Temp^(0+128)+12),w
  4281  130E  0260               	subwf	(_Temp^(0+128)+8),w
  4282  130F                     u11855:	
  4283  130F  1803               	skipnc
  4284  1310  2B18               	goto	l10413
  4285                           
  4286                           ;OverTemperature_B1.c: 37: Temp.ADH[0] = Temp.ADRES;
  4287  1311  0865               	movf	((_Temp+1)^(0+128)+12),w
  4288  1312  01E1               	clrf	((_Temp+1)^(0+128)+8)
  4289  1313  07E1               	addwf	((_Temp+1)^(0+128)+8),f
  4290  1314  0864               	movf	(_Temp^(0+128)+12),w
  4291  1315  01E0               	clrf	(_Temp^(0+128)+8)
  4292  1316  07E0               	addwf	(_Temp^(0+128)+8),f
  4293                           
  4294                           ;OverTemperature_B1.c: 38: } else if (Temp.ADH[1] < Temp.ADRES) {
  4295  1317  0008               	return
  4296  1318                     l10413:	
  4297  1318  0865               	movf	((_Temp+1)^(0+128)+12),w
  4298  1319  0263               	subwf	((_Temp+1)^(0+128)+10),w
  4299  131A  1D03               	skipz
  4300  131B  2B1E               	goto	u11865
  4301  131C  0864               	movf	(_Temp^(0+128)+12),w
  4302  131D  0262               	subwf	(_Temp^(0+128)+10),w
  4303  131E                     u11865:	
  4304  131E  1803               	skipnc
  4305  131F  0008               	return
  4306                           
  4307                           ;OverTemperature_B1.c: 39: Temp.ADH[1] = Temp.ADRES;
  4308  1320  0865               	movf	((_Temp+1)^(0+128)+12),w
  4309  1321  01E3               	clrf	((_Temp+1)^(0+128)+10)
  4310  1322  07E3               	addwf	((_Temp+1)^(0+128)+10),f
  4311  1323  0864               	movf	(_Temp^(0+128)+12),w
  4312  1324  01E2               	clrf	(_Temp^(0+128)+10)
  4313  1325  07E2               	addwf	(_Temp^(0+128)+10),f
  4314  1326  0008               	return
  4315  1327                     __end_of_getTemp_AD:	
  4316                           
  4317                           	psect	text4
  4318  0CF0                     __ptext4:	
  4319 ;; *************** function _getLoad_AD *****************
  4320 ;; Defined at:
  4321 ;;		line 15 in file "../src/OverLoad_B1.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;  channel         1    wreg     unsigned char 
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  channel         1    6[BANK0 ] unsigned char 
  4326 ;;  i               1    9[BANK0 ] unsigned char 
  4327 ;;  j               1    8[BANK0 ] unsigned char 
  4328 ;;  k               1    7[BANK0 ] unsigned char 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;		None               void
  4331 ;; Registers used:
  4332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4340 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4342 ;;Total ram usage:        6 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    7
  4345 ;; This function calls:
  4346 ;;		_getAD
  4347 ;; This function is called by:
  4348 ;;		_main
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           
  4353                           ;psect for function _getLoad_AD
  4354  0CF0                     _getLoad_AD:	
  4355                           
  4356                           ;incstack = 0
  4357                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4358                           ;getLoad_AD@channel stored from wreg
  4359  0CF0  0020               	movlb	0	; select bank0
  4360  0CF1  00A6               	movwf	getLoad_AD@channel
  4361                           
  4362                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4363  0CF2  01A9               	clrf	getLoad_AD@i
  4364  0CF3  01A8               	clrf	getLoad_AD@j
  4365  0CF4  01A7               	clrf	getLoad_AD@k
  4366                           
  4367                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4368  0CF5  0022               	movlb	2	; select bank2
  4369  0CF6  1E27               	btfss	_Load^(0+256),4
  4370  0CF7  0008               	return
  4371                           
  4372                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4373  0CF8  30F3               	movlw	243
  4374  0CF9  0020               	movlb	0	; select bank0
  4375  0CFA  00A4               	movwf	??_getLoad_AD
  4376  0CFB  0824               	movf	??_getLoad_AD,w
  4377  0CFC  00A0               	movwf	getAD@adcon1
  4378  0CFD  0826               	movf	getLoad_AD@channel,w
  4379  0CFE  319E  26EE  318C   	fcall	_getAD
  4380  0D01  0020               	movlb	0	; select bank0
  4381  0D02  0821               	movf	?_getAD+1,w
  4382  0D03  0022               	movlb	2	; select bank2
  4383  0D04  01C9               	clrf	((_Load+1)^(0+256)+33)
  4384  0D05  07C9               	addwf	((_Load+1)^(0+256)+33),f
  4385  0D06  0020               	movlb	0	; select bank0
  4386  0D07  0820               	movf	?_getAD,w
  4387  0D08  0022               	movlb	2	; select bank2
  4388  0D09  01C8               	clrf	(_Load^(0+256)+33)
  4389  0D0A  07C8               	addwf	(_Load^(0+256)+33),f
  4390                           
  4391                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4392  0D0B  0020               	movlb	0	; select bank0
  4393  0D0C  01A9               	clrf	getLoad_AD@i
  4394  0D0D  3004               	movlw	4
  4395  0D0E  0229               	subwf	getLoad_AD@i,w
  4396  0D0F  1803               	btfsc	3,0
  4397  0D10  2D3E               	goto	l10383
  4398  0D11                     l10371:	
  4399                           
  4400                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4401  0D11  3529               	lslf	getLoad_AD@i,w
  4402  0D12  3E32               	addlw	(_Load+11)& (0+255)
  4403  0D13  0086               	movwf	6
  4404  0D14  3001               	movlw	1	; select bank2/3
  4405  0D15  0087               	movwf	7
  4406  0D16  3F40               	moviw [0]fsr1
  4407  0D17  00A4               	movwf	??_getLoad_AD
  4408  0D18  3F41               	moviw [1]fsr1
  4409  0D19  00A5               	movwf	??_getLoad_AD+1
  4410  0D1A  0022               	movlb	2	; select bank2
  4411  0D1B  0849               	movf	((_Load+1)^(0+256)+33),w
  4412  0D1C  0020               	movlb	0	; select bank0
  4413  0D1D  0225               	subwf	??_getLoad_AD+1,w
  4414  0D1E  1D03               	skipz
  4415  0D1F  2D24               	goto	u11765
  4416  0D20  0022               	movlb	2	; select bank2
  4417  0D21  0848               	movf	(_Load^(0+256)+33),w
  4418  0D22  0020               	movlb	0	; select bank0
  4419  0D23  0224               	subwf	??_getLoad_AD,w
  4420  0D24                     u11765:	
  4421  0D24  1803               	skipnc
  4422  0D25  2D36               	goto	l10379
  4423  0D26  08A8               	movf	getLoad_AD@j,f
  4424  0D27  1D03               	skipz
  4425  0D28  2D36               	goto	l10379
  4426                           
  4427                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4428  0D29  3529               	lslf	getLoad_AD@i,w
  4429  0D2A  3E32               	addlw	(_Load+11)& (0+255)
  4430  0D2B  0086               	movwf	6
  4431  0D2C  3001               	movlw	1	; select bank2/3
  4432  0D2D  0087               	movwf	7
  4433  0D2E  0022               	movlb	2	; select bank2
  4434  0D2F  0848               	movf	(_Load^(0+256)+33),w
  4435  0D30  3FC0               	movwi [0]fsr1
  4436  0D31  0849               	movf	((_Load+1)^(0+256)+33),w
  4437  0D32  3FC1               	movwi [1]fsr1
  4438                           
  4439                           ;OverLoad_B1.c: 24: j = 1;
  4440  0D33  0020               	movlb	0	; select bank0
  4441  0D34  01A8               	clrf	getLoad_AD@j
  4442  0D35  0AA8               	incf	getLoad_AD@j,f
  4443  0D36                     l10379:	
  4444  0D36  3001               	movlw	1
  4445  0D37  00A4               	movwf	??_getLoad_AD
  4446  0D38  0824               	movf	??_getLoad_AD,w
  4447  0D39  07A9               	addwf	getLoad_AD@i,f
  4448  0D3A  3004               	movlw	4
  4449  0D3B  0229               	subwf	getLoad_AD@i,w
  4450  0D3C  1C03               	skipc
  4451  0D3D  2D11               	goto	l10371
  4452  0D3E                     l10383:	
  4453                           
  4454                           ;OverLoad_B1.c: 25: }
  4455                           ;OverLoad_B1.c: 26: }
  4456                           ;OverLoad_B1.c: 27: if (j == 0) {
  4457  0D3E  08A8               	movf	getLoad_AD@j,f
  4458  0D3F  1D03               	skipz
  4459  0D40  0008               	return
  4460                           
  4461                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4462  0D41  01A9               	clrf	getLoad_AD@i
  4463  0D42                     L1:	
  4464  0D42  3004               	movlw	4
  4465  0D43  0229               	subwf	getLoad_AD@i,w
  4466  0D44  1803               	btfsc	3,0
  4467  0D45  0008               	return
  4468                           
  4469                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4470  0D46  3529               	lslf	getLoad_AD@i,w
  4471  0D47  3E3C               	addlw	(_Load+21)& (0+255)
  4472  0D48  0086               	movwf	6
  4473  0D49  3001               	movlw	1	; select bank2/3
  4474  0D4A  0087               	movwf	7
  4475  0D4B  3F40               	moviw [0]fsr1
  4476  0D4C  00A4               	movwf	??_getLoad_AD
  4477  0D4D  3F41               	moviw [1]fsr1
  4478  0D4E  00A5               	movwf	??_getLoad_AD+1
  4479  0D4F  0825               	movf	??_getLoad_AD+1,w
  4480  0D50  0022               	movlb	2	; select bank2
  4481  0D51  0249               	subwf	((_Load+1)^(0+256)+33),w
  4482  0D52  1D03               	skipz
  4483  0D53  2D58               	goto	u11815
  4484  0D54  0020               	movlb	0	; select bank0
  4485  0D55  0824               	movf	??_getLoad_AD,w
  4486  0D56  0022               	movlb	2	; select bank2
  4487  0D57  0248               	subwf	(_Load^(0+256)+33),w
  4488  0D58                     u11815:	
  4489  0D58  1803               	skipnc
  4490  0D59  2D6B               	goto	l10399
  4491  0D5A  0020               	movlb	0	; select bank0
  4492  0D5B  08A7               	movf	getLoad_AD@k,f
  4493  0D5C  1D03               	skipz
  4494  0D5D  2D6B               	goto	l10399
  4495                           
  4496                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4497  0D5E  3529               	lslf	getLoad_AD@i,w
  4498  0D5F  3E3C               	addlw	(_Load+21)& (0+255)
  4499  0D60  0086               	movwf	6
  4500  0D61  3001               	movlw	1	; select bank2/3
  4501  0D62  0087               	movwf	7
  4502  0D63  0022               	movlb	2	; select bank2
  4503  0D64  0848               	movf	(_Load^(0+256)+33),w
  4504  0D65  3FC0               	movwi [0]fsr1
  4505  0D66  0849               	movf	((_Load+1)^(0+256)+33),w
  4506  0D67  3FC1               	movwi [1]fsr1
  4507                           
  4508                           ;OverLoad_B1.c: 31: k = 1;
  4509  0D68  0020               	movlb	0	; select bank0
  4510  0D69  01A7               	clrf	getLoad_AD@k
  4511  0D6A  0AA7               	incf	getLoad_AD@k,f
  4512  0D6B                     l10399:	
  4513  0D6B  3001               	movlw	1
  4514  0D6C  0020               	movlb	0	; select bank0
  4515  0D6D  00A4               	movwf	??_getLoad_AD
  4516  0D6E  0824               	movf	??_getLoad_AD,w
  4517  0D6F  07A9               	addwf	getLoad_AD@i,f
  4518  0D70  2D42               	goto	L1
  4519  0D71                     __end_of_getLoad_AD:	
  4520                           
  4521                           	psect	text5
  4522  1EEE                     __ptext5:	
  4523 ;; *************** function _getAD *****************
  4524 ;; Defined at:
  4525 ;;		line 454 in file "../src/MCU_B1.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;  adcon0          1    wreg     unsigned char 
  4528 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4529 ;; Auto vars:     Size  Location     Type
  4530 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  2    0[BANK0 ] int 
  4533 ;; Registers used:
  4534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4535 ;; Tracked objects:
  4536 ;;		On entry : 0/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4540 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4541 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4543 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4544 ;;Total ram usage:        4 bytes
  4545 ;; Hardware stack levels used:    1
  4546 ;; Hardware stack levels required when called:    6
  4547 ;; This function calls:
  4548 ;;		_Timeout_Counter
  4549 ;;		_set_TimeoutCleared
  4550 ;; This function is called by:
  4551 ;;		_getLoad_AD
  4552 ;;		_getTemp_AD
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           
  4557                           ;psect for function _getAD
  4558  1EEE                     _getAD:	
  4559                           
  4560                           ;incstack = 0
  4561                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4562                           ;getAD@adcon0 stored from wreg
  4563  1EEE  0020               	movlb	0	; select bank0
  4564  1EEF  00A3               	movwf	getAD@adcon0
  4565                           
  4566                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4567  1EF0  0823               	movf	getAD@adcon0,w
  4568  1EF1  0021               	movlb	1	; select bank1
  4569  1EF2  009D               	movwf	29	;volatile
  4570                           
  4571                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4572  1EF3  0020               	movlb	0	; select bank0
  4573  1EF4  0820               	movf	getAD@adcon1,w
  4574  1EF5  0021               	movlb	1	; select bank1
  4575  1EF6  009E               	movwf	30	;volatile
  4576                           
  4577                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4578  1EF7  149D               	bsf	29,1	;volatile
  4579                           
  4580                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4581  1EF8  2EFC               	goto	l9815
  4582  1EF9                     l9813:	
  4583                           
  4584                           ;MCU_B1.c: 459: Timeout_Counter();
  4585  1EF9  319D  2552  319E   	fcall	_Timeout_Counter
  4586  1EFC                     l9815:	
  4587  1EFC  0021               	movlb	1	; select bank1
  4588  1EFD  1C9D               	btfss	29,1	;volatile
  4589  1EFE  2F01               	goto	l9819
  4590  1EFF  1D2D               	btfss	(_myMain^(0+128)+13),2
  4591  1F00  2EF9               	goto	l9813
  4592  1F01                     l9819:	
  4593                           
  4594                           ;MCU_B1.c: 460: };
  4595                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4596  1F01  319B  231C         	fcall	_set_TimeoutCleared
  4597                           
  4598                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4599  1F03  0021               	movlb	1	; select bank1
  4600  1F04  081C               	movf	28,w	;volatile
  4601  1F05  0020               	movlb	0	; select bank0
  4602  1F06  01A1               	clrf	?_getAD+1
  4603  1F07  07A1               	addwf	?_getAD+1,f
  4604  1F08  0021               	movlb	1	; select bank1
  4605  1F09  081B               	movf	27,w	;volatile
  4606  1F0A  0020               	movlb	0	; select bank0
  4607  1F0B  01A0               	clrf	?_getAD
  4608  1F0C  07A0               	addwf	?_getAD,f
  4609  1F0D  0008               	return
  4610  1F0E                     __end_of_getAD:	
  4611                           
  4612                           	psect	text6
  4613  1CA4                     __ptext6:	
  4614 ;; *************** function _WDT_Main *****************
  4615 ;; Defined at:
  4616 ;;		line 1033 in file "../src/MCU_B1.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;		None
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;		None
  4621 ;; Return value:  Size  Location     Type
  4622 ;;		None               void
  4623 ;; Registers used:
  4624 ;;		wreg, status,2, status,0, pclath, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4632 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4633 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4634 ;;Total ram usage:        1 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    6
  4637 ;; This function calls:
  4638 ;;		_WDT_Clearing
  4639 ;; This function is called by:
  4640 ;;		_main
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           
  4645                           ;psect for function _WDT_Main
  4646  1CA4                     _WDT_Main:	
  4647                           
  4648                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  4649                           
  4650                           ;incstack = 0
  4651                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4652  1CA4  0022               	movlb	2	; select bank2
  4653  1CA5  1C25               	btfss	_WDT^(0+256),0
  4654  1CA6  0008               	return
  4655                           
  4656                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  4657  1CA7  3001               	movlw	1
  4658  1CA8  02A6               	subwf	(_WDT^(0+256)+1),f
  4659  1CA9  0826               	movf	(_WDT^(0+256)+1),w
  4660  1CAA  3AFF               	xorlw	255
  4661  1CAB  1903               	skipnz
  4662  1CAC  0008               	return
  4663                           
  4664                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  4665  1CAD  3064               	movlw	100
  4666  1CAE  0020               	movlb	0	; select bank0
  4667  1CAF  00A0               	movwf	??_WDT_Main
  4668  1CB0  0820               	movf	??_WDT_Main,w
  4669  1CB1  0022               	movlb	2	; select bank2
  4670  1CB2  00A6               	movwf	(_WDT^(0+256)+1)
  4671                           
  4672                           ;MCU_B1.c: 1037: WDT_Clearing();
  4673  1CB3  3180  2002         	fcall	_WDT_Clearing
  4674  1CB5  0008               	return
  4675  1CB6                     __end_of_WDT_Main:	
  4676                           
  4677                           	psect	text7
  4678  0002                     __ptext7:	
  4679 ;; *************** function _WDT_Clearing *****************
  4680 ;; Defined at:
  4681 ;;		line 1043 in file "../src/MCU_B1.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;		None
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;		None
  4686 ;; Return value:  Size  Location     Type
  4687 ;;		None               void
  4688 ;; Registers used:
  4689 ;;		None
  4690 ;; Tracked objects:
  4691 ;;		On entry : 0/0
  4692 ;;		On exit  : 0/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4699 ;;Total ram usage:        0 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    5
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		_WDT_Main
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           
  4710                           ;psect for function _WDT_Clearing
  4711  0002                     _WDT_Clearing:	
  4712                           
  4713                           ;incstack = 0
  4714                           ; Regs used in _WDT_Clearing: []
  4715  0002  0064               	clrwdt	;# 
  4716  0003  0008               	return
  4717  0004                     __end_of_WDT_Clearing:	
  4718                           
  4719                           	psect	text8
  4720  1B0D                     __ptext8:	
  4721 ;; *************** function _Temp_Main *****************
  4722 ;; Defined at:
  4723 ;;		line 51 in file "../src/OverTemperature_B1.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;		None               void
  4730 ;; Registers used:
  4731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4741 ;;Total ram usage:        0 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    7
  4744 ;; This function calls:
  4745 ;;		_setTemp_Main
  4746 ;; This function is called by:
  4747 ;;		_main
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           
  4752                           ;psect for function _Temp_Main
  4753  1B0D                     _Temp_Main:	
  4754                           
  4755                           ;OverTemperature_B1.c: 53: setTemp_Main();
  4756                           
  4757                           ;incstack = 0
  4758                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4759  1B0D  318E  260A         	fcall	_setTemp_Main
  4760  1B0F  0008               	return
  4761  1B10                     __end_of_Temp_Main:	
  4762                           
  4763                           	psect	text9
  4764  0E0A                     __ptext9:	
  4765 ;; *************** function _setTemp_Main *****************
  4766 ;; Defined at:
  4767 ;;		line 58 in file "../src/OverTemperature_B1.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;		None
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;		None
  4772 ;; Return value:  Size  Location     Type
  4773 ;;		None               void
  4774 ;; Registers used:
  4775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4776 ;; Tracked objects:
  4777 ;;		On entry : 0/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;Total ram usage:        2 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    6
  4788 ;; This function calls:
  4789 ;;		_getMain_All_Error_Status
  4790 ;; This function is called by:
  4791 ;;		_Temp_Main
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           
  4796                           ;psect for function _setTemp_Main
  4797  0E0A                     _setTemp_Main:	
  4798                           
  4799                           ;OverTemperature_B1.c: 59: if (Temp.Enable == 1) {
  4800                           
  4801                           ;incstack = 0
  4802                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4803  0E0A  0021               	movlb	1	; select bank1
  4804  0E0B  1C58               	btfss	_Temp^(0+128),0
  4805  0E0C  2E9F               	goto	l1881
  4806                           
  4807                           ;OverTemperature_B1.c: 60: if (Temp.ADtoGO == 0) {
  4808  0E0D  1958               	btfsc	_Temp^(0+128),2
  4809  0E0E  2E1E               	goto	l9925
  4810                           
  4811                           ;OverTemperature_B1.c: 61: Temp.Time++;
  4812  0E0F  3001               	movlw	1
  4813  0E10  07D9               	addwf	(_Temp^(0+128)+1),f
  4814  0E11  3000               	movlw	0
  4815  0E12  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  4816                           
  4817                           ;OverTemperature_B1.c: 62: if (Temp.Time >= 500) {
  4818  0E13  3001               	movlw	1
  4819  0E14  025A               	subwf	((_Temp+1)^(0+128)+1),w
  4820  0E15  30F4               	movlw	244
  4821  0E16  1903               	skipnz
  4822  0E17  0259               	subwf	(_Temp^(0+128)+1),w
  4823  0E18  1C03               	skipc
  4824  0E19  0008               	return
  4825                           
  4826                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  4827  0E1A  01D9               	clrf	(_Temp^(0+128)+1)
  4828  0E1B  01DA               	clrf	((_Temp+1)^(0+128)+1)
  4829                           
  4830                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  4831  0E1C  1558               	bsf	_Temp^(0+128),2
  4832                           
  4833                           ;OverTemperature_B1.c: 65: }
  4834                           ;OverTemperature_B1.c: 66: } else {
  4835  0E1D  0008               	return
  4836  0E1E                     l9925:	
  4837                           
  4838                           ;OverTemperature_B1.c: 67: if (getMain_All_Error_Status(2) == 0) {
  4839  0E1E  3002               	movlw	2
  4840  0E1F  3191  21B3  318E   	fcall	_getMain_All_Error_Status
  4841  0E22  3800               	iorlw	0
  4842  0E23  1D03               	skipz
  4843  0E24  0008               	return
  4844                           
  4845                           ;OverTemperature_B1.c: 68: Temp.Time++;
  4846  0E25  3001               	movlw	1
  4847  0E26  0021               	movlb	1	; select bank1
  4848  0E27  07D9               	addwf	(_Temp^(0+128)+1),f
  4849  0E28  3000               	movlw	0
  4850  0E29  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  4851                           
  4852                           ;OverTemperature_B1.c: 69: if (Temp.Time >= 5) {
  4853  0E2A  3000               	movlw	0
  4854  0E2B  025A               	subwf	((_Temp+1)^(0+128)+1),w
  4855  0E2C  3005               	movlw	5
  4856  0E2D  1903               	skipnz
  4857  0E2E  0259               	subwf	(_Temp^(0+128)+1),w
  4858  0E2F  1C03               	skipc
  4859  0E30  0008               	return
  4860                           
  4861                           ;OverTemperature_B1.c: 70: Temp.Time = 0;
  4862  0E31  01D9               	clrf	(_Temp^(0+128)+1)
  4863  0E32  01DA               	clrf	((_Temp+1)^(0+128)+1)
  4864                           
  4865                           ;OverTemperature_B1.c: 71: if (Temp.GO == 1) {
  4866  0E33  1E58               	btfss	_Temp^(0+128),4
  4867  0E34  0008               	return
  4868                           
  4869                           ;OverTemperature_B1.c: 72: Temp.ADtoGO = 0;
  4870  0E35  1158               	bcf	_Temp^(0+128),2
  4871                           
  4872                           ;OverTemperature_B1.c: 73: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4873  0E36  300A               	movlw	10
  4874  0E37  3ED8               	addlw	_Temp& (0+255)
  4875  0E38  0086               	movwf	6
  4876  0E39  0187               	clrf	7
  4877  0E3A  3008               	movlw	8
  4878  0E3B  3ED8               	addlw	_Temp& (0+255)
  4879  0E3C  0084               	movwf	4
  4880  0E3D  0185               	clrf	5
  4881  0E3E  3F40               	moviw [0]fsr1
  4882  0E3F  0700               	addwf	0,w
  4883  0E40  0020               	movlb	0	; select bank0
  4884  0E41  00A7               	movwf	??_setTemp_Main
  4885  0E42  3101               	addfsr 0,1
  4886  0E43  3F41               	moviw [1]fsr1
  4887  0E44  3D00               	addwfc	0,w
  4888  0E45  00A8               	movwf	??_setTemp_Main+1
  4889  0E46  36A8               	lsrf	??_setTemp_Main+1,f
  4890  0E47  0CA7               	rrf	??_setTemp_Main,f
  4891  0E48  0827               	movf	??_setTemp_Main,w
  4892  0E49  0021               	movlb	1	; select bank1
  4893  0E4A  00DE               	movwf	(_Temp^(0+128)+6)
  4894  0E4B  0020               	movlb	0	; select bank0
  4895  0E4C  0828               	movf	??_setTemp_Main+1,w
  4896  0E4D  0021               	movlb	1	; select bank1
  4897  0E4E  00DF               	movwf	((_Temp+1)^(0+128)+6)
  4898                           
  4899                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 600;
  4900  0E4F  3058               	movlw	88
  4901  0E50  00E6               	movwf	(_Temp^(0+128)+14)
  4902  0E51  3002               	movlw	2
  4903  0E52  00E7               	movwf	(_Temp^(0+128)+15)
  4904                           
  4905                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 550;
  4906  0E53  3026               	movlw	38
  4907  0E54  00E8               	movwf	(_Temp^(0+128)+16)
  4908  0E55  3002               	movlw	2
  4909  0E56  00E9               	movwf	(_Temp^(0+128)+17)
  4910                           
  4911                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  4912  0E57  1CD8               	btfss	_Temp^(0+128),1
  4913  0E58  2E6E               	goto	l9955
  4914                           
  4915                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  4916  0E59  0867               	movf	((_Temp+1)^(0+128)+14),w
  4917  0E5A  025F               	subwf	((_Temp+1)^(0+128)+6),w
  4918  0E5B  1D03               	skipz
  4919  0E5C  2E5F               	goto	u11025
  4920  0E5D  0866               	movf	(_Temp^(0+128)+14),w
  4921  0E5E  025E               	subwf	(_Temp^(0+128)+6),w
  4922  0E5F                     u11025:	
  4923  0E5F  1C03               	skipc
  4924  0E60  2E83               	goto	l9965
  4925                           
  4926                           ;OverTemperature_B1.c: 92: Temp.Count++;
  4927  0E61  3001               	movlw	1
  4928  0E62  0020               	movlb	0	; select bank0
  4929  0E63  00A7               	movwf	??_setTemp_Main
  4930  0E64  0827               	movf	??_setTemp_Main,w
  4931  0E65  0021               	movlb	1	; select bank1
  4932  0E66  07DB               	addwf	(_Temp^(0+128)+3),f
  4933                           
  4934                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  4935  0E67  3003               	movlw	3
  4936  0E68  025B               	subwf	(_Temp^(0+128)+3),w
  4937  0E69  1C03               	skipc
  4938  0E6A  2E84               	goto	l9967
  4939                           
  4940                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  4941  0E6B  01DB               	clrf	(_Temp^(0+128)+3)
  4942                           
  4943                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  4944  0E6C  10D8               	bcf	_Temp^(0+128),1
  4945                           
  4946                           ;OverTemperature_B1.c: 96: }
  4947                           ;OverTemperature_B1.c: 97: } else {
  4948  0E6D  2E84               	goto	l9967
  4949  0E6E                     l9955:	
  4950                           ;OverTemperature_B1.c: 99: }
  4951                           ;OverTemperature_B1.c: 100: } else {
  4952                           
  4953                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  4954                           
  4955                           
  4956                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  4957  0E6E  085F               	movf	((_Temp+1)^(0+128)+6),w
  4958  0E6F  0269               	subwf	((_Temp+1)^(0+128)+16),w
  4959  0E70  1D03               	skipz
  4960  0E71  2E74               	goto	u11045
  4961  0E72  085E               	movf	(_Temp^(0+128)+6),w
  4962  0E73  0268               	subwf	(_Temp^(0+128)+16),w
  4963  0E74                     u11045:	
  4964  0E74  1C03               	skipc
  4965  0E75  2E83               	goto	l9965
  4966                           
  4967                           ;OverTemperature_B1.c: 102: Temp.Count++;
  4968  0E76  3001               	movlw	1
  4969  0E77  0020               	movlb	0	; select bank0
  4970  0E78  00A7               	movwf	??_setTemp_Main
  4971  0E79  0827               	movf	??_setTemp_Main,w
  4972  0E7A  0021               	movlb	1	; select bank1
  4973  0E7B  07DB               	addwf	(_Temp^(0+128)+3),f
  4974                           
  4975                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  4976  0E7C  3003               	movlw	3
  4977  0E7D  025B               	subwf	(_Temp^(0+128)+3),w
  4978  0E7E  1C03               	skipc
  4979  0E7F  2E84               	goto	l9967
  4980                           
  4981                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  4982  0E80  01DB               	clrf	(_Temp^(0+128)+3)
  4983                           
  4984                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  4985  0E81  14D8               	bsf	_Temp^(0+128),1
  4986                           
  4987                           ;OverTemperature_B1.c: 106: }
  4988                           ;OverTemperature_B1.c: 107: } else {
  4989  0E82  2E84               	goto	l9967
  4990  0E83                     l9965:	
  4991                           
  4992                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  4993  0E83  01DB               	clrf	(_Temp^(0+128)+3)
  4994  0E84                     l9967:	
  4995                           
  4996                           ;OverTemperature_B1.c: 109: }
  4997                           ;OverTemperature_B1.c: 110: }
  4998                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  4999  0E84  085F               	movf	((_Temp+1)^(0+128)+6),w
  5000  0E85  0020               	movlb	0	; select bank0
  5001  0E86  00A7               	movwf	??_setTemp_Main
  5002  0E87  087B               	movf	_product,w
  5003  0E88  3E18               	addlw	24
  5004  0E89  0086               	movwf	6
  5005  0E8A  3002               	movlw	2	; select bank4/5
  5006  0E8B  0087               	movwf	7
  5007  0E8C  0827               	movf	??_setTemp_Main,w
  5008  0E8D  0081               	movwf	1
  5009                           
  5010                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5011  0E8E  0021               	movlb	1	; select bank1
  5012  0E8F  085E               	movf	(_Temp^(0+128)+6),w
  5013  0E90  0020               	movlb	0	; select bank0
  5014  0E91  00A7               	movwf	??_setTemp_Main
  5015  0E92  087B               	movf	_product,w
  5016  0E93  3E19               	addlw	25
  5017  0E94  0086               	movwf	6
  5018  0E95  3002               	movlw	2	; select bank4/5
  5019  0E96  0087               	movwf	7
  5020  0E97  0827               	movf	??_setTemp_Main,w
  5021  0E98  0081               	movwf	1
  5022                           
  5023                           ;OverTemperature_B1.c: 115: Temp.ADH[0] = 0;
  5024  0E99  0021               	movlb	1	; select bank1
  5025  0E9A  01E0               	clrf	(_Temp^(0+128)+8)
  5026  0E9B  01E1               	clrf	((_Temp+1)^(0+128)+8)
  5027                           
  5028                           ;OverTemperature_B1.c: 116: Temp.ADH[1] = 0;
  5029  0E9C  01E2               	clrf	(_Temp^(0+128)+10)
  5030  0E9D  01E3               	clrf	((_Temp+1)^(0+128)+10)
  5031                           
  5032                           ;OverTemperature_B1.c: 117: }
  5033                           ;OverTemperature_B1.c: 118: }
  5034                           ;OverTemperature_B1.c: 119: }
  5035                           ;OverTemperature_B1.c: 120: }
  5036                           ;OverTemperature_B1.c: 121: } else {
  5037  0E9E  0008               	return
  5038  0E9F                     l1881:	
  5039                           
  5040                           ;OverTemperature_B1.c: 122: if (myMain.PowerON == 1) {
  5041  0E9F  1C20               	btfss	_myMain^(0+128),0
  5042  0EA0  0008               	return
  5043                           
  5044                           ;OverTemperature_B1.c: 123: Temp.Enable = 1;
  5045  0EA1  1458               	bsf	_Temp^(0+128),0
  5046  0EA2  0008               	return
  5047  0EA3                     __end_of_setTemp_Main:	
  5048                           
  5049                           	psect	text10
  5050  1B0A                     __ptext10:	
  5051 ;; *************** function _Temp_Initialization *****************
  5052 ;; Defined at:
  5053 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5054 ;; Parameters:    Size  Location     Type
  5055 ;;		None
  5056 ;; Auto vars:     Size  Location     Type
  5057 ;;		None
  5058 ;; Return value:  Size  Location     Type
  5059 ;;		None               void
  5060 ;; Registers used:
  5061 ;;		status,2, status,0, pclath, cstack
  5062 ;; Tracked objects:
  5063 ;;		On entry : 0/0
  5064 ;;		On exit  : 0/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5071 ;;Total ram usage:        0 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:    6
  5074 ;; This function calls:
  5075 ;;		_setTemp_Initialization
  5076 ;; This function is called by:
  5077 ;;		_main
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           
  5082                           ;psect for function _Temp_Initialization
  5083  1B0A                     _Temp_Initialization:	
  5084                           
  5085                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5086                           
  5087                           ;incstack = 0
  5088                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5089  1B0A  319B  2300         	fcall	_setTemp_Initialization
  5090  1B0C  0008               	return
  5091  1B0D                     __end_of_Temp_Initialization:	
  5092                           
  5093                           	psect	text11
  5094  1B00                     __ptext11:	
  5095 ;; *************** function _setTemp_Initialization *****************
  5096 ;; Defined at:
  5097 ;;		line 46 in file "../src/OverTemperature_B1.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;		None
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;		None
  5102 ;; Return value:  Size  Location     Type
  5103 ;;		None               void
  5104 ;; Registers used:
  5105 ;;		None
  5106 ;; Tracked objects:
  5107 ;;		On entry : 0/0
  5108 ;;		On exit  : 0/0
  5109 ;;		Unchanged: 0/0
  5110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5115 ;;Total ram usage:        0 bytes
  5116 ;; Hardware stack levels used:    1
  5117 ;; Hardware stack levels required when called:    5
  5118 ;; This function calls:
  5119 ;;		Nothing
  5120 ;; This function is called by:
  5121 ;;		_Temp_Initialization
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           
  5126                           ;psect for function _setTemp_Initialization
  5127  1B00                     _setTemp_Initialization:	
  5128                           
  5129                           ;incstack = 0
  5130                           ; Regs used in _setTemp_Initialization: []
  5131  1B00  0008               	return
  5132  1B01                     __end_of_setTemp_Initialization:	
  5133                           
  5134                           	psect	text12
  5135  1FB7                     __ptext12:	
  5136 ;; *************** function _Switch_Main *****************
  5137 ;; Defined at:
  5138 ;;		line 72 in file "../src/Switch_B1.c"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;		None
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;  error           1   78[BANK0 ] unsigned char 
  5143 ;; Return value:  Size  Location     Type
  5144 ;;		None               void
  5145 ;; Registers used:
  5146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5156 ;;Total ram usage:        2 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; Hardware stack levels required when called:   12
  5159 ;; This function calls:
  5160 ;;		_TouchPower
  5161 ;;		_getMain_All_Error_Status
  5162 ;;		_setMain_Exception
  5163 ;;		_setSw_Main
  5164 ;; This function is called by:
  5165 ;;		_main
  5166 ;; This function uses a non-reentrant model
  5167 ;;
  5168                           
  5169                           
  5170                           ;psect for function _Switch_Main
  5171  1FB7                     _Switch_Main:	
  5172                           
  5173                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5174                           
  5175                           ;incstack = 0
  5176                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5177  1FB7  3000               	movlw	0
  5178  1FB8  3191  21B3  319F   	fcall	_getMain_All_Error_Status
  5179  1FBB  0020               	movlb	0	; select bank0
  5180  1FBC  00ED               	movwf	??_Switch_Main
  5181  1FBD  086D               	movf	??_Switch_Main,w
  5182  1FBE  00EE               	movwf	Switch_Main@error
  5183                           
  5184                           ;Switch_B1.c: 74: if (error != 0) {
  5185  1FBF  086E               	movf	Switch_Main@error,w
  5186  1FC0  1903               	btfsc	3,2
  5187  1FC1  2FC7               	goto	l2639
  5188                           
  5189                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5190  1FC2  0021               	movlb	1	; select bank1
  5191  1FC3  1853               	btfsc	_SwDetect^(0+128),0
  5192  1FC4  2FD0               	goto	l10603
  5193                           
  5194                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5195  1FC5  1453               	bsf	_SwDetect^(0+128),0
  5196  1FC6  2FCB               	goto	L2
  5197  1FC7                     l2639:	
  5198                           ;Switch_B1.c: 80: }
  5199                           ;Switch_B1.c: 81: } else {
  5200                           
  5201                           ;Switch_B1.c: 78: setMain_Exception(error);
  5202                           
  5203                           
  5204                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5205  1FC7  0021               	movlb	1	; select bank1
  5206  1FC8  1C53               	btfss	_SwDetect^(0+128),0
  5207  1FC9  2FD0               	goto	l10603
  5208                           
  5209                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5210  1FCA  1053               	bcf	_SwDetect^(0+128),0
  5211  1FCB                     L2:	
  5212                           
  5213                           ;Switch_B1.c: 85: setMain_Exception(error);
  5214  1FCB  0020               	movlb	0	; select bank0
  5215  1FCC  086E               	movf	Switch_Main@error,w
  5216  1FCD  3189  21E7  319F   	fcall	_setMain_Exception
  5217  1FD0                     l10603:	
  5218                           
  5219                           ;Switch_B1.c: 87: }
  5220                           ;Switch_B1.c: 88: }
  5221                           ;Switch_B1.c: 91: setSw_Main(1);
  5222  1FD0  3001               	movlw	1
  5223  1FD1  3181  21FB  319F   	fcall	_setSw_Main
  5224                           
  5225                           ;Switch_B1.c: 95: setSw_Main(2);
  5226  1FD4  3002               	movlw	2
  5227  1FD5  3181  21FB  319F   	fcall	_setSw_Main
  5228                           
  5229                           ;Switch_B1.c: 103: TouchPower();
  5230  1FD8  319D  2591         	fcall	_TouchPower
  5231  1FDA  0008               	return
  5232  1FDB                     __end_of_Switch_Main:	
  5233                           
  5234                           	psect	text13
  5235  01FB                     __ptext13:	
  5236 ;; *************** function _setSw_Main *****************
  5237 ;; Defined at:
  5238 ;;		line 137 in file "../src/Switch_B1.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;  sw              1    wreg     unsigned char 
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  sw              1   72[BANK0 ] unsigned char 
  5243 ;; Return value:  Size  Location     Type
  5244 ;;		None               void
  5245 ;; Registers used:
  5246 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5247 ;; Tracked objects:
  5248 ;;		On entry : 0/0
  5249 ;;		On exit  : 0/0
  5250 ;;		Unchanged: 0/0
  5251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5254 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5255 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5256 ;;Total ram usage:        3 bytes
  5257 ;; Hardware stack levels used:    1
  5258 ;; Hardware stack levels required when called:   10
  5259 ;; This function calls:
  5260 ;;		_SwPointSelect
  5261 ;;		_getSw_KeyStatus
  5262 ;;		_setBuz
  5263 ;;		_setDimmerLights_AdjControl
  5264 ;;		_setDimmerLights_SwOff
  5265 ;;		_setDimmerLights_SwOn
  5266 ;;		_setRF_Learn
  5267 ;; This function is called by:
  5268 ;;		_Switch_Main
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           
  5273                           ;psect for function _setSw_Main
  5274  01FB                     _setSw_Main:	
  5275                           
  5276                           ;incstack = 0
  5277                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5278                           ;setSw_Main@sw stored from wreg
  5279  01FB  0020               	movlb	0	; select bank0
  5280  01FC  00E8               	movwf	setSw_Main@sw
  5281                           
  5282                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5283  01FD  0868               	movf	setSw_Main@sw,w
  5284  01FE  319D  252A  3181   	fcall	_SwPointSelect
  5285                           
  5286                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5287  0201  0879               	movf	_Sw,w
  5288  0202  0086               	movwf	6
  5289  0203  3001               	movlw	1	; select bank2/3
  5290  0204  0087               	movwf	7
  5291  0205  1C01               	btfss	1,0
  5292  0206  2B61               	goto	l2649
  5293                           
  5294                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5295  0207  0021               	movlb	1	; select bank1
  5296  0208  1853               	btfsc	_SwDetect^(0+128),0
  5297  0209  2A25               	goto	l10107
  5298                           
  5299                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5300  020A  0A79               	incf	_Sw,w
  5301  020B  0086               	movwf	6
  5302  020C  3001               	movlw	1	; select bank2/3
  5303  020D  0087               	movwf	7
  5304  020E  1081               	bcf	1,1
  5305                           
  5306                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5307  020F  0020               	movlb	0	; select bank0
  5308  0210  0868               	movf	setSw_Main@sw,w
  5309  0211  319E  26AF  3181   	fcall	_getSw_KeyStatus
  5310  0214  3A01               	xorlw	1
  5311  0215  3000               	movlw	0
  5312  0216  1903               	skipnz
  5313  0217  3001               	movlw	1
  5314  0218  0020               	movlb	0	; select bank0
  5315  0219  00E6               	movwf	??_setSw_Main
  5316  021A  0879               	movf	_Sw,w
  5317  021B  0086               	movwf	6
  5318  021C  3001               	movlw	1	; select bank2/3
  5319  021D  0087               	movwf	7
  5320  021E  0DE6               	rlf	??_setSw_Main,f
  5321  021F  0801               	movf	1,w
  5322  0220  0666               	xorwf	??_setSw_Main,w
  5323  0221  39FD               	andlw	-3
  5324  0222  0666               	xorwf	??_setSw_Main,w
  5325  0223  0081               	movwf	1
  5326                           
  5327                           ;Switch_B1.c: 143: } else {
  5328  0224  2A3A               	goto	l2651
  5329  0225                     l10107:	
  5330                           
  5331                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5332  0225  0A79               	incf	_Sw,w
  5333  0226  0086               	movwf	6
  5334  0227  3001               	movlw	1	; select bank2/3
  5335  0228  0087               	movwf	7
  5336  0229  1881               	btfsc	1,1
  5337  022A  2A3A               	goto	l2651
  5338                           
  5339                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5340  022B  0A79               	incf	_Sw,w
  5341  022C  0086               	movwf	6
  5342  022D  3001               	movlw	1	; select bank2/3
  5343  022E  0087               	movwf	7
  5344  022F  1481               	bsf	1,1
  5345                           
  5346                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5347  0230  0879               	movf	_Sw,w
  5348  0231  0086               	movwf	6
  5349  0232  3001               	movlw	1	; select bank2/3
  5350  0233  0087               	movwf	7
  5351  0234  1081               	bcf	1,1
  5352                           
  5353                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5354  0235  0879               	movf	_Sw,w
  5355  0236  0086               	movwf	6
  5356  0237  3001               	movlw	1	; select bank2/3
  5357  0238  0087               	movwf	7
  5358  0239  1501               	bsf	1,2
  5359  023A                     l2651:	
  5360                           
  5361                           ;Switch_B1.c: 148: }
  5362                           ;Switch_B1.c: 149: }
  5363                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5364  023A  0879               	movf	_Sw,w
  5365  023B  0086               	movwf	6
  5366  023C  3001               	movlw	1	; select bank2/3
  5367  023D  0087               	movwf	7
  5368  023E  1C81               	btfss	1,1
  5369  023F  2B0A               	goto	l10157
  5370                           
  5371                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5372  0240  0879               	movf	_Sw,w
  5373  0241  0086               	movwf	6
  5374  0242  3001               	movlw	1	; select bank2/3
  5375  0243  0087               	movwf	7
  5376  0244  1901               	btfsc	1,2
  5377  0245  2A68               	goto	l10123
  5378                           
  5379                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5380  0246  3001               	movlw	1
  5381  0247  0020               	movlb	0	; select bank0
  5382  0248  00E6               	movwf	??_setSw_Main
  5383  0249  0879               	movf	_Sw,w
  5384  024A  3E02               	addlw	2
  5385  024B  0086               	movwf	6
  5386  024C  3001               	movlw	1	; select bank2/3
  5387  024D  0087               	movwf	7
  5388  024E  0866               	movf	??_setSw_Main,w
  5389  024F  0781               	addwf	1,f
  5390                           
  5391                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5392  0250  0879               	movf	_Sw,w
  5393  0251  3E02               	addlw	2
  5394  0252  0086               	movwf	6
  5395  0253  3001               	movlw	1	; select bank2/3
  5396  0254  0087               	movwf	7
  5397  0255  3005               	movlw	5
  5398  0256  0201               	subwf	1,w
  5399  0257  1C03               	skipc
  5400  0258  0008               	return
  5401                           
  5402                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5403  0259  0879               	movf	_Sw,w
  5404  025A  3E02               	addlw	2
  5405  025B  0086               	movwf	6
  5406  025C  3001               	movlw	1	; select bank2/3
  5407  025D  0087               	movwf	7
  5408  025E  0181               	clrf	1
  5409                           
  5410                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5411  025F  0879               	movf	_Sw,w
  5412  0260  0086               	movwf	6
  5413  0261  3001               	movlw	1	; select bank2/3
  5414  0262  0087               	movwf	7
  5415  0263  1501               	bsf	1,2
  5416                           
  5417                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5418  0264  0868               	movf	setSw_Main@sw,w
  5419  0265  3194  24B2         	fcall	_setDimmerLights_SwOn
  5420                           
  5421                           ;Switch_B1.c: 162: }
  5422                           ;Switch_B1.c: 163: } else {
  5423  0267  0008               	return
  5424  0268                     l10123:	
  5425                           
  5426                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5427  0268  0879               	movf	_Sw,w
  5428  0269  0086               	movwf	6
  5429  026A  3001               	movlw	1	; select bank2/3
  5430  026B  0087               	movwf	7
  5431  026C  1981               	btfsc	1,3
  5432  026D  2A9A               	goto	l10133
  5433                           
  5434                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5435  026E  0879               	movf	_Sw,w
  5436  026F  3E03               	addlw	3
  5437  0270  0086               	movwf	6
  5438  0271  3001               	movlw	1	; select bank2/3
  5439  0272  0087               	movwf	7
  5440  0273  3001               	movlw	1
  5441  0274  0781               	addwf	1,f
  5442  0275  3141               	addfsr 1,1
  5443  0276  1803               	skipnc
  5444  0277  0A81               	incf	1,f
  5445                           
  5446                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5447  0278  0879               	movf	_Sw,w
  5448  0279  3E03               	addlw	3
  5449  027A  0086               	movwf	6
  5450  027B  3001               	movlw	1	; select bank2/3
  5451  027C  0087               	movwf	7
  5452  027D  3F40               	moviw [0]fsr1
  5453  027E  0020               	movlb	0	; select bank0
  5454  027F  00E6               	movwf	??_setSw_Main
  5455  0280  3F41               	moviw [1]fsr1
  5456  0281  00E7               	movwf	??_setSw_Main+1
  5457  0282  3000               	movlw	0
  5458  0283  0267               	subwf	??_setSw_Main+1,w
  5459  0284  3096               	movlw	150
  5460  0285  1903               	skipnz
  5461  0286  0266               	subwf	??_setSw_Main,w
  5462  0287  1C03               	skipc
  5463  0288  0008               	return
  5464                           
  5465                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5466  0289  0879               	movf	_Sw,w
  5467  028A  3E03               	addlw	3
  5468  028B  0086               	movwf	6
  5469  028C  3001               	movlw	1	; select bank2/3
  5470  028D  0087               	movwf	7
  5471  028E  3000               	movlw	0
  5472  028F  3FC0               	movwi [0]fsr1
  5473  0290  3FC1               	movwi [1]fsr1
  5474                           
  5475                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5476  0291  0879               	movf	_Sw,w
  5477  0292  0086               	movwf	6
  5478  0293  3001               	movlw	1	; select bank2/3
  5479  0294  0087               	movwf	7
  5480  0295  1581               	bsf	1,3
  5481                           
  5482                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5483  0296  0868               	movf	setSw_Main@sw,w
  5484  0297  3192  224F         	fcall	_setDimmerLights_AdjControl
  5485                           
  5486                           ;Switch_B1.c: 174: }
  5487                           ;Switch_B1.c: 175: } else {
  5488  0299  0008               	return
  5489  029A                     l10133:	
  5490                           
  5491                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5492  029A  0879               	movf	_Sw,w
  5493  029B  0086               	movwf	6
  5494  029C  3001               	movlw	1	; select bank2/3
  5495  029D  0087               	movwf	7
  5496  029E  1A01               	btfsc	1,4
  5497  029F  2AD8               	goto	l10147
  5498                           
  5499                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5500  02A0  0879               	movf	_Sw,w
  5501  02A1  3E05               	addlw	5
  5502  02A2  0086               	movwf	6
  5503  02A3  3001               	movlw	1	; select bank2/3
  5504  02A4  0087               	movwf	7
  5505  02A5  3001               	movlw	1
  5506  02A6  0781               	addwf	1,f
  5507  02A7  3141               	addfsr 1,1
  5508  02A8  1803               	skipnc
  5509  02A9  0A81               	incf	1,f
  5510                           
  5511                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5512  02AA  0879               	movf	_Sw,w
  5513  02AB  3E05               	addlw	5
  5514  02AC  0086               	movwf	6
  5515  02AD  3001               	movlw	1	; select bank2/3
  5516  02AE  0087               	movwf	7
  5517  02AF  3F40               	moviw [0]fsr1
  5518  02B0  0020               	movlb	0	; select bank0
  5519  02B1  00E6               	movwf	??_setSw_Main
  5520  02B2  3F41               	moviw [1]fsr1
  5521  02B3  00E7               	movwf	??_setSw_Main+1
  5522  02B4  3000               	movlw	0
  5523  02B5  0267               	subwf	??_setSw_Main+1,w
  5524  02B6  3096               	movlw	150
  5525  02B7  1903               	skipnz
  5526  02B8  0266               	subwf	??_setSw_Main,w
  5527  02B9  1C03               	skipc
  5528  02BA  0008               	return
  5529                           
  5530                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5531  02BB  0879               	movf	_Sw,w
  5532  02BC  3E05               	addlw	5
  5533  02BD  0086               	movwf	6
  5534  02BE  3001               	movlw	1	; select bank2/3
  5535  02BF  0087               	movwf	7
  5536  02C0  3000               	movlw	0
  5537  02C1  3FC0               	movwi [0]fsr1
  5538  02C2  3FC1               	movwi [1]fsr1
  5539                           
  5540                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5541  02C3  0879               	movf	_Sw,w
  5542  02C4  0086               	movwf	6
  5543  02C5  3001               	movlw	1	; select bank2/3
  5544  02C6  0087               	movwf	7
  5545  02C7  1601               	bsf	1,4
  5546                           
  5547                           ;Switch_B1.c: 183: setRF_Learn(1);
  5548  02C8  3001               	movlw	1
  5549  02C9  319D  253E  3181   	fcall	_setRF_Learn
  5550                           
  5551                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5552  02CC  0021               	movlb	1	; select bank1
  5553  02CD  1EA0               	btfss	_myMain^(0+128),5
  5554  02CE  0008               	return
  5555                           
  5556                           ;Switch_B1.c: 186: setBuz(2, 100);
  5557  02CF  3064               	movlw	100
  5558  02D0  0020               	movlb	0	; select bank0
  5559  02D1  00A9               	movwf	setBuz@time
  5560  02D2  3000               	movlw	0
  5561  02D3  00AA               	movwf	setBuz@time+1
  5562  02D4  3002               	movlw	2
  5563  02D5  3196  26F2         	fcall	_setBuz
  5564                           
  5565                           ;Switch_B1.c: 187: }
  5566                           ;Switch_B1.c: 189: }
  5567                           ;Switch_B1.c: 190: } else {
  5568  02D7  0008               	return
  5569  02D8                     l10147:	
  5570                           
  5571                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5572  02D8  0879               	movf	_Sw,w
  5573  02D9  0086               	movwf	6
  5574  02DA  3001               	movlw	1	; select bank2/3
  5575  02DB  0087               	movwf	7
  5576  02DC  1A81               	btfsc	1,5
  5577  02DD  0008               	return
  5578                           
  5579                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5580  02DE  0879               	movf	_Sw,w
  5581  02DF  3E07               	addlw	7
  5582  02E0  0086               	movwf	6
  5583  02E1  3001               	movlw	1	; select bank2/3
  5584  02E2  0087               	movwf	7
  5585  02E3  3001               	movlw	1
  5586  02E4  0781               	addwf	1,f
  5587  02E5  3141               	addfsr 1,1
  5588  02E6  1803               	skipnc
  5589  02E7  0A81               	incf	1,f
  5590                           
  5591                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5592  02E8  0879               	movf	_Sw,w
  5593  02E9  3E07               	addlw	7
  5594  02EA  0086               	movwf	6
  5595  02EB  3001               	movlw	1	; select bank2/3
  5596  02EC  0087               	movwf	7
  5597  02ED  3F40               	moviw [0]fsr1
  5598  02EE  0020               	movlb	0	; select bank0
  5599  02EF  00E6               	movwf	??_setSw_Main
  5600  02F0  3F41               	moviw [1]fsr1
  5601  02F1  00E7               	movwf	??_setSw_Main+1
  5602  02F2  3001               	movlw	1
  5603  02F3  0267               	subwf	??_setSw_Main+1,w
  5604  02F4  302C               	movlw	44
  5605  02F5  1903               	skipnz
  5606  02F6  0266               	subwf	??_setSw_Main,w
  5607  02F7  1C03               	skipc
  5608  02F8  0008               	return
  5609                           
  5610                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5611  02F9  0879               	movf	_Sw,w
  5612  02FA  3E07               	addlw	7
  5613  02FB  0086               	movwf	6
  5614  02FC  3001               	movlw	1	; select bank2/3
  5615  02FD  0087               	movwf	7
  5616  02FE  3000               	movlw	0
  5617  02FF  3FC0               	movwi [0]fsr1
  5618  0300  3FC1               	movwi [1]fsr1
  5619                           
  5620                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5621  0301  0879               	movf	_Sw,w
  5622  0302  0086               	movwf	6
  5623  0303  3001               	movlw	1	; select bank2/3
  5624  0304  0087               	movwf	7
  5625  0305  1681               	bsf	1,5
  5626                           
  5627                           ;Switch_B1.c: 198: setRF_Learn(0);
  5628  0306  3000               	movlw	0
  5629  0307  319D  253E         	fcall	_setRF_Learn
  5630                           
  5631                           ;Switch_B1.c: 201: }
  5632                           ;Switch_B1.c: 202: }
  5633                           ;Switch_B1.c: 203: }
  5634                           ;Switch_B1.c: 204: }
  5635                           ;Switch_B1.c: 205: }
  5636                           ;Switch_B1.c: 206: } else {
  5637  0309  0008               	return
  5638  030A                     l10157:	
  5639                           
  5640                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5641  030A  0879               	movf	_Sw,w
  5642  030B  0086               	movwf	6
  5643  030C  3001               	movlw	1	; select bank2/3
  5644  030D  0087               	movwf	7
  5645  030E  1D01               	btfss	1,2
  5646  030F  0008               	return
  5647                           
  5648                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5649  0310  3001               	movlw	1
  5650  0311  0020               	movlb	0	; select bank0
  5651  0312  00E6               	movwf	??_setSw_Main
  5652  0313  0879               	movf	_Sw,w
  5653  0314  3E02               	addlw	2
  5654  0315  0086               	movwf	6
  5655  0316  3001               	movlw	1	; select bank2/3
  5656  0317  0087               	movwf	7
  5657  0318  0866               	movf	??_setSw_Main,w
  5658  0319  0781               	addwf	1,f
  5659                           
  5660                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5661  031A  0879               	movf	_Sw,w
  5662  031B  3E02               	addlw	2
  5663  031C  0086               	movwf	6
  5664  031D  3001               	movlw	1	; select bank2/3
  5665  031E  0087               	movwf	7
  5666  031F  3005               	movlw	5
  5667  0320  0201               	subwf	1,w
  5668  0321  1C03               	skipc
  5669  0322  0008               	return
  5670                           
  5671                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5672  0323  0879               	movf	_Sw,w
  5673  0324  3E02               	addlw	2
  5674  0325  0086               	movwf	6
  5675  0326  3001               	movlw	1	; select bank2/3
  5676  0327  0087               	movwf	7
  5677  0328  0181               	clrf	1
  5678                           
  5679                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5680  0329  0879               	movf	_Sw,w
  5681  032A  0086               	movwf	6
  5682  032B  3001               	movlw	1	; select bank2/3
  5683  032C  0087               	movwf	7
  5684  032D  1101               	bcf	1,2
  5685                           
  5686                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5687  032E  0879               	movf	_Sw,w
  5688  032F  3E03               	addlw	3
  5689  0330  0086               	movwf	6
  5690  0331  3001               	movlw	1	; select bank2/3
  5691  0332  0087               	movwf	7
  5692  0333  3000               	movlw	0
  5693  0334  3FC0               	movwi [0]fsr1
  5694  0335  3FC1               	movwi [1]fsr1
  5695                           
  5696                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5697  0336  0879               	movf	_Sw,w
  5698  0337  0086               	movwf	6
  5699  0338  3001               	movlw	1	; select bank2/3
  5700  0339  0087               	movwf	7
  5701  033A  1181               	bcf	1,3
  5702                           
  5703                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5704  033B  0879               	movf	_Sw,w
  5705  033C  3E05               	addlw	5
  5706  033D  0086               	movwf	6
  5707  033E  3001               	movlw	1	; select bank2/3
  5708  033F  0087               	movwf	7
  5709  0340  3000               	movlw	0
  5710  0341  3FC0               	movwi [0]fsr1
  5711  0342  3FC1               	movwi [1]fsr1
  5712                           
  5713                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5714  0343  0879               	movf	_Sw,w
  5715  0344  0086               	movwf	6
  5716  0345  3001               	movlw	1	; select bank2/3
  5717  0346  0087               	movwf	7
  5718  0347  1201               	bcf	1,4
  5719                           
  5720                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5721  0348  0879               	movf	_Sw,w
  5722  0349  3E07               	addlw	7
  5723  034A  0086               	movwf	6
  5724  034B  3001               	movlw	1	; select bank2/3
  5725  034C  0087               	movwf	7
  5726  034D  3000               	movlw	0
  5727  034E  3FC0               	movwi [0]fsr1
  5728  034F  3FC1               	movwi [1]fsr1
  5729                           
  5730                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5731  0350  0879               	movf	_Sw,w
  5732  0351  0086               	movwf	6
  5733  0352  3001               	movlw	1	; select bank2/3
  5734  0353  0087               	movwf	7
  5735  0354  1281               	bcf	1,5
  5736                           
  5737                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5738  0355  0021               	movlb	1	; select bank1
  5739  0356  1853               	btfsc	_SwDetect^(0+128),0
  5740  0357  2B5D               	goto	l10183
  5741                           
  5742                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5743  0358  0020               	movlb	0	; select bank0
  5744  0359  0868               	movf	setSw_Main@sw,w
  5745  035A  3188  2004  3181   	fcall	_setDimmerLights_SwOff
  5746  035D                     l10183:	
  5747                           
  5748                           ;Switch_B1.c: 221: }
  5749                           ;Switch_B1.c: 224: setRF_Learn(0);
  5750  035D  3000               	movlw	0
  5751  035E  319D  253E         	fcall	_setRF_Learn
  5752                           
  5753                           ;Switch_B1.c: 226: }
  5754                           ;Switch_B1.c: 227: }
  5755                           ;Switch_B1.c: 228: }
  5756                           ;Switch_B1.c: 229: } else {
  5757  0360  0008               	return
  5758  0361                     l2649:	
  5759                           
  5760                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5761  0361  0021               	movlb	1	; select bank1
  5762  0362  1C20               	btfss	_myMain^(0+128),0
  5763  0363  0008               	return
  5764                           
  5765                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5766  0364  0879               	movf	_Sw,w
  5767  0365  0086               	movwf	6
  5768  0366  3001               	movlw	1	; select bank2/3
  5769  0367  0087               	movwf	7
  5770  0368  1401               	bsf	1,0
  5771  0369  0008               	return
  5772  036A                     __end_of_setSw_Main:	
  5773                           
  5774                           	psect	text14
  5775  1D3E                     __ptext14:	
  5776 ;; *************** function _setRF_Learn *****************
  5777 ;; Defined at:
  5778 ;;		line 23 in file "../src/RF_Control_B1.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;  command         1    wreg     unsigned char 
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  command         1    1[BANK0 ] unsigned char 
  5783 ;; Return value:  Size  Location     Type
  5784 ;;		None               void
  5785 ;; Registers used:
  5786 ;;		wreg, status,2, status,0
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;Total ram usage:        2 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:    5
  5799 ;; This function calls:
  5800 ;;		Nothing
  5801 ;; This function is called by:
  5802 ;;		_setSw_Main
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           
  5807                           ;psect for function _setRF_Learn
  5808  1D3E                     _setRF_Learn:	
  5809                           
  5810                           ;incstack = 0
  5811                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5812                           ;setRF_Learn@command stored from wreg
  5813  1D3E  0020               	movlb	0	; select bank0
  5814  1D3F  00A1               	movwf	setRF_Learn@command
  5815                           
  5816                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5817  1D40  0821               	movf	setRF_Learn@command,w
  5818  1D41  3A01               	xorlw	1
  5819  1D42  3000               	movlw	0
  5820  1D43  1903               	skipnz
  5821  1D44  3001               	movlw	1
  5822  1D45  00A0               	movwf	??_setRF_Learn
  5823  1D46  0EA0               	swapf	??_setRF_Learn,f
  5824  1D47  0DA0               	rlf	??_setRF_Learn,f
  5825  1D48  0DA0               	rlf	??_setRF_Learn,f
  5826  1D49  0021               	movlb	1	; select bank1
  5827  1D4A  083C               	movf	_RF1^(0+128),w
  5828  1D4B  0020               	movlb	0	; select bank0
  5829  1D4C  0620               	xorwf	??_setRF_Learn,w
  5830  1D4D  39BF               	andlw	-65
  5831  1D4E  0620               	xorwf	??_setRF_Learn,w
  5832  1D4F  0021               	movlb	1	; select bank1
  5833  1D50  00BC               	movwf	_RF1^(0+128)
  5834  1D51  0008               	return
  5835  1D52                     __end_of_setRF_Learn:	
  5836                           
  5837                           	psect	text15
  5838  124F                     __ptext15:	
  5839 ;; *************** function _setDimmerLights_AdjControl *****************
  5840 ;; Defined at:
  5841 ;;		line 606 in file "../src/Dimmer_B1.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;  sw              1    wreg     unsigned char 
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;  sw              1    8[BANK0 ] unsigned char 
  5846 ;;  idle            1    6[BANK0 ] unsigned char 
  5847 ;; Return value:  Size  Location     Type
  5848 ;;		None               void
  5849 ;; Registers used:
  5850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5857 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5859 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5860 ;;Total ram usage:        4 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    7
  5863 ;; This function calls:
  5864 ;;		_DimmerLightsPointSelect
  5865 ;;		_getAll_DimmerLights_AdjGO
  5866 ;;		_setDimmerLights_TriggerAdj
  5867 ;; This function is called by:
  5868 ;;		_setSw_Main
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           
  5873                           ;psect for function _setDimmerLights_AdjControl
  5874  124F                     _setDimmerLights_AdjControl:	
  5875                           
  5876                           ;incstack = 0
  5877                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5878                           ;setDimmerLights_AdjControl@sw stored from wreg
  5879  124F  0020               	movlb	0	; select bank0
  5880  1250  00A8               	movwf	setDimmerLights_AdjControl@sw
  5881                           
  5882                           ;Dimmer_B1.c: 607: DimmerLightsPointSelect(sw);
  5883  1251  0828               	movf	setDimmerLights_AdjControl@sw,w
  5884  1252  319C  24B6  3192   	fcall	_DimmerLightsPointSelect
  5885                           
  5886                           ;Dimmer_B1.c: 608: char idle = 0;
  5887  1255  0020               	movlb	0	; select bank0
  5888  1256  01A6               	clrf	setDimmerLights_AdjControl@idle
  5889                           
  5890                           ;Dimmer_B1.c: 610: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  5891  1257  01A7               	clrf	_setDimmerLights_AdjControl$2589
  5892  1258  319C  2429  3192   	fcall	_getAll_DimmerLights_AdjGO
  5893  125B  3A01               	xorlw	1
  5894  125C  1D03               	skipz
  5895  125D  2A64               	goto	l9395
  5896  125E  0021               	movlb	1	; select bank1
  5897  125F  1CC8               	btfss	_Dimmer^(0+128),1
  5898  1260  2A64               	goto	l9395
  5899  1261  0020               	movlb	0	; select bank0
  5900  1262  01A7               	clrf	_setDimmerLights_AdjControl$2589
  5901  1263  0AA7               	incf	_setDimmerLights_AdjControl$2589,f
  5902  1264                     l9395:	
  5903  1264  0020               	movlb	0	; select bank0
  5904  1265  0827               	movf	_setDimmerLights_AdjControl$2589,w
  5905  1266  00A5               	movwf	??_setDimmerLights_AdjControl
  5906  1267  0825               	movf	??_setDimmerLights_AdjControl,w
  5907  1268  00A6               	movwf	setDimmerLights_AdjControl@idle
  5908                           
  5909                           ;Dimmer_B1.c: 612: if (idle == 0) {
  5910  1269  08A6               	movf	setDimmerLights_AdjControl@idle,f
  5911  126A  1D03               	skipz
  5912  126B  0008               	return
  5913                           
  5914                           ;Dimmer_B1.c: 613: if (DimmerLights->SwFlag == 1) {
  5915  126C  0877               	movf	_DimmerLights,w
  5916  126D  3E09               	addlw	9
  5917  126E  0086               	movwf	6
  5918  126F  3001               	movlw	1	; select bank2/3
  5919  1270  0087               	movwf	7
  5920  1271  1F01               	btfss	1,6
  5921  1272  0008               	return
  5922                           
  5923                           ;Dimmer_B1.c: 614: DimmerLights->SwAdj = 1;
  5924  1273  0877               	movf	_DimmerLights,w
  5925  1274  3E09               	addlw	9
  5926  1275  0086               	movwf	6
  5927  1276  3001               	movlw	1	; select bank2/3
  5928  1277  0087               	movwf	7
  5929  1278  1781               	bsf	1,7
  5930                           
  5931                           ;Dimmer_B1.c: 615: DimmerLights->Status = 1;
  5932  1279  0877               	movf	_DimmerLights,w
  5933  127A  0086               	movwf	6
  5934  127B  3001               	movlw	1	; select bank2/3
  5935  127C  0087               	movwf	7
  5936  127D  1681               	bsf	1,5
  5937                           
  5938                           ;Dimmer_B1.c: 616: setDimmerLights_TriggerAdj(sw, 1);
  5939  127E  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5940  127F  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5941  1280  0828               	movf	setDimmerLights_AdjControl@sw,w
  5942  1281  319E  26CE         	fcall	_setDimmerLights_TriggerAdj
  5943  1283  0008               	return
  5944  1284                     __end_of_setDimmerLights_AdjControl:	
  5945                           
  5946                           	psect	text16
  5947  1EAF                     __ptext16:	
  5948 ;; *************** function _getSw_KeyStatus *****************
  5949 ;; Defined at:
  5950 ;;		line 516 in file "../src/Dimmer_B1.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;  sw              1    wreg     unsigned char 
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;  sw              1    4[BANK0 ] unsigned char 
  5955 ;;  status          1    3[BANK0 ] unsigned char 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;                  1    wreg      unsigned char 
  5958 ;; Registers used:
  5959 ;;		wreg, status,2
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;Total ram usage:        5 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    5
  5972 ;; This function calls:
  5973 ;;		Nothing
  5974 ;; This function is called by:
  5975 ;;		_setSw_Main
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           
  5980                           ;psect for function _getSw_KeyStatus
  5981  1EAF                     _getSw_KeyStatus:	
  5982                           
  5983                           ;incstack = 0
  5984                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  5985                           ;getSw_KeyStatus@sw stored from wreg
  5986  1EAF  0020               	movlb	0	; select bank0
  5987  1EB0  00A4               	movwf	getSw_KeyStatus@sw
  5988                           
  5989                           ;Dimmer_B1.c: 517: char status = 0;
  5990  1EB1  01A3               	clrf	getSw_KeyStatus@status
  5991                           
  5992                           ;Dimmer_B1.c: 529: if (sw == 1) {
  5993  1EB2  0824               	movf	getSw_KeyStatus@sw,w
  5994  1EB3  3A01               	xorlw	1
  5995  1EB4  1D03               	skipz
  5996  1EB5  2EBE               	goto	l9369
  5997                           
  5998                           ;Dimmer_B1.c: 530: status = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  5999  1EB6  01A1               	clrf	_getSw_KeyStatus$2573
  6000  1EB7  0AA1               	incf	_getSw_KeyStatus$2573,f
  6001  1EB8  1F0C               	btfss	12,6	;volatile
  6002  1EB9  1A0C               	btfsc	12,4	;volatile
  6003  1EBA  2EBC               	goto	l9367
  6004  1EBB  01A1               	clrf	_getSw_KeyStatus$2573
  6005  1EBC                     l9367:	
  6006  1EBC  0821               	movf	_getSw_KeyStatus$2573,w
  6007  1EBD  2EC9               	goto	L3
  6008  1EBE                     l9369:	
  6009                           ;Dimmer_B1.c: 531: } else if (sw == 2) {
  6010                           
  6011  1EBE  0824               	movf	getSw_KeyStatus@sw,w
  6012  1EBF  3A02               	xorlw	2
  6013  1EC0  1D03               	skipz
  6014  1EC1  2ECC               	goto	l9379
  6015                           
  6016                           ;Dimmer_B1.c: 532: status = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  6017  1EC2  01A2               	clrf	_getSw_KeyStatus$2574
  6018  1EC3  0AA2               	incf	_getSw_KeyStatus$2574,f
  6019  1EC4  1C0C               	btfss	12,0	;volatile
  6020  1EC5  188D               	btfsc	13,1	;volatile
  6021  1EC6  2EC8               	goto	l9377
  6022  1EC7  01A2               	clrf	_getSw_KeyStatus$2574
  6023  1EC8                     l9377:	
  6024  1EC8  0822               	movf	_getSw_KeyStatus$2574,w
  6025  1EC9                     L3:	
  6026  1EC9  00A0               	movwf	??_getSw_KeyStatus
  6027  1ECA  0820               	movf	??_getSw_KeyStatus,w
  6028  1ECB  00A3               	movwf	getSw_KeyStatus@status
  6029  1ECC                     l9379:	
  6030                           
  6031                           ;Dimmer_B1.c: 533: }
  6032                           ;Dimmer_B1.c: 540: return status;
  6033  1ECC  0823               	movf	getSw_KeyStatus@status,w
  6034  1ECD  0008               	return
  6035  1ECE                     __end_of_getSw_KeyStatus:	
  6036                           
  6037                           	psect	text17
  6038  1D2A                     __ptext17:	
  6039 ;; *************** function _SwPointSelect *****************
  6040 ;; Defined at:
  6041 ;;		line 25 in file "../src/Switch_B1.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;  sw              1    wreg     unsigned char 
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;  sw              1    1[BANK0 ] unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;		None               void
  6048 ;; Registers used:
  6049 ;;		wreg
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;Total ram usage:        2 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    5
  6062 ;; This function calls:
  6063 ;;		Nothing
  6064 ;; This function is called by:
  6065 ;;		_setSw_Main
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           
  6070                           ;psect for function _SwPointSelect
  6071  1D2A                     _SwPointSelect:	
  6072                           
  6073                           ;incstack = 0
  6074                           ; Regs used in _SwPointSelect: [wreg]
  6075                           ;SwPointSelect@sw stored from wreg
  6076  1D2A  0020               	movlb	0	; select bank0
  6077  1D2B  00A1               	movwf	SwPointSelect@sw
  6078                           
  6079                           ;Switch_B1.c: 28: if (sw == 1) {
  6080  1D2C  0821               	movf	SwPointSelect@sw,w
  6081  1D2D  3A01               	xorlw	1
  6082  1D2E  1D03               	skipz
  6083  1D2F  2D35               	goto	l9589
  6084                           
  6085                           ;Switch_B1.c: 29: Sw = &Sw1;
  6086  1D30  3054               	movlw	_Sw1& (0+255)
  6087  1D31  00A0               	movwf	??_SwPointSelect
  6088  1D32  0820               	movf	??_SwPointSelect,w
  6089  1D33  00F9               	movwf	_Sw
  6090                           
  6091                           ;Switch_B1.c: 30: }
  6092  1D34  0008               	return
  6093  1D35                     l9589:	
  6094                           
  6095                           ;Switch_B1.c: 33: else if (sw == 2) {
  6096  1D35  0821               	movf	SwPointSelect@sw,w
  6097  1D36  3A02               	xorlw	2
  6098  1D37  1D03               	skipz
  6099  1D38  0008               	return
  6100                           
  6101                           ;Switch_B1.c: 34: Sw = &Sw2;
  6102  1D39  30DC               	movlw	_Sw2& (0+255)
  6103  1D3A  00A0               	movwf	??_SwPointSelect
  6104  1D3B  0820               	movf	??_SwPointSelect,w
  6105  1D3C  00F9               	movwf	_Sw
  6106  1D3D  0008               	return
  6107  1D3E                     __end_of_SwPointSelect:	
  6108                           
  6109                           	psect	text18
  6110  09E7                     __ptext18:	
  6111 ;; *************** function _setMain_Exception *****************
  6112 ;; Defined at:
  6113 ;;		line 276 in file "../src/Main_B1.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;  command         1    wreg     unsigned char 
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;  command         1    4[BANK1 ] unsigned char 
  6118 ;;  status          1    3[BANK1 ] unsigned char 
  6119 ;;  buz             1    0[BANK1 ] unsigned char 
  6120 ;; Return value:  Size  Location     Type
  6121 ;;		None               void
  6122 ;; Registers used:
  6123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Totals:         0       2       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;Total ram usage:        7 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:   11
  6136 ;; This function calls:
  6137 ;;		_getDimmerLights_Line
  6138 ;;		_getMain_LightsStatus
  6139 ;;		_setBuz
  6140 ;;		_setDimmerLights_ErrorClose
  6141 ;;		_setLED
  6142 ;; This function is called by:
  6143 ;;		_Switch_Main
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           
  6148                           ;psect for function _setMain_Exception
  6149  09E7                     _setMain_Exception:	
  6150                           
  6151                           ;incstack = 0
  6152                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6153                           ;setMain_Exception@command stored from wreg
  6154  09E7  0021               	movlb	1	; select bank1
  6155  09E8  00EE               	movwf	setMain_Exception@command^(0+128)
  6156                           
  6157                           ;Main_B1.c: 277: char status = 0, buz = 0;
  6158  09E9  01ED               	clrf	setMain_Exception@status^(0+128)
  6159  09EA  01EA               	clrf	setMain_Exception@buz^(0+128)
  6160                           
  6161                           ;Main_B1.c: 292: status = command == 3 ? getDimmerLights_Line() : 255;
  6162  09EB  086E               	movf	setMain_Exception@command^(0+128),w
  6163  09EC  3A03               	xorlw	3
  6164  09ED  1903               	skipnz
  6165  09EE  29F4               	goto	l9857
  6166  09EF  30FF               	movlw	255
  6167  09F0  00EB               	movwf	_setMain_Exception$3935^(0+128)
  6168  09F1  3000               	movlw	0
  6169  09F2  00EC               	movwf	(_setMain_Exception$3935^(0+128)+1)
  6170  09F3  2A01               	goto	l9859
  6171  09F4                     l9857:	
  6172  09F4  319C  24EF  3189   	fcall	_getDimmerLights_Line
  6173  09F7  0020               	movlb	0	; select bank0
  6174  09F8  00EB               	movwf	??_setMain_Exception
  6175  09F9  01EC               	clrf	??_setMain_Exception+1
  6176  09FA  086B               	movf	??_setMain_Exception,w
  6177  09FB  0021               	movlb	1	; select bank1
  6178  09FC  00EB               	movwf	_setMain_Exception$3935^(0+128)
  6179  09FD  0020               	movlb	0	; select bank0
  6180  09FE  086C               	movf	??_setMain_Exception+1,w
  6181  09FF  0021               	movlb	1	; select bank1
  6182  0A00  00EC               	movwf	(_setMain_Exception$3935+1)^(0+128)
  6183  0A01                     l9859:	
  6184  0A01  086B               	movf	_setMain_Exception$3935^(0+128),w
  6185  0A02  0020               	movlb	0	; select bank0
  6186  0A03  00EB               	movwf	??_setMain_Exception
  6187  0A04  086B               	movf	??_setMain_Exception,w
  6188  0A05  0021               	movlb	1	; select bank1
  6189  0A06  00ED               	movwf	setMain_Exception@status^(0+128)
  6190                           
  6191                           ;Main_B1.c: 294: if (command == 0) {
  6192  0A07  08EE               	movf	setMain_Exception@command^(0+128),f
  6193  0A08  1D03               	skipz
  6194  0A09  2A0C               	goto	l9865
  6195                           
  6196                           ;Main_B1.c: 295: setLED(99, 10);
  6197  0A0A  300A               	movlw	10
  6198  0A0B  2A0D               	goto	L4
  6199  0A0C                     l9865:	
  6200                           ;Main_B1.c: 296: } else {
  6201                           
  6202                           
  6203                           ;Main_B1.c: 297: setLED(99, 11);
  6204  0A0C  300B               	movlw	11
  6205  0A0D                     L4:	
  6206  0A0D  0020               	movlb	0	; select bank0
  6207  0A0E  00EB               	movwf	??_setMain_Exception
  6208  0A0F  086B               	movf	??_setMain_Exception,w
  6209  0A10  00A2               	movwf	setLED@command
  6210  0A11  3063               	movlw	99
  6211  0A12  3189  2186  3189   	fcall	_setLED
  6212                           
  6213                           ;Main_B1.c: 298: }
  6214                           ;Main_B1.c: 300: if (command != 0) {
  6215  0A15  0021               	movlb	1	; select bank1
  6216  0A16  086E               	movf	setMain_Exception@command^(0+128),w
  6217  0A17  1903               	btfsc	3,2
  6218  0A18  0008               	return
  6219                           
  6220                           ;Main_B1.c: 301: switch (command) {
  6221  0A19  2A3A               	goto	l9881
  6222  0A1A                     l9871:	
  6223                           ;Main_B1.c: 302: case 2:
  6224                           
  6225                           
  6226                           ;Main_B1.c: 303: if (getMain_LightsStatus() == 1) {
  6227  0A1A  3191  2158  3189   	fcall	_getMain_LightsStatus
  6228  0A1D  3A01               	xorlw	1
  6229  0A1E  1D03               	skipz
  6230  0A1F  2A43               	goto	l9883
  6231                           
  6232                           ;Main_B1.c: 304: setBuz(10, 300);
  6233  0A20  302C               	movlw	44
  6234  0A21  0020               	movlb	0	; select bank0
  6235  0A22  00A9               	movwf	setBuz@time
  6236  0A23  3001               	movlw	1
  6237  0A24  00AA               	movwf	setBuz@time+1
  6238  0A25  300A               	movlw	10
  6239  0A26  3196  26F2  3189   	fcall	_setBuz
  6240                           
  6241                           ;Main_B1.c: 305: }
  6242                           ;Main_B1.c: 306: break;
  6243  0A29  2A43               	goto	l9883
  6244  0A2A                     l9875:	
  6245                           ;Main_B1.c: 307: case 3:
  6246                           
  6247                           
  6248                           ;Main_B1.c: 308: if (getMain_LightsStatus() == 1) {
  6249  0A2A  3191  2158  3189   	fcall	_getMain_LightsStatus
  6250  0A2D  3A01               	xorlw	1
  6251  0A2E  1D03               	skipz
  6252  0A2F  2A43               	goto	l9883
  6253                           
  6254                           ;Main_B1.c: 309: setBuz(5, 300);
  6255  0A30  302C               	movlw	44
  6256  0A31  0020               	movlb	0	; select bank0
  6257  0A32  00A9               	movwf	setBuz@time
  6258  0A33  3001               	movlw	1
  6259  0A34  00AA               	movwf	setBuz@time+1
  6260  0A35  3005               	movlw	5
  6261  0A36  3196  26F2  3189   	fcall	_setBuz
  6262                           
  6263                           ;Main_B1.c: 312: }
  6264                           
  6265                           ;Main_B1.c: 310: }
  6266                           ;Main_B1.c: 311: break;
  6267  0A39  2A43               	goto	l9883
  6268  0A3A                     l9881:	
  6269  0A3A  0021               	movlb	1	; select bank1
  6270  0A3B  086E               	movf	setMain_Exception@command^(0+128),w
  6271                           
  6272                           ; Switch size 1, requested type "space"
  6273                           ; Number of cases is 2, Range of values is 2 to 3
  6274                           ; switch strategies available:
  6275                           ; Name         Instructions Cycles
  6276                           ; simple_byte            7     4 (average)
  6277                           ; direct_byte           13     9 (fixed)
  6278                           ; jumptable            263     9 (fixed)
  6279                           ;	Chosen strategy is simple_byte
  6280  0A3C  3A02               	xorlw	2	; case 2
  6281  0A3D  1903               	skipnz
  6282  0A3E  2A1A               	goto	l9871
  6283  0A3F  3A01               	xorlw	1	; case 3
  6284  0A40  1903               	skipnz
  6285  0A41  2A2A               	goto	l9875
  6286  0A42  2A43               	goto	l9883
  6287  0A43                     l9883:	
  6288                           
  6289                           ;Main_B1.c: 313: setDimmerLights_ErrorClose(status);
  6290  0A43  0021               	movlb	1	; select bank1
  6291  0A44  086D               	movf	setMain_Exception@status^(0+128),w
  6292  0A45  3197  274B         	fcall	_setDimmerLights_ErrorClose
  6293  0A47  0021               	movlb	1	; select bank1
  6294  0A48  0008               	return
  6295  0A49                     __end_of_setMain_Exception:	
  6296                           
  6297                           	psect	text19
  6298  174B                     __ptext19:	
  6299 ;; *************** function _setDimmerLights_ErrorClose *****************
  6300 ;; Defined at:
  6301 ;;		line 622 in file "../src/Dimmer_B1.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;  lights          1    wreg     unsigned char 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  lights          1   72[BANK0 ] unsigned char 
  6306 ;;  i               2   73[BANK0 ] int 
  6307 ;;  count           1   71[BANK0 ] unsigned char 
  6308 ;; Return value:  Size  Location     Type
  6309 ;;		None               void
  6310 ;; Registers used:
  6311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;Total ram usage:        5 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:   10
  6324 ;; This function calls:
  6325 ;;		_DimmerLightsPointSelect
  6326 ;;		_getDimmerLights_Status
  6327 ;;		_setDimmerLights_SwOff
  6328 ;; This function is called by:
  6329 ;;		_setMain_Exception
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           
  6334                           ;psect for function _setDimmerLights_ErrorClose
  6335  174B                     _setDimmerLights_ErrorClose:	
  6336                           
  6337                           ;incstack = 0
  6338                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6339                           ;setDimmerLights_ErrorClose@lights stored from wreg
  6340  174B  0020               	movlb	0	; select bank0
  6341  174C  00E8               	movwf	setDimmerLights_ErrorClose@lights
  6342                           
  6343                           ;Dimmer_B1.c: 623: if (lights == 255) {
  6344  174D  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6345  174E  3AFF               	xorlw	255
  6346  174F  1D03               	skipz
  6347  1750  2F88               	goto	l9423
  6348                           
  6349                           ;Dimmer_B1.c: 628: char count = 2;
  6350  1751  3002               	movlw	2
  6351  1752  00E6               	movwf	??_setDimmerLights_ErrorClose
  6352  1753  0866               	movf	??_setDimmerLights_ErrorClose,w
  6353  1754  00E7               	movwf	setDimmerLights_ErrorClose@count
  6354                           
  6355                           ;Dimmer_B1.c: 633: for (int i = 0; i < count; i++) {
  6356  1755  01E9               	clrf	setDimmerLights_ErrorClose@i
  6357  1756  01EA               	clrf	setDimmerLights_ErrorClose@i+1
  6358  1757                     l9421:	
  6359  1757  086A               	movf	setDimmerLights_ErrorClose@i+1,w
  6360  1758  3A80               	xorlw	128
  6361  1759  00E6               	movwf	??_setDimmerLights_ErrorClose
  6362  175A  3080               	movlw	128
  6363  175B  0266               	subwf	??_setDimmerLights_ErrorClose,w
  6364  175C  1D03               	skipz
  6365  175D  2F60               	goto	u10325
  6366  175E  0867               	movf	setDimmerLights_ErrorClose@count,w
  6367  175F  0269               	subwf	setDimmerLights_ErrorClose@i,w
  6368  1760                     u10325:	
  6369  1760  1803               	btfsc	3,0
  6370  1761  0008               	return
  6371                           
  6372                           ;Dimmer_B1.c: 634: DimmerLightsPointSelect(i + 1);
  6373  1762  0020               	movlb	0	; select bank0
  6374  1763  0869               	movf	setDimmerLights_ErrorClose@i,w
  6375  1764  3E01               	addlw	1
  6376  1765  319C  24B6  3197   	fcall	_DimmerLightsPointSelect
  6377                           
  6378                           ;Dimmer_B1.c: 635: if (getDimmerLights_Status(i + 1) == 1) {
  6379  1768  0020               	movlb	0	; select bank0
  6380  1769  0869               	movf	setDimmerLights_ErrorClose@i,w
  6381  176A  3E01               	addlw	1
  6382  176B  319C  2419  3197   	fcall	_getDimmerLights_Status
  6383  176E  3A01               	xorlw	1
  6384  176F  1D03               	skipz
  6385  1770  2F82               	goto	l9419
  6386                           
  6387                           ;Dimmer_B1.c: 636: DimmerLights->SwFlag = 1;
  6388  1771  0877               	movf	_DimmerLights,w
  6389  1772  3E09               	addlw	9
  6390  1773  0086               	movwf	6
  6391  1774  3001               	movlw	1	; select bank2/3
  6392  1775  0087               	movwf	7
  6393  1776  1701               	bsf	1,6
  6394                           
  6395                           ;Dimmer_B1.c: 637: DimmerLights->Status = 0;
  6396  1777  0877               	movf	_DimmerLights,w
  6397  1778  0086               	movwf	6
  6398  1779  3001               	movlw	1	; select bank2/3
  6399  177A  0087               	movwf	7
  6400  177B  1281               	bcf	1,5
  6401                           
  6402                           ;Dimmer_B1.c: 638: setDimmerLights_SwOff(i + 1);
  6403  177C  0020               	movlb	0	; select bank0
  6404  177D  0869               	movf	setDimmerLights_ErrorClose@i,w
  6405  177E  3E01               	addlw	1
  6406  177F  3188  2004  3197   	fcall	_setDimmerLights_SwOff
  6407  1782                     l9419:	
  6408  1782  3001               	movlw	1
  6409  1783  0020               	movlb	0	; select bank0
  6410  1784  07E9               	addwf	setDimmerLights_ErrorClose@i,f
  6411  1785  3000               	movlw	0
  6412  1786  3DEA               	addwfc	setDimmerLights_ErrorClose@i+1,f
  6413  1787  2F57               	goto	l9421
  6414  1788                     l9423:	
  6415                           ;Dimmer_B1.c: 639: }
  6416                           ;Dimmer_B1.c: 640: }
  6417                           ;Dimmer_B1.c: 641: } else {
  6418                           
  6419                           
  6420                           ;Dimmer_B1.c: 642: DimmerLightsPointSelect(lights);
  6421  1788  0020               	movlb	0	; select bank0
  6422  1789  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6423  178A  319C  24B6  3197   	fcall	_DimmerLightsPointSelect
  6424                           
  6425                           ;Dimmer_B1.c: 643: if (getDimmerLights_Status(lights) == 1) {
  6426  178D  0020               	movlb	0	; select bank0
  6427  178E  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6428  178F  319C  2419  3197   	fcall	_getDimmerLights_Status
  6429  1792  3A01               	xorlw	1
  6430  1793  1D03               	skipz
  6431  1794  0008               	return
  6432                           
  6433                           ;Dimmer_B1.c: 644: DimmerLights->SwFlag = 1;
  6434  1795  0877               	movf	_DimmerLights,w
  6435  1796  3E09               	addlw	9
  6436  1797  0086               	movwf	6
  6437  1798  3001               	movlw	1	; select bank2/3
  6438  1799  0087               	movwf	7
  6439  179A  1701               	bsf	1,6
  6440                           
  6441                           ;Dimmer_B1.c: 645: DimmerLights->Status = 0;
  6442  179B  0877               	movf	_DimmerLights,w
  6443  179C  0086               	movwf	6
  6444  179D  3001               	movlw	1	; select bank2/3
  6445  179E  0087               	movwf	7
  6446  179F  1281               	bcf	1,5
  6447                           
  6448                           ;Dimmer_B1.c: 646: setDimmerLights_SwOff(lights);
  6449  17A0  0020               	movlb	0	; select bank0
  6450  17A1  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6451  17A2  3188  2004         	fcall	_setDimmerLights_SwOff
  6452  17A4  0008               	return
  6453  17A5                     __end_of_setDimmerLights_ErrorClose:	
  6454                           
  6455                           	psect	text20
  6456  1CEF                     __ptext20:	
  6457 ;; *************** function _getDimmerLights_Line *****************
  6458 ;; Defined at:
  6459 ;;		line 750 in file "../src/Dimmer_B1.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;		None
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;  line            1    1[BANK0 ] unsigned char 
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  1    wreg      unsigned char 
  6466 ;; Registers used:
  6467 ;;		wreg, status,2
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;Total ram usage:        2 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:    5
  6480 ;; This function calls:
  6481 ;;		Nothing
  6482 ;; This function is called by:
  6483 ;;		_setMain_Exception
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           
  6488                           ;psect for function _getDimmerLights_Line
  6489  1CEF                     _getDimmerLights_Line:	
  6490                           
  6491                           ;Dimmer_B1.c: 751: char line = 0;
  6492                           
  6493                           ;incstack = 0
  6494                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6495  1CEF  0020               	movlb	0	; select bank0
  6496  1CF0  01A1               	clrf	getDimmerLights_Line@line
  6497                           
  6498                           ;Dimmer_B1.c: 753: if (DimmerLights1.Line == 1) {
  6499  1CF1  0023               	movlb	3	; select bank3
  6500  1CF2  1C47               	btfss	(_DimmerLights1^(0+384)+9),0
  6501  1CF3  2CF8               	goto	l898
  6502                           
  6503                           ;Dimmer_B1.c: 754: line = 1;
  6504  1CF4  0020               	movlb	0	; select bank0
  6505  1CF5  01A1               	clrf	getDimmerLights_Line@line
  6506  1CF6  0AA1               	incf	getDimmerLights_Line@line,f
  6507                           
  6508                           ;Dimmer_B1.c: 755: }
  6509  1CF7  2CFF               	goto	l899
  6510  1CF8                     l898:	
  6511                           
  6512                           ;Dimmer_B1.c: 758: else if (DimmerLights2.Line == 1) {
  6513  1CF8  1C56               	btfss	(_DimmerLights2^(0+384)+9),0
  6514  1CF9  2CFF               	goto	l899
  6515                           
  6516                           ;Dimmer_B1.c: 759: line = 2;
  6517  1CFA  3002               	movlw	2
  6518  1CFB  0020               	movlb	0	; select bank0
  6519  1CFC  00A0               	movwf	??_getDimmerLights_Line
  6520  1CFD  0820               	movf	??_getDimmerLights_Line,w
  6521  1CFE  00A1               	movwf	getDimmerLights_Line@line
  6522  1CFF                     l899:	
  6523                           
  6524                           ;Dimmer_B1.c: 760: }
  6525                           ;Dimmer_B1.c: 767: return line;
  6526  1CFF  0020               	movlb	0	; select bank0
  6527  1D00  0821               	movf	getDimmerLights_Line@line,w
  6528  1D01  0008               	return
  6529  1D02                     __end_of_getDimmerLights_Line:	
  6530                           
  6531                           	psect	text21
  6532  1BE0                     __ptext21:	
  6533 ;; *************** function _Switch_Initialization *****************
  6534 ;; Defined at:
  6535 ;;		line 46 in file "../src/Switch_B1.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;		None
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;		None
  6540 ;; Return value:  Size  Location     Type
  6541 ;;		None               void
  6542 ;; Registers used:
  6543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;Total ram usage:        0 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    8
  6556 ;; This function calls:
  6557 ;;		_TouchPower
  6558 ;;		_setSw_Initialization
  6559 ;; This function is called by:
  6560 ;;		_main
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           
  6565                           ;psect for function _Switch_Initialization
  6566  1BE0                     _Switch_Initialization:	
  6567                           
  6568                           ;Switch_B1.c: 47: TouchPower();
  6569                           
  6570                           ;incstack = 0
  6571                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6572  1BE0  319D  2591  319B   	fcall	_TouchPower
  6573                           
  6574                           ;Switch_B1.c: 49: WPUB1 = 0;
  6575  1BE3  0024               	movlb	4	; select bank4
  6576  1BE4  108D               	bcf	13,1	;volatile
  6577                           
  6578                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6579  1BE5  3001               	movlw	1
  6580  1BE6  3187  27F8  319B   	fcall	_setSw_Initialization
  6581                           
  6582                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6583  1BE9  3002               	movlw	2
  6584  1BEA  3187  27F8         	fcall	_setSw_Initialization
  6585  1BEC  0008               	return
  6586  1BED                     __end_of_Switch_Initialization:	
  6587                           
  6588                           	psect	text22
  6589  07F8                     __ptext22:	
  6590 ;; *************** function _setSw_Initialization *****************
  6591 ;; Defined at:
  6592 ;;		line 109 in file "../src/Switch_B1.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;  sw              1    wreg     unsigned char 
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;  sw              1    4[BANK0 ] unsigned char 
  6597 ;; Return value:  Size  Location     Type
  6598 ;;		None               void
  6599 ;; Registers used:
  6600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6601 ;; Tracked objects:
  6602 ;;		On entry : 0/0
  6603 ;;		On exit  : 0/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6609 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;Total ram usage:        1 bytes
  6611 ;; Hardware stack levels used:    1
  6612 ;; Hardware stack levels required when called:    7
  6613 ;; This function calls:
  6614 ;;		_setLED
  6615 ;; This function is called by:
  6616 ;;		_Switch_Initialization
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           
  6621                           ;psect for function _setSw_Initialization
  6622  07F8                     _setSw_Initialization:	
  6623                           
  6624                           ;incstack = 0
  6625                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6626                           ;setSw_Initialization@sw stored from wreg
  6627  07F8  0020               	movlb	0	; select bank0
  6628  07F9  00A4               	movwf	setSw_Initialization@sw
  6629                           
  6630                           ;Switch_B1.c: 110: setLED(sw, 1);
  6631  07FA  01A2               	clrf	setLED@command
  6632  07FB  0AA2               	incf	setLED@command,f
  6633  07FC  0824               	movf	setSw_Initialization@sw,w
  6634  07FD  3189  2186         	fcall	_setLED
  6635  07FF  0008               	return
  6636  0800                     __end_of_setSw_Initialization:	
  6637                           
  6638                           	psect	text23
  6639  1D91                     __ptext23:	
  6640 ;; *************** function _TouchPower *****************
  6641 ;; Defined at:
  6642 ;;		line 10 in file "../src/Switch_B1.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;		None
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;		None
  6647 ;; Return value:  Size  Location     Type
  6648 ;;		None               void
  6649 ;; Registers used:
  6650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;Total ram usage:        0 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    6
  6663 ;; This function calls:
  6664 ;;		_Timeout_Counter
  6665 ;;		_set_TimeoutCleared
  6666 ;; This function is called by:
  6667 ;;		_Switch_Initialization
  6668 ;;		_Switch_Main
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           
  6673                           ;psect for function _TouchPower
  6674  1D91                     _TouchPower:	
  6675                           
  6676                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6677                           
  6678                           ;incstack = 0
  6679                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6680  1D91  0020               	movlb	0	; select bank0
  6681  1D92  1A8E               	btfsc	14,5	;volatile
  6682  1D93  0008               	return
  6683                           
  6684                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6685  1D94  0021               	movlb	1	; select bank1
  6686  1D95  1C20               	btfss	_myMain^(0+128),0
  6687  1D96  0008               	return
  6688  1D97  2D9D               	goto	l10089
  6689  1D98                     l2623:	
  6690                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6691                           
  6692                           
  6693                           ;Switch_B1.c: 14: RC5 = 1;
  6694  1D98  0020               	movlb	0	; select bank0
  6695  1D99  168E               	bsf	14,5	;volatile
  6696                           
  6697                           ;Switch_B1.c: 15: Timeout_Counter();
  6698  1D9A  319D  2552  319D   	fcall	_Timeout_Counter
  6699  1D9D                     l10089:	
  6700  1D9D  0020               	movlb	0	; select bank0
  6701  1D9E  1A8E               	btfsc	14,5	;volatile
  6702  1D9F  2DA3               	goto	l10093
  6703  1DA0  0021               	movlb	1	; select bank1
  6704  1DA1  1D2D               	btfss	(_myMain^(0+128)+13),2
  6705  1DA2  2D98               	goto	l2623
  6706  1DA3                     l10093:	
  6707                           
  6708                           ;Switch_B1.c: 16: }
  6709                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6710  1DA3  319B  231C         	fcall	_set_TimeoutCleared
  6711  1DA5  0008               	return
  6712  1DA6                     __end_of_TouchPower:	
  6713                           
  6714                           	psect	text24
  6715  1B07                     __ptext24:	
  6716 ;; *************** function _RF_Main *****************
  6717 ;; Defined at:
  6718 ;;		line 16 in file "../src/RF_Control_B1.c"
  6719 ;; Parameters:    Size  Location     Type
  6720 ;;		None
  6721 ;; Auto vars:     Size  Location     Type
  6722 ;;		None
  6723 ;; Return value:  Size  Location     Type
  6724 ;;		None               void
  6725 ;; Registers used:
  6726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6727 ;; Tracked objects:
  6728 ;;		On entry : 0/0
  6729 ;;		On exit  : 0/0
  6730 ;;		Unchanged: 0/0
  6731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;Total ram usage:        0 bytes
  6737 ;; Hardware stack levels used:    1
  6738 ;; Hardware stack levels required when called:   14
  6739 ;; This function calls:
  6740 ;;		_setRF_Main
  6741 ;; This function is called by:
  6742 ;;		_main
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746                           
  6747                           ;psect for function _RF_Main
  6748  1B07                     _RF_Main:	
  6749                           
  6750                           ;RF_Control_B1.c: 18: setRF_Main();
  6751                           
  6752                           ;incstack = 0
  6753                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6754  1B07  3185  25A4         	fcall	_setRF_Main
  6755  1B09  0008               	return
  6756  1B0A                     __end_of_RF_Main:	
  6757                           
  6758                           	psect	text25
  6759  05A4                     __ptext25:	
  6760 ;; *************** function _setRF_Main *****************
  6761 ;; Defined at:
  6762 ;;		line 52 in file "../src/RF_Control_B1.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;		None
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  error           1   77[BANK0 ] unsigned char 
  6767 ;;  Receive_OK      1   76[BANK0 ] unsigned char 
  6768 ;;  loop_f          1   75[BANK0 ] unsigned char 
  6769 ;; Return value:  Size  Location     Type
  6770 ;;		None               void
  6771 ;; Registers used:
  6772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;Total ram usage:        4 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:   13
  6785 ;; This function calls:
  6786 ;;		_CC2500_ReadStatus
  6787 ;;		_CC2500_RxData
  6788 ;;		_CC2500_TxData
  6789 ;;		_CC2500_WriteCommand
  6790 ;;		_getBuz_GO
  6791 ;;		_getMain_All_Error_Status
  6792 ;;		_getRF_KeyStatus
  6793 ;;		_getRxData
  6794 ;; This function is called by:
  6795 ;;		_RF_Main
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           
  6800                           ;psect for function _setRF_Main
  6801  05A4                     _setRF_Main:	
  6802                           
  6803                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6804                           
  6805                           ;incstack = 0
  6806                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6807  05A4  0020               	movlb	0	; select bank0
  6808  05A5  01EB               	clrf	setRF_Main@loop_f
  6809  05A6  01EC               	clrf	setRF_Main@Receive_OK
  6810  05A7  01ED               	clrf	setRF_Main@error
  6811                           
  6812                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6813  05A8  0021               	movlb	1	; select bank1
  6814  05A9  1C3C               	btfss	_RF1^(0+128),0
  6815  05AA  2E91               	goto	l2232
  6816                           
  6817                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6818  05AB  319C  243A  3185   	fcall	_getBuz_GO
  6819  05AE  0020               	movlb	0	; select bank0
  6820  05AF  0821               	movf	?_getBuz_GO+1,w
  6821  05B0  0420               	iorwf	?_getBuz_GO,w
  6822  05B1  1D03               	skipz
  6823  05B2  0008               	return
  6824                           
  6825                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6826  05B3  3000               	movlw	0
  6827  05B4  3191  21B3  3185   	fcall	_getMain_All_Error_Status
  6828  05B7  3800               	iorlw	0
  6829  05B8  1D03               	skipz
  6830  05B9  2DCE               	goto	l2234
  6831                           
  6832                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6833  05BA  319C  244B  3185   	fcall	_getRF_KeyStatus
  6834  05BD  3A01               	xorlw	1
  6835  05BE  3000               	movlw	0
  6836  05BF  1903               	skipnz
  6837  05C0  3001               	movlw	1
  6838  05C1  0020               	movlb	0	; select bank0
  6839  05C2  00EA               	movwf	??_setRF_Main
  6840  05C3  0CEA               	rrf	??_setRF_Main,f
  6841  05C4  0CEA               	rrf	??_setRF_Main,f
  6842  05C5  0021               	movlb	1	; select bank1
  6843  05C6  083C               	movf	_RF1^(0+128),w
  6844  05C7  0020               	movlb	0	; select bank0
  6845  05C8  066A               	xorwf	??_setRF_Main,w
  6846  05C9  397F               	andlw	-129
  6847  05CA  066A               	xorwf	??_setRF_Main,w
  6848  05CB  0021               	movlb	1	; select bank1
  6849  05CC  00BC               	movwf	_RF1^(0+128)
  6850                           
  6851                           ;RF_Control_B1.c: 65: } else {
  6852  05CD  2DD0               	goto	l2235
  6853  05CE                     l2234:	
  6854                           
  6855                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6856  05CE  0021               	movlb	1	; select bank1
  6857  05CF  13BC               	bcf	_RF1^(0+128),7
  6858  05D0                     l2235:	
  6859                           
  6860                           ;RF_Control_B1.c: 70: }
  6861                           ;RF_Control_B1.c: 73: if (RF1.Key == 1 && RF1.Learn == 0) {
  6862  05D0  1BBC               	btfsc	_RF1^(0+128),7
  6863  05D1  1B3C               	btfsc	_RF1^(0+128),6
  6864  05D2  2DD8               	goto	l2236
  6865                           
  6866                           ;RF_Control_B1.c: 74: RF1.Count = 0;
  6867  05D3  01BE               	clrf	(_RF1^(0+128)+2)
  6868  05D4  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6869                           
  6870                           ;RF_Control_B1.c: 75: RF1.Run = 1;
  6871  05D5  14BD               	bsf	(_RF1^(0+128)+1),1
  6872                           
  6873                           ;RF_Control_B1.c: 76: RF1.RxStatus = 0;
  6874  05D6  11BC               	bcf	_RF1^(0+128),3
  6875                           
  6876                           ;RF_Control_B1.c: 78: } else {
  6877  05D7  0008               	return
  6878  05D8                     l2236:	
  6879                           
  6880                           ;RF_Control_B1.c: 79: if (RF1.Run == 1 && RF1.Learn == 0) {
  6881  05D8  18BD               	btfsc	(_RF1^(0+128)+1),1
  6882  05D9  1B3C               	btfsc	_RF1^(0+128),6
  6883  05DA  2DEF               	goto	l10005
  6884                           
  6885                           ;RF_Control_B1.c: 80: RF1.Count++;
  6886  05DB  3001               	movlw	1
  6887  05DC  07BE               	addwf	(_RF1^(0+128)+2),f
  6888  05DD  3000               	movlw	0
  6889  05DE  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  6890                           
  6891                           ;RF_Control_B1.c: 81: if (RF1.Count == RF1.RunTime) {
  6892  05DF  3002               	movlw	2
  6893  05E0  3EBC               	addlw	_RF1& (0+255)
  6894  05E1  0086               	movwf	6
  6895  05E2  0187               	clrf	7
  6896  05E3  3F40               	moviw [0]fsr1
  6897  05E4  0643               	xorwf	(_RF1^(0+128)+7),w
  6898  05E5  1D03               	skipz
  6899  05E6  2DE9               	goto	u11145
  6900  05E7  3F41               	moviw [1]fsr1
  6901  05E8  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  6902  05E9                     u11145:	
  6903  05E9  1D03               	skipz
  6904  05EA  2E5E               	goto	l10057
  6905                           
  6906                           ;RF_Control_B1.c: 82: RF1.Count = 0;
  6907  05EB  01BE               	clrf	(_RF1^(0+128)+2)
  6908  05EC  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6909                           
  6910                           ;RF_Control_B1.c: 83: RF1.Run = 0;
  6911  05ED  10BD               	bcf	(_RF1^(0+128)+1),1
  6912                           
  6913                           ;RF_Control_B1.c: 84: }
  6914                           ;RF_Control_B1.c: 85: } else {
  6915  05EE  2E5E               	goto	l10057
  6916  05EF                     l10005:	
  6917                           
  6918                           ;RF_Control_B1.c: 86: RF1.Count = 0;
  6919  05EF  01BE               	clrf	(_RF1^(0+128)+2)
  6920  05F0  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6921                           
  6922                           ;RF_Control_B1.c: 87: RF1.Run = 0;
  6923  05F1  10BD               	bcf	(_RF1^(0+128)+1),1
  6924                           
  6925                           ;RF_Control_B1.c: 89: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6926  05F2  193C               	btfsc	_RF1^(0+128),2
  6927  05F3  1B3C               	btfsc	_RF1^(0+128),6
  6928  05F4  2E10               	goto	l2241
  6929                           
  6930                           ;RF_Control_B1.c: 90: RF1.TransceiveGO = 0;
  6931  05F5  113C               	bcf	_RF1^(0+128),2
  6932                           
  6933                           ;RF_Control_B1.c: 91: RF1.RxStatus = 0;
  6934  05F6  11BC               	bcf	_RF1^(0+128),3
  6935                           
  6936                           ;RF_Control_B1.c: 92: RF1.ReceiveGO = 0;
  6937  05F7  10BC               	bcf	_RF1^(0+128),1
  6938                           
  6939                           ;RF_Control_B1.c: 94: CC2500_ReadStatus(0x3B);
  6940  05F8  303B               	movlw	59
  6941  05F9  319F  27DB  3185   	fcall	_CC2500_ReadStatus
  6942                           
  6943                           ;RF_Control_B1.c: 95: if (s_data != 0) {
  6944  05FC  0021               	movlb	1	; select bank1
  6945  05FD  0857               	movf	_s_data^(0+128),w
  6946  05FE  1903               	btfsc	3,2
  6947  05FF  2E0C               	goto	l2242
  6948                           
  6949                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x36);
  6950  0600  3036               	movlw	54
  6951  0601  319E  2605  3185   	fcall	_CC2500_WriteCommand
  6952                           
  6953                           ;RF_Control_B1.c: 97: CC2500_WriteCommand(0x3B);
  6954  0604  303B               	movlw	59
  6955  0605  319E  2605  3185   	fcall	_CC2500_WriteCommand
  6956                           
  6957                           ;RF_Control_B1.c: 98: CC2500_WriteCommand(0x3A);
  6958  0608  303A               	movlw	58
  6959  0609  319E  2605  3185   	fcall	_CC2500_WriteCommand
  6960  060C                     l2242:	
  6961                           
  6962                           ;RF_Control_B1.c: 99: }
  6963                           ;RF_Control_B1.c: 100: CC2500_TxData();
  6964  060C  318A  2249  3185   	fcall	_CC2500_TxData
  6965                           
  6966                           ;RF_Control_B1.c: 102: } else {
  6967  060F  2E5E               	goto	l10057
  6968  0610                     l2241:	
  6969                           
  6970                           ;RF_Control_B1.c: 104: if (RF1.RxStatus == 1) {
  6971  0610  1DBC               	btfss	_RF1^(0+128),3
  6972  0611  2E49               	goto	l2244
  6973                           
  6974                           ;RF_Control_B1.c: 105: CC2500_RxData();
  6975  0612  318B  23FA  3185   	fcall	_CC2500_RxData
  6976                           
  6977                           ;RF_Control_B1.c: 106: if (RF1.ReceiveGO == 1) {
  6978  0615  0021               	movlb	1	; select bank1
  6979  0616  1CBC               	btfss	_RF1^(0+128),1
  6980  0617  2E5E               	goto	l10057
  6981                           
  6982                           ;RF_Control_B1.c: 107: RF1.ReceiveGO = 0;
  6983  0618  10BC               	bcf	_RF1^(0+128),1
  6984                           
  6985                           ;RF_Control_B1.c: 108: RF1.Correction = 0;
  6986  0619  12BD               	bcf	(_RF1^(0+128)+1),5
  6987                           
  6988                           ;RF_Control_B1.c: 109: RF1.CorrectionCounter = 0;
  6989  061A  01C6               	clrf	(_RF1^(0+128)+10)
  6990  061B  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6991                           
  6992                           ;RF_Control_B1.c: 118: getRxData();
  6993  061C  318B  238B  3185   	fcall	_getRxData
  6994                           
  6995                           ;RF_Control_B1.c: 122: RF1.Run = 1;
  6996  061F  0021               	movlb	1	; select bank1
  6997  0620  14BD               	bsf	(_RF1^(0+128)+1),1
  6998                           
  6999                           ;RF_Control_B1.c: 124: if (RF1.Checked == 1) {
  7000  0621  1DBD               	btfss	(_RF1^(0+128)+1),3
  7001  0622  2E30               	goto	l10041
  7002                           
  7003                           ;RF_Control_B1.c: 125: if (RF1.RunTime > 10) {
  7004  0623  3000               	movlw	0
  7005  0624  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7006  0625  300B               	movlw	11
  7007  0626  1903               	skipnz
  7008  0627  0243               	subwf	(_RF1^(0+128)+7),w
  7009  0628  1C03               	skipc
  7010  0629  2E2E               	goto	l10039
  7011                           
  7012                           ;RF_Control_B1.c: 126: RF1.RunTime = 10;
  7013  062A  300A               	movlw	10
  7014  062B  00C3               	movwf	(_RF1^(0+128)+7)
  7015  062C  3000               	movlw	0
  7016  062D  00C4               	movwf	(_RF1^(0+128)+8)
  7017  062E                     l10039:	
  7018                           
  7019                           ;RF_Control_B1.c: 127: }
  7020                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  7021  062E  01C0               	clrf	(_RF1^(0+128)+4)
  7022                           
  7023                           ;RF_Control_B1.c: 129: } else {
  7024  062F  2E5E               	goto	l10057
  7025  0630                     l10041:	
  7026                           
  7027                           ;RF_Control_B1.c: 130: RF1.CheckCount++;
  7028  0630  3001               	movlw	1
  7029  0631  0020               	movlb	0	; select bank0
  7030  0632  00EA               	movwf	??_setRF_Main
  7031  0633  086A               	movf	??_setRF_Main,w
  7032  0634  0021               	movlb	1	; select bank1
  7033  0635  07C0               	addwf	(_RF1^(0+128)+4),f
  7034                           
  7035                           ;RF_Control_B1.c: 131: if (RF1.CheckCount == 2) {
  7036  0636  0840               	movf	(_RF1^(0+128)+4),w
  7037  0637  3A02               	xorlw	2
  7038  0638  1D03               	skipz
  7039  0639  2E5E               	goto	l10057
  7040                           
  7041                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  7042  063A  01C0               	clrf	(_RF1^(0+128)+4)
  7043                           
  7044                           ;RF_Control_B1.c: 133: RF1.CheckedCounter = 0;
  7045  063B  01C1               	clrf	(_RF1^(0+128)+5)
  7046  063C  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7047                           
  7048                           ;RF_Control_B1.c: 134: if (RF1.RunTime < 200) {
  7049  063D  3000               	movlw	0
  7050  063E  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7051  063F  30C8               	movlw	200
  7052  0640  1903               	skipnz
  7053  0641  0243               	subwf	(_RF1^(0+128)+7),w
  7054  0642  1803               	skipnc
  7055  0643  2E5E               	goto	l10057
  7056                           
  7057                           ;RF_Control_B1.c: 135: RF1.RunTime += 10;
  7058  0644  300A               	movlw	10
  7059  0645  07C3               	addwf	(_RF1^(0+128)+7),f
  7060  0646  3000               	movlw	0
  7061  0647  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  7062                           
  7063                           ;RF_Control_B1.c: 136: }
  7064                           ;RF_Control_B1.c: 137: }
  7065                           ;RF_Control_B1.c: 138: }
  7066                           ;RF_Control_B1.c: 139: }
  7067                           ;RF_Control_B1.c: 140: } else {
  7068  0648  2E5E               	goto	l10057
  7069  0649                     l2244:	
  7070                           
  7071                           ;RF_Control_B1.c: 142: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7072  0649  1DBC               	btfss	_RF1^(0+128),3
  7073  064A  18BC               	btfsc	_RF1^(0+128),1
  7074  064B  2E5E               	goto	l10057
  7075                           
  7076                           ;RF_Control_B1.c: 143: RF1.RxStatus = 1;
  7077  064C  15BC               	bsf	_RF1^(0+128),3
  7078                           
  7079                           ;RF_Control_B1.c: 144: RF1.Correction = 1;
  7080  064D  16BD               	bsf	(_RF1^(0+128)+1),5
  7081                           
  7082                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x36);
  7083  064E  3036               	movlw	54
  7084  064F  319E  2605  3185   	fcall	_CC2500_WriteCommand
  7085                           
  7086                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x3B);
  7087  0652  303B               	movlw	59
  7088  0653  319E  2605  3185   	fcall	_CC2500_WriteCommand
  7089                           
  7090                           ;RF_Control_B1.c: 148: CC2500_WriteCommand(0x3A);
  7091  0656  303A               	movlw	58
  7092  0657  319E  2605  3185   	fcall	_CC2500_WriteCommand
  7093                           
  7094                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x34);
  7095  065A  3034               	movlw	52
  7096  065B  319E  2605  3185   	fcall	_CC2500_WriteCommand
  7097  065E                     l10057:	
  7098                           
  7099                           ;RF_Control_B1.c: 151: }
  7100                           ;RF_Control_B1.c: 153: }
  7101                           ;RF_Control_B1.c: 154: }
  7102                           ;RF_Control_B1.c: 155: }
  7103                           ;RF_Control_B1.c: 156: if (RF1.RxStatus == 1) {
  7104  065E  0021               	movlb	1	; select bank1
  7105  065F  1DBC               	btfss	_RF1^(0+128),3
  7106  0660  2E7F               	goto	l10069
  7107                           
  7108                           ;RF_Control_B1.c: 157: RF1.CheckedCounter++;
  7109  0661  3001               	movlw	1
  7110  0662  07C1               	addwf	(_RF1^(0+128)+5),f
  7111  0663  3000               	movlw	0
  7112  0664  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  7113                           
  7114                           ;RF_Control_B1.c: 158: if (RF1.CheckedCounter == 100) {
  7115  0665  3005               	movlw	5
  7116  0666  3EBC               	addlw	_RF1& (0+255)
  7117  0667  0086               	movwf	6
  7118  0668  0187               	clrf	7
  7119  0669  3F40               	moviw [0]fsr1
  7120  066A  3A64               	xorlw	100
  7121  066B  1D03               	skipz
  7122  066C  2E6F               	goto	u11275
  7123  066D  3F41               	moviw [1]fsr1
  7124  066E  3A00               	xorlw	0
  7125  066F                     u11275:	
  7126  066F  1D03               	skipz
  7127  0670  2E7F               	goto	l10069
  7128                           
  7129                           ;RF_Control_B1.c: 159: RF1.CheckedCounter = 0;
  7130  0671  01C1               	clrf	(_RF1^(0+128)+5)
  7131  0672  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7132                           
  7133                           ;RF_Control_B1.c: 160: RF1.CheckCount = 0;
  7134  0673  01C0               	clrf	(_RF1^(0+128)+4)
  7135                           
  7136                           ;RF_Control_B1.c: 161: if (RF1.RunTime > 10) {
  7137  0674  3000               	movlw	0
  7138  0675  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7139  0676  300B               	movlw	11
  7140  0677  1903               	skipnz
  7141  0678  0243               	subwf	(_RF1^(0+128)+7),w
  7142  0679  1C03               	skipc
  7143  067A  2E7F               	goto	l10069
  7144                           
  7145                           ;RF_Control_B1.c: 162: RF1.RunTime -= 10;
  7146  067B  300A               	movlw	10
  7147  067C  02C3               	subwf	(_RF1^(0+128)+7),f
  7148  067D  3000               	movlw	0
  7149  067E  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  7150  067F                     l10069:	
  7151                           
  7152                           ;RF_Control_B1.c: 163: }
  7153                           ;RF_Control_B1.c: 164: }
  7154                           ;RF_Control_B1.c: 165: }
  7155                           ;RF_Control_B1.c: 166: if (RF1.Correction == 1) {
  7156  067F  1EBD               	btfss	(_RF1^(0+128)+1),5
  7157  0680  0008               	return
  7158                           
  7159                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter++;
  7160  0681  3001               	movlw	1
  7161  0682  07C6               	addwf	(_RF1^(0+128)+10),f
  7162  0683  3000               	movlw	0
  7163  0684  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  7164                           
  7165                           ;RF_Control_B1.c: 168: if (RF1.CorrectionCounter >= 30000) {
  7166  0685  3075               	movlw	117
  7167  0686  0247               	subwf	((_RF1+1)^(0+128)+10),w
  7168  0687  3030               	movlw	48
  7169  0688  1903               	skipnz
  7170  0689  0246               	subwf	(_RF1^(0+128)+10),w
  7171  068A  1C03               	skipc
  7172  068B  0008               	return
  7173                           
  7174                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter = 0;
  7175  068C  01C6               	clrf	(_RF1^(0+128)+10)
  7176  068D  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7177                           
  7178                           ;RF_Control_B1.c: 170: RF1.RxStatus = 0;
  7179  068E  11BC               	bcf	_RF1^(0+128),3
  7180                           
  7181                           ;RF_Control_B1.c: 171: RF1.ReceiveGO = 0;
  7182  068F  10BC               	bcf	_RF1^(0+128),1
  7183                           
  7184                           ;RF_Control_B1.c: 172: }
  7185                           ;RF_Control_B1.c: 173: }
  7186                           ;RF_Control_B1.c: 174: }
  7187                           ;RF_Control_B1.c: 175: }
  7188                           ;RF_Control_B1.c: 182: } else {
  7189  0690  0008               	return
  7190  0691                     l2232:	
  7191                           
  7192                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  7193  0691  1C20               	btfss	_myMain^(0+128),0
  7194  0692  0008               	return
  7195                           
  7196                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  7197  0693  143C               	bsf	_RF1^(0+128),0
  7198  0694  0008               	return
  7199  0695                     __end_of_setRF_Main:	
  7200                           
  7201                           	psect	text26
  7202  0B8B                     __ptext26:	
  7203 ;; *************** function _getRxData *****************
  7204 ;; Defined at:
  7205 ;;		line 272 in file "../src/RF_Control_B1.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;		None
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;  error           1   73[BANK0 ] unsigned char 
  7210 ;; Return value:  Size  Location     Type
  7211 ;;		None               void
  7212 ;; Registers used:
  7213 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7223 ;;Total ram usage:        2 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; Hardware stack levels required when called:   12
  7226 ;; This function calls:
  7227 ;;		_getMain_All_Error_Status
  7228 ;;		_setControl_Lights_Table
  7229 ;;		_setLog_Code
  7230 ;; This function is called by:
  7231 ;;		_setRF_Main
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           
  7236                           ;psect for function _getRxData
  7237  0B8B                     _getRxData:	
  7238                           
  7239                           ;RF_Control_B1.c: 273: char error = getMain_All_Error_Status(0);
  7240                           
  7241                           ;incstack = 0
  7242                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7243  0B8B  3000               	movlw	0
  7244  0B8C  3191  21B3  318B   	fcall	_getMain_All_Error_Status
  7245  0B8F  0020               	movlb	0	; select bank0
  7246  0B90  00E8               	movwf	??_getRxData
  7247  0B91  0868               	movf	??_getRxData,w
  7248  0B92  00E9               	movwf	getRxData@error
  7249                           
  7250                           ;RF_Control_B1.c: 274: if (error == 0) {
  7251  0B93  08E9               	movf	getRxData@error,f
  7252  0B94  1D03               	skipz
  7253  0B95  0008               	return
  7254                           
  7255                           ;RF_Control_B1.c: 275: if (RF1.Learn == 1) {
  7256  0B96  0021               	movlb	1	; select bank1
  7257  0B97  1F3C               	btfss	_RF1^(0+128),6
  7258  0B98  2BA9               	goto	l9551
  7259                           
  7260                           ;RF_Control_B1.c: 276: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7261  0B99  0023               	movlb	3	; select bank3
  7262  0B9A  08A0               	movf	_RF_Data^(0+384),f
  7263  0B9B  1D03               	skipz
  7264  0B9C  2BA6               	goto	l2283
  7265  0B9D  0821               	movf	(_RF_Data^(0+384)+1),w
  7266  0B9E  3A64               	xorlw	100
  7267  0B9F  1D03               	skipz
  7268  0BA0  2BA6               	goto	l2283
  7269                           
  7270                           ;RF_Control_B1.c: 277: setLog_Code();
  7271  0BA1  3192  22BA         	fcall	_setLog_Code
  7272                           
  7273                           ;RF_Control_B1.c: 278: RF1.Checked = 1;
  7274  0BA3  0021               	movlb	1	; select bank1
  7275  0BA4  15BD               	bsf	(_RF1^(0+128)+1),3
  7276                           
  7277                           ;RF_Control_B1.c: 279: } else {
  7278  0BA5  0008               	return
  7279  0BA6                     l2283:	
  7280                           
  7281                           ;RF_Control_B1.c: 280: RF1.Checked = 0;
  7282  0BA6  0021               	movlb	1	; select bank1
  7283  0BA7  11BD               	bcf	(_RF1^(0+128)+1),3
  7284                           
  7285                           ;RF_Control_B1.c: 281: }
  7286                           ;RF_Control_B1.c: 282: } else {
  7287  0BA8  0008               	return
  7288  0BA9                     l9551:	
  7289                           
  7290                           ;RF_Control_B1.c: 283: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7291  0BA9  0023               	movlb	3	; select bank3
  7292  0BAA  08A0               	movf	_RF_Data^(0+384),f
  7293  0BAB  1D03               	skipz
  7294  0BAC  2BE2               	goto	l9573
  7295  0BAD  0821               	movf	(_RF_Data^(0+384)+1),w
  7296  0BAE  3A02               	xorlw	2
  7297  0BAF  1D03               	skipz
  7298  0BB0  2BE2               	goto	l9573
  7299                           
  7300                           ;RF_Control_B1.c: 285: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7301  0BB1  082C               	movf	(_RF_Data^(0+384)+12),w
  7302  0BB2  3AFF               	xorlw	255
  7303  0BB3  1D03               	skipz
  7304  0BB4  2BC1               	goto	l9563
  7305  0BB5  082D               	movf	(_RF_Data^(0+384)+13),w
  7306  0BB6  3AFF               	xorlw	255
  7307  0BB7  1D03               	skipz
  7308  0BB8  2BC1               	goto	l9563
  7309  0BB9  082E               	movf	(_RF_Data^(0+384)+14),w
  7310  0BBA  3AFF               	xorlw	255
  7311  0BBB  1D03               	skipz
  7312  0BBC  2BC1               	goto	l9563
  7313                           
  7314                           ;RF_Control_B1.c: 286: __nop();
  7315  0BBD  0000               	nop
  7316                           
  7317                           ;RF_Control_B1.c: 287: RF1.Checked = 0;
  7318  0BBE  0021               	movlb	1	; select bank1
  7319  0BBF  11BD               	bcf	(_RF1^(0+128)+1),3
  7320                           
  7321                           ;RF_Control_B1.c: 288: } else {
  7322  0BC0  0008               	return
  7323  0BC1                     l9563:	
  7324                           
  7325                           ;RF_Control_B1.c: 289: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7326  0BC1  087B               	movf	_product,w
  7327  0BC2  3E0C               	addlw	12
  7328  0BC3  0086               	movwf	6
  7329  0BC4  3002               	movlw	2	; select bank4/5
  7330  0BC5  0087               	movwf	7
  7331  0BC6  0023               	movlb	3	; select bank3
  7332  0BC7  082C               	movf	(_RF_Data^(0+384)+12),w
  7333  0BC8  0601               	xorwf	1,w
  7334  0BC9  1D03               	skipz
  7335  0BCA  0008               	return
  7336  0BCB  087B               	movf	_product,w
  7337  0BCC  3E0D               	addlw	13
  7338  0BCD  0086               	movwf	6
  7339  0BCE  3002               	movlw	2	; select bank4/5
  7340  0BCF  0087               	movwf	7
  7341  0BD0  082D               	movf	(_RF_Data^(0+384)+13),w
  7342  0BD1  0601               	xorwf	1,w
  7343  0BD2  1D03               	skipz
  7344  0BD3  0008               	return
  7345  0BD4  087B               	movf	_product,w
  7346  0BD5  3E0E               	addlw	14
  7347  0BD6  0086               	movwf	6
  7348  0BD7  3002               	movlw	2	; select bank4/5
  7349  0BD8  0087               	movwf	7
  7350  0BD9  082E               	movf	(_RF_Data^(0+384)+14),w
  7351  0BDA  0601               	xorwf	1,w
  7352  0BDB  1D03               	skipz
  7353  0BDC  0008               	return
  7354                           
  7355                           ;RF_Control_B1.c: 290: setControl_Lights_Table();
  7356  0BDD  318B  231D         	fcall	_setControl_Lights_Table
  7357                           
  7358                           ;RF_Control_B1.c: 291: RF1.Checked = 1;
  7359  0BDF  0021               	movlb	1	; select bank1
  7360  0BE0  15BD               	bsf	(_RF1^(0+128)+1),3
  7361                           
  7362                           ;RF_Control_B1.c: 292: }
  7363                           ;RF_Control_B1.c: 293: }
  7364                           ;RF_Control_B1.c: 294: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7365  0BE1  0008               	return
  7366  0BE2                     l9573:	
  7367  0BE2  0023               	movlb	3	; select bank3
  7368  0BE3  0820               	movf	_RF_Data^(0+384),w
  7369  0BE4  3AFF               	xorlw	255
  7370  0BE5  1D03               	skipz
  7371  0BE6  2BED               	goto	l9579
  7372  0BE7  0821               	movf	(_RF_Data^(0+384)+1),w
  7373  0BE8  3A02               	xorlw	2
  7374  0BE9  1D03               	skipz
  7375  0BEA  2BED               	goto	l9579
  7376                           
  7377                           ;RF_Control_B1.c: 295: __nop();
  7378  0BEB  0000               	nop
  7379                           
  7380                           ;RF_Control_B1.c: 296: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7381  0BEC  0008               	return
  7382  0BED                     l9579:	
  7383  0BED  0023               	movlb	3	; select bank3
  7384  0BEE  08A0               	movf	_RF_Data^(0+384),f
  7385  0BEF  1D03               	skipz
  7386  0BF0  2BF7               	goto	l2293
  7387  0BF1  0821               	movf	(_RF_Data^(0+384)+1),w
  7388  0BF2  3A65               	xorlw	101
  7389  0BF3  1D03               	skipz
  7390  0BF4  2BF7               	goto	l2293
  7391                           
  7392                           ;RF_Control_B1.c: 297: __nop();
  7393  0BF5  0000               	nop
  7394                           
  7395                           ;RF_Control_B1.c: 298: } else {
  7396  0BF6  0008               	return
  7397  0BF7                     l2293:	
  7398                           
  7399                           ;RF_Control_B1.c: 299: RF1.Checked = 0;
  7400  0BF7  0021               	movlb	1	; select bank1
  7401  0BF8  11BD               	bcf	(_RF1^(0+128)+1),3
  7402                           
  7403                           ;RF_Control_B1.c: 300: }
  7404                           ;RF_Control_B1.c: 305: }
  7405                           ;RF_Control_B1.c: 306: } else {
  7406  0BF9  0008               	return
  7407  0BFA                     __end_of_getRxData:	
  7408                           ;RF_Control_B1.c: 307: ;
  7409                           
  7410                           
  7411                           	psect	text27
  7412  12BA                     __ptext27:	
  7413 ;; *************** function _setLog_Code *****************
  7414 ;; Defined at:
  7415 ;;		line 312 in file "../src/RF_Control_B1.c"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;		None
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;		None
  7420 ;; Return value:  Size  Location     Type
  7421 ;;		None               void
  7422 ;; Registers used:
  7423 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7431 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7432 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7433 ;;Total ram usage:        1 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; Hardware stack levels required when called:    7
  7436 ;; This function calls:
  7437 ;;		_setBuz
  7438 ;;		_setMemory_LoopSave
  7439 ;;		_setMemory_Modify
  7440 ;; This function is called by:
  7441 ;;		_getRxData
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           
  7446                           ;psect for function _setLog_Code
  7447  12BA                     _setLog_Code:	
  7448                           
  7449                           ;RF_Control_B1.c: 313: RF1.Learn = 0;
  7450                           
  7451                           ;incstack = 0
  7452                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7453  12BA  0021               	movlb	1	; select bank1
  7454  12BB  133C               	bcf	_RF1^(0+128),6
  7455                           
  7456                           ;RF_Control_B1.c: 314: product->Data[12]=RF_Data[12];
  7457  12BC  0023               	movlb	3	; select bank3
  7458  12BD  082C               	movf	(_RF_Data^(0+384)+12),w
  7459  12BE  0020               	movlb	0	; select bank0
  7460  12BF  00AD               	movwf	??_setLog_Code
  7461  12C0  087B               	movf	_product,w
  7462  12C1  3E0C               	addlw	12
  7463  12C2  0086               	movwf	6
  7464  12C3  3002               	movlw	2	; select bank4/5
  7465  12C4  0087               	movwf	7
  7466  12C5  082D               	movf	??_setLog_Code,w
  7467  12C6  0081               	movwf	1
  7468                           
  7469                           ;RF_Control_B1.c: 315: product->Data[13]=RF_Data[13];
  7470  12C7  0023               	movlb	3	; select bank3
  7471  12C8  082D               	movf	(_RF_Data^(0+384)+13),w
  7472  12C9  0020               	movlb	0	; select bank0
  7473  12CA  00AD               	movwf	??_setLog_Code
  7474  12CB  087B               	movf	_product,w
  7475  12CC  3E0D               	addlw	13
  7476  12CD  0086               	movwf	6
  7477  12CE  3002               	movlw	2	; select bank4/5
  7478  12CF  0087               	movwf	7
  7479  12D0  082D               	movf	??_setLog_Code,w
  7480  12D1  0081               	movwf	1
  7481                           
  7482                           ;RF_Control_B1.c: 316: product->Data[14]=RF_Data[14];
  7483  12D2  0023               	movlb	3	; select bank3
  7484  12D3  082E               	movf	(_RF_Data^(0+384)+14),w
  7485  12D4  0020               	movlb	0	; select bank0
  7486  12D5  00AD               	movwf	??_setLog_Code
  7487  12D6  087B               	movf	_product,w
  7488  12D7  3E0E               	addlw	14
  7489  12D8  0086               	movwf	6
  7490  12D9  3002               	movlw	2	; select bank4/5
  7491  12DA  0087               	movwf	7
  7492  12DB  082D               	movf	??_setLog_Code,w
  7493  12DC  0081               	movwf	1
  7494                           
  7495                           ;RF_Control_B1.c: 317: setBuz(1, 100);
  7496  12DD  3064               	movlw	100
  7497  12DE  00A9               	movwf	setBuz@time
  7498  12DF  3000               	movlw	0
  7499  12E0  00AA               	movwf	setBuz@time+1
  7500  12E1  3001               	movlw	1
  7501  12E2  3196  26F2  3192   	fcall	_setBuz
  7502                           
  7503                           ;RF_Control_B1.c: 318: if (myMain.First == 1) {
  7504  12E5  0021               	movlb	1	; select bank1
  7505  12E6  1EA0               	btfss	_myMain^(0+128),5
  7506  12E7  2AEC               	goto	l2299
  7507                           
  7508                           ;RF_Control_B1.c: 319: setMemory_LoopSave(1);
  7509  12E8  3001               	movlw	1
  7510  12E9  319C  24DC  3192   	fcall	_setMemory_LoopSave
  7511  12EC                     l2299:	
  7512                           
  7513                           ;RF_Control_B1.c: 320: }
  7514                           ;RF_Control_B1.c: 321: setMemory_Modify(1);
  7515  12EC  3001               	movlw	1
  7516  12ED  319C  24C9         	fcall	_setMemory_Modify
  7517  12EF  0008               	return
  7518  12F0                     __end_of_setLog_Code:	
  7519                           
  7520                           	psect	text28
  7521  1CDC                     __ptext28:	
  7522 ;; *************** function _setMemory_LoopSave *****************
  7523 ;; Defined at:
  7524 ;;		line 1006 in file "../src/MCU_B1.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;  command         1    wreg     unsigned char 
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;  command         1    1[BANK0 ] unsigned char 
  7529 ;; Return value:  Size  Location     Type
  7530 ;;		None               void
  7531 ;; Registers used:
  7532 ;;		wreg, status,2, status,0
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;Total ram usage:        2 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    5
  7545 ;; This function calls:
  7546 ;;		Nothing
  7547 ;; This function is called by:
  7548 ;;		_setLog_Code
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           
  7553                           ;psect for function _setMemory_LoopSave
  7554  1CDC                     _setMemory_LoopSave:	
  7555                           
  7556                           ;incstack = 0
  7557                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7558                           ;setMemory_LoopSave@command stored from wreg
  7559  1CDC  0020               	movlb	0	; select bank0
  7560  1CDD  00A1               	movwf	setMemory_LoopSave@command
  7561                           
  7562                           ;MCU_B1.c: 1007: Memory.LoopSave = command == 1 ? 1 : 0;
  7563  1CDE  0821               	movf	setMemory_LoopSave@command,w
  7564  1CDF  3A01               	xorlw	1
  7565  1CE0  3000               	movlw	0
  7566  1CE1  1903               	skipnz
  7567  1CE2  3001               	movlw	1
  7568  1CE3  00A0               	movwf	??_setMemory_LoopSave
  7569  1CE4  0DA0               	rlf	??_setMemory_LoopSave,f
  7570  1CE5  0DA0               	rlf	??_setMemory_LoopSave,f
  7571  1CE6  0024               	movlb	4	; select bank4
  7572  1CE7  0844               	movf	(_Memory^(0+512)+36),w
  7573  1CE8  0020               	movlb	0	; select bank0
  7574  1CE9  0620               	xorwf	??_setMemory_LoopSave,w
  7575  1CEA  39FB               	andlw	-5
  7576  1CEB  0620               	xorwf	??_setMemory_LoopSave,w
  7577  1CEC  0024               	movlb	4	; select bank4
  7578  1CED  00C4               	movwf	(_Memory^(0+512)+36)
  7579  1CEE  0008               	return
  7580  1CEF                     __end_of_setMemory_LoopSave:	
  7581                           
  7582                           	psect	text29
  7583  0B1D                     __ptext29:	
  7584 ;; *************** function _setControl_Lights_Table *****************
  7585 ;; Defined at:
  7586 ;;		line 325 in file "../src/RF_Control_B1.c"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;		None
  7589 ;; Auto vars:     Size  Location     Type
  7590 ;;		None
  7591 ;; Return value:  Size  Location     Type
  7592 ;;		None               void
  7593 ;; Registers used:
  7594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7595 ;; Tracked objects:
  7596 ;;		On entry : 0/0
  7597 ;;		On exit  : 0/0
  7598 ;;		Unchanged: 0/0
  7599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7604 ;;Total ram usage:        0 bytes
  7605 ;; Hardware stack levels used:    1
  7606 ;; Hardware stack levels required when called:   11
  7607 ;; This function calls:
  7608 ;;		_setBuz
  7609 ;;		_setRFSW_AdjControl
  7610 ;;		_setRFSW_Control
  7611 ;;		_setTxData
  7612 ;; This function is called by:
  7613 ;;		_getRxData
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           
  7618                           ;psect for function _setControl_Lights_Table
  7619  0B1D                     _setControl_Lights_Table:	
  7620                           
  7621                           ;RF_Control_B1.c: 326: switch (RF_Data[15]) {
  7622                           
  7623                           ;incstack = 0
  7624                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7625  0B1D  2B6F               	goto	l9161
  7626  0B1E                     l9133:	
  7627                           ;RF_Control_B1.c: 327: case 0x00:
  7628                           
  7629                           
  7630                           ;RF_Control_B1.c: 330: setRFSW_Control(1);
  7631  0B1E  3001               	movlw	1
  7632  0B1F  3195  259D  318B   	fcall	_setRFSW_Control
  7633                           
  7634                           ;RF_Control_B1.c: 336: setRFSW_Control(2);
  7635  0B22  3002               	movlw	2
  7636  0B23  3195  259D  318B   	fcall	_setRFSW_Control
  7637                           
  7638                           ;RF_Control_B1.c: 344: product->Data[9]=0;
  7639  0B26  087B               	movf	_product,w
  7640  0B27  3E09               	addlw	9
  7641  0B28  0086               	movwf	6
  7642  0B29  3002               	movlw	2	; select bank4/5
  7643  0B2A  0087               	movwf	7
  7644  0B2B  0181               	clrf	1
  7645                           
  7646                           ;RF_Control_B1.c: 345: product->Data[11]=0;
  7647  0B2C  087B               	movf	_product,w
  7648  0B2D  3E0B               	addlw	11
  7649  0B2E  0086               	movwf	6
  7650  0B2F  3002               	movlw	2	; select bank4/5
  7651  0B30  0087               	movwf	7
  7652  0B31  0181               	clrf	1
  7653                           
  7654                           ;RF_Control_B1.c: 346: product->Data[15]=0;
  7655  0B32  087B               	movf	_product,w
  7656  0B33  3E0F               	addlw	15
  7657  0B34  0086               	movwf	6
  7658  0B35  3002               	movlw	2	; select bank4/5
  7659  0B36  0087               	movwf	7
  7660  0B37  0181               	clrf	1
  7661                           
  7662                           ;RF_Control_B1.c: 347: product->Data[17]=0;
  7663  0B38  087B               	movf	_product,w
  7664  0B39  3E11               	addlw	17
  7665  0B3A  0086               	movwf	6
  7666  0B3B  3002               	movlw	2	; select bank4/5
  7667  0B3C  0087               	movwf	7
  7668  0B3D  0181               	clrf	1
  7669                           
  7670                           ;RF_Control_B1.c: 348: setBuz(1, 100);
  7671  0B3E  3064               	movlw	100
  7672  0B3F  0020               	movlb	0	; select bank0
  7673  0B40  00A9               	movwf	setBuz@time
  7674  0B41  3000               	movlw	0
  7675  0B42  00AA               	movwf	setBuz@time+1
  7676  0B43  3001               	movlw	1
  7677  0B44  3196  26F2  318B   	fcall	_setBuz
  7678                           
  7679                           ;RF_Control_B1.c: 349: setTxData();
  7680  0B47  318D  2571         	fcall	_setTxData
  7681                           
  7682                           ;RF_Control_B1.c: 350: break;
  7683  0B49  0008               	return
  7684  0B4A                     l9147:	
  7685                           ;RF_Control_B1.c: 351: case 0x20:
  7686                           
  7687                           
  7688                           ;RF_Control_B1.c: 352: product->Data[9]=0;
  7689  0B4A  087B               	movf	_product,w
  7690  0B4B  3E09               	addlw	9
  7691  0B4C  0086               	movwf	6
  7692  0B4D  3002               	movlw	2	; select bank4/5
  7693  0B4E  0087               	movwf	7
  7694  0B4F  0181               	clrf	1
  7695                           
  7696                           ;RF_Control_B1.c: 353: product->Data[11]=0;
  7697  0B50  087B               	movf	_product,w
  7698  0B51  3E0B               	addlw	11
  7699  0B52  0086               	movwf	6
  7700  0B53  3002               	movlw	2	; select bank4/5
  7701  0B54  0087               	movwf	7
  7702  0B55  0181               	clrf	1
  7703                           
  7704                           ;RF_Control_B1.c: 354: product->Data[17]=0;
  7705  0B56  087B               	movf	_product,w
  7706  0B57  3E11               	addlw	17
  7707  0B58  0086               	movwf	6
  7708  0B59  3002               	movlw	2	; select bank4/5
  7709  0B5A  0087               	movwf	7
  7710  0B5B  0181               	clrf	1
  7711                           
  7712                           ;RF_Control_B1.c: 355: setTxData();
  7713  0B5C  318D  2571         	fcall	_setTxData
  7714                           
  7715                           ;RF_Control_B1.c: 356: break;
  7716  0B5E  0008               	return
  7717  0B5F                     l9151:	
  7718                           ;RF_Control_B1.c: 357: case 0x01:
  7719                           
  7720                           
  7721                           ;RF_Control_B1.c: 359: setRFSW_Control(1);
  7722  0B5F  3001               	movlw	1
  7723  0B60  3195  259D         	fcall	_setRFSW_Control
  7724                           
  7725                           ;RF_Control_B1.c: 361: break;
  7726  0B62  0008               	return
  7727  0B63                     l9153:	
  7728                           ;RF_Control_B1.c: 362: case 0x02:
  7729                           
  7730                           
  7731                           ;RF_Control_B1.c: 364: setRFSW_Control(2);
  7732  0B63  3002               	movlw	2
  7733  0B64  3195  259D         	fcall	_setRFSW_Control
  7734                           
  7735                           ;RF_Control_B1.c: 371: break;
  7736                           
  7737                           ;RF_Control_B1.c: 367: case 0x03:
  7738                           
  7739                           ;RF_Control_B1.c: 366: break;
  7740  0B66  0008               	return
  7741  0B67                     l9155:	
  7742                           ;RF_Control_B1.c: 372: case 0x11:
  7743                           
  7744                           
  7745                           ;RF_Control_B1.c: 375: setRFSW_AdjControl(1);
  7746  0B67  3001               	movlw	1
  7747  0B68  3193  2360         	fcall	_setRFSW_AdjControl
  7748                           
  7749                           ;RF_Control_B1.c: 378: break;
  7750  0B6A  0008               	return
  7751  0B6B                     l9157:	
  7752                           ;RF_Control_B1.c: 379: case 0x21:
  7753                           
  7754                           
  7755                           ;RF_Control_B1.c: 382: setRFSW_AdjControl(2);
  7756  0B6B  3002               	movlw	2
  7757  0B6C  3193  2360         	fcall	_setRFSW_AdjControl
  7758                           
  7759                           ;RF_Control_B1.c: 393: }
  7760                           
  7761                           ;RF_Control_B1.c: 392: break;
  7762                           
  7763                           ;RF_Control_B1.c: 386: case 0x31:
  7764                           
  7765                           ;RF_Control_B1.c: 385: break;
  7766  0B6E  0008               	return
  7767  0B6F                     l9161:	
  7768  0B6F  0023               	movlb	3	; select bank3
  7769  0B70  082F               	movf	(_RF_Data^(0+384)+15),w
  7770                           
  7771                           ; Switch size 1, requested type "space"
  7772                           ; Number of cases is 8, Range of values is 0 to 49
  7773                           ; switch strategies available:
  7774                           ; Name         Instructions Cycles
  7775                           ; simple_byte           25    13 (average)
  7776                           ; direct_byte          106     6 (fixed)
  7777                           ; jumptable            260     6 (fixed)
  7778                           ;	Chosen strategy is simple_byte
  7779  0B71  3A00               	xorlw	0	; case 0
  7780  0B72  1903               	skipnz
  7781  0B73  2B1E               	goto	l9133
  7782  0B74  3A01               	xorlw	1	; case 1
  7783  0B75  1903               	skipnz
  7784  0B76  2B5F               	goto	l9151
  7785  0B77  3A03               	xorlw	3	; case 2
  7786  0B78  1903               	skipnz
  7787  0B79  2B63               	goto	l9153
  7788  0B7A  3A01               	xorlw	1	; case 3
  7789  0B7B  1903               	skipnz
  7790  0B7C  2B8A               	goto	l2313
  7791  0B7D  3A12               	xorlw	18	; case 17
  7792  0B7E  1903               	skipnz
  7793  0B7F  2B67               	goto	l9155
  7794  0B80  3A31               	xorlw	49	; case 32
  7795  0B81  1903               	skipnz
  7796  0B82  2B4A               	goto	l9147
  7797  0B83  3A01               	xorlw	1	; case 33
  7798  0B84  1903               	skipnz
  7799  0B85  2B6B               	goto	l9157
  7800  0B86  3A10               	xorlw	16	; case 49
  7801  0B87  1903               	skipnz
  7802  0B88  2B8A               	goto	l2313
  7803  0B89  2B8A               	goto	l2313
  7804  0B8A                     l2313:	
  7805  0B8A  0008               	return
  7806  0B8B                     __end_of_setControl_Lights_Table:	
  7807                           
  7808                           	psect	text30
  7809  159D                     __ptext30:	
  7810 ;; *************** function _setRFSW_Control *****************
  7811 ;; Defined at:
  7812 ;;		line 476 in file "../src/RF_Control_B1.c"
  7813 ;; Parameters:    Size  Location     Type
  7814 ;;  sw              1    wreg     unsigned char 
  7815 ;; Auto vars:     Size  Location     Type
  7816 ;;  sw              1   71[BANK0 ] unsigned char 
  7817 ;; Return value:  Size  Location     Type
  7818 ;;		None               void
  7819 ;; Registers used:
  7820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7821 ;; Tracked objects:
  7822 ;;		On entry : 0/0
  7823 ;;		On exit  : 0/0
  7824 ;;		Unchanged: 0/0
  7825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7830 ;;Total ram usage:        2 bytes
  7831 ;; Hardware stack levels used:    1
  7832 ;; Hardware stack levels required when called:   10
  7833 ;; This function calls:
  7834 ;;		_getDimmerLights_Status
  7835 ;;		_setDelayOff_GO
  7836 ;;		_setDimmerLights_SwOff
  7837 ;;		_setDimmerLights_SwOn
  7838 ;;		_setRF_DimmerLights
  7839 ;; This function is called by:
  7840 ;;		_setControl_Lights_Table
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           
  7845                           ;psect for function _setRFSW_Control
  7846  159D                     _setRFSW_Control:	
  7847                           
  7848                           ;incstack = 0
  7849                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7850                           ;setRFSW_Control@sw stored from wreg
  7851  159D  0020               	movlb	0	; select bank0
  7852  159E  00E7               	movwf	setRFSW_Control@sw
  7853                           
  7854                           ;RF_Control_B1.c: 479: setDimmerLights_SwOn(sw);
  7855  159F  0867               	movf	setRFSW_Control@sw,w
  7856  15A0  3194  24B2  3195   	fcall	_setDimmerLights_SwOn
  7857                           
  7858                           ;RF_Control_B1.c: 481: if (getDimmerLights_Status(sw) == 1) {
  7859  15A3  0020               	movlb	0	; select bank0
  7860  15A4  0867               	movf	setRFSW_Control@sw,w
  7861  15A5  319C  2419  3195   	fcall	_getDimmerLights_Status
  7862  15A8  3A01               	xorlw	1
  7863  15A9  1D03               	skipz
  7864  15AA  2DC4               	goto	l8977
  7865                           
  7866                           ;RF_Control_B1.c: 482: if (RF_Data[16] == 0x80) {
  7867  15AB  0023               	movlb	3	; select bank3
  7868  15AC  0830               	movf	(_RF_Data^(0+384)+16),w
  7869  15AD  3A80               	xorlw	128
  7870  15AE  1D03               	skipz
  7871  15AF  2DBD               	goto	l2317
  7872                           
  7873                           ;RF_Control_B1.c: 483: setDelayOff_GO(sw, 1, RF_Data[17]);
  7874  15B0  0020               	movlb	0	; select bank0
  7875  15B1  01AA               	clrf	setDelayOff_GO@command
  7876  15B2  0AAA               	incf	setDelayOff_GO@command,f
  7877  15B3  0023               	movlb	3	; select bank3
  7878  15B4  0831               	movf	(_RF_Data^(0+384)+17),w
  7879  15B5  0020               	movlb	0	; select bank0
  7880  15B6  00E6               	movwf	??_setRFSW_Control
  7881  15B7  0866               	movf	??_setRFSW_Control,w
  7882  15B8  00AB               	movwf	setDelayOff_GO@value
  7883  15B9  0867               	movf	setRFSW_Control@sw,w
  7884  15BA  3188  2063  3195   	fcall	_setDelayOff_GO
  7885  15BD                     l2317:	
  7886                           
  7887                           ;RF_Control_B1.c: 484: }
  7888                           ;RF_Control_B1.c: 486: setRF_DimmerLights(sw, 1);
  7889  15BD  0020               	movlb	0	; select bank0
  7890  15BE  01DD               	clrf	setRF_DimmerLights@on
  7891  15BF  0ADD               	incf	setRF_DimmerLights@on,f
  7892  15C0  0867               	movf	setRFSW_Control@sw,w
  7893  15C1  318A  22B1         	fcall	_setRF_DimmerLights
  7894                           
  7895                           ;RF_Control_B1.c: 488: } else {
  7896  15C3  0008               	return
  7897  15C4                     l8977:	
  7898                           
  7899                           ;RF_Control_B1.c: 489: if (RF_Data[16] == 0x80) {
  7900  15C4  0023               	movlb	3	; select bank3
  7901  15C5  0830               	movf	(_RF_Data^(0+384)+16),w
  7902  15C6  3A80               	xorlw	128
  7903  15C7  1D03               	skipz
  7904  15C8  2DDD               	goto	l8981
  7905                           
  7906                           ;RF_Control_B1.c: 490: setDelayOff_GO(sw, 1, RF_Data[17]);
  7907  15C9  0020               	movlb	0	; select bank0
  7908  15CA  01AA               	clrf	setDelayOff_GO@command
  7909  15CB  0AAA               	incf	setDelayOff_GO@command,f
  7910  15CC  0023               	movlb	3	; select bank3
  7911  15CD  0831               	movf	(_RF_Data^(0+384)+17),w
  7912  15CE  0020               	movlb	0	; select bank0
  7913  15CF  00E6               	movwf	??_setRFSW_Control
  7914  15D0  0866               	movf	??_setRFSW_Control,w
  7915  15D1  00AB               	movwf	setDelayOff_GO@value
  7916  15D2  0867               	movf	setRFSW_Control@sw,w
  7917  15D3  3188  2063  3195   	fcall	_setDelayOff_GO
  7918                           
  7919                           ;RF_Control_B1.c: 491: setRF_DimmerLights(sw, 1);
  7920  15D6  0020               	movlb	0	; select bank0
  7921  15D7  01DD               	clrf	setRF_DimmerLights@on
  7922  15D8  0ADD               	incf	setRF_DimmerLights@on,f
  7923  15D9  0867               	movf	setRFSW_Control@sw,w
  7924  15DA  318A  22B1         	fcall	_setRF_DimmerLights
  7925                           
  7926                           ;RF_Control_B1.c: 492: } else {
  7927  15DC  0008               	return
  7928  15DD                     l8981:	
  7929                           
  7930                           ;RF_Control_B1.c: 494: setDimmerLights_SwOff(sw);
  7931  15DD  0020               	movlb	0	; select bank0
  7932  15DE  0867               	movf	setRFSW_Control@sw,w
  7933  15DF  3188  2004  3195   	fcall	_setDimmerLights_SwOff
  7934                           
  7935                           ;RF_Control_B1.c: 495: setRF_DimmerLights(sw, 0);
  7936  15E2  0020               	movlb	0	; select bank0
  7937  15E3  01DD               	clrf	setRF_DimmerLights@on
  7938  15E4  0867               	movf	setRFSW_Control@sw,w
  7939  15E5  318A  22B1  3195   	fcall	_setRF_DimmerLights
  7940                           
  7941                           ;RF_Control_B1.c: 497: setDelayOff_GO(sw, 0, 0);
  7942  15E8  0020               	movlb	0	; select bank0
  7943  15E9  01AA               	clrf	setDelayOff_GO@command
  7944  15EA  01AB               	clrf	setDelayOff_GO@value
  7945  15EB  0867               	movf	setRFSW_Control@sw,w
  7946  15EC  3188  2063         	fcall	_setDelayOff_GO
  7947  15EE  0008               	return
  7948  15EF                     __end_of_setRFSW_Control:	
  7949                           
  7950                           	psect	text31
  7951  1360                     __ptext31:	
  7952 ;; *************** function _setRFSW_AdjControl *****************
  7953 ;; Defined at:
  7954 ;;		line 503 in file "../src/RF_Control_B1.c"
  7955 ;; Parameters:    Size  Location     Type
  7956 ;;  sw              1    wreg     unsigned char 
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;  sw              1   70[BANK0 ] unsigned char 
  7959 ;; Return value:  Size  Location     Type
  7960 ;;		None               void
  7961 ;; Registers used:
  7962 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7963 ;; Tracked objects:
  7964 ;;		On entry : 0/0
  7965 ;;		On exit  : 0/0
  7966 ;;		Unchanged: 0/0
  7967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7969 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;Total ram usage:        3 bytes
  7973 ;; Hardware stack levels used:    1
  7974 ;; Hardware stack levels required when called:   10
  7975 ;; This function calls:
  7976 ;;		_getDimmerLights_Status
  7977 ;;		_setMemory_Modify
  7978 ;;		_setRF_DimmerValue
  7979 ;;		_setTxData
  7980 ;; This function is called by:
  7981 ;;		_setControl_Lights_Table
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           
  7986                           ;psect for function _setRFSW_AdjControl
  7987  1360                     _setRFSW_AdjControl:	
  7988                           
  7989                           ;incstack = 0
  7990                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7991                           ;setRFSW_AdjControl@sw stored from wreg
  7992  1360  0020               	movlb	0	; select bank0
  7993  1361  00E6               	movwf	setRFSW_AdjControl@sw
  7994                           
  7995                           ;RF_Control_B1.c: 505: if (getDimmerLights_Status(sw) == 1) {
  7996  1362  0866               	movf	setRFSW_AdjControl@sw,w
  7997  1363  319C  2419  3193   	fcall	_getDimmerLights_Status
  7998  1366  3A01               	xorlw	1
  7999  1367  1D03               	skipz
  8000  1368  2B73               	goto	l8989
  8001                           
  8002                           ;RF_Control_B1.c: 506: setMemory_Modify(1);
  8003  1369  3001               	movlw	1
  8004  136A  319C  24C9  3193   	fcall	_setMemory_Modify
  8005                           
  8006                           ;RF_Control_B1.c: 507: setRF_DimmerValue(sw);
  8007  136D  0020               	movlb	0	; select bank0
  8008  136E  0866               	movf	setRFSW_AdjControl@sw,w
  8009  136F  3192  221A  3193   	fcall	_setRF_DimmerValue
  8010                           
  8011                           ;RF_Control_B1.c: 508: } else {
  8012  1372  2B85               	goto	l2325
  8013  1373                     l8989:	
  8014                           
  8015                           ;RF_Control_B1.c: 509: product->Data[9]=product->Data[20 + sw];
  8016  1373  0020               	movlb	0	; select bank0
  8017  1374  0866               	movf	setRFSW_AdjControl@sw,w
  8018  1375  3E14               	addlw	20
  8019  1376  077B               	addwf	_product,w
  8020  1377  00E4               	movwf	??_setRFSW_AdjControl
  8021  1378  0864               	movf	??_setRFSW_AdjControl,w
  8022  1379  0086               	movwf	6
  8023  137A  3002               	movlw	2	; select bank4/5
  8024  137B  0087               	movwf	7
  8025  137C  0801               	movf	1,w
  8026  137D  00E5               	movwf	??_setRFSW_AdjControl+1
  8027  137E  087B               	movf	_product,w
  8028  137F  3E09               	addlw	9
  8029  1380  0086               	movwf	6
  8030  1381  3002               	movlw	2	; select bank4/5
  8031  1382  0087               	movwf	7
  8032  1383  0865               	movf	??_setRFSW_AdjControl+1,w
  8033  1384  0081               	movwf	1
  8034  1385                     l2325:	
  8035                           
  8036                           ;RF_Control_B1.c: 510: }
  8037                           ;RF_Control_B1.c: 511: product->Data[17]=product->Data[26 + sw];
  8038  1385  0020               	movlb	0	; select bank0
  8039  1386  0866               	movf	setRFSW_AdjControl@sw,w
  8040  1387  3E1A               	addlw	26
  8041  1388  077B               	addwf	_product,w
  8042  1389  00E4               	movwf	??_setRFSW_AdjControl
  8043  138A  0864               	movf	??_setRFSW_AdjControl,w
  8044  138B  0086               	movwf	6
  8045  138C  3002               	movlw	2	; select bank4/5
  8046  138D  0087               	movwf	7
  8047  138E  0801               	movf	1,w
  8048  138F  00E5               	movwf	??_setRFSW_AdjControl+1
  8049  1390  087B               	movf	_product,w
  8050  1391  3E11               	addlw	17
  8051  1392  0086               	movwf	6
  8052  1393  3002               	movlw	2	; select bank4/5
  8053  1394  0087               	movwf	7
  8054  1395  0865               	movf	??_setRFSW_AdjControl+1,w
  8055  1396  0081               	movwf	1
  8056                           
  8057                           ;RF_Control_B1.c: 512: setTxData();
  8058  1397  318D  2571         	fcall	_setTxData
  8059  1399  0008               	return
  8060  139A                     __end_of_setRFSW_AdjControl:	
  8061                           
  8062                           	psect	text32
  8063  121A                     __ptext32:	
  8064 ;; *************** function _setRF_DimmerValue *****************
  8065 ;; Defined at:
  8066 ;;		line 517 in file "../src/RF_Control_B1.c"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;  lights          1    wreg     unsigned char 
  8069 ;; Auto vars:     Size  Location     Type
  8070 ;;  lights          1   67[BANK0 ] unsigned char 
  8071 ;; Return value:  Size  Location     Type
  8072 ;;		None               void
  8073 ;; Registers used:
  8074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8075 ;; Tracked objects:
  8076 ;;		On entry : 0/0
  8077 ;;		On exit  : 0/0
  8078 ;;		Unchanged: 0/0
  8079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8082 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8083 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8084 ;;Total ram usage:        3 bytes
  8085 ;; Hardware stack levels used:    1
  8086 ;; Hardware stack levels required when called:    9
  8087 ;; This function calls:
  8088 ;;		_setDimmerLights_AdjRF
  8089 ;; This function is called by:
  8090 ;;		_setRFSW_AdjControl
  8091 ;; This function uses a non-reentrant model
  8092 ;;
  8093                           
  8094                           
  8095                           ;psect for function _setRF_DimmerValue
  8096  121A                     _setRF_DimmerValue:	
  8097                           
  8098                           ;incstack = 0
  8099                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8100                           ;setRF_DimmerValue@lights stored from wreg
  8101  121A  0020               	movlb	0	; select bank0
  8102  121B  00E3               	movwf	setRF_DimmerValue@lights
  8103                           
  8104                           ;RF_Control_B1.c: 518: if (RF_Data[9] > 0x64) {
  8105  121C  3065               	movlw	101
  8106  121D  0023               	movlb	3	; select bank3
  8107  121E  0229               	subwf	(_RF_Data^(0+384)+9),w
  8108  121F  1C03               	skipc
  8109  1220  2A27               	goto	l8903
  8110                           
  8111                           ;RF_Control_B1.c: 519: RF_Data[9] = 0x64;
  8112  1221  3064               	movlw	100
  8113  1222  0020               	movlb	0	; select bank0
  8114  1223  00E1               	movwf	??_setRF_DimmerValue
  8115  1224  0861               	movf	??_setRF_DimmerValue,w
  8116  1225  0023               	movlb	3	; select bank3
  8117  1226  00A9               	movwf	(_RF_Data^(0+384)+9)
  8118  1227                     l8903:	
  8119                           
  8120                           ;RF_Control_B1.c: 520: }
  8121                           ;RF_Control_B1.c: 521: product->Data[9]=RF_Data[9];
  8122  1227  0829               	movf	(_RF_Data^(0+384)+9),w
  8123  1228  0020               	movlb	0	; select bank0
  8124  1229  00E1               	movwf	??_setRF_DimmerValue
  8125  122A  087B               	movf	_product,w
  8126  122B  3E09               	addlw	9
  8127  122C  0086               	movwf	6
  8128  122D  3002               	movlw	2	; select bank4/5
  8129  122E  0087               	movwf	7
  8130  122F  0861               	movf	??_setRF_DimmerValue,w
  8131  1230  0081               	movwf	1
  8132                           
  8133                           ;RF_Control_B1.c: 522: product->Data[11]=lights;
  8134  1231  0863               	movf	setRF_DimmerValue@lights,w
  8135  1232  00E1               	movwf	??_setRF_DimmerValue
  8136  1233  087B               	movf	_product,w
  8137  1234  3E0B               	addlw	11
  8138  1235  0086               	movwf	6
  8139  1236  3002               	movlw	2	; select bank4/5
  8140  1237  0087               	movwf	7
  8141  1238  0861               	movf	??_setRF_DimmerValue,w
  8142  1239  0081               	movwf	1
  8143                           
  8144                           ;RF_Control_B1.c: 523: product->Data[(20 + lights)]=product->Data[9];
  8145  123A  087B               	movf	_product,w
  8146  123B  3E09               	addlw	9
  8147  123C  0086               	movwf	6
  8148  123D  3002               	movlw	2	; select bank4/5
  8149  123E  0087               	movwf	7
  8150  123F  0801               	movf	1,w
  8151  1240  00E1               	movwf	??_setRF_DimmerValue
  8152  1241  0863               	movf	setRF_DimmerValue@lights,w
  8153  1242  3E14               	addlw	20
  8154  1243  077B               	addwf	_product,w
  8155  1244  00E2               	movwf	??_setRF_DimmerValue+1
  8156  1245  0862               	movf	??_setRF_DimmerValue+1,w
  8157  1246  0086               	movwf	6
  8158  1247  3002               	movlw	2	; select bank4/5
  8159  1248  0087               	movwf	7
  8160  1249  0861               	movf	??_setRF_DimmerValue,w
  8161  124A  0081               	movwf	1
  8162                           
  8163                           ;RF_Control_B1.c: 524: setDimmerLights_AdjRF(lights);
  8164  124B  0863               	movf	setRF_DimmerValue@lights,w
  8165  124C  319F  2772         	fcall	_setDimmerLights_AdjRF
  8166  124E  0008               	return
  8167  124F                     __end_of_setRF_DimmerValue:	
  8168                           
  8169                           	psect	text33
  8170  1F72                     __ptext33:	
  8171 ;; *************** function _setDimmerLights_AdjRF *****************
  8172 ;; Defined at:
  8173 ;;		line 800 in file "../src/Dimmer_B1.c"
  8174 ;; Parameters:    Size  Location     Type
  8175 ;;  lights          1    wreg     unsigned char 
  8176 ;; Auto vars:     Size  Location     Type
  8177 ;;  lights          1   64[BANK0 ] unsigned char 
  8178 ;; Return value:  Size  Location     Type
  8179 ;;		None               void
  8180 ;; Registers used:
  8181 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8182 ;; Tracked objects:
  8183 ;;		On entry : 0/0
  8184 ;;		On exit  : 0/0
  8185 ;;		Unchanged: 0/0
  8186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8188 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8189 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8190 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;Total ram usage:        2 bytes
  8192 ;; Hardware stack levels used:    1
  8193 ;; Hardware stack levels required when called:    8
  8194 ;; This function calls:
  8195 ;;		_DimmerLightsPointSelect
  8196 ;;		_getPercentValue
  8197 ;; This function is called by:
  8198 ;;		_setRF_DimmerValue
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           
  8203                           ;psect for function _setDimmerLights_AdjRF
  8204  1F72                     _setDimmerLights_AdjRF:	
  8205                           
  8206                           ;incstack = 0
  8207                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8208                           ;setDimmerLights_AdjRF@lights stored from wreg
  8209  1F72  0020               	movlb	0	; select bank0
  8210  1F73  00E0               	movwf	setDimmerLights_AdjRF@lights
  8211                           
  8212                           ;Dimmer_B1.c: 801: DimmerLightsPointSelect(lights);
  8213  1F74  0860               	movf	setDimmerLights_AdjRF@lights,w
  8214  1F75  319C  24B6  319F   	fcall	_DimmerLightsPointSelect
  8215                           
  8216                           ;Dimmer_B1.c: 802: DimmerLights->AdjRF = 1;
  8217  1F78  0877               	movf	_DimmerLights,w
  8218  1F79  0086               	movwf	6
  8219  1F7A  3001               	movlw	1	; select bank2/3
  8220  1F7B  0087               	movwf	7
  8221  1F7C  1501               	bsf	1,2
  8222                           
  8223                           ;Dimmer_B1.c: 803: DimmerLights->Signal = 1;
  8224  1F7D  0877               	movf	_DimmerLights,w
  8225  1F7E  0086               	movwf	6
  8226  1F7F  3001               	movlw	1	; select bank2/3
  8227  1F80  0087               	movwf	7
  8228  1F81  1481               	bsf	1,1
  8229                           
  8230                           ;Dimmer_B1.c: 804: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8231  1F82  087B               	movf	_product,w
  8232  1F83  3E09               	addlw	9
  8233  1F84  0086               	movwf	6
  8234  1F85  3002               	movlw	2	; select bank4/5
  8235  1F86  0087               	movwf	7
  8236  1F87  0801               	movf	1,w
  8237  1F88  3197  27A5         	fcall	_getPercentValue
  8238  1F8A  0020               	movlb	0	; select bank0
  8239  1F8B  00DF               	movwf	??_setDimmerLights_AdjRF
  8240  1F8C  0877               	movf	_DimmerLights,w
  8241  1F8D  3E05               	addlw	5
  8242  1F8E  0086               	movwf	6
  8243  1F8F  3001               	movlw	1	; select bank2/3
  8244  1F90  0087               	movwf	7
  8245  1F91  085F               	movf	??_setDimmerLights_AdjRF,w
  8246  1F92  0081               	movwf	1
  8247  1F93  0008               	return
  8248  1F94                     __end_of_setDimmerLights_AdjRF:	
  8249                           
  8250                           	psect	text34
  8251  17A5                     __ptext34:	
  8252 ;; *************** function _getPercentValue *****************
  8253 ;; Defined at:
  8254 ;;		line 913 in file "../src/Dimmer_B1.c"
  8255 ;; Parameters:    Size  Location     Type
  8256 ;;  value           1    wreg     unsigned char 
  8257 ;; Auto vars:     Size  Location     Type
  8258 ;;  value           1   59[BANK0 ] unsigned char 
  8259 ;;  i               3   60[BANK0 ] float 
  8260 ;; Return value:  Size  Location     Type
  8261 ;;                  1    wreg      unsigned char 
  8262 ;; Registers used:
  8263 ;;		wreg, status,2, status,0, pclath, cstack
  8264 ;; Tracked objects:
  8265 ;;		On entry : 0/0
  8266 ;;		On exit  : 0/0
  8267 ;;		Unchanged: 0/0
  8268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8271 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;Total ram usage:        6 bytes
  8274 ;; Hardware stack levels used:    1
  8275 ;; Hardware stack levels required when called:    7
  8276 ;; This function calls:
  8277 ;;		___awtoft
  8278 ;;		___ftadd
  8279 ;;		___ftdiv
  8280 ;;		___ftmul
  8281 ;;		___fttol
  8282 ;; This function is called by:
  8283 ;;		_setDimmerLights_AdjRF
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           
  8288                           ;psect for function _getPercentValue
  8289  17A5                     _getPercentValue:	
  8290                           
  8291                           ;incstack = 0
  8292                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8293                           ;getPercentValue@value stored from wreg
  8294  17A5  0020               	movlb	0	; select bank0
  8295  17A6  00DB               	movwf	getPercentValue@value
  8296                           
  8297                           ;Dimmer_B1.c: 915: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8298  17A7  3000               	movlw	0
  8299  17A8  00DC               	movwf	getPercentValue@i
  8300  17A9  30E0               	movlw	224
  8301  17AA  00DD               	movwf	getPercentValue@i+1
  8302  17AB  3041               	movlw	65
  8303  17AC  00DE               	movwf	getPercentValue@i+2
  8304                           
  8305                           ;Dimmer_B1.c: 916: i /= 100;
  8306  17AD  3000               	movlw	0
  8307  17AE  00AE               	movwf	___ftdiv@f2
  8308  17AF  30C8               	movlw	200
  8309  17B0  00AF               	movwf	___ftdiv@f2+1
  8310  17B1  3042               	movlw	66
  8311  17B2  00B0               	movwf	___ftdiv@f2+2
  8312  17B3  085C               	movf	getPercentValue@i,w
  8313  17B4  00B1               	movwf	___ftdiv@f1
  8314  17B5  085D               	movf	getPercentValue@i+1,w
  8315  17B6  00B2               	movwf	___ftdiv@f1+1
  8316  17B7  085E               	movf	getPercentValue@i+2,w
  8317  17B8  00B3               	movwf	___ftdiv@f1+2
  8318  17B9  318E  26A3  3197   	fcall	___ftdiv
  8319  17BC  0020               	movlb	0	; select bank0
  8320  17BD  082E               	movf	?___ftdiv,w
  8321  17BE  00DC               	movwf	getPercentValue@i
  8322  17BF  082F               	movf	?___ftdiv+1,w
  8323  17C0  00DD               	movwf	getPercentValue@i+1
  8324  17C1  0830               	movf	?___ftdiv+2,w
  8325  17C2  00DE               	movwf	getPercentValue@i+2
  8326                           
  8327                           ;Dimmer_B1.c: 917: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8328  17C3  085B               	movf	getPercentValue@value,w
  8329  17C4  00D9               	movwf	??_getPercentValue
  8330  17C5  01DA               	clrf	??_getPercentValue+1
  8331  17C6  09D9               	comf	??_getPercentValue,f
  8332  17C7  09DA               	comf	??_getPercentValue+1,f
  8333  17C8  0AD9               	incf	??_getPercentValue,f
  8334  17C9  1903               	skipnz
  8335  17CA  0ADA               	incf	??_getPercentValue+1,f
  8336  17CB  0859               	movf	??_getPercentValue,w
  8337  17CC  3E64               	addlw	100
  8338  17CD  00A8               	movwf	___awtoft@c
  8339  17CE  3000               	movlw	0
  8340  17CF  3D5A               	addwfc	??_getPercentValue+1,w
  8341  17D0  00A9               	movwf	___awtoft@c+1
  8342  17D1  319F  272E  3197   	fcall	___awtoft
  8343  17D4  0020               	movlb	0	; select bank0
  8344  17D5  0828               	movf	?___awtoft,w
  8345  17D6  00B1               	movwf	___ftmul@f2
  8346  17D7  0829               	movf	?___awtoft+1,w
  8347  17D8  00B2               	movwf	___ftmul@f2+1
  8348  17D9  082A               	movf	?___awtoft+2,w
  8349  17DA  00B3               	movwf	___ftmul@f2+2
  8350  17DB  085C               	movf	getPercentValue@i,w
  8351  17DC  00AE               	movwf	___ftmul@f1
  8352  17DD  085D               	movf	getPercentValue@i+1,w
  8353  17DE  00AF               	movwf	___ftmul@f1+1
  8354  17DF  085E               	movf	getPercentValue@i+2,w
  8355  17E0  00B0               	movwf	___ftmul@f1+2
  8356  17E1  318F  274C  3197   	fcall	___ftmul
  8357  17E4  0020               	movlb	0	; select bank0
  8358  17E5  082E               	movf	?___ftmul,w
  8359  17E6  00C1               	movwf	___ftadd@f2
  8360  17E7  082F               	movf	?___ftmul+1,w
  8361  17E8  00C2               	movwf	___ftadd@f2+1
  8362  17E9  0830               	movf	?___ftmul+2,w
  8363  17EA  00C3               	movwf	___ftadd@f2+2
  8364  17EB  3000               	movlw	0
  8365  17EC  00BE               	movwf	___ftadd@f1
  8366  17ED  3000               	movlw	0
  8367  17EE  00BF               	movwf	___ftadd@f1+1
  8368  17EF  3042               	movlw	66
  8369  17F0  00C0               	movwf	___ftadd@f1+2
  8370  17F1  3184  24AE  3197   	fcall	___ftadd
  8371  17F4  0020               	movlb	0	; select bank0
  8372  17F5  083E               	movf	?___ftadd,w
  8373  17F6  00CB               	movwf	___fttol@f1
  8374  17F7  083F               	movf	?___ftadd+1,w
  8375  17F8  00CC               	movwf	___fttol@f1+1
  8376  17F9  0840               	movf	?___ftadd+2,w
  8377  17FA  00CD               	movwf	___fttol@f1+2
  8378  17FB  3187  2771         	fcall	___fttol
  8379  17FD  0020               	movlb	0	; select bank0
  8380  17FE  084B               	movf	?___fttol,w
  8381  17FF  0008               	return
  8382  1800                     __end_of_getPercentValue:	
  8383                           
  8384                           	psect	text35
  8385  0F4C                     __ptext35:	
  8386 ;; *************** function ___ftmul *****************
  8387 ;; Defined at:
  8388 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;  f1              3   14[BANK0 ] float 
  8391 ;;  f2              3   17[BANK0 ] float 
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8394 ;;  sign            1   29[BANK0 ] unsigned char 
  8395 ;;  cntr            1   28[BANK0 ] unsigned char 
  8396 ;;  exp             1   24[BANK0 ] unsigned char 
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  3   14[BANK0 ] float 
  8399 ;; Registers used:
  8400 ;;		wreg, status,2, status,0, pclath, cstack
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8406 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;Total ram usage:       16 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    6
  8413 ;; This function calls:
  8414 ;;		___ftpack
  8415 ;; This function is called by:
  8416 ;;		_getPercentValue
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           
  8421                           ;psect for function ___ftmul
  8422  0F4C                     ___ftmul:	
  8423                           
  8424                           ;incstack = 0
  8425                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8426  0F4C  0020               	movlb	0	; select bank0
  8427  0F4D  082E               	movf	___ftmul@f1,w
  8428  0F4E  00B4               	movwf	??___ftmul
  8429  0F4F  082F               	movf	___ftmul@f1+1,w
  8430  0F50  00B5               	movwf	??___ftmul+1
  8431  0F51  0830               	movf	___ftmul@f1+2,w
  8432  0F52  00B6               	movwf	??___ftmul+2
  8433  0F53  1003               	clrc
  8434  0F54  0D35               	rlf	??___ftmul+1,w
  8435  0F55  0D36               	rlf	??___ftmul+2,w
  8436  0F56  00B7               	movwf	??___ftmul+3
  8437  0F57  0837               	movf	??___ftmul+3,w
  8438  0F58  00B8               	movwf	___ftmul@exp
  8439  0F59  08B8               	movf	___ftmul@exp,f
  8440  0F5A  1D03               	skipz
  8441  0F5B  2F63               	goto	l8519
  8442  0F5C  3000               	movlw	0
  8443  0F5D  00AE               	movwf	?___ftmul
  8444  0F5E  3000               	movlw	0
  8445  0F5F  00AF               	movwf	?___ftmul+1
  8446  0F60  3000               	movlw	0
  8447  0F61  00B0               	movwf	?___ftmul+2
  8448  0F62  0008               	return
  8449  0F63                     l8519:	
  8450  0F63  0831               	movf	___ftmul@f2,w
  8451  0F64  00B4               	movwf	??___ftmul
  8452  0F65  0832               	movf	___ftmul@f2+1,w
  8453  0F66  00B5               	movwf	??___ftmul+1
  8454  0F67  0833               	movf	___ftmul@f2+2,w
  8455  0F68  00B6               	movwf	??___ftmul+2
  8456  0F69  1003               	clrc
  8457  0F6A  0D35               	rlf	??___ftmul+1,w
  8458  0F6B  0D36               	rlf	??___ftmul+2,w
  8459  0F6C  00B7               	movwf	??___ftmul+3
  8460  0F6D  0837               	movf	??___ftmul+3,w
  8461  0F6E  00BD               	movwf	___ftmul@sign
  8462  0F6F  08BD               	movf	___ftmul@sign,f
  8463  0F70  1D03               	skipz
  8464  0F71  2F79               	goto	l8525
  8465  0F72  3000               	movlw	0
  8466  0F73  00AE               	movwf	?___ftmul
  8467  0F74  3000               	movlw	0
  8468  0F75  00AF               	movwf	?___ftmul+1
  8469  0F76  3000               	movlw	0
  8470  0F77  00B0               	movwf	?___ftmul+2
  8471  0F78  0008               	return
  8472  0F79                     l8525:	
  8473  0F79  083D               	movf	___ftmul@sign,w
  8474  0F7A  3E7B               	addlw	123
  8475  0F7B  00B4               	movwf	??___ftmul
  8476  0F7C  0834               	movf	??___ftmul,w
  8477  0F7D  07B8               	addwf	___ftmul@exp,f
  8478  0F7E  082E               	movf	___ftmul@f1,w
  8479  0F7F  00B4               	movwf	??___ftmul
  8480  0F80  082F               	movf	___ftmul@f1+1,w
  8481  0F81  00B5               	movwf	??___ftmul+1
  8482  0F82  0830               	movf	___ftmul@f1+2,w
  8483  0F83  00B6               	movwf	??___ftmul+2
  8484  0F84  3010               	movlw	16
  8485  0F85                     u8985:	
  8486  0F85  36B6               	lsrf	??___ftmul+2,f
  8487  0F86  0CB5               	rrf	??___ftmul+1,f
  8488  0F87  0CB4               	rrf	??___ftmul,f
  8489  0F88  0B89               	decfsz	9,f
  8490  0F89  2F85               	goto	u8985
  8491  0F8A  0834               	movf	??___ftmul,w
  8492  0F8B  00B7               	movwf	??___ftmul+3
  8493  0F8C  0837               	movf	??___ftmul+3,w
  8494  0F8D  00BD               	movwf	___ftmul@sign
  8495  0F8E  0831               	movf	___ftmul@f2,w
  8496  0F8F  00B4               	movwf	??___ftmul
  8497  0F90  0832               	movf	___ftmul@f2+1,w
  8498  0F91  00B5               	movwf	??___ftmul+1
  8499  0F92  0833               	movf	___ftmul@f2+2,w
  8500  0F93  00B6               	movwf	??___ftmul+2
  8501  0F94  3010               	movlw	16
  8502  0F95                     u8995:	
  8503  0F95  36B6               	lsrf	??___ftmul+2,f
  8504  0F96  0CB5               	rrf	??___ftmul+1,f
  8505  0F97  0CB4               	rrf	??___ftmul,f
  8506  0F98  0B89               	decfsz	9,f
  8507  0F99  2F95               	goto	u8995
  8508  0F9A  0834               	movf	??___ftmul,w
  8509  0F9B  00B7               	movwf	??___ftmul+3
  8510  0F9C  0837               	movf	??___ftmul+3,w
  8511  0F9D  06BD               	xorwf	___ftmul@sign,f
  8512  0F9E  3080               	movlw	128
  8513  0F9F  00B4               	movwf	??___ftmul
  8514  0FA0  0834               	movf	??___ftmul,w
  8515  0FA1  05BD               	andwf	___ftmul@sign,f
  8516  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8517  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8518  0FA4  30FF               	movlw	255
  8519  0FA5  05B1               	andwf	___ftmul@f2,f
  8520  0FA6  30FF               	movlw	255
  8521  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8522  0FA8  3000               	movlw	0
  8523  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8524  0FAA  3000               	movlw	0
  8525  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8526  0FAC  3000               	movlw	0
  8527  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8528  0FAE  3000               	movlw	0
  8529  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8530  0FB0  3007               	movlw	7
  8531  0FB1  00B4               	movwf	??___ftmul
  8532  0FB2  0834               	movf	??___ftmul,w
  8533  0FB3  00BC               	movwf	___ftmul@cntr
  8534  0FB4                     l8537:	
  8535  0FB4  1C2E               	btfss	___ftmul@f1,0
  8536  0FB5  2FBC               	goto	l8541
  8537  0FB6  0831               	movf	___ftmul@f2,w
  8538  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8539  0FB8  0832               	movf	___ftmul@f2+1,w
  8540  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8541  0FBA  0833               	movf	___ftmul@f2+2,w
  8542  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8543  0FBC                     l8541:	
  8544  0FBC  3001               	movlw	1
  8545  0FBD                     u9015:	
  8546  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8547  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8548  0FBF  0CAE               	rrf	___ftmul@f1,f
  8549  0FC0  0B89               	decfsz	9,f
  8550  0FC1  2FBD               	goto	u9015
  8551  0FC2  3001               	movlw	1
  8552  0FC3                     u9025:	
  8553  0FC3  35B1               	lslf	___ftmul@f2,f
  8554  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8555  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8556  0FC6  0B89               	decfsz	9,f
  8557  0FC7  2FC3               	goto	u9025
  8558  0FC8  3001               	movlw	1
  8559  0FC9  02BC               	subwf	___ftmul@cntr,f
  8560  0FCA  1D03               	btfss	3,2
  8561  0FCB  2FB4               	goto	l8537
  8562  0FCC  3009               	movlw	9
  8563  0FCD  00B4               	movwf	??___ftmul
  8564  0FCE  0834               	movf	??___ftmul,w
  8565  0FCF  00BC               	movwf	___ftmul@cntr
  8566  0FD0                     l8549:	
  8567  0FD0  1C2E               	btfss	___ftmul@f1,0
  8568  0FD1  2FD8               	goto	l8553
  8569  0FD2  0831               	movf	___ftmul@f2,w
  8570  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8571  0FD4  0832               	movf	___ftmul@f2+1,w
  8572  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8573  0FD6  0833               	movf	___ftmul@f2+2,w
  8574  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8575  0FD8                     l8553:	
  8576  0FD8  3001               	movlw	1
  8577  0FD9                     u9055:	
  8578  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8579  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8580  0FDB  0CAE               	rrf	___ftmul@f1,f
  8581  0FDC  0B89               	decfsz	9,f
  8582  0FDD  2FD9               	goto	u9055
  8583  0FDE  3001               	movlw	1
  8584  0FDF                     u9065:	
  8585  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8586  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8587  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8588  0FE2  0B89               	decfsz	9,f
  8589  0FE3  2FDF               	goto	u9065
  8590  0FE4  3001               	movlw	1
  8591  0FE5  02BC               	subwf	___ftmul@cntr,f
  8592  0FE6  1D03               	btfss	3,2
  8593  0FE7  2FD0               	goto	l8549
  8594  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8595  0FE9  00A0               	movwf	___ftpack@arg
  8596  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8597  0FEB  00A1               	movwf	___ftpack@arg+1
  8598  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8599  0FED  00A2               	movwf	___ftpack@arg+2
  8600  0FEE  0838               	movf	___ftmul@exp,w
  8601  0FEF  00B4               	movwf	??___ftmul
  8602  0FF0  0834               	movf	??___ftmul,w
  8603  0FF1  00A3               	movwf	___ftpack@exp
  8604  0FF2  083D               	movf	___ftmul@sign,w
  8605  0FF3  00B5               	movwf	??___ftmul+1
  8606  0FF4  0835               	movf	??___ftmul+1,w
  8607  0FF5  00A4               	movwf	___ftpack@sign
  8608  0FF6  3188  20C4         	fcall	___ftpack
  8609  0FF8  0020               	movlb	0	; select bank0
  8610  0FF9  0820               	movf	?___ftpack,w
  8611  0FFA  00AE               	movwf	?___ftmul
  8612  0FFB  0821               	movf	?___ftpack+1,w
  8613  0FFC  00AF               	movwf	?___ftmul+1
  8614  0FFD  0822               	movf	?___ftpack+2,w
  8615  0FFE  00B0               	movwf	?___ftmul+2
  8616  0FFF  0008               	return
  8617  1000                     __end_of___ftmul:	
  8618                           
  8619                           	psect	text36
  8620  04AE                     __ptext36:	
  8621 ;; *************** function ___ftadd *****************
  8622 ;; Defined at:
  8623 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8624 ;; Parameters:    Size  Location     Type
  8625 ;;  f1              3   30[BANK0 ] float 
  8626 ;;  f2              3   33[BANK0 ] float 
  8627 ;; Auto vars:     Size  Location     Type
  8628 ;;  exp1            1   42[BANK0 ] unsigned char 
  8629 ;;  exp2            1   41[BANK0 ] unsigned char 
  8630 ;;  sign            1   40[BANK0 ] unsigned char 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  3   30[BANK0 ] float 
  8633 ;; Registers used:
  8634 ;;		wreg, status,2, status,0, pclath, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8640 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8641 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;Total ram usage:       13 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:    6
  8647 ;; This function calls:
  8648 ;;		___ftpack
  8649 ;; This function is called by:
  8650 ;;		_getPercentValue
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           
  8655                           ;psect for function ___ftadd
  8656  04AE                     ___ftadd:	
  8657                           
  8658                           ;incstack = 0
  8659                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8660  04AE  0020               	movlb	0	; select bank0
  8661  04AF  083E               	movf	___ftadd@f1,w
  8662  04B0  00C4               	movwf	??___ftadd
  8663  04B1  083F               	movf	___ftadd@f1+1,w
  8664  04B2  00C5               	movwf	??___ftadd+1
  8665  04B3  0840               	movf	___ftadd@f1+2,w
  8666  04B4  00C6               	movwf	??___ftadd+2
  8667  04B5  1003               	clrc
  8668  04B6  0D45               	rlf	??___ftadd+1,w
  8669  04B7  0D46               	rlf	??___ftadd+2,w
  8670  04B8  00C7               	movwf	??___ftadd+3
  8671  04B9  0847               	movf	??___ftadd+3,w
  8672  04BA  00CA               	movwf	___ftadd@exp1
  8673  04BB  0841               	movf	___ftadd@f2,w
  8674  04BC  00C4               	movwf	??___ftadd
  8675  04BD  0842               	movf	___ftadd@f2+1,w
  8676  04BE  00C5               	movwf	??___ftadd+1
  8677  04BF  0843               	movf	___ftadd@f2+2,w
  8678  04C0  00C6               	movwf	??___ftadd+2
  8679  04C1  1003               	clrc
  8680  04C2  0D45               	rlf	??___ftadd+1,w
  8681  04C3  0D46               	rlf	??___ftadd+2,w
  8682  04C4  00C7               	movwf	??___ftadd+3
  8683  04C5  0847               	movf	??___ftadd+3,w
  8684  04C6  00C9               	movwf	___ftadd@exp2
  8685  04C7  084A               	movf	___ftadd@exp1,w
  8686  04C8  1903               	btfsc	3,2
  8687  04C9  2CD6               	goto	l8407
  8688  04CA  0849               	movf	___ftadd@exp2,w
  8689  04CB  024A               	subwf	___ftadd@exp1,w
  8690  04CC  1803               	skipnc
  8691  04CD  2CDD               	goto	l8411
  8692  04CE  034A               	decf	___ftadd@exp1,w
  8693  04CF  3AFF               	xorlw	255
  8694  04D0  0749               	addwf	___ftadd@exp2,w
  8695  04D1  00C4               	movwf	??___ftadd
  8696  04D2  3019               	movlw	25
  8697  04D3  0244               	subwf	??___ftadd,w
  8698  04D4  1C03               	skipc
  8699  04D5  2CDD               	goto	l8411
  8700  04D6                     l8407:	
  8701  04D6  0841               	movf	___ftadd@f2,w
  8702  04D7  00BE               	movwf	?___ftadd
  8703  04D8  0842               	movf	___ftadd@f2+1,w
  8704  04D9  00BF               	movwf	?___ftadd+1
  8705  04DA  0843               	movf	___ftadd@f2+2,w
  8706  04DB  00C0               	movwf	?___ftadd+2
  8707  04DC  0008               	return
  8708  04DD                     l8411:	
  8709  04DD  0849               	movf	___ftadd@exp2,w
  8710  04DE  1903               	btfsc	3,2
  8711  04DF  0008               	return
  8712  04E0  084A               	movf	___ftadd@exp1,w
  8713  04E1  0249               	subwf	___ftadd@exp2,w
  8714  04E2  1803               	skipnc
  8715  04E3  2CEC               	goto	l8417
  8716  04E4  0349               	decf	___ftadd@exp2,w
  8717  04E5  3AFF               	xorlw	255
  8718  04E6  074A               	addwf	___ftadd@exp1,w
  8719  04E7  00C4               	movwf	??___ftadd
  8720  04E8  3019               	movlw	25
  8721  04E9  0244               	subwf	??___ftadd,w
  8722  04EA  1803               	btfsc	3,0
  8723  04EB  0008               	return
  8724  04EC                     l8417:	
  8725  04EC  3006               	movlw	6
  8726  04ED  00C4               	movwf	??___ftadd
  8727  04EE  0844               	movf	??___ftadd,w
  8728  04EF  00C8               	movwf	___ftadd@sign
  8729  04F0  1BC0               	btfsc	___ftadd@f1+2,7
  8730  04F1  17C8               	bsf	___ftadd@sign,7
  8731  04F2  1BC3               	btfsc	___ftadd@f2+2,7
  8732  04F3  1748               	bsf	___ftadd@sign,6
  8733  04F4  17BF               	bsf	___ftadd@f1+1,7
  8734  04F5  30FF               	movlw	255
  8735  04F6  05BE               	andwf	___ftadd@f1,f
  8736  04F7  30FF               	movlw	255
  8737  04F8  05BF               	andwf	___ftadd@f1+1,f
  8738  04F9  3000               	movlw	0
  8739  04FA  05C0               	andwf	___ftadd@f1+2,f
  8740  04FB  17C2               	bsf	___ftadd@f2+1,7
  8741  04FC  30FF               	movlw	255
  8742  04FD  05C1               	andwf	___ftadd@f2,f
  8743  04FE  30FF               	movlw	255
  8744  04FF  05C2               	andwf	___ftadd@f2+1,f
  8745  0500  3000               	movlw	0
  8746  0501  05C3               	andwf	___ftadd@f2+2,f
  8747  0502  0849               	movf	___ftadd@exp2,w
  8748  0503  024A               	subwf	___ftadd@exp1,w
  8749  0504  1803               	skipnc
  8750  0505  2D28               	goto	l8439
  8751  0506                     l8429:	
  8752  0506  3001               	movlw	1
  8753  0507                     u8745:	
  8754  0507  35C1               	lslf	___ftadd@f2,f
  8755  0508  0DC2               	rlf	___ftadd@f2+1,f
  8756  0509  0DC3               	rlf	___ftadd@f2+2,f
  8757  050A  0B89               	decfsz	9,f
  8758  050B  2D07               	goto	u8745
  8759  050C  3001               	movlw	1
  8760  050D  02C9               	subwf	___ftadd@exp2,f
  8761  050E  0849               	movf	___ftadd@exp2,w
  8762  050F  064A               	xorwf	___ftadd@exp1,w
  8763  0510  1903               	skipnz
  8764  0511  2D23               	goto	l8437
  8765  0512  3001               	movlw	1
  8766  0513  02C8               	subwf	___ftadd@sign,f
  8767  0514  0848               	movf	___ftadd@sign,w
  8768  0515  3907               	andlw	7
  8769  0516  1903               	btfsc	3,2
  8770  0517  2D23               	goto	l8437
  8771  0518  2D06               	goto	l8429
  8772  0519                     l8435:	
  8773  0519  3001               	movlw	1
  8774  051A                     u8775:	
  8775  051A  36C0               	lsrf	___ftadd@f1+2,f
  8776  051B  0CBF               	rrf	___ftadd@f1+1,f
  8777  051C  0CBE               	rrf	___ftadd@f1,f
  8778  051D  0B89               	decfsz	9,f
  8779  051E  2D1A               	goto	u8775
  8780  051F  3001               	movlw	1
  8781  0520  00C4               	movwf	??___ftadd
  8782  0521  0844               	movf	??___ftadd,w
  8783  0522  07CA               	addwf	___ftadd@exp1,f
  8784  0523                     l8437:	
  8785  0523  084A               	movf	___ftadd@exp1,w
  8786  0524  0649               	xorwf	___ftadd@exp2,w
  8787  0525  1903               	btfsc	3,2
  8788  0526  2D4D               	goto	l2950
  8789  0527  2D19               	goto	l8435
  8790  0528                     l8439:	
  8791  0528  084A               	movf	___ftadd@exp1,w
  8792  0529  0249               	subwf	___ftadd@exp2,w
  8793  052A  1803               	skipnc
  8794  052B  2D4D               	goto	l2950
  8795  052C                     l8441:	
  8796  052C  3001               	movlw	1
  8797  052D                     u8805:	
  8798  052D  35BE               	lslf	___ftadd@f1,f
  8799  052E  0DBF               	rlf	___ftadd@f1+1,f
  8800  052F  0DC0               	rlf	___ftadd@f1+2,f
  8801  0530  0B89               	decfsz	9,f
  8802  0531  2D2D               	goto	u8805
  8803  0532  3001               	movlw	1
  8804  0533  02CA               	subwf	___ftadd@exp1,f
  8805  0534  0849               	movf	___ftadd@exp2,w
  8806  0535  064A               	xorwf	___ftadd@exp1,w
  8807  0536  1903               	skipnz
  8808  0537  2D49               	goto	l8449
  8809  0538  3001               	movlw	1
  8810  0539  02C8               	subwf	___ftadd@sign,f
  8811  053A  0848               	movf	___ftadd@sign,w
  8812  053B  3907               	andlw	7
  8813  053C  1903               	btfsc	3,2
  8814  053D  2D49               	goto	l8449
  8815  053E  2D2C               	goto	l8441
  8816  053F                     l8447:	
  8817  053F  3001               	movlw	1
  8818  0540                     u8835:	
  8819  0540  36C3               	lsrf	___ftadd@f2+2,f
  8820  0541  0CC2               	rrf	___ftadd@f2+1,f
  8821  0542  0CC1               	rrf	___ftadd@f2,f
  8822  0543  0B89               	decfsz	9,f
  8823  0544  2D40               	goto	u8835
  8824  0545  3001               	movlw	1
  8825  0546  00C4               	movwf	??___ftadd
  8826  0547  0844               	movf	??___ftadd,w
  8827  0548  07C9               	addwf	___ftadd@exp2,f
  8828  0549                     l8449:	
  8829  0549  084A               	movf	___ftadd@exp1,w
  8830  054A  0649               	xorwf	___ftadd@exp2,w
  8831  054B  1D03               	skipz
  8832  054C  2D3F               	goto	l8447
  8833  054D                     l2950:	
  8834  054D  1FC8               	btfss	___ftadd@sign,7
  8835  054E  2D5F               	goto	l8453
  8836  054F  30FF               	movlw	255
  8837  0550  06BE               	xorwf	___ftadd@f1,f
  8838  0551  30FF               	movlw	255
  8839  0552  06BF               	xorwf	___ftadd@f1+1,f
  8840  0553  30FF               	movlw	255
  8841  0554  06C0               	xorwf	___ftadd@f1+2,f
  8842  0555  3001               	movlw	1
  8843  0556  07BE               	addwf	___ftadd@f1,f
  8844  0557  3000               	movlw	0
  8845  0558  1803               	skipnc
  8846  0559  3001               	movlw	1
  8847  055A  07BF               	addwf	___ftadd@f1+1,f
  8848  055B  3000               	movlw	0
  8849  055C  1803               	skipnc
  8850  055D  3001               	movlw	1
  8851  055E  07C0               	addwf	___ftadd@f1+2,f
  8852  055F                     l8453:	
  8853  055F  1F48               	btfss	___ftadd@sign,6
  8854  0560  2D71               	goto	l8457
  8855  0561  30FF               	movlw	255
  8856  0562  06C1               	xorwf	___ftadd@f2,f
  8857  0563  30FF               	movlw	255
  8858  0564  06C2               	xorwf	___ftadd@f2+1,f
  8859  0565  30FF               	movlw	255
  8860  0566  06C3               	xorwf	___ftadd@f2+2,f
  8861  0567  3001               	movlw	1
  8862  0568  07C1               	addwf	___ftadd@f2,f
  8863  0569  3000               	movlw	0
  8864  056A  1803               	skipnc
  8865  056B  3001               	movlw	1
  8866  056C  07C2               	addwf	___ftadd@f2+1,f
  8867  056D  3000               	movlw	0
  8868  056E  1803               	skipnc
  8869  056F  3001               	movlw	1
  8870  0570  07C3               	addwf	___ftadd@f2+2,f
  8871  0571                     l8457:	
  8872  0571  01C8               	clrf	___ftadd@sign
  8873  0572  083E               	movf	___ftadd@f1,w
  8874  0573  07C1               	addwf	___ftadd@f2,f
  8875  0574  083F               	movf	___ftadd@f1+1,w
  8876  0575  3DC2               	addwfc	___ftadd@f2+1,f
  8877  0576  0840               	movf	___ftadd@f1+2,w
  8878  0577  3DC3               	addwfc	___ftadd@f2+2,f
  8879  0578  1FC3               	btfss	___ftadd@f2+2,7
  8880  0579  2D8C               	goto	l8467
  8881  057A  30FF               	movlw	255
  8882  057B  06C1               	xorwf	___ftadd@f2,f
  8883  057C  30FF               	movlw	255
  8884  057D  06C2               	xorwf	___ftadd@f2+1,f
  8885  057E  30FF               	movlw	255
  8886  057F  06C3               	xorwf	___ftadd@f2+2,f
  8887  0580  3001               	movlw	1
  8888  0581  07C1               	addwf	___ftadd@f2,f
  8889  0582  3000               	movlw	0
  8890  0583  1803               	skipnc
  8891  0584  3001               	movlw	1
  8892  0585  07C2               	addwf	___ftadd@f2+1,f
  8893  0586  3000               	movlw	0
  8894  0587  1803               	skipnc
  8895  0588  3001               	movlw	1
  8896  0589  07C3               	addwf	___ftadd@f2+2,f
  8897  058A  01C8               	clrf	___ftadd@sign
  8898  058B  0AC8               	incf	___ftadd@sign,f
  8899  058C                     l8467:	
  8900  058C  0841               	movf	___ftadd@f2,w
  8901  058D  00A0               	movwf	___ftpack@arg
  8902  058E  0842               	movf	___ftadd@f2+1,w
  8903  058F  00A1               	movwf	___ftpack@arg+1
  8904  0590  0843               	movf	___ftadd@f2+2,w
  8905  0591  00A2               	movwf	___ftpack@arg+2
  8906  0592  084A               	movf	___ftadd@exp1,w
  8907  0593  00C4               	movwf	??___ftadd
  8908  0594  0844               	movf	??___ftadd,w
  8909  0595  00A3               	movwf	___ftpack@exp
  8910  0596  0848               	movf	___ftadd@sign,w
  8911  0597  00C5               	movwf	??___ftadd+1
  8912  0598  0845               	movf	??___ftadd+1,w
  8913  0599  00A4               	movwf	___ftpack@sign
  8914  059A  3188  20C4         	fcall	___ftpack
  8915  059C  0020               	movlb	0	; select bank0
  8916  059D  0820               	movf	?___ftpack,w
  8917  059E  00BE               	movwf	?___ftadd
  8918  059F  0821               	movf	?___ftpack+1,w
  8919  05A0  00BF               	movwf	?___ftadd+1
  8920  05A1  0822               	movf	?___ftpack+2,w
  8921  05A2  00C0               	movwf	?___ftadd+2
  8922  05A3  0008               	return
  8923  05A4                     __end_of___ftadd:	
  8924                           
  8925                           	psect	text37
  8926  1CC9                     __ptext37:	
  8927 ;; *************** function _setMemory_Modify *****************
  8928 ;; Defined at:
  8929 ;;		line 1000 in file "../src/MCU_B1.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;  command         1    wreg     unsigned char 
  8932 ;; Auto vars:     Size  Location     Type
  8933 ;;  command         1    1[BANK0 ] unsigned char 
  8934 ;; Return value:  Size  Location     Type
  8935 ;;		None               void
  8936 ;; Registers used:
  8937 ;;		wreg, status,2, status,0
  8938 ;; Tracked objects:
  8939 ;;		On entry : 0/0
  8940 ;;		On exit  : 0/0
  8941 ;;		Unchanged: 0/0
  8942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8947 ;;Total ram usage:        2 bytes
  8948 ;; Hardware stack levels used:    1
  8949 ;; Hardware stack levels required when called:    5
  8950 ;; This function calls:
  8951 ;;		Nothing
  8952 ;; This function is called by:
  8953 ;;		_setLog_Code
  8954 ;;		_setRFSW_AdjControl
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function _setMemory_Modify
  8960  1CC9                     _setMemory_Modify:	
  8961                           
  8962                           ;incstack = 0
  8963                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8964                           ;setMemory_Modify@command stored from wreg
  8965  1CC9  0020               	movlb	0	; select bank0
  8966  1CCA  00A1               	movwf	setMemory_Modify@command
  8967                           
  8968                           ;MCU_B1.c: 1001: Memory.Modify = command == 1 ? 1 : 0;
  8969  1CCB  0821               	movf	setMemory_Modify@command,w
  8970  1CCC  3A01               	xorlw	1
  8971  1CCD  3000               	movlw	0
  8972  1CCE  1903               	skipnz
  8973  1CCF  3001               	movlw	1
  8974  1CD0  00A0               	movwf	??_setMemory_Modify
  8975  1CD1  0024               	movlb	4	; select bank4
  8976  1CD2  0844               	movf	(_Memory^(0+512)+36),w
  8977  1CD3  0020               	movlb	0	; select bank0
  8978  1CD4  0620               	xorwf	??_setMemory_Modify,w
  8979  1CD5  39FE               	andlw	-2
  8980  1CD6  0620               	xorwf	??_setMemory_Modify,w
  8981  1CD7  0024               	movlb	4	; select bank4
  8982  1CD8  00C4               	movwf	(_Memory^(0+512)+36)
  8983                           
  8984                           ;MCU_B1.c: 1002: Memory.Time = 0;
  8985  1CD9  01C2               	clrf	(_Memory^(0+512)+34)
  8986  1CDA  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8987  1CDB  0008               	return
  8988  1CDC                     __end_of_setMemory_Modify:	
  8989                           
  8990                           	psect	text38
  8991  1C4B                     __ptext38:	
  8992 ;; *************** function _getRF_KeyStatus *****************
  8993 ;; Defined at:
  8994 ;;		line 190 in file "../src/RF_Control_B1.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;		None
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;  key             1    1[BANK0 ] unsigned char 
  8999 ;; Return value:  Size  Location     Type
  9000 ;;                  1    wreg      unsigned char 
  9001 ;; Registers used:
  9002 ;;		wreg, status,2
  9003 ;; Tracked objects:
  9004 ;;		On entry : 0/0
  9005 ;;		On exit  : 0/0
  9006 ;;		Unchanged: 0/0
  9007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;Total ram usage:        3 bytes
  9013 ;; Hardware stack levels used:    1
  9014 ;; Hardware stack levels required when called:    5
  9015 ;; This function calls:
  9016 ;;		Nothing
  9017 ;; This function is called by:
  9018 ;;		_setRF_Main
  9019 ;; This function uses a non-reentrant model
  9020 ;;
  9021                           
  9022                           
  9023                           ;psect for function _getRF_KeyStatus
  9024  1C4B                     _getRF_KeyStatus:	
  9025                           
  9026                           ;RF_Control_B1.c: 191: char key = 0;
  9027                           
  9028                           ;incstack = 0
  9029                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  9030  1C4B  0020               	movlb	0	; select bank0
  9031  1C4C  01A1               	clrf	getRF_KeyStatus@key
  9032                           
  9033                           ;RF_Control_B1.c: 197: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  9034  1C4D  01A2               	clrf	_getRF_KeyStatus$5717
  9035  1C4E  0AA2               	incf	_getRF_KeyStatus$5717,f
  9036  1C4F  1F0C               	btfss	12,6	;volatile
  9037  1C50  1A0C               	btfsc	12,4	;volatile
  9038  1C51  2C56               	goto	l9531
  9039  1C52  1C0C               	btfss	12,0	;volatile
  9040  1C53  188D               	btfsc	13,1	;volatile
  9041  1C54  2C56               	goto	l9531
  9042  1C55  01A2               	clrf	_getRF_KeyStatus$5717
  9043  1C56                     l9531:	
  9044  1C56  0822               	movf	_getRF_KeyStatus$5717,w
  9045  1C57  00A0               	movwf	??_getRF_KeyStatus
  9046  1C58  0820               	movf	??_getRF_KeyStatus,w
  9047  1C59  00A1               	movwf	getRF_KeyStatus@key
  9048                           
  9049                           ;RF_Control_B1.c: 203: return key;
  9050  1C5A  0821               	movf	getRF_KeyStatus@key,w
  9051  1C5B  0008               	return
  9052  1C5C                     __end_of_getRF_KeyStatus:	
  9053                           
  9054                           	psect	text39
  9055  1C3A                     __ptext39:	
  9056 ;; *************** function _getBuz_GO *****************
  9057 ;; Defined at:
  9058 ;;		line 82 in file "../src/Buzzer_B1.c"
  9059 ;; Parameters:    Size  Location     Type
  9060 ;;		None
  9061 ;; Auto vars:     Size  Location     Type
  9062 ;;  i               2    4[BANK0 ] int 
  9063 ;; Return value:  Size  Location     Type
  9064 ;;                  2    0[BANK0 ] int 
  9065 ;; Registers used:
  9066 ;;		wreg, status,2, status,0
  9067 ;; Tracked objects:
  9068 ;;		On entry : 0/0
  9069 ;;		On exit  : 0/0
  9070 ;;		Unchanged: 0/0
  9071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9072 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9073 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9074 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9075 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9076 ;;Total ram usage:        6 bytes
  9077 ;; Hardware stack levels used:    1
  9078 ;; Hardware stack levels required when called:    5
  9079 ;; This function calls:
  9080 ;;		Nothing
  9081 ;; This function is called by:
  9082 ;;		_setRF_Main
  9083 ;; This function uses a non-reentrant model
  9084 ;;
  9085                           
  9086                           
  9087                           ;psect for function _getBuz_GO
  9088  1C3A                     _getBuz_GO:	
  9089                           
  9090                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9091                           
  9092                           ;incstack = 0
  9093                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9094  1C3A  0021               	movlb	1	; select bank1
  9095  1C3B  0C30               	rrf	_Buz1^(0+128),w
  9096  1C3C  3901               	andlw	1
  9097  1C3D  0020               	movlb	0	; select bank0
  9098  1C3E  00A2               	movwf	??_getBuz_GO
  9099  1C3F  01A3               	clrf	??_getBuz_GO+1
  9100  1C40  0822               	movf	??_getBuz_GO,w
  9101  1C41  00A4               	movwf	getBuz_GO@i
  9102  1C42  0823               	movf	??_getBuz_GO+1,w
  9103  1C43  00A5               	movwf	getBuz_GO@i+1
  9104                           
  9105                           ;Buzzer_B1.c: 84: return i;
  9106  1C44  0825               	movf	getBuz_GO@i+1,w
  9107  1C45  01A1               	clrf	?_getBuz_GO+1
  9108  1C46  07A1               	addwf	?_getBuz_GO+1,f
  9109  1C47  0824               	movf	getBuz_GO@i,w
  9110  1C48  01A0               	clrf	?_getBuz_GO
  9111  1C49  07A0               	addwf	?_getBuz_GO,f
  9112  1C4A  0008               	return
  9113  1C4B                     __end_of_getBuz_GO:	
  9114                           
  9115                           	psect	text40
  9116  0A49                     __ptext40:	
  9117 ;; *************** function _CC2500_TxData *****************
  9118 ;; Defined at:
  9119 ;;		line 32 in file "../src/CC2500_B1.c"
  9120 ;; Parameters:    Size  Location     Type
  9121 ;;		None
  9122 ;; Auto vars:     Size  Location     Type
  9123 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9124 ;; Return value:  Size  Location     Type
  9125 ;;		None               void
  9126 ;; Registers used:
  9127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9128 ;; Tracked objects:
  9129 ;;		On entry : 0/0
  9130 ;;		On exit  : 0/0
  9131 ;;		Unchanged: 0/0
  9132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;Total ram usage:        2 bytes
  9138 ;; Hardware stack levels used:    1
  9139 ;; Hardware stack levels required when called:    7
  9140 ;; This function calls:
  9141 ;;		_CC2500_WriteByte
  9142 ;;		_CC2500_WriteCommand
  9143 ;;		_Timeout_Counter
  9144 ;;		_set_TimeoutCleared
  9145 ;; This function is called by:
  9146 ;;		_setRF_Main
  9147 ;; This function uses a non-reentrant model
  9148 ;;
  9149                           
  9150                           
  9151                           ;psect for function _CC2500_TxData
  9152  0A49                     _CC2500_TxData:	
  9153                           
  9154                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9155                           ;CC2500_B1.c: 35: RC4 = 0;
  9156                           
  9157                           ;incstack = 0
  9158                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9159  0A49  0020               	movlb	0	; select bank0
  9160  0A4A  120E               	bcf	14,4	;volatile
  9161                           
  9162                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9163  0A4B  307F               	movlw	127
  9164  0A4C  00A4               	movwf	??_CC2500_TxData
  9165  0A4D  0824               	movf	??_CC2500_TxData,w
  9166  0A4E  0021               	movlb	1	; select bank1
  9167  0A4F  00D2               	movwf	_SPI0Buffer^(0+128)
  9168                           
  9169                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9170  0A50  2A54               	goto	l9173
  9171  0A51                     l9171:	
  9172                           
  9173                           ;CC2500_B1.c: 38: Timeout_Counter();
  9174  0A51  319D  2552  318A   	fcall	_Timeout_Counter
  9175  0A54                     l9173:	
  9176  0A54  0020               	movlb	0	; select bank0
  9177  0A55  1D0E               	btfss	14,2	;volatile
  9178  0A56  2A5A               	goto	l9177
  9179  0A57  0021               	movlb	1	; select bank1
  9180  0A58  1D2D               	btfss	(_myMain^(0+128)+13),2
  9181  0A59  2A51               	goto	l9171
  9182  0A5A                     l9177:	
  9183                           
  9184                           ;CC2500_B1.c: 39: };
  9185                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9186  0A5A  319B  231C  318A   	fcall	_set_TimeoutCleared
  9187                           
  9188                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9189  0A5D  319D  25D3  318A   	fcall	_CC2500_WriteByte
  9190                           
  9191                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9192  0A60  0021               	movlb	1	; select bank1
  9193  0A61  0854               	movf	_Tx_Length^(0+128),w
  9194  0A62  0020               	movlb	0	; select bank0
  9195  0A63  00A4               	movwf	??_CC2500_TxData
  9196  0A64  0824               	movf	??_CC2500_TxData,w
  9197  0A65  0021               	movlb	1	; select bank1
  9198  0A66  00D2               	movwf	_SPI0Buffer^(0+128)
  9199                           
  9200                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9201  0A67  319D  25D3  318A   	fcall	_CC2500_WriteByte
  9202                           
  9203                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9204  0A6A  0020               	movlb	0	; select bank0
  9205  0A6B  01A5               	clrf	CC2500_TxData@loop_e
  9206  0A6C                     l9191:	
  9207  0A6C  0021               	movlb	1	; select bank1
  9208  0A6D  0854               	movf	_Tx_Length^(0+128),w
  9209  0A6E  0020               	movlb	0	; select bank0
  9210  0A6F  0225               	subwf	CC2500_TxData@loop_e,w
  9211  0A70  1803               	btfsc	3,0
  9212  0A71  2A85               	goto	l255
  9213                           
  9214                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9215  0A72  0825               	movf	CC2500_TxData@loop_e,w
  9216  0A73  3EA0               	addlw	_RF_Data& (0+255)
  9217  0A74  0086               	movwf	6
  9218  0A75  3001               	movlw	1	; select bank3/4
  9219  0A76  0087               	movwf	7
  9220  0A77  0801               	movf	1,w
  9221  0A78  00A4               	movwf	??_CC2500_TxData
  9222  0A79  0824               	movf	??_CC2500_TxData,w
  9223  0A7A  0021               	movlb	1	; select bank1
  9224  0A7B  00D2               	movwf	_SPI0Buffer^(0+128)
  9225                           
  9226                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9227  0A7C  319D  25D3  318A   	fcall	_CC2500_WriteByte
  9228  0A7F  3001               	movlw	1
  9229  0A80  0020               	movlb	0	; select bank0
  9230  0A81  00A4               	movwf	??_CC2500_TxData
  9231  0A82  0824               	movf	??_CC2500_TxData,w
  9232  0A83  07A5               	addwf	CC2500_TxData@loop_e,f
  9233  0A84  2A6C               	goto	l9191
  9234  0A85                     l255:	
  9235                           
  9236                           ;CC2500_B1.c: 48: }
  9237                           ;CC2500_B1.c: 49: RC4 = 1;
  9238  0A85  160E               	bsf	14,4	;volatile
  9239                           
  9240                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9241  0A86  3035               	movlw	53
  9242  0A87  319E  2605  318A   	fcall	_CC2500_WriteCommand
  9243                           
  9244                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9245  0A8A  2A8E               	goto	l9197
  9246  0A8B                     l9195:	
  9247                           
  9248                           ;CC2500_B1.c: 52: Timeout_Counter();
  9249  0A8B  319D  2552  318A   	fcall	_Timeout_Counter
  9250  0A8E                     l9197:	
  9251  0A8E  0020               	movlb	0	; select bank0
  9252  0A8F  180D               	btfsc	13,0	;volatile
  9253  0A90  2A94               	goto	l9201
  9254  0A91  0021               	movlb	1	; select bank1
  9255  0A92  1D2D               	btfss	(_myMain^(0+128)+13),2
  9256  0A93  2A8B               	goto	l9195
  9257  0A94                     l9201:	
  9258                           
  9259                           ;CC2500_B1.c: 53: };
  9260                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9261  0A94  319B  231C  318A   	fcall	_set_TimeoutCleared
  9262                           
  9263                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9264  0A97  2A9B               	goto	l9205
  9265  0A98                     l9203:	
  9266                           
  9267                           ;CC2500_B1.c: 57: Timeout_Counter();
  9268  0A98  319D  2552  318A   	fcall	_Timeout_Counter
  9269  0A9B                     l9205:	
  9270  0A9B  0020               	movlb	0	; select bank0
  9271  0A9C  1C0D               	btfss	13,0	;volatile
  9272  0A9D  2AA1               	goto	l9209
  9273  0A9E  0021               	movlb	1	; select bank1
  9274  0A9F  1D2D               	btfss	(_myMain^(0+128)+13),2
  9275  0AA0  2A98               	goto	l9203
  9276  0AA1                     l9209:	
  9277                           
  9278                           ;CC2500_B1.c: 58: };
  9279                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9280  0AA1  319B  231C  318A   	fcall	_set_TimeoutCleared
  9281                           
  9282                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9283  0AA4  3036               	movlw	54
  9284  0AA5  319E  2605  318A   	fcall	_CC2500_WriteCommand
  9285                           
  9286                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9287  0AA8  303B               	movlw	59
  9288  0AA9  319E  2605  318A   	fcall	_CC2500_WriteCommand
  9289                           
  9290                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9291  0AAC  303A               	movlw	58
  9292  0AAD  319E  2605         	fcall	_CC2500_WriteCommand
  9293                           
  9294                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9295  0AAF  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9296  0AB0  0008               	return
  9297  0AB1                     __end_of_CC2500_TxData:	
  9298                           
  9299                           	psect	text41
  9300  0BFA                     __ptext41:	
  9301 ;; *************** function _CC2500_RxData *****************
  9302 ;; Defined at:
  9303 ;;		line 70 in file "../src/CC2500_B1.c"
  9304 ;; Parameters:    Size  Location     Type
  9305 ;;		None
  9306 ;; Auto vars:     Size  Location     Type
  9307 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9308 ;; Return value:  Size  Location     Type
  9309 ;;		None               void
  9310 ;; Registers used:
  9311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9312 ;; Tracked objects:
  9313 ;;		On entry : 0/0
  9314 ;;		On exit  : 0/0
  9315 ;;		Unchanged: 0/0
  9316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;Total ram usage:        2 bytes
  9322 ;; Hardware stack levels used:    1
  9323 ;; Hardware stack levels required when called:    7
  9324 ;; This function calls:
  9325 ;;		_CC2500_ReadByte
  9326 ;;		_CC2500_ReadStatus
  9327 ;;		_CC2500_WriteByte
  9328 ;;		_Timeout_Counter
  9329 ;;		_set_TimeoutCleared
  9330 ;; This function is called by:
  9331 ;;		_setRF_Main
  9332 ;; This function uses a non-reentrant model
  9333 ;;
  9334                           
  9335                           
  9336                           ;psect for function _CC2500_RxData
  9337  0BFA                     _CC2500_RxData:	
  9338                           
  9339                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9340                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9341                           
  9342                           ;incstack = 0
  9343                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9344  0BFA  0020               	movlb	0	; select bank0
  9345  0BFB  180D               	btfsc	13,0	;volatile
  9346  0BFC  2C01               	goto	l9225
  9347  0BFD  2C0A               	goto	l9231
  9348  0BFE                     l9223:	
  9349                           ;CC2500_B1.c: 76: {
  9350                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9351                           
  9352                           
  9353                           ;CC2500_B1.c: 78: Timeout_Counter();
  9354  0BFE  319D  2552  318B   	fcall	_Timeout_Counter
  9355  0C01                     l9225:	
  9356  0C01  0020               	movlb	0	; select bank0
  9357  0C02  1C0D               	btfss	13,0	;volatile
  9358  0C03  2C07               	goto	l9229
  9359  0C04  0021               	movlb	1	; select bank1
  9360  0C05  1D2D               	btfss	(_myMain^(0+128)+13),2
  9361  0C06  2BFE               	goto	l9223
  9362  0C07                     l9229:	
  9363                           
  9364                           ;CC2500_B1.c: 79: };
  9365                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9366  0C07  319B  231C  318B   	fcall	_set_TimeoutCleared
  9367  0C0A                     l9231:	
  9368                           
  9369                           ;CC2500_B1.c: 81: }
  9370                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9371  0C0A  303B               	movlw	59
  9372  0C0B  319F  27DB  318B   	fcall	_CC2500_ReadStatus
  9373                           
  9374                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9375  0C0E  0021               	movlb	1	; select bank1
  9376  0C0F  0857               	movf	_s_data^(0+128),w
  9377  0C10  1903               	btfsc	3,2
  9378  0C11  0008               	return
  9379                           
  9380                           ;CC2500_B1.c: 86: RC4 = 0;
  9381  0C12  0020               	movlb	0	; select bank0
  9382  0C13  120E               	bcf	14,4	;volatile
  9383                           
  9384                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9385  0C14  30FF               	movlw	255
  9386  0C15  00A4               	movwf	??_CC2500_RxData
  9387  0C16  0824               	movf	??_CC2500_RxData,w
  9388  0C17  0021               	movlb	1	; select bank1
  9389  0C18  00D2               	movwf	_SPI0Buffer^(0+128)
  9390                           
  9391                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9392  0C19  2C20               	goto	l9241
  9393  0C1A                     l9243:	
  9394  0C1A  0021               	movlb	1	; select bank1
  9395  0C1B  192D               	btfsc	(_myMain^(0+128)+13),2
  9396  0C1C  2C23               	goto	l280
  9397                           
  9398                           ;CC2500_B1.c: 89: Timeout_Counter();
  9399  0C1D  319D  2552  318B   	fcall	_Timeout_Counter
  9400  0C20                     l9241:	
  9401  0C20  0020               	movlb	0	; select bank0
  9402  0C21  190E               	btfsc	14,2	;volatile
  9403  0C22  2C1A               	goto	l9243
  9404  0C23                     l280:	
  9405                           
  9406                           ;CC2500_B1.c: 90: };
  9407                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9408  0C23  0021               	movlb	1	; select bank1
  9409  0C24  192D               	btfsc	(_myMain^(0+128)+13),2
  9410  0C25  2C6A               	goto	l281
  9411                           
  9412                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9413  0C26  319D  25D3  318B   	fcall	_CC2500_WriteByte
  9414                           
  9415                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9416  0C29  319E  2655  318B   	fcall	_CC2500_ReadByte
  9417                           
  9418                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9419  0C2C  0021               	movlb	1	; select bank1
  9420  0C2D  0852               	movf	_SPI0Buffer^(0+128),w
  9421  0C2E  0020               	movlb	0	; select bank0
  9422  0C2F  00A4               	movwf	??_CC2500_RxData
  9423  0C30  0824               	movf	??_CC2500_RxData,w
  9424  0C31  0021               	movlb	1	; select bank1
  9425  0C32  00D1               	movwf	_Rx_Length^(0+128)
  9426                           
  9427                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9428  0C33  0020               	movlb	0	; select bank0
  9429  0C34  01A5               	clrf	CC2500_RxData@loop_f
  9430  0C35                     l9257:	
  9431  0C35  0021               	movlb	1	; select bank1
  9432  0C36  0851               	movf	_Rx_Length^(0+128),w
  9433  0C37  0020               	movlb	0	; select bank0
  9434  0C38  0225               	subwf	CC2500_RxData@loop_f,w
  9435  0C39  1803               	btfsc	3,0
  9436  0C3A  2C4E               	goto	l9259
  9437                           
  9438                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9439  0C3B  319E  2655  318B   	fcall	_CC2500_ReadByte
  9440                           
  9441                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9442  0C3E  0021               	movlb	1	; select bank1
  9443  0C3F  0852               	movf	_SPI0Buffer^(0+128),w
  9444  0C40  0020               	movlb	0	; select bank0
  9445  0C41  00A4               	movwf	??_CC2500_RxData
  9446  0C42  0825               	movf	CC2500_RxData@loop_f,w
  9447  0C43  3EA0               	addlw	_RF_Data& (0+255)
  9448  0C44  0086               	movwf	6
  9449  0C45  3001               	movlw	1	; select bank3/4
  9450  0C46  0087               	movwf	7
  9451  0C47  0824               	movf	??_CC2500_RxData,w
  9452  0C48  0081               	movwf	1
  9453  0C49  3001               	movlw	1
  9454  0C4A  00A4               	movwf	??_CC2500_RxData
  9455  0C4B  0824               	movf	??_CC2500_RxData,w
  9456  0C4C  07A5               	addwf	CC2500_RxData@loop_f,f
  9457  0C4D  2C35               	goto	l9257
  9458  0C4E                     l9259:	
  9459                           
  9460                           ;CC2500_B1.c: 99: }
  9461                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9462  0C4E  319E  2655  318B   	fcall	_CC2500_ReadByte
  9463                           
  9464                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9465  0C51  0021               	movlb	1	; select bank1
  9466  0C52  0852               	movf	_SPI0Buffer^(0+128),w
  9467  0C53  0020               	movlb	0	; select bank0
  9468  0C54  00A4               	movwf	??_CC2500_RxData
  9469  0C55  0824               	movf	??_CC2500_RxData,w
  9470  0C56  0021               	movlb	1	; select bank1
  9471  0C57  00D0               	movwf	_RSSI^(0+128)
  9472                           
  9473                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9474  0C58  319E  2655  318B   	fcall	_CC2500_ReadByte
  9475                           
  9476                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9477  0C5B  0021               	movlb	1	; select bank1
  9478  0C5C  0852               	movf	_SPI0Buffer^(0+128),w
  9479  0C5D  0020               	movlb	0	; select bank0
  9480  0C5E  00A4               	movwf	??_CC2500_RxData
  9481  0C5F  0824               	movf	??_CC2500_RxData,w
  9482  0C60  0021               	movlb	1	; select bank1
  9483  0C61  00CB               	movwf	_CRC^(0+128)
  9484                           
  9485                           ;CC2500_B1.c: 104: RC4 = 1;
  9486  0C62  0020               	movlb	0	; select bank0
  9487  0C63  160E               	bsf	14,4	;volatile
  9488                           
  9489                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9490  0C64  0021               	movlb	1	; select bank1
  9491  0C65  1BCB               	btfsc	_CRC^(0+128),7
  9492                           
  9493                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9494  0C66  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9495                           
  9496                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9497  0C67  11BC               	bcf	_RF1^(0+128),3
  9498                           
  9499                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9500  0C68  14BC               	bsf	_RF1^(0+128),1
  9501                           
  9502                           ;CC2500_B1.c: 110: } else {
  9503  0C69  2C6C               	goto	l9271
  9504  0C6A                     l281:	
  9505                           
  9506                           ;CC2500_B1.c: 111: RC4 = 1;
  9507  0C6A  0020               	movlb	0	; select bank0
  9508  0C6B  160E               	bsf	14,4	;volatile
  9509  0C6C                     l9271:	
  9510                           
  9511                           ;CC2500_B1.c: 112: }
  9512                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9513  0C6C  319B  231C         	fcall	_set_TimeoutCleared
  9514  0C6E  0021               	movlb	1	; select bank1
  9515  0C6F  0008               	return
  9516  0C70                     __end_of_CC2500_RxData:	
  9517                           
  9518                           	psect	text42
  9519  1FDB                     __ptext42:	
  9520 ;; *************** function _CC2500_ReadStatus *****************
  9521 ;; Defined at:
  9522 ;;		line 304 in file "../src/CC2500_B1.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;  status_addr     1    wreg     unsigned char 
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9527 ;; Return value:  Size  Location     Type
  9528 ;;		None               void
  9529 ;; Registers used:
  9530 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9538 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9539 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9540 ;;Total ram usage:        2 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; Hardware stack levels required when called:    6
  9543 ;; This function calls:
  9544 ;;		_CC2500_ReadByte
  9545 ;;		_CC2500_WriteByte
  9546 ;;		_Timeout_Counter
  9547 ;;		_set_TimeoutCleared
  9548 ;; This function is called by:
  9549 ;;		_CC2500_RxData
  9550 ;;		_setRF_Main
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           
  9555                           ;psect for function _CC2500_ReadStatus
  9556  1FDB                     _CC2500_ReadStatus:	
  9557                           
  9558                           ;incstack = 0
  9559                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9560                           ;CC2500_ReadStatus@status_addr stored from wreg
  9561  1FDB  0020               	movlb	0	; select bank0
  9562  1FDC  00A3               	movwf	CC2500_ReadStatus@status_addr
  9563                           
  9564                           ;CC2500_B1.c: 305: RC4 = 0;
  9565  1FDD  120E               	bcf	14,4	;volatile
  9566                           
  9567                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9568  1FDE  0823               	movf	CC2500_ReadStatus@status_addr,w
  9569  1FDF  3EC0               	addlw	192
  9570  1FE0  00A2               	movwf	??_CC2500_ReadStatus
  9571  1FE1  0822               	movf	??_CC2500_ReadStatus,w
  9572  1FE2  0021               	movlb	1	; select bank1
  9573  1FE3  00D2               	movwf	_SPI0Buffer^(0+128)
  9574                           
  9575                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9576  1FE4  2FE8               	goto	l9015
  9577  1FE5                     l9013:	
  9578                           
  9579                           ;CC2500_B1.c: 309: Timeout_Counter();
  9580  1FE5  319D  2552  319F   	fcall	_Timeout_Counter
  9581  1FE8                     l9015:	
  9582  1FE8  0020               	movlb	0	; select bank0
  9583  1FE9  1D0E               	btfss	14,2	;volatile
  9584  1FEA  2FEE               	goto	l9019
  9585  1FEB  0021               	movlb	1	; select bank1
  9586  1FEC  1D2D               	btfss	(_myMain^(0+128)+13),2
  9587  1FED  2FE5               	goto	l9013
  9588  1FEE                     l9019:	
  9589                           
  9590                           ;CC2500_B1.c: 310: };
  9591                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9592  1FEE  319B  231C  319F   	fcall	_set_TimeoutCleared
  9593                           
  9594                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9595  1FF1  319D  25D3  319F   	fcall	_CC2500_WriteByte
  9596                           
  9597                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9598  1FF4  319E  2655         	fcall	_CC2500_ReadByte
  9599                           
  9600                           ;CC2500_B1.c: 315: RC4 = 1;
  9601  1FF6  0020               	movlb	0	; select bank0
  9602  1FF7  160E               	bsf	14,4	;volatile
  9603                           
  9604                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9605  1FF8  0021               	movlb	1	; select bank1
  9606  1FF9  0852               	movf	_SPI0Buffer^(0+128),w
  9607  1FFA  0020               	movlb	0	; select bank0
  9608  1FFB  00A2               	movwf	??_CC2500_ReadStatus
  9609  1FFC  0822               	movf	??_CC2500_ReadStatus,w
  9610  1FFD  0021               	movlb	1	; select bank1
  9611  1FFE  00D7               	movwf	_s_data^(0+128)
  9612  1FFF  0008               	return
  9613  2000                     __end_of_CC2500_ReadStatus:	
  9614                           
  9615                           	psect	text43
  9616  1E55                     __ptext43:	
  9617 ;; *************** function _CC2500_ReadByte *****************
  9618 ;; Defined at:
  9619 ;;		line 238 in file "../src/CC2500_B1.c"
  9620 ;; Parameters:    Size  Location     Type
  9621 ;;		None
  9622 ;; Auto vars:     Size  Location     Type
  9623 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9624 ;; Return value:  Size  Location     Type
  9625 ;;		None               void
  9626 ;; Registers used:
  9627 ;;		wreg, status,2, status,0
  9628 ;; Tracked objects:
  9629 ;;		On entry : 0/0
  9630 ;;		On exit  : 0/0
  9631 ;;		Unchanged: 0/0
  9632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;Total ram usage:        2 bytes
  9638 ;; Hardware stack levels used:    1
  9639 ;; Hardware stack levels required when called:    5
  9640 ;; This function calls:
  9641 ;;		Nothing
  9642 ;; This function is called by:
  9643 ;;		_CC2500_RxData
  9644 ;;		_CC2500_ReadStatus
  9645 ;;		_CC2500_ReadREG
  9646 ;; This function uses a non-reentrant model
  9647 ;;
  9648                           
  9649                           
  9650                           ;psect for function _CC2500_ReadByte
  9651  1E55                     _CC2500_ReadByte:	
  9652                           
  9653                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9654                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9655                           
  9656                           ;incstack = 0
  9657                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9658  1E55  0020               	movlb	0	; select bank0
  9659  1E56  01A1               	clrf	CC2500_ReadByte@loop_b
  9660  1E57                     L5:	
  9661  1E57  3008               	movlw	8
  9662  1E58  0221               	subwf	CC2500_ReadByte@loop_b,w
  9663  1E59  1803               	btfsc	3,0
  9664  1E5A  0008               	return
  9665                           
  9666                           ;CC2500_B1.c: 241: RC1 = 1;
  9667  1E5B  148E               	bsf	14,1	;volatile
  9668                           
  9669                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9670  1E5C  1003               	clrc
  9671  1E5D  0021               	movlb	1	; select bank1
  9672  1E5E  0DD2               	rlf	_SPI0Buffer^(0+128),f
  9673                           
  9674                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9675  1E5F  0020               	movlb	0	; select bank0
  9676  1E60  1D0E               	btfss	14,2	;volatile
  9677  1E61  2E65               	goto	l8951
  9678                           
  9679                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9680  1E62  0021               	movlb	1	; select bank1
  9681  1E63  1452               	bsf	_SPI0Buffer^(0+128),0
  9682  1E64  2E6B               	goto	l8953
  9683  1E65                     l8951:	
  9684                           
  9685                           ;CC2500_B1.c: 245: else
  9686                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9687  1E65  30FE               	movlw	254
  9688  1E66  0020               	movlb	0	; select bank0
  9689  1E67  00A0               	movwf	??_CC2500_ReadByte
  9690  1E68  0820               	movf	??_CC2500_ReadByte,w
  9691  1E69  0021               	movlb	1	; select bank1
  9692  1E6A  05D2               	andwf	_SPI0Buffer^(0+128),f
  9693  1E6B                     l8953:	
  9694                           
  9695                           ;CC2500_B1.c: 247: RC1 = 0;
  9696  1E6B  0020               	movlb	0	; select bank0
  9697  1E6C  108E               	bcf	14,1	;volatile
  9698  1E6D  3001               	movlw	1
  9699  1E6E  00A0               	movwf	??_CC2500_ReadByte
  9700  1E6F  0820               	movf	??_CC2500_ReadByte,w
  9701  1E70  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9702  1E71  2E57               	goto	L5
  9703  1E72                     __end_of_CC2500_ReadByte:	
  9704                           
  9705                           	psect	text44
  9706  1B04                     __ptext44:	
  9707 ;; *************** function _RF_Initialization *****************
  9708 ;; Defined at:
  9709 ;;		line 9 in file "../src/RF_Control_B1.c"
  9710 ;; Parameters:    Size  Location     Type
  9711 ;;		None
  9712 ;; Auto vars:     Size  Location     Type
  9713 ;;		None
  9714 ;; Return value:  Size  Location     Type
  9715 ;;		None               void
  9716 ;; Registers used:
  9717 ;;		wreg, status,2, status,0, pclath, cstack
  9718 ;; Tracked objects:
  9719 ;;		On entry : 0/0
  9720 ;;		On exit  : 0/0
  9721 ;;		Unchanged: 0/0
  9722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;Total ram usage:        0 bytes
  9728 ;; Hardware stack levels used:    1
  9729 ;; Hardware stack levels required when called:    6
  9730 ;; This function calls:
  9731 ;;		_setRF_Initialization
  9732 ;; This function is called by:
  9733 ;;		_main
  9734 ;; This function uses a non-reentrant model
  9735 ;;
  9736                           
  9737                           
  9738                           ;psect for function _RF_Initialization
  9739  1B04                     _RF_Initialization:	
  9740                           
  9741                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9742                           
  9743                           ;incstack = 0
  9744                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9745  1B04  319B  2375         	fcall	_setRF_Initialization
  9746  1B06  0008               	return
  9747  1B07                     __end_of_RF_Initialization:	
  9748                           
  9749                           	psect	text45
  9750  1B75                     __ptext45:	
  9751 ;; *************** function _setRF_Initialization *****************
  9752 ;; Defined at:
  9753 ;;		line 43 in file "../src/RF_Control_B1.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;		None
  9756 ;; Auto vars:     Size  Location     Type
  9757 ;;		None
  9758 ;; Return value:  Size  Location     Type
  9759 ;;		None               void
  9760 ;; Registers used:
  9761 ;;		wreg
  9762 ;; Tracked objects:
  9763 ;;		On entry : 0/0
  9764 ;;		On exit  : 0/0
  9765 ;;		Unchanged: 0/0
  9766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9769 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;Total ram usage:        1 bytes
  9772 ;; Hardware stack levels used:    1
  9773 ;; Hardware stack levels required when called:    5
  9774 ;; This function calls:
  9775 ;;		Nothing
  9776 ;; This function is called by:
  9777 ;;		_RF_Initialization
  9778 ;; This function uses a non-reentrant model
  9779 ;;
  9780                           
  9781                           
  9782                           ;psect for function _setRF_Initialization
  9783  1B75                     _setRF_Initialization:	
  9784                           
  9785                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9786                           
  9787                           ;incstack = 0
  9788                           ; Regs used in _setRF_Initialization: [wreg]
  9789  1B75  3015               	movlw	21
  9790  1B76  0020               	movlb	0	; select bank0
  9791  1B77  00A0               	movwf	??_setRF_Initialization
  9792  1B78  0820               	movf	??_setRF_Initialization,w
  9793  1B79  0021               	movlb	1	; select bank1
  9794  1B7A  00D4               	movwf	_Tx_Length^(0+128)
  9795                           
  9796                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9797  1B7B  300A               	movlw	10
  9798  1B7C  00C3               	movwf	(_RF1^(0+128)+7)
  9799  1B7D  3000               	movlw	0
  9800  1B7E  00C4               	movwf	(_RF1^(0+128)+8)
  9801  1B7F  0008               	return
  9802  1B80                     __end_of_setRF_Initialization:	
  9803                           
  9804                           	psect	text46
  9805  1C92                     __ptext46:	
  9806 ;; *************** function _Mcu_Initialization *****************
  9807 ;; Defined at:
  9808 ;;		line 30 in file "../src/MCU_B1.c"
  9809 ;; Parameters:    Size  Location     Type
  9810 ;;		None
  9811 ;; Auto vars:     Size  Location     Type
  9812 ;;		None
  9813 ;; Return value:  Size  Location     Type
  9814 ;;		None               void
  9815 ;; Registers used:
  9816 ;;		wreg, status,2, status,0, pclath, cstack
  9817 ;; Tracked objects:
  9818 ;;		On entry : 0/0
  9819 ;;		On exit  : 0/0
  9820 ;;		Unchanged: 0/0
  9821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;Total ram usage:        0 bytes
  9827 ;; Hardware stack levels used:    1
  9828 ;; Hardware stack levels required when called:    6
  9829 ;; This function calls:
  9830 ;;		_ADC_Set
  9831 ;;		_Fosc_Set
  9832 ;;		_IOC_Set
  9833 ;;		_IO_Set
  9834 ;;		_TMR1_Set
  9835 ;;		_WDT_Set
  9836 ;; This function is called by:
  9837 ;;		_main
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841                           
  9842                           ;psect for function _Mcu_Initialization
  9843  1C92                     _Mcu_Initialization:	
  9844                           
  9845                           ;MCU_B1.c: 32: Fosc_Set();
  9846                           
  9847                           ;incstack = 0
  9848                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9849  1C92  3188  2000  319C   	fcall	_Fosc_Set
  9850                           
  9851                           ;MCU_B1.c: 34: IO_Set();
  9852  1C95  319D  25EC  319C   	fcall	_IO_Set
  9853                           
  9854                           ;MCU_B1.c: 36: ;;
  9855                           ;MCU_B1.c: 38: TMR1_Set();
  9856  1C98  319B  23C8  319C   	fcall	_TMR1_Set
  9857                           
  9858                           ;MCU_B1.c: 40: ADC_Set();
  9859  1C9B  319B  2332  319C   	fcall	_ADC_Set
  9860                           
  9861                           ;MCU_B1.c: 42: ;;
  9862                           ;MCU_B1.c: 44: ;;
  9863                           ;MCU_B1.c: 46: IOC_Set();
  9864  1C9E  319B  23BC  319C   	fcall	_IOC_Set
  9865                           
  9866                           ;MCU_B1.c: 48: ;;
  9867                           ;MCU_B1.c: 50: ;;
  9868                           ;MCU_B1.c: 52: WDT_Set();
  9869  1CA1  319B  23D4         	fcall	_WDT_Set
  9870  1CA3  0008               	return
  9871  1CA4                     __end_of_Mcu_Initialization:	
  9872                           
  9873                           	psect	text47
  9874  1BD4                     __ptext47:	
  9875 ;; *************** function _WDT_Set *****************
  9876 ;; Defined at:
  9877 ;;		line 1019 in file "../src/MCU_B1.c"
  9878 ;; Parameters:    Size  Location     Type
  9879 ;;		None
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;		None
  9882 ;; Return value:  Size  Location     Type
  9883 ;;		None               void
  9884 ;; Registers used:
  9885 ;;		wreg
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;Total ram usage:        1 bytes
  9896 ;; Hardware stack levels used:    1
  9897 ;; Hardware stack levels required when called:    5
  9898 ;; This function calls:
  9899 ;;		Nothing
  9900 ;; This function is called by:
  9901 ;;		_Mcu_Initialization
  9902 ;; This function uses a non-reentrant model
  9903 ;;
  9904                           
  9905                           
  9906                           ;psect for function _WDT_Set
  9907  1BD4                     _WDT_Set:	
  9908                           
  9909                           ;MCU_B1.c: 1026: WDTCON = 0b00010111;;
  9910                           
  9911                           ;incstack = 0
  9912                           ; Regs used in _WDT_Set: [wreg]
  9913  1BD4  3017               	movlw	23
  9914  1BD5  0021               	movlb	1	; select bank1
  9915  1BD6  0097               	movwf	23	;volatile
  9916                           
  9917                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  9918  1BD7  0022               	movlb	2	; select bank2
  9919  1BD8  1425               	bsf	_WDT^(0+256),0
  9920                           
  9921                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  9922  1BD9  300A               	movlw	10
  9923  1BDA  0020               	movlb	0	; select bank0
  9924  1BDB  00A0               	movwf	??_WDT_Set
  9925  1BDC  0820               	movf	??_WDT_Set,w
  9926  1BDD  0022               	movlb	2	; select bank2
  9927  1BDE  00A6               	movwf	(_WDT^(0+256)+1)
  9928  1BDF  0008               	return
  9929  1BE0                     __end_of_WDT_Set:	
  9930                           
  9931                           	psect	text48
  9932  1BC8                     __ptext48:	
  9933 ;; *************** function _TMR1_Set *****************
  9934 ;; Defined at:
  9935 ;;		line 199 in file "../src/MCU_B1.c"
  9936 ;; Parameters:    Size  Location     Type
  9937 ;;		None
  9938 ;; Auto vars:     Size  Location     Type
  9939 ;;		None
  9940 ;; Return value:  Size  Location     Type
  9941 ;;		None               void
  9942 ;; Registers used:
  9943 ;;		wreg
  9944 ;; Tracked objects:
  9945 ;;		On entry : 0/0
  9946 ;;		On exit  : 0/0
  9947 ;;		Unchanged: 0/0
  9948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;Total ram usage:        0 bytes
  9954 ;; Hardware stack levels used:    1
  9955 ;; Hardware stack levels required when called:    5
  9956 ;; This function calls:
  9957 ;;		Nothing
  9958 ;; This function is called by:
  9959 ;;		_Mcu_Initialization
  9960 ;; This function uses a non-reentrant model
  9961 ;;
  9962                           
  9963                           
  9964                           ;psect for function _TMR1_Set
  9965  1BC8                     _TMR1_Set:	
  9966                           
  9967                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9968                           
  9969                           ;incstack = 0
  9970                           ; Regs used in _TMR1_Set: [wreg]
  9971  1BC8  3041               	movlw	65
  9972  1BC9  0020               	movlb	0	; select bank0
  9973  1BCA  0098               	movwf	24	;volatile
  9974                           
  9975                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9976  1BCB  30FA               	movlw	250
  9977  1BCC  0097               	movwf	23	;volatile
  9978                           
  9979                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9980  1BCD  3038               	movlw	56
  9981  1BCE  0096               	movwf	22	;volatile
  9982                           
  9983                           ;MCU_B1.c: 203: TMR1IE = 1;
  9984  1BCF  0021               	movlb	1	; select bank1
  9985  1BD0  1411               	bsf	17,0	;volatile
  9986                           
  9987                           ;MCU_B1.c: 204: PEIE = 1;
  9988  1BD1  170B               	bsf	11,6	;volatile
  9989                           
  9990                           ;MCU_B1.c: 205: GIE = 1;
  9991  1BD2  178B               	bsf	11,7	;volatile
  9992  1BD3  0008               	return
  9993  1BD4                     __end_of_TMR1_Set:	
  9994                           
  9995                           	psect	text49
  9996  1DEC                     __ptext49:	
  9997 ;; *************** function _IO_Set *****************
  9998 ;; Defined at:
  9999 ;;		line 60 in file "../src/MCU_B1.c"
 10000 ;; Parameters:    Size  Location     Type
 10001 ;;		None
 10002 ;; Auto vars:     Size  Location     Type
 10003 ;;		None
 10004 ;; Return value:  Size  Location     Type
 10005 ;;		None               void
 10006 ;; Registers used:
 10007 ;;		wreg, status,2
 10008 ;; Tracked objects:
 10009 ;;		On entry : 0/0
 10010 ;;		On exit  : 0/0
 10011 ;;		Unchanged: 0/0
 10012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;Total ram usage:        0 bytes
 10018 ;; Hardware stack levels used:    1
 10019 ;; Hardware stack levels required when called:    5
 10020 ;; This function calls:
 10021 ;;		Nothing
 10022 ;; This function is called by:
 10023 ;;		_Mcu_Initialization
 10024 ;; This function uses a non-reentrant model
 10025 ;;
 10026                           
 10027                           
 10028                           ;psect for function _IO_Set
 10029  1DEC                     _IO_Set:	
 10030                           
 10031                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10032                           
 10033                           ;incstack = 0
 10034                           ; Regs used in _IO_Set: [wreg+status,2]
 10035  1DEC  3077               	movlw	119
 10036  1DED  0021               	movlb	1	; select bank1
 10037  1DEE  008C               	movwf	12	;volatile
 10038                           
 10039                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10040  1DEF  3007               	movlw	7
 10041  1DF0  008D               	movwf	13	;volatile
 10042                           
 10043                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10044  1DF1  300C               	movlw	12
 10045  1DF2  008E               	movwf	14	;volatile
 10046                           
 10047                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10048  1DF3  0022               	movlb	2	; select bank2
 10049  1DF4  018C               	clrf	12	;volatile
 10050                           
 10051                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10052  1DF5  3002               	movlw	2
 10053  1DF6  008D               	movwf	13	;volatile
 10054                           
 10055                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10056  1DF7  018E               	clrf	14	;volatile
 10057                           
 10058                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10059  1DF8  3022               	movlw	34
 10060  1DF9  0023               	movlb	3	; select bank3
 10061  1DFA  008C               	movwf	12	;volatile
 10062                           
 10063                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10064  1DFB  018D               	clrf	13	;volatile
 10065                           
 10066                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10067  1DFC  018E               	clrf	14	;volatile
 10068                           
 10069                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10070  1DFD  3077               	movlw	119
 10071  1DFE  0020               	movlb	0	; select bank0
 10072  1DFF  008C               	movwf	12	;volatile
 10073                           
 10074                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10075  1E00  3007               	movlw	7
 10076  1E01  008D               	movwf	13	;volatile
 10077                           
 10078                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10079  1E02  300C               	movlw	12
 10080  1E03  008E               	movwf	14	;volatile
 10081  1E04  0008               	return
 10082  1E05                     __end_of_IO_Set:	
 10083                           
 10084                           	psect	text50
 10085  1BBC                     __ptext50:	
 10086 ;; *************** function _IOC_Set *****************
 10087 ;; Defined at:
 10088 ;;		line 367 in file "../src/MCU_B1.c"
 10089 ;; Parameters:    Size  Location     Type
 10090 ;;		None
 10091 ;; Auto vars:     Size  Location     Type
 10092 ;;		None
 10093 ;; Return value:  Size  Location     Type
 10094 ;;		None               void
 10095 ;; Registers used:
 10096 ;;		wreg, status,2
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 0/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;Total ram usage:        0 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; Hardware stack levels required when called:    5
 10109 ;; This function calls:
 10110 ;;		Nothing
 10111 ;; This function is called by:
 10112 ;;		_Mcu_Initialization
 10113 ;; This function uses a non-reentrant model
 10114 ;;
 10115                           
 10116                           
 10117                           ;psect for function _IOC_Set
 10118  1BBC                     _IOC_Set:	
 10119                           
 10120                           ;MCU_B1.c: 368: WPUB2 = 0;
 10121                           
 10122                           ;incstack = 0
 10123                           ; Regs used in _IOC_Set: [wreg+status,2]
 10124  1BBC  0024               	movlb	4	; select bank4
 10125  1BBD  110D               	bcf	13,2	;volatile
 10126                           
 10127                           ;MCU_B1.c: 376: IOCBP = 0b00000000;
 10128  1BBE  0027               	movlb	7	; select bank7
 10129  1BBF  0194               	clrf	20	;volatile
 10130                           
 10131                           ;MCU_B1.c: 377: IOCBN = 0b00000100;
 10132  1BC0  3004               	movlw	4
 10133  1BC1  0095               	movwf	21	;volatile
 10134                           
 10135                           ;MCU_B1.c: 393: IOCBF = 0b00000000;
 10136  1BC2  0196               	clrf	22	;volatile
 10137                           
 10138                           ;MCU_B1.c: 395: IOCIE = 1;
 10139  1BC3  158B               	bsf	11,3	;volatile
 10140                           
 10141                           ;MCU_B1.c: 396: IOCIF = 0;
 10142  1BC4  100B               	bcf	11,0	;volatile
 10143                           
 10144                           ;MCU_B1.c: 397: PEIE = 1;
 10145  1BC5  170B               	bsf	11,6	;volatile
 10146                           
 10147                           ;MCU_B1.c: 398: GIE = 1;
 10148  1BC6  178B               	bsf	11,7	;volatile
 10149  1BC7  0008               	return
 10150  1BC8                     __end_of_IOC_Set:	
 10151                           
 10152                           	psect	text51
 10153  0800                     __ptext51:	
 10154 ;; *************** function _Fosc_Set *****************
 10155 ;; Defined at:
 10156 ;;		line 56 in file "../src/MCU_B1.c"
 10157 ;; Parameters:    Size  Location     Type
 10158 ;;		None
 10159 ;; Auto vars:     Size  Location     Type
 10160 ;;		None
 10161 ;; Return value:  Size  Location     Type
 10162 ;;		None               void
 10163 ;; Registers used:
 10164 ;;		wreg
 10165 ;; Tracked objects:
 10166 ;;		On entry : 0/0
 10167 ;;		On exit  : 0/0
 10168 ;;		Unchanged: 0/0
 10169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10174 ;;Total ram usage:        0 bytes
 10175 ;; Hardware stack levels used:    1
 10176 ;; Hardware stack levels required when called:    5
 10177 ;; This function calls:
 10178 ;;		Nothing
 10179 ;; This function is called by:
 10180 ;;		_Mcu_Initialization
 10181 ;; This function uses a non-reentrant model
 10182 ;;
 10183                           
 10184                           
 10185                           ;psect for function _Fosc_Set
 10186  0800                     _Fosc_Set:	
 10187                           
 10188                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10189                           
 10190                           ;incstack = 0
 10191                           ; Regs used in _Fosc_Set: [wreg]
 10192  0800  3078               	movlw	120
 10193  0801  0021               	movlb	1	; select bank1
 10194  0802  0099               	movwf	25	;volatile
 10195  0803  0008               	return
 10196  0804                     __end_of_Fosc_Set:	
 10197                           
 10198                           	psect	text52
 10199  1B32                     __ptext52:	
 10200 ;; *************** function _ADC_Set *****************
 10201 ;; Defined at:
 10202 ;;		line 420 in file "../src/MCU_B1.c"
 10203 ;; Parameters:    Size  Location     Type
 10204 ;;		None
 10205 ;; Auto vars:     Size  Location     Type
 10206 ;;		None
 10207 ;; Return value:  Size  Location     Type
 10208 ;;		None               void
 10209 ;; Registers used:
 10210 ;;		wreg
 10211 ;; Tracked objects:
 10212 ;;		On entry : 0/0
 10213 ;;		On exit  : 0/0
 10214 ;;		Unchanged: 0/0
 10215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;Total ram usage:        0 bytes
 10221 ;; Hardware stack levels used:    1
 10222 ;; Hardware stack levels required when called:    5
 10223 ;; This function calls:
 10224 ;;		Nothing
 10225 ;; This function is called by:
 10226 ;;		_Mcu_Initialization
 10227 ;; This function uses a non-reentrant model
 10228 ;;
 10229                           
 10230                           
 10231                           ;psect for function _ADC_Set
 10232  1B32                     _ADC_Set:	
 10233                           
 10234                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10235                           
 10236                           ;incstack = 0
 10237                           ; Regs used in _ADC_Set: [wreg]
 10238  1B32  30F3               	movlw	243
 10239  1B33  0021               	movlb	1	; select bank1
 10240  1B34  009E               	movwf	30	;volatile
 10241                           
 10242                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10243  1B35  30C1               	movlw	193
 10244  1B36  0022               	movlb	2	; select bank2
 10245  1B37  0097               	movwf	23	;volatile
 10246  1B38  0008               	return
 10247  1B39                     __end_of_ADC_Set:	
 10248                           
 10249                           	psect	text53
 10250  036A                     __ptext53:	
 10251 ;; *************** function _Load_Main *****************
 10252 ;; Defined at:
 10253 ;;		line 39 in file "../src/OverLoad_B1.c"
 10254 ;; Parameters:    Size  Location     Type
 10255 ;;		None
 10256 ;; Auto vars:     Size  Location     Type
 10257 ;;  i               1   15[BANK0 ] unsigned char 
 10258 ;;  error           1   14[BANK0 ] unsigned char 
 10259 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10260 ;;  j               1   11[BANK0 ] unsigned char 
 10261 ;; Return value:  Size  Location     Type
 10262 ;;		None               void
 10263 ;; Registers used:
 10264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10265 ;; Tracked objects:
 10266 ;;		On entry : 0/0
 10267 ;;		On exit  : 0/0
 10268 ;;		Unchanged: 0/0
 10269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;Total ram usage:        7 bytes
 10275 ;; Hardware stack levels used:    1
 10276 ;; Hardware stack levels required when called:    8
 10277 ;; This function calls:
 10278 ;;		_getAll_DimmerLights_AdjGO
 10279 ;;		_getMain_All_Error_Status
 10280 ;;		_getMain_LightsStatus
 10281 ;;		_getMain_Lights_Count
 10282 ;;		_getMain_LoadOK
 10283 ;;		_setLoad_AH_AL_Restore
 10284 ;; This function is called by:
 10285 ;;		_main
 10286 ;; This function uses a non-reentrant model
 10287 ;;
 10288                           
 10289                           
 10290                           ;psect for function _Load_Main
 10291  036A                     _Load_Main:	
 10292                           
 10293                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10294                           
 10295                           ;incstack = 0
 10296                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10297  036A  0020               	movlb	0	; select bank0
 10298  036B  01AF               	clrf	Load_Main@i
 10299  036C  01AB               	clrf	Load_Main@j
 10300  036D  3000               	movlw	0
 10301  036E  3191  21B3  3183   	fcall	_getMain_All_Error_Status
 10302  0371  0020               	movlb	0	; select bank0
 10303  0372  00A9               	movwf	??_Load_Main
 10304  0373  0829               	movf	??_Load_Main,w
 10305  0374  00AE               	movwf	Load_Main@error
 10306  0375  01AC               	clrf	Load_Main@adjgo
 10307                           
 10308                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10309  0376  0022               	movlb	2	; select bank2
 10310  0377  1C27               	btfss	_Load^(0+256),0
 10311  0378  2CA8               	goto	l1726
 10312                           
 10313                           ;OverLoad_B1.c: 44: adjgo = getAll_DimmerLights_AdjGO();
 10314  0379  319C  2429  3183   	fcall	_getAll_DimmerLights_AdjGO
 10315  037C  0020               	movlb	0	; select bank0
 10316  037D  00A9               	movwf	??_Load_Main
 10317  037E  0829               	movf	??_Load_Main,w
 10318  037F  00AC               	movwf	Load_Main@adjgo
 10319                           
 10320                           ;OverLoad_B1.c: 46: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10321  0380  01AD               	clrf	_Load_Main$4316
 10322  0381  3191  2158  3183   	fcall	_getMain_LightsStatus
 10323  0384  3A01               	xorlw	1
 10324  0385  1D03               	skipz
 10325  0386  2B90               	goto	l10463
 10326  0387  0020               	movlb	0	; select bank0
 10327  0388  08AE               	movf	Load_Main@error,f
 10328  0389  1D03               	skipz
 10329  038A  2B90               	goto	l10463
 10330  038B  08AC               	movf	Load_Main@adjgo,f
 10331  038C  1D03               	skipz
 10332  038D  2B90               	goto	l10463
 10333  038E  01AD               	clrf	_Load_Main$4316
 10334  038F  0AAD               	incf	_Load_Main$4316,f
 10335  0390                     l10463:	
 10336  0390  0020               	movlb	0	; select bank0
 10337  0391  082D               	movf	_Load_Main$4316,w
 10338  0392  0022               	movlb	2	; select bank2
 10339  0393  10A7               	bcf	_Load^(0+256),1
 10340  0394  1D03               	skipz
 10341  0395  14A7               	bsf	_Load^(0+256),1
 10342                           
 10343                           ;OverLoad_B1.c: 47: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10344  0396  319B  23ED  3183   	fcall	_getMain_LoadOK
 10345  0399  3A01               	xorlw	1
 10346  039A  1D03               	skipz
 10347  039B  2BA1               	goto	l1729
 10348  039C  0022               	movlb	2	; select bank2
 10349  039D  19A7               	btfsc	_Load^(0+256),3
 10350  039E  2BA1               	goto	l1729
 10351                           
 10352                           ;OverLoad_B1.c: 48: Load.Run = 1;
 10353  039F  15A7               	bsf	_Load^(0+256),3
 10354                           
 10355                           ;OverLoad_B1.c: 49: Load.OK = 0;
 10356  03A0  13A7               	bcf	_Load^(0+256),7
 10357  03A1                     l1729:	
 10358                           
 10359                           ;OverLoad_B1.c: 50: }
 10360                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10361  03A1  0022               	movlb	2	; select bank2
 10362  03A2  1CA7               	btfss	_Load^(0+256),1
 10363  03A3  2C78               	goto	l1730
 10364                           
 10365                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10366  03A4  1527               	bsf	_Load^(0+256),2
 10367                           
 10368                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10369  03A5  1E27               	btfss	_Load^(0+256),4
 10370  03A6  2C76               	goto	l1731
 10371                           
 10372                           ;OverLoad_B1.c: 58: Load.Time++;
 10373  03A7  3001               	movlw	1
 10374  03A8  07A8               	addwf	(_Load^(0+256)+1),f
 10375  03A9  3000               	movlw	0
 10376  03AA  3DA9               	addwfc	((_Load+1)^(0+256)+1),f
 10377                           
 10378                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10379  03AB  3000               	movlw	0
 10380  03AC  0229               	subwf	((_Load+1)^(0+256)+1),w
 10381  03AD  3005               	movlw	5
 10382  03AE  1903               	skipnz
 10383  03AF  0228               	subwf	(_Load^(0+256)+1),w
 10384  03B0  1C03               	skipc
 10385  03B1  0008               	return
 10386                           
 10387                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10388  03B2  01A8               	clrf	(_Load^(0+256)+1)
 10389  03B3  01A9               	clrf	((_Load+1)^(0+256)+1)
 10390                           
 10391                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10392  03B4  1227               	bcf	_Load^(0+256),4
 10393                           
 10394                           ;OverLoad_B1.c: 63: for (i = 0; i < 4; i++) {
 10395  03B5  0020               	movlb	0	; select bank0
 10396  03B6  01AF               	clrf	Load_Main@i
 10397  03B7  3004               	movlw	4
 10398  03B8  022F               	subwf	Load_Main@i,w
 10399  03B9  1803               	btfsc	3,0
 10400  03BA  2BE5               	goto	l10489
 10401  03BB                     l10483:	
 10402                           
 10403                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10404  03BB  352F               	lslf	Load_Main@i,w
 10405  03BC  3E32               	addlw	(_Load+11)& (0+255)
 10406  03BD  0086               	movwf	6
 10407  03BE  3001               	movlw	1	; select bank2/3
 10408  03BF  0087               	movwf	7
 10409  03C0  3F40               	moviw [0]fsr1
 10410  03C1  00A9               	movwf	??_Load_Main
 10411  03C2  3F41               	moviw [1]fsr1
 10412  03C3  00AA               	movwf	??_Load_Main+1
 10413  03C4  0829               	movf	??_Load_Main,w
 10414  03C5  0022               	movlb	2	; select bank2
 10415  03C6  07AC               	addwf	(_Load^(0+256)+5),f
 10416  03C7  0020               	movlb	0	; select bank0
 10417  03C8  082A               	movf	??_Load_Main+1,w
 10418  03C9  0022               	movlb	2	; select bank2
 10419  03CA  3DAD               	addwfc	((_Load+1)^(0+256)+5),f
 10420                           
 10421                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10422  03CB  0020               	movlb	0	; select bank0
 10423  03CC  352F               	lslf	Load_Main@i,w
 10424  03CD  3E3C               	addlw	(_Load+21)& (0+255)
 10425  03CE  0086               	movwf	6
 10426  03CF  3001               	movlw	1	; select bank2/3
 10427  03D0  0087               	movwf	7
 10428  03D1  3F40               	moviw [0]fsr1
 10429  03D2  00A9               	movwf	??_Load_Main
 10430  03D3  3F41               	moviw [1]fsr1
 10431  03D4  00AA               	movwf	??_Load_Main+1
 10432  03D5  0829               	movf	??_Load_Main,w
 10433  03D6  0022               	movlb	2	; select bank2
 10434  03D7  07AE               	addwf	(_Load^(0+256)+7),f
 10435  03D8  0020               	movlb	0	; select bank0
 10436  03D9  082A               	movf	??_Load_Main+1,w
 10437  03DA  0022               	movlb	2	; select bank2
 10438  03DB  3DAF               	addwfc	((_Load+1)^(0+256)+7),f
 10439  03DC  3001               	movlw	1
 10440  03DD  0020               	movlb	0	; select bank0
 10441  03DE  00A9               	movwf	??_Load_Main
 10442  03DF  0829               	movf	??_Load_Main,w
 10443  03E0  07AF               	addwf	Load_Main@i,f
 10444  03E1  3004               	movlw	4
 10445  03E2  022F               	subwf	Load_Main@i,w
 10446  03E3  1C03               	skipc
 10447  03E4  2BBB               	goto	l10483
 10448  03E5                     l10489:	
 10449                           
 10450                           ;OverLoad_B1.c: 66: }
 10451                           ;OverLoad_B1.c: 67: Load.ADH /= 4;
 10452  03E5  3002               	movlw	2
 10453  03E6  0022               	movlb	2	; select bank2
 10454  03E7                     u12025:	
 10455  03E7  36AD               	lsrf	((_Load+1)^(0+256)+5),f
 10456  03E8  0CAC               	rrf	(_Load^(0+256)+5),f
 10457  03E9  0B89               	decfsz	9,f
 10458  03EA  2BE7               	goto	u12025
 10459                           
 10460                           ;OverLoad_B1.c: 68: Load.ADL /= 4;
 10461  03EB  3002               	movlw	2
 10462  03EC                     u12035:	
 10463  03EC  36AF               	lsrf	((_Load+1)^(0+256)+7),f
 10464  03ED  0CAE               	rrf	(_Load^(0+256)+7),f
 10465  03EE  0B89               	decfsz	9,f
 10466  03EF  2BEC               	goto	u12035
 10467                           
 10468                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10469  03F0  319E  2639  3183   	fcall	_setLoad_AH_AL_Restore
 10470                           
 10471                           ;OverLoad_B1.c: 70: if (Load.ADH > Load.ADL) {
 10472  03F3  0022               	movlb	2	; select bank2
 10473  03F4  082D               	movf	((_Load+1)^(0+256)+5),w
 10474  03F5  022F               	subwf	((_Load+1)^(0+256)+7),w
 10475  03F6  1D03               	skipz
 10476  03F7  2BFA               	goto	u12045
 10477  03F8  082C               	movf	(_Load^(0+256)+5),w
 10478  03F9  022E               	subwf	(_Load^(0+256)+7),w
 10479  03FA                     u12045:	
 10480  03FA  1803               	skipnc
 10481  03FB  0008               	return
 10482                           
 10483                           ;OverLoad_B1.c: 71: Load.AD = Load.ADH - Load.ADL;
 10484  03FC  3005               	movlw	5
 10485  03FD  3E27               	addlw	_Load& (0+255)
 10486  03FE  0086               	movwf	6
 10487  03FF  3001               	movlw	1	; select bank2/3
 10488  0400  0087               	movwf	7
 10489  0401  092E               	comf	(_Load^(0+256)+7),w
 10490  0402  0020               	movlb	0	; select bank0
 10491  0403  00A9               	movwf	??_Load_Main
 10492  0404  0022               	movlb	2	; select bank2
 10493  0405  092F               	comf	((_Load+1)^(0+256)+7),w
 10494  0406  0020               	movlb	0	; select bank0
 10495  0407  00AA               	movwf	??_Load_Main+1
 10496  0408  0AA9               	incf	??_Load_Main,f
 10497  0409  1903               	skipnz
 10498  040A  0AAA               	incf	??_Load_Main+1,f
 10499  040B  3F40               	moviw [0]fsr1
 10500  040C  0729               	addwf	??_Load_Main,w
 10501  040D  0022               	movlb	2	; select bank2
 10502  040E  00C6               	movwf	(_Load^(0+256)+31)
 10503  040F  3F41               	moviw [1]fsr1
 10504  0410  0020               	movlb	0	; select bank0
 10505  0411  3D2A               	addwfc	??_Load_Main+1,w
 10506  0412  0022               	movlb	2	; select bank2
 10507  0413  00C7               	movwf	(_Load^(0+256)+32)
 10508                           
 10509                           ;OverLoad_B1.c: 72: Load.ADH = 0;
 10510  0414  01AC               	clrf	(_Load^(0+256)+5)
 10511  0415  01AD               	clrf	((_Load+1)^(0+256)+5)
 10512                           
 10513                           ;OverLoad_B1.c: 73: Load.ADL = 0;
 10514  0416  01AE               	clrf	(_Load^(0+256)+7)
 10515  0417  01AF               	clrf	((_Load+1)^(0+256)+7)
 10516                           
 10517                           ;OverLoad_B1.c: 74: Load.LightsCount = getMain_Lights_Count();
 10518  0418  319D  25A6  3183   	fcall	_getMain_Lights_Count
 10519  041B  0020               	movlb	0	; select bank0
 10520  041C  00A9               	movwf	??_Load_Main
 10521  041D  0829               	movf	??_Load_Main,w
 10522  041E  0022               	movlb	2	; select bank2
 10523  041F  00D2               	movwf	(_Load^(0+256)+43)
 10524                           
 10525                           ;OverLoad_B1.c: 76: if (Load.Run == 1) {
 10526  0420  1DA7               	btfss	_Load^(0+256),3
 10527  0421  2C47               	goto	l10521
 10528                           
 10529                           ;OverLoad_B1.c: 77: if (Load.Count < 2) {
 10530  0422  3002               	movlw	2
 10531  0423  0250               	subwf	(_Load^(0+256)+41),w
 10532  0424  1803               	skipnc
 10533  0425  2C47               	goto	l10521
 10534                           
 10535                           ;OverLoad_B1.c: 78: Load.Count++;
 10536  0426  3001               	movlw	1
 10537  0427  0020               	movlb	0	; select bank0
 10538  0428  00A9               	movwf	??_Load_Main
 10539  0429  0829               	movf	??_Load_Main,w
 10540  042A  0022               	movlb	2	; select bank2
 10541  042B  07D0               	addwf	(_Load^(0+256)+41),f
 10542                           
 10543                           ;OverLoad_B1.c: 79: if (Load.Count == 1) {
 10544  042C  0850               	movf	(_Load^(0+256)+41),w
 10545  042D  3A01               	xorlw	1
 10546  042E  1D03               	skipz
 10547  042F  2C34               	goto	l10513
 10548                           
 10549                           ;OverLoad_B1.c: 80: Load.JudgeValue = 0x400;
 10550  0430  3000               	movlw	0
 10551  0431  00CC               	movwf	(_Load^(0+256)+37)
 10552  0432  3004               	movlw	4
 10553  0433  2C3F               	goto	L6
 10554  0434                     l10513:	
 10555                           ;OverLoad_B1.c: 81: } else if (Load.Count == 2) {
 10556                           
 10557  0434  0850               	movf	(_Load^(0+256)+41),w
 10558  0435  3A02               	xorlw	2
 10559  0436  1D03               	skipz
 10560  0437  2C47               	goto	l10521
 10561                           
 10562                           ;OverLoad_B1.c: 82: if (Load.LightsCount == 1) {
 10563  0438  0852               	movf	(_Load^(0+256)+43),w
 10564  0439  3A01               	xorlw	1
 10565  043A  1D03               	skipz
 10566  043B  2C41               	goto	l10519
 10567                           
 10568                           ;OverLoad_B1.c: 83: Load.JudgeValue = 0x56;
 10569  043C  3056               	movlw	86
 10570  043D  00CC               	movwf	(_Load^(0+256)+37)
 10571  043E  3000               	movlw	0
 10572  043F                     L6:	
 10573  043F  00CD               	movwf	(_Load^(0+256)+38)
 10574                           
 10575                           ;OverLoad_B1.c: 84: } else {
 10576  0440  2C47               	goto	l10521
 10577  0441                     l10519:	
 10578                           
 10579                           ;OverLoad_B1.c: 85: Load.JudgeValue = 0x56 + Load.TotalLoad;
 10580  0441  0830               	movf	(_Load^(0+256)+9),w
 10581  0442  3E56               	addlw	86
 10582  0443  00CC               	movwf	(_Load^(0+256)+37)
 10583  0444  3000               	movlw	0
 10584  0445  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 10585  0446  00CD               	movwf	((_Load+1)^(0+256)+37)
 10586  0447                     l10521:	
 10587                           
 10588                           ;OverLoad_B1.c: 86: }
 10589                           ;OverLoad_B1.c: 87: }
 10590                           ;OverLoad_B1.c: 88: }
 10591                           ;OverLoad_B1.c: 89: }
 10592                           ;OverLoad_B1.c: 91: if (Load.AD >= Load.JudgeValue) {
 10593  0447  084D               	movf	((_Load+1)^(0+256)+37),w
 10594  0448  0247               	subwf	((_Load+1)^(0+256)+31),w
 10595  0449  1D03               	skipz
 10596  044A  2C4D               	goto	u12105
 10597  044B  084C               	movf	(_Load^(0+256)+37),w
 10598  044C  0246               	subwf	(_Load^(0+256)+31),w
 10599  044D                     u12105:	
 10600  044D  1C03               	skipc
 10601  044E  2C5C               	goto	l10531
 10602                           
 10603                           ;OverLoad_B1.c: 92: Load.ErrorCount++;
 10604  044F  3001               	movlw	1
 10605  0450  0020               	movlb	0	; select bank0
 10606  0451  00A9               	movwf	??_Load_Main
 10607  0452  0829               	movf	??_Load_Main,w
 10608  0453  0022               	movlb	2	; select bank2
 10609  0454  07D1               	addwf	(_Load^(0+256)+42),f
 10610                           
 10611                           ;OverLoad_B1.c: 93: if (Load.ErrorCount > 2) {
 10612  0455  3003               	movlw	3
 10613  0456  0251               	subwf	(_Load^(0+256)+42),w
 10614  0457  1C03               	skipc
 10615  0458  0008               	return
 10616                           
 10617                           ;OverLoad_B1.c: 94: Load.ErrorCount = 0;
 10618  0459  01D1               	clrf	(_Load^(0+256)+42)
 10619                           
 10620                           ;OverLoad_B1.c: 95: Load.ERROR = 1;
 10621  045A  16A7               	bsf	_Load^(0+256),5
 10622                           
 10623                           ;OverLoad_B1.c: 108: }
 10624                           ;OverLoad_B1.c: 109: } else {
 10625  045B  0008               	return
 10626  045C                     l10531:	
 10627                           
 10628                           ;OverLoad_B1.c: 110: Load.ErrorCount = 0;
 10629  045C  01D1               	clrf	(_Load^(0+256)+42)
 10630                           
 10631                           ;OverLoad_B1.c: 111: if (Load.Run == 1) {
 10632  045D  1DA7               	btfss	_Load^(0+256),3
 10633  045E  0008               	return
 10634                           
 10635                           ;OverLoad_B1.c: 112: if (Load.OK == 0) {
 10636  045F  1BA7               	btfsc	_Load^(0+256),7
 10637  0460  0008               	return
 10638                           
 10639                           ;OverLoad_B1.c: 113: Load.SafeCount++;
 10640  0461  3001               	movlw	1
 10641  0462  0020               	movlb	0	; select bank0
 10642  0463  00A9               	movwf	??_Load_Main
 10643  0464  0829               	movf	??_Load_Main,w
 10644  0465  0022               	movlb	2	; select bank2
 10645  0466  07D3               	addwf	(_Load^(0+256)+44),f
 10646                           
 10647                           ;OverLoad_B1.c: 114: if (Load.SafeCount >= 3) {
 10648  0467  3003               	movlw	3
 10649  0468  0253               	subwf	(_Load^(0+256)+44),w
 10650  0469  1C03               	skipc
 10651  046A  0008               	return
 10652                           
 10653                           ;OverLoad_B1.c: 115: Load.SafeCount = 0;
 10654  046B  01D3               	clrf	(_Load^(0+256)+44)
 10655                           
 10656                           ;OverLoad_B1.c: 116: Load.OK = 1;
 10657  046C  17A7               	bsf	_Load^(0+256),7
 10658                           
 10659                           ;OverLoad_B1.c: 117: Load.Run = 0;
 10660  046D  11A7               	bcf	_Load^(0+256),3
 10661                           
 10662                           ;OverLoad_B1.c: 118: Load.Count = 0;
 10663  046E  01D0               	clrf	(_Load^(0+256)+41)
 10664                           
 10665                           ;OverLoad_B1.c: 119: Load.TotalLoad = Load.AD;
 10666  046F  0847               	movf	((_Load+1)^(0+256)+31),w
 10667  0470  01B1               	clrf	((_Load+1)^(0+256)+9)
 10668  0471  07B1               	addwf	((_Load+1)^(0+256)+9),f
 10669  0472  0846               	movf	(_Load^(0+256)+31),w
 10670  0473  01B0               	clrf	(_Load^(0+256)+9)
 10671  0474  07B0               	addwf	(_Load^(0+256)+9),f
 10672                           
 10673                           ;OverLoad_B1.c: 128: }
 10674                           ;OverLoad_B1.c: 129: }
 10675                           ;OverLoad_B1.c: 130: }
 10676                           ;OverLoad_B1.c: 131: }
 10677                           ;OverLoad_B1.c: 132: }
 10678                           ;OverLoad_B1.c: 133: }
 10679                           ;OverLoad_B1.c: 134: } else {
 10680  0475  0008               	return
 10681  0476                     l1731:	
 10682                           
 10683                           ;OverLoad_B1.c: 135: Load.ADtoGO = 1;
 10684  0476  1627               	bsf	_Load^(0+256),4
 10685                           
 10686                           ;OverLoad_B1.c: 136: }
 10687                           ;OverLoad_B1.c: 137: } else {
 10688  0477  0008               	return
 10689  0478                     l1730:	
 10690                           
 10691                           ;OverLoad_B1.c: 138: if (Load.LightsON == 1 && error != 3) {
 10692  0478  1D27               	btfss	_Load^(0+256),2
 10693  0479  2C96               	goto	l10579
 10694  047A  0020               	movlb	0	; select bank0
 10695  047B  082E               	movf	Load_Main@error,w
 10696  047C  3A03               	xorlw	3
 10697  047D  1903               	skipnz
 10698  047E  2C96               	goto	l10579
 10699                           
 10700                           ;OverLoad_B1.c: 139: Load.LightsON = 0;
 10701  047F  0022               	movlb	2	; select bank2
 10702  0480  1127               	bcf	_Load^(0+256),2
 10703                           
 10704                           ;OverLoad_B1.c: 141: Load.Time = 0;
 10705  0481  01A8               	clrf	(_Load^(0+256)+1)
 10706  0482  01A9               	clrf	((_Load+1)^(0+256)+1)
 10707                           
 10708                           ;OverLoad_B1.c: 142: Load.ADtoGO = 0;
 10709  0483  1227               	bcf	_Load^(0+256),4
 10710                           
 10711                           ;OverLoad_B1.c: 143: setLoad_AH_AL_Restore();
 10712  0484  319E  2639  3183   	fcall	_setLoad_AH_AL_Restore
 10713                           
 10714                           ;OverLoad_B1.c: 144: Load.Count = 0;
 10715  0487  0022               	movlb	2	; select bank2
 10716  0488  01D0               	clrf	(_Load^(0+256)+41)
 10717                           
 10718                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10719  0489  01D1               	clrf	(_Load^(0+256)+42)
 10720                           
 10721                           ;OverLoad_B1.c: 146: Load.SafeCount = 0;
 10722  048A  01D3               	clrf	(_Load^(0+256)+44)
 10723                           
 10724                           ;OverLoad_B1.c: 148: Load.ADH = 0;
 10725  048B  01AC               	clrf	(_Load^(0+256)+5)
 10726  048C  01AD               	clrf	((_Load+1)^(0+256)+5)
 10727                           
 10728                           ;OverLoad_B1.c: 149: Load.ADL = 0;
 10729  048D  01AE               	clrf	(_Load^(0+256)+7)
 10730  048E  01AF               	clrf	((_Load+1)^(0+256)+7)
 10731                           
 10732                           ;OverLoad_B1.c: 150: Load.AD = 0;
 10733  048F  01C6               	clrf	(_Load^(0+256)+31)
 10734  0490  01C7               	clrf	((_Load+1)^(0+256)+31)
 10735                           
 10736                           ;OverLoad_B1.c: 151: Load.JudgeValue = 0;
 10737  0491  01CC               	clrf	(_Load^(0+256)+37)
 10738  0492  01CD               	clrf	((_Load+1)^(0+256)+37)
 10739                           
 10740                           ;OverLoad_B1.c: 152: Load.LightsCount = 0;
 10741  0493  01D2               	clrf	(_Load^(0+256)+43)
 10742                           
 10743                           ;OverLoad_B1.c: 153: Load.Run = 0;
 10744  0494  11A7               	bcf	_Load^(0+256),3
 10745                           
 10746                           ;OverLoad_B1.c: 154: Load.OK = 1;
 10747  0495  17A7               	bsf	_Load^(0+256),7
 10748  0496                     l10579:	
 10749                           
 10750                           ;OverLoad_B1.c: 162: }
 10751                           ;OverLoad_B1.c: 163: if (Load.ERROR == 1) {
 10752  0496  0022               	movlb	2	; select bank2
 10753  0497  1EA7               	btfss	_Load^(0+256),5
 10754  0498  0008               	return
 10755                           
 10756                           ;OverLoad_B1.c: 164: Load.ErrorTime++;
 10757  0499  3001               	movlw	1
 10758  049A  07AA               	addwf	(_Load^(0+256)+3),f
 10759  049B  3000               	movlw	0
 10760  049C  3DAB               	addwfc	((_Load+1)^(0+256)+3),f
 10761                           
 10762                           ;OverLoad_B1.c: 165: if (Load.ErrorTime >= 1000) {
 10763  049D  3003               	movlw	3
 10764  049E  022B               	subwf	((_Load+1)^(0+256)+3),w
 10765  049F  30E8               	movlw	232
 10766  04A0  1903               	skipnz
 10767  04A1  022A               	subwf	(_Load^(0+256)+3),w
 10768  04A2  1C03               	skipc
 10769  04A3  0008               	return
 10770                           
 10771                           ;OverLoad_B1.c: 166: Load.ErrorTime = 0;
 10772  04A4  01AA               	clrf	(_Load^(0+256)+3)
 10773  04A5  01AB               	clrf	((_Load+1)^(0+256)+3)
 10774                           
 10775                           ;OverLoad_B1.c: 173: Load.ERROR = 0;
 10776  04A6  12A7               	bcf	_Load^(0+256),5
 10777                           
 10778                           ;OverLoad_B1.c: 174: }
 10779                           ;OverLoad_B1.c: 175: }
 10780                           ;OverLoad_B1.c: 176: }
 10781                           ;OverLoad_B1.c: 177: } else {
 10782  04A7  0008               	return
 10783  04A8                     l1726:	
 10784                           
 10785                           ;OverLoad_B1.c: 178: if (myMain.PowerON == 1) {
 10786  04A8  0021               	movlb	1	; select bank1
 10787  04A9  1C20               	btfss	_myMain^(0+128),0
 10788  04AA  0008               	return
 10789                           
 10790                           ;OverLoad_B1.c: 179: Load.Enable = 1;
 10791  04AB  0022               	movlb	2	; select bank2
 10792  04AC  1427               	bsf	_Load^(0+256),0
 10793  04AD  0008               	return
 10794  04AE                     __end_of_Load_Main:	
 10795                           
 10796                           	psect	text54
 10797  1BED                     __ptext54:	
 10798 ;; *************** function _getMain_LoadOK *****************
 10799 ;; Defined at:
 10800 ;;		line 432 in file "../src/Main_B1.c"
 10801 ;; Parameters:    Size  Location     Type
 10802 ;;		None
 10803 ;; Auto vars:     Size  Location     Type
 10804 ;;  ok              1    2[BANK0 ] unsigned char 
 10805 ;; Return value:  Size  Location     Type
 10806 ;;                  1    wreg      unsigned char 
 10807 ;; Registers used:
 10808 ;;		wreg, status,2, pclath, cstack
 10809 ;; Tracked objects:
 10810 ;;		On entry : 0/0
 10811 ;;		On exit  : 0/0
 10812 ;;		Unchanged: 0/0
 10813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10815 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10817 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;Total ram usage:        2 bytes
 10819 ;; Hardware stack levels used:    1
 10820 ;; Hardware stack levels required when called:    6
 10821 ;; This function calls:
 10822 ;;		_getDimmer_LoadOK
 10823 ;; This function is called by:
 10824 ;;		_Load_Main
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           
 10829                           ;psect for function _getMain_LoadOK
 10830  1BED                     _getMain_LoadOK:	
 10831                           
 10832                           ;Main_B1.c: 433: char ok = 0;
 10833                           
 10834                           ;incstack = 0
 10835                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10836  1BED  0020               	movlb	0	; select bank0
 10837  1BEE  01A2               	clrf	getMain_LoadOK@ok
 10838                           
 10839                           ;Main_B1.c: 439: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10840  1BEF  319B  2359         	fcall	_getDimmer_LoadOK
 10841  1BF1  3A01               	xorlw	1
 10842  1BF2  3000               	movlw	0
 10843  1BF3  1903               	skipnz
 10844  1BF4  3001               	movlw	1
 10845  1BF5  0020               	movlb	0	; select bank0
 10846  1BF6  00A1               	movwf	??_getMain_LoadOK
 10847  1BF7  0821               	movf	??_getMain_LoadOK,w
 10848  1BF8  00A2               	movwf	getMain_LoadOK@ok
 10849                           
 10850                           ;Main_B1.c: 441: return ok;
 10851  1BF9  0822               	movf	getMain_LoadOK@ok,w
 10852  1BFA  0008               	return
 10853  1BFB                     __end_of_getMain_LoadOK:	
 10854                           
 10855                           	psect	text55
 10856  1B59                     __ptext55:	
 10857 ;; *************** function _getDimmer_LoadOK *****************
 10858 ;; Defined at:
 10859 ;;		line 659 in file "../src/Dimmer_B1.c"
 10860 ;; Parameters:    Size  Location     Type
 10861 ;;		None
 10862 ;; Auto vars:     Size  Location     Type
 10863 ;;  status          1    0[BANK0 ] unsigned char 
 10864 ;; Return value:  Size  Location     Type
 10865 ;;                  1    wreg      unsigned char 
 10866 ;; Registers used:
 10867 ;;		wreg, status,2
 10868 ;; Tracked objects:
 10869 ;;		On entry : 0/0
 10870 ;;		On exit  : 0/0
 10871 ;;		Unchanged: 0/0
 10872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10874 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10876 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10877 ;;Total ram usage:        1 bytes
 10878 ;; Hardware stack levels used:    1
 10879 ;; Hardware stack levels required when called:    5
 10880 ;; This function calls:
 10881 ;;		Nothing
 10882 ;; This function is called by:
 10883 ;;		_getMain_LoadOK
 10884 ;; This function uses a non-reentrant model
 10885 ;;
 10886                           
 10887                           
 10888                           ;psect for function _getDimmer_LoadOK
 10889  1B59                     _getDimmer_LoadOK:	
 10890                           
 10891                           ;Dimmer_B1.c: 660: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10892                           
 10893                           ;incstack = 0
 10894                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10895  1B59  3000               	movlw	0
 10896  1B5A  0021               	movlb	1	; select bank1
 10897  1B5B  18C8               	btfsc	_Dimmer^(0+128),1
 10898  1B5C  3001               	movlw	1
 10899  1B5D  0020               	movlb	0	; select bank0
 10900  1B5E  00A0               	movwf	getDimmer_LoadOK@status
 10901                           
 10902                           ;Dimmer_B1.c: 661: return status;
 10903  1B5F  0820               	movf	getDimmer_LoadOK@status,w
 10904  1B60  0008               	return
 10905  1B61                     __end_of_getDimmer_LoadOK:	
 10906                           
 10907                           	psect	text56
 10908  1DA6                     __ptext56:	
 10909 ;; *************** function _getMain_Lights_Count *****************
 10910 ;; Defined at:
 10911 ;;		line 402 in file "../src/Main_B1.c"
 10912 ;; Parameters:    Size  Location     Type
 10913 ;;		None
 10914 ;; Auto vars:     Size  Location     Type
 10915 ;;  status2         1    3[BANK0 ] unsigned char 
 10916 ;;  status1         1    2[BANK0 ] unsigned char 
 10917 ;;  status3         1    1[BANK0 ] unsigned char 
 10918 ;;  count           1    0[BANK0 ] unsigned char 
 10919 ;; Return value:  Size  Location     Type
 10920 ;;                  1    wreg      unsigned char 
 10921 ;; Registers used:
 10922 ;;		wreg, status,2, status,0
 10923 ;; Tracked objects:
 10924 ;;		On entry : 0/0
 10925 ;;		On exit  : 0/0
 10926 ;;		Unchanged: 0/0
 10927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10931 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10932 ;;Total ram usage:        4 bytes
 10933 ;; Hardware stack levels used:    1
 10934 ;; Hardware stack levels required when called:    5
 10935 ;; This function calls:
 10936 ;;		Nothing
 10937 ;; This function is called by:
 10938 ;;		_Load_Main
 10939 ;; This function uses a non-reentrant model
 10940 ;;
 10941                           
 10942                           
 10943                           ;psect for function _getMain_Lights_Count
 10944  1DA6                     _getMain_Lights_Count:	
 10945                           
 10946                           ;Main_B1.c: 403: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10947                           
 10948                           ;incstack = 0
 10949                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10950  1DA6  0020               	movlb	0	; select bank0
 10951  1DA7  01A2               	clrf	getMain_Lights_Count@status1
 10952  1DA8  01A3               	clrf	getMain_Lights_Count@status2
 10953  1DA9  01A1               	clrf	getMain_Lights_Count@status3
 10954  1DAA  01A0               	clrf	getMain_Lights_Count@count
 10955                           
 10956                           ;Main_B1.c: 407: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10957  1DAB  3000               	movlw	0
 10958  1DAC  0023               	movlb	3	; select bank3
 10959  1DAD  18C7               	btfsc	(_DimmerLights1^(0+384)+9),1
 10960  1DAE  3001               	movlw	1
 10961  1DAF  0020               	movlb	0	; select bank0
 10962  1DB0  00A2               	movwf	getMain_Lights_Count@status1
 10963                           
 10964                           ;Main_B1.c: 410: status2 = DimmerLights2.Loop == 1 ? 1 : 0;
 10965  1DB1  3000               	movlw	0
 10966  1DB2  0023               	movlb	3	; select bank3
 10967  1DB3  18D6               	btfsc	(_DimmerLights2^(0+384)+9),1
 10968  1DB4  3001               	movlw	1
 10969  1DB5  0020               	movlb	0	; select bank0
 10970  1DB6  00A3               	movwf	getMain_Lights_Count@status2
 10971                           
 10972                           ;Main_B1.c: 428: return count = (status1 + status2 + status3);
 10973  1DB7  0822               	movf	getMain_Lights_Count@status1,w
 10974  1DB8  0723               	addwf	getMain_Lights_Count@status2,w
 10975  1DB9  0721               	addwf	getMain_Lights_Count@status3,w
 10976  1DBA  00A0               	movwf	getMain_Lights_Count@count
 10977  1DBB  0008               	return
 10978  1DBC                     __end_of_getMain_Lights_Count:	
 10979                           
 10980                           	psect	text57
 10981  1B21                     __ptext57:	
 10982 ;; *************** function _Load_Initialization *****************
 10983 ;; Defined at:
 10984 ;;		line 9 in file "../src/OverLoad_B1.c"
 10985 ;; Parameters:    Size  Location     Type
 10986 ;;		None
 10987 ;; Auto vars:     Size  Location     Type
 10988 ;;		None
 10989 ;; Return value:  Size  Location     Type
 10990 ;;		None               void
 10991 ;; Registers used:
 10992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10993 ;; Tracked objects:
 10994 ;;		On entry : 0/0
 10995 ;;		On exit  : 0/0
 10996 ;;		Unchanged: 0/0
 10997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;Total ram usage:        0 bytes
 11003 ;; Hardware stack levels used:    1
 11004 ;; Hardware stack levels required when called:    6
 11005 ;; This function calls:
 11006 ;;		_setLoad_AH_AL_Restore
 11007 ;; This function is called by:
 11008 ;;		_main
 11009 ;; This function uses a non-reentrant model
 11010 ;;
 11011                           
 11012                           
 11013                           ;psect for function _Load_Initialization
 11014  1B21                     _Load_Initialization:	
 11015                           
 11016                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11017                           
 11018                           ;incstack = 0
 11019                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11020  1B21  0022               	movlb	2	; select bank2
 11021  1B22  17A7               	bsf	_Load^(0+256),7
 11022                           
 11023                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11024  1B23  319E  2639         	fcall	_setLoad_AH_AL_Restore
 11025  1B25  0008               	return
 11026  1B26                     __end_of_Load_Initialization:	
 11027                           
 11028                           	psect	text58
 11029  1E39                     __ptext58:	
 11030 ;; *************** function _setLoad_AH_AL_Restore *****************
 11031 ;; Defined at:
 11032 ;;		line 285 in file "../src/OverLoad_B1.c"
 11033 ;; Parameters:    Size  Location     Type
 11034 ;;		None
 11035 ;; Auto vars:     Size  Location     Type
 11036 ;;  i               1    1[BANK0 ] unsigned char 
 11037 ;; Return value:  Size  Location     Type
 11038 ;;		None               void
 11039 ;; Registers used:
 11040 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11041 ;; Tracked objects:
 11042 ;;		On entry : 0/0
 11043 ;;		On exit  : 0/0
 11044 ;;		Unchanged: 0/0
 11045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;Total ram usage:        2 bytes
 11051 ;; Hardware stack levels used:    1
 11052 ;; Hardware stack levels required when called:    5
 11053 ;; This function calls:
 11054 ;;		Nothing
 11055 ;; This function is called by:
 11056 ;;		_Load_Initialization
 11057 ;;		_Load_Main
 11058 ;; This function uses a non-reentrant model
 11059 ;;
 11060                           
 11061                           
 11062                           ;psect for function _setLoad_AH_AL_Restore
 11063  1E39                     _setLoad_AH_AL_Restore:	
 11064                           
 11065                           ;OverLoad_B1.c: 286: char i;
 11066                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 11067                           
 11068                           ;incstack = 0
 11069                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11070  1E39  0020               	movlb	0	; select bank0
 11071  1E3A  01A1               	clrf	setLoad_AH_AL_Restore@i
 11072  1E3B                     L7:	
 11073  1E3B  3005               	movlw	5
 11074  1E3C  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11075  1E3D  1803               	btfsc	3,0
 11076  1E3E  0008               	return
 11077                           
 11078                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 11079  1E3F  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11080  1E40  3E32               	addlw	(_Load+11)& (0+255)
 11081  1E41  0086               	movwf	6
 11082  1E42  3001               	movlw	1	; select bank2/3
 11083  1E43  0087               	movwf	7
 11084  1E44  3000               	movlw	0
 11085  1E45  3FC0               	movwi [0]fsr1
 11086  1E46  3FC1               	movwi [1]fsr1
 11087                           
 11088                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 11089  1E47  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11090  1E48  3E3C               	addlw	(_Load+21)& (0+255)
 11091  1E49  0086               	movwf	6
 11092  1E4A  3001               	movlw	1	; select bank2/3
 11093  1E4B  0087               	movwf	7
 11094  1E4C  30FF               	movlw	255
 11095  1E4D  3FC0               	movwi [0]fsr1
 11096  1E4E  30FF               	movlw	255
 11097  1E4F  3FC1               	movwi [1]fsr1
 11098  1E50  3001               	movlw	1
 11099  1E51  00A0               	movwf	??_setLoad_AH_AL_Restore
 11100  1E52  0820               	movf	??_setLoad_AH_AL_Restore,w
 11101  1E53  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11102  1E54  2E3B               	goto	L7
 11103  1E55                     __end_of_setLoad_AH_AL_Restore:	
 11104                           
 11105                           	psect	text59
 11106  1BB0                     __ptext59:	
 11107 ;; *************** function _LED_Main *****************
 11108 ;; Defined at:
 11109 ;;		line 47 in file "../src/LED_B1.c"
 11110 ;; Parameters:    Size  Location     Type
 11111 ;;		None
 11112 ;; Auto vars:     Size  Location     Type
 11113 ;;		None
 11114 ;; Return value:  Size  Location     Type
 11115 ;;		None               void
 11116 ;; Registers used:
 11117 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11118 ;; Tracked objects:
 11119 ;;		On entry : 0/0
 11120 ;;		On exit  : 0/0
 11121 ;;		Unchanged: 0/0
 11122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;Total ram usage:        0 bytes
 11128 ;; Hardware stack levels used:    1
 11129 ;; Hardware stack levels required when called:    7
 11130 ;; This function calls:
 11131 ;;		_setLED_Main
 11132 ;; This function is called by:
 11133 ;;		_main
 11134 ;; This function uses a non-reentrant model
 11135 ;;
 11136                           
 11137                           
 11138                           ;psect for function _LED_Main
 11139  1BB0                     _LED_Main:	
 11140                           
 11141                           ;LED_B1.c: 49: setLED_Main(1);
 11142                           
 11143                           ;incstack = 0
 11144                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11145  1BB0  3001               	movlw	1
 11146  1BB1  3193  23DE  319B   	fcall	_setLED_Main
 11147                           
 11148                           ;LED_B1.c: 52: setLED_Main(2);
 11149  1BB4  3002               	movlw	2
 11150  1BB5  3193  23DE  319B   	fcall	_setLED_Main
 11151                           
 11152                           ;LED_B1.c: 58: setLED_Main(99);
 11153  1BB8  3063               	movlw	99
 11154  1BB9  3193  23DE         	fcall	_setLED_Main
 11155  1BBB  0008               	return
 11156  1BBC                     __end_of_LED_Main:	
 11157                           
 11158                           	psect	text60
 11159  13DE                     __ptext60:	
 11160 ;; *************** function _setLED_Main *****************
 11161 ;; Defined at:
 11162 ;;		line 215 in file "../src/LED_B1.c"
 11163 ;; Parameters:    Size  Location     Type
 11164 ;;  led             1    wreg     unsigned char 
 11165 ;; Auto vars:     Size  Location     Type
 11166 ;;  led             1    4[BANK0 ] unsigned char 
 11167 ;; Return value:  Size  Location     Type
 11168 ;;		None               void
 11169 ;; Registers used:
 11170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11171 ;; Tracked objects:
 11172 ;;		On entry : 0/0
 11173 ;;		On exit  : 0/0
 11174 ;;		Unchanged: 0/0
 11175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;Total ram usage:        3 bytes
 11181 ;; Hardware stack levels used:    1
 11182 ;; Hardware stack levels required when called:    6
 11183 ;; This function calls:
 11184 ;;		_LedPointSelect
 11185 ;; This function is called by:
 11186 ;;		_LED_Main
 11187 ;; This function uses a non-reentrant model
 11188 ;;
 11189                           
 11190                           
 11191                           ;psect for function _setLED_Main
 11192  13DE                     _setLED_Main:	
 11193                           
 11194                           ;incstack = 0
 11195                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11196                           ;setLED_Main@led stored from wreg
 11197  13DE  0020               	movlb	0	; select bank0
 11198  13DF  00A4               	movwf	setLED_Main@led
 11199                           
 11200                           ;LED_B1.c: 216: LedPointSelect(led);
 11201  13E0  0824               	movf	setLED_Main@led,w
 11202  13E1  319F  2750  3193   	fcall	_LedPointSelect
 11203                           
 11204                           ;LED_B1.c: 217: if (LED->GO == 1) {
 11205  13E4  0021               	movlb	1	; select bank1
 11206  13E5  084F               	movf	_LED^(0+128),w
 11207  13E6  0086               	movwf	6
 11208  13E7  3001               	movlw	1	; select bank2/3
 11209  13E8  0087               	movwf	7
 11210  13E9  1C81               	btfss	1,1
 11211  13EA  0008               	return
 11212                           
 11213                           ;LED_B1.c: 218: LED->Time++;
 11214  13EB  0A4F               	incf	_LED^(0+128),w
 11215  13EC  0086               	movwf	6
 11216  13ED  3001               	movlw	1	; select bank2/3
 11217  13EE  0087               	movwf	7
 11218  13EF  3001               	movlw	1
 11219  13F0  0781               	addwf	1,f
 11220  13F1  3141               	addfsr 1,1
 11221  13F2  1803               	skipnc
 11222  13F3  0A81               	incf	1,f
 11223                           
 11224                           ;LED_B1.c: 219: if (LED->Time >= 500 / 10) {
 11225  13F4  0A4F               	incf	_LED^(0+128),w
 11226  13F5  0086               	movwf	6
 11227  13F6  3001               	movlw	1	; select bank2/3
 11228  13F7  0087               	movwf	7
 11229  13F8  3F40               	moviw [0]fsr1
 11230  13F9  0020               	movlb	0	; select bank0
 11231  13FA  00A2               	movwf	??_setLED_Main
 11232  13FB  3F41               	moviw [1]fsr1
 11233  13FC  00A3               	movwf	??_setLED_Main+1
 11234  13FD  3000               	movlw	0
 11235  13FE  0223               	subwf	??_setLED_Main+1,w
 11236  13FF  3032               	movlw	50
 11237  1400  1903               	skipnz
 11238  1401  0222               	subwf	??_setLED_Main,w
 11239  1402  1C03               	skipc
 11240  1403  0008               	return
 11241                           
 11242                           ;LED_B1.c: 220: LED->Time = 0;
 11243  1404  0021               	movlb	1	; select bank1
 11244  1405  0A4F               	incf	_LED^(0+128),w
 11245  1406  0086               	movwf	6
 11246  1407  3001               	movlw	1	; select bank2/3
 11247  1408  0087               	movwf	7
 11248  1409  3000               	movlw	0
 11249  140A  3FC0               	movwi [0]fsr1
 11250  140B  3FC1               	movwi [1]fsr1
 11251                           
 11252                           ;LED_B1.c: 222: if (led == 1) {
 11253  140C  0020               	movlb	0	; select bank0
 11254  140D  0824               	movf	setLED_Main@led,w
 11255  140E  3A01               	xorlw	1
 11256  140F  1D03               	skipz
 11257  1410  2C14               	goto	l9751
 11258                           
 11259                           ;LED_B1.c: 223: RA3 = RA3 == 1 ? 0 : 1;
 11260  1411  3008               	movlw	8
 11261  1412  068C               	xorwf	12,f
 11262                           
 11263                           ;LED_B1.c: 224: }
 11264  1413  0008               	return
 11265  1414                     l9751:	
 11266                           
 11267                           ;LED_B1.c: 227: else if (led == 2) {
 11268  1414  0824               	movf	setLED_Main@led,w
 11269  1415  3A02               	xorlw	2
 11270  1416  1D03               	skipz
 11271  1417  2C1B               	goto	l9755
 11272                           
 11273                           ;LED_B1.c: 228: RC7 = RC7 == 1 ? 0 : 1;
 11274  1418  3080               	movlw	128
 11275  1419  068E               	xorwf	14,f
 11276                           
 11277                           ;LED_B1.c: 229: }
 11278  141A  0008               	return
 11279  141B                     l9755:	
 11280                           
 11281                           ;LED_B1.c: 237: else if (led == 99) {
 11282  141B  0824               	movf	setLED_Main@led,w
 11283  141C  3A63               	xorlw	99
 11284  141D  1D03               	skipz
 11285  141E  0008               	return
 11286                           
 11287                           ;LED_B1.c: 238: RB5 = RB5 == 1 ? 0 : 1;
 11288  141F  3020               	movlw	32
 11289  1420  068D               	xorwf	13,f
 11290  1421  0008               	return
 11291  1422                     __end_of_setLED_Main:	
 11292                           
 11293                           	psect	text61
 11294  1BA4                     __ptext61:	
 11295 ;; *************** function _LED_Initialization *****************
 11296 ;; Defined at:
 11297 ;;		line 31 in file "../src/LED_B1.c"
 11298 ;; Parameters:    Size  Location     Type
 11299 ;;		None
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;		None
 11302 ;; Return value:  Size  Location     Type
 11303 ;;		None               void
 11304 ;; Registers used:
 11305 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11306 ;; Tracked objects:
 11307 ;;		On entry : 0/0
 11308 ;;		On exit  : 0/0
 11309 ;;		Unchanged: 0/0
 11310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;Total ram usage:        0 bytes
 11316 ;; Hardware stack levels used:    1
 11317 ;; Hardware stack levels required when called:    8
 11318 ;; This function calls:
 11319 ;;		_setLED_Initialization
 11320 ;; This function is called by:
 11321 ;;		_main
 11322 ;; This function uses a non-reentrant model
 11323 ;;
 11324                           
 11325                           
 11326                           ;psect for function _LED_Initialization
 11327  1BA4                     _LED_Initialization:	
 11328                           
 11329                           ;LED_B1.c: 33: setLED_Initialization(1);
 11330                           
 11331                           ;incstack = 0
 11332                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11333  1BA4  3001               	movlw	1
 11334  1BA5  319C  2480  319B   	fcall	_setLED_Initialization
 11335                           
 11336                           ;LED_B1.c: 36: setLED_Initialization(2);
 11337  1BA8  3002               	movlw	2
 11338  1BA9  319C  2480  319B   	fcall	_setLED_Initialization
 11339                           
 11340                           ;LED_B1.c: 42: setLED_Initialization(99);
 11341  1BAC  3063               	movlw	99
 11342  1BAD  319C  2480         	fcall	_setLED_Initialization
 11343  1BAF  0008               	return
 11344  1BB0                     __end_of_LED_Initialization:	
 11345                           
 11346                           	psect	text62
 11347  1C80                     __ptext62:	
 11348 ;; *************** function _setLED_Initialization *****************
 11349 ;; Defined at:
 11350 ;;		line 66 in file "../src/LED_B1.c"
 11351 ;; Parameters:    Size  Location     Type
 11352 ;;  led             1    wreg     unsigned char 
 11353 ;; Auto vars:     Size  Location     Type
 11354 ;;  led             1    4[BANK0 ] unsigned char 
 11355 ;; Return value:  Size  Location     Type
 11356 ;;		None               void
 11357 ;; Registers used:
 11358 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11359 ;; Tracked objects:
 11360 ;;		On entry : 0/0
 11361 ;;		On exit  : 0/0
 11362 ;;		Unchanged: 0/0
 11363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;Total ram usage:        1 bytes
 11369 ;; Hardware stack levels used:    1
 11370 ;; Hardware stack levels required when called:    7
 11371 ;; This function calls:
 11372 ;;		_LedPointSelect
 11373 ;;		_setLED
 11374 ;; This function is called by:
 11375 ;;		_LED_Initialization
 11376 ;; This function uses a non-reentrant model
 11377 ;;
 11378                           
 11379                           
 11380                           ;psect for function _setLED_Initialization
 11381  1C80                     _setLED_Initialization:	
 11382                           
 11383                           ;incstack = 0
 11384                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11385                           ;setLED_Initialization@led stored from wreg
 11386  1C80  0020               	movlb	0	; select bank0
 11387  1C81  00A4               	movwf	setLED_Initialization@led
 11388                           
 11389                           ;LED_B1.c: 67: LedPointSelect(led);
 11390  1C82  0824               	movf	setLED_Initialization@led,w
 11391  1C83  319F  2750  319C   	fcall	_LedPointSelect
 11392                           
 11393                           ;LED_B1.c: 68: LED->Enable = 1;
 11394  1C86  0021               	movlb	1	; select bank1
 11395  1C87  084F               	movf	_LED^(0+128),w
 11396  1C88  0086               	movwf	6
 11397  1C89  3001               	movlw	1	; select bank2/3
 11398  1C8A  0087               	movwf	7
 11399  1C8B  1401               	bsf	1,0
 11400                           
 11401                           ;LED_B1.c: 69: setLED(led, 0);
 11402  1C8C  0020               	movlb	0	; select bank0
 11403  1C8D  01A2               	clrf	setLED@command
 11404  1C8E  0824               	movf	setLED_Initialization@led,w
 11405  1C8F  3189  2186         	fcall	_setLED
 11406  1C91  0008               	return
 11407  1C92                     __end_of_setLED_Initialization:	
 11408                           
 11409                           	psect	text63
 11410  1284                     __ptext63:	
 11411 ;; *************** function _Flash_Memory_Main *****************
 11412 ;; Defined at:
 11413 ;;		line 901 in file "../src/MCU_B1.c"
 11414 ;; Parameters:    Size  Location     Type
 11415 ;;		None
 11416 ;; Auto vars:     Size  Location     Type
 11417 ;;		None
 11418 ;; Return value:  Size  Location     Type
 11419 ;;		None               void
 11420 ;; Registers used:
 11421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11422 ;; Tracked objects:
 11423 ;;		On entry : 0/0
 11424 ;;		On exit  : 0/0
 11425 ;;		Unchanged: 0/0
 11426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11430 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11431 ;;Total ram usage:        1 bytes
 11432 ;; Hardware stack levels used:    1
 11433 ;; Hardware stack levels required when called:    8
 11434 ;; This function calls:
 11435 ;;		_Flash_Memory_Modify
 11436 ;;		_getMain_LightsStatus
 11437 ;; This function is called by:
 11438 ;;		_main
 11439 ;; This function uses a non-reentrant model
 11440 ;;
 11441                           
 11442                           
 11443                           ;psect for function _Flash_Memory_Main
 11444  1284                     _Flash_Memory_Main:	
 11445                           
 11446                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 11447                           
 11448                           ;incstack = 0
 11449                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11450  1284  0024               	movlb	4	; select bank4
 11451  1285  1C44               	btfss	(_Memory^(0+512)+36),0
 11452  1286  0008               	return
 11453                           
 11454                           ;MCU_B1.c: 903: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11455  1287  3191  2158  3192   	fcall	_getMain_LightsStatus
 11456  128A  3A00               	xorlw	0
 11457  128B  3000               	movlw	0
 11458  128C  1903               	skipnz
 11459  128D  3001               	movlw	1
 11460  128E  0020               	movlb	0	; select bank0
 11461  128F  00A9               	movwf	??_Flash_Memory_Main
 11462  1290  0DA9               	rlf	??_Flash_Memory_Main,f
 11463  1291  0024               	movlb	4	; select bank4
 11464  1292  0844               	movf	(_Memory^(0+512)+36),w
 11465  1293  0020               	movlb	0	; select bank0
 11466  1294  0629               	xorwf	??_Flash_Memory_Main,w
 11467  1295  39FD               	andlw	-3
 11468  1296  0629               	xorwf	??_Flash_Memory_Main,w
 11469  1297  0024               	movlb	4	; select bank4
 11470  1298  00C4               	movwf	(_Memory^(0+512)+36)
 11471                           
 11472                           ;MCU_B1.c: 904: if (Memory.GO == 1) {
 11473  1299  1CC4               	btfss	(_Memory^(0+512)+36),1
 11474  129A  2AB4               	goto	l1345
 11475                           
 11476                           ;MCU_B1.c: 905: Memory.Runtime = 1;
 11477  129B  15C4               	bsf	(_Memory^(0+512)+36),3
 11478                           
 11479                           ;MCU_B1.c: 906: Memory.Time++;
 11480  129C  3001               	movlw	1
 11481  129D  07C2               	addwf	(_Memory^(0+512)+34),f
 11482  129E  3000               	movlw	0
 11483  129F  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11484                           
 11485                           ;MCU_B1.c: 907: if (Memory.Time == 25) {
 11486  12A0  3022               	movlw	34
 11487  12A1  3E20               	addlw	_Memory& (0+255)
 11488  12A2  0086               	movwf	6
 11489  12A3  3002               	movlw	2	; select bank4/5
 11490  12A4  0087               	movwf	7
 11491  12A5  3F40               	moviw [0]fsr1
 11492  12A6  3A19               	xorlw	25
 11493  12A7  1D03               	skipz
 11494  12A8  2AAB               	goto	u11705
 11495  12A9  3F41               	moviw [1]fsr1
 11496  12AA  3A00               	xorlw	0
 11497  12AB                     u11705:	
 11498  12AB  1D03               	skipz
 11499  12AC  0008               	return
 11500                           
 11501                           ;MCU_B1.c: 908: Memory.Time = 0;
 11502  12AD  01C2               	clrf	(_Memory^(0+512)+34)
 11503  12AE  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11504                           
 11505                           ;MCU_B1.c: 909: Memory.Modify = 0;
 11506  12AF  1044               	bcf	(_Memory^(0+512)+36),0
 11507                           
 11508                           ;MCU_B1.c: 910: Memory.GO = 0;
 11509  12B0  10C4               	bcf	(_Memory^(0+512)+36),1
 11510                           
 11511                           ;MCU_B1.c: 911: Flash_Memory_Modify();
 11512  12B1  3194  24FE         	fcall	_Flash_Memory_Modify
 11513                           
 11514                           ;MCU_B1.c: 912: }
 11515                           ;MCU_B1.c: 913: } else {
 11516  12B3  0008               	return
 11517  12B4                     l1345:	
 11518                           
 11519                           ;MCU_B1.c: 914: if (Memory.Runtime == 1) {
 11520  12B4  1DC4               	btfss	(_Memory^(0+512)+36),3
 11521  12B5  0008               	return
 11522                           
 11523                           ;MCU_B1.c: 915: Memory.Runtime = 0;
 11524  12B6  11C4               	bcf	(_Memory^(0+512)+36),3
 11525                           
 11526                           ;MCU_B1.c: 916: Memory.Time = 0;
 11527  12B7  01C2               	clrf	(_Memory^(0+512)+34)
 11528  12B8  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11529  12B9  0008               	return
 11530  12BA                     __end_of_Flash_Memory_Main:	
 11531                           
 11532                           	psect	text64
 11533  14FE                     __ptext64:	
 11534 ;; *************** function _Flash_Memory_Modify *****************
 11535 ;; Defined at:
 11536 ;;		line 974 in file "../src/MCU_B1.c"
 11537 ;; Parameters:    Size  Location     Type
 11538 ;;		None
 11539 ;; Auto vars:     Size  Location     Type
 11540 ;;  i               1    5[BANK0 ] unsigned char 
 11541 ;; Return value:  Size  Location     Type
 11542 ;;		None               void
 11543 ;; Registers used:
 11544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11545 ;; Tracked objects:
 11546 ;;		On entry : 0/0
 11547 ;;		On exit  : 0/0
 11548 ;;		Unchanged: 0/0
 11549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;Total ram usage:        2 bytes
 11555 ;; Hardware stack levels used:    1
 11556 ;; Hardware stack levels required when called:    7
 11557 ;; This function calls:
 11558 ;;		_Flash_Memory_Erasing
 11559 ;;		_Flash_Memory_Read
 11560 ;;		_Flash_Memory_Write
 11561 ;;		_setMemory_Data
 11562 ;; This function is called by:
 11563 ;;		_Flash_Memory_Main
 11564 ;; This function uses a non-reentrant model
 11565 ;;
 11566                           
 11567                           
 11568                           ;psect for function _Flash_Memory_Modify
 11569  14FE                     _Flash_Memory_Modify:	
 11570                           
 11571                           ;MCU_B1.c: 975: char i = 0;
 11572                           
 11573                           ;incstack = 0
 11574                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11575  14FE  0020               	movlb	0	; select bank0
 11576  14FF  01A5               	clrf	Flash_Memory_Modify@i
 11577                           
 11578                           ;MCU_B1.c: 976: for (i = 0; i < 32; i++) {
 11579  1500  01A5               	clrf	Flash_Memory_Modify@i
 11580  1501  3020               	movlw	32
 11581  1502  0225               	subwf	Flash_Memory_Modify@i,w
 11582  1503  1803               	btfsc	3,0
 11583  1504  2D1A               	goto	l9837
 11584  1505                     l9831:	
 11585                           
 11586                           ;MCU_B1.c: 977: Memory.Data[i] = Flash_Memory_Read(i);
 11587  1505  0825               	movf	Flash_Memory_Modify@i,w
 11588  1506  319E  261F  3194   	fcall	_Flash_Memory_Read
 11589  1509  0020               	movlb	0	; select bank0
 11590  150A  00A4               	movwf	??_Flash_Memory_Modify
 11591  150B  0825               	movf	Flash_Memory_Modify@i,w
 11592  150C  3E20               	addlw	_Memory& (0+255)
 11593  150D  0086               	movwf	6
 11594  150E  3002               	movlw	2	; select bank4/5
 11595  150F  0087               	movwf	7
 11596  1510  0824               	movf	??_Flash_Memory_Modify,w
 11597  1511  0081               	movwf	1
 11598  1512  3001               	movlw	1
 11599  1513  00A4               	movwf	??_Flash_Memory_Modify
 11600  1514  0824               	movf	??_Flash_Memory_Modify,w
 11601  1515  07A5               	addwf	Flash_Memory_Modify@i,f
 11602  1516  3020               	movlw	32
 11603  1517  0225               	subwf	Flash_Memory_Modify@i,w
 11604  1518  1C03               	skipc
 11605  1519  2D05               	goto	l9831
 11606  151A                     l9837:	
 11607                           
 11608                           ;MCU_B1.c: 978: }
 11609                           ;MCU_B1.c: 979: setMemory_Data(0, product->Data[12]);
 11610  151A  087B               	movf	_product,w
 11611  151B  0086               	movwf	6
 11612  151C  3002               	movlw	2	; select bank4/5
 11613  151D  0087               	movwf	7
 11614  151E  3002               	movlw	2	; select bank4/5
 11615  151F  3F4C               	moviw [12]fsr1
 11616  1520  00A0               	movwf	setMemory_Data@data
 11617  1521  3000               	movlw	0
 11618  1522  319B  238C  3194   	fcall	_setMemory_Data
 11619                           
 11620                           ;MCU_B1.c: 980: setMemory_Data(1, product->Data[13]);
 11621  1525  087B               	movf	_product,w
 11622  1526  0086               	movwf	6
 11623  1527  3002               	movlw	2	; select bank4/5
 11624  1528  0087               	movwf	7
 11625  1529  3002               	movlw	2	; select bank4/5
 11626  152A  3F4D               	moviw [13]fsr1
 11627  152B  0020               	movlb	0	; select bank0
 11628  152C  00A0               	movwf	setMemory_Data@data
 11629  152D  3001               	movlw	1
 11630  152E  319B  238C  3194   	fcall	_setMemory_Data
 11631                           
 11632                           ;MCU_B1.c: 981: setMemory_Data(2, product->Data[14]);
 11633  1531  087B               	movf	_product,w
 11634  1532  0086               	movwf	6
 11635  1533  3002               	movlw	2	; select bank4/5
 11636  1534  0087               	movwf	7
 11637  1535  3002               	movlw	2	; select bank4/5
 11638  1536  3F4E               	moviw [14]fsr1
 11639  1537  0020               	movlb	0	; select bank0
 11640  1538  00A0               	movwf	setMemory_Data@data
 11641  1539  3002               	movlw	2
 11642  153A  319B  238C  3194   	fcall	_setMemory_Data
 11643                           
 11644                           ;MCU_B1.c: 987: if (Memory.LoopSave == 1) {
 11645  153D  0024               	movlb	4	; select bank4
 11646  153E  1D44               	btfss	(_Memory^(0+512)+36),2
 11647  153F  2D44               	goto	l1368
 11648                           
 11649                           ;MCU_B1.c: 988: Memory.LoopSave = 0;
 11650  1540  1144               	bcf	(_Memory^(0+512)+36),2
 11651                           
 11652                           ;MCU_B1.c: 989: myMain.FirstOpen = 0;
 11653  1541  0021               	movlb	1	; select bank1
 11654  1542  11A0               	bcf	_myMain^(0+128),3
 11655                           
 11656                           ;MCU_B1.c: 990: myMain.First = 0;
 11657  1543  12A0               	bcf	_myMain^(0+128),5
 11658  1544                     l1368:	
 11659                           
 11660                           ;MCU_B1.c: 992: }
 11661                           ;MCU_B1.c: 993: GIE = 0;
 11662  1544  138B               	bcf	11,7	;volatile
 11663                           
 11664                           ;MCU_B1.c: 994: Flash_Memory_Erasing();
 11665  1545  319B  2398  3194   	fcall	_Flash_Memory_Erasing
 11666                           
 11667                           ;MCU_B1.c: 995: Flash_Memory_Write();
 11668  1548  3191  2184         	fcall	_Flash_Memory_Write
 11669                           
 11670                           ;MCU_B1.c: 996: GIE = 1;
 11671  154A  178B               	bsf	11,7	;volatile
 11672  154B  0008               	return
 11673  154C                     __end_of_Flash_Memory_Modify:	
 11674                           
 11675                           	psect	text65
 11676  1B98                     __ptext65:	
 11677 ;; *************** function _Flash_Memory_Erasing *****************
 11678 ;; Defined at:
 11679 ;;		line 963 in file "../src/MCU_B1.c"
 11680 ;; Parameters:    Size  Location     Type
 11681 ;;		None
 11682 ;; Auto vars:     Size  Location     Type
 11683 ;;		None
 11684 ;; Return value:  Size  Location     Type
 11685 ;;		None               void
 11686 ;; Registers used:
 11687 ;;		wreg, status,2, status,0, pclath, cstack
 11688 ;; Tracked objects:
 11689 ;;		On entry : 0/0
 11690 ;;		On exit  : 0/0
 11691 ;;		Unchanged: 0/0
 11692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11697 ;;Total ram usage:        0 bytes
 11698 ;; Hardware stack levels used:    1
 11699 ;; Hardware stack levels required when called:    6
 11700 ;; This function calls:
 11701 ;;		_Flash_Memory_Unlock
 11702 ;; This function is called by:
 11703 ;;		_Flash_Memory_Modify
 11704 ;; This function uses a non-reentrant model
 11705 ;;
 11706                           
 11707                           
 11708                           ;psect for function _Flash_Memory_Erasing
 11709  1B98                     _Flash_Memory_Erasing:	
 11710                           
 11711                           ;MCU_B1.c: 964: CFGS = 0;
 11712                           
 11713                           ;incstack = 0
 11714                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11715  1B98  0023               	movlb	3	; select bank3
 11716  1B99  1315               	bcf	21,6	;volatile
 11717                           
 11718                           ;MCU_B1.c: 965: PMADRH = 0x30;
 11719  1B9A  3030               	movlw	48
 11720  1B9B  0092               	movwf	18	;volatile
 11721                           
 11722                           ;MCU_B1.c: 966: PMADRL = 0x00;
 11723  1B9C  0191               	clrf	17	;volatile
 11724                           
 11725                           ;MCU_B1.c: 967: FREE = 1;
 11726  1B9D  1615               	bsf	21,4	;volatile
 11727                           
 11728                           ;MCU_B1.c: 968: WREN = 1;
 11729  1B9E  1515               	bsf	21,2	;volatile
 11730                           
 11731                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 11732  1B9F  319B  2361         	fcall	_Flash_Memory_Unlock
 11733                           
 11734                           ;MCU_B1.c: 970: WREN = 0;
 11735  1BA1  0023               	movlb	3	; select bank3
 11736  1BA2  1115               	bcf	21,2	;volatile
 11737  1BA3  0008               	return
 11738  1BA4                     __end_of_Flash_Memory_Erasing:	
 11739                           
 11740                           	psect	text66
 11741  0695                     __ptext66:	
 11742 ;; *************** function _Flash_Memory_Initialization *****************
 11743 ;; Defined at:
 11744 ;;		line 860 in file "../src/MCU_B1.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;		None
 11747 ;; Auto vars:     Size  Location     Type
 11748 ;;  i               1   62[BANK0 ] unsigned char 
 11749 ;; Return value:  Size  Location     Type
 11750 ;;		None               void
 11751 ;; Registers used:
 11752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11753 ;; Tracked objects:
 11754 ;;		On entry : 0/0
 11755 ;;		On exit  : 0/0
 11756 ;;		Unchanged: 0/0
 11757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11759 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11760 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11762 ;;Total ram usage:        2 bytes
 11763 ;; Hardware stack levels used:    1
 11764 ;; Hardware stack levels required when called:    8
 11765 ;; This function calls:
 11766 ;;		_Flash_Memory_Read
 11767 ;;		_Flash_Memory_Write
 11768 ;;		_setMemory_Data
 11769 ;;		_setPercentValue
 11770 ;; This function is called by:
 11771 ;;		_main
 11772 ;; This function uses a non-reentrant model
 11773 ;;
 11774                           
 11775                           
 11776                           ;psect for function _Flash_Memory_Initialization
 11777  0695                     _Flash_Memory_Initialization:	
 11778                           
 11779                           ;MCU_B1.c: 861: char i = 0;
 11780                           
 11781                           ;incstack = 0
 11782                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11783  0695  0020               	movlb	0	; select bank0
 11784  0696  01DE               	clrf	Flash_Memory_Initialization@i
 11785                           
 11786                           ;MCU_B1.c: 862: if (Flash_Memory_Read(31) == 0xaa) {
 11787  0697  301F               	movlw	31
 11788  0698  319E  261F  3186   	fcall	_Flash_Memory_Read
 11789  069B  3AAA               	xorlw	170
 11790  069C  1D03               	skipz
 11791  069D  2F07               	goto	l10279
 11792                           
 11793                           ;MCU_B1.c: 863: product->Data[12] = Flash_Memory_Read(0);
 11794  069E  3000               	movlw	0
 11795  069F  319E  261F  3186   	fcall	_Flash_Memory_Read
 11796  06A2  0020               	movlb	0	; select bank0
 11797  06A3  00DD               	movwf	??_Flash_Memory_Initialization
 11798  06A4  087B               	movf	_product,w
 11799  06A5  3E0C               	addlw	12
 11800  06A6  0086               	movwf	6
 11801  06A7  3002               	movlw	2	; select bank4/5
 11802  06A8  0087               	movwf	7
 11803  06A9  085D               	movf	??_Flash_Memory_Initialization,w
 11804  06AA  0081               	movwf	1
 11805                           
 11806                           ;MCU_B1.c: 864: product->Data[13] = Flash_Memory_Read(1);
 11807  06AB  3001               	movlw	1
 11808  06AC  319E  261F  3186   	fcall	_Flash_Memory_Read
 11809  06AF  0020               	movlb	0	; select bank0
 11810  06B0  00DD               	movwf	??_Flash_Memory_Initialization
 11811  06B1  087B               	movf	_product,w
 11812  06B2  3E0D               	addlw	13
 11813  06B3  0086               	movwf	6
 11814  06B4  3002               	movlw	2	; select bank4/5
 11815  06B5  0087               	movwf	7
 11816  06B6  085D               	movf	??_Flash_Memory_Initialization,w
 11817  06B7  0081               	movwf	1
 11818                           
 11819                           ;MCU_B1.c: 865: product->Data[14] = Flash_Memory_Read(2);
 11820  06B8  3002               	movlw	2
 11821  06B9  319E  261F  3186   	fcall	_Flash_Memory_Read
 11822  06BC  0020               	movlb	0	; select bank0
 11823  06BD  00DD               	movwf	??_Flash_Memory_Initialization
 11824  06BE  087B               	movf	_product,w
 11825  06BF  3E0E               	addlw	14
 11826  06C0  0086               	movwf	6
 11827  06C1  3002               	movlw	2	; select bank4/5
 11828  06C2  0087               	movwf	7
 11829  06C3  085D               	movf	??_Flash_Memory_Initialization,w
 11830  06C4  0081               	movwf	1
 11831                           
 11832                           ;MCU_B1.c: 871: i = setPercentValue(((char)((100-60)*0.8)));
 11833  06C5  3020               	movlw	32
 11834  06C6  3194  2422  3186   	fcall	_setPercentValue
 11835  06C9  0020               	movlb	0	; select bank0
 11836  06CA  00DD               	movwf	??_Flash_Memory_Initialization
 11837  06CB  085D               	movf	??_Flash_Memory_Initialization,w
 11838  06CC  00DE               	movwf	Flash_Memory_Initialization@i
 11839                           
 11840                           ;MCU_B1.c: 872: product->Data[21] = i;
 11841  06CD  085E               	movf	Flash_Memory_Initialization@i,w
 11842  06CE  00DD               	movwf	??_Flash_Memory_Initialization
 11843  06CF  087B               	movf	_product,w
 11844  06D0  3E15               	addlw	21
 11845  06D1  0086               	movwf	6
 11846  06D2  3002               	movlw	2	; select bank4/5
 11847  06D3  0087               	movwf	7
 11848  06D4  085D               	movf	??_Flash_Memory_Initialization,w
 11849  06D5  0081               	movwf	1
 11850                           
 11851                           ;MCU_B1.c: 873: product->Data[22] = i;
 11852  06D6  085E               	movf	Flash_Memory_Initialization@i,w
 11853  06D7  00DD               	movwf	??_Flash_Memory_Initialization
 11854  06D8  087B               	movf	_product,w
 11855  06D9  3E16               	addlw	22
 11856  06DA  0086               	movwf	6
 11857  06DB  3002               	movlw	2	; select bank4/5
 11858  06DC  0087               	movwf	7
 11859  06DD  085D               	movf	??_Flash_Memory_Initialization,w
 11860  06DE  0081               	movwf	1
 11861                           
 11862                           ;MCU_B1.c: 874: product->Data[23] = i;
 11863  06DF  085E               	movf	Flash_Memory_Initialization@i,w
 11864  06E0  00DD               	movwf	??_Flash_Memory_Initialization
 11865  06E1  087B               	movf	_product,w
 11866  06E2  3E17               	addlw	23
 11867  06E3  0086               	movwf	6
 11868  06E4  3002               	movlw	2	; select bank4/5
 11869  06E5  0087               	movwf	7
 11870  06E6  085D               	movf	??_Flash_Memory_Initialization,w
 11871  06E7  0081               	movwf	1
 11872                           
 11873                           ;MCU_B1.c: 876: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11874  06E8  087B               	movf	_product,w
 11875  06E9  3E0C               	addlw	12
 11876  06EA  0086               	movwf	6
 11877  06EB  3002               	movlw	2	; select bank4/5
 11878  06EC  0087               	movwf	7
 11879  06ED  0801               	movf	1,w
 11880  06EE  3AFF               	xorlw	255
 11881  06EF  1D03               	skipz
 11882  06F0  0008               	return
 11883  06F1  087B               	movf	_product,w
 11884  06F2  3E0D               	addlw	13
 11885  06F3  0086               	movwf	6
 11886  06F4  3002               	movlw	2	; select bank4/5
 11887  06F5  0087               	movwf	7
 11888  06F6  0801               	movf	1,w
 11889  06F7  3AFF               	xorlw	255
 11890  06F8  1D03               	skipz
 11891  06F9  0008               	return
 11892  06FA  087B               	movf	_product,w
 11893  06FB  3E0E               	addlw	14
 11894  06FC  0086               	movwf	6
 11895  06FD  3002               	movlw	2	; select bank4/5
 11896  06FE  0087               	movwf	7
 11897  06FF  0801               	movf	1,w
 11898  0700  3AFF               	xorlw	255
 11899  0701  1D03               	skipz
 11900  0702  0008               	return
 11901                           
 11902                           ;MCU_B1.c: 877: myMain.FirstOpen = 1;
 11903  0703  0021               	movlb	1	; select bank1
 11904  0704  15A0               	bsf	_myMain^(0+128),3
 11905                           
 11906                           ;MCU_B1.c: 878: myMain.First = 1;
 11907  0705  16A0               	bsf	_myMain^(0+128),5
 11908                           
 11909                           ;MCU_B1.c: 879: }
 11910                           ;MCU_B1.c: 880: } else {
 11911  0706  0008               	return
 11912  0707                     l10279:	
 11913                           
 11914                           ;MCU_B1.c: 881: i = setPercentValue(((char)((100-60)*0.8)));
 11915  0707  3020               	movlw	32
 11916  0708  3194  2422  3186   	fcall	_setPercentValue
 11917  070B  0020               	movlb	0	; select bank0
 11918  070C  00DD               	movwf	??_Flash_Memory_Initialization
 11919  070D  085D               	movf	??_Flash_Memory_Initialization,w
 11920  070E  00DE               	movwf	Flash_Memory_Initialization@i
 11921                           
 11922                           ;MCU_B1.c: 882: setMemory_Data(0, 0xff);
 11923  070F  30FF               	movlw	255
 11924  0710  00DD               	movwf	??_Flash_Memory_Initialization
 11925  0711  085D               	movf	??_Flash_Memory_Initialization,w
 11926  0712  00A0               	movwf	setMemory_Data@data
 11927  0713  3000               	movlw	0
 11928  0714  319B  238C  3186   	fcall	_setMemory_Data
 11929                           
 11930                           ;MCU_B1.c: 883: setMemory_Data(1, 0xff);
 11931  0717  30FF               	movlw	255
 11932  0718  0020               	movlb	0	; select bank0
 11933  0719  00DD               	movwf	??_Flash_Memory_Initialization
 11934  071A  085D               	movf	??_Flash_Memory_Initialization,w
 11935  071B  00A0               	movwf	setMemory_Data@data
 11936  071C  3001               	movlw	1
 11937  071D  319B  238C  3186   	fcall	_setMemory_Data
 11938                           
 11939                           ;MCU_B1.c: 884: setMemory_Data(2, 0xff);
 11940  0720  30FF               	movlw	255
 11941  0721  0020               	movlb	0	; select bank0
 11942  0722  00DD               	movwf	??_Flash_Memory_Initialization
 11943  0723  085D               	movf	??_Flash_Memory_Initialization,w
 11944  0724  00A0               	movwf	setMemory_Data@data
 11945  0725  3002               	movlw	2
 11946  0726  319B  238C  3186   	fcall	_setMemory_Data
 11947                           
 11948                           ;MCU_B1.c: 885: setMemory_Data(3, 0xff);
 11949  0729  30FF               	movlw	255
 11950  072A  0020               	movlb	0	; select bank0
 11951  072B  00DD               	movwf	??_Flash_Memory_Initialization
 11952  072C  085D               	movf	??_Flash_Memory_Initialization,w
 11953  072D  00A0               	movwf	setMemory_Data@data
 11954  072E  3003               	movlw	3
 11955  072F  319B  238C  3186   	fcall	_setMemory_Data
 11956                           
 11957                           ;MCU_B1.c: 886: setMemory_Data(4, 0xff);
 11958  0732  30FF               	movlw	255
 11959  0733  0020               	movlb	0	; select bank0
 11960  0734  00DD               	movwf	??_Flash_Memory_Initialization
 11961  0735  085D               	movf	??_Flash_Memory_Initialization,w
 11962  0736  00A0               	movwf	setMemory_Data@data
 11963  0737  3004               	movlw	4
 11964  0738  319B  238C  3186   	fcall	_setMemory_Data
 11965                           
 11966                           ;MCU_B1.c: 887: setMemory_Data(5, 0xff);
 11967  073B  30FF               	movlw	255
 11968  073C  0020               	movlb	0	; select bank0
 11969  073D  00DD               	movwf	??_Flash_Memory_Initialization
 11970  073E  085D               	movf	??_Flash_Memory_Initialization,w
 11971  073F  00A0               	movwf	setMemory_Data@data
 11972  0740  3005               	movlw	5
 11973  0741  319B  238C  3186   	fcall	_setMemory_Data
 11974                           
 11975                           ;MCU_B1.c: 888: setMemory_Data(31, 0xaa);
 11976  0744  30AA               	movlw	170
 11977  0745  0020               	movlb	0	; select bank0
 11978  0746  00DD               	movwf	??_Flash_Memory_Initialization
 11979  0747  085D               	movf	??_Flash_Memory_Initialization,w
 11980  0748  00A0               	movwf	setMemory_Data@data
 11981  0749  301F               	movlw	31
 11982  074A  319B  238C  3186   	fcall	_setMemory_Data
 11983                           
 11984                           ;MCU_B1.c: 889: product->Data[21] = i;
 11985  074D  0020               	movlb	0	; select bank0
 11986  074E  085E               	movf	Flash_Memory_Initialization@i,w
 11987  074F  00DD               	movwf	??_Flash_Memory_Initialization
 11988  0750  087B               	movf	_product,w
 11989  0751  3E15               	addlw	21
 11990  0752  0086               	movwf	6
 11991  0753  3002               	movlw	2	; select bank4/5
 11992  0754  0087               	movwf	7
 11993  0755  085D               	movf	??_Flash_Memory_Initialization,w
 11994  0756  0081               	movwf	1
 11995                           
 11996                           ;MCU_B1.c: 890: product->Data[22] = i;
 11997  0757  085E               	movf	Flash_Memory_Initialization@i,w
 11998  0758  00DD               	movwf	??_Flash_Memory_Initialization
 11999  0759  087B               	movf	_product,w
 12000  075A  3E16               	addlw	22
 12001  075B  0086               	movwf	6
 12002  075C  3002               	movlw	2	; select bank4/5
 12003  075D  0087               	movwf	7
 12004  075E  085D               	movf	??_Flash_Memory_Initialization,w
 12005  075F  0081               	movwf	1
 12006                           
 12007                           ;MCU_B1.c: 891: product->Data[23] = i;
 12008  0760  085E               	movf	Flash_Memory_Initialization@i,w
 12009  0761  00DD               	movwf	??_Flash_Memory_Initialization
 12010  0762  087B               	movf	_product,w
 12011  0763  3E17               	addlw	23
 12012  0764  0086               	movwf	6
 12013  0765  3002               	movlw	2	; select bank4/5
 12014  0766  0087               	movwf	7
 12015  0767  085D               	movf	??_Flash_Memory_Initialization,w
 12016  0768  0081               	movwf	1
 12017                           
 12018                           ;MCU_B1.c: 892: GIE = 0;
 12019  0769  138B               	bcf	11,7	;volatile
 12020                           
 12021                           ;MCU_B1.c: 893: Flash_Memory_Write();
 12022  076A  3191  2184         	fcall	_Flash_Memory_Write
 12023                           
 12024                           ;MCU_B1.c: 894: GIE = 1;
 12025  076C  178B               	bsf	11,7	;volatile
 12026                           
 12027                           ;MCU_B1.c: 895: myMain.FirstOpen = 1;
 12028  076D  0021               	movlb	1	; select bank1
 12029  076E  15A0               	bsf	_myMain^(0+128),3
 12030                           
 12031                           ;MCU_B1.c: 896: myMain.First = 1;
 12032  076F  16A0               	bsf	_myMain^(0+128),5
 12033  0770  0008               	return
 12034  0771                     __end_of_Flash_Memory_Initialization:	
 12035                           
 12036                           	psect	text67
 12037  1B8C                     __ptext67:	
 12038 ;; *************** function _setMemory_Data *****************
 12039 ;; Defined at:
 12040 ;;		line 1011 in file "../src/MCU_B1.c"
 12041 ;; Parameters:    Size  Location     Type
 12042 ;;  address         1    wreg     unsigned char 
 12043 ;;  data            1    0[BANK0 ] unsigned char 
 12044 ;; Auto vars:     Size  Location     Type
 12045 ;;  address         1    2[BANK0 ] unsigned char 
 12046 ;; Return value:  Size  Location     Type
 12047 ;;		None               void
 12048 ;; Registers used:
 12049 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12050 ;; Tracked objects:
 12051 ;;		On entry : 0/0
 12052 ;;		On exit  : 0/0
 12053 ;;		Unchanged: 0/0
 12054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12055 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12057 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12058 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;Total ram usage:        3 bytes
 12060 ;; Hardware stack levels used:    1
 12061 ;; Hardware stack levels required when called:    5
 12062 ;; This function calls:
 12063 ;;		Nothing
 12064 ;; This function is called by:
 12065 ;;		_Flash_Memory_Initialization
 12066 ;;		_Flash_Memory_Modify
 12067 ;; This function uses a non-reentrant model
 12068 ;;
 12069                           
 12070                           
 12071                           ;psect for function _setMemory_Data
 12072  1B8C                     _setMemory_Data:	
 12073                           
 12074                           ;incstack = 0
 12075                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12076                           ;setMemory_Data@address stored from wreg
 12077  1B8C  0020               	movlb	0	; select bank0
 12078  1B8D  00A2               	movwf	setMemory_Data@address
 12079                           
 12080                           ;MCU_B1.c: 1012: Memory.Data[address] = data;
 12081  1B8E  0820               	movf	setMemory_Data@data,w
 12082  1B8F  00A1               	movwf	??_setMemory_Data
 12083  1B90  0822               	movf	setMemory_Data@address,w
 12084  1B91  3E20               	addlw	_Memory& (0+255)
 12085  1B92  0086               	movwf	6
 12086  1B93  3002               	movlw	2	; select bank4/5
 12087  1B94  0087               	movwf	7
 12088  1B95  0821               	movf	??_setMemory_Data,w
 12089  1B96  0081               	movwf	1
 12090  1B97  0008               	return
 12091  1B98                     __end_of_setMemory_Data:	
 12092                           
 12093                           	psect	text68
 12094  1184                     __ptext68:	
 12095 ;; *************** function _Flash_Memory_Write *****************
 12096 ;; Defined at:
 12097 ;;		line 944 in file "../src/MCU_B1.c"
 12098 ;; Parameters:    Size  Location     Type
 12099 ;;		None
 12100 ;; Auto vars:     Size  Location     Type
 12101 ;;  i               1    1[BANK0 ] unsigned char 
 12102 ;; Return value:  Size  Location     Type
 12103 ;;		None               void
 12104 ;; Registers used:
 12105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12106 ;; Tracked objects:
 12107 ;;		On entry : 0/0
 12108 ;;		On exit  : 0/0
 12109 ;;		Unchanged: 0/0
 12110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12112 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12114 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12115 ;;Total ram usage:        2 bytes
 12116 ;; Hardware stack levels used:    1
 12117 ;; Hardware stack levels required when called:    6
 12118 ;; This function calls:
 12119 ;;		_Flash_Memory_Unlock
 12120 ;; This function is called by:
 12121 ;;		_Flash_Memory_Initialization
 12122 ;;		_Flash_Memory_Modify
 12123 ;; This function uses a non-reentrant model
 12124 ;;
 12125                           
 12126                           
 12127                           ;psect for function _Flash_Memory_Write
 12128  1184                     _Flash_Memory_Write:	
 12129                           
 12130                           ;MCU_B1.c: 945: char i = 0;
 12131                           
 12132                           ;incstack = 0
 12133                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12134  1184  0020               	movlb	0	; select bank0
 12135  1185  01A1               	clrf	Flash_Memory_Write@i
 12136                           
 12137                           ;MCU_B1.c: 946: CFGS = 0;
 12138  1186  0023               	movlb	3	; select bank3
 12139  1187  1315               	bcf	21,6	;volatile
 12140                           
 12141                           ;MCU_B1.c: 947: PMADRH = 0x30;
 12142  1188  3030               	movlw	48
 12143  1189  0092               	movwf	18	;volatile
 12144                           
 12145                           ;MCU_B1.c: 948: PMDATH = 0;
 12146  118A  0194               	clrf	20	;volatile
 12147                           
 12148                           ;MCU_B1.c: 949: FREE = 0;
 12149  118B  1215               	bcf	21,4	;volatile
 12150                           
 12151                           ;MCU_B1.c: 950: LWLO = 1;
 12152  118C  1695               	bsf	21,5	;volatile
 12153                           
 12154                           ;MCU_B1.c: 951: WREN = 1;
 12155  118D  1515               	bsf	21,2	;volatile
 12156                           
 12157                           ;MCU_B1.c: 952: for (i = 0; i < 32; i++) {
 12158  118E  0020               	movlb	0	; select bank0
 12159  118F  01A1               	clrf	Flash_Memory_Write@i
 12160  1190  3020               	movlw	32
 12161  1191  0221               	subwf	Flash_Memory_Write@i,w
 12162  1192  1803               	btfsc	3,0
 12163  1193  29AC               	goto	l1359
 12164  1194                     l9487:	
 12165                           
 12166                           ;MCU_B1.c: 953: PMADRL = i;
 12167  1194  0821               	movf	Flash_Memory_Write@i,w
 12168  1195  0023               	movlb	3	; select bank3
 12169  1196  0091               	movwf	17	;volatile
 12170                           
 12171                           ;MCU_B1.c: 954: PMDATL = Memory.Data[i];
 12172  1197  0020               	movlb	0	; select bank0
 12173  1198  0821               	movf	Flash_Memory_Write@i,w
 12174  1199  3E20               	addlw	_Memory& (0+255)
 12175  119A  0086               	movwf	6
 12176  119B  3002               	movlw	2	; select bank4/5
 12177  119C  0087               	movwf	7
 12178  119D  0801               	movf	1,w
 12179  119E  0023               	movlb	3	; select bank3
 12180  119F  0093               	movwf	19	;volatile
 12181                           
 12182                           ;MCU_B1.c: 955: Flash_Memory_Unlock();
 12183  11A0  319B  2361  3191   	fcall	_Flash_Memory_Unlock
 12184  11A3  3001               	movlw	1
 12185  11A4  0020               	movlb	0	; select bank0
 12186  11A5  00A0               	movwf	??_Flash_Memory_Write
 12187  11A6  0820               	movf	??_Flash_Memory_Write,w
 12188  11A7  07A1               	addwf	Flash_Memory_Write@i,f
 12189  11A8  3020               	movlw	32
 12190  11A9  0221               	subwf	Flash_Memory_Write@i,w
 12191  11AA  1C03               	skipc
 12192  11AB  2994               	goto	l9487
 12193  11AC                     l1359:	
 12194                           
 12195                           ;MCU_B1.c: 956: }
 12196                           ;MCU_B1.c: 957: LWLO = 0;
 12197  11AC  0023               	movlb	3	; select bank3
 12198  11AD  1295               	bcf	21,5	;volatile
 12199                           
 12200                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 12201  11AE  319B  2361         	fcall	_Flash_Memory_Unlock
 12202                           
 12203                           ;MCU_B1.c: 959: WREN = 0;
 12204  11B0  0023               	movlb	3	; select bank3
 12205  11B1  1115               	bcf	21,2	;volatile
 12206  11B2  0008               	return
 12207  11B3                     __end_of_Flash_Memory_Write:	
 12208                           
 12209                           	psect	text69
 12210  1B61                     __ptext69:	
 12211 ;; *************** function _Flash_Memory_Unlock *****************
 12212 ;; Defined at:
 12213 ;;		line 923 in file "../src/MCU_B1.c"
 12214 ;; Parameters:    Size  Location     Type
 12215 ;;		None
 12216 ;; Auto vars:     Size  Location     Type
 12217 ;;		None
 12218 ;; Return value:  Size  Location     Type
 12219 ;;		None               void
 12220 ;; Registers used:
 12221 ;;		wreg
 12222 ;; Tracked objects:
 12223 ;;		On entry : 0/0
 12224 ;;		On exit  : 0/0
 12225 ;;		Unchanged: 0/0
 12226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12231 ;;Total ram usage:        0 bytes
 12232 ;; Hardware stack levels used:    1
 12233 ;; Hardware stack levels required when called:    5
 12234 ;; This function calls:
 12235 ;;		Nothing
 12236 ;; This function is called by:
 12237 ;;		_Flash_Memory_Write
 12238 ;;		_Flash_Memory_Erasing
 12239 ;; This function uses a non-reentrant model
 12240 ;;
 12241                           
 12242                           
 12243                           ;psect for function _Flash_Memory_Unlock
 12244  1B61                     _Flash_Memory_Unlock:	
 12245                           
 12246                           ;MCU_B1.c: 924: PMCON2 = 0x55;
 12247                           
 12248                           ;incstack = 0
 12249                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12250  1B61  3055               	movlw	85
 12251  1B62  0023               	movlb	3	; select bank3
 12252  1B63  0096               	movwf	22	;volatile
 12253                           
 12254                           ;MCU_B1.c: 925: PMCON2 = 0xaa;
 12255  1B64  30AA               	movlw	170
 12256  1B65  0096               	movwf	22	;volatile
 12257                           
 12258                           ;MCU_B1.c: 926: WR = 1;
 12259  1B66  1495               	bsf	21,1	;volatile
 12260                           
 12261                           ;MCU_B1.c: 927: __nop();
 12262  1B67  0000               	nop
 12263                           
 12264                           ;MCU_B1.c: 928: __nop();
 12265  1B68  0000               	nop
 12266  1B69  0008               	return
 12267  1B6A                     __end_of_Flash_Memory_Unlock:	
 12268                           
 12269                           	psect	text70
 12270  1E1F                     __ptext70:	
 12271 ;; *************** function _Flash_Memory_Read *****************
 12272 ;; Defined at:
 12273 ;;		line 932 in file "../src/MCU_B1.c"
 12274 ;; Parameters:    Size  Location     Type
 12275 ;;  address         1    wreg     unsigned char 
 12276 ;; Auto vars:     Size  Location     Type
 12277 ;;  address         1    2[BANK0 ] unsigned char 
 12278 ;;  ret             1    3[BANK0 ] unsigned char 
 12279 ;;  i               1    1[BANK0 ] unsigned char 
 12280 ;; Return value:  Size  Location     Type
 12281 ;;                  1    wreg      unsigned char 
 12282 ;; Registers used:
 12283 ;;		wreg, status,2
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;Total ram usage:        4 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; Hardware stack levels required when called:    5
 12296 ;; This function calls:
 12297 ;;		Nothing
 12298 ;; This function is called by:
 12299 ;;		_Flash_Memory_Initialization
 12300 ;;		_Flash_Memory_Modify
 12301 ;; This function uses a non-reentrant model
 12302 ;;
 12303                           
 12304                           
 12305                           ;psect for function _Flash_Memory_Read
 12306  1E1F                     _Flash_Memory_Read:	
 12307                           
 12308                           ;incstack = 0
 12309                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12310                           ;Flash_Memory_Read@address stored from wreg
 12311  1E1F  0020               	movlb	0	; select bank0
 12312  1E20  00A2               	movwf	Flash_Memory_Read@address
 12313                           
 12314                           ;MCU_B1.c: 933: char i = 0, ret = 0;
 12315  1E21  01A1               	clrf	Flash_Memory_Read@i
 12316  1E22  01A3               	clrf	Flash_Memory_Read@ret
 12317                           
 12318                           ;MCU_B1.c: 934: PMADRH = 0x30;
 12319  1E23  3030               	movlw	48
 12320  1E24  0023               	movlb	3	; select bank3
 12321  1E25  0092               	movwf	18	;volatile
 12322                           
 12323                           ;MCU_B1.c: 935: PMADRL = address;
 12324  1E26  0020               	movlb	0	; select bank0
 12325  1E27  0822               	movf	Flash_Memory_Read@address,w
 12326  1E28  0023               	movlb	3	; select bank3
 12327  1E29  0091               	movwf	17	;volatile
 12328                           
 12329                           ;MCU_B1.c: 936: CFGS = 0;
 12330  1E2A  1315               	bcf	21,6	;volatile
 12331                           
 12332                           ;MCU_B1.c: 937: RD = 1;
 12333  1E2B  1415               	bsf	21,0	;volatile
 12334                           
 12335                           ;MCU_B1.c: 938: i = PMDATH;
 12336  1E2C  0814               	movf	20,w	;volatile
 12337  1E2D  0020               	movlb	0	; select bank0
 12338  1E2E  00A0               	movwf	??_Flash_Memory_Read
 12339  1E2F  0820               	movf	??_Flash_Memory_Read,w
 12340  1E30  00A1               	movwf	Flash_Memory_Read@i
 12341                           
 12342                           ;MCU_B1.c: 939: ret = PMDATL;
 12343  1E31  0023               	movlb	3	; select bank3
 12344  1E32  0813               	movf	19,w	;volatile
 12345  1E33  0020               	movlb	0	; select bank0
 12346  1E34  00A0               	movwf	??_Flash_Memory_Read
 12347  1E35  0820               	movf	??_Flash_Memory_Read,w
 12348  1E36  00A3               	movwf	Flash_Memory_Read@ret
 12349                           
 12350                           ;MCU_B1.c: 940: return ret;
 12351  1E37  0823               	movf	Flash_Memory_Read@ret,w
 12352  1E38  0008               	return
 12353  1E39                     __end_of_Flash_Memory_Read:	
 12354                           
 12355                           	psect	text71
 12356  11E6                     __ptext71:	
 12357 ;; *************** function _DimmerLights_Main *****************
 12358 ;; Defined at:
 12359 ;;		line 416 in file "../src/Dimmer_B1.c"
 12360 ;; Parameters:    Size  Location     Type
 12361 ;;		None
 12362 ;; Auto vars:     Size  Location     Type
 12363 ;;		None
 12364 ;; Return value:  Size  Location     Type
 12365 ;;		None               void
 12366 ;; Registers used:
 12367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12368 ;; Tracked objects:
 12369 ;;		On entry : 0/0
 12370 ;;		On exit  : 0/0
 12371 ;;		Unchanged: 0/0
 12372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12374 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12375 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12376 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12377 ;;Total ram usage:        4 bytes
 12378 ;; Hardware stack levels used:    1
 12379 ;; Hardware stack levels required when called:   11
 12380 ;; This function calls:
 12381 ;;		_getLoad_OK
 12382 ;;		_getMain_All_Error_Status
 12383 ;;		_getMain_LightsStatus
 12384 ;;		_setDimmerLights_Main
 12385 ;; This function is called by:
 12386 ;;		_main
 12387 ;; This function uses a non-reentrant model
 12388 ;;
 12389                           
 12390                           
 12391                           ;psect for function _DimmerLights_Main
 12392  11E6                     _DimmerLights_Main:	
 12393                           
 12394                           ;Dimmer_B1.c: 418: if (getMain_All_Error_Status(0) == 0) {
 12395                           
 12396                           ;incstack = 0
 12397                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12398  11E6  3000               	movlw	0
 12399  11E7  3191  21B3  3191   	fcall	_getMain_All_Error_Status
 12400  11EA  3800               	iorlw	0
 12401  11EB  1D03               	skipz
 12402  11EC  2A10               	goto	l801
 12403                           
 12404                           ;Dimmer_B1.c: 419: if (Dimmer.LoadOK == 1) {
 12405  11ED  0021               	movlb	1	; select bank1
 12406  11EE  1CC8               	btfss	_Dimmer^(0+128),1
 12407  11EF  2A12               	goto	l10249
 12408                           
 12409                           ;Dimmer_B1.c: 420: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12410  11F0  319B  2351  3191   	fcall	_getLoad_OK
 12411  11F3  3A01               	xorlw	1
 12412  11F4  1903               	skipnz
 12413  11F5  2A07               	goto	l10245
 12414  11F6  3191  2158  3191   	fcall	_getMain_LightsStatus
 12415  11F9  3A00               	xorlw	0
 12416  11FA  1903               	skipnz
 12417  11FB  2A07               	goto	l10245
 12418  11FC  0021               	movlb	1	; select bank1
 12419  11FD  0C48               	rrf	_Dimmer^(0+128),w
 12420  11FE  3901               	andlw	1
 12421  11FF  0020               	movlb	0	; select bank0
 12422  1200  00E6               	movwf	??_DimmerLights_Main
 12423  1201  01E7               	clrf	??_DimmerLights_Main+1
 12424  1202  0866               	movf	??_DimmerLights_Main,w
 12425  1203  00E8               	movwf	_DimmerLights_Main$2509
 12426  1204  0867               	movf	??_DimmerLights_Main+1,w
 12427  1205  00E9               	movwf	_DimmerLights_Main$2509+1
 12428  1206  2A0A               	goto	l10247
 12429  1207                     l10245:	
 12430  1207  0020               	movlb	0	; select bank0
 12431  1208  01E8               	clrf	_DimmerLights_Main$2509
 12432  1209  01E9               	clrf	_DimmerLights_Main$2509+1
 12433  120A                     l10247:	
 12434  120A  0868               	movf	_DimmerLights_Main$2509,w
 12435  120B  0021               	movlb	1	; select bank1
 12436  120C  10C8               	bcf	_Dimmer^(0+128),1
 12437  120D  1D03               	skipz
 12438  120E  14C8               	bsf	_Dimmer^(0+128),1
 12439                           
 12440                           ;Dimmer_B1.c: 421: }
 12441                           ;Dimmer_B1.c: 422: } else {
 12442  120F  2A12               	goto	l10249
 12443  1210                     l801:	
 12444                           
 12445                           ;Dimmer_B1.c: 423: Dimmer.LoadOK = 0;
 12446  1210  0021               	movlb	1	; select bank1
 12447  1211  10C8               	bcf	_Dimmer^(0+128),1
 12448  1212                     l10249:	
 12449                           
 12450                           ;Dimmer_B1.c: 424: }
 12451                           ;Dimmer_B1.c: 428: setDimmerLights_Main(1);
 12452  1212  3001               	movlw	1
 12453  1213  3196  2643  3191   	fcall	_setDimmerLights_Main
 12454                           
 12455                           ;Dimmer_B1.c: 432: setDimmerLights_Main(2);
 12456  1216  3002               	movlw	2
 12457  1217  3196  2643         	fcall	_setDimmerLights_Main
 12458  1219  0008               	return
 12459  121A                     __end_of_DimmerLights_Main:	
 12460                           
 12461                           	psect	text72
 12462  1643                     __ptext72:	
 12463 ;; *************** function _setDimmerLights_Main *****************
 12464 ;; Defined at:
 12465 ;;		line 442 in file "../src/Dimmer_B1.c"
 12466 ;; Parameters:    Size  Location     Type
 12467 ;;  lights          1    wreg     unsigned char 
 12468 ;; Auto vars:     Size  Location     Type
 12469 ;;  lights          1   69[BANK0 ] unsigned char 
 12470 ;; Return value:  Size  Location     Type
 12471 ;;		None               void
 12472 ;; Registers used:
 12473 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12474 ;; Tracked objects:
 12475 ;;		On entry : 0/0
 12476 ;;		On exit  : 0/0
 12477 ;;		Unchanged: 0/0
 12478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12480 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12482 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12483 ;;Total ram usage:        1 bytes
 12484 ;; Hardware stack levels used:    1
 12485 ;; Hardware stack levels required when called:   10
 12486 ;; This function calls:
 12487 ;;		_DimmerLightsPointSelect
 12488 ;;		_setBuz
 12489 ;;		_setDimmerLights
 12490 ;;		_setDimmerLights_Adj
 12491 ;; This function is called by:
 12492 ;;		_DimmerLights_Main
 12493 ;; This function uses a non-reentrant model
 12494 ;;
 12495                           
 12496                           
 12497                           ;psect for function _setDimmerLights_Main
 12498  1643                     _setDimmerLights_Main:	
 12499                           
 12500                           ;incstack = 0
 12501                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12502                           ;setDimmerLights_Main@lights stored from wreg
 12503  1643  0020               	movlb	0	; select bank0
 12504  1644  00E5               	movwf	setDimmerLights_Main@lights
 12505                           
 12506                           ;Dimmer_B1.c: 443: DimmerLightsPointSelect(lights);
 12507  1645  0865               	movf	setDimmerLights_Main@lights,w
 12508  1646  319C  24B6  3196   	fcall	_DimmerLightsPointSelect
 12509                           
 12510                           ;Dimmer_B1.c: 444: if (DimmerLights->Trigger == 1) {
 12511  1649  0877               	movf	_DimmerLights,w
 12512  164A  3E08               	addlw	8
 12513  164B  0086               	movwf	6
 12514  164C  3001               	movlw	1	; select bank2/3
 12515  164D  0087               	movwf	7
 12516  164E  1D01               	btfss	1,2
 12517  164F  2E6D               	goto	l9719
 12518                           
 12519                           ;Dimmer_B1.c: 446: if (Dimmer.LoadOK == 0) {
 12520  1650  0021               	movlb	1	; select bank1
 12521  1651  18C8               	btfsc	_Dimmer^(0+128),1
 12522  1652  0008               	return
 12523                           
 12524                           ;Dimmer_B1.c: 447: DimmerLights->Trigger = 0;
 12525  1653  0877               	movf	_DimmerLights,w
 12526  1654  3E08               	addlw	8
 12527  1655  0086               	movwf	6
 12528  1656  3001               	movlw	1	; select bank2/3
 12529  1657  0087               	movwf	7
 12530  1658  1101               	bcf	1,2
 12531                           
 12532                           ;Dimmer_B1.c: 449: if (DimmerLights->Switch == 1) {
 12533  1659  0877               	movf	_DimmerLights,w
 12534  165A  3E08               	addlw	8
 12535  165B  0086               	movwf	6
 12536  165C  3001               	movlw	1	; select bank2/3
 12537  165D  0087               	movwf	7
 12538  165E  1C81               	btfss	1,1
 12539  165F  2E67               	goto	l9717
 12540                           
 12541                           ;Dimmer_B1.c: 450: setDimmerLights(lights, 1);
 12542  1660  0020               	movlb	0	; select bank0
 12543  1661  01A7               	clrf	setDimmerLights@status
 12544  1662  0AA7               	incf	setDimmerLights@status,f
 12545  1663  0865               	movf	setDimmerLights_Main@lights,w
 12546  1664  318C  2470         	fcall	_setDimmerLights
 12547                           
 12548                           ;Dimmer_B1.c: 451: } else {
 12549  1666  0008               	return
 12550  1667                     l9717:	
 12551                           
 12552                           ;Dimmer_B1.c: 452: setDimmerLights(lights, 0);
 12553  1667  0020               	movlb	0	; select bank0
 12554  1668  01A7               	clrf	setDimmerLights@status
 12555  1669  0865               	movf	setDimmerLights_Main@lights,w
 12556  166A  318C  2470         	fcall	_setDimmerLights
 12557                           
 12558                           ;Dimmer_B1.c: 453: }
 12559                           ;Dimmer_B1.c: 454: }
 12560                           ;Dimmer_B1.c: 455: } else {
 12561  166C  0008               	return
 12562  166D                     l9719:	
 12563                           
 12564                           ;Dimmer_B1.c: 456: if (DimmerLights->TriggerAdj == 1) {
 12565  166D  0877               	movf	_DimmerLights,w
 12566  166E  3E08               	addlw	8
 12567  166F  0086               	movwf	6
 12568  1670  3001               	movlw	1	; select bank2/3
 12569  1671  0087               	movwf	7
 12570  1672  1E01               	btfss	1,4
 12571  1673  0008               	return
 12572                           
 12573                           ;Dimmer_B1.c: 457: if (Dimmer.LoadOK == 0) {
 12574  1674  0021               	movlb	1	; select bank1
 12575  1675  18C8               	btfsc	_Dimmer^(0+128),1
 12576  1676  0008               	return
 12577                           
 12578                           ;Dimmer_B1.c: 458: DimmerLights->TriggerAdj = 0;
 12579  1677  0877               	movf	_DimmerLights,w
 12580  1678  3E08               	addlw	8
 12581  1679  0086               	movwf	6
 12582  167A  3001               	movlw	1	; select bank2/3
 12583  167B  0087               	movwf	7
 12584  167C  1201               	bcf	1,4
 12585                           
 12586                           ;Dimmer_B1.c: 459: if (DimmerLights->AdjGo == 1) {
 12587  167D  0877               	movf	_DimmerLights,w
 12588  167E  3E08               	addlw	8
 12589  167F  0086               	movwf	6
 12590  1680  3001               	movlw	1	; select bank2/3
 12591  1681  0087               	movwf	7
 12592  1682  1D81               	btfss	1,3
 12593  1683  2E94               	goto	l9729
 12594                           
 12595                           ;Dimmer_B1.c: 460: setDimmerLights_Adj(lights, 1);
 12596  1684  0020               	movlb	0	; select bank0
 12597  1685  01E2               	clrf	setDimmerLights_Adj@status
 12598  1686  0AE2               	incf	setDimmerLights_Adj@status,f
 12599  1687  0865               	movf	setDimmerLights_Main@lights,w
 12600  1688  3195  254C  3196   	fcall	_setDimmerLights_Adj
 12601                           
 12602                           ;Dimmer_B1.c: 461: setBuz(1, 100);
 12603  168B  3064               	movlw	100
 12604  168C  0020               	movlb	0	; select bank0
 12605  168D  00A9               	movwf	setBuz@time
 12606  168E  3000               	movlw	0
 12607  168F  00AA               	movwf	setBuz@time+1
 12608  1690  3001               	movlw	1
 12609  1691  3196  26F2         	fcall	_setBuz
 12610                           
 12611                           ;Dimmer_B1.c: 462: } else {
 12612  1693  0008               	return
 12613  1694                     l9729:	
 12614                           
 12615                           ;Dimmer_B1.c: 463: setDimmerLights_Adj(lights, 0);
 12616  1694  0020               	movlb	0	; select bank0
 12617  1695  01E2               	clrf	setDimmerLights_Adj@status
 12618  1696  0865               	movf	setDimmerLights_Main@lights,w
 12619  1697  3195  254C         	fcall	_setDimmerLights_Adj
 12620  1699  0008               	return
 12621  169A                     __end_of_setDimmerLights_Main:	
 12622                           
 12623                           	psect	text73
 12624  154C                     __ptext73:	
 12625 ;; *************** function _setDimmerLights_Adj *****************
 12626 ;; Defined at:
 12627 ;;		line 771 in file "../src/Dimmer_B1.c"
 12628 ;; Parameters:    Size  Location     Type
 12629 ;;  lights          1    wreg     unsigned char 
 12630 ;;  status          1   66[BANK0 ] unsigned char 
 12631 ;; Auto vars:     Size  Location     Type
 12632 ;;  lights          1   68[BANK0 ] unsigned char 
 12633 ;; Return value:  Size  Location     Type
 12634 ;;		None               void
 12635 ;; Registers used:
 12636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12637 ;; Tracked objects:
 12638 ;;		On entry : 0/0
 12639 ;;		On exit  : 0/0
 12640 ;;		Unchanged: 0/0
 12641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12642 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12643 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12646 ;;Total ram usage:        3 bytes
 12647 ;; Hardware stack levels used:    1
 12648 ;; Hardware stack levels required when called:    9
 12649 ;; This function calls:
 12650 ;;		_DimmerLightsPointSelect
 12651 ;;		_getMain_All_Error_Status
 12652 ;;		_setRF_DimmerLights
 12653 ;;		_setTxData
 12654 ;; This function is called by:
 12655 ;;		_setDimmerLights_Main
 12656 ;; This function uses a non-reentrant model
 12657 ;;
 12658                           
 12659                           
 12660                           ;psect for function _setDimmerLights_Adj
 12661  154C                     _setDimmerLights_Adj:	
 12662                           
 12663                           ;incstack = 0
 12664                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12665                           ;setDimmerLights_Adj@lights stored from wreg
 12666  154C  0020               	movlb	0	; select bank0
 12667  154D  00E4               	movwf	setDimmerLights_Adj@lights
 12668                           
 12669                           ;Dimmer_B1.c: 772: DimmerLightsPointSelect(lights);
 12670  154E  0864               	movf	setDimmerLights_Adj@lights,w
 12671  154F  319C  24B6  3195   	fcall	_DimmerLightsPointSelect
 12672                           
 12673                           ;Dimmer_B1.c: 773: if (status == 1) {
 12674  1552  0020               	movlb	0	; select bank0
 12675  1553  0862               	movf	setDimmerLights_Adj@status,w
 12676  1554  3A01               	xorlw	1
 12677  1555  1D03               	skipz
 12678  1556  2D62               	goto	l9347
 12679                           
 12680                           ;Dimmer_B1.c: 774: DimmerLights->AdjFlag = 1;
 12681  1557  0877               	movf	_DimmerLights,w
 12682  1558  0086               	movwf	6
 12683  1559  3001               	movlw	1	; select bank2/3
 12684  155A  0087               	movwf	7
 12685  155B  1581               	bsf	1,3
 12686                           
 12687                           ;Dimmer_B1.c: 775: DimmerLights->Signal = 1;
 12688  155C  0877               	movf	_DimmerLights,w
 12689  155D  0086               	movwf	6
 12690  155E  3001               	movlw	1	; select bank2/3
 12691  155F  0087               	movwf	7
 12692  1560  1481               	bsf	1,1
 12693                           
 12694                           ;Dimmer_B1.c: 776: } else {
 12695  1561  0008               	return
 12696  1562                     l9347:	
 12697                           
 12698                           ;Dimmer_B1.c: 777: if (DimmerLights->AdjFlag == 1) {
 12699  1562  0877               	movf	_DimmerLights,w
 12700  1563  0086               	movwf	6
 12701  1564  3001               	movlw	1	; select bank2/3
 12702  1565  0087               	movwf	7
 12703  1566  1D81               	btfss	1,3
 12704  1567  0008               	return
 12705                           
 12706                           ;Dimmer_B1.c: 778: DimmerLights->Signal = 0;
 12707  1568  0877               	movf	_DimmerLights,w
 12708  1569  0086               	movwf	6
 12709  156A  3001               	movlw	1	; select bank2/3
 12710  156B  0087               	movwf	7
 12711  156C  1081               	bcf	1,1
 12712                           
 12713                           ;Dimmer_B1.c: 779: DimmerLights->AdjFlag = 0;
 12714  156D  0877               	movf	_DimmerLights,w
 12715  156E  0086               	movwf	6
 12716  156F  3001               	movlw	1	; select bank2/3
 12717  1570  0087               	movwf	7
 12718  1571  1181               	bcf	1,3
 12719                           
 12720                           ;Dimmer_B1.c: 780: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12721  1572  0877               	movf	_DimmerLights,w
 12722  1573  3E04               	addlw	4
 12723  1574  0086               	movwf	6
 12724  1575  3001               	movlw	1	; select bank2/3
 12725  1576  0087               	movwf	7
 12726  1577  0801               	movf	1,w
 12727  1578  00E3               	movwf	??_setDimmerLights_Adj
 12728  1579  0877               	movf	_DimmerLights,w
 12729  157A  3E05               	addlw	5
 12730  157B  0086               	movwf	6
 12731  157C  3001               	movlw	1	; select bank2/3
 12732  157D  0087               	movwf	7
 12733  157E  0863               	movf	??_setDimmerLights_Adj,w
 12734  157F  0081               	movwf	1
 12735                           
 12736                           ;Dimmer_B1.c: 790: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12737  1580  3000               	movlw	0
 12738  1581  3191  21B3  3195   	fcall	_getMain_All_Error_Status
 12739  1584  3A00               	xorlw	0
 12740  1585  3000               	movlw	0
 12741  1586  1903               	skipnz
 12742  1587  3001               	movlw	1
 12743  1588  0020               	movlb	0	; select bank0
 12744  1589  00E3               	movwf	??_setDimmerLights_Adj
 12745  158A  0DE3               	rlf	??_setDimmerLights_Adj,f
 12746  158B  0021               	movlb	1	; select bank1
 12747  158C  0848               	movf	_Dimmer^(0+128),w
 12748  158D  0020               	movlb	0	; select bank0
 12749  158E  0663               	xorwf	??_setDimmerLights_Adj,w
 12750  158F  39FD               	andlw	-3
 12751  1590  0663               	xorwf	??_setDimmerLights_Adj,w
 12752  1591  0021               	movlb	1	; select bank1
 12753  1592  00C8               	movwf	_Dimmer^(0+128)
 12754                           
 12755                           ;Dimmer_B1.c: 793: setRF_DimmerLights(lights, 1);
 12756  1593  0020               	movlb	0	; select bank0
 12757  1594  01DD               	clrf	setRF_DimmerLights@on
 12758  1595  0ADD               	incf	setRF_DimmerLights@on,f
 12759  1596  0864               	movf	setDimmerLights_Adj@lights,w
 12760  1597  318A  22B1  3195   	fcall	_setRF_DimmerLights
 12761                           
 12762                           ;Dimmer_B1.c: 794: setTxData();
 12763  159A  318D  2571         	fcall	_setTxData
 12764  159C  0008               	return
 12765  159D                     __end_of_setDimmerLights_Adj:	
 12766                           
 12767                           	psect	text74
 12768  0C70                     __ptext74:	
 12769 ;; *************** function _setDimmerLights *****************
 12770 ;; Defined at:
 12771 ;;		line 671 in file "../src/Dimmer_B1.c"
 12772 ;; Parameters:    Size  Location     Type
 12773 ;;  lights          1    wreg     unsigned char 
 12774 ;;  status          1    7[BANK0 ] unsigned char 
 12775 ;; Auto vars:     Size  Location     Type
 12776 ;;  lights          1    9[BANK0 ] unsigned char 
 12777 ;; Return value:  Size  Location     Type
 12778 ;;		None               void
 12779 ;; Registers used:
 12780 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12781 ;; Tracked objects:
 12782 ;;		On entry : 0/0
 12783 ;;		On exit  : 0/0
 12784 ;;		Unchanged: 0/0
 12785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12786 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12787 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12788 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12789 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;Total ram usage:        3 bytes
 12791 ;; Hardware stack levels used:    1
 12792 ;; Hardware stack levels required when called:    7
 12793 ;; This function calls:
 12794 ;;		_DimmerLightsPointSelect
 12795 ;;		_getMain_All_Error_Status
 12796 ;;		_setDimmerLights_Line
 12797 ;;		_setLED
 12798 ;; This function is called by:
 12799 ;;		_setDimmerLights_Main
 12800 ;; This function uses a non-reentrant model
 12801 ;;
 12802                           
 12803                           
 12804                           ;psect for function _setDimmerLights
 12805  0C70                     _setDimmerLights:	
 12806                           
 12807                           ;incstack = 0
 12808                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12809                           ;setDimmerLights@lights stored from wreg
 12810  0C70  0020               	movlb	0	; select bank0
 12811  0C71  00A9               	movwf	setDimmerLights@lights
 12812                           
 12813                           ;Dimmer_B1.c: 672: DimmerLightsPointSelect(lights);
 12814  0C72  0829               	movf	setDimmerLights@lights,w
 12815  0C73  319C  24B6  318C   	fcall	_DimmerLightsPointSelect
 12816                           
 12817                           ;Dimmer_B1.c: 675: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12818  0C76  3000               	movlw	0
 12819  0C77  3191  21B3  318C   	fcall	_getMain_All_Error_Status
 12820  0C7A  3A00               	xorlw	0
 12821  0C7B  3000               	movlw	0
 12822  0C7C  1903               	skipnz
 12823  0C7D  3001               	movlw	1
 12824  0C7E  0020               	movlb	0	; select bank0
 12825  0C7F  00A8               	movwf	??_setDimmerLights
 12826  0C80  0DA8               	rlf	??_setDimmerLights,f
 12827  0C81  0021               	movlb	1	; select bank1
 12828  0C82  0848               	movf	_Dimmer^(0+128),w
 12829  0C83  0020               	movlb	0	; select bank0
 12830  0C84  0628               	xorwf	??_setDimmerLights,w
 12831  0C85  39FD               	andlw	-3
 12832  0C86  0628               	xorwf	??_setDimmerLights,w
 12833  0C87  0021               	movlb	1	; select bank1
 12834  0C88  00C8               	movwf	_Dimmer^(0+128)
 12835                           
 12836                           ;Dimmer_B1.c: 679: if (status == 1) {
 12837  0C89  0020               	movlb	0	; select bank0
 12838  0C8A  0827               	movf	setDimmerLights@status,w
 12839  0C8B  3A01               	xorlw	1
 12840  0C8C  1D03               	skipz
 12841  0C8D  2CC4               	goto	l9339
 12842                           
 12843                           ;Dimmer_B1.c: 680: setLED(lights, 0);
 12844  0C8E  01A2               	clrf	setLED@command
 12845  0C8F  0829               	movf	setDimmerLights@lights,w
 12846  0C90  3189  2186  318C   	fcall	_setLED
 12847                           
 12848                           ;Dimmer_B1.c: 682: setDimmerLights_Line(lights);
 12849  0C93  0020               	movlb	0	; select bank0
 12850  0C94  0829               	movf	setDimmerLights@lights,w
 12851  0C95  319D  257C  318C   	fcall	_setDimmerLights_Line
 12852                           
 12853                           ;Dimmer_B1.c: 683: DimmerLights->StatusFlag = 1;
 12854  0C98  0877               	movf	_DimmerLights,w
 12855  0C99  0086               	movwf	6
 12856  0C9A  3001               	movlw	1	; select bank2/3
 12857  0C9B  0087               	movwf	7
 12858  0C9C  1701               	bsf	1,6
 12859                           
 12860                           ;Dimmer_B1.c: 685: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12861  0C9D  0877               	movf	_DimmerLights,w
 12862  0C9E  3E05               	addlw	5
 12863  0C9F  0086               	movwf	6
 12864  0CA0  3001               	movlw	1	; select bank2/3
 12865  0CA1  0087               	movwf	7
 12866  0CA2  0801               	movf	1,w
 12867  0CA3  0020               	movlb	0	; select bank0
 12868  0CA4  00A8               	movwf	??_setDimmerLights
 12869  0CA5  0877               	movf	_DimmerLights,w
 12870  0CA6  3E04               	addlw	4
 12871  0CA7  0086               	movwf	6
 12872  0CA8  3001               	movlw	1	; select bank2/3
 12873  0CA9  0087               	movwf	7
 12874  0CAA  0828               	movf	??_setDimmerLights,w
 12875  0CAB  0081               	movwf	1
 12876                           
 12877                           ;Dimmer_B1.c: 689: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 12878  0CAC  3020               	movlw	32
 12879  0CAD  00A8               	movwf	??_setDimmerLights
 12880  0CAE  0877               	movf	_DimmerLights,w
 12881  0CAF  3E04               	addlw	4
 12882  0CB0  0086               	movwf	6
 12883  0CB1  3001               	movlw	1	; select bank2/3
 12884  0CB2  0087               	movwf	7
 12885  0CB3  0828               	movf	??_setDimmerLights,w
 12886  0CB4  0081               	movwf	1
 12887                           
 12888                           ;Dimmer_B1.c: 693: DimmerLights->Signal = 1;
 12889  0CB5  0877               	movf	_DimmerLights,w
 12890  0CB6  0086               	movwf	6
 12891  0CB7  3001               	movlw	1	; select bank2/3
 12892  0CB8  0087               	movwf	7
 12893  0CB9  1481               	bsf	1,1
 12894                           
 12895                           ;Dimmer_B1.c: 694: DimmerLights->DimmingTimeValue = 7;
 12896  0CBA  3007               	movlw	7
 12897  0CBB  00A8               	movwf	??_setDimmerLights
 12898  0CBC  0877               	movf	_DimmerLights,w
 12899  0CBD  3E02               	addlw	2
 12900  0CBE  0086               	movwf	6
 12901  0CBF  3001               	movlw	1	; select bank2/3
 12902  0CC0  0087               	movwf	7
 12903  0CC1  0828               	movf	??_setDimmerLights,w
 12904  0CC2  0081               	movwf	1
 12905                           
 12906                           ;Dimmer_B1.c: 696: } else {
 12907  0CC3  0008               	return
 12908  0CC4                     l9339:	
 12909                           
 12910                           ;Dimmer_B1.c: 698: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12911  0CC4  0877               	movf	_DimmerLights,w
 12912  0CC5  3E06               	addlw	6
 12913  0CC6  0086               	movwf	6
 12914  0CC7  3001               	movlw	1	; select bank2/3
 12915  0CC8  0087               	movwf	7
 12916  0CC9  0801               	movf	1,w
 12917  0CCA  00A8               	movwf	??_setDimmerLights
 12918  0CCB  0877               	movf	_DimmerLights,w
 12919  0CCC  3E04               	addlw	4
 12920  0CCD  0086               	movwf	6
 12921  0CCE  3001               	movlw	1	; select bank2/3
 12922  0CCF  0087               	movwf	7
 12923  0CD0  0828               	movf	??_setDimmerLights,w
 12924  0CD1  0081               	movwf	1
 12925                           
 12926                           ;Dimmer_B1.c: 705: DimmerLights->Signal = 1;
 12927  0CD2  0877               	movf	_DimmerLights,w
 12928  0CD3  0086               	movwf	6
 12929  0CD4  3001               	movlw	1	; select bank2/3
 12930  0CD5  0087               	movwf	7
 12931  0CD6  1481               	bsf	1,1
 12932                           
 12933                           ;Dimmer_B1.c: 706: DimmerLights->AdjFlag = 0;
 12934  0CD7  0877               	movf	_DimmerLights,w
 12935  0CD8  0086               	movwf	6
 12936  0CD9  3001               	movlw	1	; select bank2/3
 12937  0CDA  0087               	movwf	7
 12938  0CDB  1181               	bcf	1,3
 12939                           
 12940                           ;Dimmer_B1.c: 707: DimmerLights->AdjStatus = 0;
 12941  0CDC  0877               	movf	_DimmerLights,w
 12942  0CDD  0086               	movwf	6
 12943  0CDE  3001               	movlw	1	; select bank2/3
 12944  0CDF  0087               	movwf	7
 12945  0CE0  1201               	bcf	1,4
 12946                           
 12947                           ;Dimmer_B1.c: 708: DimmerLights->AdjRF = 0;
 12948  0CE1  0877               	movf	_DimmerLights,w
 12949  0CE2  0086               	movwf	6
 12950  0CE3  3001               	movlw	1	; select bank2/3
 12951  0CE4  0087               	movwf	7
 12952  0CE5  1101               	bcf	1,2
 12953                           
 12954                           ;Dimmer_B1.c: 709: DimmerLights->DimmingTimeValue = 7;
 12955  0CE6  3007               	movlw	7
 12956  0CE7  00A8               	movwf	??_setDimmerLights
 12957  0CE8  0877               	movf	_DimmerLights,w
 12958  0CE9  3E02               	addlw	2
 12959  0CEA  0086               	movwf	6
 12960  0CEB  3001               	movlw	1	; select bank2/3
 12961  0CEC  0087               	movwf	7
 12962  0CED  0828               	movf	??_setDimmerLights,w
 12963  0CEE  0081               	movwf	1
 12964  0CEF  0008               	return
 12965  0CF0                     __end_of_setDimmerLights:	
 12966                           
 12967                           	psect	text75
 12968  0986                     __ptext75:	
 12969 ;; *************** function _setLED *****************
 12970 ;; Defined at:
 12971 ;;		line 73 in file "../src/LED_B1.c"
 12972 ;; Parameters:    Size  Location     Type
 12973 ;;  led             1    wreg     unsigned char 
 12974 ;;  command         1    2[BANK0 ] unsigned char 
 12975 ;; Auto vars:     Size  Location     Type
 12976 ;;  led             1    3[BANK0 ] unsigned char 
 12977 ;; Return value:  Size  Location     Type
 12978 ;;		None               void
 12979 ;; Registers used:
 12980 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12981 ;; Tracked objects:
 12982 ;;		On entry : 0/0
 12983 ;;		On exit  : 0/0
 12984 ;;		Unchanged: 0/0
 12985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12986 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12987 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12989 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;Total ram usage:        2 bytes
 12991 ;; Hardware stack levels used:    1
 12992 ;; Hardware stack levels required when called:    6
 12993 ;; This function calls:
 12994 ;;		_LedPointSelect
 12995 ;; This function is called by:
 12996 ;;		_setDimmerLights
 12997 ;;		_setLED_Initialization
 12998 ;;		_setMain_Exception
 12999 ;;		_setSw_Initialization
 13000 ;; This function uses a non-reentrant model
 13001 ;;
 13002                           
 13003                           
 13004                           ;psect for function _setLED
 13005  0986                     _setLED:	
 13006                           
 13007                           ;incstack = 0
 13008                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13009                           ;setLED@led stored from wreg
 13010  0986  0020               	movlb	0	; select bank0
 13011  0987  00A3               	movwf	setLED@led
 13012                           
 13013                           ;LED_B1.c: 74: LedPointSelect(led);
 13014  0988  0823               	movf	setLED@led,w
 13015  0989  319F  2750  3189   	fcall	_LedPointSelect
 13016                           
 13017                           ;LED_B1.c: 75: if (command == 0) {
 13018  098C  0020               	movlb	0	; select bank0
 13019  098D  08A2               	movf	setLED@command,f
 13020  098E  1D03               	skipz
 13021  098F  29A2               	goto	l9069
 13022                           
 13023                           ;LED_B1.c: 77: if (led == 1) {
 13024  0990  0823               	movf	setLED@led,w
 13025  0991  3A01               	xorlw	1
 13026  0992  1D03               	skipz
 13027  0993  2996               	goto	l9061
 13028                           
 13029                           ;LED_B1.c: 81: RA3 = 1;
 13030  0994  158C               	bsf	12,3	;volatile
 13031                           
 13032                           ;LED_B1.c: 83: }
 13033  0995  0008               	return
 13034  0996                     l9061:	
 13035                           
 13036                           ;LED_B1.c: 86: else if (led == 2) {
 13037  0996  0823               	movf	setLED@led,w
 13038  0997  3A02               	xorlw	2
 13039  0998  1D03               	skipz
 13040  0999  299C               	goto	l9065
 13041                           
 13042                           ;LED_B1.c: 90: RC7 = 1;
 13043  099A  178E               	bsf	14,7	;volatile
 13044                           
 13045                           ;LED_B1.c: 92: }
 13046  099B  0008               	return
 13047  099C                     l9065:	
 13048                           
 13049                           ;LED_B1.c: 104: else if (led == 99) {
 13050  099C  0823               	movf	setLED@led,w
 13051  099D  3A63               	xorlw	99
 13052  099E  1D03               	skipz
 13053  099F  0008               	return
 13054                           
 13055                           ;LED_B1.c: 108: RB5 = 1;
 13056  09A0  168D               	bsf	13,5	;volatile
 13057                           
 13058                           ;LED_B1.c: 110: }
 13059                           ;LED_B1.c: 112: } else if (command == 1) {
 13060  09A1  0008               	return
 13061  09A2                     l9069:	
 13062  09A2  0822               	movf	setLED@command,w
 13063  09A3  3A01               	xorlw	1
 13064  09A4  1D03               	skipz
 13065  09A5  29B8               	goto	l9083
 13066                           
 13067                           ;LED_B1.c: 114: if (led == 1) {
 13068  09A6  0823               	movf	setLED@led,w
 13069  09A7  3A01               	xorlw	1
 13070  09A8  1D03               	skipz
 13071  09A9  29AC               	goto	l9075
 13072                           
 13073                           ;LED_B1.c: 118: RA3 = 0;
 13074  09AA  118C               	bcf	12,3	;volatile
 13075                           
 13076                           ;LED_B1.c: 120: }
 13077  09AB  0008               	return
 13078  09AC                     l9075:	
 13079                           
 13080                           ;LED_B1.c: 123: else if (led == 2) {
 13081  09AC  0823               	movf	setLED@led,w
 13082  09AD  3A02               	xorlw	2
 13083  09AE  1D03               	skipz
 13084  09AF  29B2               	goto	l9079
 13085                           
 13086                           ;LED_B1.c: 127: RC7 = 0;
 13087  09B0  138E               	bcf	14,7	;volatile
 13088                           
 13089                           ;LED_B1.c: 129: }
 13090  09B1  0008               	return
 13091  09B2                     l9079:	
 13092                           
 13093                           ;LED_B1.c: 141: else if (led == 99) {
 13094  09B2  0823               	movf	setLED@led,w
 13095  09B3  3A63               	xorlw	99
 13096  09B4  1D03               	skipz
 13097  09B5  0008               	return
 13098                           
 13099                           ;LED_B1.c: 145: RB5 = 0;
 13100  09B6  128D               	bcf	13,5	;volatile
 13101                           
 13102                           ;LED_B1.c: 147: }
 13103                           ;LED_B1.c: 149: } else if (command == 10) {
 13104  09B7  0008               	return
 13105  09B8                     l9083:	
 13106  09B8  0822               	movf	setLED@command,w
 13107  09B9  3A0A               	xorlw	10
 13108  09BA  1D03               	skipz
 13109  09BB  29DC               	goto	l9099
 13110                           
 13111                           ;LED_B1.c: 150: LED->GO = 0;
 13112  09BC  0021               	movlb	1	; select bank1
 13113  09BD  084F               	movf	_LED^(0+128),w
 13114  09BE  0086               	movwf	6
 13115  09BF  3001               	movlw	1	; select bank2/3
 13116  09C0  0087               	movwf	7
 13117  09C1  1081               	bcf	1,1
 13118                           
 13119                           ;LED_B1.c: 151: LED->Time = 0;
 13120  09C2  0A4F               	incf	_LED^(0+128),w
 13121  09C3  0086               	movwf	6
 13122  09C4  3001               	movlw	1	; select bank2/3
 13123  09C5  0087               	movwf	7
 13124  09C6  3000               	movlw	0
 13125  09C7  3FC0               	movwi [0]fsr1
 13126  09C8  3FC1               	movwi [1]fsr1
 13127                           
 13128                           ;LED_B1.c: 153: if (led == 1) {
 13129  09C9  0020               	movlb	0	; select bank0
 13130  09CA  0823               	movf	setLED@led,w
 13131  09CB  3A01               	xorlw	1
 13132  09CC  1D03               	skipz
 13133  09CD  29D0               	goto	l9091
 13134                           
 13135                           ;LED_B1.c: 157: RA3 = 1;
 13136  09CE  158C               	bsf	12,3	;volatile
 13137                           
 13138                           ;LED_B1.c: 159: }
 13139  09CF  0008               	return
 13140  09D0                     l9091:	
 13141                           
 13142                           ;LED_B1.c: 162: else if (led == 2) {
 13143  09D0  0823               	movf	setLED@led,w
 13144  09D1  3A02               	xorlw	2
 13145  09D2  1D03               	skipz
 13146  09D3  29D6               	goto	l9095
 13147                           
 13148                           ;LED_B1.c: 166: RC7 = 1;
 13149  09D4  178E               	bsf	14,7	;volatile
 13150                           
 13151                           ;LED_B1.c: 168: }
 13152  09D5  0008               	return
 13153  09D6                     l9095:	
 13154                           
 13155                           ;LED_B1.c: 180: else if (led == 99) {
 13156  09D6  0823               	movf	setLED@led,w
 13157  09D7  3A63               	xorlw	99
 13158  09D8  1D03               	skipz
 13159  09D9  0008               	return
 13160                           
 13161                           ;LED_B1.c: 184: RB5 = 1;
 13162  09DA  168D               	bsf	13,5	;volatile
 13163                           
 13164                           ;LED_B1.c: 186: }
 13165                           ;LED_B1.c: 188: } else if (command == 11) {
 13166  09DB  0008               	return
 13167  09DC                     l9099:	
 13168  09DC  0822               	movf	setLED@command,w
 13169  09DD  3A0B               	xorlw	11
 13170  09DE  1D03               	skipz
 13171  09DF  0008               	return
 13172                           
 13173                           ;LED_B1.c: 189: LED->GO = 1;
 13174  09E0  0021               	movlb	1	; select bank1
 13175  09E1  084F               	movf	_LED^(0+128),w
 13176  09E2  0086               	movwf	6
 13177  09E3  3001               	movlw	1	; select bank2/3
 13178  09E4  0087               	movwf	7
 13179  09E5  1481               	bsf	1,1
 13180  09E6  0008               	return
 13181  09E7                     __end_of_setLED:	
 13182                           
 13183                           	psect	text76
 13184  1F50                     __ptext76:	
 13185 ;; *************** function _LedPointSelect *****************
 13186 ;; Defined at:
 13187 ;;		line 7 in file "../src/LED_B1.c"
 13188 ;; Parameters:    Size  Location     Type
 13189 ;;  led             1    wreg     unsigned char 
 13190 ;; Auto vars:     Size  Location     Type
 13191 ;;  led             1    1[BANK0 ] unsigned char 
 13192 ;; Return value:  Size  Location     Type
 13193 ;;		None               void
 13194 ;; Registers used:
 13195 ;;		wreg
 13196 ;; Tracked objects:
 13197 ;;		On entry : 0/0
 13198 ;;		On exit  : 0/0
 13199 ;;		Unchanged: 0/0
 13200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13204 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13205 ;;Total ram usage:        2 bytes
 13206 ;; Hardware stack levels used:    1
 13207 ;; Hardware stack levels required when called:    5
 13208 ;; This function calls:
 13209 ;;		Nothing
 13210 ;; This function is called by:
 13211 ;;		_setLED_Initialization
 13212 ;;		_setLED
 13213 ;;		_setLED_Main
 13214 ;; This function uses a non-reentrant model
 13215 ;;
 13216                           
 13217                           
 13218                           ;psect for function _LedPointSelect
 13219  1F50                     _LedPointSelect:	
 13220                           
 13221                           ;incstack = 0
 13222                           ; Regs used in _LedPointSelect: [wreg]
 13223                           ;LedPointSelect@led stored from wreg
 13224  1F50  0020               	movlb	0	; select bank0
 13225  1F51  00A1               	movwf	LedPointSelect@led
 13226                           
 13227                           ;LED_B1.c: 9: if (led == 1) {
 13228  1F52  0821               	movf	LedPointSelect@led,w
 13229  1F53  3A01               	xorlw	1
 13230  1F54  1D03               	skipz
 13231  1F55  2F5C               	goto	l8961
 13232                           
 13233                           ;LED_B1.c: 10: LED = &VarLED1;
 13234  1F56  3061               	movlw	_VarLED1& (0+255)
 13235  1F57  00A0               	movwf	??_LedPointSelect
 13236  1F58  0820               	movf	??_LedPointSelect,w
 13237  1F59  0021               	movlb	1	; select bank1
 13238  1F5A  00CF               	movwf	_LED^(0+128)
 13239                           
 13240                           ;LED_B1.c: 11: }
 13241  1F5B  0008               	return
 13242  1F5C                     l8961:	
 13243                           
 13244                           ;LED_B1.c: 14: else if (led == 2) {
 13245  1F5C  0020               	movlb	0	; select bank0
 13246  1F5D  0821               	movf	LedPointSelect@led,w
 13247  1F5E  3A02               	xorlw	2
 13248  1F5F  1D03               	skipz
 13249  1F60  2F67               	goto	l8965
 13250                           
 13251                           ;LED_B1.c: 15: LED = &VarLED2;
 13252  1F61  3065               	movlw	_VarLED2& (0+255)
 13253  1F62  00A0               	movwf	??_LedPointSelect
 13254  1F63  0820               	movf	??_LedPointSelect,w
 13255  1F64  0021               	movlb	1	; select bank1
 13256  1F65  00CF               	movwf	_LED^(0+128)
 13257                           
 13258                           ;LED_B1.c: 16: }
 13259  1F66  0008               	return
 13260  1F67                     l8965:	
 13261                           
 13262                           ;LED_B1.c: 24: else if (led == 99) {
 13263  1F67  0020               	movlb	0	; select bank0
 13264  1F68  0821               	movf	LedPointSelect@led,w
 13265  1F69  3A63               	xorlw	99
 13266  1F6A  1D03               	skipz
 13267  1F6B  0008               	return
 13268                           
 13269                           ;LED_B1.c: 25: LED = &VarErrLED;
 13270  1F6C  305D               	movlw	_VarErrLED& (0+255)
 13271  1F6D  00A0               	movwf	??_LedPointSelect
 13272  1F6E  0820               	movf	??_LedPointSelect,w
 13273  1F6F  0021               	movlb	1	; select bank1
 13274  1F70  00CF               	movwf	_LED^(0+128)
 13275  1F71  0008               	return
 13276  1F72                     __end_of_LedPointSelect:	
 13277                           
 13278                           	psect	text77
 13279  1D7C                     __ptext77:	
 13280 ;; *************** function _setDimmerLights_Line *****************
 13281 ;; Defined at:
 13282 ;;		line 722 in file "../src/Dimmer_B1.c"
 13283 ;; Parameters:    Size  Location     Type
 13284 ;;  lights          1    wreg     unsigned char 
 13285 ;; Auto vars:     Size  Location     Type
 13286 ;;  lights          1    0[BANK0 ] unsigned char 
 13287 ;; Return value:  Size  Location     Type
 13288 ;;		None               void
 13289 ;; Registers used:
 13290 ;;		wreg
 13291 ;; Tracked objects:
 13292 ;;		On entry : 0/0
 13293 ;;		On exit  : 0/0
 13294 ;;		Unchanged: 0/0
 13295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;Total ram usage:        1 bytes
 13301 ;; Hardware stack levels used:    1
 13302 ;; Hardware stack levels required when called:    5
 13303 ;; This function calls:
 13304 ;;		Nothing
 13305 ;; This function is called by:
 13306 ;;		_setDimmerLights
 13307 ;; This function uses a non-reentrant model
 13308 ;;
 13309                           
 13310                           
 13311                           ;psect for function _setDimmerLights_Line
 13312  1D7C                     _setDimmerLights_Line:	
 13313                           
 13314                           ;incstack = 0
 13315                           ; Regs used in _setDimmerLights_Line: [wreg]
 13316                           ;setDimmerLights_Line@lights stored from wreg
 13317  1D7C  0020               	movlb	0	; select bank0
 13318  1D7D  00A0               	movwf	setDimmerLights_Line@lights
 13319                           
 13320                           ;Dimmer_B1.c: 724: DimmerLights1.Line = 0;
 13321  1D7E  0023               	movlb	3	; select bank3
 13322  1D7F  1047               	bcf	(_DimmerLights1^(0+384)+9),0
 13323                           
 13324                           ;Dimmer_B1.c: 727: DimmerLights2.Line = 0;
 13325  1D80  1056               	bcf	(_DimmerLights2^(0+384)+9),0
 13326                           
 13327                           ;Dimmer_B1.c: 733: if (lights == 1) {
 13328  1D81  0020               	movlb	0	; select bank0
 13329  1D82  0820               	movf	setDimmerLights_Line@lights,w
 13330  1D83  3A01               	xorlw	1
 13331  1D84  1D03               	skipz
 13332  1D85  2D89               	goto	l9109
 13333                           
 13334                           ;Dimmer_B1.c: 734: DimmerLights1.Line = 1;
 13335  1D86  0023               	movlb	3	; select bank3
 13336  1D87  1447               	bsf	(_DimmerLights1^(0+384)+9),0
 13337                           
 13338                           ;Dimmer_B1.c: 735: }
 13339  1D88  0008               	return
 13340  1D89                     l9109:	
 13341                           
 13342                           ;Dimmer_B1.c: 738: else if (lights == 2) {
 13343  1D89  0020               	movlb	0	; select bank0
 13344  1D8A  0820               	movf	setDimmerLights_Line@lights,w
 13345  1D8B  3A02               	xorlw	2
 13346  1D8C  1D03               	skipz
 13347  1D8D  0008               	return
 13348                           
 13349                           ;Dimmer_B1.c: 739: DimmerLights2.Line = 1;
 13350  1D8E  0023               	movlb	3	; select bank3
 13351  1D8F  1456               	bsf	(_DimmerLights2^(0+384)+9),0
 13352  1D90  0008               	return
 13353  1D91                     __end_of_setDimmerLights_Line:	
 13354                           
 13355                           	psect	text78
 13356  11B3                     __ptext78:	
 13357 ;; *************** function _getMain_All_Error_Status *****************
 13358 ;; Defined at:
 13359 ;;		line 361 in file "../src/Main_B1.c"
 13360 ;; Parameters:    Size  Location     Type
 13361 ;;  command         1    wreg     unsigned char 
 13362 ;; Auto vars:     Size  Location     Type
 13363 ;;  command         1    5[BANK0 ] unsigned char 
 13364 ;;  status          1    6[BANK0 ] unsigned char 
 13365 ;; Return value:  Size  Location     Type
 13366 ;;                  1    wreg      unsigned char 
 13367 ;; Registers used:
 13368 ;;		wreg, status,2, status,0
 13369 ;; Tracked objects:
 13370 ;;		On entry : 0/0
 13371 ;;		On exit  : 0/0
 13372 ;;		Unchanged: 0/0
 13373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13375 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13377 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13378 ;;Total ram usage:        7 bytes
 13379 ;; Hardware stack levels used:    1
 13380 ;; Hardware stack levels required when called:    5
 13381 ;; This function calls:
 13382 ;;		Nothing
 13383 ;; This function is called by:
 13384 ;;		_DimmerLights_Main
 13385 ;;		_setDimmerLights
 13386 ;;		_setDimmerLights_Adj
 13387 ;;		_Load_Main
 13388 ;;		_setTemp_Main
 13389 ;;		_setRF_Main
 13390 ;;		_getRxData
 13391 ;;		_Switch_Main
 13392 ;; This function uses a non-reentrant model
 13393 ;;
 13394                           
 13395                           
 13396                           ;psect for function _getMain_All_Error_Status
 13397  11B3                     _getMain_All_Error_Status:	
 13398                           
 13399                           ;incstack = 0
 13400                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 13401                           ;getMain_All_Error_Status@command stored from wreg
 13402  11B3  0020               	movlb	0	; select bank0
 13403  11B4  00A5               	movwf	getMain_All_Error_Status@command
 13404                           
 13405                           ;Main_B1.c: 362: char status = 0;
 13406  11B5  01A6               	clrf	getMain_All_Error_Status@status
 13407                           
 13408                           ;Main_B1.c: 373: if (status == 0 && command != 2) {
 13409  11B6  08A6               	movf	getMain_All_Error_Status@status,f
 13410  11B7  1D03               	skipz
 13411  11B8  29CD               	goto	l9041
 13412  11B9  0825               	movf	getMain_All_Error_Status@command,w
 13413  11BA  3A02               	xorlw	2
 13414  11BB  1903               	skipnz
 13415  11BC  29CD               	goto	l9041
 13416                           
 13417                           ;Main_B1.c: 374: status = Temp.ERROR == 1 ? 2 : 0;
 13418  11BD  0021               	movlb	1	; select bank1
 13419  11BE  18D8               	btfsc	_Temp^(0+128),1
 13420  11BF  29C4               	goto	l9039
 13421  11C0  0020               	movlb	0	; select bank0
 13422  11C1  01A1               	clrf	_getMain_All_Error_Status$3952
 13423  11C2  01A2               	clrf	_getMain_All_Error_Status$3952+1
 13424  11C3  29C9               	goto	l1599
 13425  11C4                     l9039:	
 13426  11C4  3002               	movlw	2
 13427  11C5  0020               	movlb	0	; select bank0
 13428  11C6  00A1               	movwf	_getMain_All_Error_Status$3952
 13429  11C7  3000               	movlw	0
 13430  11C8  00A2               	movwf	_getMain_All_Error_Status$3952+1
 13431  11C9                     l1599:	
 13432  11C9  0821               	movf	_getMain_All_Error_Status$3952,w
 13433  11CA  00A0               	movwf	??_getMain_All_Error_Status
 13434  11CB  0820               	movf	??_getMain_All_Error_Status,w
 13435  11CC  00A6               	movwf	getMain_All_Error_Status@status
 13436  11CD                     l9041:	
 13437                           
 13438                           ;Main_B1.c: 375: }
 13439                           ;Main_B1.c: 380: if (status == 0 && command != 3) {
 13440  11CD  08A6               	movf	getMain_All_Error_Status@status,f
 13441  11CE  1D03               	skipz
 13442  11CF  29E4               	goto	l1600
 13443  11D0  0825               	movf	getMain_All_Error_Status@command,w
 13444  11D1  3A03               	xorlw	3
 13445  11D2  1903               	skipnz
 13446  11D3  29E4               	goto	l1600
 13447                           
 13448                           ;Main_B1.c: 381: status = Load.ERROR == 1 ? 3 : 0;
 13449  11D4  0022               	movlb	2	; select bank2
 13450  11D5  1AA7               	btfsc	_Load^(0+256),5
 13451  11D6  29DB               	goto	l9049
 13452  11D7  0020               	movlb	0	; select bank0
 13453  11D8  01A3               	clrf	_getMain_All_Error_Status$3961
 13454  11D9  01A4               	clrf	_getMain_All_Error_Status$3961+1
 13455  11DA  29E0               	goto	l1604
 13456  11DB                     l9049:	
 13457  11DB  3003               	movlw	3
 13458  11DC  0020               	movlb	0	; select bank0
 13459  11DD  00A3               	movwf	_getMain_All_Error_Status$3961
 13460  11DE  3000               	movlw	0
 13461  11DF  00A4               	movwf	_getMain_All_Error_Status$3961+1
 13462  11E0                     l1604:	
 13463  11E0  0823               	movf	_getMain_All_Error_Status$3961,w
 13464  11E1  00A0               	movwf	??_getMain_All_Error_Status
 13465  11E2  0820               	movf	??_getMain_All_Error_Status,w
 13466  11E3  00A6               	movwf	getMain_All_Error_Status@status
 13467  11E4                     l1600:	
 13468                           
 13469                           ;Main_B1.c: 382: }
 13470                           ;Main_B1.c: 398: return status;
 13471  11E4  0826               	movf	getMain_All_Error_Status@status,w
 13472  11E5  0008               	return
 13473  11E6                     __end_of_getMain_All_Error_Status:	
 13474                           
 13475                           	psect	text79
 13476  1158                     __ptext79:	
 13477 ;; *************** function _getMain_LightsStatus *****************
 13478 ;; Defined at:
 13479 ;;		line 334 in file "../src/Main_B1.c"
 13480 ;; Parameters:    Size  Location     Type
 13481 ;;		None
 13482 ;; Auto vars:     Size  Location     Type
 13483 ;;  i               2    6[BANK0 ] int 
 13484 ;;  status          1    8[BANK0 ] unsigned char 
 13485 ;;  count           1    5[BANK0 ] unsigned char 
 13486 ;; Return value:  Size  Location     Type
 13487 ;;                  1    wreg      unsigned char 
 13488 ;; Registers used:
 13489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13490 ;; Tracked objects:
 13491 ;;		On entry : 0/0
 13492 ;;		On exit  : 0/0
 13493 ;;		Unchanged: 0/0
 13494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13496 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13498 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13499 ;;Total ram usage:        5 bytes
 13500 ;; Hardware stack levels used:    1
 13501 ;; Hardware stack levels required when called:    7
 13502 ;; This function calls:
 13503 ;;		_getDimmerLights_Status
 13504 ;; This function is called by:
 13505 ;;		_DimmerLights_Main
 13506 ;;		_Flash_Memory_Main
 13507 ;;		_setMain_Exception
 13508 ;;		_Load_Main
 13509 ;; This function uses a non-reentrant model
 13510 ;;
 13511                           
 13512                           
 13513                           ;psect for function _getMain_LightsStatus
 13514  1158                     _getMain_LightsStatus:	
 13515                           
 13516                           ;Main_B1.c: 335: char status = 0;
 13517                           
 13518                           ;incstack = 0
 13519                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13520  1158  0020               	movlb	0	; select bank0
 13521  1159  01A8               	clrf	getMain_LightsStatus@status
 13522                           
 13523                           ;Main_B1.c: 341: char count = 2;
 13524  115A  3002               	movlw	2
 13525  115B  00A4               	movwf	??_getMain_LightsStatus
 13526  115C  0824               	movf	??_getMain_LightsStatus,w
 13527  115D  00A5               	movwf	getMain_LightsStatus@count
 13528                           
 13529                           ;Main_B1.c: 347: for (int i = 0; i < count; i++) {
 13530  115E  01A6               	clrf	getMain_LightsStatus@i
 13531  115F  01A7               	clrf	getMain_LightsStatus@i+1
 13532  1160                     l9315:	
 13533  1160  0827               	movf	getMain_LightsStatus@i+1,w
 13534  1161  3A80               	xorlw	128
 13535  1162  00A4               	movwf	??_getMain_LightsStatus
 13536  1163  3080               	movlw	128
 13537  1164  0224               	subwf	??_getMain_LightsStatus,w
 13538  1165  1D03               	skipz
 13539  1166  2969               	goto	u10165
 13540  1167  0825               	movf	getMain_LightsStatus@count,w
 13541  1168  0226               	subwf	getMain_LightsStatus@i,w
 13542  1169                     u10165:	
 13543  1169  1803               	btfsc	3,0
 13544  116A  2981               	goto	l9317
 13545                           
 13546                           ;Main_B1.c: 348: if (status == 0) {
 13547  116B  0020               	movlb	0	; select bank0
 13548  116C  08A8               	movf	getMain_LightsStatus@status,f
 13549  116D  1D03               	skipz
 13550  116E  297C               	goto	l9313
 13551                           
 13552                           ;Main_B1.c: 353: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 13553  116F  0826               	movf	getMain_LightsStatus@i,w
 13554  1170  3E01               	addlw	1
 13555  1171  319C  2419  3191   	fcall	_getDimmerLights_Status
 13556  1174  3A01               	xorlw	1
 13557  1175  3000               	movlw	0
 13558  1176  1903               	skipnz
 13559  1177  3001               	movlw	1
 13560  1178  0020               	movlb	0	; select bank0
 13561  1179  00A4               	movwf	??_getMain_LightsStatus
 13562  117A  0824               	movf	??_getMain_LightsStatus,w
 13563  117B  00A8               	movwf	getMain_LightsStatus@status
 13564  117C                     l9313:	
 13565  117C  3001               	movlw	1
 13566  117D  07A6               	addwf	getMain_LightsStatus@i,f
 13567  117E  3000               	movlw	0
 13568  117F  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 13569  1180  2960               	goto	l9315
 13570  1181                     l9317:	
 13571                           
 13572                           ;Main_B1.c: 355: }
 13573                           ;Main_B1.c: 356: }
 13574                           ;Main_B1.c: 357: return status;
 13575  1181  0020               	movlb	0	; select bank0
 13576  1182  0828               	movf	getMain_LightsStatus@status,w
 13577  1183  0008               	return
 13578  1184                     __end_of_getMain_LightsStatus:	
 13579                           
 13580                           	psect	text80
 13581  1B51                     __ptext80:	
 13582 ;; *************** function _getLoad_OK *****************
 13583 ;; Defined at:
 13584 ;;		line 219 in file "../src/OverLoad_B1.c"
 13585 ;; Parameters:    Size  Location     Type
 13586 ;;		None
 13587 ;; Auto vars:     Size  Location     Type
 13588 ;;  ok              1    0[BANK0 ] unsigned char 
 13589 ;; Return value:  Size  Location     Type
 13590 ;;                  1    wreg      unsigned char 
 13591 ;; Registers used:
 13592 ;;		wreg, status,2
 13593 ;; Tracked objects:
 13594 ;;		On entry : 0/0
 13595 ;;		On exit  : 0/0
 13596 ;;		Unchanged: 0/0
 13597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;Total ram usage:        1 bytes
 13603 ;; Hardware stack levels used:    1
 13604 ;; Hardware stack levels required when called:    5
 13605 ;; This function calls:
 13606 ;;		Nothing
 13607 ;; This function is called by:
 13608 ;;		_DimmerLights_Main
 13609 ;; This function uses a non-reentrant model
 13610 ;;
 13611                           
 13612                           
 13613                           ;psect for function _getLoad_OK
 13614  1B51                     _getLoad_OK:	
 13615                           
 13616                           ;OverLoad_B1.c: 220: char ok = Load.OK == 1 ? 1 : 0;
 13617                           
 13618                           ;incstack = 0
 13619                           ; Regs used in _getLoad_OK: [wreg+status,2]
 13620  1B51  3000               	movlw	0
 13621  1B52  0022               	movlb	2	; select bank2
 13622  1B53  1BA7               	btfsc	_Load^(0+256),7
 13623  1B54  3001               	movlw	1
 13624  1B55  0020               	movlb	0	; select bank0
 13625  1B56  00A0               	movwf	getLoad_OK@ok
 13626                           
 13627                           ;OverLoad_B1.c: 221: return ok;
 13628  1B57  0820               	movf	getLoad_OK@ok,w
 13629  1B58  0008               	return
 13630  1B59                     __end_of_getLoad_OK:	
 13631                           
 13632                           	psect	text81
 13633  1DBC                     __ptext81:	
 13634 ;; *************** function _DimmerLights_Initialization *****************
 13635 ;; Defined at:
 13636 ;;		line 343 in file "../src/Dimmer_B1.c"
 13637 ;; Parameters:    Size  Location     Type
 13638 ;;		None
 13639 ;; Auto vars:     Size  Location     Type
 13640 ;;		None
 13641 ;; Return value:  Size  Location     Type
 13642 ;;		None               void
 13643 ;; Registers used:
 13644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13645 ;; Tracked objects:
 13646 ;;		On entry : 0/0
 13647 ;;		On exit  : 0/0
 13648 ;;		Unchanged: 0/0
 13649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13653 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;Total ram usage:        1 bytes
 13655 ;; Hardware stack levels used:    1
 13656 ;; Hardware stack levels required when called:    7
 13657 ;; This function calls:
 13658 ;;		_Dimmer_Initialization
 13659 ;;		_setDimmerLights_Initialization
 13660 ;; This function is called by:
 13661 ;;		_main
 13662 ;; This function uses a non-reentrant model
 13663 ;;
 13664                           
 13665                           
 13666                           ;psect for function _DimmerLights_Initialization
 13667  1DBC                     _DimmerLights_Initialization:	
 13668                           
 13669                           ;Dimmer_B1.c: 346: DimmerLights11 = &DimmerLights1;
 13670                           
 13671                           ;incstack = 0
 13672                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13673  1DBC  30BE               	movlw	_DimmerLights1& (0+255)
 13674  1DBD  0020               	movlb	0	; select bank0
 13675  1DBE  00A4               	movwf	??_DimmerLights_Initialization
 13676  1DBF  0824               	movf	??_DimmerLights_Initialization,w
 13677  1DC0  0021               	movlb	1	; select bank1
 13678  1DC1  00CC               	movwf	_DimmerLights11^(0+128)
 13679                           
 13680                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(1);
 13681  1DC2  3001               	movlw	1
 13682  1DC3  3190  208C  319D   	fcall	_setDimmerLights_Initialization
 13683                           
 13684                           ;Dimmer_B1.c: 351: DimmerLights22 = &DimmerLights2;
 13685  1DC6  30CD               	movlw	_DimmerLights2& (0+255)
 13686  1DC7  0020               	movlb	0	; select bank0
 13687  1DC8  00A4               	movwf	??_DimmerLights_Initialization
 13688  1DC9  0824               	movf	??_DimmerLights_Initialization,w
 13689  1DCA  0021               	movlb	1	; select bank1
 13690  1DCB  00CD               	movwf	_DimmerLights22^(0+128)
 13691                           
 13692                           ;Dimmer_B1.c: 352: setDimmerLights_Initialization(2);
 13693  1DCC  3002               	movlw	2
 13694  1DCD  3190  208C  319D   	fcall	_setDimmerLights_Initialization
 13695                           
 13696                           ;Dimmer_B1.c: 361: Dimmer_Initialization();
 13697  1DD0  319A  22FF         	fcall	_Dimmer_Initialization
 13698  1DD2  0008               	return
 13699  1DD3                     __end_of_DimmerLights_Initialization:	
 13700                           
 13701                           	psect	text82
 13702  108C                     __ptext82:	
 13703 ;; *************** function _setDimmerLights_Initialization *****************
 13704 ;; Defined at:
 13705 ;;		line 367 in file "../src/Dimmer_B1.c"
 13706 ;; Parameters:    Size  Location     Type
 13707 ;;  lights          1    wreg     unsigned char 
 13708 ;; Auto vars:     Size  Location     Type
 13709 ;;  lights          1    3[BANK0 ] unsigned char 
 13710 ;; Return value:  Size  Location     Type
 13711 ;;		None               void
 13712 ;; Registers used:
 13713 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13714 ;; Tracked objects:
 13715 ;;		On entry : 0/0
 13716 ;;		On exit  : 0/0
 13717 ;;		Unchanged: 0/0
 13718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13720 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13721 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13722 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13723 ;;Total ram usage:        2 bytes
 13724 ;; Hardware stack levels used:    1
 13725 ;; Hardware stack levels required when called:    6
 13726 ;; This function calls:
 13727 ;;		_DimmerLightsPointSelect
 13728 ;; This function is called by:
 13729 ;;		_DimmerLights_Initialization
 13730 ;; This function uses a non-reentrant model
 13731 ;;
 13732                           
 13733                           
 13734                           ;psect for function _setDimmerLights_Initialization
 13735  108C                     _setDimmerLights_Initialization:	
 13736                           
 13737                           ;incstack = 0
 13738                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13739                           ;setDimmerLights_Initialization@lights stored from wreg
 13740  108C  0020               	movlb	0	; select bank0
 13741  108D  00A3               	movwf	setDimmerLights_Initialization@lights
 13742                           
 13743                           ;Dimmer_B1.c: 369: DimmerLightsPointSelect(lights);
 13744  108E  0823               	movf	setDimmerLights_Initialization@lights,w
 13745  108F  319C  24B6         	fcall	_DimmerLightsPointSelect
 13746                           
 13747                           ;Dimmer_B1.c: 375: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13748  1091  3020               	movlw	32
 13749  1092  0020               	movlb	0	; select bank0
 13750  1093  00A2               	movwf	??_setDimmerLights_Initialization
 13751  1094  0877               	movf	_DimmerLights,w
 13752  1095  3E05               	addlw	5
 13753  1096  0086               	movwf	6
 13754  1097  3001               	movlw	1	; select bank2/3
 13755  1098  0087               	movwf	7
 13756  1099  0822               	movf	??_setDimmerLights_Initialization,w
 13757  109A  0081               	movwf	1
 13758                           
 13759                           ;Dimmer_B1.c: 376: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13760  109B  303C               	movlw	60
 13761  109C  00A2               	movwf	??_setDimmerLights_Initialization
 13762  109D  0877               	movf	_DimmerLights,w
 13763  109E  3E06               	addlw	6
 13764  109F  0086               	movwf	6
 13765  10A0  3001               	movlw	1	; select bank2/3
 13766  10A1  0087               	movwf	7
 13767  10A2  0822               	movf	??_setDimmerLights_Initialization,w
 13768  10A3  0081               	movwf	1
 13769                           
 13770                           ;Dimmer_B1.c: 386: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13771  10A4  0877               	movf	_DimmerLights,w
 13772  10A5  3E06               	addlw	6
 13773  10A6  0086               	movwf	6
 13774  10A7  3001               	movlw	1	; select bank2/3
 13775  10A8  0087               	movwf	7
 13776  10A9  0801               	movf	1,w
 13777  10AA  00A2               	movwf	??_setDimmerLights_Initialization
 13778  10AB  0877               	movf	_DimmerLights,w
 13779  10AC  3E04               	addlw	4
 13780  10AD  0086               	movwf	6
 13781  10AE  3001               	movlw	1	; select bank2/3
 13782  10AF  0087               	movwf	7
 13783  10B0  0822               	movf	??_setDimmerLights_Initialization,w
 13784  10B1  0081               	movwf	1
 13785  10B2  0008               	return
 13786  10B3                     __end_of_setDimmerLights_Initialization:	
 13787                           
 13788                           	psect	text83
 13789  1AFF                     __ptext83:	
 13790 ;; *************** function _Dimmer_Initialization *****************
 13791 ;; Defined at:
 13792 ;;		line 947 in file "../src/Dimmer_B1.c"
 13793 ;; Parameters:    Size  Location     Type
 13794 ;;		None
 13795 ;; Auto vars:     Size  Location     Type
 13796 ;;		None
 13797 ;; Return value:  Size  Location     Type
 13798 ;;		None               void
 13799 ;; Registers used:
 13800 ;;		None
 13801 ;; Tracked objects:
 13802 ;;		On entry : 0/0
 13803 ;;		On exit  : 0/0
 13804 ;;		Unchanged: 0/0
 13805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13810 ;;Total ram usage:        0 bytes
 13811 ;; Hardware stack levels used:    1
 13812 ;; Hardware stack levels required when called:    5
 13813 ;; This function calls:
 13814 ;;		Nothing
 13815 ;; This function is called by:
 13816 ;;		_DimmerLights_Initialization
 13817 ;; This function uses a non-reentrant model
 13818 ;;
 13819                           
 13820                           
 13821                           ;psect for function _Dimmer_Initialization
 13822  1AFF                     _Dimmer_Initialization:	
 13823                           
 13824                           ;incstack = 0
 13825                           ; Regs used in _Dimmer_Initialization: []
 13826  1AFF  0008               	return
 13827  1B00                     __end_of_Dimmer_Initialization:	
 13828                           
 13829                           	psect	text84
 13830  1B49                     __ptext84:	
 13831 ;; *************** function _DelayOff_Main *****************
 13832 ;; Defined at:
 13833 ;;		line 41 in file "../src/DelayOff_B1.c"
 13834 ;; Parameters:    Size  Location     Type
 13835 ;;		None
 13836 ;; Auto vars:     Size  Location     Type
 13837 ;;		None
 13838 ;; Return value:  Size  Location     Type
 13839 ;;		None               void
 13840 ;; Registers used:
 13841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13842 ;; Tracked objects:
 13843 ;;		On entry : 0/0
 13844 ;;		On exit  : 0/0
 13845 ;;		Unchanged: 0/0
 13846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13851 ;;Total ram usage:        0 bytes
 13852 ;; Hardware stack levels used:    1
 13853 ;; Hardware stack levels required when called:   11
 13854 ;; This function calls:
 13855 ;;		_DlyOff_Main
 13856 ;; This function is called by:
 13857 ;;		_main
 13858 ;; This function uses a non-reentrant model
 13859 ;;
 13860                           
 13861                           
 13862                           ;psect for function _DelayOff_Main
 13863  1B49                     _DelayOff_Main:	
 13864                           
 13865                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13866                           
 13867                           ;incstack = 0
 13868                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13869  1B49  3001               	movlw	1
 13870  1B4A  3189  2125  319B   	fcall	_DlyOff_Main
 13871                           
 13872                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 13873  1B4D  3002               	movlw	2
 13874  1B4E  3189  2125         	fcall	_DlyOff_Main
 13875  1B50  0008               	return
 13876  1B51                     __end_of_DelayOff_Main:	
 13877                           
 13878                           	psect	text85
 13879  0925                     __ptext85:	
 13880 ;; *************** function _DlyOff_Main *****************
 13881 ;; Defined at:
 13882 ;;		line 62 in file "../src/DelayOff_B1.c"
 13883 ;; Parameters:    Size  Location     Type
 13884 ;;  sw              1    wreg     unsigned char 
 13885 ;; Auto vars:     Size  Location     Type
 13886 ;;  sw              1   72[BANK0 ] unsigned char 
 13887 ;; Return value:  Size  Location     Type
 13888 ;;		None               void
 13889 ;; Registers used:
 13890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13891 ;; Tracked objects:
 13892 ;;		On entry : 0/0
 13893 ;;		On exit  : 0/0
 13894 ;;		Unchanged: 0/0
 13895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13898 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13899 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13900 ;;Total ram usage:        3 bytes
 13901 ;; Hardware stack levels used:    1
 13902 ;; Hardware stack levels required when called:   10
 13903 ;; This function calls:
 13904 ;;		_DelayOffPointSelect
 13905 ;;		_getDimmerLights_Status
 13906 ;;		_setDimmerLights_SwOff
 13907 ;;		_setDimmerLights_SwOn
 13908 ;;		_setRF_DimmerLights
 13909 ;; This function is called by:
 13910 ;;		_DelayOff_Main
 13911 ;; This function uses a non-reentrant model
 13912 ;;
 13913                           
 13914                           
 13915                           ;psect for function _DlyOff_Main
 13916  0925                     _DlyOff_Main:	
 13917                           
 13918                           ;incstack = 0
 13919                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13920                           ;DlyOff_Main@sw stored from wreg
 13921  0925  0020               	movlb	0	; select bank0
 13922  0926  00E8               	movwf	DlyOff_Main@sw
 13923                           
 13924                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13925  0927  0868               	movf	DlyOff_Main@sw,w
 13926  0928  319D  2516  3189   	fcall	_DelayOffPointSelect
 13927                           
 13928                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13929  092B  0876               	movf	_DelayOff,w
 13930  092C  0086               	movwf	6
 13931  092D  3001               	movlw	1	; select bank2/3
 13932  092E  0087               	movwf	7
 13933  092F  1C81               	btfss	1,1
 13934  0930  0008               	return
 13935                           
 13936                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13937  0931  0876               	movf	_DelayOff,w
 13938  0932  0086               	movwf	6
 13939  0933  3001               	movlw	1	; select bank2/3
 13940  0934  0087               	movwf	7
 13941  0935  3001               	movlw	1
 13942  0936  0781               	addwf	1,f
 13943  0937  3141               	addfsr 1,1
 13944  0938  1803               	skipnc
 13945  0939  0A81               	incf	1,f
 13946                           
 13947                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 13948  093A  0876               	movf	_DelayOff,w
 13949  093B  0086               	movwf	6
 13950  093C  3001               	movlw	1	; select bank2/3
 13951  093D  0087               	movwf	7
 13952  093E  3F40               	moviw [0]fsr1
 13953  093F  0020               	movlb	0	; select bank0
 13954  0940  00E6               	movwf	??_DlyOff_Main
 13955  0941  3F41               	moviw [1]fsr1
 13956  0942  00E7               	movwf	??_DlyOff_Main+1
 13957  0943  3016               	movlw	22
 13958  0944  0267               	subwf	??_DlyOff_Main+1,w
 13959  0945  3012               	movlw	18
 13960  0946  1903               	skipnz
 13961  0947  0266               	subwf	??_DlyOff_Main,w
 13962  0948  1C03               	skipc
 13963  0949  0008               	return
 13964                           
 13965                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13966  094A  0876               	movf	_DelayOff,w
 13967  094B  0086               	movwf	6
 13968  094C  3001               	movlw	1	; select bank2/3
 13969  094D  0087               	movwf	7
 13970  094E  3000               	movlw	0
 13971  094F  3FC0               	movwi [0]fsr1
 13972  0950  3FC1               	movwi [1]fsr1
 13973                           
 13974                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13975  0951  3001               	movlw	1
 13976  0952  00E6               	movwf	??_DlyOff_Main
 13977  0953  0876               	movf	_DelayOff,w
 13978  0954  0086               	movwf	6
 13979  0955  3001               	movlw	1	; select bank2/3
 13980  0956  0087               	movwf	7
 13981  0957  0866               	movf	??_DlyOff_Main,w
 13982  0958  0781               	addwf	1,f
 13983                           
 13984                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13985  0959  0876               	movf	_DelayOff,w
 13986  095A  0086               	movwf	6
 13987  095B  3001               	movlw	1	; select bank2/3
 13988  095C  0087               	movwf	7
 13989  095D  0876               	movf	_DelayOff,w
 13990  095E  0084               	movwf	4
 13991  095F  3001               	movlw	1	; select bank2/3
 13992  0960  0085               	movwf	5
 13993  0961  0800               	movf	0,w
 13994  0962  0201               	subwf	1,w
 13995  0963  1C03               	skipc
 13996  0964  0008               	return
 13997                           
 13998                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13999  0965  0876               	movf	_DelayOff,w
 14000  0966  0086               	movwf	6
 14001  0967  3001               	movlw	1	; select bank2/3
 14002  0968  0087               	movwf	7
 14003  0969  0181               	clrf	1
 14004                           
 14005                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14006  096A  0876               	movf	_DelayOff,w
 14007  096B  0086               	movwf	6
 14008  096C  3001               	movlw	1	; select bank2/3
 14009  096D  0087               	movwf	7
 14010  096E  1081               	bcf	1,1
 14011                           
 14012                           ;DelayOff_B1.c: 74: setDimmerLights_SwOn(sw);
 14013  096F  0868               	movf	DlyOff_Main@sw,w
 14014  0970  3194  24B2  3189   	fcall	_setDimmerLights_SwOn
 14015                           
 14016                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 14017  0973  0020               	movlb	0	; select bank0
 14018  0974  0868               	movf	DlyOff_Main@sw,w
 14019  0975  319C  2419  3189   	fcall	_getDimmerLights_Status
 14020  0978  3A01               	xorlw	1
 14021  0979  1D03               	skipz
 14022  097A  2980               	goto	l582
 14023                           
 14024                           ;DelayOff_B1.c: 76: setDimmerLights_SwOff(sw);
 14025  097B  0020               	movlb	0	; select bank0
 14026  097C  0868               	movf	DlyOff_Main@sw,w
 14027  097D  3188  2004  3189   	fcall	_setDimmerLights_SwOff
 14028  0980                     l582:	
 14029                           
 14030                           ;DelayOff_B1.c: 77: }
 14031                           ;DelayOff_B1.c: 78: setRF_DimmerLights(sw, 0);
 14032  0980  0020               	movlb	0	; select bank0
 14033  0981  01DD               	clrf	setRF_DimmerLights@on
 14034  0982  0868               	movf	DlyOff_Main@sw,w
 14035  0983  318A  22B1         	fcall	_setRF_DimmerLights
 14036  0985  0008               	return
 14037  0986                     __end_of_DlyOff_Main:	
 14038                           
 14039                           	psect	text86
 14040  14B2                     __ptext86:	
 14041 ;; *************** function _setDimmerLights_SwOn *****************
 14042 ;; Defined at:
 14043 ;;		line 559 in file "../src/Dimmer_B1.c"
 14044 ;; Parameters:    Size  Location     Type
 14045 ;;  sw              1    wreg     unsigned char 
 14046 ;; Auto vars:     Size  Location     Type
 14047 ;;  sw              1   68[BANK0 ] unsigned char 
 14048 ;;  idle            1   67[BANK0 ] unsigned char 
 14049 ;; Return value:  Size  Location     Type
 14050 ;;		None               void
 14051 ;; Registers used:
 14052 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14053 ;; Tracked objects:
 14054 ;;		On entry : 0/0
 14055 ;;		On exit  : 0/0
 14056 ;;		Unchanged: 0/0
 14057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14059 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14061 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14062 ;;Total ram usage:        3 bytes
 14063 ;; Hardware stack levels used:    1
 14064 ;; Hardware stack levels required when called:    9
 14065 ;; This function calls:
 14066 ;;		_DimmerLightsPointSelect
 14067 ;;		_getAll_DimmerLights_AdjGO
 14068 ;;		_setBuz
 14069 ;;		_setDimmerLights_Trigger
 14070 ;;		_setRF_DimmerLights
 14071 ;;		_setTxData
 14072 ;; This function is called by:
 14073 ;;		_DlyOff_Main
 14074 ;;		_setRFSW_Control
 14075 ;;		_setSw_Main
 14076 ;; This function uses a non-reentrant model
 14077 ;;
 14078                           
 14079                           
 14080                           ;psect for function _setDimmerLights_SwOn
 14081  14B2                     _setDimmerLights_SwOn:	
 14082                           
 14083                           ;incstack = 0
 14084                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14085                           ;setDimmerLights_SwOn@sw stored from wreg
 14086  14B2  0020               	movlb	0	; select bank0
 14087  14B3  00E4               	movwf	setDimmerLights_SwOn@sw
 14088                           
 14089                           ;Dimmer_B1.c: 560: DimmerLightsPointSelect(sw);
 14090  14B4  0864               	movf	setDimmerLights_SwOn@sw,w
 14091  14B5  319C  24B6  3194   	fcall	_DimmerLightsPointSelect
 14092                           
 14093                           ;Dimmer_B1.c: 561: char idle = 0;
 14094  14B8  0020               	movlb	0	; select bank0
 14095  14B9  01E3               	clrf	setDimmerLights_SwOn@idle
 14096                           
 14097                           ;Dimmer_B1.c: 563: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
 14098  14BA  319C  2429  3194   	fcall	_getAll_DimmerLights_AdjGO
 14099  14BD  3A01               	xorlw	1
 14100  14BE  3000               	movlw	0
 14101  14BF  1903               	skipnz
 14102  14C0  3001               	movlw	1
 14103  14C1  0020               	movlb	0	; select bank0
 14104  14C2  00E2               	movwf	??_setDimmerLights_SwOn
 14105  14C3  0862               	movf	??_setDimmerLights_SwOn,w
 14106  14C4  00E3               	movwf	setDimmerLights_SwOn@idle
 14107                           
 14108                           ;Dimmer_B1.c: 565: if (idle == 0) {
 14109  14C5  08E3               	movf	setDimmerLights_SwOn@idle,f
 14110  14C6  1D03               	skipz
 14111  14C7  0008               	return
 14112                           
 14113                           ;Dimmer_B1.c: 566: DimmerLights->SwFlag = 1;
 14114  14C8  0877               	movf	_DimmerLights,w
 14115  14C9  3E09               	addlw	9
 14116  14CA  0086               	movwf	6
 14117  14CB  3001               	movlw	1	; select bank2/3
 14118  14CC  0087               	movwf	7
 14119  14CD  1701               	bsf	1,6
 14120                           
 14121                           ;Dimmer_B1.c: 567: setBuz(1, 100);
 14122  14CE  3064               	movlw	100
 14123  14CF  00A9               	movwf	setBuz@time
 14124  14D0  3000               	movlw	0
 14125  14D1  00AA               	movwf	setBuz@time+1
 14126  14D2  3001               	movlw	1
 14127  14D3  3196  26F2  3194   	fcall	_setBuz
 14128                           
 14129                           ;Dimmer_B1.c: 568: if (DimmerLights->Status == 0) {
 14130  14D6  0877               	movf	_DimmerLights,w
 14131  14D7  0086               	movwf	6
 14132  14D8  3001               	movlw	1	; select bank2/3
 14133  14D9  0087               	movwf	7
 14134  14DA  1A81               	btfsc	1,5
 14135  14DB  2CF8               	goto	l8867
 14136                           
 14137                           ;Dimmer_B1.c: 569: DimmerLights->Status = 1;
 14138  14DC  0877               	movf	_DimmerLights,w
 14139  14DD  0086               	movwf	6
 14140  14DE  3001               	movlw	1	; select bank2/3
 14141  14DF  0087               	movwf	7
 14142  14E0  1681               	bsf	1,5
 14143                           
 14144                           ;Dimmer_B1.c: 570: DimmerLights->Loop = 1;
 14145  14E1  0877               	movf	_DimmerLights,w
 14146  14E2  3E09               	addlw	9
 14147  14E3  0086               	movwf	6
 14148  14E4  3001               	movlw	1	; select bank2/3
 14149  14E5  0087               	movwf	7
 14150  14E6  1481               	bsf	1,1
 14151                           
 14152                           ;Dimmer_B1.c: 571: setDimmerLights_Trigger(sw, 1);
 14153  14E7  0020               	movlb	0	; select bank0
 14154  14E8  01A2               	clrf	setDimmerLights_Trigger@command
 14155  14E9  0AA2               	incf	setDimmerLights_Trigger@command,f
 14156  14EA  0864               	movf	setDimmerLights_SwOn@sw,w
 14157  14EB  319E  2672  3194   	fcall	_setDimmerLights_Trigger
 14158                           
 14159                           ;Dimmer_B1.c: 572: setRF_DimmerLights(sw, 1);
 14160  14EE  0020               	movlb	0	; select bank0
 14161  14EF  01DD               	clrf	setRF_DimmerLights@on
 14162  14F0  0ADD               	incf	setRF_DimmerLights@on,f
 14163  14F1  0864               	movf	setDimmerLights_SwOn@sw,w
 14164  14F2  318A  22B1  3194   	fcall	_setRF_DimmerLights
 14165                           
 14166                           ;Dimmer_B1.c: 573: setTxData();
 14167  14F5  318D  2571         	fcall	_setTxData
 14168                           
 14169                           ;Dimmer_B1.c: 574: } else {
 14170  14F7  0008               	return
 14171  14F8                     l8867:	
 14172                           
 14173                           ;Dimmer_B1.c: 575: DimmerLights->Status = 0;
 14174  14F8  0877               	movf	_DimmerLights,w
 14175  14F9  0086               	movwf	6
 14176  14FA  3001               	movlw	1	; select bank2/3
 14177  14FB  0087               	movwf	7
 14178  14FC  1281               	bcf	1,5
 14179  14FD  0008               	return
 14180  14FE                     __end_of_setDimmerLights_SwOn:	
 14181                           
 14182                           	psect	text87
 14183  16F2                     __ptext87:	
 14184 ;; *************** function _setBuz *****************
 14185 ;; Defined at:
 14186 ;;		line 22 in file "../src/Buzzer_B1.c"
 14187 ;; Parameters:    Size  Location     Type
 14188 ;;  count           1    wreg     unsigned char 
 14189 ;;  time            2    9[BANK0 ] int 
 14190 ;; Auto vars:     Size  Location     Type
 14191 ;;  count           1   12[BANK0 ] unsigned char 
 14192 ;; Return value:  Size  Location     Type
 14193 ;;		None               void
 14194 ;; Registers used:
 14195 ;;		wreg, status,2, status,0, pclath, cstack
 14196 ;; Tracked objects:
 14197 ;;		On entry : 0/0
 14198 ;;		On exit  : 0/0
 14199 ;;		Unchanged: 0/0
 14200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14201 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14204 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14205 ;;Total ram usage:        4 bytes
 14206 ;; Hardware stack levels used:    1
 14207 ;; Hardware stack levels required when called:    6
 14208 ;; This function calls:
 14209 ;;		___awdiv
 14210 ;; This function is called by:
 14211 ;;		_setDimmerLights_Main
 14212 ;;		_setDimmerLights_SwOn
 14213 ;;		_my_MainTimer
 14214 ;;		_setMain_Exception
 14215 ;;		_setLog_Code
 14216 ;;		_setControl_Lights_Table
 14217 ;;		_setSw_Main
 14218 ;; This function uses a non-reentrant model
 14219 ;;
 14220                           
 14221                           
 14222                           ;psect for function _setBuz
 14223  16F2                     _setBuz:	
 14224                           
 14225                           ;incstack = 0
 14226                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 14227                           ;setBuz@count stored from wreg
 14228  16F2  0020               	movlb	0	; select bank0
 14229  16F3  00AC               	movwf	setBuz@count
 14230                           
 14231                           ;Buzzer_B1.c: 23: time /= 10;
 14232  16F4  300A               	movlw	10
 14233  16F5  00A0               	movwf	___awdiv@divisor
 14234  16F6  3000               	movlw	0
 14235  16F7  00A1               	movwf	___awdiv@divisor+1
 14236  16F8  082A               	movf	setBuz@time+1,w
 14237  16F9  01A3               	clrf	___awdiv@dividend+1
 14238  16FA  07A3               	addwf	___awdiv@dividend+1,f
 14239  16FB  0829               	movf	setBuz@time,w
 14240  16FC  01A2               	clrf	___awdiv@dividend
 14241  16FD  07A2               	addwf	___awdiv@dividend,f
 14242  16FE  3195  25EF  3196   	fcall	___awdiv
 14243  1701  0020               	movlb	0	; select bank0
 14244  1702  0821               	movf	?___awdiv+1,w
 14245  1703  01AA               	clrf	setBuz@time+1
 14246  1704  07AA               	addwf	setBuz@time+1,f
 14247  1705  0820               	movf	?___awdiv,w
 14248  1706  01A9               	clrf	setBuz@time
 14249  1707  07A9               	addwf	setBuz@time,f
 14250                           
 14251                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 14252  1708  0021               	movlb	1	; select bank1
 14253  1709  1C30               	btfss	_Buz1^(0+128),0
 14254  170A  0008               	return
 14255                           
 14256                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 14257  170B  18B0               	btfsc	_Buz1^(0+128),1
 14258  170C  2F23               	goto	l96
 14259                           
 14260                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 14261  170D  14B0               	bsf	_Buz1^(0+128),1
 14262                           
 14263                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 14264  170E  01B1               	clrf	(_Buz1^(0+128)+1)
 14265  170F  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 14266                           
 14267                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 14268  1710  0020               	movlb	0	; select bank0
 14269  1711  082C               	movf	setBuz@count,w
 14270  1712  00AB               	movwf	??_setBuz
 14271  1713  082B               	movf	??_setBuz,w
 14272  1714  0021               	movlb	1	; select bank1
 14273  1715  00B3               	movwf	(_Buz1^(0+128)+3)
 14274                           
 14275                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 14276  1716  0020               	movlb	0	; select bank0
 14277  1717  082A               	movf	setBuz@time+1,w
 14278  1718  0021               	movlb	1	; select bank1
 14279  1719  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 14280  171A  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 14281  171B  0020               	movlb	0	; select bank0
 14282  171C  0829               	movf	setBuz@time,w
 14283  171D  0021               	movlb	1	; select bank1
 14284  171E  01B6               	clrf	(_Buz1^(0+128)+6)
 14285  171F  07B6               	addwf	(_Buz1^(0+128)+6),f
 14286                           
 14287                           ;Buzzer_B1.c: 30: RB3 = 1;
 14288  1720  0020               	movlb	0	; select bank0
 14289  1721  158D               	bsf	13,3	;volatile
 14290                           
 14291                           ;Buzzer_B1.c: 31: } else {
 14292  1722  0008               	return
 14293  1723                     l96:	
 14294                           
 14295                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 14296  1723  19B0               	btfsc	_Buz1^(0+128),3
 14297  1724  2F37               	goto	l98
 14298                           
 14299                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 14300  1725  15B0               	bsf	_Buz1^(0+128),3
 14301                           
 14302                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 14303  1726  0020               	movlb	0	; select bank0
 14304  1727  082C               	movf	setBuz@count,w
 14305  1728  00AB               	movwf	??_setBuz
 14306  1729  082B               	movf	??_setBuz,w
 14307  172A  0021               	movlb	1	; select bank1
 14308  172B  00B4               	movwf	(_Buz1^(0+128)+4)
 14309                           
 14310                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 14311  172C  0020               	movlb	0	; select bank0
 14312  172D  082A               	movf	setBuz@time+1,w
 14313  172E  0021               	movlb	1	; select bank1
 14314  172F  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 14315  1730  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 14316  1731  0020               	movlb	0	; select bank0
 14317  1732  0829               	movf	setBuz@time,w
 14318  1733  0021               	movlb	1	; select bank1
 14319  1734  01B8               	clrf	(_Buz1^(0+128)+8)
 14320  1735  07B8               	addwf	(_Buz1^(0+128)+8),f
 14321                           
 14322                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 14323  1736  0008               	return
 14324  1737                     l98:	
 14325  1737  1A30               	btfsc	_Buz1^(0+128),4
 14326  1738  0008               	return
 14327                           
 14328                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 14329  1739  1630               	bsf	_Buz1^(0+128),4
 14330                           
 14331                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 14332  173A  0020               	movlb	0	; select bank0
 14333  173B  082C               	movf	setBuz@count,w
 14334  173C  00AB               	movwf	??_setBuz
 14335  173D  082B               	movf	??_setBuz,w
 14336  173E  0021               	movlb	1	; select bank1
 14337  173F  00B5               	movwf	(_Buz1^(0+128)+5)
 14338                           
 14339                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 14340  1740  0020               	movlb	0	; select bank0
 14341  1741  082A               	movf	setBuz@time+1,w
 14342  1742  0021               	movlb	1	; select bank1
 14343  1743  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 14344  1744  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 14345  1745  0020               	movlb	0	; select bank0
 14346  1746  0829               	movf	setBuz@time,w
 14347  1747  0021               	movlb	1	; select bank1
 14348  1748  01BA               	clrf	(_Buz1^(0+128)+10)
 14349  1749  07BA               	addwf	(_Buz1^(0+128)+10),f
 14350  174A  0008               	return
 14351  174B                     __end_of_setBuz:	
 14352                           
 14353                           	psect	text88
 14354  15EF                     __ptext88:	
 14355 ;; *************** function ___awdiv *****************
 14356 ;; Defined at:
 14357 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14358 ;; Parameters:    Size  Location     Type
 14359 ;;  divisor         2    0[BANK0 ] int 
 14360 ;;  dividend        2    2[BANK0 ] int 
 14361 ;; Auto vars:     Size  Location     Type
 14362 ;;  quotient        2    7[BANK0 ] int 
 14363 ;;  sign            1    6[BANK0 ] unsigned char 
 14364 ;;  counter         1    5[BANK0 ] unsigned char 
 14365 ;; Return value:  Size  Location     Type
 14366 ;;                  2    0[BANK0 ] int 
 14367 ;; Registers used:
 14368 ;;		wreg, status,2, status,0
 14369 ;; Tracked objects:
 14370 ;;		On entry : 0/0
 14371 ;;		On exit  : 0/0
 14372 ;;		Unchanged: 0/0
 14373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14374 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14375 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14377 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14378 ;;Total ram usage:        9 bytes
 14379 ;; Hardware stack levels used:    1
 14380 ;; Hardware stack levels required when called:    5
 14381 ;; This function calls:
 14382 ;;		Nothing
 14383 ;; This function is called by:
 14384 ;;		_setBuz
 14385 ;; This function uses a non-reentrant model
 14386 ;;
 14387                           
 14388                           
 14389                           ;psect for function ___awdiv
 14390  15EF                     ___awdiv:	
 14391                           
 14392                           ;incstack = 0
 14393                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14394  15EF  0020               	movlb	0	; select bank0
 14395  15F0  01A6               	clrf	___awdiv@sign
 14396  15F1  1FA1               	btfss	___awdiv@divisor+1,7
 14397  15F2  2DFA               	goto	l8661
 14398  15F3  09A0               	comf	___awdiv@divisor,f
 14399  15F4  09A1               	comf	___awdiv@divisor+1,f
 14400  15F5  0AA0               	incf	___awdiv@divisor,f
 14401  15F6  1903               	skipnz
 14402  15F7  0AA1               	incf	___awdiv@divisor+1,f
 14403  15F8  01A6               	clrf	___awdiv@sign
 14404  15F9  0AA6               	incf	___awdiv@sign,f
 14405  15FA                     l8661:	
 14406  15FA  1FA3               	btfss	___awdiv@dividend+1,7
 14407  15FB  2E05               	goto	l8667
 14408  15FC  09A2               	comf	___awdiv@dividend,f
 14409  15FD  09A3               	comf	___awdiv@dividend+1,f
 14410  15FE  0AA2               	incf	___awdiv@dividend,f
 14411  15FF  1903               	skipnz
 14412  1600  0AA3               	incf	___awdiv@dividend+1,f
 14413  1601  3001               	movlw	1
 14414  1602  00A4               	movwf	??___awdiv
 14415  1603  0824               	movf	??___awdiv,w
 14416  1604  06A6               	xorwf	___awdiv@sign,f
 14417  1605                     l8667:	
 14418  1605  01A7               	clrf	___awdiv@quotient
 14419  1606  01A8               	clrf	___awdiv@quotient+1
 14420  1607  0821               	movf	___awdiv@divisor+1,w
 14421  1608  0420               	iorwf	___awdiv@divisor,w
 14422  1609  1903               	skipnz
 14423  160A  2E34               	goto	l8689
 14424  160B  01A5               	clrf	___awdiv@counter
 14425  160C  0AA5               	incf	___awdiv@counter,f
 14426  160D                     l8677:	
 14427  160D  1BA1               	btfsc	___awdiv@divisor+1,7
 14428  160E  2E19               	goto	l8679
 14429  160F  3001               	movlw	1
 14430  1610                     u9275:	
 14431  1610  35A0               	lslf	___awdiv@divisor,f
 14432  1611  0DA1               	rlf	___awdiv@divisor+1,f
 14433  1612  0B89               	decfsz	9,f
 14434  1613  2E10               	goto	u9275
 14435  1614  3001               	movlw	1
 14436  1615  00A4               	movwf	??___awdiv
 14437  1616  0824               	movf	??___awdiv,w
 14438  1617  07A5               	addwf	___awdiv@counter,f
 14439  1618  2E0D               	goto	l8677
 14440  1619                     l8679:	
 14441  1619  3001               	movlw	1
 14442  161A                     u9295:	
 14443  161A  35A7               	lslf	___awdiv@quotient,f
 14444  161B  0DA8               	rlf	___awdiv@quotient+1,f
 14445  161C  0B89               	decfsz	9,f
 14446  161D  2E1A               	goto	u9295
 14447  161E  0821               	movf	___awdiv@divisor+1,w
 14448  161F  0223               	subwf	___awdiv@dividend+1,w
 14449  1620  1D03               	skipz
 14450  1621  2E24               	goto	u9305
 14451  1622  0820               	movf	___awdiv@divisor,w
 14452  1623  0222               	subwf	___awdiv@dividend,w
 14453  1624                     u9305:	
 14454  1624  1C03               	skipc
 14455  1625  2E2B               	goto	l8685
 14456  1626  0820               	movf	___awdiv@divisor,w
 14457  1627  02A2               	subwf	___awdiv@dividend,f
 14458  1628  0821               	movf	___awdiv@divisor+1,w
 14459  1629  3BA3               	subwfb	___awdiv@dividend+1,f
 14460  162A  1427               	bsf	___awdiv@quotient,0
 14461  162B                     l8685:	
 14462  162B  3001               	movlw	1
 14463  162C                     u9315:	
 14464  162C  36A1               	lsrf	___awdiv@divisor+1,f
 14465  162D  0CA0               	rrf	___awdiv@divisor,f
 14466  162E  0B89               	decfsz	9,f
 14467  162F  2E2C               	goto	u9315
 14468  1630  3001               	movlw	1
 14469  1631  02A5               	subwf	___awdiv@counter,f
 14470  1632  1D03               	btfss	3,2
 14471  1633  2E19               	goto	l8679
 14472  1634                     l8689:	
 14473  1634  0826               	movf	___awdiv@sign,w
 14474  1635  1903               	btfsc	3,2
 14475  1636  2E3C               	goto	l8693
 14476  1637  09A7               	comf	___awdiv@quotient,f
 14477  1638  09A8               	comf	___awdiv@quotient+1,f
 14478  1639  0AA7               	incf	___awdiv@quotient,f
 14479  163A  1903               	skipnz
 14480  163B  0AA8               	incf	___awdiv@quotient+1,f
 14481  163C                     l8693:	
 14482  163C  0828               	movf	___awdiv@quotient+1,w
 14483  163D  01A1               	clrf	?___awdiv+1
 14484  163E  07A1               	addwf	?___awdiv+1,f
 14485  163F  0827               	movf	___awdiv@quotient,w
 14486  1640  01A0               	clrf	?___awdiv
 14487  1641  07A0               	addwf	?___awdiv,f
 14488  1642  0008               	return
 14489  1643                     __end_of___awdiv:	
 14490                           
 14491                           	psect	text89
 14492  1C29                     __ptext89:	
 14493 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 14494 ;; Defined at:
 14495 ;;		line 544 in file "../src/Dimmer_B1.c"
 14496 ;; Parameters:    Size  Location     Type
 14497 ;;		None
 14498 ;; Auto vars:     Size  Location     Type
 14499 ;;  adjgo           1    1[BANK0 ] unsigned char 
 14500 ;; Return value:  Size  Location     Type
 14501 ;;                  1    wreg      unsigned char 
 14502 ;; Registers used:
 14503 ;;		wreg, status,2
 14504 ;; Tracked objects:
 14505 ;;		On entry : 0/0
 14506 ;;		On exit  : 0/0
 14507 ;;		Unchanged: 0/0
 14508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14510 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14512 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14513 ;;Total ram usage:        3 bytes
 14514 ;; Hardware stack levels used:    1
 14515 ;; Hardware stack levels required when called:    5
 14516 ;; This function calls:
 14517 ;;		Nothing
 14518 ;; This function is called by:
 14519 ;;		_setDimmerLights_SwOn
 14520 ;;		_setDimmerLights_AdjControl
 14521 ;;		_Load_Main
 14522 ;; This function uses a non-reentrant model
 14523 ;;
 14524                           
 14525                           
 14526                           ;psect for function _getAll_DimmerLights_AdjGO
 14527  1C29                     _getAll_DimmerLights_AdjGO:	
 14528                           
 14529                           ;Dimmer_B1.c: 545: char adjgo = 0;
 14530                           
 14531                           ;incstack = 0
 14532                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 14533  1C29  0020               	movlb	0	; select bank0
 14534  1C2A  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 14535                           
 14536                           ;Dimmer_B1.c: 550: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 14537  1C2B  01A2               	clrf	_getAll_DimmerLights_AdjGO$2577
 14538  1C2C  0AA2               	incf	_getAll_DimmerLights_AdjGO$2577,f
 14539  1C2D  0023               	movlb	3	; select bank3
 14540  1C2E  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
 14541  1C2F  19D5               	btfsc	(_DimmerLights2^(0+384)+8),3
 14542  1C30  2C33               	goto	l8779
 14543  1C31  0020               	movlb	0	; select bank0
 14544  1C32  01A2               	clrf	_getAll_DimmerLights_AdjGO$2577
 14545  1C33                     l8779:	
 14546  1C33  0020               	movlb	0	; select bank0
 14547  1C34  0822               	movf	_getAll_DimmerLights_AdjGO$2577,w
 14548  1C35  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 14549  1C36  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 14550  1C37  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 14551                           
 14552                           ;Dimmer_B1.c: 555: return adjgo;
 14553  1C38  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 14554  1C39  0008               	return
 14555  1C3A                     __end_of_getAll_DimmerLights_AdjGO:	
 14556                           
 14557                           	psect	text90
 14558  0804                     __ptext90:	
 14559 ;; *************** function _setDimmerLights_SwOff *****************
 14560 ;; Defined at:
 14561 ;;		line 581 in file "../src/Dimmer_B1.c"
 14562 ;; Parameters:    Size  Location     Type
 14563 ;;  sw              1    wreg     unsigned char 
 14564 ;; Auto vars:     Size  Location     Type
 14565 ;;  sw              1   69[BANK0 ] unsigned char 
 14566 ;;  command         1   68[BANK0 ] unsigned char 
 14567 ;; Return value:  Size  Location     Type
 14568 ;;		None               void
 14569 ;; Registers used:
 14570 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14571 ;; Tracked objects:
 14572 ;;		On entry : 0/0
 14573 ;;		On exit  : 0/0
 14574 ;;		Unchanged: 0/0
 14575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;Total ram usage:        4 bytes
 14581 ;; Hardware stack levels used:    1
 14582 ;; Hardware stack levels required when called:    9
 14583 ;; This function calls:
 14584 ;;		_DimmerLightsPointSelect
 14585 ;;		_setDelayOff_GO
 14586 ;;		_setDimmerLights_Trigger
 14587 ;;		_setDimmerLights_TriggerAdj
 14588 ;;		_setRF_DimmerLights
 14589 ;;		_setTxData
 14590 ;; This function is called by:
 14591 ;;		_DlyOff_Main
 14592 ;;		_setDimmerLights_ErrorClose
 14593 ;;		_setRFSW_Control
 14594 ;;		_setSw_Main
 14595 ;; This function uses a non-reentrant model
 14596 ;;
 14597                           
 14598                           
 14599                           ;psect for function _setDimmerLights_SwOff
 14600  0804                     _setDimmerLights_SwOff:	
 14601                           
 14602                           ;incstack = 0
 14603                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14604                           ;setDimmerLights_SwOff@sw stored from wreg
 14605  0804  0020               	movlb	0	; select bank0
 14606  0805  00E5               	movwf	setDimmerLights_SwOff@sw
 14607                           
 14608                           ;Dimmer_B1.c: 582: DimmerLightsPointSelect(sw);
 14609  0806  0865               	movf	setDimmerLights_SwOff@sw,w
 14610  0807  319C  24B6  3188   	fcall	_DimmerLightsPointSelect
 14611                           
 14612                           ;Dimmer_B1.c: 583: char command = DimmerLights->Status == 1 ? 1 : 0;
 14613  080A  0877               	movf	_DimmerLights,w
 14614  080B  0086               	movwf	6
 14615  080C  3001               	movlw	1	; select bank2/3
 14616  080D  0087               	movwf	7
 14617  080E  3000               	movlw	0
 14618  080F  1A81               	btfsc	1,5
 14619  0810  3001               	movlw	1
 14620  0811  0020               	movlb	0	; select bank0
 14621  0812  00E4               	movwf	setDimmerLights_SwOff@command
 14622                           
 14623                           ;Dimmer_B1.c: 584: if (DimmerLights->SwFlag == 1) {
 14624  0813  0877               	movf	_DimmerLights,w
 14625  0814  3E09               	addlw	9
 14626  0815  0086               	movwf	6
 14627  0816  3001               	movlw	1	; select bank2/3
 14628  0817  0087               	movwf	7
 14629  0818  1F01               	btfss	1,6
 14630  0819  0008               	return
 14631                           
 14632                           ;Dimmer_B1.c: 585: DimmerLights->SwFlag = 0;
 14633  081A  0877               	movf	_DimmerLights,w
 14634  081B  3E09               	addlw	9
 14635  081C  0086               	movwf	6
 14636  081D  3001               	movlw	1	; select bank2/3
 14637  081E  0087               	movwf	7
 14638  081F  1301               	bcf	1,6
 14639                           
 14640                           ;Dimmer_B1.c: 586: if (DimmerLights->Status == 1) {
 14641  0820  0877               	movf	_DimmerLights,w
 14642  0821  0086               	movwf	6
 14643  0822  3001               	movlw	1	; select bank2/3
 14644  0823  0087               	movwf	7
 14645  0824  1E81               	btfss	1,5
 14646  0825  284B               	goto	l8893
 14647                           
 14648                           ;Dimmer_B1.c: 587: if (DimmerLights->SwAdj == 1) {
 14649  0826  0877               	movf	_DimmerLights,w
 14650  0827  3E09               	addlw	9
 14651  0828  0086               	movwf	6
 14652  0829  3001               	movlw	1	; select bank2/3
 14653  082A  0087               	movwf	7
 14654  082B  1F81               	btfss	1,7
 14655  082C  2857               	goto	l860
 14656                           
 14657                           ;Dimmer_B1.c: 588: DimmerLights->SwAdj = 0;
 14658  082D  0877               	movf	_DimmerLights,w
 14659  082E  3E09               	addlw	9
 14660  082F  0086               	movwf	6
 14661  0830  3001               	movlw	1	; select bank2/3
 14662  0831  0087               	movwf	7
 14663  0832  1381               	bcf	1,7
 14664                           
 14665                           ;Dimmer_B1.c: 589: setDimmerLights_TriggerAdj(sw, 0);
 14666  0833  01A2               	clrf	setDimmerLights_TriggerAdj@command
 14667  0834  0865               	movf	setDimmerLights_SwOff@sw,w
 14668  0835  319E  26CE  3188   	fcall	_setDimmerLights_TriggerAdj
 14669                           
 14670                           ;Dimmer_B1.c: 590: product->Data[17]=product->Data[26 + sw];
 14671  0838  0020               	movlb	0	; select bank0
 14672  0839  0865               	movf	setDimmerLights_SwOff@sw,w
 14673  083A  3E1A               	addlw	26
 14674  083B  077B               	addwf	_product,w
 14675  083C  00E2               	movwf	??_setDimmerLights_SwOff
 14676  083D  0862               	movf	??_setDimmerLights_SwOff,w
 14677  083E  0086               	movwf	6
 14678  083F  3002               	movlw	2	; select bank4/5
 14679  0840  0087               	movwf	7
 14680  0841  0801               	movf	1,w
 14681  0842  00E3               	movwf	??_setDimmerLights_SwOff+1
 14682  0843  087B               	movf	_product,w
 14683  0844  3E11               	addlw	17
 14684  0845  0086               	movwf	6
 14685  0846  3002               	movlw	2	; select bank4/5
 14686  0847  0087               	movwf	7
 14687  0848  0863               	movf	??_setDimmerLights_SwOff+1,w
 14688  0849  0081               	movwf	1
 14689                           
 14690                           ;Dimmer_B1.c: 593: }
 14691                           ;Dimmer_B1.c: 594: } else {
 14692  084A  2857               	goto	l860
 14693  084B                     l8893:	
 14694                           
 14695                           ;Dimmer_B1.c: 595: setDimmerLights_Trigger(sw, 0);
 14696  084B  01A2               	clrf	setDimmerLights_Trigger@command
 14697  084C  0865               	movf	setDimmerLights_SwOff@sw,w
 14698  084D  319E  2672  3188   	fcall	_setDimmerLights_Trigger
 14699                           
 14700                           ;Dimmer_B1.c: 596: setDelayOff_GO(sw, 0, 0);
 14701  0850  0020               	movlb	0	; select bank0
 14702  0851  01AA               	clrf	setDelayOff_GO@command
 14703  0852  01AB               	clrf	setDelayOff_GO@value
 14704  0853  0865               	movf	setDimmerLights_SwOff@sw,w
 14705  0854  3188  2063  3188   	fcall	_setDelayOff_GO
 14706  0857                     l860:	
 14707                           
 14708                           ;Dimmer_B1.c: 599: }
 14709                           ;Dimmer_B1.c: 600: setRF_DimmerLights(sw, command);
 14710  0857  0020               	movlb	0	; select bank0
 14711  0858  0864               	movf	setDimmerLights_SwOff@command,w
 14712  0859  00E2               	movwf	??_setDimmerLights_SwOff
 14713  085A  0862               	movf	??_setDimmerLights_SwOff,w
 14714  085B  00DD               	movwf	setRF_DimmerLights@on
 14715  085C  0865               	movf	setDimmerLights_SwOff@sw,w
 14716  085D  318A  22B1  3188   	fcall	_setRF_DimmerLights
 14717                           
 14718                           ;Dimmer_B1.c: 601: setTxData();
 14719  0860  318D  2571         	fcall	_setTxData
 14720  0862  0008               	return
 14721  0863                     __end_of_setDimmerLights_SwOff:	
 14722                           
 14723                           	psect	text91
 14724  0D71                     __ptext91:	
 14725 ;; *************** function _setTxData *****************
 14726 ;; Defined at:
 14727 ;;		line 207 in file "../src/RF_Control_B1.c"
 14728 ;; Parameters:    Size  Location     Type
 14729 ;;		None
 14730 ;; Auto vars:     Size  Location     Type
 14731 ;;  i               1    0        unsigned char 
 14732 ;; Return value:  Size  Location     Type
 14733 ;;		None               void
 14734 ;; Registers used:
 14735 ;;		wreg, fsr1l, fsr1h
 14736 ;; Tracked objects:
 14737 ;;		On entry : 0/0
 14738 ;;		On exit  : 0/0
 14739 ;;		Unchanged: 0/0
 14740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14743 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14744 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14745 ;;Total ram usage:        1 bytes
 14746 ;; Hardware stack levels used:    1
 14747 ;; Hardware stack levels required when called:    5
 14748 ;; This function calls:
 14749 ;;		Nothing
 14750 ;; This function is called by:
 14751 ;;		_setDimmerLights_SwOn
 14752 ;;		_setDimmerLights_SwOff
 14753 ;;		_setDimmerLights_Adj
 14754 ;;		_setControl_Lights_Table
 14755 ;;		_setRFSW_AdjControl
 14756 ;; This function uses a non-reentrant model
 14757 ;;
 14758                           
 14759                           
 14760                           ;psect for function _setTxData
 14761  0D71                     _setTxData:	
 14762                           
 14763                           ;RF_Control_B1.c: 208: char i;
 14764                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
 14765                           
 14766                           ;incstack = 0
 14767                           ; Regs used in _setTxData: [wregfsr1]
 14768  0D71  0021               	movlb	1	; select bank1
 14769  0D72  1C3C               	btfss	_RF1^(0+128),0
 14770  0D73  0008               	return
 14771                           
 14772                           ;RF_Control_B1.c: 211: RF1.TransceiveGO = 1;
 14773  0D74  153C               	bsf	_RF1^(0+128),2
 14774                           
 14775                           ;RF_Control_B1.c: 212: RF1.RunTime = 20;
 14776  0D75  3014               	movlw	20
 14777  0D76  00C3               	movwf	(_RF1^(0+128)+7)
 14778  0D77  3000               	movlw	0
 14779  0D78  00C4               	movwf	(_RF1^(0+128)+8)
 14780                           
 14781                           ;RF_Control_B1.c: 221: RF_Data[0] = 0x63;
 14782  0D79  3063               	movlw	99
 14783  0D7A  0020               	movlb	0	; select bank0
 14784  0D7B  00A0               	movwf	??_setTxData
 14785  0D7C  0820               	movf	??_setTxData,w
 14786  0D7D  0023               	movlb	3	; select bank3
 14787  0D7E  00A0               	movwf	_RF_Data^(0+384)
 14788                           
 14789                           ;RF_Control_B1.c: 222: RF_Data[1] = 0x02;
 14790  0D7F  3002               	movlw	2
 14791  0D80  0020               	movlb	0	; select bank0
 14792  0D81  00A0               	movwf	??_setTxData
 14793  0D82  0820               	movf	??_setTxData,w
 14794  0D83  0023               	movlb	3	; select bank3
 14795  0D84  00A1               	movwf	(_RF_Data^(0+384)+1)
 14796                           
 14797                           ;RF_Control_B1.c: 223: RF_Data[2] = product->Data[2];
 14798  0D85  087B               	movf	_product,w
 14799  0D86  0086               	movwf	6
 14800  0D87  3002               	movlw	2	; select bank4/5
 14801  0D88  0087               	movwf	7
 14802  0D89  3002               	movlw	2	; select bank4/5
 14803  0D8A  3F42               	moviw [2]fsr1
 14804  0D8B  00A2               	movwf	(_RF_Data^(0+384)+2)
 14805                           
 14806                           ;RF_Control_B1.c: 224: RF_Data[3] = product->Data[3];
 14807  0D8C  087B               	movf	_product,w
 14808  0D8D  0086               	movwf	6
 14809  0D8E  3002               	movlw	2	; select bank4/5
 14810  0D8F  0087               	movwf	7
 14811  0D90  3002               	movlw	2	; select bank4/5
 14812  0D91  3F43               	moviw [3]fsr1
 14813  0D92  00A3               	movwf	(_RF_Data^(0+384)+3)
 14814                           
 14815                           ;RF_Control_B1.c: 225: RF_Data[4] = product->Data[4];
 14816  0D93  087B               	movf	_product,w
 14817  0D94  0086               	movwf	6
 14818  0D95  3002               	movlw	2	; select bank4/5
 14819  0D96  0087               	movwf	7
 14820  0D97  3002               	movlw	2	; select bank4/5
 14821  0D98  3F44               	moviw [4]fsr1
 14822  0D99  00A4               	movwf	(_RF_Data^(0+384)+4)
 14823                           
 14824                           ;RF_Control_B1.c: 226: RF_Data[5] = product->Data[5];
 14825  0D9A  087B               	movf	_product,w
 14826  0D9B  0086               	movwf	6
 14827  0D9C  3002               	movlw	2	; select bank4/5
 14828  0D9D  0087               	movwf	7
 14829  0D9E  3002               	movlw	2	; select bank4/5
 14830  0D9F  3F45               	moviw [5]fsr1
 14831  0DA0  00A5               	movwf	(_RF_Data^(0+384)+5)
 14832                           
 14833                           ;RF_Control_B1.c: 227: RF_Data[6] = product->Data[6];
 14834  0DA1  087B               	movf	_product,w
 14835  0DA2  0086               	movwf	6
 14836  0DA3  3002               	movlw	2	; select bank4/5
 14837  0DA4  0087               	movwf	7
 14838  0DA5  3002               	movlw	2	; select bank4/5
 14839  0DA6  3F46               	moviw [6]fsr1
 14840  0DA7  00A6               	movwf	(_RF_Data^(0+384)+6)
 14841                           
 14842                           ;RF_Control_B1.c: 228: RF_Data[7] = product->Data[7];
 14843  0DA8  087B               	movf	_product,w
 14844  0DA9  0086               	movwf	6
 14845  0DAA  3002               	movlw	2	; select bank4/5
 14846  0DAB  0087               	movwf	7
 14847  0DAC  3002               	movlw	2	; select bank4/5
 14848  0DAD  3F47               	moviw [7]fsr1
 14849  0DAE  00A7               	movwf	(_RF_Data^(0+384)+7)
 14850                           
 14851                           ;RF_Control_B1.c: 229: RF_Data[8] = product->Data[8];
 14852  0DAF  087B               	movf	_product,w
 14853  0DB0  0086               	movwf	6
 14854  0DB1  3002               	movlw	2	; select bank4/5
 14855  0DB2  0087               	movwf	7
 14856  0DB3  3002               	movlw	2	; select bank4/5
 14857  0DB4  3F48               	moviw [8]fsr1
 14858  0DB5  00A8               	movwf	(_RF_Data^(0+384)+8)
 14859                           
 14860                           ;RF_Control_B1.c: 230: RF_Data[9] = product->Data[9];
 14861  0DB6  087B               	movf	_product,w
 14862  0DB7  0086               	movwf	6
 14863  0DB8  3002               	movlw	2	; select bank4/5
 14864  0DB9  0087               	movwf	7
 14865  0DBA  3002               	movlw	2	; select bank4/5
 14866  0DBB  3F49               	moviw [9]fsr1
 14867  0DBC  00A9               	movwf	(_RF_Data^(0+384)+9)
 14868                           
 14869                           ;RF_Control_B1.c: 231: RF_Data[10] = product->Data[10];
 14870  0DBD  087B               	movf	_product,w
 14871  0DBE  0086               	movwf	6
 14872  0DBF  3002               	movlw	2	; select bank4/5
 14873  0DC0  0087               	movwf	7
 14874  0DC1  3002               	movlw	2	; select bank4/5
 14875  0DC2  3F4A               	moviw [10]fsr1
 14876  0DC3  00AA               	movwf	(_RF_Data^(0+384)+10)
 14877                           
 14878                           ;RF_Control_B1.c: 232: RF_Data[11] = product->Data[11];
 14879  0DC4  087B               	movf	_product,w
 14880  0DC5  0086               	movwf	6
 14881  0DC6  3002               	movlw	2	; select bank4/5
 14882  0DC7  0087               	movwf	7
 14883  0DC8  3002               	movlw	2	; select bank4/5
 14884  0DC9  3F4B               	moviw [11]fsr1
 14885  0DCA  00AB               	movwf	(_RF_Data^(0+384)+11)
 14886                           
 14887                           ;RF_Control_B1.c: 233: RF_Data[12] = product->Data[12];
 14888  0DCB  087B               	movf	_product,w
 14889  0DCC  0086               	movwf	6
 14890  0DCD  3002               	movlw	2	; select bank4/5
 14891  0DCE  0087               	movwf	7
 14892  0DCF  3002               	movlw	2	; select bank4/5
 14893  0DD0  3F4C               	moviw [12]fsr1
 14894  0DD1  00AC               	movwf	(_RF_Data^(0+384)+12)
 14895                           
 14896                           ;RF_Control_B1.c: 234: RF_Data[13] = product->Data[13];
 14897  0DD2  087B               	movf	_product,w
 14898  0DD3  0086               	movwf	6
 14899  0DD4  3002               	movlw	2	; select bank4/5
 14900  0DD5  0087               	movwf	7
 14901  0DD6  3002               	movlw	2	; select bank4/5
 14902  0DD7  3F4D               	moviw [13]fsr1
 14903  0DD8  00AD               	movwf	(_RF_Data^(0+384)+13)
 14904                           
 14905                           ;RF_Control_B1.c: 235: RF_Data[14] = product->Data[14];
 14906  0DD9  087B               	movf	_product,w
 14907  0DDA  0086               	movwf	6
 14908  0DDB  3002               	movlw	2	; select bank4/5
 14909  0DDC  0087               	movwf	7
 14910  0DDD  3002               	movlw	2	; select bank4/5
 14911  0DDE  3F4E               	moviw [14]fsr1
 14912  0DDF  00AE               	movwf	(_RF_Data^(0+384)+14)
 14913                           
 14914                           ;RF_Control_B1.c: 236: RF_Data[15] = product->Data[15];
 14915  0DE0  087B               	movf	_product,w
 14916  0DE1  0086               	movwf	6
 14917  0DE2  3002               	movlw	2	; select bank4/5
 14918  0DE3  0087               	movwf	7
 14919  0DE4  3002               	movlw	2	; select bank4/5
 14920  0DE5  3F4F               	moviw [15]fsr1
 14921  0DE6  00AF               	movwf	(_RF_Data^(0+384)+15)
 14922                           
 14923                           ;RF_Control_B1.c: 237: RF_Data[16] = product->Data[16];
 14924  0DE7  087B               	movf	_product,w
 14925  0DE8  0086               	movwf	6
 14926  0DE9  3002               	movlw	2	; select bank4/5
 14927  0DEA  0087               	movwf	7
 14928  0DEB  3002               	movlw	2	; select bank4/5
 14929  0DEC  3F50               	moviw [16]fsr1
 14930  0DED  00B0               	movwf	(_RF_Data^(0+384)+16)
 14931                           
 14932                           ;RF_Control_B1.c: 238: RF_Data[17] = product->Data[17];
 14933  0DEE  087B               	movf	_product,w
 14934  0DEF  0086               	movwf	6
 14935  0DF0  3002               	movlw	2	; select bank4/5
 14936  0DF1  0087               	movwf	7
 14937  0DF2  3002               	movlw	2	; select bank4/5
 14938  0DF3  3F51               	moviw [17]fsr1
 14939  0DF4  00B1               	movwf	(_RF_Data^(0+384)+17)
 14940                           
 14941                           ;RF_Control_B1.c: 239: RF_Data[18] = product->Data[18];
 14942  0DF5  087B               	movf	_product,w
 14943  0DF6  0086               	movwf	6
 14944  0DF7  3002               	movlw	2	; select bank4/5
 14945  0DF8  0087               	movwf	7
 14946  0DF9  3002               	movlw	2	; select bank4/5
 14947  0DFA  3F52               	moviw [18]fsr1
 14948  0DFB  00B2               	movwf	(_RF_Data^(0+384)+18)
 14949                           
 14950                           ;RF_Control_B1.c: 240: RF_Data[19] = product->Data[19];
 14951  0DFC  087B               	movf	_product,w
 14952  0DFD  0086               	movwf	6
 14953  0DFE  3002               	movlw	2	; select bank4/5
 14954  0DFF  0087               	movwf	7
 14955  0E00  3002               	movlw	2	; select bank4/5
 14956  0E01  3F53               	moviw [19]fsr1
 14957  0E02  00B3               	movwf	(_RF_Data^(0+384)+19)
 14958                           
 14959                           ;RF_Control_B1.c: 241: RF_Data[20] = 210;
 14960  0E03  30D2               	movlw	210
 14961  0E04  0020               	movlb	0	; select bank0
 14962  0E05  00A0               	movwf	??_setTxData
 14963  0E06  0820               	movf	??_setTxData,w
 14964  0E07  0023               	movlb	3	; select bank3
 14965  0E08  00B4               	movwf	(_RF_Data^(0+384)+20)
 14966  0E09  0008               	return
 14967  0E0A                     __end_of_setTxData:	
 14968                           
 14969                           	psect	text92
 14970  0AB1                     __ptext92:	
 14971 ;; *************** function _setRF_DimmerLights *****************
 14972 ;; Defined at:
 14973 ;;		line 528 in file "../src/RF_Control_B1.c"
 14974 ;; Parameters:    Size  Location     Type
 14975 ;;  lights          1    wreg     unsigned char 
 14976 ;;  on              1   61[BANK0 ] unsigned char 
 14977 ;; Auto vars:     Size  Location     Type
 14978 ;;  lights          1   65[BANK0 ] unsigned char 
 14979 ;;  status          1   64[BANK0 ] unsigned char 
 14980 ;; Return value:  Size  Location     Type
 14981 ;;		None               void
 14982 ;; Registers used:
 14983 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14984 ;; Tracked objects:
 14985 ;;		On entry : 0/0
 14986 ;;		On exit  : 0/0
 14987 ;;		Unchanged: 0/0
 14988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14989 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14990 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14992 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14993 ;;Total ram usage:        5 bytes
 14994 ;; Hardware stack levels used:    1
 14995 ;; Hardware stack levels required when called:    8
 14996 ;; This function calls:
 14997 ;;		_setPercentValue
 14998 ;; This function is called by:
 14999 ;;		_DlyOff_Main
 15000 ;;		_setDimmerLights_SwOn
 15001 ;;		_setDimmerLights_SwOff
 15002 ;;		_setDimmerLights_Adj
 15003 ;;		_setRFSW_Control
 15004 ;; This function uses a non-reentrant model
 15005 ;;
 15006                           
 15007                           
 15008                           ;psect for function _setRF_DimmerLights
 15009  0AB1                     _setRF_DimmerLights:	
 15010                           
 15011                           ;incstack = 0
 15012                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15013                           ;setRF_DimmerLights@lights stored from wreg
 15014  0AB1  0020               	movlb	0	; select bank0
 15015  0AB2  00E1               	movwf	setRF_DimmerLights@lights
 15016                           
 15017                           ;RF_Control_B1.c: 529: char status = 1;
 15018  0AB3  01E0               	clrf	setRF_DimmerLights@status
 15019  0AB4  0AE0               	incf	setRF_DimmerLights@status,f
 15020                           
 15021                           ;RF_Control_B1.c: 530: status <<= (lights - 1);
 15022  0AB5  0861               	movf	setRF_DimmerLights@lights,w
 15023  0AB6  3EFF               	addlw	-1
 15024  0AB7  0A89               	incf	9,f
 15025  0AB8  2ABB               	goto	u9380
 15026  0AB9                     u9385:	
 15027  0AB9  1003               	clrc
 15028  0ABA  0DE0               	rlf	setRF_DimmerLights@status,f
 15029  0ABB                     u9380:	
 15030  0ABB  3EFF               	addlw	-1
 15031  0ABC  1D03               	skipz
 15032  0ABD  2AB9               	goto	u9385
 15033                           
 15034                           ;RF_Control_B1.c: 531: product->Data[11]=lights;
 15035  0ABE  0861               	movf	setRF_DimmerLights@lights,w
 15036  0ABF  00DE               	movwf	??_setRF_DimmerLights
 15037  0AC0  087B               	movf	_product,w
 15038  0AC1  3E0B               	addlw	11
 15039  0AC2  0086               	movwf	6
 15040  0AC3  3002               	movlw	2	; select bank4/5
 15041  0AC4  0087               	movwf	7
 15042  0AC5  085E               	movf	??_setRF_DimmerLights,w
 15043  0AC6  0081               	movwf	1
 15044                           
 15045                           ;RF_Control_B1.c: 534: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 15046  0AC7  3020               	movlw	32
 15047  0AC8  3194  2422  318A   	fcall	_setPercentValue
 15048  0ACB  0020               	movlb	0	; select bank0
 15049  0ACC  00DE               	movwf	??_setRF_DimmerLights
 15050  0ACD  0861               	movf	setRF_DimmerLights@lights,w
 15051  0ACE  3E14               	addlw	20
 15052  0ACF  077B               	addwf	_product,w
 15053  0AD0  00DF               	movwf	??_setRF_DimmerLights+1
 15054  0AD1  085F               	movf	??_setRF_DimmerLights+1,w
 15055  0AD2  0086               	movwf	6
 15056  0AD3  3002               	movlw	2	; select bank4/5
 15057  0AD4  0087               	movwf	7
 15058  0AD5  085E               	movf	??_setRF_DimmerLights,w
 15059  0AD6  0081               	movwf	1
 15060                           
 15061                           ;RF_Control_B1.c: 537: product->Data[9]=product->Data[20 + lights];
 15062  0AD7  0861               	movf	setRF_DimmerLights@lights,w
 15063  0AD8  3E14               	addlw	20
 15064  0AD9  077B               	addwf	_product,w
 15065  0ADA  00DE               	movwf	??_setRF_DimmerLights
 15066  0ADB  085E               	movf	??_setRF_DimmerLights,w
 15067  0ADC  0086               	movwf	6
 15068  0ADD  3002               	movlw	2	; select bank4/5
 15069  0ADE  0087               	movwf	7
 15070  0ADF  0801               	movf	1,w
 15071  0AE0  00DF               	movwf	??_setRF_DimmerLights+1
 15072  0AE1  087B               	movf	_product,w
 15073  0AE2  3E09               	addlw	9
 15074  0AE3  0086               	movwf	6
 15075  0AE4  3002               	movlw	2	; select bank4/5
 15076  0AE5  0087               	movwf	7
 15077  0AE6  085F               	movf	??_setRF_DimmerLights+1,w
 15078  0AE7  0081               	movwf	1
 15079                           
 15080                           ;RF_Control_B1.c: 538: product->Data[17]=product->Data[26 + lights];
 15081  0AE8  0861               	movf	setRF_DimmerLights@lights,w
 15082  0AE9  3E1A               	addlw	26
 15083  0AEA  077B               	addwf	_product,w
 15084  0AEB  00DE               	movwf	??_setRF_DimmerLights
 15085  0AEC  085E               	movf	??_setRF_DimmerLights,w
 15086  0AED  0086               	movwf	6
 15087  0AEE  3002               	movlw	2	; select bank4/5
 15088  0AEF  0087               	movwf	7
 15089  0AF0  0801               	movf	1,w
 15090  0AF1  00DF               	movwf	??_setRF_DimmerLights+1
 15091  0AF2  087B               	movf	_product,w
 15092  0AF3  3E11               	addlw	17
 15093  0AF4  0086               	movwf	6
 15094  0AF5  3002               	movlw	2	; select bank4/5
 15095  0AF6  0087               	movwf	7
 15096  0AF7  085F               	movf	??_setRF_DimmerLights+1,w
 15097  0AF8  0081               	movwf	1
 15098                           
 15099                           ;RF_Control_B1.c: 539: if (on == 1) {
 15100  0AF9  085D               	movf	setRF_DimmerLights@on,w
 15101  0AFA  3A01               	xorlw	1
 15102  0AFB  1D03               	skipz
 15103  0AFC  2B0D               	goto	l8741
 15104                           
 15105                           ;RF_Control_B1.c: 540: product->Data[15]=(product->Data[15] | status);
 15106  0AFD  087B               	movf	_product,w
 15107  0AFE  3E0F               	addlw	15
 15108  0AFF  0086               	movwf	6
 15109  0B00  3002               	movlw	2	; select bank4/5
 15110  0B01  0087               	movwf	7
 15111  0B02  0801               	movf	1,w
 15112  0B03  0460               	iorwf	setRF_DimmerLights@status,w
 15113  0B04  00DE               	movwf	??_setRF_DimmerLights
 15114  0B05  087B               	movf	_product,w
 15115  0B06  3E0F               	addlw	15
 15116  0B07  0086               	movwf	6
 15117  0B08  3002               	movlw	2	; select bank4/5
 15118  0B09  0087               	movwf	7
 15119  0B0A  085E               	movf	??_setRF_DimmerLights,w
 15120  0B0B  0081               	movwf	1
 15121                           
 15122                           ;RF_Control_B1.c: 541: } else {
 15123  0B0C  0008               	return
 15124  0B0D                     l8741:	
 15125                           
 15126                           ;RF_Control_B1.c: 542: product->Data[15]=(product->Data[15]&(~status));
 15127  0B0D  087B               	movf	_product,w
 15128  0B0E  3E0F               	addlw	15
 15129  0B0F  0086               	movwf	6
 15130  0B10  3002               	movlw	2	; select bank4/5
 15131  0B11  0087               	movwf	7
 15132  0B12  0960               	comf	setRF_DimmerLights@status,w
 15133  0B13  0501               	andwf	1,w
 15134  0B14  00DE               	movwf	??_setRF_DimmerLights
 15135  0B15  087B               	movf	_product,w
 15136  0B16  3E0F               	addlw	15
 15137  0B17  0086               	movwf	6
 15138  0B18  3002               	movlw	2	; select bank4/5
 15139  0B19  0087               	movwf	7
 15140  0B1A  085E               	movf	??_setRF_DimmerLights,w
 15141  0B1B  0081               	movwf	1
 15142  0B1C  0008               	return
 15143  0B1D                     __end_of_setRF_DimmerLights:	
 15144                           
 15145                           	psect	text93
 15146  1422                     __ptext93:	
 15147 ;; *************** function _setPercentValue *****************
 15148 ;; Defined at:
 15149 ;;		line 929 in file "../src/Dimmer_B1.c"
 15150 ;; Parameters:    Size  Location     Type
 15151 ;;  value           1    wreg     unsigned char 
 15152 ;; Auto vars:     Size  Location     Type
 15153 ;;  value           1   57[BANK0 ] unsigned char 
 15154 ;;  i               3   58[BANK0 ] float 
 15155 ;; Return value:  Size  Location     Type
 15156 ;;                  1    wreg      unsigned char 
 15157 ;; Registers used:
 15158 ;;		wreg, status,2, status,0, pclath, cstack
 15159 ;; Tracked objects:
 15160 ;;		On entry : 0/0
 15161 ;;		On exit  : 0/0
 15162 ;;		Unchanged: 0/0
 15163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15165 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15168 ;;Total ram usage:        4 bytes
 15169 ;; Hardware stack levels used:    1
 15170 ;; Hardware stack levels required when called:    7
 15171 ;; This function calls:
 15172 ;;		___awtoft
 15173 ;;		___ftdiv
 15174 ;;		___fttol
 15175 ;; This function is called by:
 15176 ;;		_Flash_Memory_Initialization
 15177 ;;		_setRF_DimmerLights
 15178 ;; This function uses a non-reentrant model
 15179 ;;
 15180                           
 15181                           
 15182                           ;psect for function _setPercentValue
 15183  1422                     _setPercentValue:	
 15184                           
 15185                           ;incstack = 0
 15186                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15187                           ;setPercentValue@value stored from wreg
 15188  1422  0020               	movlb	0	; select bank0
 15189  1423  00D9               	movwf	setPercentValue@value
 15190                           
 15191                           ;Dimmer_B1.c: 931: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 15192  1424  3000               	movlw	0
 15193  1425  00DA               	movwf	setPercentValue@i
 15194  1426  30E0               	movlw	224
 15195  1427  00DB               	movwf	setPercentValue@i+1
 15196  1428  3041               	movlw	65
 15197  1429  00DC               	movwf	setPercentValue@i+2
 15198                           
 15199                           ;Dimmer_B1.c: 932: i /= 100;
 15200  142A  3000               	movlw	0
 15201  142B  00AE               	movwf	___ftdiv@f2
 15202  142C  30C8               	movlw	200
 15203  142D  00AF               	movwf	___ftdiv@f2+1
 15204  142E  3042               	movlw	66
 15205  142F  00B0               	movwf	___ftdiv@f2+2
 15206  1430  085A               	movf	setPercentValue@i,w
 15207  1431  00B1               	movwf	___ftdiv@f1
 15208  1432  085B               	movf	setPercentValue@i+1,w
 15209  1433  00B2               	movwf	___ftdiv@f1+1
 15210  1434  085C               	movf	setPercentValue@i+2,w
 15211  1435  00B3               	movwf	___ftdiv@f1+2
 15212  1436  318E  26A3  3194   	fcall	___ftdiv
 15213  1439  0020               	movlb	0	; select bank0
 15214  143A  082E               	movf	?___ftdiv,w
 15215  143B  00DA               	movwf	setPercentValue@i
 15216  143C  082F               	movf	?___ftdiv+1,w
 15217  143D  00DB               	movwf	setPercentValue@i+1
 15218  143E  0830               	movf	?___ftdiv+2,w
 15219  143F  00DC               	movwf	setPercentValue@i+2
 15220                           
 15221                           ;Dimmer_B1.c: 933: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 15222  1440  0859               	movf	setPercentValue@value,w
 15223  1441  3EE0               	addlw	224
 15224  1442  00A8               	movwf	___awtoft@c
 15225  1443  30FF               	movlw	255
 15226  1444  1803               	skipnc
 15227  1445  3000               	movlw	0
 15228  1446  00A9               	movwf	___awtoft@c+1
 15229  1447  319F  272E  3194   	fcall	___awtoft
 15230  144A  0020               	movlb	0	; select bank0
 15231  144B  0828               	movf	?___awtoft,w
 15232  144C  00B1               	movwf	___ftdiv@f1
 15233  144D  0829               	movf	?___awtoft+1,w
 15234  144E  00B2               	movwf	___ftdiv@f1+1
 15235  144F  082A               	movf	?___awtoft+2,w
 15236  1450  00B3               	movwf	___ftdiv@f1+2
 15237  1451  085A               	movf	setPercentValue@i,w
 15238  1452  00AE               	movwf	___ftdiv@f2
 15239  1453  085B               	movf	setPercentValue@i+1,w
 15240  1454  00AF               	movwf	___ftdiv@f2+1
 15241  1455  085C               	movf	setPercentValue@i+2,w
 15242  1456  00B0               	movwf	___ftdiv@f2+2
 15243  1457  318E  26A3  3194   	fcall	___ftdiv
 15244  145A  0020               	movlb	0	; select bank0
 15245  145B  082E               	movf	?___ftdiv,w
 15246  145C  00CB               	movwf	___fttol@f1
 15247  145D  082F               	movf	?___ftdiv+1,w
 15248  145E  00CC               	movwf	___fttol@f1+1
 15249  145F  0830               	movf	?___ftdiv+2,w
 15250  1460  00CD               	movwf	___fttol@f1+2
 15251  1461  3187  2771         	fcall	___fttol
 15252  1463  0020               	movlb	0	; select bank0
 15253  1464  034B               	decf	?___fttol,w
 15254  1465  3AFF               	xorlw	255
 15255  1466  3E64               	addlw	100
 15256  1467  0008               	return
 15257  1468                     __end_of_setPercentValue:	
 15258                           
 15259                           	psect	text94
 15260  0771                     __ptext94:	
 15261 ;; *************** function ___fttol *****************
 15262 ;; Defined at:
 15263 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15264 ;; Parameters:    Size  Location     Type
 15265 ;;  f1              3   43[BANK0 ] float 
 15266 ;; Auto vars:     Size  Location     Type
 15267 ;;  lval            4   52[BANK0 ] unsigned long 
 15268 ;;  exp1            1   56[BANK0 ] unsigned char 
 15269 ;;  sign1           1   51[BANK0 ] unsigned char 
 15270 ;; Return value:  Size  Location     Type
 15271 ;;                  4   43[BANK0 ] long 
 15272 ;; Registers used:
 15273 ;;		wreg, status,2, status,0
 15274 ;; Tracked objects:
 15275 ;;		On entry : 0/0
 15276 ;;		On exit  : 0/0
 15277 ;;		Unchanged: 0/0
 15278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15279 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15280 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15281 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15282 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15283 ;;Total ram usage:       14 bytes
 15284 ;; Hardware stack levels used:    1
 15285 ;; Hardware stack levels required when called:    5
 15286 ;; This function calls:
 15287 ;;		Nothing
 15288 ;; This function is called by:
 15289 ;;		_getPercentValue
 15290 ;;		_setPercentValue
 15291 ;; This function uses a non-reentrant model
 15292 ;;
 15293                           
 15294                           
 15295                           ;psect for function ___fttol
 15296  0771                     ___fttol:	
 15297                           
 15298                           ;incstack = 0
 15299                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15300  0771  0020               	movlb	0	; select bank0
 15301  0772  084B               	movf	___fttol@f1,w
 15302  0773  00CF               	movwf	??___fttol
 15303  0774  084C               	movf	___fttol@f1+1,w
 15304  0775  00D0               	movwf	??___fttol+1
 15305  0776  084D               	movf	___fttol@f1+2,w
 15306  0777  00D1               	movwf	??___fttol+2
 15307  0778  1003               	clrc
 15308  0779  0D50               	rlf	??___fttol+1,w
 15309  077A  0D51               	rlf	??___fttol+2,w
 15310  077B  00D2               	movwf	??___fttol+3
 15311  077C  0852               	movf	??___fttol+3,w
 15312  077D  00D8               	movwf	___fttol@exp1
 15313  077E  08D8               	movf	___fttol@exp1,f
 15314  077F  1D03               	skipz
 15315  0780  2F8A               	goto	l8569
 15316  0781  3000               	movlw	0
 15317  0782  00CE               	movwf	?___fttol+3
 15318  0783  3000               	movlw	0
 15319  0784  00CD               	movwf	?___fttol+2
 15320  0785  3000               	movlw	0
 15321  0786  00CC               	movwf	?___fttol+1
 15322  0787  3000               	movlw	0
 15323  0788  00CB               	movwf	?___fttol
 15324  0789  0008               	return
 15325  078A                     l8569:	
 15326  078A  084B               	movf	___fttol@f1,w
 15327  078B  00CF               	movwf	??___fttol
 15328  078C  084C               	movf	___fttol@f1+1,w
 15329  078D  00D0               	movwf	??___fttol+1
 15330  078E  084D               	movf	___fttol@f1+2,w
 15331  078F  00D1               	movwf	??___fttol+2
 15332  0790  3017               	movlw	23
 15333  0791                     u9095:	
 15334  0791  36D1               	lsrf	??___fttol+2,f
 15335  0792  0CD0               	rrf	??___fttol+1,f
 15336  0793  0CCF               	rrf	??___fttol,f
 15337  0794  0B89               	decfsz	9,f
 15338  0795  2F91               	goto	u9095
 15339  0796  084F               	movf	??___fttol,w
 15340  0797  00D2               	movwf	??___fttol+3
 15341  0798  0852               	movf	??___fttol+3,w
 15342  0799  00D3               	movwf	___fttol@sign1
 15343  079A  17CC               	bsf	___fttol@f1+1,7
 15344  079B  30FF               	movlw	255
 15345  079C  05CB               	andwf	___fttol@f1,f
 15346  079D  30FF               	movlw	255
 15347  079E  05CC               	andwf	___fttol@f1+1,f
 15348  079F  3000               	movlw	0
 15349  07A0  05CD               	andwf	___fttol@f1+2,f
 15350  07A1  084B               	movf	___fttol@f1,w
 15351  07A2  00D4               	movwf	___fttol@lval
 15352  07A3  084C               	movf	___fttol@f1+1,w
 15353  07A4  00D5               	movwf	___fttol@lval+1
 15354  07A5  084D               	movf	___fttol@f1+2,w
 15355  07A6  00D6               	movwf	___fttol@lval+2
 15356  07A7  01D7               	clrf	___fttol@lval+3
 15357  07A8  308E               	movlw	142
 15358  07A9  02D8               	subwf	___fttol@exp1,f
 15359  07AA  1FD8               	btfss	___fttol@exp1,7
 15360  07AB  2FC8               	goto	l8589
 15361  07AC  0858               	movf	___fttol@exp1,w
 15362  07AD  3A80               	xorlw	128
 15363  07AE  3E8F               	addlw	143
 15364  07AF  1803               	skipnc
 15365  07B0  2FBA               	goto	l8587
 15366  07B1  3000               	movlw	0
 15367  07B2  00CE               	movwf	?___fttol+3
 15368  07B3  3000               	movlw	0
 15369  07B4  00CD               	movwf	?___fttol+2
 15370  07B5  3000               	movlw	0
 15371  07B6  00CC               	movwf	?___fttol+1
 15372  07B7  3000               	movlw	0
 15373  07B8  00CB               	movwf	?___fttol
 15374  07B9  0008               	return
 15375  07BA                     l8587:	
 15376  07BA  3001               	movlw	1
 15377  07BB                     u9125:	
 15378  07BB  36D7               	lsrf	___fttol@lval+3,f
 15379  07BC  0CD6               	rrf	___fttol@lval+2,f
 15380  07BD  0CD5               	rrf	___fttol@lval+1,f
 15381  07BE  0CD4               	rrf	___fttol@lval,f
 15382  07BF  0B89               	decfsz	9,f
 15383  07C0  2FBB               	goto	u9125
 15384  07C1  3001               	movlw	1
 15385  07C2  00CF               	movwf	??___fttol
 15386  07C3  084F               	movf	??___fttol,w
 15387  07C4  07D8               	addwf	___fttol@exp1,f
 15388  07C5  1903               	btfsc	3,2
 15389  07C6  2FE1               	goto	l8599
 15390  07C7  2FBA               	goto	l8587
 15391  07C8                     l8589:	
 15392  07C8  3018               	movlw	24
 15393  07C9  0258               	subwf	___fttol@exp1,w
 15394  07CA  1C03               	skipc
 15395  07CB  2FDE               	goto	l8597
 15396  07CC  3000               	movlw	0
 15397  07CD  00CE               	movwf	?___fttol+3
 15398  07CE  3000               	movlw	0
 15399  07CF  00CD               	movwf	?___fttol+2
 15400  07D0  3000               	movlw	0
 15401  07D1  00CC               	movwf	?___fttol+1
 15402  07D2  3000               	movlw	0
 15403  07D3  00CB               	movwf	?___fttol
 15404  07D4  0008               	return
 15405  07D5                     l8595:	
 15406  07D5  3001               	movlw	1
 15407  07D6                     u9155:	
 15408  07D6  35D4               	lslf	___fttol@lval,f
 15409  07D7  0DD5               	rlf	___fttol@lval+1,f
 15410  07D8  0DD6               	rlf	___fttol@lval+2,f
 15411  07D9  0DD7               	rlf	___fttol@lval+3,f
 15412  07DA  0B89               	decfsz	9,f
 15413  07DB  2FD6               	goto	u9155
 15414  07DC  3001               	movlw	1
 15415  07DD  02D8               	subwf	___fttol@exp1,f
 15416  07DE                     l8597:	
 15417  07DE  08D8               	movf	___fttol@exp1,f
 15418  07DF  1D03               	skipz
 15419  07E0  2FD5               	goto	l8595
 15420  07E1                     l8599:	
 15421  07E1  0853               	movf	___fttol@sign1,w
 15422  07E2  1903               	btfsc	3,2
 15423  07E3  2FEF               	goto	l8603
 15424  07E4  09D4               	comf	___fttol@lval,f
 15425  07E5  09D5               	comf	___fttol@lval+1,f
 15426  07E6  09D6               	comf	___fttol@lval+2,f
 15427  07E7  09D7               	comf	___fttol@lval+3,f
 15428  07E8  0AD4               	incf	___fttol@lval,f
 15429  07E9  1903               	skipnz
 15430  07EA  0AD5               	incf	___fttol@lval+1,f
 15431  07EB  1903               	skipnz
 15432  07EC  0AD6               	incf	___fttol@lval+2,f
 15433  07ED  1903               	skipnz
 15434  07EE  0AD7               	incf	___fttol@lval+3,f
 15435  07EF                     l8603:	
 15436  07EF  0857               	movf	___fttol@lval+3,w
 15437  07F0  00CE               	movwf	?___fttol+3
 15438  07F1  0856               	movf	___fttol@lval+2,w
 15439  07F2  00CD               	movwf	?___fttol+2
 15440  07F3  0855               	movf	___fttol@lval+1,w
 15441  07F4  00CC               	movwf	?___fttol+1
 15442  07F5  0854               	movf	___fttol@lval,w
 15443  07F6  00CB               	movwf	?___fttol
 15444  07F7  0008               	return
 15445  07F8                     __end_of___fttol:	
 15446                           
 15447                           	psect	text95
 15448  0EA3                     __ptext95:	
 15449 ;; *************** function ___ftdiv *****************
 15450 ;; Defined at:
 15451 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15452 ;; Parameters:    Size  Location     Type
 15453 ;;  f2              3   14[BANK0 ] float 
 15454 ;;  f1              3   17[BANK0 ] float 
 15455 ;; Auto vars:     Size  Location     Type
 15456 ;;  f3              3   25[BANK0 ] float 
 15457 ;;  sign            1   29[BANK0 ] unsigned char 
 15458 ;;  exp             1   28[BANK0 ] unsigned char 
 15459 ;;  cntr            1   24[BANK0 ] unsigned char 
 15460 ;; Return value:  Size  Location     Type
 15461 ;;                  3   14[BANK0 ] float 
 15462 ;; Registers used:
 15463 ;;		wreg, status,2, status,0, pclath, cstack
 15464 ;; Tracked objects:
 15465 ;;		On entry : 0/0
 15466 ;;		On exit  : 0/0
 15467 ;;		Unchanged: 0/0
 15468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15469 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15470 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15471 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15472 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15473 ;;Total ram usage:       16 bytes
 15474 ;; Hardware stack levels used:    1
 15475 ;; Hardware stack levels required when called:    6
 15476 ;; This function calls:
 15477 ;;		___ftpack
 15478 ;; This function is called by:
 15479 ;;		_getPercentValue
 15480 ;;		_setPercentValue
 15481 ;; This function uses a non-reentrant model
 15482 ;;
 15483                           
 15484                           
 15485                           ;psect for function ___ftdiv
 15486  0EA3                     ___ftdiv:	
 15487                           
 15488                           ;incstack = 0
 15489                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15490  0EA3  0020               	movlb	0	; select bank0
 15491  0EA4  0831               	movf	___ftdiv@f1,w
 15492  0EA5  00B4               	movwf	??___ftdiv
 15493  0EA6  0832               	movf	___ftdiv@f1+1,w
 15494  0EA7  00B5               	movwf	??___ftdiv+1
 15495  0EA8  0833               	movf	___ftdiv@f1+2,w
 15496  0EA9  00B6               	movwf	??___ftdiv+2
 15497  0EAA  1003               	clrc
 15498  0EAB  0D35               	rlf	??___ftdiv+1,w
 15499  0EAC  0D36               	rlf	??___ftdiv+2,w
 15500  0EAD  00B7               	movwf	??___ftdiv+3
 15501  0EAE  0837               	movf	??___ftdiv+3,w
 15502  0EAF  00BC               	movwf	___ftdiv@exp
 15503  0EB0  08BC               	movf	___ftdiv@exp,f
 15504  0EB1  1D03               	skipz
 15505  0EB2  2EBA               	goto	l8477
 15506  0EB3  3000               	movlw	0
 15507  0EB4  00AE               	movwf	?___ftdiv
 15508  0EB5  3000               	movlw	0
 15509  0EB6  00AF               	movwf	?___ftdiv+1
 15510  0EB7  3000               	movlw	0
 15511  0EB8  00B0               	movwf	?___ftdiv+2
 15512  0EB9  0008               	return
 15513  0EBA                     l8477:	
 15514  0EBA  082E               	movf	___ftdiv@f2,w
 15515  0EBB  00B4               	movwf	??___ftdiv
 15516  0EBC  082F               	movf	___ftdiv@f2+1,w
 15517  0EBD  00B5               	movwf	??___ftdiv+1
 15518  0EBE  0830               	movf	___ftdiv@f2+2,w
 15519  0EBF  00B6               	movwf	??___ftdiv+2
 15520  0EC0  1003               	clrc
 15521  0EC1  0D35               	rlf	??___ftdiv+1,w
 15522  0EC2  0D36               	rlf	??___ftdiv+2,w
 15523  0EC3  00B7               	movwf	??___ftdiv+3
 15524  0EC4  0837               	movf	??___ftdiv+3,w
 15525  0EC5  00BD               	movwf	___ftdiv@sign
 15526  0EC6  08BD               	movf	___ftdiv@sign,f
 15527  0EC7  1D03               	skipz
 15528  0EC8  2ED0               	goto	l8483
 15529  0EC9  3000               	movlw	0
 15530  0ECA  00AE               	movwf	?___ftdiv
 15531  0ECB  3000               	movlw	0
 15532  0ECC  00AF               	movwf	?___ftdiv+1
 15533  0ECD  3000               	movlw	0
 15534  0ECE  00B0               	movwf	?___ftdiv+2
 15535  0ECF  0008               	return
 15536  0ED0                     l8483:	
 15537  0ED0  3000               	movlw	0
 15538  0ED1  00B9               	movwf	___ftdiv@f3
 15539  0ED2  3000               	movlw	0
 15540  0ED3  00BA               	movwf	___ftdiv@f3+1
 15541  0ED4  3000               	movlw	0
 15542  0ED5  00BB               	movwf	___ftdiv@f3+2
 15543  0ED6  3089               	movlw	137
 15544  0ED7  073D               	addwf	___ftdiv@sign,w
 15545  0ED8  00B4               	movwf	??___ftdiv
 15546  0ED9  0834               	movf	??___ftdiv,w
 15547  0EDA  02BC               	subwf	___ftdiv@exp,f
 15548  0EDB  0831               	movf	___ftdiv@f1,w
 15549  0EDC  00B4               	movwf	??___ftdiv
 15550  0EDD  0832               	movf	___ftdiv@f1+1,w
 15551  0EDE  00B5               	movwf	??___ftdiv+1
 15552  0EDF  0833               	movf	___ftdiv@f1+2,w
 15553  0EE0  00B6               	movwf	??___ftdiv+2
 15554  0EE1  3010               	movlw	16
 15555  0EE2                     u8905:	
 15556  0EE2  36B6               	lsrf	??___ftdiv+2,f
 15557  0EE3  0CB5               	rrf	??___ftdiv+1,f
 15558  0EE4  0CB4               	rrf	??___ftdiv,f
 15559  0EE5  0B89               	decfsz	9,f
 15560  0EE6  2EE2               	goto	u8905
 15561  0EE7  0834               	movf	??___ftdiv,w
 15562  0EE8  00B7               	movwf	??___ftdiv+3
 15563  0EE9  0837               	movf	??___ftdiv+3,w
 15564  0EEA  00BD               	movwf	___ftdiv@sign
 15565  0EEB  082E               	movf	___ftdiv@f2,w
 15566  0EEC  00B4               	movwf	??___ftdiv
 15567  0EED  082F               	movf	___ftdiv@f2+1,w
 15568  0EEE  00B5               	movwf	??___ftdiv+1
 15569  0EEF  0830               	movf	___ftdiv@f2+2,w
 15570  0EF0  00B6               	movwf	??___ftdiv+2
 15571  0EF1  3010               	movlw	16
 15572  0EF2                     u8915:	
 15573  0EF2  36B6               	lsrf	??___ftdiv+2,f
 15574  0EF3  0CB5               	rrf	??___ftdiv+1,f
 15575  0EF4  0CB4               	rrf	??___ftdiv,f
 15576  0EF5  0B89               	decfsz	9,f
 15577  0EF6  2EF2               	goto	u8915
 15578  0EF7  0834               	movf	??___ftdiv,w
 15579  0EF8  00B7               	movwf	??___ftdiv+3
 15580  0EF9  0837               	movf	??___ftdiv+3,w
 15581  0EFA  06BD               	xorwf	___ftdiv@sign,f
 15582  0EFB  3080               	movlw	128
 15583  0EFC  00B4               	movwf	??___ftdiv
 15584  0EFD  0834               	movf	??___ftdiv,w
 15585  0EFE  05BD               	andwf	___ftdiv@sign,f
 15586  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 15587  0F00  30FF               	movlw	255
 15588  0F01  05B1               	andwf	___ftdiv@f1,f
 15589  0F02  30FF               	movlw	255
 15590  0F03  05B2               	andwf	___ftdiv@f1+1,f
 15591  0F04  3000               	movlw	0
 15592  0F05  05B3               	andwf	___ftdiv@f1+2,f
 15593  0F06  17AF               	bsf	___ftdiv@f2+1,7
 15594  0F07  30FF               	movlw	255
 15595  0F08  05AE               	andwf	___ftdiv@f2,f
 15596  0F09  30FF               	movlw	255
 15597  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 15598  0F0B  3000               	movlw	0
 15599  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 15600  0F0D  3018               	movlw	24
 15601  0F0E  00B4               	movwf	??___ftdiv
 15602  0F0F  0834               	movf	??___ftdiv,w
 15603  0F10  00B8               	movwf	___ftdiv@cntr
 15604  0F11                     l8497:	
 15605  0F11  3001               	movlw	1
 15606  0F12                     u8925:	
 15607  0F12  35B9               	lslf	___ftdiv@f3,f
 15608  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 15609  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 15610  0F15  0B89               	decfsz	9,f
 15611  0F16  2F12               	goto	u8925
 15612  0F17  0830               	movf	___ftdiv@f2+2,w
 15613  0F18  0233               	subwf	___ftdiv@f1+2,w
 15614  0F19  1D03               	skipz
 15615  0F1A  2F21               	goto	u8935
 15616  0F1B  082F               	movf	___ftdiv@f2+1,w
 15617  0F1C  0232               	subwf	___ftdiv@f1+1,w
 15618  0F1D  1D03               	skipz
 15619  0F1E  2F21               	goto	u8935
 15620  0F1F  082E               	movf	___ftdiv@f2,w
 15621  0F20  0231               	subwf	___ftdiv@f1,w
 15622  0F21                     u8935:	
 15623  0F21  1C03               	skipc
 15624  0F22  2F2A               	goto	l8505
 15625  0F23  082E               	movf	___ftdiv@f2,w
 15626  0F24  02B1               	subwf	___ftdiv@f1,f
 15627  0F25  082F               	movf	___ftdiv@f2+1,w
 15628  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 15629  0F27  0830               	movf	___ftdiv@f2+2,w
 15630  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 15631  0F29  1439               	bsf	___ftdiv@f3,0
 15632  0F2A                     l8505:	
 15633  0F2A  3001               	movlw	1
 15634  0F2B                     u8945:	
 15635  0F2B  35B1               	lslf	___ftdiv@f1,f
 15636  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 15637  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 15638  0F2E  0B89               	decfsz	9,f
 15639  0F2F  2F2B               	goto	u8945
 15640  0F30  3001               	movlw	1
 15641  0F31  02B8               	subwf	___ftdiv@cntr,f
 15642  0F32  1D03               	btfss	3,2
 15643  0F33  2F11               	goto	l8497
 15644  0F34  0839               	movf	___ftdiv@f3,w
 15645  0F35  00A0               	movwf	___ftpack@arg
 15646  0F36  083A               	movf	___ftdiv@f3+1,w
 15647  0F37  00A1               	movwf	___ftpack@arg+1
 15648  0F38  083B               	movf	___ftdiv@f3+2,w
 15649  0F39  00A2               	movwf	___ftpack@arg+2
 15650  0F3A  083C               	movf	___ftdiv@exp,w
 15651  0F3B  00B4               	movwf	??___ftdiv
 15652  0F3C  0834               	movf	??___ftdiv,w
 15653  0F3D  00A3               	movwf	___ftpack@exp
 15654  0F3E  083D               	movf	___ftdiv@sign,w
 15655  0F3F  00B5               	movwf	??___ftdiv+1
 15656  0F40  0835               	movf	??___ftdiv+1,w
 15657  0F41  00A4               	movwf	___ftpack@sign
 15658  0F42  3188  20C4         	fcall	___ftpack
 15659  0F44  0020               	movlb	0	; select bank0
 15660  0F45  0820               	movf	?___ftpack,w
 15661  0F46  00AE               	movwf	?___ftdiv
 15662  0F47  0821               	movf	?___ftpack+1,w
 15663  0F48  00AF               	movwf	?___ftdiv+1
 15664  0F49  0822               	movf	?___ftpack+2,w
 15665  0F4A  00B0               	movwf	?___ftdiv+2
 15666  0F4B  0008               	return
 15667  0F4C                     __end_of___ftdiv:	
 15668                           
 15669                           	psect	text96
 15670  1F2E                     __ptext96:	
 15671 ;; *************** function ___awtoft *****************
 15672 ;; Defined at:
 15673 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15674 ;; Parameters:    Size  Location     Type
 15675 ;;  c               2    8[BANK0 ] int 
 15676 ;; Auto vars:     Size  Location     Type
 15677 ;;  sign            1   13[BANK0 ] unsigned char 
 15678 ;; Return value:  Size  Location     Type
 15679 ;;                  3    8[BANK0 ] float 
 15680 ;; Registers used:
 15681 ;;		wreg, status,2, status,0, pclath, cstack
 15682 ;; Tracked objects:
 15683 ;;		On entry : 0/0
 15684 ;;		On exit  : 0/0
 15685 ;;		Unchanged: 0/0
 15686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15687 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15689 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15690 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15691 ;;Total ram usage:        6 bytes
 15692 ;; Hardware stack levels used:    1
 15693 ;; Hardware stack levels required when called:    6
 15694 ;; This function calls:
 15695 ;;		___ftpack
 15696 ;; This function is called by:
 15697 ;;		_getPercentValue
 15698 ;;		_setPercentValue
 15699 ;; This function uses a non-reentrant model
 15700 ;;
 15701                           
 15702                           
 15703                           ;psect for function ___awtoft
 15704  1F2E                     ___awtoft:	
 15705                           
 15706                           ;incstack = 0
 15707                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15708  1F2E  0020               	movlb	0	; select bank0
 15709  1F2F  01AD               	clrf	___awtoft@sign
 15710  1F30  1FA9               	btfss	___awtoft@c+1,7
 15711  1F31  2F39               	goto	l8395
 15712  1F32  09A8               	comf	___awtoft@c,f
 15713  1F33  09A9               	comf	___awtoft@c+1,f
 15714  1F34  0AA8               	incf	___awtoft@c,f
 15715  1F35  1903               	skipnz
 15716  1F36  0AA9               	incf	___awtoft@c+1,f
 15717  1F37  01AD               	clrf	___awtoft@sign
 15718  1F38  0AAD               	incf	___awtoft@sign,f
 15719  1F39                     l8395:	
 15720  1F39  0828               	movf	___awtoft@c,w
 15721  1F3A  00A0               	movwf	___ftpack@arg
 15722  1F3B  0829               	movf	___awtoft@c+1,w
 15723  1F3C  00A1               	movwf	___ftpack@arg+1
 15724  1F3D  01A2               	clrf	___ftpack@arg+2
 15725  1F3E  308E               	movlw	142
 15726  1F3F  00AB               	movwf	??___awtoft
 15727  1F40  082B               	movf	??___awtoft,w
 15728  1F41  00A3               	movwf	___ftpack@exp
 15729  1F42  082D               	movf	___awtoft@sign,w
 15730  1F43  00AC               	movwf	??___awtoft+1
 15731  1F44  082C               	movf	??___awtoft+1,w
 15732  1F45  00A4               	movwf	___ftpack@sign
 15733  1F46  3188  20C4         	fcall	___ftpack
 15734  1F48  0020               	movlb	0	; select bank0
 15735  1F49  0820               	movf	?___ftpack,w
 15736  1F4A  00A8               	movwf	?___awtoft
 15737  1F4B  0821               	movf	?___ftpack+1,w
 15738  1F4C  00A9               	movwf	?___awtoft+1
 15739  1F4D  0822               	movf	?___ftpack+2,w
 15740  1F4E  00AA               	movwf	?___awtoft+2
 15741  1F4F  0008               	return
 15742  1F50                     __end_of___awtoft:	
 15743                           
 15744                           	psect	text97
 15745  08C4                     __ptext97:	
 15746 ;; *************** function ___ftpack *****************
 15747 ;; Defined at:
 15748 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15749 ;; Parameters:    Size  Location     Type
 15750 ;;  arg             3    0[BANK0 ] unsigned um
 15751 ;;  exp             1    3[BANK0 ] unsigned char 
 15752 ;;  sign            1    4[BANK0 ] unsigned char 
 15753 ;; Auto vars:     Size  Location     Type
 15754 ;;		None
 15755 ;; Return value:  Size  Location     Type
 15756 ;;                  3    0[BANK0 ] float 
 15757 ;; Registers used:
 15758 ;;		wreg, status,2, status,0
 15759 ;; Tracked objects:
 15760 ;;		On entry : 0/0
 15761 ;;		On exit  : 0/0
 15762 ;;		Unchanged: 0/0
 15763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15764 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15766 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15767 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15768 ;;Total ram usage:        8 bytes
 15769 ;; Hardware stack levels used:    1
 15770 ;; Hardware stack levels required when called:    5
 15771 ;; This function calls:
 15772 ;;		Nothing
 15773 ;; This function is called by:
 15774 ;;		___awtoft
 15775 ;;		___ftadd
 15776 ;;		___ftdiv
 15777 ;;		___ftmul
 15778 ;; This function uses a non-reentrant model
 15779 ;;
 15780                           
 15781                           
 15782                           ;psect for function ___ftpack
 15783  08C4                     ___ftpack:	
 15784                           
 15785                           ;incstack = 0
 15786                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15787  08C4  0020               	movlb	0	; select bank0
 15788  08C5  0823               	movf	___ftpack@exp,w
 15789  08C6  1903               	btfsc	3,2
 15790  08C7  28CD               	goto	l8345
 15791  08C8  0822               	movf	___ftpack@arg+2,w
 15792  08C9  0421               	iorwf	___ftpack@arg+1,w
 15793  08CA  0420               	iorwf	___ftpack@arg,w
 15794  08CB  1D03               	skipz
 15795  08CC  28DE               	goto	l8351
 15796  08CD                     l8345:	
 15797  08CD  3000               	movlw	0
 15798  08CE  00A0               	movwf	?___ftpack
 15799  08CF  3000               	movlw	0
 15800  08D0  00A1               	movwf	?___ftpack+1
 15801  08D1  3000               	movlw	0
 15802  08D2  00A2               	movwf	?___ftpack+2
 15803  08D3  0008               	return
 15804  08D4                     l8349:	
 15805  08D4  3001               	movlw	1
 15806  08D5  00A5               	movwf	??___ftpack
 15807  08D6  0825               	movf	??___ftpack,w
 15808  08D7  07A3               	addwf	___ftpack@exp,f
 15809  08D8  3001               	movlw	1
 15810  08D9                     u8535:	
 15811  08D9  36A2               	lsrf	___ftpack@arg+2,f
 15812  08DA  0CA1               	rrf	___ftpack@arg+1,f
 15813  08DB  0CA0               	rrf	___ftpack@arg,f
 15814  08DC  0B89               	decfsz	9,f
 15815  08DD  28D9               	goto	u8535
 15816  08DE                     l8351:	
 15817  08DE  30FE               	movlw	254
 15818  08DF  0522               	andwf	___ftpack@arg+2,w
 15819  08E0  1903               	btfsc	3,2
 15820  08E1  28F7               	goto	l2921
 15821  08E2  28D4               	goto	l8349
 15822  08E3                     l8353:	
 15823  08E3  3001               	movlw	1
 15824  08E4  00A5               	movwf	??___ftpack
 15825  08E5  0825               	movf	??___ftpack,w
 15826  08E6  07A3               	addwf	___ftpack@exp,f
 15827  08E7  3001               	movlw	1
 15828  08E8  07A0               	addwf	___ftpack@arg,f
 15829  08E9  3000               	movlw	0
 15830  08EA  1803               	skipnc
 15831  08EB  3001               	movlw	1
 15832  08EC  07A1               	addwf	___ftpack@arg+1,f
 15833  08ED  3000               	movlw	0
 15834  08EE  1803               	skipnc
 15835  08EF  3001               	movlw	1
 15836  08F0  07A2               	addwf	___ftpack@arg+2,f
 15837  08F1  3001               	movlw	1
 15838  08F2                     u8555:	
 15839  08F2  36A2               	lsrf	___ftpack@arg+2,f
 15840  08F3  0CA1               	rrf	___ftpack@arg+1,f
 15841  08F4  0CA0               	rrf	___ftpack@arg,f
 15842  08F5  0B89               	decfsz	9,f
 15843  08F6  28F2               	goto	u8555
 15844  08F7                     l2921:	
 15845  08F7  30FF               	movlw	255
 15846  08F8  0522               	andwf	___ftpack@arg+2,w
 15847  08F9  1903               	btfsc	3,2
 15848  08FA  2904               	goto	l8361
 15849  08FB  28E3               	goto	l8353
 15850  08FC                     l8359:	
 15851  08FC  3001               	movlw	1
 15852  08FD  02A3               	subwf	___ftpack@exp,f
 15853  08FE  3001               	movlw	1
 15854  08FF                     u8575:	
 15855  08FF  35A0               	lslf	___ftpack@arg,f
 15856  0900  0DA1               	rlf	___ftpack@arg+1,f
 15857  0901  0DA2               	rlf	___ftpack@arg+2,f
 15858  0902  0B89               	decfsz	9,f
 15859  0903  28FF               	goto	u8575
 15860  0904                     l8361:	
 15861  0904  1FA1               	btfss	___ftpack@arg+1,7
 15862  0905  28FC               	goto	l8359
 15863  0906  1823               	btfsc	___ftpack@exp,0
 15864  0907  290E               	goto	l2927
 15865  0908  30FF               	movlw	255
 15866  0909  05A0               	andwf	___ftpack@arg,f
 15867  090A  307F               	movlw	127
 15868  090B  05A1               	andwf	___ftpack@arg+1,f
 15869  090C  30FF               	movlw	255
 15870  090D  05A2               	andwf	___ftpack@arg+2,f
 15871  090E                     l2927:	
 15872  090E  1003               	clrc
 15873  090F  0CA3               	rrf	___ftpack@exp,f
 15874  0910  0823               	movf	___ftpack@exp,w
 15875  0911  00A5               	movwf	??___ftpack
 15876  0912  01A6               	clrf	??___ftpack+1
 15877  0913  01A7               	clrf	??___ftpack+2
 15878  0914  3010               	movlw	16
 15879  0915                     u8605:	
 15880  0915  35A5               	lslf	??___ftpack,f
 15881  0916  0DA6               	rlf	??___ftpack+1,f
 15882  0917  0DA7               	rlf	??___ftpack+2,f
 15883  0918  0B89               	decfsz	9,f
 15884  0919  2915               	goto	u8605
 15885  091A  0825               	movf	??___ftpack,w
 15886  091B  04A0               	iorwf	___ftpack@arg,f
 15887  091C  0826               	movf	??___ftpack+1,w
 15888  091D  04A1               	iorwf	___ftpack@arg+1,f
 15889  091E  0827               	movf	??___ftpack+2,w
 15890  091F  04A2               	iorwf	___ftpack@arg+2,f
 15891  0920  0824               	movf	___ftpack@sign,w
 15892  0921  1903               	btfsc	3,2
 15893  0922  0008               	return
 15894  0923  17A2               	bsf	___ftpack@arg+2,7
 15895  0924  0008               	return
 15896  0925                     __end_of___ftpack:	
 15897                           
 15898                           	psect	text98
 15899  1ECE                     __ptext98:	
 15900 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15901 ;; Defined at:
 15902 ;;		line 827 in file "../src/Dimmer_B1.c"
 15903 ;; Parameters:    Size  Location     Type
 15904 ;;  lights          1    wreg     unsigned char 
 15905 ;;  command         1    2[BANK0 ] unsigned char 
 15906 ;; Auto vars:     Size  Location     Type
 15907 ;;  lights          1    4[BANK0 ] unsigned char 
 15908 ;; Return value:  Size  Location     Type
 15909 ;;		None               void
 15910 ;; Registers used:
 15911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15912 ;; Tracked objects:
 15913 ;;		On entry : 0/0
 15914 ;;		On exit  : 0/0
 15915 ;;		Unchanged: 0/0
 15916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15917 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15918 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15919 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15920 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15921 ;;Total ram usage:        3 bytes
 15922 ;; Hardware stack levels used:    1
 15923 ;; Hardware stack levels required when called:    6
 15924 ;; This function calls:
 15925 ;;		_DimmerLightsPointSelect
 15926 ;; This function is called by:
 15927 ;;		_setDimmerLights_SwOff
 15928 ;;		_setDimmerLights_AdjControl
 15929 ;; This function uses a non-reentrant model
 15930 ;;
 15931                           
 15932                           
 15933                           ;psect for function _setDimmerLights_TriggerAdj
 15934  1ECE                     _setDimmerLights_TriggerAdj:	
 15935                           
 15936                           ;incstack = 0
 15937                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15938                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15939  1ECE  0020               	movlb	0	; select bank0
 15940  1ECF  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15941                           
 15942                           ;Dimmer_B1.c: 828: DimmerLightsPointSelect(lights);
 15943  1ED0  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15944  1ED1  319C  24B6         	fcall	_DimmerLightsPointSelect
 15945                           
 15946                           ;Dimmer_B1.c: 829: DimmerLights->TriggerAdj = 1;
 15947  1ED3  0877               	movf	_DimmerLights,w
 15948  1ED4  3E08               	addlw	8
 15949  1ED5  0086               	movwf	6
 15950  1ED6  3001               	movlw	1	; select bank2/3
 15951  1ED7  0087               	movwf	7
 15952  1ED8  1601               	bsf	1,4
 15953                           
 15954                           ;Dimmer_B1.c: 830: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15955  1ED9  0020               	movlb	0	; select bank0
 15956  1EDA  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15957  1EDB  3A01               	xorlw	1
 15958  1EDC  3000               	movlw	0
 15959  1EDD  1903               	skipnz
 15960  1EDE  3001               	movlw	1
 15961  1EDF  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15962  1EE0  0877               	movf	_DimmerLights,w
 15963  1EE1  3E08               	addlw	8
 15964  1EE2  0086               	movwf	6
 15965  1EE3  3001               	movlw	1	; select bank2/3
 15966  1EE4  0087               	movwf	7
 15967  1EE5  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15968  1EE6  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15969  1EE7  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15970  1EE8  0801               	movf	1,w
 15971  1EE9  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15972  1EEA  39F7               	andlw	-9
 15973  1EEB  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15974  1EEC  0081               	movwf	1
 15975  1EED  0008               	return
 15976  1EEE                     __end_of_setDimmerLights_TriggerAdj:	
 15977                           
 15978                           	psect	text99
 15979  1E72                     __ptext99:	
 15980 ;; *************** function _setDimmerLights_Trigger *****************
 15981 ;; Defined at:
 15982 ;;		line 821 in file "../src/Dimmer_B1.c"
 15983 ;; Parameters:    Size  Location     Type
 15984 ;;  lights          1    wreg     unsigned char 
 15985 ;;  command         1    2[BANK0 ] unsigned char 
 15986 ;; Auto vars:     Size  Location     Type
 15987 ;;  lights          1    4[BANK0 ] unsigned char 
 15988 ;; Return value:  Size  Location     Type
 15989 ;;		None               void
 15990 ;; Registers used:
 15991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15992 ;; Tracked objects:
 15993 ;;		On entry : 0/0
 15994 ;;		On exit  : 0/0
 15995 ;;		Unchanged: 0/0
 15996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15997 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15998 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15999 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16000 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16001 ;;Total ram usage:        3 bytes
 16002 ;; Hardware stack levels used:    1
 16003 ;; Hardware stack levels required when called:    6
 16004 ;; This function calls:
 16005 ;;		_DimmerLightsPointSelect
 16006 ;; This function is called by:
 16007 ;;		_setDimmerLights_SwOn
 16008 ;;		_setDimmerLights_SwOff
 16009 ;; This function uses a non-reentrant model
 16010 ;;
 16011                           
 16012                           
 16013                           ;psect for function _setDimmerLights_Trigger
 16014  1E72                     _setDimmerLights_Trigger:	
 16015                           
 16016                           ;incstack = 0
 16017                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16018                           ;setDimmerLights_Trigger@lights stored from wreg
 16019  1E72  0020               	movlb	0	; select bank0
 16020  1E73  00A4               	movwf	setDimmerLights_Trigger@lights
 16021                           
 16022                           ;Dimmer_B1.c: 822: DimmerLightsPointSelect(lights);
 16023  1E74  0824               	movf	setDimmerLights_Trigger@lights,w
 16024  1E75  319C  24B6         	fcall	_DimmerLightsPointSelect
 16025                           
 16026                           ;Dimmer_B1.c: 823: DimmerLights->Trigger = 1;
 16027  1E77  0877               	movf	_DimmerLights,w
 16028  1E78  3E08               	addlw	8
 16029  1E79  0086               	movwf	6
 16030  1E7A  3001               	movlw	1	; select bank2/3
 16031  1E7B  0087               	movwf	7
 16032  1E7C  1501               	bsf	1,2
 16033                           
 16034                           ;Dimmer_B1.c: 824: DimmerLights->Switch = command == 1 ? 1 : 0;
 16035  1E7D  0020               	movlb	0	; select bank0
 16036  1E7E  0822               	movf	setDimmerLights_Trigger@command,w
 16037  1E7F  3A01               	xorlw	1
 16038  1E80  3000               	movlw	0
 16039  1E81  1903               	skipnz
 16040  1E82  3001               	movlw	1
 16041  1E83  00A3               	movwf	??_setDimmerLights_Trigger
 16042  1E84  0877               	movf	_DimmerLights,w
 16043  1E85  3E08               	addlw	8
 16044  1E86  0086               	movwf	6
 16045  1E87  3001               	movlw	1	; select bank2/3
 16046  1E88  0087               	movwf	7
 16047  1E89  0DA3               	rlf	??_setDimmerLights_Trigger,f
 16048  1E8A  0801               	movf	1,w
 16049  1E8B  0623               	xorwf	??_setDimmerLights_Trigger,w
 16050  1E8C  39FD               	andlw	-3
 16051  1E8D  0623               	xorwf	??_setDimmerLights_Trigger,w
 16052  1E8E  0081               	movwf	1
 16053  1E8F  0008               	return
 16054  1E90                     __end_of_setDimmerLights_Trigger:	
 16055                           
 16056                           	psect	text100
 16057  0863                     __ptext100:	
 16058 ;; *************** function _setDelayOff_GO *****************
 16059 ;; Defined at:
 16060 ;;		line 86 in file "../src/DelayOff_B1.c"
 16061 ;; Parameters:    Size  Location     Type
 16062 ;;  sw              1    wreg     unsigned char 
 16063 ;;  command         1   10[BANK0 ] unsigned char 
 16064 ;;  value           1   11[BANK0 ] unsigned char 
 16065 ;; Auto vars:     Size  Location     Type
 16066 ;;  sw              1   14[BANK0 ] unsigned char 
 16067 ;; Return value:  Size  Location     Type
 16068 ;;		None               void
 16069 ;; Registers used:
 16070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16071 ;; Tracked objects:
 16072 ;;		On entry : 0/0
 16073 ;;		On exit  : 0/0
 16074 ;;		Unchanged: 0/0
 16075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16076 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16078 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16079 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16080 ;;Total ram usage:        5 bytes
 16081 ;; Hardware stack levels used:    1
 16082 ;; Hardware stack levels required when called:    7
 16083 ;; This function calls:
 16084 ;;		_DelayOffPointSelect
 16085 ;;		_DelayTimejudge
 16086 ;; This function is called by:
 16087 ;;		_setDimmerLights_SwOff
 16088 ;;		_setRFSW_Control
 16089 ;; This function uses a non-reentrant model
 16090 ;;
 16091                           
 16092                           
 16093                           ;psect for function _setDelayOff_GO
 16094  0863                     _setDelayOff_GO:	
 16095                           
 16096                           ;incstack = 0
 16097                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16098                           ;setDelayOff_GO@sw stored from wreg
 16099  0863  0020               	movlb	0	; select bank0
 16100  0864  00AE               	movwf	setDelayOff_GO@sw
 16101                           
 16102                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
 16103  0865  082E               	movf	setDelayOff_GO@sw,w
 16104  0866  319D  2516  3188   	fcall	_DelayOffPointSelect
 16105                           
 16106                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
 16107  0869  0876               	movf	_DelayOff,w
 16108  086A  0086               	movwf	6
 16109  086B  3001               	movlw	1	; select bank2/3
 16110  086C  0087               	movwf	7
 16111  086D  1C01               	btfss	1,0
 16112  086E  0008               	return
 16113                           
 16114                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
 16115  086F  0020               	movlb	0	; select bank0
 16116  0870  082A               	movf	setDelayOff_GO@command,w
 16117  0871  3A01               	xorlw	1
 16118  0872  3000               	movlw	0
 16119  0873  1903               	skipnz
 16120  0874  3001               	movlw	1
 16121  0875  00AC               	movwf	??_setDelayOff_GO
 16122  0876  0876               	movf	_DelayOff,w
 16123  0877  0086               	movwf	6
 16124  0878  3001               	movlw	1	; select bank2/3
 16125  0879  0087               	movwf	7
 16126  087A  0DAC               	rlf	??_setDelayOff_GO,f
 16127  087B  0801               	movf	1,w
 16128  087C  062C               	xorwf	??_setDelayOff_GO,w
 16129  087D  39FD               	andlw	-3
 16130  087E  062C               	xorwf	??_setDelayOff_GO,w
 16131  087F  0081               	movwf	1
 16132                           
 16133                           ;DelayOff_B1.c: 90: if (command == 1) {
 16134  0880  082A               	movf	setDelayOff_GO@command,w
 16135  0881  3A01               	xorlw	1
 16136  0882  1D03               	skipz
 16137  0883  28AE               	goto	l8763
 16138                           
 16139                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
 16140  0884  082B               	movf	setDelayOff_GO@value,w
 16141  0885  3191  212E  3188   	fcall	_DelayTimejudge
 16142  0888  0020               	movlb	0	; select bank0
 16143  0889  00AC               	movwf	??_setDelayOff_GO
 16144  088A  0876               	movf	_DelayOff,w
 16145  088B  0086               	movwf	6
 16146  088C  3001               	movlw	1	; select bank2/3
 16147  088D  0087               	movwf	7
 16148  088E  082C               	movf	??_setDelayOff_GO,w
 16149  088F  0081               	movwf	1
 16150                           
 16151                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16152  0890  300F               	movlw	15
 16153  0891  052B               	andwf	setDelayOff_GO@value,w
 16154  0892  00AC               	movwf	??_setDelayOff_GO
 16155  0893  082C               	movf	??_setDelayOff_GO,w
 16156  0894  3A05               	xorlw	5
 16157  0895  1903               	skipnz
 16158  0896  289B               	goto	l8757
 16159  0897  082B               	movf	setDelayOff_GO@value,w
 16160  0898  390F               	andlw	15
 16161  0899  1D03               	btfss	3,2
 16162  089A  28A1               	goto	l8761
 16163  089B                     l8757:	
 16164  089B  3026               	movlw	38
 16165  089C  022B               	subwf	setDelayOff_GO@value,w
 16166  089D  1803               	skipnc
 16167  089E  28A1               	goto	l8761
 16168                           
 16169                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
 16170  089F  082B               	movf	setDelayOff_GO@value,w
 16171  08A0  28A2               	goto	L8
 16172  08A1                     l8761:	
 16173                           ;DelayOff_B1.c: 94: } else {
 16174                           
 16175                           
 16176                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
 16177  08A1  3005               	movlw	5
 16178  08A2                     L8:	
 16179  08A2  00AC               	movwf	??_setDelayOff_GO
 16180  08A3  082E               	movf	setDelayOff_GO@sw,w
 16181  08A4  3E1A               	addlw	26
 16182  08A5  077B               	addwf	_product,w
 16183  08A6  00AD               	movwf	??_setDelayOff_GO+1
 16184  08A7  082D               	movf	??_setDelayOff_GO+1,w
 16185  08A8  0086               	movwf	6
 16186  08A9  3002               	movlw	2	; select bank4/5
 16187  08AA  0087               	movwf	7
 16188  08AB  082C               	movf	??_setDelayOff_GO,w
 16189  08AC  0081               	movwf	1
 16190                           
 16191                           ;DelayOff_B1.c: 96: }
 16192                           ;DelayOff_B1.c: 97: } else {
 16193  08AD  28B7               	goto	l8765
 16194  08AE                     l8763:	
 16195                           
 16196                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
 16197  08AE  082E               	movf	setDelayOff_GO@sw,w
 16198  08AF  3E1A               	addlw	26
 16199  08B0  077B               	addwf	_product,w
 16200  08B1  00AC               	movwf	??_setDelayOff_GO
 16201  08B2  082C               	movf	??_setDelayOff_GO,w
 16202  08B3  0086               	movwf	6
 16203  08B4  3002               	movlw	2	; select bank4/5
 16204  08B5  0087               	movwf	7
 16205  08B6  0181               	clrf	1
 16206  08B7                     l8765:	
 16207                           
 16208                           ;DelayOff_B1.c: 99: }
 16209                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
 16210  08B7  0876               	movf	_DelayOff,w
 16211  08B8  0086               	movwf	6
 16212  08B9  3001               	movlw	1	; select bank2/3
 16213  08BA  0087               	movwf	7
 16214  08BB  3000               	movlw	0
 16215  08BC  3FC0               	movwi [0]fsr1
 16216  08BD  3FC1               	movwi [1]fsr1
 16217                           
 16218                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
 16219  08BE  0876               	movf	_DelayOff,w
 16220  08BF  0086               	movwf	6
 16221  08C0  3001               	movlw	1	; select bank2/3
 16222  08C1  0087               	movwf	7
 16223  08C2  0181               	clrf	1
 16224  08C3  0008               	return
 16225  08C4                     __end_of_setDelayOff_GO:	
 16226                           
 16227                           	psect	text101
 16228  112E                     __ptext101:	
 16229 ;; *************** function _DelayTimejudge *****************
 16230 ;; Defined at:
 16231 ;;		line 106 in file "../src/DelayOff_B1.c"
 16232 ;; Parameters:    Size  Location     Type
 16233 ;;  value           1    wreg     unsigned char 
 16234 ;; Auto vars:     Size  Location     Type
 16235 ;;  value           1    9[BANK0 ] unsigned char 
 16236 ;;  k               1    8[BANK0 ] unsigned char 
 16237 ;;  j               1    7[BANK0 ] unsigned char 
 16238 ;;  i               1    6[BANK0 ] unsigned char 
 16239 ;; Return value:  Size  Location     Type
 16240 ;;                  1    wreg      unsigned char 
 16241 ;; Registers used:
 16242 ;;		wreg, status,2, status,0, pclath, cstack
 16243 ;; Tracked objects:
 16244 ;;		On entry : 0/0
 16245 ;;		On exit  : 0/0
 16246 ;;		Unchanged: 0/0
 16247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16249 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16250 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16251 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16252 ;;Total ram usage:        6 bytes
 16253 ;; Hardware stack levels used:    1
 16254 ;; Hardware stack levels required when called:    6
 16255 ;; This function calls:
 16256 ;;		___bmul
 16257 ;; This function is called by:
 16258 ;;		_setDelayOff_GO
 16259 ;; This function uses a non-reentrant model
 16260 ;;
 16261                           
 16262                           
 16263                           ;psect for function _DelayTimejudge
 16264  112E                     _DelayTimejudge:	
 16265                           
 16266                           ;incstack = 0
 16267                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16268                           ;DelayTimejudge@value stored from wreg
 16269  112E  0020               	movlb	0	; select bank0
 16270  112F  00A9               	movwf	DelayTimejudge@value
 16271                           
 16272                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
 16273  1130  3005               	movlw	5
 16274  1131  00A4               	movwf	??_DelayTimejudge
 16275  1132  0824               	movf	??_DelayTimejudge,w
 16276  1133  00A6               	movwf	DelayTimejudge@i
 16277  1134  01A7               	clrf	DelayTimejudge@j
 16278  1135  01A8               	clrf	DelayTimejudge@k
 16279                           
 16280                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
 16281  1136  3031               	movlw	49
 16282  1137  0229               	subwf	DelayTimejudge@value,w
 16283  1138  1803               	skipnc
 16284  1139  2956               	goto	l8627
 16285                           
 16286                           ;DelayOff_B1.c: 109: j = value & 0x0f;
 16287  113A  0829               	movf	DelayTimejudge@value,w
 16288  113B  390F               	andlw	15
 16289  113C  00A4               	movwf	??_DelayTimejudge
 16290  113D  0824               	movf	??_DelayTimejudge,w
 16291  113E  00A7               	movwf	DelayTimejudge@j
 16292                           
 16293                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
 16294  113F  0829               	movf	DelayTimejudge@value,w
 16295  1140  00A4               	movwf	??_DelayTimejudge
 16296  1141  3004               	movlw	4
 16297  1142                     u9215:	
 16298  1142  36A4               	lsrf	??_DelayTimejudge,f
 16299  1143  0B89               	decfsz	9,f
 16300  1144  2942               	goto	u9215
 16301  1145  0824               	movf	??_DelayTimejudge,w
 16302  1146  390F               	andlw	15
 16303  1147  00A5               	movwf	??_DelayTimejudge+1
 16304  1148  0825               	movf	??_DelayTimejudge+1,w
 16305  1149  00A8               	movwf	DelayTimejudge@k
 16306                           
 16307                           ;DelayOff_B1.c: 111: i = j + (k * 10);
 16308  114A  300A               	movlw	10
 16309  114B  00A4               	movwf	??_DelayTimejudge
 16310  114C  0824               	movf	??_DelayTimejudge,w
 16311  114D  00A0               	movwf	___bmul@multiplicand
 16312  114E  0828               	movf	DelayTimejudge@k,w
 16313  114F  319C  246E         	fcall	___bmul
 16314  1151  0020               	movlb	0	; select bank0
 16315  1152  0727               	addwf	DelayTimejudge@j,w
 16316  1153  00A5               	movwf	??_DelayTimejudge+1
 16317  1154  0825               	movf	??_DelayTimejudge+1,w
 16318  1155  00A6               	movwf	DelayTimejudge@i
 16319  1156                     l8627:	
 16320                           
 16321                           ;DelayOff_B1.c: 112: }
 16322                           ;DelayOff_B1.c: 133: return i;
 16323  1156  0826               	movf	DelayTimejudge@i,w
 16324  1157  0008               	return
 16325  1158                     __end_of_DelayTimejudge:	
 16326                           
 16327                           	psect	text102
 16328  1C6E                     __ptext102:	
 16329 ;; *************** function ___bmul *****************
 16330 ;; Defined at:
 16331 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16332 ;; Parameters:    Size  Location     Type
 16333 ;;  multiplier      1    wreg     unsigned char 
 16334 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16335 ;; Auto vars:     Size  Location     Type
 16336 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16337 ;;  product         1    2[BANK0 ] unsigned char 
 16338 ;; Return value:  Size  Location     Type
 16339 ;;                  1    wreg      unsigned char 
 16340 ;; Registers used:
 16341 ;;		wreg, status,2, status,0
 16342 ;; Tracked objects:
 16343 ;;		On entry : 0/0
 16344 ;;		On exit  : 0/0
 16345 ;;		Unchanged: 0/0
 16346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16347 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16348 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16349 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16350 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16351 ;;Total ram usage:        4 bytes
 16352 ;; Hardware stack levels used:    1
 16353 ;; Hardware stack levels required when called:    5
 16354 ;; This function calls:
 16355 ;;		Nothing
 16356 ;; This function is called by:
 16357 ;;		_DelayTimejudge
 16358 ;; This function uses a non-reentrant model
 16359 ;;
 16360                           
 16361                           
 16362                           ;psect for function ___bmul
 16363  1C6E                     ___bmul:	
 16364                           
 16365                           ;incstack = 0
 16366                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16367                           ;___bmul@multiplier stored from wreg
 16368  1C6E  0020               	movlb	0	; select bank0
 16369  1C6F  00A3               	movwf	___bmul@multiplier
 16370  1C70  01A2               	clrf	___bmul@product
 16371  1C71                     l8373:	
 16372  1C71  1C23               	btfss	___bmul@multiplier,0
 16373  1C72  2C77               	goto	l8377
 16374  1C73  0820               	movf	___bmul@multiplicand,w
 16375  1C74  00A1               	movwf	??___bmul
 16376  1C75  0821               	movf	??___bmul,w
 16377  1C76  07A2               	addwf	___bmul@product,f
 16378  1C77                     l8377:	
 16379  1C77  1003               	clrc
 16380  1C78  0DA0               	rlf	___bmul@multiplicand,f
 16381  1C79  1003               	clrc
 16382  1C7A  0CA3               	rrf	___bmul@multiplier,f
 16383  1C7B  08A3               	movf	___bmul@multiplier,f
 16384  1C7C  1D03               	skipz
 16385  1C7D  2C71               	goto	l8373
 16386  1C7E  0822               	movf	___bmul@product,w
 16387  1C7F  0008               	return
 16388  1C80                     __end_of___bmul:	
 16389                           
 16390                           	psect	text103
 16391  1C19                     __ptext103:	
 16392 ;; *************** function _getDimmerLights_Status *****************
 16393 ;; Defined at:
 16394 ;;		line 471 in file "../src/Dimmer_B1.c"
 16395 ;; Parameters:    Size  Location     Type
 16396 ;;  lights          1    wreg     unsigned char 
 16397 ;; Auto vars:     Size  Location     Type
 16398 ;;  lights          1    2[BANK0 ] unsigned char 
 16399 ;;  status          1    3[BANK0 ] unsigned char 
 16400 ;; Return value:  Size  Location     Type
 16401 ;;                  1    wreg      unsigned char 
 16402 ;; Registers used:
 16403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16404 ;; Tracked objects:
 16405 ;;		On entry : 0/0
 16406 ;;		On exit  : 0/0
 16407 ;;		Unchanged: 0/0
 16408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16410 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16412 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16413 ;;Total ram usage:        2 bytes
 16414 ;; Hardware stack levels used:    1
 16415 ;; Hardware stack levels required when called:    6
 16416 ;; This function calls:
 16417 ;;		_DimmerLightsPointSelect
 16418 ;; This function is called by:
 16419 ;;		_DlyOff_Main
 16420 ;;		_setDimmerLights_ErrorClose
 16421 ;;		_getMain_LightsStatus
 16422 ;;		_setRFSW_Control
 16423 ;;		_setRFSW_AdjControl
 16424 ;; This function uses a non-reentrant model
 16425 ;;
 16426                           
 16427                           
 16428                           ;psect for function _getDimmerLights_Status
 16429  1C19                     _getDimmerLights_Status:	
 16430                           
 16431                           ;incstack = 0
 16432                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16433                           ;getDimmerLights_Status@lights stored from wreg
 16434  1C19  0020               	movlb	0	; select bank0
 16435  1C1A  00A2               	movwf	getDimmerLights_Status@lights
 16436                           
 16437                           ;Dimmer_B1.c: 472: DimmerLightsPointSelect(lights);
 16438  1C1B  0822               	movf	getDimmerLights_Status@lights,w
 16439  1C1C  319C  24B6         	fcall	_DimmerLightsPointSelect
 16440                           
 16441                           ;Dimmer_B1.c: 473: char status = DimmerLights->Status == 1 ? 1 : 0;
 16442  1C1E  0877               	movf	_DimmerLights,w
 16443  1C1F  0086               	movwf	6
 16444  1C20  3001               	movlw	1	; select bank2/3
 16445  1C21  0087               	movwf	7
 16446  1C22  3000               	movlw	0
 16447  1C23  1A81               	btfsc	1,5
 16448  1C24  3001               	movlw	1
 16449  1C25  0020               	movlb	0	; select bank0
 16450  1C26  00A3               	movwf	getDimmerLights_Status@status
 16451                           
 16452                           ;Dimmer_B1.c: 474: return status;
 16453  1C27  0823               	movf	getDimmerLights_Status@status,w
 16454  1C28  0008               	return
 16455  1C29                     __end_of_getDimmerLights_Status:	
 16456                           
 16457                           	psect	text104
 16458  1CB6                     __ptext104:	
 16459 ;; *************** function _DimmerLightsPointSelect *****************
 16460 ;; Defined at:
 16461 ;;		line 324 in file "../src/Dimmer_B1.c"
 16462 ;; Parameters:    Size  Location     Type
 16463 ;;  lights          1    wreg     unsigned char 
 16464 ;; Auto vars:     Size  Location     Type
 16465 ;;  lights          1    1[BANK0 ] unsigned char 
 16466 ;; Return value:  Size  Location     Type
 16467 ;;		None               void
 16468 ;; Registers used:
 16469 ;;		wreg
 16470 ;; Tracked objects:
 16471 ;;		On entry : 0/0
 16472 ;;		On exit  : 0/0
 16473 ;;		Unchanged: 0/0
 16474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16479 ;;Total ram usage:        2 bytes
 16480 ;; Hardware stack levels used:    1
 16481 ;; Hardware stack levels required when called:    5
 16482 ;; This function calls:
 16483 ;;		Nothing
 16484 ;; This function is called by:
 16485 ;;		_setDimmerLights_Initialization
 16486 ;;		_setDimmerLights_Main
 16487 ;;		_getDimmerLights_Status
 16488 ;;		_setDimmerLights_SwOn
 16489 ;;		_setDimmerLights_SwOff
 16490 ;;		_setDimmerLights_AdjControl
 16491 ;;		_setDimmerLights_ErrorClose
 16492 ;;		_setDimmerLights
 16493 ;;		_setDimmerLights_Adj
 16494 ;;		_setDimmerLights_AdjRF
 16495 ;;		_setDimmerLights_Trigger
 16496 ;;		_setDimmerLights_TriggerAdj
 16497 ;;		_setDimmerLights_Status
 16498 ;;		_setDimmerLights_GO
 16499 ;;		_setDimmerLights_MaxmumValue
 16500 ;; This function uses a non-reentrant model
 16501 ;;
 16502                           
 16503                           
 16504                           ;psect for function _DimmerLightsPointSelect
 16505  1CB6                     _DimmerLightsPointSelect:	
 16506                           
 16507                           ;incstack = 0
 16508                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16509                           ;DimmerLightsPointSelect@lights stored from wreg
 16510  1CB6  0020               	movlb	0	; select bank0
 16511  1CB7  00A1               	movwf	DimmerLightsPointSelect@lights
 16512                           
 16513                           ;Dimmer_B1.c: 326: if (lights == 1) {
 16514  1CB8  0821               	movf	DimmerLightsPointSelect@lights,w
 16515  1CB9  3A01               	xorlw	1
 16516  1CBA  1D03               	skipz
 16517  1CBB  2CC0               	goto	l790
 16518                           
 16519                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 16520  1CBC  30BE               	movlw	_DimmerLights1& (0+255)
 16521  1CBD  00A0               	movwf	??_DimmerLightsPointSelect
 16522  1CBE  0820               	movf	??_DimmerLightsPointSelect,w
 16523  1CBF  00F7               	movwf	_DimmerLights
 16524  1CC0                     l790:	
 16525                           
 16526                           ;Dimmer_B1.c: 328: }
 16527                           ;Dimmer_B1.c: 331: if (lights == 2) {
 16528  1CC0  0821               	movf	DimmerLightsPointSelect@lights,w
 16529  1CC1  3A02               	xorlw	2
 16530  1CC2  1D03               	skipz
 16531  1CC3  0008               	return
 16532                           
 16533                           ;Dimmer_B1.c: 332: DimmerLights = &DimmerLights2;
 16534  1CC4  30CD               	movlw	_DimmerLights2& (0+255)
 16535  1CC5  00A0               	movwf	??_DimmerLightsPointSelect
 16536  1CC6  0820               	movf	??_DimmerLightsPointSelect,w
 16537  1CC7  00F7               	movwf	_DimmerLights
 16538  1CC8  0008               	return
 16539  1CC9                     __end_of_DimmerLightsPointSelect:	
 16540                           
 16541                           	psect	text105
 16542  1B41                     __ptext105:	
 16543 ;; *************** function _DelayOff_Initialization *****************
 16544 ;; Defined at:
 16545 ;;		line 26 in file "../src/DelayOff_B1.c"
 16546 ;; Parameters:    Size  Location     Type
 16547 ;;		None
 16548 ;; Auto vars:     Size  Location     Type
 16549 ;;		None
 16550 ;; Return value:  Size  Location     Type
 16551 ;;		None               void
 16552 ;; Registers used:
 16553 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16554 ;; Tracked objects:
 16555 ;;		On entry : 0/0
 16556 ;;		On exit  : 0/0
 16557 ;;		Unchanged: 0/0
 16558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16563 ;;Total ram usage:        0 bytes
 16564 ;; Hardware stack levels used:    1
 16565 ;; Hardware stack levels required when called:    7
 16566 ;; This function calls:
 16567 ;;		_DlyOff_Initialization
 16568 ;; This function is called by:
 16569 ;;		_main
 16570 ;; This function uses a non-reentrant model
 16571 ;;
 16572                           
 16573                           
 16574                           ;psect for function _DelayOff_Initialization
 16575  1B41                     _DelayOff_Initialization:	
 16576                           
 16577                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16578                           
 16579                           ;incstack = 0
 16580                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16581  1B41  3001               	movlw	1
 16582  1B42  319B  236A  319B   	fcall	_DlyOff_Initialization
 16583                           
 16584                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16585  1B45  3002               	movlw	2
 16586  1B46  319B  236A         	fcall	_DlyOff_Initialization
 16587  1B48  0008               	return
 16588  1B49                     __end_of_DelayOff_Initialization:	
 16589                           
 16590                           	psect	text106
 16591  1B6A                     __ptext106:	
 16592 ;; *************** function _DlyOff_Initialization *****************
 16593 ;; Defined at:
 16594 ;;		line 56 in file "../src/DelayOff_B1.c"
 16595 ;; Parameters:    Size  Location     Type
 16596 ;;  sw              1    wreg     unsigned char 
 16597 ;; Auto vars:     Size  Location     Type
 16598 ;;  sw              1    2[BANK0 ] unsigned char 
 16599 ;; Return value:  Size  Location     Type
 16600 ;;		None               void
 16601 ;; Registers used:
 16602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16603 ;; Tracked objects:
 16604 ;;		On entry : 0/0
 16605 ;;		On exit  : 0/0
 16606 ;;		Unchanged: 0/0
 16607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16612 ;;Total ram usage:        1 bytes
 16613 ;; Hardware stack levels used:    1
 16614 ;; Hardware stack levels required when called:    6
 16615 ;; This function calls:
 16616 ;;		_DelayOffPointSelect
 16617 ;; This function is called by:
 16618 ;;		_DelayOff_Initialization
 16619 ;; This function uses a non-reentrant model
 16620 ;;
 16621                           
 16622                           
 16623                           ;psect for function _DlyOff_Initialization
 16624  1B6A                     _DlyOff_Initialization:	
 16625                           
 16626                           ;incstack = 0
 16627                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16628                           ;DlyOff_Initialization@sw stored from wreg
 16629  1B6A  0020               	movlb	0	; select bank0
 16630  1B6B  00A2               	movwf	DlyOff_Initialization@sw
 16631                           
 16632                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16633  1B6C  0822               	movf	DlyOff_Initialization@sw,w
 16634  1B6D  319D  2516         	fcall	_DelayOffPointSelect
 16635                           
 16636                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 16637  1B6F  0876               	movf	_DelayOff,w
 16638  1B70  0086               	movwf	6
 16639  1B71  3001               	movlw	1	; select bank2/3
 16640  1B72  0087               	movwf	7
 16641  1B73  1401               	bsf	1,0
 16642  1B74  0008               	return
 16643  1B75                     __end_of_DlyOff_Initialization:	
 16644                           
 16645                           	psect	text107
 16646  1D16                     __ptext107:	
 16647 ;; *************** function _DelayOffPointSelect *****************
 16648 ;; Defined at:
 16649 ;;		line 7 in file "../src/DelayOff_B1.c"
 16650 ;; Parameters:    Size  Location     Type
 16651 ;;  sw              1    wreg     unsigned char 
 16652 ;; Auto vars:     Size  Location     Type
 16653 ;;  sw              1    1[BANK0 ] unsigned char 
 16654 ;; Return value:  Size  Location     Type
 16655 ;;		None               void
 16656 ;; Registers used:
 16657 ;;		wreg
 16658 ;; Tracked objects:
 16659 ;;		On entry : 0/0
 16660 ;;		On exit  : 0/0
 16661 ;;		Unchanged: 0/0
 16662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16666 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16667 ;;Total ram usage:        2 bytes
 16668 ;; Hardware stack levels used:    1
 16669 ;; Hardware stack levels required when called:    5
 16670 ;; This function calls:
 16671 ;;		Nothing
 16672 ;; This function is called by:
 16673 ;;		_DlyOff_Initialization
 16674 ;;		_DlyOff_Main
 16675 ;;		_setDelayOff_GO
 16676 ;; This function uses a non-reentrant model
 16677 ;;
 16678                           
 16679                           
 16680                           ;psect for function _DelayOffPointSelect
 16681  1D16                     _DelayOffPointSelect:	
 16682                           
 16683                           ;incstack = 0
 16684                           ; Regs used in _DelayOffPointSelect: [wreg]
 16685                           ;DelayOffPointSelect@sw stored from wreg
 16686  1D16  0020               	movlb	0	; select bank0
 16687  1D17  00A1               	movwf	DelayOffPointSelect@sw
 16688                           
 16689                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16690  1D18  0821               	movf	DelayOffPointSelect@sw,w
 16691  1D19  3A01               	xorlw	1
 16692  1D1A  1D03               	skipz
 16693  1D1B  2D21               	goto	l8611
 16694                           
 16695                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16696  1D1C  3069               	movlw	_DlySw1& (0+255)
 16697  1D1D  00A0               	movwf	??_DelayOffPointSelect
 16698  1D1E  0820               	movf	??_DelayOffPointSelect,w
 16699  1D1F  00F6               	movwf	_DelayOff
 16700                           
 16701                           ;DelayOff_B1.c: 11: }
 16702  1D20  0008               	return
 16703  1D21                     l8611:	
 16704                           
 16705                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 16706  1D21  0821               	movf	DelayOffPointSelect@sw,w
 16707  1D22  3A02               	xorlw	2
 16708  1D23  1D03               	skipz
 16709  1D24  0008               	return
 16710                           
 16711                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 16712  1D25  306B               	movlw	_DlySw2& (0+255)
 16713  1D26  00A0               	movwf	??_DelayOffPointSelect
 16714  1D27  0820               	movf	??_DelayOffPointSelect,w
 16715  1D28  00F6               	movwf	_DelayOff
 16716  1D29  0008               	return
 16717  1D2A                     __end_of_DelayOffPointSelect:	
 16718                           
 16719                           	psect	text108
 16720  1D67                     __ptext108:	
 16721 ;; *************** function _CC2500_PowerOnInitial *****************
 16722 ;; Defined at:
 16723 ;;		line 122 in file "../src/CC2500_B1.c"
 16724 ;; Parameters:    Size  Location     Type
 16725 ;;		None
 16726 ;; Auto vars:     Size  Location     Type
 16727 ;;		None
 16728 ;; Return value:  Size  Location     Type
 16729 ;;		None               void
 16730 ;; Registers used:
 16731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16732 ;; Tracked objects:
 16733 ;;		On entry : 0/0
 16734 ;;		On exit  : 0/0
 16735 ;;		Unchanged: 0/0
 16736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;Total ram usage:        0 bytes
 16742 ;; Hardware stack levels used:    1
 16743 ;; Hardware stack levels required when called:    8
 16744 ;; This function calls:
 16745 ;;		_CC2500_ClearRXFIFO
 16746 ;;		_CC2500_ClearTXFIFO
 16747 ;;		_CC2500_FrequencyCabr
 16748 ;;		_CC2500_InitPATable
 16749 ;;		_CC2500_InitSetREG
 16750 ;;		_CC2500_PowerRST
 16751 ;;		_CC2500_SIDLEMode
 16752 ;; This function is called by:
 16753 ;;		_main
 16754 ;; This function uses a non-reentrant model
 16755 ;;
 16756                           
 16757                           
 16758                           ;psect for function _CC2500_PowerOnInitial
 16759  1D67                     _CC2500_PowerOnInitial:	
 16760                           
 16761                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 16762                           
 16763                           ;incstack = 0
 16764                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16765  1D67  3193  239A  319D   	fcall	_CC2500_PowerRST
 16766                           
 16767                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 16768  1D6A  3191  2104  319D   	fcall	_CC2500_InitSetREG
 16769                           
 16770                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 16771  1D6D  319E  2690  319D   	fcall	_CC2500_InitPATable
 16772                           
 16773                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 16774  1D70  319B  2314  319D   	fcall	_CC2500_ClearTXFIFO
 16775                           
 16776                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 16777  1D73  319B  2310  319D   	fcall	_CC2500_ClearRXFIFO
 16778                           
 16779                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 16780  1D76  319B  2380  319D   	fcall	_CC2500_FrequencyCabr
 16781                           
 16782                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 16783  1D79  319B  2318         	fcall	_CC2500_SIDLEMode
 16784  1D7B  0008               	return
 16785  1D7C                     __end_of_CC2500_PowerOnInitial:	
 16786                           
 16787                           	psect	text109
 16788  1B18                     __ptext109:	
 16789 ;; *************** function _CC2500_SIDLEMode *****************
 16790 ;; Defined at:
 16791 ;;		line 212 in file "../src/CC2500_B1.c"
 16792 ;; Parameters:    Size  Location     Type
 16793 ;;		None
 16794 ;; Auto vars:     Size  Location     Type
 16795 ;;		None
 16796 ;; Return value:  Size  Location     Type
 16797 ;;		None               void
 16798 ;; Registers used:
 16799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16800 ;; Tracked objects:
 16801 ;;		On entry : 0/0
 16802 ;;		On exit  : 0/0
 16803 ;;		Unchanged: 0/0
 16804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16809 ;;Total ram usage:        0 bytes
 16810 ;; Hardware stack levels used:    1
 16811 ;; Hardware stack levels required when called:    7
 16812 ;; This function calls:
 16813 ;;		_CC2500_WriteCommand
 16814 ;; This function is called by:
 16815 ;;		_CC2500_PowerOnInitial
 16816 ;; This function uses a non-reentrant model
 16817 ;;
 16818                           
 16819                           
 16820                           ;psect for function _CC2500_SIDLEMode
 16821  1B18                     _CC2500_SIDLEMode:	
 16822                           
 16823                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 16824                           
 16825                           ;incstack = 0
 16826                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16827  1B18  3036               	movlw	54
 16828  1B19  319E  2605         	fcall	_CC2500_WriteCommand
 16829  1B1B  0008               	return
 16830  1B1C                     __end_of_CC2500_SIDLEMode:	
 16831                           
 16832                           	psect	text110
 16833  139A                     __ptext110:	
 16834 ;; *************** function _CC2500_PowerRST *****************
 16835 ;; Defined at:
 16836 ;;		line 135 in file "../src/CC2500_B1.c"
 16837 ;; Parameters:    Size  Location     Type
 16838 ;;		None
 16839 ;; Auto vars:     Size  Location     Type
 16840 ;;		None
 16841 ;; Return value:  Size  Location     Type
 16842 ;;		None               void
 16843 ;; Registers used:
 16844 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16845 ;; Tracked objects:
 16846 ;;		On entry : 0/0
 16847 ;;		On exit  : 0/0
 16848 ;;		Unchanged: 0/0
 16849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16854 ;;Total ram usage:        1 bytes
 16855 ;; Hardware stack levels used:    1
 16856 ;; Hardware stack levels required when called:    6
 16857 ;; This function calls:
 16858 ;;		_CC2500_WriteByte
 16859 ;;		_DelayTime_1us
 16860 ;;		_Timeout_Counter
 16861 ;;		_set_TimeoutCleared
 16862 ;; This function is called by:
 16863 ;;		_CC2500_PowerOnInitial
 16864 ;; This function uses a non-reentrant model
 16865 ;;
 16866                           
 16867                           
 16868                           ;psect for function _CC2500_PowerRST
 16869  139A                     _CC2500_PowerRST:	
 16870                           
 16871                           ;CC2500_B1.c: 136: RC1 = 0;
 16872                           
 16873                           ;incstack = 0
 16874                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16875  139A  0020               	movlb	0	; select bank0
 16876  139B  108E               	bcf	14,1	;volatile
 16877                           
 16878                           ;CC2500_B1.c: 137: RC0 = 0;
 16879  139C  100E               	bcf	14,0	;volatile
 16880                           
 16881                           ;CC2500_B1.c: 138: RC4 = 1;
 16882  139D  160E               	bsf	14,4	;volatile
 16883                           
 16884                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 16885  139E  300A               	movlw	10
 16886  139F  00A0               	movwf	DelayTime_1us@count
 16887  13A0  3000               	movlw	0
 16888  13A1  00A1               	movwf	DelayTime_1us@count+1
 16889  13A2  3190  2066  3193   	fcall	_DelayTime_1us
 16890                           
 16891                           ;CC2500_B1.c: 140: RC4 = 0;
 16892  13A5  0020               	movlb	0	; select bank0
 16893  13A6  120E               	bcf	14,4	;volatile
 16894                           
 16895                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 16896  13A7  300A               	movlw	10
 16897  13A8  00A0               	movwf	DelayTime_1us@count
 16898  13A9  3000               	movlw	0
 16899  13AA  00A1               	movwf	DelayTime_1us@count+1
 16900  13AB  3190  2066  3193   	fcall	_DelayTime_1us
 16901                           
 16902                           ;CC2500_B1.c: 142: RC4 = 1;
 16903  13AE  0020               	movlb	0	; select bank0
 16904  13AF  160E               	bsf	14,4	;volatile
 16905                           
 16906                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 16907  13B0  3028               	movlw	40
 16908  13B1  00A0               	movwf	DelayTime_1us@count
 16909  13B2  3000               	movlw	0
 16910  13B3  00A1               	movwf	DelayTime_1us@count+1
 16911  13B4  3190  2066  3193   	fcall	_DelayTime_1us
 16912                           
 16913                           ;CC2500_B1.c: 144: RC4 = 0;
 16914  13B7  0020               	movlb	0	; select bank0
 16915  13B8  120E               	bcf	14,4	;volatile
 16916                           
 16917                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 16918  13B9  3030               	movlw	48
 16919  13BA  00A6               	movwf	??_CC2500_PowerRST
 16920  13BB  0826               	movf	??_CC2500_PowerRST,w
 16921  13BC  0021               	movlb	1	; select bank1
 16922  13BD  00D2               	movwf	_SPI0Buffer^(0+128)
 16923                           
 16924                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 16925  13BE  2BC2               	goto	l9607
 16926  13BF                     l9605:	
 16927                           
 16928                           ;CC2500_B1.c: 147: Timeout_Counter();
 16929  13BF  319D  2552  3193   	fcall	_Timeout_Counter
 16930  13C2                     l9607:	
 16931  13C2  0020               	movlb	0	; select bank0
 16932  13C3  1D0E               	btfss	14,2	;volatile
 16933  13C4  2BC8               	goto	l9611
 16934  13C5  0021               	movlb	1	; select bank1
 16935  13C6  1D2D               	btfss	(_myMain^(0+128)+13),2
 16936  13C7  2BBF               	goto	l9605
 16937  13C8                     l9611:	
 16938                           
 16939                           ;CC2500_B1.c: 148: };
 16940                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 16941  13C8  319B  231C  3193   	fcall	_set_TimeoutCleared
 16942                           
 16943                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 16944  13CB  319D  25D3  3193   	fcall	_CC2500_WriteByte
 16945                           
 16946                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 16947  13CE  2BD2               	goto	l9617
 16948  13CF                     l9615:	
 16949                           
 16950                           ;CC2500_B1.c: 152: Timeout_Counter();
 16951  13CF  319D  2552  3193   	fcall	_Timeout_Counter
 16952  13D2                     l9617:	
 16953  13D2  0020               	movlb	0	; select bank0
 16954  13D3  1D0E               	btfss	14,2	;volatile
 16955  13D4  2BD8               	goto	l9621
 16956  13D5  0021               	movlb	1	; select bank1
 16957  13D6  1D2D               	btfss	(_myMain^(0+128)+13),2
 16958  13D7  2BCF               	goto	l9615
 16959  13D8                     l9621:	
 16960                           
 16961                           ;CC2500_B1.c: 153: };
 16962                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 16963  13D8  319B  231C         	fcall	_set_TimeoutCleared
 16964                           
 16965                           ;CC2500_B1.c: 155: RC0 = 0;
 16966  13DA  0020               	movlb	0	; select bank0
 16967  13DB  100E               	bcf	14,0	;volatile
 16968                           
 16969                           ;CC2500_B1.c: 156: RC4 = 1;
 16970  13DC  160E               	bsf	14,4	;volatile
 16971  13DD  0008               	return
 16972  13DE                     __end_of_CC2500_PowerRST:	
 16973                           
 16974                           	psect	text111
 16975  1104                     __ptext111:	
 16976 ;; *************** function _CC2500_InitSetREG *****************
 16977 ;; Defined at:
 16978 ;;		line 162 in file "../src/CC2500_B1.c"
 16979 ;; Parameters:    Size  Location     Type
 16980 ;;		None
 16981 ;; Auto vars:     Size  Location     Type
 16982 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16983 ;;  temp2           1    7[BANK0 ] unsigned char 
 16984 ;;  temp1           1    6[BANK0 ] unsigned char 
 16985 ;; Return value:  Size  Location     Type
 16986 ;;		None               void
 16987 ;; Registers used:
 16988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16989 ;; Tracked objects:
 16990 ;;		On entry : 0/0
 16991 ;;		On exit  : 0/0
 16992 ;;		Unchanged: 0/0
 16993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16995 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16997 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16998 ;;Total ram usage:        4 bytes
 16999 ;; Hardware stack levels used:    1
 17000 ;; Hardware stack levels required when called:    7
 17001 ;; This function calls:
 17002 ;;		_CC2500_WriteREG
 17003 ;; This function is called by:
 17004 ;;		_CC2500_PowerOnInitial
 17005 ;; This function uses a non-reentrant model
 17006 ;;
 17007                           
 17008                           
 17009                           ;psect for function _CC2500_InitSetREG
 17010  1104                     _CC2500_InitSetREG:	
 17011                           
 17012                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17013                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17014                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17015                           
 17016                           ;incstack = 0
 17017                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17018  1104  0020               	movlb	0	; select bank0
 17019  1105  01A8               	clrf	CC2500_InitSetREG@loop_c
 17020  1106                     L9:	
 17021  1106  302F               	movlw	47
 17022  1107  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17023  1108  1803               	btfsc	3,0
 17024  1109  0008               	return
 17025                           
 17026                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17027  110A  0828               	movf	CC2500_InitSetREG@loop_c,w
 17028  110B  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17029  110C  0084               	movwf	4
 17030  110D  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17031  110E  1803               	skipnc
 17032  110F  3E01               	addlw	1
 17033  1110  0085               	movwf	5
 17034  1111  0800               	movf	0,w	;code access
 17035  1112  00A5               	movwf	??_CC2500_InitSetREG
 17036  1113  0825               	movf	??_CC2500_InitSetREG,w
 17037  1114  00A6               	movwf	CC2500_InitSetREG@temp1
 17038                           
 17039                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17040  1115  0828               	movf	CC2500_InitSetREG@loop_c,w
 17041  1116  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17042  1117  0084               	movwf	4
 17043  1118  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17044  1119  1803               	skipnc
 17045  111A  3E01               	addlw	1
 17046  111B  0085               	movwf	5
 17047  111C  0800               	movf	0,w	;code access
 17048  111D  00A5               	movwf	??_CC2500_InitSetREG
 17049  111E  0825               	movf	??_CC2500_InitSetREG,w
 17050  111F  00A7               	movwf	CC2500_InitSetREG@temp2
 17051                           
 17052                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17053  1120  0827               	movf	CC2500_InitSetREG@temp2,w
 17054  1121  00A5               	movwf	??_CC2500_InitSetREG
 17055  1122  0825               	movf	??_CC2500_InitSetREG,w
 17056  1123  00A2               	movwf	CC2500_WriteREG@value
 17057  1124  0826               	movf	CC2500_InitSetREG@temp1,w
 17058  1125  319F  2794  3191   	fcall	_CC2500_WriteREG
 17059  1128  3001               	movlw	1
 17060  1129  0020               	movlb	0	; select bank0
 17061  112A  00A5               	movwf	??_CC2500_InitSetREG
 17062  112B  0825               	movf	??_CC2500_InitSetREG,w
 17063  112C  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17064  112D  2906               	goto	L9
 17065  112E                     __end_of_CC2500_InitSetREG:	
 17066                           
 17067                           	psect	text112
 17068  1E90                     __ptext112:	
 17069 ;; *************** function _CC2500_InitPATable *****************
 17070 ;; Defined at:
 17071 ;;		line 177 in file "../src/CC2500_B1.c"
 17072 ;; Parameters:    Size  Location     Type
 17073 ;;		None
 17074 ;; Auto vars:     Size  Location     Type
 17075 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17076 ;;  temp            1    6[BANK0 ] unsigned char 
 17077 ;; Return value:  Size  Location     Type
 17078 ;;		None               void
 17079 ;; Registers used:
 17080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17081 ;; Tracked objects:
 17082 ;;		On entry : 0/0
 17083 ;;		On exit  : 0/0
 17084 ;;		Unchanged: 0/0
 17085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17087 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17090 ;;Total ram usage:        3 bytes
 17091 ;; Hardware stack levels used:    1
 17092 ;; Hardware stack levels required when called:    7
 17093 ;; This function calls:
 17094 ;;		_CC2500_WriteREG
 17095 ;; This function is called by:
 17096 ;;		_CC2500_PowerOnInitial
 17097 ;; This function uses a non-reentrant model
 17098 ;;
 17099                           
 17100                           
 17101                           ;psect for function _CC2500_InitPATable
 17102  1E90                     _CC2500_InitPATable:	
 17103                           
 17104                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17105                           ;CC2500_B1.c: 179: unsigned char temp;
 17106                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17107                           
 17108                           ;incstack = 0
 17109                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17110  1E90  0020               	movlb	0	; select bank0
 17111  1E91  01A7               	clrf	CC2500_InitPATable@loop_d
 17112  1E92                     L10:	
 17113  1E92  3008               	movlw	8
 17114  1E93  0227               	subwf	CC2500_InitPATable@loop_d,w
 17115  1E94  1803               	btfsc	3,0
 17116  1E95  0008               	return
 17117                           
 17118                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17119  1E96  0827               	movf	CC2500_InitPATable@loop_d,w
 17120  1E97  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17121  1E98  0084               	movwf	4
 17122  1E99  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17123  1E9A  1803               	skipnc
 17124  1E9B  3E01               	addlw	1
 17125  1E9C  0085               	movwf	5
 17126  1E9D  0800               	movf	0,w	;code access
 17127  1E9E  00A5               	movwf	??_CC2500_InitPATable
 17128  1E9F  0825               	movf	??_CC2500_InitPATable,w
 17129  1EA0  00A6               	movwf	CC2500_InitPATable@temp
 17130                           
 17131                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17132  1EA1  0826               	movf	CC2500_InitPATable@temp,w
 17133  1EA2  00A5               	movwf	??_CC2500_InitPATable
 17134  1EA3  0825               	movf	??_CC2500_InitPATable,w
 17135  1EA4  00A2               	movwf	CC2500_WriteREG@value
 17136  1EA5  303E               	movlw	62
 17137  1EA6  319F  2794  319E   	fcall	_CC2500_WriteREG
 17138  1EA9  3001               	movlw	1
 17139  1EAA  0020               	movlb	0	; select bank0
 17140  1EAB  00A5               	movwf	??_CC2500_InitPATable
 17141  1EAC  0825               	movf	??_CC2500_InitPATable,w
 17142  1EAD  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17143  1EAE  2E92               	goto	L10
 17144  1EAF                     __end_of_CC2500_InitPATable:	
 17145                           
 17146                           	psect	text113
 17147  1F94                     __ptext113:	
 17148 ;; *************** function _CC2500_WriteREG *****************
 17149 ;; Defined at:
 17150 ;;		line 254 in file "../src/CC2500_B1.c"
 17151 ;; Parameters:    Size  Location     Type
 17152 ;;  w_addr          1    wreg     unsigned char 
 17153 ;;  value           1    2[BANK0 ] unsigned char 
 17154 ;; Auto vars:     Size  Location     Type
 17155 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17156 ;; Return value:  Size  Location     Type
 17157 ;;		None               void
 17158 ;; Registers used:
 17159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17160 ;; Tracked objects:
 17161 ;;		On entry : 0/0
 17162 ;;		On exit  : 0/0
 17163 ;;		Unchanged: 0/0
 17164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17165 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17167 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17168 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17169 ;;Total ram usage:        3 bytes
 17170 ;; Hardware stack levels used:    1
 17171 ;; Hardware stack levels required when called:    6
 17172 ;; This function calls:
 17173 ;;		_CC2500_WriteByte
 17174 ;;		_Timeout_Counter
 17175 ;;		_set_TimeoutCleared
 17176 ;; This function is called by:
 17177 ;;		_CC2500_InitSetREG
 17178 ;;		_CC2500_InitPATable
 17179 ;; This function uses a non-reentrant model
 17180 ;;
 17181                           
 17182                           
 17183                           ;psect for function _CC2500_WriteREG
 17184  1F94                     _CC2500_WriteREG:	
 17185                           
 17186                           ;incstack = 0
 17187                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17188                           ;CC2500_WriteREG@w_addr stored from wreg
 17189  1F94  0020               	movlb	0	; select bank0
 17190  1F95  00A4               	movwf	CC2500_WriteREG@w_addr
 17191                           
 17192                           ;CC2500_B1.c: 255: RC4 = 0;
 17193  1F96  120E               	bcf	14,4	;volatile
 17194                           
 17195                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17196  1F97  0824               	movf	CC2500_WriteREG@w_addr,w
 17197  1F98  00A3               	movwf	??_CC2500_WriteREG
 17198  1F99  0823               	movf	??_CC2500_WriteREG,w
 17199  1F9A  0021               	movlb	1	; select bank1
 17200  1F9B  00D2               	movwf	_SPI0Buffer^(0+128)
 17201                           
 17202                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17203  1F9C  2FA0               	goto	l9291
 17204  1F9D                     l9289:	
 17205                           
 17206                           ;CC2500_B1.c: 258: Timeout_Counter();
 17207  1F9D  319D  2552  319F   	fcall	_Timeout_Counter
 17208  1FA0                     l9291:	
 17209  1FA0  0020               	movlb	0	; select bank0
 17210  1FA1  1D0E               	btfss	14,2	;volatile
 17211  1FA2  2FA6               	goto	l9295
 17212  1FA3  0021               	movlb	1	; select bank1
 17213  1FA4  1D2D               	btfss	(_myMain^(0+128)+13),2
 17214  1FA5  2F9D               	goto	l9289
 17215  1FA6                     l9295:	
 17216                           
 17217                           ;CC2500_B1.c: 259: };
 17218                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17219  1FA6  319B  231C  319F   	fcall	_set_TimeoutCleared
 17220                           
 17221                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17222  1FA9  319D  25D3  319F   	fcall	_CC2500_WriteByte
 17223                           
 17224                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17225  1FAC  0020               	movlb	0	; select bank0
 17226  1FAD  0822               	movf	CC2500_WriteREG@value,w
 17227  1FAE  00A3               	movwf	??_CC2500_WriteREG
 17228  1FAF  0823               	movf	??_CC2500_WriteREG,w
 17229  1FB0  0021               	movlb	1	; select bank1
 17230  1FB1  00D2               	movwf	_SPI0Buffer^(0+128)
 17231                           
 17232                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17233  1FB2  319D  25D3         	fcall	_CC2500_WriteByte
 17234                           
 17235                           ;CC2500_B1.c: 265: RC4 = 1;
 17236  1FB4  0020               	movlb	0	; select bank0
 17237  1FB5  160E               	bsf	14,4	;volatile
 17238  1FB6  0008               	return
 17239  1FB7                     __end_of_CC2500_WriteREG:	
 17240                           
 17241                           	psect	text114
 17242  1B80                     __ptext114:	
 17243 ;; *************** function _CC2500_FrequencyCabr *****************
 17244 ;; Defined at:
 17245 ;;		line 204 in file "../src/CC2500_B1.c"
 17246 ;; Parameters:    Size  Location     Type
 17247 ;;		None
 17248 ;; Auto vars:     Size  Location     Type
 17249 ;;		None
 17250 ;; Return value:  Size  Location     Type
 17251 ;;		None               void
 17252 ;; Registers used:
 17253 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17254 ;; Tracked objects:
 17255 ;;		On entry : 0/0
 17256 ;;		On exit  : 0/0
 17257 ;;		Unchanged: 0/0
 17258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17263 ;;Total ram usage:        0 bytes
 17264 ;; Hardware stack levels used:    1
 17265 ;; Hardware stack levels required when called:    7
 17266 ;; This function calls:
 17267 ;;		_CC2500_WriteCommand
 17268 ;;		_DelayTime_1us
 17269 ;; This function is called by:
 17270 ;;		_CC2500_PowerOnInitial
 17271 ;; This function uses a non-reentrant model
 17272 ;;
 17273                           
 17274                           
 17275                           ;psect for function _CC2500_FrequencyCabr
 17276  1B80                     _CC2500_FrequencyCabr:	
 17277                           
 17278                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17279                           
 17280                           ;incstack = 0
 17281                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17282  1B80  3033               	movlw	51
 17283  1B81  319E  2605  319B   	fcall	_CC2500_WriteCommand
 17284                           
 17285                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17286  1B84  30E8               	movlw	232
 17287  1B85  0020               	movlb	0	; select bank0
 17288  1B86  00A0               	movwf	DelayTime_1us@count
 17289  1B87  3003               	movlw	3
 17290  1B88  00A1               	movwf	DelayTime_1us@count+1
 17291  1B89  3190  2066         	fcall	_DelayTime_1us
 17292  1B8B  0008               	return
 17293  1B8C                     __end_of_CC2500_FrequencyCabr:	
 17294                           
 17295                           	psect	text115
 17296  1066                     __ptext115:	
 17297 ;; *************** function _DelayTime_1us *****************
 17298 ;; Defined at:
 17299 ;;		line 323 in file "../src/CC2500_B1.c"
 17300 ;; Parameters:    Size  Location     Type
 17301 ;;  count           2    0[BANK0 ] int 
 17302 ;; Auto vars:     Size  Location     Type
 17303 ;;  j               2    4[BANK0 ] unsigned int 
 17304 ;;  i               2    2[BANK0 ] unsigned int 
 17305 ;; Return value:  Size  Location     Type
 17306 ;;		None               void
 17307 ;; Registers used:
 17308 ;;		wreg, status,2
 17309 ;; Tracked objects:
 17310 ;;		On entry : 0/0
 17311 ;;		On exit  : 0/0
 17312 ;;		Unchanged: 0/0
 17313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17314 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17315 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17317 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17318 ;;Total ram usage:        6 bytes
 17319 ;; Hardware stack levels used:    1
 17320 ;; Hardware stack levels required when called:    5
 17321 ;; This function calls:
 17322 ;;		Nothing
 17323 ;; This function is called by:
 17324 ;;		_CC2500_PowerRST
 17325 ;;		_CC2500_FrequencyCabr
 17326 ;; This function uses a non-reentrant model
 17327 ;;
 17328                           
 17329                           
 17330                           ;psect for function _DelayTime_1us
 17331  1066                     _DelayTime_1us:	
 17332                           
 17333                           ;CC2500_B1.c: 324: unsigned int i, j;
 17334                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 17335                           
 17336                           ;incstack = 0
 17337                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17338  1066  3001               	movlw	1
 17339  1067  0020               	movlb	0	; select bank0
 17340  1068  00A2               	movwf	DelayTime_1us@i
 17341  1069  3000               	movlw	0
 17342  106A  00A3               	movwf	DelayTime_1us@i+1
 17343  106B                     l374:	
 17344  106B  0821               	movf	DelayTime_1us@count+1,w
 17345  106C  0223               	subwf	DelayTime_1us@i+1,w
 17346  106D  1D03               	skipz
 17347  106E  2871               	goto	u10125
 17348  106F  0820               	movf	DelayTime_1us@count,w
 17349  1070  0222               	subwf	DelayTime_1us@i,w
 17350  1071                     u10125:	
 17351  1071  1803               	btfsc	3,0
 17352  1072  0008               	return
 17353                           
 17354                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 17355  1073  01A4               	clrf	DelayTime_1us@j
 17356  1074  01A5               	clrf	DelayTime_1us@j+1
 17357  1075  3000               	movlw	0
 17358  1076  0225               	subwf	DelayTime_1us@j+1,w
 17359  1077  3002               	movlw	2
 17360  1078  1903               	skipnz
 17361  1079  0224               	subwf	DelayTime_1us@j,w
 17362  107A  1803               	btfsc	3,0
 17363  107B  2887               	goto	l9283
 17364  107C                     l9281:	
 17365  107C  3001               	movlw	1
 17366  107D  07A4               	addwf	DelayTime_1us@j,f
 17367  107E  3000               	movlw	0
 17368  107F  3DA5               	addwfc	DelayTime_1us@j+1,f
 17369  1080  3000               	movlw	0
 17370  1081  0225               	subwf	DelayTime_1us@j+1,w
 17371  1082  3002               	movlw	2
 17372  1083  1903               	skipnz
 17373  1084  0224               	subwf	DelayTime_1us@j,w
 17374  1085  1C03               	skipc
 17375  1086  287C               	goto	l9281
 17376  1087                     l9283:	
 17377  1087  3001               	movlw	1
 17378  1088  07A2               	addwf	DelayTime_1us@i,f
 17379  1089  3000               	movlw	0
 17380  108A  3DA3               	addwfc	DelayTime_1us@i+1,f
 17381  108B  286B               	goto	l374
 17382  108C                     __end_of_DelayTime_1us:	
 17383                           
 17384                           	psect	text116
 17385  1B14                     __ptext116:	
 17386 ;; *************** function _CC2500_ClearTXFIFO *****************
 17387 ;; Defined at:
 17388 ;;		line 190 in file "../src/CC2500_B1.c"
 17389 ;; Parameters:    Size  Location     Type
 17390 ;;		None
 17391 ;; Auto vars:     Size  Location     Type
 17392 ;;		None
 17393 ;; Return value:  Size  Location     Type
 17394 ;;		None               void
 17395 ;; Registers used:
 17396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17397 ;; Tracked objects:
 17398 ;;		On entry : 0/0
 17399 ;;		On exit  : 0/0
 17400 ;;		Unchanged: 0/0
 17401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17406 ;;Total ram usage:        0 bytes
 17407 ;; Hardware stack levels used:    1
 17408 ;; Hardware stack levels required when called:    7
 17409 ;; This function calls:
 17410 ;;		_CC2500_WriteCommand
 17411 ;; This function is called by:
 17412 ;;		_CC2500_PowerOnInitial
 17413 ;; This function uses a non-reentrant model
 17414 ;;
 17415                           
 17416                           
 17417                           ;psect for function _CC2500_ClearTXFIFO
 17418  1B14                     _CC2500_ClearTXFIFO:	
 17419                           
 17420                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 17421                           
 17422                           ;incstack = 0
 17423                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17424  1B14  303B               	movlw	59
 17425  1B15  319E  2605         	fcall	_CC2500_WriteCommand
 17426  1B17  0008               	return
 17427  1B18                     __end_of_CC2500_ClearTXFIFO:	
 17428                           
 17429                           	psect	text117
 17430  1B10                     __ptext117:	
 17431 ;; *************** function _CC2500_ClearRXFIFO *****************
 17432 ;; Defined at:
 17433 ;;		line 197 in file "../src/CC2500_B1.c"
 17434 ;; Parameters:    Size  Location     Type
 17435 ;;		None
 17436 ;; Auto vars:     Size  Location     Type
 17437 ;;		None
 17438 ;; Return value:  Size  Location     Type
 17439 ;;		None               void
 17440 ;; Registers used:
 17441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17442 ;; Tracked objects:
 17443 ;;		On entry : 0/0
 17444 ;;		On exit  : 0/0
 17445 ;;		Unchanged: 0/0
 17446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17451 ;;Total ram usage:        0 bytes
 17452 ;; Hardware stack levels used:    1
 17453 ;; Hardware stack levels required when called:    7
 17454 ;; This function calls:
 17455 ;;		_CC2500_WriteCommand
 17456 ;; This function is called by:
 17457 ;;		_CC2500_PowerOnInitial
 17458 ;; This function uses a non-reentrant model
 17459 ;;
 17460                           
 17461                           
 17462                           ;psect for function _CC2500_ClearRXFIFO
 17463  1B10                     _CC2500_ClearRXFIFO:	
 17464                           
 17465                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 17466                           
 17467                           ;incstack = 0
 17468                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17469  1B10  303A               	movlw	58
 17470  1B11  319E  2605         	fcall	_CC2500_WriteCommand
 17471  1B13  0008               	return
 17472  1B14                     __end_of_CC2500_ClearRXFIFO:	
 17473                           
 17474                           	psect	text118
 17475  1E05                     __ptext118:	
 17476 ;; *************** function _CC2500_WriteCommand *****************
 17477 ;; Defined at:
 17478 ;;		line 288 in file "../src/CC2500_B1.c"
 17479 ;; Parameters:    Size  Location     Type
 17480 ;;  command         1    wreg     unsigned char 
 17481 ;; Auto vars:     Size  Location     Type
 17482 ;;  command         1    3[BANK0 ] unsigned char 
 17483 ;; Return value:  Size  Location     Type
 17484 ;;		None               void
 17485 ;; Registers used:
 17486 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17487 ;; Tracked objects:
 17488 ;;		On entry : 0/0
 17489 ;;		On exit  : 0/0
 17490 ;;		Unchanged: 0/0
 17491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17496 ;;Total ram usage:        2 bytes
 17497 ;; Hardware stack levels used:    1
 17498 ;; Hardware stack levels required when called:    6
 17499 ;; This function calls:
 17500 ;;		_CC2500_WriteByte
 17501 ;;		_Timeout_Counter
 17502 ;;		_set_TimeoutCleared
 17503 ;; This function is called by:
 17504 ;;		_CC2500_TxData
 17505 ;;		_CC2500_ClearTXFIFO
 17506 ;;		_CC2500_ClearRXFIFO
 17507 ;;		_CC2500_FrequencyCabr
 17508 ;;		_CC2500_SIDLEMode
 17509 ;;		_setRF_Main
 17510 ;;		_RF_RxDisable
 17511 ;; This function uses a non-reentrant model
 17512 ;;
 17513                           
 17514                           
 17515                           ;psect for function _CC2500_WriteCommand
 17516  1E05                     _CC2500_WriteCommand:	
 17517                           
 17518                           ;incstack = 0
 17519                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17520                           ;CC2500_WriteCommand@command stored from wreg
 17521  1E05  0020               	movlb	0	; select bank0
 17522  1E06  00A3               	movwf	CC2500_WriteCommand@command
 17523                           
 17524                           ;CC2500_B1.c: 289: RC4 = 0;
 17525  1E07  120E               	bcf	14,4	;volatile
 17526                           
 17527                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 17528  1E08  0823               	movf	CC2500_WriteCommand@command,w
 17529  1E09  00A2               	movwf	??_CC2500_WriteCommand
 17530  1E0A  0822               	movf	??_CC2500_WriteCommand,w
 17531  1E0B  0021               	movlb	1	; select bank1
 17532  1E0C  00D2               	movwf	_SPI0Buffer^(0+128)
 17533                           
 17534                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 17535  1E0D  2E11               	goto	l8999
 17536  1E0E                     l8997:	
 17537                           
 17538                           ;CC2500_B1.c: 293: Timeout_Counter();
 17539  1E0E  319D  2552  319E   	fcall	_Timeout_Counter
 17540  1E11                     l8999:	
 17541  1E11  0020               	movlb	0	; select bank0
 17542  1E12  1D0E               	btfss	14,2	;volatile
 17543  1E13  2E17               	goto	l9003
 17544  1E14  0021               	movlb	1	; select bank1
 17545  1E15  1D2D               	btfss	(_myMain^(0+128)+13),2
 17546  1E16  2E0E               	goto	l8997
 17547  1E17                     l9003:	
 17548                           
 17549                           ;CC2500_B1.c: 294: };
 17550                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 17551  1E17  319B  231C  319E   	fcall	_set_TimeoutCleared
 17552                           
 17553                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 17554  1E1A  319D  25D3         	fcall	_CC2500_WriteByte
 17555                           
 17556                           ;CC2500_B1.c: 298: RC4 = 1;
 17557  1E1C  0020               	movlb	0	; select bank0
 17558  1E1D  160E               	bsf	14,4	;volatile
 17559  1E1E  0008               	return
 17560  1E1F                     __end_of_CC2500_WriteCommand:	
 17561                           
 17562                           	psect	text119
 17563  1B1C                     __ptext119:	
 17564 ;; *************** function _set_TimeoutCleared *****************
 17565 ;; Defined at:
 17566 ;;		line 270 in file "../src/Main_B1.c"
 17567 ;; Parameters:    Size  Location     Type
 17568 ;;		None
 17569 ;; Auto vars:     Size  Location     Type
 17570 ;;		None
 17571 ;; Return value:  Size  Location     Type
 17572 ;;		None               void
 17573 ;; Registers used:
 17574 ;;		status,2
 17575 ;; Tracked objects:
 17576 ;;		On entry : 0/0
 17577 ;;		On exit  : 0/0
 17578 ;;		Unchanged: 0/0
 17579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17584 ;;Total ram usage:        0 bytes
 17585 ;; Hardware stack levels used:    1
 17586 ;; Hardware stack levels required when called:    5
 17587 ;; This function calls:
 17588 ;;		Nothing
 17589 ;; This function is called by:
 17590 ;;		_CC2500_TxData
 17591 ;;		_CC2500_RxData
 17592 ;;		_CC2500_PowerRST
 17593 ;;		_CC2500_WriteREG
 17594 ;;		_CC2500_WriteCommand
 17595 ;;		_CC2500_ReadStatus
 17596 ;;		_getAD
 17597 ;;		_TouchPower
 17598 ;;		_CC2500_ReadREG
 17599 ;; This function uses a non-reentrant model
 17600 ;;
 17601                           
 17602                           
 17603                           ;psect for function _set_TimeoutCleared
 17604  1B1C                     _set_TimeoutCleared:	
 17605                           
 17606                           ;Main_B1.c: 271: myMain.Timeout = 0;
 17607                           
 17608                           ;incstack = 0
 17609                           ; Regs used in _set_TimeoutCleared: [status,2]
 17610  1B1C  0021               	movlb	1	; select bank1
 17611  1B1D  112D               	bcf	(_myMain^(0+128)+13),2
 17612                           
 17613                           ;Main_B1.c: 272: myMain.Timeout_Counter = 0;
 17614  1B1E  01AE               	clrf	(_myMain^(0+128)+14)
 17615  1B1F  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17616  1B20  0008               	return
 17617  1B21                     __end_of_set_TimeoutCleared:	
 17618                           
 17619                           	psect	text120
 17620  1D52                     __ptext120:	
 17621 ;; *************** function _Timeout_Counter *****************
 17622 ;; Defined at:
 17623 ;;		line 261 in file "../src/Main_B1.c"
 17624 ;; Parameters:    Size  Location     Type
 17625 ;;		None
 17626 ;; Auto vars:     Size  Location     Type
 17627 ;;		None
 17628 ;; Return value:  Size  Location     Type
 17629 ;;		None               void
 17630 ;; Registers used:
 17631 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17632 ;; Tracked objects:
 17633 ;;		On entry : 0/0
 17634 ;;		On exit  : 0/0
 17635 ;;		Unchanged: 0/0
 17636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17641 ;;Total ram usage:        0 bytes
 17642 ;; Hardware stack levels used:    1
 17643 ;; Hardware stack levels required when called:    5
 17644 ;; This function calls:
 17645 ;;		Nothing
 17646 ;; This function is called by:
 17647 ;;		_CC2500_TxData
 17648 ;;		_CC2500_RxData
 17649 ;;		_CC2500_PowerRST
 17650 ;;		_CC2500_WriteREG
 17651 ;;		_CC2500_WriteCommand
 17652 ;;		_CC2500_ReadStatus
 17653 ;;		_getAD
 17654 ;;		_TouchPower
 17655 ;;		_CC2500_ReadREG
 17656 ;; This function uses a non-reentrant model
 17657 ;;
 17658                           
 17659                           
 17660                           ;psect for function _Timeout_Counter
 17661  1D52                     _Timeout_Counter:	
 17662                           
 17663                           ;Main_B1.c: 262: myMain.Timeout_Counter++;
 17664                           
 17665                           ;incstack = 0
 17666                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17667  1D52  3001               	movlw	1
 17668  1D53  0021               	movlb	1	; select bank1
 17669  1D54  07AE               	addwf	(_myMain^(0+128)+14),f
 17670  1D55  3000               	movlw	0
 17671  1D56  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 17672                           
 17673                           ;Main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
 17674  1D57  300E               	movlw	14
 17675  1D58  3EA0               	addlw	_myMain& (0+255)
 17676  1D59  0086               	movwf	6
 17677  1D5A  0187               	clrf	7
 17678  1D5B  3F40               	moviw [0]fsr1
 17679  1D5C  3A10               	xorlw	16
 17680  1D5D  1D03               	skipz
 17681  1D5E  2D61               	goto	u9545
 17682  1D5F  3F41               	moviw [1]fsr1
 17683  1D60  3A27               	xorlw	39
 17684  1D61                     u9545:	
 17685  1D61  1D03               	skipz
 17686  1D62  0008               	return
 17687                           
 17688                           ;Main_B1.c: 264: myMain.Timeout_Counter = 0;
 17689  1D63  01AE               	clrf	(_myMain^(0+128)+14)
 17690  1D64  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17691                           
 17692                           ;Main_B1.c: 265: myMain.Timeout = 1;
 17693  1D65  152D               	bsf	(_myMain^(0+128)+13),2
 17694  1D66  0008               	return
 17695  1D67                     __end_of_Timeout_Counter:	
 17696                           
 17697                           	psect	text121
 17698  1DD3                     __ptext121:	
 17699 ;; *************** function _CC2500_WriteByte *****************
 17700 ;; Defined at:
 17701 ;;		line 222 in file "../src/CC2500_B1.c"
 17702 ;; Parameters:    Size  Location     Type
 17703 ;;		None
 17704 ;; Auto vars:     Size  Location     Type
 17705 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17706 ;; Return value:  Size  Location     Type
 17707 ;;		None               void
 17708 ;; Registers used:
 17709 ;;		wreg, status,2, status,0
 17710 ;; Tracked objects:
 17711 ;;		On entry : 0/0
 17712 ;;		On exit  : 0/0
 17713 ;;		Unchanged: 0/0
 17714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17718 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17719 ;;Total ram usage:        2 bytes
 17720 ;; Hardware stack levels used:    1
 17721 ;; Hardware stack levels required when called:    5
 17722 ;; This function calls:
 17723 ;;		Nothing
 17724 ;; This function is called by:
 17725 ;;		_CC2500_TxData
 17726 ;;		_CC2500_RxData
 17727 ;;		_CC2500_PowerRST
 17728 ;;		_CC2500_WriteREG
 17729 ;;		_CC2500_WriteCommand
 17730 ;;		_CC2500_ReadStatus
 17731 ;;		_CC2500_ReadREG
 17732 ;; This function uses a non-reentrant model
 17733 ;;
 17734                           
 17735                           
 17736                           ;psect for function _CC2500_WriteByte
 17737  1DD3                     _CC2500_WriteByte:	
 17738                           
 17739                           ;CC2500_B1.c: 223: unsigned char loop_a;
 17740                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 17741                           
 17742                           ;incstack = 0
 17743                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17744  1DD3  0020               	movlb	0	; select bank0
 17745  1DD4  01A1               	clrf	CC2500_WriteByte@loop_a
 17746  1DD5                     L11:	
 17747  1DD5  3008               	movlw	8
 17748  1DD6  0221               	subwf	CC2500_WriteByte@loop_a,w
 17749  1DD7  1803               	btfsc	3,0
 17750  1DD8  0008               	return
 17751                           
 17752                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 17753  1DD9  0021               	movlb	1	; select bank1
 17754  1DDA  1FD2               	btfss	_SPI0Buffer^(0+128),7
 17755  1DDB  2DDF               	goto	l330
 17756                           
 17757                           ;CC2500_B1.c: 226: RC0 = 1;
 17758  1DDC  0020               	movlb	0	; select bank0
 17759  1DDD  140E               	bsf	14,0	;volatile
 17760  1DDE  2DE1               	goto	l331
 17761  1DDF                     l330:	
 17762                           
 17763                           ;CC2500_B1.c: 227: else
 17764                           ;CC2500_B1.c: 228: RC0 = 0;
 17765  1DDF  0020               	movlb	0	; select bank0
 17766  1DE0  100E               	bcf	14,0	;volatile
 17767  1DE1                     l331:	
 17768                           
 17769                           ;CC2500_B1.c: 229: RC1 = 1;
 17770  1DE1  148E               	bsf	14,1	;volatile
 17771                           
 17772                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 17773  1DE2  1003               	clrc
 17774  1DE3  0021               	movlb	1	; select bank1
 17775  1DE4  0DD2               	rlf	_SPI0Buffer^(0+128),f
 17776                           
 17777                           ;CC2500_B1.c: 231: RC1 = 0;
 17778  1DE5  0020               	movlb	0	; select bank0
 17779  1DE6  108E               	bcf	14,1	;volatile
 17780  1DE7  3001               	movlw	1
 17781  1DE8  00A0               	movwf	??_CC2500_WriteByte
 17782  1DE9  0820               	movf	??_CC2500_WriteByte,w
 17783  1DEA  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17784  1DEB  2DD5               	goto	L11
 17785  1DEC                     __end_of_CC2500_WriteByte:	
 17786                           
 17787                           	psect	text122
 17788  1468                     __ptext122:	
 17789 ;; *************** function _Buzzer_Main *****************
 17790 ;; Defined at:
 17791 ;;		line 46 in file "../src/Buzzer_B1.c"
 17792 ;; Parameters:    Size  Location     Type
 17793 ;;		None
 17794 ;; Auto vars:     Size  Location     Type
 17795 ;;		None
 17796 ;; Return value:  Size  Location     Type
 17797 ;;		None               void
 17798 ;; Registers used:
 17799 ;;		wreg, status,2, status,0
 17800 ;; Tracked objects:
 17801 ;;		On entry : 0/0
 17802 ;;		On exit  : 0/0
 17803 ;;		Unchanged: 0/0
 17804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17808 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17809 ;;Total ram usage:        1 bytes
 17810 ;; Hardware stack levels used:    1
 17811 ;; Hardware stack levels required when called:    5
 17812 ;; This function calls:
 17813 ;;		Nothing
 17814 ;; This function is called by:
 17815 ;;		_main
 17816 ;; This function uses a non-reentrant model
 17817 ;;
 17818                           
 17819                           
 17820                           ;psect for function _Buzzer_Main
 17821  1468                     _Buzzer_Main:	
 17822                           
 17823                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17824                           
 17825                           ;incstack = 0
 17826                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17827  1468  0021               	movlb	1	; select bank1
 17828  1469  1CB0               	btfss	_Buz1^(0+128),1
 17829  146A  0008               	return
 17830                           
 17831                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17832  146B  3001               	movlw	1
 17833  146C  07B1               	addwf	(_Buz1^(0+128)+1),f
 17834  146D  3000               	movlw	0
 17835  146E  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 17836                           
 17837                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17838  146F  0837               	movf	((_Buz1+1)^(0+128)+6),w
 17839  1470  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 17840  1471  1D03               	skipz
 17841  1472  2C75               	goto	u11545
 17842  1473  0836               	movf	(_Buz1^(0+128)+6),w
 17843  1474  0231               	subwf	(_Buz1^(0+128)+1),w
 17844  1475                     u11545:	
 17845  1475  1C03               	skipc
 17846  1476  0008               	return
 17847                           
 17848                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17849  1477  01B1               	clrf	(_Buz1^(0+128)+1)
 17850  1478  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 17851                           
 17852                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17853  1479  12B0               	bcf	_Buz1^(0+128),5
 17854  147A  0020               	movlb	0	; select bank0
 17855  147B  1D8D               	btfss	13,3	;volatile
 17856  147C  2C7F               	goto	l10197
 17857  147D  0021               	movlb	1	; select bank1
 17858  147E  16B0               	bsf	_Buz1^(0+128),5
 17859  147F                     l10197:	
 17860                           
 17861                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17862  147F  0021               	movlb	1	; select bank1
 17863  1480  1AB0               	btfsc	_Buz1^(0+128),5
 17864  1481  2CAB               	goto	l106
 17865                           
 17866                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17867  1482  08B3               	movf	(_Buz1^(0+128)+3),f
 17868  1483  1D03               	skipz
 17869  1484  2CA7               	goto	l107
 17870                           
 17871                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17872  1485  1DB0               	btfss	_Buz1^(0+128),3
 17873  1486  2C95               	goto	l108
 17874                           
 17875                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17876  1487  11B0               	bcf	_Buz1^(0+128),3
 17877                           
 17878                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17879  1488  0834               	movf	(_Buz1^(0+128)+4),w
 17880  1489  0020               	movlb	0	; select bank0
 17881  148A  00A0               	movwf	??_Buzzer_Main
 17882  148B  0820               	movf	??_Buzzer_Main,w
 17883  148C  0021               	movlb	1	; select bank1
 17884  148D  00B3               	movwf	(_Buz1^(0+128)+3)
 17885                           
 17886                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17887  148E  0839               	movf	((_Buz1+1)^(0+128)+8),w
 17888  148F  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17889  1490  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17890  1491  0838               	movf	(_Buz1^(0+128)+8),w
 17891  1492  01B6               	clrf	(_Buz1^(0+128)+6)
 17892  1493  07B6               	addwf	(_Buz1^(0+128)+6),f
 17893                           
 17894                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17895  1494  0008               	return
 17896  1495                     l108:	
 17897  1495  1E30               	btfss	_Buz1^(0+128),4
 17898  1496  2CA5               	goto	l110
 17899                           
 17900                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17901  1497  1230               	bcf	_Buz1^(0+128),4
 17902                           
 17903                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17904  1498  0835               	movf	(_Buz1^(0+128)+5),w
 17905  1499  0020               	movlb	0	; select bank0
 17906  149A  00A0               	movwf	??_Buzzer_Main
 17907  149B  0820               	movf	??_Buzzer_Main,w
 17908  149C  0021               	movlb	1	; select bank1
 17909  149D  00B3               	movwf	(_Buz1^(0+128)+3)
 17910                           
 17911                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17912  149E  083B               	movf	((_Buz1+1)^(0+128)+10),w
 17913  149F  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17914  14A0  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17915  14A1  083A               	movf	(_Buz1^(0+128)+10),w
 17916  14A2  01B6               	clrf	(_Buz1^(0+128)+6)
 17917  14A3  07B6               	addwf	(_Buz1^(0+128)+6),f
 17918                           
 17919                           ;Buzzer_B1.c: 62: } else {
 17920  14A4  0008               	return
 17921  14A5                     l110:	
 17922                           
 17923                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17924  14A5  10B0               	bcf	_Buz1^(0+128),1
 17925                           
 17926                           ;Buzzer_B1.c: 64: }
 17927                           ;Buzzer_B1.c: 65: } else {
 17928  14A6  0008               	return
 17929  14A7                     l107:	
 17930                           
 17931                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17932  14A7  16B0               	bsf	_Buz1^(0+128),5
 17933                           
 17934                           ;Buzzer_B1.c: 68: RB3 = 1;
 17935  14A8  0020               	movlb	0	; select bank0
 17936  14A9  158D               	bsf	13,3	;volatile
 17937                           
 17938                           ;Buzzer_B1.c: 69: }
 17939                           ;Buzzer_B1.c: 70: } else {
 17940  14AA  0008               	return
 17941  14AB                     l106:	
 17942                           
 17943                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17944  14AB  12B0               	bcf	_Buz1^(0+128),5
 17945                           
 17946                           ;Buzzer_B1.c: 73: RB3 = 0;
 17947  14AC  0020               	movlb	0	; select bank0
 17948  14AD  118D               	bcf	13,3	;volatile
 17949                           
 17950                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17951  14AE  3001               	movlw	1
 17952  14AF  0021               	movlb	1	; select bank1
 17953  14B0  02B3               	subwf	(_Buz1^(0+128)+3),f
 17954  14B1  0008               	return
 17955  14B2                     __end_of_Buzzer_Main:	
 17956                           
 17957                           	psect	text123
 17958  1B01                     __ptext123:	
 17959 ;; *************** function _Buzzer_Initialization *****************
 17960 ;; Defined at:
 17961 ;;		line 11 in file "../src/Buzzer_B1.c"
 17962 ;; Parameters:    Size  Location     Type
 17963 ;;		None
 17964 ;; Auto vars:     Size  Location     Type
 17965 ;;		None
 17966 ;; Return value:  Size  Location     Type
 17967 ;;		None               void
 17968 ;; Registers used:
 17969 ;;		None
 17970 ;; Tracked objects:
 17971 ;;		On entry : 0/0
 17972 ;;		On exit  : 0/0
 17973 ;;		Unchanged: 0/0
 17974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17979 ;;Total ram usage:        0 bytes
 17980 ;; Hardware stack levels used:    1
 17981 ;; Hardware stack levels required when called:    5
 17982 ;; This function calls:
 17983 ;;		Nothing
 17984 ;; This function is called by:
 17985 ;;		_main
 17986 ;; This function uses a non-reentrant model
 17987 ;;
 17988                           
 17989                           
 17990                           ;psect for function _Buzzer_Initialization
 17991  1B01                     _Buzzer_Initialization:	
 17992                           
 17993                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 17994                           
 17995                           ;incstack = 0
 17996                           ; Regs used in _Buzzer_Initialization: []
 17997  1B01  0021               	movlb	1	; select bank1
 17998  1B02  1430               	bsf	_Buz1^(0+128),0
 17999  1B03  0008               	return
 18000  1B04                     __end_of_Buzzer_Initialization:	
 18001                           
 18002                           	psect	intentry
 18003  0004                     __pintentry:	
 18004 ;; *************** function _ISR *****************
 18005 ;; Defined at:
 18006 ;;		line 107 in file "../src/MCU_B1.c"
 18007 ;; Parameters:    Size  Location     Type
 18008 ;;		None
 18009 ;; Auto vars:     Size  Location     Type
 18010 ;;		None
 18011 ;; Return value:  Size  Location     Type
 18012 ;;		None               void
 18013 ;; Registers used:
 18014 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18015 ;; Tracked objects:
 18016 ;;		On entry : 0/0
 18017 ;;		On exit  : 0/0
 18018 ;;		Unchanged: 0/0
 18019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18023 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18024 ;;Total ram usage:        1 bytes
 18025 ;; Hardware stack levels used:    1
 18026 ;; Hardware stack levels required when called:    4
 18027 ;; This function calls:
 18028 ;;		_IOC_ISR
 18029 ;;		_TMR1_ISR
 18030 ;; This function is called by:
 18031 ;;		Interrupt level 1
 18032 ;; This function uses a non-reentrant model
 18033 ;;
 18034                           
 18035  0004                     _ISR:	
 18036                           
 18037                           ;incstack = 0
 18038                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18039  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18040  0005  3180               	pagesel	$
 18041  0006  0020               	movlb	0	; select bank0
 18042  0007  087F               	movf	127,w
 18043  0008  00F5               	movwf	??_ISR
 18044                           
 18045                           ;MCU_B1.c: 109: IOC_ISR();
 18046  0009  319B  23FB  3180   	fcall	_IOC_ISR
 18047                           
 18048                           ;MCU_B1.c: 111: ;;
 18049                           ;MCU_B1.c: 113: TMR1_ISR();
 18050  000C  3190  20DB         	fcall	_TMR1_ISR
 18051  000E  0875               	movf	??_ISR,w
 18052  000F  0020               	movlb	0	; select bank0
 18053  0010  00FF               	movwf	127
 18054  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18055  0012  0009               	retfie
 18056  0013                     __end_of_ISR:	
 18057                           
 18058                           	psect	text125
 18059  10DB                     __ptext125:	
 18060 ;; *************** function _TMR1_ISR *****************
 18061 ;; Defined at:
 18062 ;;		line 209 in file "../src/MCU_B1.c"
 18063 ;; Parameters:    Size  Location     Type
 18064 ;;		None
 18065 ;; Auto vars:     Size  Location     Type
 18066 ;;		None
 18067 ;; Return value:  Size  Location     Type
 18068 ;;		None               void
 18069 ;; Registers used:
 18070 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18071 ;; Tracked objects:
 18072 ;;		On entry : 0/0
 18073 ;;		On exit  : 0/0
 18074 ;;		Unchanged: 0/0
 18075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18080 ;;Total ram usage:        0 bytes
 18081 ;; Hardware stack levels used:    1
 18082 ;; Hardware stack levels required when called:    2
 18083 ;; This function calls:
 18084 ;;		_setDimmerLights_IntrControl
 18085 ;; This function is called by:
 18086 ;;		_ISR
 18087 ;; This function uses a non-reentrant model
 18088 ;;
 18089                           
 18090                           
 18091                           ;psect for function _TMR1_ISR
 18092  10DB                     _TMR1_ISR:	
 18093                           
 18094                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18095                           
 18096                           ;incstack = 0
 18097                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18098  10DB  0021               	movlb	1	; select bank1
 18099  10DC  1C11               	btfss	17,0	;volatile
 18100  10DD  0008               	return
 18101  10DE  0020               	movlb	0	; select bank0
 18102  10DF  1C11               	btfss	17,0	;volatile
 18103  10E0  0008               	return
 18104                           
 18105                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18106  10E1  30FA               	movlw	250
 18107  10E2  0097               	movwf	23	;volatile
 18108                           
 18109                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18110  10E3  3038               	movlw	56
 18111  10E4  0096               	movwf	22	;volatile
 18112                           
 18113                           ;MCU_B1.c: 214: TMR1IF = 0;
 18114  10E5  1011               	bcf	17,0	;volatile
 18115                           
 18116                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18117  10E6  3001               	movlw	1
 18118  10E7  3180  2049  3190   	fcall	_setDimmerLights_IntrControl
 18119                           
 18120                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18121  10EA  3002               	movlw	2
 18122  10EB  3180  2049  3190   	fcall	_setDimmerLights_IntrControl
 18123                           
 18124                           ;MCU_B1.c: 234: Timer1.Count++;
 18125  10EE  3001               	movlw	1
 18126  10EF  0022               	movlb	2	; select bank2
 18127  10F0  07A1               	addwf	(_Timer1^(0+256)+1),f
 18128  10F1  3000               	movlw	0
 18129  10F2  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18130                           
 18131                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18132  10F3  3001               	movlw	1
 18133  10F4  3E20               	addlw	_Timer1& (0+255)
 18134  10F5  0086               	movwf	6
 18135  10F6  3001               	movlw	1	; select bank2/3
 18136  10F7  0087               	movwf	7
 18137  10F8  3F40               	moviw [0]fsr1
 18138  10F9  3A64               	xorlw	100
 18139  10FA  1D03               	skipz
 18140  10FB  28FE               	goto	u779_25
 18141  10FC  3F41               	moviw [1]fsr1
 18142  10FD  3A00               	xorlw	0
 18143  10FE                     u779_25:	
 18144  10FE  1D03               	skipz
 18145  10FF  0008               	return
 18146                           
 18147                           ;MCU_B1.c: 236: {
 18148                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18149  1100  01A1               	clrf	(_Timer1^(0+256)+1)
 18150  1101  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18151                           
 18152                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18153  1102  1420               	bsf	_Timer1^(0+256),0
 18154  1103  0008               	return
 18155  1104                     __end_of_TMR1_ISR:	
 18156                           
 18157                           	psect	text126
 18158  0049                     __ptext126:	
 18159 ;; *************** function _setDimmerLights_IntrControl *****************
 18160 ;; Defined at:
 18161 ;;		line 94 in file "../src/Dimmer_B1.c"
 18162 ;; Parameters:    Size  Location     Type
 18163 ;;  lights          1    wreg     unsigned char 
 18164 ;; Auto vars:     Size  Location     Type
 18165 ;;  lights          1    4[COMMON] unsigned char 
 18166 ;; Return value:  Size  Location     Type
 18167 ;;		None               void
 18168 ;; Registers used:
 18169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18170 ;; Tracked objects:
 18171 ;;		On entry : 0/0
 18172 ;;		On exit  : 0/0
 18173 ;;		Unchanged: 0/0
 18174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18176 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18177 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18178 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18179 ;;Total ram usage:        3 bytes
 18180 ;; Hardware stack levels used:    1
 18181 ;; Hardware stack levels required when called:    1
 18182 ;; This function calls:
 18183 ;;		_DimmerIntrPointSelect
 18184 ;; This function is called by:
 18185 ;;		_TMR1_ISR
 18186 ;; This function uses a non-reentrant model
 18187 ;;
 18188                           
 18189                           
 18190                           ;psect for function _setDimmerLights_IntrControl
 18191  0049                     _setDimmerLights_IntrControl:	
 18192                           
 18193                           ;incstack = 0
 18194                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18195                           ;setDimmerLights_IntrControl@lights stored from wreg
 18196  0049  00F4               	movwf	setDimmerLights_IntrControl@lights
 18197                           
 18198                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 18199  004A  0874               	movf	setDimmerLights_IntrControl@lights,w
 18200  004B  319C  245C  3180   	fcall	_DimmerIntrPointSelect
 18201                           
 18202                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 18203  004E  0878               	movf	_DimmerLightsIntr,w
 18204  004F  0086               	movwf	6
 18205  0050  3001               	movlw	1	; select bank2/3
 18206  0051  0087               	movwf	7
 18207  0052  1C01               	btfss	1,0
 18208  0053  28A0               	goto	i1l7147
 18209                           
 18210                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 18211  0054  3001               	movlw	1
 18212  0055  00F2               	movwf	??_setDimmerLights_IntrControl
 18213  0056  0878               	movf	_DimmerLightsIntr,w
 18214  0057  3E03               	addlw	3
 18215  0058  0086               	movwf	6
 18216  0059  3001               	movlw	1	; select bank2/3
 18217  005A  0087               	movwf	7
 18218  005B  0872               	movf	??_setDimmerLights_IntrControl,w
 18219  005C  0781               	addwf	1,f
 18220                           
 18221                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r.Correction)) {
 18222  005D  0878               	movf	_DimmerLightsIntr,w
 18223  005E  3E04               	addlw	4
 18224  005F  0086               	movwf	6
 18225  0060  3001               	movlw	1	; select bank2/3
 18226  0061  0087               	movwf	7
 18227  0062  0801               	movf	1,w
 18228  0063  0021               	movlb	1	; select bank1
 18229  0064  074A               	addwf	(_Dimmer^(0+128)+2),w
 18230  0065  00F2               	movwf	??_setDimmerLights_IntrControl
 18231  0066  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18232  0067  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 18233  0068  0878               	movf	_DimmerLightsIntr,w
 18234  0069  3E03               	addlw	3
 18235  006A  0086               	movwf	6
 18236  006B  3001               	movlw	1	; select bank2/3
 18237  006C  0087               	movwf	7
 18238  006D  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18239  006E  3A80               	xorlw	128
 18240  006F  3C80               	sublw	128
 18241  0070  1D03               	skipz
 18242  0071  2874               	goto	u655_25
 18243  0072  0872               	movf	??_setDimmerLights_IntrControl,w
 18244  0073  0201               	subwf	1,w
 18245  0074                     u655_25:	
 18246  0074  1C03               	skipc
 18247  0075  29A4               	goto	i1l7209
 18248                           
 18249                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 18250  0076  0878               	movf	_DimmerLightsIntr,w
 18251  0077  3E03               	addlw	3
 18252  0078  0086               	movwf	6
 18253  0079  3001               	movlw	1	; select bank2/3
 18254  007A  0087               	movwf	7
 18255  007B  0181               	clrf	1
 18256                           
 18257                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 18258  007C  0878               	movf	_DimmerLightsIntr,w
 18259  007D  0086               	movwf	6
 18260  007E  3001               	movlw	1	; select bank2/3
 18261  007F  0087               	movwf	7
 18262  0080  1001               	bcf	1,0
 18263                           
 18264                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 18265  0081  0878               	movf	_DimmerLightsIntr,w
 18266  0082  0086               	movwf	6
 18267  0083  3001               	movlw	1	; select bank2/3
 18268  0084  0087               	movwf	7
 18269  0085  1F01               	btfss	1,6
 18270  0086  29A4               	goto	i1l7209
 18271                           
 18272                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 18273  0087  0878               	movf	_DimmerLightsIntr,w
 18274  0088  3E08               	addlw	8
 18275  0089  0086               	movwf	6
 18276  008A  3001               	movlw	1	; select bank2/3
 18277  008B  0087               	movwf	7
 18278  008C  1401               	bsf	1,0
 18279                           
 18280                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 18281  008D  0878               	movf	_DimmerLightsIntr,w
 18282  008E  3E08               	addlw	8
 18283  008F  0086               	movwf	6
 18284  0090  3001               	movlw	1	; select bank2/3
 18285  0091  0087               	movwf	7
 18286  0092  1681               	bsf	1,5
 18287                           
 18288                           ;Dimmer_B1.c: 107: if (lights == 1) {
 18289  0093  0874               	movf	setDimmerLights_IntrControl@lights,w
 18290  0094  3A01               	xorlw	1
 18291  0095  1D03               	skipz
 18292  0096  2899               	goto	i1l7143
 18293                           
 18294                           ;Dimmer_B1.c: 108: RA7 = 1;
 18295  0097  0020               	movlb	0	; select bank0
 18296  0098  178C               	bsf	12,7	;volatile
 18297  0099                     i1l7143:	
 18298                           ;Dimmer_B1.c: 109: ;;
 18299                           
 18300                           
 18301                           ;Dimmer_B1.c: 110: }
 18302                           ;Dimmer_B1.c: 113: if (lights == 2) {
 18303  0099  0874               	movf	setDimmerLights_IntrControl@lights,w
 18304  009A  3A02               	xorlw	2
 18305  009B  1D03               	skipz
 18306  009C  29A4               	goto	i1l7209
 18307                           
 18308                           ;Dimmer_B1.c: 114: RB4 = 1;
 18309  009D  0020               	movlb	0	; select bank0
 18310  009E  160D               	bsf	13,4	;volatile
 18311                           
 18312                           ;Dimmer_B1.c: 115: }
 18313                           ;Dimmer_B1.c: 122: }
 18314                           ;Dimmer_B1.c: 123: }
 18315                           ;Dimmer_B1.c: 124: } else {
 18316  009F  29A4               	goto	i1l7209
 18317  00A0                     i1l7147:	
 18318                           
 18319                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 18320  00A0  0878               	movf	_DimmerLightsIntr,w
 18321  00A1  3E08               	addlw	8
 18322  00A2  0086               	movwf	6
 18323  00A3  3001               	movlw	1	; select bank2/3
 18324  00A4  0087               	movwf	7
 18325  00A5  1C01               	btfss	1,0
 18326  00A6  29A4               	goto	i1l7209
 18327                           
 18328                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 18329  00A7  0878               	movf	_DimmerLightsIntr,w
 18330  00A8  3E08               	addlw	8
 18331  00A9  0086               	movwf	6
 18332  00AA  3001               	movlw	1	; select bank2/3
 18333  00AB  0087               	movwf	7
 18334  00AC  1001               	bcf	1,0
 18335                           
 18336                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 18337  00AD  0878               	movf	_DimmerLightsIntr,w
 18338  00AE  0086               	movwf	6
 18339  00AF  3001               	movlw	1	; select bank2/3
 18340  00B0  0087               	movwf	7
 18341  00B1  1C81               	btfss	1,1
 18342  00B2  29A4               	goto	i1l7209
 18343                           
 18344                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 18345  00B3  3001               	movlw	1
 18346  00B4  00F2               	movwf	??_setDimmerLights_IntrControl
 18347  00B5  0A78               	incf	_DimmerLightsIntr,w
 18348  00B6  0086               	movwf	6
 18349  00B7  3001               	movlw	1	; select bank2/3
 18350  00B8  0087               	movwf	7
 18351  00B9  0872               	movf	??_setDimmerLights_IntrControl,w
 18352  00BA  0781               	addwf	1,f
 18353                           
 18354                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18355  00BB  0A78               	incf	_DimmerLightsIntr,w
 18356  00BC  0086               	movwf	6
 18357  00BD  3001               	movlw	1	; select bank2/3
 18358  00BE  0087               	movwf	7
 18359  00BF  0878               	movf	_DimmerLightsIntr,w
 18360  00C0  3E02               	addlw	2
 18361  00C1  0084               	movwf	4
 18362  00C2  3001               	movlw	1	; select bank2/3
 18363  00C3  0085               	movwf	5
 18364  00C4  0800               	movf	0,w
 18365  00C5  0201               	subwf	1,w
 18366  00C6  1C03               	skipc
 18367  00C7  29A4               	goto	i1l7209
 18368                           
 18369                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 18370  00C8  0A78               	incf	_DimmerLightsIntr,w
 18371  00C9  0086               	movwf	6
 18372  00CA  3001               	movlw	1	; select bank2/3
 18373  00CB  0087               	movwf	7
 18374  00CC  0181               	clrf	1
 18375                           
 18376                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 18377  00CD  0878               	movf	_DimmerLightsIntr,w
 18378  00CE  0086               	movwf	6
 18379  00CF  3001               	movlw	1	; select bank2/3
 18380  00D0  0087               	movwf	7
 18381  00D1  1D81               	btfss	1,3
 18382  00D2  2909               	goto	i1l7173
 18383                           
 18384                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 18385  00D3  0878               	movf	_DimmerLightsIntr,w
 18386  00D4  0086               	movwf	6
 18387  00D5  3001               	movlw	1	; select bank2/3
 18388  00D6  0087               	movwf	7
 18389  00D7  1A01               	btfsc	1,4
 18390  00D8  28F0               	goto	i1l7167
 18391                           
 18392                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 18393  00D9  0878               	movf	_DimmerLightsIntr,w
 18394  00DA  3E04               	addlw	4
 18395  00DB  0086               	movwf	6
 18396  00DC  3001               	movlw	1	; select bank2/3
 18397  00DD  0087               	movwf	7
 18398  00DE  3021               	movlw	33
 18399  00DF  0201               	subwf	1,w
 18400  00E0  1C03               	skipc
 18401  00E1  28EA               	goto	i1l7165
 18402                           
 18403                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 18404  00E2  0878               	movf	_DimmerLightsIntr,w
 18405  00E3  3E04               	addlw	4
 18406  00E4  0086               	movwf	6
 18407  00E5  3001               	movlw	1	; select bank2/3
 18408  00E6  0087               	movwf	7
 18409  00E7  3001               	movlw	1
 18410  00E8  0281               	subwf	1,f
 18411                           
 18412                           ;Dimmer_B1.c: 135: } else {
 18413  00E9  29A4               	goto	i1l7209
 18414  00EA                     i1l7165:	
 18415                           
 18416                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 18417  00EA  0878               	movf	_DimmerLightsIntr,w
 18418  00EB  0086               	movwf	6
 18419  00EC  3001               	movlw	1	; select bank2/3
 18420  00ED  0087               	movwf	7
 18421  00EE  1601               	bsf	1,4
 18422                           
 18423                           ;Dimmer_B1.c: 137: }
 18424                           ;Dimmer_B1.c: 138: } else {
 18425  00EF  29A4               	goto	i1l7209
 18426  00F0                     i1l7167:	
 18427                           
 18428                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 18429  00F0  0878               	movf	_DimmerLightsIntr,w
 18430  00F1  3E04               	addlw	4
 18431  00F2  0086               	movwf	6
 18432  00F3  3001               	movlw	1	; select bank2/3
 18433  00F4  0087               	movwf	7
 18434  00F5  303C               	movlw	60
 18435  00F6  0201               	subwf	1,w
 18436  00F7  1803               	skipnc
 18437  00F8  2903               	goto	i1l7171
 18438                           
 18439                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 18440  00F9  3001               	movlw	1
 18441  00FA  00F2               	movwf	??_setDimmerLights_IntrControl
 18442  00FB  0878               	movf	_DimmerLightsIntr,w
 18443  00FC  3E04               	addlw	4
 18444  00FD  0086               	movwf	6
 18445  00FE  3001               	movlw	1	; select bank2/3
 18446  00FF  0087               	movwf	7
 18447  0100  0872               	movf	??_setDimmerLights_IntrControl,w
 18448  0101  0781               	addwf	1,f
 18449                           
 18450                           ;Dimmer_B1.c: 141: } else {
 18451  0102  29A4               	goto	i1l7209
 18452  0103                     i1l7171:	
 18453                           
 18454                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 18455  0103  0878               	movf	_DimmerLightsIntr,w
 18456  0104  0086               	movwf	6
 18457  0105  3001               	movlw	1	; select bank2/3
 18458  0106  0087               	movwf	7
 18459  0107  1201               	bcf	1,4
 18460                           
 18461                           ;Dimmer_B1.c: 143: }
 18462                           ;Dimmer_B1.c: 144: }
 18463                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 18464  0108  29A4               	goto	i1l7209
 18465  0109                     i1l7173:	
 18466  0109  0878               	movf	_DimmerLightsIntr,w
 18467  010A  0086               	movwf	6
 18468  010B  3001               	movlw	1	; select bank2/3
 18469  010C  0087               	movwf	7
 18470  010D  1D01               	btfss	1,2
 18471  010E  2950               	goto	i1l7187
 18472                           
 18473                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 18474  010F  0878               	movf	_DimmerLightsIntr,w
 18475  0110  3E05               	addlw	5
 18476  0111  0086               	movwf	6
 18477  0112  3001               	movlw	1	; select bank2/3
 18478  0113  0087               	movwf	7
 18479  0114  0878               	movf	_DimmerLightsIntr,w
 18480  0115  3E04               	addlw	4
 18481  0116  0084               	movwf	4
 18482  0117  3001               	movlw	1	; select bank2/3
 18483  0118  0085               	movwf	5
 18484  0119  0800               	movf	0,w
 18485  011A  0201               	subwf	1,w
 18486  011B  1803               	skipnc
 18487  011C  2925               	goto	i1l7179
 18488                           
 18489                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 18490  011D  0878               	movf	_DimmerLightsIntr,w
 18491  011E  3E04               	addlw	4
 18492  011F  0086               	movwf	6
 18493  0120  3001               	movlw	1	; select bank2/3
 18494  0121  0087               	movwf	7
 18495  0122  3001               	movlw	1
 18496  0123  0281               	subwf	1,f
 18497                           
 18498                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 18499  0124  293C               	goto	i1l7183
 18500  0125                     i1l7179:	
 18501  0125  0878               	movf	_DimmerLightsIntr,w
 18502  0126  3E04               	addlw	4
 18503  0127  0086               	movwf	6
 18504  0128  3001               	movlw	1	; select bank2/3
 18505  0129  0087               	movwf	7
 18506  012A  0878               	movf	_DimmerLightsIntr,w
 18507  012B  3E05               	addlw	5
 18508  012C  0084               	movwf	4
 18509  012D  3001               	movlw	1	; select bank2/3
 18510  012E  0085               	movwf	5
 18511  012F  0800               	movf	0,w
 18512  0130  0201               	subwf	1,w
 18513  0131  1803               	skipnc
 18514  0132  293C               	goto	i1l7183
 18515                           
 18516                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 18517  0133  3001               	movlw	1
 18518  0134  00F2               	movwf	??_setDimmerLights_IntrControl
 18519  0135  0878               	movf	_DimmerLightsIntr,w
 18520  0136  3E04               	addlw	4
 18521  0137  0086               	movwf	6
 18522  0138  3001               	movlw	1	; select bank2/3
 18523  0139  0087               	movwf	7
 18524  013A  0872               	movf	??_setDimmerLights_IntrControl,w
 18525  013B  0781               	addwf	1,f
 18526  013C                     i1l7183:	
 18527                           
 18528                           ;Dimmer_B1.c: 150: }
 18529                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18530  013C  0878               	movf	_DimmerLightsIntr,w
 18531  013D  3E05               	addlw	5
 18532  013E  0086               	movwf	6
 18533  013F  3001               	movlw	1	; select bank2/3
 18534  0140  0087               	movwf	7
 18535  0141  0878               	movf	_DimmerLightsIntr,w
 18536  0142  3E04               	addlw	4
 18537  0143  0084               	movwf	4
 18538  0144  3001               	movlw	1	; select bank2/3
 18539  0145  0085               	movwf	5
 18540  0146  0800               	movf	0,w
 18541  0147  0601               	xorwf	1,w
 18542  0148  1D03               	skipz
 18543  0149  29A4               	goto	i1l7209
 18544                           
 18545                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 18546  014A  0878               	movf	_DimmerLightsIntr,w
 18547  014B  0086               	movwf	6
 18548  014C  3001               	movlw	1	; select bank2/3
 18549  014D  0087               	movwf	7
 18550  014E  1101               	bcf	1,2
 18551  014F  296B               	goto	i1l7193
 18552  0150                     i1l7187:	
 18553                           ;Dimmer_B1.c: 154: }
 18554                           ;Dimmer_B1.c: 155: } else {
 18555                           
 18556                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 18557                           
 18558                           
 18559                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 18560  0150  0878               	movf	_DimmerLightsIntr,w
 18561  0151  0086               	movwf	6
 18562  0152  3001               	movlw	1	; select bank2/3
 18563  0153  0087               	movwf	7
 18564  0154  1E81               	btfss	1,5
 18565  0155  2971               	goto	i1l7195
 18566                           
 18567                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 18568  0156  0878               	movf	_DimmerLightsIntr,w
 18569  0157  3E04               	addlw	4
 18570  0158  0086               	movwf	6
 18571  0159  3001               	movlw	1	; select bank2/3
 18572  015A  0087               	movwf	7
 18573  015B  3001               	movlw	1
 18574  015C  0281               	subwf	1,f
 18575                           
 18576                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 18577  015D  0878               	movf	_DimmerLightsIntr,w
 18578  015E  3E05               	addlw	5
 18579  015F  0086               	movwf	6
 18580  0160  3001               	movlw	1	; select bank2/3
 18581  0161  0087               	movwf	7
 18582  0162  0878               	movf	_DimmerLightsIntr,w
 18583  0163  3E04               	addlw	4
 18584  0164  0084               	movwf	4
 18585  0165  3001               	movlw	1	; select bank2/3
 18586  0166  0085               	movwf	5
 18587  0167  0800               	movf	0,w
 18588  0168  0201               	subwf	1,w
 18589  0169  1C03               	skipc
 18590  016A  29A4               	goto	i1l7209
 18591  016B                     i1l7193:	
 18592                           
 18593                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 18594  016B  0878               	movf	_DimmerLightsIntr,w
 18595  016C  0086               	movwf	6
 18596  016D  3001               	movlw	1	; select bank2/3
 18597  016E  0087               	movwf	7
 18598  016F  1081               	bcf	1,1
 18599                           
 18600                           ;Dimmer_B1.c: 160: }
 18601                           ;Dimmer_B1.c: 161: } else {
 18602  0170  29A4               	goto	i1l7209
 18603  0171                     i1l7195:	
 18604                           
 18605                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 18606  0171  3001               	movlw	1
 18607  0172  00F2               	movwf	??_setDimmerLights_IntrControl
 18608  0173  0878               	movf	_DimmerLightsIntr,w
 18609  0174  3E04               	addlw	4
 18610  0175  0086               	movwf	6
 18611  0176  3001               	movlw	1	; select bank2/3
 18612  0177  0087               	movwf	7
 18613  0178  0872               	movf	??_setDimmerLights_IntrControl,w
 18614  0179  0781               	addwf	1,f
 18615                           
 18616                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 18617  017A  0878               	movf	_DimmerLightsIntr,w
 18618  017B  3E04               	addlw	4
 18619  017C  0086               	movwf	6
 18620  017D  3001               	movlw	1	; select bank2/3
 18621  017E  0087               	movwf	7
 18622  017F  0878               	movf	_DimmerLightsIntr,w
 18623  0180  3E06               	addlw	6
 18624  0181  0084               	movwf	4
 18625  0182  3001               	movlw	1	; select bank2/3
 18626  0183  0085               	movwf	5
 18627  0184  0800               	movf	0,w
 18628  0185  0201               	subwf	1,w
 18629  0186  1C03               	skipc
 18630  0187  29A4               	goto	i1l7209
 18631                           
 18632                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 18633  0188  0878               	movf	_DimmerLightsIntr,w
 18634  0189  0086               	movwf	6
 18635  018A  3001               	movlw	1	; select bank2/3
 18636  018B  0087               	movwf	7
 18637  018C  1081               	bcf	1,1
 18638                           
 18639                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 18640  018D  0878               	movf	_DimmerLightsIntr,w
 18641  018E  0086               	movwf	6
 18642  018F  3001               	movlw	1	; select bank2/3
 18643  0190  0087               	movwf	7
 18644  0191  1301               	bcf	1,6
 18645                           
 18646                           ;Dimmer_B1.c: 166: DimmerLights->Loop = 0;
 18647  0192  0877               	movf	_DimmerLights,w
 18648  0193  3E09               	addlw	9
 18649  0194  0086               	movwf	6
 18650  0195  3001               	movlw	1	; select bank2/3
 18651  0196  0087               	movwf	7
 18652  0197  1081               	bcf	1,1
 18653                           
 18654                           ;Dimmer_B1.c: 168: if (lights == 1) {
 18655  0198  0874               	movf	setDimmerLights_IntrControl@lights,w
 18656  0199  3A01               	xorlw	1
 18657  019A  1D03               	skipz
 18658  019B  299E               	goto	i1l7205
 18659                           
 18660                           ;Dimmer_B1.c: 169: RA3 = 0;
 18661  019C  0020               	movlb	0	; select bank0
 18662  019D  118C               	bcf	12,3	;volatile
 18663  019E                     i1l7205:	
 18664                           
 18665                           ;Dimmer_B1.c: 171: }
 18666                           ;Dimmer_B1.c: 174: if (lights == 2) {
 18667  019E  0874               	movf	setDimmerLights_IntrControl@lights,w
 18668  019F  3A02               	xorlw	2
 18669  01A0  1D03               	skipz
 18670  01A1  29A4               	goto	i1l7209
 18671                           
 18672                           ;Dimmer_B1.c: 175: RC7 = 0;
 18673  01A2  0020               	movlb	0	; select bank0
 18674  01A3  138E               	bcf	14,7	;volatile
 18675  01A4                     i1l7209:	
 18676                           
 18677                           ;Dimmer_B1.c: 176: }
 18678                           ;Dimmer_B1.c: 183: }
 18679                           ;Dimmer_B1.c: 184: }
 18680                           ;Dimmer_B1.c: 185: }
 18681                           ;Dimmer_B1.c: 186: }
 18682                           ;Dimmer_B1.c: 187: }
 18683                           ;Dimmer_B1.c: 188: }
 18684                           ;Dimmer_B1.c: 189: }
 18685                           ;Dimmer_B1.c: 190: if (DimmerLightsIntr->Triac == 1) {
 18686  01A4  0878               	movf	_DimmerLightsIntr,w
 18687  01A5  3E08               	addlw	8
 18688  01A6  0086               	movwf	6
 18689  01A7  3001               	movlw	1	; select bank2/3
 18690  01A8  0087               	movwf	7
 18691  01A9  1E81               	btfss	1,5
 18692  01AA  29D5               	goto	i1l7227
 18693                           
 18694                           ;Dimmer_B1.c: 191: DimmerLightsIntr->TriacTime++;
 18695  01AB  3001               	movlw	1
 18696  01AC  00F2               	movwf	??_setDimmerLights_IntrControl
 18697  01AD  0878               	movf	_DimmerLightsIntr,w
 18698  01AE  3E07               	addlw	7
 18699  01AF  0086               	movwf	6
 18700  01B0  3001               	movlw	1	; select bank2/3
 18701  01B1  0087               	movwf	7
 18702  01B2  0872               	movf	??_setDimmerLights_IntrControl,w
 18703  01B3  0781               	addwf	1,f
 18704                           
 18705                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->TriacTime >= 5) {
 18706  01B4  0878               	movf	_DimmerLightsIntr,w
 18707  01B5  3E07               	addlw	7
 18708  01B6  0086               	movwf	6
 18709  01B7  3001               	movlw	1	; select bank2/3
 18710  01B8  0087               	movwf	7
 18711  01B9  3005               	movlw	5
 18712  01BA  0201               	subwf	1,w
 18713  01BB  1C03               	skipc
 18714  01BC  29D5               	goto	i1l7227
 18715                           
 18716                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime = 0;
 18717  01BD  0878               	movf	_DimmerLightsIntr,w
 18718  01BE  3E07               	addlw	7
 18719  01BF  0086               	movwf	6
 18720  01C0  3001               	movlw	1	; select bank2/3
 18721  01C1  0087               	movwf	7
 18722  01C2  0181               	clrf	1
 18723                           
 18724                           ;Dimmer_B1.c: 194: DimmerLightsIntr->Triac = 0;
 18725  01C3  0878               	movf	_DimmerLightsIntr,w
 18726  01C4  3E08               	addlw	8
 18727  01C5  0086               	movwf	6
 18728  01C6  3001               	movlw	1	; select bank2/3
 18729  01C7  0087               	movwf	7
 18730  01C8  1281               	bcf	1,5
 18731                           
 18732                           ;Dimmer_B1.c: 197: if (lights == 1) {
 18733  01C9  0874               	movf	setDimmerLights_IntrControl@lights,w
 18734  01CA  3A01               	xorlw	1
 18735  01CB  1D03               	skipz
 18736  01CC  29CF               	goto	i1l7223
 18737                           
 18738                           ;Dimmer_B1.c: 198: RA7 = 0;
 18739  01CD  0020               	movlb	0	; select bank0
 18740  01CE  138C               	bcf	12,7	;volatile
 18741  01CF                     i1l7223:	
 18742                           ;Dimmer_B1.c: 199: ;;
 18743                           
 18744                           
 18745                           ;Dimmer_B1.c: 200: }
 18746                           ;Dimmer_B1.c: 203: if (lights == 2) {
 18747  01CF  0874               	movf	setDimmerLights_IntrControl@lights,w
 18748  01D0  3A02               	xorlw	2
 18749  01D1  1D03               	skipz
 18750  01D2  29D5               	goto	i1l7227
 18751                           
 18752                           ;Dimmer_B1.c: 204: RB4 = 0;
 18753  01D3  0020               	movlb	0	; select bank0
 18754  01D4  120D               	bcf	13,4	;volatile
 18755  01D5                     i1l7227:	
 18756                           
 18757                           ;Dimmer_B1.c: 205: }
 18758                           ;Dimmer_B1.c: 212: }
 18759                           ;Dimmer_B1.c: 213: }
 18760                           ;Dimmer_B1.c: 214: if (DimmerLightsIntr->TriacFlag == 1) {
 18761  01D5  0878               	movf	_DimmerLightsIntr,w
 18762  01D6  3E09               	addlw	9
 18763  01D7  0086               	movwf	6
 18764  01D8  3001               	movlw	1	; select bank2/3
 18765  01D9  0087               	movwf	7
 18766  01DA  1E81               	btfss	1,5
 18767  01DB  0008               	return
 18768                           
 18769                           ;Dimmer_B1.c: 215: DimmerLightsIntr->TriacCount++;
 18770  01DC  3001               	movlw	1
 18771  01DD  00F2               	movwf	??_setDimmerLights_IntrControl
 18772  01DE  0878               	movf	_DimmerLightsIntr,w
 18773  01DF  3E0A               	addlw	10
 18774  01E0  0086               	movwf	6
 18775  01E1  3001               	movlw	1	; select bank2/3
 18776  01E2  0087               	movwf	7
 18777  01E3  0872               	movf	??_setDimmerLights_IntrControl,w
 18778  01E4  0781               	addwf	1,f
 18779                           
 18780                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacCount == 60) {
 18781  01E5  0878               	movf	_DimmerLightsIntr,w
 18782  01E6  3E0A               	addlw	10
 18783  01E7  0086               	movwf	6
 18784  01E8  3001               	movlw	1	; select bank2/3
 18785  01E9  0087               	movwf	7
 18786  01EA  0801               	movf	1,w
 18787  01EB  3A3C               	xorlw	60
 18788  01EC  1D03               	skipz
 18789  01ED  0008               	return
 18790                           
 18791                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount = 0;
 18792  01EE  0878               	movf	_DimmerLightsIntr,w
 18793  01EF  3E0A               	addlw	10
 18794  01F0  0086               	movwf	6
 18795  01F1  3001               	movlw	1	; select bank2/3
 18796  01F2  0087               	movwf	7
 18797  01F3  0181               	clrf	1
 18798                           
 18799                           ;Dimmer_B1.c: 218: DimmerLightsIntr->TriacFlag = 0;
 18800  01F4  0878               	movf	_DimmerLightsIntr,w
 18801  01F5  3E09               	addlw	9
 18802  01F6  0086               	movwf	6
 18803  01F7  3001               	movlw	1	; select bank2/3
 18804  01F8  0087               	movwf	7
 18805  01F9  1281               	bcf	1,5
 18806  01FA  0008               	return
 18807  01FB                     __end_of_setDimmerLights_IntrControl:	
 18808                           
 18809                           	psect	text127
 18810  1C5C                     __ptext127:	
 18811 ;; *************** function _DimmerIntrPointSelect *****************
 18812 ;; Defined at:
 18813 ;;		line 72 in file "../src/Dimmer_B1.c"
 18814 ;; Parameters:    Size  Location     Type
 18815 ;;  lights          1    wreg     unsigned char 
 18816 ;; Auto vars:     Size  Location     Type
 18817 ;;  lights          1    1[COMMON] unsigned char 
 18818 ;; Return value:  Size  Location     Type
 18819 ;;		None               void
 18820 ;; Registers used:
 18821 ;;		wreg
 18822 ;; Tracked objects:
 18823 ;;		On entry : 0/0
 18824 ;;		On exit  : 0/0
 18825 ;;		Unchanged: 0/0
 18826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18828 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18830 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18831 ;;Total ram usage:        2 bytes
 18832 ;; Hardware stack levels used:    1
 18833 ;; This function calls:
 18834 ;;		Nothing
 18835 ;; This function is called by:
 18836 ;;		_setDimmerLights_IntrControl
 18837 ;; This function uses a non-reentrant model
 18838 ;;
 18839                           
 18840                           
 18841                           ;psect for function _DimmerIntrPointSelect
 18842  1C5C                     _DimmerIntrPointSelect:	
 18843                           
 18844                           ;incstack = 0
 18845                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18846                           ;DimmerIntrPointSelect@lights stored from wreg
 18847  1C5C  00F1               	movwf	DimmerIntrPointSelect@lights
 18848                           
 18849                           ;Dimmer_B1.c: 74: if (lights == 1) {
 18850  1C5D  0871               	movf	DimmerIntrPointSelect@lights,w
 18851  1C5E  3A01               	xorlw	1
 18852  1C5F  1D03               	skipz
 18853  1C60  2C65               	goto	i1l747
 18854                           
 18855                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 18856  1C61  30BE               	movlw	_DimmerLights1& (0+255)
 18857  1C62  00F0               	movwf	??_DimmerIntrPointSelect
 18858  1C63  0870               	movf	??_DimmerIntrPointSelect,w
 18859  1C64  00F8               	movwf	_DimmerLightsIntr
 18860  1C65                     i1l747:	
 18861                           
 18862                           ;Dimmer_B1.c: 76: }
 18863                           ;Dimmer_B1.c: 79: if (lights == 2) {
 18864  1C65  0871               	movf	DimmerIntrPointSelect@lights,w
 18865  1C66  3A02               	xorlw	2
 18866  1C67  1D03               	skipz
 18867  1C68  0008               	return
 18868                           
 18869                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 18870  1C69  30CD               	movlw	_DimmerLights2& (0+255)
 18871  1C6A  00F0               	movwf	??_DimmerIntrPointSelect
 18872  1C6B  0870               	movf	??_DimmerIntrPointSelect,w
 18873  1C6C  00F8               	movwf	_DimmerLightsIntr
 18874  1C6D  0008               	return
 18875  1C6E                     __end_of_DimmerIntrPointSelect:	
 18876                           
 18877                           	psect	text128
 18878  1BFB                     __ptext128:	
 18879 ;; *************** function _IOC_ISR *****************
 18880 ;; Defined at:
 18881 ;;		line 402 in file "../src/MCU_B1.c"
 18882 ;; Parameters:    Size  Location     Type
 18883 ;;		None
 18884 ;; Auto vars:     Size  Location     Type
 18885 ;;		None
 18886 ;; Return value:  Size  Location     Type
 18887 ;;		None               void
 18888 ;; Registers used:
 18889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18890 ;; Tracked objects:
 18891 ;;		On entry : 0/0
 18892 ;;		On exit  : 0/0
 18893 ;;		Unchanged: 0/0
 18894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18899 ;;Total ram usage:        0 bytes
 18900 ;; Hardware stack levels used:    1
 18901 ;; Hardware stack levels required when called:    3
 18902 ;; This function calls:
 18903 ;;		_setDimmerReClock
 18904 ;; This function is called by:
 18905 ;;		_ISR
 18906 ;; This function uses a non-reentrant model
 18907 ;;
 18908                           
 18909                           
 18910                           ;psect for function _IOC_ISR
 18911  1BFB                     _IOC_ISR:	
 18912                           
 18913                           ;MCU_B1.c: 403: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18914                           
 18915                           ;incstack = 0
 18916                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18917  1BFB  1D8B               	btfss	11,3	;volatile
 18918  1BFC  0008               	return
 18919  1BFD  1C0B               	btfss	11,0	;volatile
 18920  1BFE  0008               	return
 18921  1BFF  0027               	movlb	7	; select bank7
 18922  1C00  1D16               	btfss	22,2	;volatile
 18923  1C01  0008               	return
 18924                           
 18925                           ;MCU_B1.c: 404: IOCBF2 = 0;
 18926  1C02  1116               	bcf	22,2	;volatile
 18927                           
 18928                           ;MCU_B1.c: 405: IOCIF = 0;
 18929  1C03  100B               	bcf	11,0	;volatile
 18930                           
 18931                           ;MCU_B1.c: 406: if (myMain.PowerON == 1) {
 18932  1C04  0021               	movlb	1	; select bank1
 18933  1C05  1C20               	btfss	_myMain^(0+128),0
 18934  1C06  0008               	return
 18935                           
 18936                           ;MCU_B1.c: 408: setDimmerReClock();
 18937  1C07  319B  2339         	fcall	_setDimmerReClock
 18938  1C09  0008               	return
 18939  1C0A                     __end_of_IOC_ISR:	
 18940                           
 18941                           	psect	text129
 18942  1B39                     __ptext129:	
 18943 ;; *************** function _setDimmerReClock *****************
 18944 ;; Defined at:
 18945 ;;		line 244 in file "../src/MCU_B1.c"
 18946 ;; Parameters:    Size  Location     Type
 18947 ;;		None
 18948 ;; Auto vars:     Size  Location     Type
 18949 ;;		None
 18950 ;; Return value:  Size  Location     Type
 18951 ;;		None               void
 18952 ;; Registers used:
 18953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18954 ;; Tracked objects:
 18955 ;;		On entry : 0/0
 18956 ;;		On exit  : 0/0
 18957 ;;		Unchanged: 0/0
 18958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18963 ;;Total ram usage:        0 bytes
 18964 ;; Hardware stack levels used:    1
 18965 ;; Hardware stack levels required when called:    2
 18966 ;; This function calls:
 18967 ;;		_setDimmerLights_IntrIOC_GO
 18968 ;; This function is called by:
 18969 ;;		_IOC_ISR
 18970 ;; This function uses a non-reentrant model
 18971 ;;
 18972                           
 18973                           
 18974                           ;psect for function _setDimmerReClock
 18975  1B39                     _setDimmerReClock:	
 18976                           
 18977                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18978                           
 18979                           ;incstack = 0
 18980                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18981  1B39  3001               	movlw	1
 18982  1B3A  3190  20B3  319B   	fcall	_setDimmerLights_IntrIOC_GO
 18983                           
 18984                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 18985  1B3D  3002               	movlw	2
 18986  1B3E  3190  20B3         	fcall	_setDimmerLights_IntrIOC_GO
 18987  1B40  0008               	return
 18988  1B41                     __end_of_setDimmerReClock:	
 18989                           
 18990                           	psect	text130
 18991  10B3                     __ptext130:	
 18992 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18993 ;; Defined at:
 18994 ;;		line 28 in file "../src/Dimmer_B1.c"
 18995 ;; Parameters:    Size  Location     Type
 18996 ;;  lights          1    wreg     unsigned char 
 18997 ;; Auto vars:     Size  Location     Type
 18998 ;;  lights          1    2[COMMON] unsigned char 
 18999 ;; Return value:  Size  Location     Type
 19000 ;;		None               void
 19001 ;; Registers used:
 19002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19003 ;; Tracked objects:
 19004 ;;		On entry : 0/0
 19005 ;;		On exit  : 0/0
 19006 ;;		Unchanged: 0/0
 19007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19009 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19011 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19012 ;;Total ram usage:        1 bytes
 19013 ;; Hardware stack levels used:    1
 19014 ;; Hardware stack levels required when called:    1
 19015 ;; This function calls:
 19016 ;;		_DimmerIntrIOCPointSelect
 19017 ;; This function is called by:
 19018 ;;		_setDimmerReClock
 19019 ;; This function uses a non-reentrant model
 19020 ;;
 19021                           
 19022                           
 19023                           ;psect for function _setDimmerLights_IntrIOC_GO
 19024  10B3                     _setDimmerLights_IntrIOC_GO:	
 19025                           
 19026                           ;incstack = 0
 19027                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19028                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19029  10B3  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19030                           
 19031                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 19032  10B4  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19033  10B5  319D  2502  3190   	fcall	_DimmerIntrIOCPointSelect
 19034                           
 19035                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 19036  10B8  0021               	movlb	1	; select bank1
 19037  10B9  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19038  10BA  0086               	movwf	6
 19039  10BB  3001               	movlw	1	; select bank2/3
 19040  10BC  0087               	movwf	7
 19041  10BD  1801               	btfsc	1,0
 19042  10BE  0008               	return
 19043  10BF  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19044  10C0  3E09               	addlw	9
 19045  10C1  0086               	movwf	6
 19046  10C2  3001               	movlw	1	; select bank2/3
 19047  10C3  0087               	movwf	7
 19048  10C4  1A81               	btfsc	1,5
 19049  10C5  0008               	return
 19050                           
 19051                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 19052  10C6  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19053  10C7  0086               	movwf	6
 19054  10C8  3001               	movlw	1	; select bank2/3
 19055  10C9  0087               	movwf	7
 19056  10CA  1401               	bsf	1,0
 19057                           
 19058                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 19059  10CB  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19060  10CC  3E09               	addlw	9
 19061  10CD  0086               	movwf	6
 19062  10CE  3001               	movlw	1	; select bank2/3
 19063  10CF  0087               	movwf	7
 19064  10D0  1681               	bsf	1,5
 19065                           
 19066                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 19067  10D1  0020               	movlb	0	; select bank0
 19068  10D2  1D0D               	btfss	13,2	;volatile
 19069  10D3  28D8               	goto	i1l6725
 19070                           
 19071                           ;Dimmer_B1.c: 36: Dimmer.Correction = 1;
 19072  10D4  0021               	movlb	1	; select bank1
 19073  10D5  01CA               	clrf	(_Dimmer^(0+128)+2)
 19074  10D6  0ACA               	incf	(_Dimmer^(0+128)+2),f
 19075                           
 19076                           ;Dimmer_B1.c: 37: } else {
 19077  10D7  0008               	return
 19078  10D8                     i1l6725:	
 19079                           
 19080                           ;Dimmer_B1.c: 38: Dimmer.Correction = 0;
 19081  10D8  0021               	movlb	1	; select bank1
 19082  10D9  01CA               	clrf	(_Dimmer^(0+128)+2)
 19083  10DA  0008               	return
 19084  10DB                     __end_of_setDimmerLights_IntrIOC_GO:	
 19085                           
 19086                           	psect	text131
 19087  1D02                     __ptext131:	
 19088 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19089 ;; Defined at:
 19090 ;;		line 8 in file "../src/Dimmer_B1.c"
 19091 ;; Parameters:    Size  Location     Type
 19092 ;;  lights          1    wreg     unsigned char 
 19093 ;; Auto vars:     Size  Location     Type
 19094 ;;  lights          1    1[COMMON] unsigned char 
 19095 ;; Return value:  Size  Location     Type
 19096 ;;		None               void
 19097 ;; Registers used:
 19098 ;;		wreg
 19099 ;; Tracked objects:
 19100 ;;		On entry : 0/0
 19101 ;;		On exit  : 0/0
 19102 ;;		Unchanged: 0/0
 19103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19105 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19107 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19108 ;;Total ram usage:        2 bytes
 19109 ;; Hardware stack levels used:    1
 19110 ;; This function calls:
 19111 ;;		Nothing
 19112 ;; This function is called by:
 19113 ;;		_setDimmerLights_IntrIOC_GO
 19114 ;; This function uses a non-reentrant model
 19115 ;;
 19116                           
 19117                           
 19118                           ;psect for function _DimmerIntrIOCPointSelect
 19119  1D02                     _DimmerIntrIOCPointSelect:	
 19120                           
 19121                           ;incstack = 0
 19122                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19123                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19124  1D02  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19125                           
 19126                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19127  1D03  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19128  1D04  3A01               	xorlw	1
 19129  1D05  1D03               	skipz
 19130  1D06  2D0C               	goto	i1l736
 19131                           
 19132                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19133  1D07  30BE               	movlw	_DimmerLights1& (0+255)
 19134  1D08  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19135  1D09  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19136  1D0A  0021               	movlb	1	; select bank1
 19137  1D0B  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19138  1D0C                     i1l736:	
 19139                           
 19140                           ;Dimmer_B1.c: 12: }
 19141                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19142  1D0C  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19143  1D0D  3A02               	xorlw	2
 19144  1D0E  1D03               	skipz
 19145  1D0F  0008               	return
 19146                           
 19147                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19148  1D10  30CD               	movlw	_DimmerLights2& (0+255)
 19149  1D11  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19150  1D12  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19151  1D13  0021               	movlb	1	; select bank1
 19152  1D14  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19153  1D15  0008               	return
 19154  1D16                     __end_of_DimmerIntrIOCPointSelect:	
 19155  007E                     btemp	set	126	;btemp
 19156  007E                     pic14e$flags	set	126
 19157  007E                     wtemp	set	126
 19158  007E                     wtemp0	set	126
 19159  0080                     wtemp1	set	128
 19160  0082                     wtemp2	set	130
 19161  0084                     wtemp3	set	132
 19162  0086                     wtemp4	set	134
 19163  0088                     wtemp5	set	136
 19164  007F                     wtemp6	set	127
 19165  007E                     ttemp	set	126
 19166  007E                     ttemp0	set	126
 19167  0081                     ttemp1	set	129
 19168  0084                     ttemp2	set	132
 19169  0087                     ttemp3	set	135
 19170  007F                     ttemp4	set	127
 19171  007E                     ltemp	set	126
 19172  007E                     ltemp0	set	126
 19173  0082                     ltemp1	set	130
 19174  0086                     ltemp2	set	134
 19175  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         261
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     79      79
    BANK1            80      5      79
    BANK2            80      0      77
    BANK3            80      4      73
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK2[2]), DlySw1(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _main->_Switch_Main
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_getMain_All_Error_Status
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setRF_DimmerLights
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setRF_DimmerLights
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Switch_Main->_setMain_Exception

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  173021
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1705
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     669
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     238
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0     238
                                              7 BANK0      2     2      0
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   43466
                                             77 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   27047
                                             70 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     604
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0   16085
                                             75 BANK0      2     2      0
                                              0 BANK1      5     5      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0   12795
                                             70 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1078
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1078
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   59187
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   59187
                                             74 BANK0      4     4      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   57960
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1767
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   55921
                             _setBuz
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   36092
                                             70 BANK0      2     2      0
             _getDimmerLights_Status
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   18124
                                             68 BANK0      3     3      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   17842
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   17749
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   17656
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    4020
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4925
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1199
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      71
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0     114
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1202
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1202
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1739
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1442
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   10215
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1102
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   14563
                                             70 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   13957
                                             69 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   10294
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1    1741
                                              7 BANK0      3     2      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1047
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     297
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   34351
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   34351
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0   11996
                                             66 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1705
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                4     4      0   12318
                                             66 BANK0      4     4      0
            _DimmerLightsPointSelect
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    9693
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    8711
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     579
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    4368
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3665
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1679
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     264
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     198
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     198
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
           _setRF_DimmerLights
             _setPercentValue
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _setTxData
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      5      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      49      11       91.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     185      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     185      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Nov 13 09:15:14 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 1723                                       l98 1737  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1FB7  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 0079                     _getDimmerLights_Line 1CEF  
                 __end_of_setDelayOff_GO 08C4                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 1643  
                   _setDimmerLights_Line 1D7C                             ___ftadd@sign 0048  
                                    l110 14A5                                      l106 14AB  
                                    l107 14A7                                      l108 1495  
                                    l330 1DDF                                      l331 1DE1  
                   _setDimmerLights_SwOn 14B2                                      l255 0A85  
                                    l280 0C23                                      l281 0C6A  
                                    l374 106B                                      l801 1210  
                                    l582 0980                                      l860 0857  
                                    l790 1CC0                                      l898 1CF8  
                                    l899 1CFF                                      _GIE 005F  
                                    _CRC 00CB                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 00CF  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00BC                                      _ISR 0004  
                                    _WDT 0125             getDimmerLights_Status@lights 0022  
                                    _Sw1 0154                                      _Sw2 01DC  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1DEC  
                  _Buzzer_Initialization 1B01                          __end_of_ADC_Set 1B39  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023             getDimmerLights_Status@status 0023  
                        _setDimmerLights 0C70                   _setMain_Exception$3935 00EB  
                      ??_getSw_KeyStatus 0020                    _setDimmerLights_AdjRF 1F72  
                                   ?_ISR 0070          setDimmerLights_ErrorClose@count 0067  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1C0A  
                             Load_Main@i 002F                               Load_Main@j 002B  
                           ___ftdiv@sign 003D                                     l1600 11E4  
                                   l2232 0691                                     l1345 12B4  
                                   l2313 0B8A                                     l2241 0610  
                                   l2242 060C                                     l2234 05CE  
               ?_DimmerLightsPointSelect 0070                                     l2235 05D0  
                                   l1604 11E0                                     l2244 0649  
                                   l2236 05D8                                     l2325 1385  
                                   l2317 15BD                                     l1359 11AC  
                                   l1368 1544                                     l1730 0478  
                         _Load_Main$4316 002D                                     l1731 0476  
                                   l2283 0BA6                                     l1556 135E  
                        __end_of_IOC_Set 1BC8                                     l2293 0BF7  
                                   l1726 04A8                                     l2623 1D98  
                                   l1729 03A1                                     l2299 12EC  
                                   l2651 023A                                     l1599 11C9  
                                   l2639 1FC7                                     l2921 08F7  
                                   l2649 0361                                     l1881 0E9F  
                                   l2950 054D                                     l2927 090E  
                                   l9003 1E17                    _setDimmerLights_SwOff 0804  
                                   l9013 1FE5                                     l9015 1FE8  
                                   l9041 11CD                                     l9201 0A94  
                                   l9019 1FEE                                     l9203 0A98  
                                   l8411 04DD                                     l9109 1D89  
                                   l9061 0996                                     l9205 0A9B  
                                   l9133 0B1E                                     l8351 08DE  
                                   l9039 11C4                                     l9223 0BFE  
                                   l9231 0C0A                                     l8407 04D6  
                                   l9151 0B5F                                     l8361 0904  
                                   l8353 08E3                                     l8345 08CD  
                                   l8505 0F2A                                     l9313 117C  
                                   l9049 11DB                                     l9065 099C  
                                   l9241 0C20                                     l9225 0C01  
                                   l9209 0AA1                                     l8441 052C  
                                   l8417 04EC                                     l9153 0B63  
                                   l9161 0B6F                                     l8611 1D21  
                                   l8603 07EF                                     l9315 1160  
                                   l9091 09D0                                     l9075 09AC  
                                   l9083 09B8                                     l9243 0C1A  
                                   l9171 0A51                                     l8435 0519  
                                   l9155 0B67                                     l9147 0B4A  
                                   l8373 1C71                                     l8349 08D4  
                                   l9317 1181                                     l9069 09A2  
                                   l9229 0C07                                     l9173 0A54  
                                   l8453 055F                                     l8437 0523  
                                   l8429 0506                                     l8541 0FBC  
                                   l8525 0F79                                     l9157 0B6B  
                                   l9421 1757                                     l8359 08FC  
                                   l9095 09D6                                     l9079 09B2  
                                   l9271 0C6C                                     l9191 0A6C  
                                   l8447 053F                                     l8439 0528  
                                   l8519 0F63                                     l9423 1788  
                                   l9281 107C                                     l8377 1C77  
                                   l9257 0C35                                     l9177 0A5A  
                                   l8457 0571                                     l8449 0549  
                                   l8553 0FD8                                     l8537 0FB4  
                                   l9283 1087                                     l9291 1FA0  
                                   l9611 13C8                                     l8627 1156  
                                   l8395 1F39                                     l8483 0ED0  
                                   l9099 09DC                                     l9339 0CC4  
                                   l9347 1562                                     l9259 0C4E  
                                   l9195 0A8B                                     l9531 1C56  
                                   l8467 058C                                     l9419 1782  
                                   l9621 13D8                                     l9605 13BF  
                                   l8477 0EBA                                     l8741 0B0D  
                                   l8661 15FA                                     l9197 0A8E  
                                   l8549 0FD0                    _myMain_Initialization 1C0A  
                                   l9295 1FA6                                     l9615 13CF  
                                   l9607 13C2                                     l8903 1227  
                                   l9551 0BA9                                     l9367 1EBC  
                                   l9289 1F9D                                     l9617 13D2  
                                   l8761 08A1                                     l8497 0F11  
                                   l8569 078A                                     l9377 1EC8  
                                   l9369 1EBE                                     l8763 08AE  
                                   l8595 07D5                                     l8587 07BA  
                                   l8667 1605                                     l9563 0BC1  
                                   l9379 1ECC                                     l9395 1264  
                                   l8765 08B7                                     l8757 089B  
                                   l8597 07DE                                     l8589 07C8  
                                   l8693 163C                                     l8685 162B  
                                   l8677 160D                                     l9717 1667  
                                   l9573 0BE2                                     l9813 1EF9  
                                   l8599 07E1                                     l8679 1619  
                                   l9719 166D                                     l9487 1194  
                                   l9831 1505                                     l9751 1414  
                                   l8951 1E65                                     l9815 1EFC  
                                   l8689 1634                                     l8961 1F5C  
                                   l9729 1694                                     l8953 1E6B  
                                   _CFGS 0CAE                                     l8779 1C33  
                                   l8867 14F8                                     l9755 141B  
                                   l9579 0BED                                     l9819 1F01  
                                   l8893 084B                                     l8965 1F67  
                                   l9837 151A                                     l8981 15DD  
                                   l9589 1D35                                     l9925 0E1E  
                                   l9871 0A1A                             __CFG_WDTE$ON 0000  
                                   l8977 15C4                                     l9881 0A3A  
                                   l9865 0A0C                                     l9857 09F4  
                                   l9875 0A2A                                     l9883 0A43  
                                   l9859 0A01                                     l9955 0E6E  
                                   l8997 1E0E                                     l8989 1373  
                                   l9965 0E83                                     l8999 1E11  
                                   l9967 0E84                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     _PEIE 005E  
                                   u9015 0FBD                                     u9025 0FC3  
                                   u9125 07BB                                     u9215 1142  
                                   u9055 0FD9                                     u9305 1624  
                                   u9065 0FDF                                     u9155 07D6  
                                   u9315 162C                                     u8605 0915  
                                   u8535 08D9                                     u9095 0791  
                                   u8555 08F2                                     u9275 1610  
                                   u9380 0ABB                                     u8805 052D  
                                   u8575 08FF                                     u9295 161A  
                                   u9545 1D61                                     u8905 0EE2  
                                   u9385 0AB9                                     u8745 0507  
                                   u8915 0EF2                                     u8835 0540  
                                   u8925 0F12                                     u8935 0F21  
                                   u8775 051A                                     u8945 0F2B  
                                   _LWLO 0CAD                                     u8985 0F85  
                                   u8995 0F95                                     _RSSI 00D0  
                                   _WREN 0CAA                                     _Buz1 00B0  
                                   _Load 0127                                     _Temp 00D8  
                                   _main 169A                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0986                          __end_of_RF_Main 1B0A  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1BE0  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1B39                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 139A  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0075  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
                 _getDimmerLights_Status 1C19                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1BBC  
       setDimmerLights_ErrorClose@lights 0068            __end_of_DimmerIntrPointSelect 1C6E  
                  ?_getDimmerLights_Line 0070                                    l10005 05EF  
                                  l10041 0630                                    l10123 0268  
                                  l10107 0225                                    l10133 029A  
                                  l10039 062E                                    l10057 065E  
                                  l10147 02D8                                    l10245 1207  
                                  l10069 067F                                    l10093 1DA3  
                                  l10157 030A                                    l10413 1318  
                                  l10247 120A                                    l10183 035D  
                                  l10431 1348                                    l10249 1212  
                                  l10513 0434                                    l10521 0447  
                                  l10089 1D9D                                    l10531 045C  
                                  l10603 1FD0                                    l10371 0D11  
                                  l10197 147F                                    l10279 0707  
                                  l10519 0441                                    l10463 0390  
                                  l10383 0D3E                                    l10483 03BB  
                                  l10379 0D36                                    l10399 0D6B  
                                  l10671 16C9                    ?_setDimmerLights_Main 0070  
                                  l10489 03E5                                    l10579 0496  
                                  l10667 16BE                    ?_setDimmerLights_Line 0070  
                        ?_setDelayOff_GO 002A                    ?_setDimmerLights_SwOn 0070  
                                  ?_main 01E5                          __end_of___awdiv 1643  
                        __end_of___ftadd 05A4                          __end_of___ftdiv 0F4C  
                                  u10125 1071                                    u11025 0E5F  
                                  u10165 1169                          __end_of___ftmul 1000  
                                  u10325 1760                                    u11045 0E74  
                                  u12105 044D                                    u12025 03E7  
                                  u11145 05E9                                    u12035 03EC  
                        ___awdiv@divisor 0020                                    u12045 03FA  
                                  _T1CON 0018                                    u11275 066F  
                        __end_of___fttol 07F8                                    u11545 1475  
                                  u11705 12AB                                    u11815 0D58  
                                  u11765 0D24                                    u11855 130F  
                                  u11865 131E                                    u11885 1338  
                                  _IOCBF 0396                                    u11895 1356  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l736 1D0C                                    i1l747 1C65  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 00EA                  __end_of_Timeout_Counter 1D67  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 10DB  
             _setDimmerLights_IntrIOC_GO 10B3                         __end_of_TMR1_ISR 1104  
           __size_of_CC2500_WriteCommand 001A       __end_of_setDimmerLights_ErrorClose 17A5  
             _setDimmerLights_ErrorClose 174B                         __end_of_TMR1_Set 1BD4  
                                  _getAD 1EEE                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1CB6              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03D0  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1DBC  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0012             __end_of_getMain_LightsStatus 1184  
          __end_of_setLED_Initialization 1C92                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0AB1  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 17A5                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                        ??_setPercentValue 0059  
                           __end_of_main 16F2                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 0804                       ??_setMemory_Modify 0020  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0CF0                     _setSw_Initialization 07F8  
                                 ??_main 006F                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0B1D  
                         _setMemory_Data 1B8C                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03D0                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1CC9                   ?_setDimmerLights_AdjRF 0070  
               __size_of_setRFSW_Control 0052                  ??_Switch_Initialization 0025  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
           setDimmerLights_AdjControl@sw 0028                        ??_getRF_KeyStatus 0020  
                 ?_setDimmerLights_SwOff 0070                              _DlyOff_Main 0925  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006E  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1F50                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0925                 _getMain_All_Error_Status 11B3  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1E72  
                                 i1l7205 019E                                   i1l7223 01CF  
                                 i1l7143 0099                                   i1l7209 01A4  
                                 i1l7227 01D5                                   i1l7171 0103  
                                 i1l7147 00A0                                   i1l7165 00EA  
                                 i1l7173 0109                                   i1l7183 013C  
                                 i1l7167 00F0                                   i1l7193 016B  
                                 i1l7195 0171                                   i1l7179 0125  
                                 i1l7187 0150                                   i1l6725 10D8  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                       __size_of_Load_Main 0144  
                                 u655_25 0074                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1DEC  
                                 u779_25 10FE                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1AFF  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1D7C  
                                 _Dimmer 00C8                                   _DlySw1 0169  
                                 _DlySw2 016B               __end_of_Mcu_Initialization 1CA4  
                    __end_of_Buzzer_Main 14B2                                   _Memory 0220  
                                 _Timer1 0120       __end_of_setDimmerLights_TriggerAdj 1EEE  
             _setDimmerLights_TriggerAdj 1ECE                                   ___bmul 1C6E  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                  setDimmerLights@lights 0029                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                   ??_setDimmerLights_Line 0020  
                                 _r_data 00D6                                   _s_data 00D7  
                 ??_setDimmerLights_SwOn 0062                                   _setLED 0986  
                                 _myMain 00A0                   __end_of_setMemory_Data 1B98  
                       _DimmerLightsIntr 0078                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0027                         ___awdiv@quotient 0027  
                                 _setBuz 16F2                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1B26         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 01FB  
            _setDimmerLights_IntrControl 0049                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1CEF  
            getMain_Lights_Count@status1 0022              getMain_Lights_Count@status2 0023  
            getMain_Lights_Count@status3 0021                    __end_of_SwPointSelect 1D3E  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0074  
                __size_of_LedPointSelect 0022                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 1D91  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1800  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0045  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                     _getRF_KeyStatus$5717 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1F0E                            __end_of_getAD 1F0E  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0051                       _LED_Initialization 1BA4  
                        _getSw_KeyStatus 1EAF                ??_setControl_Lights_Table 0068  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0027                     _getMain_Lights_Count 1DA6  
                              ?_WDT_Main 0070                        __end_of_Load_Main 04AE  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 1158  
             __end_of_set_TimeoutCleared 1B21                 __end_of_setDimmerReClock 1B41  
                     __size_of_getRxData 006F                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CC                           _DimmerLights22 00CD  
                   __size_of_setLED_Main 0044                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1B0A  
                     ??_CC2500_WriteByte 0020                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 1468                        ??_setRFSW_Control 0066  
                      __end_of_Temp_Main 1B10                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1B41                               __pnvCOMMON 007B  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 006D  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 0077  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 169A  
                    _CC2500_WriteCommand 1E05                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0075                            ?_setTemp_Main 0070  
                             _getLoad_AD 0CF0                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                             _getLoad_OK 1B51                       __size_of_setTxData 0099  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                  ?_getMain_Lights_Count 0070                                  _ADC_Set 1B32  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 12F0  
                             ??_WDT_Main 0020                    ?_getMain_LightsStatus 0070  
           __end_of_setRF_Initialization 1B80                       _setRFSW_AdjControl 1360  
                                _IOC_ISR 1BFB                                  _IOC_Set 1BBC  
                   __size_of_setLog_Code 0036                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1284                __size_of_getDimmer_LoadOK 0008  
                      _Flash_Memory_Read 1E1F              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 0076                   __size_of_CC2500_TxData 0068  
            ?_setDimmerLights_ErrorClose 0070                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 01A0                                  _RF_Main 1B07  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1BD4          __end_of_setControl_Lights_Table 0B8B  
                        setRF_Main@error 006D                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _setPercentValue 1422  
                ??_setLoad_AH_AL_Restore 0020                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1B8C                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1C4B                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0161  
                                _VarLED2 0165           __end_of_getDimmerLights_Status 1C29  
                      __end_of_getRxData 0BFA                  __end_of_getSw_KeyStatus 1ECE  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1D16  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1E90  
                   ??_setRFSW_AdjControl 0064                           ??_setTemp_Main 0027  
                        __size_of___bmul 0012                                  ___awdiv 15EF  
                                ___ftadd 04AE                                  ___ftdiv 0EA3  
                                ___ftmul 0F4C                                  ___fttol 0771  
                    __end_of_Switch_Main 1FDB                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 1C4B                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0061  
                   setRFSW_AdjControl@sw 0066                          __size_of_setBuz 0059  
                                __ptext1 1327                                  __ptext2 1C0A  
                                __ptext3 12F0                                  __ptext4 0CF0  
                                __ptext5 1EEE                                  __ptext6 1CA4  
                                __ptext7 0002                                  __ptext8 1B0D  
                                __ptext9 0E0A                  ??_setDimmerLights_AdjRF 005F  
              __size_of_CC2500_SIDLEMode 0004                    _DimmerIntrPointSelect 1C5C  
                           __size_of_ISR 000F               ??_getMain_All_Error_Status 0020  
              __end_of_Flash_Memory_Main 12BA                __end_of_Flash_Memory_Read 1E39  
                ??_setDimmerLights_SwOff 0062                               _setRF_Main 05A4  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1B49  
                      _DimmerLights_Main 11E6           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1B75               __end_of_CC2500_ClearRXFIFO 1B14  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1B18  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 007B  
                         _LedPointSelect 1F50                      _DelayOffPointSelect 1D16  
                         _getMain_LoadOK 1BED                                  clrloop0 1B2D  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1BED  
                   end_of_initialization 0045                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 1104                            _DelayTime_1us 1066  
                      __end_of_setTxData 0E0A               __end_of_Flash_Memory_Write 11B3  
                                init_ram 1B26                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0066                     Flash_Memory_Read@ret 0023  
                                initloop 1B27                               _setSw_Main 01FB  
                  CC2500_ReadByte@loop_b 0021                   setDimmerLights_SwOn@sw 0064  
                      _CC2500_ReadStatus 1FDB                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1C80                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 0BFA                            _CC2500_TxData 0A49  
                    ??_CC2500_InitSetREG 0025              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 14FE                              ?_getLoad_AD 0070  
                            ?_getLoad_OK 0070                   ??_getMain_Lights_Count 0020  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1B61  
                    ??_CC2500_ReadStatus 0022                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 0015                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 121A  
                     _Mcu_Initialization 1C92                 __size_of_CC2500_PowerRST 0044  
                   __end_of_my_MainTimer 1360                           ?_DelayOff_Main 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1F72  
                __end_of_setPercentValue 1468                   __end_of_getMain_LoadOK 1BFB  
               __size_of_CC2500_WriteREG 0023                __end_of_CC2500_InitSetREG 112E  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 154C                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 2000              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1E05                     _setRF_Initialization 1B75  
                     _setMemory_LoopSave 1CDC                              _Switch_Main 1FB7  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1CB6                  __end_of_getRF_KeyStatus 1C5C  
                      _setMain_Exception 09E7                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1D67  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1C80                 setMain_Exception@command 00EE  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1D02  
        _setDimmerLights_AdjControl$2589 0027                        getSw_KeyStatus@sw 0024  
                      __size_of_TMR1_ISR 0029            __size_of_getDimmerLights_Line 0013  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0057                           __end_of_setLED 09E7  
          __size_of_setDimmerLights_Line 0015            __size_of_setDimmerLights_SwOn 004C  
                         __end_of_setBuz 174B                      ??_setMain_Exception 006B  
                   _CC2500_FrequencyCabr 1B80               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 159D                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 121A                          ?_LedPointSelect 0070  
                              _Load_Main 036A                              __end_of_ISR 0013  
                        ?_getMain_LoadOK 0070                         _getDimmer_LoadOK 1B59  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1EAF          __size_of_setTemp_Initialization 0001  
                   ??_setMemory_LoopSave 0020                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0EA3  
                    __size_of_getLoad_AD 0081                             ?_Buzzer_Main 0070  
                    __size_of_getLoad_OK 0008                       _set_TimeoutCleared 1B1C  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 015D                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 0037  
                 ?_setLED_Initialization 0070                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                __end_of_setMain_Exception 0A49  
              __size_of_CC2500_WriteByte 0019                                _Temp_Main 1B0D  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D1                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00D4  
                            __pdataBANK4 0245                _getAll_DimmerLights_AdjGO 1C29  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0069  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 11E6  
                       _CC2500_SIDLEMode 1B18               __size_of_DimmerLights_Main 0034  
              __end_of_setRF_DimmerValue 124F                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070           _getAll_DimmerLights_AdjGO$2577 0022  
                            __pbssCOMMON 0076                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1CC9  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00EA                            __pcstackBANK3 01E5  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0080                            DlyOff_Main@sw 0068  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 0061               __size_of_CC2500_ReadStatus 0025  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01BE                            _DimmerLights2 01CD  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1E55  
                        ??_CC2500_TxData 0024                           getRxData@error 0069  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00F1  
                         Load_Main@adjgo 002C                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002E                   _setTemp_Initialization 1B00  
                              _getBuz_GO 1C3A      __end_of_Flash_Memory_Initialization 0771  
            _Flash_Memory_Initialization 0695                                 ?___awdiv 0020  
                              __ptext100 0863                                __ptext101 112E  
                              __ptext110 139A                                __ptext102 1C6E  
                              __ptext111 1104                                __ptext103 1C19  
                              __ptext120 1D52                                __ptext112 1E90  
                              __ptext104 1CB6                                __ptext121 1DD3  
                              __ptext113 1F94                                __ptext105 1B41  
                              __ptext130 10B3                                __ptext122 1468  
                              __ptext114 1B80                                __ptext106 1B6A  
                              __ptext131 1D02                                __ptext123 1B01  
                              __ptext115 1066                                __ptext107 1D16  
                              __ptext116 1B14                                __ptext108 1D67  
                              __ptext125 10DB                                __ptext117 1B10  
                              __ptext109 1B18                                 ?___ftadd 003E  
                              __ptext126 0049                                __ptext118 1E05  
                              __ptext127 1C5C                                __ptext119 1B1C  
                              __ptext128 1BFB                                __ptext129 1B39  
                              _getRxData 0B8B                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                  __size_of_my_MainTimer 0039                  __end_of_setRFSW_Control 15EF  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1B04  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0021  
                     __end_of_TouchPower 1DA6                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
          __end_of_setDimmerLights_AdjRF 1F94                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2509 0068                                _r_address 00D5  
         __size_of_setDimmerLights_SwOff 005F           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 0863             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1C19                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1D2A  
                    __end_of_setLED_Main 1422                      _DimmerLightsIntrIOC 00CE  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1B0D  
           setDimmerLights_SwOff@command 0064                        _CC2500_rfSettings 102F  
                               _LED_Main 1BB0                          SwPointSelect@sw 0021  
                              clear_ram0 1B2C                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 0062                             _my_MainTimer 1327  
                              _setTxData 0D71      __end_of_DimmerLights_Initialization 1DD3  
            _DimmerLights_Initialization 1DBC                       _CC2500_ClearRXFIFO 1B10  
                     _CC2500_ClearTXFIFO 1B14           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1D52                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003A  
                     _Flash_Memory_Write 1184                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 10DB  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1BC8  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0123  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1E1F  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1CA4  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0023  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 006B  
                  __size_of_setTemp_Main 0099                  __size_of_setDelayOff_GO 0061  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0076  
                           setSw_Main@sw 0068         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1BA4  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 12F0  
                  _DlyOff_Initialization 1B6A                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 0800  
                       __size_of_WDT_Set 000C                  setMain_Exception@status 00ED  
                     __end_of_getLoad_AD 0D71                       __end_of_getLoad_OK 1B59  
                  _Switch_Initialization 1BE0        __size_of_getMain_All_Error_Status 0033  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0028  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 1327                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1DD3                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 005E                                 _SwDetect 00D3  
                            ??_Temp_Main 0029                        setRFSW_Control@sw 0067  
          _getMain_All_Error_Status$3952 0021            _getMain_All_Error_Status$3961 0023  
               __end_of_getDimmer_LoadOK 1B61                      _Load_Initialization 1B21  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
    __size_of_setDimmerLights_AdjControl 0035                             _setTemp_Main 0E0A  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
               setDimmerLights_SwOn@idle 0063                                 ___awtoft 1F2E  
                       ??_LedPointSelect 0020                                 ___ftpack 08C4  
          __size_of_getMain_Lights_Count 0016                         ??_getMain_LoadOK 0021  
          __size_of_getMain_LightsStatus 002C                        getTemp_AD@channel 0025  
                           ??_setRF_Main 006A                     CC2500_WriteREG@value 0022  
                            _setLED_Main 13DE               __end_of_setRF_DimmerLights 0B1D  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
     __size_of_getAll_DimmerLights_AdjGO 0011                     ?_Load_Initialization 0070  
                               __ptext10 1B0A                                 __ptext11 1B00  
                               __ptext20 1CEF                                 __ptext12 1FB7  
                               __ptext21 1BE0                                 __ptext13 01FB  
                               __ptext30 159D                                 __ptext22 07F8  
                               __ptext14 1D3E                                 __ptext31 1360  
                               __ptext23 1D91                                 __ptext15 124F  
                               __ptext40 0A49                                 __ptext32 121A  
                               __ptext24 1B07                                 __ptext16 1EAF  
                               __ptext41 0BFA                                 __ptext33 1F72  
                               __ptext25 05A4                                 __ptext17 1D2A  
                               __ptext50 1BBC                                 __ptext42 1FDB  
                               __ptext34 17A5                                 __ptext26 0B8B  
                               __ptext18 09E7                                 __ptext51 0800  
                               __ptext43 1E55                                 __ptext35 0F4C  
                               __ptext27 12BA                                 __ptext19 174B  
                               __ptext60 13DE                                 __ptext52 1B32  
                               __ptext44 1B04                                 __ptext36 04AE  
                               __ptext28 1CDC                                 __ptext61 1BA4  
                               __ptext53 036A                                 __ptext45 1B75  
                               __ptext37 1CC9                                 __ptext29 0B1D  
                               __ptext70 1E1F                                 __ptext62 1C80  
                               __ptext54 1BED                                 __ptext46 1C92  
                               __ptext38 1C4B                                 __ptext71 11E6  
                               __ptext63 1284                                 __ptext55 1B59  
                               __ptext47 1BD4                                 __ptext39 1C3A  
                               __ptext80 1B51                                 __ptext72 1643  
                               __ptext64 14FE                                 __ptext56 1DA6  
                               __ptext48 1BC8                                 __ptext81 1DBC  
                               __ptext73 154C                                 __ptext65 1B98  
                               __ptext57 1B21                                 __ptext49 1DEC  
                               __ptext90 0804                                 __ptext82 108C  
                               __ptext74 0C70                                 __ptext66 0695  
                               __ptext58 1E39                                 __ptext91 0D71  
                               __ptext83 1AFF                                 __ptext75 0986  
                               __ptext67 1B8C                                 __ptext59 1BB0  
                               __ptext92 0AB1                                 __ptext84 1B49  
                               __ptext76 1F50                                 __ptext68 1184  
                               __ptext93 1422                                 __ptext85 0925  
                               __ptext77 1D7C                                 __ptext69 1B61  
                               __ptext94 0771                                 __ptext86 14B2  
                               __ptext78 11B3                                 __ptext95 0EA3  
                               __ptext87 16F2                                 __ptext79 1158  
                               __ptext96 1F2E                                 __ptext88 15EF  
                               __ptext97 08C4                                 __ptext89 1C29  
                               __ptext98 1ECE                                 __ptext99 1E72  
                               __product 0245            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001             __end_of_getDimmerLights_Line 1D02  
          __end_of_Dimmer_Initialization 1B00             __end_of_setDimmerLights_Main 169A  
           __end_of_setDimmerLights_Line 1D91                         Switch_Main@error 006E  
           __end_of_setDimmerLights_SwOn 14FE                   getDimmer_LoadOK@status 0020  
                           ??_setSw_Main 0066                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1D3E  
               __end_of_CC2500_SIDLEMode 1B1C               setDimmerLights_Main@lights 0065  
            __end_of_DelayOffPointSelect 1D2A               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 006C                __size_of_setDimmerReClock 0008  
         setDimmerLights_AdjControl@idle 0026                          _CC2500_ReadByte 1E55  
                     _CC2500_InitPATable 1E90                 __end_of_setMemory_Modify 1CDC  
          setDimmerLights_Trigger@lights 0024                       __end_of_setRF_Main 0695  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0069                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0068                             getLoad_OK@ok 0020  
       setDimmerLights_TriggerAdj@lights 0024                                 main@argc 01E5  
                               main@argv 01E7                     _getSw_KeyStatus$2573 0021  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$2574 0022  
                        _CC2500_PowerRST 139A                 __size_of_getSw_KeyStatus 001F  
            __end_of_Flash_Memory_Modify 154C                        ??_getPercentValue 0059  
                            _setLog_Code 12BA              __end_of_Flash_Memory_Unlock 1B6A  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1F94  
                     __end_of_setSw_Main 036A                    ??_Load_Initialization 0022  
                          _Transceive_OK 03D1                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 112E                              pic14e$flags 007E  
           ??_setDimmerLights_IntrIOC_GO 0072               setDimmerLights_Line@lights 0020  
           ??_setDimmerLights_ErrorClose 0066                  setDimmerLights_SwOff@sw 0065  
      __end_of_getAll_DimmerLights_AdjGO 1C3A              __size_of_setMemory_LoopSave 0013  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 10B3  __size_of_setDimmerLights_Initialization 0027  
         _setDimmerLights_Initialization 108C              __end_of_setDimmerLights_Adj 159D  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 1B04  
   __size_of_setDimmerLights_IntrControl 01B2                              getLoad_AD@i 0029  
                            getLoad_AD@j 0028                              getLoad_AD@k 0027  
                   _Flash_Memory_Erasing 1B98                       ?_RF_Initialization 0070  
                             _SPI0Buffer 00D2          __end_of_DelayOff_Initialization 1B49  
    __size_of_setDimmerLights_IntrIOC_GO 0028      __size_of_setDimmerLights_ErrorClose 005A  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1B51  
     __end_of_setDimmerLights_AdjControl 1284               _setDimmerLights_AdjControl 124F  
                    ??_RF_Initialization 0021                  __size_of_setMemory_Data 000C  
                         _setDelayOff_GO 0863         __size_of_setControl_Lights_Table 006E  
                 __end_of_DelayTimejudge 1158     __size_of_Flash_Memory_Initialization 00DC  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0066  
                  setMemory_Data@address 0022                    __end_of_DelayTime_1us 108C  
                __end_of_CC2500_ReadByte 1E72             __end_of_setSw_Initialization 0800  
                        _Timeout_Counter 1D52          __size_of_getDimmerLights_Status 0010  
                   getPercentValue@value 005B               __end_of_LED_Initialization 1BB0  
       __size_of_setDimmerLights_Trigger 001E           __end_of_setTemp_Initialization 1B01  
               __size_of_setPercentValue 0046                  setMemory_Modify@command 0021  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1B07  
                  __end_of_CC2500_RxData 0C70                    __end_of_CC2500_TxData 0AB1  
                  _setLoad_AH_AL_Restore 1E39                  __end_of_CC2500_PowerRST 13DE  
         getAll_DimmerLights_AdjGO@adjgo 0021  
