

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Oct 29 14:53:15 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	intentry,global,class=CODE,delta=2
   155                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text136,local,class=CODE,merge=1,delta=2
   158                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   163                           	dabs	1,0x7E,2
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  011D                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  018E                     	;# 
   216  0191                     	;# 
   217  0191                     	;# 
   218  0192                     	;# 
   219  0193                     	;# 
   220  0193                     	;# 
   221  0194                     	;# 
   222  0195                     	;# 
   223  0196                     	;# 
   224  0197                     	;# 
   225  0199                     	;# 
   226  019A                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019C                     	;# 
   232  019C                     	;# 
   233  019D                     	;# 
   234  019E                     	;# 
   235  019F                     	;# 
   236  020D                     	;# 
   237  0210                     	;# 
   238  0211                     	;# 
   239  0211                     	;# 
   240  0212                     	;# 
   241  0212                     	;# 
   242  0213                     	;# 
   243  0213                     	;# 
   244  0214                     	;# 
   245  0214                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0216                     	;# 
   250  0216                     	;# 
   251  0217                     	;# 
   252  0217                     	;# 
   253  0291                     	;# 
   254  0291                     	;# 
   255  0292                     	;# 
   256  0293                     	;# 
   257  0298                     	;# 
   258  0298                     	;# 
   259  0299                     	;# 
   260  029A                     	;# 
   261  0394                     	;# 
   262  0395                     	;# 
   263  0396                     	;# 
   264  0FE4                     	;# 
   265  0FE5                     	;# 
   266  0FE6                     	;# 
   267  0FE7                     	;# 
   268  0FE8                     	;# 
   269  0FE9                     	;# 
   270  0FEA                     	;# 
   271  0FEB                     	;# 
   272  0FED                     	;# 
   273  0FEE                     	;# 
   274  0FEF                     	;# 
   275  0000                     	;# 
   276  0001                     	;# 
   277  0002                     	;# 
   278  0003                     	;# 
   279  0004                     	;# 
   280  0005                     	;# 
   281  0006                     	;# 
   282  0007                     	;# 
   283  0008                     	;# 
   284  0009                     	;# 
   285  000A                     	;# 
   286  000B                     	;# 
   287  000C                     	;# 
   288  000D                     	;# 
   289  000E                     	;# 
   290  0010                     	;# 
   291  0011                     	;# 
   292  0012                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0016                     	;# 
   296  0017                     	;# 
   297  0018                     	;# 
   298  0019                     	;# 
   299  001A                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  008C                     	;# 
   303  008D                     	;# 
   304  008E                     	;# 
   305  0090                     	;# 
   306  0091                     	;# 
   307  0092                     	;# 
   308  0095                     	;# 
   309  0096                     	;# 
   310  0097                     	;# 
   311  0099                     	;# 
   312  009A                     	;# 
   313  009B                     	;# 
   314  009B                     	;# 
   315  009C                     	;# 
   316  009D                     	;# 
   317  009E                     	;# 
   318  010C                     	;# 
   319  010D                     	;# 
   320  010E                     	;# 
   321  0116                     	;# 
   322  0117                     	;# 
   323  011D                     	;# 
   324  018C                     	;# 
   325  018D                     	;# 
   326  018E                     	;# 
   327  0191                     	;# 
   328  0191                     	;# 
   329  0192                     	;# 
   330  0193                     	;# 
   331  0193                     	;# 
   332  0194                     	;# 
   333  0195                     	;# 
   334  0196                     	;# 
   335  0197                     	;# 
   336  0199                     	;# 
   337  019A                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019C                     	;# 
   343  019C                     	;# 
   344  019D                     	;# 
   345  019E                     	;# 
   346  019F                     	;# 
   347  020D                     	;# 
   348  0210                     	;# 
   349  0211                     	;# 
   350  0211                     	;# 
   351  0212                     	;# 
   352  0212                     	;# 
   353  0213                     	;# 
   354  0213                     	;# 
   355  0214                     	;# 
   356  0214                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0216                     	;# 
   361  0216                     	;# 
   362  0217                     	;# 
   363  0217                     	;# 
   364  0291                     	;# 
   365  0291                     	;# 
   366  0292                     	;# 
   367  0293                     	;# 
   368  0298                     	;# 
   369  0298                     	;# 
   370  0299                     	;# 
   371  029A                     	;# 
   372  0394                     	;# 
   373  0395                     	;# 
   374  0396                     	;# 
   375  0FE4                     	;# 
   376  0FE5                     	;# 
   377  0FE6                     	;# 
   378  0FE7                     	;# 
   379  0FE8                     	;# 
   380  0FE9                     	;# 
   381  0FEA                     	;# 
   382  0FEB                     	;# 
   383  0FED                     	;# 
   384  0FEE                     	;# 
   385  0FEF                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  0010                     	;# 
   402  0011                     	;# 
   403  0012                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  0090                     	;# 
   417  0091                     	;# 
   418  0092                     	;# 
   419  0095                     	;# 
   420  0096                     	;# 
   421  0097                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009B                     	;# 
   426  009C                     	;# 
   427  009D                     	;# 
   428  009E                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0116                     	;# 
   433  0117                     	;# 
   434  011D                     	;# 
   435  018C                     	;# 
   436  018D                     	;# 
   437  018E                     	;# 
   438  0191                     	;# 
   439  0191                     	;# 
   440  0192                     	;# 
   441  0193                     	;# 
   442  0193                     	;# 
   443  0194                     	;# 
   444  0195                     	;# 
   445  0196                     	;# 
   446  0197                     	;# 
   447  0199                     	;# 
   448  019A                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019C                     	;# 
   454  019C                     	;# 
   455  019D                     	;# 
   456  019E                     	;# 
   457  019F                     	;# 
   458  020D                     	;# 
   459  0210                     	;# 
   460  0211                     	;# 
   461  0211                     	;# 
   462  0212                     	;# 
   463  0212                     	;# 
   464  0213                     	;# 
   465  0213                     	;# 
   466  0214                     	;# 
   467  0214                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0216                     	;# 
   472  0216                     	;# 
   473  0217                     	;# 
   474  0217                     	;# 
   475  0291                     	;# 
   476  0291                     	;# 
   477  0292                     	;# 
   478  0293                     	;# 
   479  0298                     	;# 
   480  0298                     	;# 
   481  0299                     	;# 
   482  029A                     	;# 
   483  0394                     	;# 
   484  0395                     	;# 
   485  0396                     	;# 
   486  0FE4                     	;# 
   487  0FE5                     	;# 
   488  0FE6                     	;# 
   489  0FE7                     	;# 
   490  0FE8                     	;# 
   491  0FE9                     	;# 
   492  0FEA                     	;# 
   493  0FEB                     	;# 
   494  0FED                     	;# 
   495  0FEE                     	;# 
   496  0FEF                     	;# 
   497  0000                     	;# 
   498  0001                     	;# 
   499  0002                     	;# 
   500  0003                     	;# 
   501  0004                     	;# 
   502  0005                     	;# 
   503  0006                     	;# 
   504  0007                     	;# 
   505  0008                     	;# 
   506  0009                     	;# 
   507  000A                     	;# 
   508  000B                     	;# 
   509  000C                     	;# 
   510  000D                     	;# 
   511  000E                     	;# 
   512  0010                     	;# 
   513  0011                     	;# 
   514  0012                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  008C                     	;# 
   525  008D                     	;# 
   526  008E                     	;# 
   527  0090                     	;# 
   528  0091                     	;# 
   529  0092                     	;# 
   530  0095                     	;# 
   531  0096                     	;# 
   532  0097                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  010C                     	;# 
   541  010D                     	;# 
   542  010E                     	;# 
   543  0116                     	;# 
   544  0117                     	;# 
   545  011D                     	;# 
   546  018C                     	;# 
   547  018D                     	;# 
   548  018E                     	;# 
   549  0191                     	;# 
   550  0191                     	;# 
   551  0192                     	;# 
   552  0193                     	;# 
   553  0193                     	;# 
   554  0194                     	;# 
   555  0195                     	;# 
   556  0196                     	;# 
   557  0197                     	;# 
   558  0199                     	;# 
   559  019A                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019C                     	;# 
   565  019C                     	;# 
   566  019D                     	;# 
   567  019E                     	;# 
   568  019F                     	;# 
   569  020D                     	;# 
   570  0210                     	;# 
   571  0211                     	;# 
   572  0211                     	;# 
   573  0212                     	;# 
   574  0212                     	;# 
   575  0213                     	;# 
   576  0213                     	;# 
   577  0214                     	;# 
   578  0214                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0216                     	;# 
   583  0216                     	;# 
   584  0217                     	;# 
   585  0217                     	;# 
   586  0291                     	;# 
   587  0291                     	;# 
   588  0292                     	;# 
   589  0293                     	;# 
   590  0298                     	;# 
   591  0298                     	;# 
   592  0299                     	;# 
   593  029A                     	;# 
   594  0394                     	;# 
   595  0395                     	;# 
   596  0396                     	;# 
   597  0FE4                     	;# 
   598  0FE5                     	;# 
   599  0FE6                     	;# 
   600  0FE7                     	;# 
   601  0FE8                     	;# 
   602  0FE9                     	;# 
   603  0FEA                     	;# 
   604  0FEB                     	;# 
   605  0FED                     	;# 
   606  0FEE                     	;# 
   607  0FEF                     	;# 
   608  0000                     	;# 
   609  0001                     	;# 
   610  0002                     	;# 
   611  0003                     	;# 
   612  0004                     	;# 
   613  0005                     	;# 
   614  0006                     	;# 
   615  0007                     	;# 
   616  0008                     	;# 
   617  0009                     	;# 
   618  000A                     	;# 
   619  000B                     	;# 
   620  000C                     	;# 
   621  000D                     	;# 
   622  000E                     	;# 
   623  0010                     	;# 
   624  0011                     	;# 
   625  0012                     	;# 
   626  0015                     	;# 
   627  0016                     	;# 
   628  0016                     	;# 
   629  0017                     	;# 
   630  0018                     	;# 
   631  0019                     	;# 
   632  001A                     	;# 
   633  001B                     	;# 
   634  001C                     	;# 
   635  008C                     	;# 
   636  008D                     	;# 
   637  008E                     	;# 
   638  0090                     	;# 
   639  0091                     	;# 
   640  0092                     	;# 
   641  0095                     	;# 
   642  0096                     	;# 
   643  0097                     	;# 
   644  0099                     	;# 
   645  009A                     	;# 
   646  009B                     	;# 
   647  009B                     	;# 
   648  009C                     	;# 
   649  009D                     	;# 
   650  009E                     	;# 
   651  010C                     	;# 
   652  010D                     	;# 
   653  010E                     	;# 
   654  0116                     	;# 
   655  0117                     	;# 
   656  011D                     	;# 
   657  018C                     	;# 
   658  018D                     	;# 
   659  018E                     	;# 
   660  0191                     	;# 
   661  0191                     	;# 
   662  0192                     	;# 
   663  0193                     	;# 
   664  0193                     	;# 
   665  0194                     	;# 
   666  0195                     	;# 
   667  0196                     	;# 
   668  0197                     	;# 
   669  0199                     	;# 
   670  019A                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019C                     	;# 
   676  019C                     	;# 
   677  019D                     	;# 
   678  019E                     	;# 
   679  019F                     	;# 
   680  020D                     	;# 
   681  0210                     	;# 
   682  0211                     	;# 
   683  0211                     	;# 
   684  0212                     	;# 
   685  0212                     	;# 
   686  0213                     	;# 
   687  0213                     	;# 
   688  0214                     	;# 
   689  0214                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0216                     	;# 
   694  0216                     	;# 
   695  0217                     	;# 
   696  0217                     	;# 
   697  0291                     	;# 
   698  0291                     	;# 
   699  0292                     	;# 
   700  0293                     	;# 
   701  0298                     	;# 
   702  0298                     	;# 
   703  0299                     	;# 
   704  029A                     	;# 
   705  0394                     	;# 
   706  0395                     	;# 
   707  0396                     	;# 
   708  0FE4                     	;# 
   709  0FE5                     	;# 
   710  0FE6                     	;# 
   711  0FE7                     	;# 
   712  0FE8                     	;# 
   713  0FE9                     	;# 
   714  0FEA                     	;# 
   715  0FEB                     	;# 
   716  0FED                     	;# 
   717  0FEE                     	;# 
   718  0FEF                     	;# 
   719  0000                     	;# 
   720  0001                     	;# 
   721  0002                     	;# 
   722  0003                     	;# 
   723  0004                     	;# 
   724  0005                     	;# 
   725  0006                     	;# 
   726  0007                     	;# 
   727  0008                     	;# 
   728  0009                     	;# 
   729  000A                     	;# 
   730  000B                     	;# 
   731  000C                     	;# 
   732  000D                     	;# 
   733  000E                     	;# 
   734  0010                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0015                     	;# 
   738  0016                     	;# 
   739  0016                     	;# 
   740  0017                     	;# 
   741  0018                     	;# 
   742  0019                     	;# 
   743  001A                     	;# 
   744  001B                     	;# 
   745  001C                     	;# 
   746  008C                     	;# 
   747  008D                     	;# 
   748  008E                     	;# 
   749  0090                     	;# 
   750  0091                     	;# 
   751  0092                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0097                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010E                     	;# 
   765  0116                     	;# 
   766  0117                     	;# 
   767  011D                     	;# 
   768  018C                     	;# 
   769  018D                     	;# 
   770  018E                     	;# 
   771  0191                     	;# 
   772  0191                     	;# 
   773  0192                     	;# 
   774  0193                     	;# 
   775  0193                     	;# 
   776  0194                     	;# 
   777  0195                     	;# 
   778  0196                     	;# 
   779  0197                     	;# 
   780  0199                     	;# 
   781  019A                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019C                     	;# 
   787  019C                     	;# 
   788  019D                     	;# 
   789  019E                     	;# 
   790  019F                     	;# 
   791  020D                     	;# 
   792  0210                     	;# 
   793  0211                     	;# 
   794  0211                     	;# 
   795  0212                     	;# 
   796  0212                     	;# 
   797  0213                     	;# 
   798  0213                     	;# 
   799  0214                     	;# 
   800  0214                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0216                     	;# 
   805  0216                     	;# 
   806  0217                     	;# 
   807  0217                     	;# 
   808  0291                     	;# 
   809  0291                     	;# 
   810  0292                     	;# 
   811  0293                     	;# 
   812  0298                     	;# 
   813  0298                     	;# 
   814  0299                     	;# 
   815  029A                     	;# 
   816  0394                     	;# 
   817  0395                     	;# 
   818  0396                     	;# 
   819  0FE4                     	;# 
   820  0FE5                     	;# 
   821  0FE6                     	;# 
   822  0FE7                     	;# 
   823  0FE8                     	;# 
   824  0FE9                     	;# 
   825  0FEA                     	;# 
   826  0FEB                     	;# 
   827  0FED                     	;# 
   828  0FEE                     	;# 
   829  0FEF                     	;# 
   830  0000                     	;# 
   831  0001                     	;# 
   832  0002                     	;# 
   833  0003                     	;# 
   834  0004                     	;# 
   835  0005                     	;# 
   836  0006                     	;# 
   837  0007                     	;# 
   838  0008                     	;# 
   839  0009                     	;# 
   840  000A                     	;# 
   841  000B                     	;# 
   842  000C                     	;# 
   843  000D                     	;# 
   844  000E                     	;# 
   845  0010                     	;# 
   846  0011                     	;# 
   847  0012                     	;# 
   848  0015                     	;# 
   849  0016                     	;# 
   850  0016                     	;# 
   851  0017                     	;# 
   852  0018                     	;# 
   853  0019                     	;# 
   854  001A                     	;# 
   855  001B                     	;# 
   856  001C                     	;# 
   857  008C                     	;# 
   858  008D                     	;# 
   859  008E                     	;# 
   860  0090                     	;# 
   861  0091                     	;# 
   862  0092                     	;# 
   863  0095                     	;# 
   864  0096                     	;# 
   865  0097                     	;# 
   866  0099                     	;# 
   867  009A                     	;# 
   868  009B                     	;# 
   869  009B                     	;# 
   870  009C                     	;# 
   871  009D                     	;# 
   872  009E                     	;# 
   873  010C                     	;# 
   874  010D                     	;# 
   875  010E                     	;# 
   876  0116                     	;# 
   877  0117                     	;# 
   878  011D                     	;# 
   879  018C                     	;# 
   880  018D                     	;# 
   881  018E                     	;# 
   882  0191                     	;# 
   883  0191                     	;# 
   884  0192                     	;# 
   885  0193                     	;# 
   886  0193                     	;# 
   887  0194                     	;# 
   888  0195                     	;# 
   889  0196                     	;# 
   890  0197                     	;# 
   891  0199                     	;# 
   892  019A                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019C                     	;# 
   898  019C                     	;# 
   899  019D                     	;# 
   900  019E                     	;# 
   901  019F                     	;# 
   902  020D                     	;# 
   903  0210                     	;# 
   904  0211                     	;# 
   905  0211                     	;# 
   906  0212                     	;# 
   907  0212                     	;# 
   908  0213                     	;# 
   909  0213                     	;# 
   910  0214                     	;# 
   911  0214                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0216                     	;# 
   916  0216                     	;# 
   917  0217                     	;# 
   918  0217                     	;# 
   919  0291                     	;# 
   920  0291                     	;# 
   921  0292                     	;# 
   922  0293                     	;# 
   923  0298                     	;# 
   924  0298                     	;# 
   925  0299                     	;# 
   926  029A                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0FE4                     	;# 
   931  0FE5                     	;# 
   932  0FE6                     	;# 
   933  0FE7                     	;# 
   934  0FE8                     	;# 
   935  0FE9                     	;# 
   936  0FEA                     	;# 
   937  0FEB                     	;# 
   938  0FED                     	;# 
   939  0FEE                     	;# 
   940  0FEF                     	;# 
   941  0000                     	;# 
   942  0001                     	;# 
   943  0002                     	;# 
   944  0003                     	;# 
   945  0004                     	;# 
   946  0005                     	;# 
   947  0006                     	;# 
   948  0007                     	;# 
   949  0008                     	;# 
   950  0009                     	;# 
   951  000A                     	;# 
   952  000B                     	;# 
   953  000C                     	;# 
   954  000D                     	;# 
   955  000E                     	;# 
   956  0010                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0015                     	;# 
   960  0016                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001C                     	;# 
   968  008C                     	;# 
   969  008D                     	;# 
   970  008E                     	;# 
   971  0090                     	;# 
   972  0091                     	;# 
   973  0092                     	;# 
   974  0095                     	;# 
   975  0096                     	;# 
   976  0097                     	;# 
   977  0099                     	;# 
   978  009A                     	;# 
   979  009B                     	;# 
   980  009B                     	;# 
   981  009C                     	;# 
   982  009D                     	;# 
   983  009E                     	;# 
   984  010C                     	;# 
   985  010D                     	;# 
   986  010E                     	;# 
   987  0116                     	;# 
   988  0117                     	;# 
   989  011D                     	;# 
   990  018C                     	;# 
   991  018D                     	;# 
   992  018E                     	;# 
   993  0191                     	;# 
   994  0191                     	;# 
   995  0192                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0197                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019C                     	;# 
  1009  019C                     	;# 
  1010  019D                     	;# 
  1011  019E                     	;# 
  1012  019F                     	;# 
  1013  020D                     	;# 
  1014  0210                     	;# 
  1015  0211                     	;# 
  1016  0211                     	;# 
  1017  0212                     	;# 
  1018  0212                     	;# 
  1019  0213                     	;# 
  1020  0213                     	;# 
  1021  0214                     	;# 
  1022  0214                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0216                     	;# 
  1027  0216                     	;# 
  1028  0217                     	;# 
  1029  0217                     	;# 
  1030  0291                     	;# 
  1031  0291                     	;# 
  1032  0292                     	;# 
  1033  0293                     	;# 
  1034  0298                     	;# 
  1035  0298                     	;# 
  1036  0299                     	;# 
  1037  029A                     	;# 
  1038  0394                     	;# 
  1039  0395                     	;# 
  1040  0396                     	;# 
  1041  0FE4                     	;# 
  1042  0FE5                     	;# 
  1043  0FE6                     	;# 
  1044  0FE7                     	;# 
  1045  0FE8                     	;# 
  1046  0FE9                     	;# 
  1047  0FEA                     	;# 
  1048  0FEB                     	;# 
  1049  0FED                     	;# 
  1050  0FEE                     	;# 
  1051  0FEF                     	;# 
  1052  0000                     	;# 
  1053  0001                     	;# 
  1054  0002                     	;# 
  1055  0003                     	;# 
  1056  0004                     	;# 
  1057  0005                     	;# 
  1058  0006                     	;# 
  1059  0007                     	;# 
  1060  0008                     	;# 
  1061  0009                     	;# 
  1062  000A                     	;# 
  1063  000B                     	;# 
  1064  000C                     	;# 
  1065  000D                     	;# 
  1066  000E                     	;# 
  1067  0010                     	;# 
  1068  0011                     	;# 
  1069  0012                     	;# 
  1070  0015                     	;# 
  1071  0016                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001C                     	;# 
  1079  008C                     	;# 
  1080  008D                     	;# 
  1081  008E                     	;# 
  1082  0090                     	;# 
  1083  0091                     	;# 
  1084  0092                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0097                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  010C                     	;# 
  1096  010D                     	;# 
  1097  010E                     	;# 
  1098  0116                     	;# 
  1099  0117                     	;# 
  1100  011D                     	;# 
  1101  018C                     	;# 
  1102  018D                     	;# 
  1103  018E                     	;# 
  1104  0191                     	;# 
  1105  0191                     	;# 
  1106  0192                     	;# 
  1107  0193                     	;# 
  1108  0193                     	;# 
  1109  0194                     	;# 
  1110  0195                     	;# 
  1111  0196                     	;# 
  1112  0197                     	;# 
  1113  0199                     	;# 
  1114  019A                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019C                     	;# 
  1120  019C                     	;# 
  1121  019D                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  020D                     	;# 
  1125  0210                     	;# 
  1126  0211                     	;# 
  1127  0211                     	;# 
  1128  0212                     	;# 
  1129  0212                     	;# 
  1130  0213                     	;# 
  1131  0213                     	;# 
  1132  0214                     	;# 
  1133  0214                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0216                     	;# 
  1138  0216                     	;# 
  1139  0217                     	;# 
  1140  0217                     	;# 
  1141  0291                     	;# 
  1142  0291                     	;# 
  1143  0292                     	;# 
  1144  0293                     	;# 
  1145  0298                     	;# 
  1146  0298                     	;# 
  1147  0299                     	;# 
  1148  029A                     	;# 
  1149  0394                     	;# 
  1150  0395                     	;# 
  1151  0396                     	;# 
  1152  0FE4                     	;# 
  1153  0FE5                     	;# 
  1154  0FE6                     	;# 
  1155  0FE7                     	;# 
  1156  0FE8                     	;# 
  1157  0FE9                     	;# 
  1158  0FEA                     	;# 
  1159  0FEB                     	;# 
  1160  0FED                     	;# 
  1161  0FEE                     	;# 
  1162  0FEF                     	;# 
  1163  0000                     	;# 
  1164  0001                     	;# 
  1165  0002                     	;# 
  1166  0003                     	;# 
  1167  0004                     	;# 
  1168  0005                     	;# 
  1169  0006                     	;# 
  1170  0007                     	;# 
  1171  0008                     	;# 
  1172  0009                     	;# 
  1173  000A                     	;# 
  1174  000B                     	;# 
  1175  000C                     	;# 
  1176  000D                     	;# 
  1177  000E                     	;# 
  1178  0010                     	;# 
  1179  0011                     	;# 
  1180  0012                     	;# 
  1181  0015                     	;# 
  1182  0016                     	;# 
  1183  0016                     	;# 
  1184  0017                     	;# 
  1185  0018                     	;# 
  1186  0019                     	;# 
  1187  001A                     	;# 
  1188  001B                     	;# 
  1189  001C                     	;# 
  1190  008C                     	;# 
  1191  008D                     	;# 
  1192  008E                     	;# 
  1193  0090                     	;# 
  1194  0091                     	;# 
  1195  0092                     	;# 
  1196  0095                     	;# 
  1197  0096                     	;# 
  1198  0097                     	;# 
  1199  0099                     	;# 
  1200  009A                     	;# 
  1201  009B                     	;# 
  1202  009B                     	;# 
  1203  009C                     	;# 
  1204  009D                     	;# 
  1205  009E                     	;# 
  1206  010C                     	;# 
  1207  010D                     	;# 
  1208  010E                     	;# 
  1209  0116                     	;# 
  1210  0117                     	;# 
  1211  011D                     	;# 
  1212  018C                     	;# 
  1213  018D                     	;# 
  1214  018E                     	;# 
  1215  0191                     	;# 
  1216  0191                     	;# 
  1217  0192                     	;# 
  1218  0193                     	;# 
  1219  0193                     	;# 
  1220  0194                     	;# 
  1221  0195                     	;# 
  1222  0196                     	;# 
  1223  0197                     	;# 
  1224  0199                     	;# 
  1225  019A                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019C                     	;# 
  1231  019C                     	;# 
  1232  019D                     	;# 
  1233  019E                     	;# 
  1234  019F                     	;# 
  1235  020D                     	;# 
  1236  0210                     	;# 
  1237  0211                     	;# 
  1238  0211                     	;# 
  1239  0212                     	;# 
  1240  0212                     	;# 
  1241  0213                     	;# 
  1242  0213                     	;# 
  1243  0214                     	;# 
  1244  0214                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0216                     	;# 
  1249  0216                     	;# 
  1250  0217                     	;# 
  1251  0217                     	;# 
  1252  0291                     	;# 
  1253  0291                     	;# 
  1254  0292                     	;# 
  1255  0293                     	;# 
  1256  0298                     	;# 
  1257  0298                     	;# 
  1258  0299                     	;# 
  1259  029A                     	;# 
  1260  0394                     	;# 
  1261  0395                     	;# 
  1262  0396                     	;# 
  1263  0FE4                     	;# 
  1264  0FE5                     	;# 
  1265  0FE6                     	;# 
  1266  0FE7                     	;# 
  1267  0FE8                     	;# 
  1268  0FE9                     	;# 
  1269  0FEA                     	;# 
  1270  0FEB                     	;# 
  1271  0FED                     	;# 
  1272  0FEE                     	;# 
  1273  0FEF                     	;# 
  1274  0000                     	;# 
  1275  0001                     	;# 
  1276  0002                     	;# 
  1277  0003                     	;# 
  1278  0004                     	;# 
  1279  0005                     	;# 
  1280  0006                     	;# 
  1281  0007                     	;# 
  1282  0008                     	;# 
  1283  0009                     	;# 
  1284  000A                     	;# 
  1285  000B                     	;# 
  1286  000C                     	;# 
  1287  000D                     	;# 
  1288  000E                     	;# 
  1289  0010                     	;# 
  1290  0011                     	;# 
  1291  0012                     	;# 
  1292  0015                     	;# 
  1293  0016                     	;# 
  1294  0016                     	;# 
  1295  0017                     	;# 
  1296  0018                     	;# 
  1297  0019                     	;# 
  1298  001A                     	;# 
  1299  001B                     	;# 
  1300  001C                     	;# 
  1301  008C                     	;# 
  1302  008D                     	;# 
  1303  008E                     	;# 
  1304  0090                     	;# 
  1305  0091                     	;# 
  1306  0092                     	;# 
  1307  0095                     	;# 
  1308  0096                     	;# 
  1309  0097                     	;# 
  1310  0099                     	;# 
  1311  009A                     	;# 
  1312  009B                     	;# 
  1313  009B                     	;# 
  1314  009C                     	;# 
  1315  009D                     	;# 
  1316  009E                     	;# 
  1317  010C                     	;# 
  1318  010D                     	;# 
  1319  010E                     	;# 
  1320  0116                     	;# 
  1321  0117                     	;# 
  1322  011D                     	;# 
  1323  018C                     	;# 
  1324  018D                     	;# 
  1325  018E                     	;# 
  1326  0191                     	;# 
  1327  0191                     	;# 
  1328  0192                     	;# 
  1329  0193                     	;# 
  1330  0193                     	;# 
  1331  0194                     	;# 
  1332  0195                     	;# 
  1333  0196                     	;# 
  1334  0197                     	;# 
  1335  0199                     	;# 
  1336  019A                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019C                     	;# 
  1342  019C                     	;# 
  1343  019D                     	;# 
  1344  019E                     	;# 
  1345  019F                     	;# 
  1346  020D                     	;# 
  1347  0210                     	;# 
  1348  0211                     	;# 
  1349  0211                     	;# 
  1350  0212                     	;# 
  1351  0212                     	;# 
  1352  0213                     	;# 
  1353  0213                     	;# 
  1354  0214                     	;# 
  1355  0214                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0216                     	;# 
  1360  0216                     	;# 
  1361  0217                     	;# 
  1362  0217                     	;# 
  1363  0291                     	;# 
  1364  0291                     	;# 
  1365  0292                     	;# 
  1366  0293                     	;# 
  1367  0298                     	;# 
  1368  0298                     	;# 
  1369  0299                     	;# 
  1370  029A                     	;# 
  1371  0394                     	;# 
  1372  0395                     	;# 
  1373  0396                     	;# 
  1374  0FE4                     	;# 
  1375  0FE5                     	;# 
  1376  0FE6                     	;# 
  1377  0FE7                     	;# 
  1378  0FE8                     	;# 
  1379  0FE9                     	;# 
  1380  0FEA                     	;# 
  1381  0FEB                     	;# 
  1382  0FED                     	;# 
  1383  0FEE                     	;# 
  1384  0FEF                     	;# 
  1385  0000                     	;# 
  1386  0001                     	;# 
  1387  0002                     	;# 
  1388  0003                     	;# 
  1389  0004                     	;# 
  1390  0005                     	;# 
  1391  0006                     	;# 
  1392  0007                     	;# 
  1393  0008                     	;# 
  1394  0009                     	;# 
  1395  000A                     	;# 
  1396  000B                     	;# 
  1397  000C                     	;# 
  1398  000D                     	;# 
  1399  000E                     	;# 
  1400  0010                     	;# 
  1401  0011                     	;# 
  1402  0012                     	;# 
  1403  0015                     	;# 
  1404  0016                     	;# 
  1405  0016                     	;# 
  1406  0017                     	;# 
  1407  0018                     	;# 
  1408  0019                     	;# 
  1409  001A                     	;# 
  1410  001B                     	;# 
  1411  001C                     	;# 
  1412  008C                     	;# 
  1413  008D                     	;# 
  1414  008E                     	;# 
  1415  0090                     	;# 
  1416  0091                     	;# 
  1417  0092                     	;# 
  1418  0095                     	;# 
  1419  0096                     	;# 
  1420  0097                     	;# 
  1421  0099                     	;# 
  1422  009A                     	;# 
  1423  009B                     	;# 
  1424  009B                     	;# 
  1425  009C                     	;# 
  1426  009D                     	;# 
  1427  009E                     	;# 
  1428  010C                     	;# 
  1429  010D                     	;# 
  1430  010E                     	;# 
  1431  0116                     	;# 
  1432  0117                     	;# 
  1433  011D                     	;# 
  1434  018C                     	;# 
  1435  018D                     	;# 
  1436  018E                     	;# 
  1437  0191                     	;# 
  1438  0191                     	;# 
  1439  0192                     	;# 
  1440  0193                     	;# 
  1441  0193                     	;# 
  1442  0194                     	;# 
  1443  0195                     	;# 
  1444  0196                     	;# 
  1445  0197                     	;# 
  1446  0199                     	;# 
  1447  019A                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019C                     	;# 
  1453  019C                     	;# 
  1454  019D                     	;# 
  1455  019E                     	;# 
  1456  019F                     	;# 
  1457  020D                     	;# 
  1458  0210                     	;# 
  1459  0211                     	;# 
  1460  0211                     	;# 
  1461  0212                     	;# 
  1462  0212                     	;# 
  1463  0213                     	;# 
  1464  0213                     	;# 
  1465  0214                     	;# 
  1466  0214                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0216                     	;# 
  1471  0216                     	;# 
  1472  0217                     	;# 
  1473  0217                     	;# 
  1474  0291                     	;# 
  1475  0291                     	;# 
  1476  0292                     	;# 
  1477  0293                     	;# 
  1478  0298                     	;# 
  1479  0298                     	;# 
  1480  0299                     	;# 
  1481  029A                     	;# 
  1482  0394                     	;# 
  1483  0395                     	;# 
  1484  0396                     	;# 
  1485  0FE4                     	;# 
  1486  0FE5                     	;# 
  1487  0FE6                     	;# 
  1488  0FE7                     	;# 
  1489  0FE8                     	;# 
  1490  0FE9                     	;# 
  1491  0FEA                     	;# 
  1492  0FEB                     	;# 
  1493  0FED                     	;# 
  1494  0FEE                     	;# 
  1495  0FEF                     	;# 
  1496  0000                     	;# 
  1497  0001                     	;# 
  1498  0002                     	;# 
  1499  0003                     	;# 
  1500  0004                     	;# 
  1501  0005                     	;# 
  1502  0006                     	;# 
  1503  0007                     	;# 
  1504  0008                     	;# 
  1505  0009                     	;# 
  1506  000A                     	;# 
  1507  000B                     	;# 
  1508  000C                     	;# 
  1509  000D                     	;# 
  1510  000E                     	;# 
  1511  0010                     	;# 
  1512  0011                     	;# 
  1513  0012                     	;# 
  1514  0015                     	;# 
  1515  0016                     	;# 
  1516  0016                     	;# 
  1517  0017                     	;# 
  1518  0018                     	;# 
  1519  0019                     	;# 
  1520  001A                     	;# 
  1521  001B                     	;# 
  1522  001C                     	;# 
  1523  008C                     	;# 
  1524  008D                     	;# 
  1525  008E                     	;# 
  1526  0090                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0095                     	;# 
  1530  0096                     	;# 
  1531  0097                     	;# 
  1532  0099                     	;# 
  1533  009A                     	;# 
  1534  009B                     	;# 
  1535  009B                     	;# 
  1536  009C                     	;# 
  1537  009D                     	;# 
  1538  009E                     	;# 
  1539  010C                     	;# 
  1540  010D                     	;# 
  1541  010E                     	;# 
  1542  0116                     	;# 
  1543  0117                     	;# 
  1544  011D                     	;# 
  1545  018C                     	;# 
  1546  018D                     	;# 
  1547  018E                     	;# 
  1548  0191                     	;# 
  1549  0191                     	;# 
  1550  0192                     	;# 
  1551  0193                     	;# 
  1552  0193                     	;# 
  1553  0194                     	;# 
  1554  0195                     	;# 
  1555  0196                     	;# 
  1556  0197                     	;# 
  1557  0199                     	;# 
  1558  019A                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  020D                     	;# 
  1569  0210                     	;# 
  1570  0211                     	;# 
  1571  0211                     	;# 
  1572  0212                     	;# 
  1573  0212                     	;# 
  1574  0213                     	;# 
  1575  0213                     	;# 
  1576  0214                     	;# 
  1577  0214                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0216                     	;# 
  1582  0216                     	;# 
  1583  0217                     	;# 
  1584  0217                     	;# 
  1585  0291                     	;# 
  1586  0291                     	;# 
  1587  0292                     	;# 
  1588  0293                     	;# 
  1589  0298                     	;# 
  1590  0298                     	;# 
  1591  0299                     	;# 
  1592  029A                     	;# 
  1593  0394                     	;# 
  1594  0395                     	;# 
  1595  0396                     	;# 
  1596  0FE4                     	;# 
  1597  0FE5                     	;# 
  1598  0FE6                     	;# 
  1599  0FE7                     	;# 
  1600  0FE8                     	;# 
  1601  0FE9                     	;# 
  1602  0FEA                     	;# 
  1603  0FEB                     	;# 
  1604  0FED                     	;# 
  1605  0FEE                     	;# 
  1606  0FEF                     	;# 
  1607  0000                     	;# 
  1608  0001                     	;# 
  1609  0002                     	;# 
  1610  0003                     	;# 
  1611  0004                     	;# 
  1612  0005                     	;# 
  1613  0006                     	;# 
  1614  0007                     	;# 
  1615  0008                     	;# 
  1616  0009                     	;# 
  1617  000A                     	;# 
  1618  000B                     	;# 
  1619  000C                     	;# 
  1620  000D                     	;# 
  1621  000E                     	;# 
  1622  0010                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0015                     	;# 
  1626  0016                     	;# 
  1627  0016                     	;# 
  1628  0017                     	;# 
  1629  0018                     	;# 
  1630  0019                     	;# 
  1631  001A                     	;# 
  1632  001B                     	;# 
  1633  001C                     	;# 
  1634  008C                     	;# 
  1635  008D                     	;# 
  1636  008E                     	;# 
  1637  0090                     	;# 
  1638  0091                     	;# 
  1639  0092                     	;# 
  1640  0095                     	;# 
  1641  0096                     	;# 
  1642  0097                     	;# 
  1643  0099                     	;# 
  1644  009A                     	;# 
  1645  009B                     	;# 
  1646  009B                     	;# 
  1647  009C                     	;# 
  1648  009D                     	;# 
  1649  009E                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  0116                     	;# 
  1654  0117                     	;# 
  1655  011D                     	;# 
  1656  018C                     	;# 
  1657  018D                     	;# 
  1658  018E                     	;# 
  1659  0191                     	;# 
  1660  0191                     	;# 
  1661  0192                     	;# 
  1662  0193                     	;# 
  1663  0193                     	;# 
  1664  0194                     	;# 
  1665  0195                     	;# 
  1666  0196                     	;# 
  1667  0197                     	;# 
  1668  0199                     	;# 
  1669  019A                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019C                     	;# 
  1675  019C                     	;# 
  1676  019D                     	;# 
  1677  019E                     	;# 
  1678  019F                     	;# 
  1679  020D                     	;# 
  1680  0210                     	;# 
  1681  0211                     	;# 
  1682  0211                     	;# 
  1683  0212                     	;# 
  1684  0212                     	;# 
  1685  0213                     	;# 
  1686  0213                     	;# 
  1687  0214                     	;# 
  1688  0214                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0216                     	;# 
  1693  0216                     	;# 
  1694  0217                     	;# 
  1695  0217                     	;# 
  1696  0291                     	;# 
  1697  0291                     	;# 
  1698  0292                     	;# 
  1699  0293                     	;# 
  1700  0298                     	;# 
  1701  0298                     	;# 
  1702  0299                     	;# 
  1703  029A                     	;# 
  1704  0394                     	;# 
  1705  0395                     	;# 
  1706  0396                     	;# 
  1707  0FE4                     	;# 
  1708  0FE5                     	;# 
  1709  0FE6                     	;# 
  1710  0FE7                     	;# 
  1711  0FE8                     	;# 
  1712  0FE9                     	;# 
  1713  0FEA                     	;# 
  1714  0FEB                     	;# 
  1715  0FED                     	;# 
  1716  0FEE                     	;# 
  1717  0FEF                     	;# 
  1718  0000                     	;# 
  1719  0001                     	;# 
  1720  0002                     	;# 
  1721  0003                     	;# 
  1722  0004                     	;# 
  1723  0005                     	;# 
  1724  0006                     	;# 
  1725  0007                     	;# 
  1726  0008                     	;# 
  1727  0009                     	;# 
  1728  000A                     	;# 
  1729  000B                     	;# 
  1730  000C                     	;# 
  1731  000D                     	;# 
  1732  000E                     	;# 
  1733  0010                     	;# 
  1734  0011                     	;# 
  1735  0012                     	;# 
  1736  0015                     	;# 
  1737  0016                     	;# 
  1738  0016                     	;# 
  1739  0017                     	;# 
  1740  0018                     	;# 
  1741  0019                     	;# 
  1742  001A                     	;# 
  1743  001B                     	;# 
  1744  001C                     	;# 
  1745  008C                     	;# 
  1746  008D                     	;# 
  1747  008E                     	;# 
  1748  0090                     	;# 
  1749  0091                     	;# 
  1750  0092                     	;# 
  1751  0095                     	;# 
  1752  0096                     	;# 
  1753  0097                     	;# 
  1754  0099                     	;# 
  1755  009A                     	;# 
  1756  009B                     	;# 
  1757  009B                     	;# 
  1758  009C                     	;# 
  1759  009D                     	;# 
  1760  009E                     	;# 
  1761  010C                     	;# 
  1762  010D                     	;# 
  1763  010E                     	;# 
  1764  0116                     	;# 
  1765  0117                     	;# 
  1766  011D                     	;# 
  1767  018C                     	;# 
  1768  018D                     	;# 
  1769  018E                     	;# 
  1770  0191                     	;# 
  1771  0191                     	;# 
  1772  0192                     	;# 
  1773  0193                     	;# 
  1774  0193                     	;# 
  1775  0194                     	;# 
  1776  0195                     	;# 
  1777  0196                     	;# 
  1778  0197                     	;# 
  1779  0199                     	;# 
  1780  019A                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019C                     	;# 
  1786  019C                     	;# 
  1787  019D                     	;# 
  1788  019E                     	;# 
  1789  019F                     	;# 
  1790  020D                     	;# 
  1791  0210                     	;# 
  1792  0211                     	;# 
  1793  0211                     	;# 
  1794  0212                     	;# 
  1795  0212                     	;# 
  1796  0213                     	;# 
  1797  0213                     	;# 
  1798  0214                     	;# 
  1799  0214                     	;# 
  1800  0215                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0216                     	;# 
  1804  0216                     	;# 
  1805  0217                     	;# 
  1806  0217                     	;# 
  1807  0291                     	;# 
  1808  0291                     	;# 
  1809  0292                     	;# 
  1810  0293                     	;# 
  1811  0298                     	;# 
  1812  0298                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  0394                     	;# 
  1816  0395                     	;# 
  1817  0396                     	;# 
  1818  0FE4                     	;# 
  1819  0FE5                     	;# 
  1820  0FE6                     	;# 
  1821  0FE7                     	;# 
  1822  0FE8                     	;# 
  1823  0FE9                     	;# 
  1824  0FEA                     	;# 
  1825  0FEB                     	;# 
  1826  0FED                     	;# 
  1827  0FEE                     	;# 
  1828  0FEF                     	;# 
  1829  0000                     	;# 
  1830  0001                     	;# 
  1831  0002                     	;# 
  1832  0003                     	;# 
  1833  0004                     	;# 
  1834  0005                     	;# 
  1835  0006                     	;# 
  1836  0007                     	;# 
  1837  0008                     	;# 
  1838  0009                     	;# 
  1839  000A                     	;# 
  1840  000B                     	;# 
  1841  000C                     	;# 
  1842  000D                     	;# 
  1843  000E                     	;# 
  1844  0010                     	;# 
  1845  0011                     	;# 
  1846  0012                     	;# 
  1847  0015                     	;# 
  1848  0016                     	;# 
  1849  0016                     	;# 
  1850  0017                     	;# 
  1851  0018                     	;# 
  1852  0019                     	;# 
  1853  001A                     	;# 
  1854  001B                     	;# 
  1855  001C                     	;# 
  1856  008C                     	;# 
  1857  008D                     	;# 
  1858  008E                     	;# 
  1859  0090                     	;# 
  1860  0091                     	;# 
  1861  0092                     	;# 
  1862  0095                     	;# 
  1863  0096                     	;# 
  1864  0097                     	;# 
  1865  0099                     	;# 
  1866  009A                     	;# 
  1867  009B                     	;# 
  1868  009B                     	;# 
  1869  009C                     	;# 
  1870  009D                     	;# 
  1871  009E                     	;# 
  1872  010C                     	;# 
  1873  010D                     	;# 
  1874  010E                     	;# 
  1875  0116                     	;# 
  1876  0117                     	;# 
  1877  011D                     	;# 
  1878  018C                     	;# 
  1879  018D                     	;# 
  1880  018E                     	;# 
  1881  0191                     	;# 
  1882  0191                     	;# 
  1883  0192                     	;# 
  1884  0193                     	;# 
  1885  0193                     	;# 
  1886  0194                     	;# 
  1887  0195                     	;# 
  1888  0196                     	;# 
  1889  0197                     	;# 
  1890  0199                     	;# 
  1891  019A                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019C                     	;# 
  1897  019C                     	;# 
  1898  019D                     	;# 
  1899  019E                     	;# 
  1900  019F                     	;# 
  1901  020D                     	;# 
  1902  0210                     	;# 
  1903  0211                     	;# 
  1904  0211                     	;# 
  1905  0212                     	;# 
  1906  0212                     	;# 
  1907  0213                     	;# 
  1908  0213                     	;# 
  1909  0214                     	;# 
  1910  0214                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0216                     	;# 
  1915  0216                     	;# 
  1916  0217                     	;# 
  1917  0217                     	;# 
  1918  0291                     	;# 
  1919  0291                     	;# 
  1920  0292                     	;# 
  1921  0293                     	;# 
  1922  0298                     	;# 
  1923  0298                     	;# 
  1924  0299                     	;# 
  1925  029A                     	;# 
  1926  0394                     	;# 
  1927  0395                     	;# 
  1928  0396                     	;# 
  1929  0FE4                     	;# 
  1930  0FE5                     	;# 
  1931  0FE6                     	;# 
  1932  0FE7                     	;# 
  1933  0FE8                     	;# 
  1934  0FE9                     	;# 
  1935  0FEA                     	;# 
  1936  0FEB                     	;# 
  1937  0FED                     	;# 
  1938  0FEE                     	;# 
  1939  0FEF                     	;# 
  1940  0000                     	;# 
  1941  0001                     	;# 
  1942  0002                     	;# 
  1943  0003                     	;# 
  1944  0004                     	;# 
  1945  0005                     	;# 
  1946  0006                     	;# 
  1947  0007                     	;# 
  1948  0008                     	;# 
  1949  0009                     	;# 
  1950  000A                     	;# 
  1951  000B                     	;# 
  1952  000C                     	;# 
  1953  000D                     	;# 
  1954  000E                     	;# 
  1955  0010                     	;# 
  1956  0011                     	;# 
  1957  0012                     	;# 
  1958  0015                     	;# 
  1959  0016                     	;# 
  1960  0016                     	;# 
  1961  0017                     	;# 
  1962  0018                     	;# 
  1963  0019                     	;# 
  1964  001A                     	;# 
  1965  001B                     	;# 
  1966  001C                     	;# 
  1967  008C                     	;# 
  1968  008D                     	;# 
  1969  008E                     	;# 
  1970  0090                     	;# 
  1971  0091                     	;# 
  1972  0092                     	;# 
  1973  0095                     	;# 
  1974  0096                     	;# 
  1975  0097                     	;# 
  1976  0099                     	;# 
  1977  009A                     	;# 
  1978  009B                     	;# 
  1979  009B                     	;# 
  1980  009C                     	;# 
  1981  009D                     	;# 
  1982  009E                     	;# 
  1983  010C                     	;# 
  1984  010D                     	;# 
  1985  010E                     	;# 
  1986  0116                     	;# 
  1987  0117                     	;# 
  1988  011D                     	;# 
  1989  018C                     	;# 
  1990  018D                     	;# 
  1991  018E                     	;# 
  1992  0191                     	;# 
  1993  0191                     	;# 
  1994  0192                     	;# 
  1995  0193                     	;# 
  1996  0193                     	;# 
  1997  0194                     	;# 
  1998  0195                     	;# 
  1999  0196                     	;# 
  2000  0197                     	;# 
  2001  0199                     	;# 
  2002  019A                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019C                     	;# 
  2008  019C                     	;# 
  2009  019D                     	;# 
  2010  019E                     	;# 
  2011  019F                     	;# 
  2012  020D                     	;# 
  2013  0210                     	;# 
  2014  0211                     	;# 
  2015  0211                     	;# 
  2016  0212                     	;# 
  2017  0212                     	;# 
  2018  0213                     	;# 
  2019  0213                     	;# 
  2020  0214                     	;# 
  2021  0214                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0216                     	;# 
  2026  0216                     	;# 
  2027  0217                     	;# 
  2028  0217                     	;# 
  2029  0291                     	;# 
  2030  0291                     	;# 
  2031  0292                     	;# 
  2032  0293                     	;# 
  2033  0298                     	;# 
  2034  0298                     	;# 
  2035  0299                     	;# 
  2036  029A                     	;# 
  2037  0394                     	;# 
  2038  0395                     	;# 
  2039  0396                     	;# 
  2040  0FE4                     	;# 
  2041  0FE5                     	;# 
  2042  0FE6                     	;# 
  2043  0FE7                     	;# 
  2044  0FE8                     	;# 
  2045  0FE9                     	;# 
  2046  0FEA                     	;# 
  2047  0FEB                     	;# 
  2048  0FED                     	;# 
  2049  0FEE                     	;# 
  2050  0FEF                     	;# 
  2051                           
  2052                           	psect	idataBANK4
  2053  1E68                     __pidataBANK4:	
  2054                           
  2055                           ;initializer for __product
  2056  1E68  3463               	retlw	99
  2057  1E69  3402               	retlw	2
  2058  1E6A  3400               	retlw	0
  2059  1E6B  3400               	retlw	0
  2060  1E6C  3400               	retlw	0
  2061  1E6D  3400               	retlw	0
  2062  1E6E  3400               	retlw	0
  2063  1E6F  3400               	retlw	0
  2064  1E70  3400               	retlw	0
  2065  1E71  3400               	retlw	0
  2066  1E72  3400               	retlw	0
  2067  1E73  3400               	retlw	0
  2068  1E74  34FF               	retlw	255
  2069  1E75  34FF               	retlw	255
  2070  1E76  34FF               	retlw	255
  2071  1E77  3400               	retlw	0
  2072  1E78  3400               	retlw	0
  2073  1E79  3400               	retlw	0
  2074  1E7A  3400               	retlw	0
  2075  1E7B  3400               	retlw	0
  2076  1E7C  3400               	retlw	0
  2077  1E7D  3400               	retlw	0
  2078  1E7E  3400               	retlw	0
  2079  1E7F  3400               	retlw	0
  2080  1E80  3400               	retlw	0
  2081  1E81  3400               	retlw	0
  2082  1E82  3400               	retlw	0
  2083  1E83  3400               	retlw	0
  2084  1E84  3400               	retlw	0
  2085  1E85  3400               	retlw	0
  2086  1E86  3400               	retlw	0
  2087  1E87  3400               	retlw	0
  2088                           
  2089                           	psect	stringtext
  2090  1000                     __pstringtext:	
  2091  1000                     _CC2500_registers_address:	
  2092  1000  3403               	retlw	3
  2093  1001  3416               	retlw	22
  2094  1002  3417               	retlw	23
  2095  1003  341E               	retlw	30
  2096  1004  341F               	retlw	31
  2097  1005  3420               	retlw	32
  2098  1006  342A               	retlw	42
  2099  1007  342B               	retlw	43
  2100  1008  340B               	retlw	11
  2101  1009  340C               	retlw	12
  2102  100A  340D               	retlw	13
  2103  100B  340E               	retlw	14
  2104  100C  340F               	retlw	15
  2105  100D  3410               	retlw	16
  2106  100E  3411               	retlw	17
  2107  100F  3412               	retlw	18
  2108  1010  3413               	retlw	19
  2109  1011  3414               	retlw	20
  2110  1012  340A               	retlw	10
  2111  1013  3415               	retlw	21
  2112  1014  3421               	retlw	33
  2113  1015  3422               	retlw	34
  2114  1016  3418               	retlw	24
  2115  1017  3419               	retlw	25
  2116  1018  341A               	retlw	26
  2117  1019  341B               	retlw	27
  2118  101A  341C               	retlw	28
  2119  101B  341D               	retlw	29
  2120  101C  3423               	retlw	35
  2121  101D  3424               	retlw	36
  2122  101E  3425               	retlw	37
  2123  101F  3426               	retlw	38
  2124  1020  3429               	retlw	41
  2125  1021  342C               	retlw	44
  2126  1022  342D               	retlw	45
  2127  1023  342E               	retlw	46
  2128  1024  3400               	retlw	0
  2129  1025  3401               	retlw	1
  2130  1026  3402               	retlw	2
  2131  1027  3407               	retlw	7
  2132  1028  3408               	retlw	8
  2133  1029  3409               	retlw	9
  2134  102A  3406               	retlw	6
  2135  102B  3404               	retlw	4
  2136  102C  3405               	retlw	5
  2137  102D  3427               	retlw	39
  2138  102E  3428               	retlw	40
  2139  102F                     __end_of_CC2500_registers_address:	
  2140  102F                     _CC2500_rfSettings:	
  2141  102F  3407               	retlw	7
  2142  1030  3407               	retlw	7
  2143  1031  3430               	retlw	48
  2144  1032  3487               	retlw	135
  2145  1033  346B               	retlw	107
  2146  1034  34F8               	retlw	248
  2147  1035  347F               	retlw	127
  2148  1036  343F               	retlw	63
  2149  1037  3409               	retlw	9
  2150  1038  3400               	retlw	0
  2151  1039  345C               	retlw	92
  2152  103A  34A7               	retlw	167
  2153  103B  3462               	retlw	98
  2154  103C  3486               	retlw	134
  2155  103D  3483               	retlw	131
  2156  103E  3403               	retlw	3
  2157  103F  3422               	retlw	34
  2158  1040  34F8               	retlw	248
  2159  1041  3400               	retlw	0
  2160  1042  3444               	retlw	68
  2161  1043  34B6               	retlw	182
  2162  1044  3410               	retlw	16
  2163  1045  3418               	retlw	24
  2164  1046  341D               	retlw	29
  2165  1047  341C               	retlw	28
  2166  1048  34C7               	retlw	199
  2167  1049  3400               	retlw	0
  2168  104A  34B2               	retlw	178
  2169  104B  34EA               	retlw	234
  2170  104C  340A               	retlw	10
  2171  104D  3400               	retlw	0
  2172  104E  3411               	retlw	17
  2173  104F  3459               	retlw	89
  2174  1050  3488               	retlw	136
  2175  1051  3431               	retlw	49
  2176  1052  340B               	retlw	11
  2177  1053  342F               	retlw	47
  2178  1054  342E               	retlw	46
  2179  1055  3406               	retlw	6
  2180  1056  3404               	retlw	4
  2181  1057  3405               	retlw	5
  2182  1058  3400               	retlw	0
  2183  1059  3430               	retlw	48
  2184  105A  34D3               	retlw	211
  2185  105B  3491               	retlw	145
  2186  105C  3441               	retlw	65
  2187  105D  3400               	retlw	0
  2188  105E                     __end_of_CC2500_rfSettings:	
  2189  105E                     _CC2500_patable_vaule:	
  2190  105E  34FE               	retlw	254
  2191  105F  34FE               	retlw	254
  2192  1060  34FE               	retlw	254
  2193  1061  34FE               	retlw	254
  2194  1062  34FE               	retlw	254
  2195  1063  34FE               	retlw	254
  2196  1064  34FE               	retlw	254
  2197  1065  34FE               	retlw	254
  2198  1066                     __end_of_CC2500_patable_vaule:	
  2199                           
  2200                           	psect	nvBANK0
  2201  006D                     __pnvBANK0:	
  2202  006D                     _product:	
  2203  006D                     	ds	1
  2204  000C                     _PORTA	set	12
  2205  000D                     _PORTB	set	13
  2206  000E                     _PORTC	set	14
  2207  0018                     _T1CON	set	24
  2208  0017                     _TMR1H	set	23
  2209  0016                     _TMR1L	set	22
  2210  005F                     _GIE	set	95
  2211  005B                     _IOCIE	set	91
  2212  0058                     _IOCIF	set	88
  2213  005E                     _PEIE	set	94
  2214  0060                     _RA0	set	96
  2215  0063                     _RA3	set	99
  2216  0064                     _RA4	set	100
  2217  0066                     _RA6	set	102
  2218  0067                     _RA7	set	103
  2219  0068                     _RB0	set	104
  2220  0069                     _RB1	set	105
  2221  006A                     _RB2	set	106
  2222  006B                     _RB3	set	107
  2223  006C                     _RB4	set	108
  2224  006D                     _RB5	set	109
  2225  0070                     _RC0	set	112
  2226  0071                     _RC1	set	113
  2227  0072                     _RC2	set	114
  2228  0074                     _RC4	set	116
  2229  0075                     _RC5	set	117
  2230  0077                     _RC7	set	119
  2231  0088                     _TMR1IF	set	136
  2232  009D                     _ADCON0	set	157
  2233  009E                     _ADCON1	set	158
  2234  009C                     _ADRESH	set	156
  2235  009B                     _ADRESL	set	155
  2236  0099                     _OSCCON	set	153
  2237  008C                     _TRISA	set	140
  2238  008D                     _TRISB	set	141
  2239  008E                     _TRISC	set	142
  2240  0097                     _WDTCON	set	151
  2241  04E9                     _GO_nDONE	set	1257
  2242  0488                     _TMR1IE	set	1160
  2243  0117                     _FVRCON	set	279
  2244  010C                     _LATA	set	268
  2245  010D                     _LATB	set	269
  2246  010E                     _LATC	set	270
  2247  018C                     _ANSELA	set	396
  2248  018D                     _ANSELB	set	397
  2249  018E                     _ANSELC	set	398
  2250  0192                     _PMADRH	set	402
  2251  0191                     _PMADRL	set	401
  2252  0196                     _PMCON2	set	406
  2253  0194                     _PMDATH	set	404
  2254  0193                     _PMDATL	set	403
  2255  0CAE                     _CFGS	set	3246
  2256  0CAC                     _FREE	set	3244
  2257  0CAD                     _LWLO	set	3245
  2258  0CA8                     _RD	set	3240
  2259  0CA9                     _WR	set	3241
  2260  0CAA                     _WREN	set	3242
  2261  1069                     _WPUB1	set	4201
  2262  106A                     _WPUB2	set	4202
  2263  0396                     _IOCBF	set	918
  2264  0395                     _IOCBN	set	917
  2265  0394                     _IOCBP	set	916
  2266  1CB2                     _IOCBF2	set	7346
  2267                           
  2268                           ; #config settings
  2269  0000                     
  2270                           	psect	cinit
  2271  0015                     start_initialization:	
  2272  0015                     __initialization:	
  2273                           
  2274                           ; Clear objects allocated to BITCOMMON
  2275  0015  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2276                           
  2277                           ; Clear objects allocated to COMMON
  2278  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2279  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2280  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2281  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2282  001A  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2283                           
  2284                           ; Clear objects allocated to BANK0
  2285  001B  01EA               	clrf	__pbssBANK0& (0+127)
  2286  001C  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  2287  001D  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  2288                           
  2289                           ; Clear objects allocated to BANK1
  2290  001E  30A0               	movlw	low __pbssBANK1
  2291  001F  0084               	movwf	4
  2292  0020  3000               	movlw	high __pbssBANK1
  2293  0021  0085               	movwf	5
  2294  0022  3050               	movlw	80
  2295  0023  319A  220C  3180   	fcall	clear_ram0
  2296                           
  2297                           ; Clear objects allocated to BANK2
  2298  0026  3020               	movlw	low __pbssBANK2
  2299  0027  0084               	movwf	4
  2300  0028  3001               	movlw	high __pbssBANK2
  2301  0029  0085               	movwf	5
  2302  002A  304B               	movlw	75
  2303  002B  319A  220C  3180   	fcall	clear_ram0
  2304                           
  2305                           ; Clear objects allocated to BANK3
  2306  002E  30A0               	movlw	low __pbssBANK3
  2307  002F  0084               	movwf	4
  2308  0030  3001               	movlw	high __pbssBANK3
  2309  0031  0085               	movwf	5
  2310  0032  304F               	movlw	79
  2311  0033  319A  220C  3180   	fcall	clear_ram0
  2312                           
  2313                           ; Clear objects allocated to BANK4
  2314  0036  3020               	movlw	low __pbssBANK4
  2315  0037  0084               	movwf	4
  2316  0038  3002               	movlw	high __pbssBANK4
  2317  0039  0085               	movwf	5
  2318  003A  3025               	movlw	37
  2319  003B  319A  220C  3180   	fcall	clear_ram0
  2320                           
  2321                           ; Initialize objects allocated to BANK4
  2322  003E  3068               	movlw	low __pidataBANK4
  2323  003F  0084               	movwf	4
  2324  0040  309E               	movlw	(high __pidataBANK4)| (0+128)
  2325  0041  0085               	movwf	5
  2326  0042  3045               	movlw	low __pdataBANK4
  2327  0043  0086               	movwf	6
  2328  0044  3002               	movlw	high __pdataBANK4
  2329  0045  0087               	movwf	7
  2330  0046  3020               	movlw	32
  2331  0047  319A  2206         	fcall	init_ram
  2332  0049                     end_of_initialization:	
  2333                           ;End of C runtime variable initialization code
  2334                           
  2335  0049                     __end_of__initialization:	
  2336  0049  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2337  004A  0020               	movlb	0
  2338  004B  3195  2D13         	ljmp	_main	;jump to C main() function
  2339                           
  2340                           	psect	bitbssCOMMON
  2341  03D8                     __pbitbssCOMMON:	
  2342  03D8                     _Receive_OK:	
  2343  03D8                     	ds	1
  2344  03D9                     _Transceive_OK:	
  2345  03D9                     	ds	1
  2346                           
  2347                           	psect	bssCOMMON
  2348  0076                     __pbssCOMMON:	
  2349  0076                     _Dimmer:	
  2350  0076                     	ds	1
  2351  0077                     _DimmerLightsIntr:	
  2352  0077                     	ds	1
  2353  0078                     _LED:	
  2354  0078                     	ds	1
  2355  0079                     _RFSW:	
  2356  0079                     	ds	1
  2357  007A                     _SPI0Buffer:	
  2358  007A                     	ds	1
  2359                           
  2360                           	psect	bssBANK0
  2361  006A                     __pbssBANK0:	
  2362  006A                     _DelayOff:	
  2363  006A                     	ds	1
  2364  006B                     _DimmerLights:	
  2365  006B                     	ds	1
  2366  006C                     _Sw:	
  2367  006C                     	ds	1
  2368                           
  2369                           	psect	bssBANK1
  2370  00A0                     __pbssBANK1:	
  2371  00A0                     _myMain:	
  2372  00A0                     	ds	19
  2373  00B3                     _Buz1:	
  2374  00B3                     	ds	12
  2375  00BF                     _RF1:	
  2376  00BF                     	ds	12
  2377  00CB                     _Timer1:	
  2378  00CB                     	ds	3
  2379  00CE                     _RF_Count:	
  2380  00CE                     	ds	2
  2381  00D0                     _WDT:	
  2382  00D0                     	ds	2
  2383  00D2                     _CRC:	
  2384  00D2                     	ds	1
  2385  00D3                     _DimmerLights11:	
  2386  00D3                     	ds	1
  2387  00D4                     _DimmerLights22:	
  2388  00D4                     	ds	1
  2389  00D5                     _DimmerLightsIntrIOC:	
  2390  00D5                     	ds	1
  2391  00D6                     _RSSI:	
  2392  00D6                     	ds	1
  2393  00D7                     _Rx_Length:	
  2394  00D7                     	ds	1
  2395  00D8                     _Tx_Length:	
  2396  00D8                     	ds	1
  2397  00D9                     _r_address:	
  2398  00D9                     	ds	1
  2399  00DA                     _r_data:	
  2400  00DA                     	ds	1
  2401  00DB                     _s_data:	
  2402  00DB                     	ds	1
  2403  00DC                     _Temp:	
  2404  00DC                     	ds	14
  2405  00EA                     _DlySw1:	
  2406  00EA                     	ds	2
  2407  00EC                     _DlySw2:	
  2408  00EC                     	ds	2
  2409  00EE                     _RFSW1:	
  2410  00EE                     	ds	1
  2411  00EF                     _RFSW2:	
  2412  00EF                     	ds	1
  2413                           
  2414                           	psect	bssBANK2
  2415  0120                     __pbssBANK2:	
  2416  0120                     _RF_Data:	
  2417  0120                     	ds	21
  2418  0135                     _DimmerLights1:	
  2419  0135                     	ds	15
  2420  0144                     _DimmerLights2:	
  2421  0144                     	ds	15
  2422  0153                     _Sw1:	
  2423  0153                     	ds	9
  2424  015C                     _VarErrLED:	
  2425  015C                     	ds	4
  2426  0160                     _VarLED1:	
  2427  0160                     	ds	4
  2428  0164                     _VarLED2:	
  2429  0164                     	ds	4
  2430  0168                     _Dimmer1:	
  2431  0168                     	ds	3
  2432                           
  2433                           	psect	bssBANK3
  2434  01A0                     __pbssBANK3:	
  2435  01A0                     _Load1:	
  2436  01A0                     	ds	70
  2437  01E6                     _Sw2:	
  2438  01E6                     	ds	9
  2439                           
  2440                           	psect	bssBANK4
  2441  0220                     __pbssBANK4:	
  2442  0220                     _Memory:	
  2443  0220                     	ds	37
  2444                           
  2445                           	psect	dataBANK4
  2446  0245                     __pdataBANK4:	
  2447  0245                     __product:	
  2448  0245                     	ds	32
  2449                           
  2450                           	psect	clrtext
  2451  1A0C                     clear_ram0:	
  2452                           ;	Called with FSR0 containing the base address, and
  2453                           ;	WREG with the size to clear
  2454                           
  2455  1A0C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2456  1A0D                     clrloop0:	
  2457  1A0D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2458  1A0E  3101               	addfsr 0,1
  2459  1A0F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2460  1A10  2A0D               	goto	clrloop0	;have we reached the end yet?
  2461  1A11  3400               	retlw	0	;all done for this memory range, return
  2462                           
  2463                           	psect	inittext
  2464  1A06                     init_ram:	
  2465  1A06  00FE               	movwf	126
  2466  1A07                     initloop:	
  2467  1A07  0012               	moviw fsr0++
  2468  1A08  001E               	movwi fsr1++
  2469  1A09  0BFE               	decfsz	126,f
  2470  1A0A  2A07               	goto	initloop
  2471  1A0B  3400               	retlw	0
  2472                           
  2473                           	psect	cstackBANK2
  2474  016B                     __pcstackBANK2:	
  2475  016B                     ?_main:	
  2476  016B                     main@argc:	
  2477                           ; 2 bytes @ 0x0
  2478                           
  2479                           
  2480                           ; 2 bytes @ 0x0
  2481  016B                     	ds	2
  2482  016D                     main@argv:	
  2483                           
  2484                           ; 2 bytes @ 0x2
  2485  016D                     	ds	2
  2486                           
  2487                           	psect	cstackCOMMON
  2488  0070                     __pcstackCOMMON:	
  2489  0070                     ?_Timeout_Counter:	
  2490  0070                     ?_set_TimeoutCleared:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_CC2500_WriteByte:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_CC2500_WriteCommand:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_CC2500_ReadStatus:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_CC2500_ReadByte:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_CC2500_PowerRST:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_CC2500_InitSetREG:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_CC2500_InitPATable:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_CC2500_ClearTXFIFO:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_CC2500_ClearRXFIFO:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_CC2500_FrequencyCabr:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_CC2500_SIDLEMode:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_DlyOff_Initialization:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_DlyOff_Main:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_setTxData:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_setDimmerLights_Initialization:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_Dimmer_Initialization:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_setLoad_GO:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_setMemory_GO:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_setDimmerLights_Main:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_setDimmerLights_ERROR:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_setLoad_Count:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_setLED_Initialization:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_setLED_Main:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_Fosc_Set:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_IO_Set:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_TMR1_Set:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_ADC_Set:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_IOC_Set:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_WDT_Set:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_IOC_ISR:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_TMR1_ISR:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_Flash_Memory_Write:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_Flash_Memory_Modify:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_WDT_Clearing:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_myMain_Initialization:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_Temp_Initialization:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_Load_Initialization:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_Switch_Initialization:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_RF_Initialization:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_getLoad_AD:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_getTemp_AD:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_my_MainTime:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_Temp_Main:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_Load_Main:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_Switch_Main:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_RF_Main:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setTemp_Enable:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setLoad_Enable:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_setSw_Enable:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setRF_Enable:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setLoad_AH_AL_Restore:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setLoad_Exceptions:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setTemp_Initialization:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setTemp_Main:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setOverTemp_Exceptions:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setRF_Initialization:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_setRF_Main:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_getRxData:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setLog_Code:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setControl_Lights_Table:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_setRFSW_Control:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_setRFSW_AdjControl:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_setRF_DimmerValue:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setSw_Initialization:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_setSw_Main:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_Sw_DimmerOnFunc:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_Sw_DimmerAdjFunc:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_Sw_DimmerOffFunc:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_Buzzer_Initialization:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Buzzer_Main:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_CC2500_TxData:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_CC2500_RxData:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_CC2500_PowerOnInitial:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_DelayOffPointSelect:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_DelayOff_Initialization:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_DelayOff_Main:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_DimmerIntrIOCPointSelect:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ??_DimmerIntrIOCPointSelect:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_DimmerIntrPointSelect:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ??_DimmerIntrPointSelect:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_setDimmerLights_IntrControl:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_DimmerLightsPointSelect:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_DimmerLights_Initialization:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_DimmerLights_Close:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_DimmerLights_Main:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_DimmerLights_Exceptions:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setDimmerLights_AdjRF:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_LedPointSelect:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_LED_Initialization:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_LED_Main:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_Mcu_Initialization:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_ISR:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setDimmerReClock:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_Flash_Memory_Initialization:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_Flash_Memory_Main:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_Flash_Memory_Unlock:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_Flash_Memory_Erasing:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_WDT_Main:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_setRF_Learn:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_RfSWPointSelect:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_TouchPower:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_SwPointSelect:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?i1_setLoad_StatusOff:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_DelayTimejudge:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_getDimmerLights_StatusFlag:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ?_getPercentValue:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ?_Flash_Memory_Read:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0070                     ?_getTemp_Safe:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0070                     ?_setPercentValue:	
  2821                           ; 1 bytes @ 0x0
  2822                           
  2823  0070                     ?_getLoad_Safe:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826  0070                     i1setLoad_StatusOff@command:	
  2827                           ; 1 bytes @ 0x0
  2828                           
  2829                           
  2830                           ; 1 bytes @ 0x0
  2831  0070                     	ds	1
  2832  0071                     ??i1_setLoad_StatusOff:	
  2833  0071                     DimmerIntrIOCPointSelect@lights:	
  2834                           ; 0 bytes @ 0x1
  2835                           
  2836  0071                     DimmerIntrPointSelect@lights:	
  2837                           ; 1 bytes @ 0x1
  2838                           
  2839  0071                     i1setLoad_StatusOff@lights:	
  2840                           ; 1 bytes @ 0x1
  2841                           
  2842                           
  2843                           ; 1 bytes @ 0x1
  2844  0071                     	ds	1
  2845  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2846  0072                     ??_setDimmerLights_IntrControl:	
  2847                           ; 0 bytes @ 0x2
  2848                           
  2849  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2850                           ; 0 bytes @ 0x2
  2851                           
  2852                           
  2853                           ; 1 bytes @ 0x2
  2854  0072                     	ds	1
  2855  0073                     ??_IOC_ISR:	
  2856  0073                     ??_setDimmerReClock:	
  2857                           ; 0 bytes @ 0x3
  2858                           
  2859                           
  2860                           ; 0 bytes @ 0x3
  2861  0073                     	ds	1
  2862  0074                     setDimmerLights_IntrControl@lights:	
  2863                           
  2864                           ; 1 bytes @ 0x4
  2865  0074                     	ds	1
  2866  0075                     ??_TMR1_ISR:	
  2867  0075                     ??_ISR:	
  2868                           ; 0 bytes @ 0x5
  2869                           
  2870                           
  2871                           ; 0 bytes @ 0x5
  2872  0075                     	ds	1
  2873                           
  2874                           	psect	cstackBANK0
  2875  0020                     __pcstackBANK0:	
  2876  0020                     ??_Timeout_Counter:	
  2877  0020                     ??_set_TimeoutCleared:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_CC2500_WriteByte:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_CC2500_ReadByte:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ?_DelayTime_1us:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_setTxData:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ?_setLoad_StatusOff:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_Dimmer_Initialization:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_getDimmerLights_StatusFlag:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_setLoad_GO:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_setMemory_GO:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_setLoad_Count:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ?_setLoad_StatusOn:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_Fosc_Set:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_IO_Set:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ??_TMR1_Set:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ??_ADC_Set:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_IOC_Set:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ??_WDT_Set:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ??_Flash_Memory_Read:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0020                     ??_Flash_Memory_Write:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0020                     ??_WDT_Clearing:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0020                     ??_myMain_Initialization:	
  2941                           ; 0 bytes @ 0x0
  2942                           
  2943  0020                     ??_Temp_Initialization:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0020                     ??_setTemp_Enable:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0020                     ??_setLoad_Enable:	
  2950                           ; 0 bytes @ 0x0
  2951                           
  2952  0020                     ??_setRF_Enable:	
  2953                           ; 0 bytes @ 0x0
  2954                           
  2955  0020                     ??_setLoad_AH_AL_Restore:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0020                     ??_getTemp_Safe:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0020                     ??_setTemp_Initialization:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0020                     ??_setRF_Initialization:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0020                     ??_Buzzer_Initialization:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_Buzzer_Main:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_DelayOffPointSelect:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_DimmerLightsPointSelect:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_LedPointSelect:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_Flash_Memory_Unlock:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_Flash_Memory_Erasing:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ??_WDT_Main:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ??_getLoad_Safe:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_setRF_Learn:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ??_RfSWPointSelect:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_TouchPower:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_SwPointSelect:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ?___bmul:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ?_getBuz_GO:	
  3010                           ; 1 bytes @ 0x0
  3011                           
  3012  0020                     ?_getAD:	
  3013                           ; 2 bytes @ 0x0
  3014                           
  3015  0020                     ?___wmul:	
  3016                           ; 2 bytes @ 0x0
  3017                           
  3018  0020                     ?___awdiv:	
  3019                           ; 2 bytes @ 0x0
  3020                           
  3021  0020                     ?___lwdiv:	
  3022                           ; 2 bytes @ 0x0
  3023                           
  3024  0020                     ?___ftpack:	
  3025                           ; 2 bytes @ 0x0
  3026                           
  3027  0020                     getAD@adcon1:	
  3028                           ; 3 bytes @ 0x0
  3029                           
  3030  0020                     setLoad_Enable@command:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033  0020                     setLoad_GO@command:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036  0020                     setLoad_StatusOn@command:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039  0020                     setLoad_StatusOff@command:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042  0020                     getLoad_Safe@result:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045  0020                     setTemp_Enable@command:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048  0020                     getTemp_Safe@result:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051  0020                     setRF_Learn@command:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054  0020                     setRF_Enable@command:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057  0020                     ___bmul@multiplicand:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060  0020                     DelayTime_1us@count:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063  0020                     ___wmul@multiplier:	
  3064                           ; 2 bytes @ 0x0
  3065                           
  3066  0020                     ___awdiv@divisor:	
  3067                           ; 2 bytes @ 0x0
  3068                           
  3069  0020                     ___lwdiv@divisor:	
  3070                           ; 2 bytes @ 0x0
  3071                           
  3072  0020                     ___ftpack@arg:	
  3073                           ; 2 bytes @ 0x0
  3074                           
  3075                           
  3076                           ; 3 bytes @ 0x0
  3077  0020                     	ds	1
  3078  0021                     ??_setLoad_StatusOff:	
  3079  0021                     ??_setLoad_StatusOn:	
  3080                           ; 0 bytes @ 0x1
  3081                           
  3082  0021                     ??_RF_Initialization:	
  3083                           ; 0 bytes @ 0x1
  3084                           
  3085  0021                     ??_Mcu_Initialization:	
  3086                           ; 0 bytes @ 0x1
  3087                           
  3088  0021                     ??___bmul:	
  3089                           ; 0 bytes @ 0x1
  3090                           
  3091  0021                     CC2500_WriteByte@loop_a:	
  3092                           ; 0 bytes @ 0x1
  3093                           
  3094  0021                     CC2500_ReadByte@loop_b:	
  3095                           ; 1 bytes @ 0x1
  3096                           
  3097  0021                     DelayOffPointSelect@sw:	
  3098                           ; 1 bytes @ 0x1
  3099                           
  3100  0021                     DimmerLightsPointSelect@lights:	
  3101                           ; 1 bytes @ 0x1
  3102                           
  3103  0021                     getDimmerLights_StatusFlag@Status:	
  3104                           ; 1 bytes @ 0x1
  3105                           
  3106  0021                     LedPointSelect@led:	
  3107                           ; 1 bytes @ 0x1
  3108                           
  3109  0021                     Flash_Memory_Read@i:	
  3110                           ; 1 bytes @ 0x1
  3111                           
  3112  0021                     Flash_Memory_Write@i:	
  3113                           ; 1 bytes @ 0x1
  3114                           
  3115  0021                     setLoad_Count@command:	
  3116                           ; 1 bytes @ 0x1
  3117                           
  3118  0021                     setLoad_StatusOn@lights:	
  3119                           ; 1 bytes @ 0x1
  3120                           
  3121  0021                     setLoad_StatusOff@lights:	
  3122                           ; 1 bytes @ 0x1
  3123                           
  3124  0021                     setLoad_AH_AL_Restore@i:	
  3125                           ; 1 bytes @ 0x1
  3126                           
  3127  0021                     RfSWPointSelect@sw:	
  3128                           ; 1 bytes @ 0x1
  3129                           
  3130  0021                     SwPointSelect@sw:	
  3131                           ; 1 bytes @ 0x1
  3132                           
  3133                           
  3134                           ; 1 bytes @ 0x1
  3135  0021                     	ds	1
  3136  0022                     ??_CC2500_WriteCommand:	
  3137  0022                     ??_CC2500_ReadStatus:	
  3138                           ; 0 bytes @ 0x2
  3139                           
  3140  0022                     ??_DelayTime_1us:	
  3141                           ; 0 bytes @ 0x2
  3142                           
  3143  0022                     ?_CC2500_WriteREG:	
  3144                           ; 0 bytes @ 0x2
  3145                           
  3146  0022                     ??_DlyOff_Initialization:	
  3147                           ; 0 bytes @ 0x2
  3148                           
  3149  0022                     ?_setSw_Status:	
  3150                           ; 0 bytes @ 0x2
  3151                           
  3152  0022                     ?_setRFSW_Status:	
  3153                           ; 0 bytes @ 0x2
  3154                           
  3155  0022                     ?_setDimmerLights_Trigger:	
  3156                           ; 0 bytes @ 0x2
  3157                           
  3158  0022                     ?_setDimmerLights_Switch:	
  3159                           ; 0 bytes @ 0x2
  3160                           
  3161  0022                     ??_setDimmerLights_Initialization:	
  3162                           ; 0 bytes @ 0x2
  3163                           
  3164  0022                     ?_setDimmerLights_TriggerERROR:	
  3165                           ; 0 bytes @ 0x2
  3166                           
  3167  0022                     ?_setLED:	
  3168                           ; 0 bytes @ 0x2
  3169                           
  3170  0022                     ??_setLED_Main:	
  3171                           ; 0 bytes @ 0x2
  3172                           
  3173  0022                     ??_Load_Initialization:	
  3174                           ; 0 bytes @ 0x2
  3175                           
  3176  0022                     ??_setSw_Enable:	
  3177                           ; 0 bytes @ 0x2
  3178                           
  3179  0022                     ??_getBuz_GO:	
  3180                           ; 0 bytes @ 0x2
  3181                           
  3182  0022                     ?_setDimmerLights_AdjGo:	
  3183                           ; 0 bytes @ 0x2
  3184                           
  3185  0022                     ?_setDimmerLights_TriggerAdj:	
  3186                           ; 0 bytes @ 0x2
  3187                           
  3188  0022                     ?_setDimmerLights_Clear:	
  3189                           ; 0 bytes @ 0x2
  3190                           
  3191  0022                     CC2500_WriteREG@value:	
  3192                           ; 0 bytes @ 0x2
  3193                           
  3194  0022                     DlyOff_Initialization@sw:	
  3195                           ; 1 bytes @ 0x2
  3196                           
  3197  0022                     _getDimmerLights_StatusFlag$2618:	
  3198                           ; 1 bytes @ 0x2
  3199                           
  3200  0022                     setDimmerLights_TriggerERROR@command:	
  3201                           ; 1 bytes @ 0x2
  3202                           
  3203  0022                     setDimmerLights_Switch@command:	
  3204                           ; 1 bytes @ 0x2
  3205                           
  3206  0022                     setDimmerLights_AdjGo@command:	
  3207                           ; 1 bytes @ 0x2
  3208                           
  3209  0022                     setDimmerLights_Trigger@command:	
  3210                           ; 1 bytes @ 0x2
  3211                           
  3212  0022                     setDimmerLights_TriggerAdj@command:	
  3213                           ; 1 bytes @ 0x2
  3214                           
  3215  0022                     setDimmerLights_Clear@command:	
  3216                           ; 1 bytes @ 0x2
  3217                           
  3218  0022                     setLED@command:	
  3219                           ; 1 bytes @ 0x2
  3220                           
  3221  0022                     Flash_Memory_Read@address:	
  3222                           ; 1 bytes @ 0x2
  3223                           
  3224  0022                     setMemory_GO@command:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227  0022                     setRFSW_Status@command:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230  0022                     setSw_Enable@command:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233  0022                     setSw_Status@command:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236  0022                     ___bmul@product:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239  0022                     DelayTime_1us@i:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242  0022                     ___wmul@multiplicand:	
  3243                           ; 2 bytes @ 0x2
  3244                           
  3245  0022                     ___awdiv@dividend:	
  3246                           ; 2 bytes @ 0x2
  3247                           
  3248  0022                     ___lwdiv@dividend:	
  3249                           ; 2 bytes @ 0x2
  3250                           
  3251                           
  3252                           ; 2 bytes @ 0x2
  3253  0022                     	ds	1
  3254  0023                     ??_CC2500_WriteREG:	
  3255  0023                     ??_setSw_Status:	
  3256                           ; 0 bytes @ 0x3
  3257                           
  3258  0023                     ??_setRFSW_Status:	
  3259                           ; 0 bytes @ 0x3
  3260                           
  3261  0023                     ??_setDimmerLights_Trigger:	
  3262                           ; 0 bytes @ 0x3
  3263                           
  3264  0023                     ??_setDimmerLights_Switch:	
  3265                           ; 0 bytes @ 0x3
  3266                           
  3267  0023                     ??_setDimmerLights_TriggerERROR:	
  3268                           ; 0 bytes @ 0x3
  3269                           
  3270  0023                     ??_setLED:	
  3271                           ; 0 bytes @ 0x3
  3272                           
  3273  0023                     ??_DelayOff_Initialization:	
  3274                           ; 0 bytes @ 0x3
  3275                           
  3276  0023                     ??_DimmerLights_Close:	
  3277                           ; 0 bytes @ 0x3
  3278                           
  3279  0023                     ??_setDimmerLights_AdjGo:	
  3280                           ; 0 bytes @ 0x3
  3281                           
  3282  0023                     ??_setDimmerLights_TriggerAdj:	
  3283                           ; 0 bytes @ 0x3
  3284                           
  3285  0023                     ??_setDimmerLights_Clear:	
  3286                           ; 0 bytes @ 0x3
  3287                           
  3288  0023                     ??_getAD:	
  3289                           ; 0 bytes @ 0x3
  3290                           
  3291  0023                     CC2500_WriteCommand@command:	
  3292                           ; 0 bytes @ 0x3
  3293                           
  3294  0023                     CC2500_ReadStatus@status_addr:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297  0023                     setDimmerLights_Initialization@lights:	
  3298                           ; 1 bytes @ 0x3
  3299                           
  3300  0023                     setDimmerLights_TriggerERROR@lights:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303  0023                     setDimmerLights_Switch@lights:	
  3304                           ; 1 bytes @ 0x3
  3305                           
  3306  0023                     setDimmerLights_AdjGo@lights:	
  3307                           ; 1 bytes @ 0x3
  3308                           
  3309  0023                     setDimmerLights_Trigger@lights:	
  3310                           ; 1 bytes @ 0x3
  3311                           
  3312  0023                     setDimmerLights_TriggerAdj@lights:	
  3313                           ; 1 bytes @ 0x3
  3314                           
  3315  0023                     setDimmerLights_Clear@lights:	
  3316                           ; 1 bytes @ 0x3
  3317                           
  3318  0023                     setLED@led:	
  3319                           ; 1 bytes @ 0x3
  3320                           
  3321  0023                     getAD@adcon0:	
  3322                           ; 1 bytes @ 0x3
  3323                           
  3324  0023                     Flash_Memory_Read@ret:	
  3325                           ; 1 bytes @ 0x3
  3326                           
  3327  0023                     setRFSW_Status@sw:	
  3328                           ; 1 bytes @ 0x3
  3329                           
  3330  0023                     setSw_Status@sw:	
  3331                           ; 1 bytes @ 0x3
  3332                           
  3333  0023                     ___bmul@multiplier:	
  3334                           ; 1 bytes @ 0x3
  3335                           
  3336  0023                     ___ftpack@exp:	
  3337                           ; 1 bytes @ 0x3
  3338                           
  3339                           
  3340                           ; 1 bytes @ 0x3
  3341  0023                     	ds	1
  3342  0024                     ??_CC2500_ClearTXFIFO:	
  3343  0024                     ??_CC2500_ClearRXFIFO:	
  3344                           ; 0 bytes @ 0x4
  3345                           
  3346  0024                     ??_CC2500_SIDLEMode:	
  3347                           ; 0 bytes @ 0x4
  3348                           
  3349  0024                     ??_DelayTimejudge:	
  3350                           ; 0 bytes @ 0x4
  3351                           
  3352  0024                     ?_setDimmerLights:	
  3353                           ; 0 bytes @ 0x4
  3354                           
  3355  0024                     ??_setDimmerLights_ERROR:	
  3356                           ; 0 bytes @ 0x4
  3357                           
  3358  0024                     ??_setLED_Initialization:	
  3359                           ; 0 bytes @ 0x4
  3360                           
  3361  0024                     ??_Flash_Memory_Modify:	
  3362                           ; 0 bytes @ 0x4
  3363                           
  3364  0024                     ??_getLoad_AD:	
  3365                           ; 0 bytes @ 0x4
  3366                           
  3367  0024                     ??_getTemp_AD:	
  3368                           ; 0 bytes @ 0x4
  3369                           
  3370  0024                     ??_setSw_Initialization:	
  3371                           ; 0 bytes @ 0x4
  3372                           
  3373  0024                     ??_Sw_DimmerAdjFunc:	
  3374                           ; 0 bytes @ 0x4
  3375                           
  3376  0024                     ??_CC2500_TxData:	
  3377                           ; 0 bytes @ 0x4
  3378                           
  3379  0024                     ??_CC2500_RxData:	
  3380                           ; 0 bytes @ 0x4
  3381                           
  3382  0024                     ??_DimmerLights_Initialization:	
  3383                           ; 0 bytes @ 0x4
  3384                           
  3385  0024                     ??___wmul:	
  3386                           ; 0 bytes @ 0x4
  3387                           
  3388  0024                     ??___awdiv:	
  3389                           ; 0 bytes @ 0x4
  3390                           
  3391  0024                     ??___lwdiv:	
  3392                           ; 0 bytes @ 0x4
  3393                           
  3394  0024                     CC2500_WriteREG@w_addr:	
  3395                           ; 0 bytes @ 0x4
  3396                           
  3397  0024                     setDimmerLights@status:	
  3398                           ; 1 bytes @ 0x4
  3399                           
  3400  0024                     setLED_Initialization@led:	
  3401                           ; 1 bytes @ 0x4
  3402                           
  3403  0024                     setLED_Main@led:	
  3404                           ; 1 bytes @ 0x4
  3405                           
  3406  0024                     setSw_Initialization@sw:	
  3407                           ; 1 bytes @ 0x4
  3408                           
  3409  0024                     Sw_DimmerAdjFunc@Idle:	
  3410                           ; 1 bytes @ 0x4
  3411                           
  3412  0024                     ___ftpack@sign:	
  3413                           ; 1 bytes @ 0x4
  3414                           
  3415  0024                     getBuz_GO@i:	
  3416                           ; 1 bytes @ 0x4
  3417                           
  3418  0024                     DelayTime_1us@j:	
  3419                           ; 2 bytes @ 0x4
  3420                           
  3421  0024                     ___wmul@product:	
  3422                           ; 2 bytes @ 0x4
  3423                           
  3424                           
  3425                           ; 2 bytes @ 0x4
  3426  0024                     	ds	1
  3427  0025                     ??_CC2500_InitSetREG:	
  3428  0025                     ??_CC2500_InitPATable:	
  3429                           ; 0 bytes @ 0x5
  3430                           
  3431  0025                     ??_setDimmerLights:	
  3432                           ; 0 bytes @ 0x5
  3433                           
  3434  0025                     ??_Switch_Initialization:	
  3435                           ; 0 bytes @ 0x5
  3436                           
  3437  0025                     ??___ftpack:	
  3438                           ; 0 bytes @ 0x5
  3439                           
  3440  0025                     ??_LED_Initialization:	
  3441                           ; 0 bytes @ 0x5
  3442                           
  3443  0025                     ??_LED_Main:	
  3444                           ; 0 bytes @ 0x5
  3445                           
  3446  0025                     CC2500_TxData@loop_e:	
  3447                           ; 0 bytes @ 0x5
  3448                           
  3449  0025                     CC2500_RxData@loop_f:	
  3450                           ; 1 bytes @ 0x5
  3451                           
  3452  0025                     setDimmerLights_ERROR@lights:	
  3453                           ; 1 bytes @ 0x5
  3454                           
  3455  0025                     Flash_Memory_Modify@i:	
  3456                           ; 1 bytes @ 0x5
  3457                           
  3458  0025                     getTemp_AD@channel:	
  3459                           ; 1 bytes @ 0x5
  3460                           
  3461  0025                     Sw_DimmerAdjFunc@sw:	
  3462                           ; 1 bytes @ 0x5
  3463                           
  3464  0025                     ___awdiv@counter:	
  3465                           ; 1 bytes @ 0x5
  3466                           
  3467  0025                     ___lwdiv@counter:	
  3468                           ; 1 bytes @ 0x5
  3469                           
  3470                           
  3471                           ; 1 bytes @ 0x5
  3472  0025                     	ds	1
  3473  0026                     ??_CC2500_PowerRST:	
  3474  0026                     ??_CC2500_FrequencyCabr:	
  3475                           ; 0 bytes @ 0x6
  3476                           
  3477  0026                     ??_Flash_Memory_Main:	
  3478                           ; 0 bytes @ 0x6
  3479                           
  3480  0026                     CC2500_InitSetREG@temp1:	
  3481                           ; 0 bytes @ 0x6
  3482                           
  3483  0026                     CC2500_InitPATable@temp:	
  3484                           ; 1 bytes @ 0x6
  3485                           
  3486  0026                     DelayTimejudge@i:	
  3487                           ; 1 bytes @ 0x6
  3488                           
  3489  0026                     setDimmerLights@lights:	
  3490                           ; 1 bytes @ 0x6
  3491                           
  3492  0026                     getLoad_AD@channel:	
  3493                           ; 1 bytes @ 0x6
  3494                           
  3495  0026                     ___awdiv@sign:	
  3496                           ; 1 bytes @ 0x6
  3497                           
  3498  0026                     ___lwdiv@quotient:	
  3499                           ; 1 bytes @ 0x6
  3500                           
  3501                           
  3502                           ; 2 bytes @ 0x6
  3503  0026                     	ds	1
  3504  0027                     CC2500_InitSetREG@temp2:	
  3505  0027                     CC2500_InitPATable@loop_d:	
  3506                           ; 1 bytes @ 0x7
  3507                           
  3508  0027                     DelayTimejudge@j:	
  3509                           ; 1 bytes @ 0x7
  3510                           
  3511  0027                     getLoad_AD@j:	
  3512                           ; 1 bytes @ 0x7
  3513                           
  3514  0027                     ___awdiv@quotient:	
  3515                           ; 1 bytes @ 0x7
  3516                           
  3517                           
  3518                           ; 2 bytes @ 0x7
  3519  0027                     	ds	1
  3520  0028                     ?___awtoft:	
  3521  0028                     CC2500_InitSetREG@loop_c:	
  3522                           ; 3 bytes @ 0x8
  3523                           
  3524  0028                     DelayTimejudge@k:	
  3525                           ; 1 bytes @ 0x8
  3526                           
  3527  0028                     getLoad_AD@i:	
  3528                           ; 1 bytes @ 0x8
  3529                           
  3530  0028                     ___awtoft@c:	
  3531                           ; 1 bytes @ 0x8
  3532                           
  3533                           
  3534                           ; 2 bytes @ 0x8
  3535  0028                     	ds	1
  3536  0029                     ?_setBuz:	
  3537  0029                     ??_CC2500_PowerOnInitial:	
  3538                           ; 0 bytes @ 0x9
  3539                           
  3540  0029                     DelayTimejudge@value:	
  3541                           ; 0 bytes @ 0x9
  3542                           
  3543  0029                     setBuz@time:	
  3544                           ; 1 bytes @ 0x9
  3545                           
  3546                           
  3547                           ; 2 bytes @ 0x9
  3548  0029                     	ds	1
  3549  002A                     ?_setDelayOff_GO:	
  3550  002A                     setDelayOff_GO@command:	
  3551                           ; 0 bytes @ 0xA
  3552                           
  3553                           
  3554                           ; 1 bytes @ 0xA
  3555  002A                     	ds	1
  3556  002B                     ??_setBuz:	
  3557  002B                     ??___awtoft:	
  3558                           ; 0 bytes @ 0xB
  3559                           
  3560  002B                     setDelayOff_GO@value:	
  3561                           ; 0 bytes @ 0xB
  3562                           
  3563                           
  3564                           ; 1 bytes @ 0xB
  3565  002B                     	ds	1
  3566  002C                     ??_setDelayOff_GO:	
  3567  002C                     setBuz@count:	
  3568                           ; 0 bytes @ 0xC
  3569                           
  3570                           
  3571                           ; 1 bytes @ 0xC
  3572  002C                     	ds	1
  3573  002D                     ??_my_MainTime:	
  3574  002D                     ??_setLog_Code:	
  3575                           ; 0 bytes @ 0xD
  3576                           
  3577  002D                     ??_DimmerLights_Exceptions:	
  3578                           ; 0 bytes @ 0xD
  3579                           
  3580  002D                     DimmerLights_Exceptions@status:	
  3581                           ; 0 bytes @ 0xD
  3582                           
  3583  002D                     ___awtoft@sign:	
  3584                           ; 1 bytes @ 0xD
  3585                           
  3586                           
  3587                           ; 1 bytes @ 0xD
  3588  002D                     	ds	1
  3589  002E                     ??_setLoad_Exceptions:	
  3590  002E                     ??_setOverTemp_Exceptions:	
  3591                           ; 0 bytes @ 0xE
  3592                           
  3593  002E                     ?___ftdiv:	
  3594                           ; 0 bytes @ 0xE
  3595                           
  3596  002E                     ?___ftmul:	
  3597                           ; 3 bytes @ 0xE
  3598                           
  3599  002E                     setDelayOff_GO@sw:	
  3600                           ; 3 bytes @ 0xE
  3601                           
  3602  002E                     ___ftdiv@f2:	
  3603                           ; 1 bytes @ 0xE
  3604                           
  3605  002E                     ___ftmul@f1:	
  3606                           ; 3 bytes @ 0xE
  3607                           
  3608                           
  3609                           ; 3 bytes @ 0xE
  3610  002E                     	ds	1
  3611  002F                     setLoad_Exceptions@i:	
  3612  002F                     setOverTemp_Exceptions@i:	
  3613                           ; 1 bytes @ 0xF
  3614                           
  3615                           
  3616                           ; 1 bytes @ 0xF
  3617  002F                     	ds	1
  3618  0030                     setLoad_Exceptions@command:	
  3619  0030                     setOverTemp_Exceptions@command:	
  3620                           ; 1 bytes @ 0x10
  3621                           
  3622                           
  3623                           ; 1 bytes @ 0x10
  3624  0030                     	ds	1
  3625  0031                     ??_Load_Main:	
  3626  0031                     ??_setTemp_Main:	
  3627                           ; 0 bytes @ 0x11
  3628                           
  3629  0031                     ___ftdiv@f1:	
  3630                           ; 0 bytes @ 0x11
  3631                           
  3632  0031                     ___ftmul@f2:	
  3633                           ; 3 bytes @ 0x11
  3634                           
  3635                           
  3636                           ; 3 bytes @ 0x11
  3637  0031                     	ds	1
  3638  0032                     ??_Temp_Main:	
  3639                           
  3640                           ; 0 bytes @ 0x12
  3641  0032                     	ds	1
  3642  0033                     Load_Main@i:	
  3643                           
  3644                           ; 1 bytes @ 0x13
  3645  0033                     	ds	1
  3646  0034                     ??___ftdiv:	
  3647  0034                     ??___ftmul:	
  3648                           ; 0 bytes @ 0x14
  3649                           
  3650                           
  3651                           ; 0 bytes @ 0x14
  3652  0034                     	ds	4
  3653  0038                     ___ftdiv@cntr:	
  3654  0038                     ___ftmul@exp:	
  3655                           ; 1 bytes @ 0x18
  3656                           
  3657                           
  3658                           ; 1 bytes @ 0x18
  3659  0038                     	ds	1
  3660  0039                     ___ftdiv@f3:	
  3661  0039                     ___ftmul@f3_as_product:	
  3662                           ; 3 bytes @ 0x19
  3663                           
  3664                           
  3665                           ; 3 bytes @ 0x19
  3666  0039                     	ds	3
  3667  003C                     ___ftdiv@exp:	
  3668  003C                     ___ftmul@cntr:	
  3669                           ; 1 bytes @ 0x1C
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0x1C
  3673  003C                     	ds	1
  3674  003D                     ___ftdiv@sign:	
  3675  003D                     ___ftmul@sign:	
  3676                           ; 1 bytes @ 0x1D
  3677                           
  3678                           
  3679                           ; 1 bytes @ 0x1D
  3680  003D                     	ds	1
  3681  003E                     ?___ftadd:	
  3682  003E                     ___ftadd@f1:	
  3683                           ; 3 bytes @ 0x1E
  3684                           
  3685                           
  3686                           ; 3 bytes @ 0x1E
  3687  003E                     	ds	3
  3688  0041                     ___ftadd@f2:	
  3689                           
  3690                           ; 3 bytes @ 0x21
  3691  0041                     	ds	3
  3692  0044                     ??___ftadd:	
  3693                           
  3694                           ; 0 bytes @ 0x24
  3695  0044                     	ds	4
  3696  0048                     ___ftadd@sign:	
  3697                           
  3698                           ; 1 bytes @ 0x28
  3699  0048                     	ds	1
  3700  0049                     ___ftadd@exp2:	
  3701                           
  3702                           ; 1 bytes @ 0x29
  3703  0049                     	ds	1
  3704  004A                     ___ftadd@exp1:	
  3705                           
  3706                           ; 1 bytes @ 0x2A
  3707  004A                     	ds	1
  3708  004B                     ?___fttol:	
  3709  004B                     ___fttol@f1:	
  3710                           ; 4 bytes @ 0x2B
  3711                           
  3712                           
  3713                           ; 3 bytes @ 0x2B
  3714  004B                     	ds	4
  3715  004F                     ??___fttol:	
  3716                           
  3717                           ; 0 bytes @ 0x2F
  3718  004F                     	ds	4
  3719  0053                     ___fttol@sign1:	
  3720                           
  3721                           ; 1 bytes @ 0x33
  3722  0053                     	ds	1
  3723  0054                     ___fttol@lval:	
  3724                           
  3725                           ; 4 bytes @ 0x34
  3726  0054                     	ds	4
  3727  0058                     ___fttol@exp1:	
  3728                           
  3729                           ; 1 bytes @ 0x38
  3730  0058                     	ds	1
  3731  0059                     ??_getPercentValue:	
  3732  0059                     ??_setPercentValue:	
  3733                           ; 0 bytes @ 0x39
  3734                           
  3735  0059                     setPercentValue@value:	
  3736                           ; 0 bytes @ 0x39
  3737                           
  3738                           
  3739                           ; 1 bytes @ 0x39
  3740  0059                     	ds	1
  3741  005A                     setPercentValue@i:	
  3742                           
  3743                           ; 3 bytes @ 0x3A
  3744  005A                     	ds	1
  3745  005B                     getPercentValue@value:	
  3746                           
  3747                           ; 1 bytes @ 0x3B
  3748  005B                     	ds	1
  3749  005C                     getPercentValue@i:	
  3750                           
  3751                           ; 3 bytes @ 0x3C
  3752  005C                     	ds	1
  3753  005D                     ?_setRF_DimmerLights:	
  3754  005D                     ??_Flash_Memory_Initialization:	
  3755                           ; 0 bytes @ 0x3D
  3756                           
  3757  005D                     setRF_DimmerLights@on:	
  3758                           ; 0 bytes @ 0x3D
  3759                           
  3760                           
  3761                           ; 1 bytes @ 0x3D
  3762  005D                     	ds	1
  3763  005E                     ??_setRF_DimmerLights:	
  3764  005E                     Flash_Memory_Initialization@i:	
  3765                           ; 0 bytes @ 0x3E
  3766                           
  3767                           
  3768                           ; 1 bytes @ 0x3E
  3769  005E                     	ds	1
  3770  005F                     ??_setDimmerLights_AdjRF:	
  3771                           
  3772                           ; 0 bytes @ 0x3F
  3773  005F                     	ds	1
  3774  0060                     setDimmerLights_AdjRF@lights:	
  3775  0060                     setRF_DimmerLights@status:	
  3776                           ; 1 bytes @ 0x40
  3777                           
  3778                           
  3779                           ; 1 bytes @ 0x40
  3780  0060                     	ds	1
  3781  0061                     ??_setRF_DimmerValue:	
  3782  0061                     setRF_DimmerLights@lights:	
  3783                           ; 0 bytes @ 0x41
  3784                           
  3785                           
  3786                           ; 1 bytes @ 0x41
  3787  0061                     	ds	1
  3788  0062                     ??_DlyOff_Main:	
  3789  0062                     ?_setDimmerLights_Adj:	
  3790                           ; 0 bytes @ 0x42
  3791                           
  3792  0062                     ??_setRFSW_Control:	
  3793                           ; 0 bytes @ 0x42
  3794                           
  3795  0062                     ??_Sw_DimmerOnFunc:	
  3796                           ; 0 bytes @ 0x42
  3797                           
  3798  0062                     ??_Sw_DimmerOffFunc:	
  3799                           ; 0 bytes @ 0x42
  3800                           
  3801  0062                     setDimmerLights_Adj@status:	
  3802                           ; 0 bytes @ 0x42
  3803                           
  3804  0062                     Sw_DimmerOnFunc@Idle:	
  3805                           ; 1 bytes @ 0x42
  3806                           
  3807                           
  3808                           ; 1 bytes @ 0x42
  3809  0062                     	ds	1
  3810  0063                     ??_setDimmerLights_Adj:	
  3811  0063                     setRFSW_Control@sw:	
  3812                           ; 0 bytes @ 0x43
  3813                           
  3814  0063                     setRF_DimmerValue@lights:	
  3815                           ; 1 bytes @ 0x43
  3816                           
  3817  0063                     Sw_DimmerOnFunc@sw:	
  3818                           ; 1 bytes @ 0x43
  3819                           
  3820                           
  3821                           ; 1 bytes @ 0x43
  3822  0063                     	ds	1
  3823  0064                     ??_setRFSW_AdjControl:	
  3824  0064                     DlyOff_Main@sw:	
  3825                           ; 0 bytes @ 0x44
  3826                           
  3827  0064                     setDimmerLights_Adj@lights:	
  3828                           ; 1 bytes @ 0x44
  3829                           
  3830  0064                     Sw_DimmerOffFunc@sw:	
  3831                           ; 1 bytes @ 0x44
  3832                           
  3833                           
  3834                           ; 1 bytes @ 0x44
  3835  0064                     	ds	1
  3836  0065                     ??_setDimmerLights_Main:	
  3837  0065                     ??_setSw_Main:	
  3838                           ; 0 bytes @ 0x45
  3839                           
  3840  0065                     ??_DelayOff_Main:	
  3841                           ; 0 bytes @ 0x45
  3842                           
  3843  0065                     setDimmerLights_Main@clear:	
  3844                           ; 0 bytes @ 0x45
  3845                           
  3846                           
  3847                           ; 1 bytes @ 0x45
  3848  0065                     	ds	1
  3849  0066                     setDimmerLights_Main@lights:	
  3850  0066                     setRFSW_AdjControl@sw:	
  3851                           ; 1 bytes @ 0x46
  3852                           
  3853                           
  3854                           ; 1 bytes @ 0x46
  3855  0066                     	ds	1
  3856  0067                     ??_setRF_Main:	
  3857  0067                     ??_getRxData:	
  3858                           ; 0 bytes @ 0x47
  3859                           
  3860  0067                     ??_setControl_Lights_Table:	
  3861                           ; 0 bytes @ 0x47
  3862                           
  3863  0067                     ??_DimmerLights_Main:	
  3864                           ; 0 bytes @ 0x47
  3865                           
  3866  0067                     _setSw_Main$6948:	
  3867                           ; 0 bytes @ 0x47
  3868                           
  3869                           
  3870                           ; 1 bytes @ 0x47
  3871  0067                     	ds	1
  3872  0068                     _setRF_Main$5840:	
  3873  0068                     _setSw_Main$6949:	
  3874                           ; 1 bytes @ 0x48
  3875                           
  3876                           
  3877                           ; 1 bytes @ 0x48
  3878  0068                     	ds	1
  3879  0069                     ??_RF_Main:	
  3880  0069                     setSw_Main@sw:	
  3881                           ; 0 bytes @ 0x49
  3882                           
  3883                           
  3884                           ; 1 bytes @ 0x49
  3885  0069                     	ds	1
  3886  006A                     ??_Switch_Main:	
  3887  006A                     ??_main:	
  3888                           ; 0 bytes @ 0x4A
  3889                           
  3890                           
  3891                           	psect	maintext
  3892  1513                     __pmaintext:	
  3893                           ; 0 bytes @ 0x4A
  3894 ;;
  3895 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3896 ;;
  3897 ;; *************** function _main *****************
  3898 ;; Defined at:
  3899 ;;		line 7 in file "../src/Main_B1.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;  argc            2    0[BANK2 ] int 
  3902 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;		None
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  2    0[BANK2 ] int 
  3907 ;; Registers used:
  3908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3909 ;; Tracked objects:
  3910 ;;		On entry : 17F/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3914 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3917 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3918 ;;Total ram usage:        4 bytes
  3919 ;; Hardware stack levels required when called:   15
  3920 ;; This function calls:
  3921 ;;		_Buzzer_Initialization
  3922 ;;		_Buzzer_Main
  3923 ;;		_CC2500_PowerOnInitial
  3924 ;;		_DelayOff_Initialization
  3925 ;;		_DelayOff_Main
  3926 ;;		_DimmerLights_Initialization
  3927 ;;		_DimmerLights_Main
  3928 ;;		_Flash_Memory_Initialization
  3929 ;;		_Flash_Memory_Main
  3930 ;;		_LED_Initialization
  3931 ;;		_LED_Main
  3932 ;;		_Load_Initialization
  3933 ;;		_Load_Main
  3934 ;;		_Mcu_Initialization
  3935 ;;		_RF_Initialization
  3936 ;;		_RF_Main
  3937 ;;		_Switch_Initialization
  3938 ;;		_Switch_Main
  3939 ;;		_Temp_Initialization
  3940 ;;		_Temp_Main
  3941 ;;		_WDT_Main
  3942 ;;		_getLoad_AD
  3943 ;;		_getTemp_AD
  3944 ;;		_myMain_Initialization
  3945 ;;		_my_MainTime
  3946 ;; This function is called by:
  3947 ;;		Startup code after reset
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           
  3952                           ;psect for function _main
  3953  1513                     _main:	
  3954                           
  3955                           ;Main_B1.c: 8: myMain_Initialization();
  3956                           
  3957                           ;incstack = 0
  3958                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3959  1513  319B  2352  3195   	fcall	_myMain_Initialization
  3960                           
  3961                           ;Main_B1.c: 9: Mcu_Initialization();
  3962  1516  319B  23F6  3195   	fcall	_Mcu_Initialization
  3963                           
  3964                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3965  1519  3186  269B  3195   	fcall	_Flash_Memory_Initialization
  3966                           
  3967                           ;Main_B1.c: 11: LED_Initialization();
  3968  151C  319A  22BF  3195   	fcall	_LED_Initialization
  3969                           
  3970                           ;Main_B1.c: 12: Buzzer_Initialization();
  3971  151F  3199  21D9  3195   	fcall	_Buzzer_Initialization
  3972                           
  3973                           ;Main_B1.c: 14: ;;
  3974                           ;Main_B1.c: 15: Temp_Initialization();
  3975  1522  3199  21E5  3195   	fcall	_Temp_Initialization
  3976                           
  3977                           ;Main_B1.c: 16: Load_Initialization();
  3978  1525  3190  2066  3195   	fcall	_Load_Initialization
  3979                           
  3980                           ;Main_B1.c: 17: ;;
  3981                           ;Main_B1.c: 18: DelayOff_Initialization();
  3982  1528  319A  2221  3195   	fcall	_DelayOff_Initialization
  3983                           
  3984                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3985  152B  319C  24E5  3195   	fcall	_DimmerLights_Initialization
  3986                           
  3987                           ;Main_B1.c: 21: ;;
  3988                           ;Main_B1.c: 22: ;;
  3989                           ;Main_B1.c: 23: ;;
  3990                           ;Main_B1.c: 24: Switch_Initialization();
  3991  152E  319A  22FD  3195   	fcall	_Switch_Initialization
  3992                           
  3993                           ;Main_B1.c: 25: RF_Initialization();
  3994  1531  3199  21DC  3195   	fcall	_RF_Initialization
  3995                           
  3996                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3997  1534  319C  24A4  3195   	fcall	_CC2500_PowerOnInitial
  3998  1537                     l10623:	
  3999                           ;Main_B1.c: 27: ;;
  4000                           ;Main_B1.c: 29: while (1) {
  4001                           
  4002                           
  4003                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  4004  1537  0021               	movlb	1	; select bank1
  4005  1538  1C20               	btfss	_myMain^(0+128),0
  4006  1539  2D42               	goto	l10627
  4007                           
  4008                           ;Main_B1.c: 37: getLoad_AD(0x05);
  4009  153A  3005               	movlw	5
  4010  153B  318B  234C  3195   	fcall	_getLoad_AD
  4011                           
  4012                           ;Main_B1.c: 41: getTemp_AD(0x09);
  4013  153E  3009               	movlw	9
  4014  153F  3191  215E  3195   	fcall	_getTemp_AD
  4015  1542                     l10627:	
  4016                           
  4017                           ;Main_B1.c: 56: }
  4018                           ;Main_B1.c: 92: if (myMain.T1_Timerout == 1) {
  4019  1542  0021               	movlb	1	; select bank1
  4020  1543  1D20               	btfss	_myMain^(0+128),2
  4021  1544  2D37               	goto	l10623
  4022                           
  4023                           ;Main_B1.c: 93: myMain.T1_Timerout = 0;
  4024  1545  1120               	bcf	_myMain^(0+128),2
  4025                           
  4026                           ;Main_B1.c: 94: my_MainTime();
  4027  1546  3196  267D  3195   	fcall	_my_MainTime
  4028                           
  4029                           ;Main_B1.c: 95: WDT_Main();
  4030  1549  319C  241A  3195   	fcall	_WDT_Main
  4031                           
  4032                           ;Main_B1.c: 96: ;;
  4033                           ;Main_B1.c: 97: ;;
  4034                           ;Main_B1.c: 98: if (myMain.PowerON) {
  4035  154C  0021               	movlb	1	; select bank1
  4036  154D  1C20               	btfss	_myMain^(0+128),0
  4037  154E  2D37               	goto	l10623
  4038                           
  4039                           ;Main_B1.c: 99: Flash_Memory_Main();
  4040  154F  319E  2629  3195   	fcall	_Flash_Memory_Main
  4041                           
  4042                           ;Main_B1.c: 101: LED_Main();
  4043  1552  319A  22CB  3195   	fcall	_LED_Main
  4044                           
  4045                           ;Main_B1.c: 102: Buzzer_Main();
  4046  1555  3193  2388  3195   	fcall	_Buzzer_Main
  4047                           
  4048                           ;Main_B1.c: 104: ;;
  4049                           ;Main_B1.c: 105: Temp_Main();
  4050  1558  3199  21E8  3195   	fcall	_Temp_Main
  4051                           
  4052                           ;Main_B1.c: 106: Load_Main();
  4053  155B  3182  220E  3195   	fcall	_Load_Main
  4054                           
  4055                           ;Main_B1.c: 107: ;;
  4056                           ;Main_B1.c: 109: ;;
  4057                           ;Main_B1.c: 110: DimmerLights_Main();
  4058  155E  319A  2286  3195   	fcall	_DimmerLights_Main
  4059                           
  4060                           ;Main_B1.c: 111: Switch_Main();
  4061  1561  319A  2251  3195   	fcall	_Switch_Main
  4062                           
  4063                           ;Main_B1.c: 112: ;;
  4064                           ;Main_B1.c: 113: ;;
  4065                           ;Main_B1.c: 115: RF_Main();
  4066  1564  3199  21DF  3195   	fcall	_RF_Main
  4067                           
  4068                           ;Main_B1.c: 116: DelayOff_Main();
  4069  1567  319A  2229  3195   	fcall	_DelayOff_Main
  4070                           
  4071                           ;Main_B1.c: 117: ;;
  4072  156A  2D37               	goto	l10623
  4073  156B                     __end_of_main:	
  4074                           ;Main_B1.c: 125: }
  4075                           ;Main_B1.c: 126: }
  4076                           ;Main_B1.c: 160: }
  4077                           ;Main_B1.c: 161: return (0);
  4078                           ;	Return value of _main is never used
  4079                           
  4080                           
  4081                           	psect	text1
  4082  167D                     __ptext1:	
  4083 ;; *************** function _my_MainTime *****************
  4084 ;; Defined at:
  4085 ;;		line 180 in file "../src/Main_B1.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;		None
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;		None
  4090 ;; Return value:  Size  Location     Type
  4091 ;;		None               void
  4092 ;; Registers used:
  4093 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4103 ;;Total ram usage:        0 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    7
  4106 ;; This function calls:
  4107 ;;		_setBuz
  4108 ;;		_setLoad_Enable
  4109 ;;		_setRF_Enable
  4110 ;;		_setSw_Enable
  4111 ;;		_setTemp_Enable
  4112 ;; This function is called by:
  4113 ;;		_main
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           
  4118                           ;psect for function _my_MainTime
  4119  167D                     _my_MainTime:	
  4120                           
  4121                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  4122                           
  4123                           ;incstack = 0
  4124                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4125  167D  0021               	movlb	1	; select bank1
  4126  167E  1820               	btfsc	_myMain^(0+128),0
  4127  167F  2EAF               	goto	l10437
  4128                           
  4129                           ;Main_B1.c: 183: myMain.PowerCount++;
  4130  1680  3001               	movlw	1
  4131  1681  07A2               	addwf	(_myMain^(0+128)+2),f
  4132  1682  3000               	movlw	0
  4133  1683  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4134                           
  4135                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  4136  1684  3002               	movlw	2
  4137  1685  3EA0               	addlw	_myMain& (0+255)
  4138  1686  0086               	movwf	6
  4139  1687  0187               	clrf	7
  4140  1688  3F40               	moviw [0]fsr1
  4141  1689  3A96               	xorlw	150
  4142  168A  1D03               	skipz
  4143  168B  2E8E               	goto	u11285
  4144  168C  3F41               	moviw [1]fsr1
  4145  168D  3A00               	xorlw	0
  4146  168E                     u11285:	
  4147  168E  1D03               	skipz
  4148  168F  2EC7               	goto	l10447
  4149                           
  4150                           ;Main_B1.c: 185: {
  4151                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  4152  1690  01A2               	clrf	(_myMain^(0+128)+2)
  4153  1691  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4154                           
  4155                           ;Main_B1.c: 187: myMain.PowerON = 1;
  4156  1692  1420               	bsf	_myMain^(0+128),0
  4157                           
  4158                           ;Main_B1.c: 190: setTemp_Enable(1);
  4159  1693  3001               	movlw	1
  4160  1694  319A  2261  3196   	fcall	_setTemp_Enable
  4161                           
  4162                           ;Main_B1.c: 194: setLoad_Enable(1);
  4163  1697  3001               	movlw	1
  4164  1698  319A  2272  3196   	fcall	_setLoad_Enable
  4165                           
  4166                           ;Main_B1.c: 200: setBuz(3, 50);
  4167  169B  3032               	movlw	50
  4168  169C  0020               	movlb	0	; select bank0
  4169  169D  00A9               	movwf	setBuz@time
  4170  169E  3000               	movlw	0
  4171  169F  00AA               	movwf	setBuz@time+1
  4172  16A0  3003               	movlw	3
  4173  16A1  3195  256B  3196   	fcall	_setBuz
  4174                           
  4175                           ;Main_B1.c: 201: myMain.SelfTest = 1;
  4176  16A4  0021               	movlb	1	; select bank1
  4177  16A5  17A0               	bsf	_myMain^(0+128),7
  4178                           
  4179                           ;Main_B1.c: 203: setSw_Enable(1);
  4180  16A6  3001               	movlw	1
  4181  16A7  319D  2594  3196   	fcall	_setSw_Enable
  4182                           
  4183                           ;Main_B1.c: 206: setRF_Enable(1);
  4184  16AA  3001               	movlw	1
  4185  16AB  319B  2326  3196   	fcall	_setRF_Enable
  4186                           
  4187                           ;Main_B1.c: 210: }
  4188                           ;Main_B1.c: 211: } else {
  4189  16AE  2EC7               	goto	l10447
  4190  16AF                     l10437:	
  4191                           
  4192                           ;Main_B1.c: 219: myMain.Count1++;
  4193  16AF  3001               	movlw	1
  4194  16B0  0021               	movlb	1	; select bank1
  4195  16B1  07A6               	addwf	(_myMain^(0+128)+6),f
  4196  16B2  3000               	movlw	0
  4197  16B3  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4198                           
  4199                           ;Main_B1.c: 220: if (myMain.Count1 == 100)
  4200  16B4  3006               	movlw	6
  4201  16B5  3EA0               	addlw	_myMain& (0+255)
  4202  16B6  0086               	movwf	6
  4203  16B7  0187               	clrf	7
  4204  16B8  3F40               	moviw [0]fsr1
  4205  16B9  3A64               	xorlw	100
  4206  16BA  1D03               	skipz
  4207  16BB  2EBE               	goto	u11295
  4208  16BC  3F41               	moviw [1]fsr1
  4209  16BD  3A00               	xorlw	0
  4210  16BE                     u11295:	
  4211  16BE  1D03               	skipz
  4212  16BF  2EC7               	goto	l10447
  4213                           
  4214                           ;Main_B1.c: 221: {
  4215                           ;Main_B1.c: 222: myMain.Count1 = 0;
  4216  16C0  01A6               	clrf	(_myMain^(0+128)+6)
  4217  16C1  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4218                           
  4219                           ;Main_B1.c: 234: if (myMain.Flag) {
  4220  16C2  1E20               	btfss	_myMain^(0+128),4
  4221  16C3  2EC6               	goto	l1556
  4222                           
  4223                           ;Main_B1.c: 235: myMain.Flag = 0;
  4224  16C4  1220               	bcf	_myMain^(0+128),4
  4225                           
  4226                           ;Main_B1.c: 244: } else {
  4227  16C5  2EC7               	goto	l10447
  4228  16C6                     l1556:	
  4229                           
  4230                           ;Main_B1.c: 245: myMain.Flag = 1;
  4231  16C6  1620               	bsf	_myMain^(0+128),4
  4232  16C7                     l10447:	
  4233                           
  4234                           ;Main_B1.c: 254: }
  4235                           ;Main_B1.c: 255: }
  4236                           ;Main_B1.c: 257: }
  4237                           ;Main_B1.c: 259: myMain.Count2++;
  4238  16C7  3001               	movlw	1
  4239  16C8  0021               	movlb	1	; select bank1
  4240  16C9  07A8               	addwf	(_myMain^(0+128)+8),f
  4241  16CA  3000               	movlw	0
  4242  16CB  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  4243                           
  4244                           ;Main_B1.c: 260: if (myMain.Count2 == 50) {
  4245  16CC  3008               	movlw	8
  4246  16CD  3EA0               	addlw	_myMain& (0+255)
  4247  16CE  0086               	movwf	6
  4248  16CF  0187               	clrf	7
  4249  16D0  3F40               	moviw [0]fsr1
  4250  16D1  3A32               	xorlw	50
  4251  16D2  1D03               	skipz
  4252  16D3  2ED6               	goto	u11315
  4253  16D4  3F41               	moviw [1]fsr1
  4254  16D5  3A00               	xorlw	0
  4255  16D6                     u11315:	
  4256  16D6  1D03               	skipz
  4257  16D7  0008               	return
  4258                           
  4259                           ;Main_B1.c: 261: myMain.Count2 = 0;
  4260  16D8  01A8               	clrf	(_myMain^(0+128)+8)
  4261  16D9  01A9               	clrf	((_myMain+1)^(0+128)+8)
  4262  16DA  0008               	return
  4263  16DB                     __end_of_my_MainTime:	
  4264                           
  4265                           	psect	text2
  4266  1A61                     __ptext2:	
  4267 ;; *************** function _setTemp_Enable *****************
  4268 ;; Defined at:
  4269 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;  command         1    wreg     unsigned char 
  4272 ;; Auto vars:     Size  Location     Type
  4273 ;;  command         1    0[BANK0 ] unsigned char 
  4274 ;; Return value:  Size  Location     Type
  4275 ;;		None               void
  4276 ;; Registers used:
  4277 ;;		wreg
  4278 ;; Tracked objects:
  4279 ;;		On entry : 0/0
  4280 ;;		On exit  : 0/0
  4281 ;;		Unchanged: 0/0
  4282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;Total ram usage:        1 bytes
  4288 ;; Hardware stack levels used:    1
  4289 ;; Hardware stack levels required when called:    5
  4290 ;; This function calls:
  4291 ;;		Nothing
  4292 ;; This function is called by:
  4293 ;;		_my_MainTime
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           
  4298                           ;psect for function _setTemp_Enable
  4299  1A61                     _setTemp_Enable:	
  4300                           
  4301                           ;incstack = 0
  4302                           ; Regs used in _setTemp_Enable: [wreg]
  4303                           ;setTemp_Enable@command stored from wreg
  4304  1A61  0020               	movlb	0	; select bank0
  4305  1A62  00A0               	movwf	setTemp_Enable@command
  4306                           
  4307                           ;OverTemperature_B1.c: 17: Temp.Enable = command;
  4308  1A63  0820               	movf	setTemp_Enable@command,w
  4309  1A64  0021               	movlb	1	; select bank1
  4310  1A65  105C               	bcf	_Temp^(0+128),0
  4311  1A66  1D03               	skipz
  4312  1A67  145C               	bsf	_Temp^(0+128),0
  4313  1A68  0008               	return
  4314  1A69                     __end_of_setTemp_Enable:	
  4315                           
  4316                           	psect	text3
  4317  1A72                     __ptext3:	
  4318 ;; *************** function _setLoad_Enable *****************
  4319 ;; Defined at:
  4320 ;;		line 258 in file "../src/OverLoad_B1.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;  command         1    wreg     unsigned char 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  command         1    0[BANK0 ] unsigned char 
  4325 ;; Return value:  Size  Location     Type
  4326 ;;		None               void
  4327 ;; Registers used:
  4328 ;;		wreg
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4337 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4338 ;;Total ram usage:        1 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    5
  4341 ;; This function calls:
  4342 ;;		Nothing
  4343 ;; This function is called by:
  4344 ;;		_my_MainTime
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function _setLoad_Enable
  4350  1A72                     _setLoad_Enable:	
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in _setLoad_Enable: [wreg]
  4354                           ;setLoad_Enable@command stored from wreg
  4355  1A72  0020               	movlb	0	; select bank0
  4356  1A73  00A0               	movwf	setLoad_Enable@command
  4357                           
  4358                           ;OverLoad_B1.c: 259: Load1.Enable = command;
  4359  1A74  0820               	movf	setLoad_Enable@command,w
  4360  1A75  0023               	movlb	3	; select bank3
  4361  1A76  1020               	bcf	_Load1^(0+384),0
  4362  1A77  1D03               	skipz
  4363  1A78  1420               	bsf	_Load1^(0+384),0
  4364                           
  4365                           ;OverLoad_B1.c: 260: Load1.GO = 0;
  4366  1A79  10A0               	bcf	_Load1^(0+384),1
  4367  1A7A  0008               	return
  4368  1A7B                     __end_of_setLoad_Enable:	
  4369                           
  4370                           	psect	text4
  4371  1B52                     __ptext4:	
  4372 ;; *************** function _myMain_Initialization *****************
  4373 ;; Defined at:
  4374 ;;		line 167 in file "../src/Main_B1.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;		None
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;		None
  4379 ;; Return value:  Size  Location     Type
  4380 ;;		None               void
  4381 ;; Registers used:
  4382 ;;		wreg, fsr1l, fsr1h
  4383 ;; Tracked objects:
  4384 ;;		On entry : 0/0
  4385 ;;		On exit  : 0/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4391 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4392 ;;Total ram usage:        1 bytes
  4393 ;; Hardware stack levels used:    1
  4394 ;; Hardware stack levels required when called:    5
  4395 ;; This function calls:
  4396 ;;		Nothing
  4397 ;; This function is called by:
  4398 ;;		_main
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           
  4403                           ;psect for function _myMain_Initialization
  4404  1B52                     _myMain_Initialization:	
  4405                           
  4406                           ;Main_B1.c: 169: product = &_product;
  4407                           
  4408                           ;incstack = 0
  4409                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4410  1B52  3045               	movlw	__product& (0+255)
  4411  1B53  0020               	movlb	0	; select bank0
  4412  1B54  00A0               	movwf	??_myMain_Initialization
  4413  1B55  0820               	movf	??_myMain_Initialization,w
  4414  1B56  00ED               	movwf	_product
  4415                           
  4416                           ;Main_B1.c: 170: product->Data[20] = 210;
  4417  1B57  30D2               	movlw	210
  4418  1B58  00A0               	movwf	??_myMain_Initialization
  4419  1B59  086D               	movf	_product,w
  4420  1B5A  3E14               	addlw	20
  4421  1B5B  0086               	movwf	6
  4422  1B5C  3002               	movlw	2	; select bank4/5
  4423  1B5D  0087               	movwf	7
  4424  1B5E  0820               	movf	??_myMain_Initialization,w
  4425  1B5F  0081               	movwf	1
  4426  1B60  0008               	return
  4427  1B61                     __end_of_myMain_Initialization:	
  4428                           
  4429                           	psect	text5
  4430  115E                     __ptext5:	
  4431 ;; *************** function _getTemp_AD *****************
  4432 ;; Defined at:
  4433 ;;		line 33 in file "../src/OverTemperature_B1.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;  channel         1    wreg     unsigned char 
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;  channel         1    5[BANK0 ] unsigned char 
  4438 ;; Return value:  Size  Location     Type
  4439 ;;		None               void
  4440 ;; Registers used:
  4441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4448 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4449 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4450 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4451 ;;Total ram usage:        2 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:    7
  4454 ;; This function calls:
  4455 ;;		_getAD
  4456 ;; This function is called by:
  4457 ;;		_main
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           
  4462                           ;psect for function _getTemp_AD
  4463  115E                     _getTemp_AD:	
  4464                           
  4465                           ;incstack = 0
  4466                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4467                           ;getTemp_AD@channel stored from wreg
  4468  115E  0020               	movlb	0	; select bank0
  4469  115F  00A5               	movwf	getTemp_AD@channel
  4470                           
  4471                           ;OverTemperature_B1.c: 34: if (Temp.ADtoGO == 1) {
  4472  1160  0021               	movlb	1	; select bank1
  4473  1161  1D5C               	btfss	_Temp^(0+128),2
  4474  1162  0008               	return
  4475                           
  4476                           ;OverTemperature_B1.c: 35: Temp.ADRES = getAD(channel, 0xf0);
  4477  1163  30F0               	movlw	240
  4478  1164  0020               	movlb	0	; select bank0
  4479  1165  00A4               	movwf	??_getTemp_AD
  4480  1166  0824               	movf	??_getTemp_AD,w
  4481  1167  00A0               	movwf	getAD@adcon1
  4482  1168  0825               	movf	getTemp_AD@channel,w
  4483  1169  319E  2648  3191   	fcall	_getAD
  4484  116C  0020               	movlb	0	; select bank0
  4485  116D  0821               	movf	?_getAD+1,w
  4486  116E  0021               	movlb	1	; select bank1
  4487  116F  01E9               	clrf	((_Temp+1)^(0+128)+12)
  4488  1170  07E9               	addwf	((_Temp+1)^(0+128)+12),f
  4489  1171  0020               	movlb	0	; select bank0
  4490  1172  0820               	movf	?_getAD,w
  4491  1173  0021               	movlb	1	; select bank1
  4492  1174  01E8               	clrf	(_Temp^(0+128)+12)
  4493  1175  07E8               	addwf	(_Temp^(0+128)+12),f
  4494                           
  4495                           ;OverTemperature_B1.c: 36: if (Temp.ADH[0] < Temp.ADRES) {
  4496  1176  0869               	movf	((_Temp+1)^(0+128)+12),w
  4497  1177  0265               	subwf	((_Temp+1)^(0+128)+8),w
  4498  1178  1D03               	skipz
  4499  1179  297C               	goto	u11255
  4500  117A  0868               	movf	(_Temp^(0+128)+12),w
  4501  117B  0264               	subwf	(_Temp^(0+128)+8),w
  4502  117C                     u11255:	
  4503  117C  1803               	skipnc
  4504  117D  2985               	goto	l10411
  4505                           
  4506                           ;OverTemperature_B1.c: 37: Temp.ADH[0] = Temp.ADRES;
  4507  117E  0869               	movf	((_Temp+1)^(0+128)+12),w
  4508  117F  01E5               	clrf	((_Temp+1)^(0+128)+8)
  4509  1180  07E5               	addwf	((_Temp+1)^(0+128)+8),f
  4510  1181  0868               	movf	(_Temp^(0+128)+12),w
  4511  1182  01E4               	clrf	(_Temp^(0+128)+8)
  4512  1183  07E4               	addwf	(_Temp^(0+128)+8),f
  4513                           
  4514                           ;OverTemperature_B1.c: 38: } else if (Temp.ADH[1] < Temp.ADRES) {
  4515  1184  0008               	return
  4516  1185                     l10411:	
  4517  1185  0869               	movf	((_Temp+1)^(0+128)+12),w
  4518  1186  0267               	subwf	((_Temp+1)^(0+128)+10),w
  4519  1187  1D03               	skipz
  4520  1188  298B               	goto	u11265
  4521  1189  0868               	movf	(_Temp^(0+128)+12),w
  4522  118A  0266               	subwf	(_Temp^(0+128)+10),w
  4523  118B                     u11265:	
  4524  118B  1803               	skipnc
  4525  118C  0008               	return
  4526                           
  4527                           ;OverTemperature_B1.c: 39: Temp.ADH[1] = Temp.ADRES;
  4528  118D  0869               	movf	((_Temp+1)^(0+128)+12),w
  4529  118E  01E7               	clrf	((_Temp+1)^(0+128)+10)
  4530  118F  07E7               	addwf	((_Temp+1)^(0+128)+10),f
  4531  1190  0868               	movf	(_Temp^(0+128)+12),w
  4532  1191  01E6               	clrf	(_Temp^(0+128)+10)
  4533  1192  07E6               	addwf	(_Temp^(0+128)+10),f
  4534  1193  0008               	return
  4535  1194                     __end_of_getTemp_AD:	
  4536                           
  4537                           	psect	text6
  4538  0B4C                     __ptext6:	
  4539 ;; *************** function _getLoad_AD *****************
  4540 ;; Defined at:
  4541 ;;		line 15 in file "../src/OverLoad_B1.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;  channel         1    wreg     unsigned char 
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;  channel         1    6[BANK0 ] unsigned char 
  4546 ;;  i               1    8[BANK0 ] unsigned char 
  4547 ;;  j               1    7[BANK0 ] unsigned char 
  4548 ;; Return value:  Size  Location     Type
  4549 ;;		None               void
  4550 ;; Registers used:
  4551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4552 ;; Tracked objects:
  4553 ;;		On entry : 0/0
  4554 ;;		On exit  : 0/0
  4555 ;;		Unchanged: 0/0
  4556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4558 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4559 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4560 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4561 ;;Total ram usage:        5 bytes
  4562 ;; Hardware stack levels used:    1
  4563 ;; Hardware stack levels required when called:    7
  4564 ;; This function calls:
  4565 ;;		_getAD
  4566 ;; This function is called by:
  4567 ;;		_main
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           
  4572                           ;psect for function _getLoad_AD
  4573  0B4C                     _getLoad_AD:	
  4574                           
  4575                           ;incstack = 0
  4576                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4577                           ;getLoad_AD@channel stored from wreg
  4578  0B4C  0020               	movlb	0	; select bank0
  4579  0B4D  00A6               	movwf	getLoad_AD@channel
  4580                           
  4581                           ;OverLoad_B1.c: 16: char i = 0, j = 0;
  4582  0B4E  01A8               	clrf	getLoad_AD@i
  4583  0B4F  01A7               	clrf	getLoad_AD@j
  4584                           
  4585                           ;OverLoad_B1.c: 18: if (Load1.ADtoGO == 1) {
  4586  0B50  0023               	movlb	3	; select bank3
  4587  0B51  1E20               	btfss	_Load1^(0+384),4
  4588  0B52  0008               	return
  4589                           
  4590                           ;OverLoad_B1.c: 19: Load1.ADRES = getAD(channel, 0xc0);
  4591  0B53  30C0               	movlw	192
  4592  0B54  0020               	movlb	0	; select bank0
  4593  0B55  00A4               	movwf	??_getLoad_AD
  4594  0B56  0824               	movf	??_getLoad_AD,w
  4595  0B57  00A0               	movwf	getAD@adcon1
  4596  0B58  0826               	movf	getLoad_AD@channel,w
  4597  0B59  319E  2648  318B   	fcall	_getAD
  4598  0B5C  0020               	movlb	0	; select bank0
  4599  0B5D  0821               	movf	?_getAD+1,w
  4600  0B5E  0023               	movlb	3	; select bank3
  4601  0B5F  01D3               	clrf	((_Load1+1)^(0+384)+50)
  4602  0B60  07D3               	addwf	((_Load1+1)^(0+384)+50),f
  4603  0B61  0020               	movlb	0	; select bank0
  4604  0B62  0820               	movf	?_getAD,w
  4605  0B63  0023               	movlb	3	; select bank3
  4606  0B64  01D2               	clrf	(_Load1^(0+384)+50)
  4607  0B65  07D2               	addwf	(_Load1^(0+384)+50),f
  4608                           
  4609                           ;OverLoad_B1.c: 20: for (i = 0; i < 5; i++) {
  4610  0B66  0020               	movlb	0	; select bank0
  4611  0B67  01A8               	clrf	getLoad_AD@i
  4612  0B68  3005               	movlw	5
  4613  0B69  0228               	subwf	getLoad_AD@i,w
  4614  0B6A  1803               	btfsc	3,0
  4615  0B6B  2B97               	goto	l10387
  4616  0B6C                     l10377:	
  4617                           
  4618                           ;OverLoad_B1.c: 21: if (Load1.AH[i] < Load1.ADRES) {
  4619  0B6C  3528               	lslf	getLoad_AD@i,w
  4620  0B6D  3EA8               	addlw	(_Load1+8)& (0+255)
  4621  0B6E  0086               	movwf	6
  4622  0B6F  3001               	movlw	1	; select bank3/4
  4623  0B70  0087               	movwf	7
  4624  0B71  3F40               	moviw [0]fsr1
  4625  0B72  00A4               	movwf	??_getLoad_AD
  4626  0B73  3F41               	moviw [1]fsr1
  4627  0B74  00A5               	movwf	??_getLoad_AD+1
  4628  0B75  0023               	movlb	3	; select bank3
  4629  0B76  0853               	movf	((_Load1+1)^(0+384)+50),w
  4630  0B77  0020               	movlb	0	; select bank0
  4631  0B78  0225               	subwf	??_getLoad_AD+1,w
  4632  0B79  1D03               	skipz
  4633  0B7A  2B7F               	goto	u11185
  4634  0B7B  0023               	movlb	3	; select bank3
  4635  0B7C  0852               	movf	(_Load1^(0+384)+50),w
  4636  0B7D  0020               	movlb	0	; select bank0
  4637  0B7E  0224               	subwf	??_getLoad_AD,w
  4638  0B7F                     u11185:	
  4639  0B7F  1803               	skipnc
  4640  0B80  2B8F               	goto	l10383
  4641                           
  4642                           ;OverLoad_B1.c: 22: Load1.AH[i] = Load1.ADRES;
  4643  0B81  3528               	lslf	getLoad_AD@i,w
  4644  0B82  3EA8               	addlw	(_Load1+8)& (0+255)
  4645  0B83  0086               	movwf	6
  4646  0B84  3001               	movlw	1	; select bank3/4
  4647  0B85  0087               	movwf	7
  4648  0B86  0023               	movlb	3	; select bank3
  4649  0B87  0852               	movf	(_Load1^(0+384)+50),w
  4650  0B88  3FC0               	movwi [0]fsr1
  4651  0B89  0853               	movf	((_Load1+1)^(0+384)+50),w
  4652  0B8A  3FC1               	movwi [1]fsr1
  4653                           
  4654                           ;OverLoad_B1.c: 23: j = 1;
  4655  0B8B  0020               	movlb	0	; select bank0
  4656  0B8C  01A7               	clrf	getLoad_AD@j
  4657  0B8D  0AA7               	incf	getLoad_AD@j,f
  4658                           
  4659                           ;OverLoad_B1.c: 24: break;
  4660  0B8E  2B97               	goto	l10387
  4661  0B8F                     l10383:	
  4662  0B8F  3001               	movlw	1
  4663  0B90  00A4               	movwf	??_getLoad_AD
  4664  0B91  0824               	movf	??_getLoad_AD,w
  4665  0B92  07A8               	addwf	getLoad_AD@i,f
  4666  0B93  3005               	movlw	5
  4667  0B94  0228               	subwf	getLoad_AD@i,w
  4668  0B95  1C03               	skipc
  4669  0B96  2B6C               	goto	l10377
  4670  0B97                     l10387:	
  4671                           
  4672                           ;OverLoad_B1.c: 25: }
  4673                           ;OverLoad_B1.c: 26: }
  4674                           ;OverLoad_B1.c: 27: if (j == 0) {
  4675  0B97  08A7               	movf	getLoad_AD@j,f
  4676  0B98  1D03               	skipz
  4677  0B99  0008               	return
  4678                           
  4679                           ;OverLoad_B1.c: 28: for (i = 0; i < 5; i++) {
  4680  0B9A  01A8               	clrf	getLoad_AD@i
  4681  0B9B                     L1:	
  4682  0B9B  3005               	movlw	5
  4683  0B9C  0228               	subwf	getLoad_AD@i,w
  4684  0B9D  1803               	btfsc	3,0
  4685  0B9E  0008               	return
  4686                           
  4687                           ;OverLoad_B1.c: 29: if (Load1.AL[i] > Load1.ADRES) {
  4688  0B9F  3528               	lslf	getLoad_AD@i,w
  4689  0BA0  3EBA               	addlw	(_Load1+26)& (0+255)
  4690  0BA1  0086               	movwf	6
  4691  0BA2  3001               	movlw	1	; select bank3/4
  4692  0BA3  0087               	movwf	7
  4693  0BA4  3F40               	moviw [0]fsr1
  4694  0BA5  00A4               	movwf	??_getLoad_AD
  4695  0BA6  3F41               	moviw [1]fsr1
  4696  0BA7  00A5               	movwf	??_getLoad_AD+1
  4697  0BA8  0825               	movf	??_getLoad_AD+1,w
  4698  0BA9  0023               	movlb	3	; select bank3
  4699  0BAA  0253               	subwf	((_Load1+1)^(0+384)+50),w
  4700  0BAB  1D03               	skipz
  4701  0BAC  2BB1               	goto	u11225
  4702  0BAD  0020               	movlb	0	; select bank0
  4703  0BAE  0824               	movf	??_getLoad_AD,w
  4704  0BAF  0023               	movlb	3	; select bank3
  4705  0BB0  0252               	subwf	(_Load1^(0+384)+50),w
  4706  0BB1                     u11225:	
  4707  0BB1  1803               	skipnc
  4708  0BB2  2BBF               	goto	l10399
  4709                           
  4710                           ;OverLoad_B1.c: 30: Load1.AL[i] = Load1.ADRES;
  4711  0BB3  0020               	movlb	0	; select bank0
  4712  0BB4  3528               	lslf	getLoad_AD@i,w
  4713  0BB5  3EBA               	addlw	(_Load1+26)& (0+255)
  4714  0BB6  0086               	movwf	6
  4715  0BB7  3001               	movlw	1	; select bank3/4
  4716  0BB8  0087               	movwf	7
  4717  0BB9  0023               	movlb	3	; select bank3
  4718  0BBA  0852               	movf	(_Load1^(0+384)+50),w
  4719  0BBB  3FC0               	movwi [0]fsr1
  4720  0BBC  0853               	movf	((_Load1+1)^(0+384)+50),w
  4721  0BBD  3FC1               	movwi [1]fsr1
  4722                           
  4723                           ;OverLoad_B1.c: 31: break;
  4724  0BBE  0008               	return
  4725  0BBF                     l10399:	
  4726  0BBF  3001               	movlw	1
  4727  0BC0  0020               	movlb	0	; select bank0
  4728  0BC1  00A4               	movwf	??_getLoad_AD
  4729  0BC2  0824               	movf	??_getLoad_AD,w
  4730  0BC3  07A8               	addwf	getLoad_AD@i,f
  4731  0BC4  2B9B               	goto	L1
  4732  0BC5                     __end_of_getLoad_AD:	
  4733                           
  4734                           	psect	text7
  4735  1E48                     __ptext7:	
  4736 ;; *************** function _getAD *****************
  4737 ;; Defined at:
  4738 ;;		line 453 in file "../src/MCU_B1.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;  adcon0          1    wreg     unsigned char 
  4741 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  2    0[BANK0 ] int 
  4746 ;; Registers used:
  4747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4753 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4754 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4756 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4757 ;;Total ram usage:        4 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; Hardware stack levels required when called:    6
  4760 ;; This function calls:
  4761 ;;		_Timeout_Counter
  4762 ;;		_set_TimeoutCleared
  4763 ;; This function is called by:
  4764 ;;		_getLoad_AD
  4765 ;;		_getTemp_AD
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           
  4770                           ;psect for function _getAD
  4771  1E48                     _getAD:	
  4772                           
  4773                           ;incstack = 0
  4774                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4775                           ;getAD@adcon0 stored from wreg
  4776  1E48  0020               	movlb	0	; select bank0
  4777  1E49  00A3               	movwf	getAD@adcon0
  4778                           
  4779                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4780  1E4A  0823               	movf	getAD@adcon0,w
  4781  1E4B  0021               	movlb	1	; select bank1
  4782  1E4C  009D               	movwf	29	;volatile
  4783                           
  4784                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4785  1E4D  0020               	movlb	0	; select bank0
  4786  1E4E  0820               	movf	getAD@adcon1,w
  4787  1E4F  0021               	movlb	1	; select bank1
  4788  1E50  009E               	movwf	30	;volatile
  4789                           
  4790                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4791  1E51  149D               	bsf	29,1	;volatile
  4792                           
  4793                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4794  1E52  2E56               	goto	l9829
  4795  1E53                     l9827:	
  4796                           
  4797                           ;MCU_B1.c: 458: Timeout_Counter();
  4798  1E53  319C  248F  319E   	fcall	_Timeout_Counter
  4799  1E56                     l9829:	
  4800  1E56  0021               	movlb	1	; select bank1
  4801  1E57  1C9D               	btfss	29,1	;volatile
  4802  1E58  2E5B               	goto	l9833
  4803  1E59  1D30               	btfss	(_myMain^(0+128)+16),2
  4804  1E5A  2E53               	goto	l9827
  4805  1E5B                     l9833:	
  4806                           
  4807                           ;MCU_B1.c: 459: };
  4808                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4809  1E5B  3199  21FB         	fcall	_set_TimeoutCleared
  4810                           
  4811                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4812  1E5D  0021               	movlb	1	; select bank1
  4813  1E5E  081C               	movf	28,w	;volatile
  4814  1E5F  0020               	movlb	0	; select bank0
  4815  1E60  01A1               	clrf	?_getAD+1
  4816  1E61  07A1               	addwf	?_getAD+1,f
  4817  1E62  0021               	movlb	1	; select bank1
  4818  1E63  081B               	movf	27,w	;volatile
  4819  1E64  0020               	movlb	0	; select bank0
  4820  1E65  01A0               	clrf	?_getAD
  4821  1E66  07A0               	addwf	?_getAD,f
  4822  1E67  0008               	return
  4823  1E68                     __end_of_getAD:	
  4824                           
  4825                           	psect	text8
  4826  1C1A                     __ptext8:	
  4827 ;; *************** function _WDT_Main *****************
  4828 ;; Defined at:
  4829 ;;		line 1019 in file "../src/MCU_B1.c"
  4830 ;; Parameters:    Size  Location     Type
  4831 ;;		None
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;		None
  4834 ;; Return value:  Size  Location     Type
  4835 ;;		None               void
  4836 ;; Registers used:
  4837 ;;		wreg, status,2, status,0, pclath, cstack
  4838 ;; Tracked objects:
  4839 ;;		On entry : 0/0
  4840 ;;		On exit  : 0/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4845 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4846 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;Total ram usage:        1 bytes
  4848 ;; Hardware stack levels used:    1
  4849 ;; Hardware stack levels required when called:    6
  4850 ;; This function calls:
  4851 ;;		_WDT_Clearing
  4852 ;; This function is called by:
  4853 ;;		_main
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           
  4858                           ;psect for function _WDT_Main
  4859  1C1A                     _WDT_Main:	
  4860                           
  4861                           ;MCU_B1.c: 1020: if (WDT.Enable == 1) {
  4862                           
  4863                           ;incstack = 0
  4864                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4865  1C1A  0021               	movlb	1	; select bank1
  4866  1C1B  1C50               	btfss	_WDT^(0+128),0
  4867  1C1C  0008               	return
  4868                           
  4869                           ;MCU_B1.c: 1021: if (WDT.Timer-- > 0) {
  4870  1C1D  3001               	movlw	1
  4871  1C1E  02D1               	subwf	(_WDT^(0+128)+1),f
  4872  1C1F  0851               	movf	(_WDT^(0+128)+1),w
  4873  1C20  3AFF               	xorlw	255
  4874  1C21  1903               	skipnz
  4875  1C22  0008               	return
  4876                           
  4877                           ;MCU_B1.c: 1022: WDT.Timer = 100;
  4878  1C23  3064               	movlw	100
  4879  1C24  0020               	movlb	0	; select bank0
  4880  1C25  00A0               	movwf	??_WDT_Main
  4881  1C26  0820               	movf	??_WDT_Main,w
  4882  1C27  0021               	movlb	1	; select bank1
  4883  1C28  00D1               	movwf	(_WDT^(0+128)+1)
  4884                           
  4885                           ;MCU_B1.c: 1023: WDT_Clearing();
  4886  1C29  3180  2002         	fcall	_WDT_Clearing
  4887  1C2B  0008               	return
  4888  1C2C                     __end_of_WDT_Main:	
  4889                           
  4890                           	psect	text9
  4891  0002                     __ptext9:	
  4892 ;; *************** function _WDT_Clearing *****************
  4893 ;; Defined at:
  4894 ;;		line 1029 in file "../src/MCU_B1.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;		None
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;		None
  4899 ;; Return value:  Size  Location     Type
  4900 ;;		None               void
  4901 ;; Registers used:
  4902 ;;		None
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;Total ram usage:        0 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; Hardware stack levels required when called:    5
  4915 ;; This function calls:
  4916 ;;		Nothing
  4917 ;; This function is called by:
  4918 ;;		_WDT_Main
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           
  4923                           ;psect for function _WDT_Clearing
  4924  0002                     _WDT_Clearing:	
  4925                           
  4926                           ;incstack = 0
  4927                           ; Regs used in _WDT_Clearing: []
  4928  0002  0064               	clrwdt	;# 
  4929  0003  0008               	return
  4930  0004                     __end_of_WDT_Clearing:	
  4931                           
  4932                           	psect	text10
  4933  19E8                     __ptext10:	
  4934 ;; *************** function _Temp_Main *****************
  4935 ;; Defined at:
  4936 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;		None
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;		None
  4941 ;; Return value:  Size  Location     Type
  4942 ;;		None               void
  4943 ;; Registers used:
  4944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;Total ram usage:        0 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; Hardware stack levels required when called:   11
  4957 ;; This function calls:
  4958 ;;		_setTemp_Main
  4959 ;; This function is called by:
  4960 ;;		_main
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           
  4965                           ;psect for function _Temp_Main
  4966  19E8                     _Temp_Main:	
  4967                           
  4968                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4969                           
  4970                           ;incstack = 0
  4971                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4972  19E8  318B  23C5         	fcall	_setTemp_Main
  4973  19EA  0008               	return
  4974  19EB                     __end_of_Temp_Main:	
  4975                           
  4976                           	psect	text11
  4977  0BC5                     __ptext11:	
  4978 ;; *************** function _setTemp_Main *****************
  4979 ;; Defined at:
  4980 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;		None
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;		None
  4985 ;; Return value:  Size  Location     Type
  4986 ;;		None               void
  4987 ;; Registers used:
  4988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4997 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4998 ;;Total ram usage:        1 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:   10
  5001 ;; This function calls:
  5002 ;;		_getLoad_Safe
  5003 ;;		_setOverTemp_Exceptions
  5004 ;; This function is called by:
  5005 ;;		_Temp_Main
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           
  5010                           ;psect for function _setTemp_Main
  5011  0BC5                     _setTemp_Main:	
  5012                           
  5013                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5014                           
  5015                           ;incstack = 0
  5016                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5017  0BC5  0021               	movlb	1	; select bank1
  5018  0BC6  1C5C               	btfss	_Temp^(0+128),0
  5019  0BC7  0008               	return
  5020                           
  5021                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  5022  0BC8  195C               	btfsc	_Temp^(0+128),2
  5023  0BC9  2BE7               	goto	l9913
  5024                           
  5025                           ;OverTemperature_B1.c: 60: Temp.Time++;
  5026  0BCA  3001               	movlw	1
  5027  0BCB  07DD               	addwf	(_Temp^(0+128)+1),f
  5028  0BCC  3000               	movlw	0
  5029  0BCD  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5030                           
  5031                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  5032  0BCE  3001               	movlw	1
  5033  0BCF  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5034  0BD0  30F4               	movlw	244
  5035  0BD1  1903               	skipnz
  5036  0BD2  025D               	subwf	(_Temp^(0+128)+1),w
  5037  0BD3  1C03               	skipc
  5038  0BD4  0008               	return
  5039                           
  5040                           ;OverTemperature_B1.c: 62: if (getLoad_Safe() == 1) {
  5041  0BD5  319A  2259  318B   	fcall	_getLoad_Safe
  5042  0BD8  3A01               	xorlw	1
  5043  0BD9  1D03               	skipz
  5044  0BDA  2BE1               	goto	l9911
  5045                           
  5046                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  5047  0BDB  0021               	movlb	1	; select bank1
  5048  0BDC  01DD               	clrf	(_Temp^(0+128)+1)
  5049  0BDD  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5050                           
  5051                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  5052  0BDE  155C               	bsf	_Temp^(0+128),2
  5053                           
  5054                           ;OverTemperature_B1.c: 65: Temp.Safe = 0;
  5055  0BDF  125C               	bcf	_Temp^(0+128),4
  5056                           
  5057                           ;OverTemperature_B1.c: 67: } else {
  5058  0BE0  0008               	return
  5059  0BE1                     l9911:	
  5060                           
  5061                           ;OverTemperature_B1.c: 68: Temp.Time = 500;
  5062  0BE1  30F4               	movlw	244
  5063  0BE2  0021               	movlb	1	; select bank1
  5064  0BE3  00DD               	movwf	(_Temp^(0+128)+1)
  5065  0BE4  3001               	movlw	1
  5066  0BE5  00DE               	movwf	(_Temp^(0+128)+2)
  5067                           
  5068                           ;OverTemperature_B1.c: 69: }
  5069                           ;OverTemperature_B1.c: 70: }
  5070                           ;OverTemperature_B1.c: 71: } else {
  5071  0BE6  0008               	return
  5072  0BE7                     l9913:	
  5073                           
  5074                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5075  0BE7  3001               	movlw	1
  5076  0BE8  07DD               	addwf	(_Temp^(0+128)+1),f
  5077  0BE9  3000               	movlw	0
  5078  0BEA  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5079                           
  5080                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 4) {
  5081  0BEB  3000               	movlw	0
  5082  0BEC  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5083  0BED  3004               	movlw	4
  5084  0BEE  1903               	skipnz
  5085  0BEF  025D               	subwf	(_Temp^(0+128)+1),w
  5086  0BF0  1C03               	skipc
  5087  0BF1  0008               	return
  5088                           
  5089                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5090  0BF2  01DD               	clrf	(_Temp^(0+128)+1)
  5091  0BF3  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5092                           
  5093                           ;OverTemperature_B1.c: 75: Temp.ADtoGO = 0;
  5094  0BF4  115C               	bcf	_Temp^(0+128),2
  5095                           
  5096                           ;OverTemperature_B1.c: 76: Temp.AD = Temp.ADH[1];
  5097  0BF5  0867               	movf	((_Temp+1)^(0+128)+10),w
  5098  0BF6  01E3               	clrf	((_Temp+1)^(0+128)+6)
  5099  0BF7  07E3               	addwf	((_Temp+1)^(0+128)+6),f
  5100  0BF8  0866               	movf	(_Temp^(0+128)+10),w
  5101  0BF9  01E2               	clrf	(_Temp^(0+128)+6)
  5102  0BFA  07E2               	addwf	(_Temp^(0+128)+6),f
  5103                           
  5104                           ;OverTemperature_B1.c: 77: if (Temp.ERROR == 1) {
  5105  0BFB  1CDC               	btfss	_Temp^(0+128),1
  5106  0BFC  2C14               	goto	l9935
  5107                           
  5108                           ;OverTemperature_B1.c: 78: if (Temp.AD >= 600) {
  5109  0BFD  3002               	movlw	2
  5110  0BFE  0263               	subwf	((_Temp+1)^(0+128)+6),w
  5111  0BFF  3058               	movlw	88
  5112  0C00  1903               	skipnz
  5113  0C01  0262               	subwf	(_Temp^(0+128)+6),w
  5114  0C02  1C03               	skipc
  5115  0C03  2C2B               	goto	l9945
  5116                           
  5117                           ;OverTemperature_B1.c: 79: Temp.Count++;
  5118  0C04  3001               	movlw	1
  5119  0C05  0020               	movlb	0	; select bank0
  5120  0C06  00B1               	movwf	??_setTemp_Main
  5121  0C07  0831               	movf	??_setTemp_Main,w
  5122  0C08  0021               	movlb	1	; select bank1
  5123  0C09  07DF               	addwf	(_Temp^(0+128)+3),f
  5124                           
  5125                           ;OverTemperature_B1.c: 80: if (Temp.Count >= 3) {
  5126  0C0A  3003               	movlw	3
  5127  0C0B  025F               	subwf	(_Temp^(0+128)+3),w
  5128  0C0C  1C03               	skipc
  5129  0C0D  2C2D               	goto	l9947
  5130                           
  5131                           ;OverTemperature_B1.c: 81: Temp.Count = 0;
  5132  0C0E  01DF               	clrf	(_Temp^(0+128)+3)
  5133                           
  5134                           ;OverTemperature_B1.c: 82: setOverTemp_Exceptions(0);
  5135  0C0F  3000               	movlw	0
  5136  0C10  3192  223D  318B   	fcall	_setOverTemp_Exceptions
  5137                           
  5138                           ;OverTemperature_B1.c: 83: }
  5139                           ;OverTemperature_B1.c: 84: } else {
  5140  0C13  2C2D               	goto	l9947
  5141  0C14                     l9935:	
  5142                           ;OverTemperature_B1.c: 86: }
  5143                           ;OverTemperature_B1.c: 87: } else {
  5144                           
  5145                           ;OverTemperature_B1.c: 85: Temp.Count = 0;
  5146                           
  5147                           
  5148                           ;OverTemperature_B1.c: 88: if (Temp.AD <= 550) {
  5149  0C14  3002               	movlw	2
  5150  0C15  0263               	subwf	((_Temp+1)^(0+128)+6),w
  5151  0C16  3027               	movlw	39
  5152  0C17  1903               	skipnz
  5153  0C18  0262               	subwf	(_Temp^(0+128)+6),w
  5154  0C19  1803               	skipnc
  5155  0C1A  2C2B               	goto	l9945
  5156                           
  5157                           ;OverTemperature_B1.c: 89: Temp.Count++;
  5158  0C1B  3001               	movlw	1
  5159  0C1C  0020               	movlb	0	; select bank0
  5160  0C1D  00B1               	movwf	??_setTemp_Main
  5161  0C1E  0831               	movf	??_setTemp_Main,w
  5162  0C1F  0021               	movlb	1	; select bank1
  5163  0C20  07DF               	addwf	(_Temp^(0+128)+3),f
  5164                           
  5165                           ;OverTemperature_B1.c: 90: if (Temp.Count >= 3) {
  5166  0C21  3003               	movlw	3
  5167  0C22  025F               	subwf	(_Temp^(0+128)+3),w
  5168  0C23  1C03               	skipc
  5169  0C24  2C2D               	goto	l9947
  5170                           
  5171                           ;OverTemperature_B1.c: 91: Temp.Count = 0;
  5172  0C25  01DF               	clrf	(_Temp^(0+128)+3)
  5173                           
  5174                           ;OverTemperature_B1.c: 92: setOverTemp_Exceptions(1);
  5175  0C26  3001               	movlw	1
  5176  0C27  3192  223D  318B   	fcall	_setOverTemp_Exceptions
  5177                           
  5178                           ;OverTemperature_B1.c: 93: }
  5179                           ;OverTemperature_B1.c: 94: } else {
  5180  0C2A  2C2D               	goto	l9947
  5181  0C2B                     l9945:	
  5182                           
  5183                           ;OverTemperature_B1.c: 95: Temp.Count = 0;
  5184  0C2B  0021               	movlb	1	; select bank1
  5185  0C2C  01DF               	clrf	(_Temp^(0+128)+3)
  5186  0C2D                     l9947:	
  5187                           
  5188                           ;OverTemperature_B1.c: 96: }
  5189                           ;OverTemperature_B1.c: 97: }
  5190                           ;OverTemperature_B1.c: 98: if (Temp.ERROR == 0) {
  5191  0C2D  0021               	movlb	1	; select bank1
  5192  0C2E  1CDC               	btfss	_Temp^(0+128),1
  5193                           
  5194                           ;OverTemperature_B1.c: 99: Temp.Safe = 1;
  5195  0C2F  165C               	bsf	_Temp^(0+128),4
  5196                           
  5197                           ;OverTemperature_B1.c: 100: }
  5198                           ;OverTemperature_B1.c: 101: product->Data[24]=Temp.AD >> 8;
  5199  0C30  0863               	movf	((_Temp+1)^(0+128)+6),w
  5200  0C31  0020               	movlb	0	; select bank0
  5201  0C32  00B1               	movwf	??_setTemp_Main
  5202  0C33  086D               	movf	_product,w
  5203  0C34  3E18               	addlw	24
  5204  0C35  0086               	movwf	6
  5205  0C36  3002               	movlw	2	; select bank4/5
  5206  0C37  0087               	movwf	7
  5207  0C38  0831               	movf	??_setTemp_Main,w
  5208  0C39  0081               	movwf	1
  5209                           
  5210                           ;OverTemperature_B1.c: 102: product->Data[25]=Temp.AD;
  5211  0C3A  0021               	movlb	1	; select bank1
  5212  0C3B  0862               	movf	(_Temp^(0+128)+6),w
  5213  0C3C  0020               	movlb	0	; select bank0
  5214  0C3D  00B1               	movwf	??_setTemp_Main
  5215  0C3E  086D               	movf	_product,w
  5216  0C3F  3E19               	addlw	25
  5217  0C40  0086               	movwf	6
  5218  0C41  3002               	movlw	2	; select bank4/5
  5219  0C42  0087               	movwf	7
  5220  0C43  0831               	movf	??_setTemp_Main,w
  5221  0C44  0081               	movwf	1
  5222                           
  5223                           ;OverTemperature_B1.c: 105: Temp.ADH[0] = 0;
  5224  0C45  0021               	movlb	1	; select bank1
  5225  0C46  01E4               	clrf	(_Temp^(0+128)+8)
  5226  0C47  01E5               	clrf	((_Temp+1)^(0+128)+8)
  5227                           
  5228                           ;OverTemperature_B1.c: 106: Temp.ADH[1] = 0;
  5229  0C48  01E6               	clrf	(_Temp^(0+128)+10)
  5230  0C49  01E7               	clrf	((_Temp+1)^(0+128)+10)
  5231  0C4A  0008               	return
  5232  0C4B                     __end_of_setTemp_Main:	
  5233                           
  5234                           	psect	text12
  5235  123D                     __ptext12:	
  5236 ;; *************** function _setOverTemp_Exceptions *****************
  5237 ;; Defined at:
  5238 ;;		line 113 in file "../src/OverTemperature_B1.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;  command         1    wreg     unsigned char 
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  command         1   16[BANK0 ] unsigned char 
  5243 ;;  i               1   15[BANK0 ] unsigned char 
  5244 ;; Return value:  Size  Location     Type
  5245 ;;		None               void
  5246 ;; Registers used:
  5247 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5254 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5255 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5256 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5257 ;;Total ram usage:        3 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    9
  5260 ;; This function calls:
  5261 ;;		_DimmerLights_Exceptions
  5262 ;;		_setBuz
  5263 ;;		_setLED
  5264 ;;		_setRF_Enable
  5265 ;;		_setSw_Enable
  5266 ;; This function is called by:
  5267 ;;		_setTemp_Main
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           
  5272                           ;psect for function _setOverTemp_Exceptions
  5273  123D                     _setOverTemp_Exceptions:	
  5274                           
  5275                           ;incstack = 0
  5276                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5277                           ;setOverTemp_Exceptions@command stored from wreg
  5278  123D  0020               	movlb	0	; select bank0
  5279  123E  00B0               	movwf	setOverTemp_Exceptions@command
  5280                           
  5281                           ;OverTemperature_B1.c: 114: char i = command == 1 ? 0 : 1;
  5282  123F  0830               	movf	setOverTemp_Exceptions@command,w
  5283  1240  3A01               	xorlw	1
  5284  1241  3000               	movlw	0
  5285  1242  1D03               	skipz
  5286  1243  3001               	movlw	1
  5287  1244  00AE               	movwf	??_setOverTemp_Exceptions
  5288  1245  082E               	movf	??_setOverTemp_Exceptions,w
  5289  1246  00AF               	movwf	setOverTemp_Exceptions@i
  5290                           
  5291                           ;OverTemperature_B1.c: 115: Temp.ERROR = command;
  5292  1247  0830               	movf	setOverTemp_Exceptions@command,w
  5293  1248  0021               	movlb	1	; select bank1
  5294  1249  10DC               	bcf	_Temp^(0+128),1
  5295  124A  1D03               	skipz
  5296  124B  14DC               	bsf	_Temp^(0+128),1
  5297                           
  5298                           ;OverTemperature_B1.c: 116: Temp.Safe = i;
  5299  124C  0020               	movlb	0	; select bank0
  5300  124D  082F               	movf	setOverTemp_Exceptions@i,w
  5301  124E  0021               	movlb	1	; select bank1
  5302  124F  125C               	bcf	_Temp^(0+128),4
  5303  1250  1D03               	skipz
  5304  1251  165C               	bsf	_Temp^(0+128),4
  5305                           
  5306                           ;OverTemperature_B1.c: 117: if (command == 1) {
  5307  1252  0020               	movlb	0	; select bank0
  5308  1253  0830               	movf	setOverTemp_Exceptions@command,w
  5309  1254  3A01               	xorlw	1
  5310  1255  1D03               	skipz
  5311  1256  2A5C               	goto	l9449
  5312                           
  5313                           ;OverTemperature_B1.c: 118: DimmerLights_Exceptions(1);
  5314  1257  3001               	movlw	1
  5315  1258  3193  23D2  3192   	fcall	_DimmerLights_Exceptions
  5316                           
  5317                           ;OverTemperature_B1.c: 122: } else if (command == 0) {
  5318  125B  2A68               	goto	l9453
  5319  125C                     l9449:	
  5320  125C  0020               	movlb	0	; select bank0
  5321  125D  08B0               	movf	setOverTemp_Exceptions@command,f
  5322  125E  1D03               	skipz
  5323  125F  2A68               	goto	l9453
  5324                           
  5325                           ;OverTemperature_B1.c: 123: setBuz(2, 100);
  5326  1260  3064               	movlw	100
  5327  1261  00A9               	movwf	setBuz@time
  5328  1262  3000               	movlw	0
  5329  1263  00AA               	movwf	setBuz@time+1
  5330  1264  3002               	movlw	2
  5331  1265  3195  256B  3192   	fcall	_setBuz
  5332  1268                     l9453:	
  5333                           
  5334                           ;OverTemperature_B1.c: 124: }
  5335                           ;OverTemperature_B1.c: 127: setLED(99, command + 10);
  5336  1268  0020               	movlb	0	; select bank0
  5337  1269  0830               	movf	setOverTemp_Exceptions@command,w
  5338  126A  3E0A               	addlw	10
  5339  126B  00AE               	movwf	??_setOverTemp_Exceptions
  5340  126C  082E               	movf	??_setOverTemp_Exceptions,w
  5341  126D  00A2               	movwf	setLED@command
  5342  126E  3063               	movlw	99
  5343  126F  3196  261F  3192   	fcall	_setLED
  5344                           
  5345                           ;OverTemperature_B1.c: 129: setSw_Enable(i);
  5346  1272  0020               	movlb	0	; select bank0
  5347  1273  082F               	movf	setOverTemp_Exceptions@i,w
  5348  1274  319D  2594  3192   	fcall	_setSw_Enable
  5349                           
  5350                           ;OverTemperature_B1.c: 131: setRF_Enable(i);
  5351  1277  0020               	movlb	0	; select bank0
  5352  1278  082F               	movf	setOverTemp_Exceptions@i,w
  5353  1279  319B  2326         	fcall	_setRF_Enable
  5354  127B  0008               	return
  5355  127C                     __end_of_setOverTemp_Exceptions:	
  5356                           
  5357                           	psect	text13
  5358  1A59                     __ptext13:	
  5359 ;; *************** function _getLoad_Safe *****************
  5360 ;; Defined at:
  5361 ;;		line 296 in file "../src/OverLoad_B1.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;		None
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  result          1    0[BANK0 ] unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;                  1    wreg      unsigned char 
  5368 ;; Registers used:
  5369 ;;		wreg, status,2
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;Total ram usage:        1 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    5
  5382 ;; This function calls:
  5383 ;;		Nothing
  5384 ;; This function is called by:
  5385 ;;		_setTemp_Main
  5386 ;; This function uses a non-reentrant model
  5387 ;;
  5388                           
  5389                           
  5390                           ;psect for function _getLoad_Safe
  5391  1A59                     _getLoad_Safe:	
  5392                           
  5393                           ;OverLoad_B1.c: 297: char result = Load1.Safe;
  5394                           
  5395                           ;incstack = 0
  5396                           ; Regs used in _getLoad_Safe: [wreg+status,2]
  5397  1A59  3000               	movlw	0
  5398  1A5A  0023               	movlb	3	; select bank3
  5399  1A5B  19A0               	btfsc	_Load1^(0+384),3
  5400  1A5C  3001               	movlw	1
  5401  1A5D  0020               	movlb	0	; select bank0
  5402  1A5E  00A0               	movwf	getLoad_Safe@result
  5403                           
  5404                           ;OverLoad_B1.c: 298: return result;
  5405  1A5F  0820               	movf	getLoad_Safe@result,w
  5406  1A60  0008               	return
  5407  1A61                     __end_of_getLoad_Safe:	
  5408                           
  5409                           	psect	text14
  5410  19E5                     __ptext14:	
  5411 ;; *************** function _Temp_Initialization *****************
  5412 ;; Defined at:
  5413 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;		None
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;		None
  5418 ;; Return value:  Size  Location     Type
  5419 ;;		None               void
  5420 ;; Registers used:
  5421 ;;		status,2, status,0, pclath, cstack
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5431 ;;Total ram usage:        0 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    6
  5434 ;; This function calls:
  5435 ;;		_setTemp_Initialization
  5436 ;; This function is called by:
  5437 ;;		_main
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           
  5442                           ;psect for function _Temp_Initialization
  5443  19E5                     _Temp_Initialization:	
  5444                           
  5445                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5449  19E5  3199  21E2         	fcall	_setTemp_Initialization
  5450  19E7  0008               	return
  5451  19E8                     __end_of_Temp_Initialization:	
  5452                           
  5453                           	psect	text15
  5454  19E2                     __ptext15:	
  5455 ;; *************** function _setTemp_Initialization *****************
  5456 ;; Defined at:
  5457 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;		None
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;		None
  5462 ;; Return value:  Size  Location     Type
  5463 ;;		None               void
  5464 ;; Registers used:
  5465 ;;		None
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;Total ram usage:        0 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:    5
  5478 ;; This function calls:
  5479 ;;		Nothing
  5480 ;; This function is called by:
  5481 ;;		_Temp_Initialization
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           
  5486                           ;psect for function _setTemp_Initialization
  5487  19E2                     _setTemp_Initialization:	
  5488                           
  5489                           ;OverTemperature_B1.c: 46: Temp.Safe = 1;
  5490                           
  5491                           ;incstack = 0
  5492                           ; Regs used in _setTemp_Initialization: []
  5493  19E2  0021               	movlb	1	; select bank1
  5494  19E3  165C               	bsf	_Temp^(0+128),4
  5495  19E4  0008               	return
  5496  19E5                     __end_of_setTemp_Initialization:	
  5497                           
  5498                           	psect	text16
  5499  1A51                     __ptext16:	
  5500 ;; *************** function _Switch_Main *****************
  5501 ;; Defined at:
  5502 ;;		line 67 in file "../src/Switch_B1.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;		None
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;		None
  5507 ;; Return value:  Size  Location     Type
  5508 ;;		None               void
  5509 ;; Registers used:
  5510 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5511 ;; Tracked objects:
  5512 ;;		On entry : 0/0
  5513 ;;		On exit  : 0/0
  5514 ;;		Unchanged: 0/0
  5515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;Total ram usage:        0 bytes
  5521 ;; Hardware stack levels used:    1
  5522 ;; Hardware stack levels required when called:   11
  5523 ;; This function calls:
  5524 ;;		_setSw_Main
  5525 ;; This function is called by:
  5526 ;;		_main
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           
  5531                           ;psect for function _Switch_Main
  5532  1A51                     _Switch_Main:	
  5533                           
  5534                           ;Switch_B1.c: 69: setSw_Main(1);
  5535                           
  5536                           ;incstack = 0
  5537                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5538  1A51  3001               	movlw	1
  5539  1A52  3183  237C  319A   	fcall	_setSw_Main
  5540                           
  5541                           ;Switch_B1.c: 73: setSw_Main(2);
  5542  1A55  3002               	movlw	2
  5543  1A56  3183  237C         	fcall	_setSw_Main
  5544  1A58  0008               	return
  5545  1A59                     __end_of_Switch_Main:	
  5546                           
  5547                           	psect	text17
  5548  037C                     __ptext17:	
  5549 ;; *************** function _setSw_Main *****************
  5550 ;; Defined at:
  5551 ;;		line 117 in file "../src/Switch_B1.c"
  5552 ;; Parameters:    Size  Location     Type
  5553 ;;  sw              1    wreg     unsigned char 
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;  sw              1   73[BANK0 ] unsigned char 
  5556 ;; Return value:  Size  Location     Type
  5557 ;;		None               void
  5558 ;; Registers used:
  5559 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5566 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5567 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5568 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5569 ;;Total ram usage:        5 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:   10
  5572 ;; This function calls:
  5573 ;;		_SwPointSelect
  5574 ;;		_Sw_DimmerAdjFunc
  5575 ;;		_Sw_DimmerOffFunc
  5576 ;;		_Sw_DimmerOnFunc
  5577 ;;		_setBuz
  5578 ;;		_setRF_Learn
  5579 ;; This function is called by:
  5580 ;;		_Switch_Main
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584                           
  5585                           ;psect for function _setSw_Main
  5586  037C                     _setSw_Main:	
  5587                           
  5588                           ;incstack = 0
  5589                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5590                           ;setSw_Main@sw stored from wreg
  5591  037C  0020               	movlb	0	; select bank0
  5592  037D  00E9               	movwf	setSw_Main@sw
  5593                           
  5594                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5595  037E  0869               	movf	setSw_Main@sw,w
  5596  037F  319C  247B  3183   	fcall	_SwPointSelect
  5597                           
  5598                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5599  0382  0020               	movlb	0	; select bank0
  5600  0383  086C               	movf	_Sw,w
  5601  0384  0086               	movwf	6
  5602  0385  3001               	movlw	1	; select bank2/3
  5603  0386  0087               	movwf	7
  5604  0387  1C01               	btfss	1,0
  5605  0388  0008               	return
  5606                           
  5607                           ;Switch_B1.c: 131: if (sw == 1) {
  5608  0389  0869               	movf	setSw_Main@sw,w
  5609  038A  3A01               	xorlw	1
  5610  038B  1D03               	skipz
  5611  038C  2B99               	goto	l10095
  5612                           
  5613                           ;Switch_B1.c: 132: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  5614  038D  01E7               	clrf	_setSw_Main$6948
  5615  038E  0AE7               	incf	_setSw_Main$6948,f
  5616  038F  1F0C               	btfss	12,6	;volatile
  5617  0390  1A0C               	btfsc	12,4	;volatile
  5618  0391  2B93               	goto	l10093
  5619  0392  01E7               	clrf	_setSw_Main$6948
  5620  0393                     l10093:	
  5621  0393  086C               	movf	_Sw,w
  5622  0394  0086               	movwf	6
  5623  0395  3001               	movlw	1	; select bank2/3
  5624  0396  0087               	movwf	7
  5625  0397  0867               	movf	_setSw_Main$6948,w
  5626  0398  2BA8               	goto	L2
  5627  0399                     l10095:	
  5628                           ;Switch_B1.c: 133: } else if (sw == 2) {
  5629                           
  5630  0399  0869               	movf	setSw_Main@sw,w
  5631  039A  3A02               	xorlw	2
  5632  039B  1D03               	skipz
  5633  039C  2BAB               	goto	l10105
  5634                           
  5635                           ;Switch_B1.c: 134: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  5636  039D  01E8               	clrf	_setSw_Main$6949
  5637  039E  0AE8               	incf	_setSw_Main$6949,f
  5638  039F  1C0C               	btfss	12,0	;volatile
  5639  03A0  188D               	btfsc	13,1	;volatile
  5640  03A1  2BA3               	goto	l10103
  5641  03A2  01E8               	clrf	_setSw_Main$6949
  5642  03A3                     l10103:	
  5643  03A3  086C               	movf	_Sw,w
  5644  03A4  0086               	movwf	6
  5645  03A5  3001               	movlw	1	; select bank2/3
  5646  03A6  0087               	movwf	7
  5647  03A7  0868               	movf	_setSw_Main$6949,w
  5648  03A8                     L2:	
  5649  03A8  1081               	bcf	1,1
  5650  03A9  1D03               	skipz
  5651  03AA  1481               	bsf	1,1
  5652  03AB                     l10105:	
  5653                           
  5654                           ;Switch_B1.c: 135: }
  5655                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  5656  03AB  086C               	movf	_Sw,w
  5657  03AC  0086               	movwf	6
  5658  03AD  3001               	movlw	1	; select bank2/3
  5659  03AE  0087               	movwf	7
  5660  03AF  1C81               	btfss	1,1
  5661  03B0  2C75               	goto	l10153
  5662                           
  5663                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  5664  03B1  086C               	movf	_Sw,w
  5665  03B2  0086               	movwf	6
  5666  03B3  3001               	movlw	1	; select bank2/3
  5667  03B4  0087               	movwf	7
  5668  03B5  1901               	btfsc	1,2
  5669  03B6  2BD8               	goto	l10119
  5670                           
  5671                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  5672  03B7  3001               	movlw	1
  5673  03B8  00E5               	movwf	??_setSw_Main
  5674  03B9  086C               	movf	_Sw,w
  5675  03BA  3E02               	addlw	2
  5676  03BB  0086               	movwf	6
  5677  03BC  3001               	movlw	1	; select bank2/3
  5678  03BD  0087               	movwf	7
  5679  03BE  0865               	movf	??_setSw_Main,w
  5680  03BF  0781               	addwf	1,f
  5681                           
  5682                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  5683  03C0  086C               	movf	_Sw,w
  5684  03C1  3E02               	addlw	2
  5685  03C2  0086               	movwf	6
  5686  03C3  3001               	movlw	1	; select bank2/3
  5687  03C4  0087               	movwf	7
  5688  03C5  3005               	movlw	5
  5689  03C6  0201               	subwf	1,w
  5690  03C7  1C03               	skipc
  5691  03C8  0008               	return
  5692                           
  5693                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  5694  03C9  086C               	movf	_Sw,w
  5695  03CA  3E02               	addlw	2
  5696  03CB  0086               	movwf	6
  5697  03CC  3001               	movlw	1	; select bank2/3
  5698  03CD  0087               	movwf	7
  5699  03CE  0181               	clrf	1
  5700                           
  5701                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  5702  03CF  086C               	movf	_Sw,w
  5703  03D0  0086               	movwf	6
  5704  03D1  3001               	movlw	1	; select bank2/3
  5705  03D2  0087               	movwf	7
  5706  03D3  1501               	bsf	1,2
  5707                           
  5708                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  5709  03D4  0869               	movf	setSw_Main@sw,w
  5710  03D5  318A  2267         	fcall	_Sw_DimmerOnFunc
  5711                           
  5712                           ;Switch_B1.c: 173: }
  5713                           ;Switch_B1.c: 174: } else {
  5714  03D7  0008               	return
  5715  03D8                     l10119:	
  5716                           
  5717                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  5718  03D8  0020               	movlb	0	; select bank0
  5719  03D9  086C               	movf	_Sw,w
  5720  03DA  0086               	movwf	6
  5721  03DB  3001               	movlw	1	; select bank2/3
  5722  03DC  0087               	movwf	7
  5723  03DD  1981               	btfsc	1,3
  5724  03DE  2C05               	goto	l10129
  5725                           
  5726                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  5727  03DF  086C               	movf	_Sw,w
  5728  03E0  3E03               	addlw	3
  5729  03E1  0086               	movwf	6
  5730  03E2  3001               	movlw	1	; select bank2/3
  5731  03E3  0087               	movwf	7
  5732  03E4  3001               	movlw	1
  5733  03E5  0781               	addwf	1,f
  5734  03E6  3141               	addfsr 1,1
  5735  03E7  1803               	skipnc
  5736  03E8  0A81               	incf	1,f
  5737                           
  5738                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  5739  03E9  086C               	movf	_Sw,w
  5740  03EA  3E03               	addlw	3
  5741  03EB  0086               	movwf	6
  5742  03EC  3001               	movlw	1	; select bank2/3
  5743  03ED  0087               	movwf	7
  5744  03EE  3F40               	moviw [0]fsr1
  5745  03EF  00E5               	movwf	??_setSw_Main
  5746  03F0  3F41               	moviw [1]fsr1
  5747  03F1  00E6               	movwf	??_setSw_Main+1
  5748  03F2  3000               	movlw	0
  5749  03F3  0266               	subwf	??_setSw_Main+1,w
  5750  03F4  3096               	movlw	150
  5751  03F5  1903               	skipnz
  5752  03F6  0265               	subwf	??_setSw_Main,w
  5753  03F7  1C03               	skipc
  5754  03F8  0008               	return
  5755                           
  5756                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  5757  03F9  086C               	movf	_Sw,w
  5758  03FA  3E03               	addlw	3
  5759  03FB  0086               	movwf	6
  5760  03FC  3001               	movlw	1	; select bank2/3
  5761  03FD  0087               	movwf	7
  5762  03FE  3000               	movlw	0
  5763  03FF  3FC0               	movwi [0]fsr1
  5764  0400  3FC1               	movwi [1]fsr1
  5765                           
  5766                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  5767  0401  0869               	movf	setSw_Main@sw,w
  5768  0402  3194  241D         	fcall	_Sw_DimmerAdjFunc
  5769                           
  5770                           ;Switch_B1.c: 184: }
  5771                           ;Switch_B1.c: 185: } else {
  5772  0404  0008               	return
  5773  0405                     l10129:	
  5774                           
  5775                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  5776  0405  0020               	movlb	0	; select bank0
  5777  0406  086C               	movf	_Sw,w
  5778  0407  0086               	movwf	6
  5779  0408  3001               	movlw	1	; select bank2/3
  5780  0409  0087               	movwf	7
  5781  040A  1A01               	btfsc	1,4
  5782  040B  2C43               	goto	l10143
  5783                           
  5784                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  5785  040C  086C               	movf	_Sw,w
  5786  040D  3E05               	addlw	5
  5787  040E  0086               	movwf	6
  5788  040F  3001               	movlw	1	; select bank2/3
  5789  0410  0087               	movwf	7
  5790  0411  3001               	movlw	1
  5791  0412  0781               	addwf	1,f
  5792  0413  3141               	addfsr 1,1
  5793  0414  1803               	skipnc
  5794  0415  0A81               	incf	1,f
  5795                           
  5796                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  5797  0416  086C               	movf	_Sw,w
  5798  0417  3E05               	addlw	5
  5799  0418  0086               	movwf	6
  5800  0419  3001               	movlw	1	; select bank2/3
  5801  041A  0087               	movwf	7
  5802  041B  3F40               	moviw [0]fsr1
  5803  041C  00E5               	movwf	??_setSw_Main
  5804  041D  3F41               	moviw [1]fsr1
  5805  041E  00E6               	movwf	??_setSw_Main+1
  5806  041F  3000               	movlw	0
  5807  0420  0266               	subwf	??_setSw_Main+1,w
  5808  0421  3096               	movlw	150
  5809  0422  1903               	skipnz
  5810  0423  0265               	subwf	??_setSw_Main,w
  5811  0424  1C03               	skipc
  5812  0425  0008               	return
  5813                           
  5814                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  5815  0426  086C               	movf	_Sw,w
  5816  0427  3E05               	addlw	5
  5817  0428  0086               	movwf	6
  5818  0429  3001               	movlw	1	; select bank2/3
  5819  042A  0087               	movwf	7
  5820  042B  3000               	movlw	0
  5821  042C  3FC0               	movwi [0]fsr1
  5822  042D  3FC1               	movwi [1]fsr1
  5823                           
  5824                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  5825  042E  086C               	movf	_Sw,w
  5826  042F  0086               	movwf	6
  5827  0430  3001               	movlw	1	; select bank2/3
  5828  0431  0087               	movwf	7
  5829  0432  1601               	bsf	1,4
  5830                           
  5831                           ;Switch_B1.c: 193: setRF_Learn(1);
  5832  0433  3001               	movlw	1
  5833  0434  319A  2249  3183   	fcall	_setRF_Learn
  5834                           
  5835                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  5836  0437  0021               	movlb	1	; select bank1
  5837  0438  1C21               	btfss	(_myMain^(0+128)+1),0
  5838  0439  0008               	return
  5839                           
  5840                           ;Switch_B1.c: 196: setBuz(2, 100);
  5841  043A  3064               	movlw	100
  5842  043B  0020               	movlb	0	; select bank0
  5843  043C  00A9               	movwf	setBuz@time
  5844  043D  3000               	movlw	0
  5845  043E  00AA               	movwf	setBuz@time+1
  5846  043F  3002               	movlw	2
  5847  0440  3195  256B         	fcall	_setBuz
  5848                           
  5849                           ;Switch_B1.c: 197: }
  5850                           ;Switch_B1.c: 199: }
  5851                           ;Switch_B1.c: 200: } else {
  5852  0442  0008               	return
  5853  0443                     l10143:	
  5854                           
  5855                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  5856  0443  0020               	movlb	0	; select bank0
  5857  0444  086C               	movf	_Sw,w
  5858  0445  0086               	movwf	6
  5859  0446  3001               	movlw	1	; select bank2/3
  5860  0447  0087               	movwf	7
  5861  0448  1A81               	btfsc	1,5
  5862  0449  0008               	return
  5863                           
  5864                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  5865  044A  086C               	movf	_Sw,w
  5866  044B  3E07               	addlw	7
  5867  044C  0086               	movwf	6
  5868  044D  3001               	movlw	1	; select bank2/3
  5869  044E  0087               	movwf	7
  5870  044F  3001               	movlw	1
  5871  0450  0781               	addwf	1,f
  5872  0451  3141               	addfsr 1,1
  5873  0452  1803               	skipnc
  5874  0453  0A81               	incf	1,f
  5875                           
  5876                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  5877  0454  086C               	movf	_Sw,w
  5878  0455  3E07               	addlw	7
  5879  0456  0086               	movwf	6
  5880  0457  3001               	movlw	1	; select bank2/3
  5881  0458  0087               	movwf	7
  5882  0459  3F40               	moviw [0]fsr1
  5883  045A  00E5               	movwf	??_setSw_Main
  5884  045B  3F41               	moviw [1]fsr1
  5885  045C  00E6               	movwf	??_setSw_Main+1
  5886  045D  3001               	movlw	1
  5887  045E  0266               	subwf	??_setSw_Main+1,w
  5888  045F  302C               	movlw	44
  5889  0460  1903               	skipnz
  5890  0461  0265               	subwf	??_setSw_Main,w
  5891  0462  1C03               	skipc
  5892  0463  0008               	return
  5893                           
  5894                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5895  0464  086C               	movf	_Sw,w
  5896  0465  3E07               	addlw	7
  5897  0466  0086               	movwf	6
  5898  0467  3001               	movlw	1	; select bank2/3
  5899  0468  0087               	movwf	7
  5900  0469  3000               	movlw	0
  5901  046A  3FC0               	movwi [0]fsr1
  5902  046B  3FC1               	movwi [1]fsr1
  5903                           
  5904                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  5905  046C  086C               	movf	_Sw,w
  5906  046D  0086               	movwf	6
  5907  046E  3001               	movlw	1	; select bank2/3
  5908  046F  0087               	movwf	7
  5909  0470  1681               	bsf	1,5
  5910                           
  5911                           ;Switch_B1.c: 208: setRF_Learn(0);
  5912  0471  3000               	movlw	0
  5913  0472  319A  2249         	fcall	_setRF_Learn
  5914                           
  5915                           ;Switch_B1.c: 211: }
  5916                           ;Switch_B1.c: 212: }
  5917                           ;Switch_B1.c: 213: }
  5918                           ;Switch_B1.c: 214: }
  5919                           ;Switch_B1.c: 215: }
  5920                           ;Switch_B1.c: 216: } else {
  5921  0474  0008               	return
  5922  0475                     l10153:	
  5923                           
  5924                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  5925  0475  0020               	movlb	0	; select bank0
  5926  0476  086C               	movf	_Sw,w
  5927  0477  0086               	movwf	6
  5928  0478  3001               	movlw	1	; select bank2/3
  5929  0479  0087               	movwf	7
  5930  047A  1D01               	btfss	1,2
  5931  047B  0008               	return
  5932                           
  5933                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  5934  047C  3001               	movlw	1
  5935  047D  00E5               	movwf	??_setSw_Main
  5936  047E  086C               	movf	_Sw,w
  5937  047F  3E02               	addlw	2
  5938  0480  0086               	movwf	6
  5939  0481  3001               	movlw	1	; select bank2/3
  5940  0482  0087               	movwf	7
  5941  0483  0865               	movf	??_setSw_Main,w
  5942  0484  0781               	addwf	1,f
  5943                           
  5944                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  5945  0485  086C               	movf	_Sw,w
  5946  0486  3E02               	addlw	2
  5947  0487  0086               	movwf	6
  5948  0488  3001               	movlw	1	; select bank2/3
  5949  0489  0087               	movwf	7
  5950  048A  3005               	movlw	5
  5951  048B  0201               	subwf	1,w
  5952  048C  1C03               	skipc
  5953  048D  0008               	return
  5954                           
  5955                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  5956  048E  086C               	movf	_Sw,w
  5957  048F  3E02               	addlw	2
  5958  0490  0086               	movwf	6
  5959  0491  3001               	movlw	1	; select bank2/3
  5960  0492  0087               	movwf	7
  5961  0493  0181               	clrf	1
  5962                           
  5963                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  5964  0494  086C               	movf	_Sw,w
  5965  0495  0086               	movwf	6
  5966  0496  3001               	movlw	1	; select bank2/3
  5967  0497  0087               	movwf	7
  5968  0498  1101               	bcf	1,2
  5969                           
  5970                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  5971  0499  086C               	movf	_Sw,w
  5972  049A  3E03               	addlw	3
  5973  049B  0086               	movwf	6
  5974  049C  3001               	movlw	1	; select bank2/3
  5975  049D  0087               	movwf	7
  5976  049E  3000               	movlw	0
  5977  049F  3FC0               	movwi [0]fsr1
  5978  04A0  3FC1               	movwi [1]fsr1
  5979                           
  5980                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  5981  04A1  086C               	movf	_Sw,w
  5982  04A2  0086               	movwf	6
  5983  04A3  3001               	movlw	1	; select bank2/3
  5984  04A4  0087               	movwf	7
  5985  04A5  1181               	bcf	1,3
  5986                           
  5987                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  5988  04A6  086C               	movf	_Sw,w
  5989  04A7  3E05               	addlw	5
  5990  04A8  0086               	movwf	6
  5991  04A9  3001               	movlw	1	; select bank2/3
  5992  04AA  0087               	movwf	7
  5993  04AB  3000               	movlw	0
  5994  04AC  3FC0               	movwi [0]fsr1
  5995  04AD  3FC1               	movwi [1]fsr1
  5996                           
  5997                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  5998  04AE  086C               	movf	_Sw,w
  5999  04AF  0086               	movwf	6
  6000  04B0  3001               	movlw	1	; select bank2/3
  6001  04B1  0087               	movwf	7
  6002  04B2  1201               	bcf	1,4
  6003                           
  6004                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  6005  04B3  086C               	movf	_Sw,w
  6006  04B4  3E07               	addlw	7
  6007  04B5  0086               	movwf	6
  6008  04B6  3001               	movlw	1	; select bank2/3
  6009  04B7  0087               	movwf	7
  6010  04B8  3000               	movlw	0
  6011  04B9  3FC0               	movwi [0]fsr1
  6012  04BA  3FC1               	movwi [1]fsr1
  6013                           
  6014                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  6015  04BB  086C               	movf	_Sw,w
  6016  04BC  0086               	movwf	6
  6017  04BD  3001               	movlw	1	; select bank2/3
  6018  04BE  0087               	movwf	7
  6019  04BF  1281               	bcf	1,5
  6020                           
  6021                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  6022  04C0  0869               	movf	setSw_Main@sw,w
  6023  04C1  3189  2187  3183   	fcall	_Sw_DimmerOffFunc
  6024                           
  6025                           ;Switch_B1.c: 232: setRF_Learn(0);
  6026  04C4  3000               	movlw	0
  6027  04C5  319A  2249         	fcall	_setRF_Learn
  6028  04C7  0008               	return
  6029  04C8                     __end_of_setSw_Main:	
  6030                           
  6031                           	psect	text18
  6032  1A49                     __ptext18:	
  6033 ;; *************** function _setRF_Learn *****************
  6034 ;; Defined at:
  6035 ;;		line 23 in file "../src/RF_Control_B1.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;  command         1    wreg     unsigned char 
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;  command         1    0[BANK0 ] unsigned char 
  6040 ;; Return value:  Size  Location     Type
  6041 ;;		None               void
  6042 ;; Registers used:
  6043 ;;		wreg
  6044 ;; Tracked objects:
  6045 ;;		On entry : 0/0
  6046 ;;		On exit  : 0/0
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6053 ;;Total ram usage:        1 bytes
  6054 ;; Hardware stack levels used:    1
  6055 ;; Hardware stack levels required when called:    5
  6056 ;; This function calls:
  6057 ;;		Nothing
  6058 ;; This function is called by:
  6059 ;;		_setSw_Main
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           
  6064                           ;psect for function _setRF_Learn
  6065  1A49                     _setRF_Learn:	
  6066                           
  6067                           ;incstack = 0
  6068                           ; Regs used in _setRF_Learn: [wreg]
  6069                           ;setRF_Learn@command stored from wreg
  6070  1A49  0020               	movlb	0	; select bank0
  6071  1A4A  00A0               	movwf	setRF_Learn@command
  6072                           
  6073                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  6074  1A4B  0820               	movf	setRF_Learn@command,w
  6075  1A4C  0021               	movlb	1	; select bank1
  6076  1A4D  133F               	bcf	_RF1^(0+128),6
  6077  1A4E  1D03               	skipz
  6078  1A4F  173F               	bsf	_RF1^(0+128),6
  6079  1A50  0008               	return
  6080  1A51                     __end_of_setRF_Learn:	
  6081                           
  6082                           	psect	text19
  6083  0A67                     __ptext19:	
  6084 ;; *************** function _Sw_DimmerOnFunc *****************
  6085 ;; Defined at:
  6086 ;;		line 241 in file "../src/Switch_B1.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  sw              1    wreg     unsigned char 
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;  sw              1   67[BANK0 ] unsigned char 
  6091 ;;  Idle            1   66[BANK0 ] unsigned char 
  6092 ;; Return value:  Size  Location     Type
  6093 ;;		None               void
  6094 ;; Registers used:
  6095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;Total ram usage:        2 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:    9
  6108 ;; This function calls:
  6109 ;;		_setBuz
  6110 ;;		_setDimmerLights_Switch
  6111 ;;		_setDimmerLights_Trigger
  6112 ;;		_setRFSW_Status
  6113 ;;		_setRF_DimmerLights
  6114 ;;		_setTxData
  6115 ;; This function is called by:
  6116 ;;		_setSw_Main
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           
  6121                           ;psect for function _Sw_DimmerOnFunc
  6122  0A67                     _Sw_DimmerOnFunc:	
  6123                           
  6124                           ;incstack = 0
  6125                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6126                           ;Sw_DimmerOnFunc@sw stored from wreg
  6127  0A67  0020               	movlb	0	; select bank0
  6128  0A68  00E3               	movwf	Sw_DimmerOnFunc@sw
  6129                           
  6130                           ;Switch_B1.c: 242: char Idle = 1;
  6131  0A69  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6132  0A6A  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6133                           
  6134                           ;Switch_B1.c: 256: if (sw == 1) {
  6135  0A6B  0863               	movf	Sw_DimmerOnFunc@sw,w
  6136  0A6C  3A01               	xorlw	1
  6137  0A6D  1D03               	skipz
  6138  0A6E  2A79               	goto	l9509
  6139                           
  6140                           ;Switch_B1.c: 257: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6141  0A6F  1003               	clrc
  6142  0A70  0022               	movlb	2	; select bank2
  6143  0A71  1DCC               	btfss	(_DimmerLights2^(0+256)+8),3
  6144  0A72  1403               	setc
  6145  0A73  3000               	movlw	0
  6146  0A74  1803               	btfsc	3,0
  6147  0A75  3001               	movlw	1
  6148  0A76  0020               	movlb	0	; select bank0
  6149  0A77  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6150                           
  6151                           ;Switch_B1.c: 258: } else if (sw == 2) {
  6152  0A78  2A86               	goto	l9513
  6153  0A79                     l9509:	
  6154  0A79  0863               	movf	Sw_DimmerOnFunc@sw,w
  6155  0A7A  3A02               	xorlw	2
  6156  0A7B  1D03               	skipz
  6157  0A7C  2A86               	goto	l9513
  6158                           
  6159                           ;Switch_B1.c: 259: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6160  0A7D  1003               	clrc
  6161  0A7E  0022               	movlb	2	; select bank2
  6162  0A7F  1DBD               	btfss	(_DimmerLights1^(0+256)+8),3
  6163  0A80  1403               	setc
  6164  0A81  3000               	movlw	0
  6165  0A82  1803               	btfsc	3,0
  6166  0A83  3001               	movlw	1
  6167  0A84  0020               	movlb	0	; select bank0
  6168  0A85  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6169  0A86                     l9513:	
  6170                           
  6171                           ;Switch_B1.c: 260: }
  6172                           ;Switch_B1.c: 263: if (Idle == 1) {
  6173  0A86  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6174  0A87  3A01               	xorlw	1
  6175  0A88  1D03               	skipz
  6176  0A89  0008               	return
  6177                           
  6178                           ;Switch_B1.c: 264: Sw->Flag = 1;
  6179  0A8A  086C               	movf	_Sw,w
  6180  0A8B  0086               	movwf	6
  6181  0A8C  3001               	movlw	1	; select bank2/3
  6182  0A8D  0087               	movwf	7
  6183  0A8E  1781               	bsf	1,7
  6184                           
  6185                           ;Switch_B1.c: 265: setBuz(1, 100);
  6186  0A8F  3064               	movlw	100
  6187  0A90  00A9               	movwf	setBuz@time
  6188  0A91  3000               	movlw	0
  6189  0A92  00AA               	movwf	setBuz@time+1
  6190  0A93  3001               	movlw	1
  6191  0A94  3195  256B  318A   	fcall	_setBuz
  6192                           
  6193                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  6194  0A97  0020               	movlb	0	; select bank0
  6195  0A98  086C               	movf	_Sw,w
  6196  0A99  0086               	movwf	6
  6197  0A9A  3001               	movlw	1	; select bank2/3
  6198  0A9B  0087               	movwf	7
  6199  0A9C  1B01               	btfsc	1,6
  6200  0A9D  2AC7               	goto	l9533
  6201                           
  6202                           ;Switch_B1.c: 267: Sw->Status = 1;
  6203  0A9E  086C               	movf	_Sw,w
  6204  0A9F  0086               	movwf	6
  6205  0AA0  3001               	movlw	1	; select bank2/3
  6206  0AA1  0087               	movwf	7
  6207  0AA2  1701               	bsf	1,6
  6208                           
  6209                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  6210  0AA3  01A2               	clrf	setRFSW_Status@command
  6211  0AA4  0AA2               	incf	setRFSW_Status@command,f
  6212  0AA5  0863               	movf	Sw_DimmerOnFunc@sw,w
  6213  0AA6  319B  230A  318A   	fcall	_setRFSW_Status
  6214                           
  6215                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  6216  0AA9  0020               	movlb	0	; select bank0
  6217  0AAA  01A2               	clrf	setDimmerLights_Trigger@command
  6218  0AAB  0AA2               	incf	setDimmerLights_Trigger@command,f
  6219  0AAC  0863               	movf	Sw_DimmerOnFunc@sw,w
  6220  0AAD  319B  2371  318A   	fcall	_setDimmerLights_Trigger
  6221                           
  6222                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  6223  0AB0  0020               	movlb	0	; select bank0
  6224  0AB1  01A2               	clrf	setDimmerLights_Switch@command
  6225  0AB2  0AA2               	incf	setDimmerLights_Switch@command,f
  6226  0AB3  0863               	movf	Sw_DimmerOnFunc@sw,w
  6227  0AB4  319B  2361  318A   	fcall	_setDimmerLights_Switch
  6228                           
  6229                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  6230  0AB7  0020               	movlb	0	; select bank0
  6231  0AB8  086C               	movf	_Sw,w
  6232  0AB9  0086               	movwf	6
  6233  0ABA  3001               	movlw	1	; select bank2/3
  6234  0ABB  0087               	movwf	7
  6235  0ABC  3000               	movlw	0
  6236  0ABD  1B01               	btfsc	1,6
  6237  0ABE  3001               	movlw	1
  6238  0ABF  00DD               	movwf	setRF_DimmerLights@on
  6239  0AC0  0863               	movf	Sw_DimmerOnFunc@sw,w
  6240  0AC1  3189  211B  318A   	fcall	_setRF_DimmerLights
  6241                           
  6242                           ;Switch_B1.c: 274: setTxData();
  6243  0AC4  318F  2743         	fcall	_setTxData
  6244                           
  6245                           ;Switch_B1.c: 276: } else {
  6246  0AC6  0008               	return
  6247  0AC7                     l9533:	
  6248                           
  6249                           ;Switch_B1.c: 277: Sw->Status = 0;
  6250  0AC7  0020               	movlb	0	; select bank0
  6251  0AC8  086C               	movf	_Sw,w
  6252  0AC9  0086               	movwf	6
  6253  0ACA  3001               	movlw	1	; select bank2/3
  6254  0ACB  0087               	movwf	7
  6255  0ACC  1301               	bcf	1,6
  6256                           
  6257                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  6258  0ACD  086C               	movf	_Sw,w
  6259  0ACE  0086               	movwf	6
  6260  0ACF  3001               	movlw	1	; select bank2/3
  6261  0AD0  0087               	movwf	7
  6262  0AD1  3000               	movlw	0
  6263  0AD2  1B01               	btfsc	1,6
  6264  0AD3  3001               	movlw	1
  6265  0AD4  00A2               	movwf	setRFSW_Status@command
  6266  0AD5  0863               	movf	Sw_DimmerOnFunc@sw,w
  6267  0AD6  319B  230A         	fcall	_setRFSW_Status
  6268  0AD8  0008               	return
  6269  0AD9                     __end_of_Sw_DimmerOnFunc:	
  6270                           
  6271                           	psect	text20
  6272  0987                     __ptext20:	
  6273 ;; *************** function _Sw_DimmerOffFunc *****************
  6274 ;; Defined at:
  6275 ;;		line 284 in file "../src/Switch_B1.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  sw              1    wreg     unsigned char 
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;  sw              1   68[BANK0 ] unsigned char 
  6280 ;; Return value:  Size  Location     Type
  6281 ;;		None               void
  6282 ;; Registers used:
  6283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6284 ;; Tracked objects:
  6285 ;;		On entry : 0/0
  6286 ;;		On exit  : 0/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6291 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;Total ram usage:        3 bytes
  6294 ;; Hardware stack levels used:    1
  6295 ;; Hardware stack levels required when called:    9
  6296 ;; This function calls:
  6297 ;;		_setDelayOff_GO
  6298 ;;		_setDimmerLights_AdjGo
  6299 ;;		_setDimmerLights_Switch
  6300 ;;		_setDimmerLights_Trigger
  6301 ;;		_setDimmerLights_TriggerAdj
  6302 ;;		_setRF_DimmerLights
  6303 ;;		_setTxData
  6304 ;; This function is called by:
  6305 ;;		_setSw_Main
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           
  6310                           ;psect for function _Sw_DimmerOffFunc
  6311  0987                     _Sw_DimmerOffFunc:	
  6312                           
  6313                           ;incstack = 0
  6314                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6315                           ;Sw_DimmerOffFunc@sw stored from wreg
  6316  0987  0020               	movlb	0	; select bank0
  6317  0988  00E4               	movwf	Sw_DimmerOffFunc@sw
  6318                           
  6319                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  6320  0989  086C               	movf	_Sw,w
  6321  098A  0086               	movwf	6
  6322  098B  3001               	movlw	1	; select bank2/3
  6323  098C  0087               	movwf	7
  6324  098D  1F81               	btfss	1,7
  6325  098E  0008               	return
  6326                           
  6327                           ;Switch_B1.c: 286: Sw->Flag = 0;
  6328  098F  086C               	movf	_Sw,w
  6329  0990  0086               	movwf	6
  6330  0991  3001               	movlw	1	; select bank2/3
  6331  0992  0087               	movwf	7
  6332  0993  1381               	bcf	1,7
  6333                           
  6334                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  6335  0994  086C               	movf	_Sw,w
  6336  0995  0086               	movwf	6
  6337  0996  3001               	movlw	1	; select bank2/3
  6338  0997  0087               	movwf	7
  6339  0998  1F01               	btfss	1,6
  6340  0999  29D2               	goto	l9577
  6341                           
  6342                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  6343  099A  0A6C               	incf	_Sw,w
  6344  099B  0086               	movwf	6
  6345  099C  3001               	movlw	1	; select bank2/3
  6346  099D  0087               	movwf	7
  6347  099E  1C01               	btfss	1,0
  6348  099F  0008               	return
  6349                           
  6350                           ;Switch_B1.c: 289: Sw->Adj = 0;
  6351  09A0  0A6C               	incf	_Sw,w
  6352  09A1  0086               	movwf	6
  6353  09A2  3001               	movlw	1	; select bank2/3
  6354  09A3  0087               	movwf	7
  6355  09A4  1001               	bcf	1,0
  6356                           
  6357                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  6358  09A5  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6359  09A6  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6360  09A7  0864               	movf	Sw_DimmerOffFunc@sw,w
  6361  09A8  319B  23A1  3189   	fcall	_setDimmerLights_TriggerAdj
  6362                           
  6363                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  6364  09AB  0020               	movlb	0	; select bank0
  6365  09AC  01A2               	clrf	setDimmerLights_AdjGo@command
  6366  09AD  0864               	movf	Sw_DimmerOffFunc@sw,w
  6367  09AE  319B  2391  3189   	fcall	_setDimmerLights_AdjGo
  6368                           
  6369                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  6370  09B1  0020               	movlb	0	; select bank0
  6371  09B2  0864               	movf	Sw_DimmerOffFunc@sw,w
  6372  09B3  3E1A               	addlw	26
  6373  09B4  076D               	addwf	_product,w
  6374  09B5  00E2               	movwf	??_Sw_DimmerOffFunc
  6375  09B6  0862               	movf	??_Sw_DimmerOffFunc,w
  6376  09B7  0086               	movwf	6
  6377  09B8  3002               	movlw	2	; select bank4/5
  6378  09B9  0087               	movwf	7
  6379  09BA  0801               	movf	1,w
  6380  09BB  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6381  09BC  086D               	movf	_product,w
  6382  09BD  3E11               	addlw	17
  6383  09BE  0086               	movwf	6
  6384  09BF  3002               	movlw	2	; select bank4/5
  6385  09C0  0087               	movwf	7
  6386  09C1  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6387  09C2  0081               	movwf	1
  6388                           
  6389                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  6390  09C3  086C               	movf	_Sw,w
  6391  09C4  0086               	movwf	6
  6392  09C5  3001               	movlw	1	; select bank2/3
  6393  09C6  0087               	movwf	7
  6394  09C7  3000               	movlw	0
  6395  09C8  1B01               	btfsc	1,6
  6396  09C9  3001               	movlw	1
  6397  09CA  00DD               	movwf	setRF_DimmerLights@on
  6398  09CB  0864               	movf	Sw_DimmerOffFunc@sw,w
  6399  09CC  3189  211B  3189   	fcall	_setRF_DimmerLights
  6400                           
  6401                           ;Switch_B1.c: 295: setTxData();
  6402  09CF  318F  2743         	fcall	_setTxData
  6403                           
  6404                           ;Switch_B1.c: 297: }
  6405                           ;Switch_B1.c: 298: } else {
  6406  09D1  0008               	return
  6407  09D2                     l9577:	
  6408                           
  6409                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  6410  09D2  0020               	movlb	0	; select bank0
  6411  09D3  01A2               	clrf	setDimmerLights_Trigger@command
  6412  09D4  0AA2               	incf	setDimmerLights_Trigger@command,f
  6413  09D5  0864               	movf	Sw_DimmerOffFunc@sw,w
  6414  09D6  319B  2371  3189   	fcall	_setDimmerLights_Trigger
  6415                           
  6416                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  6417  09D9  0020               	movlb	0	; select bank0
  6418  09DA  01A2               	clrf	setDimmerLights_Switch@command
  6419  09DB  0864               	movf	Sw_DimmerOffFunc@sw,w
  6420  09DC  319B  2361  3189   	fcall	_setDimmerLights_Switch
  6421                           
  6422                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  6423  09DF  0020               	movlb	0	; select bank0
  6424  09E0  01AA               	clrf	setDelayOff_GO@command
  6425  09E1  01AB               	clrf	setDelayOff_GO@value
  6426  09E2  0864               	movf	Sw_DimmerOffFunc@sw,w
  6427  09E3  3196  26DB  3189   	fcall	_setDelayOff_GO
  6428                           
  6429                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  6430  09E6  0020               	movlb	0	; select bank0
  6431  09E7  086C               	movf	_Sw,w
  6432  09E8  0086               	movwf	6
  6433  09E9  3001               	movlw	1	; select bank2/3
  6434  09EA  0087               	movwf	7
  6435  09EB  3000               	movlw	0
  6436  09EC  1B01               	btfsc	1,6
  6437  09ED  3001               	movlw	1
  6438  09EE  00DD               	movwf	setRF_DimmerLights@on
  6439  09EF  0864               	movf	Sw_DimmerOffFunc@sw,w
  6440  09F0  3189  211B  3189   	fcall	_setRF_DimmerLights
  6441                           
  6442                           ;Switch_B1.c: 304: setTxData();
  6443  09F3  318F  2743         	fcall	_setTxData
  6444  09F5  0008               	return
  6445  09F6                     __end_of_Sw_DimmerOffFunc:	
  6446                           
  6447                           	psect	text21
  6448  141D                     __ptext21:	
  6449 ;; *************** function _Sw_DimmerAdjFunc *****************
  6450 ;; Defined at:
  6451 ;;		line 311 in file "../src/Switch_B1.c"
  6452 ;; Parameters:    Size  Location     Type
  6453 ;;  sw              1    wreg     unsigned char 
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;  sw              1    5[BANK0 ] unsigned char 
  6456 ;;  Idle            1    4[BANK0 ] unsigned char 
  6457 ;; Return value:  Size  Location     Type
  6458 ;;		None               void
  6459 ;; Registers used:
  6460 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/0
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6467 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6469 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6470 ;;Total ram usage:        2 bytes
  6471 ;; Hardware stack levels used:    1
  6472 ;; Hardware stack levels required when called:    7
  6473 ;; This function calls:
  6474 ;;		_setDimmerLights_AdjGo
  6475 ;;		_setDimmerLights_TriggerAdj
  6476 ;;		_setRFSW_Status
  6477 ;; This function is called by:
  6478 ;;		_setSw_Main
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           
  6483                           ;psect for function _Sw_DimmerAdjFunc
  6484  141D                     _Sw_DimmerAdjFunc:	
  6485                           
  6486                           ;incstack = 0
  6487                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6488                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6489  141D  0020               	movlb	0	; select bank0
  6490  141E  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6491                           
  6492                           ;Switch_B1.c: 312: char Idle = 1;
  6493  141F  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6494  1420  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6495                           
  6496                           ;Switch_B1.c: 325: if (sw == 1) {
  6497  1421  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6498  1422  3A01               	xorlw	1
  6499  1423  1D03               	skipz
  6500  1424  2C2F               	goto	l9543
  6501                           
  6502                           ;Switch_B1.c: 326: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6503  1425  1003               	clrc
  6504  1426  0022               	movlb	2	; select bank2
  6505  1427  1DCC               	btfss	(_DimmerLights2^(0+256)+8),3
  6506  1428  1403               	setc
  6507  1429  3000               	movlw	0
  6508  142A  1803               	btfsc	3,0
  6509  142B  3001               	movlw	1
  6510  142C  0020               	movlb	0	; select bank0
  6511  142D  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6512                           
  6513                           ;Switch_B1.c: 327: } else if (sw == 2) {
  6514  142E  2C3C               	goto	l9547
  6515  142F                     l9543:	
  6516  142F  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6517  1430  3A02               	xorlw	2
  6518  1431  1D03               	skipz
  6519  1432  2C3C               	goto	l9547
  6520                           
  6521                           ;Switch_B1.c: 328: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6522  1433  1003               	clrc
  6523  1434  0022               	movlb	2	; select bank2
  6524  1435  1DBD               	btfss	(_DimmerLights1^(0+256)+8),3
  6525  1436  1403               	setc
  6526  1437  3000               	movlw	0
  6527  1438  1803               	btfsc	3,0
  6528  1439  3001               	movlw	1
  6529  143A  0020               	movlb	0	; select bank0
  6530  143B  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6531  143C                     l9547:	
  6532                           
  6533                           ;Switch_B1.c: 329: }
  6534                           ;Switch_B1.c: 332: if (Idle == 1) {
  6535  143C  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6536  143D  3A01               	xorlw	1
  6537  143E  1D03               	skipz
  6538  143F  0008               	return
  6539                           
  6540                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  6541  1440  086C               	movf	_Sw,w
  6542  1441  0086               	movwf	6
  6543  1442  3001               	movlw	1	; select bank2/3
  6544  1443  0087               	movwf	7
  6545  1444  1F81               	btfss	1,7
  6546  1445  0008               	return
  6547                           
  6548                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  6549  1446  086C               	movf	_Sw,w
  6550  1447  0086               	movwf	6
  6551  1448  3001               	movlw	1	; select bank2/3
  6552  1449  0087               	movwf	7
  6553  144A  1581               	bsf	1,3
  6554                           
  6555                           ;Switch_B1.c: 335: Sw->Adj = 1;
  6556  144B  0A6C               	incf	_Sw,w
  6557  144C  0086               	movwf	6
  6558  144D  3001               	movlw	1	; select bank2/3
  6559  144E  0087               	movwf	7
  6560  144F  1401               	bsf	1,0
  6561                           
  6562                           ;Switch_B1.c: 336: Sw->Status = 1;
  6563  1450  086C               	movf	_Sw,w
  6564  1451  0086               	movwf	6
  6565  1452  3001               	movlw	1	; select bank2/3
  6566  1453  0087               	movwf	7
  6567  1454  1701               	bsf	1,6
  6568                           
  6569                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  6570  1455  01A2               	clrf	setRFSW_Status@command
  6571  1456  0AA2               	incf	setRFSW_Status@command,f
  6572  1457  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6573  1458  319B  230A  3194   	fcall	_setRFSW_Status
  6574                           
  6575                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  6576  145B  0020               	movlb	0	; select bank0
  6577  145C  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6578  145D  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6579  145E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6580  145F  319B  23A1  3194   	fcall	_setDimmerLights_TriggerAdj
  6581                           
  6582                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  6583  1462  0020               	movlb	0	; select bank0
  6584  1463  01A2               	clrf	setDimmerLights_AdjGo@command
  6585  1464  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6586  1465  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6587  1466  319B  2391         	fcall	_setDimmerLights_AdjGo
  6588  1468  0008               	return
  6589  1469                     __end_of_Sw_DimmerAdjFunc:	
  6590                           
  6591                           	psect	text22
  6592  1BA1                     __ptext22:	
  6593 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6594 ;; Defined at:
  6595 ;;		line 720 in file "../src/Dimmer_B1.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;  lights          1    wreg     unsigned char 
  6598 ;;  command         1    2[BANK0 ] unsigned char 
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  lights          1    3[BANK0 ] unsigned char 
  6601 ;; Return value:  Size  Location     Type
  6602 ;;		None               void
  6603 ;; Registers used:
  6604 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6610 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6611 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;Total ram usage:        2 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    6
  6617 ;; This function calls:
  6618 ;;		_DimmerLightsPointSelect
  6619 ;; This function is called by:
  6620 ;;		_Sw_DimmerOffFunc
  6621 ;;		_Sw_DimmerAdjFunc
  6622 ;; This function uses a non-reentrant model
  6623 ;;
  6624                           
  6625                           
  6626                           ;psect for function _setDimmerLights_TriggerAdj
  6627  1BA1                     _setDimmerLights_TriggerAdj:	
  6628                           
  6629                           ;incstack = 0
  6630                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6631                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6632  1BA1  0020               	movlb	0	; select bank0
  6633  1BA2  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6634                           
  6635                           ;Dimmer_B1.c: 722: DimmerLightsPointSelect(lights);
  6636  1BA3  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6637  1BA4  319C  242C         	fcall	_DimmerLightsPointSelect
  6638                           
  6639                           ;Dimmer_B1.c: 723: DimmerLights->TriggerAdj = command;
  6640  1BA6  0020               	movlb	0	; select bank0
  6641  1BA7  086B               	movf	_DimmerLights,w
  6642  1BA8  3E08               	addlw	8
  6643  1BA9  0086               	movwf	6
  6644  1BAA  3001               	movlw	1	; select bank2/3
  6645  1BAB  0087               	movwf	7
  6646  1BAC  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6647  1BAD  1201               	bcf	1,4
  6648  1BAE  1D03               	skipz
  6649  1BAF  1601               	bsf	1,4
  6650  1BB0  0008               	return
  6651  1BB1                     __end_of_setDimmerLights_TriggerAdj:	
  6652                           
  6653                           	psect	text23
  6654  1B91                     __ptext23:	
  6655 ;; *************** function _setDimmerLights_AdjGo *****************
  6656 ;; Defined at:
  6657 ;;		line 708 in file "../src/Dimmer_B1.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  lights          1    wreg     unsigned char 
  6660 ;;  command         1    2[BANK0 ] unsigned char 
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  lights          1    3[BANK0 ] unsigned char 
  6663 ;; Return value:  Size  Location     Type
  6664 ;;		None               void
  6665 ;; Registers used:
  6666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6672 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;Total ram usage:        2 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    6
  6679 ;; This function calls:
  6680 ;;		_DimmerLightsPointSelect
  6681 ;; This function is called by:
  6682 ;;		_Sw_DimmerOffFunc
  6683 ;;		_Sw_DimmerAdjFunc
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           
  6688                           ;psect for function _setDimmerLights_AdjGo
  6689  1B91                     _setDimmerLights_AdjGo:	
  6690                           
  6691                           ;incstack = 0
  6692                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6693                           ;setDimmerLights_AdjGo@lights stored from wreg
  6694  1B91  0020               	movlb	0	; select bank0
  6695  1B92  00A3               	movwf	setDimmerLights_AdjGo@lights
  6696                           
  6697                           ;Dimmer_B1.c: 710: DimmerLightsPointSelect(lights);
  6698  1B93  0823               	movf	setDimmerLights_AdjGo@lights,w
  6699  1B94  319C  242C         	fcall	_DimmerLightsPointSelect
  6700                           
  6701                           ;Dimmer_B1.c: 711: DimmerLights->AdjGo = command;
  6702  1B96  0020               	movlb	0	; select bank0
  6703  1B97  086B               	movf	_DimmerLights,w
  6704  1B98  3E08               	addlw	8
  6705  1B99  0086               	movwf	6
  6706  1B9A  3001               	movlw	1	; select bank2/3
  6707  1B9B  0087               	movwf	7
  6708  1B9C  0822               	movf	setDimmerLights_AdjGo@command,w
  6709  1B9D  1181               	bcf	1,3
  6710  1B9E  1D03               	skipz
  6711  1B9F  1581               	bsf	1,3
  6712  1BA0  0008               	return
  6713  1BA1                     __end_of_setDimmerLights_AdjGo:	
  6714                           
  6715                           	psect	text24
  6716  1AFD                     __ptext24:	
  6717 ;; *************** function _Switch_Initialization *****************
  6718 ;; Defined at:
  6719 ;;		line 41 in file "../src/Switch_B1.c"
  6720 ;; Parameters:    Size  Location     Type
  6721 ;;		None
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;		None
  6724 ;; Return value:  Size  Location     Type
  6725 ;;		None               void
  6726 ;; Registers used:
  6727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6728 ;; Tracked objects:
  6729 ;;		On entry : 0/0
  6730 ;;		On exit  : 0/0
  6731 ;;		Unchanged: 0/0
  6732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;Total ram usage:        0 bytes
  6738 ;; Hardware stack levels used:    1
  6739 ;; Hardware stack levels required when called:    8
  6740 ;; This function calls:
  6741 ;;		_TouchPower
  6742 ;;		_setSw_Initialization
  6743 ;; This function is called by:
  6744 ;;		_main
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           
  6749                           ;psect for function _Switch_Initialization
  6750  1AFD                     _Switch_Initialization:	
  6751                           
  6752                           ;Switch_B1.c: 42: TouchPower();
  6753                           
  6754                           ;incstack = 0
  6755                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6756  1AFD  319B  2343  319A   	fcall	_TouchPower
  6757                           
  6758                           ;Switch_B1.c: 44: WPUB1 = 0;
  6759  1B00  0024               	movlb	4	; select bank4
  6760  1B01  108D               	bcf	13,1	;volatile
  6761                           
  6762                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6763  1B02  3001               	movlw	1
  6764  1B03  319A  2241  319A   	fcall	_setSw_Initialization
  6765                           
  6766                           ;Switch_B1.c: 57: setSw_Initialization(2);
  6767  1B06  3002               	movlw	2
  6768  1B07  319A  2241         	fcall	_setSw_Initialization
  6769  1B09  0008               	return
  6770  1B0A                     __end_of_Switch_Initialization:	
  6771                           
  6772                           	psect	text25
  6773  1A41                     __ptext25:	
  6774 ;; *************** function _setSw_Initialization *****************
  6775 ;; Defined at:
  6776 ;;		line 83 in file "../src/Switch_B1.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;  sw              1    wreg     unsigned char 
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;  sw              1    4[BANK0 ] unsigned char 
  6781 ;; Return value:  Size  Location     Type
  6782 ;;		None               void
  6783 ;; Registers used:
  6784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6785 ;; Tracked objects:
  6786 ;;		On entry : 0/0
  6787 ;;		On exit  : 0/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6793 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6794 ;;Total ram usage:        1 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; Hardware stack levels required when called:    7
  6797 ;; This function calls:
  6798 ;;		_setLED
  6799 ;; This function is called by:
  6800 ;;		_Switch_Initialization
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           
  6805                           ;psect for function _setSw_Initialization
  6806  1A41                     _setSw_Initialization:	
  6807                           
  6808                           ;incstack = 0
  6809                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6810                           ;setSw_Initialization@sw stored from wreg
  6811  1A41  0020               	movlb	0	; select bank0
  6812  1A42  00A4               	movwf	setSw_Initialization@sw
  6813                           
  6814                           ;Switch_B1.c: 84: setLED(sw, 1);
  6815  1A43  01A2               	clrf	setLED@command
  6816  1A44  0AA2               	incf	setLED@command,f
  6817  1A45  0824               	movf	setSw_Initialization@sw,w
  6818  1A46  3196  261F         	fcall	_setLED
  6819  1A48  0008               	return
  6820  1A49                     __end_of_setSw_Initialization:	
  6821                           
  6822                           	psect	text26
  6823  1B43                     __ptext26:	
  6824 ;; *************** function _TouchPower *****************
  6825 ;; Defined at:
  6826 ;;		line 10 in file "../src/Switch_B1.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;		None
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;		None
  6831 ;; Return value:  Size  Location     Type
  6832 ;;		None               void
  6833 ;; Registers used:
  6834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6844 ;;Total ram usage:        0 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; Hardware stack levels required when called:    6
  6847 ;; This function calls:
  6848 ;;		_Timeout_Counter
  6849 ;;		_set_TimeoutCleared
  6850 ;; This function is called by:
  6851 ;;		_Switch_Initialization
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           
  6856                           ;psect for function _TouchPower
  6857  1B43                     _TouchPower:	
  6858                           
  6859                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6860                           
  6861                           ;incstack = 0
  6862                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6863  1B43  2B49               	goto	l10073
  6864  1B44                     l2700:	
  6865                           
  6866                           ;Switch_B1.c: 12: RC5 = 1;
  6867  1B44  0020               	movlb	0	; select bank0
  6868  1B45  168E               	bsf	14,5	;volatile
  6869                           
  6870                           ;Switch_B1.c: 13: Timeout_Counter();
  6871  1B46  319C  248F  319B   	fcall	_Timeout_Counter
  6872  1B49                     l10073:	
  6873  1B49  0020               	movlb	0	; select bank0
  6874  1B4A  1A8E               	btfsc	14,5	;volatile
  6875  1B4B  2B4F               	goto	l10077
  6876  1B4C  0021               	movlb	1	; select bank1
  6877  1B4D  1D30               	btfss	(_myMain^(0+128)+16),2
  6878  1B4E  2B44               	goto	l2700
  6879  1B4F                     l10077:	
  6880                           
  6881                           ;Switch_B1.c: 14: }
  6882                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6883  1B4F  3199  21FB         	fcall	_set_TimeoutCleared
  6884  1B51  0008               	return
  6885  1B52                     __end_of_TouchPower:	
  6886                           
  6887                           	psect	text27
  6888  19DF                     __ptext27:	
  6889 ;; *************** function _RF_Main *****************
  6890 ;; Defined at:
  6891 ;;		line 16 in file "../src/RF_Control_B1.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;		None
  6894 ;; Auto vars:     Size  Location     Type
  6895 ;;		None
  6896 ;; Return value:  Size  Location     Type
  6897 ;;		None               void
  6898 ;; Registers used:
  6899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6900 ;; Tracked objects:
  6901 ;;		On entry : 0/0
  6902 ;;		On exit  : 0/0
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;Total ram usage:        0 bytes
  6910 ;; Hardware stack levels used:    1
  6911 ;; Hardware stack levels required when called:   14
  6912 ;; This function calls:
  6913 ;;		_setRF_Main
  6914 ;; This function is called by:
  6915 ;;		_main
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919                           
  6920                           ;psect for function _RF_Main
  6921  19DF                     _RF_Main:	
  6922                           
  6923                           ;RF_Control_B1.c: 18: setRF_Main();
  6924                           
  6925                           ;incstack = 0
  6926                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6927  19DF  3185  25BE         	fcall	_setRF_Main
  6928  19E1  0008               	return
  6929  19E2                     __end_of_RF_Main:	
  6930                           
  6931                           	psect	text28
  6932  05BE                     __ptext28:	
  6933 ;; *************** function _setRF_Main *****************
  6934 ;; Defined at:
  6935 ;;		line 52 in file "../src/RF_Control_B1.c"
  6936 ;; Parameters:    Size  Location     Type
  6937 ;;		None
  6938 ;; Auto vars:     Size  Location     Type
  6939 ;;  Receive_OK      1    0        unsigned char 
  6940 ;;  loop_f          1    0        unsigned char 
  6941 ;; Return value:  Size  Location     Type
  6942 ;;		None               void
  6943 ;; Registers used:
  6944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6945 ;; Tracked objects:
  6946 ;;		On entry : 0/0
  6947 ;;		On exit  : 0/0
  6948 ;;		Unchanged: 0/0
  6949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;Total ram usage:        2 bytes
  6955 ;; Hardware stack levels used:    1
  6956 ;; Hardware stack levels required when called:   13
  6957 ;; This function calls:
  6958 ;;		_CC2500_ReadStatus
  6959 ;;		_CC2500_RxData
  6960 ;;		_CC2500_TxData
  6961 ;;		_CC2500_WriteCommand
  6962 ;;		_getBuz_GO
  6963 ;;		_getRxData
  6964 ;; This function is called by:
  6965 ;;		_RF_Main
  6966 ;; This function uses a non-reentrant model
  6967 ;;
  6968                           
  6969                           
  6970                           ;psect for function _setRF_Main
  6971  05BE                     _setRF_Main:	
  6972                           
  6973                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  6974                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6975                           
  6976                           ;incstack = 0
  6977                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6978  05BE  0021               	movlb	1	; select bank1
  6979  05BF  1C3F               	btfss	_RF1^(0+128),0
  6980  05C0  0008               	return
  6981                           
  6982                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6983  05C1  319B  23D3  3185   	fcall	_getBuz_GO
  6984  05C4  0020               	movlb	0	; select bank0
  6985  05C5  0821               	movf	?_getBuz_GO+1,w
  6986  05C6  0420               	iorwf	?_getBuz_GO,w
  6987  05C7  1D03               	skipz
  6988  05C8  0008               	return
  6989                           
  6990                           ;RF_Control_B1.c: 64: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6991  05C9  01E8               	clrf	_setRF_Main$5840
  6992  05CA  0AE8               	incf	_setRF_Main$5840,f
  6993  05CB  1F0C               	btfss	12,6	;volatile
  6994  05CC  1A0C               	btfsc	12,4	;volatile
  6995  05CD  2DD2               	goto	l9971
  6996  05CE  1C0C               	btfss	12,0	;volatile
  6997  05CF  188D               	btfsc	13,1	;volatile
  6998  05D0  2DD2               	goto	l9971
  6999  05D1  01E8               	clrf	_setRF_Main$5840
  7000  05D2                     l9971:	
  7001  05D2  0868               	movf	_setRF_Main$5840,w
  7002  05D3  0021               	movlb	1	; select bank1
  7003  05D4  13BF               	bcf	_RF1^(0+128),7
  7004  05D5  1D03               	skipz
  7005  05D6  17BF               	bsf	_RF1^(0+128),7
  7006                           
  7007                           ;RF_Control_B1.c: 71: if (RF1.Key == 1 && RF1.Learn == 0) {
  7008  05D7  1BBF               	btfsc	_RF1^(0+128),7
  7009  05D8  1B3F               	btfsc	_RF1^(0+128),6
  7010  05D9  2DDF               	goto	l2275
  7011                           
  7012                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  7013  05DA  01C1               	clrf	(_RF1^(0+128)+2)
  7014  05DB  01C2               	clrf	((_RF1+1)^(0+128)+2)
  7015                           
  7016                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  7017  05DC  14C0               	bsf	(_RF1^(0+128)+1),1
  7018                           
  7019                           ;RF_Control_B1.c: 74: RF1.RxStatus = 0;
  7020  05DD  11BF               	bcf	_RF1^(0+128),3
  7021                           
  7022                           ;RF_Control_B1.c: 76: } else {
  7023  05DE  0008               	return
  7024  05DF                     l2275:	
  7025                           
  7026                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  7027  05DF  18C0               	btfsc	(_RF1^(0+128)+1),1
  7028  05E0  1B3F               	btfsc	_RF1^(0+128),6
  7029  05E1  2DF6               	goto	l9993
  7030                           
  7031                           ;RF_Control_B1.c: 78: RF1.Count++;
  7032  05E2  3001               	movlw	1
  7033  05E3  07C1               	addwf	(_RF1^(0+128)+2),f
  7034  05E4  3000               	movlw	0
  7035  05E5  3DC2               	addwfc	((_RF1+1)^(0+128)+2),f
  7036                           
  7037                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  7038  05E6  3002               	movlw	2
  7039  05E7  3EBF               	addlw	_RF1& (0+255)
  7040  05E8  0086               	movwf	6
  7041  05E9  0187               	clrf	7
  7042  05EA  3F40               	moviw [0]fsr1
  7043  05EB  0646               	xorwf	(_RF1^(0+128)+7),w
  7044  05EC  1D03               	skipz
  7045  05ED  2DF0               	goto	u10515
  7046  05EE  3F41               	moviw [1]fsr1
  7047  05EF  0647               	xorwf	((_RF1+1)^(0+128)+7),w
  7048  05F0                     u10515:	
  7049  05F0  1D03               	skipz
  7050  05F1  2E68               	goto	l10047
  7051                           
  7052                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  7053  05F2  01C1               	clrf	(_RF1^(0+128)+2)
  7054  05F3  01C2               	clrf	((_RF1+1)^(0+128)+2)
  7055                           
  7056                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  7057  05F4  10C0               	bcf	(_RF1^(0+128)+1),1
  7058                           
  7059                           ;RF_Control_B1.c: 82: }
  7060                           ;RF_Control_B1.c: 83: } else {
  7061  05F5  2E68               	goto	l10047
  7062  05F6                     l9993:	
  7063                           
  7064                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  7065  05F6  01C1               	clrf	(_RF1^(0+128)+2)
  7066  05F7  01C2               	clrf	((_RF1+1)^(0+128)+2)
  7067                           
  7068                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  7069  05F8  10C0               	bcf	(_RF1^(0+128)+1),1
  7070                           
  7071                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  7072  05F9  193F               	btfsc	_RF1^(0+128),2
  7073  05FA  1B3F               	btfsc	_RF1^(0+128),6
  7074  05FB  2E17               	goto	l2280
  7075                           
  7076                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  7077  05FC  113F               	bcf	_RF1^(0+128),2
  7078                           
  7079                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  7080  05FD  11BF               	bcf	_RF1^(0+128),3
  7081                           
  7082                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  7083  05FE  10BF               	bcf	_RF1^(0+128),1
  7084                           
  7085                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  7086  05FF  303B               	movlw	59
  7087  0600  319E  26CB  3185   	fcall	_CC2500_ReadStatus
  7088                           
  7089                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  7090  0603  0021               	movlb	1	; select bank1
  7091  0604  085B               	movf	_s_data^(0+128),w
  7092  0605  1903               	btfsc	3,2
  7093  0606  2E13               	goto	l2281
  7094                           
  7095                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  7096  0607  3036               	movlw	54
  7097  0608  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7098                           
  7099                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  7100  060B  303B               	movlw	59
  7101  060C  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7102                           
  7103                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  7104  060F  303A               	movlw	58
  7105  0610  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7106  0613                     l2281:	
  7107                           
  7108                           ;RF_Control_B1.c: 97: }
  7109                           ;RF_Control_B1.c: 98: CC2500_TxData();
  7110  0613  3197  279B  3185   	fcall	_CC2500_TxData
  7111                           
  7112                           ;RF_Control_B1.c: 100: } else {
  7113  0616  2E68               	goto	l10047
  7114  0617                     l2280:	
  7115                           
  7116                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  7117  0617  1DBF               	btfss	_RF1^(0+128),3
  7118  0618  2E53               	goto	l2283
  7119                           
  7120                           ;RF_Control_B1.c: 103: CC2500_RxData();
  7121  0619  3189  21F6  3185   	fcall	_CC2500_RxData
  7122                           
  7123                           ;RF_Control_B1.c: 104: if (RF1.ReceiveGO == 1) {
  7124  061C  0021               	movlb	1	; select bank1
  7125  061D  1CBF               	btfss	_RF1^(0+128),1
  7126  061E  2E68               	goto	l10047
  7127                           
  7128                           ;RF_Control_B1.c: 105: RF1.ReceiveGO = 0;
  7129  061F  10BF               	bcf	_RF1^(0+128),1
  7130                           
  7131                           ;RF_Control_B1.c: 106: RF1.Correction = 0;
  7132  0620  12C0               	bcf	(_RF1^(0+128)+1),5
  7133                           
  7134                           ;RF_Control_B1.c: 107: RF1.CorrectionCounter = 0;
  7135  0621  01C9               	clrf	(_RF1^(0+128)+10)
  7136  0622  01CA               	clrf	((_RF1+1)^(0+128)+10)
  7137                           
  7138                           ;RF_Control_B1.c: 116: getRxData();
  7139  0623  3188  2047  3185   	fcall	_getRxData
  7140                           
  7141                           ;RF_Control_B1.c: 117: RB5 = RB5 == 1 ? 0 : 1;
  7142  0626  3020               	movlw	32
  7143  0627  0020               	movlb	0	; select bank0
  7144  0628  068D               	xorwf	13,f
  7145                           
  7146                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  7147  0629  0021               	movlb	1	; select bank1
  7148  062A  14C0               	bsf	(_RF1^(0+128)+1),1
  7149                           
  7150                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  7151  062B  1DC0               	btfss	(_RF1^(0+128)+1),3
  7152  062C  2E3A               	goto	l10031
  7153                           
  7154                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 20) {
  7155  062D  3000               	movlw	0
  7156  062E  0247               	subwf	((_RF1+1)^(0+128)+7),w
  7157  062F  3015               	movlw	21
  7158  0630  1903               	skipnz
  7159  0631  0246               	subwf	(_RF1^(0+128)+7),w
  7160  0632  1C03               	skipc
  7161  0633  2E38               	goto	l10029
  7162                           
  7163                           ;RF_Control_B1.c: 124: RF1.RunTime = 20;
  7164  0634  3014               	movlw	20
  7165  0635  00C6               	movwf	(_RF1^(0+128)+7)
  7166  0636  3000               	movlw	0
  7167  0637  00C7               	movwf	(_RF1^(0+128)+8)
  7168  0638                     l10029:	
  7169                           
  7170                           ;RF_Control_B1.c: 125: }
  7171                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  7172  0638  01C3               	clrf	(_RF1^(0+128)+4)
  7173                           
  7174                           ;RF_Control_B1.c: 127: } else {
  7175  0639  2E68               	goto	l10047
  7176  063A                     l10031:	
  7177                           
  7178                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  7179  063A  3001               	movlw	1
  7180  063B  0020               	movlb	0	; select bank0
  7181  063C  00E7               	movwf	??_setRF_Main
  7182  063D  0867               	movf	??_setRF_Main,w
  7183  063E  0021               	movlb	1	; select bank1
  7184  063F  07C3               	addwf	(_RF1^(0+128)+4),f
  7185                           
  7186                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  7187  0640  0843               	movf	(_RF1^(0+128)+4),w
  7188  0641  3A02               	xorlw	2
  7189  0642  1D03               	skipz
  7190  0643  2E68               	goto	l10047
  7191                           
  7192                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  7193  0644  01C3               	clrf	(_RF1^(0+128)+4)
  7194                           
  7195                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  7196  0645  01C4               	clrf	(_RF1^(0+128)+5)
  7197  0646  01C5               	clrf	((_RF1+1)^(0+128)+5)
  7198                           
  7199                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 300) {
  7200  0647  3001               	movlw	1
  7201  0648  0247               	subwf	((_RF1+1)^(0+128)+7),w
  7202  0649  302C               	movlw	44
  7203  064A  1903               	skipnz
  7204  064B  0246               	subwf	(_RF1^(0+128)+7),w
  7205  064C  1803               	skipnc
  7206  064D  2E68               	goto	l10047
  7207                           
  7208                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  7209  064E  300A               	movlw	10
  7210  064F  07C6               	addwf	(_RF1^(0+128)+7),f
  7211  0650  3000               	movlw	0
  7212  0651  3DC7               	addwfc	((_RF1+1)^(0+128)+7),f
  7213                           
  7214                           ;RF_Control_B1.c: 134: }
  7215                           ;RF_Control_B1.c: 135: }
  7216                           ;RF_Control_B1.c: 136: }
  7217                           ;RF_Control_B1.c: 137: }
  7218                           ;RF_Control_B1.c: 138: } else {
  7219  0652  2E68               	goto	l10047
  7220  0653                     l2283:	
  7221                           
  7222                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7223  0653  1DBF               	btfss	_RF1^(0+128),3
  7224  0654  18BF               	btfsc	_RF1^(0+128),1
  7225  0655  2E68               	goto	l10047
  7226                           
  7227                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  7228  0656  15BF               	bsf	_RF1^(0+128),3
  7229                           
  7230                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  7231  0657  16C0               	bsf	(_RF1^(0+128)+1),5
  7232                           
  7233                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  7234  0658  3036               	movlw	54
  7235  0659  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7236                           
  7237                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  7238  065C  303B               	movlw	59
  7239  065D  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7240                           
  7241                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  7242  0660  303A               	movlw	58
  7243  0661  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7244                           
  7245                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  7246  0664  3034               	movlw	52
  7247  0665  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7248  0668                     l10047:	
  7249                           
  7250                           ;RF_Control_B1.c: 149: }
  7251                           ;RF_Control_B1.c: 151: }
  7252                           ;RF_Control_B1.c: 152: }
  7253                           ;RF_Control_B1.c: 153: }
  7254                           ;RF_Control_B1.c: 154: if (RF1.RxStatus == 1) {
  7255  0668  0021               	movlb	1	; select bank1
  7256  0669  1DBF               	btfss	_RF1^(0+128),3
  7257  066A  2E89               	goto	l10059
  7258                           
  7259                           ;RF_Control_B1.c: 155: RF1.CheckedCounter++;
  7260  066B  3001               	movlw	1
  7261  066C  07C4               	addwf	(_RF1^(0+128)+5),f
  7262  066D  3000               	movlw	0
  7263  066E  3DC5               	addwfc	((_RF1+1)^(0+128)+5),f
  7264                           
  7265                           ;RF_Control_B1.c: 156: if (RF1.CheckedCounter == 100) {
  7266  066F  3005               	movlw	5
  7267  0670  3EBF               	addlw	_RF1& (0+255)
  7268  0671  0086               	movwf	6
  7269  0672  0187               	clrf	7
  7270  0673  3F40               	moviw [0]fsr1
  7271  0674  3A64               	xorlw	100
  7272  0675  1D03               	skipz
  7273  0676  2E79               	goto	u10645
  7274  0677  3F41               	moviw [1]fsr1
  7275  0678  3A00               	xorlw	0
  7276  0679                     u10645:	
  7277  0679  1D03               	skipz
  7278  067A  2E89               	goto	l10059
  7279                           
  7280                           ;RF_Control_B1.c: 157: RF1.CheckedCounter = 0;
  7281  067B  01C4               	clrf	(_RF1^(0+128)+5)
  7282  067C  01C5               	clrf	((_RF1+1)^(0+128)+5)
  7283                           
  7284                           ;RF_Control_B1.c: 158: RF1.CheckCount = 0;
  7285  067D  01C3               	clrf	(_RF1^(0+128)+4)
  7286                           
  7287                           ;RF_Control_B1.c: 159: if (RF1.RunTime > 20) {
  7288  067E  3000               	movlw	0
  7289  067F  0247               	subwf	((_RF1+1)^(0+128)+7),w
  7290  0680  3015               	movlw	21
  7291  0681  1903               	skipnz
  7292  0682  0246               	subwf	(_RF1^(0+128)+7),w
  7293  0683  1C03               	skipc
  7294  0684  2E89               	goto	l10059
  7295                           
  7296                           ;RF_Control_B1.c: 160: RF1.RunTime -= 10;
  7297  0685  300A               	movlw	10
  7298  0686  02C6               	subwf	(_RF1^(0+128)+7),f
  7299  0687  3000               	movlw	0
  7300  0688  3BC7               	subwfb	((_RF1+1)^(0+128)+7),f
  7301  0689                     l10059:	
  7302                           
  7303                           ;RF_Control_B1.c: 161: }
  7304                           ;RF_Control_B1.c: 162: }
  7305                           ;RF_Control_B1.c: 163: }
  7306                           ;RF_Control_B1.c: 164: if (RF1.Correction == 1) {
  7307  0689  1EC0               	btfss	(_RF1^(0+128)+1),5
  7308  068A  0008               	return
  7309                           
  7310                           ;RF_Control_B1.c: 165: RF1.CorrectionCounter++;
  7311  068B  3001               	movlw	1
  7312  068C  07C9               	addwf	(_RF1^(0+128)+10),f
  7313  068D  3000               	movlw	0
  7314  068E  3DCA               	addwfc	((_RF1+1)^(0+128)+10),f
  7315                           
  7316                           ;RF_Control_B1.c: 166: if (RF1.CorrectionCounter >= 30000) {
  7317  068F  3075               	movlw	117
  7318  0690  024A               	subwf	((_RF1+1)^(0+128)+10),w
  7319  0691  3030               	movlw	48
  7320  0692  1903               	skipnz
  7321  0693  0249               	subwf	(_RF1^(0+128)+10),w
  7322  0694  1C03               	skipc
  7323  0695  0008               	return
  7324                           
  7325                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter = 0;
  7326  0696  01C9               	clrf	(_RF1^(0+128)+10)
  7327  0697  01CA               	clrf	((_RF1+1)^(0+128)+10)
  7328                           
  7329                           ;RF_Control_B1.c: 168: RF1.RxStatus = 0;
  7330  0698  11BF               	bcf	_RF1^(0+128),3
  7331                           
  7332                           ;RF_Control_B1.c: 169: RF1.ReceiveGO = 0;
  7333  0699  10BF               	bcf	_RF1^(0+128),1
  7334  069A  0008               	return
  7335  069B                     __end_of_setRF_Main:	
  7336                           
  7337                           	psect	text29
  7338  0847                     __ptext29:	
  7339 ;; *************** function _getRxData *****************
  7340 ;; Defined at:
  7341 ;;		line 252 in file "../src/RF_Control_B1.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;		None
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;		None
  7346 ;; Return value:  Size  Location     Type
  7347 ;;		None               void
  7348 ;; Registers used:
  7349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;Total ram usage:        0 bytes
  7360 ;; Hardware stack levels used:    1
  7361 ;; Hardware stack levels required when called:   12
  7362 ;; This function calls:
  7363 ;;		_setControl_Lights_Table
  7364 ;;		_setLog_Code
  7365 ;; This function is called by:
  7366 ;;		_setRF_Main
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           
  7371                           ;psect for function _getRxData
  7372  0847                     _getRxData:	
  7373                           
  7374                           ;RF_Control_B1.c: 253: if (RF1.Learn == 1) {
  7375                           
  7376                           ;incstack = 0
  7377                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7378  0847  0021               	movlb	1	; select bank1
  7379  0848  1F3F               	btfss	_RF1^(0+128),6
  7380  0849  285A               	goto	l9469
  7381                           
  7382                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7383  084A  0022               	movlb	2	; select bank2
  7384  084B  08A0               	movf	_RF_Data^(0+256),f
  7385  084C  1D03               	skipz
  7386  084D  2857               	goto	l2314
  7387  084E  0821               	movf	(_RF_Data^(0+256)+1),w
  7388  084F  3A64               	xorlw	100
  7389  0850  1D03               	skipz
  7390  0851  2857               	goto	l2314
  7391                           
  7392                           ;RF_Control_B1.c: 255: setLog_Code();
  7393  0852  3190  20F7         	fcall	_setLog_Code
  7394                           
  7395                           ;RF_Control_B1.c: 256: RF1.Checked = 1;
  7396  0854  0021               	movlb	1	; select bank1
  7397  0855  15C0               	bsf	(_RF1^(0+128)+1),3
  7398                           
  7399                           ;RF_Control_B1.c: 257: } else {
  7400  0856  0008               	return
  7401  0857                     l2314:	
  7402                           
  7403                           ;RF_Control_B1.c: 258: RF1.Checked = 0;
  7404  0857  0021               	movlb	1	; select bank1
  7405  0858  11C0               	bcf	(_RF1^(0+128)+1),3
  7406                           
  7407                           ;RF_Control_B1.c: 259: }
  7408                           ;RF_Control_B1.c: 260: } else {
  7409  0859  0008               	return
  7410  085A                     l9469:	
  7411                           
  7412                           ;RF_Control_B1.c: 261: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7413  085A  0022               	movlb	2	; select bank2
  7414  085B  08A0               	movf	_RF_Data^(0+256),f
  7415  085C  1D03               	skipz
  7416  085D  2898               	goto	l9491
  7417  085E  0821               	movf	(_RF_Data^(0+256)+1),w
  7418  085F  3A02               	xorlw	2
  7419  0860  1D03               	skipz
  7420  0861  2898               	goto	l9491
  7421                           
  7422                           ;RF_Control_B1.c: 263: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7423  0862  082C               	movf	(_RF_Data^(0+256)+12),w
  7424  0863  3AFF               	xorlw	255
  7425  0864  1D03               	skipz
  7426  0865  2872               	goto	l9481
  7427  0866  082D               	movf	(_RF_Data^(0+256)+13),w
  7428  0867  3AFF               	xorlw	255
  7429  0868  1D03               	skipz
  7430  0869  2872               	goto	l9481
  7431  086A  082E               	movf	(_RF_Data^(0+256)+14),w
  7432  086B  3AFF               	xorlw	255
  7433  086C  1D03               	skipz
  7434  086D  2872               	goto	l9481
  7435                           
  7436                           ;RF_Control_B1.c: 264: __nop();
  7437  086E  0000               	nop
  7438                           
  7439                           ;RF_Control_B1.c: 265: RF1.Checked = 0;
  7440  086F  0021               	movlb	1	; select bank1
  7441  0870  11C0               	bcf	(_RF1^(0+128)+1),3
  7442                           
  7443                           ;RF_Control_B1.c: 266: } else {
  7444  0871  0008               	return
  7445  0872                     l9481:	
  7446                           
  7447                           ;RF_Control_B1.c: 267: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7448  0872  0020               	movlb	0	; select bank0
  7449  0873  086D               	movf	_product,w
  7450  0874  3E0C               	addlw	12
  7451  0875  0086               	movwf	6
  7452  0876  3002               	movlw	2	; select bank4/5
  7453  0877  0087               	movwf	7
  7454  0878  0022               	movlb	2	; select bank2
  7455  0879  082C               	movf	(_RF_Data^(0+256)+12),w
  7456  087A  0601               	xorwf	1,w
  7457  087B  1D03               	skipz
  7458  087C  0008               	return
  7459  087D  0020               	movlb	0	; select bank0
  7460  087E  086D               	movf	_product,w
  7461  087F  3E0D               	addlw	13
  7462  0880  0086               	movwf	6
  7463  0881  3002               	movlw	2	; select bank4/5
  7464  0882  0087               	movwf	7
  7465  0883  0022               	movlb	2	; select bank2
  7466  0884  082D               	movf	(_RF_Data^(0+256)+13),w
  7467  0885  0601               	xorwf	1,w
  7468  0886  1D03               	skipz
  7469  0887  0008               	return
  7470  0888  0020               	movlb	0	; select bank0
  7471  0889  086D               	movf	_product,w
  7472  088A  3E0E               	addlw	14
  7473  088B  0086               	movwf	6
  7474  088C  3002               	movlw	2	; select bank4/5
  7475  088D  0087               	movwf	7
  7476  088E  0022               	movlb	2	; select bank2
  7477  088F  082E               	movf	(_RF_Data^(0+256)+14),w
  7478  0890  0601               	xorwf	1,w
  7479  0891  1D03               	skipz
  7480  0892  0008               	return
  7481                           
  7482                           ;RF_Control_B1.c: 268: setControl_Lights_Table();
  7483  0893  3187  2762         	fcall	_setControl_Lights_Table
  7484                           
  7485                           ;RF_Control_B1.c: 269: RF1.Checked = 1;
  7486  0895  0021               	movlb	1	; select bank1
  7487  0896  15C0               	bsf	(_RF1^(0+128)+1),3
  7488                           
  7489                           ;RF_Control_B1.c: 270: }
  7490                           ;RF_Control_B1.c: 271: }
  7491                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7492  0897  0008               	return
  7493  0898                     l9491:	
  7494  0898  0022               	movlb	2	; select bank2
  7495  0899  0820               	movf	_RF_Data^(0+256),w
  7496  089A  3AFF               	xorlw	255
  7497  089B  1D03               	skipz
  7498  089C  28A3               	goto	l9497
  7499  089D  0821               	movf	(_RF_Data^(0+256)+1),w
  7500  089E  3A02               	xorlw	2
  7501  089F  1D03               	skipz
  7502  08A0  28A3               	goto	l9497
  7503                           
  7504                           ;RF_Control_B1.c: 273: __nop();
  7505  08A1  0000               	nop
  7506                           
  7507                           ;RF_Control_B1.c: 274: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7508  08A2  0008               	return
  7509  08A3                     l9497:	
  7510  08A3  0022               	movlb	2	; select bank2
  7511  08A4  08A0               	movf	_RF_Data^(0+256),f
  7512  08A5  1D03               	skipz
  7513  08A6  28AD               	goto	l2324
  7514  08A7  0821               	movf	(_RF_Data^(0+256)+1),w
  7515  08A8  3A65               	xorlw	101
  7516  08A9  1D03               	skipz
  7517  08AA  28AD               	goto	l2324
  7518                           
  7519                           ;RF_Control_B1.c: 275: __nop();
  7520  08AB  0000               	nop
  7521                           
  7522                           ;RF_Control_B1.c: 276: } else {
  7523  08AC  0008               	return
  7524  08AD                     l2324:	
  7525                           
  7526                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  7527  08AD  0021               	movlb	1	; select bank1
  7528  08AE  11C0               	bcf	(_RF1^(0+128)+1),3
  7529  08AF  0008               	return
  7530  08B0                     __end_of_getRxData:	
  7531                           
  7532                           	psect	text30
  7533  10F7                     __ptext30:	
  7534 ;; *************** function _setLog_Code *****************
  7535 ;; Defined at:
  7536 ;;		line 287 in file "../src/RF_Control_B1.c"
  7537 ;; Parameters:    Size  Location     Type
  7538 ;;		None
  7539 ;; Auto vars:     Size  Location     Type
  7540 ;;		None
  7541 ;; Return value:  Size  Location     Type
  7542 ;;		None               void
  7543 ;; Registers used:
  7544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7545 ;; Tracked objects:
  7546 ;;		On entry : 0/0
  7547 ;;		On exit  : 0/0
  7548 ;;		Unchanged: 0/0
  7549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7552 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7553 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7554 ;;Total ram usage:        1 bytes
  7555 ;; Hardware stack levels used:    1
  7556 ;; Hardware stack levels required when called:    7
  7557 ;; This function calls:
  7558 ;;		_setBuz
  7559 ;; This function is called by:
  7560 ;;		_getRxData
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           
  7565                           ;psect for function _setLog_Code
  7566  10F7                     _setLog_Code:	
  7567                           
  7568                           ;RF_Control_B1.c: 288: product->Data[12]=RF_Data[12];
  7569                           
  7570                           ;incstack = 0
  7571                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7572  10F7  0022               	movlb	2	; select bank2
  7573  10F8  082C               	movf	(_RF_Data^(0+256)+12),w
  7574  10F9  0020               	movlb	0	; select bank0
  7575  10FA  00AD               	movwf	??_setLog_Code
  7576  10FB  086D               	movf	_product,w
  7577  10FC  3E0C               	addlw	12
  7578  10FD  0086               	movwf	6
  7579  10FE  3002               	movlw	2	; select bank4/5
  7580  10FF  0087               	movwf	7
  7581  1100  082D               	movf	??_setLog_Code,w
  7582  1101  0081               	movwf	1
  7583                           
  7584                           ;RF_Control_B1.c: 289: product->Data[13]=RF_Data[13];
  7585  1102  0022               	movlb	2	; select bank2
  7586  1103  082D               	movf	(_RF_Data^(0+256)+13),w
  7587  1104  0020               	movlb	0	; select bank0
  7588  1105  00AD               	movwf	??_setLog_Code
  7589  1106  086D               	movf	_product,w
  7590  1107  3E0D               	addlw	13
  7591  1108  0086               	movwf	6
  7592  1109  3002               	movlw	2	; select bank4/5
  7593  110A  0087               	movwf	7
  7594  110B  082D               	movf	??_setLog_Code,w
  7595  110C  0081               	movwf	1
  7596                           
  7597                           ;RF_Control_B1.c: 290: product->Data[14]=RF_Data[14];
  7598  110D  0022               	movlb	2	; select bank2
  7599  110E  082E               	movf	(_RF_Data^(0+256)+14),w
  7600  110F  0020               	movlb	0	; select bank0
  7601  1110  00AD               	movwf	??_setLog_Code
  7602  1111  086D               	movf	_product,w
  7603  1112  3E0E               	addlw	14
  7604  1113  0086               	movwf	6
  7605  1114  3002               	movlw	2	; select bank4/5
  7606  1115  0087               	movwf	7
  7607  1116  082D               	movf	??_setLog_Code,w
  7608  1117  0081               	movwf	1
  7609                           
  7610                           ;RF_Control_B1.c: 291: setBuz(1, 100);
  7611  1118  3064               	movlw	100
  7612  1119  00A9               	movwf	setBuz@time
  7613  111A  3000               	movlw	0
  7614  111B  00AA               	movwf	setBuz@time+1
  7615  111C  3001               	movlw	1
  7616  111D  3195  256B  3190   	fcall	_setBuz
  7617                           
  7618                           ;RF_Control_B1.c: 292: RF1.Learn = 0;
  7619  1120  0021               	movlb	1	; select bank1
  7620  1121  133F               	bcf	_RF1^(0+128),6
  7621                           
  7622                           ;RF_Control_B1.c: 293: if (myMain.First) {
  7623  1122  1C21               	btfss	(_myMain^(0+128)+1),0
  7624  1123  2926               	goto	l2329
  7625                           
  7626                           ;RF_Control_B1.c: 294: Memory.LoopSave=1;
  7627  1124  0024               	movlb	4	; select bank4
  7628  1125  1544               	bsf	(_Memory^(0+512)+36),2
  7629  1126                     l2329:	
  7630                           
  7631                           ;RF_Control_B1.c: 295: }
  7632                           ;RF_Control_B1.c: 296: Memory.Modify=1;
  7633  1126  0024               	movlb	4	; select bank4
  7634  1127  1444               	bsf	(_Memory^(0+512)+36),0
  7635  1128  0008               	return
  7636  1129                     __end_of_setLog_Code:	
  7637                           
  7638                           	psect	text31
  7639  0762                     __ptext31:	
  7640 ;; *************** function _setControl_Lights_Table *****************
  7641 ;; Defined at:
  7642 ;;		line 300 in file "../src/RF_Control_B1.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;		None
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;		None
  7647 ;; Return value:  Size  Location     Type
  7648 ;;		None               void
  7649 ;; Registers used:
  7650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7651 ;; Tracked objects:
  7652 ;;		On entry : 0/0
  7653 ;;		On exit  : 0/0
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;Total ram usage:        0 bytes
  7661 ;; Hardware stack levels used:    1
  7662 ;; Hardware stack levels required when called:   11
  7663 ;; This function calls:
  7664 ;;		_setBuz
  7665 ;;		_setDimmerLights
  7666 ;;		_setRFSW_AdjControl
  7667 ;;		_setRFSW_Control
  7668 ;;		_setRFSW_Status
  7669 ;;		_setSw_Status
  7670 ;;		_setTxData
  7671 ;; This function is called by:
  7672 ;;		_getRxData
  7673 ;; This function uses a non-reentrant model
  7674 ;;
  7675                           
  7676                           
  7677                           ;psect for function _setControl_Lights_Table
  7678  0762                     _setControl_Lights_Table:	
  7679                           
  7680                           ;RF_Control_B1.c: 301: if (RF_Data[15] == 0x00) {
  7681                           
  7682                           ;incstack = 0
  7683                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7684  0762  0022               	movlb	2	; select bank2
  7685  0763  08AF               	movf	(_RF_Data^(0+256)+15),f
  7686  0764  1D03               	skipz
  7687  0765  2FAE               	goto	l9191
  7688                           
  7689                           ;RF_Control_B1.c: 303: setDimmerLights(1, 0);
  7690  0766  0020               	movlb	0	; select bank0
  7691  0767  01A4               	clrf	setDimmerLights@status
  7692  0768  3001               	movlw	1
  7693  0769  318C  24D2  3187   	fcall	_setDimmerLights
  7694                           
  7695                           ;RF_Control_B1.c: 304: setRFSW_Status(1, 0);
  7696  076C  0020               	movlb	0	; select bank0
  7697  076D  01A2               	clrf	setRFSW_Status@command
  7698  076E  3001               	movlw	1
  7699  076F  319B  230A  3187   	fcall	_setRFSW_Status
  7700                           
  7701                           ;RF_Control_B1.c: 305: setSw_Status(1, 0);
  7702  0772  0020               	movlb	0	; select bank0
  7703  0773  01A2               	clrf	setSw_Status@command
  7704  0774  3001               	movlw	1
  7705  0775  319B  2334  3187   	fcall	_setSw_Status
  7706                           
  7707                           ;RF_Control_B1.c: 308: setDimmerLights(2, 0);
  7708  0778  0020               	movlb	0	; select bank0
  7709  0779  01A4               	clrf	setDimmerLights@status
  7710  077A  3002               	movlw	2
  7711  077B  318C  24D2  3187   	fcall	_setDimmerLights
  7712                           
  7713                           ;RF_Control_B1.c: 309: setRFSW_Status(2, 0);
  7714  077E  0020               	movlb	0	; select bank0
  7715  077F  01A2               	clrf	setRFSW_Status@command
  7716  0780  3002               	movlw	2
  7717  0781  319B  230A  3187   	fcall	_setRFSW_Status
  7718                           
  7719                           ;RF_Control_B1.c: 310: setSw_Status(2, 0);
  7720  0784  0020               	movlb	0	; select bank0
  7721  0785  01A2               	clrf	setSw_Status@command
  7722  0786  3002               	movlw	2
  7723  0787  319B  2334  3187   	fcall	_setSw_Status
  7724                           
  7725                           ;RF_Control_B1.c: 318: product->Data[9]=0;
  7726  078A  0020               	movlb	0	; select bank0
  7727  078B  086D               	movf	_product,w
  7728  078C  3E09               	addlw	9
  7729  078D  0086               	movwf	6
  7730  078E  3002               	movlw	2	; select bank4/5
  7731  078F  0087               	movwf	7
  7732  0790  0181               	clrf	1
  7733                           
  7734                           ;RF_Control_B1.c: 319: product->Data[11]=0;
  7735  0791  086D               	movf	_product,w
  7736  0792  3E0B               	addlw	11
  7737  0793  0086               	movwf	6
  7738  0794  3002               	movlw	2	; select bank4/5
  7739  0795  0087               	movwf	7
  7740  0796  0181               	clrf	1
  7741                           
  7742                           ;RF_Control_B1.c: 320: product->Data[15]=0;
  7743  0797  086D               	movf	_product,w
  7744  0798  3E0F               	addlw	15
  7745  0799  0086               	movwf	6
  7746  079A  3002               	movlw	2	; select bank4/5
  7747  079B  0087               	movwf	7
  7748  079C  0181               	clrf	1
  7749                           
  7750                           ;RF_Control_B1.c: 321: product->Data[17]=0;
  7751  079D  086D               	movf	_product,w
  7752  079E  3E11               	addlw	17
  7753  079F  0086               	movwf	6
  7754  07A0  3002               	movlw	2	; select bank4/5
  7755  07A1  0087               	movwf	7
  7756  07A2  0181               	clrf	1
  7757                           
  7758                           ;RF_Control_B1.c: 322: setBuz(1, 100);
  7759  07A3  3064               	movlw	100
  7760  07A4  00A9               	movwf	setBuz@time
  7761  07A5  3000               	movlw	0
  7762  07A6  00AA               	movwf	setBuz@time+1
  7763  07A7  3001               	movlw	1
  7764  07A8  3195  256B  3187   	fcall	_setBuz
  7765                           
  7766                           ;RF_Control_B1.c: 323: setTxData();
  7767  07AB  318F  2743         	fcall	_setTxData
  7768                           
  7769                           ;RF_Control_B1.c: 324: } else if (RF_Data[15] == 0x20) {
  7770  07AD  0008               	return
  7771  07AE                     l9191:	
  7772  07AE  0022               	movlb	2	; select bank2
  7773  07AF  082F               	movf	(_RF_Data^(0+256)+15),w
  7774  07B0  3A20               	xorlw	32
  7775  07B1  1D03               	skipz
  7776  07B2  2FC9               	goto	l9197
  7777                           
  7778                           ;RF_Control_B1.c: 325: product->Data[9]=0;
  7779  07B3  0020               	movlb	0	; select bank0
  7780  07B4  086D               	movf	_product,w
  7781  07B5  3E09               	addlw	9
  7782  07B6  0086               	movwf	6
  7783  07B7  3002               	movlw	2	; select bank4/5
  7784  07B8  0087               	movwf	7
  7785  07B9  0181               	clrf	1
  7786                           
  7787                           ;RF_Control_B1.c: 326: product->Data[11]=0;
  7788  07BA  086D               	movf	_product,w
  7789  07BB  3E0B               	addlw	11
  7790  07BC  0086               	movwf	6
  7791  07BD  3002               	movlw	2	; select bank4/5
  7792  07BE  0087               	movwf	7
  7793  07BF  0181               	clrf	1
  7794                           
  7795                           ;RF_Control_B1.c: 327: product->Data[17]=0;
  7796  07C0  086D               	movf	_product,w
  7797  07C1  3E11               	addlw	17
  7798  07C2  0086               	movwf	6
  7799  07C3  3002               	movlw	2	; select bank4/5
  7800  07C4  0087               	movwf	7
  7801  07C5  0181               	clrf	1
  7802                           
  7803                           ;RF_Control_B1.c: 328: setTxData();
  7804  07C6  318F  2743         	fcall	_setTxData
  7805                           
  7806                           ;RF_Control_B1.c: 329: }
  7807  07C8  0008               	return
  7808  07C9                     l9197:	
  7809                           
  7810                           ;RF_Control_B1.c: 331: else if (RF_Data[15] == 0x01) {
  7811  07C9  0022               	movlb	2	; select bank2
  7812  07CA  082F               	movf	(_RF_Data^(0+256)+15),w
  7813  07CB  3A01               	xorlw	1
  7814  07CC  1D03               	skipz
  7815  07CD  2FD2               	goto	l9201
  7816                           
  7817                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7818  07CE  3001               	movlw	1
  7819  07CF  318D  255B         	fcall	_setRFSW_Control
  7820                           
  7821                           ;RF_Control_B1.c: 333: }
  7822  07D1  0008               	return
  7823  07D2                     l9201:	
  7824                           
  7825                           ;RF_Control_B1.c: 335: else if (RF_Data[15] == 0x11) {
  7826  07D2  0022               	movlb	2	; select bank2
  7827  07D3  082F               	movf	(_RF_Data^(0+256)+15),w
  7828  07D4  3A11               	xorlw	17
  7829  07D5  1D03               	skipz
  7830  07D6  2FDB               	goto	l9205
  7831                           
  7832                           ;RF_Control_B1.c: 336: setRFSW_AdjControl(1);
  7833  07D7  3001               	movlw	1
  7834  07D8  3192  2203         	fcall	_setRFSW_AdjControl
  7835                           
  7836                           ;RF_Control_B1.c: 337: }
  7837  07DA  0008               	return
  7838  07DB                     l9205:	
  7839                           
  7840                           ;RF_Control_B1.c: 342: else if (RF_Data[15] == 0x02) {
  7841  07DB  0022               	movlb	2	; select bank2
  7842  07DC  082F               	movf	(_RF_Data^(0+256)+15),w
  7843  07DD  3A02               	xorlw	2
  7844  07DE  1D03               	skipz
  7845  07DF  2FE4               	goto	l9209
  7846                           
  7847                           ;RF_Control_B1.c: 343: setRFSW_Control(2);
  7848  07E0  3002               	movlw	2
  7849  07E1  318D  255B         	fcall	_setRFSW_Control
  7850                           
  7851                           ;RF_Control_B1.c: 344: }
  7852  07E3  0008               	return
  7853  07E4                     l9209:	
  7854                           
  7855                           ;RF_Control_B1.c: 346: else if (RF_Data[15] == 0x21) {
  7856  07E4  0022               	movlb	2	; select bank2
  7857  07E5  082F               	movf	(_RF_Data^(0+256)+15),w
  7858  07E6  3A21               	xorlw	33
  7859  07E7  1D03               	skipz
  7860  07E8  0008               	return
  7861                           
  7862                           ;RF_Control_B1.c: 347: setRFSW_AdjControl(2);
  7863  07E9  3002               	movlw	2
  7864  07EA  3192  2203         	fcall	_setRFSW_AdjControl
  7865  07EC  0008               	return
  7866  07ED                     __end_of_setControl_Lights_Table:	
  7867                           
  7868                           	psect	text32
  7869  0D5B                     __ptext32:	
  7870 ;; *************** function _setRFSW_Control *****************
  7871 ;; Defined at:
  7872 ;;		line 388 in file "../src/RF_Control_B1.c"
  7873 ;; Parameters:    Size  Location     Type
  7874 ;;  sw              1    wreg     unsigned char 
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;  sw              1   67[BANK0 ] unsigned char 
  7877 ;; Return value:  Size  Location     Type
  7878 ;;		None               void
  7879 ;; Registers used:
  7880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7887 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7889 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;Total ram usage:        2 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:    9
  7893 ;; This function calls:
  7894 ;;		_RfSWPointSelect
  7895 ;;		_setBuz
  7896 ;;		_setDelayOff_GO
  7897 ;;		_setDimmerLights_Switch
  7898 ;;		_setDimmerLights_Trigger
  7899 ;;		_setRF_DimmerLights
  7900 ;;		_setSw_Status
  7901 ;;		_setTxData
  7902 ;; This function is called by:
  7903 ;;		_setControl_Lights_Table
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907                           
  7908                           ;psect for function _setRFSW_Control
  7909  0D5B                     _setRFSW_Control:	
  7910                           
  7911                           ;incstack = 0
  7912                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7913                           ;setRFSW_Control@sw stored from wreg
  7914  0D5B  0020               	movlb	0	; select bank0
  7915  0D5C  00E3               	movwf	setRFSW_Control@sw
  7916                           
  7917                           ;RF_Control_B1.c: 389: RfSWPointSelect(sw);
  7918  0D5D  0863               	movf	setRFSW_Control@sw,w
  7919  0D5E  3187  27ED  318D   	fcall	_RfSWPointSelect
  7920                           
  7921                           ;RF_Control_B1.c: 390: if (RFSW->Status == 0) {
  7922  0D61  0879               	movf	_RFSW,w
  7923  0D62  0086               	movwf	6
  7924  0D63  0187               	clrf	7
  7925  0D64  1801               	btfsc	1,0
  7926  0D65  2D9A               	goto	l9035
  7927                           
  7928                           ;RF_Control_B1.c: 391: if (RF_Data[16] == 0x80) {
  7929  0D66  0022               	movlb	2	; select bank2
  7930  0D67  0830               	movf	(_RF_Data^(0+256)+16),w
  7931  0D68  3A80               	xorlw	128
  7932  0D69  1D03               	skipz
  7933  0D6A  2D78               	goto	l9025
  7934                           
  7935                           ;RF_Control_B1.c: 392: setDelayOff_GO(sw, 1, RF_Data[17]);
  7936  0D6B  0020               	movlb	0	; select bank0
  7937  0D6C  01AA               	clrf	setDelayOff_GO@command
  7938  0D6D  0AAA               	incf	setDelayOff_GO@command,f
  7939  0D6E  0022               	movlb	2	; select bank2
  7940  0D6F  0831               	movf	(_RF_Data^(0+256)+17),w
  7941  0D70  0020               	movlb	0	; select bank0
  7942  0D71  00E2               	movwf	??_setRFSW_Control
  7943  0D72  0862               	movf	??_setRFSW_Control,w
  7944  0D73  00AB               	movwf	setDelayOff_GO@value
  7945  0D74  0863               	movf	setRFSW_Control@sw,w
  7946  0D75  3196  26DB  318D   	fcall	_setDelayOff_GO
  7947  0D78                     l9025:	
  7948                           
  7949                           ;RF_Control_B1.c: 393: }
  7950                           ;RF_Control_B1.c: 394: RFSW->Status = 1;
  7951  0D78  0879               	movf	_RFSW,w
  7952  0D79  0086               	movwf	6
  7953  0D7A  0187               	clrf	7
  7954  0D7B  1401               	bsf	1,0
  7955                           
  7956                           ;RF_Control_B1.c: 395: setSw_Status(sw, 1);
  7957  0D7C  0020               	movlb	0	; select bank0
  7958  0D7D  01A2               	clrf	setSw_Status@command
  7959  0D7E  0AA2               	incf	setSw_Status@command,f
  7960  0D7F  0863               	movf	setRFSW_Control@sw,w
  7961  0D80  319B  2334  318D   	fcall	_setSw_Status
  7962                           
  7963                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw, 1);
  7964  0D83  0020               	movlb	0	; select bank0
  7965  0D84  01A2               	clrf	setDimmerLights_Trigger@command
  7966  0D85  0AA2               	incf	setDimmerLights_Trigger@command,f
  7967  0D86  0863               	movf	setRFSW_Control@sw,w
  7968  0D87  319B  2371  318D   	fcall	_setDimmerLights_Trigger
  7969                           
  7970                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw, 1);
  7971  0D8A  0020               	movlb	0	; select bank0
  7972  0D8B  01A2               	clrf	setDimmerLights_Switch@command
  7973  0D8C  0AA2               	incf	setDimmerLights_Switch@command,f
  7974  0D8D  0863               	movf	setRFSW_Control@sw,w
  7975  0D8E  319B  2361  318D   	fcall	_setDimmerLights_Switch
  7976                           
  7977                           ;RF_Control_B1.c: 400: setRF_DimmerLights(sw, RFSW->Status);
  7978  0D91  0879               	movf	_RFSW,w
  7979  0D92  0086               	movwf	6
  7980  0D93  0187               	clrf	7
  7981  0D94  3000               	movlw	0
  7982  0D95  1801               	btfsc	1,0
  7983  0D96  3001               	movlw	1
  7984  0D97  0020               	movlb	0	; select bank0
  7985  0D98  00DD               	movwf	setRF_DimmerLights@on
  7986  0D99  2DD6               	goto	L3
  7987  0D9A                     l9035:	
  7988                           ;RF_Control_B1.c: 401: } else {
  7989                           
  7990                           
  7991                           ;RF_Control_B1.c: 402: if (RF_Data[16] == 0x80) {
  7992  0D9A  0022               	movlb	2	; select bank2
  7993  0D9B  0830               	movf	(_RF_Data^(0+256)+16),w
  7994  0D9C  3A80               	xorlw	128
  7995  0D9D  1D03               	skipz
  7996  0D9E  2DB0               	goto	l9039
  7997                           
  7998                           ;RF_Control_B1.c: 403: setDelayOff_GO(sw, 1, RF_Data[17]);
  7999  0D9F  0020               	movlb	0	; select bank0
  8000  0DA0  01AA               	clrf	setDelayOff_GO@command
  8001  0DA1  0AAA               	incf	setDelayOff_GO@command,f
  8002  0DA2  0022               	movlb	2	; select bank2
  8003  0DA3  0831               	movf	(_RF_Data^(0+256)+17),w
  8004  0DA4  0020               	movlb	0	; select bank0
  8005  0DA5  00E2               	movwf	??_setRFSW_Control
  8006  0DA6  0862               	movf	??_setRFSW_Control,w
  8007  0DA7  00AB               	movwf	setDelayOff_GO@value
  8008  0DA8  0863               	movf	setRFSW_Control@sw,w
  8009  0DA9  3196  26DB  318D   	fcall	_setDelayOff_GO
  8010                           
  8011                           ;RF_Control_B1.c: 404: setRF_DimmerLights(sw, 1);
  8012  0DAC  0020               	movlb	0	; select bank0
  8013  0DAD  01DD               	clrf	setRF_DimmerLights@on
  8014  0DAE  0ADD               	incf	setRF_DimmerLights@on,f
  8015  0DAF  2DD6               	goto	L3
  8016  0DB0                     l9039:	
  8017                           ;RF_Control_B1.c: 405: } else {
  8018                           
  8019                           
  8020                           ;RF_Control_B1.c: 406: RFSW->Status = 0;
  8021  0DB0  0879               	movf	_RFSW,w
  8022  0DB1  0086               	movwf	6
  8023  0DB2  0187               	clrf	7
  8024  0DB3  1001               	bcf	1,0
  8025                           
  8026                           ;RF_Control_B1.c: 407: setSw_Status(sw, 0);
  8027  0DB4  0020               	movlb	0	; select bank0
  8028  0DB5  01A2               	clrf	setSw_Status@command
  8029  0DB6  0863               	movf	setRFSW_Control@sw,w
  8030  0DB7  319B  2334  318D   	fcall	_setSw_Status
  8031                           
  8032                           ;RF_Control_B1.c: 409: setDimmerLights_Trigger(sw, 1);
  8033  0DBA  0020               	movlb	0	; select bank0
  8034  0DBB  01A2               	clrf	setDimmerLights_Trigger@command
  8035  0DBC  0AA2               	incf	setDimmerLights_Trigger@command,f
  8036  0DBD  0863               	movf	setRFSW_Control@sw,w
  8037  0DBE  319B  2371  318D   	fcall	_setDimmerLights_Trigger
  8038                           
  8039                           ;RF_Control_B1.c: 410: setDimmerLights_Switch(sw, RFSW->Status);
  8040  0DC1  0879               	movf	_RFSW,w
  8041  0DC2  0086               	movwf	6
  8042  0DC3  0187               	clrf	7
  8043  0DC4  3000               	movlw	0
  8044  0DC5  1801               	btfsc	1,0
  8045  0DC6  3001               	movlw	1
  8046  0DC7  0020               	movlb	0	; select bank0
  8047  0DC8  00A2               	movwf	setDimmerLights_Switch@command
  8048  0DC9  0863               	movf	setRFSW_Control@sw,w
  8049  0DCA  319B  2361  318D   	fcall	_setDimmerLights_Switch
  8050                           
  8051                           ;RF_Control_B1.c: 412: setDelayOff_GO(sw, 0, 0);
  8052  0DCD  0020               	movlb	0	; select bank0
  8053  0DCE  01AA               	clrf	setDelayOff_GO@command
  8054  0DCF  01AB               	clrf	setDelayOff_GO@value
  8055  0DD0  0863               	movf	setRFSW_Control@sw,w
  8056  0DD1  3196  26DB  318D   	fcall	_setDelayOff_GO
  8057                           
  8058                           ;RF_Control_B1.c: 413: setRF_DimmerLights(sw, 0);
  8059  0DD4  0020               	movlb	0	; select bank0
  8060  0DD5  01DD               	clrf	setRF_DimmerLights@on
  8061  0DD6                     L3:	
  8062  0DD6  0863               	movf	setRFSW_Control@sw,w
  8063  0DD7  3189  211B  318D   	fcall	_setRF_DimmerLights
  8064                           
  8065                           ;RF_Control_B1.c: 414: }
  8066                           ;RF_Control_B1.c: 415: }
  8067                           ;RF_Control_B1.c: 416: setBuz(1, 100);
  8068  0DDA  3064               	movlw	100
  8069  0DDB  0020               	movlb	0	; select bank0
  8070  0DDC  00A9               	movwf	setBuz@time
  8071  0DDD  3000               	movlw	0
  8072  0DDE  00AA               	movwf	setBuz@time+1
  8073  0DDF  3001               	movlw	1
  8074  0DE0  3195  256B  318D   	fcall	_setBuz
  8075                           
  8076                           ;RF_Control_B1.c: 417: setTxData();
  8077  0DE3  318F  2743         	fcall	_setTxData
  8078  0DE5  0008               	return
  8079  0DE6                     __end_of_setRFSW_Control:	
  8080                           
  8081                           	psect	text33
  8082  16DB                     __ptext33:	
  8083 ;; *************** function _setDelayOff_GO *****************
  8084 ;; Defined at:
  8085 ;;		line 86 in file "../src/DelayOff_B1.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;  sw              1    wreg     unsigned char 
  8088 ;;  command         1   10[BANK0 ] unsigned char 
  8089 ;;  value           1   11[BANK0 ] unsigned char 
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;  sw              1   14[BANK0 ] unsigned char 
  8092 ;; Return value:  Size  Location     Type
  8093 ;;		None               void
  8094 ;; Registers used:
  8095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8101 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;Total ram usage:        5 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:    7
  8108 ;; This function calls:
  8109 ;;		_DelayOffPointSelect
  8110 ;;		_DelayTimejudge
  8111 ;; This function is called by:
  8112 ;;		_setRFSW_Control
  8113 ;;		_Sw_DimmerOffFunc
  8114 ;; This function uses a non-reentrant model
  8115 ;;
  8116                           
  8117                           
  8118                           ;psect for function _setDelayOff_GO
  8119  16DB                     _setDelayOff_GO:	
  8120                           
  8121                           ;incstack = 0
  8122                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8123                           ;setDelayOff_GO@sw stored from wreg
  8124  16DB  0020               	movlb	0	; select bank0
  8125  16DC  00AE               	movwf	setDelayOff_GO@sw
  8126                           
  8127                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  8128  16DD  082E               	movf	setDelayOff_GO@sw,w
  8129  16DE  319C  2467  3196   	fcall	_DelayOffPointSelect
  8130                           
  8131                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  8132  16E1  0020               	movlb	0	; select bank0
  8133  16E2  086A               	movf	_DelayOff,w
  8134  16E3  0086               	movwf	6
  8135  16E4  0187               	clrf	7
  8136  16E5  1C01               	btfss	1,0
  8137  16E6  0008               	return
  8138                           
  8139                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  8140  16E7  082A               	movf	setDelayOff_GO@command,w
  8141  16E8  3A01               	xorlw	1
  8142  16E9  3000               	movlw	0
  8143  16EA  1903               	skipnz
  8144  16EB  3001               	movlw	1
  8145  16EC  00AC               	movwf	??_setDelayOff_GO
  8146  16ED  086A               	movf	_DelayOff,w
  8147  16EE  0086               	movwf	6
  8148  16EF  0187               	clrf	7
  8149  16F0  0DAC               	rlf	??_setDelayOff_GO,f
  8150  16F1  0801               	movf	1,w
  8151  16F2  062C               	xorwf	??_setDelayOff_GO,w
  8152  16F3  39FD               	andlw	-3
  8153  16F4  062C               	xorwf	??_setDelayOff_GO,w
  8154  16F5  0081               	movwf	1
  8155                           
  8156                           ;DelayOff_B1.c: 90: if (command == 1) {
  8157  16F6  082A               	movf	setDelayOff_GO@command,w
  8158  16F7  3A01               	xorlw	1
  8159  16F8  1D03               	skipz
  8160  16F9  2F23               	goto	l8797
  8161                           
  8162                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  8163  16FA  082B               	movf	setDelayOff_GO@value,w
  8164  16FB  319F  27AB  3196   	fcall	_DelayTimejudge
  8165  16FE  0020               	movlb	0	; select bank0
  8166  16FF  00AC               	movwf	??_setDelayOff_GO
  8167  1700  086A               	movf	_DelayOff,w
  8168  1701  0086               	movwf	6
  8169  1702  0187               	clrf	7
  8170  1703  082C               	movf	??_setDelayOff_GO,w
  8171  1704  0081               	movwf	1
  8172                           
  8173                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  8174  1705  300F               	movlw	15
  8175  1706  052B               	andwf	setDelayOff_GO@value,w
  8176  1707  00AC               	movwf	??_setDelayOff_GO
  8177  1708  082C               	movf	??_setDelayOff_GO,w
  8178  1709  3A05               	xorlw	5
  8179  170A  1903               	skipnz
  8180  170B  2F10               	goto	l8791
  8181  170C  082B               	movf	setDelayOff_GO@value,w
  8182  170D  390F               	andlw	15
  8183  170E  1D03               	btfss	3,2
  8184  170F  2F16               	goto	l8795
  8185  1710                     l8791:	
  8186  1710  3026               	movlw	38
  8187  1711  022B               	subwf	setDelayOff_GO@value,w
  8188  1712  1803               	skipnc
  8189  1713  2F16               	goto	l8795
  8190                           
  8191                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  8192  1714  082B               	movf	setDelayOff_GO@value,w
  8193  1715  2F17               	goto	L4
  8194  1716                     l8795:	
  8195                           ;DelayOff_B1.c: 94: } else {
  8196                           
  8197                           
  8198                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  8199  1716  3005               	movlw	5
  8200  1717                     L4:	
  8201  1717  00AC               	movwf	??_setDelayOff_GO
  8202  1718  082E               	movf	setDelayOff_GO@sw,w
  8203  1719  3E1A               	addlw	26
  8204  171A  076D               	addwf	_product,w
  8205  171B  00AD               	movwf	??_setDelayOff_GO+1
  8206  171C  082D               	movf	??_setDelayOff_GO+1,w
  8207  171D  0086               	movwf	6
  8208  171E  3002               	movlw	2	; select bank4/5
  8209  171F  0087               	movwf	7
  8210  1720  082C               	movf	??_setDelayOff_GO,w
  8211  1721  0081               	movwf	1
  8212                           
  8213                           ;DelayOff_B1.c: 96: }
  8214                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  8215  1722  2F2F               	goto	l8801
  8216  1723                     l8797:	
  8217  1723  08AA               	movf	setDelayOff_GO@command,f
  8218  1724  1D03               	skipz
  8219  1725  2F2F               	goto	l8801
  8220                           
  8221                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  8222  1726  082E               	movf	setDelayOff_GO@sw,w
  8223  1727  3E1A               	addlw	26
  8224  1728  076D               	addwf	_product,w
  8225  1729  00AC               	movwf	??_setDelayOff_GO
  8226  172A  082C               	movf	??_setDelayOff_GO,w
  8227  172B  0086               	movwf	6
  8228  172C  3002               	movlw	2	; select bank4/5
  8229  172D  0087               	movwf	7
  8230  172E  0181               	clrf	1
  8231  172F                     l8801:	
  8232                           
  8233                           ;DelayOff_B1.c: 99: }
  8234                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  8235  172F  086A               	movf	_DelayOff,w
  8236  1730  0086               	movwf	6
  8237  1731  0187               	clrf	7
  8238  1732  3000               	movlw	0
  8239  1733  3FC0               	movwi [0]fsr1
  8240  1734  3FC1               	movwi [1]fsr1
  8241                           
  8242                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  8243  1735  086A               	movf	_DelayOff,w
  8244  1736  0086               	movwf	6
  8245  1737  0187               	clrf	7
  8246  1738  0181               	clrf	1
  8247  1739  0008               	return
  8248  173A                     __end_of_setDelayOff_GO:	
  8249                           
  8250                           	psect	text34
  8251  1FAB                     __ptext34:	
  8252 ;; *************** function _DelayTimejudge *****************
  8253 ;; Defined at:
  8254 ;;		line 106 in file "../src/DelayOff_B1.c"
  8255 ;; Parameters:    Size  Location     Type
  8256 ;;  value           1    wreg     unsigned char 
  8257 ;; Auto vars:     Size  Location     Type
  8258 ;;  value           1    9[BANK0 ] unsigned char 
  8259 ;;  k               1    8[BANK0 ] unsigned char 
  8260 ;;  j               1    7[BANK0 ] unsigned char 
  8261 ;;  i               1    6[BANK0 ] unsigned char 
  8262 ;; Return value:  Size  Location     Type
  8263 ;;                  1    wreg      unsigned char 
  8264 ;; Registers used:
  8265 ;;		wreg, status,2, status,0, pclath, cstack
  8266 ;; Tracked objects:
  8267 ;;		On entry : 0/0
  8268 ;;		On exit  : 0/0
  8269 ;;		Unchanged: 0/0
  8270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8274 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8275 ;;Total ram usage:        6 bytes
  8276 ;; Hardware stack levels used:    1
  8277 ;; Hardware stack levels required when called:    6
  8278 ;; This function calls:
  8279 ;;		___bmul
  8280 ;; This function is called by:
  8281 ;;		_setDelayOff_GO
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           
  8286                           ;psect for function _DelayTimejudge
  8287  1FAB                     _DelayTimejudge:	
  8288                           
  8289                           ;incstack = 0
  8290                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  8291                           ;DelayTimejudge@value stored from wreg
  8292  1FAB  0020               	movlb	0	; select bank0
  8293  1FAC  00A9               	movwf	DelayTimejudge@value
  8294                           
  8295                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  8296  1FAD  3005               	movlw	5
  8297  1FAE  00A4               	movwf	??_DelayTimejudge
  8298  1FAF  0824               	movf	??_DelayTimejudge,w
  8299  1FB0  00A6               	movwf	DelayTimejudge@i
  8300  1FB1  01A7               	clrf	DelayTimejudge@j
  8301  1FB2  01A8               	clrf	DelayTimejudge@k
  8302                           
  8303                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  8304  1FB3  3031               	movlw	49
  8305  1FB4  0229               	subwf	DelayTimejudge@value,w
  8306  1FB5  1803               	skipnc
  8307  1FB6  2FD3               	goto	l8583
  8308                           
  8309                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  8310  1FB7  0829               	movf	DelayTimejudge@value,w
  8311  1FB8  390F               	andlw	15
  8312  1FB9  00A4               	movwf	??_DelayTimejudge
  8313  1FBA  0824               	movf	??_DelayTimejudge,w
  8314  1FBB  00A7               	movwf	DelayTimejudge@j
  8315                           
  8316                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  8317  1FBC  0829               	movf	DelayTimejudge@value,w
  8318  1FBD  00A4               	movwf	??_DelayTimejudge
  8319  1FBE  3004               	movlw	4
  8320  1FBF                     u8595:	
  8321  1FBF  36A4               	lsrf	??_DelayTimejudge,f
  8322  1FC0  0B89               	decfsz	9,f
  8323  1FC1  2FBF               	goto	u8595
  8324  1FC2  0824               	movf	??_DelayTimejudge,w
  8325  1FC3  390F               	andlw	15
  8326  1FC4  00A5               	movwf	??_DelayTimejudge+1
  8327  1FC5  0825               	movf	??_DelayTimejudge+1,w
  8328  1FC6  00A8               	movwf	DelayTimejudge@k
  8329                           
  8330                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  8331  1FC7  300A               	movlw	10
  8332  1FC8  00A4               	movwf	??_DelayTimejudge
  8333  1FC9  0824               	movf	??_DelayTimejudge,w
  8334  1FCA  00A0               	movwf	___bmul@multiplicand
  8335  1FCB  0828               	movf	DelayTimejudge@k,w
  8336  1FCC  319C  2408         	fcall	___bmul
  8337  1FCE  0020               	movlb	0	; select bank0
  8338  1FCF  0727               	addwf	DelayTimejudge@j,w
  8339  1FD0  00A5               	movwf	??_DelayTimejudge+1
  8340  1FD1  0825               	movf	??_DelayTimejudge+1,w
  8341  1FD2  00A6               	movwf	DelayTimejudge@i
  8342  1FD3                     l8583:	
  8343                           
  8344                           ;DelayOff_B1.c: 112: }
  8345                           ;DelayOff_B1.c: 133: return i;
  8346  1FD3  0826               	movf	DelayTimejudge@i,w
  8347  1FD4  0008               	return
  8348  1FD5                     __end_of_DelayTimejudge:	
  8349                           
  8350                           	psect	text35
  8351  1C08                     __ptext35:	
  8352 ;; *************** function ___bmul *****************
  8353 ;; Defined at:
  8354 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  8355 ;; Parameters:    Size  Location     Type
  8356 ;;  multiplier      1    wreg     unsigned char 
  8357 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8358 ;; Auto vars:     Size  Location     Type
  8359 ;;  multiplier      1    3[BANK0 ] unsigned char 
  8360 ;;  product         1    2[BANK0 ] unsigned char 
  8361 ;; Return value:  Size  Location     Type
  8362 ;;                  1    wreg      unsigned char 
  8363 ;; Registers used:
  8364 ;;		wreg, status,2, status,0
  8365 ;; Tracked objects:
  8366 ;;		On entry : 0/0
  8367 ;;		On exit  : 0/0
  8368 ;;		Unchanged: 0/0
  8369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8370 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8371 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8373 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8374 ;;Total ram usage:        4 bytes
  8375 ;; Hardware stack levels used:    1
  8376 ;; Hardware stack levels required when called:    5
  8377 ;; This function calls:
  8378 ;;		Nothing
  8379 ;; This function is called by:
  8380 ;;		_DelayTimejudge
  8381 ;; This function uses a non-reentrant model
  8382 ;;
  8383                           
  8384                           
  8385                           ;psect for function ___bmul
  8386  1C08                     ___bmul:	
  8387                           
  8388                           ;incstack = 0
  8389                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8390                           ;___bmul@multiplier stored from wreg
  8391  1C08  0020               	movlb	0	; select bank0
  8392  1C09  00A3               	movwf	___bmul@multiplier
  8393  1C0A  01A2               	clrf	___bmul@product
  8394  1C0B                     l8549:	
  8395  1C0B  1C23               	btfss	___bmul@multiplier,0
  8396  1C0C  2C11               	goto	l8553
  8397  1C0D  0820               	movf	___bmul@multiplicand,w
  8398  1C0E  00A1               	movwf	??___bmul
  8399  1C0F  0821               	movf	??___bmul,w
  8400  1C10  07A2               	addwf	___bmul@product,f
  8401  1C11                     l8553:	
  8402  1C11  1003               	clrc
  8403  1C12  0DA0               	rlf	___bmul@multiplicand,f
  8404  1C13  1003               	clrc
  8405  1C14  0CA3               	rrf	___bmul@multiplier,f
  8406  1C15  08A3               	movf	___bmul@multiplier,f
  8407  1C16  1D03               	skipz
  8408  1C17  2C0B               	goto	l8549
  8409  1C18  0822               	movf	___bmul@product,w
  8410  1C19  0008               	return
  8411  1C1A                     __end_of___bmul:	
  8412                           
  8413                           	psect	text36
  8414  1203                     __ptext36:	
  8415 ;; *************** function _setRFSW_AdjControl *****************
  8416 ;; Defined at:
  8417 ;;		line 421 in file "../src/RF_Control_B1.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;  sw              1    wreg     unsigned char 
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;  sw              1   70[BANK0 ] unsigned char 
  8422 ;; Return value:  Size  Location     Type
  8423 ;;		None               void
  8424 ;; Registers used:
  8425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8433 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8434 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8435 ;;Total ram usage:        3 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; Hardware stack levels required when called:   10
  8438 ;; This function calls:
  8439 ;;		_RfSWPointSelect
  8440 ;;		_setRF_DimmerValue
  8441 ;;		_setTxData
  8442 ;; This function is called by:
  8443 ;;		_setControl_Lights_Table
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           
  8448                           ;psect for function _setRFSW_AdjControl
  8449  1203                     _setRFSW_AdjControl:	
  8450                           
  8451                           ;incstack = 0
  8452                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8453                           ;setRFSW_AdjControl@sw stored from wreg
  8454  1203  0020               	movlb	0	; select bank0
  8455  1204  00E6               	movwf	setRFSW_AdjControl@sw
  8456                           
  8457                           ;RF_Control_B1.c: 422: RfSWPointSelect(sw);
  8458  1205  0866               	movf	setRFSW_AdjControl@sw,w
  8459  1206  3187  27ED  3192   	fcall	_RfSWPointSelect
  8460                           
  8461                           ;RF_Control_B1.c: 423: if (RFSW->Status == 1) {
  8462  1209  0879               	movf	_RFSW,w
  8463  120A  0086               	movwf	6
  8464  120B  0187               	clrf	7
  8465  120C  1C01               	btfss	1,0
  8466  120D  2A16               	goto	l9063
  8467                           
  8468                           ;RF_Control_B1.c: 424: Memory.Modify=1;
  8469  120E  0024               	movlb	4	; select bank4
  8470  120F  1444               	bsf	(_Memory^(0+512)+36),0
  8471                           
  8472                           ;RF_Control_B1.c: 425: setRF_DimmerValue(sw);
  8473  1210  0020               	movlb	0	; select bank0
  8474  1211  0866               	movf	setRFSW_AdjControl@sw,w
  8475  1212  3191  2129  3192   	fcall	_setRF_DimmerValue
  8476                           
  8477                           ;RF_Control_B1.c: 426: } else {
  8478  1215  2A28               	goto	l2361
  8479  1216                     l9063:	
  8480                           
  8481                           ;RF_Control_B1.c: 427: product->Data[9]=product->Data[20 + sw];
  8482  1216  0020               	movlb	0	; select bank0
  8483  1217  0866               	movf	setRFSW_AdjControl@sw,w
  8484  1218  3E14               	addlw	20
  8485  1219  076D               	addwf	_product,w
  8486  121A  00E4               	movwf	??_setRFSW_AdjControl
  8487  121B  0864               	movf	??_setRFSW_AdjControl,w
  8488  121C  0086               	movwf	6
  8489  121D  3002               	movlw	2	; select bank4/5
  8490  121E  0087               	movwf	7
  8491  121F  0801               	movf	1,w
  8492  1220  00E5               	movwf	??_setRFSW_AdjControl+1
  8493  1221  086D               	movf	_product,w
  8494  1222  3E09               	addlw	9
  8495  1223  0086               	movwf	6
  8496  1224  3002               	movlw	2	; select bank4/5
  8497  1225  0087               	movwf	7
  8498  1226  0865               	movf	??_setRFSW_AdjControl+1,w
  8499  1227  0081               	movwf	1
  8500  1228                     l2361:	
  8501                           
  8502                           ;RF_Control_B1.c: 428: }
  8503                           ;RF_Control_B1.c: 429: product->Data[17]=product->Data[26 + sw];
  8504  1228  0020               	movlb	0	; select bank0
  8505  1229  0866               	movf	setRFSW_AdjControl@sw,w
  8506  122A  3E1A               	addlw	26
  8507  122B  076D               	addwf	_product,w
  8508  122C  00E4               	movwf	??_setRFSW_AdjControl
  8509  122D  0864               	movf	??_setRFSW_AdjControl,w
  8510  122E  0086               	movwf	6
  8511  122F  3002               	movlw	2	; select bank4/5
  8512  1230  0087               	movwf	7
  8513  1231  0801               	movf	1,w
  8514  1232  00E5               	movwf	??_setRFSW_AdjControl+1
  8515  1233  086D               	movf	_product,w
  8516  1234  3E11               	addlw	17
  8517  1235  0086               	movwf	6
  8518  1236  3002               	movlw	2	; select bank4/5
  8519  1237  0087               	movwf	7
  8520  1238  0865               	movf	??_setRFSW_AdjControl+1,w
  8521  1239  0081               	movwf	1
  8522                           
  8523                           ;RF_Control_B1.c: 430: setTxData();
  8524  123A  318F  2743         	fcall	_setTxData
  8525  123C  0008               	return
  8526  123D                     __end_of_setRFSW_AdjControl:	
  8527                           
  8528                           	psect	text37
  8529  1129                     __ptext37:	
  8530 ;; *************** function _setRF_DimmerValue *****************
  8531 ;; Defined at:
  8532 ;;		line 441 in file "../src/RF_Control_B1.c"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;  lights          1    wreg     unsigned char 
  8535 ;; Auto vars:     Size  Location     Type
  8536 ;;  lights          1   67[BANK0 ] unsigned char 
  8537 ;; Return value:  Size  Location     Type
  8538 ;;		None               void
  8539 ;; Registers used:
  8540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8541 ;; Tracked objects:
  8542 ;;		On entry : 0/0
  8543 ;;		On exit  : 0/0
  8544 ;;		Unchanged: 0/0
  8545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8549 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;Total ram usage:        3 bytes
  8551 ;; Hardware stack levels used:    1
  8552 ;; Hardware stack levels required when called:    9
  8553 ;; This function calls:
  8554 ;;		_setDimmerLights_AdjRF
  8555 ;; This function is called by:
  8556 ;;		_setRFSW_AdjControl
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           
  8561                           ;psect for function _setRF_DimmerValue
  8562  1129                     _setRF_DimmerValue:	
  8563                           
  8564                           ;incstack = 0
  8565                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8566                           ;setRF_DimmerValue@lights stored from wreg
  8567  1129  0020               	movlb	0	; select bank0
  8568  112A  00E3               	movwf	setRF_DimmerValue@lights
  8569                           
  8570                           ;RF_Control_B1.c: 442: if (RF_Data[9] > 0x64) {
  8571  112B  3065               	movlw	101
  8572  112C  0022               	movlb	2	; select bank2
  8573  112D  0229               	subwf	(_RF_Data^(0+256)+9),w
  8574  112E  1C03               	skipc
  8575  112F  2936               	goto	l8897
  8576                           
  8577                           ;RF_Control_B1.c: 443: RF_Data[9] = 0x64;
  8578  1130  3064               	movlw	100
  8579  1131  0020               	movlb	0	; select bank0
  8580  1132  00E1               	movwf	??_setRF_DimmerValue
  8581  1133  0861               	movf	??_setRF_DimmerValue,w
  8582  1134  0022               	movlb	2	; select bank2
  8583  1135  00A9               	movwf	(_RF_Data^(0+256)+9)
  8584  1136                     l8897:	
  8585                           
  8586                           ;RF_Control_B1.c: 444: }
  8587                           ;RF_Control_B1.c: 445: product->Data[9]=RF_Data[9];
  8588  1136  0829               	movf	(_RF_Data^(0+256)+9),w
  8589  1137  0020               	movlb	0	; select bank0
  8590  1138  00E1               	movwf	??_setRF_DimmerValue
  8591  1139  086D               	movf	_product,w
  8592  113A  3E09               	addlw	9
  8593  113B  0086               	movwf	6
  8594  113C  3002               	movlw	2	; select bank4/5
  8595  113D  0087               	movwf	7
  8596  113E  0861               	movf	??_setRF_DimmerValue,w
  8597  113F  0081               	movwf	1
  8598                           
  8599                           ;RF_Control_B1.c: 446: product->Data[11]=lights;
  8600  1140  0863               	movf	setRF_DimmerValue@lights,w
  8601  1141  00E1               	movwf	??_setRF_DimmerValue
  8602  1142  086D               	movf	_product,w
  8603  1143  3E0B               	addlw	11
  8604  1144  0086               	movwf	6
  8605  1145  3002               	movlw	2	; select bank4/5
  8606  1146  0087               	movwf	7
  8607  1147  0861               	movf	??_setRF_DimmerValue,w
  8608  1148  0081               	movwf	1
  8609                           
  8610                           ;RF_Control_B1.c: 447: product->Data[(20 + lights)]=product->Data[9];
  8611  1149  086D               	movf	_product,w
  8612  114A  3E09               	addlw	9
  8613  114B  0086               	movwf	6
  8614  114C  3002               	movlw	2	; select bank4/5
  8615  114D  0087               	movwf	7
  8616  114E  0801               	movf	1,w
  8617  114F  00E1               	movwf	??_setRF_DimmerValue
  8618  1150  0863               	movf	setRF_DimmerValue@lights,w
  8619  1151  3E14               	addlw	20
  8620  1152  076D               	addwf	_product,w
  8621  1153  00E2               	movwf	??_setRF_DimmerValue+1
  8622  1154  0862               	movf	??_setRF_DimmerValue+1,w
  8623  1155  0086               	movwf	6
  8624  1156  3002               	movlw	2	; select bank4/5
  8625  1157  0087               	movwf	7
  8626  1158  0861               	movf	??_setRF_DimmerValue,w
  8627  1159  0081               	movwf	1
  8628                           
  8629                           ;RF_Control_B1.c: 448: setDimmerLights_AdjRF(lights);
  8630  115A  0863               	movf	setRF_DimmerValue@lights,w
  8631  115B  319F  2710         	fcall	_setDimmerLights_AdjRF
  8632  115D  0008               	return
  8633  115E                     __end_of_setRF_DimmerValue:	
  8634                           
  8635                           	psect	text38
  8636  1F10                     __ptext38:	
  8637 ;; *************** function _setDimmerLights_AdjRF *****************
  8638 ;; Defined at:
  8639 ;;		line 688 in file "../src/Dimmer_B1.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;  lights          1    wreg     unsigned char 
  8642 ;; Auto vars:     Size  Location     Type
  8643 ;;  lights          1   64[BANK0 ] unsigned char 
  8644 ;; Return value:  Size  Location     Type
  8645 ;;		None               void
  8646 ;; Registers used:
  8647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8648 ;; Tracked objects:
  8649 ;;		On entry : 0/0
  8650 ;;		On exit  : 0/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;Total ram usage:        2 bytes
  8658 ;; Hardware stack levels used:    1
  8659 ;; Hardware stack levels required when called:    8
  8660 ;; This function calls:
  8661 ;;		_DimmerLightsPointSelect
  8662 ;;		_getPercentValue
  8663 ;; This function is called by:
  8664 ;;		_setRF_DimmerValue
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           
  8669                           ;psect for function _setDimmerLights_AdjRF
  8670  1F10                     _setDimmerLights_AdjRF:	
  8671                           
  8672                           ;incstack = 0
  8673                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8674                           ;setDimmerLights_AdjRF@lights stored from wreg
  8675  1F10  0020               	movlb	0	; select bank0
  8676  1F11  00E0               	movwf	setDimmerLights_AdjRF@lights
  8677                           
  8678                           ;Dimmer_B1.c: 690: DimmerLightsPointSelect(lights);
  8679  1F12  0860               	movf	setDimmerLights_AdjRF@lights,w
  8680  1F13  319C  242C  319F   	fcall	_DimmerLightsPointSelect
  8681                           
  8682                           ;Dimmer_B1.c: 691: DimmerLights->AdjRF = 1;
  8683  1F16  0020               	movlb	0	; select bank0
  8684  1F17  086B               	movf	_DimmerLights,w
  8685  1F18  0086               	movwf	6
  8686  1F19  3001               	movlw	1	; select bank2/3
  8687  1F1A  0087               	movwf	7
  8688  1F1B  1501               	bsf	1,2
  8689                           
  8690                           ;Dimmer_B1.c: 692: DimmerLights->Signal = 1;
  8691  1F1C  086B               	movf	_DimmerLights,w
  8692  1F1D  0086               	movwf	6
  8693  1F1E  3001               	movlw	1	; select bank2/3
  8694  1F1F  0087               	movwf	7
  8695  1F20  1481               	bsf	1,1
  8696                           
  8697                           ;Dimmer_B1.c: 693: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8698  1F21  086D               	movf	_product,w
  8699  1F22  3E09               	addlw	9
  8700  1F23  0086               	movwf	6
  8701  1F24  3002               	movlw	2	; select bank4/5
  8702  1F25  0087               	movwf	7
  8703  1F26  0801               	movf	1,w
  8704  1F27  3195  25C4         	fcall	_getPercentValue
  8705  1F29  0020               	movlb	0	; select bank0
  8706  1F2A  00DF               	movwf	??_setDimmerLights_AdjRF
  8707  1F2B  086B               	movf	_DimmerLights,w
  8708  1F2C  3E05               	addlw	5
  8709  1F2D  0086               	movwf	6
  8710  1F2E  3001               	movlw	1	; select bank2/3
  8711  1F2F  0087               	movwf	7
  8712  1F30  085F               	movf	??_setDimmerLights_AdjRF,w
  8713  1F31  0081               	movwf	1
  8714  1F32  0008               	return
  8715  1F33                     __end_of_setDimmerLights_AdjRF:	
  8716                           
  8717                           	psect	text39
  8718  15C4                     __ptext39:	
  8719 ;; *************** function _getPercentValue *****************
  8720 ;; Defined at:
  8721 ;;		line 761 in file "../src/Dimmer_B1.c"
  8722 ;; Parameters:    Size  Location     Type
  8723 ;;  value           1    wreg     unsigned char 
  8724 ;; Auto vars:     Size  Location     Type
  8725 ;;  value           1   59[BANK0 ] unsigned char 
  8726 ;;  i               3   60[BANK0 ] float 
  8727 ;; Return value:  Size  Location     Type
  8728 ;;                  1    wreg      unsigned char 
  8729 ;; Registers used:
  8730 ;;		wreg, status,2, status,0, pclath, cstack
  8731 ;; Tracked objects:
  8732 ;;		On entry : 0/0
  8733 ;;		On exit  : 0/0
  8734 ;;		Unchanged: 0/0
  8735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8739 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;Total ram usage:        6 bytes
  8741 ;; Hardware stack levels used:    1
  8742 ;; Hardware stack levels required when called:    7
  8743 ;; This function calls:
  8744 ;;		___awtoft
  8745 ;;		___ftadd
  8746 ;;		___ftdiv
  8747 ;;		___ftmul
  8748 ;;		___fttol
  8749 ;; This function is called by:
  8750 ;;		_setDimmerLights_AdjRF
  8751 ;; This function uses a non-reentrant model
  8752 ;;
  8753                           
  8754                           
  8755                           ;psect for function _getPercentValue
  8756  15C4                     _getPercentValue:	
  8757                           
  8758                           ;incstack = 0
  8759                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8760                           ;getPercentValue@value stored from wreg
  8761  15C4  0020               	movlb	0	; select bank0
  8762  15C5  00DB               	movwf	getPercentValue@value
  8763                           
  8764                           ;Dimmer_B1.c: 763: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8765  15C6  3000               	movlw	0
  8766  15C7  00DC               	movwf	getPercentValue@i
  8767  15C8  30E0               	movlw	224
  8768  15C9  00DD               	movwf	getPercentValue@i+1
  8769  15CA  3041               	movlw	65
  8770  15CB  00DE               	movwf	getPercentValue@i+2
  8771                           
  8772                           ;Dimmer_B1.c: 764: i /= 100;
  8773  15CC  3000               	movlw	0
  8774  15CD  00AE               	movwf	___ftdiv@f2
  8775  15CE  30C8               	movlw	200
  8776  15CF  00AF               	movwf	___ftdiv@f2+1
  8777  15D0  3042               	movlw	66
  8778  15D1  00B0               	movwf	___ftdiv@f2+2
  8779  15D2  085C               	movf	getPercentValue@i,w
  8780  15D3  00B1               	movwf	___ftdiv@f1
  8781  15D4  085D               	movf	getPercentValue@i+1,w
  8782  15D5  00B2               	movwf	___ftdiv@f1+1
  8783  15D6  085E               	movf	getPercentValue@i+2,w
  8784  15D7  00B3               	movwf	___ftdiv@f1+2
  8785  15D8  318D  25E6  3195   	fcall	___ftdiv
  8786  15DB  0020               	movlb	0	; select bank0
  8787  15DC  082E               	movf	?___ftdiv,w
  8788  15DD  00DC               	movwf	getPercentValue@i
  8789  15DE  082F               	movf	?___ftdiv+1,w
  8790  15DF  00DD               	movwf	getPercentValue@i+1
  8791  15E0  0830               	movf	?___ftdiv+2,w
  8792  15E1  00DE               	movwf	getPercentValue@i+2
  8793                           
  8794                           ;Dimmer_B1.c: 765: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8795  15E2  085B               	movf	getPercentValue@value,w
  8796  15E3  00D9               	movwf	??_getPercentValue
  8797  15E4  01DA               	clrf	??_getPercentValue+1
  8798  15E5  09D9               	comf	??_getPercentValue,f
  8799  15E6  09DA               	comf	??_getPercentValue+1,f
  8800  15E7  0AD9               	incf	??_getPercentValue,f
  8801  15E8  1903               	skipnz
  8802  15E9  0ADA               	incf	??_getPercentValue+1,f
  8803  15EA  0859               	movf	??_getPercentValue,w
  8804  15EB  3E64               	addlw	100
  8805  15EC  00A8               	movwf	___awtoft@c
  8806  15ED  3000               	movlw	0
  8807  15EE  3D5A               	addwfc	??_getPercentValue+1,w
  8808  15EF  00A9               	movwf	___awtoft@c+1
  8809  15F0  319E  26A9  3195   	fcall	___awtoft
  8810  15F3  0020               	movlb	0	; select bank0
  8811  15F4  0828               	movf	?___awtoft,w
  8812  15F5  00B1               	movwf	___ftmul@f2
  8813  15F6  0829               	movf	?___awtoft+1,w
  8814  15F7  00B2               	movwf	___ftmul@f2+1
  8815  15F8  082A               	movf	?___awtoft+2,w
  8816  15F9  00B3               	movwf	___ftmul@f2+2
  8817  15FA  085C               	movf	getPercentValue@i,w
  8818  15FB  00AE               	movwf	___ftmul@f1
  8819  15FC  085D               	movf	getPercentValue@i+1,w
  8820  15FD  00AF               	movwf	___ftmul@f1+1
  8821  15FE  085E               	movf	getPercentValue@i+2,w
  8822  15FF  00B0               	movwf	___ftmul@f1+2
  8823  1600  318E  268F  3195   	fcall	___ftmul
  8824  1603  0020               	movlb	0	; select bank0
  8825  1604  082E               	movf	?___ftmul,w
  8826  1605  00C1               	movwf	___ftadd@f2
  8827  1606  082F               	movf	?___ftmul+1,w
  8828  1607  00C2               	movwf	___ftadd@f2+1
  8829  1608  0830               	movf	?___ftmul+2,w
  8830  1609  00C3               	movwf	___ftadd@f2+2
  8831  160A  3000               	movlw	0
  8832  160B  00BE               	movwf	___ftadd@f1
  8833  160C  3000               	movlw	0
  8834  160D  00BF               	movwf	___ftadd@f1+1
  8835  160E  3042               	movlw	66
  8836  160F  00C0               	movwf	___ftadd@f1+2
  8837  1610  3184  24C8  3195   	fcall	___ftadd
  8838  1613  0020               	movlb	0	; select bank0
  8839  1614  083E               	movf	?___ftadd,w
  8840  1615  00CB               	movwf	___fttol@f1
  8841  1616  083F               	movf	?___ftadd+1,w
  8842  1617  00CC               	movwf	___fttol@f1+1
  8843  1618  0840               	movf	?___ftadd+2,w
  8844  1619  00CD               	movwf	___fttol@f1+2
  8845  161A  318C  244B         	fcall	___fttol
  8846  161C  0020               	movlb	0	; select bank0
  8847  161D  084B               	movf	?___fttol,w
  8848  161E  0008               	return
  8849  161F                     __end_of_getPercentValue:	
  8850                           
  8851                           	psect	text40
  8852  0E8F                     __ptext40:	
  8853 ;; *************** function ___ftmul *****************
  8854 ;; Defined at:
  8855 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8856 ;; Parameters:    Size  Location     Type
  8857 ;;  f1              3   14[BANK0 ] float 
  8858 ;;  f2              3   17[BANK0 ] float 
  8859 ;; Auto vars:     Size  Location     Type
  8860 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8861 ;;  sign            1   29[BANK0 ] unsigned char 
  8862 ;;  cntr            1   28[BANK0 ] unsigned char 
  8863 ;;  exp             1   24[BANK0 ] unsigned char 
  8864 ;; Return value:  Size  Location     Type
  8865 ;;                  3   14[BANK0 ] float 
  8866 ;; Registers used:
  8867 ;;		wreg, status,2, status,0, pclath, cstack
  8868 ;; Tracked objects:
  8869 ;;		On entry : 0/0
  8870 ;;		On exit  : 0/0
  8871 ;;		Unchanged: 0/0
  8872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8873 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8874 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8875 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8876 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8877 ;;Total ram usage:       16 bytes
  8878 ;; Hardware stack levels used:    1
  8879 ;; Hardware stack levels required when called:    6
  8880 ;; This function calls:
  8881 ;;		___ftpack
  8882 ;; This function is called by:
  8883 ;;		_getPercentValue
  8884 ;; This function uses a non-reentrant model
  8885 ;;
  8886                           
  8887                           
  8888                           ;psect for function ___ftmul
  8889  0E8F                     ___ftmul:	
  8890                           
  8891                           ;incstack = 0
  8892                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8893  0E8F  0020               	movlb	0	; select bank0
  8894  0E90  082E               	movf	___ftmul@f1,w
  8895  0E91  00B4               	movwf	??___ftmul
  8896  0E92  082F               	movf	___ftmul@f1+1,w
  8897  0E93  00B5               	movwf	??___ftmul+1
  8898  0E94  0830               	movf	___ftmul@f1+2,w
  8899  0E95  00B6               	movwf	??___ftmul+2
  8900  0E96  1003               	clrc
  8901  0E97  0D35               	rlf	??___ftmul+1,w
  8902  0E98  0D36               	rlf	??___ftmul+2,w
  8903  0E99  00B7               	movwf	??___ftmul+3
  8904  0E9A  0837               	movf	??___ftmul+3,w
  8905  0E9B  00B8               	movwf	___ftmul@exp
  8906  0E9C  08B8               	movf	___ftmul@exp,f
  8907  0E9D  1D03               	skipz
  8908  0E9E  2EA6               	goto	l6055
  8909  0E9F  3000               	movlw	0
  8910  0EA0  00AE               	movwf	?___ftmul
  8911  0EA1  3000               	movlw	0
  8912  0EA2  00AF               	movwf	?___ftmul+1
  8913  0EA3  3000               	movlw	0
  8914  0EA4  00B0               	movwf	?___ftmul+2
  8915  0EA5  0008               	return
  8916  0EA6                     l6055:	
  8917  0EA6  0831               	movf	___ftmul@f2,w
  8918  0EA7  00B4               	movwf	??___ftmul
  8919  0EA8  0832               	movf	___ftmul@f2+1,w
  8920  0EA9  00B5               	movwf	??___ftmul+1
  8921  0EAA  0833               	movf	___ftmul@f2+2,w
  8922  0EAB  00B6               	movwf	??___ftmul+2
  8923  0EAC  1003               	clrc
  8924  0EAD  0D35               	rlf	??___ftmul+1,w
  8925  0EAE  0D36               	rlf	??___ftmul+2,w
  8926  0EAF  00B7               	movwf	??___ftmul+3
  8927  0EB0  0837               	movf	??___ftmul+3,w
  8928  0EB1  00BD               	movwf	___ftmul@sign
  8929  0EB2  08BD               	movf	___ftmul@sign,f
  8930  0EB3  1D03               	skipz
  8931  0EB4  2EBC               	goto	l6061
  8932  0EB5  3000               	movlw	0
  8933  0EB6  00AE               	movwf	?___ftmul
  8934  0EB7  3000               	movlw	0
  8935  0EB8  00AF               	movwf	?___ftmul+1
  8936  0EB9  3000               	movlw	0
  8937  0EBA  00B0               	movwf	?___ftmul+2
  8938  0EBB  0008               	return
  8939  0EBC                     l6061:	
  8940  0EBC  083D               	movf	___ftmul@sign,w
  8941  0EBD  3E7B               	addlw	123
  8942  0EBE  00B4               	movwf	??___ftmul
  8943  0EBF  0834               	movf	??___ftmul,w
  8944  0EC0  07B8               	addwf	___ftmul@exp,f
  8945  0EC1  082E               	movf	___ftmul@f1,w
  8946  0EC2  00B4               	movwf	??___ftmul
  8947  0EC3  082F               	movf	___ftmul@f1+1,w
  8948  0EC4  00B5               	movwf	??___ftmul+1
  8949  0EC5  0830               	movf	___ftmul@f1+2,w
  8950  0EC6  00B6               	movwf	??___ftmul+2
  8951  0EC7  3010               	movlw	16
  8952  0EC8                     u4715:	
  8953  0EC8  36B6               	lsrf	??___ftmul+2,f
  8954  0EC9  0CB5               	rrf	??___ftmul+1,f
  8955  0ECA  0CB4               	rrf	??___ftmul,f
  8956  0ECB  0B89               	decfsz	9,f
  8957  0ECC  2EC8               	goto	u4715
  8958  0ECD  0834               	movf	??___ftmul,w
  8959  0ECE  00B7               	movwf	??___ftmul+3
  8960  0ECF  0837               	movf	??___ftmul+3,w
  8961  0ED0  00BD               	movwf	___ftmul@sign
  8962  0ED1  0831               	movf	___ftmul@f2,w
  8963  0ED2  00B4               	movwf	??___ftmul
  8964  0ED3  0832               	movf	___ftmul@f2+1,w
  8965  0ED4  00B5               	movwf	??___ftmul+1
  8966  0ED5  0833               	movf	___ftmul@f2+2,w
  8967  0ED6  00B6               	movwf	??___ftmul+2
  8968  0ED7  3010               	movlw	16
  8969  0ED8                     u4725:	
  8970  0ED8  36B6               	lsrf	??___ftmul+2,f
  8971  0ED9  0CB5               	rrf	??___ftmul+1,f
  8972  0EDA  0CB4               	rrf	??___ftmul,f
  8973  0EDB  0B89               	decfsz	9,f
  8974  0EDC  2ED8               	goto	u4725
  8975  0EDD  0834               	movf	??___ftmul,w
  8976  0EDE  00B7               	movwf	??___ftmul+3
  8977  0EDF  0837               	movf	??___ftmul+3,w
  8978  0EE0  06BD               	xorwf	___ftmul@sign,f
  8979  0EE1  3080               	movlw	128
  8980  0EE2  00B4               	movwf	??___ftmul
  8981  0EE3  0834               	movf	??___ftmul,w
  8982  0EE4  05BD               	andwf	___ftmul@sign,f
  8983  0EE5  17AF               	bsf	___ftmul@f1+1,7
  8984  0EE6  17B2               	bsf	___ftmul@f2+1,7
  8985  0EE7  30FF               	movlw	255
  8986  0EE8  05B1               	andwf	___ftmul@f2,f
  8987  0EE9  30FF               	movlw	255
  8988  0EEA  05B2               	andwf	___ftmul@f2+1,f
  8989  0EEB  3000               	movlw	0
  8990  0EEC  05B3               	andwf	___ftmul@f2+2,f
  8991  0EED  3000               	movlw	0
  8992  0EEE  00B9               	movwf	___ftmul@f3_as_product
  8993  0EEF  3000               	movlw	0
  8994  0EF0  00BA               	movwf	___ftmul@f3_as_product+1
  8995  0EF1  3000               	movlw	0
  8996  0EF2  00BB               	movwf	___ftmul@f3_as_product+2
  8997  0EF3  3007               	movlw	7
  8998  0EF4  00B4               	movwf	??___ftmul
  8999  0EF5  0834               	movf	??___ftmul,w
  9000  0EF6  00BC               	movwf	___ftmul@cntr
  9001  0EF7                     l6073:	
  9002  0EF7  1C2E               	btfss	___ftmul@f1,0
  9003  0EF8  2EFF               	goto	l6077
  9004  0EF9  0831               	movf	___ftmul@f2,w
  9005  0EFA  07B9               	addwf	___ftmul@f3_as_product,f
  9006  0EFB  0832               	movf	___ftmul@f2+1,w
  9007  0EFC  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9008  0EFD  0833               	movf	___ftmul@f2+2,w
  9009  0EFE  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9010  0EFF                     l6077:	
  9011  0EFF  3001               	movlw	1
  9012  0F00                     u4745:	
  9013  0F00  36B0               	lsrf	___ftmul@f1+2,f
  9014  0F01  0CAF               	rrf	___ftmul@f1+1,f
  9015  0F02  0CAE               	rrf	___ftmul@f1,f
  9016  0F03  0B89               	decfsz	9,f
  9017  0F04  2F00               	goto	u4745
  9018  0F05  3001               	movlw	1
  9019  0F06                     u4755:	
  9020  0F06  35B1               	lslf	___ftmul@f2,f
  9021  0F07  0DB2               	rlf	___ftmul@f2+1,f
  9022  0F08  0DB3               	rlf	___ftmul@f2+2,f
  9023  0F09  0B89               	decfsz	9,f
  9024  0F0A  2F06               	goto	u4755
  9025  0F0B  3001               	movlw	1
  9026  0F0C  02BC               	subwf	___ftmul@cntr,f
  9027  0F0D  1D03               	btfss	3,2
  9028  0F0E  2EF7               	goto	l6073
  9029  0F0F  3009               	movlw	9
  9030  0F10  00B4               	movwf	??___ftmul
  9031  0F11  0834               	movf	??___ftmul,w
  9032  0F12  00BC               	movwf	___ftmul@cntr
  9033  0F13                     l6085:	
  9034  0F13  1C2E               	btfss	___ftmul@f1,0
  9035  0F14  2F1B               	goto	l6089
  9036  0F15  0831               	movf	___ftmul@f2,w
  9037  0F16  07B9               	addwf	___ftmul@f3_as_product,f
  9038  0F17  0832               	movf	___ftmul@f2+1,w
  9039  0F18  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9040  0F19  0833               	movf	___ftmul@f2+2,w
  9041  0F1A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9042  0F1B                     l6089:	
  9043  0F1B  3001               	movlw	1
  9044  0F1C                     u4785:	
  9045  0F1C  36B0               	lsrf	___ftmul@f1+2,f
  9046  0F1D  0CAF               	rrf	___ftmul@f1+1,f
  9047  0F1E  0CAE               	rrf	___ftmul@f1,f
  9048  0F1F  0B89               	decfsz	9,f
  9049  0F20  2F1C               	goto	u4785
  9050  0F21  3001               	movlw	1
  9051  0F22                     u4795:	
  9052  0F22  36BB               	lsrf	___ftmul@f3_as_product+2,f
  9053  0F23  0CBA               	rrf	___ftmul@f3_as_product+1,f
  9054  0F24  0CB9               	rrf	___ftmul@f3_as_product,f
  9055  0F25  0B89               	decfsz	9,f
  9056  0F26  2F22               	goto	u4795
  9057  0F27  3001               	movlw	1
  9058  0F28  02BC               	subwf	___ftmul@cntr,f
  9059  0F29  1D03               	btfss	3,2
  9060  0F2A  2F13               	goto	l6085
  9061  0F2B  0839               	movf	___ftmul@f3_as_product,w
  9062  0F2C  00A0               	movwf	___ftpack@arg
  9063  0F2D  083A               	movf	___ftmul@f3_as_product+1,w
  9064  0F2E  00A1               	movwf	___ftpack@arg+1
  9065  0F2F  083B               	movf	___ftmul@f3_as_product+2,w
  9066  0F30  00A2               	movwf	___ftpack@arg+2
  9067  0F31  0838               	movf	___ftmul@exp,w
  9068  0F32  00B4               	movwf	??___ftmul
  9069  0F33  0834               	movf	??___ftmul,w
  9070  0F34  00A3               	movwf	___ftpack@exp
  9071  0F35  083D               	movf	___ftmul@sign,w
  9072  0F36  00B5               	movwf	??___ftmul+1
  9073  0F37  0835               	movf	??___ftmul+1,w
  9074  0F38  00A4               	movwf	___ftpack@sign
  9075  0F39  3197  273A         	fcall	___ftpack
  9076  0F3B  0020               	movlb	0	; select bank0
  9077  0F3C  0820               	movf	?___ftpack,w
  9078  0F3D  00AE               	movwf	?___ftmul
  9079  0F3E  0821               	movf	?___ftpack+1,w
  9080  0F3F  00AF               	movwf	?___ftmul+1
  9081  0F40  0822               	movf	?___ftpack+2,w
  9082  0F41  00B0               	movwf	?___ftmul+2
  9083  0F42  0008               	return
  9084  0F43                     __end_of___ftmul:	
  9085                           
  9086                           	psect	text41
  9087  04C8                     __ptext41:	
  9088 ;; *************** function ___ftadd *****************
  9089 ;; Defined at:
  9090 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  9091 ;; Parameters:    Size  Location     Type
  9092 ;;  f1              3   30[BANK0 ] float 
  9093 ;;  f2              3   33[BANK0 ] float 
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;  exp1            1   42[BANK0 ] unsigned char 
  9096 ;;  exp2            1   41[BANK0 ] unsigned char 
  9097 ;;  sign            1   40[BANK0 ] unsigned char 
  9098 ;; Return value:  Size  Location     Type
  9099 ;;                  3   30[BANK0 ] float 
  9100 ;; Registers used:
  9101 ;;		wreg, status,2, status,0, pclath, cstack
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9107 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;Total ram usage:       13 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    6
  9114 ;; This function calls:
  9115 ;;		___ftpack
  9116 ;; This function is called by:
  9117 ;;		_getPercentValue
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function ___ftadd
  9123  04C8                     ___ftadd:	
  9124                           
  9125                           ;incstack = 0
  9126                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9127  04C8  0020               	movlb	0	; select bank0
  9128  04C9  083E               	movf	___ftadd@f1,w
  9129  04CA  00C4               	movwf	??___ftadd
  9130  04CB  083F               	movf	___ftadd@f1+1,w
  9131  04CC  00C5               	movwf	??___ftadd+1
  9132  04CD  0840               	movf	___ftadd@f1+2,w
  9133  04CE  00C6               	movwf	??___ftadd+2
  9134  04CF  1003               	clrc
  9135  04D0  0D45               	rlf	??___ftadd+1,w
  9136  04D1  0D46               	rlf	??___ftadd+2,w
  9137  04D2  00C7               	movwf	??___ftadd+3
  9138  04D3  0847               	movf	??___ftadd+3,w
  9139  04D4  00CA               	movwf	___ftadd@exp1
  9140  04D5  0841               	movf	___ftadd@f2,w
  9141  04D6  00C4               	movwf	??___ftadd
  9142  04D7  0842               	movf	___ftadd@f2+1,w
  9143  04D8  00C5               	movwf	??___ftadd+1
  9144  04D9  0843               	movf	___ftadd@f2+2,w
  9145  04DA  00C6               	movwf	??___ftadd+2
  9146  04DB  1003               	clrc
  9147  04DC  0D45               	rlf	??___ftadd+1,w
  9148  04DD  0D46               	rlf	??___ftadd+2,w
  9149  04DE  00C7               	movwf	??___ftadd+3
  9150  04DF  0847               	movf	??___ftadd+3,w
  9151  04E0  00C9               	movwf	___ftadd@exp2
  9152  04E1  084A               	movf	___ftadd@exp1,w
  9153  04E2  1903               	btfsc	3,2
  9154  04E3  2CF0               	goto	l5943
  9155  04E4  0849               	movf	___ftadd@exp2,w
  9156  04E5  024A               	subwf	___ftadd@exp1,w
  9157  04E6  1803               	skipnc
  9158  04E7  2CF7               	goto	l5947
  9159  04E8  034A               	decf	___ftadd@exp1,w
  9160  04E9  3AFF               	xorlw	255
  9161  04EA  0749               	addwf	___ftadd@exp2,w
  9162  04EB  00C4               	movwf	??___ftadd
  9163  04EC  3019               	movlw	25
  9164  04ED  0244               	subwf	??___ftadd,w
  9165  04EE  1C03               	skipc
  9166  04EF  2CF7               	goto	l5947
  9167  04F0                     l5943:	
  9168  04F0  0841               	movf	___ftadd@f2,w
  9169  04F1  00BE               	movwf	?___ftadd
  9170  04F2  0842               	movf	___ftadd@f2+1,w
  9171  04F3  00BF               	movwf	?___ftadd+1
  9172  04F4  0843               	movf	___ftadd@f2+2,w
  9173  04F5  00C0               	movwf	?___ftadd+2
  9174  04F6  0008               	return
  9175  04F7                     l5947:	
  9176  04F7  0849               	movf	___ftadd@exp2,w
  9177  04F8  1903               	btfsc	3,2
  9178  04F9  0008               	return
  9179  04FA  084A               	movf	___ftadd@exp1,w
  9180  04FB  0249               	subwf	___ftadd@exp2,w
  9181  04FC  1803               	skipnc
  9182  04FD  2D06               	goto	l5953
  9183  04FE  0349               	decf	___ftadd@exp2,w
  9184  04FF  3AFF               	xorlw	255
  9185  0500  074A               	addwf	___ftadd@exp1,w
  9186  0501  00C4               	movwf	??___ftadd
  9187  0502  3019               	movlw	25
  9188  0503  0244               	subwf	??___ftadd,w
  9189  0504  1803               	btfsc	3,0
  9190  0505  0008               	return
  9191  0506                     l5953:	
  9192  0506  3006               	movlw	6
  9193  0507  00C4               	movwf	??___ftadd
  9194  0508  0844               	movf	??___ftadd,w
  9195  0509  00C8               	movwf	___ftadd@sign
  9196  050A  1BC0               	btfsc	___ftadd@f1+2,7
  9197  050B  17C8               	bsf	___ftadd@sign,7
  9198  050C  1BC3               	btfsc	___ftadd@f2+2,7
  9199  050D  1748               	bsf	___ftadd@sign,6
  9200  050E  17BF               	bsf	___ftadd@f1+1,7
  9201  050F  30FF               	movlw	255
  9202  0510  05BE               	andwf	___ftadd@f1,f
  9203  0511  30FF               	movlw	255
  9204  0512  05BF               	andwf	___ftadd@f1+1,f
  9205  0513  3000               	movlw	0
  9206  0514  05C0               	andwf	___ftadd@f1+2,f
  9207  0515  17C2               	bsf	___ftadd@f2+1,7
  9208  0516  30FF               	movlw	255
  9209  0517  05C1               	andwf	___ftadd@f2,f
  9210  0518  30FF               	movlw	255
  9211  0519  05C2               	andwf	___ftadd@f2+1,f
  9212  051A  3000               	movlw	0
  9213  051B  05C3               	andwf	___ftadd@f2+2,f
  9214  051C  0849               	movf	___ftadd@exp2,w
  9215  051D  024A               	subwf	___ftadd@exp1,w
  9216  051E  1803               	skipnc
  9217  051F  2D42               	goto	l5975
  9218  0520                     l5965:	
  9219  0520  3001               	movlw	1
  9220  0521                     u4475:	
  9221  0521  35C1               	lslf	___ftadd@f2,f
  9222  0522  0DC2               	rlf	___ftadd@f2+1,f
  9223  0523  0DC3               	rlf	___ftadd@f2+2,f
  9224  0524  0B89               	decfsz	9,f
  9225  0525  2D21               	goto	u4475
  9226  0526  3001               	movlw	1
  9227  0527  02C9               	subwf	___ftadd@exp2,f
  9228  0528  0849               	movf	___ftadd@exp2,w
  9229  0529  064A               	xorwf	___ftadd@exp1,w
  9230  052A  1903               	skipnz
  9231  052B  2D3D               	goto	l5973
  9232  052C  3001               	movlw	1
  9233  052D  02C8               	subwf	___ftadd@sign,f
  9234  052E  0848               	movf	___ftadd@sign,w
  9235  052F  3907               	andlw	7
  9236  0530  1903               	btfsc	3,2
  9237  0531  2D3D               	goto	l5973
  9238  0532  2D20               	goto	l5965
  9239  0533                     l5971:	
  9240  0533  3001               	movlw	1
  9241  0534                     u4505:	
  9242  0534  36C0               	lsrf	___ftadd@f1+2,f
  9243  0535  0CBF               	rrf	___ftadd@f1+1,f
  9244  0536  0CBE               	rrf	___ftadd@f1,f
  9245  0537  0B89               	decfsz	9,f
  9246  0538  2D34               	goto	u4505
  9247  0539  3001               	movlw	1
  9248  053A  00C4               	movwf	??___ftadd
  9249  053B  0844               	movf	??___ftadd,w
  9250  053C  07CA               	addwf	___ftadd@exp1,f
  9251  053D                     l5973:	
  9252  053D  084A               	movf	___ftadd@exp1,w
  9253  053E  0649               	xorwf	___ftadd@exp2,w
  9254  053F  1903               	btfsc	3,2
  9255  0540  2D67               	goto	l3066
  9256  0541  2D33               	goto	l5971
  9257  0542                     l5975:	
  9258  0542  084A               	movf	___ftadd@exp1,w
  9259  0543  0249               	subwf	___ftadd@exp2,w
  9260  0544  1803               	skipnc
  9261  0545  2D67               	goto	l3066
  9262  0546                     l5977:	
  9263  0546  3001               	movlw	1
  9264  0547                     u4535:	
  9265  0547  35BE               	lslf	___ftadd@f1,f
  9266  0548  0DBF               	rlf	___ftadd@f1+1,f
  9267  0549  0DC0               	rlf	___ftadd@f1+2,f
  9268  054A  0B89               	decfsz	9,f
  9269  054B  2D47               	goto	u4535
  9270  054C  3001               	movlw	1
  9271  054D  02CA               	subwf	___ftadd@exp1,f
  9272  054E  0849               	movf	___ftadd@exp2,w
  9273  054F  064A               	xorwf	___ftadd@exp1,w
  9274  0550  1903               	skipnz
  9275  0551  2D63               	goto	l5985
  9276  0552  3001               	movlw	1
  9277  0553  02C8               	subwf	___ftadd@sign,f
  9278  0554  0848               	movf	___ftadd@sign,w
  9279  0555  3907               	andlw	7
  9280  0556  1903               	btfsc	3,2
  9281  0557  2D63               	goto	l5985
  9282  0558  2D46               	goto	l5977
  9283  0559                     l5983:	
  9284  0559  3001               	movlw	1
  9285  055A                     u4565:	
  9286  055A  36C3               	lsrf	___ftadd@f2+2,f
  9287  055B  0CC2               	rrf	___ftadd@f2+1,f
  9288  055C  0CC1               	rrf	___ftadd@f2,f
  9289  055D  0B89               	decfsz	9,f
  9290  055E  2D5A               	goto	u4565
  9291  055F  3001               	movlw	1
  9292  0560  00C4               	movwf	??___ftadd
  9293  0561  0844               	movf	??___ftadd,w
  9294  0562  07C9               	addwf	___ftadd@exp2,f
  9295  0563                     l5985:	
  9296  0563  084A               	movf	___ftadd@exp1,w
  9297  0564  0649               	xorwf	___ftadd@exp2,w
  9298  0565  1D03               	skipz
  9299  0566  2D59               	goto	l5983
  9300  0567                     l3066:	
  9301  0567  1FC8               	btfss	___ftadd@sign,7
  9302  0568  2D79               	goto	l5989
  9303  0569  30FF               	movlw	255
  9304  056A  06BE               	xorwf	___ftadd@f1,f
  9305  056B  30FF               	movlw	255
  9306  056C  06BF               	xorwf	___ftadd@f1+1,f
  9307  056D  30FF               	movlw	255
  9308  056E  06C0               	xorwf	___ftadd@f1+2,f
  9309  056F  3001               	movlw	1
  9310  0570  07BE               	addwf	___ftadd@f1,f
  9311  0571  3000               	movlw	0
  9312  0572  1803               	skipnc
  9313  0573  3001               	movlw	1
  9314  0574  07BF               	addwf	___ftadd@f1+1,f
  9315  0575  3000               	movlw	0
  9316  0576  1803               	skipnc
  9317  0577  3001               	movlw	1
  9318  0578  07C0               	addwf	___ftadd@f1+2,f
  9319  0579                     l5989:	
  9320  0579  1F48               	btfss	___ftadd@sign,6
  9321  057A  2D8B               	goto	l5993
  9322  057B  30FF               	movlw	255
  9323  057C  06C1               	xorwf	___ftadd@f2,f
  9324  057D  30FF               	movlw	255
  9325  057E  06C2               	xorwf	___ftadd@f2+1,f
  9326  057F  30FF               	movlw	255
  9327  0580  06C3               	xorwf	___ftadd@f2+2,f
  9328  0581  3001               	movlw	1
  9329  0582  07C1               	addwf	___ftadd@f2,f
  9330  0583  3000               	movlw	0
  9331  0584  1803               	skipnc
  9332  0585  3001               	movlw	1
  9333  0586  07C2               	addwf	___ftadd@f2+1,f
  9334  0587  3000               	movlw	0
  9335  0588  1803               	skipnc
  9336  0589  3001               	movlw	1
  9337  058A  07C3               	addwf	___ftadd@f2+2,f
  9338  058B                     l5993:	
  9339  058B  01C8               	clrf	___ftadd@sign
  9340  058C  083E               	movf	___ftadd@f1,w
  9341  058D  07C1               	addwf	___ftadd@f2,f
  9342  058E  083F               	movf	___ftadd@f1+1,w
  9343  058F  3DC2               	addwfc	___ftadd@f2+1,f
  9344  0590  0840               	movf	___ftadd@f1+2,w
  9345  0591  3DC3               	addwfc	___ftadd@f2+2,f
  9346  0592  1FC3               	btfss	___ftadd@f2+2,7
  9347  0593  2DA6               	goto	l6003
  9348  0594  30FF               	movlw	255
  9349  0595  06C1               	xorwf	___ftadd@f2,f
  9350  0596  30FF               	movlw	255
  9351  0597  06C2               	xorwf	___ftadd@f2+1,f
  9352  0598  30FF               	movlw	255
  9353  0599  06C3               	xorwf	___ftadd@f2+2,f
  9354  059A  3001               	movlw	1
  9355  059B  07C1               	addwf	___ftadd@f2,f
  9356  059C  3000               	movlw	0
  9357  059D  1803               	skipnc
  9358  059E  3001               	movlw	1
  9359  059F  07C2               	addwf	___ftadd@f2+1,f
  9360  05A0  3000               	movlw	0
  9361  05A1  1803               	skipnc
  9362  05A2  3001               	movlw	1
  9363  05A3  07C3               	addwf	___ftadd@f2+2,f
  9364  05A4  01C8               	clrf	___ftadd@sign
  9365  05A5  0AC8               	incf	___ftadd@sign,f
  9366  05A6                     l6003:	
  9367  05A6  0841               	movf	___ftadd@f2,w
  9368  05A7  00A0               	movwf	___ftpack@arg
  9369  05A8  0842               	movf	___ftadd@f2+1,w
  9370  05A9  00A1               	movwf	___ftpack@arg+1
  9371  05AA  0843               	movf	___ftadd@f2+2,w
  9372  05AB  00A2               	movwf	___ftpack@arg+2
  9373  05AC  084A               	movf	___ftadd@exp1,w
  9374  05AD  00C4               	movwf	??___ftadd
  9375  05AE  0844               	movf	??___ftadd,w
  9376  05AF  00A3               	movwf	___ftpack@exp
  9377  05B0  0848               	movf	___ftadd@sign,w
  9378  05B1  00C5               	movwf	??___ftadd+1
  9379  05B2  0845               	movf	??___ftadd+1,w
  9380  05B3  00A4               	movwf	___ftpack@sign
  9381  05B4  3197  273A         	fcall	___ftpack
  9382  05B6  0020               	movlb	0	; select bank0
  9383  05B7  0820               	movf	?___ftpack,w
  9384  05B8  00BE               	movwf	?___ftadd
  9385  05B9  0821               	movf	?___ftpack+1,w
  9386  05BA  00BF               	movwf	?___ftadd+1
  9387  05BB  0822               	movf	?___ftpack+2,w
  9388  05BC  00C0               	movwf	?___ftadd+2
  9389  05BD  0008               	return
  9390  05BE                     __end_of___ftadd:	
  9391                           
  9392                           	psect	text42
  9393  1BD3                     __ptext42:	
  9394 ;; *************** function _getBuz_GO *****************
  9395 ;; Defined at:
  9396 ;;		line 82 in file "../src/Buzzer_B1.c"
  9397 ;; Parameters:    Size  Location     Type
  9398 ;;		None
  9399 ;; Auto vars:     Size  Location     Type
  9400 ;;  i               2    4[BANK0 ] int 
  9401 ;; Return value:  Size  Location     Type
  9402 ;;                  2    0[BANK0 ] int 
  9403 ;; Registers used:
  9404 ;;		wreg, status,2, status,0
  9405 ;; Tracked objects:
  9406 ;;		On entry : 0/0
  9407 ;;		On exit  : 0/0
  9408 ;;		Unchanged: 0/0
  9409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9410 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;Total ram usage:        6 bytes
  9415 ;; Hardware stack levels used:    1
  9416 ;; Hardware stack levels required when called:    5
  9417 ;; This function calls:
  9418 ;;		Nothing
  9419 ;; This function is called by:
  9420 ;;		_setRF_Main
  9421 ;; This function uses a non-reentrant model
  9422 ;;
  9423                           
  9424                           
  9425                           ;psect for function _getBuz_GO
  9426  1BD3                     _getBuz_GO:	
  9427                           
  9428                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9429                           
  9430                           ;incstack = 0
  9431                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9432  1BD3  0021               	movlb	1	; select bank1
  9433  1BD4  0C33               	rrf	_Buz1^(0+128),w
  9434  1BD5  3901               	andlw	1
  9435  1BD6  0020               	movlb	0	; select bank0
  9436  1BD7  00A2               	movwf	??_getBuz_GO
  9437  1BD8  01A3               	clrf	??_getBuz_GO+1
  9438  1BD9  0822               	movf	??_getBuz_GO,w
  9439  1BDA  00A4               	movwf	getBuz_GO@i
  9440  1BDB  0823               	movf	??_getBuz_GO+1,w
  9441  1BDC  00A5               	movwf	getBuz_GO@i+1
  9442                           
  9443                           ;Buzzer_B1.c: 84: return i;
  9444  1BDD  0825               	movf	getBuz_GO@i+1,w
  9445  1BDE  01A1               	clrf	?_getBuz_GO+1
  9446  1BDF  07A1               	addwf	?_getBuz_GO+1,f
  9447  1BE0  0824               	movf	getBuz_GO@i,w
  9448  1BE1  01A0               	clrf	?_getBuz_GO
  9449  1BE2  07A0               	addwf	?_getBuz_GO,f
  9450  1BE3  0008               	return
  9451  1BE4                     __end_of_getBuz_GO:	
  9452                           
  9453                           	psect	text43
  9454  179B                     __ptext43:	
  9455 ;; *************** function _CC2500_TxData *****************
  9456 ;; Defined at:
  9457 ;;		line 32 in file "../src/CC2500_B1.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;		None
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9462 ;; Return value:  Size  Location     Type
  9463 ;;		None               void
  9464 ;; Registers used:
  9465 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9466 ;; Tracked objects:
  9467 ;;		On entry : 0/0
  9468 ;;		On exit  : 0/0
  9469 ;;		Unchanged: 0/0
  9470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;Total ram usage:        2 bytes
  9476 ;; Hardware stack levels used:    1
  9477 ;; Hardware stack levels required when called:    7
  9478 ;; This function calls:
  9479 ;;		_CC2500_WriteByte
  9480 ;;		_CC2500_WriteCommand
  9481 ;;		_Timeout_Counter
  9482 ;;		_set_TimeoutCleared
  9483 ;; This function is called by:
  9484 ;;		_setRF_Main
  9485 ;; This function uses a non-reentrant model
  9486 ;;
  9487                           
  9488                           
  9489                           ;psect for function _CC2500_TxData
  9490  179B                     _CC2500_TxData:	
  9491                           
  9492                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9493                           ;CC2500_B1.c: 35: RC4 = 0;
  9494                           
  9495                           ;incstack = 0
  9496                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9497  179B  0020               	movlb	0	; select bank0
  9498  179C  120E               	bcf	14,4	;volatile
  9499                           
  9500                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9501  179D  307F               	movlw	127
  9502  179E  00A4               	movwf	??_CC2500_TxData
  9503  179F  0824               	movf	??_CC2500_TxData,w
  9504  17A0  00FA               	movwf	_SPI0Buffer
  9505                           
  9506                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9507  17A1  2FA5               	goto	l9223
  9508  17A2                     l9221:	
  9509                           
  9510                           ;CC2500_B1.c: 38: Timeout_Counter();
  9511  17A2  319C  248F  3197   	fcall	_Timeout_Counter
  9512  17A5                     l9223:	
  9513  17A5  0020               	movlb	0	; select bank0
  9514  17A6  1D0E               	btfss	14,2	;volatile
  9515  17A7  2FAB               	goto	l9227
  9516  17A8  0021               	movlb	1	; select bank1
  9517  17A9  1D30               	btfss	(_myMain^(0+128)+16),2
  9518  17AA  2FA2               	goto	l9221
  9519  17AB                     l9227:	
  9520                           
  9521                           ;CC2500_B1.c: 39: };
  9522                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9523  17AB  3199  21FB  3197   	fcall	_set_TimeoutCleared
  9524                           
  9525                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9526  17AE  319C  2453  3197   	fcall	_CC2500_WriteByte
  9527                           
  9528                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9529  17B1  0021               	movlb	1	; select bank1
  9530  17B2  0858               	movf	_Tx_Length^(0+128),w
  9531  17B3  0020               	movlb	0	; select bank0
  9532  17B4  00A4               	movwf	??_CC2500_TxData
  9533  17B5  0824               	movf	??_CC2500_TxData,w
  9534  17B6  00FA               	movwf	_SPI0Buffer
  9535                           
  9536                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9537  17B7  319C  2453  3197   	fcall	_CC2500_WriteByte
  9538                           
  9539                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9540  17BA  0020               	movlb	0	; select bank0
  9541  17BB  01A5               	clrf	CC2500_TxData@loop_e
  9542  17BC                     l9241:	
  9543  17BC  0021               	movlb	1	; select bank1
  9544  17BD  0858               	movf	_Tx_Length^(0+128),w
  9545  17BE  0020               	movlb	0	; select bank0
  9546  17BF  0225               	subwf	CC2500_TxData@loop_e,w
  9547  17C0  1803               	btfsc	3,0
  9548  17C1  2FD4               	goto	l267
  9549                           
  9550                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9551  17C2  0825               	movf	CC2500_TxData@loop_e,w
  9552  17C3  3E20               	addlw	_RF_Data& (0+255)
  9553  17C4  0086               	movwf	6
  9554  17C5  3001               	movlw	1	; select bank2/3
  9555  17C6  0087               	movwf	7
  9556  17C7  0801               	movf	1,w
  9557  17C8  00A4               	movwf	??_CC2500_TxData
  9558  17C9  0824               	movf	??_CC2500_TxData,w
  9559  17CA  00FA               	movwf	_SPI0Buffer
  9560                           
  9561                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9562  17CB  319C  2453  3197   	fcall	_CC2500_WriteByte
  9563  17CE  3001               	movlw	1
  9564  17CF  0020               	movlb	0	; select bank0
  9565  17D0  00A4               	movwf	??_CC2500_TxData
  9566  17D1  0824               	movf	??_CC2500_TxData,w
  9567  17D2  07A5               	addwf	CC2500_TxData@loop_e,f
  9568  17D3  2FBC               	goto	l9241
  9569  17D4                     l267:	
  9570                           
  9571                           ;CC2500_B1.c: 48: }
  9572                           ;CC2500_B1.c: 49: RC4 = 1;
  9573  17D4  160E               	bsf	14,4	;volatile
  9574                           
  9575                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9576  17D5  3035               	movlw	53
  9577  17D6  319D  2513  3197   	fcall	_CC2500_WriteCommand
  9578                           
  9579                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9580  17D9  2FDD               	goto	l9247
  9581  17DA                     l9245:	
  9582                           
  9583                           ;CC2500_B1.c: 52: Timeout_Counter();
  9584  17DA  319C  248F  3197   	fcall	_Timeout_Counter
  9585  17DD                     l9247:	
  9586  17DD  0020               	movlb	0	; select bank0
  9587  17DE  180D               	btfsc	13,0	;volatile
  9588  17DF  2FE3               	goto	l9251
  9589  17E0  0021               	movlb	1	; select bank1
  9590  17E1  1D30               	btfss	(_myMain^(0+128)+16),2
  9591  17E2  2FDA               	goto	l9245
  9592  17E3                     l9251:	
  9593                           
  9594                           ;CC2500_B1.c: 53: };
  9595                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9596  17E3  3199  21FB  3197   	fcall	_set_TimeoutCleared
  9597                           
  9598                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9599  17E6  2FEA               	goto	l9255
  9600  17E7                     l9253:	
  9601                           
  9602                           ;CC2500_B1.c: 57: Timeout_Counter();
  9603  17E7  319C  248F  3197   	fcall	_Timeout_Counter
  9604  17EA                     l9255:	
  9605  17EA  0020               	movlb	0	; select bank0
  9606  17EB  1C0D               	btfss	13,0	;volatile
  9607  17EC  2FF0               	goto	l9259
  9608  17ED  0021               	movlb	1	; select bank1
  9609  17EE  1D30               	btfss	(_myMain^(0+128)+16),2
  9610  17EF  2FE7               	goto	l9253
  9611  17F0                     l9259:	
  9612                           
  9613                           ;CC2500_B1.c: 58: };
  9614                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9615  17F0  3199  21FB  3197   	fcall	_set_TimeoutCleared
  9616                           
  9617                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9618  17F3  3036               	movlw	54
  9619  17F4  319D  2513  3197   	fcall	_CC2500_WriteCommand
  9620                           
  9621                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9622  17F7  303B               	movlw	59
  9623  17F8  319D  2513  3197   	fcall	_CC2500_WriteCommand
  9624                           
  9625                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9626  17FB  303A               	movlw	58
  9627  17FC  319D  2513         	fcall	_CC2500_WriteCommand
  9628                           
  9629                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9630  17FE  14FB               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9631  17FF  0008               	return
  9632  1800                     __end_of_CC2500_TxData:	
  9633                           
  9634                           	psect	text44
  9635  09F6                     __ptext44:	
  9636 ;; *************** function _CC2500_RxData *****************
  9637 ;; Defined at:
  9638 ;;		line 70 in file "../src/CC2500_B1.c"
  9639 ;; Parameters:    Size  Location     Type
  9640 ;;		None
  9641 ;; Auto vars:     Size  Location     Type
  9642 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9643 ;; Return value:  Size  Location     Type
  9644 ;;		None               void
  9645 ;; Registers used:
  9646 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9647 ;; Tracked objects:
  9648 ;;		On entry : 0/0
  9649 ;;		On exit  : 0/0
  9650 ;;		Unchanged: 0/0
  9651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;Total ram usage:        2 bytes
  9657 ;; Hardware stack levels used:    1
  9658 ;; Hardware stack levels required when called:    7
  9659 ;; This function calls:
  9660 ;;		_CC2500_ReadByte
  9661 ;;		_CC2500_ReadStatus
  9662 ;;		_CC2500_WriteByte
  9663 ;;		_Timeout_Counter
  9664 ;;		_set_TimeoutCleared
  9665 ;; This function is called by:
  9666 ;;		_setRF_Main
  9667 ;; This function uses a non-reentrant model
  9668 ;;
  9669                           
  9670                           
  9671                           ;psect for function _CC2500_RxData
  9672  09F6                     _CC2500_RxData:	
  9673                           
  9674                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9675                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9676                           
  9677                           ;incstack = 0
  9678                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9679  09F6  0020               	movlb	0	; select bank0
  9680  09F7  180D               	btfsc	13,0	;volatile
  9681  09F8  29FD               	goto	l9275
  9682  09F9  2A06               	goto	l9281
  9683  09FA                     l9273:	
  9684                           ;CC2500_B1.c: 76: {
  9685                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9686                           
  9687                           
  9688                           ;CC2500_B1.c: 78: Timeout_Counter();
  9689  09FA  319C  248F  3189   	fcall	_Timeout_Counter
  9690  09FD                     l9275:	
  9691  09FD  0020               	movlb	0	; select bank0
  9692  09FE  1C0D               	btfss	13,0	;volatile
  9693  09FF  2A03               	goto	l9279
  9694  0A00  0021               	movlb	1	; select bank1
  9695  0A01  1D30               	btfss	(_myMain^(0+128)+16),2
  9696  0A02  29FA               	goto	l9273
  9697  0A03                     l9279:	
  9698                           
  9699                           ;CC2500_B1.c: 79: };
  9700                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9701  0A03  3199  21FB  3189   	fcall	_set_TimeoutCleared
  9702  0A06                     l9281:	
  9703                           
  9704                           ;CC2500_B1.c: 81: }
  9705                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9706  0A06  303B               	movlw	59
  9707  0A07  319E  26CB  3189   	fcall	_CC2500_ReadStatus
  9708                           
  9709                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9710  0A0A  0021               	movlb	1	; select bank1
  9711  0A0B  085B               	movf	_s_data^(0+128),w
  9712  0A0C  1903               	btfsc	3,2
  9713  0A0D  0008               	return
  9714                           
  9715                           ;CC2500_B1.c: 86: RC4 = 0;
  9716  0A0E  0020               	movlb	0	; select bank0
  9717  0A0F  120E               	bcf	14,4	;volatile
  9718                           
  9719                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9720  0A10  30FF               	movlw	255
  9721  0A11  00A4               	movwf	??_CC2500_RxData
  9722  0A12  0824               	movf	??_CC2500_RxData,w
  9723  0A13  00FA               	movwf	_SPI0Buffer
  9724                           
  9725                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9726  0A14  2A1B               	goto	l9291
  9727  0A15                     l9293:	
  9728  0A15  0021               	movlb	1	; select bank1
  9729  0A16  1930               	btfsc	(_myMain^(0+128)+16),2
  9730  0A17  2A1E               	goto	l292
  9731                           
  9732                           ;CC2500_B1.c: 89: Timeout_Counter();
  9733  0A18  319C  248F  3189   	fcall	_Timeout_Counter
  9734  0A1B                     l9291:	
  9735  0A1B  0020               	movlb	0	; select bank0
  9736  0A1C  190E               	btfsc	14,2	;volatile
  9737  0A1D  2A15               	goto	l9293
  9738  0A1E                     l292:	
  9739                           
  9740                           ;CC2500_B1.c: 90: };
  9741                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9742  0A1E  0021               	movlb	1	; select bank1
  9743  0A1F  1930               	btfsc	(_myMain^(0+128)+16),2
  9744  0A20  2A61               	goto	l293
  9745                           
  9746                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9747  0A21  319C  2453  3189   	fcall	_CC2500_WriteByte
  9748                           
  9749                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9750  0A24  319C  24FC  3189   	fcall	_CC2500_ReadByte
  9751                           
  9752                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9753  0A27  087A               	movf	_SPI0Buffer,w
  9754  0A28  0020               	movlb	0	; select bank0
  9755  0A29  00A4               	movwf	??_CC2500_RxData
  9756  0A2A  0824               	movf	??_CC2500_RxData,w
  9757  0A2B  0021               	movlb	1	; select bank1
  9758  0A2C  00D7               	movwf	_Rx_Length^(0+128)
  9759                           
  9760                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9761  0A2D  0020               	movlb	0	; select bank0
  9762  0A2E  01A5               	clrf	CC2500_RxData@loop_f
  9763  0A2F                     l9307:	
  9764  0A2F  0021               	movlb	1	; select bank1
  9765  0A30  0857               	movf	_Rx_Length^(0+128),w
  9766  0A31  0020               	movlb	0	; select bank0
  9767  0A32  0225               	subwf	CC2500_RxData@loop_f,w
  9768  0A33  1803               	btfsc	3,0
  9769  0A34  2A47               	goto	l9309
  9770                           
  9771                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9772  0A35  319C  24FC  3189   	fcall	_CC2500_ReadByte
  9773                           
  9774                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9775  0A38  087A               	movf	_SPI0Buffer,w
  9776  0A39  0020               	movlb	0	; select bank0
  9777  0A3A  00A4               	movwf	??_CC2500_RxData
  9778  0A3B  0825               	movf	CC2500_RxData@loop_f,w
  9779  0A3C  3E20               	addlw	_RF_Data& (0+255)
  9780  0A3D  0086               	movwf	6
  9781  0A3E  3001               	movlw	1	; select bank2/3
  9782  0A3F  0087               	movwf	7
  9783  0A40  0824               	movf	??_CC2500_RxData,w
  9784  0A41  0081               	movwf	1
  9785  0A42  3001               	movlw	1
  9786  0A43  00A4               	movwf	??_CC2500_RxData
  9787  0A44  0824               	movf	??_CC2500_RxData,w
  9788  0A45  07A5               	addwf	CC2500_RxData@loop_f,f
  9789  0A46  2A2F               	goto	l9307
  9790  0A47                     l9309:	
  9791                           
  9792                           ;CC2500_B1.c: 99: }
  9793                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9794  0A47  319C  24FC  3189   	fcall	_CC2500_ReadByte
  9795                           
  9796                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9797  0A4A  087A               	movf	_SPI0Buffer,w
  9798  0A4B  0020               	movlb	0	; select bank0
  9799  0A4C  00A4               	movwf	??_CC2500_RxData
  9800  0A4D  0824               	movf	??_CC2500_RxData,w
  9801  0A4E  0021               	movlb	1	; select bank1
  9802  0A4F  00D6               	movwf	_RSSI^(0+128)
  9803                           
  9804                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9805  0A50  319C  24FC  3189   	fcall	_CC2500_ReadByte
  9806                           
  9807                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9808  0A53  087A               	movf	_SPI0Buffer,w
  9809  0A54  0020               	movlb	0	; select bank0
  9810  0A55  00A4               	movwf	??_CC2500_RxData
  9811  0A56  0824               	movf	??_CC2500_RxData,w
  9812  0A57  0021               	movlb	1	; select bank1
  9813  0A58  00D2               	movwf	_CRC^(0+128)
  9814                           
  9815                           ;CC2500_B1.c: 104: RC4 = 1;
  9816  0A59  0020               	movlb	0	; select bank0
  9817  0A5A  160E               	bsf	14,4	;volatile
  9818                           
  9819                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9820  0A5B  0021               	movlb	1	; select bank1
  9821  0A5C  1BD2               	btfsc	_CRC^(0+128),7
  9822                           
  9823                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9824  0A5D  147B               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9825                           
  9826                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9827  0A5E  11BF               	bcf	_RF1^(0+128),3
  9828                           
  9829                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9830  0A5F  14BF               	bsf	_RF1^(0+128),1
  9831                           
  9832                           ;CC2500_B1.c: 110: } else {
  9833  0A60  2A63               	goto	l9321
  9834  0A61                     l293:	
  9835                           
  9836                           ;CC2500_B1.c: 111: RC4 = 1;
  9837  0A61  0020               	movlb	0	; select bank0
  9838  0A62  160E               	bsf	14,4	;volatile
  9839  0A63                     l9321:	
  9840                           
  9841                           ;CC2500_B1.c: 112: }
  9842                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9843  0A63  3199  21FB         	fcall	_set_TimeoutCleared
  9844  0A65  0021               	movlb	1	; select bank1
  9845  0A66  0008               	return
  9846  0A67                     __end_of_CC2500_RxData:	
  9847                           
  9848                           	psect	text45
  9849  1ECB                     __ptext45:	
  9850 ;; *************** function _CC2500_ReadStatus *****************
  9851 ;; Defined at:
  9852 ;;		line 304 in file "../src/CC2500_B1.c"
  9853 ;; Parameters:    Size  Location     Type
  9854 ;;  status_addr     1    wreg     unsigned char 
  9855 ;; Auto vars:     Size  Location     Type
  9856 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9857 ;; Return value:  Size  Location     Type
  9858 ;;		None               void
  9859 ;; Registers used:
  9860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9861 ;; Tracked objects:
  9862 ;;		On entry : 0/0
  9863 ;;		On exit  : 0/0
  9864 ;;		Unchanged: 0/0
  9865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9870 ;;Total ram usage:        2 bytes
  9871 ;; Hardware stack levels used:    1
  9872 ;; Hardware stack levels required when called:    6
  9873 ;; This function calls:
  9874 ;;		_CC2500_ReadByte
  9875 ;;		_CC2500_WriteByte
  9876 ;;		_Timeout_Counter
  9877 ;;		_set_TimeoutCleared
  9878 ;; This function is called by:
  9879 ;;		_CC2500_RxData
  9880 ;;		_setRF_Main
  9881 ;; This function uses a non-reentrant model
  9882 ;;
  9883                           
  9884                           
  9885                           ;psect for function _CC2500_ReadStatus
  9886  1ECB                     _CC2500_ReadStatus:	
  9887                           
  9888                           ;incstack = 0
  9889                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9890                           ;CC2500_ReadStatus@status_addr stored from wreg
  9891  1ECB  0020               	movlb	0	; select bank0
  9892  1ECC  00A3               	movwf	CC2500_ReadStatus@status_addr
  9893                           
  9894                           ;CC2500_B1.c: 305: RC4 = 0;
  9895  1ECD  120E               	bcf	14,4	;volatile
  9896                           
  9897                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9898  1ECE  0823               	movf	CC2500_ReadStatus@status_addr,w
  9899  1ECF  3EC0               	addlw	192
  9900  1ED0  00A2               	movwf	??_CC2500_ReadStatus
  9901  1ED1  0822               	movf	??_CC2500_ReadStatus,w
  9902  1ED2  00FA               	movwf	_SPI0Buffer
  9903                           
  9904                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9905  1ED3  2ED7               	goto	l9089
  9906  1ED4                     l9087:	
  9907                           
  9908                           ;CC2500_B1.c: 309: Timeout_Counter();
  9909  1ED4  319C  248F  319E   	fcall	_Timeout_Counter
  9910  1ED7                     l9089:	
  9911  1ED7  0020               	movlb	0	; select bank0
  9912  1ED8  1D0E               	btfss	14,2	;volatile
  9913  1ED9  2EDD               	goto	l9093
  9914  1EDA  0021               	movlb	1	; select bank1
  9915  1EDB  1D30               	btfss	(_myMain^(0+128)+16),2
  9916  1EDC  2ED4               	goto	l9087
  9917  1EDD                     l9093:	
  9918                           
  9919                           ;CC2500_B1.c: 310: };
  9920                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9921  1EDD  3199  21FB  319E   	fcall	_set_TimeoutCleared
  9922                           
  9923                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9924  1EE0  319C  2453  319E   	fcall	_CC2500_WriteByte
  9925                           
  9926                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9927  1EE3  319C  24FC         	fcall	_CC2500_ReadByte
  9928                           
  9929                           ;CC2500_B1.c: 315: RC4 = 1;
  9930  1EE5  0020               	movlb	0	; select bank0
  9931  1EE6  160E               	bsf	14,4	;volatile
  9932                           
  9933                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9934  1EE7  087A               	movf	_SPI0Buffer,w
  9935  1EE8  00A2               	movwf	??_CC2500_ReadStatus
  9936  1EE9  0822               	movf	??_CC2500_ReadStatus,w
  9937  1EEA  0021               	movlb	1	; select bank1
  9938  1EEB  00DB               	movwf	_s_data^(0+128)
  9939  1EEC  0008               	return
  9940  1EED                     __end_of_CC2500_ReadStatus:	
  9941                           
  9942                           	psect	text46
  9943  1CFC                     __ptext46:	
  9944 ;; *************** function _CC2500_ReadByte *****************
  9945 ;; Defined at:
  9946 ;;		line 238 in file "../src/CC2500_B1.c"
  9947 ;; Parameters:    Size  Location     Type
  9948 ;;		None
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9951 ;; Return value:  Size  Location     Type
  9952 ;;		None               void
  9953 ;; Registers used:
  9954 ;;		wreg, status,2, status,0
  9955 ;; Tracked objects:
  9956 ;;		On entry : 0/0
  9957 ;;		On exit  : 0/0
  9958 ;;		Unchanged: 0/0
  9959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9961 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9962 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;Total ram usage:        2 bytes
  9965 ;; Hardware stack levels used:    1
  9966 ;; Hardware stack levels required when called:    5
  9967 ;; This function calls:
  9968 ;;		Nothing
  9969 ;; This function is called by:
  9970 ;;		_CC2500_RxData
  9971 ;;		_CC2500_ReadStatus
  9972 ;;		_CC2500_ReadREG
  9973 ;; This function uses a non-reentrant model
  9974 ;;
  9975                           
  9976                           
  9977                           ;psect for function _CC2500_ReadByte
  9978  1CFC                     _CC2500_ReadByte:	
  9979                           
  9980                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9981                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9982                           
  9983                           ;incstack = 0
  9984                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9985  1CFC  0020               	movlb	0	; select bank0
  9986  1CFD  01A1               	clrf	CC2500_ReadByte@loop_b
  9987  1CFE                     L5:	
  9988  1CFE  3008               	movlw	8
  9989  1CFF  0221               	subwf	CC2500_ReadByte@loop_b,w
  9990  1D00  1803               	btfsc	3,0
  9991  1D01  0008               	return
  9992                           
  9993                           ;CC2500_B1.c: 241: RC1 = 1;
  9994  1D02  148E               	bsf	14,1	;volatile
  9995                           
  9996                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9997  1D03  1003               	clrc
  9998  1D04  0DFA               	rlf	_SPI0Buffer,f
  9999                           
 10000                           ;CC2500_B1.c: 243: if (RC2 == 1)
 10001  1D05  1D0E               	btfss	14,2	;volatile
 10002  1D06  2D09               	goto	l8945
 10003                           
 10004                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
 10005  1D07  147A               	bsf	_SPI0Buffer,0
 10006  1D08  2D0D               	goto	l8947
 10007  1D09                     l8945:	
 10008                           
 10009                           ;CC2500_B1.c: 245: else
 10010                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
 10011  1D09  30FE               	movlw	254
 10012  1D0A  00A0               	movwf	??_CC2500_ReadByte
 10013  1D0B  0820               	movf	??_CC2500_ReadByte,w
 10014  1D0C  05FA               	andwf	_SPI0Buffer,f
 10015  1D0D                     l8947:	
 10016                           
 10017                           ;CC2500_B1.c: 247: RC1 = 0;
 10018  1D0D  108E               	bcf	14,1	;volatile
 10019  1D0E  3001               	movlw	1
 10020  1D0F  00A0               	movwf	??_CC2500_ReadByte
 10021  1D10  0820               	movf	??_CC2500_ReadByte,w
 10022  1D11  07A1               	addwf	CC2500_ReadByte@loop_b,f
 10023  1D12  2CFE               	goto	L5
 10024  1D13                     __end_of_CC2500_ReadByte:	
 10025                           
 10026                           	psect	text47
 10027  19DC                     __ptext47:	
 10028 ;; *************** function _RF_Initialization *****************
 10029 ;; Defined at:
 10030 ;;		line 9 in file "../src/RF_Control_B1.c"
 10031 ;; Parameters:    Size  Location     Type
 10032 ;;		None
 10033 ;; Auto vars:     Size  Location     Type
 10034 ;;		None
 10035 ;; Return value:  Size  Location     Type
 10036 ;;		None               void
 10037 ;; Registers used:
 10038 ;;		wreg, status,2, status,0, pclath, cstack
 10039 ;; Tracked objects:
 10040 ;;		On entry : 0/0
 10041 ;;		On exit  : 0/0
 10042 ;;		Unchanged: 0/0
 10043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;Total ram usage:        0 bytes
 10049 ;; Hardware stack levels used:    1
 10050 ;; Hardware stack levels required when called:    6
 10051 ;; This function calls:
 10052 ;;		_setRF_Initialization
 10053 ;; This function is called by:
 10054 ;;		_main
 10055 ;; This function uses a non-reentrant model
 10056 ;;
 10057                           
 10058                           
 10059                           ;psect for function _RF_Initialization
 10060  19DC                     _RF_Initialization:	
 10061                           
 10062                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10063                           
 10064                           ;incstack = 0
 10065                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10066  19DC  319A  229C         	fcall	_setRF_Initialization
 10067  19DE  0008               	return
 10068  19DF                     __end_of_RF_Initialization:	
 10069                           
 10070                           	psect	text48
 10071  1A9C                     __ptext48:	
 10072 ;; *************** function _setRF_Initialization *****************
 10073 ;; Defined at:
 10074 ;;		line 43 in file "../src/RF_Control_B1.c"
 10075 ;; Parameters:    Size  Location     Type
 10076 ;;		None
 10077 ;; Auto vars:     Size  Location     Type
 10078 ;;		None
 10079 ;; Return value:  Size  Location     Type
 10080 ;;		None               void
 10081 ;; Registers used:
 10082 ;;		wreg
 10083 ;; Tracked objects:
 10084 ;;		On entry : 0/0
 10085 ;;		On exit  : 0/0
 10086 ;;		Unchanged: 0/0
 10087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10091 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;Total ram usage:        1 bytes
 10093 ;; Hardware stack levels used:    1
 10094 ;; Hardware stack levels required when called:    5
 10095 ;; This function calls:
 10096 ;;		Nothing
 10097 ;; This function is called by:
 10098 ;;		_RF_Initialization
 10099 ;; This function uses a non-reentrant model
 10100 ;;
 10101                           
 10102                           
 10103                           ;psect for function _setRF_Initialization
 10104  1A9C                     _setRF_Initialization:	
 10105                           
 10106                           ;RF_Control_B1.c: 45: Tx_Length = 21;
 10107                           
 10108                           ;incstack = 0
 10109                           ; Regs used in _setRF_Initialization: [wreg]
 10110  1A9C  3015               	movlw	21
 10111  1A9D  0020               	movlb	0	; select bank0
 10112  1A9E  00A0               	movwf	??_setRF_Initialization
 10113  1A9F  0820               	movf	??_setRF_Initialization,w
 10114  1AA0  0021               	movlb	1	; select bank1
 10115  1AA1  00D8               	movwf	_Tx_Length^(0+128)
 10116                           
 10117                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
 10118  1AA2  3014               	movlw	20
 10119  1AA3  00C6               	movwf	(_RF1^(0+128)+7)
 10120  1AA4  3000               	movlw	0
 10121  1AA5  00C7               	movwf	(_RF1^(0+128)+8)
 10122  1AA6  0008               	return
 10123  1AA7                     __end_of_setRF_Initialization:	
 10124                           
 10125                           	psect	text49
 10126  1BF6                     __ptext49:	
 10127 ;; *************** function _Mcu_Initialization *****************
 10128 ;; Defined at:
 10129 ;;		line 30 in file "../src/MCU_B1.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;		None
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;		None
 10134 ;; Return value:  Size  Location     Type
 10135 ;;		None               void
 10136 ;; Registers used:
 10137 ;;		wreg, status,2, status,0, pclath, cstack
 10138 ;; Tracked objects:
 10139 ;;		On entry : 0/0
 10140 ;;		On exit  : 0/0
 10141 ;;		Unchanged: 0/0
 10142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;Total ram usage:        0 bytes
 10148 ;; Hardware stack levels used:    1
 10149 ;; Hardware stack levels required when called:    6
 10150 ;; This function calls:
 10151 ;;		_ADC_Set
 10152 ;;		_Fosc_Set
 10153 ;;		_IOC_Set
 10154 ;;		_IO_Set
 10155 ;;		_TMR1_Set
 10156 ;;		_WDT_Set
 10157 ;; This function is called by:
 10158 ;;		_main
 10159 ;; This function uses a non-reentrant model
 10160 ;;
 10161                           
 10162                           
 10163                           ;psect for function _Mcu_Initialization
 10164  1BF6                     _Mcu_Initialization:	
 10165                           
 10166                           ;MCU_B1.c: 32: Fosc_Set();
 10167                           
 10168                           ;incstack = 0
 10169                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10170  1BF6  3199  21F7  319B   	fcall	_Fosc_Set
 10171                           
 10172                           ;MCU_B1.c: 34: IO_Set();
 10173  1BF9  319D  2545  319B   	fcall	_IO_Set
 10174                           
 10175                           ;MCU_B1.c: 36: ;;
 10176                           ;MCU_B1.c: 38: TMR1_Set();
 10177  1BFC  319A  22D7  319B   	fcall	_TMR1_Set
 10178                           
 10179                           ;MCU_B1.c: 40: ADC_Set();
 10180  1BFF  319A  2212  319B   	fcall	_ADC_Set
 10181                           
 10182                           ;MCU_B1.c: 42: ;;
 10183                           ;MCU_B1.c: 44: ;;
 10184                           ;MCU_B1.c: 46: IOC_Set();
 10185  1C02  319A  22F0  319B   	fcall	_IOC_Set
 10186                           
 10187                           ;MCU_B1.c: 48: ;;
 10188                           ;MCU_B1.c: 50: ;;
 10189                           ;MCU_B1.c: 52: WDT_Set();
 10190  1C05  319A  2291         	fcall	_WDT_Set
 10191  1C07  0008               	return
 10192  1C08                     __end_of_Mcu_Initialization:	
 10193                           
 10194                           	psect	text50
 10195  1A91                     __ptext50:	
 10196 ;; *************** function _WDT_Set *****************
 10197 ;; Defined at:
 10198 ;;		line 1005 in file "../src/MCU_B1.c"
 10199 ;; Parameters:    Size  Location     Type
 10200 ;;		None
 10201 ;; Auto vars:     Size  Location     Type
 10202 ;;		None
 10203 ;; Return value:  Size  Location     Type
 10204 ;;		None               void
 10205 ;; Registers used:
 10206 ;;		wreg
 10207 ;; Tracked objects:
 10208 ;;		On entry : 0/0
 10209 ;;		On exit  : 0/0
 10210 ;;		Unchanged: 0/0
 10211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;Total ram usage:        1 bytes
 10217 ;; Hardware stack levels used:    1
 10218 ;; Hardware stack levels required when called:    5
 10219 ;; This function calls:
 10220 ;;		Nothing
 10221 ;; This function is called by:
 10222 ;;		_Mcu_Initialization
 10223 ;; This function uses a non-reentrant model
 10224 ;;
 10225                           
 10226                           
 10227                           ;psect for function _WDT_Set
 10228  1A91                     _WDT_Set:	
 10229                           
 10230                           ;MCU_B1.c: 1012: WDTCON = 0b00010111;;
 10231                           
 10232                           ;incstack = 0
 10233                           ; Regs used in _WDT_Set: [wreg]
 10234  1A91  3017               	movlw	23
 10235  1A92  0021               	movlb	1	; select bank1
 10236  1A93  0097               	movwf	23	;volatile
 10237                           
 10238                           ;MCU_B1.c: 1014: WDT.Enable = 1;
 10239  1A94  1450               	bsf	_WDT^(0+128),0
 10240                           
 10241                           ;MCU_B1.c: 1015: WDT.Timer = 10;
 10242  1A95  300A               	movlw	10
 10243  1A96  0020               	movlb	0	; select bank0
 10244  1A97  00A0               	movwf	??_WDT_Set
 10245  1A98  0820               	movf	??_WDT_Set,w
 10246  1A99  0021               	movlb	1	; select bank1
 10247  1A9A  00D1               	movwf	(_WDT^(0+128)+1)
 10248  1A9B  0008               	return
 10249  1A9C                     __end_of_WDT_Set:	
 10250                           
 10251                           	psect	text51
 10252  1AD7                     __ptext51:	
 10253 ;; *************** function _TMR1_Set *****************
 10254 ;; Defined at:
 10255 ;;		line 199 in file "../src/MCU_B1.c"
 10256 ;; Parameters:    Size  Location     Type
 10257 ;;		None
 10258 ;; Auto vars:     Size  Location     Type
 10259 ;;		None
 10260 ;; Return value:  Size  Location     Type
 10261 ;;		None               void
 10262 ;; Registers used:
 10263 ;;		wreg
 10264 ;; Tracked objects:
 10265 ;;		On entry : 0/0
 10266 ;;		On exit  : 0/0
 10267 ;;		Unchanged: 0/0
 10268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;Total ram usage:        0 bytes
 10274 ;; Hardware stack levels used:    1
 10275 ;; Hardware stack levels required when called:    5
 10276 ;; This function calls:
 10277 ;;		Nothing
 10278 ;; This function is called by:
 10279 ;;		_Mcu_Initialization
 10280 ;; This function uses a non-reentrant model
 10281 ;;
 10282                           
 10283                           
 10284                           ;psect for function _TMR1_Set
 10285  1AD7                     _TMR1_Set:	
 10286                           
 10287                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
 10288                           
 10289                           ;incstack = 0
 10290                           ; Regs used in _TMR1_Set: [wreg]
 10291  1AD7  3041               	movlw	65
 10292  1AD8  0020               	movlb	0	; select bank0
 10293  1AD9  0098               	movwf	24	;volatile
 10294                           
 10295                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
 10296  1ADA  30FA               	movlw	250
 10297  1ADB  0097               	movwf	23	;volatile
 10298                           
 10299                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
 10300  1ADC  3038               	movlw	56
 10301  1ADD  0096               	movwf	22	;volatile
 10302                           
 10303                           ;MCU_B1.c: 203: TMR1IE = 1;
 10304  1ADE  0021               	movlb	1	; select bank1
 10305  1ADF  1411               	bsf	17,0	;volatile
 10306                           
 10307                           ;MCU_B1.c: 204: PEIE = 1;
 10308  1AE0  170B               	bsf	11,6	;volatile
 10309                           
 10310                           ;MCU_B1.c: 205: GIE = 1;
 10311  1AE1  178B               	bsf	11,7	;volatile
 10312  1AE2  0008               	return
 10313  1AE3                     __end_of_TMR1_Set:	
 10314                           
 10315                           	psect	text52
 10316  1D45                     __ptext52:	
 10317 ;; *************** function _IO_Set *****************
 10318 ;; Defined at:
 10319 ;;		line 60 in file "../src/MCU_B1.c"
 10320 ;; Parameters:    Size  Location     Type
 10321 ;;		None
 10322 ;; Auto vars:     Size  Location     Type
 10323 ;;		None
 10324 ;; Return value:  Size  Location     Type
 10325 ;;		None               void
 10326 ;; Registers used:
 10327 ;;		wreg, status,2
 10328 ;; Tracked objects:
 10329 ;;		On entry : 0/0
 10330 ;;		On exit  : 0/0
 10331 ;;		Unchanged: 0/0
 10332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;Total ram usage:        0 bytes
 10338 ;; Hardware stack levels used:    1
 10339 ;; Hardware stack levels required when called:    5
 10340 ;; This function calls:
 10341 ;;		Nothing
 10342 ;; This function is called by:
 10343 ;;		_Mcu_Initialization
 10344 ;; This function uses a non-reentrant model
 10345 ;;
 10346                           
 10347                           
 10348                           ;psect for function _IO_Set
 10349  1D45                     _IO_Set:	
 10350                           
 10351                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10352                           
 10353                           ;incstack = 0
 10354                           ; Regs used in _IO_Set: [wreg+status,2]
 10355  1D45  3077               	movlw	119
 10356  1D46  0021               	movlb	1	; select bank1
 10357  1D47  008C               	movwf	12	;volatile
 10358                           
 10359                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10360  1D48  3007               	movlw	7
 10361  1D49  008D               	movwf	13	;volatile
 10362                           
 10363                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10364  1D4A  300C               	movlw	12
 10365  1D4B  008E               	movwf	14	;volatile
 10366                           
 10367                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10368  1D4C  0022               	movlb	2	; select bank2
 10369  1D4D  018C               	clrf	12	;volatile
 10370                           
 10371                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10372  1D4E  3002               	movlw	2
 10373  1D4F  008D               	movwf	13	;volatile
 10374                           
 10375                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10376  1D50  018E               	clrf	14	;volatile
 10377                           
 10378                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10379  1D51  3022               	movlw	34
 10380  1D52  0023               	movlb	3	; select bank3
 10381  1D53  008C               	movwf	12	;volatile
 10382                           
 10383                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10384  1D54  018D               	clrf	13	;volatile
 10385                           
 10386                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10387  1D55  018E               	clrf	14	;volatile
 10388                           
 10389                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10390  1D56  3077               	movlw	119
 10391  1D57  0020               	movlb	0	; select bank0
 10392  1D58  008C               	movwf	12	;volatile
 10393                           
 10394                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10395  1D59  3007               	movlw	7
 10396  1D5A  008D               	movwf	13	;volatile
 10397                           
 10398                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10399  1D5B  300C               	movlw	12
 10400  1D5C  008E               	movwf	14	;volatile
 10401  1D5D  0008               	return
 10402  1D5E                     __end_of_IO_Set:	
 10403                           
 10404                           	psect	text53
 10405  1AF0                     __ptext53:	
 10406 ;; *************** function _IOC_Set *****************
 10407 ;; Defined at:
 10408 ;;		line 367 in file "../src/MCU_B1.c"
 10409 ;; Parameters:    Size  Location     Type
 10410 ;;		None
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;		None
 10413 ;; Return value:  Size  Location     Type
 10414 ;;		None               void
 10415 ;; Registers used:
 10416 ;;		wreg, status,2
 10417 ;; Tracked objects:
 10418 ;;		On entry : 0/0
 10419 ;;		On exit  : 0/0
 10420 ;;		Unchanged: 0/0
 10421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;Total ram usage:        0 bytes
 10427 ;; Hardware stack levels used:    1
 10428 ;; Hardware stack levels required when called:    5
 10429 ;; This function calls:
 10430 ;;		Nothing
 10431 ;; This function is called by:
 10432 ;;		_Mcu_Initialization
 10433 ;; This function uses a non-reentrant model
 10434 ;;
 10435                           
 10436                           
 10437                           ;psect for function _IOC_Set
 10438  1AF0                     _IOC_Set:	
 10439                           
 10440                           ;MCU_B1.c: 368: WPUB2 = 0;
 10441                           
 10442                           ;incstack = 0
 10443                           ; Regs used in _IOC_Set: [wreg+status,2]
 10444  1AF0  0024               	movlb	4	; select bank4
 10445  1AF1  110D               	bcf	13,2	;volatile
 10446                           
 10447                           ;MCU_B1.c: 371: IOCBP = 0b00000100;
 10448  1AF2  3004               	movlw	4
 10449  1AF3  0027               	movlb	7	; select bank7
 10450  1AF4  0094               	movwf	20	;volatile
 10451                           
 10452                           ;MCU_B1.c: 372: IOCBN = 0b00000100;
 10453  1AF5  3004               	movlw	4
 10454  1AF6  0095               	movwf	21	;volatile
 10455                           
 10456                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
 10457  1AF7  0196               	clrf	22	;volatile
 10458                           
 10459                           ;MCU_B1.c: 394: IOCIE = 1;
 10460  1AF8  158B               	bsf	11,3	;volatile
 10461                           
 10462                           ;MCU_B1.c: 395: IOCIF = 0;
 10463  1AF9  100B               	bcf	11,0	;volatile
 10464                           
 10465                           ;MCU_B1.c: 396: PEIE = 1;
 10466  1AFA  170B               	bsf	11,6	;volatile
 10467                           
 10468                           ;MCU_B1.c: 397: GIE = 1;
 10469  1AFB  178B               	bsf	11,7	;volatile
 10470  1AFC  0008               	return
 10471  1AFD                     __end_of_IOC_Set:	
 10472                           
 10473                           	psect	text54
 10474  19F7                     __ptext54:	
 10475 ;; *************** function _Fosc_Set *****************
 10476 ;; Defined at:
 10477 ;;		line 56 in file "../src/MCU_B1.c"
 10478 ;; Parameters:    Size  Location     Type
 10479 ;;		None
 10480 ;; Auto vars:     Size  Location     Type
 10481 ;;		None
 10482 ;; Return value:  Size  Location     Type
 10483 ;;		None               void
 10484 ;; Registers used:
 10485 ;;		wreg
 10486 ;; Tracked objects:
 10487 ;;		On entry : 0/0
 10488 ;;		On exit  : 0/0
 10489 ;;		Unchanged: 0/0
 10490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;Total ram usage:        0 bytes
 10496 ;; Hardware stack levels used:    1
 10497 ;; Hardware stack levels required when called:    5
 10498 ;; This function calls:
 10499 ;;		Nothing
 10500 ;; This function is called by:
 10501 ;;		_Mcu_Initialization
 10502 ;; This function uses a non-reentrant model
 10503 ;;
 10504                           
 10505                           
 10506                           ;psect for function _Fosc_Set
 10507  19F7                     _Fosc_Set:	
 10508                           
 10509                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10510                           
 10511                           ;incstack = 0
 10512                           ; Regs used in _Fosc_Set: [wreg]
 10513  19F7  3078               	movlw	120
 10514  19F8  0021               	movlb	1	; select bank1
 10515  19F9  0099               	movwf	25	;volatile
 10516  19FA  0008               	return
 10517  19FB                     __end_of_Fosc_Set:	
 10518                           
 10519                           	psect	text55
 10520  1A12                     __ptext55:	
 10521 ;; *************** function _ADC_Set *****************
 10522 ;; Defined at:
 10523 ;;		line 419 in file "../src/MCU_B1.c"
 10524 ;; Parameters:    Size  Location     Type
 10525 ;;		None
 10526 ;; Auto vars:     Size  Location     Type
 10527 ;;		None
 10528 ;; Return value:  Size  Location     Type
 10529 ;;		None               void
 10530 ;; Registers used:
 10531 ;;		wreg
 10532 ;; Tracked objects:
 10533 ;;		On entry : 0/0
 10534 ;;		On exit  : 0/0
 10535 ;;		Unchanged: 0/0
 10536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;Total ram usage:        0 bytes
 10542 ;; Hardware stack levels used:    1
 10543 ;; Hardware stack levels required when called:    5
 10544 ;; This function calls:
 10545 ;;		Nothing
 10546 ;; This function is called by:
 10547 ;;		_Mcu_Initialization
 10548 ;; This function uses a non-reentrant model
 10549 ;;
 10550                           
 10551                           
 10552                           ;psect for function _ADC_Set
 10553  1A12                     _ADC_Set:	
 10554                           
 10555                           ;MCU_B1.c: 420: ADCON1 = 0xf2;
 10556                           
 10557                           ;incstack = 0
 10558                           ; Regs used in _ADC_Set: [wreg]
 10559  1A12  30F2               	movlw	242
 10560  1A13  0021               	movlb	1	; select bank1
 10561  1A14  009E               	movwf	30	;volatile
 10562                           
 10563                           ;MCU_B1.c: 421: FVRCON = 0xc0;
 10564  1A15  30C0               	movlw	192
 10565  1A16  0022               	movlb	2	; select bank2
 10566  1A17  0097               	movwf	23	;volatile
 10567  1A18  0008               	return
 10568  1A19                     __end_of_ADC_Set:	
 10569                           
 10570                           	psect	text56
 10571  020E                     __ptext56:	
 10572 ;; *************** function _Load_Main *****************
 10573 ;; Defined at:
 10574 ;;		line 39 in file "../src/OverLoad_B1.c"
 10575 ;; Parameters:    Size  Location     Type
 10576 ;;		None
 10577 ;; Auto vars:     Size  Location     Type
 10578 ;;  i               1   19[BANK0 ] unsigned char 
 10579 ;; Return value:  Size  Location     Type
 10580 ;;		None               void
 10581 ;; Registers used:
 10582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10583 ;; Tracked objects:
 10584 ;;		On entry : 0/0
 10585 ;;		On exit  : 0/0
 10586 ;;		Unchanged: 0/0
 10587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10589 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10590 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10591 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;Total ram usage:        3 bytes
 10593 ;; Hardware stack levels used:    1
 10594 ;; Hardware stack levels required when called:   10
 10595 ;; This function calls:
 10596 ;;		___lwdiv
 10597 ;;		___wmul
 10598 ;;		_getTemp_Safe
 10599 ;;		_setDimmerLights_Clear
 10600 ;;		_setLoad_AH_AL_Restore
 10601 ;;		_setLoad_Exceptions
 10602 ;; This function is called by:
 10603 ;;		_main
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           
 10608                           ;psect for function _Load_Main
 10609  020E                     _Load_Main:	
 10610                           
 10611                           ;OverLoad_B1.c: 40: char i = 0;
 10612                           
 10613                           ;incstack = 0
 10614                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10615  020E  0020               	movlb	0	; select bank0
 10616  020F  01B3               	clrf	Load_Main@i
 10617                           
 10618                           ;OverLoad_B1.c: 41: if (Load1.ERROR == 1) {
 10619  0210  0023               	movlb	3	; select bank3
 10620  0211  1EA0               	btfss	_Load1^(0+384),5
 10621  0212  2A24               	goto	l1698
 10622                           
 10623                           ;OverLoad_B1.c: 42: Load1.ErrorTime++;
 10624  0213  3001               	movlw	1
 10625  0214  07A3               	addwf	(_Load1^(0+384)+3),f
 10626  0215  3000               	movlw	0
 10627  0216  3DA4               	addwfc	((_Load1+1)^(0+384)+3),f
 10628                           
 10629                           ;OverLoad_B1.c: 43: if (Load1.ErrorTime >= 1000)
 10630  0217  3003               	movlw	3
 10631  0218  0224               	subwf	((_Load1+1)^(0+384)+3),w
 10632  0219  30E8               	movlw	232
 10633  021A  1903               	skipnz
 10634  021B  0223               	subwf	(_Load1^(0+384)+3),w
 10635  021C  1C03               	skipc
 10636  021D  0008               	return
 10637                           
 10638                           ;OverLoad_B1.c: 44: {
 10639                           ;OverLoad_B1.c: 45: Load1.ErrorTime = 0;
 10640  021E  01A3               	clrf	(_Load1^(0+384)+3)
 10641  021F  01A4               	clrf	((_Load1+1)^(0+384)+3)
 10642                           
 10643                           ;OverLoad_B1.c: 46: setLoad_Exceptions(0);
 10644  0220  3000               	movlw	0
 10645  0221  3191  21CB         	fcall	_setLoad_Exceptions
 10646                           
 10647                           ;OverLoad_B1.c: 47: }
 10648                           ;OverLoad_B1.c: 48: } else {
 10649  0223  0008               	return
 10650  0224                     l1698:	
 10651                           
 10652                           ;OverLoad_B1.c: 49: if (Load1.ADtoGO == 1) {
 10653  0224  1E20               	btfss	_Load1^(0+384),4
 10654  0225  2B4F               	goto	l1701
 10655                           
 10656                           ;OverLoad_B1.c: 50: Load1.Time++;
 10657  0226  3001               	movlw	1
 10658  0227  07A1               	addwf	(_Load1^(0+384)+1),f
 10659  0228  3000               	movlw	0
 10660  0229  3DA2               	addwfc	((_Load1+1)^(0+384)+1),f
 10661                           
 10662                           ;OverLoad_B1.c: 51: if (Load1.Time >= 5)
 10663  022A  3000               	movlw	0
 10664  022B  0222               	subwf	((_Load1+1)^(0+384)+1),w
 10665  022C  3005               	movlw	5
 10666  022D  1903               	skipnz
 10667  022E  0221               	subwf	(_Load1^(0+384)+1),w
 10668  022F  1C03               	skipc
 10669  0230  0008               	return
 10670                           
 10671                           ;OverLoad_B1.c: 52: {
 10672                           ;OverLoad_B1.c: 53: Load1.Time = 0;
 10673  0231  01A1               	clrf	(_Load1^(0+384)+1)
 10674  0232  01A2               	clrf	((_Load1+1)^(0+384)+1)
 10675                           
 10676                           ;OverLoad_B1.c: 54: Load1.ADtoGO = 0;
 10677  0233  1220               	bcf	_Load1^(0+384),4
 10678                           
 10679                           ;OverLoad_B1.c: 55: Load1.LightsCount = Load1.Lights1Status + Load1.Lights2Status + Load
      +                          1.Lights3Status;
 10680  0234  0863               	movf	(_Load1^(0+384)+67),w
 10681  0235  0764               	addwf	(_Load1^(0+384)+68),w
 10682  0236  0765               	addwf	(_Load1^(0+384)+69),w
 10683  0237  0020               	movlb	0	; select bank0
 10684  0238  00B1               	movwf	??_Load_Main
 10685  0239  0831               	movf	??_Load_Main,w
 10686  023A  0023               	movlb	3	; select bank3
 10687  023B  00DE               	movwf	(_Load1^(0+384)+62)
 10688                           
 10689                           ;OverLoad_B1.c: 56: for (i = 1; i < 4; i++) {
 10690  023C  0020               	movlb	0	; select bank0
 10691  023D  01B3               	clrf	Load_Main@i
 10692  023E  0AB3               	incf	Load_Main@i,f
 10693  023F  3004               	movlw	4
 10694  0240  0233               	subwf	Load_Main@i,w
 10695  0241  1803               	btfsc	3,0
 10696  0242  2A6D               	goto	l10485
 10697  0243                     l10479:	
 10698                           
 10699                           ;OverLoad_B1.c: 57: Load1.ADH += Load1.AH[i];
 10700  0243  3533               	lslf	Load_Main@i,w
 10701  0244  3EA8               	addlw	(_Load1+8)& (0+255)
 10702  0245  0086               	movwf	6
 10703  0246  3001               	movlw	1	; select bank3/4
 10704  0247  0087               	movwf	7
 10705  0248  3F40               	moviw [0]fsr1
 10706  0249  00B1               	movwf	??_Load_Main
 10707  024A  3F41               	moviw [1]fsr1
 10708  024B  00B2               	movwf	??_Load_Main+1
 10709  024C  0831               	movf	??_Load_Main,w
 10710  024D  0023               	movlb	3	; select bank3
 10711  024E  07CE               	addwf	(_Load1^(0+384)+46),f
 10712  024F  0020               	movlb	0	; select bank0
 10713  0250  0832               	movf	??_Load_Main+1,w
 10714  0251  0023               	movlb	3	; select bank3
 10715  0252  3DCF               	addwfc	((_Load1+1)^(0+384)+46),f
 10716                           
 10717                           ;OverLoad_B1.c: 58: Load1.ADL += Load1.AL[i];
 10718  0253  0020               	movlb	0	; select bank0
 10719  0254  3533               	lslf	Load_Main@i,w
 10720  0255  3EBA               	addlw	(_Load1+26)& (0+255)
 10721  0256  0086               	movwf	6
 10722  0257  3001               	movlw	1	; select bank3/4
 10723  0258  0087               	movwf	7
 10724  0259  3F40               	moviw [0]fsr1
 10725  025A  00B1               	movwf	??_Load_Main
 10726  025B  3F41               	moviw [1]fsr1
 10727  025C  00B2               	movwf	??_Load_Main+1
 10728  025D  0831               	movf	??_Load_Main,w
 10729  025E  0023               	movlb	3	; select bank3
 10730  025F  07D0               	addwf	(_Load1^(0+384)+48),f
 10731  0260  0020               	movlb	0	; select bank0
 10732  0261  0832               	movf	??_Load_Main+1,w
 10733  0262  0023               	movlb	3	; select bank3
 10734  0263  3DD1               	addwfc	((_Load1+1)^(0+384)+48),f
 10735  0264  3001               	movlw	1
 10736  0265  0020               	movlb	0	; select bank0
 10737  0266  00B1               	movwf	??_Load_Main
 10738  0267  0831               	movf	??_Load_Main,w
 10739  0268  07B3               	addwf	Load_Main@i,f
 10740  0269  3004               	movlw	4
 10741  026A  0233               	subwf	Load_Main@i,w
 10742  026B  1C03               	skipc
 10743  026C  2A43               	goto	l10479
 10744  026D                     l10485:	
 10745                           
 10746                           ;OverLoad_B1.c: 59: }
 10747                           ;OverLoad_B1.c: 60: Load1.ADH /= 3;
 10748  026D  3003               	movlw	3
 10749  026E  00A0               	movwf	___lwdiv@divisor
 10750  026F  3000               	movlw	0
 10751  0270  00A1               	movwf	___lwdiv@divisor+1
 10752  0271  0023               	movlb	3	; select bank3
 10753  0272  084F               	movf	((_Load1+1)^(0+384)+46),w
 10754  0273  0020               	movlb	0	; select bank0
 10755  0274  01A3               	clrf	___lwdiv@dividend+1
 10756  0275  07A3               	addwf	___lwdiv@dividend+1,f
 10757  0276  0023               	movlb	3	; select bank3
 10758  0277  084E               	movf	(_Load1^(0+384)+46),w
 10759  0278  0020               	movlb	0	; select bank0
 10760  0279  01A2               	clrf	___lwdiv@dividend
 10761  027A  07A2               	addwf	___lwdiv@dividend,f
 10762  027B  3191  2194  3182   	fcall	___lwdiv
 10763  027E  0020               	movlb	0	; select bank0
 10764  027F  0821               	movf	?___lwdiv+1,w
 10765  0280  0023               	movlb	3	; select bank3
 10766  0281  01CF               	clrf	((_Load1+1)^(0+384)+46)
 10767  0282  07CF               	addwf	((_Load1+1)^(0+384)+46),f
 10768  0283  0020               	movlb	0	; select bank0
 10769  0284  0820               	movf	?___lwdiv,w
 10770  0285  0023               	movlb	3	; select bank3
 10771  0286  01CE               	clrf	(_Load1^(0+384)+46)
 10772  0287  07CE               	addwf	(_Load1^(0+384)+46),f
 10773                           
 10774                           ;OverLoad_B1.c: 61: Load1.ADL /= 3;
 10775  0288  3003               	movlw	3
 10776  0289  0020               	movlb	0	; select bank0
 10777  028A  00A0               	movwf	___lwdiv@divisor
 10778  028B  3000               	movlw	0
 10779  028C  00A1               	movwf	___lwdiv@divisor+1
 10780  028D  0023               	movlb	3	; select bank3
 10781  028E  0851               	movf	((_Load1+1)^(0+384)+48),w
 10782  028F  0020               	movlb	0	; select bank0
 10783  0290  01A3               	clrf	___lwdiv@dividend+1
 10784  0291  07A3               	addwf	___lwdiv@dividend+1,f
 10785  0292  0023               	movlb	3	; select bank3
 10786  0293  0850               	movf	(_Load1^(0+384)+48),w
 10787  0294  0020               	movlb	0	; select bank0
 10788  0295  01A2               	clrf	___lwdiv@dividend
 10789  0296  07A2               	addwf	___lwdiv@dividend,f
 10790  0297  3191  2194  3182   	fcall	___lwdiv
 10791  029A  0020               	movlb	0	; select bank0
 10792  029B  0821               	movf	?___lwdiv+1,w
 10793  029C  0023               	movlb	3	; select bank3
 10794  029D  01D1               	clrf	((_Load1+1)^(0+384)+48)
 10795  029E  07D1               	addwf	((_Load1+1)^(0+384)+48),f
 10796  029F  0020               	movlb	0	; select bank0
 10797  02A0  0820               	movf	?___lwdiv,w
 10798  02A1  0023               	movlb	3	; select bank3
 10799  02A2  01D0               	clrf	(_Load1^(0+384)+48)
 10800  02A3  07D0               	addwf	(_Load1^(0+384)+48),f
 10801                           
 10802                           ;OverLoad_B1.c: 62: if (Load1.ADH > Load1.ADL) {
 10803  02A4  084F               	movf	((_Load1+1)^(0+384)+46),w
 10804  02A5  0251               	subwf	((_Load1+1)^(0+384)+48),w
 10805  02A6  1D03               	skipz
 10806  02A7  2AAA               	goto	u11385
 10807  02A8  084E               	movf	(_Load1^(0+384)+46),w
 10808  02A9  0250               	subwf	(_Load1^(0+384)+48),w
 10809  02AA                     u11385:	
 10810  02AA  1803               	skipnc
 10811  02AB  2B4C               	goto	l10543
 10812                           
 10813                           ;OverLoad_B1.c: 63: Load1.AD = (Load1.ADH - Load1.ADL);
 10814  02AC  302E               	movlw	46
 10815  02AD  3EA0               	addlw	_Load1& (0+255)
 10816  02AE  0086               	movwf	6
 10817  02AF  3001               	movlw	1	; select bank3/4
 10818  02B0  0087               	movwf	7
 10819  02B1  0950               	comf	(_Load1^(0+384)+48),w
 10820  02B2  0020               	movlb	0	; select bank0
 10821  02B3  00B1               	movwf	??_Load_Main
 10822  02B4  0023               	movlb	3	; select bank3
 10823  02B5  0951               	comf	((_Load1+1)^(0+384)+48),w
 10824  02B6  0020               	movlb	0	; select bank0
 10825  02B7  00B2               	movwf	??_Load_Main+1
 10826  02B8  0AB1               	incf	??_Load_Main,f
 10827  02B9  1903               	skipnz
 10828  02BA  0AB2               	incf	??_Load_Main+1,f
 10829  02BB  3F40               	moviw [0]fsr1
 10830  02BC  0731               	addwf	??_Load_Main,w
 10831  02BD  0023               	movlb	3	; select bank3
 10832  02BE  00CC               	movwf	(_Load1^(0+384)+44)
 10833  02BF  3F41               	moviw [1]fsr1
 10834  02C0  0020               	movlb	0	; select bank0
 10835  02C1  3D32               	addwfc	??_Load_Main+1,w
 10836  02C2  0023               	movlb	3	; select bank3
 10837  02C3  00CD               	movwf	(_Load1^(0+384)+45)
 10838                           
 10839                           ;OverLoad_B1.c: 65: if (Load1.Count < 2) {
 10840  02C4  3002               	movlw	2
 10841  02C5  025A               	subwf	(_Load1^(0+384)+58),w
 10842  02C6  1803               	skipnc
 10843  02C7  2AE9               	goto	l10507
 10844                           
 10845                           ;OverLoad_B1.c: 66: Load1.Count++;
 10846  02C8  3001               	movlw	1
 10847  02C9  0020               	movlb	0	; select bank0
 10848  02CA  00B1               	movwf	??_Load_Main
 10849  02CB  0831               	movf	??_Load_Main,w
 10850  02CC  0023               	movlb	3	; select bank3
 10851  02CD  07DA               	addwf	(_Load1^(0+384)+58),f
 10852                           
 10853                           ;OverLoad_B1.c: 67: if (Load1.Count == 1) {
 10854  02CE  085A               	movf	(_Load1^(0+384)+58),w
 10855  02CF  3A01               	xorlw	1
 10856  02D0  1D03               	skipz
 10857  02D1  2AD6               	goto	l10499
 10858                           
 10859                           ;OverLoad_B1.c: 68: Load1.JudgeValue = 500;
 10860  02D2  30F4               	movlw	244
 10861  02D3  00D6               	movwf	(_Load1^(0+384)+54)
 10862  02D4  3001               	movlw	1
 10863  02D5  2AE1               	goto	L6
 10864  02D6                     l10499:	
 10865                           ;OverLoad_B1.c: 69: } else if (Load1.Count == 2) {
 10866                           
 10867  02D6  085A               	movf	(_Load1^(0+384)+58),w
 10868  02D7  3A02               	xorlw	2
 10869  02D8  1D03               	skipz
 10870  02D9  2AE9               	goto	l10507
 10871                           
 10872                           ;OverLoad_B1.c: 70: if (Load1.LightsCount == 1) {
 10873  02DA  085E               	movf	(_Load1^(0+384)+62),w
 10874  02DB  3A01               	xorlw	1
 10875  02DC  1D03               	skipz
 10876  02DD  2AE3               	goto	l10505
 10877                           
 10878                           ;OverLoad_B1.c: 71: Load1.JudgeValue = 0x32;
 10879  02DE  3032               	movlw	50
 10880  02DF  00D6               	movwf	(_Load1^(0+384)+54)
 10881  02E0  3000               	movlw	0
 10882  02E1                     L6:	
 10883  02E1  00D7               	movwf	(_Load1^(0+384)+55)
 10884                           
 10885                           ;OverLoad_B1.c: 72: } else {
 10886  02E2  2AE9               	goto	l10507
 10887  02E3                     l10505:	
 10888                           
 10889                           ;OverLoad_B1.c: 73: Load1.JudgeValue = (0x32 + Load1.TotalLoad) - 0x08;
 10890  02E3  0826               	movf	(_Load1^(0+384)+6),w
 10891  02E4  3E2A               	addlw	42
 10892  02E5  00D6               	movwf	(_Load1^(0+384)+54)
 10893  02E6  3000               	movlw	0
 10894  02E7  3D27               	addwfc	((_Load1+1)^(0+384)+6),w
 10895  02E8  00D7               	movwf	((_Load1+1)^(0+384)+54)
 10896  02E9                     l10507:	
 10897                           
 10898                           ;OverLoad_B1.c: 74: }
 10899                           ;OverLoad_B1.c: 75: }
 10900                           ;OverLoad_B1.c: 76: }
 10901                           ;OverLoad_B1.c: 78: if (Load1.AD >= Load1.JudgeValue) {
 10902  02E9  0857               	movf	((_Load1+1)^(0+384)+54),w
 10903  02EA  024D               	subwf	((_Load1+1)^(0+384)+44),w
 10904  02EB  1D03               	skipz
 10905  02EC  2AEF               	goto	u11435
 10906  02ED  0856               	movf	(_Load1^(0+384)+54),w
 10907  02EE  024C               	subwf	(_Load1^(0+384)+44),w
 10908  02EF                     u11435:	
 10909  02EF  1C03               	skipc
 10910  02F0  2B01               	goto	l10517
 10911                           
 10912                           ;OverLoad_B1.c: 79: Load1.ErrorCount++;
 10913  02F1  3001               	movlw	1
 10914  02F2  0020               	movlb	0	; select bank0
 10915  02F3  00B1               	movwf	??_Load_Main
 10916  02F4  0831               	movf	??_Load_Main,w
 10917  02F5  0023               	movlb	3	; select bank3
 10918  02F6  07DC               	addwf	(_Load1^(0+384)+60),f
 10919                           
 10920                           ;OverLoad_B1.c: 80: if (Load1.ErrorCount > 2) {
 10921  02F7  3003               	movlw	3
 10922  02F8  025C               	subwf	(_Load1^(0+384)+60),w
 10923  02F9  1C03               	skipc
 10924  02FA  2B4C               	goto	l10543
 10925                           
 10926                           ;OverLoad_B1.c: 81: Load1.ErrorCount = 0;
 10927  02FB  01DC               	clrf	(_Load1^(0+384)+60)
 10928                           
 10929                           ;OverLoad_B1.c: 82: setLoad_Exceptions(1);
 10930  02FC  3001               	movlw	1
 10931  02FD  3191  21CB  3182   	fcall	_setLoad_Exceptions
 10932                           
 10933                           ;OverLoad_B1.c: 90: }
 10934                           ;OverLoad_B1.c: 91: } else {
 10935  0300  2B4C               	goto	l10543
 10936  0301                     l10517:	
 10937                           
 10938                           ;OverLoad_B1.c: 92: Load1.ErrorCount = 0;
 10939  0301  0023               	movlb	3	; select bank3
 10940  0302  01DC               	clrf	(_Load1^(0+384)+60)
 10941                           
 10942                           ;OverLoad_B1.c: 93: if (Load1.SafeCount < 10) {
 10943  0303  300A               	movlw	10
 10944  0304  0262               	subwf	(_Load1^(0+384)+66),w
 10945  0305  1803               	skipnc
 10946  0306  2B0D               	goto	l10523
 10947                           
 10948                           ;OverLoad_B1.c: 94: Load1.SafeCount++;
 10949  0307  3001               	movlw	1
 10950  0308  0020               	movlb	0	; select bank0
 10951  0309  00B1               	movwf	??_Load_Main
 10952  030A  0831               	movf	??_Load_Main,w
 10953  030B  0023               	movlb	3	; select bank3
 10954  030C  07E2               	addwf	(_Load1^(0+384)+66),f
 10955  030D                     l10523:	
 10956                           
 10957                           ;OverLoad_B1.c: 95: }
 10958                           ;OverLoad_B1.c: 96: if (Load1.SafeCount >= 10) {
 10959  030D  300A               	movlw	10
 10960  030E  0262               	subwf	(_Load1^(0+384)+66),w
 10961  030F  1C03               	skipc
 10962  0310  2B4C               	goto	l10543
 10963                           
 10964                           ;OverLoad_B1.c: 97: Load1.Safe = 1;
 10965  0311  15A0               	bsf	_Load1^(0+384),3
 10966                           
 10967                           ;OverLoad_B1.c: 101: setDimmerLights_Clear(1, 1);
 10968  0312  0020               	movlb	0	; select bank0
 10969  0313  01A2               	clrf	setDimmerLights_Clear@command
 10970  0314  0AA2               	incf	setDimmerLights_Clear@command,f
 10971  0315  3001               	movlw	1
 10972  0316  319B  2381  3182   	fcall	_setDimmerLights_Clear
 10973                           
 10974                           ;OverLoad_B1.c: 105: ;;
 10975                           ;OverLoad_B1.c: 111: setDimmerLights_Clear(2, 1);
 10976  0319  0020               	movlb	0	; select bank0
 10977  031A  01A2               	clrf	setDimmerLights_Clear@command
 10978  031B  0AA2               	incf	setDimmerLights_Clear@command,f
 10979  031C  3002               	movlw	2
 10980  031D  319B  2381  3182   	fcall	_setDimmerLights_Clear
 10981                           
 10982                           ;OverLoad_B1.c: 115: ;;
 10983                           ;OverLoad_B1.c: 129: if (Load1.StatusOn == 1) {
 10984  0320  0023               	movlb	3	; select bank3
 10985  0321  1F20               	btfss	_Load1^(0+384),6
 10986  0322  2B2A               	goto	l10535
 10987                           
 10988                           ;OverLoad_B1.c: 130: Load1.StatusOn = 0;
 10989  0323  1320               	bcf	_Load1^(0+384),6
 10990                           
 10991                           ;OverLoad_B1.c: 131: Load1.TotalLoad = Load1.AD;
 10992  0324  084D               	movf	((_Load1+1)^(0+384)+44),w
 10993  0325  01A7               	clrf	((_Load1+1)^(0+384)+6)
 10994  0326  07A7               	addwf	((_Load1+1)^(0+384)+6),f
 10995  0327  084C               	movf	(_Load1^(0+384)+44),w
 10996  0328  01A6               	clrf	(_Load1^(0+384)+6)
 10997  0329  07A6               	addwf	(_Load1^(0+384)+6),f
 10998  032A                     l10535:	
 10999                           
 11000                           ;OverLoad_B1.c: 133: }
 11001                           ;OverLoad_B1.c: 135: if (Load1.StatusOff == 1) {
 11002  032A  1FA0               	btfss	_Load1^(0+384),7
 11003  032B  2B4C               	goto	l10543
 11004                           
 11005                           ;OverLoad_B1.c: 136: Load1.StatusOff = 0;
 11006  032C  13A0               	bcf	_Load1^(0+384),7
 11007                           
 11008                           ;OverLoad_B1.c: 137: Load1.TotalLoad = Load1.AD;
 11009  032D  084D               	movf	((_Load1+1)^(0+384)+44),w
 11010  032E  01A7               	clrf	((_Load1+1)^(0+384)+6)
 11011  032F  07A7               	addwf	((_Load1+1)^(0+384)+6),f
 11012  0330  084C               	movf	(_Load1^(0+384)+44),w
 11013  0331  01A6               	clrf	(_Load1^(0+384)+6)
 11014  0332  07A6               	addwf	(_Load1^(0+384)+6),f
 11015                           
 11016                           ;OverLoad_B1.c: 138: Load1.JudgeValue = 0x32 * Load1.LightsCount;
 11017  0333  085E               	movf	(_Load1^(0+384)+62),w
 11018  0334  0020               	movlb	0	; select bank0
 11019  0335  00B1               	movwf	??_Load_Main
 11020  0336  01B2               	clrf	??_Load_Main+1
 11021  0337  0831               	movf	??_Load_Main,w
 11022  0338  00A0               	movwf	___wmul@multiplier
 11023  0339  0832               	movf	??_Load_Main+1,w
 11024  033A  00A1               	movwf	___wmul@multiplier+1
 11025  033B  3032               	movlw	50
 11026  033C  00A2               	movwf	___wmul@multiplicand
 11027  033D  3000               	movlw	0
 11028  033E  00A3               	movwf	___wmul@multiplicand+1
 11029  033F  319D  25CD  3182   	fcall	___wmul
 11030  0342  0020               	movlb	0	; select bank0
 11031  0343  0821               	movf	?___wmul+1,w
 11032  0344  0023               	movlb	3	; select bank3
 11033  0345  01D7               	clrf	((_Load1+1)^(0+384)+54)
 11034  0346  07D7               	addwf	((_Load1+1)^(0+384)+54),f
 11035  0347  0020               	movlb	0	; select bank0
 11036  0348  0820               	movf	?___wmul,w
 11037  0349  0023               	movlb	3	; select bank3
 11038  034A  01D6               	clrf	(_Load1^(0+384)+54)
 11039  034B  07D6               	addwf	(_Load1^(0+384)+54),f
 11040  034C                     l10543:	
 11041                           
 11042                           ;OverLoad_B1.c: 139: }
 11043                           ;OverLoad_B1.c: 140: }
 11044                           ;OverLoad_B1.c: 141: }
 11045                           ;OverLoad_B1.c: 142: }
 11046                           ;OverLoad_B1.c: 143: setLoad_AH_AL_Restore();
 11047  034C  319D  2578         	fcall	_setLoad_AH_AL_Restore
 11048                           
 11049                           ;OverLoad_B1.c: 155: }
 11050                           ;OverLoad_B1.c: 156: } else {
 11051  034E  0008               	return
 11052  034F                     l1701:	
 11053                           
 11054                           ;OverLoad_B1.c: 157: if (Load1.GO == 1) {
 11055  034F  1CA0               	btfss	_Load1^(0+384),1
 11056  0350  2B5E               	goto	l1720
 11057                           
 11058                           ;OverLoad_B1.c: 158: if (Load1.LightsON == 0) {
 11059  0351  1920               	btfsc	_Load1^(0+384),2
 11060  0352  2B55               	goto	l10549
 11061                           
 11062                           ;OverLoad_B1.c: 159: Load1.LightsON = 1;
 11063  0353  1520               	bsf	_Load1^(0+384),2
 11064                           
 11065                           ;OverLoad_B1.c: 160: Load1.Safe = 0;
 11066  0354  11A0               	bcf	_Load1^(0+384),3
 11067  0355                     l10549:	
 11068                           
 11069                           ;OverLoad_B1.c: 161: }
 11070                           ;OverLoad_B1.c: 162: if (getTemp_Safe() == 1 && 1 == 1) {
 11071  0355  319A  2239  3182   	fcall	_getTemp_Safe
 11072  0358  3A01               	xorlw	1
 11073  0359  1D03               	skipz
 11074  035A  0008               	return
 11075                           
 11076                           ;OverLoad_B1.c: 163: Load1.ADtoGO = 1;
 11077  035B  0023               	movlb	3	; select bank3
 11078  035C  1620               	bsf	_Load1^(0+384),4
 11079                           
 11080                           ;OverLoad_B1.c: 164: }
 11081                           ;OverLoad_B1.c: 165: } else {
 11082  035D  0008               	return
 11083  035E                     l1720:	
 11084                           
 11085                           ;OverLoad_B1.c: 166: if (Load1.LightsON == 1) {
 11086  035E  1D20               	btfss	_Load1^(0+384),2
 11087  035F  0008               	return
 11088                           
 11089                           ;OverLoad_B1.c: 167: Load1.LightsON = 0;
 11090  0360  1120               	bcf	_Load1^(0+384),2
 11091                           
 11092                           ;OverLoad_B1.c: 168: Load1.Safe = 1;
 11093  0361  15A0               	bsf	_Load1^(0+384),3
 11094                           
 11095                           ;OverLoad_B1.c: 169: Load1.ErrorCount = 0;
 11096  0362  01DC               	clrf	(_Load1^(0+384)+60)
 11097                           
 11098                           ;OverLoad_B1.c: 170: Load1.Count = 0;
 11099  0363  01DA               	clrf	(_Load1^(0+384)+58)
 11100                           
 11101                           ;OverLoad_B1.c: 171: Load1.TotalLoad = 0;
 11102  0364  01A6               	clrf	(_Load1^(0+384)+6)
 11103  0365  01A7               	clrf	((_Load1+1)^(0+384)+6)
 11104                           
 11105                           ;OverLoad_B1.c: 172: Load1.NumberCount = 0;
 11106  0366  01DF               	clrf	(_Load1^(0+384)+63)
 11107                           
 11108                           ;OverLoad_B1.c: 173: Load1.StatusOn = 0;
 11109  0367  1320               	bcf	_Load1^(0+384),6
 11110                           
 11111                           ;OverLoad_B1.c: 174: Load1.StatusOff = 0;
 11112  0368  13A0               	bcf	_Load1^(0+384),7
 11113                           
 11114                           ;OverLoad_B1.c: 175: Load1.AD = 0;
 11115  0369  01CC               	clrf	(_Load1^(0+384)+44)
 11116  036A  01CD               	clrf	((_Load1+1)^(0+384)+44)
 11117                           
 11118                           ;OverLoad_B1.c: 176: setLoad_AH_AL_Restore();
 11119  036B  319D  2578  3182   	fcall	_setLoad_AH_AL_Restore
 11120                           
 11121                           ;OverLoad_B1.c: 180: setDimmerLights_Clear(1, 1);
 11122  036E  0020               	movlb	0	; select bank0
 11123  036F  01A2               	clrf	setDimmerLights_Clear@command
 11124  0370  0AA2               	incf	setDimmerLights_Clear@command,f
 11125  0371  3001               	movlw	1
 11126  0372  319B  2381  3182   	fcall	_setDimmerLights_Clear
 11127                           
 11128                           ;OverLoad_B1.c: 184: ;;
 11129                           ;OverLoad_B1.c: 190: setDimmerLights_Clear(2, 1);
 11130  0375  0020               	movlb	0	; select bank0
 11131  0376  01A2               	clrf	setDimmerLights_Clear@command
 11132  0377  0AA2               	incf	setDimmerLights_Clear@command,f
 11133  0378  3002               	movlw	2
 11134  0379  319B  2381         	fcall	_setDimmerLights_Clear
 11135                           
 11136                           ;OverLoad_B1.c: 194: ;;
 11137  037B  0008               	return
 11138  037C                     __end_of_Load_Main:	
 11139                           
 11140                           	psect	text57
 11141  11CB                     __ptext57:	
 11142 ;; *************** function _setLoad_Exceptions *****************
 11143 ;; Defined at:
 11144 ;;		line 231 in file "../src/OverLoad_B1.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;  command         1    wreg     unsigned char 
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;  command         1   16[BANK0 ] unsigned char 
 11149 ;;  i               1   15[BANK0 ] unsigned char 
 11150 ;; Return value:  Size  Location     Type
 11151 ;;		None               void
 11152 ;; Registers used:
 11153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11154 ;; Tracked objects:
 11155 ;;		On entry : 0/0
 11156 ;;		On exit  : 0/0
 11157 ;;		Unchanged: 0/0
 11158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;Total ram usage:        3 bytes
 11164 ;; Hardware stack levels used:    1
 11165 ;; Hardware stack levels required when called:    9
 11166 ;; This function calls:
 11167 ;;		_DimmerLights_Exceptions
 11168 ;;		_setLED
 11169 ;;		_setRF_Enable
 11170 ;;		_setSw_Enable
 11171 ;; This function is called by:
 11172 ;;		_Load_Main
 11173 ;; This function uses a non-reentrant model
 11174 ;;
 11175                           
 11176                           
 11177                           ;psect for function _setLoad_Exceptions
 11178  11CB                     _setLoad_Exceptions:	
 11179                           
 11180                           ;incstack = 0
 11181                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11182                           ;setLoad_Exceptions@command stored from wreg
 11183  11CB  0020               	movlb	0	; select bank0
 11184  11CC  00B0               	movwf	setLoad_Exceptions@command
 11185                           
 11186                           ;OverLoad_B1.c: 232: char i = command == 1 ? 0 : 1;
 11187  11CD  0830               	movf	setLoad_Exceptions@command,w
 11188  11CE  3A01               	xorlw	1
 11189  11CF  3000               	movlw	0
 11190  11D0  1D03               	skipz
 11191  11D1  3001               	movlw	1
 11192  11D2  00AE               	movwf	??_setLoad_Exceptions
 11193  11D3  082E               	movf	??_setLoad_Exceptions,w
 11194  11D4  00AF               	movwf	setLoad_Exceptions@i
 11195                           
 11196                           ;OverLoad_B1.c: 233: Load1.ERROR = command;
 11197  11D5  0830               	movf	setLoad_Exceptions@command,w
 11198  11D6  0023               	movlb	3	; select bank3
 11199  11D7  12A0               	bcf	_Load1^(0+384),5
 11200  11D8  1D03               	skipz
 11201  11D9  16A0               	bsf	_Load1^(0+384),5
 11202                           
 11203                           ;OverLoad_B1.c: 234: Load1.Safe = i;
 11204  11DA  0020               	movlb	0	; select bank0
 11205  11DB  082F               	movf	setLoad_Exceptions@i,w
 11206  11DC  0023               	movlb	3	; select bank3
 11207  11DD  11A0               	bcf	_Load1^(0+384),3
 11208  11DE  1D03               	skipz
 11209  11DF  15A0               	bsf	_Load1^(0+384),3
 11210                           
 11211                           ;OverLoad_B1.c: 235: Load1.ErrorStatus = command;
 11212  11E0  0020               	movlb	0	; select bank0
 11213  11E1  0830               	movf	setLoad_Exceptions@command,w
 11214  11E2  00AE               	movwf	??_setLoad_Exceptions
 11215  11E3  082E               	movf	??_setLoad_Exceptions,w
 11216  11E4  0023               	movlb	3	; select bank3
 11217  11E5  00A5               	movwf	(_Load1^(0+384)+5)
 11218                           
 11219                           ;OverLoad_B1.c: 237: if (command == 1) {
 11220  11E6  0020               	movlb	0	; select bank0
 11221  11E7  0830               	movf	setLoad_Exceptions@command,w
 11222  11E8  3A01               	xorlw	1
 11223  11E9  1D03               	skipz
 11224  11EA  29EF               	goto	l1728
 11225                           
 11226                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 11227  11EB  3002               	movlw	2
 11228  11EC  3193  23D2  3191   	fcall	_DimmerLights_Exceptions
 11229  11EF                     l1728:	
 11230                           
 11231                           ;OverLoad_B1.c: 242: }
 11232                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 11233  11EF  0020               	movlb	0	; select bank0
 11234  11F0  0830               	movf	setLoad_Exceptions@command,w
 11235  11F1  3E0A               	addlw	10
 11236  11F2  00AE               	movwf	??_setLoad_Exceptions
 11237  11F3  082E               	movf	??_setLoad_Exceptions,w
 11238  11F4  00A2               	movwf	setLED@command
 11239  11F5  3063               	movlw	99
 11240  11F6  3196  261F  3191   	fcall	_setLED
 11241                           
 11242                           ;OverLoad_B1.c: 245: setSw_Enable(i);
 11243  11F9  0020               	movlb	0	; select bank0
 11244  11FA  082F               	movf	setLoad_Exceptions@i,w
 11245  11FB  319D  2594  3191   	fcall	_setSw_Enable
 11246                           
 11247                           ;OverLoad_B1.c: 247: setRF_Enable(i);
 11248  11FE  0020               	movlb	0	; select bank0
 11249  11FF  082F               	movf	setLoad_Exceptions@i,w
 11250  1200  319B  2326         	fcall	_setRF_Enable
 11251  1202  0008               	return
 11252  1203                     __end_of_setLoad_Exceptions:	
 11253                           
 11254                           	psect	text58
 11255  1D94                     __ptext58:	
 11256 ;; *************** function _setSw_Enable *****************
 11257 ;; Defined at:
 11258 ;;		line 91 in file "../src/Switch_B1.c"
 11259 ;; Parameters:    Size  Location     Type
 11260 ;;  command         1    wreg     unsigned char 
 11261 ;; Auto vars:     Size  Location     Type
 11262 ;;  command         1    2[BANK0 ] unsigned char 
 11263 ;; Return value:  Size  Location     Type
 11264 ;;		None               void
 11265 ;; Registers used:
 11266 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11267 ;; Tracked objects:
 11268 ;;		On entry : 0/0
 11269 ;;		On exit  : 0/0
 11270 ;;		Unchanged: 0/0
 11271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11273 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11275 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11276 ;;Total ram usage:        1 bytes
 11277 ;; Hardware stack levels used:    1
 11278 ;; Hardware stack levels required when called:    6
 11279 ;; This function calls:
 11280 ;;		_SwPointSelect
 11281 ;; This function is called by:
 11282 ;;		_my_MainTime
 11283 ;;		_setLoad_Exceptions
 11284 ;;		_setOverTemp_Exceptions
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           
 11289                           ;psect for function _setSw_Enable
 11290  1D94                     _setSw_Enable:	
 11291                           
 11292                           ;incstack = 0
 11293                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11294                           ;setSw_Enable@command stored from wreg
 11295  1D94  0020               	movlb	0	; select bank0
 11296  1D95  00A2               	movwf	setSw_Enable@command
 11297                           
 11298                           ;Switch_B1.c: 94: SwPointSelect(1);
 11299  1D96  3001               	movlw	1
 11300  1D97  319C  247B  319D   	fcall	_SwPointSelect
 11301                           
 11302                           ;Switch_B1.c: 95: Sw->Enable = command;
 11303  1D9A  0020               	movlb	0	; select bank0
 11304  1D9B  086C               	movf	_Sw,w
 11305  1D9C  0086               	movwf	6
 11306  1D9D  3001               	movlw	1	; select bank2/3
 11307  1D9E  0087               	movwf	7
 11308  1D9F  0822               	movf	setSw_Enable@command,w
 11309  1DA0  1001               	bcf	1,0
 11310  1DA1  1D03               	skipz
 11311  1DA2  1401               	bsf	1,0
 11312                           
 11313                           ;Switch_B1.c: 99: SwPointSelect(2);
 11314  1DA3  3002               	movlw	2
 11315  1DA4  319C  247B         	fcall	_SwPointSelect
 11316                           
 11317                           ;Switch_B1.c: 100: Sw->Enable = command;
 11318  1DA6  0020               	movlb	0	; select bank0
 11319  1DA7  086C               	movf	_Sw,w
 11320  1DA8  0086               	movwf	6
 11321  1DA9  3001               	movlw	1	; select bank2/3
 11322  1DAA  0087               	movwf	7
 11323  1DAB  0822               	movf	setSw_Enable@command,w
 11324  1DAC  1001               	bcf	1,0
 11325  1DAD  1D03               	skipz
 11326  1DAE  1401               	bsf	1,0
 11327  1DAF  0008               	return
 11328  1DB0                     __end_of_setSw_Enable:	
 11329                           
 11330                           	psect	text59
 11331  1B26                     __ptext59:	
 11332 ;; *************** function _setRF_Enable *****************
 11333 ;; Defined at:
 11334 ;;		line 227 in file "../src/RF_Control_B1.c"
 11335 ;; Parameters:    Size  Location     Type
 11336 ;;  command         1    wreg     unsigned char 
 11337 ;; Auto vars:     Size  Location     Type
 11338 ;;  command         1    0[BANK0 ] unsigned char 
 11339 ;; Return value:  Size  Location     Type
 11340 ;;		None               void
 11341 ;; Registers used:
 11342 ;;		wreg, status,2
 11343 ;; Tracked objects:
 11344 ;;		On entry : 0/0
 11345 ;;		On exit  : 0/0
 11346 ;;		Unchanged: 0/0
 11347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11351 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11352 ;;Total ram usage:        1 bytes
 11353 ;; Hardware stack levels used:    1
 11354 ;; Hardware stack levels required when called:    5
 11355 ;; This function calls:
 11356 ;;		Nothing
 11357 ;; This function is called by:
 11358 ;;		_my_MainTime
 11359 ;;		_setLoad_Exceptions
 11360 ;;		_setOverTemp_Exceptions
 11361 ;; This function uses a non-reentrant model
 11362 ;;
 11363                           
 11364                           
 11365                           ;psect for function _setRF_Enable
 11366  1B26                     _setRF_Enable:	
 11367                           
 11368                           ;incstack = 0
 11369                           ; Regs used in _setRF_Enable: [wreg+status,2]
 11370                           ;setRF_Enable@command stored from wreg
 11371  1B26  0020               	movlb	0	; select bank0
 11372  1B27  00A0               	movwf	setRF_Enable@command
 11373                           
 11374                           ;RF_Control_B1.c: 228: RF1.Enable = command;
 11375  1B28  0820               	movf	setRF_Enable@command,w
 11376  1B29  0021               	movlb	1	; select bank1
 11377  1B2A  103F               	bcf	_RF1^(0+128),0
 11378  1B2B  1D03               	skipz
 11379  1B2C  143F               	bsf	_RF1^(0+128),0
 11380                           
 11381                           ;RF_Control_B1.c: 229: RF1.Learn = 0;
 11382  1B2D  133F               	bcf	_RF1^(0+128),6
 11383                           
 11384                           ;RF_Control_B1.c: 230: RF1.TransceiveGO = 0;
 11385  1B2E  113F               	bcf	_RF1^(0+128),2
 11386                           
 11387                           ;RF_Control_B1.c: 231: RF1.RxStatus = 0;
 11388  1B2F  11BF               	bcf	_RF1^(0+128),3
 11389                           
 11390                           ;RF_Control_B1.c: 232: RF1.ReceiveGO = 0;
 11391  1B30  10BF               	bcf	_RF1^(0+128),1
 11392                           
 11393                           ;RF_Control_B1.c: 233: RF1.DebounceTime = 0;
 11394  1B31  01C8               	clrf	(_RF1^(0+128)+9)
 11395                           
 11396                           ;RF_Control_B1.c: 234: RF1.Debounce = 0;
 11397  1B32  12BF               	bcf	_RF1^(0+128),5
 11398  1B33  0008               	return
 11399  1B34                     __end_of_setRF_Enable:	
 11400                           
 11401                           	psect	text60
 11402  13D2                     __ptext60:	
 11403 ;; *************** function _DimmerLights_Exceptions *****************
 11404 ;; Defined at:
 11405 ;;		line 522 in file "../src/Dimmer_B1.c"
 11406 ;; Parameters:    Size  Location     Type
 11407 ;;  status          1    wreg     unsigned char 
 11408 ;; Auto vars:     Size  Location     Type
 11409 ;;  status          1   13[BANK0 ] unsigned char 
 11410 ;; Return value:  Size  Location     Type
 11411 ;;		None               void
 11412 ;; Registers used:
 11413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11414 ;; Tracked objects:
 11415 ;;		On entry : 0/0
 11416 ;;		On exit  : 0/0
 11417 ;;		Unchanged: 0/0
 11418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11422 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11423 ;;Total ram usage:        1 bytes
 11424 ;; Hardware stack levels used:    1
 11425 ;; Hardware stack levels required when called:    8
 11426 ;; This function calls:
 11427 ;;		_getDimmerLights_StatusFlag
 11428 ;;		_setBuz
 11429 ;;		_setDimmerLights_ERROR
 11430 ;;		_setDimmerLights_TriggerERROR
 11431 ;; This function is called by:
 11432 ;;		_setLoad_Exceptions
 11433 ;;		_setOverTemp_Exceptions
 11434 ;; This function uses a non-reentrant model
 11435 ;;
 11436                           
 11437                           
 11438                           ;psect for function _DimmerLights_Exceptions
 11439  13D2                     _DimmerLights_Exceptions:	
 11440                           
 11441                           ;incstack = 0
 11442                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11443                           ;DimmerLights_Exceptions@status stored from wreg
 11444  13D2  0020               	movlb	0	; select bank0
 11445  13D3  00AD               	movwf	DimmerLights_Exceptions@status
 11446                           
 11447                           ;Dimmer_B1.c: 523: if (status == 1) {
 11448  13D4  082D               	movf	DimmerLights_Exceptions@status,w
 11449  13D5  3A01               	xorlw	1
 11450  13D6  1D03               	skipz
 11451  13D7  2BE8               	goto	l9113
 11452                           
 11453                           ;Dimmer_B1.c: 524: if (getDimmerLights_StatusFlag() == 1) {
 11454  13D8  319B  23B1  3193   	fcall	_getDimmerLights_StatusFlag
 11455  13DB  3A01               	xorlw	1
 11456  13DC  1D03               	skipz
 11457  13DD  2C00               	goto	l9121
 11458                           
 11459                           ;Dimmer_B1.c: 525: setBuz(10, 300);
 11460  13DE  302C               	movlw	44
 11461  13DF  0020               	movlb	0	; select bank0
 11462  13E0  00A9               	movwf	setBuz@time
 11463  13E1  3001               	movlw	1
 11464  13E2  00AA               	movwf	setBuz@time+1
 11465  13E3  300A               	movlw	10
 11466  13E4  3195  256B  3193   	fcall	_setBuz
 11467  13E7  2C00               	goto	l9121
 11468  13E8                     l9113:	
 11469                           ;Dimmer_B1.c: 537: } else if (status == 2)
 11470                           
 11471                           ;Dimmer_B1.c: 532: setDimmerLights_ERROR(2);
 11472                           
 11473                           ;Dimmer_B1.c: 526: }
 11474                           ;Dimmer_B1.c: 529: setDimmerLights_ERROR(1);
 11475                           
 11476  13E8  0020               	movlb	0	; select bank0
 11477  13E9  082D               	movf	DimmerLights_Exceptions@status,w
 11478  13EA  3A02               	xorlw	2
 11479  13EB  1D03               	skipz
 11480  13EC  2BFB               	goto	l9119
 11481                           
 11482                           ;Dimmer_B1.c: 538: {
 11483                           ;Dimmer_B1.c: 539: setBuz(5, 300);
 11484  13ED  302C               	movlw	44
 11485  13EE  00A9               	movwf	setBuz@time
 11486  13EF  3001               	movlw	1
 11487  13F0  00AA               	movwf	setBuz@time+1
 11488  13F1  3005               	movlw	5
 11489  13F2  3195  256B  3193   	fcall	_setBuz
 11490                           
 11491                           ;Dimmer_B1.c: 540: setDimmerLights_ERROR(Dimmer->Load);
 11492  13F5  0A76               	incf	_Dimmer,w
 11493  13F6  0086               	movwf	6
 11494  13F7  3001               	movlw	1	; select bank2/3
 11495  13F8  0087               	movwf	7
 11496  13F9  0801               	movf	1,w
 11497  13FA  2C05               	goto	L7
 11498  13FB                     l9119:	
 11499                           ;Dimmer_B1.c: 541: } else if (status == 3)
 11500                           
 11501  13FB  0020               	movlb	0	; select bank0
 11502  13FC  082D               	movf	DimmerLights_Exceptions@status,w
 11503  13FD  3A03               	xorlw	3
 11504  13FE  1D03               	skipz
 11505  13FF  2C08               	goto	l870
 11506  1400                     l9121:	
 11507                           
 11508                           ;Dimmer_B1.c: 542: {
 11509                           ;Dimmer_B1.c: 544: setDimmerLights_ERROR(1);
 11510  1400  3001               	movlw	1
 11511  1401  3194  24BD  3193   	fcall	_setDimmerLights_ERROR
 11512                           
 11513                           ;Dimmer_B1.c: 547: setDimmerLights_ERROR(2);
 11514  1404  3002               	movlw	2
 11515  1405                     L7:	
 11516  1405  3194  24BD  3193   	fcall	_setDimmerLights_ERROR
 11517  1408                     l870:	
 11518                           
 11519                           ;Dimmer_B1.c: 552: }
 11520                           ;Dimmer_B1.c: 555: setDimmerLights_TriggerERROR(1, 0);
 11521  1408  0020               	movlb	0	; select bank0
 11522  1409  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11523  140A  3001               	movlw	1
 11524  140B  319F  27D5  3193   	fcall	_setDimmerLights_TriggerERROR
 11525                           
 11526                           ;Dimmer_B1.c: 558: setDimmerLights_TriggerERROR(2, 0);
 11527  140E  0020               	movlb	0	; select bank0
 11528  140F  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11529  1410  3002               	movlw	2
 11530  1411  319F  27D5  3193   	fcall	_setDimmerLights_TriggerERROR
 11531                           
 11532                           ;Dimmer_B1.c: 564: if (myMain.SelfTest == 0) {
 11533  1414  0021               	movlb	1	; select bank1
 11534  1415  1BA0               	btfsc	_myMain^(0+128),7
 11535  1416  0008               	return
 11536                           
 11537                           ;Dimmer_B1.c: 565: myMain.i = 0;
 11538  1417  102F               	bcf	(_myMain^(0+128)+15),0
 11539                           
 11540                           ;Dimmer_B1.c: 566: myMain.j = 0;
 11541  1418  10AF               	bcf	(_myMain^(0+128)+15),1
 11542                           
 11543                           ;Dimmer_B1.c: 567: myMain.k = 1;
 11544  1419  152F               	bsf	(_myMain^(0+128)+15),2
 11545                           
 11546                           ;Dimmer_B1.c: 568: myMain.Count2 = 0;
 11547  141A  01A8               	clrf	(_myMain^(0+128)+8)
 11548  141B  01A9               	clrf	((_myMain+1)^(0+128)+8)
 11549  141C  0008               	return
 11550  141D                     __end_of_DimmerLights_Exceptions:	
 11551                           
 11552                           	psect	text61
 11553  1FD5                     __ptext61:	
 11554 ;; *************** function _setDimmerLights_TriggerERROR *****************
 11555 ;; Defined at:
 11556 ;;		line 591 in file "../src/Dimmer_B1.c"
 11557 ;; Parameters:    Size  Location     Type
 11558 ;;  lights          1    wreg     unsigned char 
 11559 ;;  command         1    2[BANK0 ] unsigned char 
 11560 ;; Auto vars:     Size  Location     Type
 11561 ;;  lights          1    3[BANK0 ] unsigned char 
 11562 ;; Return value:  Size  Location     Type
 11563 ;;		None               void
 11564 ;; Registers used:
 11565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11566 ;; Tracked objects:
 11567 ;;		On entry : 0/0
 11568 ;;		On exit  : 0/0
 11569 ;;		Unchanged: 0/0
 11570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11571 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;Total ram usage:        2 bytes
 11576 ;; Hardware stack levels used:    1
 11577 ;; Hardware stack levels required when called:    6
 11578 ;; This function calls:
 11579 ;;		_DimmerLightsPointSelect
 11580 ;; This function is called by:
 11581 ;;		_DimmerLights_Exceptions
 11582 ;; This function uses a non-reentrant model
 11583 ;;
 11584                           
 11585                           
 11586                           ;psect for function _setDimmerLights_TriggerERROR
 11587  1FD5                     _setDimmerLights_TriggerERROR:	
 11588                           
 11589                           ;incstack = 0
 11590                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11591                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 11592  1FD5  0020               	movlb	0	; select bank0
 11593  1FD6  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 11594                           
 11595                           ;Dimmer_B1.c: 593: DimmerLightsPointSelect(lights);
 11596  1FD7  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 11597  1FD8  319C  242C         	fcall	_DimmerLightsPointSelect
 11598                           
 11599                           ;Dimmer_B1.c: 594: DimmerLights->Trigger = command;
 11600  1FDA  0020               	movlb	0	; select bank0
 11601  1FDB  086B               	movf	_DimmerLights,w
 11602  1FDC  3E08               	addlw	8
 11603  1FDD  0086               	movwf	6
 11604  1FDE  3001               	movlw	1	; select bank2/3
 11605  1FDF  0087               	movwf	7
 11606  1FE0  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11607  1FE1  1101               	bcf	1,2
 11608  1FE2  1D03               	skipz
 11609  1FE3  1501               	bsf	1,2
 11610                           
 11611                           ;Dimmer_B1.c: 595: DimmerLights->Switch = command;
 11612  1FE4  086B               	movf	_DimmerLights,w
 11613  1FE5  3E08               	addlw	8
 11614  1FE6  0086               	movwf	6
 11615  1FE7  3001               	movlw	1	; select bank2/3
 11616  1FE8  0087               	movwf	7
 11617  1FE9  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11618  1FEA  1081               	bcf	1,1
 11619  1FEB  1D03               	skipz
 11620  1FEC  1481               	bsf	1,1
 11621                           
 11622                           ;Dimmer_B1.c: 596: DimmerLights->TriggerAdj = command;
 11623  1FED  086B               	movf	_DimmerLights,w
 11624  1FEE  3E08               	addlw	8
 11625  1FEF  0086               	movwf	6
 11626  1FF0  3001               	movlw	1	; select bank2/3
 11627  1FF1  0087               	movwf	7
 11628  1FF2  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11629  1FF3  1201               	bcf	1,4
 11630  1FF4  1D03               	skipz
 11631  1FF5  1601               	bsf	1,4
 11632                           
 11633                           ;Dimmer_B1.c: 597: DimmerLights->AdjGo = command;
 11634  1FF6  086B               	movf	_DimmerLights,w
 11635  1FF7  3E08               	addlw	8
 11636  1FF8  0086               	movwf	6
 11637  1FF9  3001               	movlw	1	; select bank2/3
 11638  1FFA  0087               	movwf	7
 11639  1FFB  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11640  1FFC  1181               	bcf	1,3
 11641  1FFD  1D03               	skipz
 11642  1FFE  1581               	bsf	1,3
 11643  1FFF  0008               	return
 11644  2000                     __end_of_setDimmerLights_TriggerERROR:	
 11645                           
 11646                           	psect	text62
 11647  14BD                     __ptext62:	
 11648 ;; *************** function _setDimmerLights_ERROR *****************
 11649 ;; Defined at:
 11650 ;;		line 573 in file "../src/Dimmer_B1.c"
 11651 ;; Parameters:    Size  Location     Type
 11652 ;;  lights          1    wreg     unsigned char 
 11653 ;; Auto vars:     Size  Location     Type
 11654 ;;  lights          1    5[BANK0 ] unsigned char 
 11655 ;; Return value:  Size  Location     Type
 11656 ;;		None               void
 11657 ;; Registers used:
 11658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11659 ;; Tracked objects:
 11660 ;;		On entry : 0/0
 11661 ;;		On exit  : 0/0
 11662 ;;		Unchanged: 0/0
 11663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;Total ram usage:        2 bytes
 11669 ;; Hardware stack levels used:    1
 11670 ;; Hardware stack levels required when called:    7
 11671 ;; This function calls:
 11672 ;;		_DimmerLightsPointSelect
 11673 ;;		_setLED
 11674 ;;		_setLoad_StatusOff
 11675 ;;		_setRFSW_Status
 11676 ;;		_setSw_Status
 11677 ;; This function is called by:
 11678 ;;		_DimmerLights_Exceptions
 11679 ;; This function uses a non-reentrant model
 11680 ;;
 11681                           
 11682                           
 11683                           ;psect for function _setDimmerLights_ERROR
 11684  14BD                     _setDimmerLights_ERROR:	
 11685                           
 11686                           ;incstack = 0
 11687                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11688                           ;setDimmerLights_ERROR@lights stored from wreg
 11689  14BD  0020               	movlb	0	; select bank0
 11690  14BE  00A5               	movwf	setDimmerLights_ERROR@lights
 11691                           
 11692                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(lights);
 11693  14BF  0825               	movf	setDimmerLights_ERROR@lights,w
 11694  14C0  319C  242C  3194   	fcall	_DimmerLightsPointSelect
 11695                           
 11696                           ;Dimmer_B1.c: 575: if (DimmerLights->Status == 1) {
 11697  14C3  0020               	movlb	0	; select bank0
 11698  14C4  086B               	movf	_DimmerLights,w
 11699  14C5  0086               	movwf	6
 11700  14C6  3001               	movlw	1	; select bank2/3
 11701  14C7  0087               	movwf	7
 11702  14C8  1E81               	btfss	1,5
 11703  14C9  0008               	return
 11704                           
 11705                           ;Dimmer_B1.c: 577: DimmerLights->Signal = 0;
 11706  14CA  086B               	movf	_DimmerLights,w
 11707  14CB  0086               	movwf	6
 11708  14CC  3001               	movlw	1	; select bank2/3
 11709  14CD  0087               	movwf	7
 11710  14CE  1081               	bcf	1,1
 11711                           
 11712                           ;Dimmer_B1.c: 578: DimmerLights->AdjFlag = 0;
 11713  14CF  086B               	movf	_DimmerLights,w
 11714  14D0  0086               	movwf	6
 11715  14D1  3001               	movlw	1	; select bank2/3
 11716  14D2  0087               	movwf	7
 11717  14D3  1181               	bcf	1,3
 11718                           
 11719                           ;Dimmer_B1.c: 579: DimmerLights->AdjStatus = 0;
 11720  14D4  086B               	movf	_DimmerLights,w
 11721  14D5  0086               	movwf	6
 11722  14D6  3001               	movlw	1	; select bank2/3
 11723  14D7  0087               	movwf	7
 11724  14D8  1201               	bcf	1,4
 11725                           
 11726                           ;Dimmer_B1.c: 580: DimmerLights->StatusFlag = 0;
 11727  14D9  086B               	movf	_DimmerLights,w
 11728  14DA  0086               	movwf	6
 11729  14DB  3001               	movlw	1	; select bank2/3
 11730  14DC  0087               	movwf	7
 11731  14DD  1301               	bcf	1,6
 11732                           
 11733                           ;Dimmer_B1.c: 581: DimmerLights->DimmingTimeValue = 7;
 11734  14DE  3007               	movlw	7
 11735  14DF  00A4               	movwf	??_setDimmerLights_ERROR
 11736  14E0  086B               	movf	_DimmerLights,w
 11737  14E1  3E02               	addlw	2
 11738  14E2  0086               	movwf	6
 11739  14E3  3001               	movlw	1	; select bank2/3
 11740  14E4  0087               	movwf	7
 11741  14E5  0824               	movf	??_setDimmerLights_ERROR,w
 11742  14E6  0081               	movwf	1
 11743                           
 11744                           ;Dimmer_B1.c: 582: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11745  14E7  086B               	movf	_DimmerLights,w
 11746  14E8  3E06               	addlw	6
 11747  14E9  0086               	movwf	6
 11748  14EA  3001               	movlw	1	; select bank2/3
 11749  14EB  0087               	movwf	7
 11750  14EC  0801               	movf	1,w
 11751  14ED  00A4               	movwf	??_setDimmerLights_ERROR
 11752  14EE  086B               	movf	_DimmerLights,w
 11753  14EF  3E04               	addlw	4
 11754  14F0  0086               	movwf	6
 11755  14F1  3001               	movlw	1	; select bank2/3
 11756  14F2  0087               	movwf	7
 11757  14F3  0824               	movf	??_setDimmerLights_ERROR,w
 11758  14F4  0081               	movwf	1
 11759                           
 11760                           ;Dimmer_B1.c: 583: Dimmer->Detect = 1;
 11761  14F5  0876               	movf	_Dimmer,w
 11762  14F6  0086               	movwf	6
 11763  14F7  3001               	movlw	1	; select bank2/3
 11764  14F8  0087               	movwf	7
 11765  14F9  1401               	bsf	1,0
 11766                           
 11767                           ;Dimmer_B1.c: 584: setLoad_StatusOff(lights, 1);
 11768  14FA  01A0               	clrf	setLoad_StatusOff@command
 11769  14FB  0AA0               	incf	setLoad_StatusOff@command,f
 11770  14FC  0825               	movf	setDimmerLights_ERROR@lights,w
 11771  14FD  319E  260A  3194   	fcall	_setLoad_StatusOff
 11772                           
 11773                           ;Dimmer_B1.c: 585: setLED(lights, 1);
 11774  1500  0020               	movlb	0	; select bank0
 11775  1501  01A2               	clrf	setLED@command
 11776  1502  0AA2               	incf	setLED@command,f
 11777  1503  0825               	movf	setDimmerLights_ERROR@lights,w
 11778  1504  3196  261F  3194   	fcall	_setLED
 11779                           
 11780                           ;Dimmer_B1.c: 586: setSw_Status(lights, 0);
 11781  1507  0020               	movlb	0	; select bank0
 11782  1508  01A2               	clrf	setSw_Status@command
 11783  1509  0825               	movf	setDimmerLights_ERROR@lights,w
 11784  150A  319B  2334  3194   	fcall	_setSw_Status
 11785                           
 11786                           ;Dimmer_B1.c: 587: setRFSW_Status(lights, 0);
 11787  150D  0020               	movlb	0	; select bank0
 11788  150E  01A2               	clrf	setRFSW_Status@command
 11789  150F  0825               	movf	setDimmerLights_ERROR@lights,w
 11790  1510  319B  230A         	fcall	_setRFSW_Status
 11791  1512  0008               	return
 11792  1513                     __end_of_setDimmerLights_ERROR:	
 11793                           
 11794                           	psect	text63
 11795  1B81                     __ptext63:	
 11796 ;; *************** function _setDimmerLights_Clear *****************
 11797 ;; Defined at:
 11798 ;;		line 726 in file "../src/Dimmer_B1.c"
 11799 ;; Parameters:    Size  Location     Type
 11800 ;;  lights          1    wreg     unsigned char 
 11801 ;;  command         1    2[BANK0 ] unsigned char 
 11802 ;; Auto vars:     Size  Location     Type
 11803 ;;  lights          1    3[BANK0 ] unsigned char 
 11804 ;; Return value:  Size  Location     Type
 11805 ;;		None               void
 11806 ;; Registers used:
 11807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11808 ;; Tracked objects:
 11809 ;;		On entry : 0/0
 11810 ;;		On exit  : 0/0
 11811 ;;		Unchanged: 0/0
 11812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11813 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11816 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;Total ram usage:        2 bytes
 11818 ;; Hardware stack levels used:    1
 11819 ;; Hardware stack levels required when called:    6
 11820 ;; This function calls:
 11821 ;;		_DimmerLightsPointSelect
 11822 ;; This function is called by:
 11823 ;;		_Load_Main
 11824 ;; This function uses a non-reentrant model
 11825 ;;
 11826                           
 11827                           
 11828                           ;psect for function _setDimmerLights_Clear
 11829  1B81                     _setDimmerLights_Clear:	
 11830                           
 11831                           ;incstack = 0
 11832                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11833                           ;setDimmerLights_Clear@lights stored from wreg
 11834  1B81  0020               	movlb	0	; select bank0
 11835  1B82  00A3               	movwf	setDimmerLights_Clear@lights
 11836                           
 11837                           ;Dimmer_B1.c: 728: DimmerLightsPointSelect(lights);
 11838  1B83  0823               	movf	setDimmerLights_Clear@lights,w
 11839  1B84  319C  242C         	fcall	_DimmerLightsPointSelect
 11840                           
 11841                           ;Dimmer_B1.c: 729: DimmerLights->Clear = command;
 11842  1B86  0020               	movlb	0	; select bank0
 11843  1B87  086B               	movf	_DimmerLights,w
 11844  1B88  3E09               	addlw	9
 11845  1B89  0086               	movwf	6
 11846  1B8A  3001               	movlw	1	; select bank2/3
 11847  1B8B  0087               	movwf	7
 11848  1B8C  0822               	movf	setDimmerLights_Clear@command,w
 11849  1B8D  1101               	bcf	1,2
 11850  1B8E  1D03               	skipz
 11851  1B8F  1501               	bsf	1,2
 11852  1B90  0008               	return
 11853  1B91                     __end_of_setDimmerLights_Clear:	
 11854                           
 11855                           	psect	text64
 11856  1A39                     __ptext64:	
 11857 ;; *************** function _getTemp_Safe *****************
 11858 ;; Defined at:
 11859 ;;		line 21 in file "../src/OverTemperature_B1.c"
 11860 ;; Parameters:    Size  Location     Type
 11861 ;;		None
 11862 ;; Auto vars:     Size  Location     Type
 11863 ;;  result          1    0[BANK0 ] unsigned char 
 11864 ;; Return value:  Size  Location     Type
 11865 ;;                  1    wreg      unsigned char 
 11866 ;; Registers used:
 11867 ;;		wreg, status,2
 11868 ;; Tracked objects:
 11869 ;;		On entry : 0/0
 11870 ;;		On exit  : 0/0
 11871 ;;		Unchanged: 0/0
 11872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;Total ram usage:        1 bytes
 11878 ;; Hardware stack levels used:    1
 11879 ;; Hardware stack levels required when called:    5
 11880 ;; This function calls:
 11881 ;;		Nothing
 11882 ;; This function is called by:
 11883 ;;		_Load_Main
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           
 11888                           ;psect for function _getTemp_Safe
 11889  1A39                     _getTemp_Safe:	
 11890                           
 11891                           ;OverTemperature_B1.c: 22: char result = Temp.Safe;
 11892                           
 11893                           ;incstack = 0
 11894                           ; Regs used in _getTemp_Safe: [wreg+status,2]
 11895  1A39  3000               	movlw	0
 11896  1A3A  0021               	movlb	1	; select bank1
 11897  1A3B  1A5C               	btfsc	_Temp^(0+128),4
 11898  1A3C  3001               	movlw	1
 11899  1A3D  0020               	movlb	0	; select bank0
 11900  1A3E  00A0               	movwf	getTemp_Safe@result
 11901                           
 11902                           ;OverTemperature_B1.c: 23: return result;
 11903  1A3F  0820               	movf	getTemp_Safe@result,w
 11904  1A40  0008               	return
 11905  1A41                     __end_of_getTemp_Safe:	
 11906                           
 11907                           	psect	text65
 11908  1DCD                     __ptext65:	
 11909 ;; *************** function ___wmul *****************
 11910 ;; Defined at:
 11911 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11912 ;; Parameters:    Size  Location     Type
 11913 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11914 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11915 ;; Auto vars:     Size  Location     Type
 11916 ;;  product         2    4[BANK0 ] unsigned int 
 11917 ;; Return value:  Size  Location     Type
 11918 ;;                  2    0[BANK0 ] unsigned int 
 11919 ;; Registers used:
 11920 ;;		wreg, status,2, status,0
 11921 ;; Tracked objects:
 11922 ;;		On entry : 0/0
 11923 ;;		On exit  : 0/0
 11924 ;;		Unchanged: 0/0
 11925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11926 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11930 ;;Total ram usage:        6 bytes
 11931 ;; Hardware stack levels used:    1
 11932 ;; Hardware stack levels required when called:    5
 11933 ;; This function calls:
 11934 ;;		Nothing
 11935 ;; This function is called by:
 11936 ;;		_Load_Main
 11937 ;; This function uses a non-reentrant model
 11938 ;;
 11939                           
 11940                           
 11941                           ;psect for function ___wmul
 11942  1DCD                     ___wmul:	
 11943                           
 11944                           ;incstack = 0
 11945                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11946  1DCD  0020               	movlb	0	; select bank0
 11947  1DCE  01A4               	clrf	___wmul@product
 11948  1DCF  01A5               	clrf	___wmul@product+1
 11949  1DD0                     l10181:	
 11950  1DD0  1C20               	btfss	___wmul@multiplier,0
 11951  1DD1  2DD6               	goto	l2876
 11952  1DD2  0822               	movf	___wmul@multiplicand,w
 11953  1DD3  07A4               	addwf	___wmul@product,f
 11954  1DD4  0823               	movf	___wmul@multiplicand+1,w
 11955  1DD5  3DA5               	addwfc	___wmul@product+1,f
 11956  1DD6                     l2876:	
 11957  1DD6  3001               	movlw	1
 11958  1DD7                     u10905:	
 11959  1DD7  35A2               	lslf	___wmul@multiplicand,f
 11960  1DD8  0DA3               	rlf	___wmul@multiplicand+1,f
 11961  1DD9  0B89               	decfsz	9,f
 11962  1DDA  2DD7               	goto	u10905
 11963  1DDB  3001               	movlw	1
 11964  1DDC                     u10915:	
 11965  1DDC  36A1               	lsrf	___wmul@multiplier+1,f
 11966  1DDD  0CA0               	rrf	___wmul@multiplier,f
 11967  1DDE  0B89               	decfsz	9,f
 11968  1DDF  2DDC               	goto	u10915
 11969  1DE0  0821               	movf	___wmul@multiplier+1,w
 11970  1DE1  0420               	iorwf	___wmul@multiplier,w
 11971  1DE2  1D03               	skipz
 11972  1DE3  2DD0               	goto	l10181
 11973  1DE4  0825               	movf	___wmul@product+1,w
 11974  1DE5  01A1               	clrf	?___wmul+1
 11975  1DE6  07A1               	addwf	?___wmul+1,f
 11976  1DE7  0824               	movf	___wmul@product,w
 11977  1DE8  01A0               	clrf	?___wmul
 11978  1DE9  07A0               	addwf	?___wmul,f
 11979  1DEA  0008               	return
 11980  1DEB                     __end_of___wmul:	
 11981                           
 11982                           	psect	text66
 11983  1194                     __ptext66:	
 11984 ;; *************** function ___lwdiv *****************
 11985 ;; Defined at:
 11986 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11987 ;; Parameters:    Size  Location     Type
 11988 ;;  divisor         2    0[BANK0 ] unsigned int 
 11989 ;;  dividend        2    2[BANK0 ] unsigned int 
 11990 ;; Auto vars:     Size  Location     Type
 11991 ;;  quotient        2    6[BANK0 ] unsigned int 
 11992 ;;  counter         1    5[BANK0 ] unsigned char 
 11993 ;; Return value:  Size  Location     Type
 11994 ;;                  2    0[BANK0 ] unsigned int 
 11995 ;; Registers used:
 11996 ;;		wreg, status,2, status,0
 11997 ;; Tracked objects:
 11998 ;;		On entry : 0/0
 11999 ;;		On exit  : 0/0
 12000 ;;		Unchanged: 0/0
 12001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12002 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12003 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12004 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12005 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;Total ram usage:        8 bytes
 12007 ;; Hardware stack levels used:    1
 12008 ;; Hardware stack levels required when called:    5
 12009 ;; This function calls:
 12010 ;;		Nothing
 12011 ;; This function is called by:
 12012 ;;		_Load_Main
 12013 ;; This function uses a non-reentrant model
 12014 ;;
 12015                           
 12016                           
 12017                           ;psect for function ___lwdiv
 12018  1194                     ___lwdiv:	
 12019                           
 12020                           ;incstack = 0
 12021                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12022  1194  0020               	movlb	0	; select bank0
 12023  1195  01A6               	clrf	___lwdiv@quotient
 12024  1196  01A7               	clrf	___lwdiv@quotient+1
 12025  1197  0821               	movf	___lwdiv@divisor+1,w
 12026  1198  0420               	iorwf	___lwdiv@divisor,w
 12027  1199  1903               	skipnz
 12028  119A  29C4               	goto	l10213
 12029  119B  01A5               	clrf	___lwdiv@counter
 12030  119C  0AA5               	incf	___lwdiv@counter,f
 12031  119D                     l10201:	
 12032  119D  1BA1               	btfsc	___lwdiv@divisor+1,7
 12033  119E  29A9               	goto	l10203
 12034  119F  3001               	movlw	1
 12035  11A0                     u10945:	
 12036  11A0  35A0               	lslf	___lwdiv@divisor,f
 12037  11A1  0DA1               	rlf	___lwdiv@divisor+1,f
 12038  11A2  0B89               	decfsz	9,f
 12039  11A3  29A0               	goto	u10945
 12040  11A4  3001               	movlw	1
 12041  11A5  00A4               	movwf	??___lwdiv
 12042  11A6  0824               	movf	??___lwdiv,w
 12043  11A7  07A5               	addwf	___lwdiv@counter,f
 12044  11A8  299D               	goto	l10201
 12045  11A9                     l10203:	
 12046  11A9  3001               	movlw	1
 12047  11AA                     u10965:	
 12048  11AA  35A6               	lslf	___lwdiv@quotient,f
 12049  11AB  0DA7               	rlf	___lwdiv@quotient+1,f
 12050  11AC  0B89               	decfsz	9,f
 12051  11AD  29AA               	goto	u10965
 12052  11AE  0821               	movf	___lwdiv@divisor+1,w
 12053  11AF  0223               	subwf	___lwdiv@dividend+1,w
 12054  11B0  1D03               	skipz
 12055  11B1  29B4               	goto	u10975
 12056  11B2  0820               	movf	___lwdiv@divisor,w
 12057  11B3  0222               	subwf	___lwdiv@dividend,w
 12058  11B4                     u10975:	
 12059  11B4  1C03               	skipc
 12060  11B5  29BB               	goto	l10209
 12061  11B6  0820               	movf	___lwdiv@divisor,w
 12062  11B7  02A2               	subwf	___lwdiv@dividend,f
 12063  11B8  0821               	movf	___lwdiv@divisor+1,w
 12064  11B9  3BA3               	subwfb	___lwdiv@dividend+1,f
 12065  11BA  1426               	bsf	___lwdiv@quotient,0
 12066  11BB                     l10209:	
 12067  11BB  3001               	movlw	1
 12068  11BC                     u10985:	
 12069  11BC  36A1               	lsrf	___lwdiv@divisor+1,f
 12070  11BD  0CA0               	rrf	___lwdiv@divisor,f
 12071  11BE  0B89               	decfsz	9,f
 12072  11BF  29BC               	goto	u10985
 12073  11C0  3001               	movlw	1
 12074  11C1  02A5               	subwf	___lwdiv@counter,f
 12075  11C2  1D03               	btfss	3,2
 12076  11C3  29A9               	goto	l10203
 12077  11C4                     l10213:	
 12078  11C4  0827               	movf	___lwdiv@quotient+1,w
 12079  11C5  01A1               	clrf	?___lwdiv+1
 12080  11C6  07A1               	addwf	?___lwdiv+1,f
 12081  11C7  0826               	movf	___lwdiv@quotient,w
 12082  11C8  01A0               	clrf	?___lwdiv
 12083  11C9  07A0               	addwf	?___lwdiv,f
 12084  11CA  0008               	return
 12085  11CB                     __end_of___lwdiv:	
 12086                           
 12087                           	psect	text67
 12088  1066                     __ptext67:	
 12089 ;; *************** function _Load_Initialization *****************
 12090 ;; Defined at:
 12091 ;;		line 9 in file "../src/OverLoad_B1.c"
 12092 ;; Parameters:    Size  Location     Type
 12093 ;;		None
 12094 ;; Auto vars:     Size  Location     Type
 12095 ;;		None
 12096 ;; Return value:  Size  Location     Type
 12097 ;;		None               void
 12098 ;; Registers used:
 12099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12100 ;; Tracked objects:
 12101 ;;		On entry : 0/0
 12102 ;;		On exit  : 0/0
 12103 ;;		Unchanged: 0/0
 12104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12109 ;;Total ram usage:        0 bytes
 12110 ;; Hardware stack levels used:    1
 12111 ;; Hardware stack levels required when called:    6
 12112 ;; This function calls:
 12113 ;;		_setLoad_AH_AL_Restore
 12114 ;; This function is called by:
 12115 ;;		_main
 12116 ;; This function uses a non-reentrant model
 12117 ;;
 12118                           
 12119                           
 12120                           ;psect for function _Load_Initialization
 12121  1066                     _Load_Initialization:	
 12122                           
 12123                           ;OverLoad_B1.c: 10: Load1.Safe = 1;
 12124                           
 12125                           ;incstack = 0
 12126                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12127  1066  0023               	movlb	3	; select bank3
 12128  1067  15A0               	bsf	_Load1^(0+384),3
 12129                           
 12130                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12131  1068  319D  2578         	fcall	_setLoad_AH_AL_Restore
 12132  106A  0008               	return
 12133  106B                     __end_of_Load_Initialization:	
 12134                           
 12135                           	psect	text68
 12136  1D78                     __ptext68:	
 12137 ;; *************** function _setLoad_AH_AL_Restore *****************
 12138 ;; Defined at:
 12139 ;;		line 307 in file "../src/OverLoad_B1.c"
 12140 ;; Parameters:    Size  Location     Type
 12141 ;;		None
 12142 ;; Auto vars:     Size  Location     Type
 12143 ;;  i               1    1[BANK0 ] unsigned char 
 12144 ;; Return value:  Size  Location     Type
 12145 ;;		None               void
 12146 ;; Registers used:
 12147 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12148 ;; Tracked objects:
 12149 ;;		On entry : 0/0
 12150 ;;		On exit  : 0/0
 12151 ;;		Unchanged: 0/0
 12152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;Total ram usage:        2 bytes
 12158 ;; Hardware stack levels used:    1
 12159 ;; Hardware stack levels required when called:    5
 12160 ;; This function calls:
 12161 ;;		Nothing
 12162 ;; This function is called by:
 12163 ;;		_Load_Initialization
 12164 ;;		_Load_Main
 12165 ;; This function uses a non-reentrant model
 12166 ;;
 12167                           
 12168                           
 12169                           ;psect for function _setLoad_AH_AL_Restore
 12170  1D78                     _setLoad_AH_AL_Restore:	
 12171                           
 12172                           ;OverLoad_B1.c: 308: char i;
 12173                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 12174                           
 12175                           ;incstack = 0
 12176                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12177  1D78  0020               	movlb	0	; select bank0
 12178  1D79  01A1               	clrf	setLoad_AH_AL_Restore@i
 12179  1D7A                     L8:	
 12180  1D7A  3005               	movlw	5
 12181  1D7B  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12182  1D7C  1803               	btfsc	3,0
 12183  1D7D  0008               	return
 12184                           
 12185                           ;OverLoad_B1.c: 310: Load1.AH[i] = 0;
 12186  1D7E  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12187  1D7F  3EA8               	addlw	(_Load1+8)& (0+255)
 12188  1D80  0086               	movwf	6
 12189  1D81  3001               	movlw	1	; select bank3/4
 12190  1D82  0087               	movwf	7
 12191  1D83  3000               	movlw	0
 12192  1D84  3FC0               	movwi [0]fsr1
 12193  1D85  3FC1               	movwi [1]fsr1
 12194                           
 12195                           ;OverLoad_B1.c: 311: Load1.AL[i] = 0xffff;
 12196  1D86  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12197  1D87  3EBA               	addlw	(_Load1+26)& (0+255)
 12198  1D88  0086               	movwf	6
 12199  1D89  3001               	movlw	1	; select bank3/4
 12200  1D8A  0087               	movwf	7
 12201  1D8B  30FF               	movlw	255
 12202  1D8C  3FC0               	movwi [0]fsr1
 12203  1D8D  30FF               	movlw	255
 12204  1D8E  3FC1               	movwi [1]fsr1
 12205  1D8F  3001               	movlw	1
 12206  1D90  00A0               	movwf	??_setLoad_AH_AL_Restore
 12207  1D91  0820               	movf	??_setLoad_AH_AL_Restore,w
 12208  1D92  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12209  1D93  2D7A               	goto	L8
 12210  1D94                     __end_of_setLoad_AH_AL_Restore:	
 12211                           
 12212                           	psect	text69
 12213  1ACB                     __ptext69:	
 12214 ;; *************** function _LED_Main *****************
 12215 ;; Defined at:
 12216 ;;		line 47 in file "../src/LED_B1.c"
 12217 ;; Parameters:    Size  Location     Type
 12218 ;;		None
 12219 ;; Auto vars:     Size  Location     Type
 12220 ;;		None
 12221 ;; Return value:  Size  Location     Type
 12222 ;;		None               void
 12223 ;; Registers used:
 12224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12225 ;; Tracked objects:
 12226 ;;		On entry : 0/0
 12227 ;;		On exit  : 0/0
 12228 ;;		Unchanged: 0/0
 12229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12234 ;;Total ram usage:        0 bytes
 12235 ;; Hardware stack levels used:    1
 12236 ;; Hardware stack levels required when called:    7
 12237 ;; This function calls:
 12238 ;;		_setLED_Main
 12239 ;; This function is called by:
 12240 ;;		_main
 12241 ;; This function uses a non-reentrant model
 12242 ;;
 12243                           
 12244                           
 12245                           ;psect for function _LED_Main
 12246  1ACB                     _LED_Main:	
 12247                           
 12248                           ;LED_B1.c: 49: setLED_Main(1);
 12249                           
 12250                           ;incstack = 0
 12251                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12252  1ACB  3001               	movlw	1
 12253  1ACC  3192  227C  319A   	fcall	_setLED_Main
 12254                           
 12255                           ;LED_B1.c: 52: setLED_Main(2);
 12256  1ACF  3002               	movlw	2
 12257  1AD0  3192  227C  319A   	fcall	_setLED_Main
 12258                           
 12259                           ;LED_B1.c: 58: setLED_Main(99);
 12260  1AD3  3063               	movlw	99
 12261  1AD4  3192  227C         	fcall	_setLED_Main
 12262  1AD6  0008               	return
 12263  1AD7                     __end_of_LED_Main:	
 12264                           
 12265                           	psect	text70
 12266  127C                     __ptext70:	
 12267 ;; *************** function _setLED_Main *****************
 12268 ;; Defined at:
 12269 ;;		line 192 in file "../src/LED_B1.c"
 12270 ;; Parameters:    Size  Location     Type
 12271 ;;  led             1    wreg     unsigned char 
 12272 ;; Auto vars:     Size  Location     Type
 12273 ;;  led             1    4[BANK0 ] unsigned char 
 12274 ;; Return value:  Size  Location     Type
 12275 ;;		None               void
 12276 ;; Registers used:
 12277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12278 ;; Tracked objects:
 12279 ;;		On entry : 0/0
 12280 ;;		On exit  : 0/0
 12281 ;;		Unchanged: 0/0
 12282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12284 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12285 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12286 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12287 ;;Total ram usage:        3 bytes
 12288 ;; Hardware stack levels used:    1
 12289 ;; Hardware stack levels required when called:    6
 12290 ;; This function calls:
 12291 ;;		_LedPointSelect
 12292 ;; This function is called by:
 12293 ;;		_LED_Main
 12294 ;; This function uses a non-reentrant model
 12295 ;;
 12296                           
 12297                           
 12298                           ;psect for function _setLED_Main
 12299  127C                     _setLED_Main:	
 12300                           
 12301                           ;incstack = 0
 12302                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12303                           ;setLED_Main@led stored from wreg
 12304  127C  0020               	movlb	0	; select bank0
 12305  127D  00A4               	movwf	setLED_Main@led
 12306                           
 12307                           ;LED_B1.c: 193: LedPointSelect(led);
 12308  127E  0824               	movf	setLED_Main@led,w
 12309  127F  319D  25B0  3192   	fcall	_LedPointSelect
 12310                           
 12311                           ;LED_B1.c: 194: if (LED->GO == 1) {
 12312  1282  0878               	movf	_LED,w
 12313  1283  0086               	movwf	6
 12314  1284  3001               	movlw	1	; select bank2/3
 12315  1285  0087               	movwf	7
 12316  1286  1C81               	btfss	1,1
 12317  1287  0008               	return
 12318                           
 12319                           ;LED_B1.c: 195: LED->Time++;
 12320  1288  0A78               	incf	_LED,w
 12321  1289  0086               	movwf	6
 12322  128A  3001               	movlw	1	; select bank2/3
 12323  128B  0087               	movwf	7
 12324  128C  3001               	movlw	1
 12325  128D  0781               	addwf	1,f
 12326  128E  3141               	addfsr 1,1
 12327  128F  1803               	skipnc
 12328  1290  0A81               	incf	1,f
 12329                           
 12330                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 12331  1291  0A78               	incf	_LED,w
 12332  1292  0086               	movwf	6
 12333  1293  3001               	movlw	1	; select bank2/3
 12334  1294  0087               	movwf	7
 12335  1295  3F40               	moviw [0]fsr1
 12336  1296  0020               	movlb	0	; select bank0
 12337  1297  00A2               	movwf	??_setLED_Main
 12338  1298  3F41               	moviw [1]fsr1
 12339  1299  00A3               	movwf	??_setLED_Main+1
 12340  129A  3000               	movlw	0
 12341  129B  0223               	subwf	??_setLED_Main+1,w
 12342  129C  3032               	movlw	50
 12343  129D  1903               	skipnz
 12344  129E  0222               	subwf	??_setLED_Main,w
 12345  129F  1C03               	skipc
 12346  12A0  0008               	return
 12347                           
 12348                           ;LED_B1.c: 197: LED->Time = 0;
 12349  12A1  0A78               	incf	_LED,w
 12350  12A2  0086               	movwf	6
 12351  12A3  3001               	movlw	1	; select bank2/3
 12352  12A4  0087               	movwf	7
 12353  12A5  3000               	movlw	0
 12354  12A6  3FC0               	movwi [0]fsr1
 12355  12A7  3FC1               	movwi [1]fsr1
 12356                           
 12357                           ;LED_B1.c: 199: if (led == 1) {
 12358  12A8  0824               	movf	setLED_Main@led,w
 12359  12A9  3A01               	xorlw	1
 12360  12AA  1D03               	skipz
 12361  12AB  2AAF               	goto	l9767
 12362                           
 12363                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 12364  12AC  3008               	movlw	8
 12365  12AD  068C               	xorwf	12,f
 12366                           
 12367                           ;LED_B1.c: 201: }
 12368  12AE  0008               	return
 12369  12AF                     l9767:	
 12370                           
 12371                           ;LED_B1.c: 204: else if (led == 2) {
 12372  12AF  0824               	movf	setLED_Main@led,w
 12373  12B0  3A02               	xorlw	2
 12374  12B1  1D03               	skipz
 12375  12B2  2AB6               	goto	l9771
 12376                           
 12377                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 12378  12B3  3080               	movlw	128
 12379  12B4  068E               	xorwf	14,f
 12380                           
 12381                           ;LED_B1.c: 206: }
 12382  12B5  0008               	return
 12383  12B6                     l9771:	
 12384                           
 12385                           ;LED_B1.c: 214: else if (led == 99) {
 12386  12B6  0824               	movf	setLED_Main@led,w
 12387  12B7  3A63               	xorlw	99
 12388  12B8  1D03               	skipz
 12389  12B9  0008               	return
 12390                           
 12391                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 12392  12BA  3020               	movlw	32
 12393  12BB  068D               	xorwf	13,f
 12394  12BC  0008               	return
 12395  12BD                     __end_of_setLED_Main:	
 12396                           
 12397                           	psect	text71
 12398  1ABF                     __ptext71:	
 12399 ;; *************** function _LED_Initialization *****************
 12400 ;; Defined at:
 12401 ;;		line 31 in file "../src/LED_B1.c"
 12402 ;; Parameters:    Size  Location     Type
 12403 ;;		None
 12404 ;; Auto vars:     Size  Location     Type
 12405 ;;		None
 12406 ;; Return value:  Size  Location     Type
 12407 ;;		None               void
 12408 ;; Registers used:
 12409 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12410 ;; Tracked objects:
 12411 ;;		On entry : 0/0
 12412 ;;		On exit  : 0/0
 12413 ;;		Unchanged: 0/0
 12414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12419 ;;Total ram usage:        0 bytes
 12420 ;; Hardware stack levels used:    1
 12421 ;; Hardware stack levels required when called:    8
 12422 ;; This function calls:
 12423 ;;		_setLED_Initialization
 12424 ;; This function is called by:
 12425 ;;		_main
 12426 ;; This function uses a non-reentrant model
 12427 ;;
 12428                           
 12429                           
 12430                           ;psect for function _LED_Initialization
 12431  1ABF                     _LED_Initialization:	
 12432                           
 12433                           ;LED_B1.c: 33: setLED_Initialization(1);
 12434                           
 12435                           ;incstack = 0
 12436                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12437  1ABF  3001               	movlw	1
 12438  1AC0  319B  23C2  319A   	fcall	_setLED_Initialization
 12439                           
 12440                           ;LED_B1.c: 36: setLED_Initialization(2);
 12441  1AC3  3002               	movlw	2
 12442  1AC4  319B  23C2  319A   	fcall	_setLED_Initialization
 12443                           
 12444                           ;LED_B1.c: 42: setLED_Initialization(99);
 12445  1AC7  3063               	movlw	99
 12446  1AC8  319B  23C2         	fcall	_setLED_Initialization
 12447  1ACA  0008               	return
 12448  1ACB                     __end_of_LED_Initialization:	
 12449                           
 12450                           	psect	text72
 12451  1BC2                     __ptext72:	
 12452 ;; *************** function _setLED_Initialization *****************
 12453 ;; Defined at:
 12454 ;;		line 63 in file "../src/LED_B1.c"
 12455 ;; Parameters:    Size  Location     Type
 12456 ;;  led             1    wreg     unsigned char 
 12457 ;; Auto vars:     Size  Location     Type
 12458 ;;  led             1    4[BANK0 ] unsigned char 
 12459 ;; Return value:  Size  Location     Type
 12460 ;;		None               void
 12461 ;; Registers used:
 12462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12463 ;; Tracked objects:
 12464 ;;		On entry : 0/0
 12465 ;;		On exit  : 0/0
 12466 ;;		Unchanged: 0/0
 12467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12471 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12472 ;;Total ram usage:        1 bytes
 12473 ;; Hardware stack levels used:    1
 12474 ;; Hardware stack levels required when called:    7
 12475 ;; This function calls:
 12476 ;;		_LedPointSelect
 12477 ;;		_setLED
 12478 ;; This function is called by:
 12479 ;;		_LED_Initialization
 12480 ;; This function uses a non-reentrant model
 12481 ;;
 12482                           
 12483                           
 12484                           ;psect for function _setLED_Initialization
 12485  1BC2                     _setLED_Initialization:	
 12486                           
 12487                           ;incstack = 0
 12488                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12489                           ;setLED_Initialization@led stored from wreg
 12490  1BC2  0020               	movlb	0	; select bank0
 12491  1BC3  00A4               	movwf	setLED_Initialization@led
 12492                           
 12493                           ;LED_B1.c: 64: LedPointSelect(led);
 12494  1BC4  0824               	movf	setLED_Initialization@led,w
 12495  1BC5  319D  25B0  319B   	fcall	_LedPointSelect
 12496                           
 12497                           ;LED_B1.c: 65: LED->Enable = 1;
 12498  1BC8  0878               	movf	_LED,w
 12499  1BC9  0086               	movwf	6
 12500  1BCA  3001               	movlw	1	; select bank2/3
 12501  1BCB  0087               	movwf	7
 12502  1BCC  1401               	bsf	1,0
 12503                           
 12504                           ;LED_B1.c: 66: setLED(led, 0);
 12505  1BCD  0020               	movlb	0	; select bank0
 12506  1BCE  01A2               	clrf	setLED@command
 12507  1BCF  0824               	movf	setLED_Initialization@led,w
 12508  1BD0  3196  261F         	fcall	_setLED
 12509  1BD2  0008               	return
 12510  1BD3                     __end_of_setLED_Initialization:	
 12511                           
 12512                           	psect	text73
 12513  1E29                     __ptext73:	
 12514 ;; *************** function _Flash_Memory_Main *****************
 12515 ;; Defined at:
 12516 ;;		line 900 in file "../src/MCU_B1.c"
 12517 ;; Parameters:    Size  Location     Type
 12518 ;;		None
 12519 ;; Auto vars:     Size  Location     Type
 12520 ;;		None
 12521 ;; Return value:  Size  Location     Type
 12522 ;;		None               void
 12523 ;; Registers used:
 12524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12525 ;; Tracked objects:
 12526 ;;		On entry : 0/0
 12527 ;;		On exit  : 0/0
 12528 ;;		Unchanged: 0/0
 12529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12534 ;;Total ram usage:        0 bytes
 12535 ;; Hardware stack levels used:    1
 12536 ;; Hardware stack levels required when called:    8
 12537 ;; This function calls:
 12538 ;;		_Flash_Memory_Modify
 12539 ;; This function is called by:
 12540 ;;		_main
 12541 ;; This function uses a non-reentrant model
 12542 ;;
 12543                           
 12544                           
 12545                           ;psect for function _Flash_Memory_Main
 12546  1E29                     _Flash_Memory_Main:	
 12547                           
 12548                           ;MCU_B1.c: 901: if (Memory.GO == 1) {
 12549                           
 12550                           ;incstack = 0
 12551                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12552  1E29  0024               	movlb	4	; select bank4
 12553  1E2A  1CC4               	btfss	(_Memory^(0+512)+36),1
 12554  1E2B  0008               	return
 12555                           
 12556                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 12557  1E2C  1C44               	btfss	(_Memory^(0+512)+36),0
 12558  1E2D  2E46               	goto	l1349
 12559                           
 12560                           ;MCU_B1.c: 903: Memory.Time++;
 12561  1E2E  3001               	movlw	1
 12562  1E2F  07C2               	addwf	(_Memory^(0+512)+34),f
 12563  1E30  3000               	movlw	0
 12564  1E31  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12565                           
 12566                           ;MCU_B1.c: 904: if (Memory.Time == 25)
 12567  1E32  3022               	movlw	34
 12568  1E33  3E20               	addlw	_Memory& (0+255)
 12569  1E34  0086               	movwf	6
 12570  1E35  3002               	movlw	2	; select bank4/5
 12571  1E36  0087               	movwf	7
 12572  1E37  3F40               	moviw [0]fsr1
 12573  1E38  3A19               	xorlw	25
 12574  1E39  1D03               	skipz
 12575  1E3A  2E3D               	goto	u11135
 12576  1E3B  3F41               	moviw [1]fsr1
 12577  1E3C  3A00               	xorlw	0
 12578  1E3D                     u11135:	
 12579  1E3D  1D03               	skipz
 12580  1E3E  0008               	return
 12581                           
 12582                           ;MCU_B1.c: 905: {
 12583                           ;MCU_B1.c: 906: Memory.Time = 0;
 12584  1E3F  01C2               	clrf	(_Memory^(0+512)+34)
 12585  1E40  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12586                           
 12587                           ;MCU_B1.c: 907: Memory.Modify = 0;
 12588  1E41  1044               	bcf	(_Memory^(0+512)+36),0
 12589                           
 12590                           ;MCU_B1.c: 908: Memory.GO = 0;
 12591  1E42  10C4               	bcf	(_Memory^(0+512)+36),1
 12592                           
 12593                           ;MCU_B1.c: 909: Flash_Memory_Modify();
 12594  1E43  3193  2344         	fcall	_Flash_Memory_Modify
 12595                           
 12596                           ;MCU_B1.c: 910: }
 12597                           ;MCU_B1.c: 911: } else {
 12598  1E45  0008               	return
 12599  1E46                     l1349:	
 12600                           
 12601                           ;MCU_B1.c: 912: Memory.GO = 0;
 12602  1E46  10C4               	bcf	(_Memory^(0+512)+36),1
 12603  1E47  0008               	return
 12604  1E48                     __end_of_Flash_Memory_Main:	
 12605                           
 12606                           	psect	text74
 12607  1344                     __ptext74:	
 12608 ;; *************** function _Flash_Memory_Modify *****************
 12609 ;; Defined at:
 12610 ;;		line 969 in file "../src/MCU_B1.c"
 12611 ;; Parameters:    Size  Location     Type
 12612 ;;		None
 12613 ;; Auto vars:     Size  Location     Type
 12614 ;;  i               1    5[BANK0 ] unsigned char 
 12615 ;; Return value:  Size  Location     Type
 12616 ;;		None               void
 12617 ;; Registers used:
 12618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12619 ;; Tracked objects:
 12620 ;;		On entry : 0/0
 12621 ;;		On exit  : 0/0
 12622 ;;		Unchanged: 0/0
 12623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12625 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12626 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12627 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12628 ;;Total ram usage:        2 bytes
 12629 ;; Hardware stack levels used:    1
 12630 ;; Hardware stack levels required when called:    7
 12631 ;; This function calls:
 12632 ;;		_Flash_Memory_Erasing
 12633 ;;		_Flash_Memory_Read
 12634 ;;		_Flash_Memory_Write
 12635 ;; This function is called by:
 12636 ;;		_Flash_Memory_Main
 12637 ;; This function uses a non-reentrant model
 12638 ;;
 12639                           
 12640                           
 12641                           ;psect for function _Flash_Memory_Modify
 12642  1344                     _Flash_Memory_Modify:	
 12643                           
 12644                           ;MCU_B1.c: 970: char i = 0;
 12645                           
 12646                           ;incstack = 0
 12647                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12648  1344  0020               	movlb	0	; select bank0
 12649  1345  01A5               	clrf	Flash_Memory_Modify@i
 12650                           
 12651                           ;MCU_B1.c: 971: for (i = 0; i < 32; i++) {
 12652  1346  01A5               	clrf	Flash_Memory_Modify@i
 12653  1347  3020               	movlw	32
 12654  1348  0225               	subwf	Flash_Memory_Modify@i,w
 12655  1349  1803               	btfsc	3,0
 12656  134A  2B60               	goto	l9851
 12657  134B                     l9845:	
 12658                           
 12659                           ;MCU_B1.c: 972: Memory.Data[i] = Flash_Memory_Read(i);
 12660  134B  0825               	movf	Flash_Memory_Modify@i,w
 12661  134C  319D  255E  3193   	fcall	_Flash_Memory_Read
 12662  134F  0020               	movlb	0	; select bank0
 12663  1350  00A4               	movwf	??_Flash_Memory_Modify
 12664  1351  0825               	movf	Flash_Memory_Modify@i,w
 12665  1352  3E20               	addlw	_Memory& (0+255)
 12666  1353  0086               	movwf	6
 12667  1354  3002               	movlw	2	; select bank4/5
 12668  1355  0087               	movwf	7
 12669  1356  0824               	movf	??_Flash_Memory_Modify,w
 12670  1357  0081               	movwf	1
 12671  1358  3001               	movlw	1
 12672  1359  00A4               	movwf	??_Flash_Memory_Modify
 12673  135A  0824               	movf	??_Flash_Memory_Modify,w
 12674  135B  07A5               	addwf	Flash_Memory_Modify@i,f
 12675  135C  3020               	movlw	32
 12676  135D  0225               	subwf	Flash_Memory_Modify@i,w
 12677  135E  1C03               	skipc
 12678  135F  2B4B               	goto	l9845
 12679  1360                     l9851:	
 12680                           
 12681                           ;MCU_B1.c: 973: }
 12682                           ;MCU_B1.c: 974: Memory.Data[0]=product->Data[12];
 12683  1360  086D               	movf	_product,w
 12684  1361  0086               	movwf	6
 12685  1362  3002               	movlw	2	; select bank4/5
 12686  1363  0087               	movwf	7
 12687  1364  3002               	movlw	2	; select bank4/5
 12688  1365  3F4C               	moviw [12]fsr1
 12689  1366  0024               	movlb	4	; select bank4
 12690  1367  00A0               	movwf	_Memory^(0+512)
 12691                           
 12692                           ;MCU_B1.c: 975: Memory.Data[1]=product->Data[13];
 12693  1368  0020               	movlb	0	; select bank0
 12694  1369  086D               	movf	_product,w
 12695  136A  0086               	movwf	6
 12696  136B  3002               	movlw	2	; select bank4/5
 12697  136C  0087               	movwf	7
 12698  136D  3002               	movlw	2	; select bank4/5
 12699  136E  3F4D               	moviw [13]fsr1
 12700  136F  0024               	movlb	4	; select bank4
 12701  1370  00A1               	movwf	(_Memory^(0+512)+1)
 12702                           
 12703                           ;MCU_B1.c: 976: Memory.Data[2]=product->Data[14];
 12704  1371  0020               	movlb	0	; select bank0
 12705  1372  086D               	movf	_product,w
 12706  1373  0086               	movwf	6
 12707  1374  3002               	movlw	2	; select bank4/5
 12708  1375  0087               	movwf	7
 12709  1376  3002               	movlw	2	; select bank4/5
 12710  1377  3F4E               	moviw [14]fsr1
 12711  1378  0024               	movlb	4	; select bank4
 12712  1379  00A2               	movwf	(_Memory^(0+512)+2)
 12713                           
 12714                           ;MCU_B1.c: 982: if (Memory.LoopSave == 1) {
 12715  137A  1D44               	btfss	(_Memory^(0+512)+36),2
 12716  137B  2B80               	goto	l1371
 12717                           
 12718                           ;MCU_B1.c: 983: Memory.LoopSave = 0;
 12719  137C  1144               	bcf	(_Memory^(0+512)+36),2
 12720                           
 12721                           ;MCU_B1.c: 984: myMain.FirstOpen = 0;
 12722  137D  0021               	movlb	1	; select bank1
 12723  137E  1320               	bcf	_myMain^(0+128),6
 12724                           
 12725                           ;MCU_B1.c: 985: myMain.First = 0;
 12726  137F  1021               	bcf	(_myMain^(0+128)+1),0
 12727  1380                     l1371:	
 12728                           
 12729                           ;MCU_B1.c: 987: }
 12730                           ;MCU_B1.c: 988: GIE = 0;
 12731  1380  138B               	bcf	11,7	;volatile
 12732                           
 12733                           ;MCU_B1.c: 989: Flash_Memory_Erasing();
 12734  1381  319A  22B3  3193   	fcall	_Flash_Memory_Erasing
 12735                           
 12736                           ;MCU_B1.c: 990: Flash_Memory_Write();
 12737  1384  3190  2098         	fcall	_Flash_Memory_Write
 12738                           
 12739                           ;MCU_B1.c: 991: GIE = 1;
 12740  1386  178B               	bsf	11,7	;volatile
 12741  1387  0008               	return
 12742  1388                     __end_of_Flash_Memory_Modify:	
 12743                           
 12744                           	psect	text75
 12745  1AB3                     __ptext75:	
 12746 ;; *************** function _Flash_Memory_Erasing *****************
 12747 ;; Defined at:
 12748 ;;		line 958 in file "../src/MCU_B1.c"
 12749 ;; Parameters:    Size  Location     Type
 12750 ;;		None
 12751 ;; Auto vars:     Size  Location     Type
 12752 ;;		None
 12753 ;; Return value:  Size  Location     Type
 12754 ;;		None               void
 12755 ;; Registers used:
 12756 ;;		wreg, status,2, status,0, pclath, cstack
 12757 ;; Tracked objects:
 12758 ;;		On entry : 0/0
 12759 ;;		On exit  : 0/0
 12760 ;;		Unchanged: 0/0
 12761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12766 ;;Total ram usage:        0 bytes
 12767 ;; Hardware stack levels used:    1
 12768 ;; Hardware stack levels required when called:    6
 12769 ;; This function calls:
 12770 ;;		_Flash_Memory_Unlock
 12771 ;; This function is called by:
 12772 ;;		_Flash_Memory_Modify
 12773 ;; This function uses a non-reentrant model
 12774 ;;
 12775                           
 12776                           
 12777                           ;psect for function _Flash_Memory_Erasing
 12778  1AB3                     _Flash_Memory_Erasing:	
 12779                           
 12780                           ;MCU_B1.c: 959: CFGS = 0;
 12781                           
 12782                           ;incstack = 0
 12783                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12784  1AB3  0023               	movlb	3	; select bank3
 12785  1AB4  1315               	bcf	21,6	;volatile
 12786                           
 12787                           ;MCU_B1.c: 960: PMADRH = 0x30;
 12788  1AB5  3030               	movlw	48
 12789  1AB6  0092               	movwf	18	;volatile
 12790                           
 12791                           ;MCU_B1.c: 961: PMADRL = 0x00;
 12792  1AB7  0191               	clrf	17	;volatile
 12793                           
 12794                           ;MCU_B1.c: 962: FREE = 1;
 12795  1AB8  1615               	bsf	21,4	;volatile
 12796                           
 12797                           ;MCU_B1.c: 963: WREN = 1;
 12798  1AB9  1515               	bsf	21,2	;volatile
 12799                           
 12800                           ;MCU_B1.c: 964: Flash_Memory_Unlock();
 12801  1ABA  319A  2269         	fcall	_Flash_Memory_Unlock
 12802                           
 12803                           ;MCU_B1.c: 965: WREN = 0;
 12804  1ABC  0023               	movlb	3	; select bank3
 12805  1ABD  1115               	bcf	21,2	;volatile
 12806  1ABE  0008               	return
 12807  1ABF                     __end_of_Flash_Memory_Erasing:	
 12808                           
 12809                           	psect	text76
 12810  069B                     __ptext76:	
 12811 ;; *************** function _Flash_Memory_Initialization *****************
 12812 ;; Defined at:
 12813 ;;		line 859 in file "../src/MCU_B1.c"
 12814 ;; Parameters:    Size  Location     Type
 12815 ;;		None
 12816 ;; Auto vars:     Size  Location     Type
 12817 ;;  i               1   62[BANK0 ] unsigned char 
 12818 ;; Return value:  Size  Location     Type
 12819 ;;		None               void
 12820 ;; Registers used:
 12821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12822 ;; Tracked objects:
 12823 ;;		On entry : 0/0
 12824 ;;		On exit  : 0/0
 12825 ;;		Unchanged: 0/0
 12826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12828 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12831 ;;Total ram usage:        2 bytes
 12832 ;; Hardware stack levels used:    1
 12833 ;; Hardware stack levels required when called:    8
 12834 ;; This function calls:
 12835 ;;		_Flash_Memory_Read
 12836 ;;		_Flash_Memory_Write
 12837 ;;		_setPercentValue
 12838 ;; This function is called by:
 12839 ;;		_main
 12840 ;; This function uses a non-reentrant model
 12841 ;;
 12842                           
 12843                           
 12844                           ;psect for function _Flash_Memory_Initialization
 12845  069B                     _Flash_Memory_Initialization:	
 12846                           
 12847                           ;MCU_B1.c: 860: char i = 0;
 12848                           
 12849                           ;incstack = 0
 12850                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12851  069B  0020               	movlb	0	; select bank0
 12852  069C  01DE               	clrf	Flash_Memory_Initialization@i
 12853                           
 12854                           ;MCU_B1.c: 861: if (Flash_Memory_Read(31) == 0xaa) {
 12855  069D  301F               	movlw	31
 12856  069E  319D  255E  3186   	fcall	_Flash_Memory_Read
 12857  06A1  3AAA               	xorlw	170
 12858  06A2  1D03               	skipz
 12859  06A3  2F0D               	goto	l10295
 12860                           
 12861                           ;MCU_B1.c: 862: product->Data[12] = Flash_Memory_Read(0);
 12862  06A4  3000               	movlw	0
 12863  06A5  319D  255E  3186   	fcall	_Flash_Memory_Read
 12864  06A8  0020               	movlb	0	; select bank0
 12865  06A9  00DD               	movwf	??_Flash_Memory_Initialization
 12866  06AA  086D               	movf	_product,w
 12867  06AB  3E0C               	addlw	12
 12868  06AC  0086               	movwf	6
 12869  06AD  3002               	movlw	2	; select bank4/5
 12870  06AE  0087               	movwf	7
 12871  06AF  085D               	movf	??_Flash_Memory_Initialization,w
 12872  06B0  0081               	movwf	1
 12873                           
 12874                           ;MCU_B1.c: 863: product->Data[13] = Flash_Memory_Read(1);
 12875  06B1  3001               	movlw	1
 12876  06B2  319D  255E  3186   	fcall	_Flash_Memory_Read
 12877  06B5  0020               	movlb	0	; select bank0
 12878  06B6  00DD               	movwf	??_Flash_Memory_Initialization
 12879  06B7  086D               	movf	_product,w
 12880  06B8  3E0D               	addlw	13
 12881  06B9  0086               	movwf	6
 12882  06BA  3002               	movlw	2	; select bank4/5
 12883  06BB  0087               	movwf	7
 12884  06BC  085D               	movf	??_Flash_Memory_Initialization,w
 12885  06BD  0081               	movwf	1
 12886                           
 12887                           ;MCU_B1.c: 864: product->Data[14] = Flash_Memory_Read(2);
 12888  06BE  3002               	movlw	2
 12889  06BF  319D  255E  3186   	fcall	_Flash_Memory_Read
 12890  06C2  0020               	movlb	0	; select bank0
 12891  06C3  00DD               	movwf	??_Flash_Memory_Initialization
 12892  06C4  086D               	movf	_product,w
 12893  06C5  3E0E               	addlw	14
 12894  06C6  0086               	movwf	6
 12895  06C7  3002               	movlw	2	; select bank4/5
 12896  06C8  0087               	movwf	7
 12897  06C9  085D               	movf	??_Flash_Memory_Initialization,w
 12898  06CA  0081               	movwf	1
 12899                           
 12900                           ;MCU_B1.c: 870: i = setPercentValue(((char)((100-60)*0.8)));
 12901  06CB  3020               	movlw	32
 12902  06CC  3188  2001  3186   	fcall	_setPercentValue
 12903  06CF  0020               	movlb	0	; select bank0
 12904  06D0  00DD               	movwf	??_Flash_Memory_Initialization
 12905  06D1  085D               	movf	??_Flash_Memory_Initialization,w
 12906  06D2  00DE               	movwf	Flash_Memory_Initialization@i
 12907                           
 12908                           ;MCU_B1.c: 871: product->Data[21] = i;
 12909  06D3  085E               	movf	Flash_Memory_Initialization@i,w
 12910  06D4  00DD               	movwf	??_Flash_Memory_Initialization
 12911  06D5  086D               	movf	_product,w
 12912  06D6  3E15               	addlw	21
 12913  06D7  0086               	movwf	6
 12914  06D8  3002               	movlw	2	; select bank4/5
 12915  06D9  0087               	movwf	7
 12916  06DA  085D               	movf	??_Flash_Memory_Initialization,w
 12917  06DB  0081               	movwf	1
 12918                           
 12919                           ;MCU_B1.c: 872: product->Data[22] = i;
 12920  06DC  085E               	movf	Flash_Memory_Initialization@i,w
 12921  06DD  00DD               	movwf	??_Flash_Memory_Initialization
 12922  06DE  086D               	movf	_product,w
 12923  06DF  3E16               	addlw	22
 12924  06E0  0086               	movwf	6
 12925  06E1  3002               	movlw	2	; select bank4/5
 12926  06E2  0087               	movwf	7
 12927  06E3  085D               	movf	??_Flash_Memory_Initialization,w
 12928  06E4  0081               	movwf	1
 12929                           
 12930                           ;MCU_B1.c: 873: product->Data[23] = i;
 12931  06E5  085E               	movf	Flash_Memory_Initialization@i,w
 12932  06E6  00DD               	movwf	??_Flash_Memory_Initialization
 12933  06E7  086D               	movf	_product,w
 12934  06E8  3E17               	addlw	23
 12935  06E9  0086               	movwf	6
 12936  06EA  3002               	movlw	2	; select bank4/5
 12937  06EB  0087               	movwf	7
 12938  06EC  085D               	movf	??_Flash_Memory_Initialization,w
 12939  06ED  0081               	movwf	1
 12940                           
 12941                           ;MCU_B1.c: 875: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12942  06EE  086D               	movf	_product,w
 12943  06EF  3E0C               	addlw	12
 12944  06F0  0086               	movwf	6
 12945  06F1  3002               	movlw	2	; select bank4/5
 12946  06F2  0087               	movwf	7
 12947  06F3  0801               	movf	1,w
 12948  06F4  3AFF               	xorlw	255
 12949  06F5  1D03               	skipz
 12950  06F6  0008               	return
 12951  06F7  086D               	movf	_product,w
 12952  06F8  3E0D               	addlw	13
 12953  06F9  0086               	movwf	6
 12954  06FA  3002               	movlw	2	; select bank4/5
 12955  06FB  0087               	movwf	7
 12956  06FC  0801               	movf	1,w
 12957  06FD  3AFF               	xorlw	255
 12958  06FE  1D03               	skipz
 12959  06FF  0008               	return
 12960  0700  086D               	movf	_product,w
 12961  0701  3E0E               	addlw	14
 12962  0702  0086               	movwf	6
 12963  0703  3002               	movlw	2	; select bank4/5
 12964  0704  0087               	movwf	7
 12965  0705  0801               	movf	1,w
 12966  0706  3AFF               	xorlw	255
 12967  0707  1D03               	skipz
 12968  0708  0008               	return
 12969                           
 12970                           ;MCU_B1.c: 876: myMain.FirstOpen = 1;
 12971  0709  0021               	movlb	1	; select bank1
 12972  070A  1720               	bsf	_myMain^(0+128),6
 12973                           
 12974                           ;MCU_B1.c: 877: myMain.First = 1;
 12975  070B  1421               	bsf	(_myMain^(0+128)+1),0
 12976                           
 12977                           ;MCU_B1.c: 878: }
 12978                           ;MCU_B1.c: 879: } else {
 12979  070C  0008               	return
 12980  070D                     l10295:	
 12981                           
 12982                           ;MCU_B1.c: 880: i = setPercentValue(((char)((100-60)*0.8)));
 12983  070D  3020               	movlw	32
 12984  070E  3188  2001  3186   	fcall	_setPercentValue
 12985  0711  0020               	movlb	0	; select bank0
 12986  0712  00DD               	movwf	??_Flash_Memory_Initialization
 12987  0713  085D               	movf	??_Flash_Memory_Initialization,w
 12988  0714  00DE               	movwf	Flash_Memory_Initialization@i
 12989                           
 12990                           ;MCU_B1.c: 881: Memory.Data[0]=0xff;
 12991  0715  30FF               	movlw	255
 12992  0716  00DD               	movwf	??_Flash_Memory_Initialization
 12993  0717  085D               	movf	??_Flash_Memory_Initialization,w
 12994  0718  0024               	movlb	4	; select bank4
 12995  0719  00A0               	movwf	_Memory^(0+512)
 12996                           
 12997                           ;MCU_B1.c: 882: Memory.Data[1]=0xff;
 12998  071A  30FF               	movlw	255
 12999  071B  0020               	movlb	0	; select bank0
 13000  071C  00DD               	movwf	??_Flash_Memory_Initialization
 13001  071D  085D               	movf	??_Flash_Memory_Initialization,w
 13002  071E  0024               	movlb	4	; select bank4
 13003  071F  00A1               	movwf	(_Memory^(0+512)+1)
 13004                           
 13005                           ;MCU_B1.c: 883: Memory.Data[2]=0xff;
 13006  0720  30FF               	movlw	255
 13007  0721  0020               	movlb	0	; select bank0
 13008  0722  00DD               	movwf	??_Flash_Memory_Initialization
 13009  0723  085D               	movf	??_Flash_Memory_Initialization,w
 13010  0724  0024               	movlb	4	; select bank4
 13011  0725  00A2               	movwf	(_Memory^(0+512)+2)
 13012                           
 13013                           ;MCU_B1.c: 884: Memory.Data[3]=0xff;
 13014  0726  30FF               	movlw	255
 13015  0727  0020               	movlb	0	; select bank0
 13016  0728  00DD               	movwf	??_Flash_Memory_Initialization
 13017  0729  085D               	movf	??_Flash_Memory_Initialization,w
 13018  072A  0024               	movlb	4	; select bank4
 13019  072B  00A3               	movwf	(_Memory^(0+512)+3)
 13020                           
 13021                           ;MCU_B1.c: 885: Memory.Data[4]=0xff;
 13022  072C  30FF               	movlw	255
 13023  072D  0020               	movlb	0	; select bank0
 13024  072E  00DD               	movwf	??_Flash_Memory_Initialization
 13025  072F  085D               	movf	??_Flash_Memory_Initialization,w
 13026  0730  0024               	movlb	4	; select bank4
 13027  0731  00A4               	movwf	(_Memory^(0+512)+4)
 13028                           
 13029                           ;MCU_B1.c: 886: Memory.Data[5]=0xff;
 13030  0732  30FF               	movlw	255
 13031  0733  0020               	movlb	0	; select bank0
 13032  0734  00DD               	movwf	??_Flash_Memory_Initialization
 13033  0735  085D               	movf	??_Flash_Memory_Initialization,w
 13034  0736  0024               	movlb	4	; select bank4
 13035  0737  00A5               	movwf	(_Memory^(0+512)+5)
 13036                           
 13037                           ;MCU_B1.c: 887: Memory.Data[31]=0xaa;
 13038  0738  30AA               	movlw	170
 13039  0739  0020               	movlb	0	; select bank0
 13040  073A  00DD               	movwf	??_Flash_Memory_Initialization
 13041  073B  085D               	movf	??_Flash_Memory_Initialization,w
 13042  073C  0024               	movlb	4	; select bank4
 13043  073D  00BF               	movwf	(_Memory^(0+512)+31)
 13044                           
 13045                           ;MCU_B1.c: 888: product->Data[21] = i;
 13046  073E  0020               	movlb	0	; select bank0
 13047  073F  085E               	movf	Flash_Memory_Initialization@i,w
 13048  0740  00DD               	movwf	??_Flash_Memory_Initialization
 13049  0741  086D               	movf	_product,w
 13050  0742  3E15               	addlw	21
 13051  0743  0086               	movwf	6
 13052  0744  3002               	movlw	2	; select bank4/5
 13053  0745  0087               	movwf	7
 13054  0746  085D               	movf	??_Flash_Memory_Initialization,w
 13055  0747  0081               	movwf	1
 13056                           
 13057                           ;MCU_B1.c: 889: product->Data[22] = i;
 13058  0748  085E               	movf	Flash_Memory_Initialization@i,w
 13059  0749  00DD               	movwf	??_Flash_Memory_Initialization
 13060  074A  086D               	movf	_product,w
 13061  074B  3E16               	addlw	22
 13062  074C  0086               	movwf	6
 13063  074D  3002               	movlw	2	; select bank4/5
 13064  074E  0087               	movwf	7
 13065  074F  085D               	movf	??_Flash_Memory_Initialization,w
 13066  0750  0081               	movwf	1
 13067                           
 13068                           ;MCU_B1.c: 890: product->Data[23] = i;
 13069  0751  085E               	movf	Flash_Memory_Initialization@i,w
 13070  0752  00DD               	movwf	??_Flash_Memory_Initialization
 13071  0753  086D               	movf	_product,w
 13072  0754  3E17               	addlw	23
 13073  0755  0086               	movwf	6
 13074  0756  3002               	movlw	2	; select bank4/5
 13075  0757  0087               	movwf	7
 13076  0758  085D               	movf	??_Flash_Memory_Initialization,w
 13077  0759  0081               	movwf	1
 13078                           
 13079                           ;MCU_B1.c: 891: GIE = 0;
 13080  075A  138B               	bcf	11,7	;volatile
 13081                           
 13082                           ;MCU_B1.c: 892: Flash_Memory_Write();
 13083  075B  3190  2098         	fcall	_Flash_Memory_Write
 13084                           
 13085                           ;MCU_B1.c: 893: GIE = 1;
 13086  075D  178B               	bsf	11,7	;volatile
 13087                           
 13088                           ;MCU_B1.c: 894: myMain.FirstOpen = 1;
 13089  075E  0021               	movlb	1	; select bank1
 13090  075F  1720               	bsf	_myMain^(0+128),6
 13091                           
 13092                           ;MCU_B1.c: 895: myMain.First = 1;
 13093  0760  1421               	bsf	(_myMain^(0+128)+1),0
 13094  0761  0008               	return
 13095  0762                     __end_of_Flash_Memory_Initialization:	
 13096                           
 13097                           	psect	text77
 13098  1098                     __ptext77:	
 13099 ;; *************** function _Flash_Memory_Write *****************
 13100 ;; Defined at:
 13101 ;;		line 939 in file "../src/MCU_B1.c"
 13102 ;; Parameters:    Size  Location     Type
 13103 ;;		None
 13104 ;; Auto vars:     Size  Location     Type
 13105 ;;  i               1    1[BANK0 ] unsigned char 
 13106 ;; Return value:  Size  Location     Type
 13107 ;;		None               void
 13108 ;; Registers used:
 13109 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13110 ;; Tracked objects:
 13111 ;;		On entry : 0/0
 13112 ;;		On exit  : 0/0
 13113 ;;		Unchanged: 0/0
 13114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13117 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13118 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13119 ;;Total ram usage:        2 bytes
 13120 ;; Hardware stack levels used:    1
 13121 ;; Hardware stack levels required when called:    6
 13122 ;; This function calls:
 13123 ;;		_Flash_Memory_Unlock
 13124 ;; This function is called by:
 13125 ;;		_Flash_Memory_Initialization
 13126 ;;		_Flash_Memory_Modify
 13127 ;; This function uses a non-reentrant model
 13128 ;;
 13129                           
 13130                           
 13131                           ;psect for function _Flash_Memory_Write
 13132  1098                     _Flash_Memory_Write:	
 13133                           
 13134                           ;MCU_B1.c: 940: char i = 0;
 13135                           
 13136                           ;incstack = 0
 13137                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13138  1098  0020               	movlb	0	; select bank0
 13139  1099  01A1               	clrf	Flash_Memory_Write@i
 13140                           
 13141                           ;MCU_B1.c: 941: CFGS = 0;
 13142  109A  0023               	movlb	3	; select bank3
 13143  109B  1315               	bcf	21,6	;volatile
 13144                           
 13145                           ;MCU_B1.c: 942: PMADRH = 0x30;
 13146  109C  3030               	movlw	48
 13147  109D  0092               	movwf	18	;volatile
 13148                           
 13149                           ;MCU_B1.c: 943: PMDATH = 0;
 13150  109E  0194               	clrf	20	;volatile
 13151                           
 13152                           ;MCU_B1.c: 944: FREE = 0;
 13153  109F  1215               	bcf	21,4	;volatile
 13154                           
 13155                           ;MCU_B1.c: 945: LWLO = 1;
 13156  10A0  1695               	bsf	21,5	;volatile
 13157                           
 13158                           ;MCU_B1.c: 946: WREN = 1;
 13159  10A1  1515               	bsf	21,2	;volatile
 13160                           
 13161                           ;MCU_B1.c: 947: for (i = 0; i < 32; i++) {
 13162  10A2  0020               	movlb	0	; select bank0
 13163  10A3  01A1               	clrf	Flash_Memory_Write@i
 13164  10A4  3020               	movlw	32
 13165  10A5  0221               	subwf	Flash_Memory_Write@i,w
 13166  10A6  1803               	btfsc	3,0
 13167  10A7  28C0               	goto	l1362
 13168  10A8                     l9411:	
 13169                           
 13170                           ;MCU_B1.c: 948: PMADRL = i;
 13171  10A8  0821               	movf	Flash_Memory_Write@i,w
 13172  10A9  0023               	movlb	3	; select bank3
 13173  10AA  0091               	movwf	17	;volatile
 13174                           
 13175                           ;MCU_B1.c: 949: PMDATL = Memory.Data[i];
 13176  10AB  0020               	movlb	0	; select bank0
 13177  10AC  0821               	movf	Flash_Memory_Write@i,w
 13178  10AD  3E20               	addlw	_Memory& (0+255)
 13179  10AE  0086               	movwf	6
 13180  10AF  3002               	movlw	2	; select bank4/5
 13181  10B0  0087               	movwf	7
 13182  10B1  0801               	movf	1,w
 13183  10B2  0023               	movlb	3	; select bank3
 13184  10B3  0093               	movwf	19	;volatile
 13185                           
 13186                           ;MCU_B1.c: 950: Flash_Memory_Unlock();
 13187  10B4  319A  2269  3190   	fcall	_Flash_Memory_Unlock
 13188  10B7  3001               	movlw	1
 13189  10B8  0020               	movlb	0	; select bank0
 13190  10B9  00A0               	movwf	??_Flash_Memory_Write
 13191  10BA  0820               	movf	??_Flash_Memory_Write,w
 13192  10BB  07A1               	addwf	Flash_Memory_Write@i,f
 13193  10BC  3020               	movlw	32
 13194  10BD  0221               	subwf	Flash_Memory_Write@i,w
 13195  10BE  1C03               	skipc
 13196  10BF  28A8               	goto	l9411
 13197  10C0                     l1362:	
 13198                           
 13199                           ;MCU_B1.c: 951: }
 13200                           ;MCU_B1.c: 952: LWLO = 0;
 13201  10C0  0023               	movlb	3	; select bank3
 13202  10C1  1295               	bcf	21,5	;volatile
 13203                           
 13204                           ;MCU_B1.c: 953: Flash_Memory_Unlock();
 13205  10C2  319A  2269         	fcall	_Flash_Memory_Unlock
 13206                           
 13207                           ;MCU_B1.c: 954: WREN = 0;
 13208  10C4  0023               	movlb	3	; select bank3
 13209  10C5  1115               	bcf	21,2	;volatile
 13210  10C6  0008               	return
 13211  10C7                     __end_of_Flash_Memory_Write:	
 13212                           
 13213                           	psect	text78
 13214  1A69                     __ptext78:	
 13215 ;; *************** function _Flash_Memory_Unlock *****************
 13216 ;; Defined at:
 13217 ;;		line 918 in file "../src/MCU_B1.c"
 13218 ;; Parameters:    Size  Location     Type
 13219 ;;		None
 13220 ;; Auto vars:     Size  Location     Type
 13221 ;;		None
 13222 ;; Return value:  Size  Location     Type
 13223 ;;		None               void
 13224 ;; Registers used:
 13225 ;;		wreg
 13226 ;; Tracked objects:
 13227 ;;		On entry : 0/0
 13228 ;;		On exit  : 0/0
 13229 ;;		Unchanged: 0/0
 13230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13235 ;;Total ram usage:        0 bytes
 13236 ;; Hardware stack levels used:    1
 13237 ;; Hardware stack levels required when called:    5
 13238 ;; This function calls:
 13239 ;;		Nothing
 13240 ;; This function is called by:
 13241 ;;		_Flash_Memory_Write
 13242 ;;		_Flash_Memory_Erasing
 13243 ;; This function uses a non-reentrant model
 13244 ;;
 13245                           
 13246                           
 13247                           ;psect for function _Flash_Memory_Unlock
 13248  1A69                     _Flash_Memory_Unlock:	
 13249                           
 13250                           ;MCU_B1.c: 919: PMCON2 = 0x55;
 13251                           
 13252                           ;incstack = 0
 13253                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13254  1A69  3055               	movlw	85
 13255  1A6A  0023               	movlb	3	; select bank3
 13256  1A6B  0096               	movwf	22	;volatile
 13257                           
 13258                           ;MCU_B1.c: 920: PMCON2 = 0xaa;
 13259  1A6C  30AA               	movlw	170
 13260  1A6D  0096               	movwf	22	;volatile
 13261                           
 13262                           ;MCU_B1.c: 921: WR = 1;
 13263  1A6E  1495               	bsf	21,1	;volatile
 13264                           
 13265                           ;MCU_B1.c: 922: __nop();
 13266  1A6F  0000               	nop
 13267                           
 13268                           ;MCU_B1.c: 923: __nop();
 13269  1A70  0000               	nop
 13270  1A71  0008               	return
 13271  1A72                     __end_of_Flash_Memory_Unlock:	
 13272                           
 13273                           	psect	text79
 13274  1D5E                     __ptext79:	
 13275 ;; *************** function _Flash_Memory_Read *****************
 13276 ;; Defined at:
 13277 ;;		line 927 in file "../src/MCU_B1.c"
 13278 ;; Parameters:    Size  Location     Type
 13279 ;;  address         1    wreg     unsigned char 
 13280 ;; Auto vars:     Size  Location     Type
 13281 ;;  address         1    2[BANK0 ] unsigned char 
 13282 ;;  ret             1    3[BANK0 ] unsigned char 
 13283 ;;  i               1    1[BANK0 ] unsigned char 
 13284 ;; Return value:  Size  Location     Type
 13285 ;;                  1    wreg      unsigned char 
 13286 ;; Registers used:
 13287 ;;		wreg, status,2
 13288 ;; Tracked objects:
 13289 ;;		On entry : 0/0
 13290 ;;		On exit  : 0/0
 13291 ;;		Unchanged: 0/0
 13292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13294 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13296 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;Total ram usage:        4 bytes
 13298 ;; Hardware stack levels used:    1
 13299 ;; Hardware stack levels required when called:    5
 13300 ;; This function calls:
 13301 ;;		Nothing
 13302 ;; This function is called by:
 13303 ;;		_Flash_Memory_Initialization
 13304 ;;		_Flash_Memory_Modify
 13305 ;; This function uses a non-reentrant model
 13306 ;;
 13307                           
 13308                           
 13309                           ;psect for function _Flash_Memory_Read
 13310  1D5E                     _Flash_Memory_Read:	
 13311                           
 13312                           ;incstack = 0
 13313                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13314                           ;Flash_Memory_Read@address stored from wreg
 13315  1D5E  0020               	movlb	0	; select bank0
 13316  1D5F  00A2               	movwf	Flash_Memory_Read@address
 13317                           
 13318                           ;MCU_B1.c: 928: char i = 0, ret = 0;
 13319  1D60  01A1               	clrf	Flash_Memory_Read@i
 13320  1D61  01A3               	clrf	Flash_Memory_Read@ret
 13321                           
 13322                           ;MCU_B1.c: 929: PMADRH = 0x30;
 13323  1D62  3030               	movlw	48
 13324  1D63  0023               	movlb	3	; select bank3
 13325  1D64  0092               	movwf	18	;volatile
 13326                           
 13327                           ;MCU_B1.c: 930: PMADRL = address;
 13328  1D65  0020               	movlb	0	; select bank0
 13329  1D66  0822               	movf	Flash_Memory_Read@address,w
 13330  1D67  0023               	movlb	3	; select bank3
 13331  1D68  0091               	movwf	17	;volatile
 13332                           
 13333                           ;MCU_B1.c: 931: CFGS = 0;
 13334  1D69  1315               	bcf	21,6	;volatile
 13335                           
 13336                           ;MCU_B1.c: 932: RD = 1;
 13337  1D6A  1415               	bsf	21,0	;volatile
 13338                           
 13339                           ;MCU_B1.c: 933: i = PMDATH;
 13340  1D6B  0814               	movf	20,w	;volatile
 13341  1D6C  0020               	movlb	0	; select bank0
 13342  1D6D  00A0               	movwf	??_Flash_Memory_Read
 13343  1D6E  0820               	movf	??_Flash_Memory_Read,w
 13344  1D6F  00A1               	movwf	Flash_Memory_Read@i
 13345                           
 13346                           ;MCU_B1.c: 934: ret = PMDATL;
 13347  1D70  0023               	movlb	3	; select bank3
 13348  1D71  0813               	movf	19,w	;volatile
 13349  1D72  0020               	movlb	0	; select bank0
 13350  1D73  00A0               	movwf	??_Flash_Memory_Read
 13351  1D74  0820               	movf	??_Flash_Memory_Read,w
 13352  1D75  00A3               	movwf	Flash_Memory_Read@ret
 13353                           
 13354                           ;MCU_B1.c: 935: return ret;
 13355  1D76  0823               	movf	Flash_Memory_Read@ret,w
 13356  1D77  0008               	return
 13357  1D78                     __end_of_Flash_Memory_Read:	
 13358                           
 13359                           	psect	text80
 13360  1A86                     __ptext80:	
 13361 ;; *************** function _DimmerLights_Main *****************
 13362 ;; Defined at:
 13363 ;;		line 416 in file "../src/Dimmer_B1.c"
 13364 ;; Parameters:    Size  Location     Type
 13365 ;;		None
 13366 ;; Auto vars:     Size  Location     Type
 13367 ;;		None
 13368 ;; Return value:  Size  Location     Type
 13369 ;;		None               void
 13370 ;; Registers used:
 13371 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13372 ;; Tracked objects:
 13373 ;;		On entry : 0/0
 13374 ;;		On exit  : 0/0
 13375 ;;		Unchanged: 0/0
 13376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13381 ;;Total ram usage:        0 bytes
 13382 ;; Hardware stack levels used:    1
 13383 ;; Hardware stack levels required when called:   11
 13384 ;; This function calls:
 13385 ;;		_DimmerLights_Close
 13386 ;;		_setDimmerLights_Main
 13387 ;; This function is called by:
 13388 ;;		_main
 13389 ;; This function uses a non-reentrant model
 13390 ;;
 13391                           
 13392                           
 13393                           ;psect for function _DimmerLights_Main
 13394  1A86                     _DimmerLights_Main:	
 13395                           
 13396                           ;Dimmer_B1.c: 419: setDimmerLights_Main(1);
 13397                           
 13398                           ;incstack = 0
 13399                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13400  1A86  3001               	movlw	1
 13401  1A87  318A  22D9  319A   	fcall	_setDimmerLights_Main
 13402                           
 13403                           ;Dimmer_B1.c: 423: setDimmerLights_Main(2);
 13404  1A8A  3002               	movlw	2
 13405  1A8B  318A  22D9  319A   	fcall	_setDimmerLights_Main
 13406                           
 13407                           ;Dimmer_B1.c: 430: DimmerLights_Close();
 13408  1A8E  319D  252C         	fcall	_DimmerLights_Close
 13409  1A90  0008               	return
 13410  1A91                     __end_of_DimmerLights_Main:	
 13411                           
 13412                           	psect	text81
 13413  0AD9                     __ptext81:	
 13414 ;; *************** function _setDimmerLights_Main *****************
 13415 ;; Defined at:
 13416 ;;		line 434 in file "../src/Dimmer_B1.c"
 13417 ;; Parameters:    Size  Location     Type
 13418 ;;  lights          1    wreg     unsigned char 
 13419 ;; Auto vars:     Size  Location     Type
 13420 ;;  lights          1   70[BANK0 ] unsigned char 
 13421 ;;  clear           1   69[BANK0 ] unsigned char 
 13422 ;; Return value:  Size  Location     Type
 13423 ;;		None               void
 13424 ;; Registers used:
 13425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13426 ;; Tracked objects:
 13427 ;;		On entry : 0/0
 13428 ;;		On exit  : 0/0
 13429 ;;		Unchanged: 0/0
 13430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13432 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13435 ;;Total ram usage:        2 bytes
 13436 ;; Hardware stack levels used:    1
 13437 ;; Hardware stack levels required when called:   10
 13438 ;; This function calls:
 13439 ;;		_DimmerLightsPointSelect
 13440 ;;		_setBuz
 13441 ;;		_setDimmerLights
 13442 ;;		_setDimmerLights_Adj
 13443 ;; This function is called by:
 13444 ;;		_DimmerLights_Main
 13445 ;; This function uses a non-reentrant model
 13446 ;;
 13447                           
 13448                           
 13449                           ;psect for function _setDimmerLights_Main
 13450  0AD9                     _setDimmerLights_Main:	
 13451                           
 13452                           ;incstack = 0
 13453                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13454                           ;setDimmerLights_Main@lights stored from wreg
 13455  0AD9  0020               	movlb	0	; select bank0
 13456  0ADA  00E6               	movwf	setDimmerLights_Main@lights
 13457                           
 13458                           ;Dimmer_B1.c: 435: char clear = 1;
 13459  0ADB  01E5               	clrf	setDimmerLights_Main@clear
 13460  0ADC  0AE5               	incf	setDimmerLights_Main@clear,f
 13461                           
 13462                           ;Dimmer_B1.c: 436: DimmerLightsPointSelect(lights);
 13463  0ADD  0866               	movf	setDimmerLights_Main@lights,w
 13464  0ADE  319C  242C  318A   	fcall	_DimmerLightsPointSelect
 13465                           
 13466                           ;Dimmer_B1.c: 449: if (lights == 1) {
 13467  0AE1  0020               	movlb	0	; select bank0
 13468  0AE2  0866               	movf	setDimmerLights_Main@lights,w
 13469  0AE3  3A01               	xorlw	1
 13470  0AE4  1D03               	skipz
 13471  0AE5  2AED               	goto	l9715
 13472                           
 13473                           ;Dimmer_B1.c: 450: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 13474  0AE6  3000               	movlw	0
 13475  0AE7  0022               	movlb	2	; select bank2
 13476  0AE8  194D               	btfsc	(_DimmerLights2^(0+256)+9),2
 13477  0AE9  3001               	movlw	1
 13478  0AEA  0020               	movlb	0	; select bank0
 13479  0AEB  00E5               	movwf	setDimmerLights_Main@clear
 13480                           
 13481                           ;Dimmer_B1.c: 451: } else if (lights == 2) {
 13482  0AEC  2AF7               	goto	l9719
 13483  0AED                     l9715:	
 13484  0AED  0866               	movf	setDimmerLights_Main@lights,w
 13485  0AEE  3A02               	xorlw	2
 13486  0AEF  1D03               	skipz
 13487  0AF0  2AF7               	goto	l9719
 13488                           
 13489                           ;Dimmer_B1.c: 452: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 13490  0AF1  3000               	movlw	0
 13491  0AF2  0022               	movlb	2	; select bank2
 13492  0AF3  193E               	btfsc	(_DimmerLights1^(0+256)+9),2
 13493  0AF4  3001               	movlw	1
 13494  0AF5  0020               	movlb	0	; select bank0
 13495  0AF6  00E5               	movwf	setDimmerLights_Main@clear
 13496  0AF7                     l9719:	
 13497                           
 13498                           ;Dimmer_B1.c: 453: }
 13499                           ;Dimmer_B1.c: 456: if (DimmerLights->Trigger == 1) {
 13500  0AF7  086B               	movf	_DimmerLights,w
 13501  0AF8  3E08               	addlw	8
 13502  0AF9  0086               	movwf	6
 13503  0AFA  3001               	movlw	1	; select bank2/3
 13504  0AFB  0087               	movwf	7
 13505  0AFC  1D01               	btfss	1,2
 13506  0AFD  2B1F               	goto	l9731
 13507                           
 13508                           ;Dimmer_B1.c: 457: if (clear == 1) {
 13509  0AFE  0865               	movf	setDimmerLights_Main@clear,w
 13510  0AFF  3A01               	xorlw	1
 13511  0B00  1D03               	skipz
 13512  0B01  0008               	return
 13513                           
 13514                           ;Dimmer_B1.c: 458: DimmerLights->Trigger = 0;
 13515  0B02  086B               	movf	_DimmerLights,w
 13516  0B03  3E08               	addlw	8
 13517  0B04  0086               	movwf	6
 13518  0B05  3001               	movlw	1	; select bank2/3
 13519  0B06  0087               	movwf	7
 13520  0B07  1101               	bcf	1,2
 13521                           
 13522                           ;Dimmer_B1.c: 459: if (DimmerLights->Switch == 1) {
 13523  0B08  086B               	movf	_DimmerLights,w
 13524  0B09  3E08               	addlw	8
 13525  0B0A  0086               	movwf	6
 13526  0B0B  3001               	movlw	1	; select bank2/3
 13527  0B0C  0087               	movwf	7
 13528  0B0D  1C81               	btfss	1,1
 13529  0B0E  2B12               	goto	l9727
 13530                           
 13531                           ;Dimmer_B1.c: 460: setDimmerLights(lights, 1);
 13532  0B0F  01A4               	clrf	setDimmerLights@status
 13533  0B10  0AA4               	incf	setDimmerLights@status,f
 13534  0B11  2B14               	goto	L9
 13535  0B12                     l9727:	
 13536                           ;Dimmer_B1.c: 461: } else {
 13537                           
 13538                           
 13539                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 0);
 13540  0B12  0020               	movlb	0	; select bank0
 13541  0B13  01A4               	clrf	setDimmerLights@status
 13542  0B14                     L9:	
 13543  0B14  0866               	movf	setDimmerLights_Main@lights,w
 13544  0B15  318C  24D2         	fcall	_setDimmerLights
 13545                           
 13546                           ;Dimmer_B1.c: 463: }
 13547                           ;Dimmer_B1.c: 465: DimmerLights->Clear = 0;
 13548  0B17  0020               	movlb	0	; select bank0
 13549  0B18  086B               	movf	_DimmerLights,w
 13550  0B19  3E09               	addlw	9
 13551  0B1A  0086               	movwf	6
 13552  0B1B  3001               	movlw	1	; select bank2/3
 13553  0B1C  0087               	movwf	7
 13554  0B1D  1101               	bcf	1,2
 13555                           
 13556                           ;Dimmer_B1.c: 467: }
 13557                           ;Dimmer_B1.c: 468: } else {
 13558  0B1E  0008               	return
 13559  0B1F                     l9731:	
 13560                           
 13561                           ;Dimmer_B1.c: 469: if (DimmerLights->TriggerAdj == 1) {
 13562  0B1F  086B               	movf	_DimmerLights,w
 13563  0B20  3E08               	addlw	8
 13564  0B21  0086               	movwf	6
 13565  0B22  3001               	movlw	1	; select bank2/3
 13566  0B23  0087               	movwf	7
 13567  0B24  1E01               	btfss	1,4
 13568  0B25  0008               	return
 13569                           
 13570                           ;Dimmer_B1.c: 470: if (clear == 1) {
 13571  0B26  0865               	movf	setDimmerLights_Main@clear,w
 13572  0B27  3A01               	xorlw	1
 13573  0B28  1D03               	skipz
 13574  0B29  0008               	return
 13575                           
 13576                           ;Dimmer_B1.c: 471: DimmerLights->TriggerAdj = 0;
 13577  0B2A  086B               	movf	_DimmerLights,w
 13578  0B2B  3E08               	addlw	8
 13579  0B2C  0086               	movwf	6
 13580  0B2D  3001               	movlw	1	; select bank2/3
 13581  0B2E  0087               	movwf	7
 13582  0B2F  1201               	bcf	1,4
 13583                           
 13584                           ;Dimmer_B1.c: 472: if (DimmerLights->AdjGo == 1) {
 13585  0B30  086B               	movf	_DimmerLights,w
 13586  0B31  3E08               	addlw	8
 13587  0B32  0086               	movwf	6
 13588  0B33  3001               	movlw	1	; select bank2/3
 13589  0B34  0087               	movwf	7
 13590  0B35  1D81               	btfss	1,3
 13591  0B36  2B46               	goto	l9741
 13592                           
 13593                           ;Dimmer_B1.c: 473: setDimmerLights_Adj(lights, 1);
 13594  0B37  01E2               	clrf	setDimmerLights_Adj@status
 13595  0B38  0AE2               	incf	setDimmerLights_Adj@status,f
 13596  0B39  0866               	movf	setDimmerLights_Main@lights,w
 13597  0B3A  3193  2300  318A   	fcall	_setDimmerLights_Adj
 13598                           
 13599                           ;Dimmer_B1.c: 474: setBuz(1, 100);
 13600  0B3D  3064               	movlw	100
 13601  0B3E  0020               	movlb	0	; select bank0
 13602  0B3F  00A9               	movwf	setBuz@time
 13603  0B40  3000               	movlw	0
 13604  0B41  00AA               	movwf	setBuz@time+1
 13605  0B42  3001               	movlw	1
 13606  0B43  3195  256B         	fcall	_setBuz
 13607                           
 13608                           ;Dimmer_B1.c: 475: } else {
 13609  0B45  0008               	return
 13610  0B46                     l9741:	
 13611                           
 13612                           ;Dimmer_B1.c: 476: setDimmerLights_Adj(lights, 0);
 13613  0B46  0020               	movlb	0	; select bank0
 13614  0B47  01E2               	clrf	setDimmerLights_Adj@status
 13615  0B48  0866               	movf	setDimmerLights_Main@lights,w
 13616  0B49  3193  2300         	fcall	_setDimmerLights_Adj
 13617  0B4B  0008               	return
 13618  0B4C                     __end_of_setDimmerLights_Main:	
 13619                           
 13620                           	psect	text82
 13621  1300                     __ptext82:	
 13622 ;; *************** function _setDimmerLights_Adj *****************
 13623 ;; Defined at:
 13624 ;;		line 655 in file "../src/Dimmer_B1.c"
 13625 ;; Parameters:    Size  Location     Type
 13626 ;;  lights          1    wreg     unsigned char 
 13627 ;;  status          1   66[BANK0 ] unsigned char 
 13628 ;; Auto vars:     Size  Location     Type
 13629 ;;  lights          1   68[BANK0 ] unsigned char 
 13630 ;; Return value:  Size  Location     Type
 13631 ;;		None               void
 13632 ;; Registers used:
 13633 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13634 ;; Tracked objects:
 13635 ;;		On entry : 0/0
 13636 ;;		On exit  : 0/0
 13637 ;;		Unchanged: 0/0
 13638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13639 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13641 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13642 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13643 ;;Total ram usage:        3 bytes
 13644 ;; Hardware stack levels used:    1
 13645 ;; Hardware stack levels required when called:    9
 13646 ;; This function calls:
 13647 ;;		_DimmerLightsPointSelect
 13648 ;;		_setLoad_StatusOff
 13649 ;;		_setRF_DimmerLights
 13650 ;;		_setTxData
 13651 ;; This function is called by:
 13652 ;;		_setDimmerLights_Main
 13653 ;; This function uses a non-reentrant model
 13654 ;;
 13655                           
 13656                           
 13657                           ;psect for function _setDimmerLights_Adj
 13658  1300                     _setDimmerLights_Adj:	
 13659                           
 13660                           ;incstack = 0
 13661                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13662                           ;setDimmerLights_Adj@lights stored from wreg
 13663  1300  0020               	movlb	0	; select bank0
 13664  1301  00E4               	movwf	setDimmerLights_Adj@lights
 13665                           
 13666                           ;Dimmer_B1.c: 656: DimmerLightsPointSelect(lights);
 13667  1302  0864               	movf	setDimmerLights_Adj@lights,w
 13668  1303  319C  242C  3193   	fcall	_DimmerLightsPointSelect
 13669                           
 13670                           ;Dimmer_B1.c: 657: if (status == 1) {
 13671  1306  0020               	movlb	0	; select bank0
 13672  1307  0862               	movf	setDimmerLights_Adj@status,w
 13673  1308  3A01               	xorlw	1
 13674  1309  1D03               	skipz
 13675  130A  2B16               	goto	l9361
 13676                           
 13677                           ;Dimmer_B1.c: 658: DimmerLights->AdjFlag = 1;
 13678  130B  086B               	movf	_DimmerLights,w
 13679  130C  0086               	movwf	6
 13680  130D  3001               	movlw	1	; select bank2/3
 13681  130E  0087               	movwf	7
 13682  130F  1581               	bsf	1,3
 13683                           
 13684                           ;Dimmer_B1.c: 659: DimmerLights->Signal = 1;
 13685  1310  086B               	movf	_DimmerLights,w
 13686  1311  0086               	movwf	6
 13687  1312  3001               	movlw	1	; select bank2/3
 13688  1313  0087               	movwf	7
 13689  1314  1481               	bsf	1,1
 13690                           
 13691                           ;Dimmer_B1.c: 660: } else {
 13692  1315  0008               	return
 13693  1316                     l9361:	
 13694                           
 13695                           ;Dimmer_B1.c: 661: if (DimmerLights->AdjFlag == 1) {
 13696  1316  086B               	movf	_DimmerLights,w
 13697  1317  0086               	movwf	6
 13698  1318  3001               	movlw	1	; select bank2/3
 13699  1319  0087               	movwf	7
 13700  131A  1D81               	btfss	1,3
 13701  131B  0008               	return
 13702                           
 13703                           ;Dimmer_B1.c: 663: DimmerLights->Signal = 0;
 13704  131C  086B               	movf	_DimmerLights,w
 13705  131D  0086               	movwf	6
 13706  131E  3001               	movlw	1	; select bank2/3
 13707  131F  0087               	movwf	7
 13708  1320  1081               	bcf	1,1
 13709                           
 13710                           ;Dimmer_B1.c: 664: DimmerLights->AdjFlag = 0;
 13711  1321  086B               	movf	_DimmerLights,w
 13712  1322  0086               	movwf	6
 13713  1323  3001               	movlw	1	; select bank2/3
 13714  1324  0087               	movwf	7
 13715  1325  1181               	bcf	1,3
 13716                           
 13717                           ;Dimmer_B1.c: 665: setLoad_StatusOff(0, 1);
 13718  1326  01A0               	clrf	setLoad_StatusOff@command
 13719  1327  0AA0               	incf	setLoad_StatusOff@command,f
 13720  1328  3000               	movlw	0
 13721  1329  319E  260A  3193   	fcall	_setLoad_StatusOff
 13722                           
 13723                           ;Dimmer_B1.c: 666: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13724  132C  0020               	movlb	0	; select bank0
 13725  132D  086B               	movf	_DimmerLights,w
 13726  132E  3E04               	addlw	4
 13727  132F  0086               	movwf	6
 13728  1330  3001               	movlw	1	; select bank2/3
 13729  1331  0087               	movwf	7
 13730  1332  0801               	movf	1,w
 13731  1333  00E3               	movwf	??_setDimmerLights_Adj
 13732  1334  086B               	movf	_DimmerLights,w
 13733  1335  3E05               	addlw	5
 13734  1336  0086               	movwf	6
 13735  1337  3001               	movlw	1	; select bank2/3
 13736  1338  0087               	movwf	7
 13737  1339  0863               	movf	??_setDimmerLights_Adj,w
 13738  133A  0081               	movwf	1
 13739                           
 13740                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, 1);
 13741  133B  01DD               	clrf	setRF_DimmerLights@on
 13742  133C  0ADD               	incf	setRF_DimmerLights@on,f
 13743  133D  0864               	movf	setDimmerLights_Adj@lights,w
 13744  133E  3189  211B  3193   	fcall	_setRF_DimmerLights
 13745                           
 13746                           ;Dimmer_B1.c: 675: setTxData();
 13747  1341  318F  2743         	fcall	_setTxData
 13748  1343  0008               	return
 13749  1344                     __end_of_setDimmerLights_Adj:	
 13750                           
 13751                           	psect	text83
 13752  1E0A                     __ptext83:	
 13753 ;; *************** function _setLoad_StatusOff *****************
 13754 ;; Defined at:
 13755 ;;		line 282 in file "../src/OverLoad_B1.c"
 13756 ;; Parameters:    Size  Location     Type
 13757 ;;  lights          1    wreg     unsigned char 
 13758 ;;  command         1    0[BANK0 ] unsigned char 
 13759 ;; Auto vars:     Size  Location     Type
 13760 ;;  lights          1    1[BANK0 ] unsigned char 
 13761 ;; Return value:  Size  Location     Type
 13762 ;;		None               void
 13763 ;; Registers used:
 13764 ;;		wreg, status,2, status,0
 13765 ;; Tracked objects:
 13766 ;;		On entry : 0/0
 13767 ;;		On exit  : 0/0
 13768 ;;		Unchanged: 0/0
 13769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13770 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13773 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13774 ;;Total ram usage:        2 bytes
 13775 ;; Hardware stack levels used:    1
 13776 ;; Hardware stack levels required when called:    5
 13777 ;; This function calls:
 13778 ;;		Nothing
 13779 ;; This function is called by:
 13780 ;;		_setDimmerLights_ERROR
 13781 ;;		_setDimmerLights_Adj
 13782 ;; This function uses a non-reentrant model
 13783 ;;
 13784                           
 13785                           
 13786                           ;psect for function _setLoad_StatusOff
 13787  1E0A                     _setLoad_StatusOff:	
 13788                           
 13789                           ;incstack = 0
 13790                           ; Regs used in _setLoad_StatusOff: [wreg+status,2+status,0]
 13791                           ;setLoad_StatusOff@lights stored from wreg
 13792  1E0A  0020               	movlb	0	; select bank0
 13793  1E0B  00A1               	movwf	setLoad_StatusOff@lights
 13794                           
 13795                           ;OverLoad_B1.c: 283: Load1.StatusOff = command;
 13796  1E0C  0820               	movf	setLoad_StatusOff@command,w
 13797  1E0D  0023               	movlb	3	; select bank3
 13798  1E0E  13A0               	bcf	_Load1^(0+384),7
 13799  1E0F  1D03               	skipz
 13800  1E10  17A0               	bsf	_Load1^(0+384),7
 13801                           
 13802                           ;OverLoad_B1.c: 284: Load1.SafeCount -= 2;
 13803  1E11  3002               	movlw	2
 13804  1E12  02E2               	subwf	(_Load1^(0+384)+66),f
 13805                           
 13806                           ;OverLoad_B1.c: 285: if (lights == 1) {
 13807  1E13  0020               	movlb	0	; select bank0
 13808  1E14  0821               	movf	setLoad_StatusOff@lights,w
 13809  1E15  3A01               	xorlw	1
 13810  1E16  1D03               	skipz
 13811  1E17  2E1A               	goto	l8813
 13812                           
 13813                           ;OverLoad_B1.c: 286: Load1.Lights1Status = 0;
 13814  1E18  0023               	movlb	3	; select bank3
 13815  1E19  01E3               	clrf	(_Load1^(0+384)+67)
 13816  1E1A                     l8813:	
 13817                           
 13818                           ;OverLoad_B1.c: 287: }
 13819                           ;OverLoad_B1.c: 288: if (lights == 2) {
 13820  1E1A  0020               	movlb	0	; select bank0
 13821  1E1B  0821               	movf	setLoad_StatusOff@lights,w
 13822  1E1C  3A02               	xorlw	2
 13823  1E1D  1D03               	skipz
 13824  1E1E  2E21               	goto	l8817
 13825                           
 13826                           ;OverLoad_B1.c: 289: Load1.Lights2Status = 0;
 13827  1E1F  0023               	movlb	3	; select bank3
 13828  1E20  01E4               	clrf	(_Load1^(0+384)+68)
 13829  1E21                     l8817:	
 13830                           
 13831                           ;OverLoad_B1.c: 290: }
 13832                           ;OverLoad_B1.c: 291: if (lights == 3) {
 13833  1E21  0020               	movlb	0	; select bank0
 13834  1E22  0821               	movf	setLoad_StatusOff@lights,w
 13835  1E23  3A03               	xorlw	3
 13836  1E24  1D03               	skipz
 13837  1E25  0008               	return
 13838                           
 13839                           ;OverLoad_B1.c: 292: Load1.Lights3Status = 0;
 13840  1E26  0023               	movlb	3	; select bank3
 13841  1E27  01E5               	clrf	(_Load1^(0+384)+69)
 13842  1E28  0008               	return
 13843  1E29                     __end_of_setLoad_StatusOff:	
 13844                           
 13845                           	psect	text84
 13846  0CD2                     __ptext84:	
 13847 ;; *************** function _setDimmerLights *****************
 13848 ;; Defined at:
 13849 ;;		line 602 in file "../src/Dimmer_B1.c"
 13850 ;; Parameters:    Size  Location     Type
 13851 ;;  lights          1    wreg     unsigned char 
 13852 ;;  status          1    4[BANK0 ] unsigned char 
 13853 ;; Auto vars:     Size  Location     Type
 13854 ;;  lights          1    6[BANK0 ] unsigned char 
 13855 ;; Return value:  Size  Location     Type
 13856 ;;		None               void
 13857 ;; Registers used:
 13858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13859 ;; Tracked objects:
 13860 ;;		On entry : 0/0
 13861 ;;		On exit  : 0/0
 13862 ;;		Unchanged: 0/0
 13863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13864 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13867 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13868 ;;Total ram usage:        3 bytes
 13869 ;; Hardware stack levels used:    1
 13870 ;; Hardware stack levels required when called:    7
 13871 ;; This function calls:
 13872 ;;		_DimmerLightsPointSelect
 13873 ;;		_setLED
 13874 ;;		_setLoad_Count
 13875 ;;		_setLoad_StatusOn
 13876 ;;		_setMemory_GO
 13877 ;; This function is called by:
 13878 ;;		_setDimmerLights_Main
 13879 ;;		_setControl_Lights_Table
 13880 ;; This function uses a non-reentrant model
 13881 ;;
 13882                           
 13883                           
 13884                           ;psect for function _setDimmerLights
 13885  0CD2                     _setDimmerLights:	
 13886                           
 13887                           ;incstack = 0
 13888                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13889                           ;setDimmerLights@lights stored from wreg
 13890  0CD2  0020               	movlb	0	; select bank0
 13891  0CD3  00A6               	movwf	setDimmerLights@lights
 13892                           
 13893                           ;Dimmer_B1.c: 603: DimmerLightsPointSelect(lights);
 13894  0CD4  0826               	movf	setDimmerLights@lights,w
 13895  0CD5  319C  242C  318C   	fcall	_DimmerLightsPointSelect
 13896                           
 13897                           ;Dimmer_B1.c: 604: Dimmer->Load = lights;
 13898  0CD8  0020               	movlb	0	; select bank0
 13899  0CD9  0826               	movf	setDimmerLights@lights,w
 13900  0CDA  00A5               	movwf	??_setDimmerLights
 13901  0CDB  0A76               	incf	_Dimmer,w
 13902  0CDC  0086               	movwf	6
 13903  0CDD  3001               	movlw	1	; select bank2/3
 13904  0CDE  0087               	movwf	7
 13905  0CDF  0825               	movf	??_setDimmerLights,w
 13906  0CE0  0081               	movwf	1
 13907                           
 13908                           ;Dimmer_B1.c: 605: if (status == 1) {
 13909  0CE1  0824               	movf	setDimmerLights@status,w
 13910  0CE2  3A01               	xorlw	1
 13911  0CE3  1D03               	skipz
 13912  0CE4  2D2F               	goto	l8991
 13913                           
 13914                           ;Dimmer_B1.c: 606: DimmerLights->Status = 1;
 13915  0CE5  086B               	movf	_DimmerLights,w
 13916  0CE6  0086               	movwf	6
 13917  0CE7  3001               	movlw	1	; select bank2/3
 13918  0CE8  0087               	movwf	7
 13919  0CE9  1681               	bsf	1,5
 13920                           
 13921                           ;Dimmer_B1.c: 607: setLED(lights, 0);
 13922  0CEA  01A2               	clrf	setLED@command
 13923  0CEB  0826               	movf	setDimmerLights@lights,w
 13924  0CEC  3196  261F  318C   	fcall	_setLED
 13925                           
 13926                           ;Dimmer_B1.c: 609: setLoad_Count(0);
 13927  0CEF  3000               	movlw	0
 13928  0CF0  319B  2318  318C   	fcall	_setLoad_Count
 13929                           
 13930                           ;Dimmer_B1.c: 611: DimmerLights->Signal = 1;
 13931  0CF3  0020               	movlb	0	; select bank0
 13932  0CF4  086B               	movf	_DimmerLights,w
 13933  0CF5  0086               	movwf	6
 13934  0CF6  3001               	movlw	1	; select bank2/3
 13935  0CF7  0087               	movwf	7
 13936  0CF8  1481               	bsf	1,1
 13937                           
 13938                           ;Dimmer_B1.c: 612: DimmerLights->DimmingTimeValue = 7;
 13939  0CF9  3007               	movlw	7
 13940  0CFA  00A5               	movwf	??_setDimmerLights
 13941  0CFB  086B               	movf	_DimmerLights,w
 13942  0CFC  3E02               	addlw	2
 13943  0CFD  0086               	movwf	6
 13944  0CFE  3001               	movlw	1	; select bank2/3
 13945  0CFF  0087               	movwf	7
 13946  0D00  0825               	movf	??_setDimmerLights,w
 13947  0D01  0081               	movwf	1
 13948                           
 13949                           ;Dimmer_B1.c: 614: if (DimmerLights->StatusFlag == 0) {
 13950  0D02  086B               	movf	_DimmerLights,w
 13951  0D03  0086               	movwf	6
 13952  0D04  3001               	movlw	1	; select bank2/3
 13953  0D05  0087               	movwf	7
 13954  0D06  1B01               	btfsc	1,6
 13955  0D07  0008               	return
 13956                           
 13957                           ;Dimmer_B1.c: 615: DimmerLights->StatusFlag = 1;
 13958  0D08  086B               	movf	_DimmerLights,w
 13959  0D09  0086               	movwf	6
 13960  0D0A  3001               	movlw	1	; select bank2/3
 13961  0D0B  0087               	movwf	7
 13962  0D0C  1701               	bsf	1,6
 13963                           
 13964                           ;Dimmer_B1.c: 616: setLoad_StatusOn(lights, 1);
 13965  0D0D  01A0               	clrf	setLoad_StatusOn@command
 13966  0D0E  0AA0               	incf	setLoad_StatusOn@command,f
 13967  0D0F  0826               	movf	setDimmerLights@lights,w
 13968  0D10  319E  26ED  318C   	fcall	_setLoad_StatusOn
 13969                           
 13970                           ;Dimmer_B1.c: 617: setMemory_GO(0);
 13971  0D13  3000               	movlw	0
 13972  0D14  319C  24CF         	fcall	_setMemory_GO
 13973                           
 13974                           ;Dimmer_B1.c: 620: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13975  0D16  0020               	movlb	0	; select bank0
 13976  0D17  086B               	movf	_DimmerLights,w
 13977  0D18  3E05               	addlw	5
 13978  0D19  0086               	movwf	6
 13979  0D1A  3001               	movlw	1	; select bank2/3
 13980  0D1B  0087               	movwf	7
 13981  0D1C  0801               	movf	1,w
 13982  0D1D  00A5               	movwf	??_setDimmerLights
 13983  0D1E  086B               	movf	_DimmerLights,w
 13984  0D1F  3E04               	addlw	4
 13985  0D20  0086               	movwf	6
 13986  0D21  3001               	movlw	1	; select bank2/3
 13987  0D22  0087               	movwf	7
 13988  0D23  0825               	movf	??_setDimmerLights,w
 13989  0D24  0081               	movwf	1
 13990                           
 13991                           ;Dimmer_B1.c: 624: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 13992  0D25  3020               	movlw	32
 13993  0D26  00A5               	movwf	??_setDimmerLights
 13994  0D27  086B               	movf	_DimmerLights,w
 13995  0D28  3E04               	addlw	4
 13996  0D29  0086               	movwf	6
 13997  0D2A  3001               	movlw	1	; select bank2/3
 13998  0D2B  0087               	movwf	7
 13999  0D2C  0825               	movf	??_setDimmerLights,w
 14000  0D2D  0081               	movwf	1
 14001                           
 14002                           ;Dimmer_B1.c: 626: }
 14003                           ;Dimmer_B1.c: 627: } else {
 14004  0D2E  0008               	return
 14005  0D2F                     l8991:	
 14006                           
 14007                           ;Dimmer_B1.c: 628: DimmerLights->Status = 0;
 14008  0D2F  086B               	movf	_DimmerLights,w
 14009  0D30  0086               	movwf	6
 14010  0D31  3001               	movlw	1	; select bank2/3
 14011  0D32  0087               	movwf	7
 14012  0D33  1281               	bcf	1,5
 14013                           
 14014                           ;Dimmer_B1.c: 630: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14015  0D34  086B               	movf	_DimmerLights,w
 14016  0D35  3E06               	addlw	6
 14017  0D36  0086               	movwf	6
 14018  0D37  3001               	movlw	1	; select bank2/3
 14019  0D38  0087               	movwf	7
 14020  0D39  0801               	movf	1,w
 14021  0D3A  00A5               	movwf	??_setDimmerLights
 14022  0D3B  086B               	movf	_DimmerLights,w
 14023  0D3C  3E04               	addlw	4
 14024  0D3D  0086               	movwf	6
 14025  0D3E  3001               	movlw	1	; select bank2/3
 14026  0D3F  0087               	movwf	7
 14027  0D40  0825               	movf	??_setDimmerLights,w
 14028  0D41  0081               	movwf	1
 14029                           
 14030                           ;Dimmer_B1.c: 637: DimmerLights->Signal = 1;
 14031  0D42  086B               	movf	_DimmerLights,w
 14032  0D43  0086               	movwf	6
 14033  0D44  3001               	movlw	1	; select bank2/3
 14034  0D45  0087               	movwf	7
 14035  0D46  1481               	bsf	1,1
 14036                           
 14037                           ;Dimmer_B1.c: 638: DimmerLights->AdjFlag = 0;
 14038  0D47  086B               	movf	_DimmerLights,w
 14039  0D48  0086               	movwf	6
 14040  0D49  3001               	movlw	1	; select bank2/3
 14041  0D4A  0087               	movwf	7
 14042  0D4B  1181               	bcf	1,3
 14043                           
 14044                           ;Dimmer_B1.c: 639: DimmerLights->AdjStatus = 0;
 14045  0D4C  086B               	movf	_DimmerLights,w
 14046  0D4D  0086               	movwf	6
 14047  0D4E  3001               	movlw	1	; select bank2/3
 14048  0D4F  0087               	movwf	7
 14049  0D50  1201               	bcf	1,4
 14050                           
 14051                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 14052  0D51  3007               	movlw	7
 14053  0D52  00A5               	movwf	??_setDimmerLights
 14054  0D53  086B               	movf	_DimmerLights,w
 14055  0D54  3E02               	addlw	2
 14056  0D55  0086               	movwf	6
 14057  0D56  3001               	movlw	1	; select bank2/3
 14058  0D57  0087               	movwf	7
 14059  0D58  0825               	movf	??_setDimmerLights,w
 14060  0D59  0081               	movwf	1
 14061  0D5A  0008               	return
 14062  0D5B                     __end_of_setDimmerLights:	
 14063                           
 14064                           	psect	text85
 14065  1EED                     __ptext85:	
 14066 ;; *************** function _setLoad_StatusOn *****************
 14067 ;; Defined at:
 14068 ;;		line 267 in file "../src/OverLoad_B1.c"
 14069 ;; Parameters:    Size  Location     Type
 14070 ;;  lights          1    wreg     unsigned char 
 14071 ;;  command         1    0[BANK0 ] unsigned char 
 14072 ;; Auto vars:     Size  Location     Type
 14073 ;;  lights          1    1[BANK0 ] unsigned char 
 14074 ;; Return value:  Size  Location     Type
 14075 ;;		None               void
 14076 ;; Registers used:
 14077 ;;		wreg
 14078 ;; Tracked objects:
 14079 ;;		On entry : 0/0
 14080 ;;		On exit  : 0/0
 14081 ;;		Unchanged: 0/0
 14082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14083 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14087 ;;Total ram usage:        2 bytes
 14088 ;; Hardware stack levels used:    1
 14089 ;; Hardware stack levels required when called:    5
 14090 ;; This function calls:
 14091 ;;		Nothing
 14092 ;; This function is called by:
 14093 ;;		_setDimmerLights
 14094 ;; This function uses a non-reentrant model
 14095 ;;
 14096                           
 14097                           
 14098                           ;psect for function _setLoad_StatusOn
 14099  1EED                     _setLoad_StatusOn:	
 14100                           
 14101                           ;incstack = 0
 14102                           ; Regs used in _setLoad_StatusOn: [wreg]
 14103                           ;setLoad_StatusOn@lights stored from wreg
 14104  1EED  0020               	movlb	0	; select bank0
 14105  1EEE  00A1               	movwf	setLoad_StatusOn@lights
 14106                           
 14107                           ;OverLoad_B1.c: 268: Load1.GO = 1;
 14108  1EEF  0023               	movlb	3	; select bank3
 14109  1EF0  14A0               	bsf	_Load1^(0+384),1
 14110                           
 14111                           ;OverLoad_B1.c: 269: Load1.StatusOn = command;
 14112  1EF1  0020               	movlb	0	; select bank0
 14113  1EF2  0820               	movf	setLoad_StatusOn@command,w
 14114  1EF3  0023               	movlb	3	; select bank3
 14115  1EF4  1320               	bcf	_Load1^(0+384),6
 14116  1EF5  1D03               	skipz
 14117  1EF6  1720               	bsf	_Load1^(0+384),6
 14118                           
 14119                           ;OverLoad_B1.c: 271: if (lights == 1) {
 14120  1EF7  0020               	movlb	0	; select bank0
 14121  1EF8  0821               	movf	setLoad_StatusOn@lights,w
 14122  1EF9  3A01               	xorlw	1
 14123  1EFA  1D03               	skipz
 14124  1EFB  2EFF               	goto	l8885
 14125                           
 14126                           ;OverLoad_B1.c: 272: Load1.Lights1Status = 1;
 14127  1EFC  0023               	movlb	3	; select bank3
 14128  1EFD  01E3               	clrf	(_Load1^(0+384)+67)
 14129  1EFE  0AE3               	incf	(_Load1^(0+384)+67),f
 14130  1EFF                     l8885:	
 14131                           
 14132                           ;OverLoad_B1.c: 273: }
 14133                           ;OverLoad_B1.c: 274: if (lights == 2) {
 14134  1EFF  0020               	movlb	0	; select bank0
 14135  1F00  0821               	movf	setLoad_StatusOn@lights,w
 14136  1F01  3A02               	xorlw	2
 14137  1F02  1D03               	skipz
 14138  1F03  2F07               	goto	l8889
 14139                           
 14140                           ;OverLoad_B1.c: 275: Load1.Lights2Status = 1;
 14141  1F04  0023               	movlb	3	; select bank3
 14142  1F05  01E4               	clrf	(_Load1^(0+384)+68)
 14143  1F06  0AE4               	incf	(_Load1^(0+384)+68),f
 14144  1F07                     l8889:	
 14145                           
 14146                           ;OverLoad_B1.c: 276: }
 14147                           ;OverLoad_B1.c: 277: if (lights == 3) {
 14148  1F07  0020               	movlb	0	; select bank0
 14149  1F08  0821               	movf	setLoad_StatusOn@lights,w
 14150  1F09  3A03               	xorlw	3
 14151  1F0A  1D03               	skipz
 14152  1F0B  0008               	return
 14153                           
 14154                           ;OverLoad_B1.c: 278: Load1.Lights3Status = 1;
 14155  1F0C  0023               	movlb	3	; select bank3
 14156  1F0D  01E5               	clrf	(_Load1^(0+384)+69)
 14157  1F0E  0AE5               	incf	(_Load1^(0+384)+69),f
 14158  1F0F  0008               	return
 14159  1F10                     __end_of_setLoad_StatusOn:	
 14160                           
 14161                           	psect	text86
 14162  1B18                     __ptext86:	
 14163 ;; *************** function _setLoad_Count *****************
 14164 ;; Defined at:
 14165 ;;		line 252 in file "../src/OverLoad_B1.c"
 14166 ;; Parameters:    Size  Location     Type
 14167 ;;  command         1    wreg     unsigned char 
 14168 ;; Auto vars:     Size  Location     Type
 14169 ;;  command         1    1[BANK0 ] unsigned char 
 14170 ;; Return value:  Size  Location     Type
 14171 ;;		None               void
 14172 ;; Registers used:
 14173 ;;		wreg
 14174 ;; Tracked objects:
 14175 ;;		On entry : 0/0
 14176 ;;		On exit  : 0/0
 14177 ;;		Unchanged: 0/0
 14178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14181 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14182 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14183 ;;Total ram usage:        2 bytes
 14184 ;; Hardware stack levels used:    1
 14185 ;; Hardware stack levels required when called:    5
 14186 ;; This function calls:
 14187 ;;		Nothing
 14188 ;; This function is called by:
 14189 ;;		_setDimmerLights
 14190 ;; This function uses a non-reentrant model
 14191 ;;
 14192                           
 14193                           
 14194                           ;psect for function _setLoad_Count
 14195  1B18                     _setLoad_Count:	
 14196                           
 14197                           ;incstack = 0
 14198                           ; Regs used in _setLoad_Count: [wreg]
 14199                           ;setLoad_Count@command stored from wreg
 14200  1B18  0020               	movlb	0	; select bank0
 14201  1B19  00A1               	movwf	setLoad_Count@command
 14202                           
 14203                           ;OverLoad_B1.c: 253: Load1.Count = command;
 14204  1B1A  0821               	movf	setLoad_Count@command,w
 14205  1B1B  00A0               	movwf	??_setLoad_Count
 14206  1B1C  0820               	movf	??_setLoad_Count,w
 14207  1B1D  0023               	movlb	3	; select bank3
 14208  1B1E  00DA               	movwf	(_Load1^(0+384)+58)
 14209                           
 14210                           ;OverLoad_B1.c: 254: Load1.SafeCount = command;
 14211  1B1F  0020               	movlb	0	; select bank0
 14212  1B20  0821               	movf	setLoad_Count@command,w
 14213  1B21  00A0               	movwf	??_setLoad_Count
 14214  1B22  0820               	movf	??_setLoad_Count,w
 14215  1B23  0023               	movlb	3	; select bank3
 14216  1B24  00E2               	movwf	(_Load1^(0+384)+66)
 14217  1B25  0008               	return
 14218  1B26                     __end_of_setLoad_Count:	
 14219                           
 14220                           	psect	text87
 14221  161F                     __ptext87:	
 14222 ;; *************** function _setLED *****************
 14223 ;; Defined at:
 14224 ;;		line 70 in file "../src/LED_B1.c"
 14225 ;; Parameters:    Size  Location     Type
 14226 ;;  led             1    wreg     unsigned char 
 14227 ;;  command         1    2[BANK0 ] unsigned char 
 14228 ;; Auto vars:     Size  Location     Type
 14229 ;;  led             1    3[BANK0 ] unsigned char 
 14230 ;; Return value:  Size  Location     Type
 14231 ;;		None               void
 14232 ;; Registers used:
 14233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14234 ;; Tracked objects:
 14235 ;;		On entry : 0/0
 14236 ;;		On exit  : 0/0
 14237 ;;		Unchanged: 0/0
 14238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14239 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14243 ;;Total ram usage:        2 bytes
 14244 ;; Hardware stack levels used:    1
 14245 ;; Hardware stack levels required when called:    6
 14246 ;; This function calls:
 14247 ;;		_LedPointSelect
 14248 ;; This function is called by:
 14249 ;;		_setDimmerLights_ERROR
 14250 ;;		_setDimmerLights
 14251 ;;		_setLED_Initialization
 14252 ;;		_setLoad_Exceptions
 14253 ;;		_setOverTemp_Exceptions
 14254 ;;		_setSw_Initialization
 14255 ;; This function uses a non-reentrant model
 14256 ;;
 14257                           
 14258                           
 14259                           ;psect for function _setLED
 14260  161F                     _setLED:	
 14261                           
 14262                           ;incstack = 0
 14263                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14264                           ;setLED@led stored from wreg
 14265  161F  0020               	movlb	0	; select bank0
 14266  1620  00A3               	movwf	setLED@led
 14267                           
 14268                           ;LED_B1.c: 71: LedPointSelect(led);
 14269  1621  0823               	movf	setLED@led,w
 14270  1622  319D  25B0  3196   	fcall	_LedPointSelect
 14271                           
 14272                           ;LED_B1.c: 72: if (command == 0) {
 14273  1625  0020               	movlb	0	; select bank0
 14274  1626  08A2               	movf	setLED@command,f
 14275  1627  1D03               	skipz
 14276  1628  2E3B               	goto	l8843
 14277                           
 14278                           ;LED_B1.c: 74: if (led == 1) {
 14279  1629  0823               	movf	setLED@led,w
 14280  162A  3A01               	xorlw	1
 14281  162B  1D03               	skipz
 14282  162C  2E2F               	goto	l8835
 14283                           
 14284                           ;LED_B1.c: 78: RA3 = 1;
 14285  162D  158C               	bsf	12,3	;volatile
 14286                           
 14287                           ;LED_B1.c: 80: }
 14288  162E  0008               	return
 14289  162F                     l8835:	
 14290                           
 14291                           ;LED_B1.c: 83: else if (led == 2) {
 14292  162F  0823               	movf	setLED@led,w
 14293  1630  3A02               	xorlw	2
 14294  1631  1D03               	skipz
 14295  1632  2E35               	goto	l8839
 14296                           
 14297                           ;LED_B1.c: 87: RC7 = 1;
 14298  1633  178E               	bsf	14,7	;volatile
 14299                           
 14300                           ;LED_B1.c: 89: }
 14301  1634  0008               	return
 14302  1635                     l8839:	
 14303                           
 14304                           ;LED_B1.c: 101: else if (led == 99) {
 14305  1635  0823               	movf	setLED@led,w
 14306  1636  3A63               	xorlw	99
 14307  1637  1D03               	skipz
 14308  1638  0008               	return
 14309                           
 14310                           ;LED_B1.c: 105: RB5 = 1;
 14311  1639  168D               	bsf	13,5	;volatile
 14312                           
 14313                           ;LED_B1.c: 107: }
 14314                           ;LED_B1.c: 109: } else if (command == 1) {
 14315  163A  0008               	return
 14316  163B                     l8843:	
 14317  163B  0822               	movf	setLED@command,w
 14318  163C  3A01               	xorlw	1
 14319  163D  1D03               	skipz
 14320  163E  2E51               	goto	l8857
 14321                           
 14322                           ;LED_B1.c: 111: if (led == 1) {
 14323  163F  0823               	movf	setLED@led,w
 14324  1640  3A01               	xorlw	1
 14325  1641  1D03               	skipz
 14326  1642  2E45               	goto	l8849
 14327                           
 14328                           ;LED_B1.c: 115: RA3 = 0;
 14329  1643  118C               	bcf	12,3	;volatile
 14330                           
 14331                           ;LED_B1.c: 117: }
 14332  1644  0008               	return
 14333  1645                     l8849:	
 14334                           
 14335                           ;LED_B1.c: 120: else if (led == 2) {
 14336  1645  0823               	movf	setLED@led,w
 14337  1646  3A02               	xorlw	2
 14338  1647  1D03               	skipz
 14339  1648  2E4B               	goto	l8853
 14340                           
 14341                           ;LED_B1.c: 124: RC7 = 0;
 14342  1649  138E               	bcf	14,7	;volatile
 14343                           
 14344                           ;LED_B1.c: 126: }
 14345  164A  0008               	return
 14346  164B                     l8853:	
 14347                           
 14348                           ;LED_B1.c: 138: else if (led == 99) {
 14349  164B  0823               	movf	setLED@led,w
 14350  164C  3A63               	xorlw	99
 14351  164D  1D03               	skipz
 14352  164E  0008               	return
 14353                           
 14354                           ;LED_B1.c: 142: RB5 = 0;
 14355  164F  128D               	bcf	13,5	;volatile
 14356                           
 14357                           ;LED_B1.c: 144: }
 14358                           ;LED_B1.c: 146: } else if (command == 10) {
 14359  1650  0008               	return
 14360  1651                     l8857:	
 14361  1651  0822               	movf	setLED@command,w
 14362  1652  3A0A               	xorlw	10
 14363  1653  1D03               	skipz
 14364  1654  2E73               	goto	l8873
 14365                           
 14366                           ;LED_B1.c: 147: LED->GO = 0;
 14367  1655  0878               	movf	_LED,w
 14368  1656  0086               	movwf	6
 14369  1657  3001               	movlw	1	; select bank2/3
 14370  1658  0087               	movwf	7
 14371  1659  1081               	bcf	1,1
 14372                           
 14373                           ;LED_B1.c: 148: LED->Time = 0;
 14374  165A  0A78               	incf	_LED,w
 14375  165B  0086               	movwf	6
 14376  165C  3001               	movlw	1	; select bank2/3
 14377  165D  0087               	movwf	7
 14378  165E  3000               	movlw	0
 14379  165F  3FC0               	movwi [0]fsr1
 14380  1660  3FC1               	movwi [1]fsr1
 14381                           
 14382                           ;LED_B1.c: 150: if (led == 1) {
 14383  1661  0823               	movf	setLED@led,w
 14384  1662  3A01               	xorlw	1
 14385  1663  1D03               	skipz
 14386  1664  2E67               	goto	l8865
 14387                           
 14388                           ;LED_B1.c: 154: RA3 = 1;
 14389  1665  158C               	bsf	12,3	;volatile
 14390                           
 14391                           ;LED_B1.c: 156: }
 14392  1666  0008               	return
 14393  1667                     l8865:	
 14394                           
 14395                           ;LED_B1.c: 159: else if (led == 2) {
 14396  1667  0823               	movf	setLED@led,w
 14397  1668  3A02               	xorlw	2
 14398  1669  1D03               	skipz
 14399  166A  2E6D               	goto	l8869
 14400                           
 14401                           ;LED_B1.c: 163: RC7 = 1;
 14402  166B  178E               	bsf	14,7	;volatile
 14403                           
 14404                           ;LED_B1.c: 165: }
 14405  166C  0008               	return
 14406  166D                     l8869:	
 14407                           
 14408                           ;LED_B1.c: 177: else if (led == 99) {
 14409  166D  0823               	movf	setLED@led,w
 14410  166E  3A63               	xorlw	99
 14411  166F  1D03               	skipz
 14412  1670  0008               	return
 14413                           
 14414                           ;LED_B1.c: 181: RB5 = 1;
 14415  1671  168D               	bsf	13,5	;volatile
 14416                           
 14417                           ;LED_B1.c: 183: }
 14418                           ;LED_B1.c: 185: } else if (command == 11) {
 14419  1672  0008               	return
 14420  1673                     l8873:	
 14421  1673  0822               	movf	setLED@command,w
 14422  1674  3A0B               	xorlw	11
 14423  1675  1D03               	skipz
 14424  1676  0008               	return
 14425                           
 14426                           ;LED_B1.c: 186: LED->GO = 1;
 14427  1677  0878               	movf	_LED,w
 14428  1678  0086               	movwf	6
 14429  1679  3001               	movlw	1	; select bank2/3
 14430  167A  0087               	movwf	7
 14431  167B  1481               	bsf	1,1
 14432  167C  0008               	return
 14433  167D                     __end_of_setLED:	
 14434                           
 14435                           	psect	text88
 14436  1DB0                     __ptext88:	
 14437 ;; *************** function _LedPointSelect *****************
 14438 ;; Defined at:
 14439 ;;		line 7 in file "../src/LED_B1.c"
 14440 ;; Parameters:    Size  Location     Type
 14441 ;;  led             1    wreg     unsigned char 
 14442 ;; Auto vars:     Size  Location     Type
 14443 ;;  led             1    1[BANK0 ] unsigned char 
 14444 ;; Return value:  Size  Location     Type
 14445 ;;		None               void
 14446 ;; Registers used:
 14447 ;;		wreg
 14448 ;; Tracked objects:
 14449 ;;		On entry : 0/0
 14450 ;;		On exit  : 0/0
 14451 ;;		Unchanged: 0/0
 14452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14454 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14456 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14457 ;;Total ram usage:        2 bytes
 14458 ;; Hardware stack levels used:    1
 14459 ;; Hardware stack levels required when called:    5
 14460 ;; This function calls:
 14461 ;;		Nothing
 14462 ;; This function is called by:
 14463 ;;		_setLED_Initialization
 14464 ;;		_setLED
 14465 ;;		_setLED_Main
 14466 ;; This function uses a non-reentrant model
 14467 ;;
 14468                           
 14469                           
 14470                           ;psect for function _LedPointSelect
 14471  1DB0                     _LedPointSelect:	
 14472                           
 14473                           ;incstack = 0
 14474                           ; Regs used in _LedPointSelect: [wreg]
 14475                           ;LedPointSelect@led stored from wreg
 14476  1DB0  0020               	movlb	0	; select bank0
 14477  1DB1  00A1               	movwf	LedPointSelect@led
 14478                           
 14479                           ;LED_B1.c: 9: if (led == 1) {
 14480  1DB2  0821               	movf	LedPointSelect@led,w
 14481  1DB3  3A01               	xorlw	1
 14482  1DB4  1D03               	skipz
 14483  1DB5  2DBB               	goto	l8607
 14484                           
 14485                           ;LED_B1.c: 10: LED = &VarLED1;
 14486  1DB6  3060               	movlw	_VarLED1& (0+255)
 14487  1DB7  00A0               	movwf	??_LedPointSelect
 14488  1DB8  0820               	movf	??_LedPointSelect,w
 14489  1DB9  00F8               	movwf	_LED
 14490                           
 14491                           ;LED_B1.c: 11: }
 14492  1DBA  0008               	return
 14493  1DBB                     l8607:	
 14494                           
 14495                           ;LED_B1.c: 14: else if (led == 2) {
 14496  1DBB  0821               	movf	LedPointSelect@led,w
 14497  1DBC  3A02               	xorlw	2
 14498  1DBD  1D03               	skipz
 14499  1DBE  2DC4               	goto	l8611
 14500                           
 14501                           ;LED_B1.c: 15: LED = &VarLED2;
 14502  1DBF  3064               	movlw	_VarLED2& (0+255)
 14503  1DC0  00A0               	movwf	??_LedPointSelect
 14504  1DC1  0820               	movf	??_LedPointSelect,w
 14505  1DC2  00F8               	movwf	_LED
 14506                           
 14507                           ;LED_B1.c: 16: }
 14508  1DC3  0008               	return
 14509  1DC4                     l8611:	
 14510                           
 14511                           ;LED_B1.c: 24: else if (led == 99) {
 14512  1DC4  0821               	movf	LedPointSelect@led,w
 14513  1DC5  3A63               	xorlw	99
 14514  1DC6  1D03               	skipz
 14515  1DC7  0008               	return
 14516                           
 14517                           ;LED_B1.c: 25: LED = &VarErrLED;
 14518  1DC8  305C               	movlw	_VarErrLED& (0+255)
 14519  1DC9  00A0               	movwf	??_LedPointSelect
 14520  1DCA  0820               	movf	??_LedPointSelect,w
 14521  1DCB  00F8               	movwf	_LED
 14522  1DCC  0008               	return
 14523  1DCD                     __end_of_LedPointSelect:	
 14524                           
 14525                           	psect	text89
 14526  1D2C                     __ptext89:	
 14527 ;; *************** function _DimmerLights_Close *****************
 14528 ;; Defined at:
 14529 ;;		line 405 in file "../src/Dimmer_B1.c"
 14530 ;; Parameters:    Size  Location     Type
 14531 ;;		None
 14532 ;; Auto vars:     Size  Location     Type
 14533 ;;		None
 14534 ;; Return value:  Size  Location     Type
 14535 ;;		None               void
 14536 ;; Registers used:
 14537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14538 ;; Tracked objects:
 14539 ;;		On entry : 0/0
 14540 ;;		On exit  : 0/0
 14541 ;;		Unchanged: 0/0
 14542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14547 ;;Total ram usage:        0 bytes
 14548 ;; Hardware stack levels used:    1
 14549 ;; Hardware stack levels required when called:    6
 14550 ;; This function calls:
 14551 ;;		_getDimmerLights_StatusFlag
 14552 ;;		_setLoad_GO
 14553 ;;		_setMemory_GO
 14554 ;; This function is called by:
 14555 ;;		_DimmerLights_Main
 14556 ;; This function uses a non-reentrant model
 14557 ;;
 14558                           
 14559                           
 14560                           ;psect for function _DimmerLights_Close
 14561  1D2C                     _DimmerLights_Close:	
 14562                           
 14563                           ;Dimmer_B1.c: 406: if (Dimmer->Detect == 1) {
 14564                           
 14565                           ;incstack = 0
 14566                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14567  1D2C  0876               	movf	_Dimmer,w
 14568  1D2D  0086               	movwf	6
 14569  1D2E  3001               	movlw	1	; select bank2/3
 14570  1D2F  0087               	movwf	7
 14571  1D30  1C01               	btfss	1,0
 14572  1D31  0008               	return
 14573                           
 14574                           ;Dimmer_B1.c: 407: Dimmer->Detect = 0;
 14575  1D32  0876               	movf	_Dimmer,w
 14576  1D33  0086               	movwf	6
 14577  1D34  3001               	movlw	1	; select bank2/3
 14578  1D35  0087               	movwf	7
 14579  1D36  1001               	bcf	1,0
 14580                           
 14581                           ;Dimmer_B1.c: 408: if (getDimmerLights_StatusFlag() == 0) {
 14582  1D37  319B  23B1  319D   	fcall	_getDimmerLights_StatusFlag
 14583  1D3A  3800               	iorlw	0
 14584  1D3B  1D03               	skipz
 14585  1D3C  0008               	return
 14586                           
 14587                           ;Dimmer_B1.c: 409: setLoad_GO(0);
 14588  1D3D  3000               	movlw	0
 14589  1D3E  319A  2231  319D   	fcall	_setLoad_GO
 14590                           
 14591                           ;Dimmer_B1.c: 410: setMemory_GO(1);
 14592  1D41  3001               	movlw	1
 14593  1D42  319C  24CF         	fcall	_setMemory_GO
 14594  1D44  0008               	return
 14595  1D45                     __end_of_DimmerLights_Close:	
 14596                           
 14597                           	psect	text90
 14598  1CCF                     __ptext90:	
 14599 ;; *************** function _setMemory_GO *****************
 14600 ;; Defined at:
 14601 ;;		line 995 in file "../src/MCU_B1.c"
 14602 ;; Parameters:    Size  Location     Type
 14603 ;;  command         1    wreg     unsigned char 
 14604 ;; Auto vars:     Size  Location     Type
 14605 ;;  command         1    2[BANK0 ] unsigned char 
 14606 ;; Return value:  Size  Location     Type
 14607 ;;		None               void
 14608 ;; Registers used:
 14609 ;;		wreg, status,2, status,0
 14610 ;; Tracked objects:
 14611 ;;		On entry : 0/0
 14612 ;;		On exit  : 0/0
 14613 ;;		Unchanged: 0/0
 14614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14616 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14617 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14618 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14619 ;;Total ram usage:        3 bytes
 14620 ;; Hardware stack levels used:    1
 14621 ;; Hardware stack levels required when called:    5
 14622 ;; This function calls:
 14623 ;;		Nothing
 14624 ;; This function is called by:
 14625 ;;		_DimmerLights_Close
 14626 ;;		_setDimmerLights
 14627 ;; This function uses a non-reentrant model
 14628 ;;
 14629                           
 14630                           
 14631                           ;psect for function _setMemory_GO
 14632  1CCF                     _setMemory_GO:	
 14633                           
 14634                           ;incstack = 0
 14635                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 14636                           ;setMemory_GO@command stored from wreg
 14637  1CCF  0020               	movlb	0	; select bank0
 14638  1CD0  00A2               	movwf	setMemory_GO@command
 14639                           
 14640                           ;MCU_B1.c: 996: Memory.GO = command;
 14641  1CD1  0822               	movf	setMemory_GO@command,w
 14642  1CD2  0024               	movlb	4	; select bank4
 14643  1CD3  10C4               	bcf	(_Memory^(0+512)+36),1
 14644  1CD4  1D03               	skipz
 14645  1CD5  14C4               	bsf	(_Memory^(0+512)+36),1
 14646                           
 14647                           ;MCU_B1.c: 997: if (command == 0) {
 14648  1CD6  0020               	movlb	0	; select bank0
 14649  1CD7  08A2               	movf	setMemory_GO@command,f
 14650  1CD8  1D03               	skipz
 14651  1CD9  0008               	return
 14652                           
 14653                           ;MCU_B1.c: 998: Memory.Time = command;
 14654  1CDA  0822               	movf	setMemory_GO@command,w
 14655  1CDB  00A0               	movwf	??_setMemory_GO
 14656  1CDC  01A1               	clrf	??_setMemory_GO+1
 14657  1CDD  0820               	movf	??_setMemory_GO,w
 14658  1CDE  0024               	movlb	4	; select bank4
 14659  1CDF  00C2               	movwf	(_Memory^(0+512)+34)
 14660  1CE0  0020               	movlb	0	; select bank0
 14661  1CE1  0821               	movf	??_setMemory_GO+1,w
 14662  1CE2  0024               	movlb	4	; select bank4
 14663  1CE3  00C3               	movwf	((_Memory+1)^(0+512)+34)
 14664  1CE4  0008               	return
 14665  1CE5                     __end_of_setMemory_GO:	
 14666                           
 14667                           	psect	text91
 14668  1A31                     __ptext91:	
 14669 ;; *************** function _setLoad_GO *****************
 14670 ;; Defined at:
 14671 ;;		line 263 in file "../src/OverLoad_B1.c"
 14672 ;; Parameters:    Size  Location     Type
 14673 ;;  command         1    wreg     unsigned char 
 14674 ;; Auto vars:     Size  Location     Type
 14675 ;;  command         1    0[BANK0 ] unsigned char 
 14676 ;; Return value:  Size  Location     Type
 14677 ;;		None               void
 14678 ;; Registers used:
 14679 ;;		wreg
 14680 ;; Tracked objects:
 14681 ;;		On entry : 0/0
 14682 ;;		On exit  : 0/0
 14683 ;;		Unchanged: 0/0
 14684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14688 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14689 ;;Total ram usage:        1 bytes
 14690 ;; Hardware stack levels used:    1
 14691 ;; Hardware stack levels required when called:    5
 14692 ;; This function calls:
 14693 ;;		Nothing
 14694 ;; This function is called by:
 14695 ;;		_DimmerLights_Close
 14696 ;; This function uses a non-reentrant model
 14697 ;;
 14698                           
 14699                           
 14700                           ;psect for function _setLoad_GO
 14701  1A31                     _setLoad_GO:	
 14702                           
 14703                           ;incstack = 0
 14704                           ; Regs used in _setLoad_GO: [wreg]
 14705                           ;setLoad_GO@command stored from wreg
 14706  1A31  0020               	movlb	0	; select bank0
 14707  1A32  00A0               	movwf	setLoad_GO@command
 14708                           
 14709                           ;OverLoad_B1.c: 264: Load1.GO = command;
 14710  1A33  0820               	movf	setLoad_GO@command,w
 14711  1A34  0023               	movlb	3	; select bank3
 14712  1A35  10A0               	bcf	_Load1^(0+384),1
 14713  1A36  1D03               	skipz
 14714  1A37  14A0               	bsf	_Load1^(0+384),1
 14715  1A38  0008               	return
 14716  1A39                     __end_of_setLoad_GO:	
 14717                           
 14718                           	psect	text92
 14719  1BB1                     __ptext92:	
 14720 ;; *************** function _getDimmerLights_StatusFlag *****************
 14721 ;; Defined at:
 14722 ;;		line 484 in file "../src/Dimmer_B1.c"
 14723 ;; Parameters:    Size  Location     Type
 14724 ;;		None
 14725 ;; Auto vars:     Size  Location     Type
 14726 ;;  Status          1    1[BANK0 ] unsigned char 
 14727 ;; Return value:  Size  Location     Type
 14728 ;;                  1    wreg      unsigned char 
 14729 ;; Registers used:
 14730 ;;		wreg, status,2
 14731 ;; Tracked objects:
 14732 ;;		On entry : 0/0
 14733 ;;		On exit  : 0/0
 14734 ;;		Unchanged: 0/0
 14735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14737 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14739 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14740 ;;Total ram usage:        3 bytes
 14741 ;; Hardware stack levels used:    1
 14742 ;; Hardware stack levels required when called:    5
 14743 ;; This function calls:
 14744 ;;		Nothing
 14745 ;; This function is called by:
 14746 ;;		_DimmerLights_Close
 14747 ;;		_DimmerLights_Exceptions
 14748 ;; This function uses a non-reentrant model
 14749 ;;
 14750                           
 14751                           
 14752                           ;psect for function _getDimmerLights_StatusFlag
 14753  1BB1                     _getDimmerLights_StatusFlag:	
 14754                           
 14755                           ;Dimmer_B1.c: 485: char Status = 0;
 14756                           
 14757                           ;incstack = 0
 14758                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 14759  1BB1  0020               	movlb	0	; select bank0
 14760  1BB2  01A1               	clrf	getDimmerLights_StatusFlag@Status
 14761                           
 14762                           ;Dimmer_B1.c: 492: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 14763  1BB3  01A2               	clrf	_getDimmerLights_StatusFlag$2618
 14764  1BB4  0AA2               	incf	_getDimmerLights_StatusFlag$2618,f
 14765  1BB5  0022               	movlb	2	; select bank2
 14766  1BB6  1F35               	btfss	_DimmerLights1^(0+256),6
 14767  1BB7  1B44               	btfsc	_DimmerLights2^(0+256),6
 14768  1BB8  2BBB               	goto	l8961
 14769  1BB9  0020               	movlb	0	; select bank0
 14770  1BBA  01A2               	clrf	_getDimmerLights_StatusFlag$2618
 14771  1BBB                     l8961:	
 14772  1BBB  0020               	movlb	0	; select bank0
 14773  1BBC  0822               	movf	_getDimmerLights_StatusFlag$2618,w
 14774  1BBD  00A0               	movwf	??_getDimmerLights_StatusFlag
 14775  1BBE  0820               	movf	??_getDimmerLights_StatusFlag,w
 14776  1BBF  00A1               	movwf	getDimmerLights_StatusFlag@Status
 14777                           
 14778                           ;Dimmer_B1.c: 499: return Status;
 14779  1BC0  0821               	movf	getDimmerLights_StatusFlag@Status,w
 14780  1BC1  0008               	return
 14781  1BC2                     __end_of_getDimmerLights_StatusFlag:	
 14782                           
 14783                           	psect	text93
 14784  1CE5                     __ptext93:	
 14785 ;; *************** function _DimmerLights_Initialization *****************
 14786 ;; Defined at:
 14787 ;;		line 343 in file "../src/Dimmer_B1.c"
 14788 ;; Parameters:    Size  Location     Type
 14789 ;;		None
 14790 ;; Auto vars:     Size  Location     Type
 14791 ;;		None
 14792 ;; Return value:  Size  Location     Type
 14793 ;;		None               void
 14794 ;; Registers used:
 14795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14796 ;; Tracked objects:
 14797 ;;		On entry : 0/0
 14798 ;;		On exit  : 0/0
 14799 ;;		Unchanged: 0/0
 14800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14803 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14804 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14805 ;;Total ram usage:        1 bytes
 14806 ;; Hardware stack levels used:    1
 14807 ;; Hardware stack levels required when called:    7
 14808 ;; This function calls:
 14809 ;;		_Dimmer_Initialization
 14810 ;;		_setDimmerLights_Initialization
 14811 ;; This function is called by:
 14812 ;;		_main
 14813 ;; This function uses a non-reentrant model
 14814 ;;
 14815                           
 14816                           
 14817                           ;psect for function _DimmerLights_Initialization
 14818  1CE5                     _DimmerLights_Initialization:	
 14819                           
 14820                           ;Dimmer_B1.c: 346: DimmerLights11 = &DimmerLights1;
 14821                           
 14822                           ;incstack = 0
 14823                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14824  1CE5  3035               	movlw	_DimmerLights1& (0+255)
 14825  1CE6  0020               	movlb	0	; select bank0
 14826  1CE7  00A4               	movwf	??_DimmerLights_Initialization
 14827  1CE8  0824               	movf	??_DimmerLights_Initialization,w
 14828  1CE9  0021               	movlb	1	; select bank1
 14829  1CEA  00D3               	movwf	_DimmerLights11^(0+128)
 14830                           
 14831                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(1);
 14832  1CEB  3001               	movlw	1
 14833  1CEC  3190  206B  319C   	fcall	_setDimmerLights_Initialization
 14834                           
 14835                           ;Dimmer_B1.c: 351: DimmerLights22 = &DimmerLights2;
 14836  1CEF  3044               	movlw	_DimmerLights2& (0+255)
 14837  1CF0  0020               	movlb	0	; select bank0
 14838  1CF1  00A4               	movwf	??_DimmerLights_Initialization
 14839  1CF2  0824               	movf	??_DimmerLights_Initialization,w
 14840  1CF3  0021               	movlb	1	; select bank1
 14841  1CF4  00D4               	movwf	_DimmerLights22^(0+128)
 14842                           
 14843                           ;Dimmer_B1.c: 352: setDimmerLights_Initialization(2);
 14844  1CF5  3002               	movlw	2
 14845  1CF6  3190  206B  319C   	fcall	_setDimmerLights_Initialization
 14846                           
 14847                           ;Dimmer_B1.c: 361: Dimmer_Initialization();
 14848  1CF9  319A  2200         	fcall	_Dimmer_Initialization
 14849  1CFB  0008               	return
 14850  1CFC                     __end_of_DimmerLights_Initialization:	
 14851                           
 14852                           	psect	text94
 14853  106B                     __ptext94:	
 14854 ;; *************** function _setDimmerLights_Initialization *****************
 14855 ;; Defined at:
 14856 ;;		line 366 in file "../src/Dimmer_B1.c"
 14857 ;; Parameters:    Size  Location     Type
 14858 ;;  lights          1    wreg     unsigned char 
 14859 ;; Auto vars:     Size  Location     Type
 14860 ;;  lights          1    3[BANK0 ] unsigned char 
 14861 ;; Return value:  Size  Location     Type
 14862 ;;		None               void
 14863 ;; Registers used:
 14864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14865 ;; Tracked objects:
 14866 ;;		On entry : 0/0
 14867 ;;		On exit  : 0/0
 14868 ;;		Unchanged: 0/0
 14869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14871 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14872 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14873 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14874 ;;Total ram usage:        2 bytes
 14875 ;; Hardware stack levels used:    1
 14876 ;; Hardware stack levels required when called:    6
 14877 ;; This function calls:
 14878 ;;		_DimmerLightsPointSelect
 14879 ;; This function is called by:
 14880 ;;		_DimmerLights_Initialization
 14881 ;; This function uses a non-reentrant model
 14882 ;;
 14883                           
 14884                           
 14885                           ;psect for function _setDimmerLights_Initialization
 14886  106B                     _setDimmerLights_Initialization:	
 14887                           
 14888                           ;incstack = 0
 14889                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14890                           ;setDimmerLights_Initialization@lights stored from wreg
 14891  106B  0020               	movlb	0	; select bank0
 14892  106C  00A3               	movwf	setDimmerLights_Initialization@lights
 14893                           
 14894                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 14895  106D  0823               	movf	setDimmerLights_Initialization@lights,w
 14896  106E  319C  242C         	fcall	_DimmerLightsPointSelect
 14897                           
 14898                           ;Dimmer_B1.c: 369: DimmerLights->Clear = 1;
 14899  1070  0020               	movlb	0	; select bank0
 14900  1071  086B               	movf	_DimmerLights,w
 14901  1072  3E09               	addlw	9
 14902  1073  0086               	movwf	6
 14903  1074  3001               	movlw	1	; select bank2/3
 14904  1075  0087               	movwf	7
 14905  1076  1501               	bsf	1,2
 14906                           
 14907                           ;Dimmer_B1.c: 375: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 14908  1077  3020               	movlw	32
 14909  1078  00A2               	movwf	??_setDimmerLights_Initialization
 14910  1079  086B               	movf	_DimmerLights,w
 14911  107A  3E05               	addlw	5
 14912  107B  0086               	movwf	6
 14913  107C  3001               	movlw	1	; select bank2/3
 14914  107D  0087               	movwf	7
 14915  107E  0822               	movf	??_setDimmerLights_Initialization,w
 14916  107F  0081               	movwf	1
 14917                           
 14918                           ;Dimmer_B1.c: 376: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 14919  1080  303C               	movlw	60
 14920  1081  00A2               	movwf	??_setDimmerLights_Initialization
 14921  1082  086B               	movf	_DimmerLights,w
 14922  1083  3E06               	addlw	6
 14923  1084  0086               	movwf	6
 14924  1085  3001               	movlw	1	; select bank2/3
 14925  1086  0087               	movwf	7
 14926  1087  0822               	movf	??_setDimmerLights_Initialization,w
 14927  1088  0081               	movwf	1
 14928                           
 14929                           ;Dimmer_B1.c: 386: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14930  1089  086B               	movf	_DimmerLights,w
 14931  108A  3E06               	addlw	6
 14932  108B  0086               	movwf	6
 14933  108C  3001               	movlw	1	; select bank2/3
 14934  108D  0087               	movwf	7
 14935  108E  0801               	movf	1,w
 14936  108F  00A2               	movwf	??_setDimmerLights_Initialization
 14937  1090  086B               	movf	_DimmerLights,w
 14938  1091  3E04               	addlw	4
 14939  1092  0086               	movwf	6
 14940  1093  3001               	movlw	1	; select bank2/3
 14941  1094  0087               	movwf	7
 14942  1095  0822               	movf	??_setDimmerLights_Initialization,w
 14943  1096  0081               	movwf	1
 14944  1097  0008               	return
 14945  1098                     __end_of_setDimmerLights_Initialization:	
 14946                           
 14947                           	psect	text95
 14948  1A00                     __ptext95:	
 14949 ;; *************** function _Dimmer_Initialization *****************
 14950 ;; Defined at:
 14951 ;;		line 795 in file "../src/Dimmer_B1.c"
 14952 ;; Parameters:    Size  Location     Type
 14953 ;;		None
 14954 ;; Auto vars:     Size  Location     Type
 14955 ;;		None
 14956 ;; Return value:  Size  Location     Type
 14957 ;;		None               void
 14958 ;; Registers used:
 14959 ;;		wreg
 14960 ;; Tracked objects:
 14961 ;;		On entry : 0/0
 14962 ;;		On exit  : 0/0
 14963 ;;		Unchanged: 0/0
 14964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14968 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14969 ;;Total ram usage:        1 bytes
 14970 ;; Hardware stack levels used:    1
 14971 ;; Hardware stack levels required when called:    5
 14972 ;; This function calls:
 14973 ;;		Nothing
 14974 ;; This function is called by:
 14975 ;;		_DimmerLights_Initialization
 14976 ;; This function uses a non-reentrant model
 14977 ;;
 14978                           
 14979                           
 14980                           ;psect for function _Dimmer_Initialization
 14981  1A00                     _Dimmer_Initialization:	
 14982                           
 14983                           ;Dimmer_B1.c: 797: Dimmer = &Dimmer1;
 14984                           
 14985                           ;incstack = 0
 14986                           ; Regs used in _Dimmer_Initialization: [wreg]
 14987  1A00  3068               	movlw	_Dimmer1& (0+255)
 14988  1A01  0020               	movlb	0	; select bank0
 14989  1A02  00A0               	movwf	??_Dimmer_Initialization
 14990  1A03  0820               	movf	??_Dimmer_Initialization,w
 14991  1A04  00F6               	movwf	_Dimmer
 14992  1A05  0008               	return
 14993  1A06                     __end_of_Dimmer_Initialization:	
 14994                           
 14995                           	psect	text96
 14996  1A29                     __ptext96:	
 14997 ;; *************** function _DelayOff_Main *****************
 14998 ;; Defined at:
 14999 ;;		line 41 in file "../src/DelayOff_B1.c"
 15000 ;; Parameters:    Size  Location     Type
 15001 ;;		None
 15002 ;; Auto vars:     Size  Location     Type
 15003 ;;		None
 15004 ;; Return value:  Size  Location     Type
 15005 ;;		None               void
 15006 ;; Registers used:
 15007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15008 ;; Tracked objects:
 15009 ;;		On entry : 0/0
 15010 ;;		On exit  : 0/0
 15011 ;;		Unchanged: 0/0
 15012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15017 ;;Total ram usage:        0 bytes
 15018 ;; Hardware stack levels used:    1
 15019 ;; Hardware stack levels required when called:   10
 15020 ;; This function calls:
 15021 ;;		_DlyOff_Main
 15022 ;; This function is called by:
 15023 ;;		_main
 15024 ;; This function uses a non-reentrant model
 15025 ;;
 15026                           
 15027                           
 15028                           ;psect for function _DelayOff_Main
 15029  1A29                     _DelayOff_Main:	
 15030                           
 15031                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15032                           
 15033                           ;incstack = 0
 15034                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15035  1A29  3001               	movlw	1
 15036  1A2A  3188  20B0  319A   	fcall	_DlyOff_Main
 15037                           
 15038                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15039  1A2D  3002               	movlw	2
 15040  1A2E  3188  20B0         	fcall	_DlyOff_Main
 15041  1A30  0008               	return
 15042  1A31                     __end_of_DelayOff_Main:	
 15043                           
 15044                           	psect	text97
 15045  08B0                     __ptext97:	
 15046 ;; *************** function _DlyOff_Main *****************
 15047 ;; Defined at:
 15048 ;;		line 62 in file "../src/DelayOff_B1.c"
 15049 ;; Parameters:    Size  Location     Type
 15050 ;;  sw              1    wreg     unsigned char 
 15051 ;; Auto vars:     Size  Location     Type
 15052 ;;  sw              1   68[BANK0 ] unsigned char 
 15053 ;; Return value:  Size  Location     Type
 15054 ;;		None               void
 15055 ;; Registers used:
 15056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15057 ;; Tracked objects:
 15058 ;;		On entry : 0/0
 15059 ;;		On exit  : 0/0
 15060 ;;		Unchanged: 0/0
 15061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15063 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15064 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15065 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15066 ;;Total ram usage:        3 bytes
 15067 ;; Hardware stack levels used:    1
 15068 ;; Hardware stack levels required when called:    9
 15069 ;; This function calls:
 15070 ;;		_DelayOffPointSelect
 15071 ;;		_setBuz
 15072 ;;		_setDimmerLights_Switch
 15073 ;;		_setDimmerLights_Trigger
 15074 ;;		_setRFSW_Status
 15075 ;;		_setRF_DimmerLights
 15076 ;;		_setSw_Status
 15077 ;;		_setTxData
 15078 ;; This function is called by:
 15079 ;;		_DelayOff_Main
 15080 ;; This function uses a non-reentrant model
 15081 ;;
 15082                           
 15083                           
 15084                           ;psect for function _DlyOff_Main
 15085  08B0                     _DlyOff_Main:	
 15086                           
 15087                           ;incstack = 0
 15088                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15089                           ;DlyOff_Main@sw stored from wreg
 15090  08B0  0020               	movlb	0	; select bank0
 15091  08B1  00E4               	movwf	DlyOff_Main@sw
 15092                           
 15093                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15094  08B2  0864               	movf	DlyOff_Main@sw,w
 15095  08B3  319C  2467  3188   	fcall	_DelayOffPointSelect
 15096                           
 15097                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15098  08B6  0020               	movlb	0	; select bank0
 15099  08B7  086A               	movf	_DelayOff,w
 15100  08B8  0086               	movwf	6
 15101  08B9  0187               	clrf	7
 15102  08BA  1C81               	btfss	1,1
 15103  08BB  0008               	return
 15104                           
 15105                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15106  08BC  086A               	movf	_DelayOff,w
 15107  08BD  0086               	movwf	6
 15108  08BE  0187               	clrf	7
 15109  08BF  3001               	movlw	1
 15110  08C0  0781               	addwf	1,f
 15111  08C1  3141               	addfsr 1,1
 15112  08C2  1803               	skipnc
 15113  08C3  0A81               	incf	1,f
 15114                           
 15115                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 15116  08C4  086A               	movf	_DelayOff,w
 15117  08C5  0086               	movwf	6
 15118  08C6  0187               	clrf	7
 15119  08C7  3F40               	moviw [0]fsr1
 15120  08C8  00E2               	movwf	??_DlyOff_Main
 15121  08C9  3F41               	moviw [1]fsr1
 15122  08CA  00E3               	movwf	??_DlyOff_Main+1
 15123  08CB  3016               	movlw	22
 15124  08CC  0263               	subwf	??_DlyOff_Main+1,w
 15125  08CD  3012               	movlw	18
 15126  08CE  1903               	skipnz
 15127  08CF  0262               	subwf	??_DlyOff_Main,w
 15128  08D0  1C03               	skipc
 15129  08D1  0008               	return
 15130                           
 15131                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15132  08D2  086A               	movf	_DelayOff,w
 15133  08D3  0086               	movwf	6
 15134  08D4  0187               	clrf	7
 15135  08D5  3000               	movlw	0
 15136  08D6  3FC0               	movwi [0]fsr1
 15137  08D7  3FC1               	movwi [1]fsr1
 15138                           
 15139                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15140  08D8  3001               	movlw	1
 15141  08D9  00E2               	movwf	??_DlyOff_Main
 15142  08DA  086A               	movf	_DelayOff,w
 15143  08DB  0086               	movwf	6
 15144  08DC  0187               	clrf	7
 15145  08DD  0862               	movf	??_DlyOff_Main,w
 15146  08DE  0781               	addwf	1,f
 15147                           
 15148                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15149  08DF  086A               	movf	_DelayOff,w
 15150  08E0  0086               	movwf	6
 15151  08E1  0187               	clrf	7
 15152  08E2  086A               	movf	_DelayOff,w
 15153  08E3  0084               	movwf	4
 15154  08E4  0185               	clrf	5
 15155  08E5  0800               	movf	0,w
 15156  08E6  0201               	subwf	1,w
 15157  08E7  1C03               	skipc
 15158  08E8  0008               	return
 15159                           
 15160                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15161  08E9  086A               	movf	_DelayOff,w
 15162  08EA  0086               	movwf	6
 15163  08EB  0187               	clrf	7
 15164  08EC  0181               	clrf	1
 15165                           
 15166                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15167  08ED  086A               	movf	_DelayOff,w
 15168  08EE  0086               	movwf	6
 15169  08EF  0187               	clrf	7
 15170  08F0  1081               	bcf	1,1
 15171                           
 15172                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 15173  08F1  01A2               	clrf	setSw_Status@command
 15174  08F2  0864               	movf	DlyOff_Main@sw,w
 15175  08F3  319B  2334  3188   	fcall	_setSw_Status
 15176                           
 15177                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 15178  08F6  0020               	movlb	0	; select bank0
 15179  08F7  01A2               	clrf	setRFSW_Status@command
 15180  08F8  0864               	movf	DlyOff_Main@sw,w
 15181  08F9  319B  230A  3188   	fcall	_setRFSW_Status
 15182                           
 15183                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 15184  08FC  0020               	movlb	0	; select bank0
 15185  08FD  01DD               	clrf	setRF_DimmerLights@on
 15186  08FE  0864               	movf	DlyOff_Main@sw,w
 15187  08FF  3189  211B  3188   	fcall	_setRF_DimmerLights
 15188                           
 15189                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 15190  0902  0020               	movlb	0	; select bank0
 15191  0903  01A2               	clrf	setDimmerLights_Trigger@command
 15192  0904  0AA2               	incf	setDimmerLights_Trigger@command,f
 15193  0905  0864               	movf	DlyOff_Main@sw,w
 15194  0906  319B  2371  3188   	fcall	_setDimmerLights_Trigger
 15195                           
 15196                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 15197  0909  0020               	movlb	0	; select bank0
 15198  090A  01A2               	clrf	setDimmerLights_Switch@command
 15199  090B  0864               	movf	DlyOff_Main@sw,w
 15200  090C  319B  2361  3188   	fcall	_setDimmerLights_Switch
 15201                           
 15202                           ;DelayOff_B1.c: 78: setTxData();
 15203  090F  318F  2743  3188   	fcall	_setTxData
 15204                           
 15205                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 15206  0912  3064               	movlw	100
 15207  0913  0020               	movlb	0	; select bank0
 15208  0914  00A9               	movwf	setBuz@time
 15209  0915  3000               	movlw	0
 15210  0916  00AA               	movwf	setBuz@time+1
 15211  0917  3001               	movlw	1
 15212  0918  3195  256B         	fcall	_setBuz
 15213  091A  0008               	return
 15214  091B                     __end_of_DlyOff_Main:	
 15215                           
 15216                           	psect	text98
 15217  0F43                     __ptext98:	
 15218 ;; *************** function _setTxData *****************
 15219 ;; Defined at:
 15220 ;;		line 186 in file "../src/RF_Control_B1.c"
 15221 ;; Parameters:    Size  Location     Type
 15222 ;;		None
 15223 ;; Auto vars:     Size  Location     Type
 15224 ;;  i               1    0        unsigned char 
 15225 ;; Return value:  Size  Location     Type
 15226 ;;		None               void
 15227 ;; Registers used:
 15228 ;;		wreg, fsr1l, fsr1h
 15229 ;; Tracked objects:
 15230 ;;		On entry : 0/0
 15231 ;;		On exit  : 0/0
 15232 ;;		Unchanged: 0/0
 15233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15236 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15237 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15238 ;;Total ram usage:        1 bytes
 15239 ;; Hardware stack levels used:    1
 15240 ;; Hardware stack levels required when called:    5
 15241 ;; This function calls:
 15242 ;;		Nothing
 15243 ;; This function is called by:
 15244 ;;		_DlyOff_Main
 15245 ;;		_setDimmerLights_Adj
 15246 ;;		_setControl_Lights_Table
 15247 ;;		_setRFSW_Control
 15248 ;;		_setRFSW_AdjControl
 15249 ;;		_Sw_DimmerOnFunc
 15250 ;;		_Sw_DimmerOffFunc
 15251 ;; This function uses a non-reentrant model
 15252 ;;
 15253                           
 15254                           
 15255                           ;psect for function _setTxData
 15256  0F43                     _setTxData:	
 15257                           
 15258                           ;RF_Control_B1.c: 187: char i;
 15259                           ;RF_Control_B1.c: 188: if (RF1.Enable == 1) {
 15260                           
 15261                           ;incstack = 0
 15262                           ; Regs used in _setTxData: [wregfsr1]
 15263  0F43  0021               	movlb	1	; select bank1
 15264  0F44  1C3F               	btfss	_RF1^(0+128),0
 15265  0F45  0008               	return
 15266                           
 15267                           ;RF_Control_B1.c: 190: RF1.TransceiveGO = 1;
 15268  0F46  153F               	bsf	_RF1^(0+128),2
 15269                           
 15270                           ;RF_Control_B1.c: 191: RF1.RunTime = 20;
 15271  0F47  3014               	movlw	20
 15272  0F48  00C6               	movwf	(_RF1^(0+128)+7)
 15273  0F49  3000               	movlw	0
 15274  0F4A  00C7               	movwf	(_RF1^(0+128)+8)
 15275                           
 15276                           ;RF_Control_B1.c: 201: RF_Data[0] = 0x63;
 15277  0F4B  3063               	movlw	99
 15278  0F4C  0020               	movlb	0	; select bank0
 15279  0F4D  00A0               	movwf	??_setTxData
 15280  0F4E  0820               	movf	??_setTxData,w
 15281  0F4F  0022               	movlb	2	; select bank2
 15282  0F50  00A0               	movwf	_RF_Data^(0+256)
 15283                           
 15284                           ;RF_Control_B1.c: 202: RF_Data[1] = 0x02;
 15285  0F51  3002               	movlw	2
 15286  0F52  0020               	movlb	0	; select bank0
 15287  0F53  00A0               	movwf	??_setTxData
 15288  0F54  0820               	movf	??_setTxData,w
 15289  0F55  0022               	movlb	2	; select bank2
 15290  0F56  00A1               	movwf	(_RF_Data^(0+256)+1)
 15291                           
 15292                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15293  0F57  0020               	movlb	0	; select bank0
 15294  0F58  086D               	movf	_product,w
 15295  0F59  0086               	movwf	6
 15296  0F5A  3002               	movlw	2	; select bank4/5
 15297  0F5B  0087               	movwf	7
 15298  0F5C  3002               	movlw	2	; select bank4/5
 15299  0F5D  3F42               	moviw [2]fsr1
 15300  0F5E  0022               	movlb	2	; select bank2
 15301  0F5F  00A2               	movwf	(_RF_Data^(0+256)+2)
 15302                           
 15303                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15304  0F60  0020               	movlb	0	; select bank0
 15305  0F61  086D               	movf	_product,w
 15306  0F62  0086               	movwf	6
 15307  0F63  3002               	movlw	2	; select bank4/5
 15308  0F64  0087               	movwf	7
 15309  0F65  3002               	movlw	2	; select bank4/5
 15310  0F66  3F43               	moviw [3]fsr1
 15311  0F67  0022               	movlb	2	; select bank2
 15312  0F68  00A3               	movwf	(_RF_Data^(0+256)+3)
 15313                           
 15314                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15315  0F69  0020               	movlb	0	; select bank0
 15316  0F6A  086D               	movf	_product,w
 15317  0F6B  0086               	movwf	6
 15318  0F6C  3002               	movlw	2	; select bank4/5
 15319  0F6D  0087               	movwf	7
 15320  0F6E  3002               	movlw	2	; select bank4/5
 15321  0F6F  3F44               	moviw [4]fsr1
 15322  0F70  0022               	movlb	2	; select bank2
 15323  0F71  00A4               	movwf	(_RF_Data^(0+256)+4)
 15324                           
 15325                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15326  0F72  0020               	movlb	0	; select bank0
 15327  0F73  086D               	movf	_product,w
 15328  0F74  0086               	movwf	6
 15329  0F75  3002               	movlw	2	; select bank4/5
 15330  0F76  0087               	movwf	7
 15331  0F77  3002               	movlw	2	; select bank4/5
 15332  0F78  3F45               	moviw [5]fsr1
 15333  0F79  0022               	movlb	2	; select bank2
 15334  0F7A  00A5               	movwf	(_RF_Data^(0+256)+5)
 15335                           
 15336                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15337  0F7B  0020               	movlb	0	; select bank0
 15338  0F7C  086D               	movf	_product,w
 15339  0F7D  0086               	movwf	6
 15340  0F7E  3002               	movlw	2	; select bank4/5
 15341  0F7F  0087               	movwf	7
 15342  0F80  3002               	movlw	2	; select bank4/5
 15343  0F81  3F46               	moviw [6]fsr1
 15344  0F82  0022               	movlb	2	; select bank2
 15345  0F83  00A6               	movwf	(_RF_Data^(0+256)+6)
 15346                           
 15347                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15348  0F84  0020               	movlb	0	; select bank0
 15349  0F85  086D               	movf	_product,w
 15350  0F86  0086               	movwf	6
 15351  0F87  3002               	movlw	2	; select bank4/5
 15352  0F88  0087               	movwf	7
 15353  0F89  3002               	movlw	2	; select bank4/5
 15354  0F8A  3F47               	moviw [7]fsr1
 15355  0F8B  0022               	movlb	2	; select bank2
 15356  0F8C  00A7               	movwf	(_RF_Data^(0+256)+7)
 15357                           
 15358                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15359  0F8D  0020               	movlb	0	; select bank0
 15360  0F8E  086D               	movf	_product,w
 15361  0F8F  0086               	movwf	6
 15362  0F90  3002               	movlw	2	; select bank4/5
 15363  0F91  0087               	movwf	7
 15364  0F92  3002               	movlw	2	; select bank4/5
 15365  0F93  3F48               	moviw [8]fsr1
 15366  0F94  0022               	movlb	2	; select bank2
 15367  0F95  00A8               	movwf	(_RF_Data^(0+256)+8)
 15368                           
 15369                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15370  0F96  0020               	movlb	0	; select bank0
 15371  0F97  086D               	movf	_product,w
 15372  0F98  0086               	movwf	6
 15373  0F99  3002               	movlw	2	; select bank4/5
 15374  0F9A  0087               	movwf	7
 15375  0F9B  3002               	movlw	2	; select bank4/5
 15376  0F9C  3F49               	moviw [9]fsr1
 15377  0F9D  0022               	movlb	2	; select bank2
 15378  0F9E  00A9               	movwf	(_RF_Data^(0+256)+9)
 15379                           
 15380                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15381  0F9F  0020               	movlb	0	; select bank0
 15382  0FA0  086D               	movf	_product,w
 15383  0FA1  0086               	movwf	6
 15384  0FA2  3002               	movlw	2	; select bank4/5
 15385  0FA3  0087               	movwf	7
 15386  0FA4  3002               	movlw	2	; select bank4/5
 15387  0FA5  3F4A               	moviw [10]fsr1
 15388  0FA6  0022               	movlb	2	; select bank2
 15389  0FA7  00AA               	movwf	(_RF_Data^(0+256)+10)
 15390                           
 15391                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15392  0FA8  0020               	movlb	0	; select bank0
 15393  0FA9  086D               	movf	_product,w
 15394  0FAA  0086               	movwf	6
 15395  0FAB  3002               	movlw	2	; select bank4/5
 15396  0FAC  0087               	movwf	7
 15397  0FAD  3002               	movlw	2	; select bank4/5
 15398  0FAE  3F4B               	moviw [11]fsr1
 15399  0FAF  0022               	movlb	2	; select bank2
 15400  0FB0  00AB               	movwf	(_RF_Data^(0+256)+11)
 15401                           
 15402                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15403  0FB1  0020               	movlb	0	; select bank0
 15404  0FB2  086D               	movf	_product,w
 15405  0FB3  0086               	movwf	6
 15406  0FB4  3002               	movlw	2	; select bank4/5
 15407  0FB5  0087               	movwf	7
 15408  0FB6  3002               	movlw	2	; select bank4/5
 15409  0FB7  3F4C               	moviw [12]fsr1
 15410  0FB8  0022               	movlb	2	; select bank2
 15411  0FB9  00AC               	movwf	(_RF_Data^(0+256)+12)
 15412                           
 15413                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15414  0FBA  0020               	movlb	0	; select bank0
 15415  0FBB  086D               	movf	_product,w
 15416  0FBC  0086               	movwf	6
 15417  0FBD  3002               	movlw	2	; select bank4/5
 15418  0FBE  0087               	movwf	7
 15419  0FBF  3002               	movlw	2	; select bank4/5
 15420  0FC0  3F4D               	moviw [13]fsr1
 15421  0FC1  0022               	movlb	2	; select bank2
 15422  0FC2  00AD               	movwf	(_RF_Data^(0+256)+13)
 15423                           
 15424                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15425  0FC3  0020               	movlb	0	; select bank0
 15426  0FC4  086D               	movf	_product,w
 15427  0FC5  0086               	movwf	6
 15428  0FC6  3002               	movlw	2	; select bank4/5
 15429  0FC7  0087               	movwf	7
 15430  0FC8  3002               	movlw	2	; select bank4/5
 15431  0FC9  3F4E               	moviw [14]fsr1
 15432  0FCA  0022               	movlb	2	; select bank2
 15433  0FCB  00AE               	movwf	(_RF_Data^(0+256)+14)
 15434                           
 15435                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15436  0FCC  0020               	movlb	0	; select bank0
 15437  0FCD  086D               	movf	_product,w
 15438  0FCE  0086               	movwf	6
 15439  0FCF  3002               	movlw	2	; select bank4/5
 15440  0FD0  0087               	movwf	7
 15441  0FD1  3002               	movlw	2	; select bank4/5
 15442  0FD2  3F4F               	moviw [15]fsr1
 15443  0FD3  0022               	movlb	2	; select bank2
 15444  0FD4  00AF               	movwf	(_RF_Data^(0+256)+15)
 15445                           
 15446                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15447  0FD5  0020               	movlb	0	; select bank0
 15448  0FD6  086D               	movf	_product,w
 15449  0FD7  0086               	movwf	6
 15450  0FD8  3002               	movlw	2	; select bank4/5
 15451  0FD9  0087               	movwf	7
 15452  0FDA  3002               	movlw	2	; select bank4/5
 15453  0FDB  3F50               	moviw [16]fsr1
 15454  0FDC  0022               	movlb	2	; select bank2
 15455  0FDD  00B0               	movwf	(_RF_Data^(0+256)+16)
 15456                           
 15457                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15458  0FDE  0020               	movlb	0	; select bank0
 15459  0FDF  086D               	movf	_product,w
 15460  0FE0  0086               	movwf	6
 15461  0FE1  3002               	movlw	2	; select bank4/5
 15462  0FE2  0087               	movwf	7
 15463  0FE3  3002               	movlw	2	; select bank4/5
 15464  0FE4  3F51               	moviw [17]fsr1
 15465  0FE5  0022               	movlb	2	; select bank2
 15466  0FE6  00B1               	movwf	(_RF_Data^(0+256)+17)
 15467                           
 15468                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15469  0FE7  0020               	movlb	0	; select bank0
 15470  0FE8  086D               	movf	_product,w
 15471  0FE9  0086               	movwf	6
 15472  0FEA  3002               	movlw	2	; select bank4/5
 15473  0FEB  0087               	movwf	7
 15474  0FEC  3002               	movlw	2	; select bank4/5
 15475  0FED  3F52               	moviw [18]fsr1
 15476  0FEE  0022               	movlb	2	; select bank2
 15477  0FEF  00B2               	movwf	(_RF_Data^(0+256)+18)
 15478                           
 15479                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15480  0FF0  0020               	movlb	0	; select bank0
 15481  0FF1  086D               	movf	_product,w
 15482  0FF2  0086               	movwf	6
 15483  0FF3  3002               	movlw	2	; select bank4/5
 15484  0FF4  0087               	movwf	7
 15485  0FF5  3002               	movlw	2	; select bank4/5
 15486  0FF6  3F53               	moviw [19]fsr1
 15487  0FF7  0022               	movlb	2	; select bank2
 15488  0FF8  00B3               	movwf	(_RF_Data^(0+256)+19)
 15489                           
 15490                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15491  0FF9  30D2               	movlw	210
 15492  0FFA  0020               	movlb	0	; select bank0
 15493  0FFB  00A0               	movwf	??_setTxData
 15494  0FFC  0820               	movf	??_setTxData,w
 15495  0FFD  0022               	movlb	2	; select bank2
 15496  0FFE  00B4               	movwf	(_RF_Data^(0+256)+20)
 15497  0FFF  0008               	return
 15498  1000                     __end_of_setTxData:	
 15499                           
 15500                           	psect	text99
 15501  1B34                     __ptext99:	
 15502 ;; *************** function _setSw_Status *****************
 15503 ;; Defined at:
 15504 ;;		line 111 in file "../src/Switch_B1.c"
 15505 ;; Parameters:    Size  Location     Type
 15506 ;;  sw              1    wreg     unsigned char 
 15507 ;;  command         1    2[BANK0 ] unsigned char 
 15508 ;; Auto vars:     Size  Location     Type
 15509 ;;  sw              1    3[BANK0 ] unsigned char 
 15510 ;; Return value:  Size  Location     Type
 15511 ;;		None               void
 15512 ;; Registers used:
 15513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15514 ;; Tracked objects:
 15515 ;;		On entry : 0/0
 15516 ;;		On exit  : 0/0
 15517 ;;		Unchanged: 0/0
 15518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15519 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15522 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15523 ;;Total ram usage:        2 bytes
 15524 ;; Hardware stack levels used:    1
 15525 ;; Hardware stack levels required when called:    6
 15526 ;; This function calls:
 15527 ;;		_SwPointSelect
 15528 ;; This function is called by:
 15529 ;;		_DlyOff_Main
 15530 ;;		_setDimmerLights_ERROR
 15531 ;;		_setControl_Lights_Table
 15532 ;;		_setRFSW_Control
 15533 ;; This function uses a non-reentrant model
 15534 ;;
 15535                           
 15536                           
 15537                           ;psect for function _setSw_Status
 15538  1B34                     _setSw_Status:	
 15539                           
 15540                           ;incstack = 0
 15541                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15542                           ;setSw_Status@sw stored from wreg
 15543  1B34  0020               	movlb	0	; select bank0
 15544  1B35  00A3               	movwf	setSw_Status@sw
 15545                           
 15546                           ;Switch_B1.c: 112: SwPointSelect(sw);
 15547  1B36  0823               	movf	setSw_Status@sw,w
 15548  1B37  319C  247B         	fcall	_SwPointSelect
 15549                           
 15550                           ;Switch_B1.c: 113: Sw->Status = command;
 15551  1B39  0020               	movlb	0	; select bank0
 15552  1B3A  086C               	movf	_Sw,w
 15553  1B3B  0086               	movwf	6
 15554  1B3C  3001               	movlw	1	; select bank2/3
 15555  1B3D  0087               	movwf	7
 15556  1B3E  0822               	movf	setSw_Status@command,w
 15557  1B3F  1301               	bcf	1,6
 15558  1B40  1D03               	skipz
 15559  1B41  1701               	bsf	1,6
 15560  1B42  0008               	return
 15561  1B43                     __end_of_setSw_Status:	
 15562                           
 15563                           	psect	text100
 15564  1C7B                     __ptext100:	
 15565 ;; *************** function _SwPointSelect *****************
 15566 ;; Defined at:
 15567 ;;		line 21 in file "../src/Switch_B1.c"
 15568 ;; Parameters:    Size  Location     Type
 15569 ;;  sw              1    wreg     unsigned char 
 15570 ;; Auto vars:     Size  Location     Type
 15571 ;;  sw              1    1[BANK0 ] unsigned char 
 15572 ;; Return value:  Size  Location     Type
 15573 ;;		None               void
 15574 ;; Registers used:
 15575 ;;		wreg
 15576 ;; Tracked objects:
 15577 ;;		On entry : 0/0
 15578 ;;		On exit  : 0/0
 15579 ;;		Unchanged: 0/0
 15580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15583 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15584 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15585 ;;Total ram usage:        2 bytes
 15586 ;; Hardware stack levels used:    1
 15587 ;; Hardware stack levels required when called:    5
 15588 ;; This function calls:
 15589 ;;		Nothing
 15590 ;; This function is called by:
 15591 ;;		_setSw_Enable
 15592 ;;		_setSw_Status
 15593 ;;		_setSw_Main
 15594 ;;		_Sw_Detect
 15595 ;; This function uses a non-reentrant model
 15596 ;;
 15597                           
 15598                           
 15599                           ;psect for function _SwPointSelect
 15600  1C7B                     _SwPointSelect:	
 15601                           
 15602                           ;incstack = 0
 15603                           ; Regs used in _SwPointSelect: [wreg]
 15604                           ;SwPointSelect@sw stored from wreg
 15605  1C7B  0020               	movlb	0	; select bank0
 15606  1C7C  00A1               	movwf	SwPointSelect@sw
 15607                           
 15608                           ;Switch_B1.c: 24: if (sw == 1) {
 15609  1C7D  0821               	movf	SwPointSelect@sw,w
 15610  1C7E  3A01               	xorlw	1
 15611  1C7F  1D03               	skipz
 15612  1C80  2C86               	goto	l8625
 15613                           
 15614                           ;Switch_B1.c: 25: Sw = &Sw1;
 15615  1C81  3053               	movlw	_Sw1& (0+255)
 15616  1C82  00A0               	movwf	??_SwPointSelect
 15617  1C83  0820               	movf	??_SwPointSelect,w
 15618  1C84  00EC               	movwf	_Sw
 15619                           
 15620                           ;Switch_B1.c: 26: }
 15621  1C85  0008               	return
 15622  1C86                     l8625:	
 15623                           
 15624                           ;Switch_B1.c: 29: else if (sw == 2) {
 15625  1C86  0821               	movf	SwPointSelect@sw,w
 15626  1C87  3A02               	xorlw	2
 15627  1C88  1D03               	skipz
 15628  1C89  0008               	return
 15629                           
 15630                           ;Switch_B1.c: 30: Sw = &Sw2;
 15631  1C8A  30E6               	movlw	_Sw2& (0+255)
 15632  1C8B  00A0               	movwf	??_SwPointSelect
 15633  1C8C  0820               	movf	??_SwPointSelect,w
 15634  1C8D  00EC               	movwf	_Sw
 15635  1C8E  0008               	return
 15636  1C8F                     __end_of_SwPointSelect:	
 15637                           
 15638                           	psect	text101
 15639  091B                     __ptext101:	
 15640 ;; *************** function _setRF_DimmerLights *****************
 15641 ;; Defined at:
 15642 ;;		line 452 in file "../src/RF_Control_B1.c"
 15643 ;; Parameters:    Size  Location     Type
 15644 ;;  lights          1    wreg     unsigned char 
 15645 ;;  on              1   61[BANK0 ] unsigned char 
 15646 ;; Auto vars:     Size  Location     Type
 15647 ;;  lights          1   65[BANK0 ] unsigned char 
 15648 ;;  status          1   64[BANK0 ] unsigned char 
 15649 ;; Return value:  Size  Location     Type
 15650 ;;		None               void
 15651 ;; Registers used:
 15652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15653 ;; Tracked objects:
 15654 ;;		On entry : 0/0
 15655 ;;		On exit  : 0/0
 15656 ;;		Unchanged: 0/0
 15657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15658 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15659 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15660 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15661 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15662 ;;Total ram usage:        5 bytes
 15663 ;; Hardware stack levels used:    1
 15664 ;; Hardware stack levels required when called:    8
 15665 ;; This function calls:
 15666 ;;		_setPercentValue
 15667 ;; This function is called by:
 15668 ;;		_DlyOff_Main
 15669 ;;		_setDimmerLights_Adj
 15670 ;;		_setRFSW_Control
 15671 ;;		_Sw_DimmerOnFunc
 15672 ;;		_Sw_DimmerOffFunc
 15673 ;; This function uses a non-reentrant model
 15674 ;;
 15675                           
 15676                           
 15677                           ;psect for function _setRF_DimmerLights
 15678  091B                     _setRF_DimmerLights:	
 15679                           
 15680                           ;incstack = 0
 15681                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15682                           ;setRF_DimmerLights@lights stored from wreg
 15683  091B  0020               	movlb	0	; select bank0
 15684  091C  00E1               	movwf	setRF_DimmerLights@lights
 15685                           
 15686                           ;RF_Control_B1.c: 453: char status;
 15687                           ;RF_Control_B1.c: 454: status = 1;
 15688  091D  01E0               	clrf	setRF_DimmerLights@status
 15689  091E  0AE0               	incf	setRF_DimmerLights@status,f
 15690                           
 15691                           ;RF_Control_B1.c: 455: status <<= (lights - 1);
 15692  091F  0861               	movf	setRF_DimmerLights@lights,w
 15693  0920  3EFF               	addlw	-1
 15694  0921  0A89               	incf	9,f
 15695  0922  2925               	goto	u8810
 15696  0923                     u8815:	
 15697  0923  1003               	clrc
 15698  0924  0DE0               	rlf	setRF_DimmerLights@status,f
 15699  0925                     u8810:	
 15700  0925  3EFF               	addlw	-1
 15701  0926  1D03               	skipz
 15702  0927  2923               	goto	u8815
 15703                           
 15704                           ;RF_Control_B1.c: 456: product->Data[11]=lights;
 15705  0928  0861               	movf	setRF_DimmerLights@lights,w
 15706  0929  00DE               	movwf	??_setRF_DimmerLights
 15707  092A  086D               	movf	_product,w
 15708  092B  3E0B               	addlw	11
 15709  092C  0086               	movwf	6
 15710  092D  3002               	movlw	2	; select bank4/5
 15711  092E  0087               	movwf	7
 15712  092F  085E               	movf	??_setRF_DimmerLights,w
 15713  0930  0081               	movwf	1
 15714                           
 15715                           ;RF_Control_B1.c: 459: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 15716  0931  3020               	movlw	32
 15717  0932  3188  2001  3189   	fcall	_setPercentValue
 15718  0935  0020               	movlb	0	; select bank0
 15719  0936  00DE               	movwf	??_setRF_DimmerLights
 15720  0937  0861               	movf	setRF_DimmerLights@lights,w
 15721  0938  3E14               	addlw	20
 15722  0939  076D               	addwf	_product,w
 15723  093A  00DF               	movwf	??_setRF_DimmerLights+1
 15724  093B  085F               	movf	??_setRF_DimmerLights+1,w
 15725  093C  0086               	movwf	6
 15726  093D  3002               	movlw	2	; select bank4/5
 15727  093E  0087               	movwf	7
 15728  093F  085E               	movf	??_setRF_DimmerLights,w
 15729  0940  0081               	movwf	1
 15730                           
 15731                           ;RF_Control_B1.c: 462: product->Data[9]=product->Data[20 + lights];
 15732  0941  0861               	movf	setRF_DimmerLights@lights,w
 15733  0942  3E14               	addlw	20
 15734  0943  076D               	addwf	_product,w
 15735  0944  00DE               	movwf	??_setRF_DimmerLights
 15736  0945  085E               	movf	??_setRF_DimmerLights,w
 15737  0946  0086               	movwf	6
 15738  0947  3002               	movlw	2	; select bank4/5
 15739  0948  0087               	movwf	7
 15740  0949  0801               	movf	1,w
 15741  094A  00DF               	movwf	??_setRF_DimmerLights+1
 15742  094B  086D               	movf	_product,w
 15743  094C  3E09               	addlw	9
 15744  094D  0086               	movwf	6
 15745  094E  3002               	movlw	2	; select bank4/5
 15746  094F  0087               	movwf	7
 15747  0950  085F               	movf	??_setRF_DimmerLights+1,w
 15748  0951  0081               	movwf	1
 15749                           
 15750                           ;RF_Control_B1.c: 463: product->Data[17]=product->Data[26 + lights];
 15751  0952  0861               	movf	setRF_DimmerLights@lights,w
 15752  0953  3E1A               	addlw	26
 15753  0954  076D               	addwf	_product,w
 15754  0955  00DE               	movwf	??_setRF_DimmerLights
 15755  0956  085E               	movf	??_setRF_DimmerLights,w
 15756  0957  0086               	movwf	6
 15757  0958  3002               	movlw	2	; select bank4/5
 15758  0959  0087               	movwf	7
 15759  095A  0801               	movf	1,w
 15760  095B  00DF               	movwf	??_setRF_DimmerLights+1
 15761  095C  086D               	movf	_product,w
 15762  095D  3E11               	addlw	17
 15763  095E  0086               	movwf	6
 15764  095F  3002               	movlw	2	; select bank4/5
 15765  0960  0087               	movwf	7
 15766  0961  085F               	movf	??_setRF_DimmerLights+1,w
 15767  0962  0081               	movwf	1
 15768                           
 15769                           ;RF_Control_B1.c: 464: if (on == 1) {
 15770  0963  085D               	movf	setRF_DimmerLights@on,w
 15771  0964  3A01               	xorlw	1
 15772  0965  1D03               	skipz
 15773  0966  2977               	goto	l8725
 15774                           
 15775                           ;RF_Control_B1.c: 465: product->Data[15]=(product->Data[15] | status);
 15776  0967  086D               	movf	_product,w
 15777  0968  3E0F               	addlw	15
 15778  0969  0086               	movwf	6
 15779  096A  3002               	movlw	2	; select bank4/5
 15780  096B  0087               	movwf	7
 15781  096C  0801               	movf	1,w
 15782  096D  0460               	iorwf	setRF_DimmerLights@status,w
 15783  096E  00DE               	movwf	??_setRF_DimmerLights
 15784  096F  086D               	movf	_product,w
 15785  0970  3E0F               	addlw	15
 15786  0971  0086               	movwf	6
 15787  0972  3002               	movlw	2	; select bank4/5
 15788  0973  0087               	movwf	7
 15789  0974  085E               	movf	??_setRF_DimmerLights,w
 15790  0975  0081               	movwf	1
 15791                           
 15792                           ;RF_Control_B1.c: 466: } else {
 15793  0976  0008               	return
 15794  0977                     l8725:	
 15795                           
 15796                           ;RF_Control_B1.c: 467: product->Data[15]=(product->Data[15]&(~status));
 15797  0977  086D               	movf	_product,w
 15798  0978  3E0F               	addlw	15
 15799  0979  0086               	movwf	6
 15800  097A  3002               	movlw	2	; select bank4/5
 15801  097B  0087               	movwf	7
 15802  097C  0960               	comf	setRF_DimmerLights@status,w
 15803  097D  0501               	andwf	1,w
 15804  097E  00DE               	movwf	??_setRF_DimmerLights
 15805  097F  086D               	movf	_product,w
 15806  0980  3E0F               	addlw	15
 15807  0981  0086               	movwf	6
 15808  0982  3002               	movlw	2	; select bank4/5
 15809  0983  0087               	movwf	7
 15810  0984  085E               	movf	??_setRF_DimmerLights,w
 15811  0985  0081               	movwf	1
 15812  0986  0008               	return
 15813  0987                     __end_of_setRF_DimmerLights:	
 15814                           
 15815                           	psect	text102
 15816  0801                     __ptext102:	
 15817 ;; *************** function _setPercentValue *****************
 15818 ;; Defined at:
 15819 ;;		line 777 in file "../src/Dimmer_B1.c"
 15820 ;; Parameters:    Size  Location     Type
 15821 ;;  value           1    wreg     unsigned char 
 15822 ;; Auto vars:     Size  Location     Type
 15823 ;;  value           1   57[BANK0 ] unsigned char 
 15824 ;;  i               3   58[BANK0 ] float 
 15825 ;; Return value:  Size  Location     Type
 15826 ;;                  1    wreg      unsigned char 
 15827 ;; Registers used:
 15828 ;;		wreg, status,2, status,0, pclath, cstack
 15829 ;; Tracked objects:
 15830 ;;		On entry : 0/0
 15831 ;;		On exit  : 0/0
 15832 ;;		Unchanged: 0/0
 15833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15835 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15837 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15838 ;;Total ram usage:        4 bytes
 15839 ;; Hardware stack levels used:    1
 15840 ;; Hardware stack levels required when called:    7
 15841 ;; This function calls:
 15842 ;;		___awtoft
 15843 ;;		___ftdiv
 15844 ;;		___fttol
 15845 ;; This function is called by:
 15846 ;;		_Flash_Memory_Initialization
 15847 ;;		_setRF_DimmerLights
 15848 ;; This function uses a non-reentrant model
 15849 ;;
 15850                           
 15851                           
 15852                           ;psect for function _setPercentValue
 15853  0801                     _setPercentValue:	
 15854                           
 15855                           ;incstack = 0
 15856                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15857                           ;setPercentValue@value stored from wreg
 15858  0801  0020               	movlb	0	; select bank0
 15859  0802  00D9               	movwf	setPercentValue@value
 15860                           
 15861                           ;Dimmer_B1.c: 779: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 15862  0803  3000               	movlw	0
 15863  0804  00DA               	movwf	setPercentValue@i
 15864  0805  30E0               	movlw	224
 15865  0806  00DB               	movwf	setPercentValue@i+1
 15866  0807  3041               	movlw	65
 15867  0808  00DC               	movwf	setPercentValue@i+2
 15868                           
 15869                           ;Dimmer_B1.c: 780: i /= 100;
 15870  0809  3000               	movlw	0
 15871  080A  00AE               	movwf	___ftdiv@f2
 15872  080B  30C8               	movlw	200
 15873  080C  00AF               	movwf	___ftdiv@f2+1
 15874  080D  3042               	movlw	66
 15875  080E  00B0               	movwf	___ftdiv@f2+2
 15876  080F  085A               	movf	setPercentValue@i,w
 15877  0810  00B1               	movwf	___ftdiv@f1
 15878  0811  085B               	movf	setPercentValue@i+1,w
 15879  0812  00B2               	movwf	___ftdiv@f1+1
 15880  0813  085C               	movf	setPercentValue@i+2,w
 15881  0814  00B3               	movwf	___ftdiv@f1+2
 15882  0815  318D  25E6  3188   	fcall	___ftdiv
 15883  0818  0020               	movlb	0	; select bank0
 15884  0819  082E               	movf	?___ftdiv,w
 15885  081A  00DA               	movwf	setPercentValue@i
 15886  081B  082F               	movf	?___ftdiv+1,w
 15887  081C  00DB               	movwf	setPercentValue@i+1
 15888  081D  0830               	movf	?___ftdiv+2,w
 15889  081E  00DC               	movwf	setPercentValue@i+2
 15890                           
 15891                           ;Dimmer_B1.c: 781: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 15892  081F  0859               	movf	setPercentValue@value,w
 15893  0820  3EE0               	addlw	224
 15894  0821  00A8               	movwf	___awtoft@c
 15895  0822  30FF               	movlw	255
 15896  0823  1803               	skipnc
 15897  0824  3000               	movlw	0
 15898  0825  00A9               	movwf	___awtoft@c+1
 15899  0826  319E  26A9  3188   	fcall	___awtoft
 15900  0829  0020               	movlb	0	; select bank0
 15901  082A  0828               	movf	?___awtoft,w
 15902  082B  00B1               	movwf	___ftdiv@f1
 15903  082C  0829               	movf	?___awtoft+1,w
 15904  082D  00B2               	movwf	___ftdiv@f1+1
 15905  082E  082A               	movf	?___awtoft+2,w
 15906  082F  00B3               	movwf	___ftdiv@f1+2
 15907  0830  085A               	movf	setPercentValue@i,w
 15908  0831  00AE               	movwf	___ftdiv@f2
 15909  0832  085B               	movf	setPercentValue@i+1,w
 15910  0833  00AF               	movwf	___ftdiv@f2+1
 15911  0834  085C               	movf	setPercentValue@i+2,w
 15912  0835  00B0               	movwf	___ftdiv@f2+2
 15913  0836  318D  25E6  3188   	fcall	___ftdiv
 15914  0839  0020               	movlb	0	; select bank0
 15915  083A  082E               	movf	?___ftdiv,w
 15916  083B  00CB               	movwf	___fttol@f1
 15917  083C  082F               	movf	?___ftdiv+1,w
 15918  083D  00CC               	movwf	___fttol@f1+1
 15919  083E  0830               	movf	?___ftdiv+2,w
 15920  083F  00CD               	movwf	___fttol@f1+2
 15921  0840  318C  244B         	fcall	___fttol
 15922  0842  0020               	movlb	0	; select bank0
 15923  0843  034B               	decf	?___fttol,w
 15924  0844  3AFF               	xorlw	255
 15925  0845  3E64               	addlw	100
 15926  0846  0008               	return
 15927  0847                     __end_of_setPercentValue:	
 15928                           
 15929                           	psect	text103
 15930  0C4B                     __ptext103:	
 15931 ;; *************** function ___fttol *****************
 15932 ;; Defined at:
 15933 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15934 ;; Parameters:    Size  Location     Type
 15935 ;;  f1              3   43[BANK0 ] float 
 15936 ;; Auto vars:     Size  Location     Type
 15937 ;;  lval            4   52[BANK0 ] unsigned long 
 15938 ;;  exp1            1   56[BANK0 ] unsigned char 
 15939 ;;  sign1           1   51[BANK0 ] unsigned char 
 15940 ;; Return value:  Size  Location     Type
 15941 ;;                  4   43[BANK0 ] long 
 15942 ;; Registers used:
 15943 ;;		wreg, status,2, status,0
 15944 ;; Tracked objects:
 15945 ;;		On entry : 0/0
 15946 ;;		On exit  : 0/0
 15947 ;;		Unchanged: 0/0
 15948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15949 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15950 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15951 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15952 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15953 ;;Total ram usage:       14 bytes
 15954 ;; Hardware stack levels used:    1
 15955 ;; Hardware stack levels required when called:    5
 15956 ;; This function calls:
 15957 ;;		Nothing
 15958 ;; This function is called by:
 15959 ;;		_getPercentValue
 15960 ;;		_setPercentValue
 15961 ;; This function uses a non-reentrant model
 15962 ;;
 15963                           
 15964                           
 15965                           ;psect for function ___fttol
 15966  0C4B                     ___fttol:	
 15967                           
 15968                           ;incstack = 0
 15969                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15970  0C4B  0020               	movlb	0	; select bank0
 15971  0C4C  084B               	movf	___fttol@f1,w
 15972  0C4D  00CF               	movwf	??___fttol
 15973  0C4E  084C               	movf	___fttol@f1+1,w
 15974  0C4F  00D0               	movwf	??___fttol+1
 15975  0C50  084D               	movf	___fttol@f1+2,w
 15976  0C51  00D1               	movwf	??___fttol+2
 15977  0C52  1003               	clrc
 15978  0C53  0D50               	rlf	??___fttol+1,w
 15979  0C54  0D51               	rlf	??___fttol+2,w
 15980  0C55  00D2               	movwf	??___fttol+3
 15981  0C56  0852               	movf	??___fttol+3,w
 15982  0C57  00D8               	movwf	___fttol@exp1
 15983  0C58  08D8               	movf	___fttol@exp1,f
 15984  0C59  1D03               	skipz
 15985  0C5A  2C64               	goto	l6105
 15986  0C5B  3000               	movlw	0
 15987  0C5C  00CE               	movwf	?___fttol+3
 15988  0C5D  3000               	movlw	0
 15989  0C5E  00CD               	movwf	?___fttol+2
 15990  0C5F  3000               	movlw	0
 15991  0C60  00CC               	movwf	?___fttol+1
 15992  0C61  3000               	movlw	0
 15993  0C62  00CB               	movwf	?___fttol
 15994  0C63  0008               	return
 15995  0C64                     l6105:	
 15996  0C64  084B               	movf	___fttol@f1,w
 15997  0C65  00CF               	movwf	??___fttol
 15998  0C66  084C               	movf	___fttol@f1+1,w
 15999  0C67  00D0               	movwf	??___fttol+1
 16000  0C68  084D               	movf	___fttol@f1+2,w
 16001  0C69  00D1               	movwf	??___fttol+2
 16002  0C6A  3017               	movlw	23
 16003  0C6B                     u4825:	
 16004  0C6B  36D1               	lsrf	??___fttol+2,f
 16005  0C6C  0CD0               	rrf	??___fttol+1,f
 16006  0C6D  0CCF               	rrf	??___fttol,f
 16007  0C6E  0B89               	decfsz	9,f
 16008  0C6F  2C6B               	goto	u4825
 16009  0C70  084F               	movf	??___fttol,w
 16010  0C71  00D2               	movwf	??___fttol+3
 16011  0C72  0852               	movf	??___fttol+3,w
 16012  0C73  00D3               	movwf	___fttol@sign1
 16013  0C74  17CC               	bsf	___fttol@f1+1,7
 16014  0C75  30FF               	movlw	255
 16015  0C76  05CB               	andwf	___fttol@f1,f
 16016  0C77  30FF               	movlw	255
 16017  0C78  05CC               	andwf	___fttol@f1+1,f
 16018  0C79  3000               	movlw	0
 16019  0C7A  05CD               	andwf	___fttol@f1+2,f
 16020  0C7B  084B               	movf	___fttol@f1,w
 16021  0C7C  00D4               	movwf	___fttol@lval
 16022  0C7D  084C               	movf	___fttol@f1+1,w
 16023  0C7E  00D5               	movwf	___fttol@lval+1
 16024  0C7F  084D               	movf	___fttol@f1+2,w
 16025  0C80  00D6               	movwf	___fttol@lval+2
 16026  0C81  01D7               	clrf	___fttol@lval+3
 16027  0C82  308E               	movlw	142
 16028  0C83  02D8               	subwf	___fttol@exp1,f
 16029  0C84  1FD8               	btfss	___fttol@exp1,7
 16030  0C85  2CA2               	goto	l6125
 16031  0C86  0858               	movf	___fttol@exp1,w
 16032  0C87  3A80               	xorlw	128
 16033  0C88  3E8F               	addlw	143
 16034  0C89  1803               	skipnc
 16035  0C8A  2C94               	goto	l6123
 16036  0C8B  3000               	movlw	0
 16037  0C8C  00CE               	movwf	?___fttol+3
 16038  0C8D  3000               	movlw	0
 16039  0C8E  00CD               	movwf	?___fttol+2
 16040  0C8F  3000               	movlw	0
 16041  0C90  00CC               	movwf	?___fttol+1
 16042  0C91  3000               	movlw	0
 16043  0C92  00CB               	movwf	?___fttol
 16044  0C93  0008               	return
 16045  0C94                     l6123:	
 16046  0C94  3001               	movlw	1
 16047  0C95                     u4855:	
 16048  0C95  36D7               	lsrf	___fttol@lval+3,f
 16049  0C96  0CD6               	rrf	___fttol@lval+2,f
 16050  0C97  0CD5               	rrf	___fttol@lval+1,f
 16051  0C98  0CD4               	rrf	___fttol@lval,f
 16052  0C99  0B89               	decfsz	9,f
 16053  0C9A  2C95               	goto	u4855
 16054  0C9B  3001               	movlw	1
 16055  0C9C  00CF               	movwf	??___fttol
 16056  0C9D  084F               	movf	??___fttol,w
 16057  0C9E  07D8               	addwf	___fttol@exp1,f
 16058  0C9F  1903               	btfsc	3,2
 16059  0CA0  2CBB               	goto	l6135
 16060  0CA1  2C94               	goto	l6123
 16061  0CA2                     l6125:	
 16062  0CA2  3018               	movlw	24
 16063  0CA3  0258               	subwf	___fttol@exp1,w
 16064  0CA4  1C03               	skipc
 16065  0CA5  2CB8               	goto	l6133
 16066  0CA6  3000               	movlw	0
 16067  0CA7  00CE               	movwf	?___fttol+3
 16068  0CA8  3000               	movlw	0
 16069  0CA9  00CD               	movwf	?___fttol+2
 16070  0CAA  3000               	movlw	0
 16071  0CAB  00CC               	movwf	?___fttol+1
 16072  0CAC  3000               	movlw	0
 16073  0CAD  00CB               	movwf	?___fttol
 16074  0CAE  0008               	return
 16075  0CAF                     l6131:	
 16076  0CAF  3001               	movlw	1
 16077  0CB0                     u4885:	
 16078  0CB0  35D4               	lslf	___fttol@lval,f
 16079  0CB1  0DD5               	rlf	___fttol@lval+1,f
 16080  0CB2  0DD6               	rlf	___fttol@lval+2,f
 16081  0CB3  0DD7               	rlf	___fttol@lval+3,f
 16082  0CB4  0B89               	decfsz	9,f
 16083  0CB5  2CB0               	goto	u4885
 16084  0CB6  3001               	movlw	1
 16085  0CB7  02D8               	subwf	___fttol@exp1,f
 16086  0CB8                     l6133:	
 16087  0CB8  08D8               	movf	___fttol@exp1,f
 16088  0CB9  1D03               	skipz
 16089  0CBA  2CAF               	goto	l6131
 16090  0CBB                     l6135:	
 16091  0CBB  0853               	movf	___fttol@sign1,w
 16092  0CBC  1903               	btfsc	3,2
 16093  0CBD  2CC9               	goto	l6139
 16094  0CBE  09D4               	comf	___fttol@lval,f
 16095  0CBF  09D5               	comf	___fttol@lval+1,f
 16096  0CC0  09D6               	comf	___fttol@lval+2,f
 16097  0CC1  09D7               	comf	___fttol@lval+3,f
 16098  0CC2  0AD4               	incf	___fttol@lval,f
 16099  0CC3  1903               	skipnz
 16100  0CC4  0AD5               	incf	___fttol@lval+1,f
 16101  0CC5  1903               	skipnz
 16102  0CC6  0AD6               	incf	___fttol@lval+2,f
 16103  0CC7  1903               	skipnz
 16104  0CC8  0AD7               	incf	___fttol@lval+3,f
 16105  0CC9                     l6139:	
 16106  0CC9  0857               	movf	___fttol@lval+3,w
 16107  0CCA  00CE               	movwf	?___fttol+3
 16108  0CCB  0856               	movf	___fttol@lval+2,w
 16109  0CCC  00CD               	movwf	?___fttol+2
 16110  0CCD  0855               	movf	___fttol@lval+1,w
 16111  0CCE  00CC               	movwf	?___fttol+1
 16112  0CCF  0854               	movf	___fttol@lval,w
 16113  0CD0  00CB               	movwf	?___fttol
 16114  0CD1  0008               	return
 16115  0CD2                     __end_of___fttol:	
 16116                           
 16117                           	psect	text104
 16118  0DE6                     __ptext104:	
 16119 ;; *************** function ___ftdiv *****************
 16120 ;; Defined at:
 16121 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16122 ;; Parameters:    Size  Location     Type
 16123 ;;  f2              3   14[BANK0 ] float 
 16124 ;;  f1              3   17[BANK0 ] float 
 16125 ;; Auto vars:     Size  Location     Type
 16126 ;;  f3              3   25[BANK0 ] float 
 16127 ;;  sign            1   29[BANK0 ] unsigned char 
 16128 ;;  exp             1   28[BANK0 ] unsigned char 
 16129 ;;  cntr            1   24[BANK0 ] unsigned char 
 16130 ;; Return value:  Size  Location     Type
 16131 ;;                  3   14[BANK0 ] float 
 16132 ;; Registers used:
 16133 ;;		wreg, status,2, status,0, pclath, cstack
 16134 ;; Tracked objects:
 16135 ;;		On entry : 0/0
 16136 ;;		On exit  : 0/0
 16137 ;;		Unchanged: 0/0
 16138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16139 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16140 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16141 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16142 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16143 ;;Total ram usage:       16 bytes
 16144 ;; Hardware stack levels used:    1
 16145 ;; Hardware stack levels required when called:    6
 16146 ;; This function calls:
 16147 ;;		___ftpack
 16148 ;; This function is called by:
 16149 ;;		_getPercentValue
 16150 ;;		_setPercentValue
 16151 ;; This function uses a non-reentrant model
 16152 ;;
 16153                           
 16154                           
 16155                           ;psect for function ___ftdiv
 16156  0DE6                     ___ftdiv:	
 16157                           
 16158                           ;incstack = 0
 16159                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16160  0DE6  0020               	movlb	0	; select bank0
 16161  0DE7  0831               	movf	___ftdiv@f1,w
 16162  0DE8  00B4               	movwf	??___ftdiv
 16163  0DE9  0832               	movf	___ftdiv@f1+1,w
 16164  0DEA  00B5               	movwf	??___ftdiv+1
 16165  0DEB  0833               	movf	___ftdiv@f1+2,w
 16166  0DEC  00B6               	movwf	??___ftdiv+2
 16167  0DED  1003               	clrc
 16168  0DEE  0D35               	rlf	??___ftdiv+1,w
 16169  0DEF  0D36               	rlf	??___ftdiv+2,w
 16170  0DF0  00B7               	movwf	??___ftdiv+3
 16171  0DF1  0837               	movf	??___ftdiv+3,w
 16172  0DF2  00BC               	movwf	___ftdiv@exp
 16173  0DF3  08BC               	movf	___ftdiv@exp,f
 16174  0DF4  1D03               	skipz
 16175  0DF5  2DFD               	goto	l6013
 16176  0DF6  3000               	movlw	0
 16177  0DF7  00AE               	movwf	?___ftdiv
 16178  0DF8  3000               	movlw	0
 16179  0DF9  00AF               	movwf	?___ftdiv+1
 16180  0DFA  3000               	movlw	0
 16181  0DFB  00B0               	movwf	?___ftdiv+2
 16182  0DFC  0008               	return
 16183  0DFD                     l6013:	
 16184  0DFD  082E               	movf	___ftdiv@f2,w
 16185  0DFE  00B4               	movwf	??___ftdiv
 16186  0DFF  082F               	movf	___ftdiv@f2+1,w
 16187  0E00  00B5               	movwf	??___ftdiv+1
 16188  0E01  0830               	movf	___ftdiv@f2+2,w
 16189  0E02  00B6               	movwf	??___ftdiv+2
 16190  0E03  1003               	clrc
 16191  0E04  0D35               	rlf	??___ftdiv+1,w
 16192  0E05  0D36               	rlf	??___ftdiv+2,w
 16193  0E06  00B7               	movwf	??___ftdiv+3
 16194  0E07  0837               	movf	??___ftdiv+3,w
 16195  0E08  00BD               	movwf	___ftdiv@sign
 16196  0E09  08BD               	movf	___ftdiv@sign,f
 16197  0E0A  1D03               	skipz
 16198  0E0B  2E13               	goto	l6019
 16199  0E0C  3000               	movlw	0
 16200  0E0D  00AE               	movwf	?___ftdiv
 16201  0E0E  3000               	movlw	0
 16202  0E0F  00AF               	movwf	?___ftdiv+1
 16203  0E10  3000               	movlw	0
 16204  0E11  00B0               	movwf	?___ftdiv+2
 16205  0E12  0008               	return
 16206  0E13                     l6019:	
 16207  0E13  3000               	movlw	0
 16208  0E14  00B9               	movwf	___ftdiv@f3
 16209  0E15  3000               	movlw	0
 16210  0E16  00BA               	movwf	___ftdiv@f3+1
 16211  0E17  3000               	movlw	0
 16212  0E18  00BB               	movwf	___ftdiv@f3+2
 16213  0E19  3089               	movlw	137
 16214  0E1A  073D               	addwf	___ftdiv@sign,w
 16215  0E1B  00B4               	movwf	??___ftdiv
 16216  0E1C  0834               	movf	??___ftdiv,w
 16217  0E1D  02BC               	subwf	___ftdiv@exp,f
 16218  0E1E  0831               	movf	___ftdiv@f1,w
 16219  0E1F  00B4               	movwf	??___ftdiv
 16220  0E20  0832               	movf	___ftdiv@f1+1,w
 16221  0E21  00B5               	movwf	??___ftdiv+1
 16222  0E22  0833               	movf	___ftdiv@f1+2,w
 16223  0E23  00B6               	movwf	??___ftdiv+2
 16224  0E24  3010               	movlw	16
 16225  0E25                     u4635:	
 16226  0E25  36B6               	lsrf	??___ftdiv+2,f
 16227  0E26  0CB5               	rrf	??___ftdiv+1,f
 16228  0E27  0CB4               	rrf	??___ftdiv,f
 16229  0E28  0B89               	decfsz	9,f
 16230  0E29  2E25               	goto	u4635
 16231  0E2A  0834               	movf	??___ftdiv,w
 16232  0E2B  00B7               	movwf	??___ftdiv+3
 16233  0E2C  0837               	movf	??___ftdiv+3,w
 16234  0E2D  00BD               	movwf	___ftdiv@sign
 16235  0E2E  082E               	movf	___ftdiv@f2,w
 16236  0E2F  00B4               	movwf	??___ftdiv
 16237  0E30  082F               	movf	___ftdiv@f2+1,w
 16238  0E31  00B5               	movwf	??___ftdiv+1
 16239  0E32  0830               	movf	___ftdiv@f2+2,w
 16240  0E33  00B6               	movwf	??___ftdiv+2
 16241  0E34  3010               	movlw	16
 16242  0E35                     u4645:	
 16243  0E35  36B6               	lsrf	??___ftdiv+2,f
 16244  0E36  0CB5               	rrf	??___ftdiv+1,f
 16245  0E37  0CB4               	rrf	??___ftdiv,f
 16246  0E38  0B89               	decfsz	9,f
 16247  0E39  2E35               	goto	u4645
 16248  0E3A  0834               	movf	??___ftdiv,w
 16249  0E3B  00B7               	movwf	??___ftdiv+3
 16250  0E3C  0837               	movf	??___ftdiv+3,w
 16251  0E3D  06BD               	xorwf	___ftdiv@sign,f
 16252  0E3E  3080               	movlw	128
 16253  0E3F  00B4               	movwf	??___ftdiv
 16254  0E40  0834               	movf	??___ftdiv,w
 16255  0E41  05BD               	andwf	___ftdiv@sign,f
 16256  0E42  17B2               	bsf	___ftdiv@f1+1,7
 16257  0E43  30FF               	movlw	255
 16258  0E44  05B1               	andwf	___ftdiv@f1,f
 16259  0E45  30FF               	movlw	255
 16260  0E46  05B2               	andwf	___ftdiv@f1+1,f
 16261  0E47  3000               	movlw	0
 16262  0E48  05B3               	andwf	___ftdiv@f1+2,f
 16263  0E49  17AF               	bsf	___ftdiv@f2+1,7
 16264  0E4A  30FF               	movlw	255
 16265  0E4B  05AE               	andwf	___ftdiv@f2,f
 16266  0E4C  30FF               	movlw	255
 16267  0E4D  05AF               	andwf	___ftdiv@f2+1,f
 16268  0E4E  3000               	movlw	0
 16269  0E4F  05B0               	andwf	___ftdiv@f2+2,f
 16270  0E50  3018               	movlw	24
 16271  0E51  00B4               	movwf	??___ftdiv
 16272  0E52  0834               	movf	??___ftdiv,w
 16273  0E53  00B8               	movwf	___ftdiv@cntr
 16274  0E54                     l6033:	
 16275  0E54  3001               	movlw	1
 16276  0E55                     u4655:	
 16277  0E55  35B9               	lslf	___ftdiv@f3,f
 16278  0E56  0DBA               	rlf	___ftdiv@f3+1,f
 16279  0E57  0DBB               	rlf	___ftdiv@f3+2,f
 16280  0E58  0B89               	decfsz	9,f
 16281  0E59  2E55               	goto	u4655
 16282  0E5A  0830               	movf	___ftdiv@f2+2,w
 16283  0E5B  0233               	subwf	___ftdiv@f1+2,w
 16284  0E5C  1D03               	skipz
 16285  0E5D  2E64               	goto	u4665
 16286  0E5E  082F               	movf	___ftdiv@f2+1,w
 16287  0E5F  0232               	subwf	___ftdiv@f1+1,w
 16288  0E60  1D03               	skipz
 16289  0E61  2E64               	goto	u4665
 16290  0E62  082E               	movf	___ftdiv@f2,w
 16291  0E63  0231               	subwf	___ftdiv@f1,w
 16292  0E64                     u4665:	
 16293  0E64  1C03               	skipc
 16294  0E65  2E6D               	goto	l6041
 16295  0E66  082E               	movf	___ftdiv@f2,w
 16296  0E67  02B1               	subwf	___ftdiv@f1,f
 16297  0E68  082F               	movf	___ftdiv@f2+1,w
 16298  0E69  3BB2               	subwfb	___ftdiv@f1+1,f
 16299  0E6A  0830               	movf	___ftdiv@f2+2,w
 16300  0E6B  3BB3               	subwfb	___ftdiv@f1+2,f
 16301  0E6C  1439               	bsf	___ftdiv@f3,0
 16302  0E6D                     l6041:	
 16303  0E6D  3001               	movlw	1
 16304  0E6E                     u4675:	
 16305  0E6E  35B1               	lslf	___ftdiv@f1,f
 16306  0E6F  0DB2               	rlf	___ftdiv@f1+1,f
 16307  0E70  0DB3               	rlf	___ftdiv@f1+2,f
 16308  0E71  0B89               	decfsz	9,f
 16309  0E72  2E6E               	goto	u4675
 16310  0E73  3001               	movlw	1
 16311  0E74  02B8               	subwf	___ftdiv@cntr,f
 16312  0E75  1D03               	btfss	3,2
 16313  0E76  2E54               	goto	l6033
 16314  0E77  0839               	movf	___ftdiv@f3,w
 16315  0E78  00A0               	movwf	___ftpack@arg
 16316  0E79  083A               	movf	___ftdiv@f3+1,w
 16317  0E7A  00A1               	movwf	___ftpack@arg+1
 16318  0E7B  083B               	movf	___ftdiv@f3+2,w
 16319  0E7C  00A2               	movwf	___ftpack@arg+2
 16320  0E7D  083C               	movf	___ftdiv@exp,w
 16321  0E7E  00B4               	movwf	??___ftdiv
 16322  0E7F  0834               	movf	??___ftdiv,w
 16323  0E80  00A3               	movwf	___ftpack@exp
 16324  0E81  083D               	movf	___ftdiv@sign,w
 16325  0E82  00B5               	movwf	??___ftdiv+1
 16326  0E83  0835               	movf	??___ftdiv+1,w
 16327  0E84  00A4               	movwf	___ftpack@sign
 16328  0E85  3197  273A         	fcall	___ftpack
 16329  0E87  0020               	movlb	0	; select bank0
 16330  0E88  0820               	movf	?___ftpack,w
 16331  0E89  00AE               	movwf	?___ftdiv
 16332  0E8A  0821               	movf	?___ftpack+1,w
 16333  0E8B  00AF               	movwf	?___ftdiv+1
 16334  0E8C  0822               	movf	?___ftpack+2,w
 16335  0E8D  00B0               	movwf	?___ftdiv+2
 16336  0E8E  0008               	return
 16337  0E8F                     __end_of___ftdiv:	
 16338                           
 16339                           	psect	text105
 16340  1EA9                     __ptext105:	
 16341 ;; *************** function ___awtoft *****************
 16342 ;; Defined at:
 16343 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16344 ;; Parameters:    Size  Location     Type
 16345 ;;  c               2    8[BANK0 ] int 
 16346 ;; Auto vars:     Size  Location     Type
 16347 ;;  sign            1   13[BANK0 ] unsigned char 
 16348 ;; Return value:  Size  Location     Type
 16349 ;;                  3    8[BANK0 ] float 
 16350 ;; Registers used:
 16351 ;;		wreg, status,2, status,0, pclath, cstack
 16352 ;; Tracked objects:
 16353 ;;		On entry : 0/0
 16354 ;;		On exit  : 0/0
 16355 ;;		Unchanged: 0/0
 16356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16357 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16359 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16360 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16361 ;;Total ram usage:        6 bytes
 16362 ;; Hardware stack levels used:    1
 16363 ;; Hardware stack levels required when called:    6
 16364 ;; This function calls:
 16365 ;;		___ftpack
 16366 ;; This function is called by:
 16367 ;;		_getPercentValue
 16368 ;;		_setPercentValue
 16369 ;; This function uses a non-reentrant model
 16370 ;;
 16371                           
 16372                           
 16373                           ;psect for function ___awtoft
 16374  1EA9                     ___awtoft:	
 16375                           
 16376                           ;incstack = 0
 16377                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16378  1EA9  0020               	movlb	0	; select bank0
 16379  1EAA  01AD               	clrf	___awtoft@sign
 16380  1EAB  1FA9               	btfss	___awtoft@c+1,7
 16381  1EAC  2EB4               	goto	l8529
 16382  1EAD  09A8               	comf	___awtoft@c,f
 16383  1EAE  09A9               	comf	___awtoft@c+1,f
 16384  1EAF  0AA8               	incf	___awtoft@c,f
 16385  1EB0  1903               	skipnz
 16386  1EB1  0AA9               	incf	___awtoft@c+1,f
 16387  1EB2  01AD               	clrf	___awtoft@sign
 16388  1EB3  0AAD               	incf	___awtoft@sign,f
 16389  1EB4                     l8529:	
 16390  1EB4  0828               	movf	___awtoft@c,w
 16391  1EB5  00A0               	movwf	___ftpack@arg
 16392  1EB6  0829               	movf	___awtoft@c+1,w
 16393  1EB7  00A1               	movwf	___ftpack@arg+1
 16394  1EB8  01A2               	clrf	___ftpack@arg+2
 16395  1EB9  308E               	movlw	142
 16396  1EBA  00AB               	movwf	??___awtoft
 16397  1EBB  082B               	movf	??___awtoft,w
 16398  1EBC  00A3               	movwf	___ftpack@exp
 16399  1EBD  082D               	movf	___awtoft@sign,w
 16400  1EBE  00AC               	movwf	??___awtoft+1
 16401  1EBF  082C               	movf	??___awtoft+1,w
 16402  1EC0  00A4               	movwf	___ftpack@sign
 16403  1EC1  3197  273A         	fcall	___ftpack
 16404  1EC3  0020               	movlb	0	; select bank0
 16405  1EC4  0820               	movf	?___ftpack,w
 16406  1EC5  00A8               	movwf	?___awtoft
 16407  1EC6  0821               	movf	?___ftpack+1,w
 16408  1EC7  00A9               	movwf	?___awtoft+1
 16409  1EC8  0822               	movf	?___ftpack+2,w
 16410  1EC9  00AA               	movwf	?___awtoft+2
 16411  1ECA  0008               	return
 16412  1ECB                     __end_of___awtoft:	
 16413                           
 16414                           	psect	text106
 16415  173A                     __ptext106:	
 16416 ;; *************** function ___ftpack *****************
 16417 ;; Defined at:
 16418 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16419 ;; Parameters:    Size  Location     Type
 16420 ;;  arg             3    0[BANK0 ] unsigned um
 16421 ;;  exp             1    3[BANK0 ] unsigned char 
 16422 ;;  sign            1    4[BANK0 ] unsigned char 
 16423 ;; Auto vars:     Size  Location     Type
 16424 ;;		None
 16425 ;; Return value:  Size  Location     Type
 16426 ;;                  3    0[BANK0 ] float 
 16427 ;; Registers used:
 16428 ;;		wreg, status,2, status,0
 16429 ;; Tracked objects:
 16430 ;;		On entry : 0/0
 16431 ;;		On exit  : 0/0
 16432 ;;		Unchanged: 0/0
 16433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16434 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16436 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16437 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16438 ;;Total ram usage:        8 bytes
 16439 ;; Hardware stack levels used:    1
 16440 ;; Hardware stack levels required when called:    5
 16441 ;; This function calls:
 16442 ;;		Nothing
 16443 ;; This function is called by:
 16444 ;;		___awtoft
 16445 ;;		___ftadd
 16446 ;;		___ftdiv
 16447 ;;		___ftmul
 16448 ;; This function uses a non-reentrant model
 16449 ;;
 16450                           
 16451                           
 16452                           ;psect for function ___ftpack
 16453  173A                     ___ftpack:	
 16454                           
 16455                           ;incstack = 0
 16456                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16457  173A  0020               	movlb	0	; select bank0
 16458  173B  0823               	movf	___ftpack@exp,w
 16459  173C  1903               	btfsc	3,2
 16460  173D  2F43               	goto	l5897
 16461  173E  0822               	movf	___ftpack@arg+2,w
 16462  173F  0421               	iorwf	___ftpack@arg+1,w
 16463  1740  0420               	iorwf	___ftpack@arg,w
 16464  1741  1D03               	skipz
 16465  1742  2F54               	goto	l5903
 16466  1743                     l5897:	
 16467  1743  3000               	movlw	0
 16468  1744  00A0               	movwf	?___ftpack
 16469  1745  3000               	movlw	0
 16470  1746  00A1               	movwf	?___ftpack+1
 16471  1747  3000               	movlw	0
 16472  1748  00A2               	movwf	?___ftpack+2
 16473  1749  0008               	return
 16474  174A                     l5901:	
 16475  174A  3001               	movlw	1
 16476  174B  00A5               	movwf	??___ftpack
 16477  174C  0825               	movf	??___ftpack,w
 16478  174D  07A3               	addwf	___ftpack@exp,f
 16479  174E  3001               	movlw	1
 16480  174F                     u4285:	
 16481  174F  36A2               	lsrf	___ftpack@arg+2,f
 16482  1750  0CA1               	rrf	___ftpack@arg+1,f
 16483  1751  0CA0               	rrf	___ftpack@arg,f
 16484  1752  0B89               	decfsz	9,f
 16485  1753  2F4F               	goto	u4285
 16486  1754                     l5903:	
 16487  1754  30FE               	movlw	254
 16488  1755  0522               	andwf	___ftpack@arg+2,w
 16489  1756  1903               	btfsc	3,2
 16490  1757  2F6D               	goto	l3037
 16491  1758  2F4A               	goto	l5901
 16492  1759                     l5905:	
 16493  1759  3001               	movlw	1
 16494  175A  00A5               	movwf	??___ftpack
 16495  175B  0825               	movf	??___ftpack,w
 16496  175C  07A3               	addwf	___ftpack@exp,f
 16497  175D  3001               	movlw	1
 16498  175E  07A0               	addwf	___ftpack@arg,f
 16499  175F  3000               	movlw	0
 16500  1760  1803               	skipnc
 16501  1761  3001               	movlw	1
 16502  1762  07A1               	addwf	___ftpack@arg+1,f
 16503  1763  3000               	movlw	0
 16504  1764  1803               	skipnc
 16505  1765  3001               	movlw	1
 16506  1766  07A2               	addwf	___ftpack@arg+2,f
 16507  1767  3001               	movlw	1
 16508  1768                     u4305:	
 16509  1768  36A2               	lsrf	___ftpack@arg+2,f
 16510  1769  0CA1               	rrf	___ftpack@arg+1,f
 16511  176A  0CA0               	rrf	___ftpack@arg,f
 16512  176B  0B89               	decfsz	9,f
 16513  176C  2F68               	goto	u4305
 16514  176D                     l3037:	
 16515  176D  30FF               	movlw	255
 16516  176E  0522               	andwf	___ftpack@arg+2,w
 16517  176F  1903               	btfsc	3,2
 16518  1770  2F7A               	goto	l5913
 16519  1771  2F59               	goto	l5905
 16520  1772                     l5911:	
 16521  1772  3001               	movlw	1
 16522  1773  02A3               	subwf	___ftpack@exp,f
 16523  1774  3001               	movlw	1
 16524  1775                     u4325:	
 16525  1775  35A0               	lslf	___ftpack@arg,f
 16526  1776  0DA1               	rlf	___ftpack@arg+1,f
 16527  1777  0DA2               	rlf	___ftpack@arg+2,f
 16528  1778  0B89               	decfsz	9,f
 16529  1779  2F75               	goto	u4325
 16530  177A                     l5913:	
 16531  177A  1FA1               	btfss	___ftpack@arg+1,7
 16532  177B  2F72               	goto	l5911
 16533  177C  1823               	btfsc	___ftpack@exp,0
 16534  177D  2F84               	goto	l3043
 16535  177E  30FF               	movlw	255
 16536  177F  05A0               	andwf	___ftpack@arg,f
 16537  1780  307F               	movlw	127
 16538  1781  05A1               	andwf	___ftpack@arg+1,f
 16539  1782  30FF               	movlw	255
 16540  1783  05A2               	andwf	___ftpack@arg+2,f
 16541  1784                     l3043:	
 16542  1784  1003               	clrc
 16543  1785  0CA3               	rrf	___ftpack@exp,f
 16544  1786  0823               	movf	___ftpack@exp,w
 16545  1787  00A5               	movwf	??___ftpack
 16546  1788  01A6               	clrf	??___ftpack+1
 16547  1789  01A7               	clrf	??___ftpack+2
 16548  178A  3010               	movlw	16
 16549  178B                     u4355:	
 16550  178B  35A5               	lslf	??___ftpack,f
 16551  178C  0DA6               	rlf	??___ftpack+1,f
 16552  178D  0DA7               	rlf	??___ftpack+2,f
 16553  178E  0B89               	decfsz	9,f
 16554  178F  2F8B               	goto	u4355
 16555  1790  0825               	movf	??___ftpack,w
 16556  1791  04A0               	iorwf	___ftpack@arg,f
 16557  1792  0826               	movf	??___ftpack+1,w
 16558  1793  04A1               	iorwf	___ftpack@arg+1,f
 16559  1794  0827               	movf	??___ftpack+2,w
 16560  1795  04A2               	iorwf	___ftpack@arg+2,f
 16561  1796  0824               	movf	___ftpack@sign,w
 16562  1797  1903               	btfsc	3,2
 16563  1798  0008               	return
 16564  1799  17A2               	bsf	___ftpack@arg+2,7
 16565  179A  0008               	return
 16566  179B                     __end_of___ftpack:	
 16567                           
 16568                           	psect	text107
 16569  1B0A                     __ptext107:	
 16570 ;; *************** function _setRFSW_Status *****************
 16571 ;; Defined at:
 16572 ;;		line 434 in file "../src/RF_Control_B1.c"
 16573 ;; Parameters:    Size  Location     Type
 16574 ;;  sw              1    wreg     unsigned char 
 16575 ;;  command         1    2[BANK0 ] unsigned char 
 16576 ;; Auto vars:     Size  Location     Type
 16577 ;;  sw              1    3[BANK0 ] unsigned char 
 16578 ;; Return value:  Size  Location     Type
 16579 ;;		None               void
 16580 ;; Registers used:
 16581 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16582 ;; Tracked objects:
 16583 ;;		On entry : 0/0
 16584 ;;		On exit  : 0/0
 16585 ;;		Unchanged: 0/0
 16586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16587 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;Total ram usage:        2 bytes
 16592 ;; Hardware stack levels used:    1
 16593 ;; Hardware stack levels required when called:    6
 16594 ;; This function calls:
 16595 ;;		_RfSWPointSelect
 16596 ;; This function is called by:
 16597 ;;		_DlyOff_Main
 16598 ;;		_setDimmerLights_ERROR
 16599 ;;		_setControl_Lights_Table
 16600 ;;		_Sw_DimmerOnFunc
 16601 ;;		_Sw_DimmerAdjFunc
 16602 ;; This function uses a non-reentrant model
 16603 ;;
 16604                           
 16605                           
 16606                           ;psect for function _setRFSW_Status
 16607  1B0A                     _setRFSW_Status:	
 16608                           
 16609                           ;incstack = 0
 16610                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16611                           ;setRFSW_Status@sw stored from wreg
 16612  1B0A  0020               	movlb	0	; select bank0
 16613  1B0B  00A3               	movwf	setRFSW_Status@sw
 16614                           
 16615                           ;RF_Control_B1.c: 435: RfSWPointSelect(sw);
 16616  1B0C  0823               	movf	setRFSW_Status@sw,w
 16617  1B0D  3187  27ED         	fcall	_RfSWPointSelect
 16618                           
 16619                           ;RF_Control_B1.c: 436: RFSW->Status = command;
 16620  1B0F  0879               	movf	_RFSW,w
 16621  1B10  0086               	movwf	6
 16622  1B11  0187               	clrf	7
 16623  1B12  0020               	movlb	0	; select bank0
 16624  1B13  0822               	movf	setRFSW_Status@command,w
 16625  1B14  1001               	bcf	1,0
 16626  1B15  1D03               	skipz
 16627  1B16  1401               	bsf	1,0
 16628  1B17  0008               	return
 16629  1B18                     __end_of_setRFSW_Status:	
 16630                           
 16631                           	psect	text108
 16632  07ED                     __ptext108:	
 16633 ;; *************** function _RfSWPointSelect *****************
 16634 ;; Defined at:
 16635 ;;		line 369 in file "../src/RF_Control_B1.c"
 16636 ;; Parameters:    Size  Location     Type
 16637 ;;  sw              1    wreg     unsigned char 
 16638 ;; Auto vars:     Size  Location     Type
 16639 ;;  sw              1    1[BANK0 ] unsigned char 
 16640 ;; Return value:  Size  Location     Type
 16641 ;;		None               void
 16642 ;; Registers used:
 16643 ;;		wreg
 16644 ;; Tracked objects:
 16645 ;;		On entry : 0/0
 16646 ;;		On exit  : 0/0
 16647 ;;		Unchanged: 0/0
 16648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16651 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16652 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16653 ;;Total ram usage:        2 bytes
 16654 ;; Hardware stack levels used:    1
 16655 ;; Hardware stack levels required when called:    5
 16656 ;; This function calls:
 16657 ;;		Nothing
 16658 ;; This function is called by:
 16659 ;;		_setRFSW_Control
 16660 ;;		_setRFSW_AdjControl
 16661 ;;		_setRFSW_Status
 16662 ;; This function uses a non-reentrant model
 16663 ;;
 16664                           
 16665                           
 16666                           ;psect for function _RfSWPointSelect
 16667  07ED                     _RfSWPointSelect:	
 16668                           
 16669                           ;incstack = 0
 16670                           ; Regs used in _RfSWPointSelect: [wreg]
 16671                           ;RfSWPointSelect@sw stored from wreg
 16672  07ED  0020               	movlb	0	; select bank0
 16673  07EE  00A1               	movwf	RfSWPointSelect@sw
 16674                           
 16675                           ;RF_Control_B1.c: 371: if (sw == 1) {
 16676  07EF  0821               	movf	RfSWPointSelect@sw,w
 16677  07F0  3A01               	xorlw	1
 16678  07F1  1D03               	skipz
 16679  07F2  2FF7               	goto	l2347
 16680                           
 16681                           ;RF_Control_B1.c: 372: RFSW = &RFSW1;
 16682  07F3  30EE               	movlw	_RFSW1& (0+255)
 16683  07F4  00A0               	movwf	??_RfSWPointSelect
 16684  07F5  0820               	movf	??_RfSWPointSelect,w
 16685  07F6  00F9               	movwf	_RFSW
 16686  07F7                     l2347:	
 16687                           
 16688                           ;RF_Control_B1.c: 373: }
 16689                           ;RF_Control_B1.c: 376: if (sw == 2) {
 16690  07F7  0821               	movf	RfSWPointSelect@sw,w
 16691  07F8  3A02               	xorlw	2
 16692  07F9  1D03               	skipz
 16693  07FA  0008               	return
 16694                           
 16695                           ;RF_Control_B1.c: 377: RFSW = &RFSW2;
 16696  07FB  30EF               	movlw	_RFSW2& (0+255)
 16697  07FC  00A0               	movwf	??_RfSWPointSelect
 16698  07FD  0820               	movf	??_RfSWPointSelect,w
 16699  07FE  00F9               	movwf	_RFSW
 16700  07FF  0008               	return
 16701  0800                     __end_of_RfSWPointSelect:	
 16702                           
 16703                           	psect	text109
 16704  1B71                     __ptext109:	
 16705 ;; *************** function _setDimmerLights_Trigger *****************
 16706 ;; Defined at:
 16707 ;;		line 714 in file "../src/Dimmer_B1.c"
 16708 ;; Parameters:    Size  Location     Type
 16709 ;;  lights          1    wreg     unsigned char 
 16710 ;;  command         1    2[BANK0 ] unsigned char 
 16711 ;; Auto vars:     Size  Location     Type
 16712 ;;  lights          1    3[BANK0 ] unsigned char 
 16713 ;; Return value:  Size  Location     Type
 16714 ;;		None               void
 16715 ;; Registers used:
 16716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16717 ;; Tracked objects:
 16718 ;;		On entry : 0/0
 16719 ;;		On exit  : 0/0
 16720 ;;		Unchanged: 0/0
 16721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16722 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16723 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16725 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16726 ;;Total ram usage:        2 bytes
 16727 ;; Hardware stack levels used:    1
 16728 ;; Hardware stack levels required when called:    6
 16729 ;; This function calls:
 16730 ;;		_DimmerLightsPointSelect
 16731 ;; This function is called by:
 16732 ;;		_DlyOff_Main
 16733 ;;		_setRFSW_Control
 16734 ;;		_Sw_DimmerOnFunc
 16735 ;;		_Sw_DimmerOffFunc
 16736 ;; This function uses a non-reentrant model
 16737 ;;
 16738                           
 16739                           
 16740                           ;psect for function _setDimmerLights_Trigger
 16741  1B71                     _setDimmerLights_Trigger:	
 16742                           
 16743                           ;incstack = 0
 16744                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16745                           ;setDimmerLights_Trigger@lights stored from wreg
 16746  1B71  0020               	movlb	0	; select bank0
 16747  1B72  00A3               	movwf	setDimmerLights_Trigger@lights
 16748                           
 16749                           ;Dimmer_B1.c: 716: DimmerLightsPointSelect(lights);
 16750  1B73  0823               	movf	setDimmerLights_Trigger@lights,w
 16751  1B74  319C  242C         	fcall	_DimmerLightsPointSelect
 16752                           
 16753                           ;Dimmer_B1.c: 717: DimmerLights->Trigger = command;
 16754  1B76  0020               	movlb	0	; select bank0
 16755  1B77  086B               	movf	_DimmerLights,w
 16756  1B78  3E08               	addlw	8
 16757  1B79  0086               	movwf	6
 16758  1B7A  3001               	movlw	1	; select bank2/3
 16759  1B7B  0087               	movwf	7
 16760  1B7C  0822               	movf	setDimmerLights_Trigger@command,w
 16761  1B7D  1101               	bcf	1,2
 16762  1B7E  1D03               	skipz
 16763  1B7F  1501               	bsf	1,2
 16764  1B80  0008               	return
 16765  1B81                     __end_of_setDimmerLights_Trigger:	
 16766                           
 16767                           	psect	text110
 16768  1B61                     __ptext110:	
 16769 ;; *************** function _setDimmerLights_Switch *****************
 16770 ;; Defined at:
 16771 ;;		line 702 in file "../src/Dimmer_B1.c"
 16772 ;; Parameters:    Size  Location     Type
 16773 ;;  lights          1    wreg     unsigned char 
 16774 ;;  command         1    2[BANK0 ] unsigned char 
 16775 ;; Auto vars:     Size  Location     Type
 16776 ;;  lights          1    3[BANK0 ] unsigned char 
 16777 ;; Return value:  Size  Location     Type
 16778 ;;		None               void
 16779 ;; Registers used:
 16780 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16781 ;; Tracked objects:
 16782 ;;		On entry : 0/0
 16783 ;;		On exit  : 0/0
 16784 ;;		Unchanged: 0/0
 16785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16786 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16787 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16789 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16790 ;;Total ram usage:        2 bytes
 16791 ;; Hardware stack levels used:    1
 16792 ;; Hardware stack levels required when called:    6
 16793 ;; This function calls:
 16794 ;;		_DimmerLightsPointSelect
 16795 ;; This function is called by:
 16796 ;;		_DlyOff_Main
 16797 ;;		_setRFSW_Control
 16798 ;;		_Sw_DimmerOnFunc
 16799 ;;		_Sw_DimmerOffFunc
 16800 ;; This function uses a non-reentrant model
 16801 ;;
 16802                           
 16803                           
 16804                           ;psect for function _setDimmerLights_Switch
 16805  1B61                     _setDimmerLights_Switch:	
 16806                           
 16807                           ;incstack = 0
 16808                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16809                           ;setDimmerLights_Switch@lights stored from wreg
 16810  1B61  0020               	movlb	0	; select bank0
 16811  1B62  00A3               	movwf	setDimmerLights_Switch@lights
 16812                           
 16813                           ;Dimmer_B1.c: 704: DimmerLightsPointSelect(lights);
 16814  1B63  0823               	movf	setDimmerLights_Switch@lights,w
 16815  1B64  319C  242C         	fcall	_DimmerLightsPointSelect
 16816                           
 16817                           ;Dimmer_B1.c: 705: DimmerLights->Switch = command;
 16818  1B66  0020               	movlb	0	; select bank0
 16819  1B67  086B               	movf	_DimmerLights,w
 16820  1B68  3E08               	addlw	8
 16821  1B69  0086               	movwf	6
 16822  1B6A  3001               	movlw	1	; select bank2/3
 16823  1B6B  0087               	movwf	7
 16824  1B6C  0822               	movf	setDimmerLights_Switch@command,w
 16825  1B6D  1081               	bcf	1,1
 16826  1B6E  1D03               	skipz
 16827  1B6F  1481               	bsf	1,1
 16828  1B70  0008               	return
 16829  1B71                     __end_of_setDimmerLights_Switch:	
 16830                           
 16831                           	psect	text111
 16832  1C2C                     __ptext111:	
 16833 ;; *************** function _DimmerLightsPointSelect *****************
 16834 ;; Defined at:
 16835 ;;		line 324 in file "../src/Dimmer_B1.c"
 16836 ;; Parameters:    Size  Location     Type
 16837 ;;  lights          1    wreg     unsigned char 
 16838 ;; Auto vars:     Size  Location     Type
 16839 ;;  lights          1    1[BANK0 ] unsigned char 
 16840 ;; Return value:  Size  Location     Type
 16841 ;;		None               void
 16842 ;; Registers used:
 16843 ;;		wreg
 16844 ;; Tracked objects:
 16845 ;;		On entry : 0/0
 16846 ;;		On exit  : 0/0
 16847 ;;		Unchanged: 0/0
 16848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16850 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16851 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16852 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16853 ;;Total ram usage:        2 bytes
 16854 ;; Hardware stack levels used:    1
 16855 ;; Hardware stack levels required when called:    5
 16856 ;; This function calls:
 16857 ;;		Nothing
 16858 ;; This function is called by:
 16859 ;;		_setDimmerLights_Initialization
 16860 ;;		_setDimmerLights_Main
 16861 ;;		_setDimmerLights_ERROR
 16862 ;;		_setDimmerLights_TriggerERROR
 16863 ;;		_setDimmerLights
 16864 ;;		_setDimmerLights_Adj
 16865 ;;		_setDimmerLights_AdjRF
 16866 ;;		_setDimmerLights_Switch
 16867 ;;		_setDimmerLights_AdjGo
 16868 ;;		_setDimmerLights_Trigger
 16869 ;;		_setDimmerLights_TriggerAdj
 16870 ;;		_setDimmerLights_Clear
 16871 ;;		_setDimmerLights_GO
 16872 ;;		_setDimmerLights_MaxmumValue
 16873 ;; This function uses a non-reentrant model
 16874 ;;
 16875                           
 16876                           
 16877                           ;psect for function _DimmerLightsPointSelect
 16878  1C2C                     _DimmerLightsPointSelect:	
 16879                           
 16880                           ;incstack = 0
 16881                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16882                           ;DimmerLightsPointSelect@lights stored from wreg
 16883  1C2C  0020               	movlb	0	; select bank0
 16884  1C2D  00A1               	movwf	DimmerLightsPointSelect@lights
 16885                           
 16886                           ;Dimmer_B1.c: 326: if (lights == 1) {
 16887  1C2E  0821               	movf	DimmerLightsPointSelect@lights,w
 16888  1C2F  3A01               	xorlw	1
 16889  1C30  1D03               	skipz
 16890  1C31  2C36               	goto	l824
 16891                           
 16892                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 16893  1C32  3035               	movlw	_DimmerLights1& (0+255)
 16894  1C33  00A0               	movwf	??_DimmerLightsPointSelect
 16895  1C34  0820               	movf	??_DimmerLightsPointSelect,w
 16896  1C35  00EB               	movwf	_DimmerLights
 16897  1C36                     l824:	
 16898                           
 16899                           ;Dimmer_B1.c: 328: }
 16900                           ;Dimmer_B1.c: 331: if (lights == 2) {
 16901  1C36  0821               	movf	DimmerLightsPointSelect@lights,w
 16902  1C37  3A02               	xorlw	2
 16903  1C38  1D03               	skipz
 16904  1C39  0008               	return
 16905                           
 16906                           ;Dimmer_B1.c: 332: DimmerLights = &DimmerLights2;
 16907  1C3A  3044               	movlw	_DimmerLights2& (0+255)
 16908  1C3B  00A0               	movwf	??_DimmerLightsPointSelect
 16909  1C3C  0820               	movf	??_DimmerLightsPointSelect,w
 16910  1C3D  00EB               	movwf	_DimmerLights
 16911  1C3E  0008               	return
 16912  1C3F                     __end_of_DimmerLightsPointSelect:	
 16913                           
 16914                           	psect	text112
 16915  156B                     __ptext112:	
 16916 ;; *************** function _setBuz *****************
 16917 ;; Defined at:
 16918 ;;		line 22 in file "../src/Buzzer_B1.c"
 16919 ;; Parameters:    Size  Location     Type
 16920 ;;  count           1    wreg     unsigned char 
 16921 ;;  time            2    9[BANK0 ] int 
 16922 ;; Auto vars:     Size  Location     Type
 16923 ;;  count           1   12[BANK0 ] unsigned char 
 16924 ;; Return value:  Size  Location     Type
 16925 ;;		None               void
 16926 ;; Registers used:
 16927 ;;		wreg, status,2, status,0, pclath, cstack
 16928 ;; Tracked objects:
 16929 ;;		On entry : 0/0
 16930 ;;		On exit  : 0/0
 16931 ;;		Unchanged: 0/0
 16932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16933 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16936 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16937 ;;Total ram usage:        4 bytes
 16938 ;; Hardware stack levels used:    1
 16939 ;; Hardware stack levels required when called:    6
 16940 ;; This function calls:
 16941 ;;		___awdiv
 16942 ;; This function is called by:
 16943 ;;		_DlyOff_Main
 16944 ;;		_setDimmerLights_Main
 16945 ;;		_DimmerLights_Exceptions
 16946 ;;		_my_MainTime
 16947 ;;		_setOverTemp_Exceptions
 16948 ;;		_setLog_Code
 16949 ;;		_setControl_Lights_Table
 16950 ;;		_setRFSW_Control
 16951 ;;		_setSw_Main
 16952 ;;		_Sw_DimmerOnFunc
 16953 ;; This function uses a non-reentrant model
 16954 ;;
 16955                           
 16956                           
 16957                           ;psect for function _setBuz
 16958  156B                     _setBuz:	
 16959                           
 16960                           ;incstack = 0
 16961                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16962                           ;setBuz@count stored from wreg
 16963  156B  0020               	movlb	0	; select bank0
 16964  156C  00AC               	movwf	setBuz@count
 16965                           
 16966                           ;Buzzer_B1.c: 23: time /= 10;
 16967  156D  300A               	movlw	10
 16968  156E  00A0               	movwf	___awdiv@divisor
 16969  156F  3000               	movlw	0
 16970  1570  00A1               	movwf	___awdiv@divisor+1
 16971  1571  082A               	movf	setBuz@time+1,w
 16972  1572  01A3               	clrf	___awdiv@dividend+1
 16973  1573  07A3               	addwf	___awdiv@dividend+1,f
 16974  1574  0829               	movf	setBuz@time,w
 16975  1575  01A2               	clrf	___awdiv@dividend
 16976  1576  07A2               	addwf	___awdiv@dividend,f
 16977  1577  3194  2469  3195   	fcall	___awdiv
 16978  157A  0020               	movlb	0	; select bank0
 16979  157B  0821               	movf	?___awdiv+1,w
 16980  157C  01AA               	clrf	setBuz@time+1
 16981  157D  07AA               	addwf	setBuz@time+1,f
 16982  157E  0820               	movf	?___awdiv,w
 16983  157F  01A9               	clrf	setBuz@time
 16984  1580  07A9               	addwf	setBuz@time,f
 16985                           
 16986                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16987  1581  0021               	movlb	1	; select bank1
 16988  1582  1C33               	btfss	_Buz1^(0+128),0
 16989  1583  0008               	return
 16990                           
 16991                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16992  1584  18B3               	btfsc	_Buz1^(0+128),1
 16993  1585  2D9C               	goto	l102
 16994                           
 16995                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16996  1586  14B3               	bsf	_Buz1^(0+128),1
 16997                           
 16998                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16999  1587  01B4               	clrf	(_Buz1^(0+128)+1)
 17000  1588  01B5               	clrf	((_Buz1+1)^(0+128)+1)
 17001                           
 17002                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 17003  1589  0020               	movlb	0	; select bank0
 17004  158A  082C               	movf	setBuz@count,w
 17005  158B  00AB               	movwf	??_setBuz
 17006  158C  082B               	movf	??_setBuz,w
 17007  158D  0021               	movlb	1	; select bank1
 17008  158E  00B6               	movwf	(_Buz1^(0+128)+3)
 17009                           
 17010                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 17011  158F  0020               	movlb	0	; select bank0
 17012  1590  082A               	movf	setBuz@time+1,w
 17013  1591  0021               	movlb	1	; select bank1
 17014  1592  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 17015  1593  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 17016  1594  0020               	movlb	0	; select bank0
 17017  1595  0829               	movf	setBuz@time,w
 17018  1596  0021               	movlb	1	; select bank1
 17019  1597  01B9               	clrf	(_Buz1^(0+128)+6)
 17020  1598  07B9               	addwf	(_Buz1^(0+128)+6),f
 17021                           
 17022                           ;Buzzer_B1.c: 30: RB3 = 1;
 17023  1599  0020               	movlb	0	; select bank0
 17024  159A  158D               	bsf	13,3	;volatile
 17025                           
 17026                           ;Buzzer_B1.c: 31: } else {
 17027  159B  0008               	return
 17028  159C                     l102:	
 17029                           
 17030                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 17031  159C  19B3               	btfsc	_Buz1^(0+128),3
 17032  159D  2DB0               	goto	l104
 17033                           
 17034                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 17035  159E  15B3               	bsf	_Buz1^(0+128),3
 17036                           
 17037                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 17038  159F  0020               	movlb	0	; select bank0
 17039  15A0  082C               	movf	setBuz@count,w
 17040  15A1  00AB               	movwf	??_setBuz
 17041  15A2  082B               	movf	??_setBuz,w
 17042  15A3  0021               	movlb	1	; select bank1
 17043  15A4  00B7               	movwf	(_Buz1^(0+128)+4)
 17044                           
 17045                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17046  15A5  0020               	movlb	0	; select bank0
 17047  15A6  082A               	movf	setBuz@time+1,w
 17048  15A7  0021               	movlb	1	; select bank1
 17049  15A8  01BC               	clrf	((_Buz1+1)^(0+128)+8)
 17050  15A9  07BC               	addwf	((_Buz1+1)^(0+128)+8),f
 17051  15AA  0020               	movlb	0	; select bank0
 17052  15AB  0829               	movf	setBuz@time,w
 17053  15AC  0021               	movlb	1	; select bank1
 17054  15AD  01BB               	clrf	(_Buz1^(0+128)+8)
 17055  15AE  07BB               	addwf	(_Buz1^(0+128)+8),f
 17056                           
 17057                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17058  15AF  0008               	return
 17059  15B0                     l104:	
 17060  15B0  1A33               	btfsc	_Buz1^(0+128),4
 17061  15B1  0008               	return
 17062                           
 17063                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17064  15B2  1633               	bsf	_Buz1^(0+128),4
 17065                           
 17066                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17067  15B3  0020               	movlb	0	; select bank0
 17068  15B4  082C               	movf	setBuz@count,w
 17069  15B5  00AB               	movwf	??_setBuz
 17070  15B6  082B               	movf	??_setBuz,w
 17071  15B7  0021               	movlb	1	; select bank1
 17072  15B8  00B8               	movwf	(_Buz1^(0+128)+5)
 17073                           
 17074                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17075  15B9  0020               	movlb	0	; select bank0
 17076  15BA  082A               	movf	setBuz@time+1,w
 17077  15BB  0021               	movlb	1	; select bank1
 17078  15BC  01BE               	clrf	((_Buz1+1)^(0+128)+10)
 17079  15BD  07BE               	addwf	((_Buz1+1)^(0+128)+10),f
 17080  15BE  0020               	movlb	0	; select bank0
 17081  15BF  0829               	movf	setBuz@time,w
 17082  15C0  0021               	movlb	1	; select bank1
 17083  15C1  01BD               	clrf	(_Buz1^(0+128)+10)
 17084  15C2  07BD               	addwf	(_Buz1^(0+128)+10),f
 17085  15C3  0008               	return
 17086  15C4                     __end_of_setBuz:	
 17087                           
 17088                           	psect	text113
 17089  1469                     __ptext113:	
 17090 ;; *************** function ___awdiv *****************
 17091 ;; Defined at:
 17092 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17093 ;; Parameters:    Size  Location     Type
 17094 ;;  divisor         2    0[BANK0 ] int 
 17095 ;;  dividend        2    2[BANK0 ] int 
 17096 ;; Auto vars:     Size  Location     Type
 17097 ;;  quotient        2    7[BANK0 ] int 
 17098 ;;  sign            1    6[BANK0 ] unsigned char 
 17099 ;;  counter         1    5[BANK0 ] unsigned char 
 17100 ;; Return value:  Size  Location     Type
 17101 ;;                  2    0[BANK0 ] int 
 17102 ;; Registers used:
 17103 ;;		wreg, status,2, status,0
 17104 ;; Tracked objects:
 17105 ;;		On entry : 0/0
 17106 ;;		On exit  : 0/0
 17107 ;;		Unchanged: 0/0
 17108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17109 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17110 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17111 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17112 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17113 ;;Total ram usage:        9 bytes
 17114 ;; Hardware stack levels used:    1
 17115 ;; Hardware stack levels required when called:    5
 17116 ;; This function calls:
 17117 ;;		Nothing
 17118 ;; This function is called by:
 17119 ;;		_setBuz
 17120 ;; This function uses a non-reentrant model
 17121 ;;
 17122                           
 17123                           
 17124                           ;psect for function ___awdiv
 17125  1469                     ___awdiv:	
 17126                           
 17127                           ;incstack = 0
 17128                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17129  1469  0020               	movlb	0	; select bank0
 17130  146A  01A6               	clrf	___awdiv@sign
 17131  146B  1FA1               	btfss	___awdiv@divisor+1,7
 17132  146C  2C74               	goto	l8637
 17133  146D  09A0               	comf	___awdiv@divisor,f
 17134  146E  09A1               	comf	___awdiv@divisor+1,f
 17135  146F  0AA0               	incf	___awdiv@divisor,f
 17136  1470  1903               	skipnz
 17137  1471  0AA1               	incf	___awdiv@divisor+1,f
 17138  1472  01A6               	clrf	___awdiv@sign
 17139  1473  0AA6               	incf	___awdiv@sign,f
 17140  1474                     l8637:	
 17141  1474  1FA3               	btfss	___awdiv@dividend+1,7
 17142  1475  2C7F               	goto	l8643
 17143  1476  09A2               	comf	___awdiv@dividend,f
 17144  1477  09A3               	comf	___awdiv@dividend+1,f
 17145  1478  0AA2               	incf	___awdiv@dividend,f
 17146  1479  1903               	skipnz
 17147  147A  0AA3               	incf	___awdiv@dividend+1,f
 17148  147B  3001               	movlw	1
 17149  147C  00A4               	movwf	??___awdiv
 17150  147D  0824               	movf	??___awdiv,w
 17151  147E  06A6               	xorwf	___awdiv@sign,f
 17152  147F                     l8643:	
 17153  147F  01A7               	clrf	___awdiv@quotient
 17154  1480  01A8               	clrf	___awdiv@quotient+1
 17155  1481  0821               	movf	___awdiv@divisor+1,w
 17156  1482  0420               	iorwf	___awdiv@divisor,w
 17157  1483  1903               	skipnz
 17158  1484  2CAE               	goto	l8665
 17159  1485  01A5               	clrf	___awdiv@counter
 17160  1486  0AA5               	incf	___awdiv@counter,f
 17161  1487                     l8653:	
 17162  1487  1BA1               	btfsc	___awdiv@divisor+1,7
 17163  1488  2C93               	goto	l8655
 17164  1489  3001               	movlw	1
 17165  148A                     u8705:	
 17166  148A  35A0               	lslf	___awdiv@divisor,f
 17167  148B  0DA1               	rlf	___awdiv@divisor+1,f
 17168  148C  0B89               	decfsz	9,f
 17169  148D  2C8A               	goto	u8705
 17170  148E  3001               	movlw	1
 17171  148F  00A4               	movwf	??___awdiv
 17172  1490  0824               	movf	??___awdiv,w
 17173  1491  07A5               	addwf	___awdiv@counter,f
 17174  1492  2C87               	goto	l8653
 17175  1493                     l8655:	
 17176  1493  3001               	movlw	1
 17177  1494                     u8725:	
 17178  1494  35A7               	lslf	___awdiv@quotient,f
 17179  1495  0DA8               	rlf	___awdiv@quotient+1,f
 17180  1496  0B89               	decfsz	9,f
 17181  1497  2C94               	goto	u8725
 17182  1498  0821               	movf	___awdiv@divisor+1,w
 17183  1499  0223               	subwf	___awdiv@dividend+1,w
 17184  149A  1D03               	skipz
 17185  149B  2C9E               	goto	u8735
 17186  149C  0820               	movf	___awdiv@divisor,w
 17187  149D  0222               	subwf	___awdiv@dividend,w
 17188  149E                     u8735:	
 17189  149E  1C03               	skipc
 17190  149F  2CA5               	goto	l8661
 17191  14A0  0820               	movf	___awdiv@divisor,w
 17192  14A1  02A2               	subwf	___awdiv@dividend,f
 17193  14A2  0821               	movf	___awdiv@divisor+1,w
 17194  14A3  3BA3               	subwfb	___awdiv@dividend+1,f
 17195  14A4  1427               	bsf	___awdiv@quotient,0
 17196  14A5                     l8661:	
 17197  14A5  3001               	movlw	1
 17198  14A6                     u8745:	
 17199  14A6  36A1               	lsrf	___awdiv@divisor+1,f
 17200  14A7  0CA0               	rrf	___awdiv@divisor,f
 17201  14A8  0B89               	decfsz	9,f
 17202  14A9  2CA6               	goto	u8745
 17203  14AA  3001               	movlw	1
 17204  14AB  02A5               	subwf	___awdiv@counter,f
 17205  14AC  1D03               	btfss	3,2
 17206  14AD  2C93               	goto	l8655
 17207  14AE                     l8665:	
 17208  14AE  0826               	movf	___awdiv@sign,w
 17209  14AF  1903               	btfsc	3,2
 17210  14B0  2CB6               	goto	l8669
 17211  14B1  09A7               	comf	___awdiv@quotient,f
 17212  14B2  09A8               	comf	___awdiv@quotient+1,f
 17213  14B3  0AA7               	incf	___awdiv@quotient,f
 17214  14B4  1903               	skipnz
 17215  14B5  0AA8               	incf	___awdiv@quotient+1,f
 17216  14B6                     l8669:	
 17217  14B6  0828               	movf	___awdiv@quotient+1,w
 17218  14B7  01A1               	clrf	?___awdiv+1
 17219  14B8  07A1               	addwf	?___awdiv+1,f
 17220  14B9  0827               	movf	___awdiv@quotient,w
 17221  14BA  01A0               	clrf	?___awdiv
 17222  14BB  07A0               	addwf	?___awdiv,f
 17223  14BC  0008               	return
 17224  14BD                     __end_of___awdiv:	
 17225                           
 17226                           	psect	text114
 17227  1A21                     __ptext114:	
 17228 ;; *************** function _DelayOff_Initialization *****************
 17229 ;; Defined at:
 17230 ;;		line 26 in file "../src/DelayOff_B1.c"
 17231 ;; Parameters:    Size  Location     Type
 17232 ;;		None
 17233 ;; Auto vars:     Size  Location     Type
 17234 ;;		None
 17235 ;; Return value:  Size  Location     Type
 17236 ;;		None               void
 17237 ;; Registers used:
 17238 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17239 ;; Tracked objects:
 17240 ;;		On entry : 0/0
 17241 ;;		On exit  : 0/0
 17242 ;;		Unchanged: 0/0
 17243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17248 ;;Total ram usage:        0 bytes
 17249 ;; Hardware stack levels used:    1
 17250 ;; Hardware stack levels required when called:    7
 17251 ;; This function calls:
 17252 ;;		_DlyOff_Initialization
 17253 ;; This function is called by:
 17254 ;;		_main
 17255 ;; This function uses a non-reentrant model
 17256 ;;
 17257                           
 17258                           
 17259                           ;psect for function _DelayOff_Initialization
 17260  1A21                     _DelayOff_Initialization:	
 17261                           
 17262                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17263                           
 17264                           ;incstack = 0
 17265                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17266  1A21  3001               	movlw	1
 17267  1A22  319A  227B  319A   	fcall	_DlyOff_Initialization
 17268                           
 17269                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17270  1A25  3002               	movlw	2
 17271  1A26  319A  227B         	fcall	_DlyOff_Initialization
 17272  1A28  0008               	return
 17273  1A29                     __end_of_DelayOff_Initialization:	
 17274                           
 17275                           	psect	text115
 17276  1A7B                     __ptext115:	
 17277 ;; *************** function _DlyOff_Initialization *****************
 17278 ;; Defined at:
 17279 ;;		line 56 in file "../src/DelayOff_B1.c"
 17280 ;; Parameters:    Size  Location     Type
 17281 ;;  sw              1    wreg     unsigned char 
 17282 ;; Auto vars:     Size  Location     Type
 17283 ;;  sw              1    2[BANK0 ] unsigned char 
 17284 ;; Return value:  Size  Location     Type
 17285 ;;		None               void
 17286 ;; Registers used:
 17287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17288 ;; Tracked objects:
 17289 ;;		On entry : 0/0
 17290 ;;		On exit  : 0/0
 17291 ;;		Unchanged: 0/0
 17292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17296 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17297 ;;Total ram usage:        1 bytes
 17298 ;; Hardware stack levels used:    1
 17299 ;; Hardware stack levels required when called:    6
 17300 ;; This function calls:
 17301 ;;		_DelayOffPointSelect
 17302 ;; This function is called by:
 17303 ;;		_DelayOff_Initialization
 17304 ;; This function uses a non-reentrant model
 17305 ;;
 17306                           
 17307                           
 17308                           ;psect for function _DlyOff_Initialization
 17309  1A7B                     _DlyOff_Initialization:	
 17310                           
 17311                           ;incstack = 0
 17312                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17313                           ;DlyOff_Initialization@sw stored from wreg
 17314  1A7B  0020               	movlb	0	; select bank0
 17315  1A7C  00A2               	movwf	DlyOff_Initialization@sw
 17316                           
 17317                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17318  1A7D  0822               	movf	DlyOff_Initialization@sw,w
 17319  1A7E  319C  2467         	fcall	_DelayOffPointSelect
 17320                           
 17321                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 17322  1A80  0020               	movlb	0	; select bank0
 17323  1A81  086A               	movf	_DelayOff,w
 17324  1A82  0086               	movwf	6
 17325  1A83  0187               	clrf	7
 17326  1A84  1401               	bsf	1,0
 17327  1A85  0008               	return
 17328  1A86                     __end_of_DlyOff_Initialization:	
 17329                           
 17330                           	psect	text116
 17331  1C67                     __ptext116:	
 17332 ;; *************** function _DelayOffPointSelect *****************
 17333 ;; Defined at:
 17334 ;;		line 7 in file "../src/DelayOff_B1.c"
 17335 ;; Parameters:    Size  Location     Type
 17336 ;;  sw              1    wreg     unsigned char 
 17337 ;; Auto vars:     Size  Location     Type
 17338 ;;  sw              1    1[BANK0 ] unsigned char 
 17339 ;; Return value:  Size  Location     Type
 17340 ;;		None               void
 17341 ;; Registers used:
 17342 ;;		wreg
 17343 ;; Tracked objects:
 17344 ;;		On entry : 0/0
 17345 ;;		On exit  : 0/0
 17346 ;;		Unchanged: 0/0
 17347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17350 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17351 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17352 ;;Total ram usage:        2 bytes
 17353 ;; Hardware stack levels used:    1
 17354 ;; Hardware stack levels required when called:    5
 17355 ;; This function calls:
 17356 ;;		Nothing
 17357 ;; This function is called by:
 17358 ;;		_DlyOff_Initialization
 17359 ;;		_DlyOff_Main
 17360 ;;		_setDelayOff_GO
 17361 ;; This function uses a non-reentrant model
 17362 ;;
 17363                           
 17364                           
 17365                           ;psect for function _DelayOffPointSelect
 17366  1C67                     _DelayOffPointSelect:	
 17367                           
 17368                           ;incstack = 0
 17369                           ; Regs used in _DelayOffPointSelect: [wreg]
 17370                           ;DelayOffPointSelect@sw stored from wreg
 17371  1C67  0020               	movlb	0	; select bank0
 17372  1C68  00A1               	movwf	DelayOffPointSelect@sw
 17373                           
 17374                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17375  1C69  0821               	movf	DelayOffPointSelect@sw,w
 17376  1C6A  3A01               	xorlw	1
 17377  1C6B  1D03               	skipz
 17378  1C6C  2C72               	goto	l8567
 17379                           
 17380                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17381  1C6D  30EA               	movlw	_DlySw1& (0+255)
 17382  1C6E  00A0               	movwf	??_DelayOffPointSelect
 17383  1C6F  0820               	movf	??_DelayOffPointSelect,w
 17384  1C70  00EA               	movwf	_DelayOff
 17385                           
 17386                           ;DelayOff_B1.c: 11: }
 17387  1C71  0008               	return
 17388  1C72                     l8567:	
 17389                           
 17390                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17391  1C72  0821               	movf	DelayOffPointSelect@sw,w
 17392  1C73  3A02               	xorlw	2
 17393  1C74  1D03               	skipz
 17394  1C75  0008               	return
 17395                           
 17396                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17397  1C76  30EC               	movlw	_DlySw2& (0+255)
 17398  1C77  00A0               	movwf	??_DelayOffPointSelect
 17399  1C78  0820               	movf	??_DelayOffPointSelect,w
 17400  1C79  00EA               	movwf	_DelayOff
 17401  1C7A  0008               	return
 17402  1C7B                     __end_of_DelayOffPointSelect:	
 17403                           
 17404                           	psect	text117
 17405  1CA4                     __ptext117:	
 17406 ;; *************** function _CC2500_PowerOnInitial *****************
 17407 ;; Defined at:
 17408 ;;		line 122 in file "../src/CC2500_B1.c"
 17409 ;; Parameters:    Size  Location     Type
 17410 ;;		None
 17411 ;; Auto vars:     Size  Location     Type
 17412 ;;		None
 17413 ;; Return value:  Size  Location     Type
 17414 ;;		None               void
 17415 ;; Registers used:
 17416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17417 ;; Tracked objects:
 17418 ;;		On entry : 0/0
 17419 ;;		On exit  : 0/0
 17420 ;;		Unchanged: 0/0
 17421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17426 ;;Total ram usage:        0 bytes
 17427 ;; Hardware stack levels used:    1
 17428 ;; Hardware stack levels required when called:    8
 17429 ;; This function calls:
 17430 ;;		_CC2500_ClearRXFIFO
 17431 ;;		_CC2500_ClearTXFIFO
 17432 ;;		_CC2500_FrequencyCabr
 17433 ;;		_CC2500_InitPATable
 17434 ;;		_CC2500_InitSetREG
 17435 ;;		_CC2500_PowerRST
 17436 ;;		_CC2500_SIDLEMode
 17437 ;; This function is called by:
 17438 ;;		_main
 17439 ;; This function uses a non-reentrant model
 17440 ;;
 17441                           
 17442                           
 17443                           ;psect for function _CC2500_PowerOnInitial
 17444  1CA4                     _CC2500_PowerOnInitial:	
 17445                           
 17446                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 17447                           
 17448                           ;incstack = 0
 17449                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17450  1CA4  3192  22BD  319C   	fcall	_CC2500_PowerRST
 17451                           
 17452                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 17453  1CA7  319F  2781  319C   	fcall	_CC2500_InitSetREG
 17454                           
 17455                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 17456  1CAA  319D  25EB  319C   	fcall	_CC2500_InitPATable
 17457                           
 17458                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 17459  1CAD  3199  21EF  319C   	fcall	_CC2500_ClearTXFIFO
 17460                           
 17461                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 17462  1CB0  3199  21EB  319C   	fcall	_CC2500_ClearRXFIFO
 17463                           
 17464                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 17465  1CB3  319A  22A7  319C   	fcall	_CC2500_FrequencyCabr
 17466                           
 17467                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 17468  1CB6  3199  21F3         	fcall	_CC2500_SIDLEMode
 17469  1CB8  0008               	return
 17470  1CB9                     __end_of_CC2500_PowerOnInitial:	
 17471                           
 17472                           	psect	text118
 17473  19F3                     __ptext118:	
 17474 ;; *************** function _CC2500_SIDLEMode *****************
 17475 ;; Defined at:
 17476 ;;		line 212 in file "../src/CC2500_B1.c"
 17477 ;; Parameters:    Size  Location     Type
 17478 ;;		None
 17479 ;; Auto vars:     Size  Location     Type
 17480 ;;		None
 17481 ;; Return value:  Size  Location     Type
 17482 ;;		None               void
 17483 ;; Registers used:
 17484 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17485 ;; Tracked objects:
 17486 ;;		On entry : 0/0
 17487 ;;		On exit  : 0/0
 17488 ;;		Unchanged: 0/0
 17489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17494 ;;Total ram usage:        0 bytes
 17495 ;; Hardware stack levels used:    1
 17496 ;; Hardware stack levels required when called:    7
 17497 ;; This function calls:
 17498 ;;		_CC2500_WriteCommand
 17499 ;; This function is called by:
 17500 ;;		_CC2500_PowerOnInitial
 17501 ;; This function uses a non-reentrant model
 17502 ;;
 17503                           
 17504                           
 17505                           ;psect for function _CC2500_SIDLEMode
 17506  19F3                     _CC2500_SIDLEMode:	
 17507                           
 17508                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 17509                           
 17510                           ;incstack = 0
 17511                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17512  19F3  3036               	movlw	54
 17513  19F4  319D  2513         	fcall	_CC2500_WriteCommand
 17514  19F6  0008               	return
 17515  19F7                     __end_of_CC2500_SIDLEMode:	
 17516                           
 17517                           	psect	text119
 17518  12BD                     __ptext119:	
 17519 ;; *************** function _CC2500_PowerRST *****************
 17520 ;; Defined at:
 17521 ;;		line 135 in file "../src/CC2500_B1.c"
 17522 ;; Parameters:    Size  Location     Type
 17523 ;;		None
 17524 ;; Auto vars:     Size  Location     Type
 17525 ;;		None
 17526 ;; Return value:  Size  Location     Type
 17527 ;;		None               void
 17528 ;; Registers used:
 17529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17530 ;; Tracked objects:
 17531 ;;		On entry : 0/0
 17532 ;;		On exit  : 0/0
 17533 ;;		Unchanged: 0/0
 17534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17538 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;Total ram usage:        1 bytes
 17540 ;; Hardware stack levels used:    1
 17541 ;; Hardware stack levels required when called:    6
 17542 ;; This function calls:
 17543 ;;		_CC2500_WriteByte
 17544 ;;		_DelayTime_1us
 17545 ;;		_Timeout_Counter
 17546 ;;		_set_TimeoutCleared
 17547 ;; This function is called by:
 17548 ;;		_CC2500_PowerOnInitial
 17549 ;; This function uses a non-reentrant model
 17550 ;;
 17551                           
 17552                           
 17553                           ;psect for function _CC2500_PowerRST
 17554  12BD                     _CC2500_PowerRST:	
 17555                           
 17556                           ;CC2500_B1.c: 136: RC1 = 0;
 17557                           
 17558                           ;incstack = 0
 17559                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17560  12BD  0020               	movlb	0	; select bank0
 17561  12BE  108E               	bcf	14,1	;volatile
 17562                           
 17563                           ;CC2500_B1.c: 137: RC0 = 0;
 17564  12BF  100E               	bcf	14,0	;volatile
 17565                           
 17566                           ;CC2500_B1.c: 138: RC4 = 1;
 17567  12C0  160E               	bsf	14,4	;volatile
 17568                           
 17569                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 17570  12C1  300A               	movlw	10
 17571  12C2  00A0               	movwf	DelayTime_1us@count
 17572  12C3  3000               	movlw	0
 17573  12C4  00A1               	movwf	DelayTime_1us@count+1
 17574  12C5  319F  2733  3192   	fcall	_DelayTime_1us
 17575                           
 17576                           ;CC2500_B1.c: 140: RC4 = 0;
 17577  12C8  0020               	movlb	0	; select bank0
 17578  12C9  120E               	bcf	14,4	;volatile
 17579                           
 17580                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 17581  12CA  300A               	movlw	10
 17582  12CB  00A0               	movwf	DelayTime_1us@count
 17583  12CC  3000               	movlw	0
 17584  12CD  00A1               	movwf	DelayTime_1us@count+1
 17585  12CE  319F  2733  3192   	fcall	_DelayTime_1us
 17586                           
 17587                           ;CC2500_B1.c: 142: RC4 = 1;
 17588  12D1  0020               	movlb	0	; select bank0
 17589  12D2  160E               	bsf	14,4	;volatile
 17590                           
 17591                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 17592  12D3  3028               	movlw	40
 17593  12D4  00A0               	movwf	DelayTime_1us@count
 17594  12D5  3000               	movlw	0
 17595  12D6  00A1               	movwf	DelayTime_1us@count+1
 17596  12D7  319F  2733  3192   	fcall	_DelayTime_1us
 17597                           
 17598                           ;CC2500_B1.c: 144: RC4 = 0;
 17599  12DA  0020               	movlb	0	; select bank0
 17600  12DB  120E               	bcf	14,4	;volatile
 17601                           
 17602                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 17603  12DC  3030               	movlw	48
 17604  12DD  00A6               	movwf	??_CC2500_PowerRST
 17605  12DE  0826               	movf	??_CC2500_PowerRST,w
 17606  12DF  00FA               	movwf	_SPI0Buffer
 17607                           
 17608                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 17609  12E0  2AE4               	goto	l9593
 17610  12E1                     l9591:	
 17611                           
 17612                           ;CC2500_B1.c: 147: Timeout_Counter();
 17613  12E1  319C  248F  3192   	fcall	_Timeout_Counter
 17614  12E4                     l9593:	
 17615  12E4  0020               	movlb	0	; select bank0
 17616  12E5  1D0E               	btfss	14,2	;volatile
 17617  12E6  2AEA               	goto	l9597
 17618  12E7  0021               	movlb	1	; select bank1
 17619  12E8  1D30               	btfss	(_myMain^(0+128)+16),2
 17620  12E9  2AE1               	goto	l9591
 17621  12EA                     l9597:	
 17622                           
 17623                           ;CC2500_B1.c: 148: };
 17624                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 17625  12EA  3199  21FB  3192   	fcall	_set_TimeoutCleared
 17626                           
 17627                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 17628  12ED  319C  2453  3192   	fcall	_CC2500_WriteByte
 17629                           
 17630                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 17631  12F0  2AF4               	goto	l9603
 17632  12F1                     l9601:	
 17633                           
 17634                           ;CC2500_B1.c: 152: Timeout_Counter();
 17635  12F1  319C  248F  3192   	fcall	_Timeout_Counter
 17636  12F4                     l9603:	
 17637  12F4  0020               	movlb	0	; select bank0
 17638  12F5  1D0E               	btfss	14,2	;volatile
 17639  12F6  2AFA               	goto	l9607
 17640  12F7  0021               	movlb	1	; select bank1
 17641  12F8  1D30               	btfss	(_myMain^(0+128)+16),2
 17642  12F9  2AF1               	goto	l9601
 17643  12FA                     l9607:	
 17644                           
 17645                           ;CC2500_B1.c: 153: };
 17646                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 17647  12FA  3199  21FB         	fcall	_set_TimeoutCleared
 17648                           
 17649                           ;CC2500_B1.c: 155: RC0 = 0;
 17650  12FC  0020               	movlb	0	; select bank0
 17651  12FD  100E               	bcf	14,0	;volatile
 17652                           
 17653                           ;CC2500_B1.c: 156: RC4 = 1;
 17654  12FE  160E               	bsf	14,4	;volatile
 17655  12FF  0008               	return
 17656  1300                     __end_of_CC2500_PowerRST:	
 17657                           
 17658                           	psect	text120
 17659  1F81                     __ptext120:	
 17660 ;; *************** function _CC2500_InitSetREG *****************
 17661 ;; Defined at:
 17662 ;;		line 162 in file "../src/CC2500_B1.c"
 17663 ;; Parameters:    Size  Location     Type
 17664 ;;		None
 17665 ;; Auto vars:     Size  Location     Type
 17666 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17667 ;;  temp2           1    7[BANK0 ] unsigned char 
 17668 ;;  temp1           1    6[BANK0 ] unsigned char 
 17669 ;; Return value:  Size  Location     Type
 17670 ;;		None               void
 17671 ;; Registers used:
 17672 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17673 ;; Tracked objects:
 17674 ;;		On entry : 0/0
 17675 ;;		On exit  : 0/0
 17676 ;;		Unchanged: 0/0
 17677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17679 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17680 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17681 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17682 ;;Total ram usage:        4 bytes
 17683 ;; Hardware stack levels used:    1
 17684 ;; Hardware stack levels required when called:    7
 17685 ;; This function calls:
 17686 ;;		_CC2500_WriteREG
 17687 ;; This function is called by:
 17688 ;;		_CC2500_PowerOnInitial
 17689 ;; This function uses a non-reentrant model
 17690 ;;
 17691                           
 17692                           
 17693                           ;psect for function _CC2500_InitSetREG
 17694  1F81                     _CC2500_InitSetREG:	
 17695                           
 17696                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17697                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17698                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17699                           
 17700                           ;incstack = 0
 17701                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17702  1F81  0020               	movlb	0	; select bank0
 17703  1F82  01A8               	clrf	CC2500_InitSetREG@loop_c
 17704  1F83                     L10:	
 17705  1F83  302F               	movlw	47
 17706  1F84  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17707  1F85  1803               	btfsc	3,0
 17708  1F86  0008               	return
 17709                           
 17710                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17711  1F87  0828               	movf	CC2500_InitSetREG@loop_c,w
 17712  1F88  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17713  1F89  0084               	movwf	4
 17714  1F8A  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17715  1F8B  1803               	skipnc
 17716  1F8C  3E01               	addlw	1
 17717  1F8D  0085               	movwf	5
 17718  1F8E  0800               	movf	0,w	;code access
 17719  1F8F  00A5               	movwf	??_CC2500_InitSetREG
 17720  1F90  0825               	movf	??_CC2500_InitSetREG,w
 17721  1F91  00A6               	movwf	CC2500_InitSetREG@temp1
 17722                           
 17723                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17724  1F92  0828               	movf	CC2500_InitSetREG@loop_c,w
 17725  1F93  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17726  1F94  0084               	movwf	4
 17727  1F95  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17728  1F96  1803               	skipnc
 17729  1F97  3E01               	addlw	1
 17730  1F98  0085               	movwf	5
 17731  1F99  0800               	movf	0,w	;code access
 17732  1F9A  00A5               	movwf	??_CC2500_InitSetREG
 17733  1F9B  0825               	movf	??_CC2500_InitSetREG,w
 17734  1F9C  00A7               	movwf	CC2500_InitSetREG@temp2
 17735                           
 17736                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17737  1F9D  0827               	movf	CC2500_InitSetREG@temp2,w
 17738  1F9E  00A5               	movwf	??_CC2500_InitSetREG
 17739  1F9F  0825               	movf	??_CC2500_InitSetREG,w
 17740  1FA0  00A2               	movwf	CC2500_WriteREG@value
 17741  1FA1  0826               	movf	CC2500_InitSetREG@temp1,w
 17742  1FA2  319E  2688  319F   	fcall	_CC2500_WriteREG
 17743  1FA5  3001               	movlw	1
 17744  1FA6  0020               	movlb	0	; select bank0
 17745  1FA7  00A5               	movwf	??_CC2500_InitSetREG
 17746  1FA8  0825               	movf	??_CC2500_InitSetREG,w
 17747  1FA9  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17748  1FAA  2F83               	goto	L10
 17749  1FAB                     __end_of_CC2500_InitSetREG:	
 17750                           
 17751                           	psect	text121
 17752  1DEB                     __ptext121:	
 17753 ;; *************** function _CC2500_InitPATable *****************
 17754 ;; Defined at:
 17755 ;;		line 177 in file "../src/CC2500_B1.c"
 17756 ;; Parameters:    Size  Location     Type
 17757 ;;		None
 17758 ;; Auto vars:     Size  Location     Type
 17759 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17760 ;;  temp            1    6[BANK0 ] unsigned char 
 17761 ;; Return value:  Size  Location     Type
 17762 ;;		None               void
 17763 ;; Registers used:
 17764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17765 ;; Tracked objects:
 17766 ;;		On entry : 0/0
 17767 ;;		On exit  : 0/0
 17768 ;;		Unchanged: 0/0
 17769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17771 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17773 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17774 ;;Total ram usage:        3 bytes
 17775 ;; Hardware stack levels used:    1
 17776 ;; Hardware stack levels required when called:    7
 17777 ;; This function calls:
 17778 ;;		_CC2500_WriteREG
 17779 ;; This function is called by:
 17780 ;;		_CC2500_PowerOnInitial
 17781 ;; This function uses a non-reentrant model
 17782 ;;
 17783                           
 17784                           
 17785                           ;psect for function _CC2500_InitPATable
 17786  1DEB                     _CC2500_InitPATable:	
 17787                           
 17788                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17789                           ;CC2500_B1.c: 179: unsigned char temp;
 17790                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17791                           
 17792                           ;incstack = 0
 17793                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17794  1DEB  0020               	movlb	0	; select bank0
 17795  1DEC  01A7               	clrf	CC2500_InitPATable@loop_d
 17796  1DED                     L11:	
 17797  1DED  3008               	movlw	8
 17798  1DEE  0227               	subwf	CC2500_InitPATable@loop_d,w
 17799  1DEF  1803               	btfsc	3,0
 17800  1DF0  0008               	return
 17801                           
 17802                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17803  1DF1  0827               	movf	CC2500_InitPATable@loop_d,w
 17804  1DF2  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17805  1DF3  0084               	movwf	4
 17806  1DF4  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17807  1DF5  1803               	skipnc
 17808  1DF6  3E01               	addlw	1
 17809  1DF7  0085               	movwf	5
 17810  1DF8  0800               	movf	0,w	;code access
 17811  1DF9  00A5               	movwf	??_CC2500_InitPATable
 17812  1DFA  0825               	movf	??_CC2500_InitPATable,w
 17813  1DFB  00A6               	movwf	CC2500_InitPATable@temp
 17814                           
 17815                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17816  1DFC  0826               	movf	CC2500_InitPATable@temp,w
 17817  1DFD  00A5               	movwf	??_CC2500_InitPATable
 17818  1DFE  0825               	movf	??_CC2500_InitPATable,w
 17819  1DFF  00A2               	movwf	CC2500_WriteREG@value
 17820  1E00  303E               	movlw	62
 17821  1E01  319E  2688  319D   	fcall	_CC2500_WriteREG
 17822  1E04  3001               	movlw	1
 17823  1E05  0020               	movlb	0	; select bank0
 17824  1E06  00A5               	movwf	??_CC2500_InitPATable
 17825  1E07  0825               	movf	??_CC2500_InitPATable,w
 17826  1E08  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17827  1E09  2DED               	goto	L11
 17828  1E0A                     __end_of_CC2500_InitPATable:	
 17829                           
 17830                           	psect	text122
 17831  1E88                     __ptext122:	
 17832 ;; *************** function _CC2500_WriteREG *****************
 17833 ;; Defined at:
 17834 ;;		line 254 in file "../src/CC2500_B1.c"
 17835 ;; Parameters:    Size  Location     Type
 17836 ;;  w_addr          1    wreg     unsigned char 
 17837 ;;  value           1    2[BANK0 ] unsigned char 
 17838 ;; Auto vars:     Size  Location     Type
 17839 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17840 ;; Return value:  Size  Location     Type
 17841 ;;		None               void
 17842 ;; Registers used:
 17843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17844 ;; Tracked objects:
 17845 ;;		On entry : 0/0
 17846 ;;		On exit  : 0/0
 17847 ;;		Unchanged: 0/0
 17848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17849 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17850 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17851 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17852 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17853 ;;Total ram usage:        3 bytes
 17854 ;; Hardware stack levels used:    1
 17855 ;; Hardware stack levels required when called:    6
 17856 ;; This function calls:
 17857 ;;		_CC2500_WriteByte
 17858 ;;		_Timeout_Counter
 17859 ;;		_set_TimeoutCleared
 17860 ;; This function is called by:
 17861 ;;		_CC2500_InitSetREG
 17862 ;;		_CC2500_InitPATable
 17863 ;; This function uses a non-reentrant model
 17864 ;;
 17865                           
 17866                           
 17867                           ;psect for function _CC2500_WriteREG
 17868  1E88                     _CC2500_WriteREG:	
 17869                           
 17870                           ;incstack = 0
 17871                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17872                           ;CC2500_WriteREG@w_addr stored from wreg
 17873  1E88  0020               	movlb	0	; select bank0
 17874  1E89  00A4               	movwf	CC2500_WriteREG@w_addr
 17875                           
 17876                           ;CC2500_B1.c: 255: RC4 = 0;
 17877  1E8A  120E               	bcf	14,4	;volatile
 17878                           
 17879                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17880  1E8B  0824               	movf	CC2500_WriteREG@w_addr,w
 17881  1E8C  00A3               	movwf	??_CC2500_WriteREG
 17882  1E8D  0823               	movf	??_CC2500_WriteREG,w
 17883  1E8E  00FA               	movwf	_SPI0Buffer
 17884                           
 17885                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17886  1E8F  2E93               	goto	l9341
 17887  1E90                     l9339:	
 17888                           
 17889                           ;CC2500_B1.c: 258: Timeout_Counter();
 17890  1E90  319C  248F  319E   	fcall	_Timeout_Counter
 17891  1E93                     l9341:	
 17892  1E93  0020               	movlb	0	; select bank0
 17893  1E94  1D0E               	btfss	14,2	;volatile
 17894  1E95  2E99               	goto	l9345
 17895  1E96  0021               	movlb	1	; select bank1
 17896  1E97  1D30               	btfss	(_myMain^(0+128)+16),2
 17897  1E98  2E90               	goto	l9339
 17898  1E99                     l9345:	
 17899                           
 17900                           ;CC2500_B1.c: 259: };
 17901                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17902  1E99  3199  21FB  319E   	fcall	_set_TimeoutCleared
 17903                           
 17904                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17905  1E9C  319C  2453  319E   	fcall	_CC2500_WriteByte
 17906                           
 17907                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17908  1E9F  0020               	movlb	0	; select bank0
 17909  1EA0  0822               	movf	CC2500_WriteREG@value,w
 17910  1EA1  00A3               	movwf	??_CC2500_WriteREG
 17911  1EA2  0823               	movf	??_CC2500_WriteREG,w
 17912  1EA3  00FA               	movwf	_SPI0Buffer
 17913                           
 17914                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17915  1EA4  319C  2453         	fcall	_CC2500_WriteByte
 17916                           
 17917                           ;CC2500_B1.c: 265: RC4 = 1;
 17918  1EA6  0020               	movlb	0	; select bank0
 17919  1EA7  160E               	bsf	14,4	;volatile
 17920  1EA8  0008               	return
 17921  1EA9                     __end_of_CC2500_WriteREG:	
 17922                           
 17923                           	psect	text123
 17924  1AA7                     __ptext123:	
 17925 ;; *************** function _CC2500_FrequencyCabr *****************
 17926 ;; Defined at:
 17927 ;;		line 204 in file "../src/CC2500_B1.c"
 17928 ;; Parameters:    Size  Location     Type
 17929 ;;		None
 17930 ;; Auto vars:     Size  Location     Type
 17931 ;;		None
 17932 ;; Return value:  Size  Location     Type
 17933 ;;		None               void
 17934 ;; Registers used:
 17935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17936 ;; Tracked objects:
 17937 ;;		On entry : 0/0
 17938 ;;		On exit  : 0/0
 17939 ;;		Unchanged: 0/0
 17940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17945 ;;Total ram usage:        0 bytes
 17946 ;; Hardware stack levels used:    1
 17947 ;; Hardware stack levels required when called:    7
 17948 ;; This function calls:
 17949 ;;		_CC2500_WriteCommand
 17950 ;;		_DelayTime_1us
 17951 ;; This function is called by:
 17952 ;;		_CC2500_PowerOnInitial
 17953 ;; This function uses a non-reentrant model
 17954 ;;
 17955                           
 17956                           
 17957                           ;psect for function _CC2500_FrequencyCabr
 17958  1AA7                     _CC2500_FrequencyCabr:	
 17959                           
 17960                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17961                           
 17962                           ;incstack = 0
 17963                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17964  1AA7  3033               	movlw	51
 17965  1AA8  319D  2513  319A   	fcall	_CC2500_WriteCommand
 17966                           
 17967                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17968  1AAB  30E8               	movlw	232
 17969  1AAC  0020               	movlb	0	; select bank0
 17970  1AAD  00A0               	movwf	DelayTime_1us@count
 17971  1AAE  3003               	movlw	3
 17972  1AAF  00A1               	movwf	DelayTime_1us@count+1
 17973  1AB0  319F  2733         	fcall	_DelayTime_1us
 17974  1AB2  0008               	return
 17975  1AB3                     __end_of_CC2500_FrequencyCabr:	
 17976                           
 17977                           	psect	text124
 17978  1F33                     __ptext124:	
 17979 ;; *************** function _DelayTime_1us *****************
 17980 ;; Defined at:
 17981 ;;		line 323 in file "../src/CC2500_B1.c"
 17982 ;; Parameters:    Size  Location     Type
 17983 ;;  count           2    0[BANK0 ] int 
 17984 ;; Auto vars:     Size  Location     Type
 17985 ;;  j               2    4[BANK0 ] unsigned int 
 17986 ;;  i               2    2[BANK0 ] unsigned int 
 17987 ;; Return value:  Size  Location     Type
 17988 ;;		None               void
 17989 ;; Registers used:
 17990 ;;		wreg, status,2
 17991 ;; Tracked objects:
 17992 ;;		On entry : 0/0
 17993 ;;		On exit  : 0/0
 17994 ;;		Unchanged: 0/0
 17995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17996 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17997 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17999 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18000 ;;Total ram usage:        6 bytes
 18001 ;; Hardware stack levels used:    1
 18002 ;; Hardware stack levels required when called:    5
 18003 ;; This function calls:
 18004 ;;		Nothing
 18005 ;; This function is called by:
 18006 ;;		_CC2500_PowerRST
 18007 ;;		_CC2500_FrequencyCabr
 18008 ;; This function uses a non-reentrant model
 18009 ;;
 18010                           
 18011                           
 18012                           ;psect for function _DelayTime_1us
 18013  1F33                     _DelayTime_1us:	
 18014                           
 18015                           ;CC2500_B1.c: 324: unsigned int i, j;
 18016                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 18017                           
 18018                           ;incstack = 0
 18019                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 18020  1F33  3001               	movlw	1
 18021  1F34  0020               	movlb	0	; select bank0
 18022  1F35  00A2               	movwf	DelayTime_1us@i
 18023  1F36  3000               	movlw	0
 18024  1F37  00A3               	movwf	DelayTime_1us@i+1
 18025  1F38                     l386:	
 18026  1F38  0821               	movf	DelayTime_1us@count+1,w
 18027  1F39  0223               	subwf	DelayTime_1us@i+1,w
 18028  1F3A  1D03               	skipz
 18029  1F3B  2F3E               	goto	u9615
 18030  1F3C  0820               	movf	DelayTime_1us@count,w
 18031  1F3D  0222               	subwf	DelayTime_1us@i,w
 18032  1F3E                     u9615:	
 18033  1F3E  1803               	btfsc	3,0
 18034  1F3F  0008               	return
 18035                           
 18036                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 18037  1F40  01A4               	clrf	DelayTime_1us@j
 18038  1F41  01A5               	clrf	DelayTime_1us@j+1
 18039  1F42  3000               	movlw	0
 18040  1F43  0225               	subwf	DelayTime_1us@j+1,w
 18041  1F44  3002               	movlw	2
 18042  1F45  1903               	skipnz
 18043  1F46  0224               	subwf	DelayTime_1us@j,w
 18044  1F47  1803               	btfsc	3,0
 18045  1F48  2F54               	goto	l9333
 18046  1F49                     l9331:	
 18047  1F49  3001               	movlw	1
 18048  1F4A  07A4               	addwf	DelayTime_1us@j,f
 18049  1F4B  3000               	movlw	0
 18050  1F4C  3DA5               	addwfc	DelayTime_1us@j+1,f
 18051  1F4D  3000               	movlw	0
 18052  1F4E  0225               	subwf	DelayTime_1us@j+1,w
 18053  1F4F  3002               	movlw	2
 18054  1F50  1903               	skipnz
 18055  1F51  0224               	subwf	DelayTime_1us@j,w
 18056  1F52  1C03               	skipc
 18057  1F53  2F49               	goto	l9331
 18058  1F54                     l9333:	
 18059  1F54  3001               	movlw	1
 18060  1F55  07A2               	addwf	DelayTime_1us@i,f
 18061  1F56  3000               	movlw	0
 18062  1F57  3DA3               	addwfc	DelayTime_1us@i+1,f
 18063  1F58  2F38               	goto	l386
 18064  1F59                     __end_of_DelayTime_1us:	
 18065                           
 18066                           	psect	text125
 18067  19EF                     __ptext125:	
 18068 ;; *************** function _CC2500_ClearTXFIFO *****************
 18069 ;; Defined at:
 18070 ;;		line 190 in file "../src/CC2500_B1.c"
 18071 ;; Parameters:    Size  Location     Type
 18072 ;;		None
 18073 ;; Auto vars:     Size  Location     Type
 18074 ;;		None
 18075 ;; Return value:  Size  Location     Type
 18076 ;;		None               void
 18077 ;; Registers used:
 18078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18079 ;; Tracked objects:
 18080 ;;		On entry : 0/0
 18081 ;;		On exit  : 0/0
 18082 ;;		Unchanged: 0/0
 18083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18088 ;;Total ram usage:        0 bytes
 18089 ;; Hardware stack levels used:    1
 18090 ;; Hardware stack levels required when called:    7
 18091 ;; This function calls:
 18092 ;;		_CC2500_WriteCommand
 18093 ;; This function is called by:
 18094 ;;		_CC2500_PowerOnInitial
 18095 ;; This function uses a non-reentrant model
 18096 ;;
 18097                           
 18098                           
 18099                           ;psect for function _CC2500_ClearTXFIFO
 18100  19EF                     _CC2500_ClearTXFIFO:	
 18101                           
 18102                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 18103                           
 18104                           ;incstack = 0
 18105                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18106  19EF  303B               	movlw	59
 18107  19F0  319D  2513         	fcall	_CC2500_WriteCommand
 18108  19F2  0008               	return
 18109  19F3                     __end_of_CC2500_ClearTXFIFO:	
 18110                           
 18111                           	psect	text126
 18112  19EB                     __ptext126:	
 18113 ;; *************** function _CC2500_ClearRXFIFO *****************
 18114 ;; Defined at:
 18115 ;;		line 197 in file "../src/CC2500_B1.c"
 18116 ;; Parameters:    Size  Location     Type
 18117 ;;		None
 18118 ;; Auto vars:     Size  Location     Type
 18119 ;;		None
 18120 ;; Return value:  Size  Location     Type
 18121 ;;		None               void
 18122 ;; Registers used:
 18123 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18124 ;; Tracked objects:
 18125 ;;		On entry : 0/0
 18126 ;;		On exit  : 0/0
 18127 ;;		Unchanged: 0/0
 18128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18133 ;;Total ram usage:        0 bytes
 18134 ;; Hardware stack levels used:    1
 18135 ;; Hardware stack levels required when called:    7
 18136 ;; This function calls:
 18137 ;;		_CC2500_WriteCommand
 18138 ;; This function is called by:
 18139 ;;		_CC2500_PowerOnInitial
 18140 ;; This function uses a non-reentrant model
 18141 ;;
 18142                           
 18143                           
 18144                           ;psect for function _CC2500_ClearRXFIFO
 18145  19EB                     _CC2500_ClearRXFIFO:	
 18146                           
 18147                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 18148                           
 18149                           ;incstack = 0
 18150                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18151  19EB  303A               	movlw	58
 18152  19EC  319D  2513         	fcall	_CC2500_WriteCommand
 18153  19EE  0008               	return
 18154  19EF                     __end_of_CC2500_ClearRXFIFO:	
 18155                           
 18156                           	psect	text127
 18157  1D13                     __ptext127:	
 18158 ;; *************** function _CC2500_WriteCommand *****************
 18159 ;; Defined at:
 18160 ;;		line 288 in file "../src/CC2500_B1.c"
 18161 ;; Parameters:    Size  Location     Type
 18162 ;;  command         1    wreg     unsigned char 
 18163 ;; Auto vars:     Size  Location     Type
 18164 ;;  command         1    3[BANK0 ] unsigned char 
 18165 ;; Return value:  Size  Location     Type
 18166 ;;		None               void
 18167 ;; Registers used:
 18168 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18169 ;; Tracked objects:
 18170 ;;		On entry : 0/0
 18171 ;;		On exit  : 0/0
 18172 ;;		Unchanged: 0/0
 18173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18175 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18176 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18177 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18178 ;;Total ram usage:        2 bytes
 18179 ;; Hardware stack levels used:    1
 18180 ;; Hardware stack levels required when called:    6
 18181 ;; This function calls:
 18182 ;;		_CC2500_WriteByte
 18183 ;;		_Timeout_Counter
 18184 ;;		_set_TimeoutCleared
 18185 ;; This function is called by:
 18186 ;;		_CC2500_TxData
 18187 ;;		_CC2500_ClearTXFIFO
 18188 ;;		_CC2500_ClearRXFIFO
 18189 ;;		_CC2500_FrequencyCabr
 18190 ;;		_CC2500_SIDLEMode
 18191 ;;		_setRF_Main
 18192 ;;		_RF_RxDisable
 18193 ;; This function uses a non-reentrant model
 18194 ;;
 18195                           
 18196                           
 18197                           ;psect for function _CC2500_WriteCommand
 18198  1D13                     _CC2500_WriteCommand:	
 18199                           
 18200                           ;incstack = 0
 18201                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18202                           ;CC2500_WriteCommand@command stored from wreg
 18203  1D13  0020               	movlb	0	; select bank0
 18204  1D14  00A3               	movwf	CC2500_WriteCommand@command
 18205                           
 18206                           ;CC2500_B1.c: 289: RC4 = 0;
 18207  1D15  120E               	bcf	14,4	;volatile
 18208                           
 18209                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 18210  1D16  0823               	movf	CC2500_WriteCommand@command,w
 18211  1D17  00A2               	movwf	??_CC2500_WriteCommand
 18212  1D18  0822               	movf	??_CC2500_WriteCommand,w
 18213  1D19  00FA               	movwf	_SPI0Buffer
 18214                           
 18215                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 18216  1D1A  2D1E               	goto	l9073
 18217  1D1B                     l9071:	
 18218                           
 18219                           ;CC2500_B1.c: 293: Timeout_Counter();
 18220  1D1B  319C  248F  319D   	fcall	_Timeout_Counter
 18221  1D1E                     l9073:	
 18222  1D1E  0020               	movlb	0	; select bank0
 18223  1D1F  1D0E               	btfss	14,2	;volatile
 18224  1D20  2D24               	goto	l9077
 18225  1D21  0021               	movlb	1	; select bank1
 18226  1D22  1D30               	btfss	(_myMain^(0+128)+16),2
 18227  1D23  2D1B               	goto	l9071
 18228  1D24                     l9077:	
 18229                           
 18230                           ;CC2500_B1.c: 294: };
 18231                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 18232  1D24  3199  21FB  319D   	fcall	_set_TimeoutCleared
 18233                           
 18234                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 18235  1D27  319C  2453         	fcall	_CC2500_WriteByte
 18236                           
 18237                           ;CC2500_B1.c: 298: RC4 = 1;
 18238  1D29  0020               	movlb	0	; select bank0
 18239  1D2A  160E               	bsf	14,4	;volatile
 18240  1D2B  0008               	return
 18241  1D2C                     __end_of_CC2500_WriteCommand:	
 18242                           
 18243                           	psect	text128
 18244  19FB                     __ptext128:	
 18245 ;; *************** function _set_TimeoutCleared *****************
 18246 ;; Defined at:
 18247 ;;		line 278 in file "../src/Main_B1.c"
 18248 ;; Parameters:    Size  Location     Type
 18249 ;;		None
 18250 ;; Auto vars:     Size  Location     Type
 18251 ;;		None
 18252 ;; Return value:  Size  Location     Type
 18253 ;;		None               void
 18254 ;; Registers used:
 18255 ;;		status,2
 18256 ;; Tracked objects:
 18257 ;;		On entry : 0/0
 18258 ;;		On exit  : 0/0
 18259 ;;		Unchanged: 0/0
 18260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18265 ;;Total ram usage:        0 bytes
 18266 ;; Hardware stack levels used:    1
 18267 ;; Hardware stack levels required when called:    5
 18268 ;; This function calls:
 18269 ;;		Nothing
 18270 ;; This function is called by:
 18271 ;;		_CC2500_TxData
 18272 ;;		_CC2500_RxData
 18273 ;;		_CC2500_PowerRST
 18274 ;;		_CC2500_WriteREG
 18275 ;;		_CC2500_WriteCommand
 18276 ;;		_CC2500_ReadStatus
 18277 ;;		_getAD
 18278 ;;		_TouchPower
 18279 ;;		_CC2500_ReadREG
 18280 ;; This function uses a non-reentrant model
 18281 ;;
 18282                           
 18283                           
 18284                           ;psect for function _set_TimeoutCleared
 18285  19FB                     _set_TimeoutCleared:	
 18286                           
 18287                           ;Main_B1.c: 279: myMain.Timeout = 0;
 18288                           
 18289                           ;incstack = 0
 18290                           ; Regs used in _set_TimeoutCleared: [status,2]
 18291  19FB  0021               	movlb	1	; select bank1
 18292  19FC  1130               	bcf	(_myMain^(0+128)+16),2
 18293                           
 18294                           ;Main_B1.c: 280: myMain.Timeout_Counter = 0;
 18295  19FD  01B1               	clrf	(_myMain^(0+128)+17)
 18296  19FE  01B2               	clrf	((_myMain+1)^(0+128)+17)
 18297  19FF  0008               	return
 18298  1A00                     __end_of_set_TimeoutCleared:	
 18299                           
 18300                           	psect	text129
 18301  1C8F                     __ptext129:	
 18302 ;; *************** function _Timeout_Counter *****************
 18303 ;; Defined at:
 18304 ;;		line 268 in file "../src/Main_B1.c"
 18305 ;; Parameters:    Size  Location     Type
 18306 ;;		None
 18307 ;; Auto vars:     Size  Location     Type
 18308 ;;		None
 18309 ;; Return value:  Size  Location     Type
 18310 ;;		None               void
 18311 ;; Registers used:
 18312 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18313 ;; Tracked objects:
 18314 ;;		On entry : 0/0
 18315 ;;		On exit  : 0/0
 18316 ;;		Unchanged: 0/0
 18317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18322 ;;Total ram usage:        0 bytes
 18323 ;; Hardware stack levels used:    1
 18324 ;; Hardware stack levels required when called:    5
 18325 ;; This function calls:
 18326 ;;		Nothing
 18327 ;; This function is called by:
 18328 ;;		_CC2500_TxData
 18329 ;;		_CC2500_RxData
 18330 ;;		_CC2500_PowerRST
 18331 ;;		_CC2500_WriteREG
 18332 ;;		_CC2500_WriteCommand
 18333 ;;		_CC2500_ReadStatus
 18334 ;;		_getAD
 18335 ;;		_TouchPower
 18336 ;;		_CC2500_ReadREG
 18337 ;; This function uses a non-reentrant model
 18338 ;;
 18339                           
 18340                           
 18341                           ;psect for function _Timeout_Counter
 18342  1C8F                     _Timeout_Counter:	
 18343                           
 18344                           ;Main_B1.c: 269: myMain.Timeout_Counter++;
 18345                           
 18346                           ;incstack = 0
 18347                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18348  1C8F  3001               	movlw	1
 18349  1C90  0021               	movlb	1	; select bank1
 18350  1C91  07B1               	addwf	(_myMain^(0+128)+17),f
 18351  1C92  3000               	movlw	0
 18352  1C93  3DB2               	addwfc	((_myMain+1)^(0+128)+17),f
 18353                           
 18354                           ;Main_B1.c: 270: if (myMain.Timeout_Counter == 10000) {
 18355  1C94  3011               	movlw	17
 18356  1C95  3EA0               	addlw	_myMain& (0+255)
 18357  1C96  0086               	movwf	6
 18358  1C97  0187               	clrf	7
 18359  1C98  3F40               	moviw [0]fsr1
 18360  1C99  3A10               	xorlw	16
 18361  1C9A  1D03               	skipz
 18362  1C9B  2C9E               	goto	u9115
 18363  1C9C  3F41               	moviw [1]fsr1
 18364  1C9D  3A27               	xorlw	39
 18365  1C9E                     u9115:	
 18366  1C9E  1D03               	skipz
 18367  1C9F  0008               	return
 18368                           
 18369                           ;Main_B1.c: 271: myMain.Timeout_Counter = 0;
 18370  1CA0  01B1               	clrf	(_myMain^(0+128)+17)
 18371  1CA1  01B2               	clrf	((_myMain+1)^(0+128)+17)
 18372                           
 18373                           ;Main_B1.c: 272: myMain.Timeout = 1;
 18374  1CA2  1530               	bsf	(_myMain^(0+128)+16),2
 18375  1CA3  0008               	return
 18376  1CA4                     __end_of_Timeout_Counter:	
 18377                           
 18378                           	psect	text130
 18379  1C53                     __ptext130:	
 18380 ;; *************** function _CC2500_WriteByte *****************
 18381 ;; Defined at:
 18382 ;;		line 222 in file "../src/CC2500_B1.c"
 18383 ;; Parameters:    Size  Location     Type
 18384 ;;		None
 18385 ;; Auto vars:     Size  Location     Type
 18386 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18387 ;; Return value:  Size  Location     Type
 18388 ;;		None               void
 18389 ;; Registers used:
 18390 ;;		wreg, status,2, status,0
 18391 ;; Tracked objects:
 18392 ;;		On entry : 0/0
 18393 ;;		On exit  : 0/0
 18394 ;;		Unchanged: 0/0
 18395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18397 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18399 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18400 ;;Total ram usage:        2 bytes
 18401 ;; Hardware stack levels used:    1
 18402 ;; Hardware stack levels required when called:    5
 18403 ;; This function calls:
 18404 ;;		Nothing
 18405 ;; This function is called by:
 18406 ;;		_CC2500_TxData
 18407 ;;		_CC2500_RxData
 18408 ;;		_CC2500_PowerRST
 18409 ;;		_CC2500_WriteREG
 18410 ;;		_CC2500_WriteCommand
 18411 ;;		_CC2500_ReadStatus
 18412 ;;		_CC2500_ReadREG
 18413 ;; This function uses a non-reentrant model
 18414 ;;
 18415                           
 18416                           
 18417                           ;psect for function _CC2500_WriteByte
 18418  1C53                     _CC2500_WriteByte:	
 18419                           
 18420                           ;CC2500_B1.c: 223: unsigned char loop_a;
 18421                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 18422                           
 18423                           ;incstack = 0
 18424                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18425  1C53  0020               	movlb	0	; select bank0
 18426  1C54  01A1               	clrf	CC2500_WriteByte@loop_a
 18427  1C55                     L12:	
 18428  1C55  3008               	movlw	8
 18429  1C56  0221               	subwf	CC2500_WriteByte@loop_a,w
 18430  1C57  1803               	btfsc	3,0
 18431  1C58  0008               	return
 18432                           
 18433                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 18434  1C59  1FFA               	btfss	_SPI0Buffer,7
 18435  1C5A  2C5D               	goto	l342
 18436                           
 18437                           ;CC2500_B1.c: 226: RC0 = 1;
 18438  1C5B  140E               	bsf	14,0	;volatile
 18439  1C5C  2C5E               	goto	l343
 18440  1C5D                     l342:	
 18441                           
 18442                           ;CC2500_B1.c: 227: else
 18443                           ;CC2500_B1.c: 228: RC0 = 0;
 18444  1C5D  100E               	bcf	14,0	;volatile
 18445  1C5E                     l343:	
 18446                           
 18447                           ;CC2500_B1.c: 229: RC1 = 1;
 18448  1C5E  148E               	bsf	14,1	;volatile
 18449                           
 18450                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 18451  1C5F  1003               	clrc
 18452  1C60  0DFA               	rlf	_SPI0Buffer,f
 18453                           
 18454                           ;CC2500_B1.c: 231: RC1 = 0;
 18455  1C61  108E               	bcf	14,1	;volatile
 18456  1C62  3001               	movlw	1
 18457  1C63  00A0               	movwf	??_CC2500_WriteByte
 18458  1C64  0820               	movf	??_CC2500_WriteByte,w
 18459  1C65  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18460  1C66  2C55               	goto	L12
 18461  1C67                     __end_of_CC2500_WriteByte:	
 18462                           
 18463                           	psect	text131
 18464  1388                     __ptext131:	
 18465 ;; *************** function _Buzzer_Main *****************
 18466 ;; Defined at:
 18467 ;;		line 46 in file "../src/Buzzer_B1.c"
 18468 ;; Parameters:    Size  Location     Type
 18469 ;;		None
 18470 ;; Auto vars:     Size  Location     Type
 18471 ;;		None
 18472 ;; Return value:  Size  Location     Type
 18473 ;;		None               void
 18474 ;; Registers used:
 18475 ;;		wreg, status,2, status,0
 18476 ;; Tracked objects:
 18477 ;;		On entry : 0/0
 18478 ;;		On exit  : 0/0
 18479 ;;		Unchanged: 0/0
 18480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18484 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18485 ;;Total ram usage:        1 bytes
 18486 ;; Hardware stack levels used:    1
 18487 ;; Hardware stack levels required when called:    5
 18488 ;; This function calls:
 18489 ;;		Nothing
 18490 ;; This function is called by:
 18491 ;;		_main
 18492 ;; This function uses a non-reentrant model
 18493 ;;
 18494                           
 18495                           
 18496                           ;psect for function _Buzzer_Main
 18497  1388                     _Buzzer_Main:	
 18498                           
 18499                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18500                           
 18501                           ;incstack = 0
 18502                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18503  1388  0021               	movlb	1	; select bank1
 18504  1389  1CB3               	btfss	_Buz1^(0+128),1
 18505  138A  0008               	return
 18506                           
 18507                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18508  138B  3001               	movlw	1
 18509  138C  07B4               	addwf	(_Buz1^(0+128)+1),f
 18510  138D  3000               	movlw	0
 18511  138E  3DB5               	addwfc	((_Buz1+1)^(0+128)+1),f
 18512                           
 18513                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18514  138F  083A               	movf	((_Buz1+1)^(0+128)+6),w
 18515  1390  0235               	subwf	((_Buz1+1)^(0+128)+1),w
 18516  1391  1D03               	skipz
 18517  1392  2B95               	goto	u11015
 18518  1393  0839               	movf	(_Buz1^(0+128)+6),w
 18519  1394  0234               	subwf	(_Buz1^(0+128)+1),w
 18520  1395                     u11015:	
 18521  1395  1C03               	skipc
 18522  1396  0008               	return
 18523                           
 18524                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18525  1397  01B4               	clrf	(_Buz1^(0+128)+1)
 18526  1398  01B5               	clrf	((_Buz1+1)^(0+128)+1)
 18527                           
 18528                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18529  1399  12B3               	bcf	_Buz1^(0+128),5
 18530  139A  0020               	movlb	0	; select bank0
 18531  139B  1D8D               	btfss	13,3	;volatile
 18532  139C  2B9F               	goto	l10227
 18533  139D  0021               	movlb	1	; select bank1
 18534  139E  16B3               	bsf	_Buz1^(0+128),5
 18535  139F                     l10227:	
 18536                           
 18537                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18538  139F  0021               	movlb	1	; select bank1
 18539  13A0  1AB3               	btfsc	_Buz1^(0+128),5
 18540  13A1  2BCB               	goto	l112
 18541                           
 18542                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18543  13A2  08B6               	movf	(_Buz1^(0+128)+3),f
 18544  13A3  1D03               	skipz
 18545  13A4  2BC7               	goto	l113
 18546                           
 18547                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18548  13A5  1DB3               	btfss	_Buz1^(0+128),3
 18549  13A6  2BB5               	goto	l114
 18550                           
 18551                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18552  13A7  11B3               	bcf	_Buz1^(0+128),3
 18553                           
 18554                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18555  13A8  0837               	movf	(_Buz1^(0+128)+4),w
 18556  13A9  0020               	movlb	0	; select bank0
 18557  13AA  00A0               	movwf	??_Buzzer_Main
 18558  13AB  0820               	movf	??_Buzzer_Main,w
 18559  13AC  0021               	movlb	1	; select bank1
 18560  13AD  00B6               	movwf	(_Buz1^(0+128)+3)
 18561                           
 18562                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18563  13AE  083C               	movf	((_Buz1+1)^(0+128)+8),w
 18564  13AF  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 18565  13B0  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 18566  13B1  083B               	movf	(_Buz1^(0+128)+8),w
 18567  13B2  01B9               	clrf	(_Buz1^(0+128)+6)
 18568  13B3  07B9               	addwf	(_Buz1^(0+128)+6),f
 18569                           
 18570                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18571  13B4  0008               	return
 18572  13B5                     l114:	
 18573  13B5  1E33               	btfss	_Buz1^(0+128),4
 18574  13B6  2BC5               	goto	l116
 18575                           
 18576                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18577  13B7  1233               	bcf	_Buz1^(0+128),4
 18578                           
 18579                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18580  13B8  0838               	movf	(_Buz1^(0+128)+5),w
 18581  13B9  0020               	movlb	0	; select bank0
 18582  13BA  00A0               	movwf	??_Buzzer_Main
 18583  13BB  0820               	movf	??_Buzzer_Main,w
 18584  13BC  0021               	movlb	1	; select bank1
 18585  13BD  00B6               	movwf	(_Buz1^(0+128)+3)
 18586                           
 18587                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18588  13BE  083E               	movf	((_Buz1+1)^(0+128)+10),w
 18589  13BF  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 18590  13C0  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 18591  13C1  083D               	movf	(_Buz1^(0+128)+10),w
 18592  13C2  01B9               	clrf	(_Buz1^(0+128)+6)
 18593  13C3  07B9               	addwf	(_Buz1^(0+128)+6),f
 18594                           
 18595                           ;Buzzer_B1.c: 62: } else {
 18596  13C4  0008               	return
 18597  13C5                     l116:	
 18598                           
 18599                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18600  13C5  10B3               	bcf	_Buz1^(0+128),1
 18601                           
 18602                           ;Buzzer_B1.c: 64: }
 18603                           ;Buzzer_B1.c: 65: } else {
 18604  13C6  0008               	return
 18605  13C7                     l113:	
 18606                           
 18607                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18608  13C7  16B3               	bsf	_Buz1^(0+128),5
 18609                           
 18610                           ;Buzzer_B1.c: 68: RB3 = 1;
 18611  13C8  0020               	movlb	0	; select bank0
 18612  13C9  158D               	bsf	13,3	;volatile
 18613                           
 18614                           ;Buzzer_B1.c: 69: }
 18615                           ;Buzzer_B1.c: 70: } else {
 18616  13CA  0008               	return
 18617  13CB                     l112:	
 18618                           
 18619                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18620  13CB  12B3               	bcf	_Buz1^(0+128),5
 18621                           
 18622                           ;Buzzer_B1.c: 73: RB3 = 0;
 18623  13CC  0020               	movlb	0	; select bank0
 18624  13CD  118D               	bcf	13,3	;volatile
 18625                           
 18626                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18627  13CE  3001               	movlw	1
 18628  13CF  0021               	movlb	1	; select bank1
 18629  13D0  02B6               	subwf	(_Buz1^(0+128)+3),f
 18630  13D1  0008               	return
 18631  13D2                     __end_of_Buzzer_Main:	
 18632                           
 18633                           	psect	text132
 18634  19D9                     __ptext132:	
 18635 ;; *************** function _Buzzer_Initialization *****************
 18636 ;; Defined at:
 18637 ;;		line 11 in file "../src/Buzzer_B1.c"
 18638 ;; Parameters:    Size  Location     Type
 18639 ;;		None
 18640 ;; Auto vars:     Size  Location     Type
 18641 ;;		None
 18642 ;; Return value:  Size  Location     Type
 18643 ;;		None               void
 18644 ;; Registers used:
 18645 ;;		None
 18646 ;; Tracked objects:
 18647 ;;		On entry : 0/0
 18648 ;;		On exit  : 0/0
 18649 ;;		Unchanged: 0/0
 18650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18655 ;;Total ram usage:        0 bytes
 18656 ;; Hardware stack levels used:    1
 18657 ;; Hardware stack levels required when called:    5
 18658 ;; This function calls:
 18659 ;;		Nothing
 18660 ;; This function is called by:
 18661 ;;		_main
 18662 ;; This function uses a non-reentrant model
 18663 ;;
 18664                           
 18665                           
 18666                           ;psect for function _Buzzer_Initialization
 18667  19D9                     _Buzzer_Initialization:	
 18668                           
 18669                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18670                           
 18671                           ;incstack = 0
 18672                           ; Regs used in _Buzzer_Initialization: []
 18673  19D9  0021               	movlb	1	; select bank1
 18674  19DA  1433               	bsf	_Buz1^(0+128),0
 18675  19DB  0008               	return
 18676  19DC                     __end_of_Buzzer_Initialization:	
 18677                           
 18678                           	psect	intentry
 18679  0004                     __pintentry:	
 18680 ;; *************** function _ISR *****************
 18681 ;; Defined at:
 18682 ;;		line 107 in file "../src/MCU_B1.c"
 18683 ;; Parameters:    Size  Location     Type
 18684 ;;		None
 18685 ;; Auto vars:     Size  Location     Type
 18686 ;;		None
 18687 ;; Return value:  Size  Location     Type
 18688 ;;		None               void
 18689 ;; Registers used:
 18690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18691 ;; Tracked objects:
 18692 ;;		On entry : 0/0
 18693 ;;		On exit  : 0/0
 18694 ;;		Unchanged: 0/0
 18695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18698 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18699 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18700 ;;Total ram usage:        1 bytes
 18701 ;; Hardware stack levels used:    1
 18702 ;; Hardware stack levels required when called:    4
 18703 ;; This function calls:
 18704 ;;		_IOC_ISR
 18705 ;;		_TMR1_ISR
 18706 ;; This function is called by:
 18707 ;;		Interrupt level 1
 18708 ;; This function uses a non-reentrant model
 18709 ;;
 18710                           
 18711  0004                     _ISR:	
 18712                           
 18713                           ;incstack = 0
 18714                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18715  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18716  0005  3180               	pagesel	$
 18717  0006  0020               	movlb	0	; select bank0
 18718  0007  087F               	movf	127,w
 18719  0008  00F5               	movwf	??_ISR
 18720                           
 18721                           ;MCU_B1.c: 109: IOC_ISR();
 18722  0009  319A  22E3  3180   	fcall	_IOC_ISR
 18723                           
 18724                           ;MCU_B1.c: 111: ;;
 18725                           ;MCU_B1.c: 113: TMR1_ISR();
 18726  000C  319F  2759         	fcall	_TMR1_ISR
 18727  000E  0875               	movf	??_ISR,w
 18728  000F  0020               	movlb	0	; select bank0
 18729  0010  00FF               	movwf	127
 18730  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18731  0012  0009               	retfie
 18732  0013                     __end_of_ISR:	
 18733                           
 18734                           	psect	text134
 18735  1F59                     __ptext134:	
 18736 ;; *************** function _TMR1_ISR *****************
 18737 ;; Defined at:
 18738 ;;		line 209 in file "../src/MCU_B1.c"
 18739 ;; Parameters:    Size  Location     Type
 18740 ;;		None
 18741 ;; Auto vars:     Size  Location     Type
 18742 ;;		None
 18743 ;; Return value:  Size  Location     Type
 18744 ;;		None               void
 18745 ;; Registers used:
 18746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18747 ;; Tracked objects:
 18748 ;;		On entry : 0/0
 18749 ;;		On exit  : 0/0
 18750 ;;		Unchanged: 0/0
 18751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18756 ;;Total ram usage:        0 bytes
 18757 ;; Hardware stack levels used:    1
 18758 ;; Hardware stack levels required when called:    2
 18759 ;; This function calls:
 18760 ;;		_setDimmerLights_IntrControl
 18761 ;; This function is called by:
 18762 ;;		_ISR
 18763 ;; This function uses a non-reentrant model
 18764 ;;
 18765                           
 18766                           
 18767                           ;psect for function _TMR1_ISR
 18768  1F59                     _TMR1_ISR:	
 18769                           
 18770                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18771                           
 18772                           ;incstack = 0
 18773                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18774  1F59  0021               	movlb	1	; select bank1
 18775  1F5A  1C11               	btfss	17,0	;volatile
 18776  1F5B  0008               	return
 18777  1F5C  0020               	movlb	0	; select bank0
 18778  1F5D  1C11               	btfss	17,0	;volatile
 18779  1F5E  0008               	return
 18780                           
 18781                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18782  1F5F  30FA               	movlw	250
 18783  1F60  0097               	movwf	23	;volatile
 18784                           
 18785                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18786  1F61  3038               	movlw	56
 18787  1F62  0096               	movwf	22	;volatile
 18788                           
 18789                           ;MCU_B1.c: 214: TMR1IF = 0;
 18790  1F63  1011               	bcf	17,0	;volatile
 18791                           
 18792                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18793  1F64  3001               	movlw	1
 18794  1F65  3180  204D  319F   	fcall	_setDimmerLights_IntrControl
 18795                           
 18796                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18797  1F68  3002               	movlw	2
 18798  1F69  3180  204D  319F   	fcall	_setDimmerLights_IntrControl
 18799                           
 18800                           ;MCU_B1.c: 234: Timer1.Count++;
 18801  1F6C  3001               	movlw	1
 18802  1F6D  0021               	movlb	1	; select bank1
 18803  1F6E  07CC               	addwf	(_Timer1^(0+128)+1),f
 18804  1F6F  3000               	movlw	0
 18805  1F70  3DCD               	addwfc	((_Timer1+1)^(0+128)+1),f
 18806                           
 18807                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18808  1F71  3001               	movlw	1
 18809  1F72  3ECB               	addlw	_Timer1& (0+255)
 18810  1F73  0086               	movwf	6
 18811  1F74  0187               	clrf	7
 18812  1F75  3F40               	moviw [0]fsr1
 18813  1F76  3A64               	xorlw	100
 18814  1F77  1D03               	skipz
 18815  1F78  2F7B               	goto	u788_25
 18816  1F79  3F41               	moviw [1]fsr1
 18817  1F7A  3A00               	xorlw	0
 18818  1F7B                     u788_25:	
 18819  1F7B  1D03               	skipz
 18820  1F7C  0008               	return
 18821                           
 18822                           ;MCU_B1.c: 236: {
 18823                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18824  1F7D  01CC               	clrf	(_Timer1^(0+128)+1)
 18825  1F7E  01CD               	clrf	((_Timer1+1)^(0+128)+1)
 18826                           
 18827                           ;MCU_B1.c: 238: myMain.T1_Timerout = 1;
 18828  1F7F  1520               	bsf	_myMain^(0+128),2
 18829  1F80  0008               	return
 18830  1F81                     __end_of_TMR1_ISR:	
 18831                           
 18832                           	psect	text135
 18833  004D                     __ptext135:	
 18834 ;; *************** function _setDimmerLights_IntrControl *****************
 18835 ;; Defined at:
 18836 ;;		line 94 in file "../src/Dimmer_B1.c"
 18837 ;; Parameters:    Size  Location     Type
 18838 ;;  lights          1    wreg     unsigned char 
 18839 ;; Auto vars:     Size  Location     Type
 18840 ;;  lights          1    4[COMMON] unsigned char 
 18841 ;; Return value:  Size  Location     Type
 18842 ;;		None               void
 18843 ;; Registers used:
 18844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18845 ;; Tracked objects:
 18846 ;;		On entry : 0/0
 18847 ;;		On exit  : 0/0
 18848 ;;		Unchanged: 0/0
 18849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18851 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18852 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18853 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18854 ;;Total ram usage:        3 bytes
 18855 ;; Hardware stack levels used:    1
 18856 ;; Hardware stack levels required when called:    1
 18857 ;; This function calls:
 18858 ;;		_DimmerIntrPointSelect
 18859 ;;		i1_setLoad_StatusOff
 18860 ;; This function is called by:
 18861 ;;		_TMR1_ISR
 18862 ;; This function uses a non-reentrant model
 18863 ;;
 18864                           
 18865                           
 18866                           ;psect for function _setDimmerLights_IntrControl
 18867  004D                     _setDimmerLights_IntrControl:	
 18868                           
 18869                           ;incstack = 0
 18870                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18871                           ;setDimmerLights_IntrControl@lights stored from wreg
 18872  004D  00F4               	movwf	setDimmerLights_IntrControl@lights
 18873                           
 18874                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 18875  004E  0874               	movf	setDimmerLights_IntrControl@lights,w
 18876  004F  319B  23E4  3180   	fcall	_DimmerIntrPointSelect
 18877                           
 18878                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 18879  0052  0877               	movf	_DimmerLightsIntr,w
 18880  0053  0086               	movwf	6
 18881  0054  3001               	movlw	1	; select bank2/3
 18882  0055  0087               	movwf	7
 18883  0056  1C01               	btfss	1,0
 18884  0057  28A8               	goto	i1l7363
 18885                           
 18886                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 18887  0058  3001               	movlw	1
 18888  0059  00F2               	movwf	??_setDimmerLights_IntrControl
 18889  005A  0877               	movf	_DimmerLightsIntr,w
 18890  005B  3E03               	addlw	3
 18891  005C  0086               	movwf	6
 18892  005D  3001               	movlw	1	; select bank2/3
 18893  005E  0087               	movwf	7
 18894  005F  0872               	movf	??_setDimmerLights_IntrControl,w
 18895  0060  0781               	addwf	1,f
 18896                           
 18897                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r->Correction)) {
 18898  0061  0876               	movf	_Dimmer,w
 18899  0062  3E02               	addlw	2
 18900  0063  0086               	movwf	6
 18901  0064  3001               	movlw	1	; select bank2/3
 18902  0065  0087               	movwf	7
 18903  0066  0877               	movf	_DimmerLightsIntr,w
 18904  0067  3E04               	addlw	4
 18905  0068  0084               	movwf	4
 18906  0069  3001               	movlw	1	; select bank2/3
 18907  006A  0085               	movwf	5
 18908  006B  0800               	movf	0,w
 18909  006C  0701               	addwf	1,w
 18910  006D  00F2               	movwf	??_setDimmerLights_IntrControl
 18911  006E  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18912  006F  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 18913  0070  0877               	movf	_DimmerLightsIntr,w
 18914  0071  3E03               	addlw	3
 18915  0072  0086               	movwf	6
 18916  0073  3001               	movlw	1	; select bank2/3
 18917  0074  0087               	movwf	7
 18918  0075  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18919  0076  3A80               	xorlw	128
 18920  0077  3C80               	sublw	128
 18921  0078  1D03               	skipz
 18922  0079  287C               	goto	u657_25
 18923  007A  0872               	movf	??_setDimmerLights_IntrControl,w
 18924  007B  0201               	subwf	1,w
 18925  007C                     u657_25:	
 18926  007C  1C03               	skipc
 18927  007D  29B7               	goto	i1l7427
 18928                           
 18929                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 18930  007E  0877               	movf	_DimmerLightsIntr,w
 18931  007F  3E03               	addlw	3
 18932  0080  0086               	movwf	6
 18933  0081  3001               	movlw	1	; select bank2/3
 18934  0082  0087               	movwf	7
 18935  0083  0181               	clrf	1
 18936                           
 18937                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 18938  0084  0877               	movf	_DimmerLightsIntr,w
 18939  0085  0086               	movwf	6
 18940  0086  3001               	movlw	1	; select bank2/3
 18941  0087  0087               	movwf	7
 18942  0088  1001               	bcf	1,0
 18943                           
 18944                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 18945  0089  0877               	movf	_DimmerLightsIntr,w
 18946  008A  0086               	movwf	6
 18947  008B  3001               	movlw	1	; select bank2/3
 18948  008C  0087               	movwf	7
 18949  008D  1F01               	btfss	1,6
 18950  008E  29B7               	goto	i1l7427
 18951                           
 18952                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 18953  008F  0877               	movf	_DimmerLightsIntr,w
 18954  0090  3E08               	addlw	8
 18955  0091  0086               	movwf	6
 18956  0092  3001               	movlw	1	; select bank2/3
 18957  0093  0087               	movwf	7
 18958  0094  1401               	bsf	1,0
 18959                           
 18960                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 18961  0095  0877               	movf	_DimmerLightsIntr,w
 18962  0096  3E08               	addlw	8
 18963  0097  0086               	movwf	6
 18964  0098  3001               	movlw	1	; select bank2/3
 18965  0099  0087               	movwf	7
 18966  009A  1681               	bsf	1,5
 18967                           
 18968                           ;Dimmer_B1.c: 107: if (lights == 1) {
 18969  009B  0874               	movf	setDimmerLights_IntrControl@lights,w
 18970  009C  3A01               	xorlw	1
 18971  009D  1D03               	skipz
 18972  009E  28A1               	goto	i1l7359
 18973                           
 18974                           ;Dimmer_B1.c: 108: RA7 = 1;
 18975  009F  0020               	movlb	0	; select bank0
 18976  00A0  178C               	bsf	12,7	;volatile
 18977  00A1                     i1l7359:	
 18978                           ;Dimmer_B1.c: 109: ;;
 18979                           
 18980                           
 18981                           ;Dimmer_B1.c: 110: }
 18982                           ;Dimmer_B1.c: 113: if (lights == 2) {
 18983  00A1  0874               	movf	setDimmerLights_IntrControl@lights,w
 18984  00A2  3A02               	xorlw	2
 18985  00A3  1D03               	skipz
 18986  00A4  29B7               	goto	i1l7427
 18987                           
 18988                           ;Dimmer_B1.c: 114: RB4 = 1;
 18989  00A5  0020               	movlb	0	; select bank0
 18990  00A6  160D               	bsf	13,4	;volatile
 18991                           
 18992                           ;Dimmer_B1.c: 115: }
 18993                           ;Dimmer_B1.c: 122: }
 18994                           ;Dimmer_B1.c: 123: }
 18995                           ;Dimmer_B1.c: 124: } else {
 18996  00A7  29B7               	goto	i1l7427
 18997  00A8                     i1l7363:	
 18998                           
 18999                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 19000  00A8  0877               	movf	_DimmerLightsIntr,w
 19001  00A9  3E08               	addlw	8
 19002  00AA  0086               	movwf	6
 19003  00AB  3001               	movlw	1	; select bank2/3
 19004  00AC  0087               	movwf	7
 19005  00AD  1C01               	btfss	1,0
 19006  00AE  29B7               	goto	i1l7427
 19007                           
 19008                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 19009  00AF  0877               	movf	_DimmerLightsIntr,w
 19010  00B0  3E08               	addlw	8
 19011  00B1  0086               	movwf	6
 19012  00B2  3001               	movlw	1	; select bank2/3
 19013  00B3  0087               	movwf	7
 19014  00B4  1001               	bcf	1,0
 19015                           
 19016                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 19017  00B5  0877               	movf	_DimmerLightsIntr,w
 19018  00B6  0086               	movwf	6
 19019  00B7  3001               	movlw	1	; select bank2/3
 19020  00B8  0087               	movwf	7
 19021  00B9  1C81               	btfss	1,1
 19022  00BA  29B7               	goto	i1l7427
 19023                           
 19024                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 19025  00BB  3001               	movlw	1
 19026  00BC  00F2               	movwf	??_setDimmerLights_IntrControl
 19027  00BD  0A77               	incf	_DimmerLightsIntr,w
 19028  00BE  0086               	movwf	6
 19029  00BF  3001               	movlw	1	; select bank2/3
 19030  00C0  0087               	movwf	7
 19031  00C1  0872               	movf	??_setDimmerLights_IntrControl,w
 19032  00C2  0781               	addwf	1,f
 19033                           
 19034                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 19035  00C3  0A77               	incf	_DimmerLightsIntr,w
 19036  00C4  0086               	movwf	6
 19037  00C5  3001               	movlw	1	; select bank2/3
 19038  00C6  0087               	movwf	7
 19039  00C7  0877               	movf	_DimmerLightsIntr,w
 19040  00C8  3E02               	addlw	2
 19041  00C9  0084               	movwf	4
 19042  00CA  3001               	movlw	1	; select bank2/3
 19043  00CB  0085               	movwf	5
 19044  00CC  0800               	movf	0,w
 19045  00CD  0201               	subwf	1,w
 19046  00CE  1C03               	skipc
 19047  00CF  29B7               	goto	i1l7427
 19048                           
 19049                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 19050  00D0  0A77               	incf	_DimmerLightsIntr,w
 19051  00D1  0086               	movwf	6
 19052  00D2  3001               	movlw	1	; select bank2/3
 19053  00D3  0087               	movwf	7
 19054  00D4  0181               	clrf	1
 19055                           
 19056                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 19057  00D5  0877               	movf	_DimmerLightsIntr,w
 19058  00D6  0086               	movwf	6
 19059  00D7  3001               	movlw	1	; select bank2/3
 19060  00D8  0087               	movwf	7
 19061  00D9  1D81               	btfss	1,3
 19062  00DA  2911               	goto	i1l7389
 19063                           
 19064                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 19065  00DB  0877               	movf	_DimmerLightsIntr,w
 19066  00DC  0086               	movwf	6
 19067  00DD  3001               	movlw	1	; select bank2/3
 19068  00DE  0087               	movwf	7
 19069  00DF  1A01               	btfsc	1,4
 19070  00E0  28F8               	goto	i1l7383
 19071                           
 19072                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 19073  00E1  0877               	movf	_DimmerLightsIntr,w
 19074  00E2  3E04               	addlw	4
 19075  00E3  0086               	movwf	6
 19076  00E4  3001               	movlw	1	; select bank2/3
 19077  00E5  0087               	movwf	7
 19078  00E6  3021               	movlw	33
 19079  00E7  0201               	subwf	1,w
 19080  00E8  1C03               	skipc
 19081  00E9  28F2               	goto	i1l7381
 19082                           
 19083                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 19084  00EA  0877               	movf	_DimmerLightsIntr,w
 19085  00EB  3E04               	addlw	4
 19086  00EC  0086               	movwf	6
 19087  00ED  3001               	movlw	1	; select bank2/3
 19088  00EE  0087               	movwf	7
 19089  00EF  3001               	movlw	1
 19090  00F0  0281               	subwf	1,f
 19091                           
 19092                           ;Dimmer_B1.c: 135: } else {
 19093  00F1  29B7               	goto	i1l7427
 19094  00F2                     i1l7381:	
 19095                           
 19096                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 19097  00F2  0877               	movf	_DimmerLightsIntr,w
 19098  00F3  0086               	movwf	6
 19099  00F4  3001               	movlw	1	; select bank2/3
 19100  00F5  0087               	movwf	7
 19101  00F6  1601               	bsf	1,4
 19102                           
 19103                           ;Dimmer_B1.c: 137: }
 19104                           ;Dimmer_B1.c: 138: } else {
 19105  00F7  29B7               	goto	i1l7427
 19106  00F8                     i1l7383:	
 19107                           
 19108                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 19109  00F8  0877               	movf	_DimmerLightsIntr,w
 19110  00F9  3E04               	addlw	4
 19111  00FA  0086               	movwf	6
 19112  00FB  3001               	movlw	1	; select bank2/3
 19113  00FC  0087               	movwf	7
 19114  00FD  303C               	movlw	60
 19115  00FE  0201               	subwf	1,w
 19116  00FF  1803               	skipnc
 19117  0100  290B               	goto	i1l7387
 19118                           
 19119                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 19120  0101  3001               	movlw	1
 19121  0102  00F2               	movwf	??_setDimmerLights_IntrControl
 19122  0103  0877               	movf	_DimmerLightsIntr,w
 19123  0104  3E04               	addlw	4
 19124  0105  0086               	movwf	6
 19125  0106  3001               	movlw	1	; select bank2/3
 19126  0107  0087               	movwf	7
 19127  0108  0872               	movf	??_setDimmerLights_IntrControl,w
 19128  0109  0781               	addwf	1,f
 19129                           
 19130                           ;Dimmer_B1.c: 141: } else {
 19131  010A  29B7               	goto	i1l7427
 19132  010B                     i1l7387:	
 19133                           
 19134                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 19135  010B  0877               	movf	_DimmerLightsIntr,w
 19136  010C  0086               	movwf	6
 19137  010D  3001               	movlw	1	; select bank2/3
 19138  010E  0087               	movwf	7
 19139  010F  1201               	bcf	1,4
 19140                           
 19141                           ;Dimmer_B1.c: 143: }
 19142                           ;Dimmer_B1.c: 144: }
 19143                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 19144  0110  29B7               	goto	i1l7427
 19145  0111                     i1l7389:	
 19146  0111  0877               	movf	_DimmerLightsIntr,w
 19147  0112  0086               	movwf	6
 19148  0113  3001               	movlw	1	; select bank2/3
 19149  0114  0087               	movwf	7
 19150  0115  1D01               	btfss	1,2
 19151  0116  2958               	goto	i1l7403
 19152                           
 19153                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 19154  0117  0877               	movf	_DimmerLightsIntr,w
 19155  0118  3E05               	addlw	5
 19156  0119  0086               	movwf	6
 19157  011A  3001               	movlw	1	; select bank2/3
 19158  011B  0087               	movwf	7
 19159  011C  0877               	movf	_DimmerLightsIntr,w
 19160  011D  3E04               	addlw	4
 19161  011E  0084               	movwf	4
 19162  011F  3001               	movlw	1	; select bank2/3
 19163  0120  0085               	movwf	5
 19164  0121  0800               	movf	0,w
 19165  0122  0201               	subwf	1,w
 19166  0123  1803               	skipnc
 19167  0124  292D               	goto	i1l7395
 19168                           
 19169                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 19170  0125  0877               	movf	_DimmerLightsIntr,w
 19171  0126  3E04               	addlw	4
 19172  0127  0086               	movwf	6
 19173  0128  3001               	movlw	1	; select bank2/3
 19174  0129  0087               	movwf	7
 19175  012A  3001               	movlw	1
 19176  012B  0281               	subwf	1,f
 19177                           
 19178                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 19179  012C  2944               	goto	i1l7399
 19180  012D                     i1l7395:	
 19181  012D  0877               	movf	_DimmerLightsIntr,w
 19182  012E  3E04               	addlw	4
 19183  012F  0086               	movwf	6
 19184  0130  3001               	movlw	1	; select bank2/3
 19185  0131  0087               	movwf	7
 19186  0132  0877               	movf	_DimmerLightsIntr,w
 19187  0133  3E05               	addlw	5
 19188  0134  0084               	movwf	4
 19189  0135  3001               	movlw	1	; select bank2/3
 19190  0136  0085               	movwf	5
 19191  0137  0800               	movf	0,w
 19192  0138  0201               	subwf	1,w
 19193  0139  1803               	skipnc
 19194  013A  2944               	goto	i1l7399
 19195                           
 19196                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 19197  013B  3001               	movlw	1
 19198  013C  00F2               	movwf	??_setDimmerLights_IntrControl
 19199  013D  0877               	movf	_DimmerLightsIntr,w
 19200  013E  3E04               	addlw	4
 19201  013F  0086               	movwf	6
 19202  0140  3001               	movlw	1	; select bank2/3
 19203  0141  0087               	movwf	7
 19204  0142  0872               	movf	??_setDimmerLights_IntrControl,w
 19205  0143  0781               	addwf	1,f
 19206  0144                     i1l7399:	
 19207                           
 19208                           ;Dimmer_B1.c: 150: }
 19209                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 19210  0144  0877               	movf	_DimmerLightsIntr,w
 19211  0145  3E05               	addlw	5
 19212  0146  0086               	movwf	6
 19213  0147  3001               	movlw	1	; select bank2/3
 19214  0148  0087               	movwf	7
 19215  0149  0877               	movf	_DimmerLightsIntr,w
 19216  014A  3E04               	addlw	4
 19217  014B  0084               	movwf	4
 19218  014C  3001               	movlw	1	; select bank2/3
 19219  014D  0085               	movwf	5
 19220  014E  0800               	movf	0,w
 19221  014F  0601               	xorwf	1,w
 19222  0150  1D03               	skipz
 19223  0151  29B7               	goto	i1l7427
 19224                           
 19225                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 19226  0152  0877               	movf	_DimmerLightsIntr,w
 19227  0153  0086               	movwf	6
 19228  0154  3001               	movlw	1	; select bank2/3
 19229  0155  0087               	movwf	7
 19230  0156  1101               	bcf	1,2
 19231  0157  2973               	goto	i1l7409
 19232  0158                     i1l7403:	
 19233                           ;Dimmer_B1.c: 154: }
 19234                           ;Dimmer_B1.c: 155: } else {
 19235                           
 19236                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 19237                           
 19238                           
 19239                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 19240  0158  0877               	movf	_DimmerLightsIntr,w
 19241  0159  0086               	movwf	6
 19242  015A  3001               	movlw	1	; select bank2/3
 19243  015B  0087               	movwf	7
 19244  015C  1E81               	btfss	1,5
 19245  015D  2979               	goto	i1l7411
 19246                           
 19247                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 19248  015E  0877               	movf	_DimmerLightsIntr,w
 19249  015F  3E04               	addlw	4
 19250  0160  0086               	movwf	6
 19251  0161  3001               	movlw	1	; select bank2/3
 19252  0162  0087               	movwf	7
 19253  0163  3001               	movlw	1
 19254  0164  0281               	subwf	1,f
 19255                           
 19256                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 19257  0165  0877               	movf	_DimmerLightsIntr,w
 19258  0166  3E05               	addlw	5
 19259  0167  0086               	movwf	6
 19260  0168  3001               	movlw	1	; select bank2/3
 19261  0169  0087               	movwf	7
 19262  016A  0877               	movf	_DimmerLightsIntr,w
 19263  016B  3E04               	addlw	4
 19264  016C  0084               	movwf	4
 19265  016D  3001               	movlw	1	; select bank2/3
 19266  016E  0085               	movwf	5
 19267  016F  0800               	movf	0,w
 19268  0170  0201               	subwf	1,w
 19269  0171  1C03               	skipc
 19270  0172  29B7               	goto	i1l7427
 19271  0173                     i1l7409:	
 19272                           
 19273                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 19274  0173  0877               	movf	_DimmerLightsIntr,w
 19275  0174  0086               	movwf	6
 19276  0175  3001               	movlw	1	; select bank2/3
 19277  0176  0087               	movwf	7
 19278  0177  1081               	bcf	1,1
 19279                           
 19280                           ;Dimmer_B1.c: 160: }
 19281                           ;Dimmer_B1.c: 161: } else {
 19282  0178  29B7               	goto	i1l7427
 19283  0179                     i1l7411:	
 19284                           
 19285                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 19286  0179  3001               	movlw	1
 19287  017A  00F2               	movwf	??_setDimmerLights_IntrControl
 19288  017B  0877               	movf	_DimmerLightsIntr,w
 19289  017C  3E04               	addlw	4
 19290  017D  0086               	movwf	6
 19291  017E  3001               	movlw	1	; select bank2/3
 19292  017F  0087               	movwf	7
 19293  0180  0872               	movf	??_setDimmerLights_IntrControl,w
 19294  0181  0781               	addwf	1,f
 19295                           
 19296                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 19297  0182  0877               	movf	_DimmerLightsIntr,w
 19298  0183  3E04               	addlw	4
 19299  0184  0086               	movwf	6
 19300  0185  3001               	movlw	1	; select bank2/3
 19301  0186  0087               	movwf	7
 19302  0187  0877               	movf	_DimmerLightsIntr,w
 19303  0188  3E06               	addlw	6
 19304  0189  0084               	movwf	4
 19305  018A  3001               	movlw	1	; select bank2/3
 19306  018B  0085               	movwf	5
 19307  018C  0800               	movf	0,w
 19308  018D  0201               	subwf	1,w
 19309  018E  1C03               	skipc
 19310  018F  29B7               	goto	i1l7427
 19311                           
 19312                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 19313  0190  0877               	movf	_DimmerLightsIntr,w
 19314  0191  0086               	movwf	6
 19315  0192  3001               	movlw	1	; select bank2/3
 19316  0193  0087               	movwf	7
 19317  0194  1081               	bcf	1,1
 19318                           
 19319                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 19320  0195  0877               	movf	_DimmerLightsIntr,w
 19321  0196  0086               	movwf	6
 19322  0197  3001               	movlw	1	; select bank2/3
 19323  0198  0087               	movwf	7
 19324  0199  1301               	bcf	1,6
 19325                           
 19326                           ;Dimmer_B1.c: 166: DimmerLightsIntr->Clear = 1;
 19327  019A  0877               	movf	_DimmerLightsIntr,w
 19328  019B  3E09               	addlw	9
 19329  019C  0086               	movwf	6
 19330  019D  3001               	movlw	1	; select bank2/3
 19331  019E  0087               	movwf	7
 19332  019F  1501               	bsf	1,2
 19333                           
 19334                           ;Dimmer_B1.c: 167: Dimmer->Detect = 1;
 19335  01A0  0876               	movf	_Dimmer,w
 19336  01A1  0086               	movwf	6
 19337  01A2  3001               	movlw	1	; select bank2/3
 19338  01A3  0087               	movwf	7
 19339  01A4  1401               	bsf	1,0
 19340                           
 19341                           ;Dimmer_B1.c: 169: if (lights == 1) {
 19342  01A5  0874               	movf	setDimmerLights_IntrControl@lights,w
 19343  01A6  3A01               	xorlw	1
 19344  01A7  1D03               	skipz
 19345  01A8  29AB               	goto	i1l7421
 19346                           
 19347                           ;Dimmer_B1.c: 170: RA3 = 0;
 19348  01A9  0020               	movlb	0	; select bank0
 19349  01AA  118C               	bcf	12,3	;volatile
 19350  01AB                     i1l7421:	
 19351                           
 19352                           ;Dimmer_B1.c: 172: }
 19353                           ;Dimmer_B1.c: 175: if (lights == 2) {
 19354  01AB  0874               	movf	setDimmerLights_IntrControl@lights,w
 19355  01AC  3A02               	xorlw	2
 19356  01AD  1D03               	skipz
 19357  01AE  29B1               	goto	i1l7425
 19358                           
 19359                           ;Dimmer_B1.c: 176: RC7 = 0;
 19360  01AF  0020               	movlb	0	; select bank0
 19361  01B0  138E               	bcf	14,7	;volatile
 19362  01B1                     i1l7425:	
 19363                           
 19364                           ;Dimmer_B1.c: 177: }
 19365                           ;Dimmer_B1.c: 184: setLoad_StatusOff(lights, 1);
 19366  01B1  01F0               	clrf	i1setLoad_StatusOff@command
 19367  01B2  0AF0               	incf	i1setLoad_StatusOff@command,f
 19368  01B3  0874               	movf	setDimmerLights_IntrControl@lights,w
 19369  01B4  319C  24B9  3180   	fcall	i1_setLoad_StatusOff
 19370  01B7                     i1l7427:	
 19371                           
 19372                           ;Dimmer_B1.c: 185: }
 19373                           ;Dimmer_B1.c: 186: }
 19374                           ;Dimmer_B1.c: 187: }
 19375                           ;Dimmer_B1.c: 188: }
 19376                           ;Dimmer_B1.c: 189: }
 19377                           ;Dimmer_B1.c: 190: }
 19378                           ;Dimmer_B1.c: 191: }
 19379                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->Triac == 1) {
 19380  01B7  0877               	movf	_DimmerLightsIntr,w
 19381  01B8  3E08               	addlw	8
 19382  01B9  0086               	movwf	6
 19383  01BA  3001               	movlw	1	; select bank2/3
 19384  01BB  0087               	movwf	7
 19385  01BC  1E81               	btfss	1,5
 19386  01BD  29E8               	goto	i1l7445
 19387                           
 19388                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime++;
 19389  01BE  3001               	movlw	1
 19390  01BF  00F2               	movwf	??_setDimmerLights_IntrControl
 19391  01C0  0877               	movf	_DimmerLightsIntr,w
 19392  01C1  3E07               	addlw	7
 19393  01C2  0086               	movwf	6
 19394  01C3  3001               	movlw	1	; select bank2/3
 19395  01C4  0087               	movwf	7
 19396  01C5  0872               	movf	??_setDimmerLights_IntrControl,w
 19397  01C6  0781               	addwf	1,f
 19398                           
 19399                           ;Dimmer_B1.c: 194: if (DimmerLightsIntr->TriacTime >= 5) {
 19400  01C7  0877               	movf	_DimmerLightsIntr,w
 19401  01C8  3E07               	addlw	7
 19402  01C9  0086               	movwf	6
 19403  01CA  3001               	movlw	1	; select bank2/3
 19404  01CB  0087               	movwf	7
 19405  01CC  3005               	movlw	5
 19406  01CD  0201               	subwf	1,w
 19407  01CE  1C03               	skipc
 19408  01CF  29E8               	goto	i1l7445
 19409                           
 19410                           ;Dimmer_B1.c: 195: DimmerLightsIntr->TriacTime = 0;
 19411  01D0  0877               	movf	_DimmerLightsIntr,w
 19412  01D1  3E07               	addlw	7
 19413  01D2  0086               	movwf	6
 19414  01D3  3001               	movlw	1	; select bank2/3
 19415  01D4  0087               	movwf	7
 19416  01D5  0181               	clrf	1
 19417                           
 19418                           ;Dimmer_B1.c: 196: DimmerLightsIntr->Triac = 0;
 19419  01D6  0877               	movf	_DimmerLightsIntr,w
 19420  01D7  3E08               	addlw	8
 19421  01D8  0086               	movwf	6
 19422  01D9  3001               	movlw	1	; select bank2/3
 19423  01DA  0087               	movwf	7
 19424  01DB  1281               	bcf	1,5
 19425                           
 19426                           ;Dimmer_B1.c: 199: if (lights == 1) {
 19427  01DC  0874               	movf	setDimmerLights_IntrControl@lights,w
 19428  01DD  3A01               	xorlw	1
 19429  01DE  1D03               	skipz
 19430  01DF  29E2               	goto	i1l7441
 19431                           
 19432                           ;Dimmer_B1.c: 200: RA7 = 0;
 19433  01E0  0020               	movlb	0	; select bank0
 19434  01E1  138C               	bcf	12,7	;volatile
 19435  01E2                     i1l7441:	
 19436                           ;Dimmer_B1.c: 201: ;;
 19437                           
 19438                           
 19439                           ;Dimmer_B1.c: 202: }
 19440                           ;Dimmer_B1.c: 205: if (lights == 2) {
 19441  01E2  0874               	movf	setDimmerLights_IntrControl@lights,w
 19442  01E3  3A02               	xorlw	2
 19443  01E4  1D03               	skipz
 19444  01E5  29E8               	goto	i1l7445
 19445                           
 19446                           ;Dimmer_B1.c: 206: RB4 = 0;
 19447  01E6  0020               	movlb	0	; select bank0
 19448  01E7  120D               	bcf	13,4	;volatile
 19449  01E8                     i1l7445:	
 19450                           
 19451                           ;Dimmer_B1.c: 207: }
 19452                           ;Dimmer_B1.c: 214: }
 19453                           ;Dimmer_B1.c: 215: }
 19454                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacFlag == 1) {
 19455  01E8  0877               	movf	_DimmerLightsIntr,w
 19456  01E9  3E09               	addlw	9
 19457  01EA  0086               	movwf	6
 19458  01EB  3001               	movlw	1	; select bank2/3
 19459  01EC  0087               	movwf	7
 19460  01ED  1E81               	btfss	1,5
 19461  01EE  0008               	return
 19462                           
 19463                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount++;
 19464  01EF  3001               	movlw	1
 19465  01F0  00F2               	movwf	??_setDimmerLights_IntrControl
 19466  01F1  0877               	movf	_DimmerLightsIntr,w
 19467  01F2  3E0A               	addlw	10
 19468  01F3  0086               	movwf	6
 19469  01F4  3001               	movlw	1	; select bank2/3
 19470  01F5  0087               	movwf	7
 19471  01F6  0872               	movf	??_setDimmerLights_IntrControl,w
 19472  01F7  0781               	addwf	1,f
 19473                           
 19474                           ;Dimmer_B1.c: 218: if (DimmerLightsIntr->TriacCount == 70) {
 19475  01F8  0877               	movf	_DimmerLightsIntr,w
 19476  01F9  3E0A               	addlw	10
 19477  01FA  0086               	movwf	6
 19478  01FB  3001               	movlw	1	; select bank2/3
 19479  01FC  0087               	movwf	7
 19480  01FD  0801               	movf	1,w
 19481  01FE  3A46               	xorlw	70
 19482  01FF  1D03               	skipz
 19483  0200  0008               	return
 19484                           
 19485                           ;Dimmer_B1.c: 219: DimmerLightsIntr->TriacCount = 0;
 19486  0201  0877               	movf	_DimmerLightsIntr,w
 19487  0202  3E0A               	addlw	10
 19488  0203  0086               	movwf	6
 19489  0204  3001               	movlw	1	; select bank2/3
 19490  0205  0087               	movwf	7
 19491  0206  0181               	clrf	1
 19492                           
 19493                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacFlag = 0;
 19494  0207  0877               	movf	_DimmerLightsIntr,w
 19495  0208  3E09               	addlw	9
 19496  0209  0086               	movwf	6
 19497  020A  3001               	movlw	1	; select bank2/3
 19498  020B  0087               	movwf	7
 19499  020C  1281               	bcf	1,5
 19500  020D  0008               	return
 19501  020E                     __end_of_setDimmerLights_IntrControl:	
 19502                           
 19503                           	psect	text136
 19504  1CB9                     __ptext136:	
 19505 ;; *************** function i1_setLoad_StatusOff *****************
 19506 ;; Defined at:
 19507 ;;		line 282 in file "../src/OverLoad_B1.c"
 19508 ;; Parameters:    Size  Location     Type
 19509 ;;  lights          1    wreg     unsigned char 
 19510 ;;  command         1    0[COMMON] unsigned char 
 19511 ;; Auto vars:     Size  Location     Type
 19512 ;;  lights          1    1[COMMON] unsigned char 
 19513 ;; Return value:  Size  Location     Type
 19514 ;;		None               void
 19515 ;; Registers used:
 19516 ;;		wreg, status,2, status,0
 19517 ;; Tracked objects:
 19518 ;;		On entry : 0/0
 19519 ;;		On exit  : 0/0
 19520 ;;		Unchanged: 0/0
 19521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19522 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19523 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19525 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19526 ;;Total ram usage:        2 bytes
 19527 ;; Hardware stack levels used:    1
 19528 ;; This function calls:
 19529 ;;		Nothing
 19530 ;; This function is called by:
 19531 ;;		_setDimmerLights_IntrControl
 19532 ;; This function uses a non-reentrant model
 19533 ;;
 19534                           
 19535                           
 19536                           ;psect for function i1_setLoad_StatusOff
 19537  1CB9                     i1_setLoad_StatusOff:	
 19538                           
 19539                           ;incstack = 0
 19540                           ; Regs used in i1_setLoad_StatusOff: [wreg+status,2+status,0]
 19541                           ;i1setLoad_StatusOff@lights stored from wreg
 19542  1CB9  00F1               	movwf	i1setLoad_StatusOff@lights
 19543                           
 19544                           ;OverLoad_B1.c: 283: Load1.StatusOff = command;
 19545  1CBA  0870               	movf	i1setLoad_StatusOff@command,w
 19546  1CBB  0023               	movlb	3	; select bank3
 19547  1CBC  13A0               	bcf	_Load1^(0+384),7
 19548  1CBD  1D03               	skipz
 19549  1CBE  17A0               	bsf	_Load1^(0+384),7
 19550                           
 19551                           ;OverLoad_B1.c: 284: Load1.SafeCount -= 2;
 19552  1CBF  3002               	movlw	2
 19553  1CC0  02E2               	subwf	(_Load1^(0+384)+66),f
 19554                           
 19555                           ;OverLoad_B1.c: 285: if (lights == 1) {
 19556  1CC1  0871               	movf	i1setLoad_StatusOff@lights,w
 19557  1CC2  3A01               	xorlw	1
 19558  1CC3  1903               	btfsc	3,2
 19559                           
 19560                           ;OverLoad_B1.c: 286: Load1.Lights1Status = 0;
 19561  1CC4  01E3               	clrf	(_Load1^(0+384)+67)
 19562                           
 19563                           ;OverLoad_B1.c: 287: }
 19564                           ;OverLoad_B1.c: 288: if (lights == 2) {
 19565  1CC5  0871               	movf	i1setLoad_StatusOff@lights,w
 19566  1CC6  3A02               	xorlw	2
 19567  1CC7  1903               	btfsc	3,2
 19568                           
 19569                           ;OverLoad_B1.c: 289: Load1.Lights2Status = 0;
 19570  1CC8  01E4               	clrf	(_Load1^(0+384)+68)
 19571                           
 19572                           ;OverLoad_B1.c: 290: }
 19573                           ;OverLoad_B1.c: 291: if (lights == 3) {
 19574  1CC9  0871               	movf	i1setLoad_StatusOff@lights,w
 19575  1CCA  3A03               	xorlw	3
 19576  1CCB  1D03               	skipz
 19577  1CCC  0008               	return
 19578                           
 19579                           ;OverLoad_B1.c: 292: Load1.Lights3Status = 0;
 19580  1CCD  01E5               	clrf	(_Load1^(0+384)+69)
 19581  1CCE  0008               	return
 19582  1CCF                     __end_ofi1_setLoad_StatusOff:	
 19583                           
 19584                           	psect	text137
 19585  1BE4                     __ptext137:	
 19586 ;; *************** function _DimmerIntrPointSelect *****************
 19587 ;; Defined at:
 19588 ;;		line 72 in file "../src/Dimmer_B1.c"
 19589 ;; Parameters:    Size  Location     Type
 19590 ;;  lights          1    wreg     unsigned char 
 19591 ;; Auto vars:     Size  Location     Type
 19592 ;;  lights          1    1[COMMON] unsigned char 
 19593 ;; Return value:  Size  Location     Type
 19594 ;;		None               void
 19595 ;; Registers used:
 19596 ;;		wreg
 19597 ;; Tracked objects:
 19598 ;;		On entry : 0/0
 19599 ;;		On exit  : 0/0
 19600 ;;		Unchanged: 0/0
 19601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19605 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19606 ;;Total ram usage:        2 bytes
 19607 ;; Hardware stack levels used:    1
 19608 ;; This function calls:
 19609 ;;		Nothing
 19610 ;; This function is called by:
 19611 ;;		_setDimmerLights_IntrControl
 19612 ;; This function uses a non-reentrant model
 19613 ;;
 19614                           
 19615                           
 19616                           ;psect for function _DimmerIntrPointSelect
 19617  1BE4                     _DimmerIntrPointSelect:	
 19618                           
 19619                           ;incstack = 0
 19620                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19621                           ;DimmerIntrPointSelect@lights stored from wreg
 19622  1BE4  00F1               	movwf	DimmerIntrPointSelect@lights
 19623                           
 19624                           ;Dimmer_B1.c: 74: if (lights == 1) {
 19625  1BE5  0871               	movf	DimmerIntrPointSelect@lights,w
 19626  1BE6  3A01               	xorlw	1
 19627  1BE7  1D03               	skipz
 19628  1BE8  2BED               	goto	i1l781
 19629                           
 19630                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 19631  1BE9  3035               	movlw	_DimmerLights1& (0+255)
 19632  1BEA  00F0               	movwf	??_DimmerIntrPointSelect
 19633  1BEB  0870               	movf	??_DimmerIntrPointSelect,w
 19634  1BEC  00F7               	movwf	_DimmerLightsIntr
 19635  1BED                     i1l781:	
 19636                           
 19637                           ;Dimmer_B1.c: 76: }
 19638                           ;Dimmer_B1.c: 79: if (lights == 2) {
 19639  1BED  0871               	movf	DimmerIntrPointSelect@lights,w
 19640  1BEE  3A02               	xorlw	2
 19641  1BEF  1D03               	skipz
 19642  1BF0  0008               	return
 19643                           
 19644                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 19645  1BF1  3044               	movlw	_DimmerLights2& (0+255)
 19646  1BF2  00F0               	movwf	??_DimmerIntrPointSelect
 19647  1BF3  0870               	movf	??_DimmerIntrPointSelect,w
 19648  1BF4  00F7               	movwf	_DimmerLightsIntr
 19649  1BF5  0008               	return
 19650  1BF6                     __end_of_DimmerIntrPointSelect:	
 19651                           
 19652                           	psect	text138
 19653  1AE3                     __ptext138:	
 19654 ;; *************** function _IOC_ISR *****************
 19655 ;; Defined at:
 19656 ;;		line 401 in file "../src/MCU_B1.c"
 19657 ;; Parameters:    Size  Location     Type
 19658 ;;		None
 19659 ;; Auto vars:     Size  Location     Type
 19660 ;;		None
 19661 ;; Return value:  Size  Location     Type
 19662 ;;		None               void
 19663 ;; Registers used:
 19664 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19665 ;; Tracked objects:
 19666 ;;		On entry : 0/0
 19667 ;;		On exit  : 0/0
 19668 ;;		Unchanged: 0/0
 19669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19674 ;;Total ram usage:        0 bytes
 19675 ;; Hardware stack levels used:    1
 19676 ;; Hardware stack levels required when called:    3
 19677 ;; This function calls:
 19678 ;;		_setDimmerReClock
 19679 ;; This function is called by:
 19680 ;;		_ISR
 19681 ;; This function uses a non-reentrant model
 19682 ;;
 19683                           
 19684                           
 19685                           ;psect for function _IOC_ISR
 19686  1AE3                     _IOC_ISR:	
 19687                           
 19688                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCBF2 == 1) {
 19689                           
 19690                           ;incstack = 0
 19691                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19692  1AE3  1D8B               	btfss	11,3	;volatile
 19693  1AE4  0008               	return
 19694  1AE5  0027               	movlb	7	; select bank7
 19695  1AE6  1D16               	btfss	22,2	;volatile
 19696  1AE7  0008               	return
 19697                           
 19698                           ;MCU_B1.c: 403: IOCBF2 = 0;
 19699  1AE8  1116               	bcf	22,2	;volatile
 19700                           
 19701                           ;MCU_B1.c: 404: IOCIF = 0;
 19702  1AE9  100B               	bcf	11,0	;volatile
 19703                           
 19704                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 19705  1AEA  0021               	movlb	1	; select bank1
 19706  1AEB  1C20               	btfss	_myMain^(0+128),0
 19707  1AEC  0008               	return
 19708                           
 19709                           ;MCU_B1.c: 407: setDimmerReClock();
 19710  1AED  319A  2219         	fcall	_setDimmerReClock
 19711  1AEF  0008               	return
 19712  1AF0                     __end_of_IOC_ISR:	
 19713                           
 19714                           	psect	text139
 19715  1A19                     __ptext139:	
 19716 ;; *************** function _setDimmerReClock *****************
 19717 ;; Defined at:
 19718 ;;		line 244 in file "../src/MCU_B1.c"
 19719 ;; Parameters:    Size  Location     Type
 19720 ;;		None
 19721 ;; Auto vars:     Size  Location     Type
 19722 ;;		None
 19723 ;; Return value:  Size  Location     Type
 19724 ;;		None               void
 19725 ;; Registers used:
 19726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19727 ;; Tracked objects:
 19728 ;;		On entry : 0/0
 19729 ;;		On exit  : 0/0
 19730 ;;		Unchanged: 0/0
 19731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19736 ;;Total ram usage:        0 bytes
 19737 ;; Hardware stack levels used:    1
 19738 ;; Hardware stack levels required when called:    2
 19739 ;; This function calls:
 19740 ;;		_setDimmerLights_IntrIOC_GO
 19741 ;; This function is called by:
 19742 ;;		_IOC_ISR
 19743 ;; This function uses a non-reentrant model
 19744 ;;
 19745                           
 19746                           
 19747                           ;psect for function _setDimmerReClock
 19748  1A19                     _setDimmerReClock:	
 19749                           
 19750                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 19751                           
 19752                           ;incstack = 0
 19753                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19754  1A19  3001               	movlw	1
 19755  1A1A  3190  20C7  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19756                           
 19757                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 19758  1A1D  3002               	movlw	2
 19759  1A1E  3190  20C7         	fcall	_setDimmerLights_IntrIOC_GO
 19760  1A20  0008               	return
 19761  1A21                     __end_of_setDimmerReClock:	
 19762                           
 19763                           	psect	text140
 19764  10C7                     __ptext140:	
 19765 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19766 ;; Defined at:
 19767 ;;		line 28 in file "../src/Dimmer_B1.c"
 19768 ;; Parameters:    Size  Location     Type
 19769 ;;  lights          1    wreg     unsigned char 
 19770 ;; Auto vars:     Size  Location     Type
 19771 ;;  lights          1    2[COMMON] unsigned char 
 19772 ;; Return value:  Size  Location     Type
 19773 ;;		None               void
 19774 ;; Registers used:
 19775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19776 ;; Tracked objects:
 19777 ;;		On entry : 0/0
 19778 ;;		On exit  : 0/0
 19779 ;;		Unchanged: 0/0
 19780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19784 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19785 ;;Total ram usage:        1 bytes
 19786 ;; Hardware stack levels used:    1
 19787 ;; Hardware stack levels required when called:    1
 19788 ;; This function calls:
 19789 ;;		_DimmerIntrIOCPointSelect
 19790 ;; This function is called by:
 19791 ;;		_setDimmerReClock
 19792 ;; This function uses a non-reentrant model
 19793 ;;
 19794                           
 19795                           
 19796                           ;psect for function _setDimmerLights_IntrIOC_GO
 19797  10C7                     _setDimmerLights_IntrIOC_GO:	
 19798                           
 19799                           ;incstack = 0
 19800                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19801                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19802  10C7  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19803                           
 19804                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 19805  10C8  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19806  10C9  319C  243F  3190   	fcall	_DimmerIntrIOCPointSelect
 19807                           
 19808                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 19809  10CC  0021               	movlb	1	; select bank1
 19810  10CD  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 19811  10CE  0086               	movwf	6
 19812  10CF  3001               	movlw	1	; select bank2/3
 19813  10D0  0087               	movwf	7
 19814  10D1  1801               	btfsc	1,0
 19815  10D2  0008               	return
 19816  10D3  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 19817  10D4  3E09               	addlw	9
 19818  10D5  0086               	movwf	6
 19819  10D6  3001               	movlw	1	; select bank2/3
 19820  10D7  0087               	movwf	7
 19821  10D8  1A81               	btfsc	1,5
 19822  10D9  0008               	return
 19823                           
 19824                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 19825  10DA  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 19826  10DB  0086               	movwf	6
 19827  10DC  3001               	movlw	1	; select bank2/3
 19828  10DD  0087               	movwf	7
 19829  10DE  1401               	bsf	1,0
 19830                           
 19831                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 19832  10DF  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 19833  10E0  3E09               	addlw	9
 19834  10E1  0086               	movwf	6
 19835  10E2  3001               	movlw	1	; select bank2/3
 19836  10E3  0087               	movwf	7
 19837  10E4  1681               	bsf	1,5
 19838                           
 19839                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 19840  10E5  0020               	movlb	0	; select bank0
 19841  10E6  1D0D               	btfss	13,2	;volatile
 19842  10E7  28F0               	goto	i1l6981
 19843                           
 19844                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 19845  10E8  0876               	movf	_Dimmer,w
 19846  10E9  3E02               	addlw	2
 19847  10EA  0086               	movwf	6
 19848  10EB  3001               	movlw	1	; select bank2/3
 19849  10EC  0087               	movwf	7
 19850  10ED  0181               	clrf	1
 19851  10EE  0A81               	incf	1,f
 19852                           
 19853                           ;Dimmer_B1.c: 37: } else {
 19854  10EF  0008               	return
 19855  10F0                     i1l6981:	
 19856                           
 19857                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 19858  10F0  0876               	movf	_Dimmer,w
 19859  10F1  3E02               	addlw	2
 19860  10F2  0086               	movwf	6
 19861  10F3  3001               	movlw	1	; select bank2/3
 19862  10F4  0087               	movwf	7
 19863  10F5  0181               	clrf	1
 19864  10F6  0008               	return
 19865  10F7                     __end_of_setDimmerLights_IntrIOC_GO:	
 19866                           
 19867                           	psect	text141
 19868  1C3F                     __ptext141:	
 19869 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19870 ;; Defined at:
 19871 ;;		line 8 in file "../src/Dimmer_B1.c"
 19872 ;; Parameters:    Size  Location     Type
 19873 ;;  lights          1    wreg     unsigned char 
 19874 ;; Auto vars:     Size  Location     Type
 19875 ;;  lights          1    1[COMMON] unsigned char 
 19876 ;; Return value:  Size  Location     Type
 19877 ;;		None               void
 19878 ;; Registers used:
 19879 ;;		wreg
 19880 ;; Tracked objects:
 19881 ;;		On entry : 0/0
 19882 ;;		On exit  : 0/0
 19883 ;;		Unchanged: 0/0
 19884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19886 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19887 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19888 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19889 ;;Total ram usage:        2 bytes
 19890 ;; Hardware stack levels used:    1
 19891 ;; This function calls:
 19892 ;;		Nothing
 19893 ;; This function is called by:
 19894 ;;		_setDimmerLights_IntrIOC_GO
 19895 ;; This function uses a non-reentrant model
 19896 ;;
 19897                           
 19898                           
 19899                           ;psect for function _DimmerIntrIOCPointSelect
 19900  1C3F                     _DimmerIntrIOCPointSelect:	
 19901                           
 19902                           ;incstack = 0
 19903                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19904                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19905  1C3F  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19906                           
 19907                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19908  1C40  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19909  1C41  3A01               	xorlw	1
 19910  1C42  1D03               	skipz
 19911  1C43  2C49               	goto	i1l770
 19912                           
 19913                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19914  1C44  3035               	movlw	_DimmerLights1& (0+255)
 19915  1C45  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19916  1C46  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19917  1C47  0021               	movlb	1	; select bank1
 19918  1C48  00D5               	movwf	_DimmerLightsIntrIOC^(0+128)
 19919  1C49                     i1l770:	
 19920                           
 19921                           ;Dimmer_B1.c: 12: }
 19922                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19923  1C49  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19924  1C4A  3A02               	xorlw	2
 19925  1C4B  1D03               	skipz
 19926  1C4C  0008               	return
 19927                           
 19928                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19929  1C4D  3044               	movlw	_DimmerLights2& (0+255)
 19930  1C4E  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19931  1C4F  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19932  1C50  0021               	movlb	1	; select bank1
 19933  1C51  00D5               	movwf	_DimmerLightsIntrIOC^(0+128)
 19934  1C52  0008               	return
 19935  1C53                     __end_of_DimmerIntrIOCPointSelect:	
 19936  007E                     btemp	set	126	;btemp
 19937  007E                     pic14e$flags	set	126
 19938  007E                     wtemp	set	126
 19939  007E                     wtemp0	set	126
 19940  0080                     wtemp1	set	128
 19941  0082                     wtemp2	set	130
 19942  0084                     wtemp3	set	132
 19943  0086                     wtemp4	set	134
 19944  0088                     wtemp5	set	136
 19945  007F                     wtemp6	set	127
 19946  007E                     ttemp	set	126
 19947  007E                     ttemp0	set	126
 19948  0081                     ttemp1	set	129
 19949  0084                     ttemp2	set	132
 19950  0087                     ttemp3	set	135
 19951  007F                     ttemp4	set	127
 19952  007E                     ltemp	set	126
 19953  007E                     ltemp0	set	126
 19954  0082                     ltemp1	set	130
 19955  0086                     ltemp2	set	134
 19956  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         279
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     74      78
    BANK1            80      0      80
    BANK2            80      4      79
    BANK3            80      0      79
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK2[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerLights_IntrControl->i1_setLoad_StatusOff
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  131691
                                              0 BANK2      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    2234
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           5     5      0     601
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    9586
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    9586
                                             17 BANK0      1     1      0
                       _getLoad_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    9552
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   29437
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   29437
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0   12930
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12426
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1711
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     332
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     332
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1182
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1182
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   38710
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   38710
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37767
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    2017
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35750
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14744
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1710
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15222
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15036
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14943
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            3     3      0    9373
                                             17 BANK0      3     3      0
                            ___lwdiv
                             ___wmul
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   3     3      0    7535
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     124
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    5978
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     425
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    3369
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     540
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getTemp_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     344
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     657
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1306
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1306
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   14012
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   13814
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    9280
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     401
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2167
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     228
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1151
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     198
         _getDimmerLights_StatusFlag
                         _setLoad_GO
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13669
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13669
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     748
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     852
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     644
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     644
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    2017
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     400
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     334
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     334
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (14) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___awdiv
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setLoad_Enable
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect
       i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4A      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      4      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     18D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     18D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Oct 29 14:53:15 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1EA9                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006C  
     __end_of_getDimmerLights_StatusFlag 1BC2               _getDimmerLights_StatusFlag 1BB1  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 173A  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1E29  
                   _setDimmerLights_Main 0AD9                             ___ftadd@sign 0048  
                                    l102 159C                                      l112 13CB  
                                    l104 15B0                                      l113 13C7  
                                    l114 13B5                                      l116 13C5  
                                    l342 1C5D                                      l343 1C5E  
                                    l267 17D4                                      l292 0A1E  
                                    l293 0A61                                      l386 1F38  
                                    l824 1C36                                      l870 1408  
                                    _GIE 005F                                      _CRC 00D2  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 0078                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BF  
                                    _ISR 0004                                      _WDT 00D0  
                                    _Sw1 0153                                      _Sw2 01E6  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1C67  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 19D9  
                        __end_of_ADC_Set 1A19                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0CD2                    _setDimmerLights_ERROR 14BD  
                  _setDimmerLights_AdjRF 1F10                    _setDimmerLights_AdjGo 1B91  
                __size_of_setTemp_Enable 0008                    _setDimmerLights_Clear 1B81  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1AF0                               Load_Main@i 0033  
                           ___ftdiv@sign 003D                                     l1362 10C0  
                                   l2314 0857                 ?_DimmerLightsPointSelect 0070  
                                   l3043 1784                                     l1371 1380  
                                   l2324 08AD                                     l3037 176D  
                                   l1349 1E46                                     l1701 034F  
                                   l1720 035E                                     l2280 0617  
                                   l2361 1228                                     l2329 1126  
                                   l2281 0613                                     l3066 0567  
                                   l2347 07F7                                     l2283 0653  
                                   l2275 05DF                                     l2700 1B44  
                                   l1556 16C6                          __end_of_IOC_Set 1AFD  
                                   l1728 11EF                                     l6003 05A6  
                                   l6013 0DFD                                     l6041 0E6D  
                                   l6033 0E54                                     l6105 0C64  
                                   l1698 0224                                     l6019 0E13  
                                   l6131 0CAF                                     l6123 0C94  
                                   l6133 0CB8                                     l6125 0CA2  
                                   l6061 0EBC                                     l6135 0CBB  
                                   l6055 0EA6                                     l6073 0EF7  
                                   l6139 0CC9                                     l2876 1DD6  
                                   l6085 0F13                                     l6077 0EFF  
                                   l6089 0F1B                                     l5901 174A  
                                   l5911 1772                                     l5903 1754  
                                   l5913 177A                                     l5905 1759  
                                   l9121 1400                                     l9113 13E8  
                                   l9025 0D78                                     l9201 07D2  
                                   l9035 0D9A                                     l9221 17A2  
                                   l9205 07DB                                     l9071 1D1B  
                                   l9119 13FB                                     l9223 17A5  
                                   l5943 04F0                                     l9063 1216  
                                   l9039 0DB0                                     l9073 1D1E  
                                   l9321 0A63                                     l9241 17BC  
                                   l5953 0506                                     l9209 07E4  
                                   l9331 1F49                                     l8611 1DC4  
                                   l9411 10A8                                     l9307 0A2F  
                                   l9251 17E3                                     l9227 17AB  
                                   l5971 0533                                     l5947 04F7  
                                   l9077 1D24                                     l9333 1F54  
                                   l9341 1E93                                     l9093 1EDD  
                                   l9309 0A47                                     l9253 17E7  
                                   l9245 17DA                                     l5973 053D  
                                   l5965 0520                                     l8607 1DBB  
                                   l9087 1ED4                                     l9255 17EA  
                                   l9247 17DD                                     l5983 0559  
                                   l5975 0542                                     l9191 07AE  
                                   l9345 1E99                                     l9601 12F1  
                                   l5897 1743                                     l8529 1EB4  
                                   l8625 1C86                                     l9361 1316  
                                   l9089 1ED7                                     l9273 09FA  
                                   l9281 0A06                                     l5993 058B  
                                   l5985 0563                                     l5977 0546  
                                   l8553 1C11                                     l8801 172F  
                                   l9513 0A86                                     l9339 1E90  
                                   l9603 12F4                                     l8643 147F  
                                   l9291 0A1B                                     l9275 09FD  
                                   l9259 17F0                                     l8661 14A5  
                                   l8653 1487                                     l8637 1474  
                                   l8725 0977                                     l8813 1E1A  
                                   l9293 0A15                                     l5989 0579  
                                   l8549 1C0B                                     l9197 07C9  
                                   l9533 0AC7                                     l9509 0A79  
                                   l9453 1268                    _myMain_Initialization 1B52  
                                   l9607 12FA                                     l8567 1C72  
                                   l8655 1493                                     l9279 0A03  
                                   l8583 1FD3                                     l9543 142F  
                                   l8665 14AE                                     l8817 1E21  
                                   l9481 0872                                     l9449 125C  
                                   l8835 162F                                     l8843 163B  
                                   l9731 0B1F                                     l9715 0AED  
                                   l9491 0898                                     l9547 143C  
                                   l8669 14B6                                     l8853 164B  
                                   l9741 0B46                                     l9469 085A  
                                   l9591 12E1                                     l8839 1635  
                                   l9727 0B12                                     l9719 0AF7  
                                   l8791 1710                                     l9911 0BE1  
                                   l9593 12E4                                     l8961 1BBB  
                                   l8865 1667                                     l8873 1673  
                                   l8849 1645                                     l8857 1651  
                                   l8945 1D09                                     l9497 08A3  
                                   l9577 09D2                                     l9913 0BE7  
                                   l9833 1E5B                                     _CFGS 0CAE  
                                   l9851 1360                                     l9771 12B6  
                                   l8947 1D0D                                     l8795 1716  
                                   l9827 1E53                                     l9597 12EA  
                                   l8869 166D                                     l8885 1EFF  
                                   l9845 134B                                     l8797 1723  
                                   l9829 1E56                                     l8991 0D2F  
                                   l9767 12AF                                     l9935 0C14  
                           __CFG_WDTE$ON 0000                                     l8889 1F07  
                                   l8897 1136                                     l9945 0C2B  
                                   l9971 05D2                                     l9947 0C2D  
                                   l9993 05F6                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4305 1768  
                                   u4325 1775                                     u4505 0534  
                                   u4355 178B                                     _PEIE 005E  
                                   u4285 174F                                     u4535 0547  
                                   u4635 0E25                                     u4475 0521  
                                   u4715 0EC8                                     u4645 0E35  
                                   u4565 055A                                     u4725 0ED8  
                                   u4655 0E55                                     u4665 0E64  
                                   u4825 0C6B                                     u4745 0F00  
                                   u4675 0E6E                                     u4755 0F06  
                                   u4855 0C95                                     u4785 0F1C  
                                   u9115 1C9E                                     u4795 0F22  
                                   u4885 0CB0                                     u8705 148A  
                                   u8810 0925                                     u8725 1494  
                                   u9615 1F3E                                     u8735 149E  
                                   u8815 0923                                     u8745 14A6  
                                   u8595 1FBF                                     _LWLO 0CAD  
                                   _RFSW 0079                                     _RSSI 00D6  
                                   _WREN 0CAA                                     _Buz1 00B3  
                                   _Temp 00DC                                     _main 1513  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 091B  
                        __end_of_RF_Main 19E2                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 1A9C                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1A19  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 123D                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                                    ??_ISR 0075  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1AD7  
          __end_of_DimmerIntrPointSelect 1BF6                                    l10031 063A  
                                  l10103 03A3                                    l10201 119D  
                                  l10105 03AB                                    l10203 11A9  
                                  l10213 11C4                                    l10029 0638  
                                  l10047 0668                                    l10143 0443  
                                  l10119 03D8                                    l10209 11BB  
                                  l10073 1B49                                    l10129 0405  
                                  l10153 0475                                    l10227 139F  
                                  l10059 0689                                    l10411 1185  
                                  l10181 1DD0                                    l10077 1B4F  
                                  l10093 0393                                    l10095 0399  
                                  l10505 02E3                                    l10523 030D  
                                  l10507 02E9                                    l10517 0301  
                                  l10437 16AF                                    l10295 070D  
                                  l10535 032A                                    l10543 034C  
                                  l10383 0B8F                                    l10447 16C7  
                                  l10623 1537                                    l10377 0B6C  
                                  l10387 0B97                                    l10627 1542  
                                  l10549 0355                                    l10485 026D  
                                  l10479 0243                                    l10399 0BBF  
                  ?_setDimmerLights_Main 0070                                    l10499 02D6  
                        ?_setDelayOff_GO 002A                    __end_of_setLoad_Count 1B26  
                                  ?_main 016B                          __end_of___awdiv 14BD  
                        __end_of___ftadd 05BE                          __end_of___ftdiv 0E8F  
                                  u11015 1395                          __end_of___ftmul 0F43  
                                  u11135 1E3D                                    u11225 0BB1  
                                  u10515 05F0                                    u11315 16D6  
                        ___awdiv@divisor 0020                                    u11255 117C  
                                  _T1CON 0018                                    u11185 0B7F  
                                  u11265 118B                                    u11435 02EF  
                        __end_of___fttol 0CD2                                    u10645 0679  
                                  u11285 168E                                    u11295 16BE  
                                  u10905 1DD7                                    u11385 02AA  
                                  u10915 1DDC             setDimmerLights_AdjGo@command 0022  
                                  u10945 11A0                                    u10965 11AA  
                                  u10975 11B4                                    u10985 11BC  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                          __end_of___lwdiv 11CB  
                                  i1l770 1C49                                    i1l781 1BED  
                 _setDimmerLights_Switch 1B61                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00EE  
                                  _RFSW2 00EF                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0020  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E             __size_ofi1_setLoad_StatusOff 0016  
                                  _WPUB1 1069                                    _WPUB2 106A  
                                  _Load1 01A0                  __end_of_Timeout_Counter 1CA4  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 10F7  
             _setDimmerLights_IntrIOC_GO 10C7                         __end_of_TMR1_ISR 1F81  
           __size_of_CC2500_WriteCommand 0019                         __end_of_TMR1_Set 1AE3  
                                  _getAD 1E48                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 141D            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                         _setLoad_Enable 1A72              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1C2C  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03D8                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1BD3                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 091B  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                             ?_my_MainTime 0070  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 15C4  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                   __end_of_getLoad_Safe 1A61                        ??_setPercentValue 0059  
                           __end_of_main 156B                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 19FB                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D5B  
                   _setSw_Initialization 1A41                  setOverTemp_Exceptions@i 002F  
             __size_of_setLoad_StatusOff 001F                                   ??_main 006A  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0762                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03D8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C3F  
                 ?_setDimmerLights_AdjRF 0070                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 008B                         ??_setRFSW_Status 0023  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 1A7B                     __end_of_getTemp_Safe 1A41  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 08B0                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 0069                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0070  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1ECB                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 179B                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1B71                                   i1l7411 0179  
                                 i1l7403 0158                                   i1l7421 01AB  
                                 i1l7441 01E2                                   i1l7425 01B1  
                                 i1l7409 0173                                   i1l7427 01B7  
                                 i1l7363 00A8                                   i1l7445 01E8  
                                 i1l7381 00F2                                   i1l7383 00F8  
                                 i1l7359 00A1                                   i1l7395 012D  
                                 i1l7387 010B                                   i1l7389 0111  
                                 i1l7399 0144                                   i1l6981 10F0  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                       __size_of_Load_Main 016E  
                                 u657_25 007C                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1D45  
                                 u788_25 1F7B                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1A00  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1CB9  
                                 _Dimmer 0076                                   _DlySw1 00EA  
                                 _DlySw2 00EC              __size_of_setLoad_Exceptions 0038  
             __end_of_Mcu_Initialization 1C08                      __end_of_Buzzer_Main 13D2  
                                 _Memory 0220                                   _Timer1 00CB  
     __end_of_setDimmerLights_TriggerAdj 1BB1               _setDimmerLights_TriggerAdj 1BA1  
                                 ___bmul 1C08            setDimmerLights_Switch@command 0022  
                                 ___wmul 1DCD                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                                ??___lwdiv 0024  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00DA                                   _s_data 00DB  
                                 _setLED 161F                                   _myMain 00A0  
                       _DimmerLightsIntr 0077                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 156B                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 106B         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020      __end_of_setDimmerLights_IntrControl 020E  
            _setDimmerLights_IntrControl 004D                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0070  
                  __end_of_SwPointSelect 1C8F                          ?_setLoad_Enable 0070  
                          ?_setRF_Enable 0070                           _setTemp_Enable 1A61  
                        _RfSWPointSelect 07ED             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 0074              __size_of_DimmerLights_Close 0019  
                __size_of_LedPointSelect 001D                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1B43  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 161F  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0049  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                       getLoad_Safe@result 0020  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK4 1E68                            __end_of_getAD 1E68  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0044  
                     _LED_Initialization 1ABF                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 004B                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0070                __size_of_setLoad_StatusOn 0023  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0070                        __end_of_Load_Main 037C  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 1A00  
               __end_of_setDimmerReClock 1A21                       __size_of_getRxData 0069  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1A69  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00D3                           _DimmerLights22 00D4  
                   __size_of_setLED_Main 0041                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 19E5  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006A                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 1388                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 19EB                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1A21                    __size_of_getLoad_Safe 0008  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006B                        LedPointSelect@led 0021  
                    i1_setLoad_StatusOff 1CB9                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0008                       getTemp_Safe@result 0020  
                            setBuz@count 002C                               __pmaintext 1513  
                    _CC2500_WriteCommand 1D13                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C                     __size_of_my_MainTime 005E  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR1_ISR 0075                            ?_setTemp_Main 0070  
                             _getLoad_AD 0B4C                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00BD  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1A12                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 115E                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1AA7                    __size_of_getTemp_Safe 0008  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1203  
                __end_of_RfSWPointSelect 0800                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0070                                  _IOC_ISR 1AE3  
                        ?_setTemp_Enable 0070                                  _IOC_Set 1AF0  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1E29                        _Flash_Memory_Read 1D5E  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0071  
                 __size_of_CC2500_TxData 0065                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                             _getLoad_Safe 1A59  
                                _RF_Data 0120                                  _RF_Main 19DF  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1A91          __end_of_setControl_Lights_Table 07ED  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 0A67                          _setPercentValue 0801  
                ??_setLoad_AH_AL_Restore 0020                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 0168  
           __end_of_CC2500_FrequencyCabr 1AB3                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1BE4                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0160  
                                _VarLED2 0164                        __end_of_getRxData 08B0  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C53  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1B81  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 1A39  
                         ??_setTemp_Main 0031                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1B71                                  ___awdiv 1469  
                                ___ftadd 04C8                           ??_setSw_Enable 0022  
                                ___ftdiv 0DE6                          __size_of___wmul 001E  
                                ___ftmul 0E8F                                  ___fttol 0C4B  
                    __end_of_Switch_Main 1A59                                  ___lwdiv 1194  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0023                                  __ptext1 167D  
                                __ptext2 1A61                                  __ptext3 1A72  
                                __ptext4 1B52                                  __ptext5 115E  
                                __ptext6 0B4C                                  __ptext7 1E48  
                                __ptext8 1C1A                                  __ptext9 0002  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0071  
                  _DimmerIntrPointSelect 1BE4                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 1E48                __end_of_Flash_Memory_Read 1D78  
                             _setRF_Main 05BE                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1A29                        _DimmerLights_Main 1A86  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1A86               __end_of_CC2500_ClearRXFIFO 19EF  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 19F3  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006D  
                         _LedPointSelect 1DB0                      _DelayOffPointSelect 1C67  
                                clrloop0 1A0D           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1B0A                     end_of_initialization 0049  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 1A31  
                      _CC2500_InitSetREG 1F81                            _DelayTime_1us 1F33  
                      __end_of_setTxData 1000               __end_of_Flash_Memory_Write 10C7  
                                init_ram 1A06                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1A07                               _setSw_Main 037C  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1ECB  
                 __size_of_setLoad_Count 000E                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1BC2                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 09F6  
                          _CC2500_TxData 179B                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1B34              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 1344                  _DimmerLights_Exceptions 13D2  
                            ?_getLoad_AD 0070                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1A69                      ??_CC2500_ReadStatus 0022  
                       _setLoad_StatusOn 1EED         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
              setLoad_Exceptions@command 0030                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1A91                       _Mcu_Initialization 1BF6  
                       ??_setLoad_Enable 0020                 __size_of_CC2500_PowerRST 0043  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$6948 0067                          _setSw_Main$6949 0068  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1DCD  
                __end_of_Sw_DimmerOnFunc 0AD9                  __end_of_setPercentValue 0847  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 1FAB  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1300                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1EED               __end_of_setLoad_Exceptions 1203  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1D5E  
                   _setRF_Initialization 1A9C                              _Switch_Main 1A51  
            setDimmerLights_Clear@lights 0023                      setLoad_Exceptions@i 002F  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C2C  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1CA4  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1C1A                __size_of_Sw_DimmerAdjFunc 004C  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1C3F  
                         __end_of___wmul 1DEB          __size_of_setOverTemp_Exceptions 003F  
                      __size_of_TMR1_ISR 0028                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C                     __end_of_setMemory_GO 1CE5  
          __size_of_setDimmerLights_Main 0073                           __end_of_setLED 167D  
                         __end_of_setBuz 15C4                            _setLoad_Count 1B18  
        _getDimmerLights_StatusFlag$2618 0022                     _CC2500_FrequencyCabr 1AA7  
                setLoad_StatusOn@command 0020                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0D5B  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 1129  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1D45  
                              _Load_Main 020E                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0013                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1E0A  
        __size_of_setTemp_Initialization 0003                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0C4B  
                            ?_setLoad_GO 0070                     __end_of_setSw_Enable 1DB0  
                    __size_of_getLoad_AD 0079                             ?_Buzzer_Main 0070  
                     _set_TimeoutCleared 19FB                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 015C  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0036                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1B43                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              i1setLoad_StatusOff@lights 0071                  __size_of_setRFSW_Status 000E  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 19E8  
              ??_DimmerLights_Exceptions 002D            setOverTemp_Exceptions@command 0030  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D7                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                               ??___wmul 0024                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D8                              __pdataBANK4 0245  
                               ??_setLED 0023                         ??_setTemp_Enable 0020  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                         ?_setLoad_Count 0070                         _CC2500_SIDLEMode 19F3  
             __size_of_DimmerLights_Main 000B                __end_of_setRF_DimmerValue 115E  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$5840 0068  
                            __pbssCOMMON 0076                                 ?_IOC_Set 0070  
                              ___latbits 0003                               ?_Load_Main 0070  
                  setTemp_Enable@command 0020                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                          __pcstackBANK2 016B                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0089  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
           setDimmerLights_Clear@command 0022                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 006B               __size_of_CC2500_ReadStatus 0022  
                 _setOverTemp_Exceptions 123D                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 0135  
                          _DimmerLights2 0144                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                    __size_of_setRF_Enable 000E  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1D94  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006D  
                          ??_my_MainTime 002D              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00DD                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 19E2                                _getBuz_GO 1BD3  
    __end_of_Flash_Memory_Initialization 0762              _Flash_Memory_Initialization 069B  
                               ?___awdiv 0020                                __ptext100 1C7B  
                              __ptext101 091B                                __ptext110 1B61  
                              __ptext102 0801                                __ptext111 1C2C  
                              __ptext103 0C4B                                __ptext120 1F81  
                              __ptext112 156B                                __ptext104 0DE6  
                              __ptext121 1DEB                                __ptext113 1469  
                              __ptext105 1EA9                                __ptext130 1C53  
                              __ptext122 1E88                                __ptext114 1A21  
                              __ptext106 173A                                __ptext131 1388  
                              __ptext123 1AA7                                __ptext115 1A7B  
                              __ptext107 1B0A                                __ptext140 10C7  
                              __ptext132 19D9                                __ptext124 1F33  
                              __ptext116 1C67                                __ptext108 07ED  
                              __ptext141 1C3F                                __ptext125 19EF  
                              __ptext117 1CA4                                __ptext109 1B71  
                               ?___ftadd 003E                                __ptext134 1F59  
                              __ptext126 19EB                                __ptext118 19F3  
                              __ptext135 004D                                __ptext127 1D13  
                              __ptext119 12BD                                __ptext136 1CB9  
                              __ptext128 19FB                                __ptext137 1BE4  
                              __ptext129 1C8F                                __ptext138 1AE3  
                              __ptext139 1A19                                _getRxData 0847  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 0DE6                      __size_of_setLoad_GO 0008  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 19DC                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1B52       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0056                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 014C  
          __end_of_setDimmerLights_ERROR 1513             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 1F33            __end_of_setDimmerLights_AdjGo 1BA1  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
          __end_of_setDimmerLights_Clear 1B91                                _r_address 00D9  
         __size_of_myMain_Initialization 000F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1B61                           __size_of_getAD 0020  
                           _setRF_Enable 1B26                         ___lwdiv@quotient 0026  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1C7B  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 12BD  
                    _DimmerLightsIntrIOC 00D5                 __end_of_setLoad_StatusOn 1F10  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 19E8  
                      _CC2500_rfSettings 102F                           ___wmul@product 0024  
                               _LED_Main 1ACB                          SwPointSelect@sw 0021  
                              clear_ram0 1A0C                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0F43      __end_of_DimmerLights_Initialization 1CFC  
            _DimmerLights_Initialization 1CE5                       _CC2500_ClearRXFIFO 19EB  
                     _CC2500_ClearTXFIFO 19EF           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1A51                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003A  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 1098  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 1F59                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1CCF  
                               _TMR1_Set 1AD7                         _Sw_DimmerAdjFunc 141D  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                    __end_of_my_MainTime 16DB                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00CE  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1D2C  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1C1A  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0987  
                  __size_of_setTemp_Main 0086                  __size_of_setDelayOff_GO 005F  
                  __size_of_setSw_Enable 001C                                 _DelayOff 006A  
                           setSw_Main@sw 0069         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0031                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1ABF                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 1129                    _DlyOff_Initialization 1A7B  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 19F7  
                       __size_of_WDT_Set 000B                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 0BC5                    _Switch_Initialization 1AFD  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1B0A                             _setMemory_GO 1CCF  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 1194  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1C53  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 005E  
                            ??_Temp_Main 0032                        setRFSW_Control@sw 0063  
                    _Load_Initialization 1066                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 2000    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1FD5                  ??_DimmerIntrPointSelect 0070  
                           _setTemp_Main 0BC5                       _setLoad_Exceptions 11CB  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1D94                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
                               ___awtoft 1EA9                         ??_LedPointSelect 0020  
                               ___ftpack 173A                             _setSw_Status 1B34  
                      getTemp_AD@channel 0025                             ??_setRF_Main 0067  
                   CC2500_WriteREG@value 0022                              _setLED_Main 127C  
                    ?_setLoad_Exceptions 0070                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0987                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E                          ___lwdiv@divisor 0020  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0025  
                               __ptext10 19E8                                 __ptext11 0BC5  
                               __ptext20 0987                                 __ptext12 123D  
                               __ptext21 141D                                 __ptext13 1A59  
                               __ptext30 10F7                                 __ptext22 1BA1  
                               __ptext14 19E5                                 __ptext31 0762  
                               __ptext23 1B91                                 __ptext15 19E2  
                               __ptext40 0E8F                                 __ptext32 0D5B  
                               __ptext24 1AFD                                 __ptext16 1A51  
                               __ptext41 04C8                                 __ptext33 16DB  
                               __ptext25 1A41                                 __ptext17 037C  
                               __ptext50 1A91                                 __ptext42 1BD3  
                               __ptext34 1FAB                                 __ptext26 1B43  
                               __ptext18 1A49                                 __ptext51 1AD7  
                               __ptext43 179B                                 __ptext35 1C08  
                               __ptext27 19DF                                 __ptext19 0A67  
                               __ptext60 13D2                                 __ptext52 1D45  
                               __ptext44 09F6                                 __ptext36 1203  
                               __ptext28 05BE                                 __ptext61 1FD5  
                               __ptext53 1AF0                                 __ptext45 1ECB  
                               __ptext37 1129                                 __ptext29 0847  
                               __ptext70 127C                                 __ptext62 14BD  
                               __ptext54 19F7                                 __ptext46 1CFC  
                               __ptext38 1F10                                 __ptext71 1ABF  
                               __ptext63 1B81                                 __ptext55 1A12  
                               __ptext47 19DC                                 __ptext39 15C4  
                               __ptext80 1A86                                 __ptext72 1BC2  
                               __ptext64 1A39                                 __ptext56 020E  
                               __ptext48 1A9C                                 __ptext81 0AD9  
                               __ptext73 1E29                                 __ptext65 1DCD  
                               __ptext57 11CB                                 __ptext49 1BF6  
                               __ptext90 1CCF                                 __ptext82 1300  
                               __ptext74 1344                                 __ptext66 1194  
                               __ptext58 1D94                                 __ptext91 1A31  
                               __ptext83 1E0A                                 __ptext75 1AB3  
                               __ptext67 1066                                 __ptext59 1B26  
                               __ptext92 1BB1                                 __ptext84 0CD2  
                               __ptext76 069B                                 __ptext68 1D78  
                               __ptext93 1CE5                                 __ptext85 1EED  
                               __ptext77 1098                                 __ptext69 1ACB  
                               __ptext94 106B                                 __ptext86 1B18  
                               __ptext78 1A69                                 __ptext95 1A00  
                               __ptext87 161F                                 __ptext79 1D5E  
                               __ptext96 1A29                                 __ptext88 1DB0  
                               __ptext97 08B0                                 __ptext89 1D2C  
                               __ptext98 0F43                                 __ptext99 1B34  
                               __product 0245            ??_setDimmerLights_IntrControl 0072  
                           ??_setLoad_GO 0020                  ??_setLED_Initialization 0024  
               __size_of_RfSWPointSelect 0013           __size_of_Dimmer_Initialization 0006  
                 __end_of_setRFSW_Status 1B18            __end_of_Dimmer_Initialization 1A06  
           __end_of_setDimmerLights_Main 0B4C              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1A49  
               __end_of_CC2500_SIDLEMode 19F7               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1C7B               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1D2C                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 0008                     ??_setLoad_Exceptions 002E  
                        _CC2500_ReadByte 1CFC                              _my_MainTime 167D  
                     _CC2500_InitPATable 1DEB      __size_of_getDimmerLights_StatusFlag 0011  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 069B  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 016B            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 016D                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 12BD                       __end_of_setLoad_GO 1A39  
            __end_of_Flash_Memory_Modify 1388                        ??_getPercentValue 0059  
                            _setLog_Code 10F7              __end_of_Flash_Memory_Unlock 1A72  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1E88  
                     __end_of_setSw_Main 04C8                        setLoad_GO@command 0020  
                  ??_Load_Initialization 0022                            _Transceive_OK 03D9  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0070  
                ?_setOverTemp_Exceptions 0070                           _DelayTimejudge 1FAB  
                          ?_getLoad_Safe 0070                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0009                   ?_Switch_Initialization 0070  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1098  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 106B              __end_of_setDimmerLights_Adj 1344  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 19DC  
   __size_of_setDimmerLights_IntrControl 01C1                              getLoad_AD@i 0028  
                            getLoad_AD@j 0027                            ?_getTemp_Safe 0070  
                   _Flash_Memory_Erasing 1AB3                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007A          __end_of_DelayOff_Initialization 1A29  
    __size_of_setDimmerLights_IntrIOC_GO 0030                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1A31                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 16DB         __size_of_setControl_Lights_Table 008B  
                      _setLoad_StatusOff 1E0A                   __end_of_DelayTimejudge 1FD5  
         __end_of_setOverTemp_Exceptions 127C                           ??_getLoad_Safe 0020  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 1F59                 __end_of_Sw_DimmerAdjFunc 1469  
                __end_of_CC2500_ReadByte 1D13             __end_of_setSw_Initialization 1A49  
                        _Timeout_Counter 1C8F                     getPercentValue@value 005B  
             __end_of_LED_Initialization 1ACB         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 19E5  
               __size_of_Sw_DimmerOnFunc 0072                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0070                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 19DF  
               __end_of_Sw_DimmerOffFunc 09F6                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0A67                    __end_of_CC2500_TxData 1800  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 1D78  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1300  
