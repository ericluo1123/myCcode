

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Nov 12 17:22:13 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	intentry,global,class=CODE,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	dabs	1,0x7E,2
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  0008                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0099                     	;# 
   191  009A                     	;# 
   192  009B                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  0116                     	;# 
   201  0117                     	;# 
   202  011D                     	;# 
   203  018C                     	;# 
   204  018D                     	;# 
   205  018E                     	;# 
   206  0191                     	;# 
   207  0191                     	;# 
   208  0192                     	;# 
   209  0193                     	;# 
   210  0193                     	;# 
   211  0194                     	;# 
   212  0195                     	;# 
   213  0196                     	;# 
   214  0197                     	;# 
   215  0199                     	;# 
   216  019A                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019C                     	;# 
   222  019C                     	;# 
   223  019D                     	;# 
   224  019E                     	;# 
   225  019F                     	;# 
   226  020D                     	;# 
   227  0210                     	;# 
   228  0211                     	;# 
   229  0211                     	;# 
   230  0212                     	;# 
   231  0212                     	;# 
   232  0213                     	;# 
   233  0213                     	;# 
   234  0214                     	;# 
   235  0214                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0216                     	;# 
   240  0216                     	;# 
   241  0217                     	;# 
   242  0217                     	;# 
   243  0291                     	;# 
   244  0291                     	;# 
   245  0292                     	;# 
   246  0293                     	;# 
   247  0298                     	;# 
   248  0298                     	;# 
   249  0299                     	;# 
   250  029A                     	;# 
   251  0394                     	;# 
   252  0395                     	;# 
   253  0396                     	;# 
   254  0FE4                     	;# 
   255  0FE5                     	;# 
   256  0FE6                     	;# 
   257  0FE7                     	;# 
   258  0FE8                     	;# 
   259  0FE9                     	;# 
   260  0FEA                     	;# 
   261  0FEB                     	;# 
   262  0FED                     	;# 
   263  0FEE                     	;# 
   264  0FEF                     	;# 
   265  0000                     	;# 
   266  0001                     	;# 
   267  0002                     	;# 
   268  0003                     	;# 
   269  0004                     	;# 
   270  0005                     	;# 
   271  0006                     	;# 
   272  0007                     	;# 
   273  0008                     	;# 
   274  0009                     	;# 
   275  000A                     	;# 
   276  000B                     	;# 
   277  000C                     	;# 
   278  000D                     	;# 
   279  000E                     	;# 
   280  0010                     	;# 
   281  0011                     	;# 
   282  0012                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0016                     	;# 
   286  0017                     	;# 
   287  0018                     	;# 
   288  0019                     	;# 
   289  001A                     	;# 
   290  001B                     	;# 
   291  001C                     	;# 
   292  008C                     	;# 
   293  008D                     	;# 
   294  008E                     	;# 
   295  0090                     	;# 
   296  0091                     	;# 
   297  0092                     	;# 
   298  0095                     	;# 
   299  0096                     	;# 
   300  0097                     	;# 
   301  0099                     	;# 
   302  009A                     	;# 
   303  009B                     	;# 
   304  009B                     	;# 
   305  009C                     	;# 
   306  009D                     	;# 
   307  009E                     	;# 
   308  010C                     	;# 
   309  010D                     	;# 
   310  010E                     	;# 
   311  0116                     	;# 
   312  0117                     	;# 
   313  011D                     	;# 
   314  018C                     	;# 
   315  018D                     	;# 
   316  018E                     	;# 
   317  0191                     	;# 
   318  0191                     	;# 
   319  0192                     	;# 
   320  0193                     	;# 
   321  0193                     	;# 
   322  0194                     	;# 
   323  0195                     	;# 
   324  0196                     	;# 
   325  0197                     	;# 
   326  0199                     	;# 
   327  019A                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019C                     	;# 
   333  019C                     	;# 
   334  019D                     	;# 
   335  019E                     	;# 
   336  019F                     	;# 
   337  020D                     	;# 
   338  0210                     	;# 
   339  0211                     	;# 
   340  0211                     	;# 
   341  0212                     	;# 
   342  0212                     	;# 
   343  0213                     	;# 
   344  0213                     	;# 
   345  0214                     	;# 
   346  0214                     	;# 
   347  0215                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0216                     	;# 
   351  0216                     	;# 
   352  0217                     	;# 
   353  0217                     	;# 
   354  0291                     	;# 
   355  0291                     	;# 
   356  0292                     	;# 
   357  0293                     	;# 
   358  0298                     	;# 
   359  0298                     	;# 
   360  0299                     	;# 
   361  029A                     	;# 
   362  0394                     	;# 
   363  0395                     	;# 
   364  0396                     	;# 
   365  0FE4                     	;# 
   366  0FE5                     	;# 
   367  0FE6                     	;# 
   368  0FE7                     	;# 
   369  0FE8                     	;# 
   370  0FE9                     	;# 
   371  0FEA                     	;# 
   372  0FEB                     	;# 
   373  0FED                     	;# 
   374  0FEE                     	;# 
   375  0FEF                     	;# 
   376  0000                     	;# 
   377  0001                     	;# 
   378  0002                     	;# 
   379  0003                     	;# 
   380  0004                     	;# 
   381  0005                     	;# 
   382  0006                     	;# 
   383  0007                     	;# 
   384  0008                     	;# 
   385  0009                     	;# 
   386  000A                     	;# 
   387  000B                     	;# 
   388  000C                     	;# 
   389  000D                     	;# 
   390  000E                     	;# 
   391  0010                     	;# 
   392  0011                     	;# 
   393  0012                     	;# 
   394  0015                     	;# 
   395  0016                     	;# 
   396  0016                     	;# 
   397  0017                     	;# 
   398  0018                     	;# 
   399  0019                     	;# 
   400  001A                     	;# 
   401  001B                     	;# 
   402  001C                     	;# 
   403  008C                     	;# 
   404  008D                     	;# 
   405  008E                     	;# 
   406  0090                     	;# 
   407  0091                     	;# 
   408  0092                     	;# 
   409  0095                     	;# 
   410  0096                     	;# 
   411  0097                     	;# 
   412  0099                     	;# 
   413  009A                     	;# 
   414  009B                     	;# 
   415  009B                     	;# 
   416  009C                     	;# 
   417  009D                     	;# 
   418  009E                     	;# 
   419  010C                     	;# 
   420  010D                     	;# 
   421  010E                     	;# 
   422  0116                     	;# 
   423  0117                     	;# 
   424  011D                     	;# 
   425  018C                     	;# 
   426  018D                     	;# 
   427  018E                     	;# 
   428  0191                     	;# 
   429  0191                     	;# 
   430  0192                     	;# 
   431  0193                     	;# 
   432  0193                     	;# 
   433  0194                     	;# 
   434  0195                     	;# 
   435  0196                     	;# 
   436  0197                     	;# 
   437  0199                     	;# 
   438  019A                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019C                     	;# 
   444  019C                     	;# 
   445  019D                     	;# 
   446  019E                     	;# 
   447  019F                     	;# 
   448  020D                     	;# 
   449  0210                     	;# 
   450  0211                     	;# 
   451  0211                     	;# 
   452  0212                     	;# 
   453  0212                     	;# 
   454  0213                     	;# 
   455  0213                     	;# 
   456  0214                     	;# 
   457  0214                     	;# 
   458  0215                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0216                     	;# 
   462  0216                     	;# 
   463  0217                     	;# 
   464  0217                     	;# 
   465  0291                     	;# 
   466  0291                     	;# 
   467  0292                     	;# 
   468  0293                     	;# 
   469  0298                     	;# 
   470  0298                     	;# 
   471  0299                     	;# 
   472  029A                     	;# 
   473  0394                     	;# 
   474  0395                     	;# 
   475  0396                     	;# 
   476  0FE4                     	;# 
   477  0FE5                     	;# 
   478  0FE6                     	;# 
   479  0FE7                     	;# 
   480  0FE8                     	;# 
   481  0FE9                     	;# 
   482  0FEA                     	;# 
   483  0FEB                     	;# 
   484  0FED                     	;# 
   485  0FEE                     	;# 
   486  0FEF                     	;# 
   487  0000                     	;# 
   488  0001                     	;# 
   489  0002                     	;# 
   490  0003                     	;# 
   491  0004                     	;# 
   492  0005                     	;# 
   493  0006                     	;# 
   494  0007                     	;# 
   495  0008                     	;# 
   496  0009                     	;# 
   497  000A                     	;# 
   498  000B                     	;# 
   499  000C                     	;# 
   500  000D                     	;# 
   501  000E                     	;# 
   502  0010                     	;# 
   503  0011                     	;# 
   504  0012                     	;# 
   505  0015                     	;# 
   506  0016                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  001A                     	;# 
   512  001B                     	;# 
   513  001C                     	;# 
   514  008C                     	;# 
   515  008D                     	;# 
   516  008E                     	;# 
   517  0090                     	;# 
   518  0091                     	;# 
   519  0092                     	;# 
   520  0095                     	;# 
   521  0096                     	;# 
   522  0097                     	;# 
   523  0099                     	;# 
   524  009A                     	;# 
   525  009B                     	;# 
   526  009B                     	;# 
   527  009C                     	;# 
   528  009D                     	;# 
   529  009E                     	;# 
   530  010C                     	;# 
   531  010D                     	;# 
   532  010E                     	;# 
   533  0116                     	;# 
   534  0117                     	;# 
   535  011D                     	;# 
   536  018C                     	;# 
   537  018D                     	;# 
   538  018E                     	;# 
   539  0191                     	;# 
   540  0191                     	;# 
   541  0192                     	;# 
   542  0193                     	;# 
   543  0193                     	;# 
   544  0194                     	;# 
   545  0195                     	;# 
   546  0196                     	;# 
   547  0197                     	;# 
   548  0199                     	;# 
   549  019A                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019C                     	;# 
   555  019C                     	;# 
   556  019D                     	;# 
   557  019E                     	;# 
   558  019F                     	;# 
   559  020D                     	;# 
   560  0210                     	;# 
   561  0211                     	;# 
   562  0211                     	;# 
   563  0212                     	;# 
   564  0212                     	;# 
   565  0213                     	;# 
   566  0213                     	;# 
   567  0214                     	;# 
   568  0214                     	;# 
   569  0215                     	;# 
   570  0215                     	;# 
   571  0215                     	;# 
   572  0216                     	;# 
   573  0216                     	;# 
   574  0217                     	;# 
   575  0217                     	;# 
   576  0291                     	;# 
   577  0291                     	;# 
   578  0292                     	;# 
   579  0293                     	;# 
   580  0298                     	;# 
   581  0298                     	;# 
   582  0299                     	;# 
   583  029A                     	;# 
   584  0394                     	;# 
   585  0395                     	;# 
   586  0396                     	;# 
   587  0FE4                     	;# 
   588  0FE5                     	;# 
   589  0FE6                     	;# 
   590  0FE7                     	;# 
   591  0FE8                     	;# 
   592  0FE9                     	;# 
   593  0FEA                     	;# 
   594  0FEB                     	;# 
   595  0FED                     	;# 
   596  0FEE                     	;# 
   597  0FEF                     	;# 
   598  0000                     	;# 
   599  0001                     	;# 
   600  0002                     	;# 
   601  0003                     	;# 
   602  0004                     	;# 
   603  0005                     	;# 
   604  0006                     	;# 
   605  0007                     	;# 
   606  0008                     	;# 
   607  0009                     	;# 
   608  000A                     	;# 
   609  000B                     	;# 
   610  000C                     	;# 
   611  000D                     	;# 
   612  000E                     	;# 
   613  0010                     	;# 
   614  0011                     	;# 
   615  0012                     	;# 
   616  0015                     	;# 
   617  0016                     	;# 
   618  0016                     	;# 
   619  0017                     	;# 
   620  0018                     	;# 
   621  0019                     	;# 
   622  001A                     	;# 
   623  001B                     	;# 
   624  001C                     	;# 
   625  008C                     	;# 
   626  008D                     	;# 
   627  008E                     	;# 
   628  0090                     	;# 
   629  0091                     	;# 
   630  0092                     	;# 
   631  0095                     	;# 
   632  0096                     	;# 
   633  0097                     	;# 
   634  0099                     	;# 
   635  009A                     	;# 
   636  009B                     	;# 
   637  009B                     	;# 
   638  009C                     	;# 
   639  009D                     	;# 
   640  009E                     	;# 
   641  010C                     	;# 
   642  010D                     	;# 
   643  010E                     	;# 
   644  0116                     	;# 
   645  0117                     	;# 
   646  011D                     	;# 
   647  018C                     	;# 
   648  018D                     	;# 
   649  018E                     	;# 
   650  0191                     	;# 
   651  0191                     	;# 
   652  0192                     	;# 
   653  0193                     	;# 
   654  0193                     	;# 
   655  0194                     	;# 
   656  0195                     	;# 
   657  0196                     	;# 
   658  0197                     	;# 
   659  0199                     	;# 
   660  019A                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019C                     	;# 
   666  019C                     	;# 
   667  019D                     	;# 
   668  019E                     	;# 
   669  019F                     	;# 
   670  020D                     	;# 
   671  0210                     	;# 
   672  0211                     	;# 
   673  0211                     	;# 
   674  0212                     	;# 
   675  0212                     	;# 
   676  0213                     	;# 
   677  0213                     	;# 
   678  0214                     	;# 
   679  0214                     	;# 
   680  0215                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0216                     	;# 
   684  0216                     	;# 
   685  0217                     	;# 
   686  0217                     	;# 
   687  0291                     	;# 
   688  0291                     	;# 
   689  0292                     	;# 
   690  0293                     	;# 
   691  0298                     	;# 
   692  0298                     	;# 
   693  0299                     	;# 
   694  029A                     	;# 
   695  0394                     	;# 
   696  0395                     	;# 
   697  0396                     	;# 
   698  0FE4                     	;# 
   699  0FE5                     	;# 
   700  0FE6                     	;# 
   701  0FE7                     	;# 
   702  0FE8                     	;# 
   703  0FE9                     	;# 
   704  0FEA                     	;# 
   705  0FEB                     	;# 
   706  0FED                     	;# 
   707  0FEE                     	;# 
   708  0FEF                     	;# 
   709  0000                     	;# 
   710  0001                     	;# 
   711  0002                     	;# 
   712  0003                     	;# 
   713  0004                     	;# 
   714  0005                     	;# 
   715  0006                     	;# 
   716  0007                     	;# 
   717  0008                     	;# 
   718  0009                     	;# 
   719  000A                     	;# 
   720  000B                     	;# 
   721  000C                     	;# 
   722  000D                     	;# 
   723  000E                     	;# 
   724  0010                     	;# 
   725  0011                     	;# 
   726  0012                     	;# 
   727  0015                     	;# 
   728  0016                     	;# 
   729  0016                     	;# 
   730  0017                     	;# 
   731  0018                     	;# 
   732  0019                     	;# 
   733  001A                     	;# 
   734  001B                     	;# 
   735  001C                     	;# 
   736  008C                     	;# 
   737  008D                     	;# 
   738  008E                     	;# 
   739  0090                     	;# 
   740  0091                     	;# 
   741  0092                     	;# 
   742  0095                     	;# 
   743  0096                     	;# 
   744  0097                     	;# 
   745  0099                     	;# 
   746  009A                     	;# 
   747  009B                     	;# 
   748  009B                     	;# 
   749  009C                     	;# 
   750  009D                     	;# 
   751  009E                     	;# 
   752  010C                     	;# 
   753  010D                     	;# 
   754  010E                     	;# 
   755  0116                     	;# 
   756  0117                     	;# 
   757  011D                     	;# 
   758  018C                     	;# 
   759  018D                     	;# 
   760  018E                     	;# 
   761  0191                     	;# 
   762  0191                     	;# 
   763  0192                     	;# 
   764  0193                     	;# 
   765  0193                     	;# 
   766  0194                     	;# 
   767  0195                     	;# 
   768  0196                     	;# 
   769  0197                     	;# 
   770  0199                     	;# 
   771  019A                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019C                     	;# 
   777  019C                     	;# 
   778  019D                     	;# 
   779  019E                     	;# 
   780  019F                     	;# 
   781  020D                     	;# 
   782  0210                     	;# 
   783  0211                     	;# 
   784  0211                     	;# 
   785  0212                     	;# 
   786  0212                     	;# 
   787  0213                     	;# 
   788  0213                     	;# 
   789  0214                     	;# 
   790  0214                     	;# 
   791  0215                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0216                     	;# 
   795  0216                     	;# 
   796  0217                     	;# 
   797  0217                     	;# 
   798  0291                     	;# 
   799  0291                     	;# 
   800  0292                     	;# 
   801  0293                     	;# 
   802  0298                     	;# 
   803  0298                     	;# 
   804  0299                     	;# 
   805  029A                     	;# 
   806  0394                     	;# 
   807  0395                     	;# 
   808  0396                     	;# 
   809  0FE4                     	;# 
   810  0FE5                     	;# 
   811  0FE6                     	;# 
   812  0FE7                     	;# 
   813  0FE8                     	;# 
   814  0FE9                     	;# 
   815  0FEA                     	;# 
   816  0FEB                     	;# 
   817  0FED                     	;# 
   818  0FEE                     	;# 
   819  0FEF                     	;# 
   820  0000                     	;# 
   821  0001                     	;# 
   822  0002                     	;# 
   823  0003                     	;# 
   824  0004                     	;# 
   825  0005                     	;# 
   826  0006                     	;# 
   827  0007                     	;# 
   828  0008                     	;# 
   829  0009                     	;# 
   830  000A                     	;# 
   831  000B                     	;# 
   832  000C                     	;# 
   833  000D                     	;# 
   834  000E                     	;# 
   835  0010                     	;# 
   836  0011                     	;# 
   837  0012                     	;# 
   838  0015                     	;# 
   839  0016                     	;# 
   840  0016                     	;# 
   841  0017                     	;# 
   842  0018                     	;# 
   843  0019                     	;# 
   844  001A                     	;# 
   845  001B                     	;# 
   846  001C                     	;# 
   847  008C                     	;# 
   848  008D                     	;# 
   849  008E                     	;# 
   850  0090                     	;# 
   851  0091                     	;# 
   852  0092                     	;# 
   853  0095                     	;# 
   854  0096                     	;# 
   855  0097                     	;# 
   856  0099                     	;# 
   857  009A                     	;# 
   858  009B                     	;# 
   859  009B                     	;# 
   860  009C                     	;# 
   861  009D                     	;# 
   862  009E                     	;# 
   863  010C                     	;# 
   864  010D                     	;# 
   865  010E                     	;# 
   866  0116                     	;# 
   867  0117                     	;# 
   868  011D                     	;# 
   869  018C                     	;# 
   870  018D                     	;# 
   871  018E                     	;# 
   872  0191                     	;# 
   873  0191                     	;# 
   874  0192                     	;# 
   875  0193                     	;# 
   876  0193                     	;# 
   877  0194                     	;# 
   878  0195                     	;# 
   879  0196                     	;# 
   880  0197                     	;# 
   881  0199                     	;# 
   882  019A                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019C                     	;# 
   888  019C                     	;# 
   889  019D                     	;# 
   890  019E                     	;# 
   891  019F                     	;# 
   892  020D                     	;# 
   893  0210                     	;# 
   894  0211                     	;# 
   895  0211                     	;# 
   896  0212                     	;# 
   897  0212                     	;# 
   898  0213                     	;# 
   899  0213                     	;# 
   900  0214                     	;# 
   901  0214                     	;# 
   902  0215                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0216                     	;# 
   906  0216                     	;# 
   907  0217                     	;# 
   908  0217                     	;# 
   909  0291                     	;# 
   910  0291                     	;# 
   911  0292                     	;# 
   912  0293                     	;# 
   913  0298                     	;# 
   914  0298                     	;# 
   915  0299                     	;# 
   916  029A                     	;# 
   917  0394                     	;# 
   918  0395                     	;# 
   919  0396                     	;# 
   920  0FE4                     	;# 
   921  0FE5                     	;# 
   922  0FE6                     	;# 
   923  0FE7                     	;# 
   924  0FE8                     	;# 
   925  0FE9                     	;# 
   926  0FEA                     	;# 
   927  0FEB                     	;# 
   928  0FED                     	;# 
   929  0FEE                     	;# 
   930  0FEF                     	;# 
   931  0000                     	;# 
   932  0001                     	;# 
   933  0002                     	;# 
   934  0003                     	;# 
   935  0004                     	;# 
   936  0005                     	;# 
   937  0006                     	;# 
   938  0007                     	;# 
   939  0008                     	;# 
   940  0009                     	;# 
   941  000A                     	;# 
   942  000B                     	;# 
   943  000C                     	;# 
   944  000D                     	;# 
   945  000E                     	;# 
   946  0010                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0015                     	;# 
   950  0016                     	;# 
   951  0016                     	;# 
   952  0017                     	;# 
   953  0018                     	;# 
   954  0019                     	;# 
   955  001A                     	;# 
   956  001B                     	;# 
   957  001C                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  0090                     	;# 
   962  0091                     	;# 
   963  0092                     	;# 
   964  0095                     	;# 
   965  0096                     	;# 
   966  0097                     	;# 
   967  0099                     	;# 
   968  009A                     	;# 
   969  009B                     	;# 
   970  009B                     	;# 
   971  009C                     	;# 
   972  009D                     	;# 
   973  009E                     	;# 
   974  010C                     	;# 
   975  010D                     	;# 
   976  010E                     	;# 
   977  0116                     	;# 
   978  0117                     	;# 
   979  011D                     	;# 
   980  018C                     	;# 
   981  018D                     	;# 
   982  018E                     	;# 
   983  0191                     	;# 
   984  0191                     	;# 
   985  0192                     	;# 
   986  0193                     	;# 
   987  0193                     	;# 
   988  0194                     	;# 
   989  0195                     	;# 
   990  0196                     	;# 
   991  0197                     	;# 
   992  0199                     	;# 
   993  019A                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019C                     	;# 
   999  019C                     	;# 
  1000  019D                     	;# 
  1001  019E                     	;# 
  1002  019F                     	;# 
  1003  020D                     	;# 
  1004  0210                     	;# 
  1005  0211                     	;# 
  1006  0211                     	;# 
  1007  0212                     	;# 
  1008  0212                     	;# 
  1009  0213                     	;# 
  1010  0213                     	;# 
  1011  0214                     	;# 
  1012  0214                     	;# 
  1013  0215                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0216                     	;# 
  1017  0216                     	;# 
  1018  0217                     	;# 
  1019  0217                     	;# 
  1020  0291                     	;# 
  1021  0291                     	;# 
  1022  0292                     	;# 
  1023  0293                     	;# 
  1024  0298                     	;# 
  1025  0298                     	;# 
  1026  0299                     	;# 
  1027  029A                     	;# 
  1028  0394                     	;# 
  1029  0395                     	;# 
  1030  0396                     	;# 
  1031  0FE4                     	;# 
  1032  0FE5                     	;# 
  1033  0FE6                     	;# 
  1034  0FE7                     	;# 
  1035  0FE8                     	;# 
  1036  0FE9                     	;# 
  1037  0FEA                     	;# 
  1038  0FEB                     	;# 
  1039  0FED                     	;# 
  1040  0FEE                     	;# 
  1041  0FEF                     	;# 
  1042  0000                     	;# 
  1043  0001                     	;# 
  1044  0002                     	;# 
  1045  0003                     	;# 
  1046  0004                     	;# 
  1047  0005                     	;# 
  1048  0006                     	;# 
  1049  0007                     	;# 
  1050  0008                     	;# 
  1051  0009                     	;# 
  1052  000A                     	;# 
  1053  000B                     	;# 
  1054  000C                     	;# 
  1055  000D                     	;# 
  1056  000E                     	;# 
  1057  0010                     	;# 
  1058  0011                     	;# 
  1059  0012                     	;# 
  1060  0015                     	;# 
  1061  0016                     	;# 
  1062  0016                     	;# 
  1063  0017                     	;# 
  1064  0018                     	;# 
  1065  0019                     	;# 
  1066  001A                     	;# 
  1067  001B                     	;# 
  1068  001C                     	;# 
  1069  008C                     	;# 
  1070  008D                     	;# 
  1071  008E                     	;# 
  1072  0090                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0095                     	;# 
  1076  0096                     	;# 
  1077  0097                     	;# 
  1078  0099                     	;# 
  1079  009A                     	;# 
  1080  009B                     	;# 
  1081  009B                     	;# 
  1082  009C                     	;# 
  1083  009D                     	;# 
  1084  009E                     	;# 
  1085  010C                     	;# 
  1086  010D                     	;# 
  1087  010E                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  011D                     	;# 
  1091  018C                     	;# 
  1092  018D                     	;# 
  1093  018E                     	;# 
  1094  0191                     	;# 
  1095  0191                     	;# 
  1096  0192                     	;# 
  1097  0193                     	;# 
  1098  0193                     	;# 
  1099  0194                     	;# 
  1100  0195                     	;# 
  1101  0196                     	;# 
  1102  0197                     	;# 
  1103  0199                     	;# 
  1104  019A                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019C                     	;# 
  1110  019C                     	;# 
  1111  019D                     	;# 
  1112  019E                     	;# 
  1113  019F                     	;# 
  1114  020D                     	;# 
  1115  0210                     	;# 
  1116  0211                     	;# 
  1117  0211                     	;# 
  1118  0212                     	;# 
  1119  0212                     	;# 
  1120  0213                     	;# 
  1121  0213                     	;# 
  1122  0214                     	;# 
  1123  0214                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0216                     	;# 
  1128  0216                     	;# 
  1129  0217                     	;# 
  1130  0217                     	;# 
  1131  0291                     	;# 
  1132  0291                     	;# 
  1133  0292                     	;# 
  1134  0293                     	;# 
  1135  0298                     	;# 
  1136  0298                     	;# 
  1137  0299                     	;# 
  1138  029A                     	;# 
  1139  0394                     	;# 
  1140  0395                     	;# 
  1141  0396                     	;# 
  1142  0FE4                     	;# 
  1143  0FE5                     	;# 
  1144  0FE6                     	;# 
  1145  0FE7                     	;# 
  1146  0FE8                     	;# 
  1147  0FE9                     	;# 
  1148  0FEA                     	;# 
  1149  0FEB                     	;# 
  1150  0FED                     	;# 
  1151  0FEE                     	;# 
  1152  0FEF                     	;# 
  1153  0000                     	;# 
  1154  0001                     	;# 
  1155  0002                     	;# 
  1156  0003                     	;# 
  1157  0004                     	;# 
  1158  0005                     	;# 
  1159  0006                     	;# 
  1160  0007                     	;# 
  1161  0008                     	;# 
  1162  0009                     	;# 
  1163  000A                     	;# 
  1164  000B                     	;# 
  1165  000C                     	;# 
  1166  000D                     	;# 
  1167  000E                     	;# 
  1168  0010                     	;# 
  1169  0011                     	;# 
  1170  0012                     	;# 
  1171  0015                     	;# 
  1172  0016                     	;# 
  1173  0016                     	;# 
  1174  0017                     	;# 
  1175  0018                     	;# 
  1176  0019                     	;# 
  1177  001A                     	;# 
  1178  001B                     	;# 
  1179  001C                     	;# 
  1180  008C                     	;# 
  1181  008D                     	;# 
  1182  008E                     	;# 
  1183  0090                     	;# 
  1184  0091                     	;# 
  1185  0092                     	;# 
  1186  0095                     	;# 
  1187  0096                     	;# 
  1188  0097                     	;# 
  1189  0099                     	;# 
  1190  009A                     	;# 
  1191  009B                     	;# 
  1192  009B                     	;# 
  1193  009C                     	;# 
  1194  009D                     	;# 
  1195  009E                     	;# 
  1196  010C                     	;# 
  1197  010D                     	;# 
  1198  010E                     	;# 
  1199  0116                     	;# 
  1200  0117                     	;# 
  1201  011D                     	;# 
  1202  018C                     	;# 
  1203  018D                     	;# 
  1204  018E                     	;# 
  1205  0191                     	;# 
  1206  0191                     	;# 
  1207  0192                     	;# 
  1208  0193                     	;# 
  1209  0193                     	;# 
  1210  0194                     	;# 
  1211  0195                     	;# 
  1212  0196                     	;# 
  1213  0197                     	;# 
  1214  0199                     	;# 
  1215  019A                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019C                     	;# 
  1221  019C                     	;# 
  1222  019D                     	;# 
  1223  019E                     	;# 
  1224  019F                     	;# 
  1225  020D                     	;# 
  1226  0210                     	;# 
  1227  0211                     	;# 
  1228  0211                     	;# 
  1229  0212                     	;# 
  1230  0212                     	;# 
  1231  0213                     	;# 
  1232  0213                     	;# 
  1233  0214                     	;# 
  1234  0214                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0216                     	;# 
  1239  0216                     	;# 
  1240  0217                     	;# 
  1241  0217                     	;# 
  1242  0291                     	;# 
  1243  0291                     	;# 
  1244  0292                     	;# 
  1245  0293                     	;# 
  1246  0298                     	;# 
  1247  0298                     	;# 
  1248  0299                     	;# 
  1249  029A                     	;# 
  1250  0394                     	;# 
  1251  0395                     	;# 
  1252  0396                     	;# 
  1253  0FE4                     	;# 
  1254  0FE5                     	;# 
  1255  0FE6                     	;# 
  1256  0FE7                     	;# 
  1257  0FE8                     	;# 
  1258  0FE9                     	;# 
  1259  0FEA                     	;# 
  1260  0FEB                     	;# 
  1261  0FED                     	;# 
  1262  0FEE                     	;# 
  1263  0FEF                     	;# 
  1264  0000                     	;# 
  1265  0001                     	;# 
  1266  0002                     	;# 
  1267  0003                     	;# 
  1268  0004                     	;# 
  1269  0005                     	;# 
  1270  0006                     	;# 
  1271  0007                     	;# 
  1272  0008                     	;# 
  1273  0009                     	;# 
  1274  000A                     	;# 
  1275  000B                     	;# 
  1276  000C                     	;# 
  1277  000D                     	;# 
  1278  000E                     	;# 
  1279  0010                     	;# 
  1280  0011                     	;# 
  1281  0012                     	;# 
  1282  0015                     	;# 
  1283  0016                     	;# 
  1284  0016                     	;# 
  1285  0017                     	;# 
  1286  0018                     	;# 
  1287  0019                     	;# 
  1288  001A                     	;# 
  1289  001B                     	;# 
  1290  001C                     	;# 
  1291  008C                     	;# 
  1292  008D                     	;# 
  1293  008E                     	;# 
  1294  0090                     	;# 
  1295  0091                     	;# 
  1296  0092                     	;# 
  1297  0095                     	;# 
  1298  0096                     	;# 
  1299  0097                     	;# 
  1300  0099                     	;# 
  1301  009A                     	;# 
  1302  009B                     	;# 
  1303  009B                     	;# 
  1304  009C                     	;# 
  1305  009D                     	;# 
  1306  009E                     	;# 
  1307  010C                     	;# 
  1308  010D                     	;# 
  1309  010E                     	;# 
  1310  0116                     	;# 
  1311  0117                     	;# 
  1312  011D                     	;# 
  1313  018C                     	;# 
  1314  018D                     	;# 
  1315  018E                     	;# 
  1316  0191                     	;# 
  1317  0191                     	;# 
  1318  0192                     	;# 
  1319  0193                     	;# 
  1320  0193                     	;# 
  1321  0194                     	;# 
  1322  0195                     	;# 
  1323  0196                     	;# 
  1324  0197                     	;# 
  1325  0199                     	;# 
  1326  019A                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019C                     	;# 
  1332  019C                     	;# 
  1333  019D                     	;# 
  1334  019E                     	;# 
  1335  019F                     	;# 
  1336  020D                     	;# 
  1337  0210                     	;# 
  1338  0211                     	;# 
  1339  0211                     	;# 
  1340  0212                     	;# 
  1341  0212                     	;# 
  1342  0213                     	;# 
  1343  0213                     	;# 
  1344  0214                     	;# 
  1345  0214                     	;# 
  1346  0215                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0216                     	;# 
  1350  0216                     	;# 
  1351  0217                     	;# 
  1352  0217                     	;# 
  1353  0291                     	;# 
  1354  0291                     	;# 
  1355  0292                     	;# 
  1356  0293                     	;# 
  1357  0298                     	;# 
  1358  0298                     	;# 
  1359  0299                     	;# 
  1360  029A                     	;# 
  1361  0394                     	;# 
  1362  0395                     	;# 
  1363  0396                     	;# 
  1364  0FE4                     	;# 
  1365  0FE5                     	;# 
  1366  0FE6                     	;# 
  1367  0FE7                     	;# 
  1368  0FE8                     	;# 
  1369  0FE9                     	;# 
  1370  0FEA                     	;# 
  1371  0FEB                     	;# 
  1372  0FED                     	;# 
  1373  0FEE                     	;# 
  1374  0FEF                     	;# 
  1375  0000                     	;# 
  1376  0001                     	;# 
  1377  0002                     	;# 
  1378  0003                     	;# 
  1379  0004                     	;# 
  1380  0005                     	;# 
  1381  0006                     	;# 
  1382  0007                     	;# 
  1383  0008                     	;# 
  1384  0009                     	;# 
  1385  000A                     	;# 
  1386  000B                     	;# 
  1387  000C                     	;# 
  1388  000D                     	;# 
  1389  000E                     	;# 
  1390  0010                     	;# 
  1391  0011                     	;# 
  1392  0012                     	;# 
  1393  0015                     	;# 
  1394  0016                     	;# 
  1395  0016                     	;# 
  1396  0017                     	;# 
  1397  0018                     	;# 
  1398  0019                     	;# 
  1399  001A                     	;# 
  1400  001B                     	;# 
  1401  001C                     	;# 
  1402  008C                     	;# 
  1403  008D                     	;# 
  1404  008E                     	;# 
  1405  0090                     	;# 
  1406  0091                     	;# 
  1407  0092                     	;# 
  1408  0095                     	;# 
  1409  0096                     	;# 
  1410  0097                     	;# 
  1411  0099                     	;# 
  1412  009A                     	;# 
  1413  009B                     	;# 
  1414  009B                     	;# 
  1415  009C                     	;# 
  1416  009D                     	;# 
  1417  009E                     	;# 
  1418  010C                     	;# 
  1419  010D                     	;# 
  1420  010E                     	;# 
  1421  0116                     	;# 
  1422  0117                     	;# 
  1423  011D                     	;# 
  1424  018C                     	;# 
  1425  018D                     	;# 
  1426  018E                     	;# 
  1427  0191                     	;# 
  1428  0191                     	;# 
  1429  0192                     	;# 
  1430  0193                     	;# 
  1431  0193                     	;# 
  1432  0194                     	;# 
  1433  0195                     	;# 
  1434  0196                     	;# 
  1435  0197                     	;# 
  1436  0199                     	;# 
  1437  019A                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019C                     	;# 
  1443  019C                     	;# 
  1444  019D                     	;# 
  1445  019E                     	;# 
  1446  019F                     	;# 
  1447  020D                     	;# 
  1448  0210                     	;# 
  1449  0211                     	;# 
  1450  0211                     	;# 
  1451  0212                     	;# 
  1452  0212                     	;# 
  1453  0213                     	;# 
  1454  0213                     	;# 
  1455  0214                     	;# 
  1456  0214                     	;# 
  1457  0215                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0216                     	;# 
  1461  0216                     	;# 
  1462  0217                     	;# 
  1463  0217                     	;# 
  1464  0291                     	;# 
  1465  0291                     	;# 
  1466  0292                     	;# 
  1467  0293                     	;# 
  1468  0298                     	;# 
  1469  0298                     	;# 
  1470  0299                     	;# 
  1471  029A                     	;# 
  1472  0394                     	;# 
  1473  0395                     	;# 
  1474  0396                     	;# 
  1475  0FE4                     	;# 
  1476  0FE5                     	;# 
  1477  0FE6                     	;# 
  1478  0FE7                     	;# 
  1479  0FE8                     	;# 
  1480  0FE9                     	;# 
  1481  0FEA                     	;# 
  1482  0FEB                     	;# 
  1483  0FED                     	;# 
  1484  0FEE                     	;# 
  1485  0FEF                     	;# 
  1486  0000                     	;# 
  1487  0001                     	;# 
  1488  0002                     	;# 
  1489  0003                     	;# 
  1490  0004                     	;# 
  1491  0005                     	;# 
  1492  0006                     	;# 
  1493  0007                     	;# 
  1494  0008                     	;# 
  1495  0009                     	;# 
  1496  000A                     	;# 
  1497  000B                     	;# 
  1498  000C                     	;# 
  1499  000D                     	;# 
  1500  000E                     	;# 
  1501  0010                     	;# 
  1502  0011                     	;# 
  1503  0012                     	;# 
  1504  0015                     	;# 
  1505  0016                     	;# 
  1506  0016                     	;# 
  1507  0017                     	;# 
  1508  0018                     	;# 
  1509  0019                     	;# 
  1510  001A                     	;# 
  1511  001B                     	;# 
  1512  001C                     	;# 
  1513  008C                     	;# 
  1514  008D                     	;# 
  1515  008E                     	;# 
  1516  0090                     	;# 
  1517  0091                     	;# 
  1518  0092                     	;# 
  1519  0095                     	;# 
  1520  0096                     	;# 
  1521  0097                     	;# 
  1522  0099                     	;# 
  1523  009A                     	;# 
  1524  009B                     	;# 
  1525  009B                     	;# 
  1526  009C                     	;# 
  1527  009D                     	;# 
  1528  009E                     	;# 
  1529  010C                     	;# 
  1530  010D                     	;# 
  1531  010E                     	;# 
  1532  0116                     	;# 
  1533  0117                     	;# 
  1534  011D                     	;# 
  1535  018C                     	;# 
  1536  018D                     	;# 
  1537  018E                     	;# 
  1538  0191                     	;# 
  1539  0191                     	;# 
  1540  0192                     	;# 
  1541  0193                     	;# 
  1542  0193                     	;# 
  1543  0194                     	;# 
  1544  0195                     	;# 
  1545  0196                     	;# 
  1546  0197                     	;# 
  1547  0199                     	;# 
  1548  019A                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019C                     	;# 
  1554  019C                     	;# 
  1555  019D                     	;# 
  1556  019E                     	;# 
  1557  019F                     	;# 
  1558  020D                     	;# 
  1559  0210                     	;# 
  1560  0211                     	;# 
  1561  0211                     	;# 
  1562  0212                     	;# 
  1563  0212                     	;# 
  1564  0213                     	;# 
  1565  0213                     	;# 
  1566  0214                     	;# 
  1567  0214                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0216                     	;# 
  1572  0216                     	;# 
  1573  0217                     	;# 
  1574  0217                     	;# 
  1575  0291                     	;# 
  1576  0291                     	;# 
  1577  0292                     	;# 
  1578  0293                     	;# 
  1579  0298                     	;# 
  1580  0298                     	;# 
  1581  0299                     	;# 
  1582  029A                     	;# 
  1583  0394                     	;# 
  1584  0395                     	;# 
  1585  0396                     	;# 
  1586  0FE4                     	;# 
  1587  0FE5                     	;# 
  1588  0FE6                     	;# 
  1589  0FE7                     	;# 
  1590  0FE8                     	;# 
  1591  0FE9                     	;# 
  1592  0FEA                     	;# 
  1593  0FEB                     	;# 
  1594  0FED                     	;# 
  1595  0FEE                     	;# 
  1596  0FEF                     	;# 
  1597  0000                     	;# 
  1598  0001                     	;# 
  1599  0002                     	;# 
  1600  0003                     	;# 
  1601  0004                     	;# 
  1602  0005                     	;# 
  1603  0006                     	;# 
  1604  0007                     	;# 
  1605  0008                     	;# 
  1606  0009                     	;# 
  1607  000A                     	;# 
  1608  000B                     	;# 
  1609  000C                     	;# 
  1610  000D                     	;# 
  1611  000E                     	;# 
  1612  0010                     	;# 
  1613  0011                     	;# 
  1614  0012                     	;# 
  1615  0015                     	;# 
  1616  0016                     	;# 
  1617  0016                     	;# 
  1618  0017                     	;# 
  1619  0018                     	;# 
  1620  0019                     	;# 
  1621  001A                     	;# 
  1622  001B                     	;# 
  1623  001C                     	;# 
  1624  008C                     	;# 
  1625  008D                     	;# 
  1626  008E                     	;# 
  1627  0090                     	;# 
  1628  0091                     	;# 
  1629  0092                     	;# 
  1630  0095                     	;# 
  1631  0096                     	;# 
  1632  0097                     	;# 
  1633  0099                     	;# 
  1634  009A                     	;# 
  1635  009B                     	;# 
  1636  009B                     	;# 
  1637  009C                     	;# 
  1638  009D                     	;# 
  1639  009E                     	;# 
  1640  010C                     	;# 
  1641  010D                     	;# 
  1642  010E                     	;# 
  1643  0116                     	;# 
  1644  0117                     	;# 
  1645  011D                     	;# 
  1646  018C                     	;# 
  1647  018D                     	;# 
  1648  018E                     	;# 
  1649  0191                     	;# 
  1650  0191                     	;# 
  1651  0192                     	;# 
  1652  0193                     	;# 
  1653  0193                     	;# 
  1654  0194                     	;# 
  1655  0195                     	;# 
  1656  0196                     	;# 
  1657  0197                     	;# 
  1658  0199                     	;# 
  1659  019A                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019C                     	;# 
  1665  019C                     	;# 
  1666  019D                     	;# 
  1667  019E                     	;# 
  1668  019F                     	;# 
  1669  020D                     	;# 
  1670  0210                     	;# 
  1671  0211                     	;# 
  1672  0211                     	;# 
  1673  0212                     	;# 
  1674  0212                     	;# 
  1675  0213                     	;# 
  1676  0213                     	;# 
  1677  0214                     	;# 
  1678  0214                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0216                     	;# 
  1683  0216                     	;# 
  1684  0217                     	;# 
  1685  0217                     	;# 
  1686  0291                     	;# 
  1687  0291                     	;# 
  1688  0292                     	;# 
  1689  0293                     	;# 
  1690  0298                     	;# 
  1691  0298                     	;# 
  1692  0299                     	;# 
  1693  029A                     	;# 
  1694  0394                     	;# 
  1695  0395                     	;# 
  1696  0396                     	;# 
  1697  0FE4                     	;# 
  1698  0FE5                     	;# 
  1699  0FE6                     	;# 
  1700  0FE7                     	;# 
  1701  0FE8                     	;# 
  1702  0FE9                     	;# 
  1703  0FEA                     	;# 
  1704  0FEB                     	;# 
  1705  0FED                     	;# 
  1706  0FEE                     	;# 
  1707  0FEF                     	;# 
  1708  0000                     	;# 
  1709  0001                     	;# 
  1710  0002                     	;# 
  1711  0003                     	;# 
  1712  0004                     	;# 
  1713  0005                     	;# 
  1714  0006                     	;# 
  1715  0007                     	;# 
  1716  0008                     	;# 
  1717  0009                     	;# 
  1718  000A                     	;# 
  1719  000B                     	;# 
  1720  000C                     	;# 
  1721  000D                     	;# 
  1722  000E                     	;# 
  1723  0010                     	;# 
  1724  0011                     	;# 
  1725  0012                     	;# 
  1726  0015                     	;# 
  1727  0016                     	;# 
  1728  0016                     	;# 
  1729  0017                     	;# 
  1730  0018                     	;# 
  1731  0019                     	;# 
  1732  001A                     	;# 
  1733  001B                     	;# 
  1734  001C                     	;# 
  1735  008C                     	;# 
  1736  008D                     	;# 
  1737  008E                     	;# 
  1738  0090                     	;# 
  1739  0091                     	;# 
  1740  0092                     	;# 
  1741  0095                     	;# 
  1742  0096                     	;# 
  1743  0097                     	;# 
  1744  0099                     	;# 
  1745  009A                     	;# 
  1746  009B                     	;# 
  1747  009B                     	;# 
  1748  009C                     	;# 
  1749  009D                     	;# 
  1750  009E                     	;# 
  1751  010C                     	;# 
  1752  010D                     	;# 
  1753  010E                     	;# 
  1754  0116                     	;# 
  1755  0117                     	;# 
  1756  011D                     	;# 
  1757  018C                     	;# 
  1758  018D                     	;# 
  1759  018E                     	;# 
  1760  0191                     	;# 
  1761  0191                     	;# 
  1762  0192                     	;# 
  1763  0193                     	;# 
  1764  0193                     	;# 
  1765  0194                     	;# 
  1766  0195                     	;# 
  1767  0196                     	;# 
  1768  0197                     	;# 
  1769  0199                     	;# 
  1770  019A                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019C                     	;# 
  1776  019C                     	;# 
  1777  019D                     	;# 
  1778  019E                     	;# 
  1779  019F                     	;# 
  1780  020D                     	;# 
  1781  0210                     	;# 
  1782  0211                     	;# 
  1783  0211                     	;# 
  1784  0212                     	;# 
  1785  0212                     	;# 
  1786  0213                     	;# 
  1787  0213                     	;# 
  1788  0214                     	;# 
  1789  0214                     	;# 
  1790  0215                     	;# 
  1791  0215                     	;# 
  1792  0215                     	;# 
  1793  0216                     	;# 
  1794  0216                     	;# 
  1795  0217                     	;# 
  1796  0217                     	;# 
  1797  0291                     	;# 
  1798  0291                     	;# 
  1799  0292                     	;# 
  1800  0293                     	;# 
  1801  0298                     	;# 
  1802  0298                     	;# 
  1803  0299                     	;# 
  1804  029A                     	;# 
  1805  0394                     	;# 
  1806  0395                     	;# 
  1807  0396                     	;# 
  1808  0FE4                     	;# 
  1809  0FE5                     	;# 
  1810  0FE6                     	;# 
  1811  0FE7                     	;# 
  1812  0FE8                     	;# 
  1813  0FE9                     	;# 
  1814  0FEA                     	;# 
  1815  0FEB                     	;# 
  1816  0FED                     	;# 
  1817  0FEE                     	;# 
  1818  0FEF                     	;# 
  1819  0000                     	;# 
  1820  0001                     	;# 
  1821  0002                     	;# 
  1822  0003                     	;# 
  1823  0004                     	;# 
  1824  0005                     	;# 
  1825  0006                     	;# 
  1826  0007                     	;# 
  1827  0008                     	;# 
  1828  0009                     	;# 
  1829  000A                     	;# 
  1830  000B                     	;# 
  1831  000C                     	;# 
  1832  000D                     	;# 
  1833  000E                     	;# 
  1834  0010                     	;# 
  1835  0011                     	;# 
  1836  0012                     	;# 
  1837  0015                     	;# 
  1838  0016                     	;# 
  1839  0016                     	;# 
  1840  0017                     	;# 
  1841  0018                     	;# 
  1842  0019                     	;# 
  1843  001A                     	;# 
  1844  001B                     	;# 
  1845  001C                     	;# 
  1846  008C                     	;# 
  1847  008D                     	;# 
  1848  008E                     	;# 
  1849  0090                     	;# 
  1850  0091                     	;# 
  1851  0092                     	;# 
  1852  0095                     	;# 
  1853  0096                     	;# 
  1854  0097                     	;# 
  1855  0099                     	;# 
  1856  009A                     	;# 
  1857  009B                     	;# 
  1858  009B                     	;# 
  1859  009C                     	;# 
  1860  009D                     	;# 
  1861  009E                     	;# 
  1862  010C                     	;# 
  1863  010D                     	;# 
  1864  010E                     	;# 
  1865  0116                     	;# 
  1866  0117                     	;# 
  1867  011D                     	;# 
  1868  018C                     	;# 
  1869  018D                     	;# 
  1870  018E                     	;# 
  1871  0191                     	;# 
  1872  0191                     	;# 
  1873  0192                     	;# 
  1874  0193                     	;# 
  1875  0193                     	;# 
  1876  0194                     	;# 
  1877  0195                     	;# 
  1878  0196                     	;# 
  1879  0197                     	;# 
  1880  0199                     	;# 
  1881  019A                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019C                     	;# 
  1887  019C                     	;# 
  1888  019D                     	;# 
  1889  019E                     	;# 
  1890  019F                     	;# 
  1891  020D                     	;# 
  1892  0210                     	;# 
  1893  0211                     	;# 
  1894  0211                     	;# 
  1895  0212                     	;# 
  1896  0212                     	;# 
  1897  0213                     	;# 
  1898  0213                     	;# 
  1899  0214                     	;# 
  1900  0214                     	;# 
  1901  0215                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0216                     	;# 
  1905  0216                     	;# 
  1906  0217                     	;# 
  1907  0217                     	;# 
  1908  0291                     	;# 
  1909  0291                     	;# 
  1910  0292                     	;# 
  1911  0293                     	;# 
  1912  0298                     	;# 
  1913  0298                     	;# 
  1914  0299                     	;# 
  1915  029A                     	;# 
  1916  0394                     	;# 
  1917  0395                     	;# 
  1918  0396                     	;# 
  1919  0FE4                     	;# 
  1920  0FE5                     	;# 
  1921  0FE6                     	;# 
  1922  0FE7                     	;# 
  1923  0FE8                     	;# 
  1924  0FE9                     	;# 
  1925  0FEA                     	;# 
  1926  0FEB                     	;# 
  1927  0FED                     	;# 
  1928  0FEE                     	;# 
  1929  0FEF                     	;# 
  1930  0000                     	;# 
  1931  0001                     	;# 
  1932  0002                     	;# 
  1933  0003                     	;# 
  1934  0004                     	;# 
  1935  0005                     	;# 
  1936  0006                     	;# 
  1937  0007                     	;# 
  1938  0008                     	;# 
  1939  0009                     	;# 
  1940  000A                     	;# 
  1941  000B                     	;# 
  1942  000C                     	;# 
  1943  000D                     	;# 
  1944  000E                     	;# 
  1945  0010                     	;# 
  1946  0011                     	;# 
  1947  0012                     	;# 
  1948  0015                     	;# 
  1949  0016                     	;# 
  1950  0016                     	;# 
  1951  0017                     	;# 
  1952  0018                     	;# 
  1953  0019                     	;# 
  1954  001A                     	;# 
  1955  001B                     	;# 
  1956  001C                     	;# 
  1957  008C                     	;# 
  1958  008D                     	;# 
  1959  008E                     	;# 
  1960  0090                     	;# 
  1961  0091                     	;# 
  1962  0092                     	;# 
  1963  0095                     	;# 
  1964  0096                     	;# 
  1965  0097                     	;# 
  1966  0099                     	;# 
  1967  009A                     	;# 
  1968  009B                     	;# 
  1969  009B                     	;# 
  1970  009C                     	;# 
  1971  009D                     	;# 
  1972  009E                     	;# 
  1973  010C                     	;# 
  1974  010D                     	;# 
  1975  010E                     	;# 
  1976  0116                     	;# 
  1977  0117                     	;# 
  1978  011D                     	;# 
  1979  018C                     	;# 
  1980  018D                     	;# 
  1981  018E                     	;# 
  1982  0191                     	;# 
  1983  0191                     	;# 
  1984  0192                     	;# 
  1985  0193                     	;# 
  1986  0193                     	;# 
  1987  0194                     	;# 
  1988  0195                     	;# 
  1989  0196                     	;# 
  1990  0197                     	;# 
  1991  0199                     	;# 
  1992  019A                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019C                     	;# 
  1998  019C                     	;# 
  1999  019D                     	;# 
  2000  019E                     	;# 
  2001  019F                     	;# 
  2002  020D                     	;# 
  2003  0210                     	;# 
  2004  0211                     	;# 
  2005  0211                     	;# 
  2006  0212                     	;# 
  2007  0212                     	;# 
  2008  0213                     	;# 
  2009  0213                     	;# 
  2010  0214                     	;# 
  2011  0214                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0216                     	;# 
  2016  0216                     	;# 
  2017  0217                     	;# 
  2018  0217                     	;# 
  2019  0291                     	;# 
  2020  0291                     	;# 
  2021  0292                     	;# 
  2022  0293                     	;# 
  2023  0298                     	;# 
  2024  0298                     	;# 
  2025  0299                     	;# 
  2026  029A                     	;# 
  2027  0394                     	;# 
  2028  0395                     	;# 
  2029  0396                     	;# 
  2030  0FE4                     	;# 
  2031  0FE5                     	;# 
  2032  0FE6                     	;# 
  2033  0FE7                     	;# 
  2034  0FE8                     	;# 
  2035  0FE9                     	;# 
  2036  0FEA                     	;# 
  2037  0FEB                     	;# 
  2038  0FED                     	;# 
  2039  0FEE                     	;# 
  2040  0FEF                     	;# 
  2041                           
  2042                           	psect	idataBANK4
  2043  1E3F                     __pidataBANK4:	
  2044                           
  2045                           ;initializer for __product
  2046  1E3F  3463               	retlw	99
  2047  1E40  3402               	retlw	2
  2048  1E41  3400               	retlw	0
  2049  1E42  3400               	retlw	0
  2050  1E43  3400               	retlw	0
  2051  1E44  3400               	retlw	0
  2052  1E45  3400               	retlw	0
  2053  1E46  3400               	retlw	0
  2054  1E47  3400               	retlw	0
  2055  1E48  3400               	retlw	0
  2056  1E49  3400               	retlw	0
  2057  1E4A  3400               	retlw	0
  2058  1E4B  34FF               	retlw	255
  2059  1E4C  34FF               	retlw	255
  2060  1E4D  34FF               	retlw	255
  2061  1E4E  3400               	retlw	0
  2062  1E4F  3400               	retlw	0
  2063  1E50  3400               	retlw	0
  2064  1E51  3400               	retlw	0
  2065  1E52  3400               	retlw	0
  2066  1E53  3400               	retlw	0
  2067  1E54  3400               	retlw	0
  2068  1E55  3400               	retlw	0
  2069  1E56  3400               	retlw	0
  2070  1E57  3400               	retlw	0
  2071  1E58  3400               	retlw	0
  2072  1E59  3400               	retlw	0
  2073  1E5A  3400               	retlw	0
  2074  1E5B  3400               	retlw	0
  2075  1E5C  3400               	retlw	0
  2076  1E5D  3400               	retlw	0
  2077  1E5E  3400               	retlw	0
  2078                           
  2079                           	psect	stringtext
  2080  1000                     __pstringtext:	
  2081  1000                     _CC2500_registers_address:	
  2082  1000  3403               	retlw	3
  2083  1001  3416               	retlw	22
  2084  1002  3417               	retlw	23
  2085  1003  341E               	retlw	30
  2086  1004  341F               	retlw	31
  2087  1005  3420               	retlw	32
  2088  1006  342A               	retlw	42
  2089  1007  342B               	retlw	43
  2090  1008  340B               	retlw	11
  2091  1009  340C               	retlw	12
  2092  100A  340D               	retlw	13
  2093  100B  340E               	retlw	14
  2094  100C  340F               	retlw	15
  2095  100D  3410               	retlw	16
  2096  100E  3411               	retlw	17
  2097  100F  3412               	retlw	18
  2098  1010  3413               	retlw	19
  2099  1011  3414               	retlw	20
  2100  1012  340A               	retlw	10
  2101  1013  3415               	retlw	21
  2102  1014  3421               	retlw	33
  2103  1015  3422               	retlw	34
  2104  1016  3418               	retlw	24
  2105  1017  3419               	retlw	25
  2106  1018  341A               	retlw	26
  2107  1019  341B               	retlw	27
  2108  101A  341C               	retlw	28
  2109  101B  341D               	retlw	29
  2110  101C  3423               	retlw	35
  2111  101D  3424               	retlw	36
  2112  101E  3425               	retlw	37
  2113  101F  3426               	retlw	38
  2114  1020  3429               	retlw	41
  2115  1021  342C               	retlw	44
  2116  1022  342D               	retlw	45
  2117  1023  342E               	retlw	46
  2118  1024  3400               	retlw	0
  2119  1025  3401               	retlw	1
  2120  1026  3402               	retlw	2
  2121  1027  3407               	retlw	7
  2122  1028  3408               	retlw	8
  2123  1029  3409               	retlw	9
  2124  102A  3406               	retlw	6
  2125  102B  3404               	retlw	4
  2126  102C  3405               	retlw	5
  2127  102D  3427               	retlw	39
  2128  102E  3428               	retlw	40
  2129  102F                     __end_of_CC2500_registers_address:	
  2130  102F                     _CC2500_rfSettings:	
  2131  102F  3407               	retlw	7
  2132  1030  3407               	retlw	7
  2133  1031  3430               	retlw	48
  2134  1032  3487               	retlw	135
  2135  1033  346B               	retlw	107
  2136  1034  34F8               	retlw	248
  2137  1035  347F               	retlw	127
  2138  1036  343F               	retlw	63
  2139  1037  3409               	retlw	9
  2140  1038  3400               	retlw	0
  2141  1039  345C               	retlw	92
  2142  103A  34A7               	retlw	167
  2143  103B  3462               	retlw	98
  2144  103C  3486               	retlw	134
  2145  103D  3483               	retlw	131
  2146  103E  3403               	retlw	3
  2147  103F  3422               	retlw	34
  2148  1040  34F8               	retlw	248
  2149  1041  3400               	retlw	0
  2150  1042  3444               	retlw	68
  2151  1043  34B6               	retlw	182
  2152  1044  3410               	retlw	16
  2153  1045  3418               	retlw	24
  2154  1046  341D               	retlw	29
  2155  1047  341C               	retlw	28
  2156  1048  34C7               	retlw	199
  2157  1049  3400               	retlw	0
  2158  104A  34B2               	retlw	178
  2159  104B  34EA               	retlw	234
  2160  104C  340A               	retlw	10
  2161  104D  3400               	retlw	0
  2162  104E  3411               	retlw	17
  2163  104F  3459               	retlw	89
  2164  1050  3488               	retlw	136
  2165  1051  3431               	retlw	49
  2166  1052  340B               	retlw	11
  2167  1053  342F               	retlw	47
  2168  1054  342E               	retlw	46
  2169  1055  3406               	retlw	6
  2170  1056  3404               	retlw	4
  2171  1057  3405               	retlw	5
  2172  1058  3400               	retlw	0
  2173  1059  3430               	retlw	48
  2174  105A  34D3               	retlw	211
  2175  105B  3491               	retlw	145
  2176  105C  3441               	retlw	65
  2177  105D  3400               	retlw	0
  2178  105E                     __end_of_CC2500_rfSettings:	
  2179  105E                     _CC2500_patable_vaule:	
  2180  105E  34FE               	retlw	254
  2181  105F  34FE               	retlw	254
  2182  1060  34FE               	retlw	254
  2183  1061  34FE               	retlw	254
  2184  1062  34FE               	retlw	254
  2185  1063  34FE               	retlw	254
  2186  1064  34FE               	retlw	254
  2187  1065  34FE               	retlw	254
  2188  1066                     __end_of_CC2500_patable_vaule:	
  2189                           
  2190                           	psect	nvCOMMON
  2191  007B                     __pnvCOMMON:	
  2192  007B                     _product:	
  2193  007B                     	ds	1
  2194  000C                     _PORTA	set	12
  2195  000D                     _PORTB	set	13
  2196  000E                     _PORTC	set	14
  2197  0018                     _T1CON	set	24
  2198  0017                     _TMR1H	set	23
  2199  0016                     _TMR1L	set	22
  2200  005F                     _GIE	set	95
  2201  005B                     _IOCIE	set	91
  2202  0058                     _IOCIF	set	88
  2203  005E                     _PEIE	set	94
  2204  0060                     _RA0	set	96
  2205  0063                     _RA3	set	99
  2206  0064                     _RA4	set	100
  2207  0066                     _RA6	set	102
  2208  0067                     _RA7	set	103
  2209  0068                     _RB0	set	104
  2210  0069                     _RB1	set	105
  2211  006A                     _RB2	set	106
  2212  006B                     _RB3	set	107
  2213  006C                     _RB4	set	108
  2214  006D                     _RB5	set	109
  2215  0070                     _RC0	set	112
  2216  0071                     _RC1	set	113
  2217  0072                     _RC2	set	114
  2218  0074                     _RC4	set	116
  2219  0075                     _RC5	set	117
  2220  0077                     _RC7	set	119
  2221  0088                     _TMR1IF	set	136
  2222  009D                     _ADCON0	set	157
  2223  009E                     _ADCON1	set	158
  2224  009C                     _ADRESH	set	156
  2225  009B                     _ADRESL	set	155
  2226  0099                     _OSCCON	set	153
  2227  008C                     _TRISA	set	140
  2228  008D                     _TRISB	set	141
  2229  008E                     _TRISC	set	142
  2230  0097                     _WDTCON	set	151
  2231  04E9                     _GO_nDONE	set	1257
  2232  0488                     _TMR1IE	set	1160
  2233  0117                     _FVRCON	set	279
  2234  010C                     _LATA	set	268
  2235  010D                     _LATB	set	269
  2236  010E                     _LATC	set	270
  2237  018C                     _ANSELA	set	396
  2238  018D                     _ANSELB	set	397
  2239  018E                     _ANSELC	set	398
  2240  0192                     _PMADRH	set	402
  2241  0191                     _PMADRL	set	401
  2242  0196                     _PMCON2	set	406
  2243  0194                     _PMDATH	set	404
  2244  0193                     _PMDATL	set	403
  2245  0CAE                     _CFGS	set	3246
  2246  0CAC                     _FREE	set	3244
  2247  0CAD                     _LWLO	set	3245
  2248  0CA8                     _RD	set	3240
  2249  0CA9                     _WR	set	3241
  2250  0CAA                     _WREN	set	3242
  2251  1069                     _WPUB1	set	4201
  2252  106A                     _WPUB2	set	4202
  2253  0396                     _IOCBF	set	918
  2254  0395                     _IOCBN	set	917
  2255  0394                     _IOCBP	set	916
  2256  1CB2                     _IOCBF2	set	7346
  2257                           
  2258                           ; #config settings
  2259  0000                     
  2260                           	psect	cinit
  2261  0015                     start_initialization:	
  2262  0015                     __initialization:	
  2263                           
  2264                           ; Clear objects allocated to BITCOMMON
  2265  0015  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2266                           
  2267                           ; Clear objects allocated to COMMON
  2268  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2269  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2270  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2271  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2272                           
  2273                           ; Clear objects allocated to BANK1
  2274  001A  30A0               	movlw	low __pbssBANK1
  2275  001B  0084               	movwf	4
  2276  001C  3000               	movlw	high __pbssBANK1
  2277  001D  0085               	movwf	5
  2278  001E  304A               	movlw	74
  2279  001F  319A  227F  3180   	fcall	clear_ram0
  2280                           
  2281                           ; Clear objects allocated to BANK2
  2282  0022  3020               	movlw	low __pbssBANK2
  2283  0023  0084               	movwf	4
  2284  0024  3001               	movlw	high __pbssBANK2
  2285  0025  0085               	movwf	5
  2286  0026  304D               	movlw	77
  2287  0027  319A  227F  3180   	fcall	clear_ram0
  2288                           
  2289                           ; Clear objects allocated to BANK3
  2290  002A  30A0               	movlw	low __pbssBANK3
  2291  002B  0084               	movwf	4
  2292  002C  3001               	movlw	high __pbssBANK3
  2293  002D  0085               	movwf	5
  2294  002E  3045               	movlw	69
  2295  002F  319A  227F  3180   	fcall	clear_ram0
  2296                           
  2297                           ; Clear objects allocated to BANK4
  2298  0032  3020               	movlw	low __pbssBANK4
  2299  0033  0084               	movwf	4
  2300  0034  3002               	movlw	high __pbssBANK4
  2301  0035  0085               	movwf	5
  2302  0036  3025               	movlw	37
  2303  0037  319A  227F  3180   	fcall	clear_ram0
  2304                           
  2305                           ; Initialize objects allocated to BANK4
  2306  003A  303F               	movlw	low __pidataBANK4
  2307  003B  0084               	movwf	4
  2308  003C  309E               	movlw	(high __pidataBANK4)| (0+128)
  2309  003D  0085               	movwf	5
  2310  003E  3045               	movlw	low __pdataBANK4
  2311  003F  0086               	movwf	6
  2312  0040  3002               	movlw	high __pdataBANK4
  2313  0041  0087               	movwf	7
  2314  0042  3020               	movlw	32
  2315  0043  319A  2279         	fcall	init_ram
  2316  0045                     end_of_initialization:	
  2317                           ;End of C runtime variable initialization code
  2318                           
  2319  0045                     __end_of__initialization:	
  2320  0045  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2321  0046  0020               	movlb	0
  2322  0047  3195  2DDA         	ljmp	_main	;jump to C main() function
  2323                           
  2324                           	psect	bitbssCOMMON
  2325  03D0                     __pbitbssCOMMON:	
  2326  03D0                     _Receive_OK:	
  2327  03D0                     	ds	1
  2328  03D1                     _Transceive_OK:	
  2329  03D1                     	ds	1
  2330                           
  2331                           	psect	bssCOMMON
  2332  0076                     __pbssCOMMON:	
  2333  0076                     _DelayOff:	
  2334  0076                     	ds	1
  2335  0077                     _DimmerLights:	
  2336  0077                     	ds	1
  2337  0078                     _DimmerLightsIntr:	
  2338  0078                     	ds	1
  2339  0079                     _Sw:	
  2340  0079                     	ds	1
  2341                           
  2342                           	psect	bssBANK1
  2343  00A0                     __pbssBANK1:	
  2344  00A0                     _myMain:	
  2345  00A0                     	ds	16
  2346  00B0                     _Buz1:	
  2347  00B0                     	ds	12
  2348  00BC                     _RF1:	
  2349  00BC                     	ds	12
  2350  00C8                     _Dimmer:	
  2351  00C8                     	ds	3
  2352  00CB                     _CRC:	
  2353  00CB                     	ds	1
  2354  00CC                     _DimmerLights11:	
  2355  00CC                     	ds	1
  2356  00CD                     _DimmerLights22:	
  2357  00CD                     	ds	1
  2358  00CE                     _DimmerLightsIntrIOC:	
  2359  00CE                     	ds	1
  2360  00CF                     _LED:	
  2361  00CF                     	ds	1
  2362  00D0                     _RSSI:	
  2363  00D0                     	ds	1
  2364  00D1                     _Rx_Length:	
  2365  00D1                     	ds	1
  2366  00D2                     _SPI0Buffer:	
  2367  00D2                     	ds	1
  2368  00D3                     _SwDetect:	
  2369  00D3                     	ds	1
  2370  00D4                     _Tx_Length:	
  2371  00D4                     	ds	1
  2372  00D5                     _r_address:	
  2373  00D5                     	ds	1
  2374  00D6                     _r_data:	
  2375  00D6                     	ds	1
  2376  00D7                     _s_data:	
  2377  00D7                     	ds	1
  2378  00D8                     _Temp:	
  2379  00D8                     	ds	18
  2380                           
  2381                           	psect	bssBANK2
  2382  0120                     __pbssBANK2:	
  2383  0120                     _Timer1:	
  2384  0120                     	ds	3
  2385  0123                     _RF_Count:	
  2386  0123                     	ds	2
  2387  0125                     _WDT:	
  2388  0125                     	ds	2
  2389  0127                     _Load:	
  2390  0127                     	ds	45
  2391  0154                     _Sw1:	
  2392  0154                     	ds	9
  2393  015D                     _VarErrLED:	
  2394  015D                     	ds	4
  2395  0161                     _VarLED1:	
  2396  0161                     	ds	4
  2397  0165                     _VarLED2:	
  2398  0165                     	ds	4
  2399  0169                     _DlySw1:	
  2400  0169                     	ds	2
  2401  016B                     _DlySw2:	
  2402  016B                     	ds	2
  2403                           
  2404                           	psect	bssBANK3
  2405  01A0                     __pbssBANK3:	
  2406  01A0                     _RF_Data:	
  2407  01A0                     	ds	30
  2408  01BE                     _DimmerLights1:	
  2409  01BE                     	ds	15
  2410  01CD                     _DimmerLights2:	
  2411  01CD                     	ds	15
  2412  01DC                     _Sw2:	
  2413  01DC                     	ds	9
  2414                           
  2415                           	psect	bssBANK4
  2416  0220                     __pbssBANK4:	
  2417  0220                     _Memory:	
  2418  0220                     	ds	37
  2419                           
  2420                           	psect	dataBANK4
  2421  0245                     __pdataBANK4:	
  2422  0245                     __product:	
  2423  0245                     	ds	32
  2424                           
  2425                           	psect	clrtext
  2426  1A7F                     clear_ram0:	
  2427                           ;	Called with FSR0 containing the base address, and
  2428                           ;	WREG with the size to clear
  2429                           
  2430  1A7F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2431  1A80                     clrloop0:	
  2432  1A80  0180               	clrf	0	;clear RAM location pointed to by FSR
  2433  1A81  3101               	addfsr 0,1
  2434  1A82  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2435  1A83  2A80               	goto	clrloop0	;have we reached the end yet?
  2436  1A84  3400               	retlw	0	;all done for this memory range, return
  2437                           
  2438                           	psect	inittext
  2439  1A79                     init_ram:	
  2440  1A79  00FE               	movwf	126
  2441  1A7A                     initloop:	
  2442  1A7A  0012               	moviw fsr0++
  2443  1A7B  001E               	movwi fsr1++
  2444  1A7C  0BFE               	decfsz	126,f
  2445  1A7D  2A7A               	goto	initloop
  2446  1A7E  3400               	retlw	0
  2447                           
  2448                           	psect	cstackBANK3
  2449  01E5                     __pcstackBANK3:	
  2450  01E5                     ?_main:	
  2451  01E5                     main@argc:	
  2452                           ; 2 bytes @ 0x0
  2453                           
  2454                           
  2455                           ; 2 bytes @ 0x0
  2456  01E5                     	ds	2
  2457  01E7                     main@argv:	
  2458                           
  2459                           ; 2 bytes @ 0x2
  2460  01E7                     	ds	2
  2461                           
  2462                           	psect	cstackBANK1
  2463  00EA                     __pcstackBANK1:	
  2464  00EA                     setMain_Exception@buz:	
  2465                           
  2466                           ; 1 bytes @ 0x0
  2467  00EA                     	ds	1
  2468  00EB                     _setMain_Exception$3936:	
  2469                           
  2470                           ; 2 bytes @ 0x1
  2471  00EB                     	ds	2
  2472  00ED                     setMain_Exception@status:	
  2473                           
  2474                           ; 1 bytes @ 0x3
  2475  00ED                     	ds	1
  2476  00EE                     setMain_Exception@command:	
  2477                           
  2478                           ; 1 bytes @ 0x4
  2479  00EE                     	ds	1
  2480                           
  2481                           	psect	cstackCOMMON
  2482  0070                     __pcstackCOMMON:	
  2483  0070                     ?_Timeout_Counter:	
  2484  0070                     ?_set_TimeoutCleared:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_CC2500_WriteByte:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_CC2500_WriteCommand:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_CC2500_ReadStatus:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_CC2500_ReadByte:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_CC2500_PowerRST:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_CC2500_InitSetREG:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_CC2500_InitPATable:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_CC2500_ClearTXFIFO:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_CC2500_ClearRXFIFO:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_CC2500_FrequencyCabr:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_CC2500_SIDLEMode:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_DlyOff_Initialization:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_DlyOff_Main:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_setDimmerLights_SwOn:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_setDimmerLights_SwOff:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_setDimmerLights_Initialization:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_Dimmer_Initialization:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_setDimmerLights_Main:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_setTxData:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_setDimmerLights_Line:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_setLED_Initialization:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_setLED_Main:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_Fosc_Set:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_IO_Set:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_TMR1_Set:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_ADC_Set:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_IOC_Set:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_WDT_Set:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_IOC_ISR:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_TMR1_ISR:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_Flash_Memory_Write:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_Flash_Memory_Modify:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_WDT_Clearing:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_myMain_Initialization:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_Temp_Initialization:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_Load_Initialization:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_Switch_Initialization:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_RF_Initialization:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_getLoad_AD:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_getTemp_AD:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_my_MainTimer:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_Temp_Main:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_Load_Main:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_Switch_Main:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_RF_Main:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_setLoad_AH_AL_Restore:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_setTemp_Initialization:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_setTemp_Main:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setRF_Initialization:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setRF_Main:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_getRxData:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setLog_Code:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setControl_Lights_Table:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setRFSW_Control:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setRFSW_AdjControl:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setRF_DimmerValue:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setSw_Initialization:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setSw_Main:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_Buzzer_Initialization:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_Buzzer_Main:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_CC2500_TxData:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_CC2500_RxData:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_CC2500_PowerOnInitial:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_DelayOffPointSelect:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_DelayOff_Initialization:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_DelayOff_Main:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_DimmerIntrIOCPointSelect:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ??_DimmerIntrIOCPointSelect:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_DimmerIntrPointSelect:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ??_DimmerIntrPointSelect:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_setDimmerLights_IntrControl:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_DimmerLightsPointSelect:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_DimmerLights_Initialization:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_DimmerLights_Main:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_setDimmerLights_AdjControl:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_setDimmerLights_ErrorClose:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_setDimmerLights_AdjRF:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_LedPointSelect:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_LED_Initialization:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_LED_Main:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Mcu_Initialization:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_ISR:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_setDimmerReClock:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Flash_Memory_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Flash_Memory_Main:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_Flash_Memory_Unlock:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_Flash_Memory_Erasing:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_setMemory_Modify:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setMemory_LoopSave:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_WDT_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_setMain_Exception:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_setRF_Learn:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_TouchPower:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_SwPointSelect:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_getDimmerLights_Status:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_DelayTimejudge:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778  0070                     ?_getMain_All_Error_Status:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0070                     ?_getLoad_OK:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?_getMain_LightsStatus:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787  0070                     ?_getPercentValue:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0070                     ?_Flash_Memory_Read:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793  0070                     ?_getRF_KeyStatus:	
  2794                           ; 1 bytes @ 0x0
  2795                           
  2796  0070                     ?_getSw_KeyStatus:	
  2797                           ; 1 bytes @ 0x0
  2798                           
  2799  0070                     ?_getAll_DimmerLights_AdjGO:	
  2800                           ; 1 bytes @ 0x0
  2801                           
  2802  0070                     ?_getDimmer_LoadOK:	
  2803                           ; 1 bytes @ 0x0
  2804                           
  2805  0070                     ?_getDimmerLights_Line:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808  0070                     ?_setPercentValue:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ?_getMain_Lights_Count:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ?_getMain_LoadOK:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817                           
  2818                           ; 1 bytes @ 0x0
  2819  0070                     	ds	1
  2820  0071                     DimmerIntrIOCPointSelect@lights:	
  2821  0071                     DimmerIntrPointSelect@lights:	
  2822                           ; 1 bytes @ 0x1
  2823                           
  2824                           
  2825                           ; 1 bytes @ 0x1
  2826  0071                     	ds	1
  2827  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2828  0072                     ??_setDimmerLights_IntrControl:	
  2829                           ; 0 bytes @ 0x2
  2830                           
  2831  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2832                           ; 0 bytes @ 0x2
  2833                           
  2834                           
  2835                           ; 1 bytes @ 0x2
  2836  0072                     	ds	1
  2837  0073                     ??_IOC_ISR:	
  2838  0073                     ??_setDimmerReClock:	
  2839                           ; 0 bytes @ 0x3
  2840                           
  2841                           
  2842                           ; 0 bytes @ 0x3
  2843  0073                     	ds	1
  2844  0074                     setDimmerLights_IntrControl@lights:	
  2845                           
  2846                           ; 1 bytes @ 0x4
  2847  0074                     	ds	1
  2848  0075                     ??_TMR1_ISR:	
  2849  0075                     ??_ISR:	
  2850                           ; 0 bytes @ 0x5
  2851                           
  2852                           
  2853                           ; 0 bytes @ 0x5
  2854  0075                     	ds	1
  2855                           
  2856                           	psect	cstackBANK0
  2857  0020                     __pcstackBANK0:	
  2858  0020                     ??_Timeout_Counter:	
  2859  0020                     ??_set_TimeoutCleared:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_CC2500_WriteByte:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_CC2500_ReadByte:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ?_DelayTime_1us:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_Dimmer_Initialization:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_getMain_All_Error_Status:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_getLoad_OK:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_setTxData:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_setDimmerLights_Line:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_Fosc_Set:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_IO_Set:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_TMR1_Set:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_ADC_Set:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_IOC_Set:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_WDT_Set:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_Flash_Memory_Read:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ?_setMemory_Data:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ??_Flash_Memory_Write:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_WDT_Clearing:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_myMain_Initialization:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ??_Temp_Initialization:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ??_setLoad_AH_AL_Restore:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_setTemp_Initialization:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ??_setRF_Initialization:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ??_getRF_KeyStatus:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0020                     ??_Buzzer_Initialization:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0020                     ??_Buzzer_Main:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0020                     ??_DelayOffPointSelect:	
  2941                           ; 0 bytes @ 0x0
  2942                           
  2943  0020                     ??_DimmerLightsPointSelect:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0020                     ??_getSw_KeyStatus:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0020                     ??_getAll_DimmerLights_AdjGO:	
  2950                           ; 0 bytes @ 0x0
  2951                           
  2952  0020                     ??_getDimmer_LoadOK:	
  2953                           ; 0 bytes @ 0x0
  2954                           
  2955  0020                     ??_getDimmerLights_Line:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0020                     ??_LedPointSelect:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0020                     ??_Flash_Memory_Unlock:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0020                     ??_Flash_Memory_Erasing:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0020                     ??_setMemory_Modify:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_setMemory_LoopSave:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_WDT_Main:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_getMain_Lights_Count:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_setRF_Learn:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_TouchPower:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_SwPointSelect:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ?___bmul:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ?_getBuz_GO:	
  2992                           ; 1 bytes @ 0x0
  2993                           
  2994  0020                     ?_getAD:	
  2995                           ; 2 bytes @ 0x0
  2996                           
  2997  0020                     ?___awdiv:	
  2998                           ; 2 bytes @ 0x0
  2999                           
  3000  0020                     ?___ftpack:	
  3001                           ; 2 bytes @ 0x0
  3002                           
  3003  0020                     getDimmer_LoadOK@status:	
  3004                           ; 3 bytes @ 0x0
  3005                           
  3006  0020                     setDimmerLights_Line@lights:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009  0020                     getAD@adcon1:	
  3010                           ; 1 bytes @ 0x0
  3011                           
  3012  0020                     setMemory_Data@data:	
  3013                           ; 1 bytes @ 0x0
  3014                           
  3015  0020                     getMain_Lights_Count@count:	
  3016                           ; 1 bytes @ 0x0
  3017                           
  3018  0020                     getLoad_OK@ok:	
  3019                           ; 1 bytes @ 0x0
  3020                           
  3021  0020                     ___bmul@multiplicand:	
  3022                           ; 1 bytes @ 0x0
  3023                           
  3024  0020                     DelayTime_1us@count:	
  3025                           ; 1 bytes @ 0x0
  3026                           
  3027  0020                     ___awdiv@divisor:	
  3028                           ; 2 bytes @ 0x0
  3029                           
  3030  0020                     ___ftpack@arg:	
  3031                           ; 2 bytes @ 0x0
  3032                           
  3033                           
  3034                           ; 3 bytes @ 0x0
  3035  0020                     	ds	1
  3036  0021                     ??_setMemory_Data:	
  3037  0021                     ??_RF_Initialization:	
  3038                           ; 0 bytes @ 0x1
  3039                           
  3040  0021                     ??_Mcu_Initialization:	
  3041                           ; 0 bytes @ 0x1
  3042                           
  3043  0021                     ??_getMain_LoadOK:	
  3044                           ; 0 bytes @ 0x1
  3045                           
  3046  0021                     ??___bmul:	
  3047                           ; 0 bytes @ 0x1
  3048                           
  3049  0021                     CC2500_WriteByte@loop_a:	
  3050                           ; 0 bytes @ 0x1
  3051                           
  3052  0021                     CC2500_ReadByte@loop_b:	
  3053                           ; 1 bytes @ 0x1
  3054                           
  3055  0021                     DelayOffPointSelect@sw:	
  3056                           ; 1 bytes @ 0x1
  3057                           
  3058  0021                     DimmerLightsPointSelect@lights:	
  3059                           ; 1 bytes @ 0x1
  3060                           
  3061  0021                     _getSw_KeyStatus$2565:	
  3062                           ; 1 bytes @ 0x1
  3063                           
  3064  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3065                           ; 1 bytes @ 0x1
  3066                           
  3067  0021                     getDimmerLights_Line@line:	
  3068                           ; 1 bytes @ 0x1
  3069                           
  3070  0021                     LedPointSelect@led:	
  3071                           ; 1 bytes @ 0x1
  3072                           
  3073  0021                     Flash_Memory_Read@i:	
  3074                           ; 1 bytes @ 0x1
  3075                           
  3076  0021                     Flash_Memory_Write@i:	
  3077                           ; 1 bytes @ 0x1
  3078                           
  3079  0021                     setMemory_Modify@command:	
  3080                           ; 1 bytes @ 0x1
  3081                           
  3082  0021                     setMemory_LoopSave@command:	
  3083                           ; 1 bytes @ 0x1
  3084                           
  3085  0021                     getMain_Lights_Count@status3:	
  3086                           ; 1 bytes @ 0x1
  3087                           
  3088  0021                     setLoad_AH_AL_Restore@i:	
  3089                           ; 1 bytes @ 0x1
  3090                           
  3091  0021                     setRF_Learn@command:	
  3092                           ; 1 bytes @ 0x1
  3093                           
  3094  0021                     getRF_KeyStatus@key:	
  3095                           ; 1 bytes @ 0x1
  3096                           
  3097  0021                     SwPointSelect@sw:	
  3098                           ; 1 bytes @ 0x1
  3099                           
  3100  0021                     _getMain_All_Error_Status$3953:	
  3101                           ; 1 bytes @ 0x1
  3102                           
  3103                           
  3104                           ; 2 bytes @ 0x1
  3105  0021                     	ds	1
  3106  0022                     ??_CC2500_WriteCommand:	
  3107  0022                     ??_CC2500_ReadStatus:	
  3108                           ; 0 bytes @ 0x2
  3109                           
  3110  0022                     ??_DelayTime_1us:	
  3111                           ; 0 bytes @ 0x2
  3112                           
  3113  0022                     ?_CC2500_WriteREG:	
  3114                           ; 0 bytes @ 0x2
  3115                           
  3116  0022                     ??_DlyOff_Initialization:	
  3117                           ; 0 bytes @ 0x2
  3118                           
  3119  0022                     ??_getDimmerLights_Status:	
  3120                           ; 0 bytes @ 0x2
  3121                           
  3122  0022                     ??_setDimmerLights_Initialization:	
  3123                           ; 0 bytes @ 0x2
  3124                           
  3125  0022                     ?_setDimmerLights_Trigger:	
  3126                           ; 0 bytes @ 0x2
  3127                           
  3128  0022                     ?_setDimmerLights_TriggerAdj:	
  3129                           ; 0 bytes @ 0x2
  3130                           
  3131  0022                     ?_setLED:	
  3132                           ; 0 bytes @ 0x2
  3133                           
  3134  0022                     ??_setLED_Main:	
  3135                           ; 0 bytes @ 0x2
  3136                           
  3137  0022                     ??_Load_Initialization:	
  3138                           ; 0 bytes @ 0x2
  3139                           
  3140  0022                     ??_getBuz_GO:	
  3141                           ; 0 bytes @ 0x2
  3142                           
  3143  0022                     CC2500_WriteREG@value:	
  3144                           ; 0 bytes @ 0x2
  3145                           
  3146  0022                     DlyOff_Initialization@sw:	
  3147                           ; 1 bytes @ 0x2
  3148                           
  3149  0022                     getDimmerLights_Status@lights:	
  3150                           ; 1 bytes @ 0x2
  3151                           
  3152  0022                     _getSw_KeyStatus$2566:	
  3153                           ; 1 bytes @ 0x2
  3154                           
  3155  0022                     _getAll_DimmerLights_AdjGO$2569:	
  3156                           ; 1 bytes @ 0x2
  3157                           
  3158  0022                     setDimmerLights_Trigger@command:	
  3159                           ; 1 bytes @ 0x2
  3160                           
  3161  0022                     setDimmerLights_TriggerAdj@command:	
  3162                           ; 1 bytes @ 0x2
  3163                           
  3164  0022                     setLED@command:	
  3165                           ; 1 bytes @ 0x2
  3166                           
  3167  0022                     Flash_Memory_Read@address:	
  3168                           ; 1 bytes @ 0x2
  3169                           
  3170  0022                     setMemory_Data@address:	
  3171                           ; 1 bytes @ 0x2
  3172                           
  3173  0022                     getMain_Lights_Count@status1:	
  3174                           ; 1 bytes @ 0x2
  3175                           
  3176  0022                     getMain_LoadOK@ok:	
  3177                           ; 1 bytes @ 0x2
  3178                           
  3179  0022                     _getRF_KeyStatus$5718:	
  3180                           ; 1 bytes @ 0x2
  3181                           
  3182  0022                     ___bmul@product:	
  3183                           ; 1 bytes @ 0x2
  3184                           
  3185  0022                     DelayTime_1us@i:	
  3186                           ; 1 bytes @ 0x2
  3187                           
  3188  0022                     ___awdiv@dividend:	
  3189                           ; 2 bytes @ 0x2
  3190                           
  3191                           
  3192                           ; 2 bytes @ 0x2
  3193  0022                     	ds	1
  3194  0023                     ??_CC2500_WriteREG:	
  3195  0023                     ??_setDimmerLights_Trigger:	
  3196                           ; 0 bytes @ 0x3
  3197                           
  3198  0023                     ??_setDimmerLights_TriggerAdj:	
  3199                           ; 0 bytes @ 0x3
  3200                           
  3201  0023                     ??_setLED:	
  3202                           ; 0 bytes @ 0x3
  3203                           
  3204  0023                     ??_DelayOff_Initialization:	
  3205                           ; 0 bytes @ 0x3
  3206                           
  3207  0023                     ??_getAD:	
  3208                           ; 0 bytes @ 0x3
  3209                           
  3210  0023                     CC2500_WriteCommand@command:	
  3211                           ; 0 bytes @ 0x3
  3212                           
  3213  0023                     CC2500_ReadStatus@status_addr:	
  3214                           ; 1 bytes @ 0x3
  3215                           
  3216  0023                     setDimmerLights_Initialization@lights:	
  3217                           ; 1 bytes @ 0x3
  3218                           
  3219  0023                     getDimmerLights_Status@status:	
  3220                           ; 1 bytes @ 0x3
  3221                           
  3222  0023                     getSw_KeyStatus@status:	
  3223                           ; 1 bytes @ 0x3
  3224                           
  3225  0023                     setLED@led:	
  3226                           ; 1 bytes @ 0x3
  3227                           
  3228  0023                     getAD@adcon0:	
  3229                           ; 1 bytes @ 0x3
  3230                           
  3231  0023                     Flash_Memory_Read@ret:	
  3232                           ; 1 bytes @ 0x3
  3233                           
  3234  0023                     getMain_Lights_Count@status2:	
  3235                           ; 1 bytes @ 0x3
  3236                           
  3237  0023                     ___bmul@multiplier:	
  3238                           ; 1 bytes @ 0x3
  3239                           
  3240  0023                     ___ftpack@exp:	
  3241                           ; 1 bytes @ 0x3
  3242                           
  3243  0023                     _getMain_All_Error_Status$3962:	
  3244                           ; 1 bytes @ 0x3
  3245                           
  3246                           
  3247                           ; 2 bytes @ 0x3
  3248  0023                     	ds	1
  3249  0024                     ??_CC2500_ClearTXFIFO:	
  3250  0024                     ??_CC2500_ClearRXFIFO:	
  3251                           ; 0 bytes @ 0x4
  3252                           
  3253  0024                     ??_CC2500_SIDLEMode:	
  3254                           ; 0 bytes @ 0x4
  3255                           
  3256  0024                     ??_DelayTimejudge:	
  3257                           ; 0 bytes @ 0x4
  3258                           
  3259  0024                     ??_getMain_LightsStatus:	
  3260                           ; 0 bytes @ 0x4
  3261                           
  3262  0024                     ??_setLED_Initialization:	
  3263                           ; 0 bytes @ 0x4
  3264                           
  3265  0024                     ??_Flash_Memory_Modify:	
  3266                           ; 0 bytes @ 0x4
  3267                           
  3268  0024                     ??_getLoad_AD:	
  3269                           ; 0 bytes @ 0x4
  3270                           
  3271  0024                     ??_getTemp_AD:	
  3272                           ; 0 bytes @ 0x4
  3273                           
  3274  0024                     ??_setSw_Initialization:	
  3275                           ; 0 bytes @ 0x4
  3276                           
  3277  0024                     ??_CC2500_TxData:	
  3278                           ; 0 bytes @ 0x4
  3279                           
  3280  0024                     ??_CC2500_RxData:	
  3281                           ; 0 bytes @ 0x4
  3282                           
  3283  0024                     ??_DimmerLights_Initialization:	
  3284                           ; 0 bytes @ 0x4
  3285                           
  3286  0024                     ??___awdiv:	
  3287                           ; 0 bytes @ 0x4
  3288                           
  3289  0024                     CC2500_WriteREG@w_addr:	
  3290                           ; 0 bytes @ 0x4
  3291                           
  3292  0024                     getSw_KeyStatus@sw:	
  3293                           ; 1 bytes @ 0x4
  3294                           
  3295  0024                     setDimmerLights_Trigger@lights:	
  3296                           ; 1 bytes @ 0x4
  3297                           
  3298  0024                     setDimmerLights_TriggerAdj@lights:	
  3299                           ; 1 bytes @ 0x4
  3300                           
  3301  0024                     setLED_Initialization@led:	
  3302                           ; 1 bytes @ 0x4
  3303                           
  3304  0024                     setLED_Main@led:	
  3305                           ; 1 bytes @ 0x4
  3306                           
  3307  0024                     setSw_Initialization@sw:	
  3308                           ; 1 bytes @ 0x4
  3309                           
  3310  0024                     ___ftpack@sign:	
  3311                           ; 1 bytes @ 0x4
  3312                           
  3313  0024                     getBuz_GO@i:	
  3314                           ; 1 bytes @ 0x4
  3315                           
  3316  0024                     DelayTime_1us@j:	
  3317                           ; 2 bytes @ 0x4
  3318                           
  3319                           
  3320                           ; 2 bytes @ 0x4
  3321  0024                     	ds	1
  3322  0025                     ??_CC2500_InitSetREG:	
  3323  0025                     ??_CC2500_InitPATable:	
  3324                           ; 0 bytes @ 0x5
  3325                           
  3326  0025                     ??_Switch_Initialization:	
  3327                           ; 0 bytes @ 0x5
  3328                           
  3329  0025                     ??___ftpack:	
  3330                           ; 0 bytes @ 0x5
  3331                           
  3332  0025                     ??_setDimmerLights_AdjControl:	
  3333                           ; 0 bytes @ 0x5
  3334                           
  3335  0025                     ??_LED_Initialization:	
  3336                           ; 0 bytes @ 0x5
  3337                           
  3338  0025                     ??_LED_Main:	
  3339                           ; 0 bytes @ 0x5
  3340                           
  3341  0025                     CC2500_TxData@loop_e:	
  3342                           ; 0 bytes @ 0x5
  3343                           
  3344  0025                     CC2500_RxData@loop_f:	
  3345                           ; 1 bytes @ 0x5
  3346                           
  3347  0025                     Flash_Memory_Modify@i:	
  3348                           ; 1 bytes @ 0x5
  3349                           
  3350  0025                     getMain_LightsStatus@count:	
  3351                           ; 1 bytes @ 0x5
  3352                           
  3353  0025                     getMain_All_Error_Status@command:	
  3354                           ; 1 bytes @ 0x5
  3355                           
  3356  0025                     getTemp_AD@channel:	
  3357                           ; 1 bytes @ 0x5
  3358                           
  3359  0025                     ___awdiv@counter:	
  3360                           ; 1 bytes @ 0x5
  3361                           
  3362                           
  3363                           ; 1 bytes @ 0x5
  3364  0025                     	ds	1
  3365  0026                     ??_CC2500_PowerRST:	
  3366  0026                     ??_CC2500_FrequencyCabr:	
  3367                           ; 0 bytes @ 0x6
  3368                           
  3369  0026                     CC2500_InitSetREG@temp1:	
  3370                           ; 0 bytes @ 0x6
  3371                           
  3372  0026                     CC2500_InitPATable@temp:	
  3373                           ; 1 bytes @ 0x6
  3374                           
  3375  0026                     DelayTimejudge@i:	
  3376                           ; 1 bytes @ 0x6
  3377                           
  3378  0026                     setDimmerLights_AdjControl@idle:	
  3379                           ; 1 bytes @ 0x6
  3380                           
  3381  0026                     getMain_All_Error_Status@status:	
  3382                           ; 1 bytes @ 0x6
  3383                           
  3384  0026                     getLoad_AD@channel:	
  3385                           ; 1 bytes @ 0x6
  3386                           
  3387  0026                     ___awdiv@sign:	
  3388                           ; 1 bytes @ 0x6
  3389                           
  3390  0026                     getMain_LightsStatus@i:	
  3391                           ; 1 bytes @ 0x6
  3392                           
  3393                           
  3394                           ; 2 bytes @ 0x6
  3395  0026                     	ds	1
  3396  0027                     ?_setDimmerLights:	
  3397  0027                     ??_setTemp_Main:	
  3398                           ; 0 bytes @ 0x7
  3399                           
  3400  0027                     CC2500_InitSetREG@temp2:	
  3401                           ; 0 bytes @ 0x7
  3402                           
  3403  0027                     CC2500_InitPATable@loop_d:	
  3404                           ; 1 bytes @ 0x7
  3405                           
  3406  0027                     DelayTimejudge@j:	
  3407                           ; 1 bytes @ 0x7
  3408                           
  3409  0027                     _setDimmerLights_AdjControl$2589:	
  3410                           ; 1 bytes @ 0x7
  3411                           
  3412  0027                     setDimmerLights@status:	
  3413                           ; 1 bytes @ 0x7
  3414                           
  3415  0027                     getLoad_AD@k:	
  3416                           ; 1 bytes @ 0x7
  3417                           
  3418  0027                     ___awdiv@quotient:	
  3419                           ; 1 bytes @ 0x7
  3420                           
  3421                           
  3422                           ; 2 bytes @ 0x7
  3423  0027                     	ds	1
  3424  0028                     ??_setDimmerLights:	
  3425  0028                     ?___awtoft:	
  3426                           ; 0 bytes @ 0x8
  3427                           
  3428  0028                     CC2500_InitSetREG@loop_c:	
  3429                           ; 3 bytes @ 0x8
  3430                           
  3431  0028                     DelayTimejudge@k:	
  3432                           ; 1 bytes @ 0x8
  3433                           
  3434  0028                     setDimmerLights_AdjControl@sw:	
  3435                           ; 1 bytes @ 0x8
  3436                           
  3437  0028                     getMain_LightsStatus@status:	
  3438                           ; 1 bytes @ 0x8
  3439                           
  3440  0028                     getLoad_AD@j:	
  3441                           ; 1 bytes @ 0x8
  3442                           
  3443  0028                     ___awtoft@c:	
  3444                           ; 1 bytes @ 0x8
  3445                           
  3446                           
  3447                           ; 2 bytes @ 0x8
  3448  0028                     	ds	1
  3449  0029                     ??_Temp_Main:	
  3450  0029                     ??_Load_Main:	
  3451                           ; 0 bytes @ 0x9
  3452                           
  3453  0029                     ?_setBuz:	
  3454                           ; 0 bytes @ 0x9
  3455                           
  3456  0029                     ??_CC2500_PowerOnInitial:	
  3457                           ; 0 bytes @ 0x9
  3458                           
  3459  0029                     ??_Flash_Memory_Main:	
  3460                           ; 0 bytes @ 0x9
  3461                           
  3462  0029                     DelayTimejudge@value:	
  3463                           ; 0 bytes @ 0x9
  3464                           
  3465  0029                     setDimmerLights@lights:	
  3466                           ; 1 bytes @ 0x9
  3467                           
  3468  0029                     getLoad_AD@i:	
  3469                           ; 1 bytes @ 0x9
  3470                           
  3471  0029                     setBuz@time:	
  3472                           ; 1 bytes @ 0x9
  3473                           
  3474                           
  3475                           ; 2 bytes @ 0x9
  3476  0029                     	ds	1
  3477  002A                     ?_setDelayOff_GO:	
  3478  002A                     setDelayOff_GO@command:	
  3479                           ; 0 bytes @ 0xA
  3480                           
  3481                           
  3482                           ; 1 bytes @ 0xA
  3483  002A                     	ds	1
  3484  002B                     ??_setBuz:	
  3485  002B                     ??___awtoft:	
  3486                           ; 0 bytes @ 0xB
  3487                           
  3488  002B                     setDelayOff_GO@value:	
  3489                           ; 0 bytes @ 0xB
  3490                           
  3491  002B                     Load_Main@j:	
  3492                           ; 1 bytes @ 0xB
  3493                           
  3494                           
  3495                           ; 1 bytes @ 0xB
  3496  002B                     	ds	1
  3497  002C                     ??_setDelayOff_GO:	
  3498  002C                     setBuz@count:	
  3499                           ; 0 bytes @ 0xC
  3500                           
  3501  002C                     _Load_Main$4317:	
  3502                           ; 1 bytes @ 0xC
  3503                           
  3504                           
  3505                           ; 1 bytes @ 0xC
  3506  002C                     	ds	1
  3507  002D                     ??_my_MainTimer:	
  3508  002D                     ??_setLog_Code:	
  3509                           ; 0 bytes @ 0xD
  3510                           
  3511  002D                     Load_Main@error:	
  3512                           ; 0 bytes @ 0xD
  3513                           
  3514  002D                     ___awtoft@sign:	
  3515                           ; 1 bytes @ 0xD
  3516                           
  3517                           
  3518                           ; 1 bytes @ 0xD
  3519  002D                     	ds	1
  3520  002E                     ?___ftdiv:	
  3521  002E                     ?___ftmul:	
  3522                           ; 3 bytes @ 0xE
  3523                           
  3524  002E                     setDelayOff_GO@sw:	
  3525                           ; 3 bytes @ 0xE
  3526                           
  3527  002E                     Load_Main@adjgo:	
  3528                           ; 1 bytes @ 0xE
  3529                           
  3530  002E                     ___ftdiv@f2:	
  3531                           ; 1 bytes @ 0xE
  3532                           
  3533  002E                     ___ftmul@f1:	
  3534                           ; 3 bytes @ 0xE
  3535                           
  3536                           
  3537                           ; 3 bytes @ 0xE
  3538  002E                     	ds	1
  3539  002F                     Load_Main@i:	
  3540                           
  3541                           ; 1 bytes @ 0xF
  3542  002F                     	ds	2
  3543  0031                     ___ftdiv@f1:	
  3544  0031                     ___ftmul@f2:	
  3545                           ; 3 bytes @ 0x11
  3546                           
  3547                           
  3548                           ; 3 bytes @ 0x11
  3549  0031                     	ds	3
  3550  0034                     ??___ftdiv:	
  3551  0034                     ??___ftmul:	
  3552                           ; 0 bytes @ 0x14
  3553                           
  3554                           
  3555                           ; 0 bytes @ 0x14
  3556  0034                     	ds	4
  3557  0038                     ___ftdiv@cntr:	
  3558  0038                     ___ftmul@exp:	
  3559                           ; 1 bytes @ 0x18
  3560                           
  3561                           
  3562                           ; 1 bytes @ 0x18
  3563  0038                     	ds	1
  3564  0039                     ___ftdiv@f3:	
  3565  0039                     ___ftmul@f3_as_product:	
  3566                           ; 3 bytes @ 0x19
  3567                           
  3568                           
  3569                           ; 3 bytes @ 0x19
  3570  0039                     	ds	3
  3571  003C                     ___ftdiv@exp:	
  3572  003C                     ___ftmul@cntr:	
  3573                           ; 1 bytes @ 0x1C
  3574                           
  3575                           
  3576                           ; 1 bytes @ 0x1C
  3577  003C                     	ds	1
  3578  003D                     ___ftdiv@sign:	
  3579  003D                     ___ftmul@sign:	
  3580                           ; 1 bytes @ 0x1D
  3581                           
  3582                           
  3583                           ; 1 bytes @ 0x1D
  3584  003D                     	ds	1
  3585  003E                     ?___ftadd:	
  3586  003E                     ___ftadd@f1:	
  3587                           ; 3 bytes @ 0x1E
  3588                           
  3589                           
  3590                           ; 3 bytes @ 0x1E
  3591  003E                     	ds	3
  3592  0041                     ___ftadd@f2:	
  3593                           
  3594                           ; 3 bytes @ 0x21
  3595  0041                     	ds	3
  3596  0044                     ??___ftadd:	
  3597                           
  3598                           ; 0 bytes @ 0x24
  3599  0044                     	ds	4
  3600  0048                     ___ftadd@sign:	
  3601                           
  3602                           ; 1 bytes @ 0x28
  3603  0048                     	ds	1
  3604  0049                     ___ftadd@exp2:	
  3605                           
  3606                           ; 1 bytes @ 0x29
  3607  0049                     	ds	1
  3608  004A                     ___ftadd@exp1:	
  3609                           
  3610                           ; 1 bytes @ 0x2A
  3611  004A                     	ds	1
  3612  004B                     ?___fttol:	
  3613  004B                     ___fttol@f1:	
  3614                           ; 4 bytes @ 0x2B
  3615                           
  3616                           
  3617                           ; 3 bytes @ 0x2B
  3618  004B                     	ds	4
  3619  004F                     ??___fttol:	
  3620                           
  3621                           ; 0 bytes @ 0x2F
  3622  004F                     	ds	4
  3623  0053                     ___fttol@sign1:	
  3624                           
  3625                           ; 1 bytes @ 0x33
  3626  0053                     	ds	1
  3627  0054                     ___fttol@lval:	
  3628                           
  3629                           ; 4 bytes @ 0x34
  3630  0054                     	ds	4
  3631  0058                     ___fttol@exp1:	
  3632                           
  3633                           ; 1 bytes @ 0x38
  3634  0058                     	ds	1
  3635  0059                     ??_getPercentValue:	
  3636  0059                     ??_setPercentValue:	
  3637                           ; 0 bytes @ 0x39
  3638                           
  3639  0059                     setPercentValue@value:	
  3640                           ; 0 bytes @ 0x39
  3641                           
  3642                           
  3643                           ; 1 bytes @ 0x39
  3644  0059                     	ds	1
  3645  005A                     setPercentValue@i:	
  3646                           
  3647                           ; 3 bytes @ 0x3A
  3648  005A                     	ds	1
  3649  005B                     getPercentValue@value:	
  3650                           
  3651                           ; 1 bytes @ 0x3B
  3652  005B                     	ds	1
  3653  005C                     getPercentValue@i:	
  3654                           
  3655                           ; 3 bytes @ 0x3C
  3656  005C                     	ds	1
  3657  005D                     ?_setRF_DimmerLights:	
  3658  005D                     ??_Flash_Memory_Initialization:	
  3659                           ; 0 bytes @ 0x3D
  3660                           
  3661  005D                     setRF_DimmerLights@on:	
  3662                           ; 0 bytes @ 0x3D
  3663                           
  3664                           
  3665                           ; 1 bytes @ 0x3D
  3666  005D                     	ds	1
  3667  005E                     ??_setRF_DimmerLights:	
  3668  005E                     Flash_Memory_Initialization@i:	
  3669                           ; 0 bytes @ 0x3E
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0x3E
  3673  005E                     	ds	1
  3674  005F                     ??_setDimmerLights_AdjRF:	
  3675                           
  3676                           ; 0 bytes @ 0x3F
  3677  005F                     	ds	1
  3678  0060                     setDimmerLights_AdjRF@lights:	
  3679  0060                     setRF_DimmerLights@status:	
  3680                           ; 1 bytes @ 0x40
  3681                           
  3682                           
  3683                           ; 1 bytes @ 0x40
  3684  0060                     	ds	1
  3685  0061                     ??_setRF_DimmerValue:	
  3686  0061                     setRF_DimmerLights@lights:	
  3687                           ; 0 bytes @ 0x41
  3688                           
  3689                           
  3690                           ; 1 bytes @ 0x41
  3691  0061                     	ds	1
  3692  0062                     ??_setDimmerLights_SwOn:	
  3693  0062                     ??_setDimmerLights_SwOff:	
  3694                           ; 0 bytes @ 0x42
  3695                           
  3696  0062                     ?_setDimmerLights_Adj:	
  3697                           ; 0 bytes @ 0x42
  3698                           
  3699  0062                     setDimmerLights_Adj@status:	
  3700                           ; 0 bytes @ 0x42
  3701                           
  3702                           
  3703                           ; 1 bytes @ 0x42
  3704  0062                     	ds	1
  3705  0063                     ??_setDimmerLights_Adj:	
  3706  0063                     setDimmerLights_SwOn@idle:	
  3707                           ; 0 bytes @ 0x43
  3708                           
  3709  0063                     setRF_DimmerValue@lights:	
  3710                           ; 1 bytes @ 0x43
  3711                           
  3712                           
  3713                           ; 1 bytes @ 0x43
  3714  0063                     	ds	1
  3715  0064                     ??_setRFSW_AdjControl:	
  3716  0064                     setDimmerLights_SwOn@sw:	
  3717                           ; 0 bytes @ 0x44
  3718                           
  3719  0064                     setDimmerLights_SwOff@command:	
  3720                           ; 1 bytes @ 0x44
  3721                           
  3722  0064                     setDimmerLights_Adj@lights:	
  3723                           ; 1 bytes @ 0x44
  3724                           
  3725                           
  3726                           ; 1 bytes @ 0x44
  3727  0064                     	ds	1
  3728  0065                     ??_setDimmerLights_Main:	
  3729  0065                     setDimmerLights_Main@lights:	
  3730                           ; 0 bytes @ 0x45
  3731                           
  3732  0065                     setDimmerLights_SwOff@sw:	
  3733                           ; 1 bytes @ 0x45
  3734                           
  3735                           
  3736                           ; 1 bytes @ 0x45
  3737  0065                     	ds	1
  3738  0066                     ??_DlyOff_Main:	
  3739  0066                     ??_setRFSW_Control:	
  3740                           ; 0 bytes @ 0x46
  3741                           
  3742  0066                     ??_setSw_Main:	
  3743                           ; 0 bytes @ 0x46
  3744                           
  3745  0066                     ??_DimmerLights_Main:	
  3746                           ; 0 bytes @ 0x46
  3747                           
  3748  0066                     ??_setDimmerLights_ErrorClose:	
  3749                           ; 0 bytes @ 0x46
  3750                           
  3751  0066                     setRFSW_AdjControl@sw:	
  3752                           ; 0 bytes @ 0x46
  3753                           
  3754                           
  3755                           ; 1 bytes @ 0x46
  3756  0066                     	ds	1
  3757  0067                     setDimmerLights_ErrorClose@count:	
  3758  0067                     setRFSW_Control@sw:	
  3759                           ; 1 bytes @ 0x47
  3760                           
  3761                           
  3762                           ; 1 bytes @ 0x47
  3763  0067                     	ds	1
  3764  0068                     ??_getRxData:	
  3765  0068                     ??_setControl_Lights_Table:	
  3766                           ; 0 bytes @ 0x48
  3767                           
  3768  0068                     DlyOff_Main@sw:	
  3769                           ; 0 bytes @ 0x48
  3770                           
  3771  0068                     setDimmerLights_ErrorClose@lights:	
  3772                           ; 1 bytes @ 0x48
  3773                           
  3774  0068                     setSw_Main@sw:	
  3775                           ; 1 bytes @ 0x48
  3776                           
  3777  0068                     _DimmerLights_Main$2501:	
  3778                           ; 1 bytes @ 0x48
  3779                           
  3780                           
  3781                           ; 2 bytes @ 0x48
  3782  0068                     	ds	1
  3783  0069                     ??_DelayOff_Main:	
  3784  0069                     getRxData@error:	
  3785                           ; 0 bytes @ 0x49
  3786                           
  3787  0069                     setDimmerLights_ErrorClose@i:	
  3788                           ; 1 bytes @ 0x49
  3789                           
  3790                           
  3791                           ; 2 bytes @ 0x49
  3792  0069                     	ds	1
  3793  006A                     ??_setRF_Main:	
  3794                           
  3795                           ; 0 bytes @ 0x4A
  3796  006A                     	ds	1
  3797  006B                     ??_setMain_Exception:	
  3798  006B                     setRF_Main@loop_f:	
  3799                           ; 0 bytes @ 0x4B
  3800                           
  3801                           
  3802                           ; 1 bytes @ 0x4B
  3803  006B                     	ds	1
  3804  006C                     setRF_Main@Receive_OK:	
  3805                           
  3806                           ; 1 bytes @ 0x4C
  3807  006C                     	ds	1
  3808  006D                     ??_Switch_Main:	
  3809  006D                     setRF_Main@error:	
  3810                           ; 0 bytes @ 0x4D
  3811                           
  3812                           
  3813                           ; 1 bytes @ 0x4D
  3814  006D                     	ds	1
  3815  006E                     ??_RF_Main:	
  3816  006E                     Switch_Main@error:	
  3817                           ; 0 bytes @ 0x4E
  3818                           
  3819                           
  3820                           ; 1 bytes @ 0x4E
  3821  006E                     	ds	1
  3822  006F                     ??_main:	
  3823                           
  3824                           	psect	maintext
  3825  15DA                     __pmaintext:	
  3826                           ; 0 bytes @ 0x4F
  3827 ;;
  3828 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3829 ;;
  3830 ;; *************** function _main *****************
  3831 ;; Defined at:
  3832 ;;		line 7 in file "../src/Main_B1.c"
  3833 ;; Parameters:    Size  Location     Type
  3834 ;;  argc            2    0[BANK3 ] int 
  3835 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3836 ;; Auto vars:     Size  Location     Type
  3837 ;;		None
  3838 ;; Return value:  Size  Location     Type
  3839 ;;                  2    0[BANK3 ] int 
  3840 ;; Registers used:
  3841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3842 ;; Tracked objects:
  3843 ;;		On entry : 17F/0
  3844 ;;		On exit  : 0/0
  3845 ;;		Unchanged: 0/0
  3846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3847 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3850 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3851 ;;Total ram usage:        4 bytes
  3852 ;; Hardware stack levels required when called:   15
  3853 ;; This function calls:
  3854 ;;		_Buzzer_Initialization
  3855 ;;		_Buzzer_Main
  3856 ;;		_CC2500_PowerOnInitial
  3857 ;;		_DelayOff_Initialization
  3858 ;;		_DelayOff_Main
  3859 ;;		_DimmerLights_Initialization
  3860 ;;		_DimmerLights_Main
  3861 ;;		_Flash_Memory_Initialization
  3862 ;;		_Flash_Memory_Main
  3863 ;;		_LED_Initialization
  3864 ;;		_LED_Main
  3865 ;;		_Load_Initialization
  3866 ;;		_Load_Main
  3867 ;;		_Mcu_Initialization
  3868 ;;		_RF_Initialization
  3869 ;;		_RF_Main
  3870 ;;		_Switch_Initialization
  3871 ;;		_Switch_Main
  3872 ;;		_Temp_Initialization
  3873 ;;		_Temp_Main
  3874 ;;		_WDT_Main
  3875 ;;		_getLoad_AD
  3876 ;;		_getTemp_AD
  3877 ;;		_myMain_Initialization
  3878 ;;		_my_MainTimer
  3879 ;; This function is called by:
  3880 ;;		Startup code after reset
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           
  3885                           ;psect for function _main
  3886  15DA                     _main:	
  3887                           
  3888                           ;Main_B1.c: 8: myMain_Initialization();
  3889                           
  3890                           ;incstack = 0
  3891                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3892  15DA  319B  2365  3195   	fcall	_myMain_Initialization
  3893                           
  3894                           ;Main_B1.c: 9: Mcu_Initialization();
  3895  15DD  319B  23ED  3195   	fcall	_Mcu_Initialization
  3896                           
  3897                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3898  15E0  318F  2724  3195   	fcall	_Flash_Memory_Initialization
  3899                           
  3900                           ;Main_B1.c: 11: LED_Initialization();
  3901  15E3  319A  22FF  3195   	fcall	_LED_Initialization
  3902                           
  3903                           ;Main_B1.c: 12: Buzzer_Initialization();
  3904  15E6  319A  2250  3195   	fcall	_Buzzer_Initialization
  3905                           
  3906                           ;Main_B1.c: 14: ;;
  3907                           ;Main_B1.c: 15: Temp_Initialization();
  3908  15E9  319A  2259  3195   	fcall	_Temp_Initialization
  3909                           
  3910                           ;Main_B1.c: 16: Load_Initialization();
  3911  15EC  319A  2274  3195   	fcall	_Load_Initialization
  3912                           
  3913                           ;Main_B1.c: 17: ;;
  3914                           ;Main_B1.c: 18: DelayOff_Initialization();
  3915  15EF  319A  2294  3195   	fcall	_DelayOff_Initialization
  3916                           
  3917                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3918  15F2  319C  24ED  3195   	fcall	_DimmerLights_Initialization
  3919                           
  3920                           ;Main_B1.c: 21: ;;
  3921                           ;Main_B1.c: 22: ;;
  3922                           ;Main_B1.c: 23: ;;
  3923                           ;Main_B1.c: 24: Switch_Initialization();
  3924  15F5  319B  233B  3195   	fcall	_Switch_Initialization
  3925                           
  3926                           ;Main_B1.c: 25: RF_Initialization();
  3927  15F8  319A  2253  3195   	fcall	_RF_Initialization
  3928                           
  3929                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3930  15FB  319C  24C2  3195   	fcall	_CC2500_PowerOnInitial
  3931  15FE                     l10784:	
  3932                           ;Main_B1.c: 27: ;;
  3933                           ;Main_B1.c: 29: while (1) {
  3934                           
  3935                           
  3936                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  3937  15FE  0021               	movlb	1	; select bank1
  3938  15FF  1C20               	btfss	_myMain^(0+128),0
  3939  1600  2E09               	goto	l10788
  3940                           
  3941                           ;Main_B1.c: 37: getLoad_AD(0x05);
  3942  1601  3005               	movlw	5
  3943  1602  318C  2441  3195   	fcall	_getLoad_AD
  3944                           
  3945                           ;Main_B1.c: 41: getTemp_AD(0x09);
  3946  1605  3009               	movlw	9
  3947  1606  3192  2221  3195   	fcall	_getTemp_AD
  3948  1609                     l10788:	
  3949                           
  3950                           ;Main_B1.c: 56: }
  3951                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  3952  1609  0022               	movlb	2	; select bank2
  3953  160A  1C20               	btfss	_Timer1^(0+256),0
  3954  160B  2DFE               	goto	l10784
  3955                           
  3956                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  3957  160C  1020               	bcf	_Timer1^(0+256),0
  3958                           
  3959                           ;Main_B1.c: 94: my_MainTimer();
  3960  160D  3194  243E  3195   	fcall	_my_MainTimer
  3961                           
  3962                           ;Main_B1.c: 95: WDT_Main();
  3963  1610  319B  23FF  3195   	fcall	_WDT_Main
  3964                           
  3965                           ;Main_B1.c: 96: ;;
  3966                           ;Main_B1.c: 97: ;;
  3967                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  3968  1613  0021               	movlb	1	; select bank1
  3969  1614  1C20               	btfss	_myMain^(0+128),0
  3970  1615  2DFE               	goto	l10784
  3971                           
  3972                           ;Main_B1.c: 99: Flash_Memory_Main();
  3973  1616  3191  21B5  3195   	fcall	_Flash_Memory_Main
  3974                           
  3975                           ;Main_B1.c: 101: LED_Main();
  3976  1619  319B  230B  3195   	fcall	_LED_Main
  3977                           
  3978                           ;Main_B1.c: 102: Buzzer_Main();
  3979  161C  3193  23A6  3195   	fcall	_Buzzer_Main
  3980                           
  3981                           ;Main_B1.c: 104: ;;
  3982                           ;Main_B1.c: 105: Temp_Main();
  3983  161F  319A  225C  3195   	fcall	_Temp_Main
  3984                           
  3985                           ;Main_B1.c: 106: Load_Main();
  3986  1622  3180  2049  3195   	fcall	_Load_Main
  3987                           
  3988                           ;Main_B1.c: 107: ;;
  3989                           ;Main_B1.c: 109: ;;
  3990                           ;Main_B1.c: 110: DimmerLights_Main();
  3991  1625  3191  2117  3195   	fcall	_DimmerLights_Main
  3992                           
  3993                           ;Main_B1.c: 111: Switch_Main();
  3994  1628  319E  26C5  3195   	fcall	_Switch_Main
  3995                           
  3996                           ;Main_B1.c: 112: ;;
  3997                           ;Main_B1.c: 113: ;;
  3998                           ;Main_B1.c: 115: RF_Main();
  3999  162B  319A  2256  3195   	fcall	_RF_Main
  4000                           
  4001                           ;Main_B1.c: 116: DelayOff_Main();
  4002  162E  319A  229C  3195   	fcall	_DelayOff_Main
  4003                           
  4004                           ;Main_B1.c: 117: ;;
  4005  1631  2DFE               	goto	l10784
  4006  1632                     __end_of_main:	
  4007                           ;Main_B1.c: 125: }
  4008                           ;Main_B1.c: 126: }
  4009                           ;Main_B1.c: 160: }
  4010                           ;Main_B1.c: 161: return (0);
  4011                           ;	Return value of _main is never used
  4012                           
  4013                           
  4014                           	psect	text1
  4015  143E                     __ptext1:	
  4016 ;; *************** function _my_MainTimer *****************
  4017 ;; Defined at:
  4018 ;;		line 180 in file "../src/Main_B1.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;		None
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;		None
  4023 ;; Return value:  Size  Location     Type
  4024 ;;		None               void
  4025 ;; Registers used:
  4026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;Total ram usage:        0 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:    7
  4039 ;; This function calls:
  4040 ;;		_setBuz
  4041 ;;		_setTxData
  4042 ;; This function is called by:
  4043 ;;		_main
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           
  4048                           ;psect for function _my_MainTimer
  4049  143E                     _my_MainTimer:	
  4050                           
  4051                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  4052                           
  4053                           ;incstack = 0
  4054                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4055  143E  0021               	movlb	1	; select bank1
  4056  143F  1820               	btfsc	_myMain^(0+128),0
  4057  1440  2C60               	goto	l10510
  4058                           
  4059                           ;Main_B1.c: 183: myMain.PowerCount++;
  4060  1441  3001               	movlw	1
  4061  1442  07A2               	addwf	(_myMain^(0+128)+2),f
  4062  1443  3000               	movlw	0
  4063  1444  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4064                           
  4065                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  4066  1445  3002               	movlw	2
  4067  1446  3EA0               	addlw	_myMain& (0+255)
  4068  1447  0086               	movwf	6
  4069  1448  0187               	clrf	7
  4070  1449  3F40               	moviw [0]fsr1
  4071  144A  3A96               	xorlw	150
  4072  144B  1D03               	skipz
  4073  144C  2C4F               	goto	u11925
  4074  144D  3F41               	moviw [1]fsr1
  4075  144E  3A00               	xorlw	0
  4076  144F                     u11925:	
  4077  144F  1D03               	skipz
  4078  1450  2C77               	goto	l10520
  4079                           
  4080                           ;Main_B1.c: 185: {
  4081                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  4082  1451  01A2               	clrf	(_myMain^(0+128)+2)
  4083  1452  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4084                           
  4085                           ;Main_B1.c: 187: myMain.PowerON = 1;
  4086  1453  1420               	bsf	_myMain^(0+128),0
  4087                           
  4088                           ;Main_B1.c: 193: setBuz(3, 50);
  4089  1454  3032               	movlw	50
  4090  1455  0020               	movlb	0	; select bank0
  4091  1456  00A9               	movwf	setBuz@time
  4092  1457  3000               	movlw	0
  4093  1458  00AA               	movwf	setBuz@time+1
  4094  1459  3003               	movlw	3
  4095  145A  3196  2632  3194   	fcall	_setBuz
  4096                           
  4097                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  4098  145D  0021               	movlb	1	; select bank1
  4099  145E  1620               	bsf	_myMain^(0+128),4
  4100                           
  4101                           ;Main_B1.c: 203: }
  4102                           ;Main_B1.c: 204: } else {
  4103  145F  2C77               	goto	l10520
  4104  1460                     l10510:	
  4105                           
  4106                           ;Main_B1.c: 212: myMain.Count1++;
  4107  1460  3001               	movlw	1
  4108  1461  07A6               	addwf	(_myMain^(0+128)+6),f
  4109  1462  3000               	movlw	0
  4110  1463  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4111                           
  4112                           ;Main_B1.c: 213: if (myMain.Count1 == 100)
  4113  1464  3006               	movlw	6
  4114  1465  3EA0               	addlw	_myMain& (0+255)
  4115  1466  0086               	movwf	6
  4116  1467  0187               	clrf	7
  4117  1468  3F40               	moviw [0]fsr1
  4118  1469  3A64               	xorlw	100
  4119  146A  1D03               	skipz
  4120  146B  2C6E               	goto	u11935
  4121  146C  3F41               	moviw [1]fsr1
  4122  146D  3A00               	xorlw	0
  4123  146E                     u11935:	
  4124  146E  1D03               	skipz
  4125  146F  2C77               	goto	l10520
  4126                           
  4127                           ;Main_B1.c: 214: {
  4128                           ;Main_B1.c: 215: myMain.Count1 = 0;
  4129  1470  01A6               	clrf	(_myMain^(0+128)+6)
  4130  1471  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4131                           
  4132                           ;Main_B1.c: 227: if (myMain.Flag) {
  4133  1472  1CA0               	btfss	_myMain^(0+128),1
  4134  1473  2C76               	goto	l1558
  4135                           
  4136                           ;Main_B1.c: 228: myMain.Flag = 0;
  4137  1474  10A0               	bcf	_myMain^(0+128),1
  4138                           
  4139                           ;Main_B1.c: 237: } else {
  4140  1475  2C77               	goto	l10520
  4141  1476                     l1558:	
  4142                           
  4143                           ;Main_B1.c: 238: myMain.Flag = 1;
  4144  1476  14A0               	bsf	_myMain^(0+128),1
  4145  1477                     l10520:	
  4146                           
  4147                           ;Main_B1.c: 247: }
  4148                           ;Main_B1.c: 248: }
  4149                           ;Main_B1.c: 250: }
  4150                           ;Main_B1.c: 252: myMain.Count2++;
  4151  1477  3001               	movlw	1
  4152  1478  07A8               	addwf	(_myMain^(0+128)+8),f
  4153  1479  3000               	movlw	0
  4154  147A  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  4155                           
  4156                           ;Main_B1.c: 253: if (myMain.Count2 == 100) {
  4157  147B  3008               	movlw	8
  4158  147C  3EA0               	addlw	_myMain& (0+255)
  4159  147D  0086               	movwf	6
  4160  147E  0187               	clrf	7
  4161  147F  3F40               	moviw [0]fsr1
  4162  1480  3A64               	xorlw	100
  4163  1481  1D03               	skipz
  4164  1482  2C85               	goto	u11955
  4165  1483  3F41               	moviw [1]fsr1
  4166  1484  3A00               	xorlw	0
  4167  1485                     u11955:	
  4168  1485  1D03               	skipz
  4169  1486  0008               	return
  4170                           
  4171                           ;Main_B1.c: 254: myMain.Count2 = 0;
  4172  1487  01A8               	clrf	(_myMain^(0+128)+8)
  4173  1488  01A9               	clrf	((_myMain+1)^(0+128)+8)
  4174                           
  4175                           ;Main_B1.c: 255: setTxData();
  4176  1489  318D  2549         	fcall	_setTxData
  4177  148B  0008               	return
  4178  148C                     __end_of_my_MainTimer:	
  4179                           
  4180                           	psect	text2
  4181  1B65                     __ptext2:	
  4182 ;; *************** function _myMain_Initialization *****************
  4183 ;; Defined at:
  4184 ;;		line 167 in file "../src/Main_B1.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;		None
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;		None
  4189 ;; Return value:  Size  Location     Type
  4190 ;;		None               void
  4191 ;; Registers used:
  4192 ;;		wreg, fsr1l, fsr1h
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4200 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4201 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;Total ram usage:        1 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; Hardware stack levels required when called:    5
  4205 ;; This function calls:
  4206 ;;		Nothing
  4207 ;; This function is called by:
  4208 ;;		_main
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211                           
  4212                           
  4213                           ;psect for function _myMain_Initialization
  4214  1B65                     _myMain_Initialization:	
  4215                           
  4216                           ;Main_B1.c: 169: product = &_product;
  4217                           
  4218                           ;incstack = 0
  4219                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4220  1B65  3045               	movlw	__product& (0+255)
  4221  1B66  0020               	movlb	0	; select bank0
  4222  1B67  00A0               	movwf	??_myMain_Initialization
  4223  1B68  0820               	movf	??_myMain_Initialization,w
  4224  1B69  00FB               	movwf	_product
  4225                           
  4226                           ;Main_B1.c: 170: product->Data[20] = 210;
  4227  1B6A  30D2               	movlw	210
  4228  1B6B  00A0               	movwf	??_myMain_Initialization
  4229  1B6C  087B               	movf	_product,w
  4230  1B6D  3E14               	addlw	20
  4231  1B6E  0086               	movwf	6
  4232  1B6F  3002               	movlw	2	; select bank4/5
  4233  1B70  0087               	movwf	7
  4234  1B71  0820               	movf	??_myMain_Initialization,w
  4235  1B72  0081               	movwf	1
  4236  1B73  0008               	return
  4237  1B74                     __end_of_myMain_Initialization:	
  4238                           
  4239                           	psect	text3
  4240  1221                     __ptext3:	
  4241 ;; *************** function _getTemp_AD *****************
  4242 ;; Defined at:
  4243 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;  channel         1    wreg     unsigned char 
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;  channel         1    5[BANK0 ] unsigned char 
  4248 ;; Return value:  Size  Location     Type
  4249 ;;		None               void
  4250 ;; Registers used:
  4251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;Total ram usage:        2 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    7
  4264 ;; This function calls:
  4265 ;;		_getAD
  4266 ;; This function is called by:
  4267 ;;		_main
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           
  4272                           ;psect for function _getTemp_AD
  4273  1221                     _getTemp_AD:	
  4274                           
  4275                           ;incstack = 0
  4276                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4277                           ;getTemp_AD@channel stored from wreg
  4278  1221  0020               	movlb	0	; select bank0
  4279  1222  00A5               	movwf	getTemp_AD@channel
  4280                           
  4281                           ;OverTemperature_B1.c: 33: if (Temp.ADtoGO == 1) {
  4282  1223  0021               	movlb	1	; select bank1
  4283  1224  1D58               	btfss	_Temp^(0+128),2
  4284  1225  0008               	return
  4285                           
  4286                           ;OverTemperature_B1.c: 34: Temp.GO = 1;
  4287  1226  1658               	bsf	_Temp^(0+128),4
  4288                           
  4289                           ;OverTemperature_B1.c: 35: Temp.ADRES = getAD(channel, 0xf0);
  4290  1227  30F0               	movlw	240
  4291  1228  0020               	movlb	0	; select bank0
  4292  1229  00A4               	movwf	??_getTemp_AD
  4293  122A  0824               	movf	??_getTemp_AD,w
  4294  122B  00A0               	movwf	getAD@adcon1
  4295  122C  0825               	movf	getTemp_AD@channel,w
  4296  122D  319E  261F  3192   	fcall	_getAD
  4297  1230  0020               	movlb	0	; select bank0
  4298  1231  0821               	movf	?_getAD+1,w
  4299  1232  0021               	movlb	1	; select bank1
  4300  1233  01E5               	clrf	((_Temp+1)^(0+128)+12)
  4301  1234  07E5               	addwf	((_Temp+1)^(0+128)+12),f
  4302  1235  0020               	movlb	0	; select bank0
  4303  1236  0820               	movf	?_getAD,w
  4304  1237  0021               	movlb	1	; select bank1
  4305  1238  01E4               	clrf	(_Temp^(0+128)+12)
  4306  1239  07E4               	addwf	(_Temp^(0+128)+12),f
  4307                           
  4308                           ;OverTemperature_B1.c: 36: if (Temp.ADH[0] < Temp.ADRES) {
  4309  123A  0865               	movf	((_Temp+1)^(0+128)+12),w
  4310  123B  0261               	subwf	((_Temp+1)^(0+128)+8),w
  4311  123C  1D03               	skipz
  4312  123D  2A40               	goto	u11895
  4313  123E  0864               	movf	(_Temp^(0+128)+12),w
  4314  123F  0260               	subwf	(_Temp^(0+128)+8),w
  4315  1240                     u11895:	
  4316  1240  1803               	skipnc
  4317  1241  2A49               	goto	l10492
  4318                           
  4319                           ;OverTemperature_B1.c: 37: Temp.ADH[0] = Temp.ADRES;
  4320  1242  0865               	movf	((_Temp+1)^(0+128)+12),w
  4321  1243  01E1               	clrf	((_Temp+1)^(0+128)+8)
  4322  1244  07E1               	addwf	((_Temp+1)^(0+128)+8),f
  4323  1245  0864               	movf	(_Temp^(0+128)+12),w
  4324  1246  01E0               	clrf	(_Temp^(0+128)+8)
  4325  1247  07E0               	addwf	(_Temp^(0+128)+8),f
  4326                           
  4327                           ;OverTemperature_B1.c: 38: } else if (Temp.ADH[1] < Temp.ADRES) {
  4328  1248  0008               	return
  4329  1249                     l10492:	
  4330  1249  0865               	movf	((_Temp+1)^(0+128)+12),w
  4331  124A  0263               	subwf	((_Temp+1)^(0+128)+10),w
  4332  124B  1D03               	skipz
  4333  124C  2A4F               	goto	u11905
  4334  124D  0864               	movf	(_Temp^(0+128)+12),w
  4335  124E  0262               	subwf	(_Temp^(0+128)+10),w
  4336  124F                     u11905:	
  4337  124F  1803               	skipnc
  4338  1250  0008               	return
  4339                           
  4340                           ;OverTemperature_B1.c: 39: Temp.ADH[1] = Temp.ADRES;
  4341  1251  0865               	movf	((_Temp+1)^(0+128)+12),w
  4342  1252  01E3               	clrf	((_Temp+1)^(0+128)+10)
  4343  1253  07E3               	addwf	((_Temp+1)^(0+128)+10),f
  4344  1254  0864               	movf	(_Temp^(0+128)+12),w
  4345  1255  01E2               	clrf	(_Temp^(0+128)+10)
  4346  1256  07E2               	addwf	(_Temp^(0+128)+10),f
  4347  1257  0008               	return
  4348  1258                     __end_of_getTemp_AD:	
  4349                           
  4350                           	psect	text4
  4351  0C41                     __ptext4:	
  4352 ;; *************** function _getLoad_AD *****************
  4353 ;; Defined at:
  4354 ;;		line 15 in file "../src/OverLoad_B1.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;  channel         1    wreg     unsigned char 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  channel         1    6[BANK0 ] unsigned char 
  4359 ;;  i               1    9[BANK0 ] unsigned char 
  4360 ;;  j               1    8[BANK0 ] unsigned char 
  4361 ;;  k               1    7[BANK0 ] unsigned char 
  4362 ;; Return value:  Size  Location     Type
  4363 ;;		None               void
  4364 ;; Registers used:
  4365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4374 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;Total ram usage:        6 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    7
  4378 ;; This function calls:
  4379 ;;		_getAD
  4380 ;; This function is called by:
  4381 ;;		_main
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           
  4386                           ;psect for function _getLoad_AD
  4387  0C41                     _getLoad_AD:	
  4388                           
  4389                           ;incstack = 0
  4390                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4391                           ;getLoad_AD@channel stored from wreg
  4392  0C41  0020               	movlb	0	; select bank0
  4393  0C42  00A6               	movwf	getLoad_AD@channel
  4394                           
  4395                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4396  0C43  01A9               	clrf	getLoad_AD@i
  4397  0C44  01A8               	clrf	getLoad_AD@j
  4398  0C45  01A7               	clrf	getLoad_AD@k
  4399                           
  4400                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4401  0C46  0022               	movlb	2	; select bank2
  4402  0C47  1E27               	btfss	_Load^(0+256),4
  4403  0C48  0008               	return
  4404                           
  4405                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4406  0C49  30F3               	movlw	243
  4407  0C4A  0020               	movlb	0	; select bank0
  4408  0C4B  00A4               	movwf	??_getLoad_AD
  4409  0C4C  0824               	movf	??_getLoad_AD,w
  4410  0C4D  00A0               	movwf	getAD@adcon1
  4411  0C4E  0826               	movf	getLoad_AD@channel,w
  4412  0C4F  319E  261F  318C   	fcall	_getAD
  4413  0C52  0020               	movlb	0	; select bank0
  4414  0C53  0821               	movf	?_getAD+1,w
  4415  0C54  0022               	movlb	2	; select bank2
  4416  0C55  01C9               	clrf	((_Load+1)^(0+256)+33)
  4417  0C56  07C9               	addwf	((_Load+1)^(0+256)+33),f
  4418  0C57  0020               	movlb	0	; select bank0
  4419  0C58  0820               	movf	?_getAD,w
  4420  0C59  0022               	movlb	2	; select bank2
  4421  0C5A  01C8               	clrf	(_Load^(0+256)+33)
  4422  0C5B  07C8               	addwf	(_Load^(0+256)+33),f
  4423                           
  4424                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4425  0C5C  0020               	movlb	0	; select bank0
  4426  0C5D  01A9               	clrf	getLoad_AD@i
  4427  0C5E  3004               	movlw	4
  4428  0C5F  0229               	subwf	getLoad_AD@i,w
  4429  0C60  1803               	btfsc	3,0
  4430  0C61  2C8F               	goto	l10462
  4431  0C62                     l10450:	
  4432                           
  4433                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4434  0C62  3529               	lslf	getLoad_AD@i,w
  4435  0C63  3E32               	addlw	(_Load+11)& (0+255)
  4436  0C64  0086               	movwf	6
  4437  0C65  3001               	movlw	1	; select bank2/3
  4438  0C66  0087               	movwf	7
  4439  0C67  3F40               	moviw [0]fsr1
  4440  0C68  00A4               	movwf	??_getLoad_AD
  4441  0C69  3F41               	moviw [1]fsr1
  4442  0C6A  00A5               	movwf	??_getLoad_AD+1
  4443  0C6B  0022               	movlb	2	; select bank2
  4444  0C6C  0849               	movf	((_Load+1)^(0+256)+33),w
  4445  0C6D  0020               	movlb	0	; select bank0
  4446  0C6E  0225               	subwf	??_getLoad_AD+1,w
  4447  0C6F  1D03               	skipz
  4448  0C70  2C75               	goto	u11805
  4449  0C71  0022               	movlb	2	; select bank2
  4450  0C72  0848               	movf	(_Load^(0+256)+33),w
  4451  0C73  0020               	movlb	0	; select bank0
  4452  0C74  0224               	subwf	??_getLoad_AD,w
  4453  0C75                     u11805:	
  4454  0C75  1803               	skipnc
  4455  0C76  2C87               	goto	l10458
  4456  0C77  08A8               	movf	getLoad_AD@j,f
  4457  0C78  1D03               	skipz
  4458  0C79  2C87               	goto	l10458
  4459                           
  4460                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4461  0C7A  3529               	lslf	getLoad_AD@i,w
  4462  0C7B  3E32               	addlw	(_Load+11)& (0+255)
  4463  0C7C  0086               	movwf	6
  4464  0C7D  3001               	movlw	1	; select bank2/3
  4465  0C7E  0087               	movwf	7
  4466  0C7F  0022               	movlb	2	; select bank2
  4467  0C80  0848               	movf	(_Load^(0+256)+33),w
  4468  0C81  3FC0               	movwi [0]fsr1
  4469  0C82  0849               	movf	((_Load+1)^(0+256)+33),w
  4470  0C83  3FC1               	movwi [1]fsr1
  4471                           
  4472                           ;OverLoad_B1.c: 24: j = 1;
  4473  0C84  0020               	movlb	0	; select bank0
  4474  0C85  01A8               	clrf	getLoad_AD@j
  4475  0C86  0AA8               	incf	getLoad_AD@j,f
  4476  0C87                     l10458:	
  4477  0C87  3001               	movlw	1
  4478  0C88  00A4               	movwf	??_getLoad_AD
  4479  0C89  0824               	movf	??_getLoad_AD,w
  4480  0C8A  07A9               	addwf	getLoad_AD@i,f
  4481  0C8B  3004               	movlw	4
  4482  0C8C  0229               	subwf	getLoad_AD@i,w
  4483  0C8D  1C03               	skipc
  4484  0C8E  2C62               	goto	l10450
  4485  0C8F                     l10462:	
  4486                           
  4487                           ;OverLoad_B1.c: 25: }
  4488                           ;OverLoad_B1.c: 26: }
  4489                           ;OverLoad_B1.c: 27: if (j == 0) {
  4490  0C8F  08A8               	movf	getLoad_AD@j,f
  4491  0C90  1D03               	skipz
  4492  0C91  0008               	return
  4493                           
  4494                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4495  0C92  01A9               	clrf	getLoad_AD@i
  4496  0C93                     L1:	
  4497  0C93  3004               	movlw	4
  4498  0C94  0229               	subwf	getLoad_AD@i,w
  4499  0C95  1803               	btfsc	3,0
  4500  0C96  0008               	return
  4501                           
  4502                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4503  0C97  3529               	lslf	getLoad_AD@i,w
  4504  0C98  3E3C               	addlw	(_Load+21)& (0+255)
  4505  0C99  0086               	movwf	6
  4506  0C9A  3001               	movlw	1	; select bank2/3
  4507  0C9B  0087               	movwf	7
  4508  0C9C  3F40               	moviw [0]fsr1
  4509  0C9D  00A4               	movwf	??_getLoad_AD
  4510  0C9E  3F41               	moviw [1]fsr1
  4511  0C9F  00A5               	movwf	??_getLoad_AD+1
  4512  0CA0  0825               	movf	??_getLoad_AD+1,w
  4513  0CA1  0022               	movlb	2	; select bank2
  4514  0CA2  0249               	subwf	((_Load+1)^(0+256)+33),w
  4515  0CA3  1D03               	skipz
  4516  0CA4  2CA9               	goto	u11855
  4517  0CA5  0020               	movlb	0	; select bank0
  4518  0CA6  0824               	movf	??_getLoad_AD,w
  4519  0CA7  0022               	movlb	2	; select bank2
  4520  0CA8  0248               	subwf	(_Load^(0+256)+33),w
  4521  0CA9                     u11855:	
  4522  0CA9  1803               	skipnc
  4523  0CAA  2CBC               	goto	l10478
  4524  0CAB  0020               	movlb	0	; select bank0
  4525  0CAC  08A7               	movf	getLoad_AD@k,f
  4526  0CAD  1D03               	skipz
  4527  0CAE  2CBC               	goto	l10478
  4528                           
  4529                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4530  0CAF  3529               	lslf	getLoad_AD@i,w
  4531  0CB0  3E3C               	addlw	(_Load+21)& (0+255)
  4532  0CB1  0086               	movwf	6
  4533  0CB2  3001               	movlw	1	; select bank2/3
  4534  0CB3  0087               	movwf	7
  4535  0CB4  0022               	movlb	2	; select bank2
  4536  0CB5  0848               	movf	(_Load^(0+256)+33),w
  4537  0CB6  3FC0               	movwi [0]fsr1
  4538  0CB7  0849               	movf	((_Load+1)^(0+256)+33),w
  4539  0CB8  3FC1               	movwi [1]fsr1
  4540                           
  4541                           ;OverLoad_B1.c: 31: k = 1;
  4542  0CB9  0020               	movlb	0	; select bank0
  4543  0CBA  01A7               	clrf	getLoad_AD@k
  4544  0CBB  0AA7               	incf	getLoad_AD@k,f
  4545  0CBC                     l10478:	
  4546  0CBC  3001               	movlw	1
  4547  0CBD  0020               	movlb	0	; select bank0
  4548  0CBE  00A4               	movwf	??_getLoad_AD
  4549  0CBF  0824               	movf	??_getLoad_AD,w
  4550  0CC0  07A9               	addwf	getLoad_AD@i,f
  4551  0CC1  2C93               	goto	L1
  4552  0CC2                     __end_of_getLoad_AD:	
  4553                           
  4554                           	psect	text5
  4555  1E1F                     __ptext5:	
  4556 ;; *************** function _getAD *****************
  4557 ;; Defined at:
  4558 ;;		line 454 in file "../src/MCU_B1.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;  adcon0          1    wreg     unsigned char 
  4561 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  2    0[BANK0 ] int 
  4566 ;; Registers used:
  4567 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4573 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4574 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;Total ram usage:        4 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    6
  4580 ;; This function calls:
  4581 ;;		_Timeout_Counter
  4582 ;;		_set_TimeoutCleared
  4583 ;; This function is called by:
  4584 ;;		_getLoad_AD
  4585 ;;		_getTemp_AD
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           
  4590                           ;psect for function _getAD
  4591  1E1F                     _getAD:	
  4592                           
  4593                           ;incstack = 0
  4594                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4595                           ;getAD@adcon0 stored from wreg
  4596  1E1F  0020               	movlb	0	; select bank0
  4597  1E20  00A3               	movwf	getAD@adcon0
  4598                           
  4599                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4600  1E21  0823               	movf	getAD@adcon0,w
  4601  1E22  0021               	movlb	1	; select bank1
  4602  1E23  009D               	movwf	29	;volatile
  4603                           
  4604                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4605  1E24  0020               	movlb	0	; select bank0
  4606  1E25  0820               	movf	getAD@adcon1,w
  4607  1E26  0021               	movlb	1	; select bank1
  4608  1E27  009E               	movwf	30	;volatile
  4609                           
  4610                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4611  1E28  149D               	bsf	29,1	;volatile
  4612                           
  4613                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4614  1E29  2E2D               	goto	l9894
  4615  1E2A                     l9892:	
  4616                           
  4617                           ;MCU_B1.c: 459: Timeout_Counter();
  4618  1E2A  319C  24AD  319E   	fcall	_Timeout_Counter
  4619  1E2D                     l9894:	
  4620  1E2D  0021               	movlb	1	; select bank1
  4621  1E2E  1C9D               	btfss	29,1	;volatile
  4622  1E2F  2E32               	goto	l9898
  4623  1E30  1D2D               	btfss	(_myMain^(0+128)+13),2
  4624  1E31  2E2A               	goto	l9892
  4625  1E32                     l9898:	
  4626                           
  4627                           ;MCU_B1.c: 460: };
  4628                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4629  1E32  319A  226F         	fcall	_set_TimeoutCleared
  4630                           
  4631                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4632  1E34  0021               	movlb	1	; select bank1
  4633  1E35  081C               	movf	28,w	;volatile
  4634  1E36  0020               	movlb	0	; select bank0
  4635  1E37  01A1               	clrf	?_getAD+1
  4636  1E38  07A1               	addwf	?_getAD+1,f
  4637  1E39  0021               	movlb	1	; select bank1
  4638  1E3A  081B               	movf	27,w	;volatile
  4639  1E3B  0020               	movlb	0	; select bank0
  4640  1E3C  01A0               	clrf	?_getAD
  4641  1E3D  07A0               	addwf	?_getAD,f
  4642  1E3E  0008               	return
  4643  1E3F                     __end_of_getAD:	
  4644                           
  4645                           	psect	text6
  4646  1BFF                     __ptext6:	
  4647 ;; *************** function _WDT_Main *****************
  4648 ;; Defined at:
  4649 ;;		line 1033 in file "../src/MCU_B1.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;		None
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;		None
  4654 ;; Return value:  Size  Location     Type
  4655 ;;		None               void
  4656 ;; Registers used:
  4657 ;;		wreg, status,2, status,0, pclath, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;Total ram usage:        1 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:    6
  4670 ;; This function calls:
  4671 ;;		_WDT_Clearing
  4672 ;; This function is called by:
  4673 ;;		_main
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           
  4678                           ;psect for function _WDT_Main
  4679  1BFF                     _WDT_Main:	
  4680                           
  4681                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  4682                           
  4683                           ;incstack = 0
  4684                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4685  1BFF  0022               	movlb	2	; select bank2
  4686  1C00  1C25               	btfss	_WDT^(0+256),0
  4687  1C01  0008               	return
  4688                           
  4689                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  4690  1C02  3001               	movlw	1
  4691  1C03  02A6               	subwf	(_WDT^(0+256)+1),f
  4692  1C04  0826               	movf	(_WDT^(0+256)+1),w
  4693  1C05  3AFF               	xorlw	255
  4694  1C06  1903               	skipnz
  4695  1C07  0008               	return
  4696                           
  4697                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  4698  1C08  3064               	movlw	100
  4699  1C09  0020               	movlb	0	; select bank0
  4700  1C0A  00A0               	movwf	??_WDT_Main
  4701  1C0B  0820               	movf	??_WDT_Main,w
  4702  1C0C  0022               	movlb	2	; select bank2
  4703  1C0D  00A6               	movwf	(_WDT^(0+256)+1)
  4704                           
  4705                           ;MCU_B1.c: 1037: WDT_Clearing();
  4706  1C0E  3180  2002         	fcall	_WDT_Clearing
  4707  1C10  0008               	return
  4708  1C11                     __end_of_WDT_Main:	
  4709                           
  4710                           	psect	text7
  4711  0002                     __ptext7:	
  4712 ;; *************** function _WDT_Clearing *****************
  4713 ;; Defined at:
  4714 ;;		line 1043 in file "../src/MCU_B1.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;		None
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;		None
  4719 ;; Return value:  Size  Location     Type
  4720 ;;		None               void
  4721 ;; Registers used:
  4722 ;;		None
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4732 ;;Total ram usage:        0 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    5
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		_WDT_Main
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function _WDT_Clearing
  4744  0002                     _WDT_Clearing:	
  4745                           
  4746                           ;incstack = 0
  4747                           ; Regs used in _WDT_Clearing: []
  4748  0002  0064               	clrwdt	;# 
  4749  0003  0008               	return
  4750  0004                     __end_of_WDT_Clearing:	
  4751                           
  4752                           	psect	text8
  4753  1A5C                     __ptext8:	
  4754 ;; *************** function _Temp_Main *****************
  4755 ;; Defined at:
  4756 ;;		line 51 in file "../src/OverTemperature_B1.c"
  4757 ;; Parameters:    Size  Location     Type
  4758 ;;		None
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;		None
  4761 ;; Return value:  Size  Location     Type
  4762 ;;		None               void
  4763 ;; Registers used:
  4764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4765 ;; Tracked objects:
  4766 ;;		On entry : 0/0
  4767 ;;		On exit  : 0/0
  4768 ;;		Unchanged: 0/0
  4769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4774 ;;Total ram usage:        0 bytes
  4775 ;; Hardware stack levels used:    1
  4776 ;; Hardware stack levels required when called:    7
  4777 ;; This function calls:
  4778 ;;		_setTemp_Main
  4779 ;; This function is called by:
  4780 ;;		_main
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           
  4785                           ;psect for function _Temp_Main
  4786  1A5C                     _Temp_Main:	
  4787                           
  4788                           ;OverTemperature_B1.c: 53: setTemp_Main();
  4789                           
  4790                           ;incstack = 0
  4791                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4792  1A5C  318D  25E2         	fcall	_setTemp_Main
  4793  1A5E  0008               	return
  4794  1A5F                     __end_of_Temp_Main:	
  4795                           
  4796                           	psect	text9
  4797  0DE2                     __ptext9:	
  4798 ;; *************** function _setTemp_Main *****************
  4799 ;; Defined at:
  4800 ;;		line 58 in file "../src/OverTemperature_B1.c"
  4801 ;; Parameters:    Size  Location     Type
  4802 ;;		None
  4803 ;; Auto vars:     Size  Location     Type
  4804 ;;		None
  4805 ;; Return value:  Size  Location     Type
  4806 ;;		None               void
  4807 ;; Registers used:
  4808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4809 ;; Tracked objects:
  4810 ;;		On entry : 0/0
  4811 ;;		On exit  : 0/0
  4812 ;;		Unchanged: 0/0
  4813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4816 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4817 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4818 ;;Total ram usage:        2 bytes
  4819 ;; Hardware stack levels used:    1
  4820 ;; Hardware stack levels required when called:    6
  4821 ;; This function calls:
  4822 ;;		_getMain_All_Error_Status
  4823 ;; This function is called by:
  4824 ;;		_Temp_Main
  4825 ;; This function uses a non-reentrant model
  4826 ;;
  4827                           
  4828                           
  4829                           ;psect for function _setTemp_Main
  4830  0DE2                     _setTemp_Main:	
  4831                           
  4832                           ;OverTemperature_B1.c: 59: if (Temp.Enable == 1) {
  4833                           
  4834                           ;incstack = 0
  4835                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4836  0DE2  0021               	movlb	1	; select bank1
  4837  0DE3  1C58               	btfss	_Temp^(0+128),0
  4838  0DE4  2E77               	goto	l1884
  4839                           
  4840                           ;OverTemperature_B1.c: 60: if (Temp.ADtoGO == 0) {
  4841  0DE5  1958               	btfsc	_Temp^(0+128),2
  4842  0DE6  2DF6               	goto	l10004
  4843                           
  4844                           ;OverTemperature_B1.c: 61: Temp.Time++;
  4845  0DE7  3001               	movlw	1
  4846  0DE8  07D9               	addwf	(_Temp^(0+128)+1),f
  4847  0DE9  3000               	movlw	0
  4848  0DEA  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  4849                           
  4850                           ;OverTemperature_B1.c: 62: if (Temp.Time >= 500) {
  4851  0DEB  3001               	movlw	1
  4852  0DEC  025A               	subwf	((_Temp+1)^(0+128)+1),w
  4853  0DED  30F4               	movlw	244
  4854  0DEE  1903               	skipnz
  4855  0DEF  0259               	subwf	(_Temp^(0+128)+1),w
  4856  0DF0  1C03               	skipc
  4857  0DF1  0008               	return
  4858                           
  4859                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  4860  0DF2  01D9               	clrf	(_Temp^(0+128)+1)
  4861  0DF3  01DA               	clrf	((_Temp+1)^(0+128)+1)
  4862                           
  4863                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  4864  0DF4  1558               	bsf	_Temp^(0+128),2
  4865                           
  4866                           ;OverTemperature_B1.c: 65: }
  4867                           ;OverTemperature_B1.c: 66: } else {
  4868  0DF5  0008               	return
  4869  0DF6                     l10004:	
  4870                           
  4871                           ;OverTemperature_B1.c: 67: if (getMain_All_Error_Status(2) == 0) {
  4872  0DF6  3002               	movlw	2
  4873  0DF7  3190  20E4  318D   	fcall	_getMain_All_Error_Status
  4874  0DFA  3800               	iorlw	0
  4875  0DFB  1D03               	skipz
  4876  0DFC  0008               	return
  4877                           
  4878                           ;OverTemperature_B1.c: 68: Temp.Time++;
  4879  0DFD  3001               	movlw	1
  4880  0DFE  0021               	movlb	1	; select bank1
  4881  0DFF  07D9               	addwf	(_Temp^(0+128)+1),f
  4882  0E00  3000               	movlw	0
  4883  0E01  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  4884                           
  4885                           ;OverTemperature_B1.c: 69: if (Temp.Time >= 5) {
  4886  0E02  3000               	movlw	0
  4887  0E03  025A               	subwf	((_Temp+1)^(0+128)+1),w
  4888  0E04  3005               	movlw	5
  4889  0E05  1903               	skipnz
  4890  0E06  0259               	subwf	(_Temp^(0+128)+1),w
  4891  0E07  1C03               	skipc
  4892  0E08  0008               	return
  4893                           
  4894                           ;OverTemperature_B1.c: 70: Temp.Time = 0;
  4895  0E09  01D9               	clrf	(_Temp^(0+128)+1)
  4896  0E0A  01DA               	clrf	((_Temp+1)^(0+128)+1)
  4897                           
  4898                           ;OverTemperature_B1.c: 71: if (Temp.GO == 1) {
  4899  0E0B  1E58               	btfss	_Temp^(0+128),4
  4900  0E0C  0008               	return
  4901                           
  4902                           ;OverTemperature_B1.c: 72: Temp.ADtoGO = 0;
  4903  0E0D  1158               	bcf	_Temp^(0+128),2
  4904                           
  4905                           ;OverTemperature_B1.c: 73: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4906  0E0E  300A               	movlw	10
  4907  0E0F  3ED8               	addlw	_Temp& (0+255)
  4908  0E10  0086               	movwf	6
  4909  0E11  0187               	clrf	7
  4910  0E12  3008               	movlw	8
  4911  0E13  3ED8               	addlw	_Temp& (0+255)
  4912  0E14  0084               	movwf	4
  4913  0E15  0185               	clrf	5
  4914  0E16  3F40               	moviw [0]fsr1
  4915  0E17  0700               	addwf	0,w
  4916  0E18  0020               	movlb	0	; select bank0
  4917  0E19  00A7               	movwf	??_setTemp_Main
  4918  0E1A  3101               	addfsr 0,1
  4919  0E1B  3F41               	moviw [1]fsr1
  4920  0E1C  3D00               	addwfc	0,w
  4921  0E1D  00A8               	movwf	??_setTemp_Main+1
  4922  0E1E  36A8               	lsrf	??_setTemp_Main+1,f
  4923  0E1F  0CA7               	rrf	??_setTemp_Main,f
  4924  0E20  0827               	movf	??_setTemp_Main,w
  4925  0E21  0021               	movlb	1	; select bank1
  4926  0E22  00DE               	movwf	(_Temp^(0+128)+6)
  4927  0E23  0020               	movlb	0	; select bank0
  4928  0E24  0828               	movf	??_setTemp_Main+1,w
  4929  0E25  0021               	movlb	1	; select bank1
  4930  0E26  00DF               	movwf	((_Temp+1)^(0+128)+6)
  4931                           
  4932                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 600;
  4933  0E27  3058               	movlw	88
  4934  0E28  00E6               	movwf	(_Temp^(0+128)+14)
  4935  0E29  3002               	movlw	2
  4936  0E2A  00E7               	movwf	(_Temp^(0+128)+15)
  4937                           
  4938                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 550;
  4939  0E2B  3026               	movlw	38
  4940  0E2C  00E8               	movwf	(_Temp^(0+128)+16)
  4941  0E2D  3002               	movlw	2
  4942  0E2E  00E9               	movwf	(_Temp^(0+128)+17)
  4943                           
  4944                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  4945  0E2F  1CD8               	btfss	_Temp^(0+128),1
  4946  0E30  2E46               	goto	l10034
  4947                           
  4948                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  4949  0E31  0867               	movf	((_Temp+1)^(0+128)+14),w
  4950  0E32  025F               	subwf	((_Temp+1)^(0+128)+6),w
  4951  0E33  1D03               	skipz
  4952  0E34  2E37               	goto	u11065
  4953  0E35  0866               	movf	(_Temp^(0+128)+14),w
  4954  0E36  025E               	subwf	(_Temp^(0+128)+6),w
  4955  0E37                     u11065:	
  4956  0E37  1C03               	skipc
  4957  0E38  2E5B               	goto	l10044
  4958                           
  4959                           ;OverTemperature_B1.c: 92: Temp.Count++;
  4960  0E39  3001               	movlw	1
  4961  0E3A  0020               	movlb	0	; select bank0
  4962  0E3B  00A7               	movwf	??_setTemp_Main
  4963  0E3C  0827               	movf	??_setTemp_Main,w
  4964  0E3D  0021               	movlb	1	; select bank1
  4965  0E3E  07DB               	addwf	(_Temp^(0+128)+3),f
  4966                           
  4967                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  4968  0E3F  3003               	movlw	3
  4969  0E40  025B               	subwf	(_Temp^(0+128)+3),w
  4970  0E41  1C03               	skipc
  4971  0E42  2E5C               	goto	l10046
  4972                           
  4973                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  4974  0E43  01DB               	clrf	(_Temp^(0+128)+3)
  4975                           
  4976                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  4977  0E44  10D8               	bcf	_Temp^(0+128),1
  4978                           
  4979                           ;OverTemperature_B1.c: 96: }
  4980                           ;OverTemperature_B1.c: 97: } else {
  4981  0E45  2E5C               	goto	l10046
  4982  0E46                     l10034:	
  4983                           ;OverTemperature_B1.c: 99: }
  4984                           ;OverTemperature_B1.c: 100: } else {
  4985                           
  4986                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  4987                           
  4988                           
  4989                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  4990  0E46  085F               	movf	((_Temp+1)^(0+128)+6),w
  4991  0E47  0269               	subwf	((_Temp+1)^(0+128)+16),w
  4992  0E48  1D03               	skipz
  4993  0E49  2E4C               	goto	u11085
  4994  0E4A  085E               	movf	(_Temp^(0+128)+6),w
  4995  0E4B  0268               	subwf	(_Temp^(0+128)+16),w
  4996  0E4C                     u11085:	
  4997  0E4C  1C03               	skipc
  4998  0E4D  2E5B               	goto	l10044
  4999                           
  5000                           ;OverTemperature_B1.c: 102: Temp.Count++;
  5001  0E4E  3001               	movlw	1
  5002  0E4F  0020               	movlb	0	; select bank0
  5003  0E50  00A7               	movwf	??_setTemp_Main
  5004  0E51  0827               	movf	??_setTemp_Main,w
  5005  0E52  0021               	movlb	1	; select bank1
  5006  0E53  07DB               	addwf	(_Temp^(0+128)+3),f
  5007                           
  5008                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  5009  0E54  3003               	movlw	3
  5010  0E55  025B               	subwf	(_Temp^(0+128)+3),w
  5011  0E56  1C03               	skipc
  5012  0E57  2E5C               	goto	l10046
  5013                           
  5014                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  5015  0E58  01DB               	clrf	(_Temp^(0+128)+3)
  5016                           
  5017                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  5018  0E59  14D8               	bsf	_Temp^(0+128),1
  5019                           
  5020                           ;OverTemperature_B1.c: 106: }
  5021                           ;OverTemperature_B1.c: 107: } else {
  5022  0E5A  2E5C               	goto	l10046
  5023  0E5B                     l10044:	
  5024                           
  5025                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5026  0E5B  01DB               	clrf	(_Temp^(0+128)+3)
  5027  0E5C                     l10046:	
  5028                           
  5029                           ;OverTemperature_B1.c: 109: }
  5030                           ;OverTemperature_B1.c: 110: }
  5031                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5032  0E5C  085F               	movf	((_Temp+1)^(0+128)+6),w
  5033  0E5D  0020               	movlb	0	; select bank0
  5034  0E5E  00A7               	movwf	??_setTemp_Main
  5035  0E5F  087B               	movf	_product,w
  5036  0E60  3E18               	addlw	24
  5037  0E61  0086               	movwf	6
  5038  0E62  3002               	movlw	2	; select bank4/5
  5039  0E63  0087               	movwf	7
  5040  0E64  0827               	movf	??_setTemp_Main,w
  5041  0E65  0081               	movwf	1
  5042                           
  5043                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5044  0E66  0021               	movlb	1	; select bank1
  5045  0E67  085E               	movf	(_Temp^(0+128)+6),w
  5046  0E68  0020               	movlb	0	; select bank0
  5047  0E69  00A7               	movwf	??_setTemp_Main
  5048  0E6A  087B               	movf	_product,w
  5049  0E6B  3E19               	addlw	25
  5050  0E6C  0086               	movwf	6
  5051  0E6D  3002               	movlw	2	; select bank4/5
  5052  0E6E  0087               	movwf	7
  5053  0E6F  0827               	movf	??_setTemp_Main,w
  5054  0E70  0081               	movwf	1
  5055                           
  5056                           ;OverTemperature_B1.c: 115: Temp.ADH[0] = 0;
  5057  0E71  0021               	movlb	1	; select bank1
  5058  0E72  01E0               	clrf	(_Temp^(0+128)+8)
  5059  0E73  01E1               	clrf	((_Temp+1)^(0+128)+8)
  5060                           
  5061                           ;OverTemperature_B1.c: 116: Temp.ADH[1] = 0;
  5062  0E74  01E2               	clrf	(_Temp^(0+128)+10)
  5063  0E75  01E3               	clrf	((_Temp+1)^(0+128)+10)
  5064                           
  5065                           ;OverTemperature_B1.c: 117: }
  5066                           ;OverTemperature_B1.c: 118: }
  5067                           ;OverTemperature_B1.c: 119: }
  5068                           ;OverTemperature_B1.c: 120: }
  5069                           ;OverTemperature_B1.c: 121: } else {
  5070  0E76  0008               	return
  5071  0E77                     l1884:	
  5072                           
  5073                           ;OverTemperature_B1.c: 122: if (myMain.PowerON == 1) {
  5074  0E77  1C20               	btfss	_myMain^(0+128),0
  5075  0E78  0008               	return
  5076                           
  5077                           ;OverTemperature_B1.c: 123: Temp.Enable = 1;
  5078  0E79  1458               	bsf	_Temp^(0+128),0
  5079  0E7A  0008               	return
  5080  0E7B                     __end_of_setTemp_Main:	
  5081                           
  5082                           	psect	text10
  5083  1A59                     __ptext10:	
  5084 ;; *************** function _Temp_Initialization *****************
  5085 ;; Defined at:
  5086 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;		None
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;		None
  5091 ;; Return value:  Size  Location     Type
  5092 ;;		None               void
  5093 ;; Registers used:
  5094 ;;		status,2, status,0, pclath, cstack
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;Total ram usage:        0 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:    6
  5107 ;; This function calls:
  5108 ;;		_setTemp_Initialization
  5109 ;; This function is called by:
  5110 ;;		_main
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           
  5115                           ;psect for function _Temp_Initialization
  5116  1A59                     _Temp_Initialization:	
  5117                           
  5118                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5119                           
  5120                           ;incstack = 0
  5121                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5122  1A59  319A  224F         	fcall	_setTemp_Initialization
  5123  1A5B  0008               	return
  5124  1A5C                     __end_of_Temp_Initialization:	
  5125                           
  5126                           	psect	text11
  5127  1A4F                     __ptext11:	
  5128 ;; *************** function _setTemp_Initialization *****************
  5129 ;; Defined at:
  5130 ;;		line 46 in file "../src/OverTemperature_B1.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;		None
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;		None
  5135 ;; Return value:  Size  Location     Type
  5136 ;;		None               void
  5137 ;; Registers used:
  5138 ;;		None
  5139 ;; Tracked objects:
  5140 ;;		On entry : 0/0
  5141 ;;		On exit  : 0/0
  5142 ;;		Unchanged: 0/0
  5143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5148 ;;Total ram usage:        0 bytes
  5149 ;; Hardware stack levels used:    1
  5150 ;; Hardware stack levels required when called:    5
  5151 ;; This function calls:
  5152 ;;		Nothing
  5153 ;; This function is called by:
  5154 ;;		_Temp_Initialization
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           
  5159                           ;psect for function _setTemp_Initialization
  5160  1A4F                     _setTemp_Initialization:	
  5161                           
  5162                           ;incstack = 0
  5163                           ; Regs used in _setTemp_Initialization: []
  5164  1A4F  0008               	return
  5165  1A50                     __end_of_setTemp_Initialization:	
  5166                           
  5167                           	psect	text12
  5168  1EC5                     __ptext12:	
  5169 ;; *************** function _Switch_Main *****************
  5170 ;; Defined at:
  5171 ;;		line 72 in file "../src/Switch_B1.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;		None
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  error           1   78[BANK0 ] unsigned char 
  5176 ;; Return value:  Size  Location     Type
  5177 ;;		None               void
  5178 ;; Registers used:
  5179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5187 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5189 ;;Total ram usage:        2 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; Hardware stack levels required when called:   12
  5192 ;; This function calls:
  5193 ;;		_TouchPower
  5194 ;;		_getMain_All_Error_Status
  5195 ;;		_setMain_Exception
  5196 ;;		_setSw_Main
  5197 ;; This function is called by:
  5198 ;;		_main
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           
  5203                           ;psect for function _Switch_Main
  5204  1EC5                     _Switch_Main:	
  5205                           
  5206                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5207                           
  5208                           ;incstack = 0
  5209                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5210  1EC5  3000               	movlw	0
  5211  1EC6  3190  20E4  319E   	fcall	_getMain_All_Error_Status
  5212  1EC9  0020               	movlb	0	; select bank0
  5213  1ECA  00ED               	movwf	??_Switch_Main
  5214  1ECB  086D               	movf	??_Switch_Main,w
  5215  1ECC  00EE               	movwf	Switch_Main@error
  5216                           
  5217                           ;Switch_B1.c: 74: if (error != 0) {
  5218  1ECD  086E               	movf	Switch_Main@error,w
  5219  1ECE  1903               	btfsc	3,2
  5220  1ECF  2ED5               	goto	l2642
  5221                           
  5222                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5223  1ED0  0021               	movlb	1	; select bank1
  5224  1ED1  1853               	btfsc	_SwDetect^(0+128),0
  5225  1ED2  2EDE               	goto	l10720
  5226                           
  5227                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5228  1ED3  1453               	bsf	_SwDetect^(0+128),0
  5229  1ED4  2ED9               	goto	L2
  5230  1ED5                     l2642:	
  5231                           ;Switch_B1.c: 80: }
  5232                           ;Switch_B1.c: 81: } else {
  5233                           
  5234                           ;Switch_B1.c: 78: setMain_Exception(error);
  5235                           
  5236                           
  5237                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5238  1ED5  0021               	movlb	1	; select bank1
  5239  1ED6  1C53               	btfss	_SwDetect^(0+128),0
  5240  1ED7  2EDE               	goto	l10720
  5241                           
  5242                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5243  1ED8  1053               	bcf	_SwDetect^(0+128),0
  5244  1ED9                     L2:	
  5245                           
  5246                           ;Switch_B1.c: 85: setMain_Exception(error);
  5247  1ED9  0020               	movlb	0	; select bank0
  5248  1EDA  086E               	movf	Switch_Main@error,w
  5249  1EDB  3189  2138  319E   	fcall	_setMain_Exception
  5250  1EDE                     l10720:	
  5251                           
  5252                           ;Switch_B1.c: 87: }
  5253                           ;Switch_B1.c: 88: }
  5254                           ;Switch_B1.c: 91: setSw_Main(1);
  5255  1EDE  3001               	movlw	1
  5256  1EDF  3183  23E1  319E   	fcall	_setSw_Main
  5257                           
  5258                           ;Switch_B1.c: 95: setSw_Main(2);
  5259  1EE2  3002               	movlw	2
  5260  1EE3  3183  23E1  319E   	fcall	_setSw_Main
  5261                           
  5262                           ;Switch_B1.c: 103: TouchPower();
  5263  1EE6  3187  27EB         	fcall	_TouchPower
  5264  1EE8  0008               	return
  5265  1EE9                     __end_of_Switch_Main:	
  5266                           
  5267                           	psect	text13
  5268  03E1                     __ptext13:	
  5269 ;; *************** function _setSw_Main *****************
  5270 ;; Defined at:
  5271 ;;		line 137 in file "../src/Switch_B1.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  sw              1    wreg     unsigned char 
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;  sw              1   72[BANK0 ] unsigned char 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;		None               void
  5278 ;; Registers used:
  5279 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;Total ram usage:        3 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:   10
  5292 ;; This function calls:
  5293 ;;		_SwPointSelect
  5294 ;;		_getSw_KeyStatus
  5295 ;;		_setBuz
  5296 ;;		_setDimmerLights_AdjControl
  5297 ;;		_setDimmerLights_SwOff
  5298 ;;		_setDimmerLights_SwOn
  5299 ;;		_setRF_Learn
  5300 ;; This function is called by:
  5301 ;;		_Switch_Main
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           
  5306                           ;psect for function _setSw_Main
  5307  03E1                     _setSw_Main:	
  5308                           
  5309                           ;incstack = 0
  5310                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5311                           ;setSw_Main@sw stored from wreg
  5312  03E1  0020               	movlb	0	; select bank0
  5313  03E2  00E8               	movwf	setSw_Main@sw
  5314                           
  5315                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5316  03E3  0868               	movf	setSw_Main@sw,w
  5317  03E4  319C  2485  3183   	fcall	_SwPointSelect
  5318                           
  5319                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5320  03E7  0879               	movf	_Sw,w
  5321  03E8  0086               	movwf	6
  5322  03E9  3001               	movlw	1	; select bank2/3
  5323  03EA  0087               	movwf	7
  5324  03EB  1C01               	btfss	1,0
  5325  03EC  2D47               	goto	l2652
  5326                           
  5327                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5328  03ED  0021               	movlb	1	; select bank1
  5329  03EE  1853               	btfsc	_SwDetect^(0+128),0
  5330  03EF  2C0B               	goto	l10186
  5331                           
  5332                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5333  03F0  0A79               	incf	_Sw,w
  5334  03F1  0086               	movwf	6
  5335  03F2  3001               	movlw	1	; select bank2/3
  5336  03F3  0087               	movwf	7
  5337  03F4  1081               	bcf	1,1
  5338                           
  5339                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5340  03F5  0020               	movlb	0	; select bank0
  5341  03F6  0868               	movf	setSw_Main@sw,w
  5342  03F7  319D  25E0  3183   	fcall	_getSw_KeyStatus
  5343  03FA  3A01               	xorlw	1
  5344  03FB  3000               	movlw	0
  5345  03FC  1903               	skipnz
  5346  03FD  3001               	movlw	1
  5347  03FE  0020               	movlb	0	; select bank0
  5348  03FF  00E6               	movwf	??_setSw_Main
  5349  0400  0879               	movf	_Sw,w
  5350  0401  0086               	movwf	6
  5351  0402  3001               	movlw	1	; select bank2/3
  5352  0403  0087               	movwf	7
  5353  0404  0DE6               	rlf	??_setSw_Main,f
  5354  0405  0801               	movf	1,w
  5355  0406  0666               	xorwf	??_setSw_Main,w
  5356  0407  39FD               	andlw	-3
  5357  0408  0666               	xorwf	??_setSw_Main,w
  5358  0409  0081               	movwf	1
  5359                           
  5360                           ;Switch_B1.c: 143: } else {
  5361  040A  2C20               	goto	l2654
  5362  040B                     l10186:	
  5363                           
  5364                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5365  040B  0A79               	incf	_Sw,w
  5366  040C  0086               	movwf	6
  5367  040D  3001               	movlw	1	; select bank2/3
  5368  040E  0087               	movwf	7
  5369  040F  1881               	btfsc	1,1
  5370  0410  2C20               	goto	l2654
  5371                           
  5372                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5373  0411  0A79               	incf	_Sw,w
  5374  0412  0086               	movwf	6
  5375  0413  3001               	movlw	1	; select bank2/3
  5376  0414  0087               	movwf	7
  5377  0415  1481               	bsf	1,1
  5378                           
  5379                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5380  0416  0879               	movf	_Sw,w
  5381  0417  0086               	movwf	6
  5382  0418  3001               	movlw	1	; select bank2/3
  5383  0419  0087               	movwf	7
  5384  041A  1081               	bcf	1,1
  5385                           
  5386                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5387  041B  0879               	movf	_Sw,w
  5388  041C  0086               	movwf	6
  5389  041D  3001               	movlw	1	; select bank2/3
  5390  041E  0087               	movwf	7
  5391  041F  1501               	bsf	1,2
  5392  0420                     l2654:	
  5393                           
  5394                           ;Switch_B1.c: 148: }
  5395                           ;Switch_B1.c: 149: }
  5396                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5397  0420  0879               	movf	_Sw,w
  5398  0421  0086               	movwf	6
  5399  0422  3001               	movlw	1	; select bank2/3
  5400  0423  0087               	movwf	7
  5401  0424  1C81               	btfss	1,1
  5402  0425  2CF0               	goto	l10236
  5403                           
  5404                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5405  0426  0879               	movf	_Sw,w
  5406  0427  0086               	movwf	6
  5407  0428  3001               	movlw	1	; select bank2/3
  5408  0429  0087               	movwf	7
  5409  042A  1901               	btfsc	1,2
  5410  042B  2C4E               	goto	l10202
  5411                           
  5412                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5413  042C  3001               	movlw	1
  5414  042D  0020               	movlb	0	; select bank0
  5415  042E  00E6               	movwf	??_setSw_Main
  5416  042F  0879               	movf	_Sw,w
  5417  0430  3E02               	addlw	2
  5418  0431  0086               	movwf	6
  5419  0432  3001               	movlw	1	; select bank2/3
  5420  0433  0087               	movwf	7
  5421  0434  0866               	movf	??_setSw_Main,w
  5422  0435  0781               	addwf	1,f
  5423                           
  5424                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5425  0436  0879               	movf	_Sw,w
  5426  0437  3E02               	addlw	2
  5427  0438  0086               	movwf	6
  5428  0439  3001               	movlw	1	; select bank2/3
  5429  043A  0087               	movwf	7
  5430  043B  3005               	movlw	5
  5431  043C  0201               	subwf	1,w
  5432  043D  1C03               	skipc
  5433  043E  0008               	return
  5434                           
  5435                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5436  043F  0879               	movf	_Sw,w
  5437  0440  3E02               	addlw	2
  5438  0441  0086               	movwf	6
  5439  0442  3001               	movlw	1	; select bank2/3
  5440  0443  0087               	movwf	7
  5441  0444  0181               	clrf	1
  5442                           
  5443                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5444  0445  0879               	movf	_Sw,w
  5445  0446  0086               	movwf	6
  5446  0447  3001               	movlw	1	; select bank2/3
  5447  0448  0087               	movwf	7
  5448  0449  1501               	bsf	1,2
  5449                           
  5450                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5451  044A  0868               	movf	setSw_Main@sw,w
  5452  044B  3193  2360         	fcall	_setDimmerLights_SwOn
  5453                           
  5454                           ;Switch_B1.c: 162: }
  5455                           ;Switch_B1.c: 163: } else {
  5456  044D  0008               	return
  5457  044E                     l10202:	
  5458                           
  5459                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5460  044E  0879               	movf	_Sw,w
  5461  044F  0086               	movwf	6
  5462  0450  3001               	movlw	1	; select bank2/3
  5463  0451  0087               	movwf	7
  5464  0452  1981               	btfsc	1,3
  5465  0453  2C80               	goto	l10212
  5466                           
  5467                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5468  0454  0879               	movf	_Sw,w
  5469  0455  3E03               	addlw	3
  5470  0456  0086               	movwf	6
  5471  0457  3001               	movlw	1	; select bank2/3
  5472  0458  0087               	movwf	7
  5473  0459  3001               	movlw	1
  5474  045A  0781               	addwf	1,f
  5475  045B  3141               	addfsr 1,1
  5476  045C  1803               	skipnc
  5477  045D  0A81               	incf	1,f
  5478                           
  5479                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5480  045E  0879               	movf	_Sw,w
  5481  045F  3E03               	addlw	3
  5482  0460  0086               	movwf	6
  5483  0461  3001               	movlw	1	; select bank2/3
  5484  0462  0087               	movwf	7
  5485  0463  3F40               	moviw [0]fsr1
  5486  0464  0020               	movlb	0	; select bank0
  5487  0465  00E6               	movwf	??_setSw_Main
  5488  0466  3F41               	moviw [1]fsr1
  5489  0467  00E7               	movwf	??_setSw_Main+1
  5490  0468  3000               	movlw	0
  5491  0469  0267               	subwf	??_setSw_Main+1,w
  5492  046A  3096               	movlw	150
  5493  046B  1903               	skipnz
  5494  046C  0266               	subwf	??_setSw_Main,w
  5495  046D  1C03               	skipc
  5496  046E  0008               	return
  5497                           
  5498                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5499  046F  0879               	movf	_Sw,w
  5500  0470  3E03               	addlw	3
  5501  0471  0086               	movwf	6
  5502  0472  3001               	movlw	1	; select bank2/3
  5503  0473  0087               	movwf	7
  5504  0474  3000               	movlw	0
  5505  0475  3FC0               	movwi [0]fsr1
  5506  0476  3FC1               	movwi [1]fsr1
  5507                           
  5508                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5509  0477  0879               	movf	_Sw,w
  5510  0478  0086               	movwf	6
  5511  0479  3001               	movlw	1	; select bank2/3
  5512  047A  0087               	movwf	7
  5513  047B  1581               	bsf	1,3
  5514                           
  5515                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5516  047C  0868               	movf	setSw_Main@sw,w
  5517  047D  3191  2180         	fcall	_setDimmerLights_AdjControl
  5518                           
  5519                           ;Switch_B1.c: 174: }
  5520                           ;Switch_B1.c: 175: } else {
  5521  047F  0008               	return
  5522  0480                     l10212:	
  5523                           
  5524                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5525  0480  0879               	movf	_Sw,w
  5526  0481  0086               	movwf	6
  5527  0482  3001               	movlw	1	; select bank2/3
  5528  0483  0087               	movwf	7
  5529  0484  1A01               	btfsc	1,4
  5530  0485  2CBE               	goto	l10226
  5531                           
  5532                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5533  0486  0879               	movf	_Sw,w
  5534  0487  3E05               	addlw	5
  5535  0488  0086               	movwf	6
  5536  0489  3001               	movlw	1	; select bank2/3
  5537  048A  0087               	movwf	7
  5538  048B  3001               	movlw	1
  5539  048C  0781               	addwf	1,f
  5540  048D  3141               	addfsr 1,1
  5541  048E  1803               	skipnc
  5542  048F  0A81               	incf	1,f
  5543                           
  5544                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5545  0490  0879               	movf	_Sw,w
  5546  0491  3E05               	addlw	5
  5547  0492  0086               	movwf	6
  5548  0493  3001               	movlw	1	; select bank2/3
  5549  0494  0087               	movwf	7
  5550  0495  3F40               	moviw [0]fsr1
  5551  0496  0020               	movlb	0	; select bank0
  5552  0497  00E6               	movwf	??_setSw_Main
  5553  0498  3F41               	moviw [1]fsr1
  5554  0499  00E7               	movwf	??_setSw_Main+1
  5555  049A  3000               	movlw	0
  5556  049B  0267               	subwf	??_setSw_Main+1,w
  5557  049C  3096               	movlw	150
  5558  049D  1903               	skipnz
  5559  049E  0266               	subwf	??_setSw_Main,w
  5560  049F  1C03               	skipc
  5561  04A0  0008               	return
  5562                           
  5563                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5564  04A1  0879               	movf	_Sw,w
  5565  04A2  3E05               	addlw	5
  5566  04A3  0086               	movwf	6
  5567  04A4  3001               	movlw	1	; select bank2/3
  5568  04A5  0087               	movwf	7
  5569  04A6  3000               	movlw	0
  5570  04A7  3FC0               	movwi [0]fsr1
  5571  04A8  3FC1               	movwi [1]fsr1
  5572                           
  5573                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5574  04A9  0879               	movf	_Sw,w
  5575  04AA  0086               	movwf	6
  5576  04AB  3001               	movlw	1	; select bank2/3
  5577  04AC  0087               	movwf	7
  5578  04AD  1601               	bsf	1,4
  5579                           
  5580                           ;Switch_B1.c: 183: setRF_Learn(1);
  5581  04AE  3001               	movlw	1
  5582  04AF  319C  2499  3183   	fcall	_setRF_Learn
  5583                           
  5584                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5585  04B2  0021               	movlb	1	; select bank1
  5586  04B3  1EA0               	btfss	_myMain^(0+128),5
  5587  04B4  0008               	return
  5588                           
  5589                           ;Switch_B1.c: 186: setBuz(2, 100);
  5590  04B5  3064               	movlw	100
  5591  04B6  0020               	movlb	0	; select bank0
  5592  04B7  00A9               	movwf	setBuz@time
  5593  04B8  3000               	movlw	0
  5594  04B9  00AA               	movwf	setBuz@time+1
  5595  04BA  3002               	movlw	2
  5596  04BB  3196  2632         	fcall	_setBuz
  5597                           
  5598                           ;Switch_B1.c: 187: }
  5599                           ;Switch_B1.c: 189: }
  5600                           ;Switch_B1.c: 190: } else {
  5601  04BD  0008               	return
  5602  04BE                     l10226:	
  5603                           
  5604                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5605  04BE  0879               	movf	_Sw,w
  5606  04BF  0086               	movwf	6
  5607  04C0  3001               	movlw	1	; select bank2/3
  5608  04C1  0087               	movwf	7
  5609  04C2  1A81               	btfsc	1,5
  5610  04C3  0008               	return
  5611                           
  5612                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5613  04C4  0879               	movf	_Sw,w
  5614  04C5  3E07               	addlw	7
  5615  04C6  0086               	movwf	6
  5616  04C7  3001               	movlw	1	; select bank2/3
  5617  04C8  0087               	movwf	7
  5618  04C9  3001               	movlw	1
  5619  04CA  0781               	addwf	1,f
  5620  04CB  3141               	addfsr 1,1
  5621  04CC  1803               	skipnc
  5622  04CD  0A81               	incf	1,f
  5623                           
  5624                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5625  04CE  0879               	movf	_Sw,w
  5626  04CF  3E07               	addlw	7
  5627  04D0  0086               	movwf	6
  5628  04D1  3001               	movlw	1	; select bank2/3
  5629  04D2  0087               	movwf	7
  5630  04D3  3F40               	moviw [0]fsr1
  5631  04D4  0020               	movlb	0	; select bank0
  5632  04D5  00E6               	movwf	??_setSw_Main
  5633  04D6  3F41               	moviw [1]fsr1
  5634  04D7  00E7               	movwf	??_setSw_Main+1
  5635  04D8  3001               	movlw	1
  5636  04D9  0267               	subwf	??_setSw_Main+1,w
  5637  04DA  302C               	movlw	44
  5638  04DB  1903               	skipnz
  5639  04DC  0266               	subwf	??_setSw_Main,w
  5640  04DD  1C03               	skipc
  5641  04DE  0008               	return
  5642                           
  5643                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5644  04DF  0879               	movf	_Sw,w
  5645  04E0  3E07               	addlw	7
  5646  04E1  0086               	movwf	6
  5647  04E2  3001               	movlw	1	; select bank2/3
  5648  04E3  0087               	movwf	7
  5649  04E4  3000               	movlw	0
  5650  04E5  3FC0               	movwi [0]fsr1
  5651  04E6  3FC1               	movwi [1]fsr1
  5652                           
  5653                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5654  04E7  0879               	movf	_Sw,w
  5655  04E8  0086               	movwf	6
  5656  04E9  3001               	movlw	1	; select bank2/3
  5657  04EA  0087               	movwf	7
  5658  04EB  1681               	bsf	1,5
  5659                           
  5660                           ;Switch_B1.c: 198: setRF_Learn(0);
  5661  04EC  3000               	movlw	0
  5662  04ED  319C  2499         	fcall	_setRF_Learn
  5663                           
  5664                           ;Switch_B1.c: 201: }
  5665                           ;Switch_B1.c: 202: }
  5666                           ;Switch_B1.c: 203: }
  5667                           ;Switch_B1.c: 204: }
  5668                           ;Switch_B1.c: 205: }
  5669                           ;Switch_B1.c: 206: } else {
  5670  04EF  0008               	return
  5671  04F0                     l10236:	
  5672                           
  5673                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5674  04F0  0879               	movf	_Sw,w
  5675  04F1  0086               	movwf	6
  5676  04F2  3001               	movlw	1	; select bank2/3
  5677  04F3  0087               	movwf	7
  5678  04F4  1D01               	btfss	1,2
  5679  04F5  0008               	return
  5680                           
  5681                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5682  04F6  3001               	movlw	1
  5683  04F7  0020               	movlb	0	; select bank0
  5684  04F8  00E6               	movwf	??_setSw_Main
  5685  04F9  0879               	movf	_Sw,w
  5686  04FA  3E02               	addlw	2
  5687  04FB  0086               	movwf	6
  5688  04FC  3001               	movlw	1	; select bank2/3
  5689  04FD  0087               	movwf	7
  5690  04FE  0866               	movf	??_setSw_Main,w
  5691  04FF  0781               	addwf	1,f
  5692                           
  5693                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5694  0500  0879               	movf	_Sw,w
  5695  0501  3E02               	addlw	2
  5696  0502  0086               	movwf	6
  5697  0503  3001               	movlw	1	; select bank2/3
  5698  0504  0087               	movwf	7
  5699  0505  3005               	movlw	5
  5700  0506  0201               	subwf	1,w
  5701  0507  1C03               	skipc
  5702  0508  0008               	return
  5703                           
  5704                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5705  0509  0879               	movf	_Sw,w
  5706  050A  3E02               	addlw	2
  5707  050B  0086               	movwf	6
  5708  050C  3001               	movlw	1	; select bank2/3
  5709  050D  0087               	movwf	7
  5710  050E  0181               	clrf	1
  5711                           
  5712                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5713  050F  0879               	movf	_Sw,w
  5714  0510  0086               	movwf	6
  5715  0511  3001               	movlw	1	; select bank2/3
  5716  0512  0087               	movwf	7
  5717  0513  1101               	bcf	1,2
  5718                           
  5719                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5720  0514  0879               	movf	_Sw,w
  5721  0515  3E03               	addlw	3
  5722  0516  0086               	movwf	6
  5723  0517  3001               	movlw	1	; select bank2/3
  5724  0518  0087               	movwf	7
  5725  0519  3000               	movlw	0
  5726  051A  3FC0               	movwi [0]fsr1
  5727  051B  3FC1               	movwi [1]fsr1
  5728                           
  5729                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5730  051C  0879               	movf	_Sw,w
  5731  051D  0086               	movwf	6
  5732  051E  3001               	movlw	1	; select bank2/3
  5733  051F  0087               	movwf	7
  5734  0520  1181               	bcf	1,3
  5735                           
  5736                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5737  0521  0879               	movf	_Sw,w
  5738  0522  3E05               	addlw	5
  5739  0523  0086               	movwf	6
  5740  0524  3001               	movlw	1	; select bank2/3
  5741  0525  0087               	movwf	7
  5742  0526  3000               	movlw	0
  5743  0527  3FC0               	movwi [0]fsr1
  5744  0528  3FC1               	movwi [1]fsr1
  5745                           
  5746                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5747  0529  0879               	movf	_Sw,w
  5748  052A  0086               	movwf	6
  5749  052B  3001               	movlw	1	; select bank2/3
  5750  052C  0087               	movwf	7
  5751  052D  1201               	bcf	1,4
  5752                           
  5753                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5754  052E  0879               	movf	_Sw,w
  5755  052F  3E07               	addlw	7
  5756  0530  0086               	movwf	6
  5757  0531  3001               	movlw	1	; select bank2/3
  5758  0532  0087               	movwf	7
  5759  0533  3000               	movlw	0
  5760  0534  3FC0               	movwi [0]fsr1
  5761  0535  3FC1               	movwi [1]fsr1
  5762                           
  5763                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5764  0536  0879               	movf	_Sw,w
  5765  0537  0086               	movwf	6
  5766  0538  3001               	movlw	1	; select bank2/3
  5767  0539  0087               	movwf	7
  5768  053A  1281               	bcf	1,5
  5769                           
  5770                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5771  053B  0021               	movlb	1	; select bank1
  5772  053C  1853               	btfsc	_SwDetect^(0+128),0
  5773  053D  2D43               	goto	l10262
  5774                           
  5775                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5776  053E  0020               	movlb	0	; select bank0
  5777  053F  0868               	movf	setSw_Main@sw,w
  5778  0540  3197  2740  3183   	fcall	_setDimmerLights_SwOff
  5779  0543                     l10262:	
  5780                           
  5781                           ;Switch_B1.c: 221: }
  5782                           ;Switch_B1.c: 224: setRF_Learn(0);
  5783  0543  3000               	movlw	0
  5784  0544  319C  2499         	fcall	_setRF_Learn
  5785                           
  5786                           ;Switch_B1.c: 226: }
  5787                           ;Switch_B1.c: 227: }
  5788                           ;Switch_B1.c: 228: }
  5789                           ;Switch_B1.c: 229: } else {
  5790  0546  0008               	return
  5791  0547                     l2652:	
  5792                           
  5793                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5794  0547  0021               	movlb	1	; select bank1
  5795  0548  1C20               	btfss	_myMain^(0+128),0
  5796  0549  0008               	return
  5797                           
  5798                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5799  054A  0879               	movf	_Sw,w
  5800  054B  0086               	movwf	6
  5801  054C  3001               	movlw	1	; select bank2/3
  5802  054D  0087               	movwf	7
  5803  054E  1401               	bsf	1,0
  5804  054F  0008               	return
  5805  0550                     __end_of_setSw_Main:	
  5806                           
  5807                           	psect	text14
  5808  1C99                     __ptext14:	
  5809 ;; *************** function _setRF_Learn *****************
  5810 ;; Defined at:
  5811 ;;		line 23 in file "../src/RF_Control_B1.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;  command         1    wreg     unsigned char 
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;  command         1    1[BANK0 ] unsigned char 
  5816 ;; Return value:  Size  Location     Type
  5817 ;;		None               void
  5818 ;; Registers used:
  5819 ;;		wreg, status,2, status,0
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5827 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5829 ;;Total ram usage:        2 bytes
  5830 ;; Hardware stack levels used:    1
  5831 ;; Hardware stack levels required when called:    5
  5832 ;; This function calls:
  5833 ;;		Nothing
  5834 ;; This function is called by:
  5835 ;;		_setSw_Main
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839                           
  5840                           ;psect for function _setRF_Learn
  5841  1C99                     _setRF_Learn:	
  5842                           
  5843                           ;incstack = 0
  5844                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5845                           ;setRF_Learn@command stored from wreg
  5846  1C99  0020               	movlb	0	; select bank0
  5847  1C9A  00A1               	movwf	setRF_Learn@command
  5848                           
  5849                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5850  1C9B  0821               	movf	setRF_Learn@command,w
  5851  1C9C  3A01               	xorlw	1
  5852  1C9D  3000               	movlw	0
  5853  1C9E  1903               	skipnz
  5854  1C9F  3001               	movlw	1
  5855  1CA0  00A0               	movwf	??_setRF_Learn
  5856  1CA1  0EA0               	swapf	??_setRF_Learn,f
  5857  1CA2  0DA0               	rlf	??_setRF_Learn,f
  5858  1CA3  0DA0               	rlf	??_setRF_Learn,f
  5859  1CA4  0021               	movlb	1	; select bank1
  5860  1CA5  083C               	movf	_RF1^(0+128),w
  5861  1CA6  0020               	movlb	0	; select bank0
  5862  1CA7  0620               	xorwf	??_setRF_Learn,w
  5863  1CA8  39BF               	andlw	-65
  5864  1CA9  0620               	xorwf	??_setRF_Learn,w
  5865  1CAA  0021               	movlb	1	; select bank1
  5866  1CAB  00BC               	movwf	_RF1^(0+128)
  5867  1CAC  0008               	return
  5868  1CAD                     __end_of_setRF_Learn:	
  5869                           
  5870                           	psect	text15
  5871  1180                     __ptext15:	
  5872 ;; *************** function _setDimmerLights_AdjControl *****************
  5873 ;; Defined at:
  5874 ;;		line 604 in file "../src/Dimmer_B1.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;  sw              1    wreg     unsigned char 
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;  sw              1    8[BANK0 ] unsigned char 
  5879 ;;  idle            1    6[BANK0 ] unsigned char 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;		None               void
  5882 ;; Registers used:
  5883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5890 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;Total ram usage:        4 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    7
  5896 ;; This function calls:
  5897 ;;		_DimmerLightsPointSelect
  5898 ;;		_getAll_DimmerLights_AdjGO
  5899 ;;		_setDimmerLights_TriggerAdj
  5900 ;; This function is called by:
  5901 ;;		_setSw_Main
  5902 ;; This function uses a non-reentrant model
  5903 ;;
  5904                           
  5905                           
  5906                           ;psect for function _setDimmerLights_AdjControl
  5907  1180                     _setDimmerLights_AdjControl:	
  5908                           
  5909                           ;incstack = 0
  5910                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5911                           ;setDimmerLights_AdjControl@sw stored from wreg
  5912  1180  0020               	movlb	0	; select bank0
  5913  1181  00A8               	movwf	setDimmerLights_AdjControl@sw
  5914                           
  5915                           ;Dimmer_B1.c: 605: DimmerLightsPointSelect(sw);
  5916  1182  0828               	movf	setDimmerLights_AdjControl@sw,w
  5917  1183  319C  2411  3191   	fcall	_DimmerLightsPointSelect
  5918                           
  5919                           ;Dimmer_B1.c: 606: char idle = 0;
  5920  1186  0020               	movlb	0	; select bank0
  5921  1187  01A6               	clrf	setDimmerLights_AdjControl@idle
  5922                           
  5923                           ;Dimmer_B1.c: 608: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  5924  1188  01A7               	clrf	_setDimmerLights_AdjControl$2589
  5925  1189  319B  2384  3191   	fcall	_getAll_DimmerLights_AdjGO
  5926  118C  3A01               	xorlw	1
  5927  118D  1D03               	skipz
  5928  118E  2995               	goto	l9474
  5929  118F  0021               	movlb	1	; select bank1
  5930  1190  1CC8               	btfss	_Dimmer^(0+128),1
  5931  1191  2995               	goto	l9474
  5932  1192  0020               	movlb	0	; select bank0
  5933  1193  01A7               	clrf	_setDimmerLights_AdjControl$2589
  5934  1194  0AA7               	incf	_setDimmerLights_AdjControl$2589,f
  5935  1195                     l9474:	
  5936  1195  0020               	movlb	0	; select bank0
  5937  1196  0827               	movf	_setDimmerLights_AdjControl$2589,w
  5938  1197  00A5               	movwf	??_setDimmerLights_AdjControl
  5939  1198  0825               	movf	??_setDimmerLights_AdjControl,w
  5940  1199  00A6               	movwf	setDimmerLights_AdjControl@idle
  5941                           
  5942                           ;Dimmer_B1.c: 610: if (idle == 0) {
  5943  119A  08A6               	movf	setDimmerLights_AdjControl@idle,f
  5944  119B  1D03               	skipz
  5945  119C  0008               	return
  5946                           
  5947                           ;Dimmer_B1.c: 611: if (DimmerLights->SwFlag == 1) {
  5948  119D  0877               	movf	_DimmerLights,w
  5949  119E  3E09               	addlw	9
  5950  119F  0086               	movwf	6
  5951  11A0  3001               	movlw	1	; select bank2/3
  5952  11A1  0087               	movwf	7
  5953  11A2  1F01               	btfss	1,6
  5954  11A3  0008               	return
  5955                           
  5956                           ;Dimmer_B1.c: 612: DimmerLights->SwAdj = 1;
  5957  11A4  0877               	movf	_DimmerLights,w
  5958  11A5  3E09               	addlw	9
  5959  11A6  0086               	movwf	6
  5960  11A7  3001               	movlw	1	; select bank2/3
  5961  11A8  0087               	movwf	7
  5962  11A9  1781               	bsf	1,7
  5963                           
  5964                           ;Dimmer_B1.c: 613: DimmerLights->Status = 1;
  5965  11AA  0877               	movf	_DimmerLights,w
  5966  11AB  0086               	movwf	6
  5967  11AC  3001               	movlw	1	; select bank2/3
  5968  11AD  0087               	movwf	7
  5969  11AE  1681               	bsf	1,5
  5970                           
  5971                           ;Dimmer_B1.c: 614: setDimmerLights_TriggerAdj(sw, 1);
  5972  11AF  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5973  11B0  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5974  11B1  0828               	movf	setDimmerLights_AdjControl@sw,w
  5975  11B2  319D  25FF         	fcall	_setDimmerLights_TriggerAdj
  5976  11B4  0008               	return
  5977  11B5                     __end_of_setDimmerLights_AdjControl:	
  5978                           
  5979                           	psect	text16
  5980  1DE0                     __ptext16:	
  5981 ;; *************** function _getSw_KeyStatus *****************
  5982 ;; Defined at:
  5983 ;;		line 515 in file "../src/Dimmer_B1.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;  sw              1    wreg     unsigned char 
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;  sw              1    4[BANK0 ] unsigned char 
  5988 ;;  status          1    3[BANK0 ] unsigned char 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  1    wreg      unsigned char 
  5991 ;; Registers used:
  5992 ;;		wreg, status,2
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;Total ram usage:        5 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    5
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_setSw_Main
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function _getSw_KeyStatus
  6014  1DE0                     _getSw_KeyStatus:	
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6018                           ;getSw_KeyStatus@sw stored from wreg
  6019  1DE0  0020               	movlb	0	; select bank0
  6020  1DE1  00A4               	movwf	getSw_KeyStatus@sw
  6021                           
  6022                           ;Dimmer_B1.c: 516: char status = 0;
  6023  1DE2  01A3               	clrf	getSw_KeyStatus@status
  6024                           
  6025                           ;Dimmer_B1.c: 528: if (sw == 1) {
  6026  1DE3  0824               	movf	getSw_KeyStatus@sw,w
  6027  1DE4  3A01               	xorlw	1
  6028  1DE5  1D03               	skipz
  6029  1DE6  2DEF               	goto	l9448
  6030                           
  6031                           ;Dimmer_B1.c: 529: status = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  6032  1DE7  01A1               	clrf	_getSw_KeyStatus$2565
  6033  1DE8  0AA1               	incf	_getSw_KeyStatus$2565,f
  6034  1DE9  1F0C               	btfss	12,6	;volatile
  6035  1DEA  1A0C               	btfsc	12,4	;volatile
  6036  1DEB  2DED               	goto	l9446
  6037  1DEC  01A1               	clrf	_getSw_KeyStatus$2565
  6038  1DED                     l9446:	
  6039  1DED  0821               	movf	_getSw_KeyStatus$2565,w
  6040  1DEE  2DFA               	goto	L3
  6041  1DEF                     l9448:	
  6042                           ;Dimmer_B1.c: 530: } else if (sw == 2) {
  6043                           
  6044  1DEF  0824               	movf	getSw_KeyStatus@sw,w
  6045  1DF0  3A02               	xorlw	2
  6046  1DF1  1D03               	skipz
  6047  1DF2  2DFD               	goto	l9458
  6048                           
  6049                           ;Dimmer_B1.c: 531: status = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  6050  1DF3  01A2               	clrf	_getSw_KeyStatus$2566
  6051  1DF4  0AA2               	incf	_getSw_KeyStatus$2566,f
  6052  1DF5  1C0C               	btfss	12,0	;volatile
  6053  1DF6  188D               	btfsc	13,1	;volatile
  6054  1DF7  2DF9               	goto	l9456
  6055  1DF8  01A2               	clrf	_getSw_KeyStatus$2566
  6056  1DF9                     l9456:	
  6057  1DF9  0822               	movf	_getSw_KeyStatus$2566,w
  6058  1DFA                     L3:	
  6059  1DFA  00A0               	movwf	??_getSw_KeyStatus
  6060  1DFB  0820               	movf	??_getSw_KeyStatus,w
  6061  1DFC  00A3               	movwf	getSw_KeyStatus@status
  6062  1DFD                     l9458:	
  6063                           
  6064                           ;Dimmer_B1.c: 532: }
  6065                           ;Dimmer_B1.c: 539: return status;
  6066  1DFD  0823               	movf	getSw_KeyStatus@status,w
  6067  1DFE  0008               	return
  6068  1DFF                     __end_of_getSw_KeyStatus:	
  6069                           
  6070                           	psect	text17
  6071  1C85                     __ptext17:	
  6072 ;; *************** function _SwPointSelect *****************
  6073 ;; Defined at:
  6074 ;;		line 25 in file "../src/Switch_B1.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  sw              1    wreg     unsigned char 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;  sw              1    1[BANK0 ] unsigned char 
  6079 ;; Return value:  Size  Location     Type
  6080 ;;		None               void
  6081 ;; Registers used:
  6082 ;;		wreg
  6083 ;; Tracked objects:
  6084 ;;		On entry : 0/0
  6085 ;;		On exit  : 0/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;Total ram usage:        2 bytes
  6093 ;; Hardware stack levels used:    1
  6094 ;; Hardware stack levels required when called:    5
  6095 ;; This function calls:
  6096 ;;		Nothing
  6097 ;; This function is called by:
  6098 ;;		_setSw_Main
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           
  6103                           ;psect for function _SwPointSelect
  6104  1C85                     _SwPointSelect:	
  6105                           
  6106                           ;incstack = 0
  6107                           ; Regs used in _SwPointSelect: [wreg]
  6108                           ;SwPointSelect@sw stored from wreg
  6109  1C85  0020               	movlb	0	; select bank0
  6110  1C86  00A1               	movwf	SwPointSelect@sw
  6111                           
  6112                           ;Switch_B1.c: 28: if (sw == 1) {
  6113  1C87  0821               	movf	SwPointSelect@sw,w
  6114  1C88  3A01               	xorlw	1
  6115  1C89  1D03               	skipz
  6116  1C8A  2C90               	goto	l9668
  6117                           
  6118                           ;Switch_B1.c: 29: Sw = &Sw1;
  6119  1C8B  3054               	movlw	_Sw1& (0+255)
  6120  1C8C  00A0               	movwf	??_SwPointSelect
  6121  1C8D  0820               	movf	??_SwPointSelect,w
  6122  1C8E  00F9               	movwf	_Sw
  6123                           
  6124                           ;Switch_B1.c: 30: }
  6125  1C8F  0008               	return
  6126  1C90                     l9668:	
  6127                           
  6128                           ;Switch_B1.c: 33: else if (sw == 2) {
  6129  1C90  0821               	movf	SwPointSelect@sw,w
  6130  1C91  3A02               	xorlw	2
  6131  1C92  1D03               	skipz
  6132  1C93  0008               	return
  6133                           
  6134                           ;Switch_B1.c: 34: Sw = &Sw2;
  6135  1C94  30DC               	movlw	_Sw2& (0+255)
  6136  1C95  00A0               	movwf	??_SwPointSelect
  6137  1C96  0820               	movf	??_SwPointSelect,w
  6138  1C97  00F9               	movwf	_Sw
  6139  1C98  0008               	return
  6140  1C99                     __end_of_SwPointSelect:	
  6141                           
  6142                           	psect	text18
  6143  0938                     __ptext18:	
  6144 ;; *************** function _setMain_Exception *****************
  6145 ;; Defined at:
  6146 ;;		line 276 in file "../src/Main_B1.c"
  6147 ;; Parameters:    Size  Location     Type
  6148 ;;  command         1    wreg     unsigned char 
  6149 ;; Auto vars:     Size  Location     Type
  6150 ;;  command         1    4[BANK1 ] unsigned char 
  6151 ;;  status          1    3[BANK1 ] unsigned char 
  6152 ;;  buz             1    0[BANK1 ] unsigned char 
  6153 ;; Return value:  Size  Location     Type
  6154 ;;		None               void
  6155 ;; Registers used:
  6156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6157 ;; Tracked objects:
  6158 ;;		On entry : 0/0
  6159 ;;		On exit  : 0/0
  6160 ;;		Unchanged: 0/0
  6161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6164 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6165 ;;      Totals:         0       2       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6166 ;;Total ram usage:        7 bytes
  6167 ;; Hardware stack levels used:    1
  6168 ;; Hardware stack levels required when called:   11
  6169 ;; This function calls:
  6170 ;;		_getDimmerLights_Line
  6171 ;;		_getMain_LightsStatus
  6172 ;;		_setBuz
  6173 ;;		_setDimmerLights_ErrorClose
  6174 ;;		_setLED
  6175 ;; This function is called by:
  6176 ;;		_Switch_Main
  6177 ;; This function uses a non-reentrant model
  6178 ;;
  6179                           
  6180                           
  6181                           ;psect for function _setMain_Exception
  6182  0938                     _setMain_Exception:	
  6183                           
  6184                           ;incstack = 0
  6185                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6186                           ;setMain_Exception@command stored from wreg
  6187  0938  0021               	movlb	1	; select bank1
  6188  0939  00EE               	movwf	setMain_Exception@command^(0+128)
  6189                           
  6190                           ;Main_B1.c: 277: char status = 0, buz = 0;
  6191  093A  01ED               	clrf	setMain_Exception@status^(0+128)
  6192  093B  01EA               	clrf	setMain_Exception@buz^(0+128)
  6193                           
  6194                           ;Main_B1.c: 292: status = command == 3 ? getDimmerLights_Line() : 255;
  6195  093C  086E               	movf	setMain_Exception@command^(0+128),w
  6196  093D  3A03               	xorlw	3
  6197  093E  1903               	skipnz
  6198  093F  2945               	goto	l9936
  6199  0940  30FF               	movlw	255
  6200  0941  00EB               	movwf	_setMain_Exception$3936^(0+128)
  6201  0942  3000               	movlw	0
  6202  0943  00EC               	movwf	(_setMain_Exception$3936^(0+128)+1)
  6203  0944  2952               	goto	l9938
  6204  0945                     l9936:	
  6205  0945  319C  244A  3189   	fcall	_getDimmerLights_Line
  6206  0948  0020               	movlb	0	; select bank0
  6207  0949  00EB               	movwf	??_setMain_Exception
  6208  094A  01EC               	clrf	??_setMain_Exception+1
  6209  094B  086B               	movf	??_setMain_Exception,w
  6210  094C  0021               	movlb	1	; select bank1
  6211  094D  00EB               	movwf	_setMain_Exception$3936^(0+128)
  6212  094E  0020               	movlb	0	; select bank0
  6213  094F  086C               	movf	??_setMain_Exception+1,w
  6214  0950  0021               	movlb	1	; select bank1
  6215  0951  00EC               	movwf	(_setMain_Exception$3936+1)^(0+128)
  6216  0952                     l9938:	
  6217  0952  086B               	movf	_setMain_Exception$3936^(0+128),w
  6218  0953  0020               	movlb	0	; select bank0
  6219  0954  00EB               	movwf	??_setMain_Exception
  6220  0955  086B               	movf	??_setMain_Exception,w
  6221  0956  0021               	movlb	1	; select bank1
  6222  0957  00ED               	movwf	setMain_Exception@status^(0+128)
  6223                           
  6224                           ;Main_B1.c: 294: if (command == 0) {
  6225  0958  08EE               	movf	setMain_Exception@command^(0+128),f
  6226  0959  1D03               	skipz
  6227  095A  295D               	goto	l9944
  6228                           
  6229                           ;Main_B1.c: 295: setLED(99, 10);
  6230  095B  300A               	movlw	10
  6231  095C  295E               	goto	L4
  6232  095D                     l9944:	
  6233                           ;Main_B1.c: 296: } else {
  6234                           
  6235                           
  6236                           ;Main_B1.c: 297: setLED(99, 11);
  6237  095D  300B               	movlw	11
  6238  095E                     L4:	
  6239  095E  0020               	movlb	0	; select bank0
  6240  095F  00EB               	movwf	??_setMain_Exception
  6241  0960  086B               	movf	??_setMain_Exception,w
  6242  0961  00A2               	movwf	setLED@command
  6243  0962  3063               	movlw	99
  6244  0963  3188  20D7  3189   	fcall	_setLED
  6245                           
  6246                           ;Main_B1.c: 298: }
  6247                           ;Main_B1.c: 300: if (command != 0) {
  6248  0966  0021               	movlb	1	; select bank1
  6249  0967  086E               	movf	setMain_Exception@command^(0+128),w
  6250  0968  1903               	btfsc	3,2
  6251  0969  0008               	return
  6252                           
  6253                           ;Main_B1.c: 301: switch (command) {
  6254  096A  298B               	goto	l9960
  6255  096B                     l9950:	
  6256                           ;Main_B1.c: 302: case 2:
  6257                           
  6258                           
  6259                           ;Main_B1.c: 303: if (getMain_LightsStatus() == 1) {
  6260  096B  3190  2089  3189   	fcall	_getMain_LightsStatus
  6261  096E  3A01               	xorlw	1
  6262  096F  1D03               	skipz
  6263  0970  2994               	goto	l9962
  6264                           
  6265                           ;Main_B1.c: 304: setBuz(10, 300);
  6266  0971  302C               	movlw	44
  6267  0972  0020               	movlb	0	; select bank0
  6268  0973  00A9               	movwf	setBuz@time
  6269  0974  3001               	movlw	1
  6270  0975  00AA               	movwf	setBuz@time+1
  6271  0976  300A               	movlw	10
  6272  0977  3196  2632  3189   	fcall	_setBuz
  6273                           
  6274                           ;Main_B1.c: 305: }
  6275                           ;Main_B1.c: 306: break;
  6276  097A  2994               	goto	l9962
  6277  097B                     l9954:	
  6278                           ;Main_B1.c: 307: case 3:
  6279                           
  6280                           
  6281                           ;Main_B1.c: 308: if (getMain_LightsStatus() == 1) {
  6282  097B  3190  2089  3189   	fcall	_getMain_LightsStatus
  6283  097E  3A01               	xorlw	1
  6284  097F  1D03               	skipz
  6285  0980  2994               	goto	l9962
  6286                           
  6287                           ;Main_B1.c: 309: setBuz(5, 300);
  6288  0981  302C               	movlw	44
  6289  0982  0020               	movlb	0	; select bank0
  6290  0983  00A9               	movwf	setBuz@time
  6291  0984  3001               	movlw	1
  6292  0985  00AA               	movwf	setBuz@time+1
  6293  0986  3005               	movlw	5
  6294  0987  3196  2632  3189   	fcall	_setBuz
  6295                           
  6296                           ;Main_B1.c: 312: }
  6297                           
  6298                           ;Main_B1.c: 310: }
  6299                           ;Main_B1.c: 311: break;
  6300  098A  2994               	goto	l9962
  6301  098B                     l9960:	
  6302  098B  0021               	movlb	1	; select bank1
  6303  098C  086E               	movf	setMain_Exception@command^(0+128),w
  6304                           
  6305                           ; Switch size 1, requested type "space"
  6306                           ; Number of cases is 2, Range of values is 2 to 3
  6307                           ; switch strategies available:
  6308                           ; Name         Instructions Cycles
  6309                           ; simple_byte            7     4 (average)
  6310                           ; direct_byte           13     9 (fixed)
  6311                           ; jumptable            263     9 (fixed)
  6312                           ;	Chosen strategy is simple_byte
  6313  098D  3A02               	xorlw	2	; case 2
  6314  098E  1903               	skipnz
  6315  098F  296B               	goto	l9950
  6316  0990  3A01               	xorlw	1	; case 3
  6317  0991  1903               	skipnz
  6318  0992  297B               	goto	l9954
  6319  0993  2994               	goto	l9962
  6320  0994                     l9962:	
  6321                           
  6322                           ;Main_B1.c: 313: setDimmerLights_ErrorClose(status);
  6323  0994  0021               	movlb	1	; select bank1
  6324  0995  086D               	movf	setMain_Exception@status^(0+128),w
  6325  0996  3196  268B         	fcall	_setDimmerLights_ErrorClose
  6326  0998  0021               	movlb	1	; select bank1
  6327  0999  0008               	return
  6328  099A                     __end_of_setMain_Exception:	
  6329                           
  6330                           	psect	text19
  6331  168B                     __ptext19:	
  6332 ;; *************** function _setDimmerLights_ErrorClose *****************
  6333 ;; Defined at:
  6334 ;;		line 620 in file "../src/Dimmer_B1.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;  lights          1    wreg     unsigned char 
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;  lights          1   72[BANK0 ] unsigned char 
  6339 ;;  i               2   73[BANK0 ] int 
  6340 ;;  count           1   71[BANK0 ] unsigned char 
  6341 ;; Return value:  Size  Location     Type
  6342 ;;		None               void
  6343 ;; Registers used:
  6344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6345 ;; Tracked objects:
  6346 ;;		On entry : 0/0
  6347 ;;		On exit  : 0/0
  6348 ;;		Unchanged: 0/0
  6349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6354 ;;Total ram usage:        5 bytes
  6355 ;; Hardware stack levels used:    1
  6356 ;; Hardware stack levels required when called:   10
  6357 ;; This function calls:
  6358 ;;		_DimmerLightsPointSelect
  6359 ;;		_getDimmerLights_Status
  6360 ;;		_setDimmerLights_SwOff
  6361 ;; This function is called by:
  6362 ;;		_setMain_Exception
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           
  6367                           ;psect for function _setDimmerLights_ErrorClose
  6368  168B                     _setDimmerLights_ErrorClose:	
  6369                           
  6370                           ;incstack = 0
  6371                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6372                           ;setDimmerLights_ErrorClose@lights stored from wreg
  6373  168B  0020               	movlb	0	; select bank0
  6374  168C  00E8               	movwf	setDimmerLights_ErrorClose@lights
  6375                           
  6376                           ;Dimmer_B1.c: 621: if (lights == 255) {
  6377  168D  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6378  168E  3AFF               	xorlw	255
  6379  168F  1D03               	skipz
  6380  1690  2EC8               	goto	l9502
  6381                           
  6382                           ;Dimmer_B1.c: 626: char count = 2;
  6383  1691  3002               	movlw	2
  6384  1692  00E6               	movwf	??_setDimmerLights_ErrorClose
  6385  1693  0866               	movf	??_setDimmerLights_ErrorClose,w
  6386  1694  00E7               	movwf	setDimmerLights_ErrorClose@count
  6387                           
  6388                           ;Dimmer_B1.c: 631: for (int i = 0; i < count; i++) {
  6389  1695  01E9               	clrf	setDimmerLights_ErrorClose@i
  6390  1696  01EA               	clrf	setDimmerLights_ErrorClose@i+1
  6391  1697                     l9500:	
  6392  1697  086A               	movf	setDimmerLights_ErrorClose@i+1,w
  6393  1698  3A80               	xorlw	128
  6394  1699  00E6               	movwf	??_setDimmerLights_ErrorClose
  6395  169A  3080               	movlw	128
  6396  169B  0266               	subwf	??_setDimmerLights_ErrorClose,w
  6397  169C  1D03               	skipz
  6398  169D  2EA0               	goto	u10365
  6399  169E  0867               	movf	setDimmerLights_ErrorClose@count,w
  6400  169F  0269               	subwf	setDimmerLights_ErrorClose@i,w
  6401  16A0                     u10365:	
  6402  16A0  1803               	btfsc	3,0
  6403  16A1  0008               	return
  6404                           
  6405                           ;Dimmer_B1.c: 632: DimmerLightsPointSelect(i + 1);
  6406  16A2  0020               	movlb	0	; select bank0
  6407  16A3  0869               	movf	setDimmerLights_ErrorClose@i,w
  6408  16A4  3E01               	addlw	1
  6409  16A5  319C  2411  3196   	fcall	_DimmerLightsPointSelect
  6410                           
  6411                           ;Dimmer_B1.c: 633: if (getDimmerLights_Status(i + 1) == 1) {
  6412  16A8  0020               	movlb	0	; select bank0
  6413  16A9  0869               	movf	setDimmerLights_ErrorClose@i,w
  6414  16AA  3E01               	addlw	1
  6415  16AB  319B  2374  3196   	fcall	_getDimmerLights_Status
  6416  16AE  3A01               	xorlw	1
  6417  16AF  1D03               	skipz
  6418  16B0  2EC2               	goto	l9498
  6419                           
  6420                           ;Dimmer_B1.c: 634: DimmerLights->SwFlag = 1;
  6421  16B1  0877               	movf	_DimmerLights,w
  6422  16B2  3E09               	addlw	9
  6423  16B3  0086               	movwf	6
  6424  16B4  3001               	movlw	1	; select bank2/3
  6425  16B5  0087               	movwf	7
  6426  16B6  1701               	bsf	1,6
  6427                           
  6428                           ;Dimmer_B1.c: 635: DimmerLights->Status = 0;
  6429  16B7  0877               	movf	_DimmerLights,w
  6430  16B8  0086               	movwf	6
  6431  16B9  3001               	movlw	1	; select bank2/3
  6432  16BA  0087               	movwf	7
  6433  16BB  1281               	bcf	1,5
  6434                           
  6435                           ;Dimmer_B1.c: 636: setDimmerLights_SwOff(i + 1);
  6436  16BC  0020               	movlb	0	; select bank0
  6437  16BD  0869               	movf	setDimmerLights_ErrorClose@i,w
  6438  16BE  3E01               	addlw	1
  6439  16BF  3197  2740  3196   	fcall	_setDimmerLights_SwOff
  6440  16C2                     l9498:	
  6441  16C2  3001               	movlw	1
  6442  16C3  0020               	movlb	0	; select bank0
  6443  16C4  07E9               	addwf	setDimmerLights_ErrorClose@i,f
  6444  16C5  3000               	movlw	0
  6445  16C6  3DEA               	addwfc	setDimmerLights_ErrorClose@i+1,f
  6446  16C7  2E97               	goto	l9500
  6447  16C8                     l9502:	
  6448                           ;Dimmer_B1.c: 637: }
  6449                           ;Dimmer_B1.c: 638: }
  6450                           ;Dimmer_B1.c: 639: } else {
  6451                           
  6452                           
  6453                           ;Dimmer_B1.c: 640: DimmerLightsPointSelect(lights);
  6454  16C8  0020               	movlb	0	; select bank0
  6455  16C9  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6456  16CA  319C  2411  3196   	fcall	_DimmerLightsPointSelect
  6457                           
  6458                           ;Dimmer_B1.c: 641: if (getDimmerLights_Status(lights) == 1) {
  6459  16CD  0020               	movlb	0	; select bank0
  6460  16CE  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6461  16CF  319B  2374  3196   	fcall	_getDimmerLights_Status
  6462  16D2  3A01               	xorlw	1
  6463  16D3  1D03               	skipz
  6464  16D4  0008               	return
  6465                           
  6466                           ;Dimmer_B1.c: 642: DimmerLights->SwFlag = 1;
  6467  16D5  0877               	movf	_DimmerLights,w
  6468  16D6  3E09               	addlw	9
  6469  16D7  0086               	movwf	6
  6470  16D8  3001               	movlw	1	; select bank2/3
  6471  16D9  0087               	movwf	7
  6472  16DA  1701               	bsf	1,6
  6473                           
  6474                           ;Dimmer_B1.c: 643: DimmerLights->Status = 0;
  6475  16DB  0877               	movf	_DimmerLights,w
  6476  16DC  0086               	movwf	6
  6477  16DD  3001               	movlw	1	; select bank2/3
  6478  16DE  0087               	movwf	7
  6479  16DF  1281               	bcf	1,5
  6480                           
  6481                           ;Dimmer_B1.c: 644: setDimmerLights_SwOff(lights);
  6482  16E0  0020               	movlb	0	; select bank0
  6483  16E1  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6484  16E2  3197  2740         	fcall	_setDimmerLights_SwOff
  6485  16E4  0008               	return
  6486  16E5                     __end_of_setDimmerLights_ErrorClose:	
  6487                           
  6488                           	psect	text20
  6489  1C4A                     __ptext20:	
  6490 ;; *************** function _getDimmerLights_Line *****************
  6491 ;; Defined at:
  6492 ;;		line 749 in file "../src/Dimmer_B1.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;  line            1    1[BANK0 ] unsigned char 
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  1    wreg      unsigned char 
  6499 ;; Registers used:
  6500 ;;		wreg, status,2
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6510 ;;Total ram usage:        2 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    5
  6513 ;; This function calls:
  6514 ;;		Nothing
  6515 ;; This function is called by:
  6516 ;;		_setMain_Exception
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           
  6521                           ;psect for function _getDimmerLights_Line
  6522  1C4A                     _getDimmerLights_Line:	
  6523                           
  6524                           ;Dimmer_B1.c: 750: char line = 0;
  6525                           
  6526                           ;incstack = 0
  6527                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6528  1C4A  0020               	movlb	0	; select bank0
  6529  1C4B  01A1               	clrf	getDimmerLights_Line@line
  6530                           
  6531                           ;Dimmer_B1.c: 752: if (DimmerLights1.Line == 1) {
  6532  1C4C  0023               	movlb	3	; select bank3
  6533  1C4D  1C47               	btfss	(_DimmerLights1^(0+384)+9),0
  6534  1C4E  2C53               	goto	l898
  6535                           
  6536                           ;Dimmer_B1.c: 753: line = 1;
  6537  1C4F  0020               	movlb	0	; select bank0
  6538  1C50  01A1               	clrf	getDimmerLights_Line@line
  6539  1C51  0AA1               	incf	getDimmerLights_Line@line,f
  6540                           
  6541                           ;Dimmer_B1.c: 754: }
  6542  1C52  2C5A               	goto	l899
  6543  1C53                     l898:	
  6544                           
  6545                           ;Dimmer_B1.c: 757: else if (DimmerLights2.Line == 1) {
  6546  1C53  1C56               	btfss	(_DimmerLights2^(0+384)+9),0
  6547  1C54  2C5A               	goto	l899
  6548                           
  6549                           ;Dimmer_B1.c: 758: line = 2;
  6550  1C55  3002               	movlw	2
  6551  1C56  0020               	movlb	0	; select bank0
  6552  1C57  00A0               	movwf	??_getDimmerLights_Line
  6553  1C58  0820               	movf	??_getDimmerLights_Line,w
  6554  1C59  00A1               	movwf	getDimmerLights_Line@line
  6555  1C5A                     l899:	
  6556                           
  6557                           ;Dimmer_B1.c: 759: }
  6558                           ;Dimmer_B1.c: 766: return line;
  6559  1C5A  0020               	movlb	0	; select bank0
  6560  1C5B  0821               	movf	getDimmerLights_Line@line,w
  6561  1C5C  0008               	return
  6562  1C5D                     __end_of_getDimmerLights_Line:	
  6563                           
  6564                           	psect	text21
  6565  1B3B                     __ptext21:	
  6566 ;; *************** function _Switch_Initialization *****************
  6567 ;; Defined at:
  6568 ;;		line 46 in file "../src/Switch_B1.c"
  6569 ;; Parameters:    Size  Location     Type
  6570 ;;		None
  6571 ;; Auto vars:     Size  Location     Type
  6572 ;;		None
  6573 ;; Return value:  Size  Location     Type
  6574 ;;		None               void
  6575 ;; Registers used:
  6576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6577 ;; Tracked objects:
  6578 ;;		On entry : 0/0
  6579 ;;		On exit  : 0/0
  6580 ;;		Unchanged: 0/0
  6581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;Total ram usage:        0 bytes
  6587 ;; Hardware stack levels used:    1
  6588 ;; Hardware stack levels required when called:    8
  6589 ;; This function calls:
  6590 ;;		_TouchPower
  6591 ;;		_setSw_Initialization
  6592 ;; This function is called by:
  6593 ;;		_main
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           
  6598                           ;psect for function _Switch_Initialization
  6599  1B3B                     _Switch_Initialization:	
  6600                           
  6601                           ;Switch_B1.c: 47: TouchPower();
  6602                           
  6603                           ;incstack = 0
  6604                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6605  1B3B  3187  27EB  319B   	fcall	_TouchPower
  6606                           
  6607                           ;Switch_B1.c: 49: WPUB1 = 0;
  6608  1B3E  0024               	movlb	4	; select bank4
  6609  1B3F  108D               	bcf	13,1	;volatile
  6610                           
  6611                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6612  1B40  3001               	movlw	1
  6613  1B41  319A  22B4  319B   	fcall	_setSw_Initialization
  6614                           
  6615                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6616  1B44  3002               	movlw	2
  6617  1B45  319A  22B4         	fcall	_setSw_Initialization
  6618  1B47  0008               	return
  6619  1B48                     __end_of_Switch_Initialization:	
  6620                           
  6621                           	psect	text22
  6622  1AB4                     __ptext22:	
  6623 ;; *************** function _setSw_Initialization *****************
  6624 ;; Defined at:
  6625 ;;		line 109 in file "../src/Switch_B1.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;  sw              1    wreg     unsigned char 
  6628 ;; Auto vars:     Size  Location     Type
  6629 ;;  sw              1    4[BANK0 ] unsigned char 
  6630 ;; Return value:  Size  Location     Type
  6631 ;;		None               void
  6632 ;; Registers used:
  6633 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;Total ram usage:        1 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; Hardware stack levels required when called:    7
  6646 ;; This function calls:
  6647 ;;		_setLED
  6648 ;; This function is called by:
  6649 ;;		_Switch_Initialization
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           
  6654                           ;psect for function _setSw_Initialization
  6655  1AB4                     _setSw_Initialization:	
  6656                           
  6657                           ;incstack = 0
  6658                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6659                           ;setSw_Initialization@sw stored from wreg
  6660  1AB4  0020               	movlb	0	; select bank0
  6661  1AB5  00A4               	movwf	setSw_Initialization@sw
  6662                           
  6663                           ;Switch_B1.c: 110: setLED(sw, 1);
  6664  1AB6  01A2               	clrf	setLED@command
  6665  1AB7  0AA2               	incf	setLED@command,f
  6666  1AB8  0824               	movf	setSw_Initialization@sw,w
  6667  1AB9  3188  20D7         	fcall	_setLED
  6668  1ABB  0008               	return
  6669  1ABC                     __end_of_setSw_Initialization:	
  6670                           
  6671                           	psect	text23
  6672  07EB                     __ptext23:	
  6673 ;; *************** function _TouchPower *****************
  6674 ;; Defined at:
  6675 ;;		line 10 in file "../src/Switch_B1.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;		None
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;		None
  6680 ;; Return value:  Size  Location     Type
  6681 ;;		None               void
  6682 ;; Registers used:
  6683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6684 ;; Tracked objects:
  6685 ;;		On entry : 0/0
  6686 ;;		On exit  : 0/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;Total ram usage:        0 bytes
  6694 ;; Hardware stack levels used:    1
  6695 ;; Hardware stack levels required when called:    6
  6696 ;; This function calls:
  6697 ;;		_Timeout_Counter
  6698 ;;		_set_TimeoutCleared
  6699 ;; This function is called by:
  6700 ;;		_Switch_Initialization
  6701 ;;		_Switch_Main
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           
  6706                           ;psect for function _TouchPower
  6707  07EB                     _TouchPower:	
  6708                           
  6709                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6710                           
  6711                           ;incstack = 0
  6712                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6713  07EB  0020               	movlb	0	; select bank0
  6714  07EC  1A8E               	btfsc	14,5	;volatile
  6715  07ED  0008               	return
  6716                           
  6717                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6718  07EE  0021               	movlb	1	; select bank1
  6719  07EF  1C20               	btfss	_myMain^(0+128),0
  6720  07F0  0008               	return
  6721  07F1  2FF7               	goto	l10168
  6722  07F2                     l2626:	
  6723                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6724                           
  6725                           
  6726                           ;Switch_B1.c: 14: RC5 = 1;
  6727  07F2  0020               	movlb	0	; select bank0
  6728  07F3  168E               	bsf	14,5	;volatile
  6729                           
  6730                           ;Switch_B1.c: 15: Timeout_Counter();
  6731  07F4  319C  24AD  3187   	fcall	_Timeout_Counter
  6732  07F7                     l10168:	
  6733  07F7  0020               	movlb	0	; select bank0
  6734  07F8  1A8E               	btfsc	14,5	;volatile
  6735  07F9  2FFD               	goto	l10172
  6736  07FA  0021               	movlb	1	; select bank1
  6737  07FB  1D2D               	btfss	(_myMain^(0+128)+13),2
  6738  07FC  2FF2               	goto	l2626
  6739  07FD                     l10172:	
  6740                           
  6741                           ;Switch_B1.c: 16: }
  6742                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6743  07FD  319A  226F         	fcall	_set_TimeoutCleared
  6744  07FF  0008               	return
  6745  0800                     __end_of_TouchPower:	
  6746                           
  6747                           	psect	text24
  6748  1A56                     __ptext24:	
  6749 ;; *************** function _RF_Main *****************
  6750 ;; Defined at:
  6751 ;;		line 16 in file "../src/RF_Control_B1.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;		None
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;		None
  6756 ;; Return value:  Size  Location     Type
  6757 ;;		None               void
  6758 ;; Registers used:
  6759 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;Total ram usage:        0 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:   14
  6772 ;; This function calls:
  6773 ;;		_setRF_Main
  6774 ;; This function is called by:
  6775 ;;		_main
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           
  6780                           ;psect for function _RF_Main
  6781  1A56                     _RF_Main:	
  6782                           
  6783                           ;RF_Control_B1.c: 18: setRF_Main();
  6784                           
  6785                           ;incstack = 0
  6786                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6787  1A56  3186  2646         	fcall	_setRF_Main
  6788  1A58  0008               	return
  6789  1A59                     __end_of_RF_Main:	
  6790                           
  6791                           	psect	text25
  6792  0646                     __ptext25:	
  6793 ;; *************** function _setRF_Main *****************
  6794 ;; Defined at:
  6795 ;;		line 52 in file "../src/RF_Control_B1.c"
  6796 ;; Parameters:    Size  Location     Type
  6797 ;;		None
  6798 ;; Auto vars:     Size  Location     Type
  6799 ;;  error           1   77[BANK0 ] unsigned char 
  6800 ;;  Receive_OK      1   76[BANK0 ] unsigned char 
  6801 ;;  loop_f          1   75[BANK0 ] unsigned char 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;		None               void
  6804 ;; Registers used:
  6805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;Total ram usage:        4 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:   13
  6818 ;; This function calls:
  6819 ;;		_CC2500_ReadStatus
  6820 ;;		_CC2500_RxData
  6821 ;;		_CC2500_TxData
  6822 ;;		_CC2500_WriteCommand
  6823 ;;		_getBuz_GO
  6824 ;;		_getMain_All_Error_Status
  6825 ;;		_getRF_KeyStatus
  6826 ;;		_getRxData
  6827 ;; This function is called by:
  6828 ;;		_RF_Main
  6829 ;; This function uses a non-reentrant model
  6830 ;;
  6831                           
  6832                           
  6833                           ;psect for function _setRF_Main
  6834  0646                     _setRF_Main:	
  6835                           
  6836                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6837                           
  6838                           ;incstack = 0
  6839                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6840  0646  0020               	movlb	0	; select bank0
  6841  0647  01EB               	clrf	setRF_Main@loop_f
  6842  0648  01EC               	clrf	setRF_Main@Receive_OK
  6843  0649  01ED               	clrf	setRF_Main@error
  6844                           
  6845                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6846  064A  0021               	movlb	1	; select bank1
  6847  064B  1C3C               	btfss	_RF1^(0+128),0
  6848  064C  2F33               	goto	l2235
  6849                           
  6850                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6851  064D  319B  2395  3186   	fcall	_getBuz_GO
  6852  0650  0020               	movlb	0	; select bank0
  6853  0651  0821               	movf	?_getBuz_GO+1,w
  6854  0652  0420               	iorwf	?_getBuz_GO,w
  6855  0653  1D03               	skipz
  6856  0654  0008               	return
  6857                           
  6858                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6859  0655  3000               	movlw	0
  6860  0656  3190  20E4  3186   	fcall	_getMain_All_Error_Status
  6861  0659  3800               	iorlw	0
  6862  065A  1D03               	skipz
  6863  065B  2E70               	goto	l2237
  6864                           
  6865                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6866  065C  319B  23A6  3186   	fcall	_getRF_KeyStatus
  6867  065F  3A01               	xorlw	1
  6868  0660  3000               	movlw	0
  6869  0661  1903               	skipnz
  6870  0662  3001               	movlw	1
  6871  0663  0020               	movlb	0	; select bank0
  6872  0664  00EA               	movwf	??_setRF_Main
  6873  0665  0CEA               	rrf	??_setRF_Main,f
  6874  0666  0CEA               	rrf	??_setRF_Main,f
  6875  0667  0021               	movlb	1	; select bank1
  6876  0668  083C               	movf	_RF1^(0+128),w
  6877  0669  0020               	movlb	0	; select bank0
  6878  066A  066A               	xorwf	??_setRF_Main,w
  6879  066B  397F               	andlw	-129
  6880  066C  066A               	xorwf	??_setRF_Main,w
  6881  066D  0021               	movlb	1	; select bank1
  6882  066E  00BC               	movwf	_RF1^(0+128)
  6883                           
  6884                           ;RF_Control_B1.c: 65: } else {
  6885  066F  2E72               	goto	l2238
  6886  0670                     l2237:	
  6887                           
  6888                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6889  0670  0021               	movlb	1	; select bank1
  6890  0671  13BC               	bcf	_RF1^(0+128),7
  6891  0672                     l2238:	
  6892                           
  6893                           ;RF_Control_B1.c: 70: }
  6894                           ;RF_Control_B1.c: 73: if (RF1.Key == 1 && RF1.Learn == 0) {
  6895  0672  1BBC               	btfsc	_RF1^(0+128),7
  6896  0673  1B3C               	btfsc	_RF1^(0+128),6
  6897  0674  2E7A               	goto	l2239
  6898                           
  6899                           ;RF_Control_B1.c: 74: RF1.Count = 0;
  6900  0675  01BE               	clrf	(_RF1^(0+128)+2)
  6901  0676  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6902                           
  6903                           ;RF_Control_B1.c: 75: RF1.Run = 1;
  6904  0677  14BD               	bsf	(_RF1^(0+128)+1),1
  6905                           
  6906                           ;RF_Control_B1.c: 76: RF1.RxStatus = 0;
  6907  0678  11BC               	bcf	_RF1^(0+128),3
  6908                           
  6909                           ;RF_Control_B1.c: 78: } else {
  6910  0679  0008               	return
  6911  067A                     l2239:	
  6912                           
  6913                           ;RF_Control_B1.c: 79: if (RF1.Run == 1 && RF1.Learn == 0) {
  6914  067A  18BD               	btfsc	(_RF1^(0+128)+1),1
  6915  067B  1B3C               	btfsc	_RF1^(0+128),6
  6916  067C  2E91               	goto	l10084
  6917                           
  6918                           ;RF_Control_B1.c: 80: RF1.Count++;
  6919  067D  3001               	movlw	1
  6920  067E  07BE               	addwf	(_RF1^(0+128)+2),f
  6921  067F  3000               	movlw	0
  6922  0680  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  6923                           
  6924                           ;RF_Control_B1.c: 81: if (RF1.Count == RF1.RunTime) {
  6925  0681  3002               	movlw	2
  6926  0682  3EBC               	addlw	_RF1& (0+255)
  6927  0683  0086               	movwf	6
  6928  0684  0187               	clrf	7
  6929  0685  3F40               	moviw [0]fsr1
  6930  0686  0643               	xorwf	(_RF1^(0+128)+7),w
  6931  0687  1D03               	skipz
  6932  0688  2E8B               	goto	u11185
  6933  0689  3F41               	moviw [1]fsr1
  6934  068A  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  6935  068B                     u11185:	
  6936  068B  1D03               	skipz
  6937  068C  2F00               	goto	l10136
  6938                           
  6939                           ;RF_Control_B1.c: 82: RF1.Count = 0;
  6940  068D  01BE               	clrf	(_RF1^(0+128)+2)
  6941  068E  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6942                           
  6943                           ;RF_Control_B1.c: 83: RF1.Run = 0;
  6944  068F  10BD               	bcf	(_RF1^(0+128)+1),1
  6945                           
  6946                           ;RF_Control_B1.c: 84: }
  6947                           ;RF_Control_B1.c: 85: } else {
  6948  0690  2F00               	goto	l10136
  6949  0691                     l10084:	
  6950                           
  6951                           ;RF_Control_B1.c: 86: RF1.Count = 0;
  6952  0691  01BE               	clrf	(_RF1^(0+128)+2)
  6953  0692  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6954                           
  6955                           ;RF_Control_B1.c: 87: RF1.Run = 0;
  6956  0693  10BD               	bcf	(_RF1^(0+128)+1),1
  6957                           
  6958                           ;RF_Control_B1.c: 89: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6959  0694  193C               	btfsc	_RF1^(0+128),2
  6960  0695  1B3C               	btfsc	_RF1^(0+128),6
  6961  0696  2EB2               	goto	l2244
  6962                           
  6963                           ;RF_Control_B1.c: 90: RF1.TransceiveGO = 0;
  6964  0697  113C               	bcf	_RF1^(0+128),2
  6965                           
  6966                           ;RF_Control_B1.c: 91: RF1.RxStatus = 0;
  6967  0698  11BC               	bcf	_RF1^(0+128),3
  6968                           
  6969                           ;RF_Control_B1.c: 92: RF1.ReceiveGO = 0;
  6970  0699  10BC               	bcf	_RF1^(0+128),1
  6971                           
  6972                           ;RF_Control_B1.c: 94: CC2500_ReadStatus(0x3B);
  6973  069A  303B               	movlw	59
  6974  069B  319E  26E9  3186   	fcall	_CC2500_ReadStatus
  6975                           
  6976                           ;RF_Control_B1.c: 95: if (s_data != 0) {
  6977  069E  0021               	movlb	1	; select bank1
  6978  069F  0857               	movf	_s_data^(0+128),w
  6979  06A0  1903               	btfsc	3,2
  6980  06A1  2EAE               	goto	l2245
  6981                           
  6982                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x36);
  6983  06A2  3036               	movlw	54
  6984  06A3  319D  2536  3186   	fcall	_CC2500_WriteCommand
  6985                           
  6986                           ;RF_Control_B1.c: 97: CC2500_WriteCommand(0x3B);
  6987  06A6  303B               	movlw	59
  6988  06A7  319D  2536  3186   	fcall	_CC2500_WriteCommand
  6989                           
  6990                           ;RF_Control_B1.c: 98: CC2500_WriteCommand(0x3A);
  6991  06AA  303A               	movlw	58
  6992  06AB  319D  2536  3186   	fcall	_CC2500_WriteCommand
  6993  06AE                     l2245:	
  6994                           
  6995                           ;RF_Control_B1.c: 99: }
  6996                           ;RF_Control_B1.c: 100: CC2500_TxData();
  6997  06AE  3189  219A  3186   	fcall	_CC2500_TxData
  6998                           
  6999                           ;RF_Control_B1.c: 102: } else {
  7000  06B1  2F00               	goto	l10136
  7001  06B2                     l2244:	
  7002                           
  7003                           ;RF_Control_B1.c: 104: if (RF1.RxStatus == 1) {
  7004  06B2  1DBC               	btfss	_RF1^(0+128),3
  7005  06B3  2EEB               	goto	l2247
  7006                           
  7007                           ;RF_Control_B1.c: 105: CC2500_RxData();
  7008  06B4  318B  234B  3186   	fcall	_CC2500_RxData
  7009                           
  7010                           ;RF_Control_B1.c: 106: if (RF1.ReceiveGO == 1) {
  7011  06B7  0021               	movlb	1	; select bank1
  7012  06B8  1CBC               	btfss	_RF1^(0+128),1
  7013  06B9  2F00               	goto	l10136
  7014                           
  7015                           ;RF_Control_B1.c: 107: RF1.ReceiveGO = 0;
  7016  06BA  10BC               	bcf	_RF1^(0+128),1
  7017                           
  7018                           ;RF_Control_B1.c: 108: RF1.Correction = 0;
  7019  06BB  12BD               	bcf	(_RF1^(0+128)+1),5
  7020                           
  7021                           ;RF_Control_B1.c: 109: RF1.CorrectionCounter = 0;
  7022  06BC  01C6               	clrf	(_RF1^(0+128)+10)
  7023  06BD  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7024                           
  7025                           ;RF_Control_B1.c: 118: getRxData();
  7026  06BE  318A  22DC  3186   	fcall	_getRxData
  7027                           
  7028                           ;RF_Control_B1.c: 122: RF1.Run = 1;
  7029  06C1  0021               	movlb	1	; select bank1
  7030  06C2  14BD               	bsf	(_RF1^(0+128)+1),1
  7031                           
  7032                           ;RF_Control_B1.c: 124: if (RF1.Checked == 1) {
  7033  06C3  1DBD               	btfss	(_RF1^(0+128)+1),3
  7034  06C4  2ED2               	goto	l10120
  7035                           
  7036                           ;RF_Control_B1.c: 125: if (RF1.RunTime > 10) {
  7037  06C5  3000               	movlw	0
  7038  06C6  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7039  06C7  300B               	movlw	11
  7040  06C8  1903               	skipnz
  7041  06C9  0243               	subwf	(_RF1^(0+128)+7),w
  7042  06CA  1C03               	skipc
  7043  06CB  2ED0               	goto	l10118
  7044                           
  7045                           ;RF_Control_B1.c: 126: RF1.RunTime = 10;
  7046  06CC  300A               	movlw	10
  7047  06CD  00C3               	movwf	(_RF1^(0+128)+7)
  7048  06CE  3000               	movlw	0
  7049  06CF  00C4               	movwf	(_RF1^(0+128)+8)
  7050  06D0                     l10118:	
  7051                           
  7052                           ;RF_Control_B1.c: 127: }
  7053                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  7054  06D0  01C0               	clrf	(_RF1^(0+128)+4)
  7055                           
  7056                           ;RF_Control_B1.c: 129: } else {
  7057  06D1  2F00               	goto	l10136
  7058  06D2                     l10120:	
  7059                           
  7060                           ;RF_Control_B1.c: 130: RF1.CheckCount++;
  7061  06D2  3001               	movlw	1
  7062  06D3  0020               	movlb	0	; select bank0
  7063  06D4  00EA               	movwf	??_setRF_Main
  7064  06D5  086A               	movf	??_setRF_Main,w
  7065  06D6  0021               	movlb	1	; select bank1
  7066  06D7  07C0               	addwf	(_RF1^(0+128)+4),f
  7067                           
  7068                           ;RF_Control_B1.c: 131: if (RF1.CheckCount == 2) {
  7069  06D8  0840               	movf	(_RF1^(0+128)+4),w
  7070  06D9  3A02               	xorlw	2
  7071  06DA  1D03               	skipz
  7072  06DB  2F00               	goto	l10136
  7073                           
  7074                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  7075  06DC  01C0               	clrf	(_RF1^(0+128)+4)
  7076                           
  7077                           ;RF_Control_B1.c: 133: RF1.CheckedCounter = 0;
  7078  06DD  01C1               	clrf	(_RF1^(0+128)+5)
  7079  06DE  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7080                           
  7081                           ;RF_Control_B1.c: 134: if (RF1.RunTime < 200) {
  7082  06DF  3000               	movlw	0
  7083  06E0  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7084  06E1  30C8               	movlw	200
  7085  06E2  1903               	skipnz
  7086  06E3  0243               	subwf	(_RF1^(0+128)+7),w
  7087  06E4  1803               	skipnc
  7088  06E5  2F00               	goto	l10136
  7089                           
  7090                           ;RF_Control_B1.c: 135: RF1.RunTime += 10;
  7091  06E6  300A               	movlw	10
  7092  06E7  07C3               	addwf	(_RF1^(0+128)+7),f
  7093  06E8  3000               	movlw	0
  7094  06E9  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  7095                           
  7096                           ;RF_Control_B1.c: 136: }
  7097                           ;RF_Control_B1.c: 137: }
  7098                           ;RF_Control_B1.c: 138: }
  7099                           ;RF_Control_B1.c: 139: }
  7100                           ;RF_Control_B1.c: 140: } else {
  7101  06EA  2F00               	goto	l10136
  7102  06EB                     l2247:	
  7103                           
  7104                           ;RF_Control_B1.c: 142: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7105  06EB  1DBC               	btfss	_RF1^(0+128),3
  7106  06EC  18BC               	btfsc	_RF1^(0+128),1
  7107  06ED  2F00               	goto	l10136
  7108                           
  7109                           ;RF_Control_B1.c: 143: RF1.RxStatus = 1;
  7110  06EE  15BC               	bsf	_RF1^(0+128),3
  7111                           
  7112                           ;RF_Control_B1.c: 144: RF1.Correction = 1;
  7113  06EF  16BD               	bsf	(_RF1^(0+128)+1),5
  7114                           
  7115                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x36);
  7116  06F0  3036               	movlw	54
  7117  06F1  319D  2536  3186   	fcall	_CC2500_WriteCommand
  7118                           
  7119                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x3B);
  7120  06F4  303B               	movlw	59
  7121  06F5  319D  2536  3186   	fcall	_CC2500_WriteCommand
  7122                           
  7123                           ;RF_Control_B1.c: 148: CC2500_WriteCommand(0x3A);
  7124  06F8  303A               	movlw	58
  7125  06F9  319D  2536  3186   	fcall	_CC2500_WriteCommand
  7126                           
  7127                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x34);
  7128  06FC  3034               	movlw	52
  7129  06FD  319D  2536  3186   	fcall	_CC2500_WriteCommand
  7130  0700                     l10136:	
  7131                           
  7132                           ;RF_Control_B1.c: 151: }
  7133                           ;RF_Control_B1.c: 153: }
  7134                           ;RF_Control_B1.c: 154: }
  7135                           ;RF_Control_B1.c: 155: }
  7136                           ;RF_Control_B1.c: 156: if (RF1.RxStatus == 1) {
  7137  0700  0021               	movlb	1	; select bank1
  7138  0701  1DBC               	btfss	_RF1^(0+128),3
  7139  0702  2F21               	goto	l10148
  7140                           
  7141                           ;RF_Control_B1.c: 157: RF1.CheckedCounter++;
  7142  0703  3001               	movlw	1
  7143  0704  07C1               	addwf	(_RF1^(0+128)+5),f
  7144  0705  3000               	movlw	0
  7145  0706  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  7146                           
  7147                           ;RF_Control_B1.c: 158: if (RF1.CheckedCounter == 100) {
  7148  0707  3005               	movlw	5
  7149  0708  3EBC               	addlw	_RF1& (0+255)
  7150  0709  0086               	movwf	6
  7151  070A  0187               	clrf	7
  7152  070B  3F40               	moviw [0]fsr1
  7153  070C  3A64               	xorlw	100
  7154  070D  1D03               	skipz
  7155  070E  2F11               	goto	u11315
  7156  070F  3F41               	moviw [1]fsr1
  7157  0710  3A00               	xorlw	0
  7158  0711                     u11315:	
  7159  0711  1D03               	skipz
  7160  0712  2F21               	goto	l10148
  7161                           
  7162                           ;RF_Control_B1.c: 159: RF1.CheckedCounter = 0;
  7163  0713  01C1               	clrf	(_RF1^(0+128)+5)
  7164  0714  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7165                           
  7166                           ;RF_Control_B1.c: 160: RF1.CheckCount = 0;
  7167  0715  01C0               	clrf	(_RF1^(0+128)+4)
  7168                           
  7169                           ;RF_Control_B1.c: 161: if (RF1.RunTime > 10) {
  7170  0716  3000               	movlw	0
  7171  0717  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7172  0718  300B               	movlw	11
  7173  0719  1903               	skipnz
  7174  071A  0243               	subwf	(_RF1^(0+128)+7),w
  7175  071B  1C03               	skipc
  7176  071C  2F21               	goto	l10148
  7177                           
  7178                           ;RF_Control_B1.c: 162: RF1.RunTime -= 10;
  7179  071D  300A               	movlw	10
  7180  071E  02C3               	subwf	(_RF1^(0+128)+7),f
  7181  071F  3000               	movlw	0
  7182  0720  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  7183  0721                     l10148:	
  7184                           
  7185                           ;RF_Control_B1.c: 163: }
  7186                           ;RF_Control_B1.c: 164: }
  7187                           ;RF_Control_B1.c: 165: }
  7188                           ;RF_Control_B1.c: 166: if (RF1.Correction == 1) {
  7189  0721  1EBD               	btfss	(_RF1^(0+128)+1),5
  7190  0722  0008               	return
  7191                           
  7192                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter++;
  7193  0723  3001               	movlw	1
  7194  0724  07C6               	addwf	(_RF1^(0+128)+10),f
  7195  0725  3000               	movlw	0
  7196  0726  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  7197                           
  7198                           ;RF_Control_B1.c: 168: if (RF1.CorrectionCounter >= 30000) {
  7199  0727  3075               	movlw	117
  7200  0728  0247               	subwf	((_RF1+1)^(0+128)+10),w
  7201  0729  3030               	movlw	48
  7202  072A  1903               	skipnz
  7203  072B  0246               	subwf	(_RF1^(0+128)+10),w
  7204  072C  1C03               	skipc
  7205  072D  0008               	return
  7206                           
  7207                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter = 0;
  7208  072E  01C6               	clrf	(_RF1^(0+128)+10)
  7209  072F  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7210                           
  7211                           ;RF_Control_B1.c: 170: RF1.RxStatus = 0;
  7212  0730  11BC               	bcf	_RF1^(0+128),3
  7213                           
  7214                           ;RF_Control_B1.c: 171: RF1.ReceiveGO = 0;
  7215  0731  10BC               	bcf	_RF1^(0+128),1
  7216                           
  7217                           ;RF_Control_B1.c: 172: }
  7218                           ;RF_Control_B1.c: 173: }
  7219                           ;RF_Control_B1.c: 174: }
  7220                           ;RF_Control_B1.c: 175: }
  7221                           ;RF_Control_B1.c: 182: } else {
  7222  0732  0008               	return
  7223  0733                     l2235:	
  7224                           
  7225                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  7226  0733  1C20               	btfss	_myMain^(0+128),0
  7227  0734  0008               	return
  7228                           
  7229                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  7230  0735  143C               	bsf	_RF1^(0+128),0
  7231  0736  0008               	return
  7232  0737                     __end_of_setRF_Main:	
  7233                           
  7234                           	psect	text26
  7235  0ADC                     __ptext26:	
  7236 ;; *************** function _getRxData *****************
  7237 ;; Defined at:
  7238 ;;		line 272 in file "../src/RF_Control_B1.c"
  7239 ;; Parameters:    Size  Location     Type
  7240 ;;		None
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;  error           1   73[BANK0 ] unsigned char 
  7243 ;; Return value:  Size  Location     Type
  7244 ;;		None               void
  7245 ;; Registers used:
  7246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;Total ram usage:        2 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; Hardware stack levels required when called:   12
  7259 ;; This function calls:
  7260 ;;		_getMain_All_Error_Status
  7261 ;;		_setControl_Lights_Table
  7262 ;;		_setLog_Code
  7263 ;; This function is called by:
  7264 ;;		_setRF_Main
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           
  7269                           ;psect for function _getRxData
  7270  0ADC                     _getRxData:	
  7271                           
  7272                           ;RF_Control_B1.c: 273: char error = getMain_All_Error_Status(0);
  7273                           
  7274                           ;incstack = 0
  7275                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7276  0ADC  3000               	movlw	0
  7277  0ADD  3190  20E4  318A   	fcall	_getMain_All_Error_Status
  7278  0AE0  0020               	movlb	0	; select bank0
  7279  0AE1  00E8               	movwf	??_getRxData
  7280  0AE2  0868               	movf	??_getRxData,w
  7281  0AE3  00E9               	movwf	getRxData@error
  7282                           
  7283                           ;RF_Control_B1.c: 274: if (error == 0) {
  7284  0AE4  08E9               	movf	getRxData@error,f
  7285  0AE5  1D03               	skipz
  7286  0AE6  0008               	return
  7287                           
  7288                           ;RF_Control_B1.c: 275: if (RF1.Learn == 1) {
  7289  0AE7  0021               	movlb	1	; select bank1
  7290  0AE8  1F3C               	btfss	_RF1^(0+128),6
  7291  0AE9  2AFA               	goto	l9630
  7292                           
  7293                           ;RF_Control_B1.c: 276: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7294  0AEA  0023               	movlb	3	; select bank3
  7295  0AEB  08A0               	movf	_RF_Data^(0+384),f
  7296  0AEC  1D03               	skipz
  7297  0AED  2AF7               	goto	l2286
  7298  0AEE  0821               	movf	(_RF_Data^(0+384)+1),w
  7299  0AEF  3A64               	xorlw	100
  7300  0AF0  1D03               	skipz
  7301  0AF1  2AF7               	goto	l2286
  7302                           
  7303                           ;RF_Control_B1.c: 277: setLog_Code();
  7304  0AF2  3191  21EB         	fcall	_setLog_Code
  7305                           
  7306                           ;RF_Control_B1.c: 278: RF1.Checked = 1;
  7307  0AF4  0021               	movlb	1	; select bank1
  7308  0AF5  15BD               	bsf	(_RF1^(0+128)+1),3
  7309                           
  7310                           ;RF_Control_B1.c: 279: } else {
  7311  0AF6  0008               	return
  7312  0AF7                     l2286:	
  7313                           
  7314                           ;RF_Control_B1.c: 280: RF1.Checked = 0;
  7315  0AF7  0021               	movlb	1	; select bank1
  7316  0AF8  11BD               	bcf	(_RF1^(0+128)+1),3
  7317                           
  7318                           ;RF_Control_B1.c: 281: }
  7319                           ;RF_Control_B1.c: 282: } else {
  7320  0AF9  0008               	return
  7321  0AFA                     l9630:	
  7322                           
  7323                           ;RF_Control_B1.c: 283: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7324  0AFA  0023               	movlb	3	; select bank3
  7325  0AFB  08A0               	movf	_RF_Data^(0+384),f
  7326  0AFC  1D03               	skipz
  7327  0AFD  2B33               	goto	l9652
  7328  0AFE  0821               	movf	(_RF_Data^(0+384)+1),w
  7329  0AFF  3A02               	xorlw	2
  7330  0B00  1D03               	skipz
  7331  0B01  2B33               	goto	l9652
  7332                           
  7333                           ;RF_Control_B1.c: 285: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7334  0B02  082C               	movf	(_RF_Data^(0+384)+12),w
  7335  0B03  3AFF               	xorlw	255
  7336  0B04  1D03               	skipz
  7337  0B05  2B12               	goto	l9642
  7338  0B06  082D               	movf	(_RF_Data^(0+384)+13),w
  7339  0B07  3AFF               	xorlw	255
  7340  0B08  1D03               	skipz
  7341  0B09  2B12               	goto	l9642
  7342  0B0A  082E               	movf	(_RF_Data^(0+384)+14),w
  7343  0B0B  3AFF               	xorlw	255
  7344  0B0C  1D03               	skipz
  7345  0B0D  2B12               	goto	l9642
  7346                           
  7347                           ;RF_Control_B1.c: 286: __nop();
  7348  0B0E  0000               	nop
  7349                           
  7350                           ;RF_Control_B1.c: 287: RF1.Checked = 0;
  7351  0B0F  0021               	movlb	1	; select bank1
  7352  0B10  11BD               	bcf	(_RF1^(0+128)+1),3
  7353                           
  7354                           ;RF_Control_B1.c: 288: } else {
  7355  0B11  0008               	return
  7356  0B12                     l9642:	
  7357                           
  7358                           ;RF_Control_B1.c: 289: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7359  0B12  087B               	movf	_product,w
  7360  0B13  3E0C               	addlw	12
  7361  0B14  0086               	movwf	6
  7362  0B15  3002               	movlw	2	; select bank4/5
  7363  0B16  0087               	movwf	7
  7364  0B17  0023               	movlb	3	; select bank3
  7365  0B18  082C               	movf	(_RF_Data^(0+384)+12),w
  7366  0B19  0601               	xorwf	1,w
  7367  0B1A  1D03               	skipz
  7368  0B1B  0008               	return
  7369  0B1C  087B               	movf	_product,w
  7370  0B1D  3E0D               	addlw	13
  7371  0B1E  0086               	movwf	6
  7372  0B1F  3002               	movlw	2	; select bank4/5
  7373  0B20  0087               	movwf	7
  7374  0B21  082D               	movf	(_RF_Data^(0+384)+13),w
  7375  0B22  0601               	xorwf	1,w
  7376  0B23  1D03               	skipz
  7377  0B24  0008               	return
  7378  0B25  087B               	movf	_product,w
  7379  0B26  3E0E               	addlw	14
  7380  0B27  0086               	movwf	6
  7381  0B28  3002               	movlw	2	; select bank4/5
  7382  0B29  0087               	movwf	7
  7383  0B2A  082E               	movf	(_RF_Data^(0+384)+14),w
  7384  0B2B  0601               	xorwf	1,w
  7385  0B2C  1D03               	skipz
  7386  0B2D  0008               	return
  7387                           
  7388                           ;RF_Control_B1.c: 290: setControl_Lights_Table();
  7389  0B2E  318A  226E         	fcall	_setControl_Lights_Table
  7390                           
  7391                           ;RF_Control_B1.c: 291: RF1.Checked = 1;
  7392  0B30  0021               	movlb	1	; select bank1
  7393  0B31  15BD               	bsf	(_RF1^(0+128)+1),3
  7394                           
  7395                           ;RF_Control_B1.c: 292: }
  7396                           ;RF_Control_B1.c: 293: }
  7397                           ;RF_Control_B1.c: 294: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7398  0B32  0008               	return
  7399  0B33                     l9652:	
  7400  0B33  0023               	movlb	3	; select bank3
  7401  0B34  0820               	movf	_RF_Data^(0+384),w
  7402  0B35  3AFF               	xorlw	255
  7403  0B36  1D03               	skipz
  7404  0B37  2B3E               	goto	l9658
  7405  0B38  0821               	movf	(_RF_Data^(0+384)+1),w
  7406  0B39  3A02               	xorlw	2
  7407  0B3A  1D03               	skipz
  7408  0B3B  2B3E               	goto	l9658
  7409                           
  7410                           ;RF_Control_B1.c: 295: __nop();
  7411  0B3C  0000               	nop
  7412                           
  7413                           ;RF_Control_B1.c: 296: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7414  0B3D  0008               	return
  7415  0B3E                     l9658:	
  7416  0B3E  0023               	movlb	3	; select bank3
  7417  0B3F  08A0               	movf	_RF_Data^(0+384),f
  7418  0B40  1D03               	skipz
  7419  0B41  2B48               	goto	l2296
  7420  0B42  0821               	movf	(_RF_Data^(0+384)+1),w
  7421  0B43  3A65               	xorlw	101
  7422  0B44  1D03               	skipz
  7423  0B45  2B48               	goto	l2296
  7424                           
  7425                           ;RF_Control_B1.c: 297: __nop();
  7426  0B46  0000               	nop
  7427                           
  7428                           ;RF_Control_B1.c: 298: } else {
  7429  0B47  0008               	return
  7430  0B48                     l2296:	
  7431                           
  7432                           ;RF_Control_B1.c: 299: RF1.Checked = 0;
  7433  0B48  0021               	movlb	1	; select bank1
  7434  0B49  11BD               	bcf	(_RF1^(0+128)+1),3
  7435                           
  7436                           ;RF_Control_B1.c: 300: }
  7437                           ;RF_Control_B1.c: 305: }
  7438                           ;RF_Control_B1.c: 306: } else {
  7439  0B4A  0008               	return
  7440  0B4B                     __end_of_getRxData:	
  7441                           ;RF_Control_B1.c: 307: ;
  7442                           
  7443                           
  7444                           	psect	text27
  7445  11EB                     __ptext27:	
  7446 ;; *************** function _setLog_Code *****************
  7447 ;; Defined at:
  7448 ;;		line 312 in file "../src/RF_Control_B1.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;		None
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;		None
  7453 ;; Return value:  Size  Location     Type
  7454 ;;		None               void
  7455 ;; Registers used:
  7456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7457 ;; Tracked objects:
  7458 ;;		On entry : 0/0
  7459 ;;		On exit  : 0/0
  7460 ;;		Unchanged: 0/0
  7461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7464 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;Total ram usage:        1 bytes
  7467 ;; Hardware stack levels used:    1
  7468 ;; Hardware stack levels required when called:    7
  7469 ;; This function calls:
  7470 ;;		_setBuz
  7471 ;;		_setMemory_LoopSave
  7472 ;;		_setMemory_Modify
  7473 ;; This function is called by:
  7474 ;;		_getRxData
  7475 ;; This function uses a non-reentrant model
  7476 ;;
  7477                           
  7478                           
  7479                           ;psect for function _setLog_Code
  7480  11EB                     _setLog_Code:	
  7481                           
  7482                           ;RF_Control_B1.c: 313: RF1.Learn = 0;
  7483                           
  7484                           ;incstack = 0
  7485                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7486  11EB  0021               	movlb	1	; select bank1
  7487  11EC  133C               	bcf	_RF1^(0+128),6
  7488                           
  7489                           ;RF_Control_B1.c: 314: product->Data[12]=RF_Data[12];
  7490  11ED  0023               	movlb	3	; select bank3
  7491  11EE  082C               	movf	(_RF_Data^(0+384)+12),w
  7492  11EF  0020               	movlb	0	; select bank0
  7493  11F0  00AD               	movwf	??_setLog_Code
  7494  11F1  087B               	movf	_product,w
  7495  11F2  3E0C               	addlw	12
  7496  11F3  0086               	movwf	6
  7497  11F4  3002               	movlw	2	; select bank4/5
  7498  11F5  0087               	movwf	7
  7499  11F6  082D               	movf	??_setLog_Code,w
  7500  11F7  0081               	movwf	1
  7501                           
  7502                           ;RF_Control_B1.c: 315: product->Data[13]=RF_Data[13];
  7503  11F8  0023               	movlb	3	; select bank3
  7504  11F9  082D               	movf	(_RF_Data^(0+384)+13),w
  7505  11FA  0020               	movlb	0	; select bank0
  7506  11FB  00AD               	movwf	??_setLog_Code
  7507  11FC  087B               	movf	_product,w
  7508  11FD  3E0D               	addlw	13
  7509  11FE  0086               	movwf	6
  7510  11FF  3002               	movlw	2	; select bank4/5
  7511  1200  0087               	movwf	7
  7512  1201  082D               	movf	??_setLog_Code,w
  7513  1202  0081               	movwf	1
  7514                           
  7515                           ;RF_Control_B1.c: 316: product->Data[14]=RF_Data[14];
  7516  1203  0023               	movlb	3	; select bank3
  7517  1204  082E               	movf	(_RF_Data^(0+384)+14),w
  7518  1205  0020               	movlb	0	; select bank0
  7519  1206  00AD               	movwf	??_setLog_Code
  7520  1207  087B               	movf	_product,w
  7521  1208  3E0E               	addlw	14
  7522  1209  0086               	movwf	6
  7523  120A  3002               	movlw	2	; select bank4/5
  7524  120B  0087               	movwf	7
  7525  120C  082D               	movf	??_setLog_Code,w
  7526  120D  0081               	movwf	1
  7527                           
  7528                           ;RF_Control_B1.c: 317: setBuz(1, 100);
  7529  120E  3064               	movlw	100
  7530  120F  00A9               	movwf	setBuz@time
  7531  1210  3000               	movlw	0
  7532  1211  00AA               	movwf	setBuz@time+1
  7533  1212  3001               	movlw	1
  7534  1213  3196  2632  3191   	fcall	_setBuz
  7535                           
  7536                           ;RF_Control_B1.c: 318: if (myMain.First == 1) {
  7537  1216  0021               	movlb	1	; select bank1
  7538  1217  1EA0               	btfss	_myMain^(0+128),5
  7539  1218  2A1D               	goto	l2302
  7540                           
  7541                           ;RF_Control_B1.c: 319: setMemory_LoopSave(1);
  7542  1219  3001               	movlw	1
  7543  121A  319C  2437  3191   	fcall	_setMemory_LoopSave
  7544  121D                     l2302:	
  7545                           
  7546                           ;RF_Control_B1.c: 320: }
  7547                           ;RF_Control_B1.c: 321: setMemory_Modify(1);
  7548  121D  3001               	movlw	1
  7549  121E  319C  2424         	fcall	_setMemory_Modify
  7550  1220  0008               	return
  7551  1221                     __end_of_setLog_Code:	
  7552                           
  7553                           	psect	text28
  7554  1C37                     __ptext28:	
  7555 ;; *************** function _setMemory_LoopSave *****************
  7556 ;; Defined at:
  7557 ;;		line 1006 in file "../src/MCU_B1.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  command         1    wreg     unsigned char 
  7560 ;; Auto vars:     Size  Location     Type
  7561 ;;  command         1    1[BANK0 ] unsigned char 
  7562 ;; Return value:  Size  Location     Type
  7563 ;;		None               void
  7564 ;; Registers used:
  7565 ;;		wreg, status,2, status,0
  7566 ;; Tracked objects:
  7567 ;;		On entry : 0/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7574 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7575 ;;Total ram usage:        2 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; Hardware stack levels required when called:    5
  7578 ;; This function calls:
  7579 ;;		Nothing
  7580 ;; This function is called by:
  7581 ;;		_setLog_Code
  7582 ;; This function uses a non-reentrant model
  7583 ;;
  7584                           
  7585                           
  7586                           ;psect for function _setMemory_LoopSave
  7587  1C37                     _setMemory_LoopSave:	
  7588                           
  7589                           ;incstack = 0
  7590                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7591                           ;setMemory_LoopSave@command stored from wreg
  7592  1C37  0020               	movlb	0	; select bank0
  7593  1C38  00A1               	movwf	setMemory_LoopSave@command
  7594                           
  7595                           ;MCU_B1.c: 1007: Memory.LoopSave = command == 1 ? 1 : 0;
  7596  1C39  0821               	movf	setMemory_LoopSave@command,w
  7597  1C3A  3A01               	xorlw	1
  7598  1C3B  3000               	movlw	0
  7599  1C3C  1903               	skipnz
  7600  1C3D  3001               	movlw	1
  7601  1C3E  00A0               	movwf	??_setMemory_LoopSave
  7602  1C3F  0DA0               	rlf	??_setMemory_LoopSave,f
  7603  1C40  0DA0               	rlf	??_setMemory_LoopSave,f
  7604  1C41  0024               	movlb	4	; select bank4
  7605  1C42  0844               	movf	(_Memory^(0+512)+36),w
  7606  1C43  0020               	movlb	0	; select bank0
  7607  1C44  0620               	xorwf	??_setMemory_LoopSave,w
  7608  1C45  39FB               	andlw	-5
  7609  1C46  0620               	xorwf	??_setMemory_LoopSave,w
  7610  1C47  0024               	movlb	4	; select bank4
  7611  1C48  00C4               	movwf	(_Memory^(0+512)+36)
  7612  1C49  0008               	return
  7613  1C4A                     __end_of_setMemory_LoopSave:	
  7614                           
  7615                           	psect	text29
  7616  0A6E                     __ptext29:	
  7617 ;; *************** function _setControl_Lights_Table *****************
  7618 ;; Defined at:
  7619 ;;		line 325 in file "../src/RF_Control_B1.c"
  7620 ;; Parameters:    Size  Location     Type
  7621 ;;		None
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;		None
  7624 ;; Return value:  Size  Location     Type
  7625 ;;		None               void
  7626 ;; Registers used:
  7627 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7637 ;;Total ram usage:        0 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:   11
  7640 ;; This function calls:
  7641 ;;		_setBuz
  7642 ;;		_setRFSW_AdjControl
  7643 ;;		_setRFSW_Control
  7644 ;;		_setTxData
  7645 ;; This function is called by:
  7646 ;;		_getRxData
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           
  7651                           ;psect for function _setControl_Lights_Table
  7652  0A6E                     _setControl_Lights_Table:	
  7653                           
  7654                           ;RF_Control_B1.c: 326: switch (RF_Data[15]) {
  7655                           
  7656                           ;incstack = 0
  7657                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7658  0A6E  2AC0               	goto	l9240
  7659  0A6F                     l9212:	
  7660                           ;RF_Control_B1.c: 327: case 0x00:
  7661                           
  7662                           
  7663                           ;RF_Control_B1.c: 330: setRFSW_Control(1);
  7664  0A6F  3001               	movlw	1
  7665  0A70  3194  24DD  318A   	fcall	_setRFSW_Control
  7666                           
  7667                           ;RF_Control_B1.c: 336: setRFSW_Control(2);
  7668  0A73  3002               	movlw	2
  7669  0A74  3194  24DD  318A   	fcall	_setRFSW_Control
  7670                           
  7671                           ;RF_Control_B1.c: 344: product->Data[9]=0;
  7672  0A77  087B               	movf	_product,w
  7673  0A78  3E09               	addlw	9
  7674  0A79  0086               	movwf	6
  7675  0A7A  3002               	movlw	2	; select bank4/5
  7676  0A7B  0087               	movwf	7
  7677  0A7C  0181               	clrf	1
  7678                           
  7679                           ;RF_Control_B1.c: 345: product->Data[11]=0;
  7680  0A7D  087B               	movf	_product,w
  7681  0A7E  3E0B               	addlw	11
  7682  0A7F  0086               	movwf	6
  7683  0A80  3002               	movlw	2	; select bank4/5
  7684  0A81  0087               	movwf	7
  7685  0A82  0181               	clrf	1
  7686                           
  7687                           ;RF_Control_B1.c: 346: product->Data[15]=0;
  7688  0A83  087B               	movf	_product,w
  7689  0A84  3E0F               	addlw	15
  7690  0A85  0086               	movwf	6
  7691  0A86  3002               	movlw	2	; select bank4/5
  7692  0A87  0087               	movwf	7
  7693  0A88  0181               	clrf	1
  7694                           
  7695                           ;RF_Control_B1.c: 347: product->Data[17]=0;
  7696  0A89  087B               	movf	_product,w
  7697  0A8A  3E11               	addlw	17
  7698  0A8B  0086               	movwf	6
  7699  0A8C  3002               	movlw	2	; select bank4/5
  7700  0A8D  0087               	movwf	7
  7701  0A8E  0181               	clrf	1
  7702                           
  7703                           ;RF_Control_B1.c: 348: setBuz(1, 100);
  7704  0A8F  3064               	movlw	100
  7705  0A90  0020               	movlb	0	; select bank0
  7706  0A91  00A9               	movwf	setBuz@time
  7707  0A92  3000               	movlw	0
  7708  0A93  00AA               	movwf	setBuz@time+1
  7709  0A94  3001               	movlw	1
  7710  0A95  3196  2632  318A   	fcall	_setBuz
  7711                           
  7712                           ;RF_Control_B1.c: 349: setTxData();
  7713  0A98  318D  2549         	fcall	_setTxData
  7714                           
  7715                           ;RF_Control_B1.c: 350: break;
  7716  0A9A  0008               	return
  7717  0A9B                     l9226:	
  7718                           ;RF_Control_B1.c: 351: case 0x20:
  7719                           
  7720                           
  7721                           ;RF_Control_B1.c: 352: product->Data[9]=0;
  7722  0A9B  087B               	movf	_product,w
  7723  0A9C  3E09               	addlw	9
  7724  0A9D  0086               	movwf	6
  7725  0A9E  3002               	movlw	2	; select bank4/5
  7726  0A9F  0087               	movwf	7
  7727  0AA0  0181               	clrf	1
  7728                           
  7729                           ;RF_Control_B1.c: 353: product->Data[11]=0;
  7730  0AA1  087B               	movf	_product,w
  7731  0AA2  3E0B               	addlw	11
  7732  0AA3  0086               	movwf	6
  7733  0AA4  3002               	movlw	2	; select bank4/5
  7734  0AA5  0087               	movwf	7
  7735  0AA6  0181               	clrf	1
  7736                           
  7737                           ;RF_Control_B1.c: 354: product->Data[17]=0;
  7738  0AA7  087B               	movf	_product,w
  7739  0AA8  3E11               	addlw	17
  7740  0AA9  0086               	movwf	6
  7741  0AAA  3002               	movlw	2	; select bank4/5
  7742  0AAB  0087               	movwf	7
  7743  0AAC  0181               	clrf	1
  7744                           
  7745                           ;RF_Control_B1.c: 355: setTxData();
  7746  0AAD  318D  2549         	fcall	_setTxData
  7747                           
  7748                           ;RF_Control_B1.c: 356: break;
  7749  0AAF  0008               	return
  7750  0AB0                     l9230:	
  7751                           ;RF_Control_B1.c: 357: case 0x01:
  7752                           
  7753                           
  7754                           ;RF_Control_B1.c: 359: setRFSW_Control(1);
  7755  0AB0  3001               	movlw	1
  7756  0AB1  3194  24DD         	fcall	_setRFSW_Control
  7757                           
  7758                           ;RF_Control_B1.c: 361: break;
  7759  0AB3  0008               	return
  7760  0AB4                     l9232:	
  7761                           ;RF_Control_B1.c: 362: case 0x02:
  7762                           
  7763                           
  7764                           ;RF_Control_B1.c: 364: setRFSW_Control(2);
  7765  0AB4  3002               	movlw	2
  7766  0AB5  3194  24DD         	fcall	_setRFSW_Control
  7767                           
  7768                           ;RF_Control_B1.c: 371: break;
  7769                           
  7770                           ;RF_Control_B1.c: 367: case 0x03:
  7771                           
  7772                           ;RF_Control_B1.c: 366: break;
  7773  0AB7  0008               	return
  7774  0AB8                     l9234:	
  7775                           ;RF_Control_B1.c: 372: case 0x11:
  7776                           
  7777                           
  7778                           ;RF_Control_B1.c: 375: setRFSW_AdjControl(1);
  7779  0AB8  3001               	movlw	1
  7780  0AB9  3192  2258         	fcall	_setRFSW_AdjControl
  7781                           
  7782                           ;RF_Control_B1.c: 378: break;
  7783  0ABB  0008               	return
  7784  0ABC                     l9236:	
  7785                           ;RF_Control_B1.c: 379: case 0x21:
  7786                           
  7787                           
  7788                           ;RF_Control_B1.c: 382: setRFSW_AdjControl(2);
  7789  0ABC  3002               	movlw	2
  7790  0ABD  3192  2258         	fcall	_setRFSW_AdjControl
  7791                           
  7792                           ;RF_Control_B1.c: 393: }
  7793                           
  7794                           ;RF_Control_B1.c: 392: break;
  7795                           
  7796                           ;RF_Control_B1.c: 386: case 0x31:
  7797                           
  7798                           ;RF_Control_B1.c: 385: break;
  7799  0ABF  0008               	return
  7800  0AC0                     l9240:	
  7801  0AC0  0023               	movlb	3	; select bank3
  7802  0AC1  082F               	movf	(_RF_Data^(0+384)+15),w
  7803                           
  7804                           ; Switch size 1, requested type "space"
  7805                           ; Number of cases is 8, Range of values is 0 to 49
  7806                           ; switch strategies available:
  7807                           ; Name         Instructions Cycles
  7808                           ; simple_byte           25    13 (average)
  7809                           ; direct_byte          106     6 (fixed)
  7810                           ; jumptable            260     6 (fixed)
  7811                           ;	Chosen strategy is simple_byte
  7812  0AC2  3A00               	xorlw	0	; case 0
  7813  0AC3  1903               	skipnz
  7814  0AC4  2A6F               	goto	l9212
  7815  0AC5  3A01               	xorlw	1	; case 1
  7816  0AC6  1903               	skipnz
  7817  0AC7  2AB0               	goto	l9230
  7818  0AC8  3A03               	xorlw	3	; case 2
  7819  0AC9  1903               	skipnz
  7820  0ACA  2AB4               	goto	l9232
  7821  0ACB  3A01               	xorlw	1	; case 3
  7822  0ACC  1903               	skipnz
  7823  0ACD  2ADB               	goto	l2316
  7824  0ACE  3A12               	xorlw	18	; case 17
  7825  0ACF  1903               	skipnz
  7826  0AD0  2AB8               	goto	l9234
  7827  0AD1  3A31               	xorlw	49	; case 32
  7828  0AD2  1903               	skipnz
  7829  0AD3  2A9B               	goto	l9226
  7830  0AD4  3A01               	xorlw	1	; case 33
  7831  0AD5  1903               	skipnz
  7832  0AD6  2ABC               	goto	l9236
  7833  0AD7  3A10               	xorlw	16	; case 49
  7834  0AD8  1903               	skipnz
  7835  0AD9  2ADB               	goto	l2316
  7836  0ADA  2ADB               	goto	l2316
  7837  0ADB                     l2316:	
  7838  0ADB  0008               	return
  7839  0ADC                     __end_of_setControl_Lights_Table:	
  7840                           
  7841                           	psect	text30
  7842  14DD                     __ptext30:	
  7843 ;; *************** function _setRFSW_Control *****************
  7844 ;; Defined at:
  7845 ;;		line 476 in file "../src/RF_Control_B1.c"
  7846 ;; Parameters:    Size  Location     Type
  7847 ;;  sw              1    wreg     unsigned char 
  7848 ;; Auto vars:     Size  Location     Type
  7849 ;;  sw              1   71[BANK0 ] unsigned char 
  7850 ;; Return value:  Size  Location     Type
  7851 ;;		None               void
  7852 ;; Registers used:
  7853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7854 ;; Tracked objects:
  7855 ;;		On entry : 0/0
  7856 ;;		On exit  : 0/0
  7857 ;;		Unchanged: 0/0
  7858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7863 ;;Total ram usage:        2 bytes
  7864 ;; Hardware stack levels used:    1
  7865 ;; Hardware stack levels required when called:   10
  7866 ;; This function calls:
  7867 ;;		_getDimmerLights_Status
  7868 ;;		_setDelayOff_GO
  7869 ;;		_setDimmerLights_SwOff
  7870 ;;		_setDimmerLights_SwOn
  7871 ;;		_setRF_DimmerLights
  7872 ;; This function is called by:
  7873 ;;		_setControl_Lights_Table
  7874 ;; This function uses a non-reentrant model
  7875 ;;
  7876                           
  7877                           
  7878                           ;psect for function _setRFSW_Control
  7879  14DD                     _setRFSW_Control:	
  7880                           
  7881                           ;incstack = 0
  7882                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7883                           ;setRFSW_Control@sw stored from wreg
  7884  14DD  0020               	movlb	0	; select bank0
  7885  14DE  00E7               	movwf	setRFSW_Control@sw
  7886                           
  7887                           ;RF_Control_B1.c: 479: setDimmerLights_SwOn(sw);
  7888  14DF  0867               	movf	setRFSW_Control@sw,w
  7889  14E0  3193  2360  3194   	fcall	_setDimmerLights_SwOn
  7890                           
  7891                           ;RF_Control_B1.c: 481: if (getDimmerLights_Status(sw) == 1) {
  7892  14E3  0020               	movlb	0	; select bank0
  7893  14E4  0867               	movf	setRFSW_Control@sw,w
  7894  14E5  319B  2374  3194   	fcall	_getDimmerLights_Status
  7895  14E8  3A01               	xorlw	1
  7896  14E9  1D03               	skipz
  7897  14EA  2D04               	goto	l9056
  7898                           
  7899                           ;RF_Control_B1.c: 482: if (RF_Data[16] == 0x80) {
  7900  14EB  0023               	movlb	3	; select bank3
  7901  14EC  0830               	movf	(_RF_Data^(0+384)+16),w
  7902  14ED  3A80               	xorlw	128
  7903  14EE  1D03               	skipz
  7904  14EF  2CFD               	goto	l2320
  7905                           
  7906                           ;RF_Control_B1.c: 483: setDelayOff_GO(sw, 1, RF_Data[17]);
  7907  14F0  0020               	movlb	0	; select bank0
  7908  14F1  01AA               	clrf	setDelayOff_GO@command
  7909  14F2  0AAA               	incf	setDelayOff_GO@command,f
  7910  14F3  0023               	movlb	3	; select bank3
  7911  14F4  0831               	movf	(_RF_Data^(0+384)+17),w
  7912  14F5  0020               	movlb	0	; select bank0
  7913  14F6  00E6               	movwf	??_setRFSW_Control
  7914  14F7  0866               	movf	??_setRFSW_Control,w
  7915  14F8  00AB               	movwf	setDelayOff_GO@value
  7916  14F9  0867               	movf	setRFSW_Control@sw,w
  7917  14FA  3197  279F  3194   	fcall	_setDelayOff_GO
  7918  14FD                     l2320:	
  7919                           
  7920                           ;RF_Control_B1.c: 484: }
  7921                           ;RF_Control_B1.c: 486: setRF_DimmerLights(sw, 1);
  7922  14FD  0020               	movlb	0	; select bank0
  7923  14FE  01DD               	clrf	setRF_DimmerLights@on
  7924  14FF  0ADD               	incf	setRF_DimmerLights@on,f
  7925  1500  0867               	movf	setRFSW_Control@sw,w
  7926  1501  318A  2202         	fcall	_setRF_DimmerLights
  7927                           
  7928                           ;RF_Control_B1.c: 488: } else {
  7929  1503  0008               	return
  7930  1504                     l9056:	
  7931                           
  7932                           ;RF_Control_B1.c: 489: if (RF_Data[16] == 0x80) {
  7933  1504  0023               	movlb	3	; select bank3
  7934  1505  0830               	movf	(_RF_Data^(0+384)+16),w
  7935  1506  3A80               	xorlw	128
  7936  1507  1D03               	skipz
  7937  1508  2D1D               	goto	l9060
  7938                           
  7939                           ;RF_Control_B1.c: 490: setDelayOff_GO(sw, 1, RF_Data[17]);
  7940  1509  0020               	movlb	0	; select bank0
  7941  150A  01AA               	clrf	setDelayOff_GO@command
  7942  150B  0AAA               	incf	setDelayOff_GO@command,f
  7943  150C  0023               	movlb	3	; select bank3
  7944  150D  0831               	movf	(_RF_Data^(0+384)+17),w
  7945  150E  0020               	movlb	0	; select bank0
  7946  150F  00E6               	movwf	??_setRFSW_Control
  7947  1510  0866               	movf	??_setRFSW_Control,w
  7948  1511  00AB               	movwf	setDelayOff_GO@value
  7949  1512  0867               	movf	setRFSW_Control@sw,w
  7950  1513  3197  279F  3194   	fcall	_setDelayOff_GO
  7951                           
  7952                           ;RF_Control_B1.c: 491: setRF_DimmerLights(sw, 1);
  7953  1516  0020               	movlb	0	; select bank0
  7954  1517  01DD               	clrf	setRF_DimmerLights@on
  7955  1518  0ADD               	incf	setRF_DimmerLights@on,f
  7956  1519  0867               	movf	setRFSW_Control@sw,w
  7957  151A  318A  2202         	fcall	_setRF_DimmerLights
  7958                           
  7959                           ;RF_Control_B1.c: 492: } else {
  7960  151C  0008               	return
  7961  151D                     l9060:	
  7962                           
  7963                           ;RF_Control_B1.c: 494: setDimmerLights_SwOff(sw);
  7964  151D  0020               	movlb	0	; select bank0
  7965  151E  0867               	movf	setRFSW_Control@sw,w
  7966  151F  3197  2740  3194   	fcall	_setDimmerLights_SwOff
  7967                           
  7968                           ;RF_Control_B1.c: 495: setRF_DimmerLights(sw, 0);
  7969  1522  0020               	movlb	0	; select bank0
  7970  1523  01DD               	clrf	setRF_DimmerLights@on
  7971  1524  0867               	movf	setRFSW_Control@sw,w
  7972  1525  318A  2202  3194   	fcall	_setRF_DimmerLights
  7973                           
  7974                           ;RF_Control_B1.c: 497: setDelayOff_GO(sw, 0, 0);
  7975  1528  0020               	movlb	0	; select bank0
  7976  1529  01AA               	clrf	setDelayOff_GO@command
  7977  152A  01AB               	clrf	setDelayOff_GO@value
  7978  152B  0867               	movf	setRFSW_Control@sw,w
  7979  152C  3197  279F         	fcall	_setDelayOff_GO
  7980  152E  0008               	return
  7981  152F                     __end_of_setRFSW_Control:	
  7982                           
  7983                           	psect	text31
  7984  1258                     __ptext31:	
  7985 ;; *************** function _setRFSW_AdjControl *****************
  7986 ;; Defined at:
  7987 ;;		line 503 in file "../src/RF_Control_B1.c"
  7988 ;; Parameters:    Size  Location     Type
  7989 ;;  sw              1    wreg     unsigned char 
  7990 ;; Auto vars:     Size  Location     Type
  7991 ;;  sw              1   70[BANK0 ] unsigned char 
  7992 ;; Return value:  Size  Location     Type
  7993 ;;		None               void
  7994 ;; Registers used:
  7995 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7996 ;; Tracked objects:
  7997 ;;		On entry : 0/0
  7998 ;;		On exit  : 0/0
  7999 ;;		Unchanged: 0/0
  8000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;Total ram usage:        3 bytes
  8006 ;; Hardware stack levels used:    1
  8007 ;; Hardware stack levels required when called:   10
  8008 ;; This function calls:
  8009 ;;		_getDimmerLights_Status
  8010 ;;		_setMemory_Modify
  8011 ;;		_setRF_DimmerValue
  8012 ;;		_setTxData
  8013 ;; This function is called by:
  8014 ;;		_setControl_Lights_Table
  8015 ;; This function uses a non-reentrant model
  8016 ;;
  8017                           
  8018                           
  8019                           ;psect for function _setRFSW_AdjControl
  8020  1258                     _setRFSW_AdjControl:	
  8021                           
  8022                           ;incstack = 0
  8023                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8024                           ;setRFSW_AdjControl@sw stored from wreg
  8025  1258  0020               	movlb	0	; select bank0
  8026  1259  00E6               	movwf	setRFSW_AdjControl@sw
  8027                           
  8028                           ;RF_Control_B1.c: 505: if (getDimmerLights_Status(sw) == 1) {
  8029  125A  0866               	movf	setRFSW_AdjControl@sw,w
  8030  125B  319B  2374  3192   	fcall	_getDimmerLights_Status
  8031  125E  3A01               	xorlw	1
  8032  125F  1D03               	skipz
  8033  1260  2A6B               	goto	l9068
  8034                           
  8035                           ;RF_Control_B1.c: 506: setMemory_Modify(1);
  8036  1261  3001               	movlw	1
  8037  1262  319C  2424  3192   	fcall	_setMemory_Modify
  8038                           
  8039                           ;RF_Control_B1.c: 507: setRF_DimmerValue(sw);
  8040  1265  0020               	movlb	0	; select bank0
  8041  1266  0866               	movf	setRFSW_AdjControl@sw,w
  8042  1267  3191  214B  3192   	fcall	_setRF_DimmerValue
  8043                           
  8044                           ;RF_Control_B1.c: 508: } else {
  8045  126A  2A7D               	goto	l2328
  8046  126B                     l9068:	
  8047                           
  8048                           ;RF_Control_B1.c: 509: product->Data[9]=product->Data[20 + sw];
  8049  126B  0020               	movlb	0	; select bank0
  8050  126C  0866               	movf	setRFSW_AdjControl@sw,w
  8051  126D  3E14               	addlw	20
  8052  126E  077B               	addwf	_product,w
  8053  126F  00E4               	movwf	??_setRFSW_AdjControl
  8054  1270  0864               	movf	??_setRFSW_AdjControl,w
  8055  1271  0086               	movwf	6
  8056  1272  3002               	movlw	2	; select bank4/5
  8057  1273  0087               	movwf	7
  8058  1274  0801               	movf	1,w
  8059  1275  00E5               	movwf	??_setRFSW_AdjControl+1
  8060  1276  087B               	movf	_product,w
  8061  1277  3E09               	addlw	9
  8062  1278  0086               	movwf	6
  8063  1279  3002               	movlw	2	; select bank4/5
  8064  127A  0087               	movwf	7
  8065  127B  0865               	movf	??_setRFSW_AdjControl+1,w
  8066  127C  0081               	movwf	1
  8067  127D                     l2328:	
  8068                           
  8069                           ;RF_Control_B1.c: 510: }
  8070                           ;RF_Control_B1.c: 511: product->Data[17]=product->Data[26 + sw];
  8071  127D  0020               	movlb	0	; select bank0
  8072  127E  0866               	movf	setRFSW_AdjControl@sw,w
  8073  127F  3E1A               	addlw	26
  8074  1280  077B               	addwf	_product,w
  8075  1281  00E4               	movwf	??_setRFSW_AdjControl
  8076  1282  0864               	movf	??_setRFSW_AdjControl,w
  8077  1283  0086               	movwf	6
  8078  1284  3002               	movlw	2	; select bank4/5
  8079  1285  0087               	movwf	7
  8080  1286  0801               	movf	1,w
  8081  1287  00E5               	movwf	??_setRFSW_AdjControl+1
  8082  1288  087B               	movf	_product,w
  8083  1289  3E11               	addlw	17
  8084  128A  0086               	movwf	6
  8085  128B  3002               	movlw	2	; select bank4/5
  8086  128C  0087               	movwf	7
  8087  128D  0865               	movf	??_setRFSW_AdjControl+1,w
  8088  128E  0081               	movwf	1
  8089                           
  8090                           ;RF_Control_B1.c: 512: setTxData();
  8091  128F  318D  2549         	fcall	_setTxData
  8092  1291  0008               	return
  8093  1292                     __end_of_setRFSW_AdjControl:	
  8094                           
  8095                           	psect	text32
  8096  114B                     __ptext32:	
  8097 ;; *************** function _setRF_DimmerValue *****************
  8098 ;; Defined at:
  8099 ;;		line 517 in file "../src/RF_Control_B1.c"
  8100 ;; Parameters:    Size  Location     Type
  8101 ;;  lights          1    wreg     unsigned char 
  8102 ;; Auto vars:     Size  Location     Type
  8103 ;;  lights          1   67[BANK0 ] unsigned char 
  8104 ;; Return value:  Size  Location     Type
  8105 ;;		None               void
  8106 ;; Registers used:
  8107 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8108 ;; Tracked objects:
  8109 ;;		On entry : 0/0
  8110 ;;		On exit  : 0/0
  8111 ;;		Unchanged: 0/0
  8112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8115 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8116 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8117 ;;Total ram usage:        3 bytes
  8118 ;; Hardware stack levels used:    1
  8119 ;; Hardware stack levels required when called:    9
  8120 ;; This function calls:
  8121 ;;		_setDimmerLights_AdjRF
  8122 ;; This function is called by:
  8123 ;;		_setRFSW_AdjControl
  8124 ;; This function uses a non-reentrant model
  8125 ;;
  8126                           
  8127                           
  8128                           ;psect for function _setRF_DimmerValue
  8129  114B                     _setRF_DimmerValue:	
  8130                           
  8131                           ;incstack = 0
  8132                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8133                           ;setRF_DimmerValue@lights stored from wreg
  8134  114B  0020               	movlb	0	; select bank0
  8135  114C  00E3               	movwf	setRF_DimmerValue@lights
  8136                           
  8137                           ;RF_Control_B1.c: 518: if (RF_Data[9] > 0x64) {
  8138  114D  3065               	movlw	101
  8139  114E  0023               	movlb	3	; select bank3
  8140  114F  0229               	subwf	(_RF_Data^(0+384)+9),w
  8141  1150  1C03               	skipc
  8142  1151  2958               	goto	l8982
  8143                           
  8144                           ;RF_Control_B1.c: 519: RF_Data[9] = 0x64;
  8145  1152  3064               	movlw	100
  8146  1153  0020               	movlb	0	; select bank0
  8147  1154  00E1               	movwf	??_setRF_DimmerValue
  8148  1155  0861               	movf	??_setRF_DimmerValue,w
  8149  1156  0023               	movlb	3	; select bank3
  8150  1157  00A9               	movwf	(_RF_Data^(0+384)+9)
  8151  1158                     l8982:	
  8152                           
  8153                           ;RF_Control_B1.c: 520: }
  8154                           ;RF_Control_B1.c: 521: product->Data[9]=RF_Data[9];
  8155  1158  0829               	movf	(_RF_Data^(0+384)+9),w
  8156  1159  0020               	movlb	0	; select bank0
  8157  115A  00E1               	movwf	??_setRF_DimmerValue
  8158  115B  087B               	movf	_product,w
  8159  115C  3E09               	addlw	9
  8160  115D  0086               	movwf	6
  8161  115E  3002               	movlw	2	; select bank4/5
  8162  115F  0087               	movwf	7
  8163  1160  0861               	movf	??_setRF_DimmerValue,w
  8164  1161  0081               	movwf	1
  8165                           
  8166                           ;RF_Control_B1.c: 522: product->Data[11]=lights;
  8167  1162  0863               	movf	setRF_DimmerValue@lights,w
  8168  1163  00E1               	movwf	??_setRF_DimmerValue
  8169  1164  087B               	movf	_product,w
  8170  1165  3E0B               	addlw	11
  8171  1166  0086               	movwf	6
  8172  1167  3002               	movlw	2	; select bank4/5
  8173  1168  0087               	movwf	7
  8174  1169  0861               	movf	??_setRF_DimmerValue,w
  8175  116A  0081               	movwf	1
  8176                           
  8177                           ;RF_Control_B1.c: 523: product->Data[(20 + lights)]=product->Data[9];
  8178  116B  087B               	movf	_product,w
  8179  116C  3E09               	addlw	9
  8180  116D  0086               	movwf	6
  8181  116E  3002               	movlw	2	; select bank4/5
  8182  116F  0087               	movwf	7
  8183  1170  0801               	movf	1,w
  8184  1171  00E1               	movwf	??_setRF_DimmerValue
  8185  1172  0863               	movf	setRF_DimmerValue@lights,w
  8186  1173  3E14               	addlw	20
  8187  1174  077B               	addwf	_product,w
  8188  1175  00E2               	movwf	??_setRF_DimmerValue+1
  8189  1176  0862               	movf	??_setRF_DimmerValue+1,w
  8190  1177  0086               	movwf	6
  8191  1178  3002               	movlw	2	; select bank4/5
  8192  1179  0087               	movwf	7
  8193  117A  0861               	movf	??_setRF_DimmerValue,w
  8194  117B  0081               	movwf	1
  8195                           
  8196                           ;RF_Control_B1.c: 524: setDimmerLights_AdjRF(lights);
  8197  117C  0863               	movf	setRF_DimmerValue@lights,w
  8198  117D  319E  26A3         	fcall	_setDimmerLights_AdjRF
  8199  117F  0008               	return
  8200  1180                     __end_of_setRF_DimmerValue:	
  8201                           
  8202                           	psect	text33
  8203  1EA3                     __ptext33:	
  8204 ;; *************** function _setDimmerLights_AdjRF *****************
  8205 ;; Defined at:
  8206 ;;		line 799 in file "../src/Dimmer_B1.c"
  8207 ;; Parameters:    Size  Location     Type
  8208 ;;  lights          1    wreg     unsigned char 
  8209 ;; Auto vars:     Size  Location     Type
  8210 ;;  lights          1   64[BANK0 ] unsigned char 
  8211 ;; Return value:  Size  Location     Type
  8212 ;;		None               void
  8213 ;; Registers used:
  8214 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8215 ;; Tracked objects:
  8216 ;;		On entry : 0/0
  8217 ;;		On exit  : 0/0
  8218 ;;		Unchanged: 0/0
  8219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8223 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;Total ram usage:        2 bytes
  8225 ;; Hardware stack levels used:    1
  8226 ;; Hardware stack levels required when called:    8
  8227 ;; This function calls:
  8228 ;;		_DimmerLightsPointSelect
  8229 ;;		_getPercentValue
  8230 ;; This function is called by:
  8231 ;;		_setRF_DimmerValue
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           
  8236                           ;psect for function _setDimmerLights_AdjRF
  8237  1EA3                     _setDimmerLights_AdjRF:	
  8238                           
  8239                           ;incstack = 0
  8240                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8241                           ;setDimmerLights_AdjRF@lights stored from wreg
  8242  1EA3  0020               	movlb	0	; select bank0
  8243  1EA4  00E0               	movwf	setDimmerLights_AdjRF@lights
  8244                           
  8245                           ;Dimmer_B1.c: 800: DimmerLightsPointSelect(lights);
  8246  1EA5  0860               	movf	setDimmerLights_AdjRF@lights,w
  8247  1EA6  319C  2411  319E   	fcall	_DimmerLightsPointSelect
  8248                           
  8249                           ;Dimmer_B1.c: 801: DimmerLights->AdjRF = 1;
  8250  1EA9  0877               	movf	_DimmerLights,w
  8251  1EAA  0086               	movwf	6
  8252  1EAB  3001               	movlw	1	; select bank2/3
  8253  1EAC  0087               	movwf	7
  8254  1EAD  1501               	bsf	1,2
  8255                           
  8256                           ;Dimmer_B1.c: 802: DimmerLights->Signal = 1;
  8257  1EAE  0877               	movf	_DimmerLights,w
  8258  1EAF  0086               	movwf	6
  8259  1EB0  3001               	movlw	1	; select bank2/3
  8260  1EB1  0087               	movwf	7
  8261  1EB2  1481               	bsf	1,1
  8262                           
  8263                           ;Dimmer_B1.c: 803: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8264  1EB3  087B               	movf	_product,w
  8265  1EB4  3E09               	addlw	9
  8266  1EB5  0086               	movwf	6
  8267  1EB6  3002               	movlw	2	; select bank4/5
  8268  1EB7  0087               	movwf	7
  8269  1EB8  0801               	movf	1,w
  8270  1EB9  3196  26E5         	fcall	_getPercentValue
  8271  1EBB  0020               	movlb	0	; select bank0
  8272  1EBC  00DF               	movwf	??_setDimmerLights_AdjRF
  8273  1EBD  0877               	movf	_DimmerLights,w
  8274  1EBE  3E05               	addlw	5
  8275  1EBF  0086               	movwf	6
  8276  1EC0  3001               	movlw	1	; select bank2/3
  8277  1EC1  0087               	movwf	7
  8278  1EC2  085F               	movf	??_setDimmerLights_AdjRF,w
  8279  1EC3  0081               	movwf	1
  8280  1EC4  0008               	return
  8281  1EC5                     __end_of_setDimmerLights_AdjRF:	
  8282                           
  8283                           	psect	text34
  8284  16E5                     __ptext34:	
  8285 ;; *************** function _getPercentValue *****************
  8286 ;; Defined at:
  8287 ;;		line 912 in file "../src/Dimmer_B1.c"
  8288 ;; Parameters:    Size  Location     Type
  8289 ;;  value           1    wreg     unsigned char 
  8290 ;; Auto vars:     Size  Location     Type
  8291 ;;  value           1   59[BANK0 ] unsigned char 
  8292 ;;  i               3   60[BANK0 ] float 
  8293 ;; Return value:  Size  Location     Type
  8294 ;;                  1    wreg      unsigned char 
  8295 ;; Registers used:
  8296 ;;		wreg, status,2, status,0, pclath, cstack
  8297 ;; Tracked objects:
  8298 ;;		On entry : 0/0
  8299 ;;		On exit  : 0/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;Total ram usage:        6 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; Hardware stack levels required when called:    7
  8309 ;; This function calls:
  8310 ;;		___awtoft
  8311 ;;		___ftadd
  8312 ;;		___ftdiv
  8313 ;;		___ftmul
  8314 ;;		___fttol
  8315 ;; This function is called by:
  8316 ;;		_setDimmerLights_AdjRF
  8317 ;; This function uses a non-reentrant model
  8318 ;;
  8319                           
  8320                           
  8321                           ;psect for function _getPercentValue
  8322  16E5                     _getPercentValue:	
  8323                           
  8324                           ;incstack = 0
  8325                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8326                           ;getPercentValue@value stored from wreg
  8327  16E5  0020               	movlb	0	; select bank0
  8328  16E6  00DB               	movwf	getPercentValue@value
  8329                           
  8330                           ;Dimmer_B1.c: 914: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8331  16E7  3000               	movlw	0
  8332  16E8  00DC               	movwf	getPercentValue@i
  8333  16E9  30E0               	movlw	224
  8334  16EA  00DD               	movwf	getPercentValue@i+1
  8335  16EB  3041               	movlw	65
  8336  16EC  00DE               	movwf	getPercentValue@i+2
  8337                           
  8338                           ;Dimmer_B1.c: 915: i /= 100;
  8339  16ED  3000               	movlw	0
  8340  16EE  00AE               	movwf	___ftdiv@f2
  8341  16EF  30C8               	movlw	200
  8342  16F0  00AF               	movwf	___ftdiv@f2+1
  8343  16F1  3042               	movlw	66
  8344  16F2  00B0               	movwf	___ftdiv@f2+2
  8345  16F3  085C               	movf	getPercentValue@i,w
  8346  16F4  00B1               	movwf	___ftdiv@f1
  8347  16F5  085D               	movf	getPercentValue@i+1,w
  8348  16F6  00B2               	movwf	___ftdiv@f1+1
  8349  16F7  085E               	movf	getPercentValue@i+2,w
  8350  16F8  00B3               	movwf	___ftdiv@f1+2
  8351  16F9  318E  267B  3196   	fcall	___ftdiv
  8352  16FC  0020               	movlb	0	; select bank0
  8353  16FD  082E               	movf	?___ftdiv,w
  8354  16FE  00DC               	movwf	getPercentValue@i
  8355  16FF  082F               	movf	?___ftdiv+1,w
  8356  1700  00DD               	movwf	getPercentValue@i+1
  8357  1701  0830               	movf	?___ftdiv+2,w
  8358  1702  00DE               	movwf	getPercentValue@i+2
  8359                           
  8360                           ;Dimmer_B1.c: 916: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8361  1703  085B               	movf	getPercentValue@value,w
  8362  1704  00D9               	movwf	??_getPercentValue
  8363  1705  01DA               	clrf	??_getPercentValue+1
  8364  1706  09D9               	comf	??_getPercentValue,f
  8365  1707  09DA               	comf	??_getPercentValue+1,f
  8366  1708  0AD9               	incf	??_getPercentValue,f
  8367  1709  1903               	skipnz
  8368  170A  0ADA               	incf	??_getPercentValue+1,f
  8369  170B  0859               	movf	??_getPercentValue,w
  8370  170C  3E64               	addlw	100
  8371  170D  00A8               	movwf	___awtoft@c
  8372  170E  3000               	movlw	0
  8373  170F  3D5A               	addwfc	??_getPercentValue+1,w
  8374  1710  00A9               	movwf	___awtoft@c+1
  8375  1711  319E  265F  3196   	fcall	___awtoft
  8376  1714  0020               	movlb	0	; select bank0
  8377  1715  0828               	movf	?___awtoft,w
  8378  1716  00B1               	movwf	___ftmul@f2
  8379  1717  0829               	movf	?___awtoft+1,w
  8380  1718  00B2               	movwf	___ftmul@f2+1
  8381  1719  082A               	movf	?___awtoft+2,w
  8382  171A  00B3               	movwf	___ftmul@f2+2
  8383  171B  085C               	movf	getPercentValue@i,w
  8384  171C  00AE               	movwf	___ftmul@f1
  8385  171D  085D               	movf	getPercentValue@i+1,w
  8386  171E  00AF               	movwf	___ftmul@f1+1
  8387  171F  085E               	movf	getPercentValue@i+2,w
  8388  1720  00B0               	movwf	___ftmul@f1+2
  8389  1721  3187  2737  3196   	fcall	___ftmul
  8390  1724  0020               	movlb	0	; select bank0
  8391  1725  082E               	movf	?___ftmul,w
  8392  1726  00C1               	movwf	___ftadd@f2
  8393  1727  082F               	movf	?___ftmul+1,w
  8394  1728  00C2               	movwf	___ftadd@f2+1
  8395  1729  0830               	movf	?___ftmul+2,w
  8396  172A  00C3               	movwf	___ftadd@f2+2
  8397  172B  3000               	movlw	0
  8398  172C  00BE               	movwf	___ftadd@f1
  8399  172D  3000               	movlw	0
  8400  172E  00BF               	movwf	___ftadd@f1+1
  8401  172F  3042               	movlw	66
  8402  1730  00C0               	movwf	___ftadd@f1+2
  8403  1731  3185  2550  3196   	fcall	___ftadd
  8404  1734  0020               	movlb	0	; select bank0
  8405  1735  083E               	movf	?___ftadd,w
  8406  1736  00CB               	movwf	___fttol@f1
  8407  1737  083F               	movf	?___ftadd+1,w
  8408  1738  00CC               	movwf	___fttol@f1+1
  8409  1739  0840               	movf	?___ftadd+2,w
  8410  173A  00CD               	movwf	___fttol@f1+2
  8411  173B  318C  24C2         	fcall	___fttol
  8412  173D  0020               	movlb	0	; select bank0
  8413  173E  084B               	movf	?___fttol,w
  8414  173F  0008               	return
  8415  1740                     __end_of_getPercentValue:	
  8416                           
  8417                           	psect	text35
  8418  0737                     __ptext35:	
  8419 ;; *************** function ___ftmul *****************
  8420 ;; Defined at:
  8421 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;  f1              3   14[BANK0 ] float 
  8424 ;;  f2              3   17[BANK0 ] float 
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8427 ;;  sign            1   29[BANK0 ] unsigned char 
  8428 ;;  cntr            1   28[BANK0 ] unsigned char 
  8429 ;;  exp             1   24[BANK0 ] unsigned char 
  8430 ;; Return value:  Size  Location     Type
  8431 ;;                  3   14[BANK0 ] float 
  8432 ;; Registers used:
  8433 ;;		wreg, status,2, status,0, pclath, cstack
  8434 ;; Tracked objects:
  8435 ;;		On entry : 0/0
  8436 ;;		On exit  : 0/0
  8437 ;;		Unchanged: 0/0
  8438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8439 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8442 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8443 ;;Total ram usage:       16 bytes
  8444 ;; Hardware stack levels used:    1
  8445 ;; Hardware stack levels required when called:    6
  8446 ;; This function calls:
  8447 ;;		___ftpack
  8448 ;; This function is called by:
  8449 ;;		_getPercentValue
  8450 ;; This function uses a non-reentrant model
  8451 ;;
  8452                           
  8453                           
  8454                           ;psect for function ___ftmul
  8455  0737                     ___ftmul:	
  8456                           
  8457                           ;incstack = 0
  8458                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8459  0737  0020               	movlb	0	; select bank0
  8460  0738  082E               	movf	___ftmul@f1,w
  8461  0739  00B4               	movwf	??___ftmul
  8462  073A  082F               	movf	___ftmul@f1+1,w
  8463  073B  00B5               	movwf	??___ftmul+1
  8464  073C  0830               	movf	___ftmul@f1+2,w
  8465  073D  00B6               	movwf	??___ftmul+2
  8466  073E  1003               	clrc
  8467  073F  0D35               	rlf	??___ftmul+1,w
  8468  0740  0D36               	rlf	??___ftmul+2,w
  8469  0741  00B7               	movwf	??___ftmul+3
  8470  0742  0837               	movf	??___ftmul+3,w
  8471  0743  00B8               	movwf	___ftmul@exp
  8472  0744  08B8               	movf	___ftmul@exp,f
  8473  0745  1D03               	skipz
  8474  0746  2F4E               	goto	l8598
  8475  0747  3000               	movlw	0
  8476  0748  00AE               	movwf	?___ftmul
  8477  0749  3000               	movlw	0
  8478  074A  00AF               	movwf	?___ftmul+1
  8479  074B  3000               	movlw	0
  8480  074C  00B0               	movwf	?___ftmul+2
  8481  074D  0008               	return
  8482  074E                     l8598:	
  8483  074E  0831               	movf	___ftmul@f2,w
  8484  074F  00B4               	movwf	??___ftmul
  8485  0750  0832               	movf	___ftmul@f2+1,w
  8486  0751  00B5               	movwf	??___ftmul+1
  8487  0752  0833               	movf	___ftmul@f2+2,w
  8488  0753  00B6               	movwf	??___ftmul+2
  8489  0754  1003               	clrc
  8490  0755  0D35               	rlf	??___ftmul+1,w
  8491  0756  0D36               	rlf	??___ftmul+2,w
  8492  0757  00B7               	movwf	??___ftmul+3
  8493  0758  0837               	movf	??___ftmul+3,w
  8494  0759  00BD               	movwf	___ftmul@sign
  8495  075A  08BD               	movf	___ftmul@sign,f
  8496  075B  1D03               	skipz
  8497  075C  2F64               	goto	l8604
  8498  075D  3000               	movlw	0
  8499  075E  00AE               	movwf	?___ftmul
  8500  075F  3000               	movlw	0
  8501  0760  00AF               	movwf	?___ftmul+1
  8502  0761  3000               	movlw	0
  8503  0762  00B0               	movwf	?___ftmul+2
  8504  0763  0008               	return
  8505  0764                     l8604:	
  8506  0764  083D               	movf	___ftmul@sign,w
  8507  0765  3E7B               	addlw	123
  8508  0766  00B4               	movwf	??___ftmul
  8509  0767  0834               	movf	??___ftmul,w
  8510  0768  07B8               	addwf	___ftmul@exp,f
  8511  0769  082E               	movf	___ftmul@f1,w
  8512  076A  00B4               	movwf	??___ftmul
  8513  076B  082F               	movf	___ftmul@f1+1,w
  8514  076C  00B5               	movwf	??___ftmul+1
  8515  076D  0830               	movf	___ftmul@f1+2,w
  8516  076E  00B6               	movwf	??___ftmul+2
  8517  076F  3010               	movlw	16
  8518  0770                     u9025:	
  8519  0770  36B6               	lsrf	??___ftmul+2,f
  8520  0771  0CB5               	rrf	??___ftmul+1,f
  8521  0772  0CB4               	rrf	??___ftmul,f
  8522  0773  0B89               	decfsz	9,f
  8523  0774  2F70               	goto	u9025
  8524  0775  0834               	movf	??___ftmul,w
  8525  0776  00B7               	movwf	??___ftmul+3
  8526  0777  0837               	movf	??___ftmul+3,w
  8527  0778  00BD               	movwf	___ftmul@sign
  8528  0779  0831               	movf	___ftmul@f2,w
  8529  077A  00B4               	movwf	??___ftmul
  8530  077B  0832               	movf	___ftmul@f2+1,w
  8531  077C  00B5               	movwf	??___ftmul+1
  8532  077D  0833               	movf	___ftmul@f2+2,w
  8533  077E  00B6               	movwf	??___ftmul+2
  8534  077F  3010               	movlw	16
  8535  0780                     u9035:	
  8536  0780  36B6               	lsrf	??___ftmul+2,f
  8537  0781  0CB5               	rrf	??___ftmul+1,f
  8538  0782  0CB4               	rrf	??___ftmul,f
  8539  0783  0B89               	decfsz	9,f
  8540  0784  2F80               	goto	u9035
  8541  0785  0834               	movf	??___ftmul,w
  8542  0786  00B7               	movwf	??___ftmul+3
  8543  0787  0837               	movf	??___ftmul+3,w
  8544  0788  06BD               	xorwf	___ftmul@sign,f
  8545  0789  3080               	movlw	128
  8546  078A  00B4               	movwf	??___ftmul
  8547  078B  0834               	movf	??___ftmul,w
  8548  078C  05BD               	andwf	___ftmul@sign,f
  8549  078D  17AF               	bsf	___ftmul@f1+1,7
  8550  078E  17B2               	bsf	___ftmul@f2+1,7
  8551  078F  30FF               	movlw	255
  8552  0790  05B1               	andwf	___ftmul@f2,f
  8553  0791  30FF               	movlw	255
  8554  0792  05B2               	andwf	___ftmul@f2+1,f
  8555  0793  3000               	movlw	0
  8556  0794  05B3               	andwf	___ftmul@f2+2,f
  8557  0795  3000               	movlw	0
  8558  0796  00B9               	movwf	___ftmul@f3_as_product
  8559  0797  3000               	movlw	0
  8560  0798  00BA               	movwf	___ftmul@f3_as_product+1
  8561  0799  3000               	movlw	0
  8562  079A  00BB               	movwf	___ftmul@f3_as_product+2
  8563  079B  3007               	movlw	7
  8564  079C  00B4               	movwf	??___ftmul
  8565  079D  0834               	movf	??___ftmul,w
  8566  079E  00BC               	movwf	___ftmul@cntr
  8567  079F                     l8616:	
  8568  079F  1C2E               	btfss	___ftmul@f1,0
  8569  07A0  2FA7               	goto	l8620
  8570  07A1  0831               	movf	___ftmul@f2,w
  8571  07A2  07B9               	addwf	___ftmul@f3_as_product,f
  8572  07A3  0832               	movf	___ftmul@f2+1,w
  8573  07A4  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8574  07A5  0833               	movf	___ftmul@f2+2,w
  8575  07A6  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8576  07A7                     l8620:	
  8577  07A7  3001               	movlw	1
  8578  07A8                     u9055:	
  8579  07A8  36B0               	lsrf	___ftmul@f1+2,f
  8580  07A9  0CAF               	rrf	___ftmul@f1+1,f
  8581  07AA  0CAE               	rrf	___ftmul@f1,f
  8582  07AB  0B89               	decfsz	9,f
  8583  07AC  2FA8               	goto	u9055
  8584  07AD  3001               	movlw	1
  8585  07AE                     u9065:	
  8586  07AE  35B1               	lslf	___ftmul@f2,f
  8587  07AF  0DB2               	rlf	___ftmul@f2+1,f
  8588  07B0  0DB3               	rlf	___ftmul@f2+2,f
  8589  07B1  0B89               	decfsz	9,f
  8590  07B2  2FAE               	goto	u9065
  8591  07B3  3001               	movlw	1
  8592  07B4  02BC               	subwf	___ftmul@cntr,f
  8593  07B5  1D03               	btfss	3,2
  8594  07B6  2F9F               	goto	l8616
  8595  07B7  3009               	movlw	9
  8596  07B8  00B4               	movwf	??___ftmul
  8597  07B9  0834               	movf	??___ftmul,w
  8598  07BA  00BC               	movwf	___ftmul@cntr
  8599  07BB                     l8628:	
  8600  07BB  1C2E               	btfss	___ftmul@f1,0
  8601  07BC  2FC3               	goto	l8632
  8602  07BD  0831               	movf	___ftmul@f2,w
  8603  07BE  07B9               	addwf	___ftmul@f3_as_product,f
  8604  07BF  0832               	movf	___ftmul@f2+1,w
  8605  07C0  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8606  07C1  0833               	movf	___ftmul@f2+2,w
  8607  07C2  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8608  07C3                     l8632:	
  8609  07C3  3001               	movlw	1
  8610  07C4                     u9095:	
  8611  07C4  36B0               	lsrf	___ftmul@f1+2,f
  8612  07C5  0CAF               	rrf	___ftmul@f1+1,f
  8613  07C6  0CAE               	rrf	___ftmul@f1,f
  8614  07C7  0B89               	decfsz	9,f
  8615  07C8  2FC4               	goto	u9095
  8616  07C9  3001               	movlw	1
  8617  07CA                     u9105:	
  8618  07CA  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8619  07CB  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8620  07CC  0CB9               	rrf	___ftmul@f3_as_product,f
  8621  07CD  0B89               	decfsz	9,f
  8622  07CE  2FCA               	goto	u9105
  8623  07CF  3001               	movlw	1
  8624  07D0  02BC               	subwf	___ftmul@cntr,f
  8625  07D1  1D03               	btfss	3,2
  8626  07D2  2FBB               	goto	l8628
  8627  07D3  0839               	movf	___ftmul@f3_as_product,w
  8628  07D4  00A0               	movwf	___ftpack@arg
  8629  07D5  083A               	movf	___ftmul@f3_as_product+1,w
  8630  07D6  00A1               	movwf	___ftpack@arg+1
  8631  07D7  083B               	movf	___ftmul@f3_as_product+2,w
  8632  07D8  00A2               	movwf	___ftpack@arg+2
  8633  07D9  0838               	movf	___ftmul@exp,w
  8634  07DA  00B4               	movwf	??___ftmul
  8635  07DB  0834               	movf	??___ftmul,w
  8636  07DC  00A3               	movwf	___ftpack@exp
  8637  07DD  083D               	movf	___ftmul@sign,w
  8638  07DE  00B5               	movwf	??___ftmul+1
  8639  07DF  0835               	movf	??___ftmul+1,w
  8640  07E0  00A4               	movwf	___ftpack@sign
  8641  07E1  3188  2015         	fcall	___ftpack
  8642  07E3  0020               	movlb	0	; select bank0
  8643  07E4  0820               	movf	?___ftpack,w
  8644  07E5  00AE               	movwf	?___ftmul
  8645  07E6  0821               	movf	?___ftpack+1,w
  8646  07E7  00AF               	movwf	?___ftmul+1
  8647  07E8  0822               	movf	?___ftpack+2,w
  8648  07E9  00B0               	movwf	?___ftmul+2
  8649  07EA  0008               	return
  8650  07EB                     __end_of___ftmul:	
  8651                           
  8652                           	psect	text36
  8653  0550                     __ptext36:	
  8654 ;; *************** function ___ftadd *****************
  8655 ;; Defined at:
  8656 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8657 ;; Parameters:    Size  Location     Type
  8658 ;;  f1              3   30[BANK0 ] float 
  8659 ;;  f2              3   33[BANK0 ] float 
  8660 ;; Auto vars:     Size  Location     Type
  8661 ;;  exp1            1   42[BANK0 ] unsigned char 
  8662 ;;  exp2            1   41[BANK0 ] unsigned char 
  8663 ;;  sign            1   40[BANK0 ] unsigned char 
  8664 ;; Return value:  Size  Location     Type
  8665 ;;                  3   30[BANK0 ] float 
  8666 ;; Registers used:
  8667 ;;		wreg, status,2, status,0, pclath, cstack
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8673 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8676 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;Total ram usage:       13 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:    6
  8680 ;; This function calls:
  8681 ;;		___ftpack
  8682 ;; This function is called by:
  8683 ;;		_getPercentValue
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           
  8688                           ;psect for function ___ftadd
  8689  0550                     ___ftadd:	
  8690                           
  8691                           ;incstack = 0
  8692                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8693  0550  0020               	movlb	0	; select bank0
  8694  0551  083E               	movf	___ftadd@f1,w
  8695  0552  00C4               	movwf	??___ftadd
  8696  0553  083F               	movf	___ftadd@f1+1,w
  8697  0554  00C5               	movwf	??___ftadd+1
  8698  0555  0840               	movf	___ftadd@f1+2,w
  8699  0556  00C6               	movwf	??___ftadd+2
  8700  0557  1003               	clrc
  8701  0558  0D45               	rlf	??___ftadd+1,w
  8702  0559  0D46               	rlf	??___ftadd+2,w
  8703  055A  00C7               	movwf	??___ftadd+3
  8704  055B  0847               	movf	??___ftadd+3,w
  8705  055C  00CA               	movwf	___ftadd@exp1
  8706  055D  0841               	movf	___ftadd@f2,w
  8707  055E  00C4               	movwf	??___ftadd
  8708  055F  0842               	movf	___ftadd@f2+1,w
  8709  0560  00C5               	movwf	??___ftadd+1
  8710  0561  0843               	movf	___ftadd@f2+2,w
  8711  0562  00C6               	movwf	??___ftadd+2
  8712  0563  1003               	clrc
  8713  0564  0D45               	rlf	??___ftadd+1,w
  8714  0565  0D46               	rlf	??___ftadd+2,w
  8715  0566  00C7               	movwf	??___ftadd+3
  8716  0567  0847               	movf	??___ftadd+3,w
  8717  0568  00C9               	movwf	___ftadd@exp2
  8718  0569  084A               	movf	___ftadd@exp1,w
  8719  056A  1903               	btfsc	3,2
  8720  056B  2D78               	goto	l8486
  8721  056C  0849               	movf	___ftadd@exp2,w
  8722  056D  024A               	subwf	___ftadd@exp1,w
  8723  056E  1803               	skipnc
  8724  056F  2D7F               	goto	l8490
  8725  0570  034A               	decf	___ftadd@exp1,w
  8726  0571  3AFF               	xorlw	255
  8727  0572  0749               	addwf	___ftadd@exp2,w
  8728  0573  00C4               	movwf	??___ftadd
  8729  0574  3019               	movlw	25
  8730  0575  0244               	subwf	??___ftadd,w
  8731  0576  1C03               	skipc
  8732  0577  2D7F               	goto	l8490
  8733  0578                     l8486:	
  8734  0578  0841               	movf	___ftadd@f2,w
  8735  0579  00BE               	movwf	?___ftadd
  8736  057A  0842               	movf	___ftadd@f2+1,w
  8737  057B  00BF               	movwf	?___ftadd+1
  8738  057C  0843               	movf	___ftadd@f2+2,w
  8739  057D  00C0               	movwf	?___ftadd+2
  8740  057E  0008               	return
  8741  057F                     l8490:	
  8742  057F  0849               	movf	___ftadd@exp2,w
  8743  0580  1903               	btfsc	3,2
  8744  0581  0008               	return
  8745  0582  084A               	movf	___ftadd@exp1,w
  8746  0583  0249               	subwf	___ftadd@exp2,w
  8747  0584  1803               	skipnc
  8748  0585  2D8E               	goto	l8496
  8749  0586  0349               	decf	___ftadd@exp2,w
  8750  0587  3AFF               	xorlw	255
  8751  0588  074A               	addwf	___ftadd@exp1,w
  8752  0589  00C4               	movwf	??___ftadd
  8753  058A  3019               	movlw	25
  8754  058B  0244               	subwf	??___ftadd,w
  8755  058C  1803               	btfsc	3,0
  8756  058D  0008               	return
  8757  058E                     l8496:	
  8758  058E  3006               	movlw	6
  8759  058F  00C4               	movwf	??___ftadd
  8760  0590  0844               	movf	??___ftadd,w
  8761  0591  00C8               	movwf	___ftadd@sign
  8762  0592  1BC0               	btfsc	___ftadd@f1+2,7
  8763  0593  17C8               	bsf	___ftadd@sign,7
  8764  0594  1BC3               	btfsc	___ftadd@f2+2,7
  8765  0595  1748               	bsf	___ftadd@sign,6
  8766  0596  17BF               	bsf	___ftadd@f1+1,7
  8767  0597  30FF               	movlw	255
  8768  0598  05BE               	andwf	___ftadd@f1,f
  8769  0599  30FF               	movlw	255
  8770  059A  05BF               	andwf	___ftadd@f1+1,f
  8771  059B  3000               	movlw	0
  8772  059C  05C0               	andwf	___ftadd@f1+2,f
  8773  059D  17C2               	bsf	___ftadd@f2+1,7
  8774  059E  30FF               	movlw	255
  8775  059F  05C1               	andwf	___ftadd@f2,f
  8776  05A0  30FF               	movlw	255
  8777  05A1  05C2               	andwf	___ftadd@f2+1,f
  8778  05A2  3000               	movlw	0
  8779  05A3  05C3               	andwf	___ftadd@f2+2,f
  8780  05A4  0849               	movf	___ftadd@exp2,w
  8781  05A5  024A               	subwf	___ftadd@exp1,w
  8782  05A6  1803               	skipnc
  8783  05A7  2DCA               	goto	l8518
  8784  05A8                     l8508:	
  8785  05A8  3001               	movlw	1
  8786  05A9                     u8785:	
  8787  05A9  35C1               	lslf	___ftadd@f2,f
  8788  05AA  0DC2               	rlf	___ftadd@f2+1,f
  8789  05AB  0DC3               	rlf	___ftadd@f2+2,f
  8790  05AC  0B89               	decfsz	9,f
  8791  05AD  2DA9               	goto	u8785
  8792  05AE  3001               	movlw	1
  8793  05AF  02C9               	subwf	___ftadd@exp2,f
  8794  05B0  0849               	movf	___ftadd@exp2,w
  8795  05B1  064A               	xorwf	___ftadd@exp1,w
  8796  05B2  1903               	skipnz
  8797  05B3  2DC5               	goto	l8516
  8798  05B4  3001               	movlw	1
  8799  05B5  02C8               	subwf	___ftadd@sign,f
  8800  05B6  0848               	movf	___ftadd@sign,w
  8801  05B7  3907               	andlw	7
  8802  05B8  1903               	btfsc	3,2
  8803  05B9  2DC5               	goto	l8516
  8804  05BA  2DA8               	goto	l8508
  8805  05BB                     l8514:	
  8806  05BB  3001               	movlw	1
  8807  05BC                     u8815:	
  8808  05BC  36C0               	lsrf	___ftadd@f1+2,f
  8809  05BD  0CBF               	rrf	___ftadd@f1+1,f
  8810  05BE  0CBE               	rrf	___ftadd@f1,f
  8811  05BF  0B89               	decfsz	9,f
  8812  05C0  2DBC               	goto	u8815
  8813  05C1  3001               	movlw	1
  8814  05C2  00C4               	movwf	??___ftadd
  8815  05C3  0844               	movf	??___ftadd,w
  8816  05C4  07CA               	addwf	___ftadd@exp1,f
  8817  05C5                     l8516:	
  8818  05C5  084A               	movf	___ftadd@exp1,w
  8819  05C6  0649               	xorwf	___ftadd@exp2,w
  8820  05C7  1903               	btfsc	3,2
  8821  05C8  2DEF               	goto	l2953
  8822  05C9  2DBB               	goto	l8514
  8823  05CA                     l8518:	
  8824  05CA  084A               	movf	___ftadd@exp1,w
  8825  05CB  0249               	subwf	___ftadd@exp2,w
  8826  05CC  1803               	skipnc
  8827  05CD  2DEF               	goto	l2953
  8828  05CE                     l8520:	
  8829  05CE  3001               	movlw	1
  8830  05CF                     u8845:	
  8831  05CF  35BE               	lslf	___ftadd@f1,f
  8832  05D0  0DBF               	rlf	___ftadd@f1+1,f
  8833  05D1  0DC0               	rlf	___ftadd@f1+2,f
  8834  05D2  0B89               	decfsz	9,f
  8835  05D3  2DCF               	goto	u8845
  8836  05D4  3001               	movlw	1
  8837  05D5  02CA               	subwf	___ftadd@exp1,f
  8838  05D6  0849               	movf	___ftadd@exp2,w
  8839  05D7  064A               	xorwf	___ftadd@exp1,w
  8840  05D8  1903               	skipnz
  8841  05D9  2DEB               	goto	l8528
  8842  05DA  3001               	movlw	1
  8843  05DB  02C8               	subwf	___ftadd@sign,f
  8844  05DC  0848               	movf	___ftadd@sign,w
  8845  05DD  3907               	andlw	7
  8846  05DE  1903               	btfsc	3,2
  8847  05DF  2DEB               	goto	l8528
  8848  05E0  2DCE               	goto	l8520
  8849  05E1                     l8526:	
  8850  05E1  3001               	movlw	1
  8851  05E2                     u8875:	
  8852  05E2  36C3               	lsrf	___ftadd@f2+2,f
  8853  05E3  0CC2               	rrf	___ftadd@f2+1,f
  8854  05E4  0CC1               	rrf	___ftadd@f2,f
  8855  05E5  0B89               	decfsz	9,f
  8856  05E6  2DE2               	goto	u8875
  8857  05E7  3001               	movlw	1
  8858  05E8  00C4               	movwf	??___ftadd
  8859  05E9  0844               	movf	??___ftadd,w
  8860  05EA  07C9               	addwf	___ftadd@exp2,f
  8861  05EB                     l8528:	
  8862  05EB  084A               	movf	___ftadd@exp1,w
  8863  05EC  0649               	xorwf	___ftadd@exp2,w
  8864  05ED  1D03               	skipz
  8865  05EE  2DE1               	goto	l8526
  8866  05EF                     l2953:	
  8867  05EF  1FC8               	btfss	___ftadd@sign,7
  8868  05F0  2E01               	goto	l8532
  8869  05F1  30FF               	movlw	255
  8870  05F2  06BE               	xorwf	___ftadd@f1,f
  8871  05F3  30FF               	movlw	255
  8872  05F4  06BF               	xorwf	___ftadd@f1+1,f
  8873  05F5  30FF               	movlw	255
  8874  05F6  06C0               	xorwf	___ftadd@f1+2,f
  8875  05F7  3001               	movlw	1
  8876  05F8  07BE               	addwf	___ftadd@f1,f
  8877  05F9  3000               	movlw	0
  8878  05FA  1803               	skipnc
  8879  05FB  3001               	movlw	1
  8880  05FC  07BF               	addwf	___ftadd@f1+1,f
  8881  05FD  3000               	movlw	0
  8882  05FE  1803               	skipnc
  8883  05FF  3001               	movlw	1
  8884  0600  07C0               	addwf	___ftadd@f1+2,f
  8885  0601                     l8532:	
  8886  0601  1F48               	btfss	___ftadd@sign,6
  8887  0602  2E13               	goto	l8536
  8888  0603  30FF               	movlw	255
  8889  0604  06C1               	xorwf	___ftadd@f2,f
  8890  0605  30FF               	movlw	255
  8891  0606  06C2               	xorwf	___ftadd@f2+1,f
  8892  0607  30FF               	movlw	255
  8893  0608  06C3               	xorwf	___ftadd@f2+2,f
  8894  0609  3001               	movlw	1
  8895  060A  07C1               	addwf	___ftadd@f2,f
  8896  060B  3000               	movlw	0
  8897  060C  1803               	skipnc
  8898  060D  3001               	movlw	1
  8899  060E  07C2               	addwf	___ftadd@f2+1,f
  8900  060F  3000               	movlw	0
  8901  0610  1803               	skipnc
  8902  0611  3001               	movlw	1
  8903  0612  07C3               	addwf	___ftadd@f2+2,f
  8904  0613                     l8536:	
  8905  0613  01C8               	clrf	___ftadd@sign
  8906  0614  083E               	movf	___ftadd@f1,w
  8907  0615  07C1               	addwf	___ftadd@f2,f
  8908  0616  083F               	movf	___ftadd@f1+1,w
  8909  0617  3DC2               	addwfc	___ftadd@f2+1,f
  8910  0618  0840               	movf	___ftadd@f1+2,w
  8911  0619  3DC3               	addwfc	___ftadd@f2+2,f
  8912  061A  1FC3               	btfss	___ftadd@f2+2,7
  8913  061B  2E2E               	goto	l8546
  8914  061C  30FF               	movlw	255
  8915  061D  06C1               	xorwf	___ftadd@f2,f
  8916  061E  30FF               	movlw	255
  8917  061F  06C2               	xorwf	___ftadd@f2+1,f
  8918  0620  30FF               	movlw	255
  8919  0621  06C3               	xorwf	___ftadd@f2+2,f
  8920  0622  3001               	movlw	1
  8921  0623  07C1               	addwf	___ftadd@f2,f
  8922  0624  3000               	movlw	0
  8923  0625  1803               	skipnc
  8924  0626  3001               	movlw	1
  8925  0627  07C2               	addwf	___ftadd@f2+1,f
  8926  0628  3000               	movlw	0
  8927  0629  1803               	skipnc
  8928  062A  3001               	movlw	1
  8929  062B  07C3               	addwf	___ftadd@f2+2,f
  8930  062C  01C8               	clrf	___ftadd@sign
  8931  062D  0AC8               	incf	___ftadd@sign,f
  8932  062E                     l8546:	
  8933  062E  0841               	movf	___ftadd@f2,w
  8934  062F  00A0               	movwf	___ftpack@arg
  8935  0630  0842               	movf	___ftadd@f2+1,w
  8936  0631  00A1               	movwf	___ftpack@arg+1
  8937  0632  0843               	movf	___ftadd@f2+2,w
  8938  0633  00A2               	movwf	___ftpack@arg+2
  8939  0634  084A               	movf	___ftadd@exp1,w
  8940  0635  00C4               	movwf	??___ftadd
  8941  0636  0844               	movf	??___ftadd,w
  8942  0637  00A3               	movwf	___ftpack@exp
  8943  0638  0848               	movf	___ftadd@sign,w
  8944  0639  00C5               	movwf	??___ftadd+1
  8945  063A  0845               	movf	??___ftadd+1,w
  8946  063B  00A4               	movwf	___ftpack@sign
  8947  063C  3188  2015         	fcall	___ftpack
  8948  063E  0020               	movlb	0	; select bank0
  8949  063F  0820               	movf	?___ftpack,w
  8950  0640  00BE               	movwf	?___ftadd
  8951  0641  0821               	movf	?___ftpack+1,w
  8952  0642  00BF               	movwf	?___ftadd+1
  8953  0643  0822               	movf	?___ftpack+2,w
  8954  0644  00C0               	movwf	?___ftadd+2
  8955  0645  0008               	return
  8956  0646                     __end_of___ftadd:	
  8957                           
  8958                           	psect	text37
  8959  1C24                     __ptext37:	
  8960 ;; *************** function _setMemory_Modify *****************
  8961 ;; Defined at:
  8962 ;;		line 1000 in file "../src/MCU_B1.c"
  8963 ;; Parameters:    Size  Location     Type
  8964 ;;  command         1    wreg     unsigned char 
  8965 ;; Auto vars:     Size  Location     Type
  8966 ;;  command         1    1[BANK0 ] unsigned char 
  8967 ;; Return value:  Size  Location     Type
  8968 ;;		None               void
  8969 ;; Registers used:
  8970 ;;		wreg, status,2, status,0
  8971 ;; Tracked objects:
  8972 ;;		On entry : 0/0
  8973 ;;		On exit  : 0/0
  8974 ;;		Unchanged: 0/0
  8975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8980 ;;Total ram usage:        2 bytes
  8981 ;; Hardware stack levels used:    1
  8982 ;; Hardware stack levels required when called:    5
  8983 ;; This function calls:
  8984 ;;		Nothing
  8985 ;; This function is called by:
  8986 ;;		_setLog_Code
  8987 ;;		_setRFSW_AdjControl
  8988 ;; This function uses a non-reentrant model
  8989 ;;
  8990                           
  8991                           
  8992                           ;psect for function _setMemory_Modify
  8993  1C24                     _setMemory_Modify:	
  8994                           
  8995                           ;incstack = 0
  8996                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8997                           ;setMemory_Modify@command stored from wreg
  8998  1C24  0020               	movlb	0	; select bank0
  8999  1C25  00A1               	movwf	setMemory_Modify@command
  9000                           
  9001                           ;MCU_B1.c: 1001: Memory.Modify = command == 1 ? 1 : 0;
  9002  1C26  0821               	movf	setMemory_Modify@command,w
  9003  1C27  3A01               	xorlw	1
  9004  1C28  3000               	movlw	0
  9005  1C29  1903               	skipnz
  9006  1C2A  3001               	movlw	1
  9007  1C2B  00A0               	movwf	??_setMemory_Modify
  9008  1C2C  0024               	movlb	4	; select bank4
  9009  1C2D  0844               	movf	(_Memory^(0+512)+36),w
  9010  1C2E  0020               	movlb	0	; select bank0
  9011  1C2F  0620               	xorwf	??_setMemory_Modify,w
  9012  1C30  39FE               	andlw	-2
  9013  1C31  0620               	xorwf	??_setMemory_Modify,w
  9014  1C32  0024               	movlb	4	; select bank4
  9015  1C33  00C4               	movwf	(_Memory^(0+512)+36)
  9016                           
  9017                           ;MCU_B1.c: 1002: Memory.Time = 0;
  9018  1C34  01C2               	clrf	(_Memory^(0+512)+34)
  9019  1C35  01C3               	clrf	((_Memory+1)^(0+512)+34)
  9020  1C36  0008               	return
  9021  1C37                     __end_of_setMemory_Modify:	
  9022                           
  9023                           	psect	text38
  9024  1BA6                     __ptext38:	
  9025 ;; *************** function _getRF_KeyStatus *****************
  9026 ;; Defined at:
  9027 ;;		line 190 in file "../src/RF_Control_B1.c"
  9028 ;; Parameters:    Size  Location     Type
  9029 ;;		None
  9030 ;; Auto vars:     Size  Location     Type
  9031 ;;  key             1    1[BANK0 ] unsigned char 
  9032 ;; Return value:  Size  Location     Type
  9033 ;;                  1    wreg      unsigned char 
  9034 ;; Registers used:
  9035 ;;		wreg, status,2
  9036 ;; Tracked objects:
  9037 ;;		On entry : 0/0
  9038 ;;		On exit  : 0/0
  9039 ;;		Unchanged: 0/0
  9040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;Total ram usage:        3 bytes
  9046 ;; Hardware stack levels used:    1
  9047 ;; Hardware stack levels required when called:    5
  9048 ;; This function calls:
  9049 ;;		Nothing
  9050 ;; This function is called by:
  9051 ;;		_setRF_Main
  9052 ;; This function uses a non-reentrant model
  9053 ;;
  9054                           
  9055                           
  9056                           ;psect for function _getRF_KeyStatus
  9057  1BA6                     _getRF_KeyStatus:	
  9058                           
  9059                           ;RF_Control_B1.c: 191: char key = 0;
  9060                           
  9061                           ;incstack = 0
  9062                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  9063  1BA6  0020               	movlb	0	; select bank0
  9064  1BA7  01A1               	clrf	getRF_KeyStatus@key
  9065                           
  9066                           ;RF_Control_B1.c: 197: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  9067  1BA8  01A2               	clrf	_getRF_KeyStatus$5718
  9068  1BA9  0AA2               	incf	_getRF_KeyStatus$5718,f
  9069  1BAA  1F0C               	btfss	12,6	;volatile
  9070  1BAB  1A0C               	btfsc	12,4	;volatile
  9071  1BAC  2BB1               	goto	l9610
  9072  1BAD  1C0C               	btfss	12,0	;volatile
  9073  1BAE  188D               	btfsc	13,1	;volatile
  9074  1BAF  2BB1               	goto	l9610
  9075  1BB0  01A2               	clrf	_getRF_KeyStatus$5718
  9076  1BB1                     l9610:	
  9077  1BB1  0822               	movf	_getRF_KeyStatus$5718,w
  9078  1BB2  00A0               	movwf	??_getRF_KeyStatus
  9079  1BB3  0820               	movf	??_getRF_KeyStatus,w
  9080  1BB4  00A1               	movwf	getRF_KeyStatus@key
  9081                           
  9082                           ;RF_Control_B1.c: 203: return key;
  9083  1BB5  0821               	movf	getRF_KeyStatus@key,w
  9084  1BB6  0008               	return
  9085  1BB7                     __end_of_getRF_KeyStatus:	
  9086                           
  9087                           	psect	text39
  9088  1B95                     __ptext39:	
  9089 ;; *************** function _getBuz_GO *****************
  9090 ;; Defined at:
  9091 ;;		line 82 in file "../src/Buzzer_B1.c"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;		None
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;  i               2    4[BANK0 ] int 
  9096 ;; Return value:  Size  Location     Type
  9097 ;;                  2    0[BANK0 ] int 
  9098 ;; Registers used:
  9099 ;;		wreg, status,2, status,0
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;Total ram usage:        6 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    5
  9112 ;; This function calls:
  9113 ;;		Nothing
  9114 ;; This function is called by:
  9115 ;;		_setRF_Main
  9116 ;; This function uses a non-reentrant model
  9117 ;;
  9118                           
  9119                           
  9120                           ;psect for function _getBuz_GO
  9121  1B95                     _getBuz_GO:	
  9122                           
  9123                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9124                           
  9125                           ;incstack = 0
  9126                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9127  1B95  0021               	movlb	1	; select bank1
  9128  1B96  0C30               	rrf	_Buz1^(0+128),w
  9129  1B97  3901               	andlw	1
  9130  1B98  0020               	movlb	0	; select bank0
  9131  1B99  00A2               	movwf	??_getBuz_GO
  9132  1B9A  01A3               	clrf	??_getBuz_GO+1
  9133  1B9B  0822               	movf	??_getBuz_GO,w
  9134  1B9C  00A4               	movwf	getBuz_GO@i
  9135  1B9D  0823               	movf	??_getBuz_GO+1,w
  9136  1B9E  00A5               	movwf	getBuz_GO@i+1
  9137                           
  9138                           ;Buzzer_B1.c: 84: return i;
  9139  1B9F  0825               	movf	getBuz_GO@i+1,w
  9140  1BA0  01A1               	clrf	?_getBuz_GO+1
  9141  1BA1  07A1               	addwf	?_getBuz_GO+1,f
  9142  1BA2  0824               	movf	getBuz_GO@i,w
  9143  1BA3  01A0               	clrf	?_getBuz_GO
  9144  1BA4  07A0               	addwf	?_getBuz_GO,f
  9145  1BA5  0008               	return
  9146  1BA6                     __end_of_getBuz_GO:	
  9147                           
  9148                           	psect	text40
  9149  099A                     __ptext40:	
  9150 ;; *************** function _CC2500_TxData *****************
  9151 ;; Defined at:
  9152 ;;		line 32 in file "../src/CC2500_B1.c"
  9153 ;; Parameters:    Size  Location     Type
  9154 ;;		None
  9155 ;; Auto vars:     Size  Location     Type
  9156 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9157 ;; Return value:  Size  Location     Type
  9158 ;;		None               void
  9159 ;; Registers used:
  9160 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9161 ;; Tracked objects:
  9162 ;;		On entry : 0/0
  9163 ;;		On exit  : 0/0
  9164 ;;		Unchanged: 0/0
  9165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;Total ram usage:        2 bytes
  9171 ;; Hardware stack levels used:    1
  9172 ;; Hardware stack levels required when called:    7
  9173 ;; This function calls:
  9174 ;;		_CC2500_WriteByte
  9175 ;;		_CC2500_WriteCommand
  9176 ;;		_Timeout_Counter
  9177 ;;		_set_TimeoutCleared
  9178 ;; This function is called by:
  9179 ;;		_setRF_Main
  9180 ;; This function uses a non-reentrant model
  9181 ;;
  9182                           
  9183                           
  9184                           ;psect for function _CC2500_TxData
  9185  099A                     _CC2500_TxData:	
  9186                           
  9187                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9188                           ;CC2500_B1.c: 35: RC4 = 0;
  9189                           
  9190                           ;incstack = 0
  9191                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9192  099A  0020               	movlb	0	; select bank0
  9193  099B  120E               	bcf	14,4	;volatile
  9194                           
  9195                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9196  099C  307F               	movlw	127
  9197  099D  00A4               	movwf	??_CC2500_TxData
  9198  099E  0824               	movf	??_CC2500_TxData,w
  9199  099F  0021               	movlb	1	; select bank1
  9200  09A0  00D2               	movwf	_SPI0Buffer^(0+128)
  9201                           
  9202                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9203  09A1  29A5               	goto	l9252
  9204  09A2                     l9250:	
  9205                           
  9206                           ;CC2500_B1.c: 38: Timeout_Counter();
  9207  09A2  319C  24AD  3189   	fcall	_Timeout_Counter
  9208  09A5                     l9252:	
  9209  09A5  0020               	movlb	0	; select bank0
  9210  09A6  1D0E               	btfss	14,2	;volatile
  9211  09A7  29AB               	goto	l9256
  9212  09A8  0021               	movlb	1	; select bank1
  9213  09A9  1D2D               	btfss	(_myMain^(0+128)+13),2
  9214  09AA  29A2               	goto	l9250
  9215  09AB                     l9256:	
  9216                           
  9217                           ;CC2500_B1.c: 39: };
  9218                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9219  09AB  319A  226F  3189   	fcall	_set_TimeoutCleared
  9220                           
  9221                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9222  09AE  319D  2504  3189   	fcall	_CC2500_WriteByte
  9223                           
  9224                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9225  09B1  0021               	movlb	1	; select bank1
  9226  09B2  0854               	movf	_Tx_Length^(0+128),w
  9227  09B3  0020               	movlb	0	; select bank0
  9228  09B4  00A4               	movwf	??_CC2500_TxData
  9229  09B5  0824               	movf	??_CC2500_TxData,w
  9230  09B6  0021               	movlb	1	; select bank1
  9231  09B7  00D2               	movwf	_SPI0Buffer^(0+128)
  9232                           
  9233                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9234  09B8  319D  2504  3189   	fcall	_CC2500_WriteByte
  9235                           
  9236                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9237  09BB  0020               	movlb	0	; select bank0
  9238  09BC  01A5               	clrf	CC2500_TxData@loop_e
  9239  09BD                     l9270:	
  9240  09BD  0021               	movlb	1	; select bank1
  9241  09BE  0854               	movf	_Tx_Length^(0+128),w
  9242  09BF  0020               	movlb	0	; select bank0
  9243  09C0  0225               	subwf	CC2500_TxData@loop_e,w
  9244  09C1  1803               	btfsc	3,0
  9245  09C2  29D6               	goto	l255
  9246                           
  9247                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9248  09C3  0825               	movf	CC2500_TxData@loop_e,w
  9249  09C4  3EA0               	addlw	_RF_Data& (0+255)
  9250  09C5  0086               	movwf	6
  9251  09C6  3001               	movlw	1	; select bank3/4
  9252  09C7  0087               	movwf	7
  9253  09C8  0801               	movf	1,w
  9254  09C9  00A4               	movwf	??_CC2500_TxData
  9255  09CA  0824               	movf	??_CC2500_TxData,w
  9256  09CB  0021               	movlb	1	; select bank1
  9257  09CC  00D2               	movwf	_SPI0Buffer^(0+128)
  9258                           
  9259                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9260  09CD  319D  2504  3189   	fcall	_CC2500_WriteByte
  9261  09D0  3001               	movlw	1
  9262  09D1  0020               	movlb	0	; select bank0
  9263  09D2  00A4               	movwf	??_CC2500_TxData
  9264  09D3  0824               	movf	??_CC2500_TxData,w
  9265  09D4  07A5               	addwf	CC2500_TxData@loop_e,f
  9266  09D5  29BD               	goto	l9270
  9267  09D6                     l255:	
  9268                           
  9269                           ;CC2500_B1.c: 48: }
  9270                           ;CC2500_B1.c: 49: RC4 = 1;
  9271  09D6  160E               	bsf	14,4	;volatile
  9272                           
  9273                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9274  09D7  3035               	movlw	53
  9275  09D8  319D  2536  3189   	fcall	_CC2500_WriteCommand
  9276                           
  9277                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9278  09DB  29DF               	goto	l9276
  9279  09DC                     l9274:	
  9280                           
  9281                           ;CC2500_B1.c: 52: Timeout_Counter();
  9282  09DC  319C  24AD  3189   	fcall	_Timeout_Counter
  9283  09DF                     l9276:	
  9284  09DF  0020               	movlb	0	; select bank0
  9285  09E0  180D               	btfsc	13,0	;volatile
  9286  09E1  29E5               	goto	l9280
  9287  09E2  0021               	movlb	1	; select bank1
  9288  09E3  1D2D               	btfss	(_myMain^(0+128)+13),2
  9289  09E4  29DC               	goto	l9274
  9290  09E5                     l9280:	
  9291                           
  9292                           ;CC2500_B1.c: 53: };
  9293                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9294  09E5  319A  226F  3189   	fcall	_set_TimeoutCleared
  9295                           
  9296                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9297  09E8  29EC               	goto	l9284
  9298  09E9                     l9282:	
  9299                           
  9300                           ;CC2500_B1.c: 57: Timeout_Counter();
  9301  09E9  319C  24AD  3189   	fcall	_Timeout_Counter
  9302  09EC                     l9284:	
  9303  09EC  0020               	movlb	0	; select bank0
  9304  09ED  1C0D               	btfss	13,0	;volatile
  9305  09EE  29F2               	goto	l9288
  9306  09EF  0021               	movlb	1	; select bank1
  9307  09F0  1D2D               	btfss	(_myMain^(0+128)+13),2
  9308  09F1  29E9               	goto	l9282
  9309  09F2                     l9288:	
  9310                           
  9311                           ;CC2500_B1.c: 58: };
  9312                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9313  09F2  319A  226F  3189   	fcall	_set_TimeoutCleared
  9314                           
  9315                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9316  09F5  3036               	movlw	54
  9317  09F6  319D  2536  3189   	fcall	_CC2500_WriteCommand
  9318                           
  9319                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9320  09F9  303B               	movlw	59
  9321  09FA  319D  2536  3189   	fcall	_CC2500_WriteCommand
  9322                           
  9323                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9324  09FD  303A               	movlw	58
  9325  09FE  319D  2536         	fcall	_CC2500_WriteCommand
  9326                           
  9327                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9328  0A00  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9329  0A01  0008               	return
  9330  0A02                     __end_of_CC2500_TxData:	
  9331                           
  9332                           	psect	text41
  9333  0B4B                     __ptext41:	
  9334 ;; *************** function _CC2500_RxData *****************
  9335 ;; Defined at:
  9336 ;;		line 70 in file "../src/CC2500_B1.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;		None
  9339 ;; Auto vars:     Size  Location     Type
  9340 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9341 ;; Return value:  Size  Location     Type
  9342 ;;		None               void
  9343 ;; Registers used:
  9344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9345 ;; Tracked objects:
  9346 ;;		On entry : 0/0
  9347 ;;		On exit  : 0/0
  9348 ;;		Unchanged: 0/0
  9349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;Total ram usage:        2 bytes
  9355 ;; Hardware stack levels used:    1
  9356 ;; Hardware stack levels required when called:    7
  9357 ;; This function calls:
  9358 ;;		_CC2500_ReadByte
  9359 ;;		_CC2500_ReadStatus
  9360 ;;		_CC2500_WriteByte
  9361 ;;		_Timeout_Counter
  9362 ;;		_set_TimeoutCleared
  9363 ;; This function is called by:
  9364 ;;		_setRF_Main
  9365 ;; This function uses a non-reentrant model
  9366 ;;
  9367                           
  9368                           
  9369                           ;psect for function _CC2500_RxData
  9370  0B4B                     _CC2500_RxData:	
  9371                           
  9372                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9373                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9374                           
  9375                           ;incstack = 0
  9376                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9377  0B4B  0020               	movlb	0	; select bank0
  9378  0B4C  180D               	btfsc	13,0	;volatile
  9379  0B4D  2B52               	goto	l9304
  9380  0B4E  2B5B               	goto	l9310
  9381  0B4F                     l9302:	
  9382                           ;CC2500_B1.c: 76: {
  9383                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9384                           
  9385                           
  9386                           ;CC2500_B1.c: 78: Timeout_Counter();
  9387  0B4F  319C  24AD  318B   	fcall	_Timeout_Counter
  9388  0B52                     l9304:	
  9389  0B52  0020               	movlb	0	; select bank0
  9390  0B53  1C0D               	btfss	13,0	;volatile
  9391  0B54  2B58               	goto	l9308
  9392  0B55  0021               	movlb	1	; select bank1
  9393  0B56  1D2D               	btfss	(_myMain^(0+128)+13),2
  9394  0B57  2B4F               	goto	l9302
  9395  0B58                     l9308:	
  9396                           
  9397                           ;CC2500_B1.c: 79: };
  9398                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9399  0B58  319A  226F  318B   	fcall	_set_TimeoutCleared
  9400  0B5B                     l9310:	
  9401                           
  9402                           ;CC2500_B1.c: 81: }
  9403                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9404  0B5B  303B               	movlw	59
  9405  0B5C  319E  26E9  318B   	fcall	_CC2500_ReadStatus
  9406                           
  9407                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9408  0B5F  0021               	movlb	1	; select bank1
  9409  0B60  0857               	movf	_s_data^(0+128),w
  9410  0B61  1903               	btfsc	3,2
  9411  0B62  0008               	return
  9412                           
  9413                           ;CC2500_B1.c: 86: RC4 = 0;
  9414  0B63  0020               	movlb	0	; select bank0
  9415  0B64  120E               	bcf	14,4	;volatile
  9416                           
  9417                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9418  0B65  30FF               	movlw	255
  9419  0B66  00A4               	movwf	??_CC2500_RxData
  9420  0B67  0824               	movf	??_CC2500_RxData,w
  9421  0B68  0021               	movlb	1	; select bank1
  9422  0B69  00D2               	movwf	_SPI0Buffer^(0+128)
  9423                           
  9424                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9425  0B6A  2B71               	goto	l9320
  9426  0B6B                     l9322:	
  9427  0B6B  0021               	movlb	1	; select bank1
  9428  0B6C  192D               	btfsc	(_myMain^(0+128)+13),2
  9429  0B6D  2B74               	goto	l280
  9430                           
  9431                           ;CC2500_B1.c: 89: Timeout_Counter();
  9432  0B6E  319C  24AD  318B   	fcall	_Timeout_Counter
  9433  0B71                     l9320:	
  9434  0B71  0020               	movlb	0	; select bank0
  9435  0B72  190E               	btfsc	14,2	;volatile
  9436  0B73  2B6B               	goto	l9322
  9437  0B74                     l280:	
  9438                           
  9439                           ;CC2500_B1.c: 90: };
  9440                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9441  0B74  0021               	movlb	1	; select bank1
  9442  0B75  192D               	btfsc	(_myMain^(0+128)+13),2
  9443  0B76  2BBB               	goto	l281
  9444                           
  9445                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9446  0B77  319D  2504  318B   	fcall	_CC2500_WriteByte
  9447                           
  9448                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9449  0B7A  319D  2586  318B   	fcall	_CC2500_ReadByte
  9450                           
  9451                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9452  0B7D  0021               	movlb	1	; select bank1
  9453  0B7E  0852               	movf	_SPI0Buffer^(0+128),w
  9454  0B7F  0020               	movlb	0	; select bank0
  9455  0B80  00A4               	movwf	??_CC2500_RxData
  9456  0B81  0824               	movf	??_CC2500_RxData,w
  9457  0B82  0021               	movlb	1	; select bank1
  9458  0B83  00D1               	movwf	_Rx_Length^(0+128)
  9459                           
  9460                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9461  0B84  0020               	movlb	0	; select bank0
  9462  0B85  01A5               	clrf	CC2500_RxData@loop_f
  9463  0B86                     l9336:	
  9464  0B86  0021               	movlb	1	; select bank1
  9465  0B87  0851               	movf	_Rx_Length^(0+128),w
  9466  0B88  0020               	movlb	0	; select bank0
  9467  0B89  0225               	subwf	CC2500_RxData@loop_f,w
  9468  0B8A  1803               	btfsc	3,0
  9469  0B8B  2B9F               	goto	l9338
  9470                           
  9471                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9472  0B8C  319D  2586  318B   	fcall	_CC2500_ReadByte
  9473                           
  9474                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9475  0B8F  0021               	movlb	1	; select bank1
  9476  0B90  0852               	movf	_SPI0Buffer^(0+128),w
  9477  0B91  0020               	movlb	0	; select bank0
  9478  0B92  00A4               	movwf	??_CC2500_RxData
  9479  0B93  0825               	movf	CC2500_RxData@loop_f,w
  9480  0B94  3EA0               	addlw	_RF_Data& (0+255)
  9481  0B95  0086               	movwf	6
  9482  0B96  3001               	movlw	1	; select bank3/4
  9483  0B97  0087               	movwf	7
  9484  0B98  0824               	movf	??_CC2500_RxData,w
  9485  0B99  0081               	movwf	1
  9486  0B9A  3001               	movlw	1
  9487  0B9B  00A4               	movwf	??_CC2500_RxData
  9488  0B9C  0824               	movf	??_CC2500_RxData,w
  9489  0B9D  07A5               	addwf	CC2500_RxData@loop_f,f
  9490  0B9E  2B86               	goto	l9336
  9491  0B9F                     l9338:	
  9492                           
  9493                           ;CC2500_B1.c: 99: }
  9494                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9495  0B9F  319D  2586  318B   	fcall	_CC2500_ReadByte
  9496                           
  9497                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9498  0BA2  0021               	movlb	1	; select bank1
  9499  0BA3  0852               	movf	_SPI0Buffer^(0+128),w
  9500  0BA4  0020               	movlb	0	; select bank0
  9501  0BA5  00A4               	movwf	??_CC2500_RxData
  9502  0BA6  0824               	movf	??_CC2500_RxData,w
  9503  0BA7  0021               	movlb	1	; select bank1
  9504  0BA8  00D0               	movwf	_RSSI^(0+128)
  9505                           
  9506                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9507  0BA9  319D  2586  318B   	fcall	_CC2500_ReadByte
  9508                           
  9509                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9510  0BAC  0021               	movlb	1	; select bank1
  9511  0BAD  0852               	movf	_SPI0Buffer^(0+128),w
  9512  0BAE  0020               	movlb	0	; select bank0
  9513  0BAF  00A4               	movwf	??_CC2500_RxData
  9514  0BB0  0824               	movf	??_CC2500_RxData,w
  9515  0BB1  0021               	movlb	1	; select bank1
  9516  0BB2  00CB               	movwf	_CRC^(0+128)
  9517                           
  9518                           ;CC2500_B1.c: 104: RC4 = 1;
  9519  0BB3  0020               	movlb	0	; select bank0
  9520  0BB4  160E               	bsf	14,4	;volatile
  9521                           
  9522                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9523  0BB5  0021               	movlb	1	; select bank1
  9524  0BB6  1BCB               	btfsc	_CRC^(0+128),7
  9525                           
  9526                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9527  0BB7  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9528                           
  9529                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9530  0BB8  11BC               	bcf	_RF1^(0+128),3
  9531                           
  9532                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9533  0BB9  14BC               	bsf	_RF1^(0+128),1
  9534                           
  9535                           ;CC2500_B1.c: 110: } else {
  9536  0BBA  2BBD               	goto	l9350
  9537  0BBB                     l281:	
  9538                           
  9539                           ;CC2500_B1.c: 111: RC4 = 1;
  9540  0BBB  0020               	movlb	0	; select bank0
  9541  0BBC  160E               	bsf	14,4	;volatile
  9542  0BBD                     l9350:	
  9543                           
  9544                           ;CC2500_B1.c: 112: }
  9545                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9546  0BBD  319A  226F         	fcall	_set_TimeoutCleared
  9547  0BBF  0021               	movlb	1	; select bank1
  9548  0BC0  0008               	return
  9549  0BC1                     __end_of_CC2500_RxData:	
  9550                           
  9551                           	psect	text42
  9552  1EE9                     __ptext42:	
  9553 ;; *************** function _CC2500_ReadStatus *****************
  9554 ;; Defined at:
  9555 ;;		line 304 in file "../src/CC2500_B1.c"
  9556 ;; Parameters:    Size  Location     Type
  9557 ;;  status_addr     1    wreg     unsigned char 
  9558 ;; Auto vars:     Size  Location     Type
  9559 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9560 ;; Return value:  Size  Location     Type
  9561 ;;		None               void
  9562 ;; Registers used:
  9563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9564 ;; Tracked objects:
  9565 ;;		On entry : 0/0
  9566 ;;		On exit  : 0/0
  9567 ;;		Unchanged: 0/0
  9568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9570 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9572 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9573 ;;Total ram usage:        2 bytes
  9574 ;; Hardware stack levels used:    1
  9575 ;; Hardware stack levels required when called:    6
  9576 ;; This function calls:
  9577 ;;		_CC2500_ReadByte
  9578 ;;		_CC2500_WriteByte
  9579 ;;		_Timeout_Counter
  9580 ;;		_set_TimeoutCleared
  9581 ;; This function is called by:
  9582 ;;		_CC2500_RxData
  9583 ;;		_setRF_Main
  9584 ;; This function uses a non-reentrant model
  9585 ;;
  9586                           
  9587                           
  9588                           ;psect for function _CC2500_ReadStatus
  9589  1EE9                     _CC2500_ReadStatus:	
  9590                           
  9591                           ;incstack = 0
  9592                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9593                           ;CC2500_ReadStatus@status_addr stored from wreg
  9594  1EE9  0020               	movlb	0	; select bank0
  9595  1EEA  00A3               	movwf	CC2500_ReadStatus@status_addr
  9596                           
  9597                           ;CC2500_B1.c: 305: RC4 = 0;
  9598  1EEB  120E               	bcf	14,4	;volatile
  9599                           
  9600                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9601  1EEC  0823               	movf	CC2500_ReadStatus@status_addr,w
  9602  1EED  3EC0               	addlw	192
  9603  1EEE  00A2               	movwf	??_CC2500_ReadStatus
  9604  1EEF  0822               	movf	??_CC2500_ReadStatus,w
  9605  1EF0  0021               	movlb	1	; select bank1
  9606  1EF1  00D2               	movwf	_SPI0Buffer^(0+128)
  9607                           
  9608                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9609  1EF2  2EF6               	goto	l9094
  9610  1EF3                     l9092:	
  9611                           
  9612                           ;CC2500_B1.c: 309: Timeout_Counter();
  9613  1EF3  319C  24AD  319E   	fcall	_Timeout_Counter
  9614  1EF6                     l9094:	
  9615  1EF6  0020               	movlb	0	; select bank0
  9616  1EF7  1D0E               	btfss	14,2	;volatile
  9617  1EF8  2EFC               	goto	l9098
  9618  1EF9  0021               	movlb	1	; select bank1
  9619  1EFA  1D2D               	btfss	(_myMain^(0+128)+13),2
  9620  1EFB  2EF3               	goto	l9092
  9621  1EFC                     l9098:	
  9622                           
  9623                           ;CC2500_B1.c: 310: };
  9624                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9625  1EFC  319A  226F  319E   	fcall	_set_TimeoutCleared
  9626                           
  9627                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9628  1EFF  319D  2504  319E   	fcall	_CC2500_WriteByte
  9629                           
  9630                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9631  1F02  319D  2586         	fcall	_CC2500_ReadByte
  9632                           
  9633                           ;CC2500_B1.c: 315: RC4 = 1;
  9634  1F04  0020               	movlb	0	; select bank0
  9635  1F05  160E               	bsf	14,4	;volatile
  9636                           
  9637                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9638  1F06  0021               	movlb	1	; select bank1
  9639  1F07  0852               	movf	_SPI0Buffer^(0+128),w
  9640  1F08  0020               	movlb	0	; select bank0
  9641  1F09  00A2               	movwf	??_CC2500_ReadStatus
  9642  1F0A  0822               	movf	??_CC2500_ReadStatus,w
  9643  1F0B  0021               	movlb	1	; select bank1
  9644  1F0C  00D7               	movwf	_s_data^(0+128)
  9645  1F0D  0008               	return
  9646  1F0E                     __end_of_CC2500_ReadStatus:	
  9647                           
  9648                           	psect	text43
  9649  1D86                     __ptext43:	
  9650 ;; *************** function _CC2500_ReadByte *****************
  9651 ;; Defined at:
  9652 ;;		line 238 in file "../src/CC2500_B1.c"
  9653 ;; Parameters:    Size  Location     Type
  9654 ;;		None
  9655 ;; Auto vars:     Size  Location     Type
  9656 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9657 ;; Return value:  Size  Location     Type
  9658 ;;		None               void
  9659 ;; Registers used:
  9660 ;;		wreg, status,2, status,0
  9661 ;; Tracked objects:
  9662 ;;		On entry : 0/0
  9663 ;;		On exit  : 0/0
  9664 ;;		Unchanged: 0/0
  9665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9669 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9670 ;;Total ram usage:        2 bytes
  9671 ;; Hardware stack levels used:    1
  9672 ;; Hardware stack levels required when called:    5
  9673 ;; This function calls:
  9674 ;;		Nothing
  9675 ;; This function is called by:
  9676 ;;		_CC2500_RxData
  9677 ;;		_CC2500_ReadStatus
  9678 ;;		_CC2500_ReadREG
  9679 ;; This function uses a non-reentrant model
  9680 ;;
  9681                           
  9682                           
  9683                           ;psect for function _CC2500_ReadByte
  9684  1D86                     _CC2500_ReadByte:	
  9685                           
  9686                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9687                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9688                           
  9689                           ;incstack = 0
  9690                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9691  1D86  0020               	movlb	0	; select bank0
  9692  1D87  01A1               	clrf	CC2500_ReadByte@loop_b
  9693  1D88                     L5:	
  9694  1D88  3008               	movlw	8
  9695  1D89  0221               	subwf	CC2500_ReadByte@loop_b,w
  9696  1D8A  1803               	btfsc	3,0
  9697  1D8B  0008               	return
  9698                           
  9699                           ;CC2500_B1.c: 241: RC1 = 1;
  9700  1D8C  148E               	bsf	14,1	;volatile
  9701                           
  9702                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9703  1D8D  1003               	clrc
  9704  1D8E  0021               	movlb	1	; select bank1
  9705  1D8F  0DD2               	rlf	_SPI0Buffer^(0+128),f
  9706                           
  9707                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9708  1D90  0020               	movlb	0	; select bank0
  9709  1D91  1D0E               	btfss	14,2	;volatile
  9710  1D92  2D96               	goto	l9030
  9711                           
  9712                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9713  1D93  0021               	movlb	1	; select bank1
  9714  1D94  1452               	bsf	_SPI0Buffer^(0+128),0
  9715  1D95  2D9C               	goto	l9032
  9716  1D96                     l9030:	
  9717                           
  9718                           ;CC2500_B1.c: 245: else
  9719                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9720  1D96  30FE               	movlw	254
  9721  1D97  0020               	movlb	0	; select bank0
  9722  1D98  00A0               	movwf	??_CC2500_ReadByte
  9723  1D99  0820               	movf	??_CC2500_ReadByte,w
  9724  1D9A  0021               	movlb	1	; select bank1
  9725  1D9B  05D2               	andwf	_SPI0Buffer^(0+128),f
  9726  1D9C                     l9032:	
  9727                           
  9728                           ;CC2500_B1.c: 247: RC1 = 0;
  9729  1D9C  0020               	movlb	0	; select bank0
  9730  1D9D  108E               	bcf	14,1	;volatile
  9731  1D9E  3001               	movlw	1
  9732  1D9F  00A0               	movwf	??_CC2500_ReadByte
  9733  1DA0  0820               	movf	??_CC2500_ReadByte,w
  9734  1DA1  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9735  1DA2  2D88               	goto	L5
  9736  1DA3                     __end_of_CC2500_ReadByte:	
  9737                           
  9738                           	psect	text44
  9739  1A53                     __ptext44:	
  9740 ;; *************** function _RF_Initialization *****************
  9741 ;; Defined at:
  9742 ;;		line 9 in file "../src/RF_Control_B1.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;		None
  9745 ;; Auto vars:     Size  Location     Type
  9746 ;;		None
  9747 ;; Return value:  Size  Location     Type
  9748 ;;		None               void
  9749 ;; Registers used:
  9750 ;;		wreg, status,2, status,0, pclath, cstack
  9751 ;; Tracked objects:
  9752 ;;		On entry : 0/0
  9753 ;;		On exit  : 0/0
  9754 ;;		Unchanged: 0/0
  9755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;Total ram usage:        0 bytes
  9761 ;; Hardware stack levels used:    1
  9762 ;; Hardware stack levels required when called:    6
  9763 ;; This function calls:
  9764 ;;		_setRF_Initialization
  9765 ;; This function is called by:
  9766 ;;		_main
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           
  9771                           ;psect for function _RF_Initialization
  9772  1A53                     _RF_Initialization:	
  9773                           
  9774                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9775                           
  9776                           ;incstack = 0
  9777                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9778  1A53  319A  22D0         	fcall	_setRF_Initialization
  9779  1A55  0008               	return
  9780  1A56                     __end_of_RF_Initialization:	
  9781                           
  9782                           	psect	text45
  9783  1AD0                     __ptext45:	
  9784 ;; *************** function _setRF_Initialization *****************
  9785 ;; Defined at:
  9786 ;;		line 43 in file "../src/RF_Control_B1.c"
  9787 ;; Parameters:    Size  Location     Type
  9788 ;;		None
  9789 ;; Auto vars:     Size  Location     Type
  9790 ;;		None
  9791 ;; Return value:  Size  Location     Type
  9792 ;;		None               void
  9793 ;; Registers used:
  9794 ;;		wreg
  9795 ;; Tracked objects:
  9796 ;;		On entry : 0/0
  9797 ;;		On exit  : 0/0
  9798 ;;		Unchanged: 0/0
  9799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9802 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9803 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9804 ;;Total ram usage:        1 bytes
  9805 ;; Hardware stack levels used:    1
  9806 ;; Hardware stack levels required when called:    5
  9807 ;; This function calls:
  9808 ;;		Nothing
  9809 ;; This function is called by:
  9810 ;;		_RF_Initialization
  9811 ;; This function uses a non-reentrant model
  9812 ;;
  9813                           
  9814                           
  9815                           ;psect for function _setRF_Initialization
  9816  1AD0                     _setRF_Initialization:	
  9817                           
  9818                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9819                           
  9820                           ;incstack = 0
  9821                           ; Regs used in _setRF_Initialization: [wreg]
  9822  1AD0  3015               	movlw	21
  9823  1AD1  0020               	movlb	0	; select bank0
  9824  1AD2  00A0               	movwf	??_setRF_Initialization
  9825  1AD3  0820               	movf	??_setRF_Initialization,w
  9826  1AD4  0021               	movlb	1	; select bank1
  9827  1AD5  00D4               	movwf	_Tx_Length^(0+128)
  9828                           
  9829                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9830  1AD6  300A               	movlw	10
  9831  1AD7  00C3               	movwf	(_RF1^(0+128)+7)
  9832  1AD8  3000               	movlw	0
  9833  1AD9  00C4               	movwf	(_RF1^(0+128)+8)
  9834  1ADA  0008               	return
  9835  1ADB                     __end_of_setRF_Initialization:	
  9836                           
  9837                           	psect	text46
  9838  1BED                     __ptext46:	
  9839 ;; *************** function _Mcu_Initialization *****************
  9840 ;; Defined at:
  9841 ;;		line 30 in file "../src/MCU_B1.c"
  9842 ;; Parameters:    Size  Location     Type
  9843 ;;		None
  9844 ;; Auto vars:     Size  Location     Type
  9845 ;;		None
  9846 ;; Return value:  Size  Location     Type
  9847 ;;		None               void
  9848 ;; Registers used:
  9849 ;;		wreg, status,2, status,0, pclath, cstack
  9850 ;; Tracked objects:
  9851 ;;		On entry : 0/0
  9852 ;;		On exit  : 0/0
  9853 ;;		Unchanged: 0/0
  9854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;Total ram usage:        0 bytes
  9860 ;; Hardware stack levels used:    1
  9861 ;; Hardware stack levels required when called:    6
  9862 ;; This function calls:
  9863 ;;		_ADC_Set
  9864 ;;		_Fosc_Set
  9865 ;;		_IOC_Set
  9866 ;;		_IO_Set
  9867 ;;		_TMR1_Set
  9868 ;;		_WDT_Set
  9869 ;; This function is called by:
  9870 ;;		_main
  9871 ;; This function uses a non-reentrant model
  9872 ;;
  9873                           
  9874                           
  9875                           ;psect for function _Mcu_Initialization
  9876  1BED                     _Mcu_Initialization:	
  9877                           
  9878                           ;MCU_B1.c: 32: Fosc_Set();
  9879                           
  9880                           ;incstack = 0
  9881                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9882  1BED  319A  226B  319B   	fcall	_Fosc_Set
  9883                           
  9884                           ;MCU_B1.c: 34: IO_Set();
  9885  1BF0  319D  251D  319B   	fcall	_IO_Set
  9886                           
  9887                           ;MCU_B1.c: 36: ;;
  9888                           ;MCU_B1.c: 38: TMR1_Set();
  9889  1BF3  319B  2323  319B   	fcall	_TMR1_Set
  9890                           
  9891                           ;MCU_B1.c: 40: ADC_Set();
  9892  1BF6  319A  2285  319B   	fcall	_ADC_Set
  9893                           
  9894                           ;MCU_B1.c: 42: ;;
  9895                           ;MCU_B1.c: 44: ;;
  9896                           ;MCU_B1.c: 46: IOC_Set();
  9897  1BF9  319B  2317  319B   	fcall	_IOC_Set
  9898                           
  9899                           ;MCU_B1.c: 48: ;;
  9900                           ;MCU_B1.c: 50: ;;
  9901                           ;MCU_B1.c: 52: WDT_Set();
  9902  1BFC  319B  232F         	fcall	_WDT_Set
  9903  1BFE  0008               	return
  9904  1BFF                     __end_of_Mcu_Initialization:	
  9905                           
  9906                           	psect	text47
  9907  1B2F                     __ptext47:	
  9908 ;; *************** function _WDT_Set *****************
  9909 ;; Defined at:
  9910 ;;		line 1019 in file "../src/MCU_B1.c"
  9911 ;; Parameters:    Size  Location     Type
  9912 ;;		None
  9913 ;; Auto vars:     Size  Location     Type
  9914 ;;		None
  9915 ;; Return value:  Size  Location     Type
  9916 ;;		None               void
  9917 ;; Registers used:
  9918 ;;		wreg
  9919 ;; Tracked objects:
  9920 ;;		On entry : 0/0
  9921 ;;		On exit  : 0/0
  9922 ;;		Unchanged: 0/0
  9923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9927 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9928 ;;Total ram usage:        1 bytes
  9929 ;; Hardware stack levels used:    1
  9930 ;; Hardware stack levels required when called:    5
  9931 ;; This function calls:
  9932 ;;		Nothing
  9933 ;; This function is called by:
  9934 ;;		_Mcu_Initialization
  9935 ;; This function uses a non-reentrant model
  9936 ;;
  9937                           
  9938                           
  9939                           ;psect for function _WDT_Set
  9940  1B2F                     _WDT_Set:	
  9941                           
  9942                           ;MCU_B1.c: 1026: WDTCON = 0b00010111;;
  9943                           
  9944                           ;incstack = 0
  9945                           ; Regs used in _WDT_Set: [wreg]
  9946  1B2F  3017               	movlw	23
  9947  1B30  0021               	movlb	1	; select bank1
  9948  1B31  0097               	movwf	23	;volatile
  9949                           
  9950                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  9951  1B32  0022               	movlb	2	; select bank2
  9952  1B33  1425               	bsf	_WDT^(0+256),0
  9953                           
  9954                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  9955  1B34  300A               	movlw	10
  9956  1B35  0020               	movlb	0	; select bank0
  9957  1B36  00A0               	movwf	??_WDT_Set
  9958  1B37  0820               	movf	??_WDT_Set,w
  9959  1B38  0022               	movlb	2	; select bank2
  9960  1B39  00A6               	movwf	(_WDT^(0+256)+1)
  9961  1B3A  0008               	return
  9962  1B3B                     __end_of_WDT_Set:	
  9963                           
  9964                           	psect	text48
  9965  1B23                     __ptext48:	
  9966 ;; *************** function _TMR1_Set *****************
  9967 ;; Defined at:
  9968 ;;		line 199 in file "../src/MCU_B1.c"
  9969 ;; Parameters:    Size  Location     Type
  9970 ;;		None
  9971 ;; Auto vars:     Size  Location     Type
  9972 ;;		None
  9973 ;; Return value:  Size  Location     Type
  9974 ;;		None               void
  9975 ;; Registers used:
  9976 ;;		wreg
  9977 ;; Tracked objects:
  9978 ;;		On entry : 0/0
  9979 ;;		On exit  : 0/0
  9980 ;;		Unchanged: 0/0
  9981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;Total ram usage:        0 bytes
  9987 ;; Hardware stack levels used:    1
  9988 ;; Hardware stack levels required when called:    5
  9989 ;; This function calls:
  9990 ;;		Nothing
  9991 ;; This function is called by:
  9992 ;;		_Mcu_Initialization
  9993 ;; This function uses a non-reentrant model
  9994 ;;
  9995                           
  9996                           
  9997                           ;psect for function _TMR1_Set
  9998  1B23                     _TMR1_Set:	
  9999                           
 10000                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
 10001                           
 10002                           ;incstack = 0
 10003                           ; Regs used in _TMR1_Set: [wreg]
 10004  1B23  3041               	movlw	65
 10005  1B24  0020               	movlb	0	; select bank0
 10006  1B25  0098               	movwf	24	;volatile
 10007                           
 10008                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
 10009  1B26  30FA               	movlw	250
 10010  1B27  0097               	movwf	23	;volatile
 10011                           
 10012                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
 10013  1B28  3038               	movlw	56
 10014  1B29  0096               	movwf	22	;volatile
 10015                           
 10016                           ;MCU_B1.c: 203: TMR1IE = 1;
 10017  1B2A  0021               	movlb	1	; select bank1
 10018  1B2B  1411               	bsf	17,0	;volatile
 10019                           
 10020                           ;MCU_B1.c: 204: PEIE = 1;
 10021  1B2C  170B               	bsf	11,6	;volatile
 10022                           
 10023                           ;MCU_B1.c: 205: GIE = 1;
 10024  1B2D  178B               	bsf	11,7	;volatile
 10025  1B2E  0008               	return
 10026  1B2F                     __end_of_TMR1_Set:	
 10027                           
 10028                           	psect	text49
 10029  1D1D                     __ptext49:	
 10030 ;; *************** function _IO_Set *****************
 10031 ;; Defined at:
 10032 ;;		line 60 in file "../src/MCU_B1.c"
 10033 ;; Parameters:    Size  Location     Type
 10034 ;;		None
 10035 ;; Auto vars:     Size  Location     Type
 10036 ;;		None
 10037 ;; Return value:  Size  Location     Type
 10038 ;;		None               void
 10039 ;; Registers used:
 10040 ;;		wreg, status,2
 10041 ;; Tracked objects:
 10042 ;;		On entry : 0/0
 10043 ;;		On exit  : 0/0
 10044 ;;		Unchanged: 0/0
 10045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;Total ram usage:        0 bytes
 10051 ;; Hardware stack levels used:    1
 10052 ;; Hardware stack levels required when called:    5
 10053 ;; This function calls:
 10054 ;;		Nothing
 10055 ;; This function is called by:
 10056 ;;		_Mcu_Initialization
 10057 ;; This function uses a non-reentrant model
 10058 ;;
 10059                           
 10060                           
 10061                           ;psect for function _IO_Set
 10062  1D1D                     _IO_Set:	
 10063                           
 10064                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10065                           
 10066                           ;incstack = 0
 10067                           ; Regs used in _IO_Set: [wreg+status,2]
 10068  1D1D  3077               	movlw	119
 10069  1D1E  0021               	movlb	1	; select bank1
 10070  1D1F  008C               	movwf	12	;volatile
 10071                           
 10072                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10073  1D20  3007               	movlw	7
 10074  1D21  008D               	movwf	13	;volatile
 10075                           
 10076                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10077  1D22  300C               	movlw	12
 10078  1D23  008E               	movwf	14	;volatile
 10079                           
 10080                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10081  1D24  0022               	movlb	2	; select bank2
 10082  1D25  018C               	clrf	12	;volatile
 10083                           
 10084                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10085  1D26  3002               	movlw	2
 10086  1D27  008D               	movwf	13	;volatile
 10087                           
 10088                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10089  1D28  018E               	clrf	14	;volatile
 10090                           
 10091                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10092  1D29  3022               	movlw	34
 10093  1D2A  0023               	movlb	3	; select bank3
 10094  1D2B  008C               	movwf	12	;volatile
 10095                           
 10096                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10097  1D2C  018D               	clrf	13	;volatile
 10098                           
 10099                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10100  1D2D  018E               	clrf	14	;volatile
 10101                           
 10102                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10103  1D2E  3077               	movlw	119
 10104  1D2F  0020               	movlb	0	; select bank0
 10105  1D30  008C               	movwf	12	;volatile
 10106                           
 10107                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10108  1D31  3007               	movlw	7
 10109  1D32  008D               	movwf	13	;volatile
 10110                           
 10111                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10112  1D33  300C               	movlw	12
 10113  1D34  008E               	movwf	14	;volatile
 10114  1D35  0008               	return
 10115  1D36                     __end_of_IO_Set:	
 10116                           
 10117                           	psect	text50
 10118  1B17                     __ptext50:	
 10119 ;; *************** function _IOC_Set *****************
 10120 ;; Defined at:
 10121 ;;		line 367 in file "../src/MCU_B1.c"
 10122 ;; Parameters:    Size  Location     Type
 10123 ;;		None
 10124 ;; Auto vars:     Size  Location     Type
 10125 ;;		None
 10126 ;; Return value:  Size  Location     Type
 10127 ;;		None               void
 10128 ;; Registers used:
 10129 ;;		wreg, status,2
 10130 ;; Tracked objects:
 10131 ;;		On entry : 0/0
 10132 ;;		On exit  : 0/0
 10133 ;;		Unchanged: 0/0
 10134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;Total ram usage:        0 bytes
 10140 ;; Hardware stack levels used:    1
 10141 ;; Hardware stack levels required when called:    5
 10142 ;; This function calls:
 10143 ;;		Nothing
 10144 ;; This function is called by:
 10145 ;;		_Mcu_Initialization
 10146 ;; This function uses a non-reentrant model
 10147 ;;
 10148                           
 10149                           
 10150                           ;psect for function _IOC_Set
 10151  1B17                     _IOC_Set:	
 10152                           
 10153                           ;MCU_B1.c: 368: WPUB2 = 0;
 10154                           
 10155                           ;incstack = 0
 10156                           ; Regs used in _IOC_Set: [wreg+status,2]
 10157  1B17  0024               	movlb	4	; select bank4
 10158  1B18  110D               	bcf	13,2	;volatile
 10159                           
 10160                           ;MCU_B1.c: 376: IOCBP = 0b00000000;
 10161  1B19  0027               	movlb	7	; select bank7
 10162  1B1A  0194               	clrf	20	;volatile
 10163                           
 10164                           ;MCU_B1.c: 377: IOCBN = 0b00000100;
 10165  1B1B  3004               	movlw	4
 10166  1B1C  0095               	movwf	21	;volatile
 10167                           
 10168                           ;MCU_B1.c: 393: IOCBF = 0b00000000;
 10169  1B1D  0196               	clrf	22	;volatile
 10170                           
 10171                           ;MCU_B1.c: 395: IOCIE = 1;
 10172  1B1E  158B               	bsf	11,3	;volatile
 10173                           
 10174                           ;MCU_B1.c: 396: IOCIF = 0;
 10175  1B1F  100B               	bcf	11,0	;volatile
 10176                           
 10177                           ;MCU_B1.c: 397: PEIE = 1;
 10178  1B20  170B               	bsf	11,6	;volatile
 10179                           
 10180                           ;MCU_B1.c: 398: GIE = 1;
 10181  1B21  178B               	bsf	11,7	;volatile
 10182  1B22  0008               	return
 10183  1B23                     __end_of_IOC_Set:	
 10184                           
 10185                           	psect	text51
 10186  1A6B                     __ptext51:	
 10187 ;; *************** function _Fosc_Set *****************
 10188 ;; Defined at:
 10189 ;;		line 56 in file "../src/MCU_B1.c"
 10190 ;; Parameters:    Size  Location     Type
 10191 ;;		None
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;		None
 10194 ;; Return value:  Size  Location     Type
 10195 ;;		None               void
 10196 ;; Registers used:
 10197 ;;		wreg
 10198 ;; Tracked objects:
 10199 ;;		On entry : 0/0
 10200 ;;		On exit  : 0/0
 10201 ;;		Unchanged: 0/0
 10202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;Total ram usage:        0 bytes
 10208 ;; Hardware stack levels used:    1
 10209 ;; Hardware stack levels required when called:    5
 10210 ;; This function calls:
 10211 ;;		Nothing
 10212 ;; This function is called by:
 10213 ;;		_Mcu_Initialization
 10214 ;; This function uses a non-reentrant model
 10215 ;;
 10216                           
 10217                           
 10218                           ;psect for function _Fosc_Set
 10219  1A6B                     _Fosc_Set:	
 10220                           
 10221                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10222                           
 10223                           ;incstack = 0
 10224                           ; Regs used in _Fosc_Set: [wreg]
 10225  1A6B  3078               	movlw	120
 10226  1A6C  0021               	movlb	1	; select bank1
 10227  1A6D  0099               	movwf	25	;volatile
 10228  1A6E  0008               	return
 10229  1A6F                     __end_of_Fosc_Set:	
 10230                           
 10231                           	psect	text52
 10232  1A85                     __ptext52:	
 10233 ;; *************** function _ADC_Set *****************
 10234 ;; Defined at:
 10235 ;;		line 420 in file "../src/MCU_B1.c"
 10236 ;; Parameters:    Size  Location     Type
 10237 ;;		None
 10238 ;; Auto vars:     Size  Location     Type
 10239 ;;		None
 10240 ;; Return value:  Size  Location     Type
 10241 ;;		None               void
 10242 ;; Registers used:
 10243 ;;		wreg
 10244 ;; Tracked objects:
 10245 ;;		On entry : 0/0
 10246 ;;		On exit  : 0/0
 10247 ;;		Unchanged: 0/0
 10248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;Total ram usage:        0 bytes
 10254 ;; Hardware stack levels used:    1
 10255 ;; Hardware stack levels required when called:    5
 10256 ;; This function calls:
 10257 ;;		Nothing
 10258 ;; This function is called by:
 10259 ;;		_Mcu_Initialization
 10260 ;; This function uses a non-reentrant model
 10261 ;;
 10262                           
 10263                           
 10264                           ;psect for function _ADC_Set
 10265  1A85                     _ADC_Set:	
 10266                           
 10267                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10268                           
 10269                           ;incstack = 0
 10270                           ; Regs used in _ADC_Set: [wreg]
 10271  1A85  30F3               	movlw	243
 10272  1A86  0021               	movlb	1	; select bank1
 10273  1A87  009E               	movwf	30	;volatile
 10274                           
 10275                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10276  1A88  30C1               	movlw	193
 10277  1A89  0022               	movlb	2	; select bank2
 10278  1A8A  0097               	movwf	23	;volatile
 10279  1A8B  0008               	return
 10280  1A8C                     __end_of_ADC_Set:	
 10281                           
 10282                           	psect	text53
 10283  0049                     __ptext53:	
 10284 ;; *************** function _Load_Main *****************
 10285 ;; Defined at:
 10286 ;;		line 39 in file "../src/OverLoad_B1.c"
 10287 ;; Parameters:    Size  Location     Type
 10288 ;;		None
 10289 ;; Auto vars:     Size  Location     Type
 10290 ;;  i               1   15[BANK0 ] unsigned char 
 10291 ;;  adjgo           1   14[BANK0 ] unsigned char 
 10292 ;;  error           1   13[BANK0 ] unsigned char 
 10293 ;;  j               1   11[BANK0 ] unsigned char 
 10294 ;; Return value:  Size  Location     Type
 10295 ;;		None               void
 10296 ;; Registers used:
 10297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10298 ;; Tracked objects:
 10299 ;;		On entry : 0/0
 10300 ;;		On exit  : 0/0
 10301 ;;		Unchanged: 0/0
 10302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;Total ram usage:        7 bytes
 10308 ;; Hardware stack levels used:    1
 10309 ;; Hardware stack levels required when called:    8
 10310 ;; This function calls:
 10311 ;;		_getAll_DimmerLights_AdjGO
 10312 ;;		_getMain_All_Error_Status
 10313 ;;		_getMain_LightsStatus
 10314 ;;		_getMain_Lights_Count
 10315 ;;		_getMain_LoadOK
 10316 ;;		_setLoad_AH_AL_Restore
 10317 ;; This function is called by:
 10318 ;;		_main
 10319 ;; This function uses a non-reentrant model
 10320 ;;
 10321                           
 10322                           
 10323                           ;psect for function _Load_Main
 10324  0049                     _Load_Main:	
 10325                           
 10326                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10327                           
 10328                           ;incstack = 0
 10329                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10330  0049  0020               	movlb	0	; select bank0
 10331  004A  01AF               	clrf	Load_Main@i
 10332  004B  01AB               	clrf	Load_Main@j
 10333  004C  3000               	movlw	0
 10334  004D  3190  20E4  3180   	fcall	_getMain_All_Error_Status
 10335  0050  0020               	movlb	0	; select bank0
 10336  0051  00A9               	movwf	??_Load_Main
 10337  0052  0829               	movf	??_Load_Main,w
 10338  0053  00AD               	movwf	Load_Main@error
 10339  0054  01AE               	clrf	Load_Main@adjgo
 10340                           
 10341                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10342  0055  0022               	movlb	2	; select bank2
 10343  0056  1C27               	btfss	_Load^(0+256),0
 10344  0057  2A2F               	goto	l1729
 10345                           
 10346                           ;OverLoad_B1.c: 44: adjgo = getAll_DimmerLights_AdjGO();
 10347  0058  319B  2384  3180   	fcall	_getAll_DimmerLights_AdjGO
 10348  005B  0020               	movlb	0	; select bank0
 10349  005C  00A9               	movwf	??_Load_Main
 10350  005D  0829               	movf	??_Load_Main,w
 10351  005E  00AE               	movwf	Load_Main@adjgo
 10352                           
 10353                           ;OverLoad_B1.c: 46: Load.GO = getMain_LightsStatus() == 1 && error == 0 ? 1 : 0;
 10354  005F  01AC               	clrf	_Load_Main$4317
 10355  0060  3190  2089  3180   	fcall	_getMain_LightsStatus
 10356  0063  3A01               	xorlw	1
 10357  0064  1D03               	skipz
 10358  0065  286C               	goto	l10548
 10359  0066  0020               	movlb	0	; select bank0
 10360  0067  08AD               	movf	Load_Main@error,f
 10361  0068  1D03               	skipz
 10362  0069  286C               	goto	l10548
 10363  006A  01AC               	clrf	_Load_Main$4317
 10364  006B  0AAC               	incf	_Load_Main$4317,f
 10365  006C                     l10548:	
 10366  006C  0020               	movlb	0	; select bank0
 10367  006D  082C               	movf	_Load_Main$4317,w
 10368  006E  0022               	movlb	2	; select bank2
 10369  006F  10A7               	bcf	_Load^(0+256),1
 10370  0070  1D03               	skipz
 10371  0071  14A7               	bsf	_Load^(0+256),1
 10372                           
 10373                           ;OverLoad_B1.c: 47: if (getMain_LoadOK() == 1 && Load.Run == 0 && adjgo == 0) {
 10374  0072  319B  2348  3180   	fcall	_getMain_LoadOK
 10375  0075  3A01               	xorlw	1
 10376  0076  1D03               	skipz
 10377  0077  2882               	goto	l1732
 10378  0078  0022               	movlb	2	; select bank2
 10379  0079  19A7               	btfsc	_Load^(0+256),3
 10380  007A  2882               	goto	l1732
 10381  007B  0020               	movlb	0	; select bank0
 10382  007C  08AE               	movf	Load_Main@adjgo,f
 10383  007D  1D03               	skipz
 10384  007E  2882               	goto	l1732
 10385                           
 10386                           ;OverLoad_B1.c: 48: Load.Run = 1;
 10387  007F  0022               	movlb	2	; select bank2
 10388  0080  15A7               	bsf	_Load^(0+256),3
 10389                           
 10390                           ;OverLoad_B1.c: 49: Load.OK = 0;
 10391  0081  13A7               	bcf	_Load^(0+256),7
 10392  0082                     l1732:	
 10393                           
 10394                           ;OverLoad_B1.c: 50: }
 10395                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10396  0082  0022               	movlb	2	; select bank2
 10397  0083  1CA7               	btfss	_Load^(0+256),1
 10398  0084  29C9               	goto	l1733
 10399                           
 10400                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10401  0085  1527               	bsf	_Load^(0+256),2
 10402                           
 10403                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10404  0086  1E27               	btfss	_Load^(0+256),4
 10405  0087  29C7               	goto	l1734
 10406                           
 10407                           ;OverLoad_B1.c: 58: Load.Time++;
 10408  0088  3001               	movlw	1
 10409  0089  07A8               	addwf	(_Load^(0+256)+1),f
 10410  008A  3000               	movlw	0
 10411  008B  3DA9               	addwfc	((_Load+1)^(0+256)+1),f
 10412                           
 10413                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10414  008C  3000               	movlw	0
 10415  008D  0229               	subwf	((_Load+1)^(0+256)+1),w
 10416  008E  3005               	movlw	5
 10417  008F  1903               	skipnz
 10418  0090  0228               	subwf	(_Load^(0+256)+1),w
 10419  0091  1C03               	skipc
 10420  0092  0008               	return
 10421                           
 10422                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10423  0093  01A8               	clrf	(_Load^(0+256)+1)
 10424  0094  01A9               	clrf	((_Load+1)^(0+256)+1)
 10425                           
 10426                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10427  0095  1227               	bcf	_Load^(0+256),4
 10428                           
 10429                           ;OverLoad_B1.c: 63: for (i = 0; i < 4; i++) {
 10430  0096  0020               	movlb	0	; select bank0
 10431  0097  01AF               	clrf	Load_Main@i
 10432  0098  3004               	movlw	4
 10433  0099  022F               	subwf	Load_Main@i,w
 10434  009A  1803               	btfsc	3,0
 10435  009B  28C6               	goto	l10576
 10436  009C                     l10570:	
 10437                           
 10438                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10439  009C  352F               	lslf	Load_Main@i,w
 10440  009D  3E32               	addlw	(_Load+11)& (0+255)
 10441  009E  0086               	movwf	6
 10442  009F  3001               	movlw	1	; select bank2/3
 10443  00A0  0087               	movwf	7
 10444  00A1  3F40               	moviw [0]fsr1
 10445  00A2  00A9               	movwf	??_Load_Main
 10446  00A3  3F41               	moviw [1]fsr1
 10447  00A4  00AA               	movwf	??_Load_Main+1
 10448  00A5  0829               	movf	??_Load_Main,w
 10449  00A6  0022               	movlb	2	; select bank2
 10450  00A7  07AC               	addwf	(_Load^(0+256)+5),f
 10451  00A8  0020               	movlb	0	; select bank0
 10452  00A9  082A               	movf	??_Load_Main+1,w
 10453  00AA  0022               	movlb	2	; select bank2
 10454  00AB  3DAD               	addwfc	((_Load+1)^(0+256)+5),f
 10455                           
 10456                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10457  00AC  0020               	movlb	0	; select bank0
 10458  00AD  352F               	lslf	Load_Main@i,w
 10459  00AE  3E3C               	addlw	(_Load+21)& (0+255)
 10460  00AF  0086               	movwf	6
 10461  00B0  3001               	movlw	1	; select bank2/3
 10462  00B1  0087               	movwf	7
 10463  00B2  3F40               	moviw [0]fsr1
 10464  00B3  00A9               	movwf	??_Load_Main
 10465  00B4  3F41               	moviw [1]fsr1
 10466  00B5  00AA               	movwf	??_Load_Main+1
 10467  00B6  0829               	movf	??_Load_Main,w
 10468  00B7  0022               	movlb	2	; select bank2
 10469  00B8  07AE               	addwf	(_Load^(0+256)+7),f
 10470  00B9  0020               	movlb	0	; select bank0
 10471  00BA  082A               	movf	??_Load_Main+1,w
 10472  00BB  0022               	movlb	2	; select bank2
 10473  00BC  3DAF               	addwfc	((_Load+1)^(0+256)+7),f
 10474  00BD  3001               	movlw	1
 10475  00BE  0020               	movlb	0	; select bank0
 10476  00BF  00A9               	movwf	??_Load_Main
 10477  00C0  0829               	movf	??_Load_Main,w
 10478  00C1  07AF               	addwf	Load_Main@i,f
 10479  00C2  3004               	movlw	4
 10480  00C3  022F               	subwf	Load_Main@i,w
 10481  00C4  1C03               	skipc
 10482  00C5  289C               	goto	l10570
 10483  00C6                     l10576:	
 10484                           
 10485                           ;OverLoad_B1.c: 66: }
 10486                           ;OverLoad_B1.c: 67: Load.ADH /= 4;
 10487  00C6  3002               	movlw	2
 10488  00C7  0022               	movlb	2	; select bank2
 10489  00C8                     u12075:	
 10490  00C8  36AD               	lsrf	((_Load+1)^(0+256)+5),f
 10491  00C9  0CAC               	rrf	(_Load^(0+256)+5),f
 10492  00CA  0B89               	decfsz	9,f
 10493  00CB  28C8               	goto	u12075
 10494                           
 10495                           ;OverLoad_B1.c: 68: Load.ADL /= 4;
 10496  00CC  3002               	movlw	2
 10497  00CD                     u12085:	
 10498  00CD  36AF               	lsrf	((_Load+1)^(0+256)+7),f
 10499  00CE  0CAE               	rrf	(_Load^(0+256)+7),f
 10500  00CF  0B89               	decfsz	9,f
 10501  00D0  28CD               	goto	u12085
 10502                           
 10503                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10504  00D1  319D  256A  3180   	fcall	_setLoad_AH_AL_Restore
 10505                           
 10506                           ;OverLoad_B1.c: 70: if (Load.ADH > Load.ADL) {
 10507  00D4  0022               	movlb	2	; select bank2
 10508  00D5  082D               	movf	((_Load+1)^(0+256)+5),w
 10509  00D6  022F               	subwf	((_Load+1)^(0+256)+7),w
 10510  00D7  1D03               	skipz
 10511  00D8  28DB               	goto	u12095
 10512  00D9  082C               	movf	(_Load^(0+256)+5),w
 10513  00DA  022E               	subwf	(_Load^(0+256)+7),w
 10514  00DB                     u12095:	
 10515  00DB  1803               	skipnc
 10516  00DC  0008               	return
 10517                           
 10518                           ;OverLoad_B1.c: 71: Load.AD = Load.ADH - Load.ADL;
 10519  00DD  3005               	movlw	5
 10520  00DE  3E27               	addlw	_Load& (0+255)
 10521  00DF  0086               	movwf	6
 10522  00E0  3001               	movlw	1	; select bank2/3
 10523  00E1  0087               	movwf	7
 10524  00E2  092E               	comf	(_Load^(0+256)+7),w
 10525  00E3  0020               	movlb	0	; select bank0
 10526  00E4  00A9               	movwf	??_Load_Main
 10527  00E5  0022               	movlb	2	; select bank2
 10528  00E6  092F               	comf	((_Load+1)^(0+256)+7),w
 10529  00E7  0020               	movlb	0	; select bank0
 10530  00E8  00AA               	movwf	??_Load_Main+1
 10531  00E9  0AA9               	incf	??_Load_Main,f
 10532  00EA  1903               	skipnz
 10533  00EB  0AAA               	incf	??_Load_Main+1,f
 10534  00EC  3F40               	moviw [0]fsr1
 10535  00ED  0729               	addwf	??_Load_Main,w
 10536  00EE  0022               	movlb	2	; select bank2
 10537  00EF  00C6               	movwf	(_Load^(0+256)+31)
 10538  00F0  3F41               	moviw [1]fsr1
 10539  00F1  0020               	movlb	0	; select bank0
 10540  00F2  3D2A               	addwfc	??_Load_Main+1,w
 10541  00F3  0022               	movlb	2	; select bank2
 10542  00F4  00C7               	movwf	(_Load^(0+256)+32)
 10543                           
 10544                           ;OverLoad_B1.c: 72: Load.ADH = 0;
 10545  00F5  01AC               	clrf	(_Load^(0+256)+5)
 10546  00F6  01AD               	clrf	((_Load+1)^(0+256)+5)
 10547                           
 10548                           ;OverLoad_B1.c: 73: Load.ADL = 0;
 10549  00F7  01AE               	clrf	(_Load^(0+256)+7)
 10550  00F8  01AF               	clrf	((_Load+1)^(0+256)+7)
 10551                           
 10552                           ;OverLoad_B1.c: 74: Load.LightsCount = getMain_Lights_Count();
 10553  00F9  319C  24D7  3180   	fcall	_getMain_Lights_Count
 10554  00FC  0020               	movlb	0	; select bank0
 10555  00FD  00A9               	movwf	??_Load_Main
 10556  00FE  0829               	movf	??_Load_Main,w
 10557  00FF  0022               	movlb	2	; select bank2
 10558  0100  00D2               	movwf	(_Load^(0+256)+43)
 10559                           
 10560                           ;OverLoad_B1.c: 76: if (Load.Run == 1) {
 10561  0101  1DA7               	btfss	_Load^(0+256),3
 10562  0102  2928               	goto	l10608
 10563                           
 10564                           ;OverLoad_B1.c: 77: if (Load.Count < 2) {
 10565  0103  3002               	movlw	2
 10566  0104  0250               	subwf	(_Load^(0+256)+41),w
 10567  0105  1803               	skipnc
 10568  0106  2928               	goto	l10608
 10569                           
 10570                           ;OverLoad_B1.c: 78: Load.Count++;
 10571  0107  3001               	movlw	1
 10572  0108  0020               	movlb	0	; select bank0
 10573  0109  00A9               	movwf	??_Load_Main
 10574  010A  0829               	movf	??_Load_Main,w
 10575  010B  0022               	movlb	2	; select bank2
 10576  010C  07D0               	addwf	(_Load^(0+256)+41),f
 10577                           
 10578                           ;OverLoad_B1.c: 79: if (Load.Count == 1) {
 10579  010D  0850               	movf	(_Load^(0+256)+41),w
 10580  010E  3A01               	xorlw	1
 10581  010F  1D03               	skipz
 10582  0110  2915               	goto	l10600
 10583                           
 10584                           ;OverLoad_B1.c: 80: Load.JudgeValue = 0x400;
 10585  0111  3000               	movlw	0
 10586  0112  00CC               	movwf	(_Load^(0+256)+37)
 10587  0113  3004               	movlw	4
 10588  0114  2920               	goto	L6
 10589  0115                     l10600:	
 10590                           ;OverLoad_B1.c: 81: } else if (Load.Count == 2) {
 10591                           
 10592  0115  0850               	movf	(_Load^(0+256)+41),w
 10593  0116  3A02               	xorlw	2
 10594  0117  1D03               	skipz
 10595  0118  2928               	goto	l10608
 10596                           
 10597                           ;OverLoad_B1.c: 82: if (Load.LightsCount == 1) {
 10598  0119  0852               	movf	(_Load^(0+256)+43),w
 10599  011A  3A01               	xorlw	1
 10600  011B  1D03               	skipz
 10601  011C  2922               	goto	l10606
 10602                           
 10603                           ;OverLoad_B1.c: 83: Load.JudgeValue = 0x48;
 10604  011D  3048               	movlw	72
 10605  011E  00CC               	movwf	(_Load^(0+256)+37)
 10606  011F  3000               	movlw	0
 10607  0120                     L6:	
 10608  0120  00CD               	movwf	(_Load^(0+256)+38)
 10609                           
 10610                           ;OverLoad_B1.c: 84: } else {
 10611  0121  2928               	goto	l10608
 10612  0122                     l10606:	
 10613                           
 10614                           ;OverLoad_B1.c: 85: Load.JudgeValue = 0x48 + Load.TotalLoad;
 10615  0122  0830               	movf	(_Load^(0+256)+9),w
 10616  0123  3E48               	addlw	72
 10617  0124  00CC               	movwf	(_Load^(0+256)+37)
 10618  0125  3000               	movlw	0
 10619  0126  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 10620  0127  00CD               	movwf	((_Load+1)^(0+256)+37)
 10621  0128                     l10608:	
 10622                           
 10623                           ;OverLoad_B1.c: 86: }
 10624                           ;OverLoad_B1.c: 87: }
 10625                           ;OverLoad_B1.c: 88: }
 10626                           ;OverLoad_B1.c: 89: }
 10627                           ;OverLoad_B1.c: 91: if (Load.AD >= Load.JudgeValue && adjgo == 0) {
 10628  0128  084D               	movf	((_Load+1)^(0+256)+37),w
 10629  0129  0247               	subwf	((_Load+1)^(0+256)+31),w
 10630  012A  1D03               	skipz
 10631  012B  292E               	goto	u12155
 10632  012C  084C               	movf	(_Load^(0+256)+37),w
 10633  012D  0246               	subwf	(_Load^(0+256)+31),w
 10634  012E                     u12155:	
 10635  012E  1C03               	skipc
 10636  012F  2976               	goto	l10628
 10637  0130  0020               	movlb	0	; select bank0
 10638  0131  08AE               	movf	Load_Main@adjgo,f
 10639  0132  1D03               	skipz
 10640  0133  2976               	goto	l10628
 10641                           
 10642                           ;OverLoad_B1.c: 92: Load.ErrorCount++;
 10643  0134  3001               	movlw	1
 10644  0135  00A9               	movwf	??_Load_Main
 10645  0136  0829               	movf	??_Load_Main,w
 10646  0137  0022               	movlb	2	; select bank2
 10647  0138  07D1               	addwf	(_Load^(0+256)+42),f
 10648                           
 10649                           ;OverLoad_B1.c: 93: if (Load.ErrorCount > 2) {
 10650  0139  3003               	movlw	3
 10651  013A  0251               	subwf	(_Load^(0+256)+42),w
 10652  013B  1C03               	skipc
 10653  013C  0008               	return
 10654                           
 10655                           ;OverLoad_B1.c: 94: Load.ErrorCount = 0;
 10656  013D  01D1               	clrf	(_Load^(0+256)+42)
 10657                           
 10658                           ;OverLoad_B1.c: 95: Load.ERROR = 1;
 10659  013E  16A7               	bsf	_Load^(0+256),5
 10660                           
 10661                           ;OverLoad_B1.c: 102: product->Data[4]=(Load.AD >> 8);
 10662  013F  0847               	movf	((_Load+1)^(0+256)+31),w
 10663  0140  0020               	movlb	0	; select bank0
 10664  0141  00A9               	movwf	??_Load_Main
 10665  0142  087B               	movf	_product,w
 10666  0143  3E04               	addlw	4
 10667  0144  0086               	movwf	6
 10668  0145  3002               	movlw	2	; select bank4/5
 10669  0146  0087               	movwf	7
 10670  0147  0829               	movf	??_Load_Main,w
 10671  0148  0081               	movwf	1
 10672                           
 10673                           ;OverLoad_B1.c: 103: product->Data[5]=Load.AD;
 10674  0149  0022               	movlb	2	; select bank2
 10675  014A  0846               	movf	(_Load^(0+256)+31),w
 10676  014B  0020               	movlb	0	; select bank0
 10677  014C  00A9               	movwf	??_Load_Main
 10678  014D  087B               	movf	_product,w
 10679  014E  3E05               	addlw	5
 10680  014F  0086               	movwf	6
 10681  0150  3002               	movlw	2	; select bank4/5
 10682  0151  0087               	movwf	7
 10683  0152  0829               	movf	??_Load_Main,w
 10684  0153  0081               	movwf	1
 10685                           
 10686                           ;OverLoad_B1.c: 104: product->Data[6]=(Load.JudgeValue >> 8);
 10687  0154  0022               	movlb	2	; select bank2
 10688  0155  084D               	movf	((_Load+1)^(0+256)+37),w
 10689  0156  0020               	movlb	0	; select bank0
 10690  0157  00A9               	movwf	??_Load_Main
 10691  0158  087B               	movf	_product,w
 10692  0159  3E06               	addlw	6
 10693  015A  0086               	movwf	6
 10694  015B  3002               	movlw	2	; select bank4/5
 10695  015C  0087               	movwf	7
 10696  015D  0829               	movf	??_Load_Main,w
 10697  015E  0081               	movwf	1
 10698                           
 10699                           ;OverLoad_B1.c: 105: product->Data[7]=Load.JudgeValue;
 10700  015F  0022               	movlb	2	; select bank2
 10701  0160  084C               	movf	(_Load^(0+256)+37),w
 10702  0161  0020               	movlb	0	; select bank0
 10703  0162  00A9               	movwf	??_Load_Main
 10704  0163  087B               	movf	_product,w
 10705  0164  3E07               	addlw	7
 10706  0165  0086               	movwf	6
 10707  0166  3002               	movlw	2	; select bank4/5
 10708  0167  0087               	movwf	7
 10709  0168  0829               	movf	??_Load_Main,w
 10710  0169  0081               	movwf	1
 10711                           
 10712                           ;OverLoad_B1.c: 106: product->Data[8]=Load.LightsCount;
 10713  016A  0022               	movlb	2	; select bank2
 10714  016B  0852               	movf	(_Load^(0+256)+43),w
 10715  016C  0020               	movlb	0	; select bank0
 10716  016D  00A9               	movwf	??_Load_Main
 10717  016E  087B               	movf	_product,w
 10718  016F  3E08               	addlw	8
 10719  0170  0086               	movwf	6
 10720  0171  3002               	movlw	2	; select bank4/5
 10721  0172  0087               	movwf	7
 10722  0173  0829               	movf	??_Load_Main,w
 10723  0174  0081               	movwf	1
 10724                           
 10725                           ;OverLoad_B1.c: 108: }
 10726                           ;OverLoad_B1.c: 109: } else {
 10727  0175  0008               	return
 10728  0176                     l10628:	
 10729                           
 10730                           ;OverLoad_B1.c: 110: Load.ErrorCount = 0;
 10731  0176  0022               	movlb	2	; select bank2
 10732  0177  01D1               	clrf	(_Load^(0+256)+42)
 10733                           
 10734                           ;OverLoad_B1.c: 111: if (Load.Run == 1) {
 10735  0178  1DA7               	btfss	_Load^(0+256),3
 10736  0179  0008               	return
 10737                           
 10738                           ;OverLoad_B1.c: 112: if (Load.OK == 0) {
 10739  017A  1BA7               	btfsc	_Load^(0+256),7
 10740  017B  0008               	return
 10741                           
 10742                           ;OverLoad_B1.c: 113: Load.SafeCount++;
 10743  017C  3001               	movlw	1
 10744  017D  0020               	movlb	0	; select bank0
 10745  017E  00A9               	movwf	??_Load_Main
 10746  017F  0829               	movf	??_Load_Main,w
 10747  0180  0022               	movlb	2	; select bank2
 10748  0181  07D3               	addwf	(_Load^(0+256)+44),f
 10749                           
 10750                           ;OverLoad_B1.c: 114: if (Load.SafeCount >= 3) {
 10751  0182  3003               	movlw	3
 10752  0183  0253               	subwf	(_Load^(0+256)+44),w
 10753  0184  1C03               	skipc
 10754  0185  0008               	return
 10755                           
 10756                           ;OverLoad_B1.c: 115: Load.SafeCount = 0;
 10757  0186  01D3               	clrf	(_Load^(0+256)+44)
 10758                           
 10759                           ;OverLoad_B1.c: 116: Load.OK = 1;
 10760  0187  17A7               	bsf	_Load^(0+256),7
 10761                           
 10762                           ;OverLoad_B1.c: 117: Load.Run = 0;
 10763  0188  11A7               	bcf	_Load^(0+256),3
 10764                           
 10765                           ;OverLoad_B1.c: 118: Load.Count = 0;
 10766  0189  01D0               	clrf	(_Load^(0+256)+41)
 10767                           
 10768                           ;OverLoad_B1.c: 119: Load.TotalLoad = Load.AD;
 10769  018A  0847               	movf	((_Load+1)^(0+256)+31),w
 10770  018B  01B1               	clrf	((_Load+1)^(0+256)+9)
 10771  018C  07B1               	addwf	((_Load+1)^(0+256)+9),f
 10772  018D  0846               	movf	(_Load^(0+256)+31),w
 10773  018E  01B0               	clrf	(_Load^(0+256)+9)
 10774  018F  07B0               	addwf	(_Load^(0+256)+9),f
 10775                           
 10776                           ;OverLoad_B1.c: 122: product->Data[4]=(Load.AD >> 8);
 10777  0190  0847               	movf	((_Load+1)^(0+256)+31),w
 10778  0191  0020               	movlb	0	; select bank0
 10779  0192  00A9               	movwf	??_Load_Main
 10780  0193  087B               	movf	_product,w
 10781  0194  3E04               	addlw	4
 10782  0195  0086               	movwf	6
 10783  0196  3002               	movlw	2	; select bank4/5
 10784  0197  0087               	movwf	7
 10785  0198  0829               	movf	??_Load_Main,w
 10786  0199  0081               	movwf	1
 10787                           
 10788                           ;OverLoad_B1.c: 123: product->Data[5]=Load.AD;
 10789  019A  0022               	movlb	2	; select bank2
 10790  019B  0846               	movf	(_Load^(0+256)+31),w
 10791  019C  0020               	movlb	0	; select bank0
 10792  019D  00A9               	movwf	??_Load_Main
 10793  019E  087B               	movf	_product,w
 10794  019F  3E05               	addlw	5
 10795  01A0  0086               	movwf	6
 10796  01A1  3002               	movlw	2	; select bank4/5
 10797  01A2  0087               	movwf	7
 10798  01A3  0829               	movf	??_Load_Main,w
 10799  01A4  0081               	movwf	1
 10800                           
 10801                           ;OverLoad_B1.c: 124: product->Data[6]=(Load.JudgeValue >> 8);
 10802  01A5  0022               	movlb	2	; select bank2
 10803  01A6  084D               	movf	((_Load+1)^(0+256)+37),w
 10804  01A7  0020               	movlb	0	; select bank0
 10805  01A8  00A9               	movwf	??_Load_Main
 10806  01A9  087B               	movf	_product,w
 10807  01AA  3E06               	addlw	6
 10808  01AB  0086               	movwf	6
 10809  01AC  3002               	movlw	2	; select bank4/5
 10810  01AD  0087               	movwf	7
 10811  01AE  0829               	movf	??_Load_Main,w
 10812  01AF  0081               	movwf	1
 10813                           
 10814                           ;OverLoad_B1.c: 125: product->Data[7]=Load.JudgeValue;
 10815  01B0  0022               	movlb	2	; select bank2
 10816  01B1  084C               	movf	(_Load^(0+256)+37),w
 10817  01B2  0020               	movlb	0	; select bank0
 10818  01B3  00A9               	movwf	??_Load_Main
 10819  01B4  087B               	movf	_product,w
 10820  01B5  3E07               	addlw	7
 10821  01B6  0086               	movwf	6
 10822  01B7  3002               	movlw	2	; select bank4/5
 10823  01B8  0087               	movwf	7
 10824  01B9  0829               	movf	??_Load_Main,w
 10825  01BA  0081               	movwf	1
 10826                           
 10827                           ;OverLoad_B1.c: 126: product->Data[8]=Load.LightsCount;
 10828  01BB  0022               	movlb	2	; select bank2
 10829  01BC  0852               	movf	(_Load^(0+256)+43),w
 10830  01BD  0020               	movlb	0	; select bank0
 10831  01BE  00A9               	movwf	??_Load_Main
 10832  01BF  087B               	movf	_product,w
 10833  01C0  3E08               	addlw	8
 10834  01C1  0086               	movwf	6
 10835  01C2  3002               	movlw	2	; select bank4/5
 10836  01C3  0087               	movwf	7
 10837  01C4  0829               	movf	??_Load_Main,w
 10838  01C5  0081               	movwf	1
 10839                           
 10840                           ;OverLoad_B1.c: 128: }
 10841                           ;OverLoad_B1.c: 129: }
 10842                           ;OverLoad_B1.c: 130: }
 10843                           ;OverLoad_B1.c: 131: }
 10844                           ;OverLoad_B1.c: 132: }
 10845                           ;OverLoad_B1.c: 133: }
 10846                           ;OverLoad_B1.c: 134: } else {
 10847  01C6  0008               	return
 10848  01C7                     l1734:	
 10849                           
 10850                           ;OverLoad_B1.c: 135: Load.ADtoGO = 1;
 10851  01C7  1627               	bsf	_Load^(0+256),4
 10852                           
 10853                           ;OverLoad_B1.c: 136: }
 10854                           ;OverLoad_B1.c: 137: } else {
 10855  01C8  0008               	return
 10856  01C9                     l1733:	
 10857                           
 10858                           ;OverLoad_B1.c: 138: if (Load.LightsON == 1 && error != 3) {
 10859  01C9  1D27               	btfss	_Load^(0+256),2
 10860  01CA  2A1D               	goto	l10696
 10861  01CB  0020               	movlb	0	; select bank0
 10862  01CC  082D               	movf	Load_Main@error,w
 10863  01CD  3A03               	xorlw	3
 10864  01CE  1903               	skipnz
 10865  01CF  2A1D               	goto	l10696
 10866                           
 10867                           ;OverLoad_B1.c: 139: Load.LightsON = 0;
 10868  01D0  0022               	movlb	2	; select bank2
 10869  01D1  1127               	bcf	_Load^(0+256),2
 10870                           
 10871                           ;OverLoad_B1.c: 141: Load.Time = 0;
 10872  01D2  01A8               	clrf	(_Load^(0+256)+1)
 10873  01D3  01A9               	clrf	((_Load+1)^(0+256)+1)
 10874                           
 10875                           ;OverLoad_B1.c: 142: Load.ADtoGO = 0;
 10876  01D4  1227               	bcf	_Load^(0+256),4
 10877                           
 10878                           ;OverLoad_B1.c: 143: setLoad_AH_AL_Restore();
 10879  01D5  319D  256A  3180   	fcall	_setLoad_AH_AL_Restore
 10880                           
 10881                           ;OverLoad_B1.c: 144: Load.Count = 0;
 10882  01D8  0022               	movlb	2	; select bank2
 10883  01D9  01D0               	clrf	(_Load^(0+256)+41)
 10884                           
 10885                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10886  01DA  01D1               	clrf	(_Load^(0+256)+42)
 10887                           
 10888                           ;OverLoad_B1.c: 146: Load.SafeCount = 0;
 10889  01DB  01D3               	clrf	(_Load^(0+256)+44)
 10890                           
 10891                           ;OverLoad_B1.c: 148: Load.ADH = 0;
 10892  01DC  01AC               	clrf	(_Load^(0+256)+5)
 10893  01DD  01AD               	clrf	((_Load+1)^(0+256)+5)
 10894                           
 10895                           ;OverLoad_B1.c: 149: Load.ADL = 0;
 10896  01DE  01AE               	clrf	(_Load^(0+256)+7)
 10897  01DF  01AF               	clrf	((_Load+1)^(0+256)+7)
 10898                           
 10899                           ;OverLoad_B1.c: 150: Load.AD = 0;
 10900  01E0  01C6               	clrf	(_Load^(0+256)+31)
 10901  01E1  01C7               	clrf	((_Load+1)^(0+256)+31)
 10902                           
 10903                           ;OverLoad_B1.c: 151: Load.JudgeValue = 0;
 10904  01E2  01CC               	clrf	(_Load^(0+256)+37)
 10905  01E3  01CD               	clrf	((_Load+1)^(0+256)+37)
 10906                           
 10907                           ;OverLoad_B1.c: 152: Load.LightsCount = 0;
 10908  01E4  01D2               	clrf	(_Load^(0+256)+43)
 10909                           
 10910                           ;OverLoad_B1.c: 153: Load.Run = 0;
 10911  01E5  11A7               	bcf	_Load^(0+256),3
 10912                           
 10913                           ;OverLoad_B1.c: 154: Load.OK = 1;
 10914  01E6  17A7               	bsf	_Load^(0+256),7
 10915                           
 10916                           ;OverLoad_B1.c: 156: product->Data[4]=(Load.AD >> 8);
 10917  01E7  0847               	movf	((_Load+1)^(0+256)+31),w
 10918  01E8  0020               	movlb	0	; select bank0
 10919  01E9  00A9               	movwf	??_Load_Main
 10920  01EA  087B               	movf	_product,w
 10921  01EB  3E04               	addlw	4
 10922  01EC  0086               	movwf	6
 10923  01ED  3002               	movlw	2	; select bank4/5
 10924  01EE  0087               	movwf	7
 10925  01EF  0829               	movf	??_Load_Main,w
 10926  01F0  0081               	movwf	1
 10927                           
 10928                           ;OverLoad_B1.c: 157: product->Data[5]=Load.AD;
 10929  01F1  0022               	movlb	2	; select bank2
 10930  01F2  0846               	movf	(_Load^(0+256)+31),w
 10931  01F3  0020               	movlb	0	; select bank0
 10932  01F4  00A9               	movwf	??_Load_Main
 10933  01F5  087B               	movf	_product,w
 10934  01F6  3E05               	addlw	5
 10935  01F7  0086               	movwf	6
 10936  01F8  3002               	movlw	2	; select bank4/5
 10937  01F9  0087               	movwf	7
 10938  01FA  0829               	movf	??_Load_Main,w
 10939  01FB  0081               	movwf	1
 10940                           
 10941                           ;OverLoad_B1.c: 158: product->Data[6]=(Load.JudgeValue >> 8);
 10942  01FC  0022               	movlb	2	; select bank2
 10943  01FD  084D               	movf	((_Load+1)^(0+256)+37),w
 10944  01FE  0020               	movlb	0	; select bank0
 10945  01FF  00A9               	movwf	??_Load_Main
 10946  0200  087B               	movf	_product,w
 10947  0201  3E06               	addlw	6
 10948  0202  0086               	movwf	6
 10949  0203  3002               	movlw	2	; select bank4/5
 10950  0204  0087               	movwf	7
 10951  0205  0829               	movf	??_Load_Main,w
 10952  0206  0081               	movwf	1
 10953                           
 10954                           ;OverLoad_B1.c: 159: product->Data[7]=Load.JudgeValue;
 10955  0207  0022               	movlb	2	; select bank2
 10956  0208  084C               	movf	(_Load^(0+256)+37),w
 10957  0209  0020               	movlb	0	; select bank0
 10958  020A  00A9               	movwf	??_Load_Main
 10959  020B  087B               	movf	_product,w
 10960  020C  3E07               	addlw	7
 10961  020D  0086               	movwf	6
 10962  020E  3002               	movlw	2	; select bank4/5
 10963  020F  0087               	movwf	7
 10964  0210  0829               	movf	??_Load_Main,w
 10965  0211  0081               	movwf	1
 10966                           
 10967                           ;OverLoad_B1.c: 160: product->Data[8]=Load.LightsCount;
 10968  0212  0022               	movlb	2	; select bank2
 10969  0213  0852               	movf	(_Load^(0+256)+43),w
 10970  0214  0020               	movlb	0	; select bank0
 10971  0215  00A9               	movwf	??_Load_Main
 10972  0216  087B               	movf	_product,w
 10973  0217  3E08               	addlw	8
 10974  0218  0086               	movwf	6
 10975  0219  3002               	movlw	2	; select bank4/5
 10976  021A  0087               	movwf	7
 10977  021B  0829               	movf	??_Load_Main,w
 10978  021C  0081               	movwf	1
 10979  021D                     l10696:	
 10980                           
 10981                           ;OverLoad_B1.c: 162: }
 10982                           ;OverLoad_B1.c: 163: if (Load.ERROR == 1) {
 10983  021D  0022               	movlb	2	; select bank2
 10984  021E  1EA7               	btfss	_Load^(0+256),5
 10985  021F  0008               	return
 10986                           
 10987                           ;OverLoad_B1.c: 164: Load.ErrorTime++;
 10988  0220  3001               	movlw	1
 10989  0221  07AA               	addwf	(_Load^(0+256)+3),f
 10990  0222  3000               	movlw	0
 10991  0223  3DAB               	addwfc	((_Load+1)^(0+256)+3),f
 10992                           
 10993                           ;OverLoad_B1.c: 165: if (Load.ErrorTime >= 1000) {
 10994  0224  3003               	movlw	3
 10995  0225  022B               	subwf	((_Load+1)^(0+256)+3),w
 10996  0226  30E8               	movlw	232
 10997  0227  1903               	skipnz
 10998  0228  022A               	subwf	(_Load^(0+256)+3),w
 10999  0229  1C03               	skipc
 11000  022A  0008               	return
 11001                           
 11002                           ;OverLoad_B1.c: 166: Load.ErrorTime = 0;
 11003  022B  01AA               	clrf	(_Load^(0+256)+3)
 11004  022C  01AB               	clrf	((_Load+1)^(0+256)+3)
 11005                           
 11006                           ;OverLoad_B1.c: 173: Load.ERROR = 0;
 11007  022D  12A7               	bcf	_Load^(0+256),5
 11008                           
 11009                           ;OverLoad_B1.c: 174: }
 11010                           ;OverLoad_B1.c: 175: }
 11011                           ;OverLoad_B1.c: 176: }
 11012                           ;OverLoad_B1.c: 177: } else {
 11013  022E  0008               	return
 11014  022F                     l1729:	
 11015                           
 11016                           ;OverLoad_B1.c: 178: if (myMain.PowerON == 1) {
 11017  022F  0021               	movlb	1	; select bank1
 11018  0230  1C20               	btfss	_myMain^(0+128),0
 11019  0231  0008               	return
 11020                           
 11021                           ;OverLoad_B1.c: 179: Load.Enable = 1;
 11022  0232  0022               	movlb	2	; select bank2
 11023  0233  1427               	bsf	_Load^(0+256),0
 11024  0234  0008               	return
 11025  0235                     __end_of_Load_Main:	
 11026                           
 11027                           	psect	text54
 11028  1B48                     __ptext54:	
 11029 ;; *************** function _getMain_LoadOK *****************
 11030 ;; Defined at:
 11031 ;;		line 432 in file "../src/Main_B1.c"
 11032 ;; Parameters:    Size  Location     Type
 11033 ;;		None
 11034 ;; Auto vars:     Size  Location     Type
 11035 ;;  ok              1    2[BANK0 ] unsigned char 
 11036 ;; Return value:  Size  Location     Type
 11037 ;;                  1    wreg      unsigned char 
 11038 ;; Registers used:
 11039 ;;		wreg, status,2, pclath, cstack
 11040 ;; Tracked objects:
 11041 ;;		On entry : 0/0
 11042 ;;		On exit  : 0/0
 11043 ;;		Unchanged: 0/0
 11044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;Total ram usage:        2 bytes
 11050 ;; Hardware stack levels used:    1
 11051 ;; Hardware stack levels required when called:    6
 11052 ;; This function calls:
 11053 ;;		_getDimmer_LoadOK
 11054 ;; This function is called by:
 11055 ;;		_Load_Main
 11056 ;; This function uses a non-reentrant model
 11057 ;;
 11058                           
 11059                           
 11060                           ;psect for function _getMain_LoadOK
 11061  1B48                     _getMain_LoadOK:	
 11062                           
 11063                           ;Main_B1.c: 433: char ok = 0;
 11064                           
 11065                           ;incstack = 0
 11066                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 11067  1B48  0020               	movlb	0	; select bank0
 11068  1B49  01A2               	clrf	getMain_LoadOK@ok
 11069                           
 11070                           ;Main_B1.c: 439: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 11071  1B4A  319A  22AC         	fcall	_getDimmer_LoadOK
 11072  1B4C  3A01               	xorlw	1
 11073  1B4D  3000               	movlw	0
 11074  1B4E  1903               	skipnz
 11075  1B4F  3001               	movlw	1
 11076  1B50  0020               	movlb	0	; select bank0
 11077  1B51  00A1               	movwf	??_getMain_LoadOK
 11078  1B52  0821               	movf	??_getMain_LoadOK,w
 11079  1B53  00A2               	movwf	getMain_LoadOK@ok
 11080                           
 11081                           ;Main_B1.c: 441: return ok;
 11082  1B54  0822               	movf	getMain_LoadOK@ok,w
 11083  1B55  0008               	return
 11084  1B56                     __end_of_getMain_LoadOK:	
 11085                           
 11086                           	psect	text55
 11087  1AAC                     __ptext55:	
 11088 ;; *************** function _getDimmer_LoadOK *****************
 11089 ;; Defined at:
 11090 ;;		line 657 in file "../src/Dimmer_B1.c"
 11091 ;; Parameters:    Size  Location     Type
 11092 ;;		None
 11093 ;; Auto vars:     Size  Location     Type
 11094 ;;  status          1    0[BANK0 ] unsigned char 
 11095 ;; Return value:  Size  Location     Type
 11096 ;;                  1    wreg      unsigned char 
 11097 ;; Registers used:
 11098 ;;		wreg, status,2
 11099 ;; Tracked objects:
 11100 ;;		On entry : 0/0
 11101 ;;		On exit  : 0/0
 11102 ;;		Unchanged: 0/0
 11103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11105 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11107 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11108 ;;Total ram usage:        1 bytes
 11109 ;; Hardware stack levels used:    1
 11110 ;; Hardware stack levels required when called:    5
 11111 ;; This function calls:
 11112 ;;		Nothing
 11113 ;; This function is called by:
 11114 ;;		_getMain_LoadOK
 11115 ;; This function uses a non-reentrant model
 11116 ;;
 11117                           
 11118                           
 11119                           ;psect for function _getDimmer_LoadOK
 11120  1AAC                     _getDimmer_LoadOK:	
 11121                           
 11122                           ;Dimmer_B1.c: 658: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 11123                           
 11124                           ;incstack = 0
 11125                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 11126  1AAC  3000               	movlw	0
 11127  1AAD  0021               	movlb	1	; select bank1
 11128  1AAE  18C8               	btfsc	_Dimmer^(0+128),1
 11129  1AAF  3001               	movlw	1
 11130  1AB0  0020               	movlb	0	; select bank0
 11131  1AB1  00A0               	movwf	getDimmer_LoadOK@status
 11132                           
 11133                           ;Dimmer_B1.c: 659: return status;
 11134  1AB2  0820               	movf	getDimmer_LoadOK@status,w
 11135  1AB3  0008               	return
 11136  1AB4                     __end_of_getDimmer_LoadOK:	
 11137                           
 11138                           	psect	text56
 11139  1CD7                     __ptext56:	
 11140 ;; *************** function _getMain_Lights_Count *****************
 11141 ;; Defined at:
 11142 ;;		line 402 in file "../src/Main_B1.c"
 11143 ;; Parameters:    Size  Location     Type
 11144 ;;		None
 11145 ;; Auto vars:     Size  Location     Type
 11146 ;;  status2         1    3[BANK0 ] unsigned char 
 11147 ;;  status1         1    2[BANK0 ] unsigned char 
 11148 ;;  status3         1    1[BANK0 ] unsigned char 
 11149 ;;  count           1    0[BANK0 ] unsigned char 
 11150 ;; Return value:  Size  Location     Type
 11151 ;;                  1    wreg      unsigned char 
 11152 ;; Registers used:
 11153 ;;		wreg, status,2, status,0
 11154 ;; Tracked objects:
 11155 ;;		On entry : 0/0
 11156 ;;		On exit  : 0/0
 11157 ;;		Unchanged: 0/0
 11158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;Total ram usage:        4 bytes
 11164 ;; Hardware stack levels used:    1
 11165 ;; Hardware stack levels required when called:    5
 11166 ;; This function calls:
 11167 ;;		Nothing
 11168 ;; This function is called by:
 11169 ;;		_Load_Main
 11170 ;; This function uses a non-reentrant model
 11171 ;;
 11172                           
 11173                           
 11174                           ;psect for function _getMain_Lights_Count
 11175  1CD7                     _getMain_Lights_Count:	
 11176                           
 11177                           ;Main_B1.c: 403: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 11178                           
 11179                           ;incstack = 0
 11180                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11181  1CD7  0020               	movlb	0	; select bank0
 11182  1CD8  01A2               	clrf	getMain_Lights_Count@status1
 11183  1CD9  01A3               	clrf	getMain_Lights_Count@status2
 11184  1CDA  01A1               	clrf	getMain_Lights_Count@status3
 11185  1CDB  01A0               	clrf	getMain_Lights_Count@count
 11186                           
 11187                           ;Main_B1.c: 407: status1 = DimmerLights1.Status == 1 ? 1 : 0;
 11188  1CDC  3000               	movlw	0
 11189  1CDD  0023               	movlb	3	; select bank3
 11190  1CDE  1ABE               	btfsc	_DimmerLights1^(0+384),5
 11191  1CDF  3001               	movlw	1
 11192  1CE0  0020               	movlb	0	; select bank0
 11193  1CE1  00A2               	movwf	getMain_Lights_Count@status1
 11194                           
 11195                           ;Main_B1.c: 410: status2 = DimmerLights2.Status == 1 ? 1 : 0;
 11196  1CE2  3000               	movlw	0
 11197  1CE3  0023               	movlb	3	; select bank3
 11198  1CE4  1ACD               	btfsc	_DimmerLights2^(0+384),5
 11199  1CE5  3001               	movlw	1
 11200  1CE6  0020               	movlb	0	; select bank0
 11201  1CE7  00A3               	movwf	getMain_Lights_Count@status2
 11202                           
 11203                           ;Main_B1.c: 428: return count = (status1 + status2 + status3);
 11204  1CE8  0822               	movf	getMain_Lights_Count@status1,w
 11205  1CE9  0723               	addwf	getMain_Lights_Count@status2,w
 11206  1CEA  0721               	addwf	getMain_Lights_Count@status3,w
 11207  1CEB  00A0               	movwf	getMain_Lights_Count@count
 11208  1CEC  0008               	return
 11209  1CED                     __end_of_getMain_Lights_Count:	
 11210                           
 11211                           	psect	text57
 11212  1A74                     __ptext57:	
 11213 ;; *************** function _Load_Initialization *****************
 11214 ;; Defined at:
 11215 ;;		line 9 in file "../src/OverLoad_B1.c"
 11216 ;; Parameters:    Size  Location     Type
 11217 ;;		None
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;		None
 11220 ;; Return value:  Size  Location     Type
 11221 ;;		None               void
 11222 ;; Registers used:
 11223 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;Total ram usage:        0 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; Hardware stack levels required when called:    6
 11236 ;; This function calls:
 11237 ;;		_setLoad_AH_AL_Restore
 11238 ;; This function is called by:
 11239 ;;		_main
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           
 11244                           ;psect for function _Load_Initialization
 11245  1A74                     _Load_Initialization:	
 11246                           
 11247                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11248                           
 11249                           ;incstack = 0
 11250                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11251  1A74  0022               	movlb	2	; select bank2
 11252  1A75  17A7               	bsf	_Load^(0+256),7
 11253                           
 11254                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11255  1A76  319D  256A         	fcall	_setLoad_AH_AL_Restore
 11256  1A78  0008               	return
 11257  1A79                     __end_of_Load_Initialization:	
 11258                           
 11259                           	psect	text58
 11260  1D6A                     __ptext58:	
 11261 ;; *************** function _setLoad_AH_AL_Restore *****************
 11262 ;; Defined at:
 11263 ;;		line 285 in file "../src/OverLoad_B1.c"
 11264 ;; Parameters:    Size  Location     Type
 11265 ;;		None
 11266 ;; Auto vars:     Size  Location     Type
 11267 ;;  i               1    1[BANK0 ] unsigned char 
 11268 ;; Return value:  Size  Location     Type
 11269 ;;		None               void
 11270 ;; Registers used:
 11271 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11272 ;; Tracked objects:
 11273 ;;		On entry : 0/0
 11274 ;;		On exit  : 0/0
 11275 ;;		Unchanged: 0/0
 11276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11278 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11279 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11281 ;;Total ram usage:        2 bytes
 11282 ;; Hardware stack levels used:    1
 11283 ;; Hardware stack levels required when called:    5
 11284 ;; This function calls:
 11285 ;;		Nothing
 11286 ;; This function is called by:
 11287 ;;		_Load_Initialization
 11288 ;;		_Load_Main
 11289 ;; This function uses a non-reentrant model
 11290 ;;
 11291                           
 11292                           
 11293                           ;psect for function _setLoad_AH_AL_Restore
 11294  1D6A                     _setLoad_AH_AL_Restore:	
 11295                           
 11296                           ;OverLoad_B1.c: 286: char i;
 11297                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 11298                           
 11299                           ;incstack = 0
 11300                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11301  1D6A  0020               	movlb	0	; select bank0
 11302  1D6B  01A1               	clrf	setLoad_AH_AL_Restore@i
 11303  1D6C                     L7:	
 11304  1D6C  3005               	movlw	5
 11305  1D6D  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11306  1D6E  1803               	btfsc	3,0
 11307  1D6F  0008               	return
 11308                           
 11309                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 11310  1D70  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11311  1D71  3E32               	addlw	(_Load+11)& (0+255)
 11312  1D72  0086               	movwf	6
 11313  1D73  3001               	movlw	1	; select bank2/3
 11314  1D74  0087               	movwf	7
 11315  1D75  3000               	movlw	0
 11316  1D76  3FC0               	movwi [0]fsr1
 11317  1D77  3FC1               	movwi [1]fsr1
 11318                           
 11319                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 11320  1D78  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11321  1D79  3E3C               	addlw	(_Load+21)& (0+255)
 11322  1D7A  0086               	movwf	6
 11323  1D7B  3001               	movlw	1	; select bank2/3
 11324  1D7C  0087               	movwf	7
 11325  1D7D  30FF               	movlw	255
 11326  1D7E  3FC0               	movwi [0]fsr1
 11327  1D7F  30FF               	movlw	255
 11328  1D80  3FC1               	movwi [1]fsr1
 11329  1D81  3001               	movlw	1
 11330  1D82  00A0               	movwf	??_setLoad_AH_AL_Restore
 11331  1D83  0820               	movf	??_setLoad_AH_AL_Restore,w
 11332  1D84  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11333  1D85  2D6C               	goto	L7
 11334  1D86                     __end_of_setLoad_AH_AL_Restore:	
 11335                           
 11336                           	psect	text59
 11337  1B0B                     __ptext59:	
 11338 ;; *************** function _LED_Main *****************
 11339 ;; Defined at:
 11340 ;;		line 47 in file "../src/LED_B1.c"
 11341 ;; Parameters:    Size  Location     Type
 11342 ;;		None
 11343 ;; Auto vars:     Size  Location     Type
 11344 ;;		None
 11345 ;; Return value:  Size  Location     Type
 11346 ;;		None               void
 11347 ;; Registers used:
 11348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11349 ;; Tracked objects:
 11350 ;;		On entry : 0/0
 11351 ;;		On exit  : 0/0
 11352 ;;		Unchanged: 0/0
 11353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;Total ram usage:        0 bytes
 11359 ;; Hardware stack levels used:    1
 11360 ;; Hardware stack levels required when called:    7
 11361 ;; This function calls:
 11362 ;;		_setLED_Main
 11363 ;; This function is called by:
 11364 ;;		_main
 11365 ;; This function uses a non-reentrant model
 11366 ;;
 11367                           
 11368                           
 11369                           ;psect for function _LED_Main
 11370  1B0B                     _LED_Main:	
 11371                           
 11372                           ;LED_B1.c: 49: setLED_Main(1);
 11373                           
 11374                           ;incstack = 0
 11375                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11376  1B0B  3001               	movlw	1
 11377  1B0C  3192  22D6  319B   	fcall	_setLED_Main
 11378                           
 11379                           ;LED_B1.c: 52: setLED_Main(2);
 11380  1B0F  3002               	movlw	2
 11381  1B10  3192  22D6  319B   	fcall	_setLED_Main
 11382                           
 11383                           ;LED_B1.c: 58: setLED_Main(99);
 11384  1B13  3063               	movlw	99
 11385  1B14  3192  22D6         	fcall	_setLED_Main
 11386  1B16  0008               	return
 11387  1B17                     __end_of_LED_Main:	
 11388                           
 11389                           	psect	text60
 11390  12D6                     __ptext60:	
 11391 ;; *************** function _setLED_Main *****************
 11392 ;; Defined at:
 11393 ;;		line 215 in file "../src/LED_B1.c"
 11394 ;; Parameters:    Size  Location     Type
 11395 ;;  led             1    wreg     unsigned char 
 11396 ;; Auto vars:     Size  Location     Type
 11397 ;;  led             1    4[BANK0 ] unsigned char 
 11398 ;; Return value:  Size  Location     Type
 11399 ;;		None               void
 11400 ;; Registers used:
 11401 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11402 ;; Tracked objects:
 11403 ;;		On entry : 0/0
 11404 ;;		On exit  : 0/0
 11405 ;;		Unchanged: 0/0
 11406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11409 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11410 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11411 ;;Total ram usage:        3 bytes
 11412 ;; Hardware stack levels used:    1
 11413 ;; Hardware stack levels required when called:    6
 11414 ;; This function calls:
 11415 ;;		_LedPointSelect
 11416 ;; This function is called by:
 11417 ;;		_LED_Main
 11418 ;; This function uses a non-reentrant model
 11419 ;;
 11420                           
 11421                           
 11422                           ;psect for function _setLED_Main
 11423  12D6                     _setLED_Main:	
 11424                           
 11425                           ;incstack = 0
 11426                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11427                           ;setLED_Main@led stored from wreg
 11428  12D6  0020               	movlb	0	; select bank0
 11429  12D7  00A4               	movwf	setLED_Main@led
 11430                           
 11431                           ;LED_B1.c: 216: LedPointSelect(led);
 11432  12D8  0824               	movf	setLED_Main@led,w
 11433  12D9  319E  2681  3192   	fcall	_LedPointSelect
 11434                           
 11435                           ;LED_B1.c: 217: if (LED->GO == 1) {
 11436  12DC  0021               	movlb	1	; select bank1
 11437  12DD  084F               	movf	_LED^(0+128),w
 11438  12DE  0086               	movwf	6
 11439  12DF  3001               	movlw	1	; select bank2/3
 11440  12E0  0087               	movwf	7
 11441  12E1  1C81               	btfss	1,1
 11442  12E2  0008               	return
 11443                           
 11444                           ;LED_B1.c: 218: LED->Time++;
 11445  12E3  0A4F               	incf	_LED^(0+128),w
 11446  12E4  0086               	movwf	6
 11447  12E5  3001               	movlw	1	; select bank2/3
 11448  12E6  0087               	movwf	7
 11449  12E7  3001               	movlw	1
 11450  12E8  0781               	addwf	1,f
 11451  12E9  3141               	addfsr 1,1
 11452  12EA  1803               	skipnc
 11453  12EB  0A81               	incf	1,f
 11454                           
 11455                           ;LED_B1.c: 219: if (LED->Time >= 500 / 10) {
 11456  12EC  0A4F               	incf	_LED^(0+128),w
 11457  12ED  0086               	movwf	6
 11458  12EE  3001               	movlw	1	; select bank2/3
 11459  12EF  0087               	movwf	7
 11460  12F0  3F40               	moviw [0]fsr1
 11461  12F1  0020               	movlb	0	; select bank0
 11462  12F2  00A2               	movwf	??_setLED_Main
 11463  12F3  3F41               	moviw [1]fsr1
 11464  12F4  00A3               	movwf	??_setLED_Main+1
 11465  12F5  3000               	movlw	0
 11466  12F6  0223               	subwf	??_setLED_Main+1,w
 11467  12F7  3032               	movlw	50
 11468  12F8  1903               	skipnz
 11469  12F9  0222               	subwf	??_setLED_Main,w
 11470  12FA  1C03               	skipc
 11471  12FB  0008               	return
 11472                           
 11473                           ;LED_B1.c: 220: LED->Time = 0;
 11474  12FC  0021               	movlb	1	; select bank1
 11475  12FD  0A4F               	incf	_LED^(0+128),w
 11476  12FE  0086               	movwf	6
 11477  12FF  3001               	movlw	1	; select bank2/3
 11478  1300  0087               	movwf	7
 11479  1301  3000               	movlw	0
 11480  1302  3FC0               	movwi [0]fsr1
 11481  1303  3FC1               	movwi [1]fsr1
 11482                           
 11483                           ;LED_B1.c: 222: if (led == 1) {
 11484  1304  0020               	movlb	0	; select bank0
 11485  1305  0824               	movf	setLED_Main@led,w
 11486  1306  3A01               	xorlw	1
 11487  1307  1D03               	skipz
 11488  1308  2B0C               	goto	l9830
 11489                           
 11490                           ;LED_B1.c: 223: RA3 = RA3 == 1 ? 0 : 1;
 11491  1309  3008               	movlw	8
 11492  130A  068C               	xorwf	12,f
 11493                           
 11494                           ;LED_B1.c: 224: }
 11495  130B  0008               	return
 11496  130C                     l9830:	
 11497                           
 11498                           ;LED_B1.c: 227: else if (led == 2) {
 11499  130C  0824               	movf	setLED_Main@led,w
 11500  130D  3A02               	xorlw	2
 11501  130E  1D03               	skipz
 11502  130F  2B13               	goto	l9834
 11503                           
 11504                           ;LED_B1.c: 228: RC7 = RC7 == 1 ? 0 : 1;
 11505  1310  3080               	movlw	128
 11506  1311  068E               	xorwf	14,f
 11507                           
 11508                           ;LED_B1.c: 229: }
 11509  1312  0008               	return
 11510  1313                     l9834:	
 11511                           
 11512                           ;LED_B1.c: 237: else if (led == 99) {
 11513  1313  0824               	movf	setLED_Main@led,w
 11514  1314  3A63               	xorlw	99
 11515  1315  1D03               	skipz
 11516  1316  0008               	return
 11517                           
 11518                           ;LED_B1.c: 238: RB5 = RB5 == 1 ? 0 : 1;
 11519  1317  3020               	movlw	32
 11520  1318  068D               	xorwf	13,f
 11521  1319  0008               	return
 11522  131A                     __end_of_setLED_Main:	
 11523                           
 11524                           	psect	text61
 11525  1AFF                     __ptext61:	
 11526 ;; *************** function _LED_Initialization *****************
 11527 ;; Defined at:
 11528 ;;		line 31 in file "../src/LED_B1.c"
 11529 ;; Parameters:    Size  Location     Type
 11530 ;;		None
 11531 ;; Auto vars:     Size  Location     Type
 11532 ;;		None
 11533 ;; Return value:  Size  Location     Type
 11534 ;;		None               void
 11535 ;; Registers used:
 11536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11537 ;; Tracked objects:
 11538 ;;		On entry : 0/0
 11539 ;;		On exit  : 0/0
 11540 ;;		Unchanged: 0/0
 11541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;Total ram usage:        0 bytes
 11547 ;; Hardware stack levels used:    1
 11548 ;; Hardware stack levels required when called:    8
 11549 ;; This function calls:
 11550 ;;		_setLED_Initialization
 11551 ;; This function is called by:
 11552 ;;		_main
 11553 ;; This function uses a non-reentrant model
 11554 ;;
 11555                           
 11556                           
 11557                           ;psect for function _LED_Initialization
 11558  1AFF                     _LED_Initialization:	
 11559                           
 11560                           ;LED_B1.c: 33: setLED_Initialization(1);
 11561                           
 11562                           ;incstack = 0
 11563                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11564  1AFF  3001               	movlw	1
 11565  1B00  319B  23DB  319A   	fcall	_setLED_Initialization
 11566                           
 11567                           ;LED_B1.c: 36: setLED_Initialization(2);
 11568  1B03  3002               	movlw	2
 11569  1B04  319B  23DB  319A   	fcall	_setLED_Initialization
 11570                           
 11571                           ;LED_B1.c: 42: setLED_Initialization(99);
 11572  1B07  3063               	movlw	99
 11573  1B08  319B  23DB         	fcall	_setLED_Initialization
 11574  1B0A  0008               	return
 11575  1B0B                     __end_of_LED_Initialization:	
 11576                           
 11577                           	psect	text62
 11578  1BDB                     __ptext62:	
 11579 ;; *************** function _setLED_Initialization *****************
 11580 ;; Defined at:
 11581 ;;		line 66 in file "../src/LED_B1.c"
 11582 ;; Parameters:    Size  Location     Type
 11583 ;;  led             1    wreg     unsigned char 
 11584 ;; Auto vars:     Size  Location     Type
 11585 ;;  led             1    4[BANK0 ] unsigned char 
 11586 ;; Return value:  Size  Location     Type
 11587 ;;		None               void
 11588 ;; Registers used:
 11589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11590 ;; Tracked objects:
 11591 ;;		On entry : 0/0
 11592 ;;		On exit  : 0/0
 11593 ;;		Unchanged: 0/0
 11594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11598 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11599 ;;Total ram usage:        1 bytes
 11600 ;; Hardware stack levels used:    1
 11601 ;; Hardware stack levels required when called:    7
 11602 ;; This function calls:
 11603 ;;		_LedPointSelect
 11604 ;;		_setLED
 11605 ;; This function is called by:
 11606 ;;		_LED_Initialization
 11607 ;; This function uses a non-reentrant model
 11608 ;;
 11609                           
 11610                           
 11611                           ;psect for function _setLED_Initialization
 11612  1BDB                     _setLED_Initialization:	
 11613                           
 11614                           ;incstack = 0
 11615                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11616                           ;setLED_Initialization@led stored from wreg
 11617  1BDB  0020               	movlb	0	; select bank0
 11618  1BDC  00A4               	movwf	setLED_Initialization@led
 11619                           
 11620                           ;LED_B1.c: 67: LedPointSelect(led);
 11621  1BDD  0824               	movf	setLED_Initialization@led,w
 11622  1BDE  319E  2681  319B   	fcall	_LedPointSelect
 11623                           
 11624                           ;LED_B1.c: 68: LED->Enable = 1;
 11625  1BE1  0021               	movlb	1	; select bank1
 11626  1BE2  084F               	movf	_LED^(0+128),w
 11627  1BE3  0086               	movwf	6
 11628  1BE4  3001               	movlw	1	; select bank2/3
 11629  1BE5  0087               	movwf	7
 11630  1BE6  1401               	bsf	1,0
 11631                           
 11632                           ;LED_B1.c: 69: setLED(led, 0);
 11633  1BE7  0020               	movlb	0	; select bank0
 11634  1BE8  01A2               	clrf	setLED@command
 11635  1BE9  0824               	movf	setLED_Initialization@led,w
 11636  1BEA  3188  20D7         	fcall	_setLED
 11637  1BEC  0008               	return
 11638  1BED                     __end_of_setLED_Initialization:	
 11639                           
 11640                           	psect	text63
 11641  11B5                     __ptext63:	
 11642 ;; *************** function _Flash_Memory_Main *****************
 11643 ;; Defined at:
 11644 ;;		line 901 in file "../src/MCU_B1.c"
 11645 ;; Parameters:    Size  Location     Type
 11646 ;;		None
 11647 ;; Auto vars:     Size  Location     Type
 11648 ;;		None
 11649 ;; Return value:  Size  Location     Type
 11650 ;;		None               void
 11651 ;; Registers used:
 11652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11653 ;; Tracked objects:
 11654 ;;		On entry : 0/0
 11655 ;;		On exit  : 0/0
 11656 ;;		Unchanged: 0/0
 11657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11660 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11662 ;;Total ram usage:        1 bytes
 11663 ;; Hardware stack levels used:    1
 11664 ;; Hardware stack levels required when called:    8
 11665 ;; This function calls:
 11666 ;;		_Flash_Memory_Modify
 11667 ;;		_getMain_LightsStatus
 11668 ;; This function is called by:
 11669 ;;		_main
 11670 ;; This function uses a non-reentrant model
 11671 ;;
 11672                           
 11673                           
 11674                           ;psect for function _Flash_Memory_Main
 11675  11B5                     _Flash_Memory_Main:	
 11676                           
 11677                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 11678                           
 11679                           ;incstack = 0
 11680                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11681  11B5  0024               	movlb	4	; select bank4
 11682  11B6  1C44               	btfss	(_Memory^(0+512)+36),0
 11683  11B7  0008               	return
 11684                           
 11685                           ;MCU_B1.c: 903: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11686  11B8  3190  2089  3191   	fcall	_getMain_LightsStatus
 11687  11BB  3A00               	xorlw	0
 11688  11BC  3000               	movlw	0
 11689  11BD  1903               	skipnz
 11690  11BE  3001               	movlw	1
 11691  11BF  0020               	movlb	0	; select bank0
 11692  11C0  00A9               	movwf	??_Flash_Memory_Main
 11693  11C1  0DA9               	rlf	??_Flash_Memory_Main,f
 11694  11C2  0024               	movlb	4	; select bank4
 11695  11C3  0844               	movf	(_Memory^(0+512)+36),w
 11696  11C4  0020               	movlb	0	; select bank0
 11697  11C5  0629               	xorwf	??_Flash_Memory_Main,w
 11698  11C6  39FD               	andlw	-3
 11699  11C7  0629               	xorwf	??_Flash_Memory_Main,w
 11700  11C8  0024               	movlb	4	; select bank4
 11701  11C9  00C4               	movwf	(_Memory^(0+512)+36)
 11702                           
 11703                           ;MCU_B1.c: 904: if (Memory.GO == 1) {
 11704  11CA  1CC4               	btfss	(_Memory^(0+512)+36),1
 11705  11CB  29E5               	goto	l1345
 11706                           
 11707                           ;MCU_B1.c: 905: Memory.Runtime = 1;
 11708  11CC  15C4               	bsf	(_Memory^(0+512)+36),3
 11709                           
 11710                           ;MCU_B1.c: 906: Memory.Time++;
 11711  11CD  3001               	movlw	1
 11712  11CE  07C2               	addwf	(_Memory^(0+512)+34),f
 11713  11CF  3000               	movlw	0
 11714  11D0  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11715                           
 11716                           ;MCU_B1.c: 907: if (Memory.Time == 25) {
 11717  11D1  3022               	movlw	34
 11718  11D2  3E20               	addlw	_Memory& (0+255)
 11719  11D3  0086               	movwf	6
 11720  11D4  3002               	movlw	2	; select bank4/5
 11721  11D5  0087               	movwf	7
 11722  11D6  3F40               	moviw [0]fsr1
 11723  11D7  3A19               	xorlw	25
 11724  11D8  1D03               	skipz
 11725  11D9  29DC               	goto	u11745
 11726  11DA  3F41               	moviw [1]fsr1
 11727  11DB  3A00               	xorlw	0
 11728  11DC                     u11745:	
 11729  11DC  1D03               	skipz
 11730  11DD  0008               	return
 11731                           
 11732                           ;MCU_B1.c: 908: Memory.Time = 0;
 11733  11DE  01C2               	clrf	(_Memory^(0+512)+34)
 11734  11DF  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11735                           
 11736                           ;MCU_B1.c: 909: Memory.Modify = 0;
 11737  11E0  1044               	bcf	(_Memory^(0+512)+36),0
 11738                           
 11739                           ;MCU_B1.c: 910: Memory.GO = 0;
 11740  11E1  10C4               	bcf	(_Memory^(0+512)+36),1
 11741                           
 11742                           ;MCU_B1.c: 911: Flash_Memory_Modify();
 11743  11E2  3193  23F0         	fcall	_Flash_Memory_Modify
 11744                           
 11745                           ;MCU_B1.c: 912: }
 11746                           ;MCU_B1.c: 913: } else {
 11747  11E4  0008               	return
 11748  11E5                     l1345:	
 11749                           
 11750                           ;MCU_B1.c: 914: if (Memory.Runtime == 1) {
 11751  11E5  1DC4               	btfss	(_Memory^(0+512)+36),3
 11752  11E6  0008               	return
 11753                           
 11754                           ;MCU_B1.c: 915: Memory.Runtime = 0;
 11755  11E7  11C4               	bcf	(_Memory^(0+512)+36),3
 11756                           
 11757                           ;MCU_B1.c: 916: Memory.Time = 0;
 11758  11E8  01C2               	clrf	(_Memory^(0+512)+34)
 11759  11E9  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11760  11EA  0008               	return
 11761  11EB                     __end_of_Flash_Memory_Main:	
 11762                           
 11763                           	psect	text64
 11764  13F0                     __ptext64:	
 11765 ;; *************** function _Flash_Memory_Modify *****************
 11766 ;; Defined at:
 11767 ;;		line 974 in file "../src/MCU_B1.c"
 11768 ;; Parameters:    Size  Location     Type
 11769 ;;		None
 11770 ;; Auto vars:     Size  Location     Type
 11771 ;;  i               1    5[BANK0 ] unsigned char 
 11772 ;; Return value:  Size  Location     Type
 11773 ;;		None               void
 11774 ;; Registers used:
 11775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11776 ;; Tracked objects:
 11777 ;;		On entry : 0/0
 11778 ;;		On exit  : 0/0
 11779 ;;		Unchanged: 0/0
 11780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11782 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11784 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;Total ram usage:        2 bytes
 11786 ;; Hardware stack levels used:    1
 11787 ;; Hardware stack levels required when called:    7
 11788 ;; This function calls:
 11789 ;;		_Flash_Memory_Erasing
 11790 ;;		_Flash_Memory_Read
 11791 ;;		_Flash_Memory_Write
 11792 ;;		_setMemory_Data
 11793 ;; This function is called by:
 11794 ;;		_Flash_Memory_Main
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           
 11799                           ;psect for function _Flash_Memory_Modify
 11800  13F0                     _Flash_Memory_Modify:	
 11801                           
 11802                           ;MCU_B1.c: 975: char i = 0;
 11803                           
 11804                           ;incstack = 0
 11805                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11806  13F0  0020               	movlb	0	; select bank0
 11807  13F1  01A5               	clrf	Flash_Memory_Modify@i
 11808                           
 11809                           ;MCU_B1.c: 976: for (i = 0; i < 32; i++) {
 11810  13F2  01A5               	clrf	Flash_Memory_Modify@i
 11811  13F3  3020               	movlw	32
 11812  13F4  0225               	subwf	Flash_Memory_Modify@i,w
 11813  13F5  1803               	btfsc	3,0
 11814  13F6  2C0C               	goto	l9916
 11815  13F7                     l9910:	
 11816                           
 11817                           ;MCU_B1.c: 977: Memory.Data[i] = Flash_Memory_Read(i);
 11818  13F7  0825               	movf	Flash_Memory_Modify@i,w
 11819  13F8  319D  2550  3193   	fcall	_Flash_Memory_Read
 11820  13FB  0020               	movlb	0	; select bank0
 11821  13FC  00A4               	movwf	??_Flash_Memory_Modify
 11822  13FD  0825               	movf	Flash_Memory_Modify@i,w
 11823  13FE  3E20               	addlw	_Memory& (0+255)
 11824  13FF  0086               	movwf	6
 11825  1400  3002               	movlw	2	; select bank4/5
 11826  1401  0087               	movwf	7
 11827  1402  0824               	movf	??_Flash_Memory_Modify,w
 11828  1403  0081               	movwf	1
 11829  1404  3001               	movlw	1
 11830  1405  00A4               	movwf	??_Flash_Memory_Modify
 11831  1406  0824               	movf	??_Flash_Memory_Modify,w
 11832  1407  07A5               	addwf	Flash_Memory_Modify@i,f
 11833  1408  3020               	movlw	32
 11834  1409  0225               	subwf	Flash_Memory_Modify@i,w
 11835  140A  1C03               	skipc
 11836  140B  2BF7               	goto	l9910
 11837  140C                     l9916:	
 11838                           
 11839                           ;MCU_B1.c: 978: }
 11840                           ;MCU_B1.c: 979: setMemory_Data(0, product->Data[12]);
 11841  140C  087B               	movf	_product,w
 11842  140D  0086               	movwf	6
 11843  140E  3002               	movlw	2	; select bank4/5
 11844  140F  0087               	movwf	7
 11845  1410  3002               	movlw	2	; select bank4/5
 11846  1411  3F4C               	moviw [12]fsr1
 11847  1412  00A0               	movwf	setMemory_Data@data
 11848  1413  3000               	movlw	0
 11849  1414  319A  22E7  3193   	fcall	_setMemory_Data
 11850                           
 11851                           ;MCU_B1.c: 980: setMemory_Data(1, product->Data[13]);
 11852  1417  087B               	movf	_product,w
 11853  1418  0086               	movwf	6
 11854  1419  3002               	movlw	2	; select bank4/5
 11855  141A  0087               	movwf	7
 11856  141B  3002               	movlw	2	; select bank4/5
 11857  141C  3F4D               	moviw [13]fsr1
 11858  141D  0020               	movlb	0	; select bank0
 11859  141E  00A0               	movwf	setMemory_Data@data
 11860  141F  3001               	movlw	1
 11861  1420  319A  22E7  3193   	fcall	_setMemory_Data
 11862                           
 11863                           ;MCU_B1.c: 981: setMemory_Data(2, product->Data[14]);
 11864  1423  087B               	movf	_product,w
 11865  1424  0086               	movwf	6
 11866  1425  3002               	movlw	2	; select bank4/5
 11867  1426  0087               	movwf	7
 11868  1427  3002               	movlw	2	; select bank4/5
 11869  1428  3F4E               	moviw [14]fsr1
 11870  1429  0020               	movlb	0	; select bank0
 11871  142A  00A0               	movwf	setMemory_Data@data
 11872  142B  3002               	movlw	2
 11873  142C  319A  22E7  3193   	fcall	_setMemory_Data
 11874                           
 11875                           ;MCU_B1.c: 987: if (Memory.LoopSave == 1) {
 11876  142F  0024               	movlb	4	; select bank4
 11877  1430  1D44               	btfss	(_Memory^(0+512)+36),2
 11878  1431  2C36               	goto	l1368
 11879                           
 11880                           ;MCU_B1.c: 988: Memory.LoopSave = 0;
 11881  1432  1144               	bcf	(_Memory^(0+512)+36),2
 11882                           
 11883                           ;MCU_B1.c: 989: myMain.FirstOpen = 0;
 11884  1433  0021               	movlb	1	; select bank1
 11885  1434  11A0               	bcf	_myMain^(0+128),3
 11886                           
 11887                           ;MCU_B1.c: 990: myMain.First = 0;
 11888  1435  12A0               	bcf	_myMain^(0+128),5
 11889  1436                     l1368:	
 11890                           
 11891                           ;MCU_B1.c: 992: }
 11892                           ;MCU_B1.c: 993: GIE = 0;
 11893  1436  138B               	bcf	11,7	;volatile
 11894                           
 11895                           ;MCU_B1.c: 994: Flash_Memory_Erasing();
 11896  1437  319A  22F3  3193   	fcall	_Flash_Memory_Erasing
 11897                           
 11898                           ;MCU_B1.c: 995: Flash_Memory_Write();
 11899  143A  3190  20B5         	fcall	_Flash_Memory_Write
 11900                           
 11901                           ;MCU_B1.c: 996: GIE = 1;
 11902  143C  178B               	bsf	11,7	;volatile
 11903  143D  0008               	return
 11904  143E                     __end_of_Flash_Memory_Modify:	
 11905                           
 11906                           	psect	text65
 11907  1AF3                     __ptext65:	
 11908 ;; *************** function _Flash_Memory_Erasing *****************
 11909 ;; Defined at:
 11910 ;;		line 963 in file "../src/MCU_B1.c"
 11911 ;; Parameters:    Size  Location     Type
 11912 ;;		None
 11913 ;; Auto vars:     Size  Location     Type
 11914 ;;		None
 11915 ;; Return value:  Size  Location     Type
 11916 ;;		None               void
 11917 ;; Registers used:
 11918 ;;		wreg, status,2, status,0, pclath, cstack
 11919 ;; Tracked objects:
 11920 ;;		On entry : 0/0
 11921 ;;		On exit  : 0/0
 11922 ;;		Unchanged: 0/0
 11923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;Total ram usage:        0 bytes
 11929 ;; Hardware stack levels used:    1
 11930 ;; Hardware stack levels required when called:    6
 11931 ;; This function calls:
 11932 ;;		_Flash_Memory_Unlock
 11933 ;; This function is called by:
 11934 ;;		_Flash_Memory_Modify
 11935 ;; This function uses a non-reentrant model
 11936 ;;
 11937                           
 11938                           
 11939                           ;psect for function _Flash_Memory_Erasing
 11940  1AF3                     _Flash_Memory_Erasing:	
 11941                           
 11942                           ;MCU_B1.c: 964: CFGS = 0;
 11943                           
 11944                           ;incstack = 0
 11945                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11946  1AF3  0023               	movlb	3	; select bank3
 11947  1AF4  1315               	bcf	21,6	;volatile
 11948                           
 11949                           ;MCU_B1.c: 965: PMADRH = 0x30;
 11950  1AF5  3030               	movlw	48
 11951  1AF6  0092               	movwf	18	;volatile
 11952                           
 11953                           ;MCU_B1.c: 966: PMADRL = 0x00;
 11954  1AF7  0191               	clrf	17	;volatile
 11955                           
 11956                           ;MCU_B1.c: 967: FREE = 1;
 11957  1AF8  1615               	bsf	21,4	;volatile
 11958                           
 11959                           ;MCU_B1.c: 968: WREN = 1;
 11960  1AF9  1515               	bsf	21,2	;volatile
 11961                           
 11962                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 11963  1AFA  319A  22BC         	fcall	_Flash_Memory_Unlock
 11964                           
 11965                           ;MCU_B1.c: 970: WREN = 0;
 11966  1AFC  0023               	movlb	3	; select bank3
 11967  1AFD  1115               	bcf	21,2	;volatile
 11968  1AFE  0008               	return
 11969  1AFF                     __end_of_Flash_Memory_Erasing:	
 11970                           
 11971                           	psect	text66
 11972  0F24                     __ptext66:	
 11973 ;; *************** function _Flash_Memory_Initialization *****************
 11974 ;; Defined at:
 11975 ;;		line 860 in file "../src/MCU_B1.c"
 11976 ;; Parameters:    Size  Location     Type
 11977 ;;		None
 11978 ;; Auto vars:     Size  Location     Type
 11979 ;;  i               1   62[BANK0 ] unsigned char 
 11980 ;; Return value:  Size  Location     Type
 11981 ;;		None               void
 11982 ;; Registers used:
 11983 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11984 ;; Tracked objects:
 11985 ;;		On entry : 0/0
 11986 ;;		On exit  : 0/0
 11987 ;;		Unchanged: 0/0
 11988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11992 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11993 ;;Total ram usage:        2 bytes
 11994 ;; Hardware stack levels used:    1
 11995 ;; Hardware stack levels required when called:    8
 11996 ;; This function calls:
 11997 ;;		_Flash_Memory_Read
 11998 ;;		_Flash_Memory_Write
 11999 ;;		_setMemory_Data
 12000 ;;		_setPercentValue
 12001 ;; This function is called by:
 12002 ;;		_main
 12003 ;; This function uses a non-reentrant model
 12004 ;;
 12005                           
 12006                           
 12007                           ;psect for function _Flash_Memory_Initialization
 12008  0F24                     _Flash_Memory_Initialization:	
 12009                           
 12010                           ;MCU_B1.c: 861: char i = 0;
 12011                           
 12012                           ;incstack = 0
 12013                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12014  0F24  0020               	movlb	0	; select bank0
 12015  0F25  01DE               	clrf	Flash_Memory_Initialization@i
 12016                           
 12017                           ;MCU_B1.c: 862: if (Flash_Memory_Read(31) == 0xaa) {
 12018  0F26  301F               	movlw	31
 12019  0F27  319D  2550  318F   	fcall	_Flash_Memory_Read
 12020  0F2A  3AAA               	xorlw	170
 12021  0F2B  1D03               	skipz
 12022  0F2C  2F96               	goto	l10358
 12023                           
 12024                           ;MCU_B1.c: 863: product->Data[12] = Flash_Memory_Read(0);
 12025  0F2D  3000               	movlw	0
 12026  0F2E  319D  2550  318F   	fcall	_Flash_Memory_Read
 12027  0F31  0020               	movlb	0	; select bank0
 12028  0F32  00DD               	movwf	??_Flash_Memory_Initialization
 12029  0F33  087B               	movf	_product,w
 12030  0F34  3E0C               	addlw	12
 12031  0F35  0086               	movwf	6
 12032  0F36  3002               	movlw	2	; select bank4/5
 12033  0F37  0087               	movwf	7
 12034  0F38  085D               	movf	??_Flash_Memory_Initialization,w
 12035  0F39  0081               	movwf	1
 12036                           
 12037                           ;MCU_B1.c: 864: product->Data[13] = Flash_Memory_Read(1);
 12038  0F3A  3001               	movlw	1
 12039  0F3B  319D  2550  318F   	fcall	_Flash_Memory_Read
 12040  0F3E  0020               	movlb	0	; select bank0
 12041  0F3F  00DD               	movwf	??_Flash_Memory_Initialization
 12042  0F40  087B               	movf	_product,w
 12043  0F41  3E0D               	addlw	13
 12044  0F42  0086               	movwf	6
 12045  0F43  3002               	movlw	2	; select bank4/5
 12046  0F44  0087               	movwf	7
 12047  0F45  085D               	movf	??_Flash_Memory_Initialization,w
 12048  0F46  0081               	movwf	1
 12049                           
 12050                           ;MCU_B1.c: 865: product->Data[14] = Flash_Memory_Read(2);
 12051  0F47  3002               	movlw	2
 12052  0F48  319D  2550  318F   	fcall	_Flash_Memory_Read
 12053  0F4B  0020               	movlb	0	; select bank0
 12054  0F4C  00DD               	movwf	??_Flash_Memory_Initialization
 12055  0F4D  087B               	movf	_product,w
 12056  0F4E  3E0E               	addlw	14
 12057  0F4F  0086               	movwf	6
 12058  0F50  3002               	movlw	2	; select bank4/5
 12059  0F51  0087               	movwf	7
 12060  0F52  085D               	movf	??_Flash_Memory_Initialization,w
 12061  0F53  0081               	movwf	1
 12062                           
 12063                           ;MCU_B1.c: 871: i = setPercentValue(((char)((100-60)*0.8)));
 12064  0F54  3020               	movlw	32
 12065  0F55  3193  231A  318F   	fcall	_setPercentValue
 12066  0F58  0020               	movlb	0	; select bank0
 12067  0F59  00DD               	movwf	??_Flash_Memory_Initialization
 12068  0F5A  085D               	movf	??_Flash_Memory_Initialization,w
 12069  0F5B  00DE               	movwf	Flash_Memory_Initialization@i
 12070                           
 12071                           ;MCU_B1.c: 872: product->Data[21] = i;
 12072  0F5C  085E               	movf	Flash_Memory_Initialization@i,w
 12073  0F5D  00DD               	movwf	??_Flash_Memory_Initialization
 12074  0F5E  087B               	movf	_product,w
 12075  0F5F  3E15               	addlw	21
 12076  0F60  0086               	movwf	6
 12077  0F61  3002               	movlw	2	; select bank4/5
 12078  0F62  0087               	movwf	7
 12079  0F63  085D               	movf	??_Flash_Memory_Initialization,w
 12080  0F64  0081               	movwf	1
 12081                           
 12082                           ;MCU_B1.c: 873: product->Data[22] = i;
 12083  0F65  085E               	movf	Flash_Memory_Initialization@i,w
 12084  0F66  00DD               	movwf	??_Flash_Memory_Initialization
 12085  0F67  087B               	movf	_product,w
 12086  0F68  3E16               	addlw	22
 12087  0F69  0086               	movwf	6
 12088  0F6A  3002               	movlw	2	; select bank4/5
 12089  0F6B  0087               	movwf	7
 12090  0F6C  085D               	movf	??_Flash_Memory_Initialization,w
 12091  0F6D  0081               	movwf	1
 12092                           
 12093                           ;MCU_B1.c: 874: product->Data[23] = i;
 12094  0F6E  085E               	movf	Flash_Memory_Initialization@i,w
 12095  0F6F  00DD               	movwf	??_Flash_Memory_Initialization
 12096  0F70  087B               	movf	_product,w
 12097  0F71  3E17               	addlw	23
 12098  0F72  0086               	movwf	6
 12099  0F73  3002               	movlw	2	; select bank4/5
 12100  0F74  0087               	movwf	7
 12101  0F75  085D               	movf	??_Flash_Memory_Initialization,w
 12102  0F76  0081               	movwf	1
 12103                           
 12104                           ;MCU_B1.c: 876: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12105  0F77  087B               	movf	_product,w
 12106  0F78  3E0C               	addlw	12
 12107  0F79  0086               	movwf	6
 12108  0F7A  3002               	movlw	2	; select bank4/5
 12109  0F7B  0087               	movwf	7
 12110  0F7C  0801               	movf	1,w
 12111  0F7D  3AFF               	xorlw	255
 12112  0F7E  1D03               	skipz
 12113  0F7F  0008               	return
 12114  0F80  087B               	movf	_product,w
 12115  0F81  3E0D               	addlw	13
 12116  0F82  0086               	movwf	6
 12117  0F83  3002               	movlw	2	; select bank4/5
 12118  0F84  0087               	movwf	7
 12119  0F85  0801               	movf	1,w
 12120  0F86  3AFF               	xorlw	255
 12121  0F87  1D03               	skipz
 12122  0F88  0008               	return
 12123  0F89  087B               	movf	_product,w
 12124  0F8A  3E0E               	addlw	14
 12125  0F8B  0086               	movwf	6
 12126  0F8C  3002               	movlw	2	; select bank4/5
 12127  0F8D  0087               	movwf	7
 12128  0F8E  0801               	movf	1,w
 12129  0F8F  3AFF               	xorlw	255
 12130  0F90  1D03               	skipz
 12131  0F91  0008               	return
 12132                           
 12133                           ;MCU_B1.c: 877: myMain.FirstOpen = 1;
 12134  0F92  0021               	movlb	1	; select bank1
 12135  0F93  15A0               	bsf	_myMain^(0+128),3
 12136                           
 12137                           ;MCU_B1.c: 878: myMain.First = 1;
 12138  0F94  16A0               	bsf	_myMain^(0+128),5
 12139                           
 12140                           ;MCU_B1.c: 879: }
 12141                           ;MCU_B1.c: 880: } else {
 12142  0F95  0008               	return
 12143  0F96                     l10358:	
 12144                           
 12145                           ;MCU_B1.c: 881: i = setPercentValue(((char)((100-60)*0.8)));
 12146  0F96  3020               	movlw	32
 12147  0F97  3193  231A  318F   	fcall	_setPercentValue
 12148  0F9A  0020               	movlb	0	; select bank0
 12149  0F9B  00DD               	movwf	??_Flash_Memory_Initialization
 12150  0F9C  085D               	movf	??_Flash_Memory_Initialization,w
 12151  0F9D  00DE               	movwf	Flash_Memory_Initialization@i
 12152                           
 12153                           ;MCU_B1.c: 882: setMemory_Data(0, 0xff);
 12154  0F9E  30FF               	movlw	255
 12155  0F9F  00DD               	movwf	??_Flash_Memory_Initialization
 12156  0FA0  085D               	movf	??_Flash_Memory_Initialization,w
 12157  0FA1  00A0               	movwf	setMemory_Data@data
 12158  0FA2  3000               	movlw	0
 12159  0FA3  319A  22E7  318F   	fcall	_setMemory_Data
 12160                           
 12161                           ;MCU_B1.c: 883: setMemory_Data(1, 0xff);
 12162  0FA6  30FF               	movlw	255
 12163  0FA7  0020               	movlb	0	; select bank0
 12164  0FA8  00DD               	movwf	??_Flash_Memory_Initialization
 12165  0FA9  085D               	movf	??_Flash_Memory_Initialization,w
 12166  0FAA  00A0               	movwf	setMemory_Data@data
 12167  0FAB  3001               	movlw	1
 12168  0FAC  319A  22E7  318F   	fcall	_setMemory_Data
 12169                           
 12170                           ;MCU_B1.c: 884: setMemory_Data(2, 0xff);
 12171  0FAF  30FF               	movlw	255
 12172  0FB0  0020               	movlb	0	; select bank0
 12173  0FB1  00DD               	movwf	??_Flash_Memory_Initialization
 12174  0FB2  085D               	movf	??_Flash_Memory_Initialization,w
 12175  0FB3  00A0               	movwf	setMemory_Data@data
 12176  0FB4  3002               	movlw	2
 12177  0FB5  319A  22E7  318F   	fcall	_setMemory_Data
 12178                           
 12179                           ;MCU_B1.c: 885: setMemory_Data(3, 0xff);
 12180  0FB8  30FF               	movlw	255
 12181  0FB9  0020               	movlb	0	; select bank0
 12182  0FBA  00DD               	movwf	??_Flash_Memory_Initialization
 12183  0FBB  085D               	movf	??_Flash_Memory_Initialization,w
 12184  0FBC  00A0               	movwf	setMemory_Data@data
 12185  0FBD  3003               	movlw	3
 12186  0FBE  319A  22E7  318F   	fcall	_setMemory_Data
 12187                           
 12188                           ;MCU_B1.c: 886: setMemory_Data(4, 0xff);
 12189  0FC1  30FF               	movlw	255
 12190  0FC2  0020               	movlb	0	; select bank0
 12191  0FC3  00DD               	movwf	??_Flash_Memory_Initialization
 12192  0FC4  085D               	movf	??_Flash_Memory_Initialization,w
 12193  0FC5  00A0               	movwf	setMemory_Data@data
 12194  0FC6  3004               	movlw	4
 12195  0FC7  319A  22E7  318F   	fcall	_setMemory_Data
 12196                           
 12197                           ;MCU_B1.c: 887: setMemory_Data(5, 0xff);
 12198  0FCA  30FF               	movlw	255
 12199  0FCB  0020               	movlb	0	; select bank0
 12200  0FCC  00DD               	movwf	??_Flash_Memory_Initialization
 12201  0FCD  085D               	movf	??_Flash_Memory_Initialization,w
 12202  0FCE  00A0               	movwf	setMemory_Data@data
 12203  0FCF  3005               	movlw	5
 12204  0FD0  319A  22E7  318F   	fcall	_setMemory_Data
 12205                           
 12206                           ;MCU_B1.c: 888: setMemory_Data(31, 0xaa);
 12207  0FD3  30AA               	movlw	170
 12208  0FD4  0020               	movlb	0	; select bank0
 12209  0FD5  00DD               	movwf	??_Flash_Memory_Initialization
 12210  0FD6  085D               	movf	??_Flash_Memory_Initialization,w
 12211  0FD7  00A0               	movwf	setMemory_Data@data
 12212  0FD8  301F               	movlw	31
 12213  0FD9  319A  22E7  318F   	fcall	_setMemory_Data
 12214                           
 12215                           ;MCU_B1.c: 889: product->Data[21] = i;
 12216  0FDC  0020               	movlb	0	; select bank0
 12217  0FDD  085E               	movf	Flash_Memory_Initialization@i,w
 12218  0FDE  00DD               	movwf	??_Flash_Memory_Initialization
 12219  0FDF  087B               	movf	_product,w
 12220  0FE0  3E15               	addlw	21
 12221  0FE1  0086               	movwf	6
 12222  0FE2  3002               	movlw	2	; select bank4/5
 12223  0FE3  0087               	movwf	7
 12224  0FE4  085D               	movf	??_Flash_Memory_Initialization,w
 12225  0FE5  0081               	movwf	1
 12226                           
 12227                           ;MCU_B1.c: 890: product->Data[22] = i;
 12228  0FE6  085E               	movf	Flash_Memory_Initialization@i,w
 12229  0FE7  00DD               	movwf	??_Flash_Memory_Initialization
 12230  0FE8  087B               	movf	_product,w
 12231  0FE9  3E16               	addlw	22
 12232  0FEA  0086               	movwf	6
 12233  0FEB  3002               	movlw	2	; select bank4/5
 12234  0FEC  0087               	movwf	7
 12235  0FED  085D               	movf	??_Flash_Memory_Initialization,w
 12236  0FEE  0081               	movwf	1
 12237                           
 12238                           ;MCU_B1.c: 891: product->Data[23] = i;
 12239  0FEF  085E               	movf	Flash_Memory_Initialization@i,w
 12240  0FF0  00DD               	movwf	??_Flash_Memory_Initialization
 12241  0FF1  087B               	movf	_product,w
 12242  0FF2  3E17               	addlw	23
 12243  0FF3  0086               	movwf	6
 12244  0FF4  3002               	movlw	2	; select bank4/5
 12245  0FF5  0087               	movwf	7
 12246  0FF6  085D               	movf	??_Flash_Memory_Initialization,w
 12247  0FF7  0081               	movwf	1
 12248                           
 12249                           ;MCU_B1.c: 892: GIE = 0;
 12250  0FF8  138B               	bcf	11,7	;volatile
 12251                           
 12252                           ;MCU_B1.c: 893: Flash_Memory_Write();
 12253  0FF9  3190  20B5         	fcall	_Flash_Memory_Write
 12254                           
 12255                           ;MCU_B1.c: 894: GIE = 1;
 12256  0FFB  178B               	bsf	11,7	;volatile
 12257                           
 12258                           ;MCU_B1.c: 895: myMain.FirstOpen = 1;
 12259  0FFC  0021               	movlb	1	; select bank1
 12260  0FFD  15A0               	bsf	_myMain^(0+128),3
 12261                           
 12262                           ;MCU_B1.c: 896: myMain.First = 1;
 12263  0FFE  16A0               	bsf	_myMain^(0+128),5
 12264  0FFF  0008               	return
 12265  1000                     __end_of_Flash_Memory_Initialization:	
 12266                           
 12267                           	psect	text67
 12268  1AE7                     __ptext67:	
 12269 ;; *************** function _setMemory_Data *****************
 12270 ;; Defined at:
 12271 ;;		line 1011 in file "../src/MCU_B1.c"
 12272 ;; Parameters:    Size  Location     Type
 12273 ;;  address         1    wreg     unsigned char 
 12274 ;;  data            1    0[BANK0 ] unsigned char 
 12275 ;; Auto vars:     Size  Location     Type
 12276 ;;  address         1    2[BANK0 ] unsigned char 
 12277 ;; Return value:  Size  Location     Type
 12278 ;;		None               void
 12279 ;; Registers used:
 12280 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12281 ;; Tracked objects:
 12282 ;;		On entry : 0/0
 12283 ;;		On exit  : 0/0
 12284 ;;		Unchanged: 0/0
 12285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12286 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12289 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;Total ram usage:        3 bytes
 12291 ;; Hardware stack levels used:    1
 12292 ;; Hardware stack levels required when called:    5
 12293 ;; This function calls:
 12294 ;;		Nothing
 12295 ;; This function is called by:
 12296 ;;		_Flash_Memory_Initialization
 12297 ;;		_Flash_Memory_Modify
 12298 ;; This function uses a non-reentrant model
 12299 ;;
 12300                           
 12301                           
 12302                           ;psect for function _setMemory_Data
 12303  1AE7                     _setMemory_Data:	
 12304                           
 12305                           ;incstack = 0
 12306                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12307                           ;setMemory_Data@address stored from wreg
 12308  1AE7  0020               	movlb	0	; select bank0
 12309  1AE8  00A2               	movwf	setMemory_Data@address
 12310                           
 12311                           ;MCU_B1.c: 1012: Memory.Data[address] = data;
 12312  1AE9  0820               	movf	setMemory_Data@data,w
 12313  1AEA  00A1               	movwf	??_setMemory_Data
 12314  1AEB  0822               	movf	setMemory_Data@address,w
 12315  1AEC  3E20               	addlw	_Memory& (0+255)
 12316  1AED  0086               	movwf	6
 12317  1AEE  3002               	movlw	2	; select bank4/5
 12318  1AEF  0087               	movwf	7
 12319  1AF0  0821               	movf	??_setMemory_Data,w
 12320  1AF1  0081               	movwf	1
 12321  1AF2  0008               	return
 12322  1AF3                     __end_of_setMemory_Data:	
 12323                           
 12324                           	psect	text68
 12325  10B5                     __ptext68:	
 12326 ;; *************** function _Flash_Memory_Write *****************
 12327 ;; Defined at:
 12328 ;;		line 944 in file "../src/MCU_B1.c"
 12329 ;; Parameters:    Size  Location     Type
 12330 ;;		None
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;  i               1    1[BANK0 ] unsigned char 
 12333 ;; Return value:  Size  Location     Type
 12334 ;;		None               void
 12335 ;; Registers used:
 12336 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12337 ;; Tracked objects:
 12338 ;;		On entry : 0/0
 12339 ;;		On exit  : 0/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;Total ram usage:        2 bytes
 12347 ;; Hardware stack levels used:    1
 12348 ;; Hardware stack levels required when called:    6
 12349 ;; This function calls:
 12350 ;;		_Flash_Memory_Unlock
 12351 ;; This function is called by:
 12352 ;;		_Flash_Memory_Initialization
 12353 ;;		_Flash_Memory_Modify
 12354 ;; This function uses a non-reentrant model
 12355 ;;
 12356                           
 12357                           
 12358                           ;psect for function _Flash_Memory_Write
 12359  10B5                     _Flash_Memory_Write:	
 12360                           
 12361                           ;MCU_B1.c: 945: char i = 0;
 12362                           
 12363                           ;incstack = 0
 12364                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12365  10B5  0020               	movlb	0	; select bank0
 12366  10B6  01A1               	clrf	Flash_Memory_Write@i
 12367                           
 12368                           ;MCU_B1.c: 946: CFGS = 0;
 12369  10B7  0023               	movlb	3	; select bank3
 12370  10B8  1315               	bcf	21,6	;volatile
 12371                           
 12372                           ;MCU_B1.c: 947: PMADRH = 0x30;
 12373  10B9  3030               	movlw	48
 12374  10BA  0092               	movwf	18	;volatile
 12375                           
 12376                           ;MCU_B1.c: 948: PMDATH = 0;
 12377  10BB  0194               	clrf	20	;volatile
 12378                           
 12379                           ;MCU_B1.c: 949: FREE = 0;
 12380  10BC  1215               	bcf	21,4	;volatile
 12381                           
 12382                           ;MCU_B1.c: 950: LWLO = 1;
 12383  10BD  1695               	bsf	21,5	;volatile
 12384                           
 12385                           ;MCU_B1.c: 951: WREN = 1;
 12386  10BE  1515               	bsf	21,2	;volatile
 12387                           
 12388                           ;MCU_B1.c: 952: for (i = 0; i < 32; i++) {
 12389  10BF  0020               	movlb	0	; select bank0
 12390  10C0  01A1               	clrf	Flash_Memory_Write@i
 12391  10C1  3020               	movlw	32
 12392  10C2  0221               	subwf	Flash_Memory_Write@i,w
 12393  10C3  1803               	btfsc	3,0
 12394  10C4  28DD               	goto	l1359
 12395  10C5                     l9566:	
 12396                           
 12397                           ;MCU_B1.c: 953: PMADRL = i;
 12398  10C5  0821               	movf	Flash_Memory_Write@i,w
 12399  10C6  0023               	movlb	3	; select bank3
 12400  10C7  0091               	movwf	17	;volatile
 12401                           
 12402                           ;MCU_B1.c: 954: PMDATL = Memory.Data[i];
 12403  10C8  0020               	movlb	0	; select bank0
 12404  10C9  0821               	movf	Flash_Memory_Write@i,w
 12405  10CA  3E20               	addlw	_Memory& (0+255)
 12406  10CB  0086               	movwf	6
 12407  10CC  3002               	movlw	2	; select bank4/5
 12408  10CD  0087               	movwf	7
 12409  10CE  0801               	movf	1,w
 12410  10CF  0023               	movlb	3	; select bank3
 12411  10D0  0093               	movwf	19	;volatile
 12412                           
 12413                           ;MCU_B1.c: 955: Flash_Memory_Unlock();
 12414  10D1  319A  22BC  3190   	fcall	_Flash_Memory_Unlock
 12415  10D4  3001               	movlw	1
 12416  10D5  0020               	movlb	0	; select bank0
 12417  10D6  00A0               	movwf	??_Flash_Memory_Write
 12418  10D7  0820               	movf	??_Flash_Memory_Write,w
 12419  10D8  07A1               	addwf	Flash_Memory_Write@i,f
 12420  10D9  3020               	movlw	32
 12421  10DA  0221               	subwf	Flash_Memory_Write@i,w
 12422  10DB  1C03               	skipc
 12423  10DC  28C5               	goto	l9566
 12424  10DD                     l1359:	
 12425                           
 12426                           ;MCU_B1.c: 956: }
 12427                           ;MCU_B1.c: 957: LWLO = 0;
 12428  10DD  0023               	movlb	3	; select bank3
 12429  10DE  1295               	bcf	21,5	;volatile
 12430                           
 12431                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 12432  10DF  319A  22BC         	fcall	_Flash_Memory_Unlock
 12433                           
 12434                           ;MCU_B1.c: 959: WREN = 0;
 12435  10E1  0023               	movlb	3	; select bank3
 12436  10E2  1115               	bcf	21,2	;volatile
 12437  10E3  0008               	return
 12438  10E4                     __end_of_Flash_Memory_Write:	
 12439                           
 12440                           	psect	text69
 12441  1ABC                     __ptext69:	
 12442 ;; *************** function _Flash_Memory_Unlock *****************
 12443 ;; Defined at:
 12444 ;;		line 923 in file "../src/MCU_B1.c"
 12445 ;; Parameters:    Size  Location     Type
 12446 ;;		None
 12447 ;; Auto vars:     Size  Location     Type
 12448 ;;		None
 12449 ;; Return value:  Size  Location     Type
 12450 ;;		None               void
 12451 ;; Registers used:
 12452 ;;		wreg
 12453 ;; Tracked objects:
 12454 ;;		On entry : 0/0
 12455 ;;		On exit  : 0/0
 12456 ;;		Unchanged: 0/0
 12457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;Total ram usage:        0 bytes
 12463 ;; Hardware stack levels used:    1
 12464 ;; Hardware stack levels required when called:    5
 12465 ;; This function calls:
 12466 ;;		Nothing
 12467 ;; This function is called by:
 12468 ;;		_Flash_Memory_Write
 12469 ;;		_Flash_Memory_Erasing
 12470 ;; This function uses a non-reentrant model
 12471 ;;
 12472                           
 12473                           
 12474                           ;psect for function _Flash_Memory_Unlock
 12475  1ABC                     _Flash_Memory_Unlock:	
 12476                           
 12477                           ;MCU_B1.c: 924: PMCON2 = 0x55;
 12478                           
 12479                           ;incstack = 0
 12480                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12481  1ABC  3055               	movlw	85
 12482  1ABD  0023               	movlb	3	; select bank3
 12483  1ABE  0096               	movwf	22	;volatile
 12484                           
 12485                           ;MCU_B1.c: 925: PMCON2 = 0xaa;
 12486  1ABF  30AA               	movlw	170
 12487  1AC0  0096               	movwf	22	;volatile
 12488                           
 12489                           ;MCU_B1.c: 926: WR = 1;
 12490  1AC1  1495               	bsf	21,1	;volatile
 12491                           
 12492                           ;MCU_B1.c: 927: __nop();
 12493  1AC2  0000               	nop
 12494                           
 12495                           ;MCU_B1.c: 928: __nop();
 12496  1AC3  0000               	nop
 12497  1AC4  0008               	return
 12498  1AC5                     __end_of_Flash_Memory_Unlock:	
 12499                           
 12500                           	psect	text70
 12501  1D50                     __ptext70:	
 12502 ;; *************** function _Flash_Memory_Read *****************
 12503 ;; Defined at:
 12504 ;;		line 932 in file "../src/MCU_B1.c"
 12505 ;; Parameters:    Size  Location     Type
 12506 ;;  address         1    wreg     unsigned char 
 12507 ;; Auto vars:     Size  Location     Type
 12508 ;;  address         1    2[BANK0 ] unsigned char 
 12509 ;;  ret             1    3[BANK0 ] unsigned char 
 12510 ;;  i               1    1[BANK0 ] unsigned char 
 12511 ;; Return value:  Size  Location     Type
 12512 ;;                  1    wreg      unsigned char 
 12513 ;; Registers used:
 12514 ;;		wreg, status,2
 12515 ;; Tracked objects:
 12516 ;;		On entry : 0/0
 12517 ;;		On exit  : 0/0
 12518 ;;		Unchanged: 0/0
 12519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12521 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12523 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12524 ;;Total ram usage:        4 bytes
 12525 ;; Hardware stack levels used:    1
 12526 ;; Hardware stack levels required when called:    5
 12527 ;; This function calls:
 12528 ;;		Nothing
 12529 ;; This function is called by:
 12530 ;;		_Flash_Memory_Initialization
 12531 ;;		_Flash_Memory_Modify
 12532 ;; This function uses a non-reentrant model
 12533 ;;
 12534                           
 12535                           
 12536                           ;psect for function _Flash_Memory_Read
 12537  1D50                     _Flash_Memory_Read:	
 12538                           
 12539                           ;incstack = 0
 12540                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12541                           ;Flash_Memory_Read@address stored from wreg
 12542  1D50  0020               	movlb	0	; select bank0
 12543  1D51  00A2               	movwf	Flash_Memory_Read@address
 12544                           
 12545                           ;MCU_B1.c: 933: char i = 0, ret = 0;
 12546  1D52  01A1               	clrf	Flash_Memory_Read@i
 12547  1D53  01A3               	clrf	Flash_Memory_Read@ret
 12548                           
 12549                           ;MCU_B1.c: 934: PMADRH = 0x30;
 12550  1D54  3030               	movlw	48
 12551  1D55  0023               	movlb	3	; select bank3
 12552  1D56  0092               	movwf	18	;volatile
 12553                           
 12554                           ;MCU_B1.c: 935: PMADRL = address;
 12555  1D57  0020               	movlb	0	; select bank0
 12556  1D58  0822               	movf	Flash_Memory_Read@address,w
 12557  1D59  0023               	movlb	3	; select bank3
 12558  1D5A  0091               	movwf	17	;volatile
 12559                           
 12560                           ;MCU_B1.c: 936: CFGS = 0;
 12561  1D5B  1315               	bcf	21,6	;volatile
 12562                           
 12563                           ;MCU_B1.c: 937: RD = 1;
 12564  1D5C  1415               	bsf	21,0	;volatile
 12565                           
 12566                           ;MCU_B1.c: 938: i = PMDATH;
 12567  1D5D  0814               	movf	20,w	;volatile
 12568  1D5E  0020               	movlb	0	; select bank0
 12569  1D5F  00A0               	movwf	??_Flash_Memory_Read
 12570  1D60  0820               	movf	??_Flash_Memory_Read,w
 12571  1D61  00A1               	movwf	Flash_Memory_Read@i
 12572                           
 12573                           ;MCU_B1.c: 939: ret = PMDATL;
 12574  1D62  0023               	movlb	3	; select bank3
 12575  1D63  0813               	movf	19,w	;volatile
 12576  1D64  0020               	movlb	0	; select bank0
 12577  1D65  00A0               	movwf	??_Flash_Memory_Read
 12578  1D66  0820               	movf	??_Flash_Memory_Read,w
 12579  1D67  00A3               	movwf	Flash_Memory_Read@ret
 12580                           
 12581                           ;MCU_B1.c: 940: return ret;
 12582  1D68  0823               	movf	Flash_Memory_Read@ret,w
 12583  1D69  0008               	return
 12584  1D6A                     __end_of_Flash_Memory_Read:	
 12585                           
 12586                           	psect	text71
 12587  1117                     __ptext71:	
 12588 ;; *************** function _DimmerLights_Main *****************
 12589 ;; Defined at:
 12590 ;;		line 415 in file "../src/Dimmer_B1.c"
 12591 ;; Parameters:    Size  Location     Type
 12592 ;;		None
 12593 ;; Auto vars:     Size  Location     Type
 12594 ;;		None
 12595 ;; Return value:  Size  Location     Type
 12596 ;;		None               void
 12597 ;; Registers used:
 12598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12599 ;; Tracked objects:
 12600 ;;		On entry : 0/0
 12601 ;;		On exit  : 0/0
 12602 ;;		Unchanged: 0/0
 12603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12608 ;;Total ram usage:        4 bytes
 12609 ;; Hardware stack levels used:    1
 12610 ;; Hardware stack levels required when called:   11
 12611 ;; This function calls:
 12612 ;;		_getLoad_OK
 12613 ;;		_getMain_All_Error_Status
 12614 ;;		_getMain_LightsStatus
 12615 ;;		_setDimmerLights_Main
 12616 ;; This function is called by:
 12617 ;;		_main
 12618 ;; This function uses a non-reentrant model
 12619 ;;
 12620                           
 12621                           
 12622                           ;psect for function _DimmerLights_Main
 12623  1117                     _DimmerLights_Main:	
 12624                           
 12625                           ;Dimmer_B1.c: 417: if (getMain_All_Error_Status(0) == 0) {
 12626                           
 12627                           ;incstack = 0
 12628                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12629  1117  3000               	movlw	0
 12630  1118  3190  20E4  3191   	fcall	_getMain_All_Error_Status
 12631  111B  3800               	iorlw	0
 12632  111C  1D03               	skipz
 12633  111D  2941               	goto	l801
 12634                           
 12635                           ;Dimmer_B1.c: 418: if (Dimmer.LoadOK == 1) {
 12636  111E  0021               	movlb	1	; select bank1
 12637  111F  1CC8               	btfss	_Dimmer^(0+128),1
 12638  1120  2943               	goto	l10328
 12639                           
 12640                           ;Dimmer_B1.c: 419: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12641  1121  319A  22A4  3191   	fcall	_getLoad_OK
 12642  1124  3A01               	xorlw	1
 12643  1125  1903               	skipnz
 12644  1126  2938               	goto	l10324
 12645  1127  3190  2089  3191   	fcall	_getMain_LightsStatus
 12646  112A  3A00               	xorlw	0
 12647  112B  1903               	skipnz
 12648  112C  2938               	goto	l10324
 12649  112D  0021               	movlb	1	; select bank1
 12650  112E  0C48               	rrf	_Dimmer^(0+128),w
 12651  112F  3901               	andlw	1
 12652  1130  0020               	movlb	0	; select bank0
 12653  1131  00E6               	movwf	??_DimmerLights_Main
 12654  1132  01E7               	clrf	??_DimmerLights_Main+1
 12655  1133  0866               	movf	??_DimmerLights_Main,w
 12656  1134  00E8               	movwf	_DimmerLights_Main$2501
 12657  1135  0867               	movf	??_DimmerLights_Main+1,w
 12658  1136  00E9               	movwf	_DimmerLights_Main$2501+1
 12659  1137  293B               	goto	l10326
 12660  1138                     l10324:	
 12661  1138  0020               	movlb	0	; select bank0
 12662  1139  01E8               	clrf	_DimmerLights_Main$2501
 12663  113A  01E9               	clrf	_DimmerLights_Main$2501+1
 12664  113B                     l10326:	
 12665  113B  0868               	movf	_DimmerLights_Main$2501,w
 12666  113C  0021               	movlb	1	; select bank1
 12667  113D  10C8               	bcf	_Dimmer^(0+128),1
 12668  113E  1D03               	skipz
 12669  113F  14C8               	bsf	_Dimmer^(0+128),1
 12670                           
 12671                           ;Dimmer_B1.c: 420: }
 12672                           ;Dimmer_B1.c: 421: } else {
 12673  1140  2943               	goto	l10328
 12674  1141                     l801:	
 12675                           
 12676                           ;Dimmer_B1.c: 422: Dimmer.LoadOK = 0;
 12677  1141  0021               	movlb	1	; select bank1
 12678  1142  10C8               	bcf	_Dimmer^(0+128),1
 12679  1143                     l10328:	
 12680                           
 12681                           ;Dimmer_B1.c: 423: }
 12682                           ;Dimmer_B1.c: 427: setDimmerLights_Main(1);
 12683  1143  3001               	movlw	1
 12684  1144  3195  2583  3191   	fcall	_setDimmerLights_Main
 12685                           
 12686                           ;Dimmer_B1.c: 431: setDimmerLights_Main(2);
 12687  1147  3002               	movlw	2
 12688  1148  3195  2583         	fcall	_setDimmerLights_Main
 12689  114A  0008               	return
 12690  114B                     __end_of_DimmerLights_Main:	
 12691                           
 12692                           	psect	text72
 12693  1583                     __ptext72:	
 12694 ;; *************** function _setDimmerLights_Main *****************
 12695 ;; Defined at:
 12696 ;;		line 441 in file "../src/Dimmer_B1.c"
 12697 ;; Parameters:    Size  Location     Type
 12698 ;;  lights          1    wreg     unsigned char 
 12699 ;; Auto vars:     Size  Location     Type
 12700 ;;  lights          1   69[BANK0 ] unsigned char 
 12701 ;; Return value:  Size  Location     Type
 12702 ;;		None               void
 12703 ;; Registers used:
 12704 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12705 ;; Tracked objects:
 12706 ;;		On entry : 0/0
 12707 ;;		On exit  : 0/0
 12708 ;;		Unchanged: 0/0
 12709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12711 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12714 ;;Total ram usage:        1 bytes
 12715 ;; Hardware stack levels used:    1
 12716 ;; Hardware stack levels required when called:   10
 12717 ;; This function calls:
 12718 ;;		_DimmerLightsPointSelect
 12719 ;;		_setBuz
 12720 ;;		_setDimmerLights
 12721 ;;		_setDimmerLights_Adj
 12722 ;; This function is called by:
 12723 ;;		_DimmerLights_Main
 12724 ;; This function uses a non-reentrant model
 12725 ;;
 12726                           
 12727                           
 12728                           ;psect for function _setDimmerLights_Main
 12729  1583                     _setDimmerLights_Main:	
 12730                           
 12731                           ;incstack = 0
 12732                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12733                           ;setDimmerLights_Main@lights stored from wreg
 12734  1583  0020               	movlb	0	; select bank0
 12735  1584  00E5               	movwf	setDimmerLights_Main@lights
 12736                           
 12737                           ;Dimmer_B1.c: 442: DimmerLightsPointSelect(lights);
 12738  1585  0865               	movf	setDimmerLights_Main@lights,w
 12739  1586  319C  2411  3195   	fcall	_DimmerLightsPointSelect
 12740                           
 12741                           ;Dimmer_B1.c: 443: if (DimmerLights->Trigger == 1) {
 12742  1589  0877               	movf	_DimmerLights,w
 12743  158A  3E08               	addlw	8
 12744  158B  0086               	movwf	6
 12745  158C  3001               	movlw	1	; select bank2/3
 12746  158D  0087               	movwf	7
 12747  158E  1D01               	btfss	1,2
 12748  158F  2DAD               	goto	l9798
 12749                           
 12750                           ;Dimmer_B1.c: 445: if (Dimmer.LoadOK == 0) {
 12751  1590  0021               	movlb	1	; select bank1
 12752  1591  18C8               	btfsc	_Dimmer^(0+128),1
 12753  1592  0008               	return
 12754                           
 12755                           ;Dimmer_B1.c: 446: DimmerLights->Trigger = 0;
 12756  1593  0877               	movf	_DimmerLights,w
 12757  1594  3E08               	addlw	8
 12758  1595  0086               	movwf	6
 12759  1596  3001               	movlw	1	; select bank2/3
 12760  1597  0087               	movwf	7
 12761  1598  1101               	bcf	1,2
 12762                           
 12763                           ;Dimmer_B1.c: 448: if (DimmerLights->Switch == 1) {
 12764  1599  0877               	movf	_DimmerLights,w
 12765  159A  3E08               	addlw	8
 12766  159B  0086               	movwf	6
 12767  159C  3001               	movlw	1	; select bank2/3
 12768  159D  0087               	movwf	7
 12769  159E  1C81               	btfss	1,1
 12770  159F  2DA7               	goto	l9796
 12771                           
 12772                           ;Dimmer_B1.c: 449: setDimmerLights(lights, 1);
 12773  15A0  0020               	movlb	0	; select bank0
 12774  15A1  01A7               	clrf	setDimmerLights@status
 12775  15A2  0AA7               	incf	setDimmerLights@status,f
 12776  15A3  0865               	movf	setDimmerLights_Main@lights,w
 12777  15A4  318B  23C1         	fcall	_setDimmerLights
 12778                           
 12779                           ;Dimmer_B1.c: 450: } else {
 12780  15A6  0008               	return
 12781  15A7                     l9796:	
 12782                           
 12783                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 0);
 12784  15A7  0020               	movlb	0	; select bank0
 12785  15A8  01A7               	clrf	setDimmerLights@status
 12786  15A9  0865               	movf	setDimmerLights_Main@lights,w
 12787  15AA  318B  23C1         	fcall	_setDimmerLights
 12788                           
 12789                           ;Dimmer_B1.c: 452: }
 12790                           ;Dimmer_B1.c: 453: }
 12791                           ;Dimmer_B1.c: 454: } else {
 12792  15AC  0008               	return
 12793  15AD                     l9798:	
 12794                           
 12795                           ;Dimmer_B1.c: 455: if (DimmerLights->TriggerAdj == 1) {
 12796  15AD  0877               	movf	_DimmerLights,w
 12797  15AE  3E08               	addlw	8
 12798  15AF  0086               	movwf	6
 12799  15B0  3001               	movlw	1	; select bank2/3
 12800  15B1  0087               	movwf	7
 12801  15B2  1E01               	btfss	1,4
 12802  15B3  0008               	return
 12803                           
 12804                           ;Dimmer_B1.c: 456: if (Dimmer.LoadOK == 0) {
 12805  15B4  0021               	movlb	1	; select bank1
 12806  15B5  18C8               	btfsc	_Dimmer^(0+128),1
 12807  15B6  0008               	return
 12808                           
 12809                           ;Dimmer_B1.c: 457: DimmerLights->TriggerAdj = 0;
 12810  15B7  0877               	movf	_DimmerLights,w
 12811  15B8  3E08               	addlw	8
 12812  15B9  0086               	movwf	6
 12813  15BA  3001               	movlw	1	; select bank2/3
 12814  15BB  0087               	movwf	7
 12815  15BC  1201               	bcf	1,4
 12816                           
 12817                           ;Dimmer_B1.c: 458: if (DimmerLights->AdjGo == 1) {
 12818  15BD  0877               	movf	_DimmerLights,w
 12819  15BE  3E08               	addlw	8
 12820  15BF  0086               	movwf	6
 12821  15C0  3001               	movlw	1	; select bank2/3
 12822  15C1  0087               	movwf	7
 12823  15C2  1D81               	btfss	1,3
 12824  15C3  2DD4               	goto	l9808
 12825                           
 12826                           ;Dimmer_B1.c: 459: setDimmerLights_Adj(lights, 1);
 12827  15C4  0020               	movlb	0	; select bank0
 12828  15C5  01E2               	clrf	setDimmerLights_Adj@status
 12829  15C6  0AE2               	incf	setDimmerLights_Adj@status,f
 12830  15C7  0865               	movf	setDimmerLights_Main@lights,w
 12831  15C8  3194  248C  3195   	fcall	_setDimmerLights_Adj
 12832                           
 12833                           ;Dimmer_B1.c: 460: setBuz(1, 100);
 12834  15CB  3064               	movlw	100
 12835  15CC  0020               	movlb	0	; select bank0
 12836  15CD  00A9               	movwf	setBuz@time
 12837  15CE  3000               	movlw	0
 12838  15CF  00AA               	movwf	setBuz@time+1
 12839  15D0  3001               	movlw	1
 12840  15D1  3196  2632         	fcall	_setBuz
 12841                           
 12842                           ;Dimmer_B1.c: 461: } else {
 12843  15D3  0008               	return
 12844  15D4                     l9808:	
 12845                           
 12846                           ;Dimmer_B1.c: 462: setDimmerLights_Adj(lights, 0);
 12847  15D4  0020               	movlb	0	; select bank0
 12848  15D5  01E2               	clrf	setDimmerLights_Adj@status
 12849  15D6  0865               	movf	setDimmerLights_Main@lights,w
 12850  15D7  3194  248C         	fcall	_setDimmerLights_Adj
 12851  15D9  0008               	return
 12852  15DA                     __end_of_setDimmerLights_Main:	
 12853                           
 12854                           	psect	text73
 12855  148C                     __ptext73:	
 12856 ;; *************** function _setDimmerLights_Adj *****************
 12857 ;; Defined at:
 12858 ;;		line 770 in file "../src/Dimmer_B1.c"
 12859 ;; Parameters:    Size  Location     Type
 12860 ;;  lights          1    wreg     unsigned char 
 12861 ;;  status          1   66[BANK0 ] unsigned char 
 12862 ;; Auto vars:     Size  Location     Type
 12863 ;;  lights          1   68[BANK0 ] unsigned char 
 12864 ;; Return value:  Size  Location     Type
 12865 ;;		None               void
 12866 ;; Registers used:
 12867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12868 ;; Tracked objects:
 12869 ;;		On entry : 0/0
 12870 ;;		On exit  : 0/0
 12871 ;;		Unchanged: 0/0
 12872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12873 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12874 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;Total ram usage:        3 bytes
 12878 ;; Hardware stack levels used:    1
 12879 ;; Hardware stack levels required when called:    9
 12880 ;; This function calls:
 12881 ;;		_DimmerLightsPointSelect
 12882 ;;		_getMain_All_Error_Status
 12883 ;;		_setRF_DimmerLights
 12884 ;;		_setTxData
 12885 ;; This function is called by:
 12886 ;;		_setDimmerLights_Main
 12887 ;; This function uses a non-reentrant model
 12888 ;;
 12889                           
 12890                           
 12891                           ;psect for function _setDimmerLights_Adj
 12892  148C                     _setDimmerLights_Adj:	
 12893                           
 12894                           ;incstack = 0
 12895                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12896                           ;setDimmerLights_Adj@lights stored from wreg
 12897  148C  0020               	movlb	0	; select bank0
 12898  148D  00E4               	movwf	setDimmerLights_Adj@lights
 12899                           
 12900                           ;Dimmer_B1.c: 771: DimmerLightsPointSelect(lights);
 12901  148E  0864               	movf	setDimmerLights_Adj@lights,w
 12902  148F  319C  2411  3194   	fcall	_DimmerLightsPointSelect
 12903                           
 12904                           ;Dimmer_B1.c: 772: if (status == 1) {
 12905  1492  0020               	movlb	0	; select bank0
 12906  1493  0862               	movf	setDimmerLights_Adj@status,w
 12907  1494  3A01               	xorlw	1
 12908  1495  1D03               	skipz
 12909  1496  2CA2               	goto	l9426
 12910                           
 12911                           ;Dimmer_B1.c: 773: DimmerLights->AdjFlag = 1;
 12912  1497  0877               	movf	_DimmerLights,w
 12913  1498  0086               	movwf	6
 12914  1499  3001               	movlw	1	; select bank2/3
 12915  149A  0087               	movwf	7
 12916  149B  1581               	bsf	1,3
 12917                           
 12918                           ;Dimmer_B1.c: 774: DimmerLights->Signal = 1;
 12919  149C  0877               	movf	_DimmerLights,w
 12920  149D  0086               	movwf	6
 12921  149E  3001               	movlw	1	; select bank2/3
 12922  149F  0087               	movwf	7
 12923  14A0  1481               	bsf	1,1
 12924                           
 12925                           ;Dimmer_B1.c: 775: } else {
 12926  14A1  0008               	return
 12927  14A2                     l9426:	
 12928                           
 12929                           ;Dimmer_B1.c: 776: if (DimmerLights->AdjFlag == 1) {
 12930  14A2  0877               	movf	_DimmerLights,w
 12931  14A3  0086               	movwf	6
 12932  14A4  3001               	movlw	1	; select bank2/3
 12933  14A5  0087               	movwf	7
 12934  14A6  1D81               	btfss	1,3
 12935  14A7  0008               	return
 12936                           
 12937                           ;Dimmer_B1.c: 777: DimmerLights->Signal = 0;
 12938  14A8  0877               	movf	_DimmerLights,w
 12939  14A9  0086               	movwf	6
 12940  14AA  3001               	movlw	1	; select bank2/3
 12941  14AB  0087               	movwf	7
 12942  14AC  1081               	bcf	1,1
 12943                           
 12944                           ;Dimmer_B1.c: 778: DimmerLights->AdjFlag = 0;
 12945  14AD  0877               	movf	_DimmerLights,w
 12946  14AE  0086               	movwf	6
 12947  14AF  3001               	movlw	1	; select bank2/3
 12948  14B0  0087               	movwf	7
 12949  14B1  1181               	bcf	1,3
 12950                           
 12951                           ;Dimmer_B1.c: 779: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12952  14B2  0877               	movf	_DimmerLights,w
 12953  14B3  3E04               	addlw	4
 12954  14B4  0086               	movwf	6
 12955  14B5  3001               	movlw	1	; select bank2/3
 12956  14B6  0087               	movwf	7
 12957  14B7  0801               	movf	1,w
 12958  14B8  00E3               	movwf	??_setDimmerLights_Adj
 12959  14B9  0877               	movf	_DimmerLights,w
 12960  14BA  3E05               	addlw	5
 12961  14BB  0086               	movwf	6
 12962  14BC  3001               	movlw	1	; select bank2/3
 12963  14BD  0087               	movwf	7
 12964  14BE  0863               	movf	??_setDimmerLights_Adj,w
 12965  14BF  0081               	movwf	1
 12966                           
 12967                           ;Dimmer_B1.c: 789: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12968  14C0  3000               	movlw	0
 12969  14C1  3190  20E4  3194   	fcall	_getMain_All_Error_Status
 12970  14C4  3A00               	xorlw	0
 12971  14C5  3000               	movlw	0
 12972  14C6  1903               	skipnz
 12973  14C7  3001               	movlw	1
 12974  14C8  0020               	movlb	0	; select bank0
 12975  14C9  00E3               	movwf	??_setDimmerLights_Adj
 12976  14CA  0DE3               	rlf	??_setDimmerLights_Adj,f
 12977  14CB  0021               	movlb	1	; select bank1
 12978  14CC  0848               	movf	_Dimmer^(0+128),w
 12979  14CD  0020               	movlb	0	; select bank0
 12980  14CE  0663               	xorwf	??_setDimmerLights_Adj,w
 12981  14CF  39FD               	andlw	-3
 12982  14D0  0663               	xorwf	??_setDimmerLights_Adj,w
 12983  14D1  0021               	movlb	1	; select bank1
 12984  14D2  00C8               	movwf	_Dimmer^(0+128)
 12985                           
 12986                           ;Dimmer_B1.c: 792: setRF_DimmerLights(lights, 1);
 12987  14D3  0020               	movlb	0	; select bank0
 12988  14D4  01DD               	clrf	setRF_DimmerLights@on
 12989  14D5  0ADD               	incf	setRF_DimmerLights@on,f
 12990  14D6  0864               	movf	setDimmerLights_Adj@lights,w
 12991  14D7  318A  2202  3194   	fcall	_setRF_DimmerLights
 12992                           
 12993                           ;Dimmer_B1.c: 793: setTxData();
 12994  14DA  318D  2549         	fcall	_setTxData
 12995  14DC  0008               	return
 12996  14DD                     __end_of_setDimmerLights_Adj:	
 12997                           
 12998                           	psect	text74
 12999  0BC1                     __ptext74:	
 13000 ;; *************** function _setDimmerLights *****************
 13001 ;; Defined at:
 13002 ;;		line 669 in file "../src/Dimmer_B1.c"
 13003 ;; Parameters:    Size  Location     Type
 13004 ;;  lights          1    wreg     unsigned char 
 13005 ;;  status          1    7[BANK0 ] unsigned char 
 13006 ;; Auto vars:     Size  Location     Type
 13007 ;;  lights          1    9[BANK0 ] unsigned char 
 13008 ;; Return value:  Size  Location     Type
 13009 ;;		None               void
 13010 ;; Registers used:
 13011 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13012 ;; Tracked objects:
 13013 ;;		On entry : 0/0
 13014 ;;		On exit  : 0/0
 13015 ;;		Unchanged: 0/0
 13016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13017 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13019 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13020 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;Total ram usage:        3 bytes
 13022 ;; Hardware stack levels used:    1
 13023 ;; Hardware stack levels required when called:    7
 13024 ;; This function calls:
 13025 ;;		_DimmerLightsPointSelect
 13026 ;;		_getMain_All_Error_Status
 13027 ;;		_setDimmerLights_Line
 13028 ;;		_setLED
 13029 ;; This function is called by:
 13030 ;;		_setDimmerLights_Main
 13031 ;; This function uses a non-reentrant model
 13032 ;;
 13033                           
 13034                           
 13035                           ;psect for function _setDimmerLights
 13036  0BC1                     _setDimmerLights:	
 13037                           
 13038                           ;incstack = 0
 13039                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13040                           ;setDimmerLights@lights stored from wreg
 13041  0BC1  0020               	movlb	0	; select bank0
 13042  0BC2  00A9               	movwf	setDimmerLights@lights
 13043                           
 13044                           ;Dimmer_B1.c: 670: DimmerLightsPointSelect(lights);
 13045  0BC3  0829               	movf	setDimmerLights@lights,w
 13046  0BC4  319C  2411  318B   	fcall	_DimmerLightsPointSelect
 13047                           
 13048                           ;Dimmer_B1.c: 673: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 13049  0BC7  3000               	movlw	0
 13050  0BC8  3190  20E4  318B   	fcall	_getMain_All_Error_Status
 13051  0BCB  3A00               	xorlw	0
 13052  0BCC  3000               	movlw	0
 13053  0BCD  1903               	skipnz
 13054  0BCE  3001               	movlw	1
 13055  0BCF  0020               	movlb	0	; select bank0
 13056  0BD0  00A8               	movwf	??_setDimmerLights
 13057  0BD1  0DA8               	rlf	??_setDimmerLights,f
 13058  0BD2  0021               	movlb	1	; select bank1
 13059  0BD3  0848               	movf	_Dimmer^(0+128),w
 13060  0BD4  0020               	movlb	0	; select bank0
 13061  0BD5  0628               	xorwf	??_setDimmerLights,w
 13062  0BD6  39FD               	andlw	-3
 13063  0BD7  0628               	xorwf	??_setDimmerLights,w
 13064  0BD8  0021               	movlb	1	; select bank1
 13065  0BD9  00C8               	movwf	_Dimmer^(0+128)
 13066                           
 13067                           ;Dimmer_B1.c: 677: if (status == 1) {
 13068  0BDA  0020               	movlb	0	; select bank0
 13069  0BDB  0827               	movf	setDimmerLights@status,w
 13070  0BDC  3A01               	xorlw	1
 13071  0BDD  1D03               	skipz
 13072  0BDE  2C15               	goto	l9418
 13073                           
 13074                           ;Dimmer_B1.c: 678: setLED(lights, 0);
 13075  0BDF  01A2               	clrf	setLED@command
 13076  0BE0  0829               	movf	setDimmerLights@lights,w
 13077  0BE1  3188  20D7  318B   	fcall	_setLED
 13078                           
 13079                           ;Dimmer_B1.c: 680: setDimmerLights_Line(lights);
 13080  0BE4  0020               	movlb	0	; select bank0
 13081  0BE5  0829               	movf	setDimmerLights@lights,w
 13082  0BE6  3188  2000  318B   	fcall	_setDimmerLights_Line
 13083                           
 13084                           ;Dimmer_B1.c: 681: DimmerLights->StatusFlag = 1;
 13085  0BE9  0877               	movf	_DimmerLights,w
 13086  0BEA  0086               	movwf	6
 13087  0BEB  3001               	movlw	1	; select bank2/3
 13088  0BEC  0087               	movwf	7
 13089  0BED  1701               	bsf	1,6
 13090                           
 13091                           ;Dimmer_B1.c: 683: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13092  0BEE  0877               	movf	_DimmerLights,w
 13093  0BEF  3E05               	addlw	5
 13094  0BF0  0086               	movwf	6
 13095  0BF1  3001               	movlw	1	; select bank2/3
 13096  0BF2  0087               	movwf	7
 13097  0BF3  0801               	movf	1,w
 13098  0BF4  0020               	movlb	0	; select bank0
 13099  0BF5  00A8               	movwf	??_setDimmerLights
 13100  0BF6  0877               	movf	_DimmerLights,w
 13101  0BF7  3E04               	addlw	4
 13102  0BF8  0086               	movwf	6
 13103  0BF9  3001               	movlw	1	; select bank2/3
 13104  0BFA  0087               	movwf	7
 13105  0BFB  0828               	movf	??_setDimmerLights,w
 13106  0BFC  0081               	movwf	1
 13107                           
 13108                           ;Dimmer_B1.c: 687: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 13109  0BFD  3020               	movlw	32
 13110  0BFE  00A8               	movwf	??_setDimmerLights
 13111  0BFF  0877               	movf	_DimmerLights,w
 13112  0C00  3E04               	addlw	4
 13113  0C01  0086               	movwf	6
 13114  0C02  3001               	movlw	1	; select bank2/3
 13115  0C03  0087               	movwf	7
 13116  0C04  0828               	movf	??_setDimmerLights,w
 13117  0C05  0081               	movwf	1
 13118                           
 13119                           ;Dimmer_B1.c: 691: DimmerLights->Signal = 1;
 13120  0C06  0877               	movf	_DimmerLights,w
 13121  0C07  0086               	movwf	6
 13122  0C08  3001               	movlw	1	; select bank2/3
 13123  0C09  0087               	movwf	7
 13124  0C0A  1481               	bsf	1,1
 13125                           
 13126                           ;Dimmer_B1.c: 692: DimmerLights->DimmingTimeValue = 7;
 13127  0C0B  3007               	movlw	7
 13128  0C0C  00A8               	movwf	??_setDimmerLights
 13129  0C0D  0877               	movf	_DimmerLights,w
 13130  0C0E  3E02               	addlw	2
 13131  0C0F  0086               	movwf	6
 13132  0C10  3001               	movlw	1	; select bank2/3
 13133  0C11  0087               	movwf	7
 13134  0C12  0828               	movf	??_setDimmerLights,w
 13135  0C13  0081               	movwf	1
 13136                           
 13137                           ;Dimmer_B1.c: 694: } else {
 13138  0C14  0008               	return
 13139  0C15                     l9418:	
 13140                           
 13141                           ;Dimmer_B1.c: 696: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13142  0C15  0877               	movf	_DimmerLights,w
 13143  0C16  3E06               	addlw	6
 13144  0C17  0086               	movwf	6
 13145  0C18  3001               	movlw	1	; select bank2/3
 13146  0C19  0087               	movwf	7
 13147  0C1A  0801               	movf	1,w
 13148  0C1B  00A8               	movwf	??_setDimmerLights
 13149  0C1C  0877               	movf	_DimmerLights,w
 13150  0C1D  3E04               	addlw	4
 13151  0C1E  0086               	movwf	6
 13152  0C1F  3001               	movlw	1	; select bank2/3
 13153  0C20  0087               	movwf	7
 13154  0C21  0828               	movf	??_setDimmerLights,w
 13155  0C22  0081               	movwf	1
 13156                           
 13157                           ;Dimmer_B1.c: 703: DimmerLights->Signal = 1;
 13158  0C23  0877               	movf	_DimmerLights,w
 13159  0C24  0086               	movwf	6
 13160  0C25  3001               	movlw	1	; select bank2/3
 13161  0C26  0087               	movwf	7
 13162  0C27  1481               	bsf	1,1
 13163                           
 13164                           ;Dimmer_B1.c: 704: DimmerLights->AdjFlag = 0;
 13165  0C28  0877               	movf	_DimmerLights,w
 13166  0C29  0086               	movwf	6
 13167  0C2A  3001               	movlw	1	; select bank2/3
 13168  0C2B  0087               	movwf	7
 13169  0C2C  1181               	bcf	1,3
 13170                           
 13171                           ;Dimmer_B1.c: 705: DimmerLights->AdjStatus = 0;
 13172  0C2D  0877               	movf	_DimmerLights,w
 13173  0C2E  0086               	movwf	6
 13174  0C2F  3001               	movlw	1	; select bank2/3
 13175  0C30  0087               	movwf	7
 13176  0C31  1201               	bcf	1,4
 13177                           
 13178                           ;Dimmer_B1.c: 706: DimmerLights->AdjRF = 0;
 13179  0C32  0877               	movf	_DimmerLights,w
 13180  0C33  0086               	movwf	6
 13181  0C34  3001               	movlw	1	; select bank2/3
 13182  0C35  0087               	movwf	7
 13183  0C36  1101               	bcf	1,2
 13184                           
 13185                           ;Dimmer_B1.c: 707: DimmerLights->DimmingTimeValue = 7;
 13186  0C37  3007               	movlw	7
 13187  0C38  00A8               	movwf	??_setDimmerLights
 13188  0C39  0877               	movf	_DimmerLights,w
 13189  0C3A  3E02               	addlw	2
 13190  0C3B  0086               	movwf	6
 13191  0C3C  3001               	movlw	1	; select bank2/3
 13192  0C3D  0087               	movwf	7
 13193  0C3E  0828               	movf	??_setDimmerLights,w
 13194  0C3F  0081               	movwf	1
 13195  0C40  0008               	return
 13196  0C41                     __end_of_setDimmerLights:	
 13197                           
 13198                           	psect	text75
 13199  08D7                     __ptext75:	
 13200 ;; *************** function _setLED *****************
 13201 ;; Defined at:
 13202 ;;		line 73 in file "../src/LED_B1.c"
 13203 ;; Parameters:    Size  Location     Type
 13204 ;;  led             1    wreg     unsigned char 
 13205 ;;  command         1    2[BANK0 ] unsigned char 
 13206 ;; Auto vars:     Size  Location     Type
 13207 ;;  led             1    3[BANK0 ] unsigned char 
 13208 ;; Return value:  Size  Location     Type
 13209 ;;		None               void
 13210 ;; Registers used:
 13211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13212 ;; Tracked objects:
 13213 ;;		On entry : 0/0
 13214 ;;		On exit  : 0/0
 13215 ;;		Unchanged: 0/0
 13216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13217 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13220 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13221 ;;Total ram usage:        2 bytes
 13222 ;; Hardware stack levels used:    1
 13223 ;; Hardware stack levels required when called:    6
 13224 ;; This function calls:
 13225 ;;		_LedPointSelect
 13226 ;; This function is called by:
 13227 ;;		_setDimmerLights
 13228 ;;		_setLED_Initialization
 13229 ;;		_setMain_Exception
 13230 ;;		_setSw_Initialization
 13231 ;; This function uses a non-reentrant model
 13232 ;;
 13233                           
 13234                           
 13235                           ;psect for function _setLED
 13236  08D7                     _setLED:	
 13237                           
 13238                           ;incstack = 0
 13239                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13240                           ;setLED@led stored from wreg
 13241  08D7  0020               	movlb	0	; select bank0
 13242  08D8  00A3               	movwf	setLED@led
 13243                           
 13244                           ;LED_B1.c: 74: LedPointSelect(led);
 13245  08D9  0823               	movf	setLED@led,w
 13246  08DA  319E  2681  3188   	fcall	_LedPointSelect
 13247                           
 13248                           ;LED_B1.c: 75: if (command == 0) {
 13249  08DD  0020               	movlb	0	; select bank0
 13250  08DE  08A2               	movf	setLED@command,f
 13251  08DF  1D03               	skipz
 13252  08E0  28F3               	goto	l9148
 13253                           
 13254                           ;LED_B1.c: 77: if (led == 1) {
 13255  08E1  0823               	movf	setLED@led,w
 13256  08E2  3A01               	xorlw	1
 13257  08E3  1D03               	skipz
 13258  08E4  28E7               	goto	l9140
 13259                           
 13260                           ;LED_B1.c: 81: RA3 = 1;
 13261  08E5  158C               	bsf	12,3	;volatile
 13262                           
 13263                           ;LED_B1.c: 83: }
 13264  08E6  0008               	return
 13265  08E7                     l9140:	
 13266                           
 13267                           ;LED_B1.c: 86: else if (led == 2) {
 13268  08E7  0823               	movf	setLED@led,w
 13269  08E8  3A02               	xorlw	2
 13270  08E9  1D03               	skipz
 13271  08EA  28ED               	goto	l9144
 13272                           
 13273                           ;LED_B1.c: 90: RC7 = 1;
 13274  08EB  178E               	bsf	14,7	;volatile
 13275                           
 13276                           ;LED_B1.c: 92: }
 13277  08EC  0008               	return
 13278  08ED                     l9144:	
 13279                           
 13280                           ;LED_B1.c: 104: else if (led == 99) {
 13281  08ED  0823               	movf	setLED@led,w
 13282  08EE  3A63               	xorlw	99
 13283  08EF  1D03               	skipz
 13284  08F0  0008               	return
 13285                           
 13286                           ;LED_B1.c: 108: RB5 = 1;
 13287  08F1  168D               	bsf	13,5	;volatile
 13288                           
 13289                           ;LED_B1.c: 110: }
 13290                           ;LED_B1.c: 112: } else if (command == 1) {
 13291  08F2  0008               	return
 13292  08F3                     l9148:	
 13293  08F3  0822               	movf	setLED@command,w
 13294  08F4  3A01               	xorlw	1
 13295  08F5  1D03               	skipz
 13296  08F6  2909               	goto	l9162
 13297                           
 13298                           ;LED_B1.c: 114: if (led == 1) {
 13299  08F7  0823               	movf	setLED@led,w
 13300  08F8  3A01               	xorlw	1
 13301  08F9  1D03               	skipz
 13302  08FA  28FD               	goto	l9154
 13303                           
 13304                           ;LED_B1.c: 118: RA3 = 0;
 13305  08FB  118C               	bcf	12,3	;volatile
 13306                           
 13307                           ;LED_B1.c: 120: }
 13308  08FC  0008               	return
 13309  08FD                     l9154:	
 13310                           
 13311                           ;LED_B1.c: 123: else if (led == 2) {
 13312  08FD  0823               	movf	setLED@led,w
 13313  08FE  3A02               	xorlw	2
 13314  08FF  1D03               	skipz
 13315  0900  2903               	goto	l9158
 13316                           
 13317                           ;LED_B1.c: 127: RC7 = 0;
 13318  0901  138E               	bcf	14,7	;volatile
 13319                           
 13320                           ;LED_B1.c: 129: }
 13321  0902  0008               	return
 13322  0903                     l9158:	
 13323                           
 13324                           ;LED_B1.c: 141: else if (led == 99) {
 13325  0903  0823               	movf	setLED@led,w
 13326  0904  3A63               	xorlw	99
 13327  0905  1D03               	skipz
 13328  0906  0008               	return
 13329                           
 13330                           ;LED_B1.c: 145: RB5 = 0;
 13331  0907  128D               	bcf	13,5	;volatile
 13332                           
 13333                           ;LED_B1.c: 147: }
 13334                           ;LED_B1.c: 149: } else if (command == 10) {
 13335  0908  0008               	return
 13336  0909                     l9162:	
 13337  0909  0822               	movf	setLED@command,w
 13338  090A  3A0A               	xorlw	10
 13339  090B  1D03               	skipz
 13340  090C  292D               	goto	l9178
 13341                           
 13342                           ;LED_B1.c: 150: LED->GO = 0;
 13343  090D  0021               	movlb	1	; select bank1
 13344  090E  084F               	movf	_LED^(0+128),w
 13345  090F  0086               	movwf	6
 13346  0910  3001               	movlw	1	; select bank2/3
 13347  0911  0087               	movwf	7
 13348  0912  1081               	bcf	1,1
 13349                           
 13350                           ;LED_B1.c: 151: LED->Time = 0;
 13351  0913  0A4F               	incf	_LED^(0+128),w
 13352  0914  0086               	movwf	6
 13353  0915  3001               	movlw	1	; select bank2/3
 13354  0916  0087               	movwf	7
 13355  0917  3000               	movlw	0
 13356  0918  3FC0               	movwi [0]fsr1
 13357  0919  3FC1               	movwi [1]fsr1
 13358                           
 13359                           ;LED_B1.c: 153: if (led == 1) {
 13360  091A  0020               	movlb	0	; select bank0
 13361  091B  0823               	movf	setLED@led,w
 13362  091C  3A01               	xorlw	1
 13363  091D  1D03               	skipz
 13364  091E  2921               	goto	l9170
 13365                           
 13366                           ;LED_B1.c: 157: RA3 = 1;
 13367  091F  158C               	bsf	12,3	;volatile
 13368                           
 13369                           ;LED_B1.c: 159: }
 13370  0920  0008               	return
 13371  0921                     l9170:	
 13372                           
 13373                           ;LED_B1.c: 162: else if (led == 2) {
 13374  0921  0823               	movf	setLED@led,w
 13375  0922  3A02               	xorlw	2
 13376  0923  1D03               	skipz
 13377  0924  2927               	goto	l9174
 13378                           
 13379                           ;LED_B1.c: 166: RC7 = 1;
 13380  0925  178E               	bsf	14,7	;volatile
 13381                           
 13382                           ;LED_B1.c: 168: }
 13383  0926  0008               	return
 13384  0927                     l9174:	
 13385                           
 13386                           ;LED_B1.c: 180: else if (led == 99) {
 13387  0927  0823               	movf	setLED@led,w
 13388  0928  3A63               	xorlw	99
 13389  0929  1D03               	skipz
 13390  092A  0008               	return
 13391                           
 13392                           ;LED_B1.c: 184: RB5 = 1;
 13393  092B  168D               	bsf	13,5	;volatile
 13394                           
 13395                           ;LED_B1.c: 186: }
 13396                           ;LED_B1.c: 188: } else if (command == 11) {
 13397  092C  0008               	return
 13398  092D                     l9178:	
 13399  092D  0822               	movf	setLED@command,w
 13400  092E  3A0B               	xorlw	11
 13401  092F  1D03               	skipz
 13402  0930  0008               	return
 13403                           
 13404                           ;LED_B1.c: 189: LED->GO = 1;
 13405  0931  0021               	movlb	1	; select bank1
 13406  0932  084F               	movf	_LED^(0+128),w
 13407  0933  0086               	movwf	6
 13408  0934  3001               	movlw	1	; select bank2/3
 13409  0935  0087               	movwf	7
 13410  0936  1481               	bsf	1,1
 13411  0937  0008               	return
 13412  0938                     __end_of_setLED:	
 13413                           
 13414                           	psect	text76
 13415  1E81                     __ptext76:	
 13416 ;; *************** function _LedPointSelect *****************
 13417 ;; Defined at:
 13418 ;;		line 7 in file "../src/LED_B1.c"
 13419 ;; Parameters:    Size  Location     Type
 13420 ;;  led             1    wreg     unsigned char 
 13421 ;; Auto vars:     Size  Location     Type
 13422 ;;  led             1    1[BANK0 ] unsigned char 
 13423 ;; Return value:  Size  Location     Type
 13424 ;;		None               void
 13425 ;; Registers used:
 13426 ;;		wreg
 13427 ;; Tracked objects:
 13428 ;;		On entry : 0/0
 13429 ;;		On exit  : 0/0
 13430 ;;		Unchanged: 0/0
 13431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13435 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;Total ram usage:        2 bytes
 13437 ;; Hardware stack levels used:    1
 13438 ;; Hardware stack levels required when called:    5
 13439 ;; This function calls:
 13440 ;;		Nothing
 13441 ;; This function is called by:
 13442 ;;		_setLED_Initialization
 13443 ;;		_setLED
 13444 ;;		_setLED_Main
 13445 ;; This function uses a non-reentrant model
 13446 ;;
 13447                           
 13448                           
 13449                           ;psect for function _LedPointSelect
 13450  1E81                     _LedPointSelect:	
 13451                           
 13452                           ;incstack = 0
 13453                           ; Regs used in _LedPointSelect: [wreg]
 13454                           ;LedPointSelect@led stored from wreg
 13455  1E81  0020               	movlb	0	; select bank0
 13456  1E82  00A1               	movwf	LedPointSelect@led
 13457                           
 13458                           ;LED_B1.c: 9: if (led == 1) {
 13459  1E83  0821               	movf	LedPointSelect@led,w
 13460  1E84  3A01               	xorlw	1
 13461  1E85  1D03               	skipz
 13462  1E86  2E8D               	goto	l9040
 13463                           
 13464                           ;LED_B1.c: 10: LED = &VarLED1;
 13465  1E87  3061               	movlw	_VarLED1& (0+255)
 13466  1E88  00A0               	movwf	??_LedPointSelect
 13467  1E89  0820               	movf	??_LedPointSelect,w
 13468  1E8A  0021               	movlb	1	; select bank1
 13469  1E8B  00CF               	movwf	_LED^(0+128)
 13470                           
 13471                           ;LED_B1.c: 11: }
 13472  1E8C  0008               	return
 13473  1E8D                     l9040:	
 13474                           
 13475                           ;LED_B1.c: 14: else if (led == 2) {
 13476  1E8D  0020               	movlb	0	; select bank0
 13477  1E8E  0821               	movf	LedPointSelect@led,w
 13478  1E8F  3A02               	xorlw	2
 13479  1E90  1D03               	skipz
 13480  1E91  2E98               	goto	l9044
 13481                           
 13482                           ;LED_B1.c: 15: LED = &VarLED2;
 13483  1E92  3065               	movlw	_VarLED2& (0+255)
 13484  1E93  00A0               	movwf	??_LedPointSelect
 13485  1E94  0820               	movf	??_LedPointSelect,w
 13486  1E95  0021               	movlb	1	; select bank1
 13487  1E96  00CF               	movwf	_LED^(0+128)
 13488                           
 13489                           ;LED_B1.c: 16: }
 13490  1E97  0008               	return
 13491  1E98                     l9044:	
 13492                           
 13493                           ;LED_B1.c: 24: else if (led == 99) {
 13494  1E98  0020               	movlb	0	; select bank0
 13495  1E99  0821               	movf	LedPointSelect@led,w
 13496  1E9A  3A63               	xorlw	99
 13497  1E9B  1D03               	skipz
 13498  1E9C  0008               	return
 13499                           
 13500                           ;LED_B1.c: 25: LED = &VarErrLED;
 13501  1E9D  305D               	movlw	_VarErrLED& (0+255)
 13502  1E9E  00A0               	movwf	??_LedPointSelect
 13503  1E9F  0820               	movf	??_LedPointSelect,w
 13504  1EA0  0021               	movlb	1	; select bank1
 13505  1EA1  00CF               	movwf	_LED^(0+128)
 13506  1EA2  0008               	return
 13507  1EA3                     __end_of_LedPointSelect:	
 13508                           
 13509                           	psect	text77
 13510  0800                     __ptext77:	
 13511 ;; *************** function _setDimmerLights_Line *****************
 13512 ;; Defined at:
 13513 ;;		line 721 in file "../src/Dimmer_B1.c"
 13514 ;; Parameters:    Size  Location     Type
 13515 ;;  lights          1    wreg     unsigned char 
 13516 ;; Auto vars:     Size  Location     Type
 13517 ;;  lights          1    0[BANK0 ] unsigned char 
 13518 ;; Return value:  Size  Location     Type
 13519 ;;		None               void
 13520 ;; Registers used:
 13521 ;;		wreg
 13522 ;; Tracked objects:
 13523 ;;		On entry : 0/0
 13524 ;;		On exit  : 0/0
 13525 ;;		Unchanged: 0/0
 13526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13528 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13530 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13531 ;;Total ram usage:        1 bytes
 13532 ;; Hardware stack levels used:    1
 13533 ;; Hardware stack levels required when called:    5
 13534 ;; This function calls:
 13535 ;;		Nothing
 13536 ;; This function is called by:
 13537 ;;		_setDimmerLights
 13538 ;; This function uses a non-reentrant model
 13539 ;;
 13540                           
 13541                           
 13542                           ;psect for function _setDimmerLights_Line
 13543  0800                     _setDimmerLights_Line:	
 13544                           
 13545                           ;incstack = 0
 13546                           ; Regs used in _setDimmerLights_Line: [wreg]
 13547                           ;setDimmerLights_Line@lights stored from wreg
 13548  0800  0020               	movlb	0	; select bank0
 13549  0801  00A0               	movwf	setDimmerLights_Line@lights
 13550                           
 13551                           ;Dimmer_B1.c: 723: DimmerLights1.Line = 0;
 13552  0802  0023               	movlb	3	; select bank3
 13553  0803  1047               	bcf	(_DimmerLights1^(0+384)+9),0
 13554                           
 13555                           ;Dimmer_B1.c: 726: DimmerLights2.Line = 0;
 13556  0804  1056               	bcf	(_DimmerLights2^(0+384)+9),0
 13557                           
 13558                           ;Dimmer_B1.c: 732: if (lights == 1) {
 13559  0805  0020               	movlb	0	; select bank0
 13560  0806  0820               	movf	setDimmerLights_Line@lights,w
 13561  0807  3A01               	xorlw	1
 13562  0808  1D03               	skipz
 13563  0809  280D               	goto	l9188
 13564                           
 13565                           ;Dimmer_B1.c: 733: DimmerLights1.Line = 1;
 13566  080A  0023               	movlb	3	; select bank3
 13567  080B  1447               	bsf	(_DimmerLights1^(0+384)+9),0
 13568                           
 13569                           ;Dimmer_B1.c: 734: }
 13570  080C  0008               	return
 13571  080D                     l9188:	
 13572                           
 13573                           ;Dimmer_B1.c: 737: else if (lights == 2) {
 13574  080D  0020               	movlb	0	; select bank0
 13575  080E  0820               	movf	setDimmerLights_Line@lights,w
 13576  080F  3A02               	xorlw	2
 13577  0810  1D03               	skipz
 13578  0811  0008               	return
 13579                           
 13580                           ;Dimmer_B1.c: 738: DimmerLights2.Line = 1;
 13581  0812  0023               	movlb	3	; select bank3
 13582  0813  1456               	bsf	(_DimmerLights2^(0+384)+9),0
 13583  0814  0008               	return
 13584  0815                     __end_of_setDimmerLights_Line:	
 13585                           
 13586                           	psect	text78
 13587  10E4                     __ptext78:	
 13588 ;; *************** function _getMain_All_Error_Status *****************
 13589 ;; Defined at:
 13590 ;;		line 361 in file "../src/Main_B1.c"
 13591 ;; Parameters:    Size  Location     Type
 13592 ;;  command         1    wreg     unsigned char 
 13593 ;; Auto vars:     Size  Location     Type
 13594 ;;  command         1    5[BANK0 ] unsigned char 
 13595 ;;  status          1    6[BANK0 ] unsigned char 
 13596 ;; Return value:  Size  Location     Type
 13597 ;;                  1    wreg      unsigned char 
 13598 ;; Registers used:
 13599 ;;		wreg, status,2, status,0
 13600 ;; Tracked objects:
 13601 ;;		On entry : 0/0
 13602 ;;		On exit  : 0/0
 13603 ;;		Unchanged: 0/0
 13604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13606 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13607 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13608 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13609 ;;Total ram usage:        7 bytes
 13610 ;; Hardware stack levels used:    1
 13611 ;; Hardware stack levels required when called:    5
 13612 ;; This function calls:
 13613 ;;		Nothing
 13614 ;; This function is called by:
 13615 ;;		_DimmerLights_Main
 13616 ;;		_setDimmerLights
 13617 ;;		_setDimmerLights_Adj
 13618 ;;		_Load_Main
 13619 ;;		_setTemp_Main
 13620 ;;		_setRF_Main
 13621 ;;		_getRxData
 13622 ;;		_Switch_Main
 13623 ;; This function uses a non-reentrant model
 13624 ;;
 13625                           
 13626                           
 13627                           ;psect for function _getMain_All_Error_Status
 13628  10E4                     _getMain_All_Error_Status:	
 13629                           
 13630                           ;incstack = 0
 13631                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 13632                           ;getMain_All_Error_Status@command stored from wreg
 13633  10E4  0020               	movlb	0	; select bank0
 13634  10E5  00A5               	movwf	getMain_All_Error_Status@command
 13635                           
 13636                           ;Main_B1.c: 362: char status = 0;
 13637  10E6  01A6               	clrf	getMain_All_Error_Status@status
 13638                           
 13639                           ;Main_B1.c: 373: if (status == 0 && command != 2) {
 13640  10E7  08A6               	movf	getMain_All_Error_Status@status,f
 13641  10E8  1D03               	skipz
 13642  10E9  28FE               	goto	l9120
 13643  10EA  0825               	movf	getMain_All_Error_Status@command,w
 13644  10EB  3A02               	xorlw	2
 13645  10EC  1903               	skipnz
 13646  10ED  28FE               	goto	l9120
 13647                           
 13648                           ;Main_B1.c: 374: status = Temp.ERROR == 1 ? 2 : 0;
 13649  10EE  0021               	movlb	1	; select bank1
 13650  10EF  18D8               	btfsc	_Temp^(0+128),1
 13651  10F0  28F5               	goto	l9118
 13652  10F1  0020               	movlb	0	; select bank0
 13653  10F2  01A1               	clrf	_getMain_All_Error_Status$3953
 13654  10F3  01A2               	clrf	_getMain_All_Error_Status$3953+1
 13655  10F4  28FA               	goto	l1602
 13656  10F5                     l9118:	
 13657  10F5  3002               	movlw	2
 13658  10F6  0020               	movlb	0	; select bank0
 13659  10F7  00A1               	movwf	_getMain_All_Error_Status$3953
 13660  10F8  3000               	movlw	0
 13661  10F9  00A2               	movwf	_getMain_All_Error_Status$3953+1
 13662  10FA                     l1602:	
 13663  10FA  0821               	movf	_getMain_All_Error_Status$3953,w
 13664  10FB  00A0               	movwf	??_getMain_All_Error_Status
 13665  10FC  0820               	movf	??_getMain_All_Error_Status,w
 13666  10FD  00A6               	movwf	getMain_All_Error_Status@status
 13667  10FE                     l9120:	
 13668                           
 13669                           ;Main_B1.c: 375: }
 13670                           ;Main_B1.c: 380: if (status == 0 && command != 3) {
 13671  10FE  08A6               	movf	getMain_All_Error_Status@status,f
 13672  10FF  1D03               	skipz
 13673  1100  2915               	goto	l1603
 13674  1101  0825               	movf	getMain_All_Error_Status@command,w
 13675  1102  3A03               	xorlw	3
 13676  1103  1903               	skipnz
 13677  1104  2915               	goto	l1603
 13678                           
 13679                           ;Main_B1.c: 381: status = Load.ERROR == 1 ? 3 : 0;
 13680  1105  0022               	movlb	2	; select bank2
 13681  1106  1AA7               	btfsc	_Load^(0+256),5
 13682  1107  290C               	goto	l9128
 13683  1108  0020               	movlb	0	; select bank0
 13684  1109  01A3               	clrf	_getMain_All_Error_Status$3962
 13685  110A  01A4               	clrf	_getMain_All_Error_Status$3962+1
 13686  110B  2911               	goto	l1607
 13687  110C                     l9128:	
 13688  110C  3003               	movlw	3
 13689  110D  0020               	movlb	0	; select bank0
 13690  110E  00A3               	movwf	_getMain_All_Error_Status$3962
 13691  110F  3000               	movlw	0
 13692  1110  00A4               	movwf	_getMain_All_Error_Status$3962+1
 13693  1111                     l1607:	
 13694  1111  0823               	movf	_getMain_All_Error_Status$3962,w
 13695  1112  00A0               	movwf	??_getMain_All_Error_Status
 13696  1113  0820               	movf	??_getMain_All_Error_Status,w
 13697  1114  00A6               	movwf	getMain_All_Error_Status@status
 13698  1115                     l1603:	
 13699                           
 13700                           ;Main_B1.c: 382: }
 13701                           ;Main_B1.c: 398: return status;
 13702  1115  0826               	movf	getMain_All_Error_Status@status,w
 13703  1116  0008               	return
 13704  1117                     __end_of_getMain_All_Error_Status:	
 13705                           
 13706                           	psect	text79
 13707  1089                     __ptext79:	
 13708 ;; *************** function _getMain_LightsStatus *****************
 13709 ;; Defined at:
 13710 ;;		line 334 in file "../src/Main_B1.c"
 13711 ;; Parameters:    Size  Location     Type
 13712 ;;		None
 13713 ;; Auto vars:     Size  Location     Type
 13714 ;;  i               2    6[BANK0 ] int 
 13715 ;;  status          1    8[BANK0 ] unsigned char 
 13716 ;;  count           1    5[BANK0 ] unsigned char 
 13717 ;; Return value:  Size  Location     Type
 13718 ;;                  1    wreg      unsigned char 
 13719 ;; Registers used:
 13720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13721 ;; Tracked objects:
 13722 ;;		On entry : 0/0
 13723 ;;		On exit  : 0/0
 13724 ;;		Unchanged: 0/0
 13725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13727 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13728 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13729 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13730 ;;Total ram usage:        5 bytes
 13731 ;; Hardware stack levels used:    1
 13732 ;; Hardware stack levels required when called:    7
 13733 ;; This function calls:
 13734 ;;		_getDimmerLights_Status
 13735 ;; This function is called by:
 13736 ;;		_DimmerLights_Main
 13737 ;;		_Flash_Memory_Main
 13738 ;;		_setMain_Exception
 13739 ;;		_Load_Main
 13740 ;; This function uses a non-reentrant model
 13741 ;;
 13742                           
 13743                           
 13744                           ;psect for function _getMain_LightsStatus
 13745  1089                     _getMain_LightsStatus:	
 13746                           
 13747                           ;Main_B1.c: 335: char status = 0;
 13748                           
 13749                           ;incstack = 0
 13750                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13751  1089  0020               	movlb	0	; select bank0
 13752  108A  01A8               	clrf	getMain_LightsStatus@status
 13753                           
 13754                           ;Main_B1.c: 341: char count = 2;
 13755  108B  3002               	movlw	2
 13756  108C  00A4               	movwf	??_getMain_LightsStatus
 13757  108D  0824               	movf	??_getMain_LightsStatus,w
 13758  108E  00A5               	movwf	getMain_LightsStatus@count
 13759                           
 13760                           ;Main_B1.c: 347: for (int i = 0; i < count; i++) {
 13761  108F  01A6               	clrf	getMain_LightsStatus@i
 13762  1090  01A7               	clrf	getMain_LightsStatus@i+1
 13763  1091                     l9394:	
 13764  1091  0827               	movf	getMain_LightsStatus@i+1,w
 13765  1092  3A80               	xorlw	128
 13766  1093  00A4               	movwf	??_getMain_LightsStatus
 13767  1094  3080               	movlw	128
 13768  1095  0224               	subwf	??_getMain_LightsStatus,w
 13769  1096  1D03               	skipz
 13770  1097  289A               	goto	u10205
 13771  1098  0825               	movf	getMain_LightsStatus@count,w
 13772  1099  0226               	subwf	getMain_LightsStatus@i,w
 13773  109A                     u10205:	
 13774  109A  1803               	btfsc	3,0
 13775  109B  28B2               	goto	l9396
 13776                           
 13777                           ;Main_B1.c: 348: if (status == 0) {
 13778  109C  0020               	movlb	0	; select bank0
 13779  109D  08A8               	movf	getMain_LightsStatus@status,f
 13780  109E  1D03               	skipz
 13781  109F  28AD               	goto	l9392
 13782                           
 13783                           ;Main_B1.c: 353: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 13784  10A0  0826               	movf	getMain_LightsStatus@i,w
 13785  10A1  3E01               	addlw	1
 13786  10A2  319B  2374  3190   	fcall	_getDimmerLights_Status
 13787  10A5  3A01               	xorlw	1
 13788  10A6  3000               	movlw	0
 13789  10A7  1903               	skipnz
 13790  10A8  3001               	movlw	1
 13791  10A9  0020               	movlb	0	; select bank0
 13792  10AA  00A4               	movwf	??_getMain_LightsStatus
 13793  10AB  0824               	movf	??_getMain_LightsStatus,w
 13794  10AC  00A8               	movwf	getMain_LightsStatus@status
 13795  10AD                     l9392:	
 13796  10AD  3001               	movlw	1
 13797  10AE  07A6               	addwf	getMain_LightsStatus@i,f
 13798  10AF  3000               	movlw	0
 13799  10B0  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 13800  10B1  2891               	goto	l9394
 13801  10B2                     l9396:	
 13802                           
 13803                           ;Main_B1.c: 355: }
 13804                           ;Main_B1.c: 356: }
 13805                           ;Main_B1.c: 357: return status;
 13806  10B2  0020               	movlb	0	; select bank0
 13807  10B3  0828               	movf	getMain_LightsStatus@status,w
 13808  10B4  0008               	return
 13809  10B5                     __end_of_getMain_LightsStatus:	
 13810                           
 13811                           	psect	text80
 13812  1AA4                     __ptext80:	
 13813 ;; *************** function _getLoad_OK *****************
 13814 ;; Defined at:
 13815 ;;		line 219 in file "../src/OverLoad_B1.c"
 13816 ;; Parameters:    Size  Location     Type
 13817 ;;		None
 13818 ;; Auto vars:     Size  Location     Type
 13819 ;;  ok              1    0[BANK0 ] unsigned char 
 13820 ;; Return value:  Size  Location     Type
 13821 ;;                  1    wreg      unsigned char 
 13822 ;; Registers used:
 13823 ;;		wreg, status,2
 13824 ;; Tracked objects:
 13825 ;;		On entry : 0/0
 13826 ;;		On exit  : 0/0
 13827 ;;		Unchanged: 0/0
 13828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13832 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13833 ;;Total ram usage:        1 bytes
 13834 ;; Hardware stack levels used:    1
 13835 ;; Hardware stack levels required when called:    5
 13836 ;; This function calls:
 13837 ;;		Nothing
 13838 ;; This function is called by:
 13839 ;;		_DimmerLights_Main
 13840 ;; This function uses a non-reentrant model
 13841 ;;
 13842                           
 13843                           
 13844                           ;psect for function _getLoad_OK
 13845  1AA4                     _getLoad_OK:	
 13846                           
 13847                           ;OverLoad_B1.c: 220: char ok = Load.OK == 1 ? 1 : 0;
 13848                           
 13849                           ;incstack = 0
 13850                           ; Regs used in _getLoad_OK: [wreg+status,2]
 13851  1AA4  3000               	movlw	0
 13852  1AA5  0022               	movlb	2	; select bank2
 13853  1AA6  1BA7               	btfsc	_Load^(0+256),7
 13854  1AA7  3001               	movlw	1
 13855  1AA8  0020               	movlb	0	; select bank0
 13856  1AA9  00A0               	movwf	getLoad_OK@ok
 13857                           
 13858                           ;OverLoad_B1.c: 221: return ok;
 13859  1AAA  0820               	movf	getLoad_OK@ok,w
 13860  1AAB  0008               	return
 13861  1AAC                     __end_of_getLoad_OK:	
 13862                           
 13863                           	psect	text81
 13864  1CED                     __ptext81:	
 13865 ;; *************** function _DimmerLights_Initialization *****************
 13866 ;; Defined at:
 13867 ;;		line 342 in file "../src/Dimmer_B1.c"
 13868 ;; Parameters:    Size  Location     Type
 13869 ;;		None
 13870 ;; Auto vars:     Size  Location     Type
 13871 ;;		None
 13872 ;; Return value:  Size  Location     Type
 13873 ;;		None               void
 13874 ;; Registers used:
 13875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13876 ;; Tracked objects:
 13877 ;;		On entry : 0/0
 13878 ;;		On exit  : 0/0
 13879 ;;		Unchanged: 0/0
 13880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13883 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13884 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;Total ram usage:        1 bytes
 13886 ;; Hardware stack levels used:    1
 13887 ;; Hardware stack levels required when called:    7
 13888 ;; This function calls:
 13889 ;;		_Dimmer_Initialization
 13890 ;;		_setDimmerLights_Initialization
 13891 ;; This function is called by:
 13892 ;;		_main
 13893 ;; This function uses a non-reentrant model
 13894 ;;
 13895                           
 13896                           
 13897                           ;psect for function _DimmerLights_Initialization
 13898  1CED                     _DimmerLights_Initialization:	
 13899                           
 13900                           ;Dimmer_B1.c: 345: DimmerLights11 = &DimmerLights1;
 13901                           
 13902                           ;incstack = 0
 13903                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13904  1CED  30BE               	movlw	_DimmerLights1& (0+255)
 13905  1CEE  0020               	movlb	0	; select bank0
 13906  1CEF  00A4               	movwf	??_DimmerLights_Initialization
 13907  1CF0  0824               	movf	??_DimmerLights_Initialization,w
 13908  1CF1  0021               	movlb	1	; select bank1
 13909  1CF2  00CC               	movwf	_DimmerLights11^(0+128)
 13910                           
 13911                           ;Dimmer_B1.c: 346: setDimmerLights_Initialization(1);
 13912  1CF3  3001               	movlw	1
 13913  1CF4  319F  2734  319C   	fcall	_setDimmerLights_Initialization
 13914                           
 13915                           ;Dimmer_B1.c: 350: DimmerLights22 = &DimmerLights2;
 13916  1CF7  30CD               	movlw	_DimmerLights2& (0+255)
 13917  1CF8  0020               	movlb	0	; select bank0
 13918  1CF9  00A4               	movwf	??_DimmerLights_Initialization
 13919  1CFA  0824               	movf	??_DimmerLights_Initialization,w
 13920  1CFB  0021               	movlb	1	; select bank1
 13921  1CFC  00CD               	movwf	_DimmerLights22^(0+128)
 13922                           
 13923                           ;Dimmer_B1.c: 351: setDimmerLights_Initialization(2);
 13924  1CFD  3002               	movlw	2
 13925  1CFE  319F  2734  319C   	fcall	_setDimmerLights_Initialization
 13926                           
 13927                           ;Dimmer_B1.c: 360: Dimmer_Initialization();
 13928  1D01  319A  224E         	fcall	_Dimmer_Initialization
 13929  1D03  0008               	return
 13930  1D04                     __end_of_DimmerLights_Initialization:	
 13931                           
 13932                           	psect	text82
 13933  1F34                     __ptext82:	
 13934 ;; *************** function _setDimmerLights_Initialization *****************
 13935 ;; Defined at:
 13936 ;;		line 366 in file "../src/Dimmer_B1.c"
 13937 ;; Parameters:    Size  Location     Type
 13938 ;;  lights          1    wreg     unsigned char 
 13939 ;; Auto vars:     Size  Location     Type
 13940 ;;  lights          1    3[BANK0 ] unsigned char 
 13941 ;; Return value:  Size  Location     Type
 13942 ;;		None               void
 13943 ;; Registers used:
 13944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13945 ;; Tracked objects:
 13946 ;;		On entry : 0/0
 13947 ;;		On exit  : 0/0
 13948 ;;		Unchanged: 0/0
 13949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13953 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13954 ;;Total ram usage:        2 bytes
 13955 ;; Hardware stack levels used:    1
 13956 ;; Hardware stack levels required when called:    6
 13957 ;; This function calls:
 13958 ;;		_DimmerLightsPointSelect
 13959 ;; This function is called by:
 13960 ;;		_DimmerLights_Initialization
 13961 ;; This function uses a non-reentrant model
 13962 ;;
 13963                           
 13964                           
 13965                           ;psect for function _setDimmerLights_Initialization
 13966  1F34                     _setDimmerLights_Initialization:	
 13967                           
 13968                           ;incstack = 0
 13969                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13970                           ;setDimmerLights_Initialization@lights stored from wreg
 13971  1F34  0020               	movlb	0	; select bank0
 13972  1F35  00A3               	movwf	setDimmerLights_Initialization@lights
 13973                           
 13974                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 13975  1F36  0823               	movf	setDimmerLights_Initialization@lights,w
 13976  1F37  319C  2411         	fcall	_DimmerLightsPointSelect
 13977                           
 13978                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13979  1F39  3020               	movlw	32
 13980  1F3A  0020               	movlb	0	; select bank0
 13981  1F3B  00A2               	movwf	??_setDimmerLights_Initialization
 13982  1F3C  0877               	movf	_DimmerLights,w
 13983  1F3D  3E05               	addlw	5
 13984  1F3E  0086               	movwf	6
 13985  1F3F  3001               	movlw	1	; select bank2/3
 13986  1F40  0087               	movwf	7
 13987  1F41  0822               	movf	??_setDimmerLights_Initialization,w
 13988  1F42  0081               	movwf	1
 13989                           
 13990                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13991  1F43  303C               	movlw	60
 13992  1F44  00A2               	movwf	??_setDimmerLights_Initialization
 13993  1F45  0877               	movf	_DimmerLights,w
 13994  1F46  3E06               	addlw	6
 13995  1F47  0086               	movwf	6
 13996  1F48  3001               	movlw	1	; select bank2/3
 13997  1F49  0087               	movwf	7
 13998  1F4A  0822               	movf	??_setDimmerLights_Initialization,w
 13999  1F4B  0081               	movwf	1
 14000                           
 14001                           ;Dimmer_B1.c: 385: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14002  1F4C  0877               	movf	_DimmerLights,w
 14003  1F4D  3E06               	addlw	6
 14004  1F4E  0086               	movwf	6
 14005  1F4F  3001               	movlw	1	; select bank2/3
 14006  1F50  0087               	movwf	7
 14007  1F51  0801               	movf	1,w
 14008  1F52  00A2               	movwf	??_setDimmerLights_Initialization
 14009  1F53  0877               	movf	_DimmerLights,w
 14010  1F54  3E04               	addlw	4
 14011  1F55  0086               	movwf	6
 14012  1F56  3001               	movlw	1	; select bank2/3
 14013  1F57  0087               	movwf	7
 14014  1F58  0822               	movf	??_setDimmerLights_Initialization,w
 14015  1F59  0081               	movwf	1
 14016  1F5A  0008               	return
 14017  1F5B                     __end_of_setDimmerLights_Initialization:	
 14018                           
 14019                           	psect	text83
 14020  1A4E                     __ptext83:	
 14021 ;; *************** function _Dimmer_Initialization *****************
 14022 ;; Defined at:
 14023 ;;		line 946 in file "../src/Dimmer_B1.c"
 14024 ;; Parameters:    Size  Location     Type
 14025 ;;		None
 14026 ;; Auto vars:     Size  Location     Type
 14027 ;;		None
 14028 ;; Return value:  Size  Location     Type
 14029 ;;		None               void
 14030 ;; Registers used:
 14031 ;;		None
 14032 ;; Tracked objects:
 14033 ;;		On entry : 0/0
 14034 ;;		On exit  : 0/0
 14035 ;;		Unchanged: 0/0
 14036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;Total ram usage:        0 bytes
 14042 ;; Hardware stack levels used:    1
 14043 ;; Hardware stack levels required when called:    5
 14044 ;; This function calls:
 14045 ;;		Nothing
 14046 ;; This function is called by:
 14047 ;;		_DimmerLights_Initialization
 14048 ;; This function uses a non-reentrant model
 14049 ;;
 14050                           
 14051                           
 14052                           ;psect for function _Dimmer_Initialization
 14053  1A4E                     _Dimmer_Initialization:	
 14054                           
 14055                           ;incstack = 0
 14056                           ; Regs used in _Dimmer_Initialization: []
 14057  1A4E  0008               	return
 14058  1A4F                     __end_of_Dimmer_Initialization:	
 14059                           
 14060                           	psect	text84
 14061  1A9C                     __ptext84:	
 14062 ;; *************** function _DelayOff_Main *****************
 14063 ;; Defined at:
 14064 ;;		line 41 in file "../src/DelayOff_B1.c"
 14065 ;; Parameters:    Size  Location     Type
 14066 ;;		None
 14067 ;; Auto vars:     Size  Location     Type
 14068 ;;		None
 14069 ;; Return value:  Size  Location     Type
 14070 ;;		None               void
 14071 ;; Registers used:
 14072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14073 ;; Tracked objects:
 14074 ;;		On entry : 0/0
 14075 ;;		On exit  : 0/0
 14076 ;;		Unchanged: 0/0
 14077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14082 ;;Total ram usage:        0 bytes
 14083 ;; Hardware stack levels used:    1
 14084 ;; Hardware stack levels required when called:   11
 14085 ;; This function calls:
 14086 ;;		_DlyOff_Main
 14087 ;; This function is called by:
 14088 ;;		_main
 14089 ;; This function uses a non-reentrant model
 14090 ;;
 14091                           
 14092                           
 14093                           ;psect for function _DelayOff_Main
 14094  1A9C                     _DelayOff_Main:	
 14095                           
 14096                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 14097                           
 14098                           ;incstack = 0
 14099                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14100  1A9C  3001               	movlw	1
 14101  1A9D  3188  2076  319A   	fcall	_DlyOff_Main
 14102                           
 14103                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 14104  1AA0  3002               	movlw	2
 14105  1AA1  3188  2076         	fcall	_DlyOff_Main
 14106  1AA3  0008               	return
 14107  1AA4                     __end_of_DelayOff_Main:	
 14108                           
 14109                           	psect	text85
 14110  0876                     __ptext85:	
 14111 ;; *************** function _DlyOff_Main *****************
 14112 ;; Defined at:
 14113 ;;		line 62 in file "../src/DelayOff_B1.c"
 14114 ;; Parameters:    Size  Location     Type
 14115 ;;  sw              1    wreg     unsigned char 
 14116 ;; Auto vars:     Size  Location     Type
 14117 ;;  sw              1   72[BANK0 ] unsigned char 
 14118 ;; Return value:  Size  Location     Type
 14119 ;;		None               void
 14120 ;; Registers used:
 14121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14122 ;; Tracked objects:
 14123 ;;		On entry : 0/0
 14124 ;;		On exit  : 0/0
 14125 ;;		Unchanged: 0/0
 14126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14129 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14130 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14131 ;;Total ram usage:        3 bytes
 14132 ;; Hardware stack levels used:    1
 14133 ;; Hardware stack levels required when called:   10
 14134 ;; This function calls:
 14135 ;;		_DelayOffPointSelect
 14136 ;;		_getDimmerLights_Status
 14137 ;;		_setDimmerLights_SwOff
 14138 ;;		_setDimmerLights_SwOn
 14139 ;;		_setRF_DimmerLights
 14140 ;; This function is called by:
 14141 ;;		_DelayOff_Main
 14142 ;; This function uses a non-reentrant model
 14143 ;;
 14144                           
 14145                           
 14146                           ;psect for function _DlyOff_Main
 14147  0876                     _DlyOff_Main:	
 14148                           
 14149                           ;incstack = 0
 14150                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14151                           ;DlyOff_Main@sw stored from wreg
 14152  0876  0020               	movlb	0	; select bank0
 14153  0877  00E8               	movwf	DlyOff_Main@sw
 14154                           
 14155                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 14156  0878  0868               	movf	DlyOff_Main@sw,w
 14157  0879  319C  2471  3188   	fcall	_DelayOffPointSelect
 14158                           
 14159                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 14160  087C  0876               	movf	_DelayOff,w
 14161  087D  0086               	movwf	6
 14162  087E  3001               	movlw	1	; select bank2/3
 14163  087F  0087               	movwf	7
 14164  0880  1C81               	btfss	1,1
 14165  0881  0008               	return
 14166                           
 14167                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 14168  0882  0876               	movf	_DelayOff,w
 14169  0883  0086               	movwf	6
 14170  0884  3001               	movlw	1	; select bank2/3
 14171  0885  0087               	movwf	7
 14172  0886  3001               	movlw	1
 14173  0887  0781               	addwf	1,f
 14174  0888  3141               	addfsr 1,1
 14175  0889  1803               	skipnc
 14176  088A  0A81               	incf	1,f
 14177                           
 14178                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 14179  088B  0876               	movf	_DelayOff,w
 14180  088C  0086               	movwf	6
 14181  088D  3001               	movlw	1	; select bank2/3
 14182  088E  0087               	movwf	7
 14183  088F  3F40               	moviw [0]fsr1
 14184  0890  0020               	movlb	0	; select bank0
 14185  0891  00E6               	movwf	??_DlyOff_Main
 14186  0892  3F41               	moviw [1]fsr1
 14187  0893  00E7               	movwf	??_DlyOff_Main+1
 14188  0894  3016               	movlw	22
 14189  0895  0267               	subwf	??_DlyOff_Main+1,w
 14190  0896  3012               	movlw	18
 14191  0897  1903               	skipnz
 14192  0898  0266               	subwf	??_DlyOff_Main,w
 14193  0899  1C03               	skipc
 14194  089A  0008               	return
 14195                           
 14196                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 14197  089B  0876               	movf	_DelayOff,w
 14198  089C  0086               	movwf	6
 14199  089D  3001               	movlw	1	; select bank2/3
 14200  089E  0087               	movwf	7
 14201  089F  3000               	movlw	0
 14202  08A0  3FC0               	movwi [0]fsr1
 14203  08A1  3FC1               	movwi [1]fsr1
 14204                           
 14205                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 14206  08A2  3001               	movlw	1
 14207  08A3  00E6               	movwf	??_DlyOff_Main
 14208  08A4  0876               	movf	_DelayOff,w
 14209  08A5  0086               	movwf	6
 14210  08A6  3001               	movlw	1	; select bank2/3
 14211  08A7  0087               	movwf	7
 14212  08A8  0866               	movf	??_DlyOff_Main,w
 14213  08A9  0781               	addwf	1,f
 14214                           
 14215                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 14216  08AA  0876               	movf	_DelayOff,w
 14217  08AB  0086               	movwf	6
 14218  08AC  3001               	movlw	1	; select bank2/3
 14219  08AD  0087               	movwf	7
 14220  08AE  0876               	movf	_DelayOff,w
 14221  08AF  0084               	movwf	4
 14222  08B0  3001               	movlw	1	; select bank2/3
 14223  08B1  0085               	movwf	5
 14224  08B2  0800               	movf	0,w
 14225  08B3  0201               	subwf	1,w
 14226  08B4  1C03               	skipc
 14227  08B5  0008               	return
 14228                           
 14229                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 14230  08B6  0876               	movf	_DelayOff,w
 14231  08B7  0086               	movwf	6
 14232  08B8  3001               	movlw	1	; select bank2/3
 14233  08B9  0087               	movwf	7
 14234  08BA  0181               	clrf	1
 14235                           
 14236                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14237  08BB  0876               	movf	_DelayOff,w
 14238  08BC  0086               	movwf	6
 14239  08BD  3001               	movlw	1	; select bank2/3
 14240  08BE  0087               	movwf	7
 14241  08BF  1081               	bcf	1,1
 14242                           
 14243                           ;DelayOff_B1.c: 74: setDimmerLights_SwOn(sw);
 14244  08C0  0868               	movf	DlyOff_Main@sw,w
 14245  08C1  3193  2360  3188   	fcall	_setDimmerLights_SwOn
 14246                           
 14247                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 14248  08C4  0020               	movlb	0	; select bank0
 14249  08C5  0868               	movf	DlyOff_Main@sw,w
 14250  08C6  319B  2374  3188   	fcall	_getDimmerLights_Status
 14251  08C9  3A01               	xorlw	1
 14252  08CA  1D03               	skipz
 14253  08CB  28D1               	goto	l582
 14254                           
 14255                           ;DelayOff_B1.c: 76: setDimmerLights_SwOff(sw);
 14256  08CC  0020               	movlb	0	; select bank0
 14257  08CD  0868               	movf	DlyOff_Main@sw,w
 14258  08CE  3197  2740  3188   	fcall	_setDimmerLights_SwOff
 14259  08D1                     l582:	
 14260                           
 14261                           ;DelayOff_B1.c: 77: }
 14262                           ;DelayOff_B1.c: 78: setRF_DimmerLights(sw, 0);
 14263  08D1  0020               	movlb	0	; select bank0
 14264  08D2  01DD               	clrf	setRF_DimmerLights@on
 14265  08D3  0868               	movf	DlyOff_Main@sw,w
 14266  08D4  318A  2202         	fcall	_setRF_DimmerLights
 14267  08D6  0008               	return
 14268  08D7                     __end_of_DlyOff_Main:	
 14269                           
 14270                           	psect	text86
 14271  1360                     __ptext86:	
 14272 ;; *************** function _setDimmerLights_SwOn *****************
 14273 ;; Defined at:
 14274 ;;		line 558 in file "../src/Dimmer_B1.c"
 14275 ;; Parameters:    Size  Location     Type
 14276 ;;  sw              1    wreg     unsigned char 
 14277 ;; Auto vars:     Size  Location     Type
 14278 ;;  sw              1   68[BANK0 ] unsigned char 
 14279 ;;  idle            1   67[BANK0 ] unsigned char 
 14280 ;; Return value:  Size  Location     Type
 14281 ;;		None               void
 14282 ;; Registers used:
 14283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14284 ;; Tracked objects:
 14285 ;;		On entry : 0/0
 14286 ;;		On exit  : 0/0
 14287 ;;		Unchanged: 0/0
 14288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14290 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14292 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14293 ;;Total ram usage:        3 bytes
 14294 ;; Hardware stack levels used:    1
 14295 ;; Hardware stack levels required when called:    9
 14296 ;; This function calls:
 14297 ;;		_DimmerLightsPointSelect
 14298 ;;		_getAll_DimmerLights_AdjGO
 14299 ;;		_setBuz
 14300 ;;		_setDimmerLights_Trigger
 14301 ;;		_setRF_DimmerLights
 14302 ;;		_setTxData
 14303 ;; This function is called by:
 14304 ;;		_DlyOff_Main
 14305 ;;		_setRFSW_Control
 14306 ;;		_setSw_Main
 14307 ;; This function uses a non-reentrant model
 14308 ;;
 14309                           
 14310                           
 14311                           ;psect for function _setDimmerLights_SwOn
 14312  1360                     _setDimmerLights_SwOn:	
 14313                           
 14314                           ;incstack = 0
 14315                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14316                           ;setDimmerLights_SwOn@sw stored from wreg
 14317  1360  0020               	movlb	0	; select bank0
 14318  1361  00E4               	movwf	setDimmerLights_SwOn@sw
 14319                           
 14320                           ;Dimmer_B1.c: 559: DimmerLightsPointSelect(sw);
 14321  1362  0864               	movf	setDimmerLights_SwOn@sw,w
 14322  1363  319C  2411  3193   	fcall	_DimmerLightsPointSelect
 14323                           
 14324                           ;Dimmer_B1.c: 560: char idle = 0;
 14325  1366  0020               	movlb	0	; select bank0
 14326  1367  01E3               	clrf	setDimmerLights_SwOn@idle
 14327                           
 14328                           ;Dimmer_B1.c: 562: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
 14329  1368  319B  2384  3193   	fcall	_getAll_DimmerLights_AdjGO
 14330  136B  3A01               	xorlw	1
 14331  136C  3000               	movlw	0
 14332  136D  1903               	skipnz
 14333  136E  3001               	movlw	1
 14334  136F  0020               	movlb	0	; select bank0
 14335  1370  00E2               	movwf	??_setDimmerLights_SwOn
 14336  1371  0862               	movf	??_setDimmerLights_SwOn,w
 14337  1372  00E3               	movwf	setDimmerLights_SwOn@idle
 14338                           
 14339                           ;Dimmer_B1.c: 564: if (idle == 0) {
 14340  1373  08E3               	movf	setDimmerLights_SwOn@idle,f
 14341  1374  1D03               	skipz
 14342  1375  0008               	return
 14343                           
 14344                           ;Dimmer_B1.c: 565: DimmerLights->SwFlag = 1;
 14345  1376  0877               	movf	_DimmerLights,w
 14346  1377  3E09               	addlw	9
 14347  1378  0086               	movwf	6
 14348  1379  3001               	movlw	1	; select bank2/3
 14349  137A  0087               	movwf	7
 14350  137B  1701               	bsf	1,6
 14351                           
 14352                           ;Dimmer_B1.c: 566: setBuz(1, 100);
 14353  137C  3064               	movlw	100
 14354  137D  00A9               	movwf	setBuz@time
 14355  137E  3000               	movlw	0
 14356  137F  00AA               	movwf	setBuz@time+1
 14357  1380  3001               	movlw	1
 14358  1381  3196  2632  3193   	fcall	_setBuz
 14359                           
 14360                           ;Dimmer_B1.c: 567: if (DimmerLights->Status == 0) {
 14361  1384  0877               	movf	_DimmerLights,w
 14362  1385  0086               	movwf	6
 14363  1386  3001               	movlw	1	; select bank2/3
 14364  1387  0087               	movwf	7
 14365  1388  1A81               	btfsc	1,5
 14366  1389  2BA0               	goto	l8946
 14367                           
 14368                           ;Dimmer_B1.c: 568: DimmerLights->Status = 1;
 14369  138A  0877               	movf	_DimmerLights,w
 14370  138B  0086               	movwf	6
 14371  138C  3001               	movlw	1	; select bank2/3
 14372  138D  0087               	movwf	7
 14373  138E  1681               	bsf	1,5
 14374                           
 14375                           ;Dimmer_B1.c: 569: setDimmerLights_Trigger(sw, 1);
 14376  138F  0020               	movlb	0	; select bank0
 14377  1390  01A2               	clrf	setDimmerLights_Trigger@command
 14378  1391  0AA2               	incf	setDimmerLights_Trigger@command,f
 14379  1392  0864               	movf	setDimmerLights_SwOn@sw,w
 14380  1393  319D  25A3  3193   	fcall	_setDimmerLights_Trigger
 14381                           
 14382                           ;Dimmer_B1.c: 570: setRF_DimmerLights(sw, 1);
 14383  1396  0020               	movlb	0	; select bank0
 14384  1397  01DD               	clrf	setRF_DimmerLights@on
 14385  1398  0ADD               	incf	setRF_DimmerLights@on,f
 14386  1399  0864               	movf	setDimmerLights_SwOn@sw,w
 14387  139A  318A  2202  3193   	fcall	_setRF_DimmerLights
 14388                           
 14389                           ;Dimmer_B1.c: 571: setTxData();
 14390  139D  318D  2549         	fcall	_setTxData
 14391                           
 14392                           ;Dimmer_B1.c: 572: } else {
 14393  139F  0008               	return
 14394  13A0                     l8946:	
 14395                           
 14396                           ;Dimmer_B1.c: 573: DimmerLights->Status = 0;
 14397  13A0  0877               	movf	_DimmerLights,w
 14398  13A1  0086               	movwf	6
 14399  13A2  3001               	movlw	1	; select bank2/3
 14400  13A3  0087               	movwf	7
 14401  13A4  1281               	bcf	1,5
 14402  13A5  0008               	return
 14403  13A6                     __end_of_setDimmerLights_SwOn:	
 14404                           
 14405                           	psect	text87
 14406  1632                     __ptext87:	
 14407 ;; *************** function _setBuz *****************
 14408 ;; Defined at:
 14409 ;;		line 22 in file "../src/Buzzer_B1.c"
 14410 ;; Parameters:    Size  Location     Type
 14411 ;;  count           1    wreg     unsigned char 
 14412 ;;  time            2    9[BANK0 ] int 
 14413 ;; Auto vars:     Size  Location     Type
 14414 ;;  count           1   12[BANK0 ] unsigned char 
 14415 ;; Return value:  Size  Location     Type
 14416 ;;		None               void
 14417 ;; Registers used:
 14418 ;;		wreg, status,2, status,0, pclath, cstack
 14419 ;; Tracked objects:
 14420 ;;		On entry : 0/0
 14421 ;;		On exit  : 0/0
 14422 ;;		Unchanged: 0/0
 14423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14424 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14427 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14428 ;;Total ram usage:        4 bytes
 14429 ;; Hardware stack levels used:    1
 14430 ;; Hardware stack levels required when called:    6
 14431 ;; This function calls:
 14432 ;;		___awdiv
 14433 ;; This function is called by:
 14434 ;;		_setDimmerLights_Main
 14435 ;;		_setDimmerLights_SwOn
 14436 ;;		_my_MainTimer
 14437 ;;		_setMain_Exception
 14438 ;;		_setLog_Code
 14439 ;;		_setControl_Lights_Table
 14440 ;;		_setSw_Main
 14441 ;; This function uses a non-reentrant model
 14442 ;;
 14443                           
 14444                           
 14445                           ;psect for function _setBuz
 14446  1632                     _setBuz:	
 14447                           
 14448                           ;incstack = 0
 14449                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 14450                           ;setBuz@count stored from wreg
 14451  1632  0020               	movlb	0	; select bank0
 14452  1633  00AC               	movwf	setBuz@count
 14453                           
 14454                           ;Buzzer_B1.c: 23: time /= 10;
 14455  1634  300A               	movlw	10
 14456  1635  00A0               	movwf	___awdiv@divisor
 14457  1636  3000               	movlw	0
 14458  1637  00A1               	movwf	___awdiv@divisor+1
 14459  1638  082A               	movf	setBuz@time+1,w
 14460  1639  01A3               	clrf	___awdiv@dividend+1
 14461  163A  07A3               	addwf	___awdiv@dividend+1,f
 14462  163B  0829               	movf	setBuz@time,w
 14463  163C  01A2               	clrf	___awdiv@dividend
 14464  163D  07A2               	addwf	___awdiv@dividend,f
 14465  163E  3195  252F  3196   	fcall	___awdiv
 14466  1641  0020               	movlb	0	; select bank0
 14467  1642  0821               	movf	?___awdiv+1,w
 14468  1643  01AA               	clrf	setBuz@time+1
 14469  1644  07AA               	addwf	setBuz@time+1,f
 14470  1645  0820               	movf	?___awdiv,w
 14471  1646  01A9               	clrf	setBuz@time
 14472  1647  07A9               	addwf	setBuz@time,f
 14473                           
 14474                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 14475  1648  0021               	movlb	1	; select bank1
 14476  1649  1C30               	btfss	_Buz1^(0+128),0
 14477  164A  0008               	return
 14478                           
 14479                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 14480  164B  18B0               	btfsc	_Buz1^(0+128),1
 14481  164C  2E63               	goto	l96
 14482                           
 14483                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 14484  164D  14B0               	bsf	_Buz1^(0+128),1
 14485                           
 14486                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 14487  164E  01B1               	clrf	(_Buz1^(0+128)+1)
 14488  164F  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 14489                           
 14490                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 14491  1650  0020               	movlb	0	; select bank0
 14492  1651  082C               	movf	setBuz@count,w
 14493  1652  00AB               	movwf	??_setBuz
 14494  1653  082B               	movf	??_setBuz,w
 14495  1654  0021               	movlb	1	; select bank1
 14496  1655  00B3               	movwf	(_Buz1^(0+128)+3)
 14497                           
 14498                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 14499  1656  0020               	movlb	0	; select bank0
 14500  1657  082A               	movf	setBuz@time+1,w
 14501  1658  0021               	movlb	1	; select bank1
 14502  1659  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 14503  165A  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 14504  165B  0020               	movlb	0	; select bank0
 14505  165C  0829               	movf	setBuz@time,w
 14506  165D  0021               	movlb	1	; select bank1
 14507  165E  01B6               	clrf	(_Buz1^(0+128)+6)
 14508  165F  07B6               	addwf	(_Buz1^(0+128)+6),f
 14509                           
 14510                           ;Buzzer_B1.c: 30: RB3 = 1;
 14511  1660  0020               	movlb	0	; select bank0
 14512  1661  158D               	bsf	13,3	;volatile
 14513                           
 14514                           ;Buzzer_B1.c: 31: } else {
 14515  1662  0008               	return
 14516  1663                     l96:	
 14517                           
 14518                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 14519  1663  19B0               	btfsc	_Buz1^(0+128),3
 14520  1664  2E77               	goto	l98
 14521                           
 14522                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 14523  1665  15B0               	bsf	_Buz1^(0+128),3
 14524                           
 14525                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 14526  1666  0020               	movlb	0	; select bank0
 14527  1667  082C               	movf	setBuz@count,w
 14528  1668  00AB               	movwf	??_setBuz
 14529  1669  082B               	movf	??_setBuz,w
 14530  166A  0021               	movlb	1	; select bank1
 14531  166B  00B4               	movwf	(_Buz1^(0+128)+4)
 14532                           
 14533                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 14534  166C  0020               	movlb	0	; select bank0
 14535  166D  082A               	movf	setBuz@time+1,w
 14536  166E  0021               	movlb	1	; select bank1
 14537  166F  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 14538  1670  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 14539  1671  0020               	movlb	0	; select bank0
 14540  1672  0829               	movf	setBuz@time,w
 14541  1673  0021               	movlb	1	; select bank1
 14542  1674  01B8               	clrf	(_Buz1^(0+128)+8)
 14543  1675  07B8               	addwf	(_Buz1^(0+128)+8),f
 14544                           
 14545                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 14546  1676  0008               	return
 14547  1677                     l98:	
 14548  1677  1A30               	btfsc	_Buz1^(0+128),4
 14549  1678  0008               	return
 14550                           
 14551                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 14552  1679  1630               	bsf	_Buz1^(0+128),4
 14553                           
 14554                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 14555  167A  0020               	movlb	0	; select bank0
 14556  167B  082C               	movf	setBuz@count,w
 14557  167C  00AB               	movwf	??_setBuz
 14558  167D  082B               	movf	??_setBuz,w
 14559  167E  0021               	movlb	1	; select bank1
 14560  167F  00B5               	movwf	(_Buz1^(0+128)+5)
 14561                           
 14562                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 14563  1680  0020               	movlb	0	; select bank0
 14564  1681  082A               	movf	setBuz@time+1,w
 14565  1682  0021               	movlb	1	; select bank1
 14566  1683  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 14567  1684  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 14568  1685  0020               	movlb	0	; select bank0
 14569  1686  0829               	movf	setBuz@time,w
 14570  1687  0021               	movlb	1	; select bank1
 14571  1688  01BA               	clrf	(_Buz1^(0+128)+10)
 14572  1689  07BA               	addwf	(_Buz1^(0+128)+10),f
 14573  168A  0008               	return
 14574  168B                     __end_of_setBuz:	
 14575                           
 14576                           	psect	text88
 14577  152F                     __ptext88:	
 14578 ;; *************** function ___awdiv *****************
 14579 ;; Defined at:
 14580 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14581 ;; Parameters:    Size  Location     Type
 14582 ;;  divisor         2    0[BANK0 ] int 
 14583 ;;  dividend        2    2[BANK0 ] int 
 14584 ;; Auto vars:     Size  Location     Type
 14585 ;;  quotient        2    7[BANK0 ] int 
 14586 ;;  sign            1    6[BANK0 ] unsigned char 
 14587 ;;  counter         1    5[BANK0 ] unsigned char 
 14588 ;; Return value:  Size  Location     Type
 14589 ;;                  2    0[BANK0 ] int 
 14590 ;; Registers used:
 14591 ;;		wreg, status,2, status,0
 14592 ;; Tracked objects:
 14593 ;;		On entry : 0/0
 14594 ;;		On exit  : 0/0
 14595 ;;		Unchanged: 0/0
 14596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14597 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14598 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14600 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14601 ;;Total ram usage:        9 bytes
 14602 ;; Hardware stack levels used:    1
 14603 ;; Hardware stack levels required when called:    5
 14604 ;; This function calls:
 14605 ;;		Nothing
 14606 ;; This function is called by:
 14607 ;;		_setBuz
 14608 ;; This function uses a non-reentrant model
 14609 ;;
 14610                           
 14611                           
 14612                           ;psect for function ___awdiv
 14613  152F                     ___awdiv:	
 14614                           
 14615                           ;incstack = 0
 14616                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14617  152F  0020               	movlb	0	; select bank0
 14618  1530  01A6               	clrf	___awdiv@sign
 14619  1531  1FA1               	btfss	___awdiv@divisor+1,7
 14620  1532  2D3A               	goto	l8740
 14621  1533  09A0               	comf	___awdiv@divisor,f
 14622  1534  09A1               	comf	___awdiv@divisor+1,f
 14623  1535  0AA0               	incf	___awdiv@divisor,f
 14624  1536  1903               	skipnz
 14625  1537  0AA1               	incf	___awdiv@divisor+1,f
 14626  1538  01A6               	clrf	___awdiv@sign
 14627  1539  0AA6               	incf	___awdiv@sign,f
 14628  153A                     l8740:	
 14629  153A  1FA3               	btfss	___awdiv@dividend+1,7
 14630  153B  2D45               	goto	l8746
 14631  153C  09A2               	comf	___awdiv@dividend,f
 14632  153D  09A3               	comf	___awdiv@dividend+1,f
 14633  153E  0AA2               	incf	___awdiv@dividend,f
 14634  153F  1903               	skipnz
 14635  1540  0AA3               	incf	___awdiv@dividend+1,f
 14636  1541  3001               	movlw	1
 14637  1542  00A4               	movwf	??___awdiv
 14638  1543  0824               	movf	??___awdiv,w
 14639  1544  06A6               	xorwf	___awdiv@sign,f
 14640  1545                     l8746:	
 14641  1545  01A7               	clrf	___awdiv@quotient
 14642  1546  01A8               	clrf	___awdiv@quotient+1
 14643  1547  0821               	movf	___awdiv@divisor+1,w
 14644  1548  0420               	iorwf	___awdiv@divisor,w
 14645  1549  1903               	skipnz
 14646  154A  2D74               	goto	l8768
 14647  154B  01A5               	clrf	___awdiv@counter
 14648  154C  0AA5               	incf	___awdiv@counter,f
 14649  154D                     l8756:	
 14650  154D  1BA1               	btfsc	___awdiv@divisor+1,7
 14651  154E  2D59               	goto	l8758
 14652  154F  3001               	movlw	1
 14653  1550                     u9315:	
 14654  1550  35A0               	lslf	___awdiv@divisor,f
 14655  1551  0DA1               	rlf	___awdiv@divisor+1,f
 14656  1552  0B89               	decfsz	9,f
 14657  1553  2D50               	goto	u9315
 14658  1554  3001               	movlw	1
 14659  1555  00A4               	movwf	??___awdiv
 14660  1556  0824               	movf	??___awdiv,w
 14661  1557  07A5               	addwf	___awdiv@counter,f
 14662  1558  2D4D               	goto	l8756
 14663  1559                     l8758:	
 14664  1559  3001               	movlw	1
 14665  155A                     u9335:	
 14666  155A  35A7               	lslf	___awdiv@quotient,f
 14667  155B  0DA8               	rlf	___awdiv@quotient+1,f
 14668  155C  0B89               	decfsz	9,f
 14669  155D  2D5A               	goto	u9335
 14670  155E  0821               	movf	___awdiv@divisor+1,w
 14671  155F  0223               	subwf	___awdiv@dividend+1,w
 14672  1560  1D03               	skipz
 14673  1561  2D64               	goto	u9345
 14674  1562  0820               	movf	___awdiv@divisor,w
 14675  1563  0222               	subwf	___awdiv@dividend,w
 14676  1564                     u9345:	
 14677  1564  1C03               	skipc
 14678  1565  2D6B               	goto	l8764
 14679  1566  0820               	movf	___awdiv@divisor,w
 14680  1567  02A2               	subwf	___awdiv@dividend,f
 14681  1568  0821               	movf	___awdiv@divisor+1,w
 14682  1569  3BA3               	subwfb	___awdiv@dividend+1,f
 14683  156A  1427               	bsf	___awdiv@quotient,0
 14684  156B                     l8764:	
 14685  156B  3001               	movlw	1
 14686  156C                     u9355:	
 14687  156C  36A1               	lsrf	___awdiv@divisor+1,f
 14688  156D  0CA0               	rrf	___awdiv@divisor,f
 14689  156E  0B89               	decfsz	9,f
 14690  156F  2D6C               	goto	u9355
 14691  1570  3001               	movlw	1
 14692  1571  02A5               	subwf	___awdiv@counter,f
 14693  1572  1D03               	btfss	3,2
 14694  1573  2D59               	goto	l8758
 14695  1574                     l8768:	
 14696  1574  0826               	movf	___awdiv@sign,w
 14697  1575  1903               	btfsc	3,2
 14698  1576  2D7C               	goto	l8772
 14699  1577  09A7               	comf	___awdiv@quotient,f
 14700  1578  09A8               	comf	___awdiv@quotient+1,f
 14701  1579  0AA7               	incf	___awdiv@quotient,f
 14702  157A  1903               	skipnz
 14703  157B  0AA8               	incf	___awdiv@quotient+1,f
 14704  157C                     l8772:	
 14705  157C  0828               	movf	___awdiv@quotient+1,w
 14706  157D  01A1               	clrf	?___awdiv+1
 14707  157E  07A1               	addwf	?___awdiv+1,f
 14708  157F  0827               	movf	___awdiv@quotient,w
 14709  1580  01A0               	clrf	?___awdiv
 14710  1581  07A0               	addwf	?___awdiv,f
 14711  1582  0008               	return
 14712  1583                     __end_of___awdiv:	
 14713                           
 14714                           	psect	text89
 14715  1B84                     __ptext89:	
 14716 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 14717 ;; Defined at:
 14718 ;;		line 543 in file "../src/Dimmer_B1.c"
 14719 ;; Parameters:    Size  Location     Type
 14720 ;;		None
 14721 ;; Auto vars:     Size  Location     Type
 14722 ;;  adjgo           1    1[BANK0 ] unsigned char 
 14723 ;; Return value:  Size  Location     Type
 14724 ;;                  1    wreg      unsigned char 
 14725 ;; Registers used:
 14726 ;;		wreg, status,2
 14727 ;; Tracked objects:
 14728 ;;		On entry : 0/0
 14729 ;;		On exit  : 0/0
 14730 ;;		Unchanged: 0/0
 14731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14735 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14736 ;;Total ram usage:        3 bytes
 14737 ;; Hardware stack levels used:    1
 14738 ;; Hardware stack levels required when called:    5
 14739 ;; This function calls:
 14740 ;;		Nothing
 14741 ;; This function is called by:
 14742 ;;		_setDimmerLights_SwOn
 14743 ;;		_setDimmerLights_AdjControl
 14744 ;;		_Load_Main
 14745 ;; This function uses a non-reentrant model
 14746 ;;
 14747                           
 14748                           
 14749                           ;psect for function _getAll_DimmerLights_AdjGO
 14750  1B84                     _getAll_DimmerLights_AdjGO:	
 14751                           
 14752                           ;Dimmer_B1.c: 544: char adjgo = 0;
 14753                           
 14754                           ;incstack = 0
 14755                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 14756  1B84  0020               	movlb	0	; select bank0
 14757  1B85  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 14758                           
 14759                           ;Dimmer_B1.c: 549: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 14760  1B86  01A2               	clrf	_getAll_DimmerLights_AdjGO$2569
 14761  1B87  0AA2               	incf	_getAll_DimmerLights_AdjGO$2569,f
 14762  1B88  0023               	movlb	3	; select bank3
 14763  1B89  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
 14764  1B8A  19D5               	btfsc	(_DimmerLights2^(0+384)+8),3
 14765  1B8B  2B8E               	goto	l8858
 14766  1B8C  0020               	movlb	0	; select bank0
 14767  1B8D  01A2               	clrf	_getAll_DimmerLights_AdjGO$2569
 14768  1B8E                     l8858:	
 14769  1B8E  0020               	movlb	0	; select bank0
 14770  1B8F  0822               	movf	_getAll_DimmerLights_AdjGO$2569,w
 14771  1B90  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 14772  1B91  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 14773  1B92  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 14774                           
 14775                           ;Dimmer_B1.c: 554: return adjgo;
 14776  1B93  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 14777  1B94  0008               	return
 14778  1B95                     __end_of_getAll_DimmerLights_AdjGO:	
 14779                           
 14780                           	psect	text90
 14781  1740                     __ptext90:	
 14782 ;; *************** function _setDimmerLights_SwOff *****************
 14783 ;; Defined at:
 14784 ;;		line 579 in file "../src/Dimmer_B1.c"
 14785 ;; Parameters:    Size  Location     Type
 14786 ;;  sw              1    wreg     unsigned char 
 14787 ;; Auto vars:     Size  Location     Type
 14788 ;;  sw              1   69[BANK0 ] unsigned char 
 14789 ;;  command         1   68[BANK0 ] unsigned char 
 14790 ;; Return value:  Size  Location     Type
 14791 ;;		None               void
 14792 ;; Registers used:
 14793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14794 ;; Tracked objects:
 14795 ;;		On entry : 0/0
 14796 ;;		On exit  : 0/0
 14797 ;;		Unchanged: 0/0
 14798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14800 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14801 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14802 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14803 ;;Total ram usage:        4 bytes
 14804 ;; Hardware stack levels used:    1
 14805 ;; Hardware stack levels required when called:    9
 14806 ;; This function calls:
 14807 ;;		_DimmerLightsPointSelect
 14808 ;;		_setDelayOff_GO
 14809 ;;		_setDimmerLights_Trigger
 14810 ;;		_setDimmerLights_TriggerAdj
 14811 ;;		_setRF_DimmerLights
 14812 ;;		_setTxData
 14813 ;; This function is called by:
 14814 ;;		_DlyOff_Main
 14815 ;;		_setDimmerLights_ErrorClose
 14816 ;;		_setRFSW_Control
 14817 ;;		_setSw_Main
 14818 ;; This function uses a non-reentrant model
 14819 ;;
 14820                           
 14821                           
 14822                           ;psect for function _setDimmerLights_SwOff
 14823  1740                     _setDimmerLights_SwOff:	
 14824                           
 14825                           ;incstack = 0
 14826                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14827                           ;setDimmerLights_SwOff@sw stored from wreg
 14828  1740  0020               	movlb	0	; select bank0
 14829  1741  00E5               	movwf	setDimmerLights_SwOff@sw
 14830                           
 14831                           ;Dimmer_B1.c: 580: DimmerLightsPointSelect(sw);
 14832  1742  0865               	movf	setDimmerLights_SwOff@sw,w
 14833  1743  319C  2411  3197   	fcall	_DimmerLightsPointSelect
 14834                           
 14835                           ;Dimmer_B1.c: 581: char command = DimmerLights->Status == 1 ? 1 : 0;
 14836  1746  0877               	movf	_DimmerLights,w
 14837  1747  0086               	movwf	6
 14838  1748  3001               	movlw	1	; select bank2/3
 14839  1749  0087               	movwf	7
 14840  174A  3000               	movlw	0
 14841  174B  1A81               	btfsc	1,5
 14842  174C  3001               	movlw	1
 14843  174D  0020               	movlb	0	; select bank0
 14844  174E  00E4               	movwf	setDimmerLights_SwOff@command
 14845                           
 14846                           ;Dimmer_B1.c: 582: if (DimmerLights->SwFlag == 1) {
 14847  174F  0877               	movf	_DimmerLights,w
 14848  1750  3E09               	addlw	9
 14849  1751  0086               	movwf	6
 14850  1752  3001               	movlw	1	; select bank2/3
 14851  1753  0087               	movwf	7
 14852  1754  1F01               	btfss	1,6
 14853  1755  0008               	return
 14854                           
 14855                           ;Dimmer_B1.c: 583: DimmerLights->SwFlag = 0;
 14856  1756  0877               	movf	_DimmerLights,w
 14857  1757  3E09               	addlw	9
 14858  1758  0086               	movwf	6
 14859  1759  3001               	movlw	1	; select bank2/3
 14860  175A  0087               	movwf	7
 14861  175B  1301               	bcf	1,6
 14862                           
 14863                           ;Dimmer_B1.c: 584: if (DimmerLights->Status == 1) {
 14864  175C  0877               	movf	_DimmerLights,w
 14865  175D  0086               	movwf	6
 14866  175E  3001               	movlw	1	; select bank2/3
 14867  175F  0087               	movwf	7
 14868  1760  1E81               	btfss	1,5
 14869  1761  2F87               	goto	l8972
 14870                           
 14871                           ;Dimmer_B1.c: 585: if (DimmerLights->SwAdj == 1) {
 14872  1762  0877               	movf	_DimmerLights,w
 14873  1763  3E09               	addlw	9
 14874  1764  0086               	movwf	6
 14875  1765  3001               	movlw	1	; select bank2/3
 14876  1766  0087               	movwf	7
 14877  1767  1F81               	btfss	1,7
 14878  1768  2F93               	goto	l860
 14879                           
 14880                           ;Dimmer_B1.c: 586: DimmerLights->SwAdj = 0;
 14881  1769  0877               	movf	_DimmerLights,w
 14882  176A  3E09               	addlw	9
 14883  176B  0086               	movwf	6
 14884  176C  3001               	movlw	1	; select bank2/3
 14885  176D  0087               	movwf	7
 14886  176E  1381               	bcf	1,7
 14887                           
 14888                           ;Dimmer_B1.c: 587: setDimmerLights_TriggerAdj(sw, 0);
 14889  176F  01A2               	clrf	setDimmerLights_TriggerAdj@command
 14890  1770  0865               	movf	setDimmerLights_SwOff@sw,w
 14891  1771  319D  25FF  3197   	fcall	_setDimmerLights_TriggerAdj
 14892                           
 14893                           ;Dimmer_B1.c: 588: product->Data[17]=product->Data[26 + sw];
 14894  1774  0020               	movlb	0	; select bank0
 14895  1775  0865               	movf	setDimmerLights_SwOff@sw,w
 14896  1776  3E1A               	addlw	26
 14897  1777  077B               	addwf	_product,w
 14898  1778  00E2               	movwf	??_setDimmerLights_SwOff
 14899  1779  0862               	movf	??_setDimmerLights_SwOff,w
 14900  177A  0086               	movwf	6
 14901  177B  3002               	movlw	2	; select bank4/5
 14902  177C  0087               	movwf	7
 14903  177D  0801               	movf	1,w
 14904  177E  00E3               	movwf	??_setDimmerLights_SwOff+1
 14905  177F  087B               	movf	_product,w
 14906  1780  3E11               	addlw	17
 14907  1781  0086               	movwf	6
 14908  1782  3002               	movlw	2	; select bank4/5
 14909  1783  0087               	movwf	7
 14910  1784  0863               	movf	??_setDimmerLights_SwOff+1,w
 14911  1785  0081               	movwf	1
 14912                           
 14913                           ;Dimmer_B1.c: 591: }
 14914                           ;Dimmer_B1.c: 592: } else {
 14915  1786  2F93               	goto	l860
 14916  1787                     l8972:	
 14917                           
 14918                           ;Dimmer_B1.c: 593: setDimmerLights_Trigger(sw, 0);
 14919  1787  01A2               	clrf	setDimmerLights_Trigger@command
 14920  1788  0865               	movf	setDimmerLights_SwOff@sw,w
 14921  1789  319D  25A3  3197   	fcall	_setDimmerLights_Trigger
 14922                           
 14923                           ;Dimmer_B1.c: 594: setDelayOff_GO(sw, 0, 0);
 14924  178C  0020               	movlb	0	; select bank0
 14925  178D  01AA               	clrf	setDelayOff_GO@command
 14926  178E  01AB               	clrf	setDelayOff_GO@value
 14927  178F  0865               	movf	setDimmerLights_SwOff@sw,w
 14928  1790  3197  279F  3197   	fcall	_setDelayOff_GO
 14929  1793                     l860:	
 14930                           
 14931                           ;Dimmer_B1.c: 597: }
 14932                           ;Dimmer_B1.c: 598: setRF_DimmerLights(sw, command);
 14933  1793  0020               	movlb	0	; select bank0
 14934  1794  0864               	movf	setDimmerLights_SwOff@command,w
 14935  1795  00E2               	movwf	??_setDimmerLights_SwOff
 14936  1796  0862               	movf	??_setDimmerLights_SwOff,w
 14937  1797  00DD               	movwf	setRF_DimmerLights@on
 14938  1798  0865               	movf	setDimmerLights_SwOff@sw,w
 14939  1799  318A  2202  3197   	fcall	_setRF_DimmerLights
 14940                           
 14941                           ;Dimmer_B1.c: 599: setTxData();
 14942  179C  318D  2549         	fcall	_setTxData
 14943  179E  0008               	return
 14944  179F                     __end_of_setDimmerLights_SwOff:	
 14945                           
 14946                           	psect	text91
 14947  0D49                     __ptext91:	
 14948 ;; *************** function _setTxData *****************
 14949 ;; Defined at:
 14950 ;;		line 207 in file "../src/RF_Control_B1.c"
 14951 ;; Parameters:    Size  Location     Type
 14952 ;;		None
 14953 ;; Auto vars:     Size  Location     Type
 14954 ;;  i               1    0        unsigned char 
 14955 ;; Return value:  Size  Location     Type
 14956 ;;		None               void
 14957 ;; Registers used:
 14958 ;;		wreg, fsr1l, fsr1h
 14959 ;; Tracked objects:
 14960 ;;		On entry : 0/0
 14961 ;;		On exit  : 0/0
 14962 ;;		Unchanged: 0/0
 14963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14967 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14968 ;;Total ram usage:        1 bytes
 14969 ;; Hardware stack levels used:    1
 14970 ;; Hardware stack levels required when called:    5
 14971 ;; This function calls:
 14972 ;;		Nothing
 14973 ;; This function is called by:
 14974 ;;		_setDimmerLights_SwOn
 14975 ;;		_setDimmerLights_SwOff
 14976 ;;		_setDimmerLights_Adj
 14977 ;;		_my_MainTimer
 14978 ;;		_setControl_Lights_Table
 14979 ;;		_setRFSW_AdjControl
 14980 ;; This function uses a non-reentrant model
 14981 ;;
 14982                           
 14983                           
 14984                           ;psect for function _setTxData
 14985  0D49                     _setTxData:	
 14986                           
 14987                           ;RF_Control_B1.c: 208: char i;
 14988                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
 14989                           
 14990                           ;incstack = 0
 14991                           ; Regs used in _setTxData: [wregfsr1]
 14992  0D49  0021               	movlb	1	; select bank1
 14993  0D4A  1C3C               	btfss	_RF1^(0+128),0
 14994  0D4B  0008               	return
 14995                           
 14996                           ;RF_Control_B1.c: 211: RF1.TransceiveGO = 1;
 14997  0D4C  153C               	bsf	_RF1^(0+128),2
 14998                           
 14999                           ;RF_Control_B1.c: 212: RF1.RunTime = 20;
 15000  0D4D  3014               	movlw	20
 15001  0D4E  00C3               	movwf	(_RF1^(0+128)+7)
 15002  0D4F  3000               	movlw	0
 15003  0D50  00C4               	movwf	(_RF1^(0+128)+8)
 15004                           
 15005                           ;RF_Control_B1.c: 221: RF_Data[0] = 0x63;
 15006  0D51  3063               	movlw	99
 15007  0D52  0020               	movlb	0	; select bank0
 15008  0D53  00A0               	movwf	??_setTxData
 15009  0D54  0820               	movf	??_setTxData,w
 15010  0D55  0023               	movlb	3	; select bank3
 15011  0D56  00A0               	movwf	_RF_Data^(0+384)
 15012                           
 15013                           ;RF_Control_B1.c: 222: RF_Data[1] = 0x02;
 15014  0D57  3002               	movlw	2
 15015  0D58  0020               	movlb	0	; select bank0
 15016  0D59  00A0               	movwf	??_setTxData
 15017  0D5A  0820               	movf	??_setTxData,w
 15018  0D5B  0023               	movlb	3	; select bank3
 15019  0D5C  00A1               	movwf	(_RF_Data^(0+384)+1)
 15020                           
 15021                           ;RF_Control_B1.c: 223: RF_Data[2] = product->Data[2];
 15022  0D5D  087B               	movf	_product,w
 15023  0D5E  0086               	movwf	6
 15024  0D5F  3002               	movlw	2	; select bank4/5
 15025  0D60  0087               	movwf	7
 15026  0D61  3002               	movlw	2	; select bank4/5
 15027  0D62  3F42               	moviw [2]fsr1
 15028  0D63  00A2               	movwf	(_RF_Data^(0+384)+2)
 15029                           
 15030                           ;RF_Control_B1.c: 224: RF_Data[3] = product->Data[3];
 15031  0D64  087B               	movf	_product,w
 15032  0D65  0086               	movwf	6
 15033  0D66  3002               	movlw	2	; select bank4/5
 15034  0D67  0087               	movwf	7
 15035  0D68  3002               	movlw	2	; select bank4/5
 15036  0D69  3F43               	moviw [3]fsr1
 15037  0D6A  00A3               	movwf	(_RF_Data^(0+384)+3)
 15038                           
 15039                           ;RF_Control_B1.c: 225: RF_Data[4] = product->Data[4];
 15040  0D6B  087B               	movf	_product,w
 15041  0D6C  0086               	movwf	6
 15042  0D6D  3002               	movlw	2	; select bank4/5
 15043  0D6E  0087               	movwf	7
 15044  0D6F  3002               	movlw	2	; select bank4/5
 15045  0D70  3F44               	moviw [4]fsr1
 15046  0D71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15047                           
 15048                           ;RF_Control_B1.c: 226: RF_Data[5] = product->Data[5];
 15049  0D72  087B               	movf	_product,w
 15050  0D73  0086               	movwf	6
 15051  0D74  3002               	movlw	2	; select bank4/5
 15052  0D75  0087               	movwf	7
 15053  0D76  3002               	movlw	2	; select bank4/5
 15054  0D77  3F45               	moviw [5]fsr1
 15055  0D78  00A5               	movwf	(_RF_Data^(0+384)+5)
 15056                           
 15057                           ;RF_Control_B1.c: 227: RF_Data[6] = product->Data[6];
 15058  0D79  087B               	movf	_product,w
 15059  0D7A  0086               	movwf	6
 15060  0D7B  3002               	movlw	2	; select bank4/5
 15061  0D7C  0087               	movwf	7
 15062  0D7D  3002               	movlw	2	; select bank4/5
 15063  0D7E  3F46               	moviw [6]fsr1
 15064  0D7F  00A6               	movwf	(_RF_Data^(0+384)+6)
 15065                           
 15066                           ;RF_Control_B1.c: 228: RF_Data[7] = product->Data[7];
 15067  0D80  087B               	movf	_product,w
 15068  0D81  0086               	movwf	6
 15069  0D82  3002               	movlw	2	; select bank4/5
 15070  0D83  0087               	movwf	7
 15071  0D84  3002               	movlw	2	; select bank4/5
 15072  0D85  3F47               	moviw [7]fsr1
 15073  0D86  00A7               	movwf	(_RF_Data^(0+384)+7)
 15074                           
 15075                           ;RF_Control_B1.c: 229: RF_Data[8] = product->Data[8];
 15076  0D87  087B               	movf	_product,w
 15077  0D88  0086               	movwf	6
 15078  0D89  3002               	movlw	2	; select bank4/5
 15079  0D8A  0087               	movwf	7
 15080  0D8B  3002               	movlw	2	; select bank4/5
 15081  0D8C  3F48               	moviw [8]fsr1
 15082  0D8D  00A8               	movwf	(_RF_Data^(0+384)+8)
 15083                           
 15084                           ;RF_Control_B1.c: 230: RF_Data[9] = product->Data[9];
 15085  0D8E  087B               	movf	_product,w
 15086  0D8F  0086               	movwf	6
 15087  0D90  3002               	movlw	2	; select bank4/5
 15088  0D91  0087               	movwf	7
 15089  0D92  3002               	movlw	2	; select bank4/5
 15090  0D93  3F49               	moviw [9]fsr1
 15091  0D94  00A9               	movwf	(_RF_Data^(0+384)+9)
 15092                           
 15093                           ;RF_Control_B1.c: 231: RF_Data[10] = product->Data[10];
 15094  0D95  087B               	movf	_product,w
 15095  0D96  0086               	movwf	6
 15096  0D97  3002               	movlw	2	; select bank4/5
 15097  0D98  0087               	movwf	7
 15098  0D99  3002               	movlw	2	; select bank4/5
 15099  0D9A  3F4A               	moviw [10]fsr1
 15100  0D9B  00AA               	movwf	(_RF_Data^(0+384)+10)
 15101                           
 15102                           ;RF_Control_B1.c: 232: RF_Data[11] = product->Data[11];
 15103  0D9C  087B               	movf	_product,w
 15104  0D9D  0086               	movwf	6
 15105  0D9E  3002               	movlw	2	; select bank4/5
 15106  0D9F  0087               	movwf	7
 15107  0DA0  3002               	movlw	2	; select bank4/5
 15108  0DA1  3F4B               	moviw [11]fsr1
 15109  0DA2  00AB               	movwf	(_RF_Data^(0+384)+11)
 15110                           
 15111                           ;RF_Control_B1.c: 233: RF_Data[12] = product->Data[12];
 15112  0DA3  087B               	movf	_product,w
 15113  0DA4  0086               	movwf	6
 15114  0DA5  3002               	movlw	2	; select bank4/5
 15115  0DA6  0087               	movwf	7
 15116  0DA7  3002               	movlw	2	; select bank4/5
 15117  0DA8  3F4C               	moviw [12]fsr1
 15118  0DA9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15119                           
 15120                           ;RF_Control_B1.c: 234: RF_Data[13] = product->Data[13];
 15121  0DAA  087B               	movf	_product,w
 15122  0DAB  0086               	movwf	6
 15123  0DAC  3002               	movlw	2	; select bank4/5
 15124  0DAD  0087               	movwf	7
 15125  0DAE  3002               	movlw	2	; select bank4/5
 15126  0DAF  3F4D               	moviw [13]fsr1
 15127  0DB0  00AD               	movwf	(_RF_Data^(0+384)+13)
 15128                           
 15129                           ;RF_Control_B1.c: 235: RF_Data[14] = product->Data[14];
 15130  0DB1  087B               	movf	_product,w
 15131  0DB2  0086               	movwf	6
 15132  0DB3  3002               	movlw	2	; select bank4/5
 15133  0DB4  0087               	movwf	7
 15134  0DB5  3002               	movlw	2	; select bank4/5
 15135  0DB6  3F4E               	moviw [14]fsr1
 15136  0DB7  00AE               	movwf	(_RF_Data^(0+384)+14)
 15137                           
 15138                           ;RF_Control_B1.c: 236: RF_Data[15] = product->Data[15];
 15139  0DB8  087B               	movf	_product,w
 15140  0DB9  0086               	movwf	6
 15141  0DBA  3002               	movlw	2	; select bank4/5
 15142  0DBB  0087               	movwf	7
 15143  0DBC  3002               	movlw	2	; select bank4/5
 15144  0DBD  3F4F               	moviw [15]fsr1
 15145  0DBE  00AF               	movwf	(_RF_Data^(0+384)+15)
 15146                           
 15147                           ;RF_Control_B1.c: 237: RF_Data[16] = product->Data[16];
 15148  0DBF  087B               	movf	_product,w
 15149  0DC0  0086               	movwf	6
 15150  0DC1  3002               	movlw	2	; select bank4/5
 15151  0DC2  0087               	movwf	7
 15152  0DC3  3002               	movlw	2	; select bank4/5
 15153  0DC4  3F50               	moviw [16]fsr1
 15154  0DC5  00B0               	movwf	(_RF_Data^(0+384)+16)
 15155                           
 15156                           ;RF_Control_B1.c: 238: RF_Data[17] = product->Data[17];
 15157  0DC6  087B               	movf	_product,w
 15158  0DC7  0086               	movwf	6
 15159  0DC8  3002               	movlw	2	; select bank4/5
 15160  0DC9  0087               	movwf	7
 15161  0DCA  3002               	movlw	2	; select bank4/5
 15162  0DCB  3F51               	moviw [17]fsr1
 15163  0DCC  00B1               	movwf	(_RF_Data^(0+384)+17)
 15164                           
 15165                           ;RF_Control_B1.c: 239: RF_Data[18] = product->Data[18];
 15166  0DCD  087B               	movf	_product,w
 15167  0DCE  0086               	movwf	6
 15168  0DCF  3002               	movlw	2	; select bank4/5
 15169  0DD0  0087               	movwf	7
 15170  0DD1  3002               	movlw	2	; select bank4/5
 15171  0DD2  3F52               	moviw [18]fsr1
 15172  0DD3  00B2               	movwf	(_RF_Data^(0+384)+18)
 15173                           
 15174                           ;RF_Control_B1.c: 240: RF_Data[19] = product->Data[19];
 15175  0DD4  087B               	movf	_product,w
 15176  0DD5  0086               	movwf	6
 15177  0DD6  3002               	movlw	2	; select bank4/5
 15178  0DD7  0087               	movwf	7
 15179  0DD8  3002               	movlw	2	; select bank4/5
 15180  0DD9  3F53               	moviw [19]fsr1
 15181  0DDA  00B3               	movwf	(_RF_Data^(0+384)+19)
 15182                           
 15183                           ;RF_Control_B1.c: 241: RF_Data[20] = 210;
 15184  0DDB  30D2               	movlw	210
 15185  0DDC  0020               	movlb	0	; select bank0
 15186  0DDD  00A0               	movwf	??_setTxData
 15187  0DDE  0820               	movf	??_setTxData,w
 15188  0DDF  0023               	movlb	3	; select bank3
 15189  0DE0  00B4               	movwf	(_RF_Data^(0+384)+20)
 15190  0DE1  0008               	return
 15191  0DE2                     __end_of_setTxData:	
 15192                           
 15193                           	psect	text92
 15194  0A02                     __ptext92:	
 15195 ;; *************** function _setRF_DimmerLights *****************
 15196 ;; Defined at:
 15197 ;;		line 528 in file "../src/RF_Control_B1.c"
 15198 ;; Parameters:    Size  Location     Type
 15199 ;;  lights          1    wreg     unsigned char 
 15200 ;;  on              1   61[BANK0 ] unsigned char 
 15201 ;; Auto vars:     Size  Location     Type
 15202 ;;  lights          1   65[BANK0 ] unsigned char 
 15203 ;;  status          1   64[BANK0 ] unsigned char 
 15204 ;; Return value:  Size  Location     Type
 15205 ;;		None               void
 15206 ;; Registers used:
 15207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15208 ;; Tracked objects:
 15209 ;;		On entry : 0/0
 15210 ;;		On exit  : 0/0
 15211 ;;		Unchanged: 0/0
 15212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15213 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15214 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15215 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15216 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15217 ;;Total ram usage:        5 bytes
 15218 ;; Hardware stack levels used:    1
 15219 ;; Hardware stack levels required when called:    8
 15220 ;; This function calls:
 15221 ;;		_setPercentValue
 15222 ;; This function is called by:
 15223 ;;		_DlyOff_Main
 15224 ;;		_setDimmerLights_SwOn
 15225 ;;		_setDimmerLights_SwOff
 15226 ;;		_setDimmerLights_Adj
 15227 ;;		_setRFSW_Control
 15228 ;; This function uses a non-reentrant model
 15229 ;;
 15230                           
 15231                           
 15232                           ;psect for function _setRF_DimmerLights
 15233  0A02                     _setRF_DimmerLights:	
 15234                           
 15235                           ;incstack = 0
 15236                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15237                           ;setRF_DimmerLights@lights stored from wreg
 15238  0A02  0020               	movlb	0	; select bank0
 15239  0A03  00E1               	movwf	setRF_DimmerLights@lights
 15240                           
 15241                           ;RF_Control_B1.c: 529: char status = 1;
 15242  0A04  01E0               	clrf	setRF_DimmerLights@status
 15243  0A05  0AE0               	incf	setRF_DimmerLights@status,f
 15244                           
 15245                           ;RF_Control_B1.c: 530: status <<= (lights - 1);
 15246  0A06  0861               	movf	setRF_DimmerLights@lights,w
 15247  0A07  3EFF               	addlw	-1
 15248  0A08  0A89               	incf	9,f
 15249  0A09  2A0C               	goto	u9420
 15250  0A0A                     u9425:	
 15251  0A0A  1003               	clrc
 15252  0A0B  0DE0               	rlf	setRF_DimmerLights@status,f
 15253  0A0C                     u9420:	
 15254  0A0C  3EFF               	addlw	-1
 15255  0A0D  1D03               	skipz
 15256  0A0E  2A0A               	goto	u9425
 15257                           
 15258                           ;RF_Control_B1.c: 531: product->Data[11]=lights;
 15259  0A0F  0861               	movf	setRF_DimmerLights@lights,w
 15260  0A10  00DE               	movwf	??_setRF_DimmerLights
 15261  0A11  087B               	movf	_product,w
 15262  0A12  3E0B               	addlw	11
 15263  0A13  0086               	movwf	6
 15264  0A14  3002               	movlw	2	; select bank4/5
 15265  0A15  0087               	movwf	7
 15266  0A16  085E               	movf	??_setRF_DimmerLights,w
 15267  0A17  0081               	movwf	1
 15268                           
 15269                           ;RF_Control_B1.c: 534: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 15270  0A18  3020               	movlw	32
 15271  0A19  3193  231A  318A   	fcall	_setPercentValue
 15272  0A1C  0020               	movlb	0	; select bank0
 15273  0A1D  00DE               	movwf	??_setRF_DimmerLights
 15274  0A1E  0861               	movf	setRF_DimmerLights@lights,w
 15275  0A1F  3E14               	addlw	20
 15276  0A20  077B               	addwf	_product,w
 15277  0A21  00DF               	movwf	??_setRF_DimmerLights+1
 15278  0A22  085F               	movf	??_setRF_DimmerLights+1,w
 15279  0A23  0086               	movwf	6
 15280  0A24  3002               	movlw	2	; select bank4/5
 15281  0A25  0087               	movwf	7
 15282  0A26  085E               	movf	??_setRF_DimmerLights,w
 15283  0A27  0081               	movwf	1
 15284                           
 15285                           ;RF_Control_B1.c: 537: product->Data[9]=product->Data[20 + lights];
 15286  0A28  0861               	movf	setRF_DimmerLights@lights,w
 15287  0A29  3E14               	addlw	20
 15288  0A2A  077B               	addwf	_product,w
 15289  0A2B  00DE               	movwf	??_setRF_DimmerLights
 15290  0A2C  085E               	movf	??_setRF_DimmerLights,w
 15291  0A2D  0086               	movwf	6
 15292  0A2E  3002               	movlw	2	; select bank4/5
 15293  0A2F  0087               	movwf	7
 15294  0A30  0801               	movf	1,w
 15295  0A31  00DF               	movwf	??_setRF_DimmerLights+1
 15296  0A32  087B               	movf	_product,w
 15297  0A33  3E09               	addlw	9
 15298  0A34  0086               	movwf	6
 15299  0A35  3002               	movlw	2	; select bank4/5
 15300  0A36  0087               	movwf	7
 15301  0A37  085F               	movf	??_setRF_DimmerLights+1,w
 15302  0A38  0081               	movwf	1
 15303                           
 15304                           ;RF_Control_B1.c: 538: product->Data[17]=product->Data[26 + lights];
 15305  0A39  0861               	movf	setRF_DimmerLights@lights,w
 15306  0A3A  3E1A               	addlw	26
 15307  0A3B  077B               	addwf	_product,w
 15308  0A3C  00DE               	movwf	??_setRF_DimmerLights
 15309  0A3D  085E               	movf	??_setRF_DimmerLights,w
 15310  0A3E  0086               	movwf	6
 15311  0A3F  3002               	movlw	2	; select bank4/5
 15312  0A40  0087               	movwf	7
 15313  0A41  0801               	movf	1,w
 15314  0A42  00DF               	movwf	??_setRF_DimmerLights+1
 15315  0A43  087B               	movf	_product,w
 15316  0A44  3E11               	addlw	17
 15317  0A45  0086               	movwf	6
 15318  0A46  3002               	movlw	2	; select bank4/5
 15319  0A47  0087               	movwf	7
 15320  0A48  085F               	movf	??_setRF_DimmerLights+1,w
 15321  0A49  0081               	movwf	1
 15322                           
 15323                           ;RF_Control_B1.c: 539: if (on == 1) {
 15324  0A4A  085D               	movf	setRF_DimmerLights@on,w
 15325  0A4B  3A01               	xorlw	1
 15326  0A4C  1D03               	skipz
 15327  0A4D  2A5E               	goto	l8820
 15328                           
 15329                           ;RF_Control_B1.c: 540: product->Data[15]=(product->Data[15] | status);
 15330  0A4E  087B               	movf	_product,w
 15331  0A4F  3E0F               	addlw	15
 15332  0A50  0086               	movwf	6
 15333  0A51  3002               	movlw	2	; select bank4/5
 15334  0A52  0087               	movwf	7
 15335  0A53  0801               	movf	1,w
 15336  0A54  0460               	iorwf	setRF_DimmerLights@status,w
 15337  0A55  00DE               	movwf	??_setRF_DimmerLights
 15338  0A56  087B               	movf	_product,w
 15339  0A57  3E0F               	addlw	15
 15340  0A58  0086               	movwf	6
 15341  0A59  3002               	movlw	2	; select bank4/5
 15342  0A5A  0087               	movwf	7
 15343  0A5B  085E               	movf	??_setRF_DimmerLights,w
 15344  0A5C  0081               	movwf	1
 15345                           
 15346                           ;RF_Control_B1.c: 541: } else {
 15347  0A5D  0008               	return
 15348  0A5E                     l8820:	
 15349                           
 15350                           ;RF_Control_B1.c: 542: product->Data[15]=(product->Data[15]&(~status));
 15351  0A5E  087B               	movf	_product,w
 15352  0A5F  3E0F               	addlw	15
 15353  0A60  0086               	movwf	6
 15354  0A61  3002               	movlw	2	; select bank4/5
 15355  0A62  0087               	movwf	7
 15356  0A63  0960               	comf	setRF_DimmerLights@status,w
 15357  0A64  0501               	andwf	1,w
 15358  0A65  00DE               	movwf	??_setRF_DimmerLights
 15359  0A66  087B               	movf	_product,w
 15360  0A67  3E0F               	addlw	15
 15361  0A68  0086               	movwf	6
 15362  0A69  3002               	movlw	2	; select bank4/5
 15363  0A6A  0087               	movwf	7
 15364  0A6B  085E               	movf	??_setRF_DimmerLights,w
 15365  0A6C  0081               	movwf	1
 15366  0A6D  0008               	return
 15367  0A6E                     __end_of_setRF_DimmerLights:	
 15368                           
 15369                           	psect	text93
 15370  131A                     __ptext93:	
 15371 ;; *************** function _setPercentValue *****************
 15372 ;; Defined at:
 15373 ;;		line 928 in file "../src/Dimmer_B1.c"
 15374 ;; Parameters:    Size  Location     Type
 15375 ;;  value           1    wreg     unsigned char 
 15376 ;; Auto vars:     Size  Location     Type
 15377 ;;  value           1   57[BANK0 ] unsigned char 
 15378 ;;  i               3   58[BANK0 ] float 
 15379 ;; Return value:  Size  Location     Type
 15380 ;;                  1    wreg      unsigned char 
 15381 ;; Registers used:
 15382 ;;		wreg, status,2, status,0, pclath, cstack
 15383 ;; Tracked objects:
 15384 ;;		On entry : 0/0
 15385 ;;		On exit  : 0/0
 15386 ;;		Unchanged: 0/0
 15387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15389 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;Total ram usage:        4 bytes
 15393 ;; Hardware stack levels used:    1
 15394 ;; Hardware stack levels required when called:    7
 15395 ;; This function calls:
 15396 ;;		___awtoft
 15397 ;;		___ftdiv
 15398 ;;		___fttol
 15399 ;; This function is called by:
 15400 ;;		_Flash_Memory_Initialization
 15401 ;;		_setRF_DimmerLights
 15402 ;; This function uses a non-reentrant model
 15403 ;;
 15404                           
 15405                           
 15406                           ;psect for function _setPercentValue
 15407  131A                     _setPercentValue:	
 15408                           
 15409                           ;incstack = 0
 15410                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15411                           ;setPercentValue@value stored from wreg
 15412  131A  0020               	movlb	0	; select bank0
 15413  131B  00D9               	movwf	setPercentValue@value
 15414                           
 15415                           ;Dimmer_B1.c: 930: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 15416  131C  3000               	movlw	0
 15417  131D  00DA               	movwf	setPercentValue@i
 15418  131E  30E0               	movlw	224
 15419  131F  00DB               	movwf	setPercentValue@i+1
 15420  1320  3041               	movlw	65
 15421  1321  00DC               	movwf	setPercentValue@i+2
 15422                           
 15423                           ;Dimmer_B1.c: 931: i /= 100;
 15424  1322  3000               	movlw	0
 15425  1323  00AE               	movwf	___ftdiv@f2
 15426  1324  30C8               	movlw	200
 15427  1325  00AF               	movwf	___ftdiv@f2+1
 15428  1326  3042               	movlw	66
 15429  1327  00B0               	movwf	___ftdiv@f2+2
 15430  1328  085A               	movf	setPercentValue@i,w
 15431  1329  00B1               	movwf	___ftdiv@f1
 15432  132A  085B               	movf	setPercentValue@i+1,w
 15433  132B  00B2               	movwf	___ftdiv@f1+1
 15434  132C  085C               	movf	setPercentValue@i+2,w
 15435  132D  00B3               	movwf	___ftdiv@f1+2
 15436  132E  318E  267B  3193   	fcall	___ftdiv
 15437  1331  0020               	movlb	0	; select bank0
 15438  1332  082E               	movf	?___ftdiv,w
 15439  1333  00DA               	movwf	setPercentValue@i
 15440  1334  082F               	movf	?___ftdiv+1,w
 15441  1335  00DB               	movwf	setPercentValue@i+1
 15442  1336  0830               	movf	?___ftdiv+2,w
 15443  1337  00DC               	movwf	setPercentValue@i+2
 15444                           
 15445                           ;Dimmer_B1.c: 932: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 15446  1338  0859               	movf	setPercentValue@value,w
 15447  1339  3EE0               	addlw	224
 15448  133A  00A8               	movwf	___awtoft@c
 15449  133B  30FF               	movlw	255
 15450  133C  1803               	skipnc
 15451  133D  3000               	movlw	0
 15452  133E  00A9               	movwf	___awtoft@c+1
 15453  133F  319E  265F  3193   	fcall	___awtoft
 15454  1342  0020               	movlb	0	; select bank0
 15455  1343  0828               	movf	?___awtoft,w
 15456  1344  00B1               	movwf	___ftdiv@f1
 15457  1345  0829               	movf	?___awtoft+1,w
 15458  1346  00B2               	movwf	___ftdiv@f1+1
 15459  1347  082A               	movf	?___awtoft+2,w
 15460  1348  00B3               	movwf	___ftdiv@f1+2
 15461  1349  085A               	movf	setPercentValue@i,w
 15462  134A  00AE               	movwf	___ftdiv@f2
 15463  134B  085B               	movf	setPercentValue@i+1,w
 15464  134C  00AF               	movwf	___ftdiv@f2+1
 15465  134D  085C               	movf	setPercentValue@i+2,w
 15466  134E  00B0               	movwf	___ftdiv@f2+2
 15467  134F  318E  267B  3193   	fcall	___ftdiv
 15468  1352  0020               	movlb	0	; select bank0
 15469  1353  082E               	movf	?___ftdiv,w
 15470  1354  00CB               	movwf	___fttol@f1
 15471  1355  082F               	movf	?___ftdiv+1,w
 15472  1356  00CC               	movwf	___fttol@f1+1
 15473  1357  0830               	movf	?___ftdiv+2,w
 15474  1358  00CD               	movwf	___fttol@f1+2
 15475  1359  318C  24C2         	fcall	___fttol
 15476  135B  0020               	movlb	0	; select bank0
 15477  135C  034B               	decf	?___fttol,w
 15478  135D  3AFF               	xorlw	255
 15479  135E  3E64               	addlw	100
 15480  135F  0008               	return
 15481  1360                     __end_of_setPercentValue:	
 15482                           
 15483                           	psect	text94
 15484  0CC2                     __ptext94:	
 15485 ;; *************** function ___fttol *****************
 15486 ;; Defined at:
 15487 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15488 ;; Parameters:    Size  Location     Type
 15489 ;;  f1              3   43[BANK0 ] float 
 15490 ;; Auto vars:     Size  Location     Type
 15491 ;;  lval            4   52[BANK0 ] unsigned long 
 15492 ;;  exp1            1   56[BANK0 ] unsigned char 
 15493 ;;  sign1           1   51[BANK0 ] unsigned char 
 15494 ;; Return value:  Size  Location     Type
 15495 ;;                  4   43[BANK0 ] long 
 15496 ;; Registers used:
 15497 ;;		wreg, status,2, status,0
 15498 ;; Tracked objects:
 15499 ;;		On entry : 0/0
 15500 ;;		On exit  : 0/0
 15501 ;;		Unchanged: 0/0
 15502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15503 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15504 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15505 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15506 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15507 ;;Total ram usage:       14 bytes
 15508 ;; Hardware stack levels used:    1
 15509 ;; Hardware stack levels required when called:    5
 15510 ;; This function calls:
 15511 ;;		Nothing
 15512 ;; This function is called by:
 15513 ;;		_getPercentValue
 15514 ;;		_setPercentValue
 15515 ;; This function uses a non-reentrant model
 15516 ;;
 15517                           
 15518                           
 15519                           ;psect for function ___fttol
 15520  0CC2                     ___fttol:	
 15521                           
 15522                           ;incstack = 0
 15523                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15524  0CC2  0020               	movlb	0	; select bank0
 15525  0CC3  084B               	movf	___fttol@f1,w
 15526  0CC4  00CF               	movwf	??___fttol
 15527  0CC5  084C               	movf	___fttol@f1+1,w
 15528  0CC6  00D0               	movwf	??___fttol+1
 15529  0CC7  084D               	movf	___fttol@f1+2,w
 15530  0CC8  00D1               	movwf	??___fttol+2
 15531  0CC9  1003               	clrc
 15532  0CCA  0D50               	rlf	??___fttol+1,w
 15533  0CCB  0D51               	rlf	??___fttol+2,w
 15534  0CCC  00D2               	movwf	??___fttol+3
 15535  0CCD  0852               	movf	??___fttol+3,w
 15536  0CCE  00D8               	movwf	___fttol@exp1
 15537  0CCF  08D8               	movf	___fttol@exp1,f
 15538  0CD0  1D03               	skipz
 15539  0CD1  2CDB               	goto	l8648
 15540  0CD2  3000               	movlw	0
 15541  0CD3  00CE               	movwf	?___fttol+3
 15542  0CD4  3000               	movlw	0
 15543  0CD5  00CD               	movwf	?___fttol+2
 15544  0CD6  3000               	movlw	0
 15545  0CD7  00CC               	movwf	?___fttol+1
 15546  0CD8  3000               	movlw	0
 15547  0CD9  00CB               	movwf	?___fttol
 15548  0CDA  0008               	return
 15549  0CDB                     l8648:	
 15550  0CDB  084B               	movf	___fttol@f1,w
 15551  0CDC  00CF               	movwf	??___fttol
 15552  0CDD  084C               	movf	___fttol@f1+1,w
 15553  0CDE  00D0               	movwf	??___fttol+1
 15554  0CDF  084D               	movf	___fttol@f1+2,w
 15555  0CE0  00D1               	movwf	??___fttol+2
 15556  0CE1  3017               	movlw	23
 15557  0CE2                     u9135:	
 15558  0CE2  36D1               	lsrf	??___fttol+2,f
 15559  0CE3  0CD0               	rrf	??___fttol+1,f
 15560  0CE4  0CCF               	rrf	??___fttol,f
 15561  0CE5  0B89               	decfsz	9,f
 15562  0CE6  2CE2               	goto	u9135
 15563  0CE7  084F               	movf	??___fttol,w
 15564  0CE8  00D2               	movwf	??___fttol+3
 15565  0CE9  0852               	movf	??___fttol+3,w
 15566  0CEA  00D3               	movwf	___fttol@sign1
 15567  0CEB  17CC               	bsf	___fttol@f1+1,7
 15568  0CEC  30FF               	movlw	255
 15569  0CED  05CB               	andwf	___fttol@f1,f
 15570  0CEE  30FF               	movlw	255
 15571  0CEF  05CC               	andwf	___fttol@f1+1,f
 15572  0CF0  3000               	movlw	0
 15573  0CF1  05CD               	andwf	___fttol@f1+2,f
 15574  0CF2  084B               	movf	___fttol@f1,w
 15575  0CF3  00D4               	movwf	___fttol@lval
 15576  0CF4  084C               	movf	___fttol@f1+1,w
 15577  0CF5  00D5               	movwf	___fttol@lval+1
 15578  0CF6  084D               	movf	___fttol@f1+2,w
 15579  0CF7  00D6               	movwf	___fttol@lval+2
 15580  0CF8  01D7               	clrf	___fttol@lval+3
 15581  0CF9  308E               	movlw	142
 15582  0CFA  02D8               	subwf	___fttol@exp1,f
 15583  0CFB  1FD8               	btfss	___fttol@exp1,7
 15584  0CFC  2D19               	goto	l8668
 15585  0CFD  0858               	movf	___fttol@exp1,w
 15586  0CFE  3A80               	xorlw	128
 15587  0CFF  3E8F               	addlw	143
 15588  0D00  1803               	skipnc
 15589  0D01  2D0B               	goto	l8666
 15590  0D02  3000               	movlw	0
 15591  0D03  00CE               	movwf	?___fttol+3
 15592  0D04  3000               	movlw	0
 15593  0D05  00CD               	movwf	?___fttol+2
 15594  0D06  3000               	movlw	0
 15595  0D07  00CC               	movwf	?___fttol+1
 15596  0D08  3000               	movlw	0
 15597  0D09  00CB               	movwf	?___fttol
 15598  0D0A  0008               	return
 15599  0D0B                     l8666:	
 15600  0D0B  3001               	movlw	1
 15601  0D0C                     u9165:	
 15602  0D0C  36D7               	lsrf	___fttol@lval+3,f
 15603  0D0D  0CD6               	rrf	___fttol@lval+2,f
 15604  0D0E  0CD5               	rrf	___fttol@lval+1,f
 15605  0D0F  0CD4               	rrf	___fttol@lval,f
 15606  0D10  0B89               	decfsz	9,f
 15607  0D11  2D0C               	goto	u9165
 15608  0D12  3001               	movlw	1
 15609  0D13  00CF               	movwf	??___fttol
 15610  0D14  084F               	movf	??___fttol,w
 15611  0D15  07D8               	addwf	___fttol@exp1,f
 15612  0D16  1903               	btfsc	3,2
 15613  0D17  2D32               	goto	l8678
 15614  0D18  2D0B               	goto	l8666
 15615  0D19                     l8668:	
 15616  0D19  3018               	movlw	24
 15617  0D1A  0258               	subwf	___fttol@exp1,w
 15618  0D1B  1C03               	skipc
 15619  0D1C  2D2F               	goto	l8676
 15620  0D1D  3000               	movlw	0
 15621  0D1E  00CE               	movwf	?___fttol+3
 15622  0D1F  3000               	movlw	0
 15623  0D20  00CD               	movwf	?___fttol+2
 15624  0D21  3000               	movlw	0
 15625  0D22  00CC               	movwf	?___fttol+1
 15626  0D23  3000               	movlw	0
 15627  0D24  00CB               	movwf	?___fttol
 15628  0D25  0008               	return
 15629  0D26                     l8674:	
 15630  0D26  3001               	movlw	1
 15631  0D27                     u9195:	
 15632  0D27  35D4               	lslf	___fttol@lval,f
 15633  0D28  0DD5               	rlf	___fttol@lval+1,f
 15634  0D29  0DD6               	rlf	___fttol@lval+2,f
 15635  0D2A  0DD7               	rlf	___fttol@lval+3,f
 15636  0D2B  0B89               	decfsz	9,f
 15637  0D2C  2D27               	goto	u9195
 15638  0D2D  3001               	movlw	1
 15639  0D2E  02D8               	subwf	___fttol@exp1,f
 15640  0D2F                     l8676:	
 15641  0D2F  08D8               	movf	___fttol@exp1,f
 15642  0D30  1D03               	skipz
 15643  0D31  2D26               	goto	l8674
 15644  0D32                     l8678:	
 15645  0D32  0853               	movf	___fttol@sign1,w
 15646  0D33  1903               	btfsc	3,2
 15647  0D34  2D40               	goto	l8682
 15648  0D35  09D4               	comf	___fttol@lval,f
 15649  0D36  09D5               	comf	___fttol@lval+1,f
 15650  0D37  09D6               	comf	___fttol@lval+2,f
 15651  0D38  09D7               	comf	___fttol@lval+3,f
 15652  0D39  0AD4               	incf	___fttol@lval,f
 15653  0D3A  1903               	skipnz
 15654  0D3B  0AD5               	incf	___fttol@lval+1,f
 15655  0D3C  1903               	skipnz
 15656  0D3D  0AD6               	incf	___fttol@lval+2,f
 15657  0D3E  1903               	skipnz
 15658  0D3F  0AD7               	incf	___fttol@lval+3,f
 15659  0D40                     l8682:	
 15660  0D40  0857               	movf	___fttol@lval+3,w
 15661  0D41  00CE               	movwf	?___fttol+3
 15662  0D42  0856               	movf	___fttol@lval+2,w
 15663  0D43  00CD               	movwf	?___fttol+2
 15664  0D44  0855               	movf	___fttol@lval+1,w
 15665  0D45  00CC               	movwf	?___fttol+1
 15666  0D46  0854               	movf	___fttol@lval,w
 15667  0D47  00CB               	movwf	?___fttol
 15668  0D48  0008               	return
 15669  0D49                     __end_of___fttol:	
 15670                           
 15671                           	psect	text95
 15672  0E7B                     __ptext95:	
 15673 ;; *************** function ___ftdiv *****************
 15674 ;; Defined at:
 15675 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15676 ;; Parameters:    Size  Location     Type
 15677 ;;  f2              3   14[BANK0 ] float 
 15678 ;;  f1              3   17[BANK0 ] float 
 15679 ;; Auto vars:     Size  Location     Type
 15680 ;;  f3              3   25[BANK0 ] float 
 15681 ;;  sign            1   29[BANK0 ] unsigned char 
 15682 ;;  exp             1   28[BANK0 ] unsigned char 
 15683 ;;  cntr            1   24[BANK0 ] unsigned char 
 15684 ;; Return value:  Size  Location     Type
 15685 ;;                  3   14[BANK0 ] float 
 15686 ;; Registers used:
 15687 ;;		wreg, status,2, status,0, pclath, cstack
 15688 ;; Tracked objects:
 15689 ;;		On entry : 0/0
 15690 ;;		On exit  : 0/0
 15691 ;;		Unchanged: 0/0
 15692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15693 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15694 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15695 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15696 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15697 ;;Total ram usage:       16 bytes
 15698 ;; Hardware stack levels used:    1
 15699 ;; Hardware stack levels required when called:    6
 15700 ;; This function calls:
 15701 ;;		___ftpack
 15702 ;; This function is called by:
 15703 ;;		_getPercentValue
 15704 ;;		_setPercentValue
 15705 ;; This function uses a non-reentrant model
 15706 ;;
 15707                           
 15708                           
 15709                           ;psect for function ___ftdiv
 15710  0E7B                     ___ftdiv:	
 15711                           
 15712                           ;incstack = 0
 15713                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15714  0E7B  0020               	movlb	0	; select bank0
 15715  0E7C  0831               	movf	___ftdiv@f1,w
 15716  0E7D  00B4               	movwf	??___ftdiv
 15717  0E7E  0832               	movf	___ftdiv@f1+1,w
 15718  0E7F  00B5               	movwf	??___ftdiv+1
 15719  0E80  0833               	movf	___ftdiv@f1+2,w
 15720  0E81  00B6               	movwf	??___ftdiv+2
 15721  0E82  1003               	clrc
 15722  0E83  0D35               	rlf	??___ftdiv+1,w
 15723  0E84  0D36               	rlf	??___ftdiv+2,w
 15724  0E85  00B7               	movwf	??___ftdiv+3
 15725  0E86  0837               	movf	??___ftdiv+3,w
 15726  0E87  00BC               	movwf	___ftdiv@exp
 15727  0E88  08BC               	movf	___ftdiv@exp,f
 15728  0E89  1D03               	skipz
 15729  0E8A  2E92               	goto	l8556
 15730  0E8B  3000               	movlw	0
 15731  0E8C  00AE               	movwf	?___ftdiv
 15732  0E8D  3000               	movlw	0
 15733  0E8E  00AF               	movwf	?___ftdiv+1
 15734  0E8F  3000               	movlw	0
 15735  0E90  00B0               	movwf	?___ftdiv+2
 15736  0E91  0008               	return
 15737  0E92                     l8556:	
 15738  0E92  082E               	movf	___ftdiv@f2,w
 15739  0E93  00B4               	movwf	??___ftdiv
 15740  0E94  082F               	movf	___ftdiv@f2+1,w
 15741  0E95  00B5               	movwf	??___ftdiv+1
 15742  0E96  0830               	movf	___ftdiv@f2+2,w
 15743  0E97  00B6               	movwf	??___ftdiv+2
 15744  0E98  1003               	clrc
 15745  0E99  0D35               	rlf	??___ftdiv+1,w
 15746  0E9A  0D36               	rlf	??___ftdiv+2,w
 15747  0E9B  00B7               	movwf	??___ftdiv+3
 15748  0E9C  0837               	movf	??___ftdiv+3,w
 15749  0E9D  00BD               	movwf	___ftdiv@sign
 15750  0E9E  08BD               	movf	___ftdiv@sign,f
 15751  0E9F  1D03               	skipz
 15752  0EA0  2EA8               	goto	l8562
 15753  0EA1  3000               	movlw	0
 15754  0EA2  00AE               	movwf	?___ftdiv
 15755  0EA3  3000               	movlw	0
 15756  0EA4  00AF               	movwf	?___ftdiv+1
 15757  0EA5  3000               	movlw	0
 15758  0EA6  00B0               	movwf	?___ftdiv+2
 15759  0EA7  0008               	return
 15760  0EA8                     l8562:	
 15761  0EA8  3000               	movlw	0
 15762  0EA9  00B9               	movwf	___ftdiv@f3
 15763  0EAA  3000               	movlw	0
 15764  0EAB  00BA               	movwf	___ftdiv@f3+1
 15765  0EAC  3000               	movlw	0
 15766  0EAD  00BB               	movwf	___ftdiv@f3+2
 15767  0EAE  3089               	movlw	137
 15768  0EAF  073D               	addwf	___ftdiv@sign,w
 15769  0EB0  00B4               	movwf	??___ftdiv
 15770  0EB1  0834               	movf	??___ftdiv,w
 15771  0EB2  02BC               	subwf	___ftdiv@exp,f
 15772  0EB3  0831               	movf	___ftdiv@f1,w
 15773  0EB4  00B4               	movwf	??___ftdiv
 15774  0EB5  0832               	movf	___ftdiv@f1+1,w
 15775  0EB6  00B5               	movwf	??___ftdiv+1
 15776  0EB7  0833               	movf	___ftdiv@f1+2,w
 15777  0EB8  00B6               	movwf	??___ftdiv+2
 15778  0EB9  3010               	movlw	16
 15779  0EBA                     u8945:	
 15780  0EBA  36B6               	lsrf	??___ftdiv+2,f
 15781  0EBB  0CB5               	rrf	??___ftdiv+1,f
 15782  0EBC  0CB4               	rrf	??___ftdiv,f
 15783  0EBD  0B89               	decfsz	9,f
 15784  0EBE  2EBA               	goto	u8945
 15785  0EBF  0834               	movf	??___ftdiv,w
 15786  0EC0  00B7               	movwf	??___ftdiv+3
 15787  0EC1  0837               	movf	??___ftdiv+3,w
 15788  0EC2  00BD               	movwf	___ftdiv@sign
 15789  0EC3  082E               	movf	___ftdiv@f2,w
 15790  0EC4  00B4               	movwf	??___ftdiv
 15791  0EC5  082F               	movf	___ftdiv@f2+1,w
 15792  0EC6  00B5               	movwf	??___ftdiv+1
 15793  0EC7  0830               	movf	___ftdiv@f2+2,w
 15794  0EC8  00B6               	movwf	??___ftdiv+2
 15795  0EC9  3010               	movlw	16
 15796  0ECA                     u8955:	
 15797  0ECA  36B6               	lsrf	??___ftdiv+2,f
 15798  0ECB  0CB5               	rrf	??___ftdiv+1,f
 15799  0ECC  0CB4               	rrf	??___ftdiv,f
 15800  0ECD  0B89               	decfsz	9,f
 15801  0ECE  2ECA               	goto	u8955
 15802  0ECF  0834               	movf	??___ftdiv,w
 15803  0ED0  00B7               	movwf	??___ftdiv+3
 15804  0ED1  0837               	movf	??___ftdiv+3,w
 15805  0ED2  06BD               	xorwf	___ftdiv@sign,f
 15806  0ED3  3080               	movlw	128
 15807  0ED4  00B4               	movwf	??___ftdiv
 15808  0ED5  0834               	movf	??___ftdiv,w
 15809  0ED6  05BD               	andwf	___ftdiv@sign,f
 15810  0ED7  17B2               	bsf	___ftdiv@f1+1,7
 15811  0ED8  30FF               	movlw	255
 15812  0ED9  05B1               	andwf	___ftdiv@f1,f
 15813  0EDA  30FF               	movlw	255
 15814  0EDB  05B2               	andwf	___ftdiv@f1+1,f
 15815  0EDC  3000               	movlw	0
 15816  0EDD  05B3               	andwf	___ftdiv@f1+2,f
 15817  0EDE  17AF               	bsf	___ftdiv@f2+1,7
 15818  0EDF  30FF               	movlw	255
 15819  0EE0  05AE               	andwf	___ftdiv@f2,f
 15820  0EE1  30FF               	movlw	255
 15821  0EE2  05AF               	andwf	___ftdiv@f2+1,f
 15822  0EE3  3000               	movlw	0
 15823  0EE4  05B0               	andwf	___ftdiv@f2+2,f
 15824  0EE5  3018               	movlw	24
 15825  0EE6  00B4               	movwf	??___ftdiv
 15826  0EE7  0834               	movf	??___ftdiv,w
 15827  0EE8  00B8               	movwf	___ftdiv@cntr
 15828  0EE9                     l8576:	
 15829  0EE9  3001               	movlw	1
 15830  0EEA                     u8965:	
 15831  0EEA  35B9               	lslf	___ftdiv@f3,f
 15832  0EEB  0DBA               	rlf	___ftdiv@f3+1,f
 15833  0EEC  0DBB               	rlf	___ftdiv@f3+2,f
 15834  0EED  0B89               	decfsz	9,f
 15835  0EEE  2EEA               	goto	u8965
 15836  0EEF  0830               	movf	___ftdiv@f2+2,w
 15837  0EF0  0233               	subwf	___ftdiv@f1+2,w
 15838  0EF1  1D03               	skipz
 15839  0EF2  2EF9               	goto	u8975
 15840  0EF3  082F               	movf	___ftdiv@f2+1,w
 15841  0EF4  0232               	subwf	___ftdiv@f1+1,w
 15842  0EF5  1D03               	skipz
 15843  0EF6  2EF9               	goto	u8975
 15844  0EF7  082E               	movf	___ftdiv@f2,w
 15845  0EF8  0231               	subwf	___ftdiv@f1,w
 15846  0EF9                     u8975:	
 15847  0EF9  1C03               	skipc
 15848  0EFA  2F02               	goto	l8584
 15849  0EFB  082E               	movf	___ftdiv@f2,w
 15850  0EFC  02B1               	subwf	___ftdiv@f1,f
 15851  0EFD  082F               	movf	___ftdiv@f2+1,w
 15852  0EFE  3BB2               	subwfb	___ftdiv@f1+1,f
 15853  0EFF  0830               	movf	___ftdiv@f2+2,w
 15854  0F00  3BB3               	subwfb	___ftdiv@f1+2,f
 15855  0F01  1439               	bsf	___ftdiv@f3,0
 15856  0F02                     l8584:	
 15857  0F02  3001               	movlw	1
 15858  0F03                     u8985:	
 15859  0F03  35B1               	lslf	___ftdiv@f1,f
 15860  0F04  0DB2               	rlf	___ftdiv@f1+1,f
 15861  0F05  0DB3               	rlf	___ftdiv@f1+2,f
 15862  0F06  0B89               	decfsz	9,f
 15863  0F07  2F03               	goto	u8985
 15864  0F08  3001               	movlw	1
 15865  0F09  02B8               	subwf	___ftdiv@cntr,f
 15866  0F0A  1D03               	btfss	3,2
 15867  0F0B  2EE9               	goto	l8576
 15868  0F0C  0839               	movf	___ftdiv@f3,w
 15869  0F0D  00A0               	movwf	___ftpack@arg
 15870  0F0E  083A               	movf	___ftdiv@f3+1,w
 15871  0F0F  00A1               	movwf	___ftpack@arg+1
 15872  0F10  083B               	movf	___ftdiv@f3+2,w
 15873  0F11  00A2               	movwf	___ftpack@arg+2
 15874  0F12  083C               	movf	___ftdiv@exp,w
 15875  0F13  00B4               	movwf	??___ftdiv
 15876  0F14  0834               	movf	??___ftdiv,w
 15877  0F15  00A3               	movwf	___ftpack@exp
 15878  0F16  083D               	movf	___ftdiv@sign,w
 15879  0F17  00B5               	movwf	??___ftdiv+1
 15880  0F18  0835               	movf	??___ftdiv+1,w
 15881  0F19  00A4               	movwf	___ftpack@sign
 15882  0F1A  3188  2015         	fcall	___ftpack
 15883  0F1C  0020               	movlb	0	; select bank0
 15884  0F1D  0820               	movf	?___ftpack,w
 15885  0F1E  00AE               	movwf	?___ftdiv
 15886  0F1F  0821               	movf	?___ftpack+1,w
 15887  0F20  00AF               	movwf	?___ftdiv+1
 15888  0F21  0822               	movf	?___ftpack+2,w
 15889  0F22  00B0               	movwf	?___ftdiv+2
 15890  0F23  0008               	return
 15891  0F24                     __end_of___ftdiv:	
 15892                           
 15893                           	psect	text96
 15894  1E5F                     __ptext96:	
 15895 ;; *************** function ___awtoft *****************
 15896 ;; Defined at:
 15897 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15898 ;; Parameters:    Size  Location     Type
 15899 ;;  c               2    8[BANK0 ] int 
 15900 ;; Auto vars:     Size  Location     Type
 15901 ;;  sign            1   13[BANK0 ] unsigned char 
 15902 ;; Return value:  Size  Location     Type
 15903 ;;                  3    8[BANK0 ] float 
 15904 ;; Registers used:
 15905 ;;		wreg, status,2, status,0, pclath, cstack
 15906 ;; Tracked objects:
 15907 ;;		On entry : 0/0
 15908 ;;		On exit  : 0/0
 15909 ;;		Unchanged: 0/0
 15910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15911 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15914 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15915 ;;Total ram usage:        6 bytes
 15916 ;; Hardware stack levels used:    1
 15917 ;; Hardware stack levels required when called:    6
 15918 ;; This function calls:
 15919 ;;		___ftpack
 15920 ;; This function is called by:
 15921 ;;		_getPercentValue
 15922 ;;		_setPercentValue
 15923 ;; This function uses a non-reentrant model
 15924 ;;
 15925                           
 15926                           
 15927                           ;psect for function ___awtoft
 15928  1E5F                     ___awtoft:	
 15929                           
 15930                           ;incstack = 0
 15931                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15932  1E5F  0020               	movlb	0	; select bank0
 15933  1E60  01AD               	clrf	___awtoft@sign
 15934  1E61  1FA9               	btfss	___awtoft@c+1,7
 15935  1E62  2E6A               	goto	l8474
 15936  1E63  09A8               	comf	___awtoft@c,f
 15937  1E64  09A9               	comf	___awtoft@c+1,f
 15938  1E65  0AA8               	incf	___awtoft@c,f
 15939  1E66  1903               	skipnz
 15940  1E67  0AA9               	incf	___awtoft@c+1,f
 15941  1E68  01AD               	clrf	___awtoft@sign
 15942  1E69  0AAD               	incf	___awtoft@sign,f
 15943  1E6A                     l8474:	
 15944  1E6A  0828               	movf	___awtoft@c,w
 15945  1E6B  00A0               	movwf	___ftpack@arg
 15946  1E6C  0829               	movf	___awtoft@c+1,w
 15947  1E6D  00A1               	movwf	___ftpack@arg+1
 15948  1E6E  01A2               	clrf	___ftpack@arg+2
 15949  1E6F  308E               	movlw	142
 15950  1E70  00AB               	movwf	??___awtoft
 15951  1E71  082B               	movf	??___awtoft,w
 15952  1E72  00A3               	movwf	___ftpack@exp
 15953  1E73  082D               	movf	___awtoft@sign,w
 15954  1E74  00AC               	movwf	??___awtoft+1
 15955  1E75  082C               	movf	??___awtoft+1,w
 15956  1E76  00A4               	movwf	___ftpack@sign
 15957  1E77  3188  2015         	fcall	___ftpack
 15958  1E79  0020               	movlb	0	; select bank0
 15959  1E7A  0820               	movf	?___ftpack,w
 15960  1E7B  00A8               	movwf	?___awtoft
 15961  1E7C  0821               	movf	?___ftpack+1,w
 15962  1E7D  00A9               	movwf	?___awtoft+1
 15963  1E7E  0822               	movf	?___ftpack+2,w
 15964  1E7F  00AA               	movwf	?___awtoft+2
 15965  1E80  0008               	return
 15966  1E81                     __end_of___awtoft:	
 15967                           
 15968                           	psect	text97
 15969  0815                     __ptext97:	
 15970 ;; *************** function ___ftpack *****************
 15971 ;; Defined at:
 15972 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15973 ;; Parameters:    Size  Location     Type
 15974 ;;  arg             3    0[BANK0 ] unsigned um
 15975 ;;  exp             1    3[BANK0 ] unsigned char 
 15976 ;;  sign            1    4[BANK0 ] unsigned char 
 15977 ;; Auto vars:     Size  Location     Type
 15978 ;;		None
 15979 ;; Return value:  Size  Location     Type
 15980 ;;                  3    0[BANK0 ] float 
 15981 ;; Registers used:
 15982 ;;		wreg, status,2, status,0
 15983 ;; Tracked objects:
 15984 ;;		On entry : 0/0
 15985 ;;		On exit  : 0/0
 15986 ;;		Unchanged: 0/0
 15987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15988 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15990 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15991 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15992 ;;Total ram usage:        8 bytes
 15993 ;; Hardware stack levels used:    1
 15994 ;; Hardware stack levels required when called:    5
 15995 ;; This function calls:
 15996 ;;		Nothing
 15997 ;; This function is called by:
 15998 ;;		___awtoft
 15999 ;;		___ftadd
 16000 ;;		___ftdiv
 16001 ;;		___ftmul
 16002 ;; This function uses a non-reentrant model
 16003 ;;
 16004                           
 16005                           
 16006                           ;psect for function ___ftpack
 16007  0815                     ___ftpack:	
 16008                           
 16009                           ;incstack = 0
 16010                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16011  0815  0020               	movlb	0	; select bank0
 16012  0816  0823               	movf	___ftpack@exp,w
 16013  0817  1903               	btfsc	3,2
 16014  0818  281E               	goto	l8424
 16015  0819  0822               	movf	___ftpack@arg+2,w
 16016  081A  0421               	iorwf	___ftpack@arg+1,w
 16017  081B  0420               	iorwf	___ftpack@arg,w
 16018  081C  1D03               	skipz
 16019  081D  282F               	goto	l8430
 16020  081E                     l8424:	
 16021  081E  3000               	movlw	0
 16022  081F  00A0               	movwf	?___ftpack
 16023  0820  3000               	movlw	0
 16024  0821  00A1               	movwf	?___ftpack+1
 16025  0822  3000               	movlw	0
 16026  0823  00A2               	movwf	?___ftpack+2
 16027  0824  0008               	return
 16028  0825                     l8428:	
 16029  0825  3001               	movlw	1
 16030  0826  00A5               	movwf	??___ftpack
 16031  0827  0825               	movf	??___ftpack,w
 16032  0828  07A3               	addwf	___ftpack@exp,f
 16033  0829  3001               	movlw	1
 16034  082A                     u8575:	
 16035  082A  36A2               	lsrf	___ftpack@arg+2,f
 16036  082B  0CA1               	rrf	___ftpack@arg+1,f
 16037  082C  0CA0               	rrf	___ftpack@arg,f
 16038  082D  0B89               	decfsz	9,f
 16039  082E  282A               	goto	u8575
 16040  082F                     l8430:	
 16041  082F  30FE               	movlw	254
 16042  0830  0522               	andwf	___ftpack@arg+2,w
 16043  0831  1903               	btfsc	3,2
 16044  0832  2848               	goto	l2924
 16045  0833  2825               	goto	l8428
 16046  0834                     l8432:	
 16047  0834  3001               	movlw	1
 16048  0835  00A5               	movwf	??___ftpack
 16049  0836  0825               	movf	??___ftpack,w
 16050  0837  07A3               	addwf	___ftpack@exp,f
 16051  0838  3001               	movlw	1
 16052  0839  07A0               	addwf	___ftpack@arg,f
 16053  083A  3000               	movlw	0
 16054  083B  1803               	skipnc
 16055  083C  3001               	movlw	1
 16056  083D  07A1               	addwf	___ftpack@arg+1,f
 16057  083E  3000               	movlw	0
 16058  083F  1803               	skipnc
 16059  0840  3001               	movlw	1
 16060  0841  07A2               	addwf	___ftpack@arg+2,f
 16061  0842  3001               	movlw	1
 16062  0843                     u8595:	
 16063  0843  36A2               	lsrf	___ftpack@arg+2,f
 16064  0844  0CA1               	rrf	___ftpack@arg+1,f
 16065  0845  0CA0               	rrf	___ftpack@arg,f
 16066  0846  0B89               	decfsz	9,f
 16067  0847  2843               	goto	u8595
 16068  0848                     l2924:	
 16069  0848  30FF               	movlw	255
 16070  0849  0522               	andwf	___ftpack@arg+2,w
 16071  084A  1903               	btfsc	3,2
 16072  084B  2855               	goto	l8440
 16073  084C  2834               	goto	l8432
 16074  084D                     l8438:	
 16075  084D  3001               	movlw	1
 16076  084E  02A3               	subwf	___ftpack@exp,f
 16077  084F  3001               	movlw	1
 16078  0850                     u8615:	
 16079  0850  35A0               	lslf	___ftpack@arg,f
 16080  0851  0DA1               	rlf	___ftpack@arg+1,f
 16081  0852  0DA2               	rlf	___ftpack@arg+2,f
 16082  0853  0B89               	decfsz	9,f
 16083  0854  2850               	goto	u8615
 16084  0855                     l8440:	
 16085  0855  1FA1               	btfss	___ftpack@arg+1,7
 16086  0856  284D               	goto	l8438
 16087  0857  1823               	btfsc	___ftpack@exp,0
 16088  0858  285F               	goto	l2930
 16089  0859  30FF               	movlw	255
 16090  085A  05A0               	andwf	___ftpack@arg,f
 16091  085B  307F               	movlw	127
 16092  085C  05A1               	andwf	___ftpack@arg+1,f
 16093  085D  30FF               	movlw	255
 16094  085E  05A2               	andwf	___ftpack@arg+2,f
 16095  085F                     l2930:	
 16096  085F  1003               	clrc
 16097  0860  0CA3               	rrf	___ftpack@exp,f
 16098  0861  0823               	movf	___ftpack@exp,w
 16099  0862  00A5               	movwf	??___ftpack
 16100  0863  01A6               	clrf	??___ftpack+1
 16101  0864  01A7               	clrf	??___ftpack+2
 16102  0865  3010               	movlw	16
 16103  0866                     u8645:	
 16104  0866  35A5               	lslf	??___ftpack,f
 16105  0867  0DA6               	rlf	??___ftpack+1,f
 16106  0868  0DA7               	rlf	??___ftpack+2,f
 16107  0869  0B89               	decfsz	9,f
 16108  086A  2866               	goto	u8645
 16109  086B  0825               	movf	??___ftpack,w
 16110  086C  04A0               	iorwf	___ftpack@arg,f
 16111  086D  0826               	movf	??___ftpack+1,w
 16112  086E  04A1               	iorwf	___ftpack@arg+1,f
 16113  086F  0827               	movf	??___ftpack+2,w
 16114  0870  04A2               	iorwf	___ftpack@arg+2,f
 16115  0871  0824               	movf	___ftpack@sign,w
 16116  0872  1903               	btfsc	3,2
 16117  0873  0008               	return
 16118  0874  17A2               	bsf	___ftpack@arg+2,7
 16119  0875  0008               	return
 16120  0876                     __end_of___ftpack:	
 16121                           
 16122                           	psect	text98
 16123  1DFF                     __ptext98:	
 16124 ;; *************** function _setDimmerLights_TriggerAdj *****************
 16125 ;; Defined at:
 16126 ;;		line 826 in file "../src/Dimmer_B1.c"
 16127 ;; Parameters:    Size  Location     Type
 16128 ;;  lights          1    wreg     unsigned char 
 16129 ;;  command         1    2[BANK0 ] unsigned char 
 16130 ;; Auto vars:     Size  Location     Type
 16131 ;;  lights          1    4[BANK0 ] unsigned char 
 16132 ;; Return value:  Size  Location     Type
 16133 ;;		None               void
 16134 ;; Registers used:
 16135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16136 ;; Tracked objects:
 16137 ;;		On entry : 0/0
 16138 ;;		On exit  : 0/0
 16139 ;;		Unchanged: 0/0
 16140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16141 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16142 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16144 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16145 ;;Total ram usage:        3 bytes
 16146 ;; Hardware stack levels used:    1
 16147 ;; Hardware stack levels required when called:    6
 16148 ;; This function calls:
 16149 ;;		_DimmerLightsPointSelect
 16150 ;; This function is called by:
 16151 ;;		_setDimmerLights_SwOff
 16152 ;;		_setDimmerLights_AdjControl
 16153 ;; This function uses a non-reentrant model
 16154 ;;
 16155                           
 16156                           
 16157                           ;psect for function _setDimmerLights_TriggerAdj
 16158  1DFF                     _setDimmerLights_TriggerAdj:	
 16159                           
 16160                           ;incstack = 0
 16161                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16162                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 16163  1DFF  0020               	movlb	0	; select bank0
 16164  1E00  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 16165                           
 16166                           ;Dimmer_B1.c: 827: DimmerLightsPointSelect(lights);
 16167  1E01  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 16168  1E02  319C  2411         	fcall	_DimmerLightsPointSelect
 16169                           
 16170                           ;Dimmer_B1.c: 828: DimmerLights->TriggerAdj = 1;
 16171  1E04  0877               	movf	_DimmerLights,w
 16172  1E05  3E08               	addlw	8
 16173  1E06  0086               	movwf	6
 16174  1E07  3001               	movlw	1	; select bank2/3
 16175  1E08  0087               	movwf	7
 16176  1E09  1601               	bsf	1,4
 16177                           
 16178                           ;Dimmer_B1.c: 829: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 16179  1E0A  0020               	movlb	0	; select bank0
 16180  1E0B  0822               	movf	setDimmerLights_TriggerAdj@command,w
 16181  1E0C  3A01               	xorlw	1
 16182  1E0D  3000               	movlw	0
 16183  1E0E  1903               	skipnz
 16184  1E0F  3001               	movlw	1
 16185  1E10  00A3               	movwf	??_setDimmerLights_TriggerAdj
 16186  1E11  0877               	movf	_DimmerLights,w
 16187  1E12  3E08               	addlw	8
 16188  1E13  0086               	movwf	6
 16189  1E14  3001               	movlw	1	; select bank2/3
 16190  1E15  0087               	movwf	7
 16191  1E16  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16192  1E17  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16193  1E18  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16194  1E19  0801               	movf	1,w
 16195  1E1A  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16196  1E1B  39F7               	andlw	-9
 16197  1E1C  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16198  1E1D  0081               	movwf	1
 16199  1E1E  0008               	return
 16200  1E1F                     __end_of_setDimmerLights_TriggerAdj:	
 16201                           
 16202                           	psect	text99
 16203  1DA3                     __ptext99:	
 16204 ;; *************** function _setDimmerLights_Trigger *****************
 16205 ;; Defined at:
 16206 ;;		line 820 in file "../src/Dimmer_B1.c"
 16207 ;; Parameters:    Size  Location     Type
 16208 ;;  lights          1    wreg     unsigned char 
 16209 ;;  command         1    2[BANK0 ] unsigned char 
 16210 ;; Auto vars:     Size  Location     Type
 16211 ;;  lights          1    4[BANK0 ] unsigned char 
 16212 ;; Return value:  Size  Location     Type
 16213 ;;		None               void
 16214 ;; Registers used:
 16215 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16216 ;; Tracked objects:
 16217 ;;		On entry : 0/0
 16218 ;;		On exit  : 0/0
 16219 ;;		Unchanged: 0/0
 16220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16221 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16222 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16223 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16224 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16225 ;;Total ram usage:        3 bytes
 16226 ;; Hardware stack levels used:    1
 16227 ;; Hardware stack levels required when called:    6
 16228 ;; This function calls:
 16229 ;;		_DimmerLightsPointSelect
 16230 ;; This function is called by:
 16231 ;;		_setDimmerLights_SwOn
 16232 ;;		_setDimmerLights_SwOff
 16233 ;; This function uses a non-reentrant model
 16234 ;;
 16235                           
 16236                           
 16237                           ;psect for function _setDimmerLights_Trigger
 16238  1DA3                     _setDimmerLights_Trigger:	
 16239                           
 16240                           ;incstack = 0
 16241                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16242                           ;setDimmerLights_Trigger@lights stored from wreg
 16243  1DA3  0020               	movlb	0	; select bank0
 16244  1DA4  00A4               	movwf	setDimmerLights_Trigger@lights
 16245                           
 16246                           ;Dimmer_B1.c: 821: DimmerLightsPointSelect(lights);
 16247  1DA5  0824               	movf	setDimmerLights_Trigger@lights,w
 16248  1DA6  319C  2411         	fcall	_DimmerLightsPointSelect
 16249                           
 16250                           ;Dimmer_B1.c: 822: DimmerLights->Trigger = 1;
 16251  1DA8  0877               	movf	_DimmerLights,w
 16252  1DA9  3E08               	addlw	8
 16253  1DAA  0086               	movwf	6
 16254  1DAB  3001               	movlw	1	; select bank2/3
 16255  1DAC  0087               	movwf	7
 16256  1DAD  1501               	bsf	1,2
 16257                           
 16258                           ;Dimmer_B1.c: 823: DimmerLights->Switch = command == 1 ? 1 : 0;
 16259  1DAE  0020               	movlb	0	; select bank0
 16260  1DAF  0822               	movf	setDimmerLights_Trigger@command,w
 16261  1DB0  3A01               	xorlw	1
 16262  1DB1  3000               	movlw	0
 16263  1DB2  1903               	skipnz
 16264  1DB3  3001               	movlw	1
 16265  1DB4  00A3               	movwf	??_setDimmerLights_Trigger
 16266  1DB5  0877               	movf	_DimmerLights,w
 16267  1DB6  3E08               	addlw	8
 16268  1DB7  0086               	movwf	6
 16269  1DB8  3001               	movlw	1	; select bank2/3
 16270  1DB9  0087               	movwf	7
 16271  1DBA  0DA3               	rlf	??_setDimmerLights_Trigger,f
 16272  1DBB  0801               	movf	1,w
 16273  1DBC  0623               	xorwf	??_setDimmerLights_Trigger,w
 16274  1DBD  39FD               	andlw	-3
 16275  1DBE  0623               	xorwf	??_setDimmerLights_Trigger,w
 16276  1DBF  0081               	movwf	1
 16277  1DC0  0008               	return
 16278  1DC1                     __end_of_setDimmerLights_Trigger:	
 16279                           
 16280                           	psect	text100
 16281  179F                     __ptext100:	
 16282 ;; *************** function _setDelayOff_GO *****************
 16283 ;; Defined at:
 16284 ;;		line 86 in file "../src/DelayOff_B1.c"
 16285 ;; Parameters:    Size  Location     Type
 16286 ;;  sw              1    wreg     unsigned char 
 16287 ;;  command         1   10[BANK0 ] unsigned char 
 16288 ;;  value           1   11[BANK0 ] unsigned char 
 16289 ;; Auto vars:     Size  Location     Type
 16290 ;;  sw              1   14[BANK0 ] unsigned char 
 16291 ;; Return value:  Size  Location     Type
 16292 ;;		None               void
 16293 ;; Registers used:
 16294 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16295 ;; Tracked objects:
 16296 ;;		On entry : 0/0
 16297 ;;		On exit  : 0/0
 16298 ;;		Unchanged: 0/0
 16299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16300 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16301 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16302 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16303 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16304 ;;Total ram usage:        5 bytes
 16305 ;; Hardware stack levels used:    1
 16306 ;; Hardware stack levels required when called:    7
 16307 ;; This function calls:
 16308 ;;		_DelayOffPointSelect
 16309 ;;		_DelayTimejudge
 16310 ;; This function is called by:
 16311 ;;		_setDimmerLights_SwOff
 16312 ;;		_setRFSW_Control
 16313 ;; This function uses a non-reentrant model
 16314 ;;
 16315                           
 16316                           
 16317                           ;psect for function _setDelayOff_GO
 16318  179F                     _setDelayOff_GO:	
 16319                           
 16320                           ;incstack = 0
 16321                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16322                           ;setDelayOff_GO@sw stored from wreg
 16323  179F  0020               	movlb	0	; select bank0
 16324  17A0  00AE               	movwf	setDelayOff_GO@sw
 16325                           
 16326                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
 16327  17A1  082E               	movf	setDelayOff_GO@sw,w
 16328  17A2  319C  2471  3197   	fcall	_DelayOffPointSelect
 16329                           
 16330                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
 16331  17A5  0876               	movf	_DelayOff,w
 16332  17A6  0086               	movwf	6
 16333  17A7  3001               	movlw	1	; select bank2/3
 16334  17A8  0087               	movwf	7
 16335  17A9  1C01               	btfss	1,0
 16336  17AA  0008               	return
 16337                           
 16338                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
 16339  17AB  0020               	movlb	0	; select bank0
 16340  17AC  082A               	movf	setDelayOff_GO@command,w
 16341  17AD  3A01               	xorlw	1
 16342  17AE  3000               	movlw	0
 16343  17AF  1903               	skipnz
 16344  17B0  3001               	movlw	1
 16345  17B1  00AC               	movwf	??_setDelayOff_GO
 16346  17B2  0876               	movf	_DelayOff,w
 16347  17B3  0086               	movwf	6
 16348  17B4  3001               	movlw	1	; select bank2/3
 16349  17B5  0087               	movwf	7
 16350  17B6  0DAC               	rlf	??_setDelayOff_GO,f
 16351  17B7  0801               	movf	1,w
 16352  17B8  062C               	xorwf	??_setDelayOff_GO,w
 16353  17B9  39FD               	andlw	-3
 16354  17BA  062C               	xorwf	??_setDelayOff_GO,w
 16355  17BB  0081               	movwf	1
 16356                           
 16357                           ;DelayOff_B1.c: 90: if (command == 1) {
 16358  17BC  082A               	movf	setDelayOff_GO@command,w
 16359  17BD  3A01               	xorlw	1
 16360  17BE  1D03               	skipz
 16361  17BF  2FEA               	goto	l8842
 16362                           
 16363                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
 16364  17C0  082B               	movf	setDelayOff_GO@value,w
 16365  17C1  319F  27D6  3197   	fcall	_DelayTimejudge
 16366  17C4  0020               	movlb	0	; select bank0
 16367  17C5  00AC               	movwf	??_setDelayOff_GO
 16368  17C6  0876               	movf	_DelayOff,w
 16369  17C7  0086               	movwf	6
 16370  17C8  3001               	movlw	1	; select bank2/3
 16371  17C9  0087               	movwf	7
 16372  17CA  082C               	movf	??_setDelayOff_GO,w
 16373  17CB  0081               	movwf	1
 16374                           
 16375                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16376  17CC  300F               	movlw	15
 16377  17CD  052B               	andwf	setDelayOff_GO@value,w
 16378  17CE  00AC               	movwf	??_setDelayOff_GO
 16379  17CF  082C               	movf	??_setDelayOff_GO,w
 16380  17D0  3A05               	xorlw	5
 16381  17D1  1903               	skipnz
 16382  17D2  2FD7               	goto	l8836
 16383  17D3  082B               	movf	setDelayOff_GO@value,w
 16384  17D4  390F               	andlw	15
 16385  17D5  1D03               	btfss	3,2
 16386  17D6  2FDD               	goto	l8840
 16387  17D7                     l8836:	
 16388  17D7  3026               	movlw	38
 16389  17D8  022B               	subwf	setDelayOff_GO@value,w
 16390  17D9  1803               	skipnc
 16391  17DA  2FDD               	goto	l8840
 16392                           
 16393                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
 16394  17DB  082B               	movf	setDelayOff_GO@value,w
 16395  17DC  2FDE               	goto	L8
 16396  17DD                     l8840:	
 16397                           ;DelayOff_B1.c: 94: } else {
 16398                           
 16399                           
 16400                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
 16401  17DD  3005               	movlw	5
 16402  17DE                     L8:	
 16403  17DE  00AC               	movwf	??_setDelayOff_GO
 16404  17DF  082E               	movf	setDelayOff_GO@sw,w
 16405  17E0  3E1A               	addlw	26
 16406  17E1  077B               	addwf	_product,w
 16407  17E2  00AD               	movwf	??_setDelayOff_GO+1
 16408  17E3  082D               	movf	??_setDelayOff_GO+1,w
 16409  17E4  0086               	movwf	6
 16410  17E5  3002               	movlw	2	; select bank4/5
 16411  17E6  0087               	movwf	7
 16412  17E7  082C               	movf	??_setDelayOff_GO,w
 16413  17E8  0081               	movwf	1
 16414                           
 16415                           ;DelayOff_B1.c: 96: }
 16416                           ;DelayOff_B1.c: 97: } else {
 16417  17E9  2FF3               	goto	l8844
 16418  17EA                     l8842:	
 16419                           
 16420                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
 16421  17EA  082E               	movf	setDelayOff_GO@sw,w
 16422  17EB  3E1A               	addlw	26
 16423  17EC  077B               	addwf	_product,w
 16424  17ED  00AC               	movwf	??_setDelayOff_GO
 16425  17EE  082C               	movf	??_setDelayOff_GO,w
 16426  17EF  0086               	movwf	6
 16427  17F0  3002               	movlw	2	; select bank4/5
 16428  17F1  0087               	movwf	7
 16429  17F2  0181               	clrf	1
 16430  17F3                     l8844:	
 16431                           
 16432                           ;DelayOff_B1.c: 99: }
 16433                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
 16434  17F3  0876               	movf	_DelayOff,w
 16435  17F4  0086               	movwf	6
 16436  17F5  3001               	movlw	1	; select bank2/3
 16437  17F6  0087               	movwf	7
 16438  17F7  3000               	movlw	0
 16439  17F8  3FC0               	movwi [0]fsr1
 16440  17F9  3FC1               	movwi [1]fsr1
 16441                           
 16442                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
 16443  17FA  0876               	movf	_DelayOff,w
 16444  17FB  0086               	movwf	6
 16445  17FC  3001               	movlw	1	; select bank2/3
 16446  17FD  0087               	movwf	7
 16447  17FE  0181               	clrf	1
 16448  17FF  0008               	return
 16449  1800                     __end_of_setDelayOff_GO:	
 16450                           
 16451                           	psect	text101
 16452  1FD6                     __ptext101:	
 16453 ;; *************** function _DelayTimejudge *****************
 16454 ;; Defined at:
 16455 ;;		line 106 in file "../src/DelayOff_B1.c"
 16456 ;; Parameters:    Size  Location     Type
 16457 ;;  value           1    wreg     unsigned char 
 16458 ;; Auto vars:     Size  Location     Type
 16459 ;;  value           1    9[BANK0 ] unsigned char 
 16460 ;;  k               1    8[BANK0 ] unsigned char 
 16461 ;;  j               1    7[BANK0 ] unsigned char 
 16462 ;;  i               1    6[BANK0 ] unsigned char 
 16463 ;; Return value:  Size  Location     Type
 16464 ;;                  1    wreg      unsigned char 
 16465 ;; Registers used:
 16466 ;;		wreg, status,2, status,0, pclath, cstack
 16467 ;; Tracked objects:
 16468 ;;		On entry : 0/0
 16469 ;;		On exit  : 0/0
 16470 ;;		Unchanged: 0/0
 16471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16473 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16474 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16475 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16476 ;;Total ram usage:        6 bytes
 16477 ;; Hardware stack levels used:    1
 16478 ;; Hardware stack levels required when called:    6
 16479 ;; This function calls:
 16480 ;;		___bmul
 16481 ;; This function is called by:
 16482 ;;		_setDelayOff_GO
 16483 ;; This function uses a non-reentrant model
 16484 ;;
 16485                           
 16486                           
 16487                           ;psect for function _DelayTimejudge
 16488  1FD6                     _DelayTimejudge:	
 16489                           
 16490                           ;incstack = 0
 16491                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16492                           ;DelayTimejudge@value stored from wreg
 16493  1FD6  0020               	movlb	0	; select bank0
 16494  1FD7  00A9               	movwf	DelayTimejudge@value
 16495                           
 16496                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
 16497  1FD8  3005               	movlw	5
 16498  1FD9  00A4               	movwf	??_DelayTimejudge
 16499  1FDA  0824               	movf	??_DelayTimejudge,w
 16500  1FDB  00A6               	movwf	DelayTimejudge@i
 16501  1FDC  01A7               	clrf	DelayTimejudge@j
 16502  1FDD  01A8               	clrf	DelayTimejudge@k
 16503                           
 16504                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
 16505  1FDE  3031               	movlw	49
 16506  1FDF  0229               	subwf	DelayTimejudge@value,w
 16507  1FE0  1803               	skipnc
 16508  1FE1  2FFE               	goto	l8706
 16509                           
 16510                           ;DelayOff_B1.c: 109: j = value & 0x0f;
 16511  1FE2  0829               	movf	DelayTimejudge@value,w
 16512  1FE3  390F               	andlw	15
 16513  1FE4  00A4               	movwf	??_DelayTimejudge
 16514  1FE5  0824               	movf	??_DelayTimejudge,w
 16515  1FE6  00A7               	movwf	DelayTimejudge@j
 16516                           
 16517                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
 16518  1FE7  0829               	movf	DelayTimejudge@value,w
 16519  1FE8  00A4               	movwf	??_DelayTimejudge
 16520  1FE9  3004               	movlw	4
 16521  1FEA                     u9255:	
 16522  1FEA  36A4               	lsrf	??_DelayTimejudge,f
 16523  1FEB  0B89               	decfsz	9,f
 16524  1FEC  2FEA               	goto	u9255
 16525  1FED  0824               	movf	??_DelayTimejudge,w
 16526  1FEE  390F               	andlw	15
 16527  1FEF  00A5               	movwf	??_DelayTimejudge+1
 16528  1FF0  0825               	movf	??_DelayTimejudge+1,w
 16529  1FF1  00A8               	movwf	DelayTimejudge@k
 16530                           
 16531                           ;DelayOff_B1.c: 111: i = j + (k * 10);
 16532  1FF2  300A               	movlw	10
 16533  1FF3  00A4               	movwf	??_DelayTimejudge
 16534  1FF4  0824               	movf	??_DelayTimejudge,w
 16535  1FF5  00A0               	movwf	___bmul@multiplicand
 16536  1FF6  0828               	movf	DelayTimejudge@k,w
 16537  1FF7  319B  23C9         	fcall	___bmul
 16538  1FF9  0020               	movlb	0	; select bank0
 16539  1FFA  0727               	addwf	DelayTimejudge@j,w
 16540  1FFB  00A5               	movwf	??_DelayTimejudge+1
 16541  1FFC  0825               	movf	??_DelayTimejudge+1,w
 16542  1FFD  00A6               	movwf	DelayTimejudge@i
 16543  1FFE                     l8706:	
 16544                           
 16545                           ;DelayOff_B1.c: 112: }
 16546                           ;DelayOff_B1.c: 133: return i;
 16547  1FFE  0826               	movf	DelayTimejudge@i,w
 16548  1FFF  0008               	return
 16549  2000                     __end_of_DelayTimejudge:	
 16550                           
 16551                           	psect	text102
 16552  1BC9                     __ptext102:	
 16553 ;; *************** function ___bmul *****************
 16554 ;; Defined at:
 16555 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16556 ;; Parameters:    Size  Location     Type
 16557 ;;  multiplier      1    wreg     unsigned char 
 16558 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16559 ;; Auto vars:     Size  Location     Type
 16560 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16561 ;;  product         1    2[BANK0 ] unsigned char 
 16562 ;; Return value:  Size  Location     Type
 16563 ;;                  1    wreg      unsigned char 
 16564 ;; Registers used:
 16565 ;;		wreg, status,2, status,0
 16566 ;; Tracked objects:
 16567 ;;		On entry : 0/0
 16568 ;;		On exit  : 0/0
 16569 ;;		Unchanged: 0/0
 16570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16571 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16572 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16573 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16574 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16575 ;;Total ram usage:        4 bytes
 16576 ;; Hardware stack levels used:    1
 16577 ;; Hardware stack levels required when called:    5
 16578 ;; This function calls:
 16579 ;;		Nothing
 16580 ;; This function is called by:
 16581 ;;		_DelayTimejudge
 16582 ;; This function uses a non-reentrant model
 16583 ;;
 16584                           
 16585                           
 16586                           ;psect for function ___bmul
 16587  1BC9                     ___bmul:	
 16588                           
 16589                           ;incstack = 0
 16590                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16591                           ;___bmul@multiplier stored from wreg
 16592  1BC9  0020               	movlb	0	; select bank0
 16593  1BCA  00A3               	movwf	___bmul@multiplier
 16594  1BCB  01A2               	clrf	___bmul@product
 16595  1BCC                     l8452:	
 16596  1BCC  1C23               	btfss	___bmul@multiplier,0
 16597  1BCD  2BD2               	goto	l8456
 16598  1BCE  0820               	movf	___bmul@multiplicand,w
 16599  1BCF  00A1               	movwf	??___bmul
 16600  1BD0  0821               	movf	??___bmul,w
 16601  1BD1  07A2               	addwf	___bmul@product,f
 16602  1BD2                     l8456:	
 16603  1BD2  1003               	clrc
 16604  1BD3  0DA0               	rlf	___bmul@multiplicand,f
 16605  1BD4  1003               	clrc
 16606  1BD5  0CA3               	rrf	___bmul@multiplier,f
 16607  1BD6  08A3               	movf	___bmul@multiplier,f
 16608  1BD7  1D03               	skipz
 16609  1BD8  2BCC               	goto	l8452
 16610  1BD9  0822               	movf	___bmul@product,w
 16611  1BDA  0008               	return
 16612  1BDB                     __end_of___bmul:	
 16613                           
 16614                           	psect	text103
 16615  1B74                     __ptext103:	
 16616 ;; *************** function _getDimmerLights_Status *****************
 16617 ;; Defined at:
 16618 ;;		line 470 in file "../src/Dimmer_B1.c"
 16619 ;; Parameters:    Size  Location     Type
 16620 ;;  lights          1    wreg     unsigned char 
 16621 ;; Auto vars:     Size  Location     Type
 16622 ;;  lights          1    2[BANK0 ] unsigned char 
 16623 ;;  status          1    3[BANK0 ] unsigned char 
 16624 ;; Return value:  Size  Location     Type
 16625 ;;                  1    wreg      unsigned char 
 16626 ;; Registers used:
 16627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16628 ;; Tracked objects:
 16629 ;;		On entry : 0/0
 16630 ;;		On exit  : 0/0
 16631 ;;		Unchanged: 0/0
 16632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16634 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16636 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16637 ;;Total ram usage:        2 bytes
 16638 ;; Hardware stack levels used:    1
 16639 ;; Hardware stack levels required when called:    6
 16640 ;; This function calls:
 16641 ;;		_DimmerLightsPointSelect
 16642 ;; This function is called by:
 16643 ;;		_DlyOff_Main
 16644 ;;		_setDimmerLights_ErrorClose
 16645 ;;		_getMain_LightsStatus
 16646 ;;		_setRFSW_Control
 16647 ;;		_setRFSW_AdjControl
 16648 ;; This function uses a non-reentrant model
 16649 ;;
 16650                           
 16651                           
 16652                           ;psect for function _getDimmerLights_Status
 16653  1B74                     _getDimmerLights_Status:	
 16654                           
 16655                           ;incstack = 0
 16656                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16657                           ;getDimmerLights_Status@lights stored from wreg
 16658  1B74  0020               	movlb	0	; select bank0
 16659  1B75  00A2               	movwf	getDimmerLights_Status@lights
 16660                           
 16661                           ;Dimmer_B1.c: 471: DimmerLightsPointSelect(lights);
 16662  1B76  0822               	movf	getDimmerLights_Status@lights,w
 16663  1B77  319C  2411         	fcall	_DimmerLightsPointSelect
 16664                           
 16665                           ;Dimmer_B1.c: 472: char status = DimmerLights->Status == 1 ? 1 : 0;
 16666  1B79  0877               	movf	_DimmerLights,w
 16667  1B7A  0086               	movwf	6
 16668  1B7B  3001               	movlw	1	; select bank2/3
 16669  1B7C  0087               	movwf	7
 16670  1B7D  3000               	movlw	0
 16671  1B7E  1A81               	btfsc	1,5
 16672  1B7F  3001               	movlw	1
 16673  1B80  0020               	movlb	0	; select bank0
 16674  1B81  00A3               	movwf	getDimmerLights_Status@status
 16675                           
 16676                           ;Dimmer_B1.c: 473: return status;
 16677  1B82  0823               	movf	getDimmerLights_Status@status,w
 16678  1B83  0008               	return
 16679  1B84                     __end_of_getDimmerLights_Status:	
 16680                           
 16681                           	psect	text104
 16682  1C11                     __ptext104:	
 16683 ;; *************** function _DimmerLightsPointSelect *****************
 16684 ;; Defined at:
 16685 ;;		line 323 in file "../src/Dimmer_B1.c"
 16686 ;; Parameters:    Size  Location     Type
 16687 ;;  lights          1    wreg     unsigned char 
 16688 ;; Auto vars:     Size  Location     Type
 16689 ;;  lights          1    1[BANK0 ] unsigned char 
 16690 ;; Return value:  Size  Location     Type
 16691 ;;		None               void
 16692 ;; Registers used:
 16693 ;;		wreg
 16694 ;; Tracked objects:
 16695 ;;		On entry : 0/0
 16696 ;;		On exit  : 0/0
 16697 ;;		Unchanged: 0/0
 16698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16700 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16701 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16702 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16703 ;;Total ram usage:        2 bytes
 16704 ;; Hardware stack levels used:    1
 16705 ;; Hardware stack levels required when called:    5
 16706 ;; This function calls:
 16707 ;;		Nothing
 16708 ;; This function is called by:
 16709 ;;		_setDimmerLights_Initialization
 16710 ;;		_setDimmerLights_Main
 16711 ;;		_getDimmerLights_Status
 16712 ;;		_setDimmerLights_SwOn
 16713 ;;		_setDimmerLights_SwOff
 16714 ;;		_setDimmerLights_AdjControl
 16715 ;;		_setDimmerLights_ErrorClose
 16716 ;;		_setDimmerLights
 16717 ;;		_setDimmerLights_Adj
 16718 ;;		_setDimmerLights_AdjRF
 16719 ;;		_setDimmerLights_Trigger
 16720 ;;		_setDimmerLights_TriggerAdj
 16721 ;;		_setDimmerLights_Status
 16722 ;;		_setDimmerLights_GO
 16723 ;;		_setDimmerLights_MaxmumValue
 16724 ;; This function uses a non-reentrant model
 16725 ;;
 16726                           
 16727                           
 16728                           ;psect for function _DimmerLightsPointSelect
 16729  1C11                     _DimmerLightsPointSelect:	
 16730                           
 16731                           ;incstack = 0
 16732                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16733                           ;DimmerLightsPointSelect@lights stored from wreg
 16734  1C11  0020               	movlb	0	; select bank0
 16735  1C12  00A1               	movwf	DimmerLightsPointSelect@lights
 16736                           
 16737                           ;Dimmer_B1.c: 325: if (lights == 1) {
 16738  1C13  0821               	movf	DimmerLightsPointSelect@lights,w
 16739  1C14  3A01               	xorlw	1
 16740  1C15  1D03               	skipz
 16741  1C16  2C1B               	goto	l790
 16742                           
 16743                           ;Dimmer_B1.c: 326: DimmerLights = &DimmerLights1;
 16744  1C17  30BE               	movlw	_DimmerLights1& (0+255)
 16745  1C18  00A0               	movwf	??_DimmerLightsPointSelect
 16746  1C19  0820               	movf	??_DimmerLightsPointSelect,w
 16747  1C1A  00F7               	movwf	_DimmerLights
 16748  1C1B                     l790:	
 16749                           
 16750                           ;Dimmer_B1.c: 327: }
 16751                           ;Dimmer_B1.c: 330: if (lights == 2) {
 16752  1C1B  0821               	movf	DimmerLightsPointSelect@lights,w
 16753  1C1C  3A02               	xorlw	2
 16754  1C1D  1D03               	skipz
 16755  1C1E  0008               	return
 16756                           
 16757                           ;Dimmer_B1.c: 331: DimmerLights = &DimmerLights2;
 16758  1C1F  30CD               	movlw	_DimmerLights2& (0+255)
 16759  1C20  00A0               	movwf	??_DimmerLightsPointSelect
 16760  1C21  0820               	movf	??_DimmerLightsPointSelect,w
 16761  1C22  00F7               	movwf	_DimmerLights
 16762  1C23  0008               	return
 16763  1C24                     __end_of_DimmerLightsPointSelect:	
 16764                           
 16765                           	psect	text105
 16766  1A94                     __ptext105:	
 16767 ;; *************** function _DelayOff_Initialization *****************
 16768 ;; Defined at:
 16769 ;;		line 26 in file "../src/DelayOff_B1.c"
 16770 ;; Parameters:    Size  Location     Type
 16771 ;;		None
 16772 ;; Auto vars:     Size  Location     Type
 16773 ;;		None
 16774 ;; Return value:  Size  Location     Type
 16775 ;;		None               void
 16776 ;; Registers used:
 16777 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16778 ;; Tracked objects:
 16779 ;;		On entry : 0/0
 16780 ;;		On exit  : 0/0
 16781 ;;		Unchanged: 0/0
 16782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16787 ;;Total ram usage:        0 bytes
 16788 ;; Hardware stack levels used:    1
 16789 ;; Hardware stack levels required when called:    7
 16790 ;; This function calls:
 16791 ;;		_DlyOff_Initialization
 16792 ;; This function is called by:
 16793 ;;		_main
 16794 ;; This function uses a non-reentrant model
 16795 ;;
 16796                           
 16797                           
 16798                           ;psect for function _DelayOff_Initialization
 16799  1A94                     _DelayOff_Initialization:	
 16800                           
 16801                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16802                           
 16803                           ;incstack = 0
 16804                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16805  1A94  3001               	movlw	1
 16806  1A95  319A  22C5  319A   	fcall	_DlyOff_Initialization
 16807                           
 16808                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16809  1A98  3002               	movlw	2
 16810  1A99  319A  22C5         	fcall	_DlyOff_Initialization
 16811  1A9B  0008               	return
 16812  1A9C                     __end_of_DelayOff_Initialization:	
 16813                           
 16814                           	psect	text106
 16815  1AC5                     __ptext106:	
 16816 ;; *************** function _DlyOff_Initialization *****************
 16817 ;; Defined at:
 16818 ;;		line 56 in file "../src/DelayOff_B1.c"
 16819 ;; Parameters:    Size  Location     Type
 16820 ;;  sw              1    wreg     unsigned char 
 16821 ;; Auto vars:     Size  Location     Type
 16822 ;;  sw              1    2[BANK0 ] unsigned char 
 16823 ;; Return value:  Size  Location     Type
 16824 ;;		None               void
 16825 ;; Registers used:
 16826 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16827 ;; Tracked objects:
 16828 ;;		On entry : 0/0
 16829 ;;		On exit  : 0/0
 16830 ;;		Unchanged: 0/0
 16831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16835 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16836 ;;Total ram usage:        1 bytes
 16837 ;; Hardware stack levels used:    1
 16838 ;; Hardware stack levels required when called:    6
 16839 ;; This function calls:
 16840 ;;		_DelayOffPointSelect
 16841 ;; This function is called by:
 16842 ;;		_DelayOff_Initialization
 16843 ;; This function uses a non-reentrant model
 16844 ;;
 16845                           
 16846                           
 16847                           ;psect for function _DlyOff_Initialization
 16848  1AC5                     _DlyOff_Initialization:	
 16849                           
 16850                           ;incstack = 0
 16851                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16852                           ;DlyOff_Initialization@sw stored from wreg
 16853  1AC5  0020               	movlb	0	; select bank0
 16854  1AC6  00A2               	movwf	DlyOff_Initialization@sw
 16855                           
 16856                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16857  1AC7  0822               	movf	DlyOff_Initialization@sw,w
 16858  1AC8  319C  2471         	fcall	_DelayOffPointSelect
 16859                           
 16860                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 16861  1ACA  0876               	movf	_DelayOff,w
 16862  1ACB  0086               	movwf	6
 16863  1ACC  3001               	movlw	1	; select bank2/3
 16864  1ACD  0087               	movwf	7
 16865  1ACE  1401               	bsf	1,0
 16866  1ACF  0008               	return
 16867  1AD0                     __end_of_DlyOff_Initialization:	
 16868                           
 16869                           	psect	text107
 16870  1C71                     __ptext107:	
 16871 ;; *************** function _DelayOffPointSelect *****************
 16872 ;; Defined at:
 16873 ;;		line 7 in file "../src/DelayOff_B1.c"
 16874 ;; Parameters:    Size  Location     Type
 16875 ;;  sw              1    wreg     unsigned char 
 16876 ;; Auto vars:     Size  Location     Type
 16877 ;;  sw              1    1[BANK0 ] unsigned char 
 16878 ;; Return value:  Size  Location     Type
 16879 ;;		None               void
 16880 ;; Registers used:
 16881 ;;		wreg
 16882 ;; Tracked objects:
 16883 ;;		On entry : 0/0
 16884 ;;		On exit  : 0/0
 16885 ;;		Unchanged: 0/0
 16886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16890 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16891 ;;Total ram usage:        2 bytes
 16892 ;; Hardware stack levels used:    1
 16893 ;; Hardware stack levels required when called:    5
 16894 ;; This function calls:
 16895 ;;		Nothing
 16896 ;; This function is called by:
 16897 ;;		_DlyOff_Initialization
 16898 ;;		_DlyOff_Main
 16899 ;;		_setDelayOff_GO
 16900 ;; This function uses a non-reentrant model
 16901 ;;
 16902                           
 16903                           
 16904                           ;psect for function _DelayOffPointSelect
 16905  1C71                     _DelayOffPointSelect:	
 16906                           
 16907                           ;incstack = 0
 16908                           ; Regs used in _DelayOffPointSelect: [wreg]
 16909                           ;DelayOffPointSelect@sw stored from wreg
 16910  1C71  0020               	movlb	0	; select bank0
 16911  1C72  00A1               	movwf	DelayOffPointSelect@sw
 16912                           
 16913                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16914  1C73  0821               	movf	DelayOffPointSelect@sw,w
 16915  1C74  3A01               	xorlw	1
 16916  1C75  1D03               	skipz
 16917  1C76  2C7C               	goto	l8690
 16918                           
 16919                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16920  1C77  3069               	movlw	_DlySw1& (0+255)
 16921  1C78  00A0               	movwf	??_DelayOffPointSelect
 16922  1C79  0820               	movf	??_DelayOffPointSelect,w
 16923  1C7A  00F6               	movwf	_DelayOff
 16924                           
 16925                           ;DelayOff_B1.c: 11: }
 16926  1C7B  0008               	return
 16927  1C7C                     l8690:	
 16928                           
 16929                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 16930  1C7C  0821               	movf	DelayOffPointSelect@sw,w
 16931  1C7D  3A02               	xorlw	2
 16932  1C7E  1D03               	skipz
 16933  1C7F  0008               	return
 16934                           
 16935                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 16936  1C80  306B               	movlw	_DlySw2& (0+255)
 16937  1C81  00A0               	movwf	??_DelayOffPointSelect
 16938  1C82  0820               	movf	??_DelayOffPointSelect,w
 16939  1C83  00F6               	movwf	_DelayOff
 16940  1C84  0008               	return
 16941  1C85                     __end_of_DelayOffPointSelect:	
 16942                           
 16943                           	psect	text108
 16944  1CC2                     __ptext108:	
 16945 ;; *************** function _CC2500_PowerOnInitial *****************
 16946 ;; Defined at:
 16947 ;;		line 122 in file "../src/CC2500_B1.c"
 16948 ;; Parameters:    Size  Location     Type
 16949 ;;		None
 16950 ;; Auto vars:     Size  Location     Type
 16951 ;;		None
 16952 ;; Return value:  Size  Location     Type
 16953 ;;		None               void
 16954 ;; Registers used:
 16955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16956 ;; Tracked objects:
 16957 ;;		On entry : 0/0
 16958 ;;		On exit  : 0/0
 16959 ;;		Unchanged: 0/0
 16960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16965 ;;Total ram usage:        0 bytes
 16966 ;; Hardware stack levels used:    1
 16967 ;; Hardware stack levels required when called:    8
 16968 ;; This function calls:
 16969 ;;		_CC2500_ClearRXFIFO
 16970 ;;		_CC2500_ClearTXFIFO
 16971 ;;		_CC2500_FrequencyCabr
 16972 ;;		_CC2500_InitPATable
 16973 ;;		_CC2500_InitSetREG
 16974 ;;		_CC2500_PowerRST
 16975 ;;		_CC2500_SIDLEMode
 16976 ;; This function is called by:
 16977 ;;		_main
 16978 ;; This function uses a non-reentrant model
 16979 ;;
 16980                           
 16981                           
 16982                           ;psect for function _CC2500_PowerOnInitial
 16983  1CC2                     _CC2500_PowerOnInitial:	
 16984                           
 16985                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 16986                           
 16987                           ;incstack = 0
 16988                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16989  1CC2  3192  2292  319C   	fcall	_CC2500_PowerRST
 16990                           
 16991                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 16992  1CC5  319F  27AC  319C   	fcall	_CC2500_InitSetREG
 16993                           
 16994                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 16995  1CC8  319D  25C1  319C   	fcall	_CC2500_InitPATable
 16996                           
 16997                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 16998  1CCB  319A  2263  319C   	fcall	_CC2500_ClearTXFIFO
 16999                           
 17000                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 17001  1CCE  319A  225F  319C   	fcall	_CC2500_ClearRXFIFO
 17002                           
 17003                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 17004  1CD1  319A  22DB  319C   	fcall	_CC2500_FrequencyCabr
 17005                           
 17006                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 17007  1CD4  319A  2267         	fcall	_CC2500_SIDLEMode
 17008  1CD6  0008               	return
 17009  1CD7                     __end_of_CC2500_PowerOnInitial:	
 17010                           
 17011                           	psect	text109
 17012  1A67                     __ptext109:	
 17013 ;; *************** function _CC2500_SIDLEMode *****************
 17014 ;; Defined at:
 17015 ;;		line 212 in file "../src/CC2500_B1.c"
 17016 ;; Parameters:    Size  Location     Type
 17017 ;;		None
 17018 ;; Auto vars:     Size  Location     Type
 17019 ;;		None
 17020 ;; Return value:  Size  Location     Type
 17021 ;;		None               void
 17022 ;; Registers used:
 17023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17024 ;; Tracked objects:
 17025 ;;		On entry : 0/0
 17026 ;;		On exit  : 0/0
 17027 ;;		Unchanged: 0/0
 17028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17033 ;;Total ram usage:        0 bytes
 17034 ;; Hardware stack levels used:    1
 17035 ;; Hardware stack levels required when called:    7
 17036 ;; This function calls:
 17037 ;;		_CC2500_WriteCommand
 17038 ;; This function is called by:
 17039 ;;		_CC2500_PowerOnInitial
 17040 ;; This function uses a non-reentrant model
 17041 ;;
 17042                           
 17043                           
 17044                           ;psect for function _CC2500_SIDLEMode
 17045  1A67                     _CC2500_SIDLEMode:	
 17046                           
 17047                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 17048                           
 17049                           ;incstack = 0
 17050                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17051  1A67  3036               	movlw	54
 17052  1A68  319D  2536         	fcall	_CC2500_WriteCommand
 17053  1A6A  0008               	return
 17054  1A6B                     __end_of_CC2500_SIDLEMode:	
 17055                           
 17056                           	psect	text110
 17057  1292                     __ptext110:	
 17058 ;; *************** function _CC2500_PowerRST *****************
 17059 ;; Defined at:
 17060 ;;		line 135 in file "../src/CC2500_B1.c"
 17061 ;; Parameters:    Size  Location     Type
 17062 ;;		None
 17063 ;; Auto vars:     Size  Location     Type
 17064 ;;		None
 17065 ;; Return value:  Size  Location     Type
 17066 ;;		None               void
 17067 ;; Registers used:
 17068 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17069 ;; Tracked objects:
 17070 ;;		On entry : 0/0
 17071 ;;		On exit  : 0/0
 17072 ;;		Unchanged: 0/0
 17073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17077 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17078 ;;Total ram usage:        1 bytes
 17079 ;; Hardware stack levels used:    1
 17080 ;; Hardware stack levels required when called:    6
 17081 ;; This function calls:
 17082 ;;		_CC2500_WriteByte
 17083 ;;		_DelayTime_1us
 17084 ;;		_Timeout_Counter
 17085 ;;		_set_TimeoutCleared
 17086 ;; This function is called by:
 17087 ;;		_CC2500_PowerOnInitial
 17088 ;; This function uses a non-reentrant model
 17089 ;;
 17090                           
 17091                           
 17092                           ;psect for function _CC2500_PowerRST
 17093  1292                     _CC2500_PowerRST:	
 17094                           
 17095                           ;CC2500_B1.c: 136: RC1 = 0;
 17096                           
 17097                           ;incstack = 0
 17098                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17099  1292  0020               	movlb	0	; select bank0
 17100  1293  108E               	bcf	14,1	;volatile
 17101                           
 17102                           ;CC2500_B1.c: 137: RC0 = 0;
 17103  1294  100E               	bcf	14,0	;volatile
 17104                           
 17105                           ;CC2500_B1.c: 138: RC4 = 1;
 17106  1295  160E               	bsf	14,4	;volatile
 17107                           
 17108                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 17109  1296  300A               	movlw	10
 17110  1297  00A0               	movwf	DelayTime_1us@count
 17111  1298  3000               	movlw	0
 17112  1299  00A1               	movwf	DelayTime_1us@count+1
 17113  129A  319F  270E  3192   	fcall	_DelayTime_1us
 17114                           
 17115                           ;CC2500_B1.c: 140: RC4 = 0;
 17116  129D  0020               	movlb	0	; select bank0
 17117  129E  120E               	bcf	14,4	;volatile
 17118                           
 17119                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 17120  129F  300A               	movlw	10
 17121  12A0  00A0               	movwf	DelayTime_1us@count
 17122  12A1  3000               	movlw	0
 17123  12A2  00A1               	movwf	DelayTime_1us@count+1
 17124  12A3  319F  270E  3192   	fcall	_DelayTime_1us
 17125                           
 17126                           ;CC2500_B1.c: 142: RC4 = 1;
 17127  12A6  0020               	movlb	0	; select bank0
 17128  12A7  160E               	bsf	14,4	;volatile
 17129                           
 17130                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 17131  12A8  3028               	movlw	40
 17132  12A9  00A0               	movwf	DelayTime_1us@count
 17133  12AA  3000               	movlw	0
 17134  12AB  00A1               	movwf	DelayTime_1us@count+1
 17135  12AC  319F  270E  3192   	fcall	_DelayTime_1us
 17136                           
 17137                           ;CC2500_B1.c: 144: RC4 = 0;
 17138  12AF  0020               	movlb	0	; select bank0
 17139  12B0  120E               	bcf	14,4	;volatile
 17140                           
 17141                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 17142  12B1  3030               	movlw	48
 17143  12B2  00A6               	movwf	??_CC2500_PowerRST
 17144  12B3  0826               	movf	??_CC2500_PowerRST,w
 17145  12B4  0021               	movlb	1	; select bank1
 17146  12B5  00D2               	movwf	_SPI0Buffer^(0+128)
 17147                           
 17148                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 17149  12B6  2ABA               	goto	l9686
 17150  12B7                     l9684:	
 17151                           
 17152                           ;CC2500_B1.c: 147: Timeout_Counter();
 17153  12B7  319C  24AD  3192   	fcall	_Timeout_Counter
 17154  12BA                     l9686:	
 17155  12BA  0020               	movlb	0	; select bank0
 17156  12BB  1D0E               	btfss	14,2	;volatile
 17157  12BC  2AC0               	goto	l9690
 17158  12BD  0021               	movlb	1	; select bank1
 17159  12BE  1D2D               	btfss	(_myMain^(0+128)+13),2
 17160  12BF  2AB7               	goto	l9684
 17161  12C0                     l9690:	
 17162                           
 17163                           ;CC2500_B1.c: 148: };
 17164                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 17165  12C0  319A  226F  3192   	fcall	_set_TimeoutCleared
 17166                           
 17167                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 17168  12C3  319D  2504  3192   	fcall	_CC2500_WriteByte
 17169                           
 17170                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 17171  12C6  2ACA               	goto	l9696
 17172  12C7                     l9694:	
 17173                           
 17174                           ;CC2500_B1.c: 152: Timeout_Counter();
 17175  12C7  319C  24AD  3192   	fcall	_Timeout_Counter
 17176  12CA                     l9696:	
 17177  12CA  0020               	movlb	0	; select bank0
 17178  12CB  1D0E               	btfss	14,2	;volatile
 17179  12CC  2AD0               	goto	l9700
 17180  12CD  0021               	movlb	1	; select bank1
 17181  12CE  1D2D               	btfss	(_myMain^(0+128)+13),2
 17182  12CF  2AC7               	goto	l9694
 17183  12D0                     l9700:	
 17184                           
 17185                           ;CC2500_B1.c: 153: };
 17186                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 17187  12D0  319A  226F         	fcall	_set_TimeoutCleared
 17188                           
 17189                           ;CC2500_B1.c: 155: RC0 = 0;
 17190  12D2  0020               	movlb	0	; select bank0
 17191  12D3  100E               	bcf	14,0	;volatile
 17192                           
 17193                           ;CC2500_B1.c: 156: RC4 = 1;
 17194  12D4  160E               	bsf	14,4	;volatile
 17195  12D5  0008               	return
 17196  12D6                     __end_of_CC2500_PowerRST:	
 17197                           
 17198                           	psect	text111
 17199  1FAC                     __ptext111:	
 17200 ;; *************** function _CC2500_InitSetREG *****************
 17201 ;; Defined at:
 17202 ;;		line 162 in file "../src/CC2500_B1.c"
 17203 ;; Parameters:    Size  Location     Type
 17204 ;;		None
 17205 ;; Auto vars:     Size  Location     Type
 17206 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17207 ;;  temp2           1    7[BANK0 ] unsigned char 
 17208 ;;  temp1           1    6[BANK0 ] unsigned char 
 17209 ;; Return value:  Size  Location     Type
 17210 ;;		None               void
 17211 ;; Registers used:
 17212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17213 ;; Tracked objects:
 17214 ;;		On entry : 0/0
 17215 ;;		On exit  : 0/0
 17216 ;;		Unchanged: 0/0
 17217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17219 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17221 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17222 ;;Total ram usage:        4 bytes
 17223 ;; Hardware stack levels used:    1
 17224 ;; Hardware stack levels required when called:    7
 17225 ;; This function calls:
 17226 ;;		_CC2500_WriteREG
 17227 ;; This function is called by:
 17228 ;;		_CC2500_PowerOnInitial
 17229 ;; This function uses a non-reentrant model
 17230 ;;
 17231                           
 17232                           
 17233                           ;psect for function _CC2500_InitSetREG
 17234  1FAC                     _CC2500_InitSetREG:	
 17235                           
 17236                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17237                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17238                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17239                           
 17240                           ;incstack = 0
 17241                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17242  1FAC  0020               	movlb	0	; select bank0
 17243  1FAD  01A8               	clrf	CC2500_InitSetREG@loop_c
 17244  1FAE                     L9:	
 17245  1FAE  302F               	movlw	47
 17246  1FAF  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17247  1FB0  1803               	btfsc	3,0
 17248  1FB1  0008               	return
 17249                           
 17250                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17251  1FB2  0828               	movf	CC2500_InitSetREG@loop_c,w
 17252  1FB3  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17253  1FB4  0084               	movwf	4
 17254  1FB5  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17255  1FB6  1803               	skipnc
 17256  1FB7  3E01               	addlw	1
 17257  1FB8  0085               	movwf	5
 17258  1FB9  0800               	movf	0,w	;code access
 17259  1FBA  00A5               	movwf	??_CC2500_InitSetREG
 17260  1FBB  0825               	movf	??_CC2500_InitSetREG,w
 17261  1FBC  00A6               	movwf	CC2500_InitSetREG@temp1
 17262                           
 17263                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17264  1FBD  0828               	movf	CC2500_InitSetREG@loop_c,w
 17265  1FBE  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17266  1FBF  0084               	movwf	4
 17267  1FC0  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17268  1FC1  1803               	skipnc
 17269  1FC2  3E01               	addlw	1
 17270  1FC3  0085               	movwf	5
 17271  1FC4  0800               	movf	0,w	;code access
 17272  1FC5  00A5               	movwf	??_CC2500_InitSetREG
 17273  1FC6  0825               	movf	??_CC2500_InitSetREG,w
 17274  1FC7  00A7               	movwf	CC2500_InitSetREG@temp2
 17275                           
 17276                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17277  1FC8  0827               	movf	CC2500_InitSetREG@temp2,w
 17278  1FC9  00A5               	movwf	??_CC2500_InitSetREG
 17279  1FCA  0825               	movf	??_CC2500_InitSetREG,w
 17280  1FCB  00A2               	movwf	CC2500_WriteREG@value
 17281  1FCC  0826               	movf	CC2500_InitSetREG@temp1,w
 17282  1FCD  3190  2066  319F   	fcall	_CC2500_WriteREG
 17283  1FD0  3001               	movlw	1
 17284  1FD1  0020               	movlb	0	; select bank0
 17285  1FD2  00A5               	movwf	??_CC2500_InitSetREG
 17286  1FD3  0825               	movf	??_CC2500_InitSetREG,w
 17287  1FD4  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17288  1FD5  2FAE               	goto	L9
 17289  1FD6                     __end_of_CC2500_InitSetREG:	
 17290                           
 17291                           	psect	text112
 17292  1DC1                     __ptext112:	
 17293 ;; *************** function _CC2500_InitPATable *****************
 17294 ;; Defined at:
 17295 ;;		line 177 in file "../src/CC2500_B1.c"
 17296 ;; Parameters:    Size  Location     Type
 17297 ;;		None
 17298 ;; Auto vars:     Size  Location     Type
 17299 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17300 ;;  temp            1    6[BANK0 ] unsigned char 
 17301 ;; Return value:  Size  Location     Type
 17302 ;;		None               void
 17303 ;; Registers used:
 17304 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17305 ;; Tracked objects:
 17306 ;;		On entry : 0/0
 17307 ;;		On exit  : 0/0
 17308 ;;		Unchanged: 0/0
 17309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17311 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17312 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17313 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;Total ram usage:        3 bytes
 17315 ;; Hardware stack levels used:    1
 17316 ;; Hardware stack levels required when called:    7
 17317 ;; This function calls:
 17318 ;;		_CC2500_WriteREG
 17319 ;; This function is called by:
 17320 ;;		_CC2500_PowerOnInitial
 17321 ;; This function uses a non-reentrant model
 17322 ;;
 17323                           
 17324                           
 17325                           ;psect for function _CC2500_InitPATable
 17326  1DC1                     _CC2500_InitPATable:	
 17327                           
 17328                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17329                           ;CC2500_B1.c: 179: unsigned char temp;
 17330                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17331                           
 17332                           ;incstack = 0
 17333                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17334  1DC1  0020               	movlb	0	; select bank0
 17335  1DC2  01A7               	clrf	CC2500_InitPATable@loop_d
 17336  1DC3                     L10:	
 17337  1DC3  3008               	movlw	8
 17338  1DC4  0227               	subwf	CC2500_InitPATable@loop_d,w
 17339  1DC5  1803               	btfsc	3,0
 17340  1DC6  0008               	return
 17341                           
 17342                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17343  1DC7  0827               	movf	CC2500_InitPATable@loop_d,w
 17344  1DC8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17345  1DC9  0084               	movwf	4
 17346  1DCA  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17347  1DCB  1803               	skipnc
 17348  1DCC  3E01               	addlw	1
 17349  1DCD  0085               	movwf	5
 17350  1DCE  0800               	movf	0,w	;code access
 17351  1DCF  00A5               	movwf	??_CC2500_InitPATable
 17352  1DD0  0825               	movf	??_CC2500_InitPATable,w
 17353  1DD1  00A6               	movwf	CC2500_InitPATable@temp
 17354                           
 17355                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17356  1DD2  0826               	movf	CC2500_InitPATable@temp,w
 17357  1DD3  00A5               	movwf	??_CC2500_InitPATable
 17358  1DD4  0825               	movf	??_CC2500_InitPATable,w
 17359  1DD5  00A2               	movwf	CC2500_WriteREG@value
 17360  1DD6  303E               	movlw	62
 17361  1DD7  3190  2066  319D   	fcall	_CC2500_WriteREG
 17362  1DDA  3001               	movlw	1
 17363  1DDB  0020               	movlb	0	; select bank0
 17364  1DDC  00A5               	movwf	??_CC2500_InitPATable
 17365  1DDD  0825               	movf	??_CC2500_InitPATable,w
 17366  1DDE  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17367  1DDF  2DC3               	goto	L10
 17368  1DE0                     __end_of_CC2500_InitPATable:	
 17369                           
 17370                           	psect	text113
 17371  1066                     __ptext113:	
 17372 ;; *************** function _CC2500_WriteREG *****************
 17373 ;; Defined at:
 17374 ;;		line 254 in file "../src/CC2500_B1.c"
 17375 ;; Parameters:    Size  Location     Type
 17376 ;;  w_addr          1    wreg     unsigned char 
 17377 ;;  value           1    2[BANK0 ] unsigned char 
 17378 ;; Auto vars:     Size  Location     Type
 17379 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17380 ;; Return value:  Size  Location     Type
 17381 ;;		None               void
 17382 ;; Registers used:
 17383 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17384 ;; Tracked objects:
 17385 ;;		On entry : 0/0
 17386 ;;		On exit  : 0/0
 17387 ;;		Unchanged: 0/0
 17388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17389 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17391 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17392 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17393 ;;Total ram usage:        3 bytes
 17394 ;; Hardware stack levels used:    1
 17395 ;; Hardware stack levels required when called:    6
 17396 ;; This function calls:
 17397 ;;		_CC2500_WriteByte
 17398 ;;		_Timeout_Counter
 17399 ;;		_set_TimeoutCleared
 17400 ;; This function is called by:
 17401 ;;		_CC2500_InitSetREG
 17402 ;;		_CC2500_InitPATable
 17403 ;; This function uses a non-reentrant model
 17404 ;;
 17405                           
 17406                           
 17407                           ;psect for function _CC2500_WriteREG
 17408  1066                     _CC2500_WriteREG:	
 17409                           
 17410                           ;incstack = 0
 17411                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17412                           ;CC2500_WriteREG@w_addr stored from wreg
 17413  1066  0020               	movlb	0	; select bank0
 17414  1067  00A4               	movwf	CC2500_WriteREG@w_addr
 17415                           
 17416                           ;CC2500_B1.c: 255: RC4 = 0;
 17417  1068  120E               	bcf	14,4	;volatile
 17418                           
 17419                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17420  1069  0824               	movf	CC2500_WriteREG@w_addr,w
 17421  106A  00A3               	movwf	??_CC2500_WriteREG
 17422  106B  0823               	movf	??_CC2500_WriteREG,w
 17423  106C  0021               	movlb	1	; select bank1
 17424  106D  00D2               	movwf	_SPI0Buffer^(0+128)
 17425                           
 17426                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17427  106E  2872               	goto	l9370
 17428  106F                     l9368:	
 17429                           
 17430                           ;CC2500_B1.c: 258: Timeout_Counter();
 17431  106F  319C  24AD  3190   	fcall	_Timeout_Counter
 17432  1072                     l9370:	
 17433  1072  0020               	movlb	0	; select bank0
 17434  1073  1D0E               	btfss	14,2	;volatile
 17435  1074  2878               	goto	l9374
 17436  1075  0021               	movlb	1	; select bank1
 17437  1076  1D2D               	btfss	(_myMain^(0+128)+13),2
 17438  1077  286F               	goto	l9368
 17439  1078                     l9374:	
 17440                           
 17441                           ;CC2500_B1.c: 259: };
 17442                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17443  1078  319A  226F  3190   	fcall	_set_TimeoutCleared
 17444                           
 17445                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17446  107B  319D  2504  3190   	fcall	_CC2500_WriteByte
 17447                           
 17448                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17449  107E  0020               	movlb	0	; select bank0
 17450  107F  0822               	movf	CC2500_WriteREG@value,w
 17451  1080  00A3               	movwf	??_CC2500_WriteREG
 17452  1081  0823               	movf	??_CC2500_WriteREG,w
 17453  1082  0021               	movlb	1	; select bank1
 17454  1083  00D2               	movwf	_SPI0Buffer^(0+128)
 17455                           
 17456                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17457  1084  319D  2504         	fcall	_CC2500_WriteByte
 17458                           
 17459                           ;CC2500_B1.c: 265: RC4 = 1;
 17460  1086  0020               	movlb	0	; select bank0
 17461  1087  160E               	bsf	14,4	;volatile
 17462  1088  0008               	return
 17463  1089                     __end_of_CC2500_WriteREG:	
 17464                           
 17465                           	psect	text114
 17466  1ADB                     __ptext114:	
 17467 ;; *************** function _CC2500_FrequencyCabr *****************
 17468 ;; Defined at:
 17469 ;;		line 204 in file "../src/CC2500_B1.c"
 17470 ;; Parameters:    Size  Location     Type
 17471 ;;		None
 17472 ;; Auto vars:     Size  Location     Type
 17473 ;;		None
 17474 ;; Return value:  Size  Location     Type
 17475 ;;		None               void
 17476 ;; Registers used:
 17477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17478 ;; Tracked objects:
 17479 ;;		On entry : 0/0
 17480 ;;		On exit  : 0/0
 17481 ;;		Unchanged: 0/0
 17482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17487 ;;Total ram usage:        0 bytes
 17488 ;; Hardware stack levels used:    1
 17489 ;; Hardware stack levels required when called:    7
 17490 ;; This function calls:
 17491 ;;		_CC2500_WriteCommand
 17492 ;;		_DelayTime_1us
 17493 ;; This function is called by:
 17494 ;;		_CC2500_PowerOnInitial
 17495 ;; This function uses a non-reentrant model
 17496 ;;
 17497                           
 17498                           
 17499                           ;psect for function _CC2500_FrequencyCabr
 17500  1ADB                     _CC2500_FrequencyCabr:	
 17501                           
 17502                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17503                           
 17504                           ;incstack = 0
 17505                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17506  1ADB  3033               	movlw	51
 17507  1ADC  319D  2536  319A   	fcall	_CC2500_WriteCommand
 17508                           
 17509                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17510  1ADF  30E8               	movlw	232
 17511  1AE0  0020               	movlb	0	; select bank0
 17512  1AE1  00A0               	movwf	DelayTime_1us@count
 17513  1AE2  3003               	movlw	3
 17514  1AE3  00A1               	movwf	DelayTime_1us@count+1
 17515  1AE4  319F  270E         	fcall	_DelayTime_1us
 17516  1AE6  0008               	return
 17517  1AE7                     __end_of_CC2500_FrequencyCabr:	
 17518                           
 17519                           	psect	text115
 17520  1F0E                     __ptext115:	
 17521 ;; *************** function _DelayTime_1us *****************
 17522 ;; Defined at:
 17523 ;;		line 323 in file "../src/CC2500_B1.c"
 17524 ;; Parameters:    Size  Location     Type
 17525 ;;  count           2    0[BANK0 ] int 
 17526 ;; Auto vars:     Size  Location     Type
 17527 ;;  j               2    4[BANK0 ] unsigned int 
 17528 ;;  i               2    2[BANK0 ] unsigned int 
 17529 ;; Return value:  Size  Location     Type
 17530 ;;		None               void
 17531 ;; Registers used:
 17532 ;;		wreg, status,2
 17533 ;; Tracked objects:
 17534 ;;		On entry : 0/0
 17535 ;;		On exit  : 0/0
 17536 ;;		Unchanged: 0/0
 17537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17538 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17541 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17542 ;;Total ram usage:        6 bytes
 17543 ;; Hardware stack levels used:    1
 17544 ;; Hardware stack levels required when called:    5
 17545 ;; This function calls:
 17546 ;;		Nothing
 17547 ;; This function is called by:
 17548 ;;		_CC2500_PowerRST
 17549 ;;		_CC2500_FrequencyCabr
 17550 ;; This function uses a non-reentrant model
 17551 ;;
 17552                           
 17553                           
 17554                           ;psect for function _DelayTime_1us
 17555  1F0E                     _DelayTime_1us:	
 17556                           
 17557                           ;CC2500_B1.c: 324: unsigned int i, j;
 17558                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 17559                           
 17560                           ;incstack = 0
 17561                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17562  1F0E  3001               	movlw	1
 17563  1F0F  0020               	movlb	0	; select bank0
 17564  1F10  00A2               	movwf	DelayTime_1us@i
 17565  1F11  3000               	movlw	0
 17566  1F12  00A3               	movwf	DelayTime_1us@i+1
 17567  1F13                     l374:	
 17568  1F13  0821               	movf	DelayTime_1us@count+1,w
 17569  1F14  0223               	subwf	DelayTime_1us@i+1,w
 17570  1F15  1D03               	skipz
 17571  1F16  2F19               	goto	u10165
 17572  1F17  0820               	movf	DelayTime_1us@count,w
 17573  1F18  0222               	subwf	DelayTime_1us@i,w
 17574  1F19                     u10165:	
 17575  1F19  1803               	btfsc	3,0
 17576  1F1A  0008               	return
 17577                           
 17578                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 17579  1F1B  01A4               	clrf	DelayTime_1us@j
 17580  1F1C  01A5               	clrf	DelayTime_1us@j+1
 17581  1F1D  3000               	movlw	0
 17582  1F1E  0225               	subwf	DelayTime_1us@j+1,w
 17583  1F1F  3002               	movlw	2
 17584  1F20  1903               	skipnz
 17585  1F21  0224               	subwf	DelayTime_1us@j,w
 17586  1F22  1803               	btfsc	3,0
 17587  1F23  2F2F               	goto	l9362
 17588  1F24                     l9360:	
 17589  1F24  3001               	movlw	1
 17590  1F25  07A4               	addwf	DelayTime_1us@j,f
 17591  1F26  3000               	movlw	0
 17592  1F27  3DA5               	addwfc	DelayTime_1us@j+1,f
 17593  1F28  3000               	movlw	0
 17594  1F29  0225               	subwf	DelayTime_1us@j+1,w
 17595  1F2A  3002               	movlw	2
 17596  1F2B  1903               	skipnz
 17597  1F2C  0224               	subwf	DelayTime_1us@j,w
 17598  1F2D  1C03               	skipc
 17599  1F2E  2F24               	goto	l9360
 17600  1F2F                     l9362:	
 17601  1F2F  3001               	movlw	1
 17602  1F30  07A2               	addwf	DelayTime_1us@i,f
 17603  1F31  3000               	movlw	0
 17604  1F32  3DA3               	addwfc	DelayTime_1us@i+1,f
 17605  1F33  2F13               	goto	l374
 17606  1F34                     __end_of_DelayTime_1us:	
 17607                           
 17608                           	psect	text116
 17609  1A63                     __ptext116:	
 17610 ;; *************** function _CC2500_ClearTXFIFO *****************
 17611 ;; Defined at:
 17612 ;;		line 190 in file "../src/CC2500_B1.c"
 17613 ;; Parameters:    Size  Location     Type
 17614 ;;		None
 17615 ;; Auto vars:     Size  Location     Type
 17616 ;;		None
 17617 ;; Return value:  Size  Location     Type
 17618 ;;		None               void
 17619 ;; Registers used:
 17620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17621 ;; Tracked objects:
 17622 ;;		On entry : 0/0
 17623 ;;		On exit  : 0/0
 17624 ;;		Unchanged: 0/0
 17625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17630 ;;Total ram usage:        0 bytes
 17631 ;; Hardware stack levels used:    1
 17632 ;; Hardware stack levels required when called:    7
 17633 ;; This function calls:
 17634 ;;		_CC2500_WriteCommand
 17635 ;; This function is called by:
 17636 ;;		_CC2500_PowerOnInitial
 17637 ;; This function uses a non-reentrant model
 17638 ;;
 17639                           
 17640                           
 17641                           ;psect for function _CC2500_ClearTXFIFO
 17642  1A63                     _CC2500_ClearTXFIFO:	
 17643                           
 17644                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 17645                           
 17646                           ;incstack = 0
 17647                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17648  1A63  303B               	movlw	59
 17649  1A64  319D  2536         	fcall	_CC2500_WriteCommand
 17650  1A66  0008               	return
 17651  1A67                     __end_of_CC2500_ClearTXFIFO:	
 17652                           
 17653                           	psect	text117
 17654  1A5F                     __ptext117:	
 17655 ;; *************** function _CC2500_ClearRXFIFO *****************
 17656 ;; Defined at:
 17657 ;;		line 197 in file "../src/CC2500_B1.c"
 17658 ;; Parameters:    Size  Location     Type
 17659 ;;		None
 17660 ;; Auto vars:     Size  Location     Type
 17661 ;;		None
 17662 ;; Return value:  Size  Location     Type
 17663 ;;		None               void
 17664 ;; Registers used:
 17665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17666 ;; Tracked objects:
 17667 ;;		On entry : 0/0
 17668 ;;		On exit  : 0/0
 17669 ;;		Unchanged: 0/0
 17670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17675 ;;Total ram usage:        0 bytes
 17676 ;; Hardware stack levels used:    1
 17677 ;; Hardware stack levels required when called:    7
 17678 ;; This function calls:
 17679 ;;		_CC2500_WriteCommand
 17680 ;; This function is called by:
 17681 ;;		_CC2500_PowerOnInitial
 17682 ;; This function uses a non-reentrant model
 17683 ;;
 17684                           
 17685                           
 17686                           ;psect for function _CC2500_ClearRXFIFO
 17687  1A5F                     _CC2500_ClearRXFIFO:	
 17688                           
 17689                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 17690                           
 17691                           ;incstack = 0
 17692                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17693  1A5F  303A               	movlw	58
 17694  1A60  319D  2536         	fcall	_CC2500_WriteCommand
 17695  1A62  0008               	return
 17696  1A63                     __end_of_CC2500_ClearRXFIFO:	
 17697                           
 17698                           	psect	text118
 17699  1D36                     __ptext118:	
 17700 ;; *************** function _CC2500_WriteCommand *****************
 17701 ;; Defined at:
 17702 ;;		line 288 in file "../src/CC2500_B1.c"
 17703 ;; Parameters:    Size  Location     Type
 17704 ;;  command         1    wreg     unsigned char 
 17705 ;; Auto vars:     Size  Location     Type
 17706 ;;  command         1    3[BANK0 ] unsigned char 
 17707 ;; Return value:  Size  Location     Type
 17708 ;;		None               void
 17709 ;; Registers used:
 17710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17711 ;; Tracked objects:
 17712 ;;		On entry : 0/0
 17713 ;;		On exit  : 0/0
 17714 ;;		Unchanged: 0/0
 17715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17718 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17719 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17720 ;;Total ram usage:        2 bytes
 17721 ;; Hardware stack levels used:    1
 17722 ;; Hardware stack levels required when called:    6
 17723 ;; This function calls:
 17724 ;;		_CC2500_WriteByte
 17725 ;;		_Timeout_Counter
 17726 ;;		_set_TimeoutCleared
 17727 ;; This function is called by:
 17728 ;;		_CC2500_TxData
 17729 ;;		_CC2500_ClearTXFIFO
 17730 ;;		_CC2500_ClearRXFIFO
 17731 ;;		_CC2500_FrequencyCabr
 17732 ;;		_CC2500_SIDLEMode
 17733 ;;		_setRF_Main
 17734 ;;		_RF_RxDisable
 17735 ;; This function uses a non-reentrant model
 17736 ;;
 17737                           
 17738                           
 17739                           ;psect for function _CC2500_WriteCommand
 17740  1D36                     _CC2500_WriteCommand:	
 17741                           
 17742                           ;incstack = 0
 17743                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17744                           ;CC2500_WriteCommand@command stored from wreg
 17745  1D36  0020               	movlb	0	; select bank0
 17746  1D37  00A3               	movwf	CC2500_WriteCommand@command
 17747                           
 17748                           ;CC2500_B1.c: 289: RC4 = 0;
 17749  1D38  120E               	bcf	14,4	;volatile
 17750                           
 17751                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 17752  1D39  0823               	movf	CC2500_WriteCommand@command,w
 17753  1D3A  00A2               	movwf	??_CC2500_WriteCommand
 17754  1D3B  0822               	movf	??_CC2500_WriteCommand,w
 17755  1D3C  0021               	movlb	1	; select bank1
 17756  1D3D  00D2               	movwf	_SPI0Buffer^(0+128)
 17757                           
 17758                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 17759  1D3E  2D42               	goto	l9078
 17760  1D3F                     l9076:	
 17761                           
 17762                           ;CC2500_B1.c: 293: Timeout_Counter();
 17763  1D3F  319C  24AD  319D   	fcall	_Timeout_Counter
 17764  1D42                     l9078:	
 17765  1D42  0020               	movlb	0	; select bank0
 17766  1D43  1D0E               	btfss	14,2	;volatile
 17767  1D44  2D48               	goto	l9082
 17768  1D45  0021               	movlb	1	; select bank1
 17769  1D46  1D2D               	btfss	(_myMain^(0+128)+13),2
 17770  1D47  2D3F               	goto	l9076
 17771  1D48                     l9082:	
 17772                           
 17773                           ;CC2500_B1.c: 294: };
 17774                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 17775  1D48  319A  226F  319D   	fcall	_set_TimeoutCleared
 17776                           
 17777                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 17778  1D4B  319D  2504         	fcall	_CC2500_WriteByte
 17779                           
 17780                           ;CC2500_B1.c: 298: RC4 = 1;
 17781  1D4D  0020               	movlb	0	; select bank0
 17782  1D4E  160E               	bsf	14,4	;volatile
 17783  1D4F  0008               	return
 17784  1D50                     __end_of_CC2500_WriteCommand:	
 17785                           
 17786                           	psect	text119
 17787  1A6F                     __ptext119:	
 17788 ;; *************** function _set_TimeoutCleared *****************
 17789 ;; Defined at:
 17790 ;;		line 270 in file "../src/Main_B1.c"
 17791 ;; Parameters:    Size  Location     Type
 17792 ;;		None
 17793 ;; Auto vars:     Size  Location     Type
 17794 ;;		None
 17795 ;; Return value:  Size  Location     Type
 17796 ;;		None               void
 17797 ;; Registers used:
 17798 ;;		status,2
 17799 ;; Tracked objects:
 17800 ;;		On entry : 0/0
 17801 ;;		On exit  : 0/0
 17802 ;;		Unchanged: 0/0
 17803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17808 ;;Total ram usage:        0 bytes
 17809 ;; Hardware stack levels used:    1
 17810 ;; Hardware stack levels required when called:    5
 17811 ;; This function calls:
 17812 ;;		Nothing
 17813 ;; This function is called by:
 17814 ;;		_CC2500_TxData
 17815 ;;		_CC2500_RxData
 17816 ;;		_CC2500_PowerRST
 17817 ;;		_CC2500_WriteREG
 17818 ;;		_CC2500_WriteCommand
 17819 ;;		_CC2500_ReadStatus
 17820 ;;		_getAD
 17821 ;;		_TouchPower
 17822 ;;		_CC2500_ReadREG
 17823 ;; This function uses a non-reentrant model
 17824 ;;
 17825                           
 17826                           
 17827                           ;psect for function _set_TimeoutCleared
 17828  1A6F                     _set_TimeoutCleared:	
 17829                           
 17830                           ;Main_B1.c: 271: myMain.Timeout = 0;
 17831                           
 17832                           ;incstack = 0
 17833                           ; Regs used in _set_TimeoutCleared: [status,2]
 17834  1A6F  0021               	movlb	1	; select bank1
 17835  1A70  112D               	bcf	(_myMain^(0+128)+13),2
 17836                           
 17837                           ;Main_B1.c: 272: myMain.Timeout_Counter = 0;
 17838  1A71  01AE               	clrf	(_myMain^(0+128)+14)
 17839  1A72  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17840  1A73  0008               	return
 17841  1A74                     __end_of_set_TimeoutCleared:	
 17842                           
 17843                           	psect	text120
 17844  1CAD                     __ptext120:	
 17845 ;; *************** function _Timeout_Counter *****************
 17846 ;; Defined at:
 17847 ;;		line 261 in file "../src/Main_B1.c"
 17848 ;; Parameters:    Size  Location     Type
 17849 ;;		None
 17850 ;; Auto vars:     Size  Location     Type
 17851 ;;		None
 17852 ;; Return value:  Size  Location     Type
 17853 ;;		None               void
 17854 ;; Registers used:
 17855 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17856 ;; Tracked objects:
 17857 ;;		On entry : 0/0
 17858 ;;		On exit  : 0/0
 17859 ;;		Unchanged: 0/0
 17860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17865 ;;Total ram usage:        0 bytes
 17866 ;; Hardware stack levels used:    1
 17867 ;; Hardware stack levels required when called:    5
 17868 ;; This function calls:
 17869 ;;		Nothing
 17870 ;; This function is called by:
 17871 ;;		_CC2500_TxData
 17872 ;;		_CC2500_RxData
 17873 ;;		_CC2500_PowerRST
 17874 ;;		_CC2500_WriteREG
 17875 ;;		_CC2500_WriteCommand
 17876 ;;		_CC2500_ReadStatus
 17877 ;;		_getAD
 17878 ;;		_TouchPower
 17879 ;;		_CC2500_ReadREG
 17880 ;; This function uses a non-reentrant model
 17881 ;;
 17882                           
 17883                           
 17884                           ;psect for function _Timeout_Counter
 17885  1CAD                     _Timeout_Counter:	
 17886                           
 17887                           ;Main_B1.c: 262: myMain.Timeout_Counter++;
 17888                           
 17889                           ;incstack = 0
 17890                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17891  1CAD  3001               	movlw	1
 17892  1CAE  0021               	movlb	1	; select bank1
 17893  1CAF  07AE               	addwf	(_myMain^(0+128)+14),f
 17894  1CB0  3000               	movlw	0
 17895  1CB1  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 17896                           
 17897                           ;Main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
 17898  1CB2  300E               	movlw	14
 17899  1CB3  3EA0               	addlw	_myMain& (0+255)
 17900  1CB4  0086               	movwf	6
 17901  1CB5  0187               	clrf	7
 17902  1CB6  3F40               	moviw [0]fsr1
 17903  1CB7  3A10               	xorlw	16
 17904  1CB8  1D03               	skipz
 17905  1CB9  2CBC               	goto	u9585
 17906  1CBA  3F41               	moviw [1]fsr1
 17907  1CBB  3A27               	xorlw	39
 17908  1CBC                     u9585:	
 17909  1CBC  1D03               	skipz
 17910  1CBD  0008               	return
 17911                           
 17912                           ;Main_B1.c: 264: myMain.Timeout_Counter = 0;
 17913  1CBE  01AE               	clrf	(_myMain^(0+128)+14)
 17914  1CBF  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17915                           
 17916                           ;Main_B1.c: 265: myMain.Timeout = 1;
 17917  1CC0  152D               	bsf	(_myMain^(0+128)+13),2
 17918  1CC1  0008               	return
 17919  1CC2                     __end_of_Timeout_Counter:	
 17920                           
 17921                           	psect	text121
 17922  1D04                     __ptext121:	
 17923 ;; *************** function _CC2500_WriteByte *****************
 17924 ;; Defined at:
 17925 ;;		line 222 in file "../src/CC2500_B1.c"
 17926 ;; Parameters:    Size  Location     Type
 17927 ;;		None
 17928 ;; Auto vars:     Size  Location     Type
 17929 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17930 ;; Return value:  Size  Location     Type
 17931 ;;		None               void
 17932 ;; Registers used:
 17933 ;;		wreg, status,2, status,0
 17934 ;; Tracked objects:
 17935 ;;		On entry : 0/0
 17936 ;;		On exit  : 0/0
 17937 ;;		Unchanged: 0/0
 17938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17940 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17941 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17942 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17943 ;;Total ram usage:        2 bytes
 17944 ;; Hardware stack levels used:    1
 17945 ;; Hardware stack levels required when called:    5
 17946 ;; This function calls:
 17947 ;;		Nothing
 17948 ;; This function is called by:
 17949 ;;		_CC2500_TxData
 17950 ;;		_CC2500_RxData
 17951 ;;		_CC2500_PowerRST
 17952 ;;		_CC2500_WriteREG
 17953 ;;		_CC2500_WriteCommand
 17954 ;;		_CC2500_ReadStatus
 17955 ;;		_CC2500_ReadREG
 17956 ;; This function uses a non-reentrant model
 17957 ;;
 17958                           
 17959                           
 17960                           ;psect for function _CC2500_WriteByte
 17961  1D04                     _CC2500_WriteByte:	
 17962                           
 17963                           ;CC2500_B1.c: 223: unsigned char loop_a;
 17964                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 17965                           
 17966                           ;incstack = 0
 17967                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17968  1D04  0020               	movlb	0	; select bank0
 17969  1D05  01A1               	clrf	CC2500_WriteByte@loop_a
 17970  1D06                     L11:	
 17971  1D06  3008               	movlw	8
 17972  1D07  0221               	subwf	CC2500_WriteByte@loop_a,w
 17973  1D08  1803               	btfsc	3,0
 17974  1D09  0008               	return
 17975                           
 17976                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 17977  1D0A  0021               	movlb	1	; select bank1
 17978  1D0B  1FD2               	btfss	_SPI0Buffer^(0+128),7
 17979  1D0C  2D10               	goto	l330
 17980                           
 17981                           ;CC2500_B1.c: 226: RC0 = 1;
 17982  1D0D  0020               	movlb	0	; select bank0
 17983  1D0E  140E               	bsf	14,0	;volatile
 17984  1D0F  2D12               	goto	l331
 17985  1D10                     l330:	
 17986                           
 17987                           ;CC2500_B1.c: 227: else
 17988                           ;CC2500_B1.c: 228: RC0 = 0;
 17989  1D10  0020               	movlb	0	; select bank0
 17990  1D11  100E               	bcf	14,0	;volatile
 17991  1D12                     l331:	
 17992                           
 17993                           ;CC2500_B1.c: 229: RC1 = 1;
 17994  1D12  148E               	bsf	14,1	;volatile
 17995                           
 17996                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 17997  1D13  1003               	clrc
 17998  1D14  0021               	movlb	1	; select bank1
 17999  1D15  0DD2               	rlf	_SPI0Buffer^(0+128),f
 18000                           
 18001                           ;CC2500_B1.c: 231: RC1 = 0;
 18002  1D16  0020               	movlb	0	; select bank0
 18003  1D17  108E               	bcf	14,1	;volatile
 18004  1D18  3001               	movlw	1
 18005  1D19  00A0               	movwf	??_CC2500_WriteByte
 18006  1D1A  0820               	movf	??_CC2500_WriteByte,w
 18007  1D1B  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18008  1D1C  2D06               	goto	L11
 18009  1D1D                     __end_of_CC2500_WriteByte:	
 18010                           
 18011                           	psect	text122
 18012  13A6                     __ptext122:	
 18013 ;; *************** function _Buzzer_Main *****************
 18014 ;; Defined at:
 18015 ;;		line 46 in file "../src/Buzzer_B1.c"
 18016 ;; Parameters:    Size  Location     Type
 18017 ;;		None
 18018 ;; Auto vars:     Size  Location     Type
 18019 ;;		None
 18020 ;; Return value:  Size  Location     Type
 18021 ;;		None               void
 18022 ;; Registers used:
 18023 ;;		wreg, status,2, status,0
 18024 ;; Tracked objects:
 18025 ;;		On entry : 0/0
 18026 ;;		On exit  : 0/0
 18027 ;;		Unchanged: 0/0
 18028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18031 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18032 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18033 ;;Total ram usage:        1 bytes
 18034 ;; Hardware stack levels used:    1
 18035 ;; Hardware stack levels required when called:    5
 18036 ;; This function calls:
 18037 ;;		Nothing
 18038 ;; This function is called by:
 18039 ;;		_main
 18040 ;; This function uses a non-reentrant model
 18041 ;;
 18042                           
 18043                           
 18044                           ;psect for function _Buzzer_Main
 18045  13A6                     _Buzzer_Main:	
 18046                           
 18047                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18048                           
 18049                           ;incstack = 0
 18050                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18051  13A6  0021               	movlb	1	; select bank1
 18052  13A7  1CB0               	btfss	_Buz1^(0+128),1
 18053  13A8  0008               	return
 18054                           
 18055                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18056  13A9  3001               	movlw	1
 18057  13AA  07B1               	addwf	(_Buz1^(0+128)+1),f
 18058  13AB  3000               	movlw	0
 18059  13AC  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 18060                           
 18061                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18062  13AD  0837               	movf	((_Buz1+1)^(0+128)+6),w
 18063  13AE  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 18064  13AF  1D03               	skipz
 18065  13B0  2BB3               	goto	u11585
 18066  13B1  0836               	movf	(_Buz1^(0+128)+6),w
 18067  13B2  0231               	subwf	(_Buz1^(0+128)+1),w
 18068  13B3                     u11585:	
 18069  13B3  1C03               	skipc
 18070  13B4  0008               	return
 18071                           
 18072                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18073  13B5  01B1               	clrf	(_Buz1^(0+128)+1)
 18074  13B6  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 18075                           
 18076                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18077  13B7  12B0               	bcf	_Buz1^(0+128),5
 18078  13B8  0020               	movlb	0	; select bank0
 18079  13B9  1D8D               	btfss	13,3	;volatile
 18080  13BA  2BBD               	goto	l10276
 18081  13BB  0021               	movlb	1	; select bank1
 18082  13BC  16B0               	bsf	_Buz1^(0+128),5
 18083  13BD                     l10276:	
 18084                           
 18085                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18086  13BD  0021               	movlb	1	; select bank1
 18087  13BE  1AB0               	btfsc	_Buz1^(0+128),5
 18088  13BF  2BE9               	goto	l106
 18089                           
 18090                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18091  13C0  08B3               	movf	(_Buz1^(0+128)+3),f
 18092  13C1  1D03               	skipz
 18093  13C2  2BE5               	goto	l107
 18094                           
 18095                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18096  13C3  1DB0               	btfss	_Buz1^(0+128),3
 18097  13C4  2BD3               	goto	l108
 18098                           
 18099                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18100  13C5  11B0               	bcf	_Buz1^(0+128),3
 18101                           
 18102                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18103  13C6  0834               	movf	(_Buz1^(0+128)+4),w
 18104  13C7  0020               	movlb	0	; select bank0
 18105  13C8  00A0               	movwf	??_Buzzer_Main
 18106  13C9  0820               	movf	??_Buzzer_Main,w
 18107  13CA  0021               	movlb	1	; select bank1
 18108  13CB  00B3               	movwf	(_Buz1^(0+128)+3)
 18109                           
 18110                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18111  13CC  0839               	movf	((_Buz1+1)^(0+128)+8),w
 18112  13CD  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 18113  13CE  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 18114  13CF  0838               	movf	(_Buz1^(0+128)+8),w
 18115  13D0  01B6               	clrf	(_Buz1^(0+128)+6)
 18116  13D1  07B6               	addwf	(_Buz1^(0+128)+6),f
 18117                           
 18118                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18119  13D2  0008               	return
 18120  13D3                     l108:	
 18121  13D3  1E30               	btfss	_Buz1^(0+128),4
 18122  13D4  2BE3               	goto	l110
 18123                           
 18124                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18125  13D5  1230               	bcf	_Buz1^(0+128),4
 18126                           
 18127                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18128  13D6  0835               	movf	(_Buz1^(0+128)+5),w
 18129  13D7  0020               	movlb	0	; select bank0
 18130  13D8  00A0               	movwf	??_Buzzer_Main
 18131  13D9  0820               	movf	??_Buzzer_Main,w
 18132  13DA  0021               	movlb	1	; select bank1
 18133  13DB  00B3               	movwf	(_Buz1^(0+128)+3)
 18134                           
 18135                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18136  13DC  083B               	movf	((_Buz1+1)^(0+128)+10),w
 18137  13DD  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 18138  13DE  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 18139  13DF  083A               	movf	(_Buz1^(0+128)+10),w
 18140  13E0  01B6               	clrf	(_Buz1^(0+128)+6)
 18141  13E1  07B6               	addwf	(_Buz1^(0+128)+6),f
 18142                           
 18143                           ;Buzzer_B1.c: 62: } else {
 18144  13E2  0008               	return
 18145  13E3                     l110:	
 18146                           
 18147                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18148  13E3  10B0               	bcf	_Buz1^(0+128),1
 18149                           
 18150                           ;Buzzer_B1.c: 64: }
 18151                           ;Buzzer_B1.c: 65: } else {
 18152  13E4  0008               	return
 18153  13E5                     l107:	
 18154                           
 18155                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18156  13E5  16B0               	bsf	_Buz1^(0+128),5
 18157                           
 18158                           ;Buzzer_B1.c: 68: RB3 = 1;
 18159  13E6  0020               	movlb	0	; select bank0
 18160  13E7  158D               	bsf	13,3	;volatile
 18161                           
 18162                           ;Buzzer_B1.c: 69: }
 18163                           ;Buzzer_B1.c: 70: } else {
 18164  13E8  0008               	return
 18165  13E9                     l106:	
 18166                           
 18167                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18168  13E9  12B0               	bcf	_Buz1^(0+128),5
 18169                           
 18170                           ;Buzzer_B1.c: 73: RB3 = 0;
 18171  13EA  0020               	movlb	0	; select bank0
 18172  13EB  118D               	bcf	13,3	;volatile
 18173                           
 18174                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18175  13EC  3001               	movlw	1
 18176  13ED  0021               	movlb	1	; select bank1
 18177  13EE  02B3               	subwf	(_Buz1^(0+128)+3),f
 18178  13EF  0008               	return
 18179  13F0                     __end_of_Buzzer_Main:	
 18180                           
 18181                           	psect	text123
 18182  1A50                     __ptext123:	
 18183 ;; *************** function _Buzzer_Initialization *****************
 18184 ;; Defined at:
 18185 ;;		line 11 in file "../src/Buzzer_B1.c"
 18186 ;; Parameters:    Size  Location     Type
 18187 ;;		None
 18188 ;; Auto vars:     Size  Location     Type
 18189 ;;		None
 18190 ;; Return value:  Size  Location     Type
 18191 ;;		None               void
 18192 ;; Registers used:
 18193 ;;		None
 18194 ;; Tracked objects:
 18195 ;;		On entry : 0/0
 18196 ;;		On exit  : 0/0
 18197 ;;		Unchanged: 0/0
 18198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18203 ;;Total ram usage:        0 bytes
 18204 ;; Hardware stack levels used:    1
 18205 ;; Hardware stack levels required when called:    5
 18206 ;; This function calls:
 18207 ;;		Nothing
 18208 ;; This function is called by:
 18209 ;;		_main
 18210 ;; This function uses a non-reentrant model
 18211 ;;
 18212                           
 18213                           
 18214                           ;psect for function _Buzzer_Initialization
 18215  1A50                     _Buzzer_Initialization:	
 18216                           
 18217                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18218                           
 18219                           ;incstack = 0
 18220                           ; Regs used in _Buzzer_Initialization: []
 18221  1A50  0021               	movlb	1	; select bank1
 18222  1A51  1430               	bsf	_Buz1^(0+128),0
 18223  1A52  0008               	return
 18224  1A53                     __end_of_Buzzer_Initialization:	
 18225                           
 18226                           	psect	intentry
 18227  0004                     __pintentry:	
 18228 ;; *************** function _ISR *****************
 18229 ;; Defined at:
 18230 ;;		line 107 in file "../src/MCU_B1.c"
 18231 ;; Parameters:    Size  Location     Type
 18232 ;;		None
 18233 ;; Auto vars:     Size  Location     Type
 18234 ;;		None
 18235 ;; Return value:  Size  Location     Type
 18236 ;;		None               void
 18237 ;; Registers used:
 18238 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18239 ;; Tracked objects:
 18240 ;;		On entry : 0/0
 18241 ;;		On exit  : 0/0
 18242 ;;		Unchanged: 0/0
 18243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18246 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18247 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18248 ;;Total ram usage:        1 bytes
 18249 ;; Hardware stack levels used:    1
 18250 ;; Hardware stack levels required when called:    4
 18251 ;; This function calls:
 18252 ;;		_IOC_ISR
 18253 ;;		_TMR1_ISR
 18254 ;; This function is called by:
 18255 ;;		Interrupt level 1
 18256 ;; This function uses a non-reentrant model
 18257 ;;
 18258                           
 18259  0004                     _ISR:	
 18260                           
 18261                           ;incstack = 0
 18262                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18263  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18264  0005  3180               	pagesel	$
 18265  0006  0020               	movlb	0	; select bank0
 18266  0007  087F               	movf	127,w
 18267  0008  00F5               	movwf	??_ISR
 18268                           
 18269                           ;MCU_B1.c: 109: IOC_ISR();
 18270  0009  319B  2356  3180   	fcall	_IOC_ISR
 18271                           
 18272                           ;MCU_B1.c: 111: ;;
 18273                           ;MCU_B1.c: 113: TMR1_ISR();
 18274  000C  319F  2783         	fcall	_TMR1_ISR
 18275  000E  0875               	movf	??_ISR,w
 18276  000F  0020               	movlb	0	; select bank0
 18277  0010  00FF               	movwf	127
 18278  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18279  0012  0009               	retfie
 18280  0013                     __end_of_ISR:	
 18281                           
 18282                           	psect	text125
 18283  1F83                     __ptext125:	
 18284 ;; *************** function _TMR1_ISR *****************
 18285 ;; Defined at:
 18286 ;;		line 209 in file "../src/MCU_B1.c"
 18287 ;; Parameters:    Size  Location     Type
 18288 ;;		None
 18289 ;; Auto vars:     Size  Location     Type
 18290 ;;		None
 18291 ;; Return value:  Size  Location     Type
 18292 ;;		None               void
 18293 ;; Registers used:
 18294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18295 ;; Tracked objects:
 18296 ;;		On entry : 0/0
 18297 ;;		On exit  : 0/0
 18298 ;;		Unchanged: 0/0
 18299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18304 ;;Total ram usage:        0 bytes
 18305 ;; Hardware stack levels used:    1
 18306 ;; Hardware stack levels required when called:    2
 18307 ;; This function calls:
 18308 ;;		_setDimmerLights_IntrControl
 18309 ;; This function is called by:
 18310 ;;		_ISR
 18311 ;; This function uses a non-reentrant model
 18312 ;;
 18313                           
 18314                           
 18315                           ;psect for function _TMR1_ISR
 18316  1F83                     _TMR1_ISR:	
 18317                           
 18318                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18319                           
 18320                           ;incstack = 0
 18321                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18322  1F83  0021               	movlb	1	; select bank1
 18323  1F84  1C11               	btfss	17,0	;volatile
 18324  1F85  0008               	return
 18325  1F86  0020               	movlb	0	; select bank0
 18326  1F87  1C11               	btfss	17,0	;volatile
 18327  1F88  0008               	return
 18328                           
 18329                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18330  1F89  30FA               	movlw	250
 18331  1F8A  0097               	movwf	23	;volatile
 18332                           
 18333                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18334  1F8B  3038               	movlw	56
 18335  1F8C  0096               	movwf	22	;volatile
 18336                           
 18337                           ;MCU_B1.c: 214: TMR1IF = 0;
 18338  1F8D  1011               	bcf	17,0	;volatile
 18339                           
 18340                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18341  1F8E  3001               	movlw	1
 18342  1F8F  3182  2235  319F   	fcall	_setDimmerLights_IntrControl
 18343                           
 18344                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18345  1F92  3002               	movlw	2
 18346  1F93  3182  2235  319F   	fcall	_setDimmerLights_IntrControl
 18347                           
 18348                           ;MCU_B1.c: 234: Timer1.Count++;
 18349  1F96  3001               	movlw	1
 18350  1F97  0022               	movlb	2	; select bank2
 18351  1F98  07A1               	addwf	(_Timer1^(0+256)+1),f
 18352  1F99  3000               	movlw	0
 18353  1F9A  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18354                           
 18355                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18356  1F9B  3001               	movlw	1
 18357  1F9C  3E20               	addlw	_Timer1& (0+255)
 18358  1F9D  0086               	movwf	6
 18359  1F9E  3001               	movlw	1	; select bank2/3
 18360  1F9F  0087               	movwf	7
 18361  1FA0  3F40               	moviw [0]fsr1
 18362  1FA1  3A64               	xorlw	100
 18363  1FA2  1D03               	skipz
 18364  1FA3  2FA6               	goto	u781_25
 18365  1FA4  3F41               	moviw [1]fsr1
 18366  1FA5  3A00               	xorlw	0
 18367  1FA6                     u781_25:	
 18368  1FA6  1D03               	skipz
 18369  1FA7  0008               	return
 18370                           
 18371                           ;MCU_B1.c: 236: {
 18372                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18373  1FA8  01A1               	clrf	(_Timer1^(0+256)+1)
 18374  1FA9  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18375                           
 18376                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18377  1FAA  1420               	bsf	_Timer1^(0+256),0
 18378  1FAB  0008               	return
 18379  1FAC                     __end_of_TMR1_ISR:	
 18380                           
 18381                           	psect	text126
 18382  0235                     __ptext126:	
 18383 ;; *************** function _setDimmerLights_IntrControl *****************
 18384 ;; Defined at:
 18385 ;;		line 94 in file "../src/Dimmer_B1.c"
 18386 ;; Parameters:    Size  Location     Type
 18387 ;;  lights          1    wreg     unsigned char 
 18388 ;; Auto vars:     Size  Location     Type
 18389 ;;  lights          1    4[COMMON] unsigned char 
 18390 ;; Return value:  Size  Location     Type
 18391 ;;		None               void
 18392 ;; Registers used:
 18393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18394 ;; Tracked objects:
 18395 ;;		On entry : 0/0
 18396 ;;		On exit  : 0/0
 18397 ;;		Unchanged: 0/0
 18398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18401 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18402 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18403 ;;Total ram usage:        3 bytes
 18404 ;; Hardware stack levels used:    1
 18405 ;; Hardware stack levels required when called:    1
 18406 ;; This function calls:
 18407 ;;		_DimmerIntrPointSelect
 18408 ;; This function is called by:
 18409 ;;		_TMR1_ISR
 18410 ;; This function uses a non-reentrant model
 18411 ;;
 18412                           
 18413                           
 18414                           ;psect for function _setDimmerLights_IntrControl
 18415  0235                     _setDimmerLights_IntrControl:	
 18416                           
 18417                           ;incstack = 0
 18418                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18419                           ;setDimmerLights_IntrControl@lights stored from wreg
 18420  0235  00F4               	movwf	setDimmerLights_IntrControl@lights
 18421                           
 18422                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 18423  0236  0874               	movf	setDimmerLights_IntrControl@lights,w
 18424  0237  319B  23B7  3182   	fcall	_DimmerIntrPointSelect
 18425                           
 18426                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 18427  023A  0878               	movf	_DimmerLightsIntr,w
 18428  023B  0086               	movwf	6
 18429  023C  3001               	movlw	1	; select bank2/3
 18430  023D  0087               	movwf	7
 18431  023E  1C01               	btfss	1,0
 18432  023F  2A8C               	goto	i1l7188
 18433                           
 18434                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 18435  0240  3001               	movlw	1
 18436  0241  00F2               	movwf	??_setDimmerLights_IntrControl
 18437  0242  0878               	movf	_DimmerLightsIntr,w
 18438  0243  3E03               	addlw	3
 18439  0244  0086               	movwf	6
 18440  0245  3001               	movlw	1	; select bank2/3
 18441  0246  0087               	movwf	7
 18442  0247  0872               	movf	??_setDimmerLights_IntrControl,w
 18443  0248  0781               	addwf	1,f
 18444                           
 18445                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r.Correction)) {
 18446  0249  0878               	movf	_DimmerLightsIntr,w
 18447  024A  3E04               	addlw	4
 18448  024B  0086               	movwf	6
 18449  024C  3001               	movlw	1	; select bank2/3
 18450  024D  0087               	movwf	7
 18451  024E  0801               	movf	1,w
 18452  024F  0021               	movlb	1	; select bank1
 18453  0250  074A               	addwf	(_Dimmer^(0+128)+2),w
 18454  0251  00F2               	movwf	??_setDimmerLights_IntrControl
 18455  0252  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18456  0253  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 18457  0254  0878               	movf	_DimmerLightsIntr,w
 18458  0255  3E03               	addlw	3
 18459  0256  0086               	movwf	6
 18460  0257  3001               	movlw	1	; select bank2/3
 18461  0258  0087               	movwf	7
 18462  0259  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18463  025A  3A80               	xorlw	128
 18464  025B  3C80               	sublw	128
 18465  025C  1D03               	skipz
 18466  025D  2A60               	goto	u657_25
 18467  025E  0872               	movf	??_setDimmerLights_IntrControl,w
 18468  025F  0201               	subwf	1,w
 18469  0260                     u657_25:	
 18470  0260  1C03               	skipc
 18471  0261  2B8A               	goto	i1l7250
 18472                           
 18473                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 18474  0262  0878               	movf	_DimmerLightsIntr,w
 18475  0263  3E03               	addlw	3
 18476  0264  0086               	movwf	6
 18477  0265  3001               	movlw	1	; select bank2/3
 18478  0266  0087               	movwf	7
 18479  0267  0181               	clrf	1
 18480                           
 18481                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 18482  0268  0878               	movf	_DimmerLightsIntr,w
 18483  0269  0086               	movwf	6
 18484  026A  3001               	movlw	1	; select bank2/3
 18485  026B  0087               	movwf	7
 18486  026C  1001               	bcf	1,0
 18487                           
 18488                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 18489  026D  0878               	movf	_DimmerLightsIntr,w
 18490  026E  0086               	movwf	6
 18491  026F  3001               	movlw	1	; select bank2/3
 18492  0270  0087               	movwf	7
 18493  0271  1F01               	btfss	1,6
 18494  0272  2B8A               	goto	i1l7250
 18495                           
 18496                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 18497  0273  0878               	movf	_DimmerLightsIntr,w
 18498  0274  3E08               	addlw	8
 18499  0275  0086               	movwf	6
 18500  0276  3001               	movlw	1	; select bank2/3
 18501  0277  0087               	movwf	7
 18502  0278  1401               	bsf	1,0
 18503                           
 18504                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 18505  0279  0878               	movf	_DimmerLightsIntr,w
 18506  027A  3E08               	addlw	8
 18507  027B  0086               	movwf	6
 18508  027C  3001               	movlw	1	; select bank2/3
 18509  027D  0087               	movwf	7
 18510  027E  1681               	bsf	1,5
 18511                           
 18512                           ;Dimmer_B1.c: 107: if (lights == 1) {
 18513  027F  0874               	movf	setDimmerLights_IntrControl@lights,w
 18514  0280  3A01               	xorlw	1
 18515  0281  1D03               	skipz
 18516  0282  2A85               	goto	i1l7184
 18517                           
 18518                           ;Dimmer_B1.c: 108: RA7 = 1;
 18519  0283  0020               	movlb	0	; select bank0
 18520  0284  178C               	bsf	12,7	;volatile
 18521  0285                     i1l7184:	
 18522                           ;Dimmer_B1.c: 109: ;;
 18523                           
 18524                           
 18525                           ;Dimmer_B1.c: 110: }
 18526                           ;Dimmer_B1.c: 113: if (lights == 2) {
 18527  0285  0874               	movf	setDimmerLights_IntrControl@lights,w
 18528  0286  3A02               	xorlw	2
 18529  0287  1D03               	skipz
 18530  0288  2B8A               	goto	i1l7250
 18531                           
 18532                           ;Dimmer_B1.c: 114: RB4 = 1;
 18533  0289  0020               	movlb	0	; select bank0
 18534  028A  160D               	bsf	13,4	;volatile
 18535                           
 18536                           ;Dimmer_B1.c: 115: }
 18537                           ;Dimmer_B1.c: 122: }
 18538                           ;Dimmer_B1.c: 123: }
 18539                           ;Dimmer_B1.c: 124: } else {
 18540  028B  2B8A               	goto	i1l7250
 18541  028C                     i1l7188:	
 18542                           
 18543                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 18544  028C  0878               	movf	_DimmerLightsIntr,w
 18545  028D  3E08               	addlw	8
 18546  028E  0086               	movwf	6
 18547  028F  3001               	movlw	1	; select bank2/3
 18548  0290  0087               	movwf	7
 18549  0291  1C01               	btfss	1,0
 18550  0292  2B8A               	goto	i1l7250
 18551                           
 18552                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 18553  0293  0878               	movf	_DimmerLightsIntr,w
 18554  0294  3E08               	addlw	8
 18555  0295  0086               	movwf	6
 18556  0296  3001               	movlw	1	; select bank2/3
 18557  0297  0087               	movwf	7
 18558  0298  1001               	bcf	1,0
 18559                           
 18560                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 18561  0299  0878               	movf	_DimmerLightsIntr,w
 18562  029A  0086               	movwf	6
 18563  029B  3001               	movlw	1	; select bank2/3
 18564  029C  0087               	movwf	7
 18565  029D  1C81               	btfss	1,1
 18566  029E  2B8A               	goto	i1l7250
 18567                           
 18568                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 18569  029F  3001               	movlw	1
 18570  02A0  00F2               	movwf	??_setDimmerLights_IntrControl
 18571  02A1  0A78               	incf	_DimmerLightsIntr,w
 18572  02A2  0086               	movwf	6
 18573  02A3  3001               	movlw	1	; select bank2/3
 18574  02A4  0087               	movwf	7
 18575  02A5  0872               	movf	??_setDimmerLights_IntrControl,w
 18576  02A6  0781               	addwf	1,f
 18577                           
 18578                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18579  02A7  0A78               	incf	_DimmerLightsIntr,w
 18580  02A8  0086               	movwf	6
 18581  02A9  3001               	movlw	1	; select bank2/3
 18582  02AA  0087               	movwf	7
 18583  02AB  0878               	movf	_DimmerLightsIntr,w
 18584  02AC  3E02               	addlw	2
 18585  02AD  0084               	movwf	4
 18586  02AE  3001               	movlw	1	; select bank2/3
 18587  02AF  0085               	movwf	5
 18588  02B0  0800               	movf	0,w
 18589  02B1  0201               	subwf	1,w
 18590  02B2  1C03               	skipc
 18591  02B3  2B8A               	goto	i1l7250
 18592                           
 18593                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 18594  02B4  0A78               	incf	_DimmerLightsIntr,w
 18595  02B5  0086               	movwf	6
 18596  02B6  3001               	movlw	1	; select bank2/3
 18597  02B7  0087               	movwf	7
 18598  02B8  0181               	clrf	1
 18599                           
 18600                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 18601  02B9  0878               	movf	_DimmerLightsIntr,w
 18602  02BA  0086               	movwf	6
 18603  02BB  3001               	movlw	1	; select bank2/3
 18604  02BC  0087               	movwf	7
 18605  02BD  1D81               	btfss	1,3
 18606  02BE  2AF5               	goto	i1l7214
 18607                           
 18608                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 18609  02BF  0878               	movf	_DimmerLightsIntr,w
 18610  02C0  0086               	movwf	6
 18611  02C1  3001               	movlw	1	; select bank2/3
 18612  02C2  0087               	movwf	7
 18613  02C3  1A01               	btfsc	1,4
 18614  02C4  2ADC               	goto	i1l7208
 18615                           
 18616                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 18617  02C5  0878               	movf	_DimmerLightsIntr,w
 18618  02C6  3E04               	addlw	4
 18619  02C7  0086               	movwf	6
 18620  02C8  3001               	movlw	1	; select bank2/3
 18621  02C9  0087               	movwf	7
 18622  02CA  3021               	movlw	33
 18623  02CB  0201               	subwf	1,w
 18624  02CC  1C03               	skipc
 18625  02CD  2AD6               	goto	i1l7206
 18626                           
 18627                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 18628  02CE  0878               	movf	_DimmerLightsIntr,w
 18629  02CF  3E04               	addlw	4
 18630  02D0  0086               	movwf	6
 18631  02D1  3001               	movlw	1	; select bank2/3
 18632  02D2  0087               	movwf	7
 18633  02D3  3001               	movlw	1
 18634  02D4  0281               	subwf	1,f
 18635                           
 18636                           ;Dimmer_B1.c: 135: } else {
 18637  02D5  2B8A               	goto	i1l7250
 18638  02D6                     i1l7206:	
 18639                           
 18640                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 18641  02D6  0878               	movf	_DimmerLightsIntr,w
 18642  02D7  0086               	movwf	6
 18643  02D8  3001               	movlw	1	; select bank2/3
 18644  02D9  0087               	movwf	7
 18645  02DA  1601               	bsf	1,4
 18646                           
 18647                           ;Dimmer_B1.c: 137: }
 18648                           ;Dimmer_B1.c: 138: } else {
 18649  02DB  2B8A               	goto	i1l7250
 18650  02DC                     i1l7208:	
 18651                           
 18652                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 18653  02DC  0878               	movf	_DimmerLightsIntr,w
 18654  02DD  3E04               	addlw	4
 18655  02DE  0086               	movwf	6
 18656  02DF  3001               	movlw	1	; select bank2/3
 18657  02E0  0087               	movwf	7
 18658  02E1  303C               	movlw	60
 18659  02E2  0201               	subwf	1,w
 18660  02E3  1803               	skipnc
 18661  02E4  2AEF               	goto	i1l7212
 18662                           
 18663                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 18664  02E5  3001               	movlw	1
 18665  02E6  00F2               	movwf	??_setDimmerLights_IntrControl
 18666  02E7  0878               	movf	_DimmerLightsIntr,w
 18667  02E8  3E04               	addlw	4
 18668  02E9  0086               	movwf	6
 18669  02EA  3001               	movlw	1	; select bank2/3
 18670  02EB  0087               	movwf	7
 18671  02EC  0872               	movf	??_setDimmerLights_IntrControl,w
 18672  02ED  0781               	addwf	1,f
 18673                           
 18674                           ;Dimmer_B1.c: 141: } else {
 18675  02EE  2B8A               	goto	i1l7250
 18676  02EF                     i1l7212:	
 18677                           
 18678                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 18679  02EF  0878               	movf	_DimmerLightsIntr,w
 18680  02F0  0086               	movwf	6
 18681  02F1  3001               	movlw	1	; select bank2/3
 18682  02F2  0087               	movwf	7
 18683  02F3  1201               	bcf	1,4
 18684                           
 18685                           ;Dimmer_B1.c: 143: }
 18686                           ;Dimmer_B1.c: 144: }
 18687                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 18688  02F4  2B8A               	goto	i1l7250
 18689  02F5                     i1l7214:	
 18690  02F5  0878               	movf	_DimmerLightsIntr,w
 18691  02F6  0086               	movwf	6
 18692  02F7  3001               	movlw	1	; select bank2/3
 18693  02F8  0087               	movwf	7
 18694  02F9  1D01               	btfss	1,2
 18695  02FA  2B3C               	goto	i1l7228
 18696                           
 18697                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 18698  02FB  0878               	movf	_DimmerLightsIntr,w
 18699  02FC  3E05               	addlw	5
 18700  02FD  0086               	movwf	6
 18701  02FE  3001               	movlw	1	; select bank2/3
 18702  02FF  0087               	movwf	7
 18703  0300  0878               	movf	_DimmerLightsIntr,w
 18704  0301  3E04               	addlw	4
 18705  0302  0084               	movwf	4
 18706  0303  3001               	movlw	1	; select bank2/3
 18707  0304  0085               	movwf	5
 18708  0305  0800               	movf	0,w
 18709  0306  0201               	subwf	1,w
 18710  0307  1803               	skipnc
 18711  0308  2B11               	goto	i1l7220
 18712                           
 18713                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 18714  0309  0878               	movf	_DimmerLightsIntr,w
 18715  030A  3E04               	addlw	4
 18716  030B  0086               	movwf	6
 18717  030C  3001               	movlw	1	; select bank2/3
 18718  030D  0087               	movwf	7
 18719  030E  3001               	movlw	1
 18720  030F  0281               	subwf	1,f
 18721                           
 18722                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 18723  0310  2B28               	goto	i1l7224
 18724  0311                     i1l7220:	
 18725  0311  0878               	movf	_DimmerLightsIntr,w
 18726  0312  3E04               	addlw	4
 18727  0313  0086               	movwf	6
 18728  0314  3001               	movlw	1	; select bank2/3
 18729  0315  0087               	movwf	7
 18730  0316  0878               	movf	_DimmerLightsIntr,w
 18731  0317  3E05               	addlw	5
 18732  0318  0084               	movwf	4
 18733  0319  3001               	movlw	1	; select bank2/3
 18734  031A  0085               	movwf	5
 18735  031B  0800               	movf	0,w
 18736  031C  0201               	subwf	1,w
 18737  031D  1803               	skipnc
 18738  031E  2B28               	goto	i1l7224
 18739                           
 18740                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 18741  031F  3001               	movlw	1
 18742  0320  00F2               	movwf	??_setDimmerLights_IntrControl
 18743  0321  0878               	movf	_DimmerLightsIntr,w
 18744  0322  3E04               	addlw	4
 18745  0323  0086               	movwf	6
 18746  0324  3001               	movlw	1	; select bank2/3
 18747  0325  0087               	movwf	7
 18748  0326  0872               	movf	??_setDimmerLights_IntrControl,w
 18749  0327  0781               	addwf	1,f
 18750  0328                     i1l7224:	
 18751                           
 18752                           ;Dimmer_B1.c: 150: }
 18753                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18754  0328  0878               	movf	_DimmerLightsIntr,w
 18755  0329  3E05               	addlw	5
 18756  032A  0086               	movwf	6
 18757  032B  3001               	movlw	1	; select bank2/3
 18758  032C  0087               	movwf	7
 18759  032D  0878               	movf	_DimmerLightsIntr,w
 18760  032E  3E04               	addlw	4
 18761  032F  0084               	movwf	4
 18762  0330  3001               	movlw	1	; select bank2/3
 18763  0331  0085               	movwf	5
 18764  0332  0800               	movf	0,w
 18765  0333  0601               	xorwf	1,w
 18766  0334  1D03               	skipz
 18767  0335  2B8A               	goto	i1l7250
 18768                           
 18769                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 18770  0336  0878               	movf	_DimmerLightsIntr,w
 18771  0337  0086               	movwf	6
 18772  0338  3001               	movlw	1	; select bank2/3
 18773  0339  0087               	movwf	7
 18774  033A  1101               	bcf	1,2
 18775  033B  2B57               	goto	i1l7234
 18776  033C                     i1l7228:	
 18777                           ;Dimmer_B1.c: 154: }
 18778                           ;Dimmer_B1.c: 155: } else {
 18779                           
 18780                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 18781                           
 18782                           
 18783                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 18784  033C  0878               	movf	_DimmerLightsIntr,w
 18785  033D  0086               	movwf	6
 18786  033E  3001               	movlw	1	; select bank2/3
 18787  033F  0087               	movwf	7
 18788  0340  1E81               	btfss	1,5
 18789  0341  2B5D               	goto	i1l7236
 18790                           
 18791                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 18792  0342  0878               	movf	_DimmerLightsIntr,w
 18793  0343  3E04               	addlw	4
 18794  0344  0086               	movwf	6
 18795  0345  3001               	movlw	1	; select bank2/3
 18796  0346  0087               	movwf	7
 18797  0347  3001               	movlw	1
 18798  0348  0281               	subwf	1,f
 18799                           
 18800                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 18801  0349  0878               	movf	_DimmerLightsIntr,w
 18802  034A  3E05               	addlw	5
 18803  034B  0086               	movwf	6
 18804  034C  3001               	movlw	1	; select bank2/3
 18805  034D  0087               	movwf	7
 18806  034E  0878               	movf	_DimmerLightsIntr,w
 18807  034F  3E04               	addlw	4
 18808  0350  0084               	movwf	4
 18809  0351  3001               	movlw	1	; select bank2/3
 18810  0352  0085               	movwf	5
 18811  0353  0800               	movf	0,w
 18812  0354  0201               	subwf	1,w
 18813  0355  1C03               	skipc
 18814  0356  2B8A               	goto	i1l7250
 18815  0357                     i1l7234:	
 18816                           
 18817                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 18818  0357  0878               	movf	_DimmerLightsIntr,w
 18819  0358  0086               	movwf	6
 18820  0359  3001               	movlw	1	; select bank2/3
 18821  035A  0087               	movwf	7
 18822  035B  1081               	bcf	1,1
 18823                           
 18824                           ;Dimmer_B1.c: 160: }
 18825                           ;Dimmer_B1.c: 161: } else {
 18826  035C  2B8A               	goto	i1l7250
 18827  035D                     i1l7236:	
 18828                           
 18829                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 18830  035D  3001               	movlw	1
 18831  035E  00F2               	movwf	??_setDimmerLights_IntrControl
 18832  035F  0878               	movf	_DimmerLightsIntr,w
 18833  0360  3E04               	addlw	4
 18834  0361  0086               	movwf	6
 18835  0362  3001               	movlw	1	; select bank2/3
 18836  0363  0087               	movwf	7
 18837  0364  0872               	movf	??_setDimmerLights_IntrControl,w
 18838  0365  0781               	addwf	1,f
 18839                           
 18840                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 18841  0366  0878               	movf	_DimmerLightsIntr,w
 18842  0367  3E04               	addlw	4
 18843  0368  0086               	movwf	6
 18844  0369  3001               	movlw	1	; select bank2/3
 18845  036A  0087               	movwf	7
 18846  036B  0878               	movf	_DimmerLightsIntr,w
 18847  036C  3E06               	addlw	6
 18848  036D  0084               	movwf	4
 18849  036E  3001               	movlw	1	; select bank2/3
 18850  036F  0085               	movwf	5
 18851  0370  0800               	movf	0,w
 18852  0371  0201               	subwf	1,w
 18853  0372  1C03               	skipc
 18854  0373  2B8A               	goto	i1l7250
 18855                           
 18856                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 18857  0374  0878               	movf	_DimmerLightsIntr,w
 18858  0375  0086               	movwf	6
 18859  0376  3001               	movlw	1	; select bank2/3
 18860  0377  0087               	movwf	7
 18861  0378  1081               	bcf	1,1
 18862                           
 18863                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 18864  0379  0878               	movf	_DimmerLightsIntr,w
 18865  037A  0086               	movwf	6
 18866  037B  3001               	movlw	1	; select bank2/3
 18867  037C  0087               	movwf	7
 18868  037D  1301               	bcf	1,6
 18869                           
 18870                           ;Dimmer_B1.c: 167: if (lights == 1) {
 18871  037E  0874               	movf	setDimmerLights_IntrControl@lights,w
 18872  037F  3A01               	xorlw	1
 18873  0380  1D03               	skipz
 18874  0381  2B84               	goto	i1l7246
 18875                           
 18876                           ;Dimmer_B1.c: 168: RA3 = 0;
 18877  0382  0020               	movlb	0	; select bank0
 18878  0383  118C               	bcf	12,3	;volatile
 18879  0384                     i1l7246:	
 18880                           
 18881                           ;Dimmer_B1.c: 170: }
 18882                           ;Dimmer_B1.c: 173: if (lights == 2) {
 18883  0384  0874               	movf	setDimmerLights_IntrControl@lights,w
 18884  0385  3A02               	xorlw	2
 18885  0386  1D03               	skipz
 18886  0387  2B8A               	goto	i1l7250
 18887                           
 18888                           ;Dimmer_B1.c: 174: RC7 = 0;
 18889  0388  0020               	movlb	0	; select bank0
 18890  0389  138E               	bcf	14,7	;volatile
 18891  038A                     i1l7250:	
 18892                           
 18893                           ;Dimmer_B1.c: 175: }
 18894                           ;Dimmer_B1.c: 182: }
 18895                           ;Dimmer_B1.c: 183: }
 18896                           ;Dimmer_B1.c: 184: }
 18897                           ;Dimmer_B1.c: 185: }
 18898                           ;Dimmer_B1.c: 186: }
 18899                           ;Dimmer_B1.c: 187: }
 18900                           ;Dimmer_B1.c: 188: }
 18901                           ;Dimmer_B1.c: 189: if (DimmerLightsIntr->Triac == 1) {
 18902  038A  0878               	movf	_DimmerLightsIntr,w
 18903  038B  3E08               	addlw	8
 18904  038C  0086               	movwf	6
 18905  038D  3001               	movlw	1	; select bank2/3
 18906  038E  0087               	movwf	7
 18907  038F  1E81               	btfss	1,5
 18908  0390  2BBB               	goto	i1l7268
 18909                           
 18910                           ;Dimmer_B1.c: 190: DimmerLightsIntr->TriacTime++;
 18911  0391  3001               	movlw	1
 18912  0392  00F2               	movwf	??_setDimmerLights_IntrControl
 18913  0393  0878               	movf	_DimmerLightsIntr,w
 18914  0394  3E07               	addlw	7
 18915  0395  0086               	movwf	6
 18916  0396  3001               	movlw	1	; select bank2/3
 18917  0397  0087               	movwf	7
 18918  0398  0872               	movf	??_setDimmerLights_IntrControl,w
 18919  0399  0781               	addwf	1,f
 18920                           
 18921                           ;Dimmer_B1.c: 191: if (DimmerLightsIntr->TriacTime >= 5) {
 18922  039A  0878               	movf	_DimmerLightsIntr,w
 18923  039B  3E07               	addlw	7
 18924  039C  0086               	movwf	6
 18925  039D  3001               	movlw	1	; select bank2/3
 18926  039E  0087               	movwf	7
 18927  039F  3005               	movlw	5
 18928  03A0  0201               	subwf	1,w
 18929  03A1  1C03               	skipc
 18930  03A2  2BBB               	goto	i1l7268
 18931                           
 18932                           ;Dimmer_B1.c: 192: DimmerLightsIntr->TriacTime = 0;
 18933  03A3  0878               	movf	_DimmerLightsIntr,w
 18934  03A4  3E07               	addlw	7
 18935  03A5  0086               	movwf	6
 18936  03A6  3001               	movlw	1	; select bank2/3
 18937  03A7  0087               	movwf	7
 18938  03A8  0181               	clrf	1
 18939                           
 18940                           ;Dimmer_B1.c: 193: DimmerLightsIntr->Triac = 0;
 18941  03A9  0878               	movf	_DimmerLightsIntr,w
 18942  03AA  3E08               	addlw	8
 18943  03AB  0086               	movwf	6
 18944  03AC  3001               	movlw	1	; select bank2/3
 18945  03AD  0087               	movwf	7
 18946  03AE  1281               	bcf	1,5
 18947                           
 18948                           ;Dimmer_B1.c: 196: if (lights == 1) {
 18949  03AF  0874               	movf	setDimmerLights_IntrControl@lights,w
 18950  03B0  3A01               	xorlw	1
 18951  03B1  1D03               	skipz
 18952  03B2  2BB5               	goto	i1l7264
 18953                           
 18954                           ;Dimmer_B1.c: 197: RA7 = 0;
 18955  03B3  0020               	movlb	0	; select bank0
 18956  03B4  138C               	bcf	12,7	;volatile
 18957  03B5                     i1l7264:	
 18958                           ;Dimmer_B1.c: 198: ;;
 18959                           
 18960                           
 18961                           ;Dimmer_B1.c: 199: }
 18962                           ;Dimmer_B1.c: 202: if (lights == 2) {
 18963  03B5  0874               	movf	setDimmerLights_IntrControl@lights,w
 18964  03B6  3A02               	xorlw	2
 18965  03B7  1D03               	skipz
 18966  03B8  2BBB               	goto	i1l7268
 18967                           
 18968                           ;Dimmer_B1.c: 203: RB4 = 0;
 18969  03B9  0020               	movlb	0	; select bank0
 18970  03BA  120D               	bcf	13,4	;volatile
 18971  03BB                     i1l7268:	
 18972                           
 18973                           ;Dimmer_B1.c: 204: }
 18974                           ;Dimmer_B1.c: 211: }
 18975                           ;Dimmer_B1.c: 212: }
 18976                           ;Dimmer_B1.c: 213: if (DimmerLightsIntr->TriacFlag == 1) {
 18977  03BB  0878               	movf	_DimmerLightsIntr,w
 18978  03BC  3E09               	addlw	9
 18979  03BD  0086               	movwf	6
 18980  03BE  3001               	movlw	1	; select bank2/3
 18981  03BF  0087               	movwf	7
 18982  03C0  1E81               	btfss	1,5
 18983  03C1  0008               	return
 18984                           
 18985                           ;Dimmer_B1.c: 214: DimmerLightsIntr->TriacCount++;
 18986  03C2  3001               	movlw	1
 18987  03C3  00F2               	movwf	??_setDimmerLights_IntrControl
 18988  03C4  0878               	movf	_DimmerLightsIntr,w
 18989  03C5  3E0A               	addlw	10
 18990  03C6  0086               	movwf	6
 18991  03C7  3001               	movlw	1	; select bank2/3
 18992  03C8  0087               	movwf	7
 18993  03C9  0872               	movf	??_setDimmerLights_IntrControl,w
 18994  03CA  0781               	addwf	1,f
 18995                           
 18996                           ;Dimmer_B1.c: 215: if (DimmerLightsIntr->TriacCount == 60) {
 18997  03CB  0878               	movf	_DimmerLightsIntr,w
 18998  03CC  3E0A               	addlw	10
 18999  03CD  0086               	movwf	6
 19000  03CE  3001               	movlw	1	; select bank2/3
 19001  03CF  0087               	movwf	7
 19002  03D0  0801               	movf	1,w
 19003  03D1  3A3C               	xorlw	60
 19004  03D2  1D03               	skipz
 19005  03D3  0008               	return
 19006                           
 19007                           ;Dimmer_B1.c: 216: DimmerLightsIntr->TriacCount = 0;
 19008  03D4  0878               	movf	_DimmerLightsIntr,w
 19009  03D5  3E0A               	addlw	10
 19010  03D6  0086               	movwf	6
 19011  03D7  3001               	movlw	1	; select bank2/3
 19012  03D8  0087               	movwf	7
 19013  03D9  0181               	clrf	1
 19014                           
 19015                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacFlag = 0;
 19016  03DA  0878               	movf	_DimmerLightsIntr,w
 19017  03DB  3E09               	addlw	9
 19018  03DC  0086               	movwf	6
 19019  03DD  3001               	movlw	1	; select bank2/3
 19020  03DE  0087               	movwf	7
 19021  03DF  1281               	bcf	1,5
 19022  03E0  0008               	return
 19023  03E1                     __end_of_setDimmerLights_IntrControl:	
 19024                           
 19025                           	psect	text127
 19026  1BB7                     __ptext127:	
 19027 ;; *************** function _DimmerIntrPointSelect *****************
 19028 ;; Defined at:
 19029 ;;		line 72 in file "../src/Dimmer_B1.c"
 19030 ;; Parameters:    Size  Location     Type
 19031 ;;  lights          1    wreg     unsigned char 
 19032 ;; Auto vars:     Size  Location     Type
 19033 ;;  lights          1    1[COMMON] unsigned char 
 19034 ;; Return value:  Size  Location     Type
 19035 ;;		None               void
 19036 ;; Registers used:
 19037 ;;		wreg
 19038 ;; Tracked objects:
 19039 ;;		On entry : 0/0
 19040 ;;		On exit  : 0/0
 19041 ;;		Unchanged: 0/0
 19042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19045 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19046 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19047 ;;Total ram usage:        2 bytes
 19048 ;; Hardware stack levels used:    1
 19049 ;; This function calls:
 19050 ;;		Nothing
 19051 ;; This function is called by:
 19052 ;;		_setDimmerLights_IntrControl
 19053 ;; This function uses a non-reentrant model
 19054 ;;
 19055                           
 19056                           
 19057                           ;psect for function _DimmerIntrPointSelect
 19058  1BB7                     _DimmerIntrPointSelect:	
 19059                           
 19060                           ;incstack = 0
 19061                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19062                           ;DimmerIntrPointSelect@lights stored from wreg
 19063  1BB7  00F1               	movwf	DimmerIntrPointSelect@lights
 19064                           
 19065                           ;Dimmer_B1.c: 74: if (lights == 1) {
 19066  1BB8  0871               	movf	DimmerIntrPointSelect@lights,w
 19067  1BB9  3A01               	xorlw	1
 19068  1BBA  1D03               	skipz
 19069  1BBB  2BC0               	goto	i1l747
 19070                           
 19071                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 19072  1BBC  30BE               	movlw	_DimmerLights1& (0+255)
 19073  1BBD  00F0               	movwf	??_DimmerIntrPointSelect
 19074  1BBE  0870               	movf	??_DimmerIntrPointSelect,w
 19075  1BBF  00F8               	movwf	_DimmerLightsIntr
 19076  1BC0                     i1l747:	
 19077                           
 19078                           ;Dimmer_B1.c: 76: }
 19079                           ;Dimmer_B1.c: 79: if (lights == 2) {
 19080  1BC0  0871               	movf	DimmerIntrPointSelect@lights,w
 19081  1BC1  3A02               	xorlw	2
 19082  1BC2  1D03               	skipz
 19083  1BC3  0008               	return
 19084                           
 19085                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 19086  1BC4  30CD               	movlw	_DimmerLights2& (0+255)
 19087  1BC5  00F0               	movwf	??_DimmerIntrPointSelect
 19088  1BC6  0870               	movf	??_DimmerIntrPointSelect,w
 19089  1BC7  00F8               	movwf	_DimmerLightsIntr
 19090  1BC8  0008               	return
 19091  1BC9                     __end_of_DimmerIntrPointSelect:	
 19092                           
 19093                           	psect	text128
 19094  1B56                     __ptext128:	
 19095 ;; *************** function _IOC_ISR *****************
 19096 ;; Defined at:
 19097 ;;		line 402 in file "../src/MCU_B1.c"
 19098 ;; Parameters:    Size  Location     Type
 19099 ;;		None
 19100 ;; Auto vars:     Size  Location     Type
 19101 ;;		None
 19102 ;; Return value:  Size  Location     Type
 19103 ;;		None               void
 19104 ;; Registers used:
 19105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19106 ;; Tracked objects:
 19107 ;;		On entry : 0/0
 19108 ;;		On exit  : 0/0
 19109 ;;		Unchanged: 0/0
 19110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19115 ;;Total ram usage:        0 bytes
 19116 ;; Hardware stack levels used:    1
 19117 ;; Hardware stack levels required when called:    3
 19118 ;; This function calls:
 19119 ;;		_setDimmerReClock
 19120 ;; This function is called by:
 19121 ;;		_ISR
 19122 ;; This function uses a non-reentrant model
 19123 ;;
 19124                           
 19125                           
 19126                           ;psect for function _IOC_ISR
 19127  1B56                     _IOC_ISR:	
 19128                           
 19129                           ;MCU_B1.c: 403: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19130                           
 19131                           ;incstack = 0
 19132                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19133  1B56  1D8B               	btfss	11,3	;volatile
 19134  1B57  0008               	return
 19135  1B58  1C0B               	btfss	11,0	;volatile
 19136  1B59  0008               	return
 19137  1B5A  0027               	movlb	7	; select bank7
 19138  1B5B  1D16               	btfss	22,2	;volatile
 19139  1B5C  0008               	return
 19140                           
 19141                           ;MCU_B1.c: 404: IOCBF2 = 0;
 19142  1B5D  1116               	bcf	22,2	;volatile
 19143                           
 19144                           ;MCU_B1.c: 405: IOCIF = 0;
 19145  1B5E  100B               	bcf	11,0	;volatile
 19146                           
 19147                           ;MCU_B1.c: 406: if (myMain.PowerON == 1) {
 19148  1B5F  0021               	movlb	1	; select bank1
 19149  1B60  1C20               	btfss	_myMain^(0+128),0
 19150  1B61  0008               	return
 19151                           
 19152                           ;MCU_B1.c: 408: setDimmerReClock();
 19153  1B62  319A  228C         	fcall	_setDimmerReClock
 19154  1B64  0008               	return
 19155  1B65                     __end_of_IOC_ISR:	
 19156                           
 19157                           	psect	text129
 19158  1A8C                     __ptext129:	
 19159 ;; *************** function _setDimmerReClock *****************
 19160 ;; Defined at:
 19161 ;;		line 244 in file "../src/MCU_B1.c"
 19162 ;; Parameters:    Size  Location     Type
 19163 ;;		None
 19164 ;; Auto vars:     Size  Location     Type
 19165 ;;		None
 19166 ;; Return value:  Size  Location     Type
 19167 ;;		None               void
 19168 ;; Registers used:
 19169 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19170 ;; Tracked objects:
 19171 ;;		On entry : 0/0
 19172 ;;		On exit  : 0/0
 19173 ;;		Unchanged: 0/0
 19174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19179 ;;Total ram usage:        0 bytes
 19180 ;; Hardware stack levels used:    1
 19181 ;; Hardware stack levels required when called:    2
 19182 ;; This function calls:
 19183 ;;		_setDimmerLights_IntrIOC_GO
 19184 ;; This function is called by:
 19185 ;;		_IOC_ISR
 19186 ;; This function uses a non-reentrant model
 19187 ;;
 19188                           
 19189                           
 19190                           ;psect for function _setDimmerReClock
 19191  1A8C                     _setDimmerReClock:	
 19192                           
 19193                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 19194                           
 19195                           ;incstack = 0
 19196                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19197  1A8C  3001               	movlw	1
 19198  1A8D  319F  275B  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19199                           
 19200                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 19201  1A90  3002               	movlw	2
 19202  1A91  319F  275B         	fcall	_setDimmerLights_IntrIOC_GO
 19203  1A93  0008               	return
 19204  1A94                     __end_of_setDimmerReClock:	
 19205                           
 19206                           	psect	text130
 19207  1F5B                     __ptext130:	
 19208 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19209 ;; Defined at:
 19210 ;;		line 28 in file "../src/Dimmer_B1.c"
 19211 ;; Parameters:    Size  Location     Type
 19212 ;;  lights          1    wreg     unsigned char 
 19213 ;; Auto vars:     Size  Location     Type
 19214 ;;  lights          1    2[COMMON] unsigned char 
 19215 ;; Return value:  Size  Location     Type
 19216 ;;		None               void
 19217 ;; Registers used:
 19218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19219 ;; Tracked objects:
 19220 ;;		On entry : 0/0
 19221 ;;		On exit  : 0/0
 19222 ;;		Unchanged: 0/0
 19223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19227 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19228 ;;Total ram usage:        1 bytes
 19229 ;; Hardware stack levels used:    1
 19230 ;; Hardware stack levels required when called:    1
 19231 ;; This function calls:
 19232 ;;		_DimmerIntrIOCPointSelect
 19233 ;; This function is called by:
 19234 ;;		_setDimmerReClock
 19235 ;; This function uses a non-reentrant model
 19236 ;;
 19237                           
 19238                           
 19239                           ;psect for function _setDimmerLights_IntrIOC_GO
 19240  1F5B                     _setDimmerLights_IntrIOC_GO:	
 19241                           
 19242                           ;incstack = 0
 19243                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19244                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19245  1F5B  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19246                           
 19247                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 19248  1F5C  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19249  1F5D  319C  245D  319F   	fcall	_DimmerIntrIOCPointSelect
 19250                           
 19251                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 19252  1F60  0021               	movlb	1	; select bank1
 19253  1F61  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19254  1F62  0086               	movwf	6
 19255  1F63  3001               	movlw	1	; select bank2/3
 19256  1F64  0087               	movwf	7
 19257  1F65  1801               	btfsc	1,0
 19258  1F66  0008               	return
 19259  1F67  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19260  1F68  3E09               	addlw	9
 19261  1F69  0086               	movwf	6
 19262  1F6A  3001               	movlw	1	; select bank2/3
 19263  1F6B  0087               	movwf	7
 19264  1F6C  1A81               	btfsc	1,5
 19265  1F6D  0008               	return
 19266                           
 19267                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 19268  1F6E  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19269  1F6F  0086               	movwf	6
 19270  1F70  3001               	movlw	1	; select bank2/3
 19271  1F71  0087               	movwf	7
 19272  1F72  1401               	bsf	1,0
 19273                           
 19274                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 19275  1F73  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19276  1F74  3E09               	addlw	9
 19277  1F75  0086               	movwf	6
 19278  1F76  3001               	movlw	1	; select bank2/3
 19279  1F77  0087               	movwf	7
 19280  1F78  1681               	bsf	1,5
 19281                           
 19282                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 19283  1F79  0020               	movlb	0	; select bank0
 19284  1F7A  1D0D               	btfss	13,2	;volatile
 19285  1F7B  2F80               	goto	i1l6766
 19286                           
 19287                           ;Dimmer_B1.c: 36: Dimmer.Correction = 1;
 19288  1F7C  0021               	movlb	1	; select bank1
 19289  1F7D  01CA               	clrf	(_Dimmer^(0+128)+2)
 19290  1F7E  0ACA               	incf	(_Dimmer^(0+128)+2),f
 19291                           
 19292                           ;Dimmer_B1.c: 37: } else {
 19293  1F7F  0008               	return
 19294  1F80                     i1l6766:	
 19295                           
 19296                           ;Dimmer_B1.c: 38: Dimmer.Correction = 0;
 19297  1F80  0021               	movlb	1	; select bank1
 19298  1F81  01CA               	clrf	(_Dimmer^(0+128)+2)
 19299  1F82  0008               	return
 19300  1F83                     __end_of_setDimmerLights_IntrIOC_GO:	
 19301                           
 19302                           	psect	text131
 19303  1C5D                     __ptext131:	
 19304 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19305 ;; Defined at:
 19306 ;;		line 8 in file "../src/Dimmer_B1.c"
 19307 ;; Parameters:    Size  Location     Type
 19308 ;;  lights          1    wreg     unsigned char 
 19309 ;; Auto vars:     Size  Location     Type
 19310 ;;  lights          1    1[COMMON] unsigned char 
 19311 ;; Return value:  Size  Location     Type
 19312 ;;		None               void
 19313 ;; Registers used:
 19314 ;;		wreg
 19315 ;; Tracked objects:
 19316 ;;		On entry : 0/0
 19317 ;;		On exit  : 0/0
 19318 ;;		Unchanged: 0/0
 19319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19321 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19322 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19323 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19324 ;;Total ram usage:        2 bytes
 19325 ;; Hardware stack levels used:    1
 19326 ;; This function calls:
 19327 ;;		Nothing
 19328 ;; This function is called by:
 19329 ;;		_setDimmerLights_IntrIOC_GO
 19330 ;; This function uses a non-reentrant model
 19331 ;;
 19332                           
 19333                           
 19334                           ;psect for function _DimmerIntrIOCPointSelect
 19335  1C5D                     _DimmerIntrIOCPointSelect:	
 19336                           
 19337                           ;incstack = 0
 19338                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19339                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19340  1C5D  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19341                           
 19342                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19343  1C5E  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19344  1C5F  3A01               	xorlw	1
 19345  1C60  1D03               	skipz
 19346  1C61  2C67               	goto	i1l736
 19347                           
 19348                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19349  1C62  30BE               	movlw	_DimmerLights1& (0+255)
 19350  1C63  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19351  1C64  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19352  1C65  0021               	movlb	1	; select bank1
 19353  1C66  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19354  1C67                     i1l736:	
 19355                           
 19356                           ;Dimmer_B1.c: 12: }
 19357                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19358  1C67  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19359  1C68  3A02               	xorlw	2
 19360  1C69  1D03               	skipz
 19361  1C6A  0008               	return
 19362                           
 19363                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19364  1C6B  30CD               	movlw	_DimmerLights2& (0+255)
 19365  1C6C  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19366  1C6D  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19367  1C6E  0021               	movlb	1	; select bank1
 19368  1C6F  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19369  1C70  0008               	return
 19370  1C71                     __end_of_DimmerIntrIOCPointSelect:	
 19371  007E                     btemp	set	126	;btemp
 19372  007E                     pic14e$flags	set	126
 19373  007E                     wtemp	set	126
 19374  007E                     wtemp0	set	126
 19375  0080                     wtemp1	set	128
 19376  0082                     wtemp2	set	130
 19377  0084                     wtemp3	set	132
 19378  0086                     wtemp4	set	134
 19379  0088                     wtemp5	set	136
 19380  007F                     wtemp6	set	127
 19381  007E                     ttemp	set	126
 19382  007E                     ttemp0	set	126
 19383  0081                     ttemp1	set	129
 19384  0084                     ttemp2	set	132
 19385  0087                     ttemp3	set	135
 19386  007F                     ttemp4	set	127
 19387  007E                     ltemp	set	126
 19388  007E                     ltemp0	set	126
 19389  0082                     ltemp1	set	130
 19390  0086                     ltemp2	set	134
 19391  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         261
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     79      79
    BANK1            80      5      79
    BANK2            80      0      77
    BANK3            80      4      73
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK2[2]), DlySw1(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _main->_Switch_Main
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_getMain_All_Error_Status
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setRF_DimmerLights
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setRF_DimmerLights
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Switch_Main->_setMain_Exception

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  173052
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1705
                             _setBuz
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     669
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     238
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0     238
                                              7 BANK0      2     2      0
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   43466
                                             77 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   27047
                                             70 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     604
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0   16085
                                             75 BANK0      2     2      0
                                              0 BANK1      5     5      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0   12795
                                             70 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1078
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1078
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   59187
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   59187
                                             74 BANK0      4     4      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   57960
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1767
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   55921
                             _setBuz
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   36092
                                             70 BANK0      2     2      0
             _getDimmerLights_Status
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   18124
                                             68 BANK0      3     3      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   17842
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   17749
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   17656
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    4020
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4925
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1230
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      71
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0     114
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1202
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1202
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1739
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1442
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   10215
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1102
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   14563
                                             70 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   13957
                                             69 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   10294
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1    1741
                                              7 BANK0      3     2      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1047
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     297
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   34351
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   34351
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0   11996
                                             66 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1705
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                4     4      0   12318
                                             66 BANK0      4     4      0
            _DimmerLightsPointSelect
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    9693
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    8711
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     579
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    4368
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3665
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1679
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     264
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     198
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     198
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
           _setRF_DimmerLights
             _setPercentValue
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _setTxData
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setTxData

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      5      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      49      11       91.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     185      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     185      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Nov 12 17:22:13 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 1663                                       l98 1677  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1089  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 0079                     _getDimmerLights_Line 1C4A  
                 __end_of_setDelayOff_GO 1800                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 1583  
                   _setDimmerLights_Line 0800                             ___ftadd@sign 0048  
                                    l110 13E3                                      l106 13E9  
                                    l107 13E5                                      l108 13D3  
                                    l330 1D10                                      l331 1D12  
                   _setDimmerLights_SwOn 1360                                      l255 09D6  
                                    l280 0B74                                      l281 0BBB  
                                    l374 1F13                                      l801 1141  
                                    l582 08D1                                      l860 1793  
                                    l790 1C1B                                      l898 1C53  
                                    l899 1C5A                                      _GIE 005F  
                                    _CRC 00CB                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 00CF  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00BC                                      _ISR 0004  
                                    _WDT 0125             getDimmerLights_Status@lights 0022  
                                    _Sw1 0154                                      _Sw2 01DC  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1D1D  
                  _Buzzer_Initialization 1A50                          __end_of_ADC_Set 1A8C  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023             getDimmerLights_Status@status 0023  
                        _setDimmerLights 0BC1                   _setMain_Exception$3936 00EB  
                      ??_getSw_KeyStatus 0020                    _setDimmerLights_AdjRF 1EA3  
                                   ?_ISR 0070          setDimmerLights_ErrorClose@count 0067  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1B65  
                             Load_Main@i 002F                               Load_Main@j 002B  
                           ___ftdiv@sign 003D                                     l2302 121D  
                                   l2320 14FD                                     l1345 11E5  
                                   l1602 10FA                 ?_DimmerLightsPointSelect 0070  
                                   l1603 1115                                     l2235 0733  
                                   l2316 0ADB                                     l2244 06B2  
                                   l2245 06AE                                     l2237 0670  
                                   l2238 0672                                     l1607 1111  
                                   l1359 10DD                                     l2247 06EB  
                                   l2239 067A                                     l1368 1436  
                                   l2328 127D                           _Load_Main$4317 002C  
                                   l1732 0082                                     l1733 01C9  
                        __end_of_IOC_Set 1B23                                     l1734 01C7  
                                   l2286 0AF7                                     l1558 1476  
                                   l2296 0B48                                     l1729 022F  
                                   l2626 07F2                                     l2642 1ED5  
                                   l2652 0547                                     l2654 0420  
                                   l2930 085F                                     l2924 0848  
                                   l1884 0E77                                     l2953 05EF  
                  _setDimmerLights_SwOff 1740                                     l9030 1D96  
                                   l9120 10FE                                     l9040 1E8D  
                                   l9032 1D9C                                     l9044 1E98  
                                   l9140 08E7                                     l9060 151D  
                                   l9212 0A6F                                     l8430 082F  
                                   l9118 10F5                                     l9302 0B4F  
                                   l9310 0B5B                                     l9230 0AB0  
                                   l8440 0855                                     l8432 0834  
                                   l8424 081E                                     l9128 110C  
                                   l9144 08ED                                     l9320 0B71  
                                   l9304 0B52                                     l8520 05CE  
                                   l9056 1504                                     l9232 0AB4  
                                   l9240 0AC0                                     l9082 1D48  
                                   l9170 0921                                     l9154 08FD  
                                   l9162 0909                                     l9322 0B6B  
                                   l9250 09A2                                     l8514 05BB  
                                   l9234 0AB8                                     l9226 0A9B  
                                   l9076 1D3F                                     l8452 1BCC  
                                   l8428 0825                                     l9148 08F3  
                                   l9092 1EF3                                     l9308 0B58  
                                   l9252 09A5                                     l8532 0601  
                                   l8516 05C5                                     l8508 05A8  
                                   l8620 07A7                                     l8604 0764  
                                   l9068 126B                                     l9236 0ABC  
                                   l9500 1697                                     l9078 1D42  
                                   l8438 084D                                     l9174 0927  
                                   l9158 0903                                     l9094 1EF6  
                                   l9350 0BBD                                     l9270 09BD  
                                   l8526 05E1                                     l8518 05CA  
                                   l9502 16C8                                     l9360 1F24  
                                   l8456 1BD2                                     l9336 0B86  
                                   l9280 09E5                                     l9256 09AB  
                                   l8536 0613                                     l8528 05EB  
                                   l8632 07C3                                     l8616 079F  
                                   l9362 1F2F                                     l9370 1072  
                                   l8706 1FFE                                     l8474 1E6A  
                                   l8562 0EA8                                     l9178 092D  
                                   l9418 0C15                                     l9426 14A2  
                                   l9098 1EFC                                     l9338 0B9F  
                                   l9282 09E9                                     l9274 09DC  
                                   l9610 1BB1                                     l8546 062E  
                                   l8490 057F                                     l9700 12D0  
                                   l8556 0E92                                     l8820 0A5E  
                                   l8740 153A                                     l9188 080D  
                                   l9284 09EC                                     l9276 09DF  
                                   l8628 07BB                    _myMain_Initialization 1B65  
                                   l9374 1078                                     l8486 0578  
                                   l9630 0AFA                                     l9446 1DED  
                                   l9368 106F                                     l8840 17DD  
                                   l8584 0F02                                     l8576 0EE9  
                                   l8648 0CDB                                     l9392 10AD  
                                   l9288 09F2                                     l8496 058E  
                                   l9456 1DF9                                     l9448 1DEF  
                                   l8690 1C7C                                     l8842 17EA  
                                   l8682 0D40                                     l8674 0D26  
                                   l8666 0D0B                                     l8746 1545  
                                   l9394 1091                                     l9642 0B12  
                                   l9458 1DFD                                     l9474 1195  
                                   l8844 17F3                                     l8836 17D7  
                                   l8676 0D2F                                     l8668 0D19  
                                   l8772 157C                                     l8764 156B  
                                   l8756 154D                                     l9396 10B2  
                                   l9652 0B33                                     l8678 0D32  
                                   l8758 1559                                     l9566 10C5  
                                   l9910 13F7                                     l9830 130C  
                                   l8598 074E                                     l8768 1574  
                                   l9808 15D4                                     _CFGS 0CAE  
                                   l9690 12C0                                     l8858 1B8E  
                                   l8946 13A0                                     l9834 1313  
                                   l9658 0B3E                                     l9498 16C2  
                                   l9684 12B7                                     l8972 1787  
                                   l9916 140C                                     l9668 1C90  
                                   l9694 12C7                                     l9686 12BA  
                                   l8982 1158                                     l9950 096B  
                                   l9696 12CA                                     l9960 098B  
                                   l9944 095D                                     l9936 0945  
                           __CFG_WDTE$ON 0000                                     l9954 097B  
                                   l9962 0994                                     l9938 0952  
                                   l9796 15A7                                     l9892 1E2A  
                                   l9798 15AD                                     l9894 1E2D  
                                   l9898 1E32                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     _PEIE 005E  
                                   u9105 07CA                                     u9025 0770  
                                   u9035 0780                                     u9135 0CE2  
                                   u9055 07A8                                     u9065 07AE  
                                   u9315 1550                                     u9420 0A0C  
                                   u9165 0D0C                                     u9255 1FEA  
                                   u8615 0850                                     u9335 155A  
                                   u9095 07C4                                     u9425 0A0A  
                                   u9345 1564                                     u9195 0D27  
                                   u9355 156C                                     u8645 0866  
                                   u8575 082A                                     u8815 05BC  
                                   u8595 0843                                     u8845 05CF  
                                   u9585 1CBC                                     u8945 0EBA  
                                   u8785 05A9                                     u8955 0ECA  
                                   u8875 05E2                                     _LWLO 0CAD  
                                   u8965 0EEA                                     u8975 0EF9  
                                   u8985 0F03                                     _RSSI 00D0  
                                   _WREN 0CAA                                     _Buz1 00B0  
                                   _Load 0127                                     _Temp 00D8  
                                   _main 15DA                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 08D7                          __end_of_RF_Main 1A59  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1B3B  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1A8C                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1292  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0075  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
                 _getDimmerLights_Status 1B74                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1B17  
       setDimmerLights_ErrorClose@lights 0068            __end_of_DimmerIntrPointSelect 1BC9  
                  ?_getDimmerLights_Line 0070                                    l10004 0DF6  
                                  l10120 06D2                                    l10202 044E  
                                  l10034 0E46                                    l10212 0480  
                                  l10044 0E5B                                    l10118 06D0  
                                  l10046 0E5C                                    l10136 0700  
                                  l10226 04BE                                    l10324 1138  
                                  l10148 0721                                    l10084 0691  
                                  l10172 07FD                                    l10236 04F0  
                                  l10326 113B                                    l10262 0543  
                                  l10510 1460                                    l10328 1143  
                                  l10600 0115                                    l10168 07F7  
                                  l10520 1477                                    l10186 040B  
                                  l10450 0C62                                    l10276 13BD  
                                  l10358 0F96                                    l10606 0122  
                                  l10462 0C8F                                    l10608 0128  
                                  l10720 1EDE                                    l10570 009C  
                                  l10458 0C87                                    l10628 0176  
                                  l10548 006C                                    l10492 1249  
                                  l10478 0CBC                    ?_setDimmerLights_Main 0070  
                                  l10576 00C6                                    l10696 021D  
                                  l10784 15FE                                    l10788 1609  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 01E5  
                        __end_of___awdiv 1583                          __end_of___ftadd 0646  
                        __end_of___ftdiv 0F24                                    u10205 109A  
                                  u10165 1F19                          __end_of___ftmul 07EB  
                                  u11065 0E37                                    u11315 0711  
                        ___awdiv@divisor 0020                                    u10365 16A0  
                                  u11085 0E4C                                    _T1CON 0018  
                                  u11185 068B                                    u12155 012E  
                                  u12075 00C8                          __end_of___fttol 0D49  
                                  u12085 00CD                                    u12095 00DB  
                                  u11805 0C75                                    u11585 13B3  
                                  u11745 11DC                                    u11905 124F  
                                  u11925 144F                                    u11855 0CA9  
                                  u11935 146E                                    u11955 1485  
                                  _IOCBF 0396                                    u11895 1240  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l736 1C67                                    i1l747 1BC0  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 00EA                  __end_of_Timeout_Counter 1CC2  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 1F83  
             _setDimmerLights_IntrIOC_GO 1F5B                         __end_of_TMR1_ISR 1FAC  
           __size_of_CC2500_WriteCommand 001A       __end_of_setDimmerLights_ErrorClose 16E5  
             _setDimmerLights_ErrorClose 168B                         __end_of_TMR1_Set 1B2F  
                                  _getAD 1E1F                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1C11              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03D0  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1CED  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0012             __end_of_getMain_LightsStatus 10B5  
          __end_of_setLED_Initialization 1BED                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0A02  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 16E5                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                        ??_setPercentValue 0059  
                           __end_of_main 1632                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1A6F                       ??_setMemory_Modify 0020  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0C41                     _setSw_Initialization 1AB4  
                                 ??_main 006F                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0A6E  
                         _setMemory_Data 1AE7                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03D0                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1C24                   ?_setDimmerLights_AdjRF 0070  
               __size_of_setRFSW_Control 0052                  ??_Switch_Initialization 0025  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
           setDimmerLights_AdjControl@sw 0028                        ??_getRF_KeyStatus 0020  
                 ?_setDimmerLights_SwOff 0070                              _DlyOff_Main 0876  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006E  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1E81                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0876                 _getMain_All_Error_Status 10E4  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1DA3  
                                 i1l7220 0311                                   i1l7212 02EF  
                                 i1l7206 02D6                                   i1l7214 02F5  
                                 i1l7224 0328                                   i1l7208 02DC  
                                 i1l7234 0357                                   i1l7250 038A  
                                 i1l7236 035D                                   i1l7228 033C  
                                 i1l7246 0384                                   i1l7264 03B5  
                                 i1l7184 0285                                   i1l7268 03BB  
                                 i1l7188 028C                                   i1l6766 1F80  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                       __size_of_Load_Main 01EC  
                                 u657_25 0260                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   u781_25 1FA6  
                                 _IO_Set 1D1D                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1A4E  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1CD7  
                                 _Dimmer 00C8                                   _DlySw1 0169  
                                 _DlySw2 016B               __end_of_Mcu_Initialization 1BFF  
                    __end_of_Buzzer_Main 13F0                                   _Memory 0220  
                                 _Timer1 0120       __end_of_setDimmerLights_TriggerAdj 1E1F  
             _setDimmerLights_TriggerAdj 1DFF                                   ___bmul 1BC9  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                  setDimmerLights@lights 0029                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                   ??_setDimmerLights_Line 0020  
                                 _r_data 00D6                                   _s_data 00D7  
                 ??_setDimmerLights_SwOn 0062                                   _setLED 08D7  
                                 _myMain 00A0                   __end_of_setMemory_Data 1AF3  
                       _DimmerLightsIntr 0078                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0027                         ___awdiv@quotient 0027  
                                 _setBuz 1632                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1A79         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 03E1  
            _setDimmerLights_IntrControl 0235                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1C4A  
            getMain_Lights_Count@status1 0022              getMain_Lights_Count@status2 0023  
            getMain_Lights_Count@status3 0021                    __end_of_SwPointSelect 1C99  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0074  
                __size_of_LedPointSelect 0022                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 07EB  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1740  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0045  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                     _getRF_KeyStatus$5718 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1E3F                            __end_of_getAD 1E3F  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0051                       _LED_Initialization 1AFF  
                        _getSw_KeyStatus 1DE0                ??_setControl_Lights_Table 0068  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0027                     _getMain_Lights_Count 1CD7  
                              ?_WDT_Main 0070                        __end_of_Load_Main 0235  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 1089  
             __end_of_set_TimeoutCleared 1A74                 __end_of_setDimmerReClock 1A94  
                     __size_of_getRxData 006F                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CC                           _DimmerLights22 00CD  
                   __size_of_setLED_Main 0044                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1A59  
                     ??_CC2500_WriteByte 0020                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 13A6                        ??_setRFSW_Control 0066  
                      __end_of_Temp_Main 1A5F                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1A94                               __pnvCOMMON 007B  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 006D  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 0077  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 15DA  
                    _CC2500_WriteCommand 1D36                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0075                            ?_setTemp_Main 0070  
                             _getLoad_AD 0C41                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                             _getLoad_OK 1AA4                       __size_of_setTxData 0099  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                  ?_getMain_Lights_Count 0070                                  _ADC_Set 1A85  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 1221  
                             ??_WDT_Main 0020                    ?_getMain_LightsStatus 0070  
           __end_of_setRF_Initialization 1ADB                       _setRFSW_AdjControl 1258  
                                _IOC_ISR 1B56                                  _IOC_Set 1B17  
                   __size_of_setLog_Code 0036                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 11B5                __size_of_getDimmer_LoadOK 0008  
                      _Flash_Memory_Read 1D50              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 0076                   __size_of_CC2500_TxData 0068  
            ?_setDimmerLights_ErrorClose 0070                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 01A0                                  _RF_Main 1A56  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1B2F          __end_of_setControl_Lights_Table 0ADC  
                        setRF_Main@error 006D                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _setPercentValue 131A  
                ??_setLoad_AH_AL_Restore 0020                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1AE7                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1BA6                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0161  
                                _VarLED2 0165           __end_of_getDimmerLights_Status 1B84  
                      __end_of_getRxData 0B4B                  __end_of_getSw_KeyStatus 1DFF  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C71  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1DC1  
                   ??_setRFSW_AdjControl 0064                           ??_setTemp_Main 0027  
                        __size_of___bmul 0012                                  ___awdiv 152F  
                                ___ftadd 0550                                  ___ftdiv 0E7B  
                                ___ftmul 0737                                  ___fttol 0CC2  
                    __end_of_Switch_Main 1EE9                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 1BA6                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0061  
                   setRFSW_AdjControl@sw 0066                          __size_of_setBuz 0059  
                                __ptext1 143E                                  __ptext2 1B65  
                                __ptext3 1221                                  __ptext4 0C41  
                                __ptext5 1E1F                                  __ptext6 1BFF  
                                __ptext7 0002                                  __ptext8 1A5C  
                                __ptext9 0DE2                  ??_setDimmerLights_AdjRF 005F  
              __size_of_CC2500_SIDLEMode 0004                    _DimmerIntrPointSelect 1BB7  
                           __size_of_ISR 000F               ??_getMain_All_Error_Status 0020  
              __end_of_Flash_Memory_Main 11EB                __end_of_Flash_Memory_Read 1D6A  
                ??_setDimmerLights_SwOff 0062                               _setRF_Main 0646  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1A9C  
                      _DimmerLights_Main 1117           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1AD0               __end_of_CC2500_ClearRXFIFO 1A63  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1A67  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 007B  
                         _LedPointSelect 1E81                      _DelayOffPointSelect 1C71  
                         _getMain_LoadOK 1B48                                  clrloop0 1A80  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1B48  
                   end_of_initialization 0045                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 1FAC                            _DelayTime_1us 1F0E  
                      __end_of_setTxData 0DE2               __end_of_Flash_Memory_Write 10E4  
                                init_ram 1A79                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0066                     Flash_Memory_Read@ret 0023  
                                initloop 1A7A                               _setSw_Main 03E1  
                  CC2500_ReadByte@loop_b 0021                   setDimmerLights_SwOn@sw 0064  
                      _CC2500_ReadStatus 1EE9                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1BDB                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 0B4B                            _CC2500_TxData 099A  
                    ??_CC2500_InitSetREG 0025              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 13F0                              ?_getLoad_AD 0070  
                            ?_getLoad_OK 0070                   ??_getMain_Lights_Count 0020  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1ABC  
                    ??_CC2500_ReadStatus 0022                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 0015                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 114B  
                     _Mcu_Initialization 1BED                 __size_of_CC2500_PowerRST 0044  
                   __end_of_my_MainTimer 148C                           ?_DelayOff_Main 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1EA3  
                __end_of_setPercentValue 1360                   __end_of_getMain_LoadOK 1B56  
               __size_of_CC2500_WriteREG 0023                __end_of_CC2500_InitSetREG 1FD6  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 148C                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1F0E              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1D36                     _setRF_Initialization 1AD0  
                     _setMemory_LoopSave 1C37                              _Switch_Main 1EC5  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1C11                  __end_of_getRF_KeyStatus 1BB7  
                      _setMain_Exception 0938                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1CC2  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1BDB                 setMain_Exception@command 00EE  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1C5D  
        _setDimmerLights_AdjControl$2589 0027                        getSw_KeyStatus@sw 0024  
                      __size_of_TMR1_ISR 0029            __size_of_getDimmerLights_Line 0013  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0057                           __end_of_setLED 0938  
          __size_of_setDimmerLights_Line 0015            __size_of_setDimmerLights_SwOn 0046  
                         __end_of_setBuz 168B                      ??_setMain_Exception 006B  
                   _CC2500_FrequencyCabr 1ADB               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 14DD                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 114B                          ?_LedPointSelect 0070  
                              _Load_Main 0049                              __end_of_ISR 0013  
                        ?_getMain_LoadOK 0070                         _getDimmer_LoadOK 1AAC  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1DE0          __size_of_setTemp_Initialization 0001  
                   ??_setMemory_LoopSave 0020                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0E7B  
                    __size_of_getLoad_AD 0081                             ?_Buzzer_Main 0070  
                    __size_of_getLoad_OK 0008                       _set_TimeoutCleared 1A6F  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 015D                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 0037  
                 ?_setLED_Initialization 0070                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                __end_of_setMain_Exception 099A  
              __size_of_CC2500_WriteByte 0019                                _Temp_Main 1A5C  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D1                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00D4  
                            __pdataBANK4 0245                _getAll_DimmerLights_AdjGO 1B84  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0069  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 1117  
                       _CC2500_SIDLEMode 1A67               __size_of_DimmerLights_Main 0034  
              __end_of_setRF_DimmerValue 1180                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070           _getAll_DimmerLights_AdjGO$2569 0022  
                            __pbssCOMMON 0076                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1C24  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00EA                            __pcstackBANK3 01E5  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0080                            DlyOff_Main@sw 0068  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 0061               __size_of_CC2500_ReadStatus 0025  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01BE                            _DimmerLights2 01CD  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1D86  
                        ??_CC2500_TxData 0024                           getRxData@error 0069  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00F1  
                         Load_Main@adjgo 002E                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002D                   _setTemp_Initialization 1A4F  
                              _getBuz_GO 1B95      __end_of_Flash_Memory_Initialization 1000  
            _Flash_Memory_Initialization 0F24                                 ?___awdiv 0020  
                              __ptext100 179F                                __ptext101 1FD6  
                              __ptext110 1292                                __ptext102 1BC9  
                              __ptext111 1FAC                                __ptext103 1B74  
                              __ptext120 1CAD                                __ptext112 1DC1  
                              __ptext104 1C11                                __ptext121 1D04  
                              __ptext113 1066                                __ptext105 1A94  
                              __ptext130 1F5B                                __ptext122 13A6  
                              __ptext114 1ADB                                __ptext106 1AC5  
                              __ptext131 1C5D                                __ptext123 1A50  
                              __ptext115 1F0E                                __ptext107 1C71  
                              __ptext116 1A63                                __ptext108 1CC2  
                              __ptext125 1F83                                __ptext117 1A5F  
                              __ptext109 1A67                                 ?___ftadd 003E  
                              __ptext126 0235                                __ptext118 1D36  
                              __ptext127 1BB7                                __ptext119 1A6F  
                              __ptext128 1B56                                __ptext129 1A8C  
                              _getRxData 0ADC                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                  __size_of_my_MainTimer 004E                  __end_of_setRFSW_Control 152F  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1A53  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0021  
                     __end_of_TouchPower 0800                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
          __end_of_setDimmerLights_AdjRF 1EC5                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2501 0068                                _r_address 00D5  
         __size_of_setDimmerLights_SwOff 005F           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 179F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1B74                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1C85  
                    __end_of_setLED_Main 131A                      _DimmerLightsIntrIOC 00CE  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1A5C  
           setDimmerLights_SwOff@command 0064                        _CC2500_rfSettings 102F  
                               _LED_Main 1B0B                          SwPointSelect@sw 0021  
                              clear_ram0 1A7F                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 0062                             _my_MainTimer 143E  
                              _setTxData 0D49      __end_of_DimmerLights_Initialization 1D04  
            _DimmerLights_Initialization 1CED                       _CC2500_ClearRXFIFO 1A5F  
                     _CC2500_ClearTXFIFO 1A63           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1CAD                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003A  
                     _Flash_Memory_Write 10B5                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 1F83  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1B23  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0123  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1D50  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1BFF  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0023  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 006B  
                  __size_of_setTemp_Main 0099                  __size_of_setDelayOff_GO 0061  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0076  
                           setSw_Main@sw 0068         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1AFF  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 1221  
                  _DlyOff_Initialization 1AC5                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1A6B  
                       __size_of_WDT_Set 000C                  setMain_Exception@status 00ED  
                     __end_of_getLoad_AD 0CC2                       __end_of_getLoad_OK 1AAC  
                  _Switch_Initialization 1B3B        __size_of_getMain_All_Error_Status 0033  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0028  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 1258                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1D04                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 005E                                 _SwDetect 00D3  
                            ??_Temp_Main 0029                        setRFSW_Control@sw 0067  
          _getMain_All_Error_Status$3953 0021            _getMain_All_Error_Status$3962 0023  
               __end_of_getDimmer_LoadOK 1AB4                      _Load_Initialization 1A74  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
    __size_of_setDimmerLights_AdjControl 0035                             _setTemp_Main 0DE2  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
               setDimmerLights_SwOn@idle 0063                                 ___awtoft 1E5F  
                       ??_LedPointSelect 0020                                 ___ftpack 0815  
          __size_of_getMain_Lights_Count 0016                         ??_getMain_LoadOK 0021  
          __size_of_getMain_LightsStatus 002C                        getTemp_AD@channel 0025  
                           ??_setRF_Main 006A                     CC2500_WriteREG@value 0022  
                            _setLED_Main 12D6               __end_of_setRF_DimmerLights 0A6E  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
     __size_of_getAll_DimmerLights_AdjGO 0011                     ?_Load_Initialization 0070  
                               __ptext10 1A59                                 __ptext11 1A4F  
                               __ptext20 1C4A                                 __ptext12 1EC5  
                               __ptext21 1B3B                                 __ptext13 03E1  
                               __ptext30 14DD                                 __ptext22 1AB4  
                               __ptext14 1C99                                 __ptext31 1258  
                               __ptext23 07EB                                 __ptext15 1180  
                               __ptext40 099A                                 __ptext32 114B  
                               __ptext24 1A56                                 __ptext16 1DE0  
                               __ptext41 0B4B                                 __ptext33 1EA3  
                               __ptext25 0646                                 __ptext17 1C85  
                               __ptext50 1B17                                 __ptext42 1EE9  
                               __ptext34 16E5                                 __ptext26 0ADC  
                               __ptext18 0938                                 __ptext51 1A6B  
                               __ptext43 1D86                                 __ptext35 0737  
                               __ptext27 11EB                                 __ptext19 168B  
                               __ptext60 12D6                                 __ptext52 1A85  
                               __ptext44 1A53                                 __ptext36 0550  
                               __ptext28 1C37                                 __ptext61 1AFF  
                               __ptext53 0049                                 __ptext45 1AD0  
                               __ptext37 1C24                                 __ptext29 0A6E  
                               __ptext70 1D50                                 __ptext62 1BDB  
                               __ptext54 1B48                                 __ptext46 1BED  
                               __ptext38 1BA6                                 __ptext71 1117  
                               __ptext63 11B5                                 __ptext55 1AAC  
                               __ptext47 1B2F                                 __ptext39 1B95  
                               __ptext80 1AA4                                 __ptext72 1583  
                               __ptext64 13F0                                 __ptext56 1CD7  
                               __ptext48 1B23                                 __ptext81 1CED  
                               __ptext73 148C                                 __ptext65 1AF3  
                               __ptext57 1A74                                 __ptext49 1D1D  
                               __ptext90 1740                                 __ptext82 1F34  
                               __ptext74 0BC1                                 __ptext66 0F24  
                               __ptext58 1D6A                                 __ptext91 0D49  
                               __ptext83 1A4E                                 __ptext75 08D7  
                               __ptext67 1AE7                                 __ptext59 1B0B  
                               __ptext92 0A02                                 __ptext84 1A9C  
                               __ptext76 1E81                                 __ptext68 10B5  
                               __ptext93 131A                                 __ptext85 0876  
                               __ptext77 0800                                 __ptext69 1ABC  
                               __ptext94 0CC2                                 __ptext86 1360  
                               __ptext78 10E4                                 __ptext95 0E7B  
                               __ptext87 1632                                 __ptext79 1089  
                               __ptext96 1E5F                                 __ptext88 152F  
                               __ptext97 0815                                 __ptext89 1B84  
                               __ptext98 1DFF                                 __ptext99 1DA3  
                               __product 0245            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001             __end_of_getDimmerLights_Line 1C5D  
          __end_of_Dimmer_Initialization 1A4F             __end_of_setDimmerLights_Main 15DA  
           __end_of_setDimmerLights_Line 0815                         Switch_Main@error 006E  
           __end_of_setDimmerLights_SwOn 13A6                   getDimmer_LoadOK@status 0020  
                           ??_setSw_Main 0066                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1C99  
               __end_of_CC2500_SIDLEMode 1A6B               setDimmerLights_Main@lights 0065  
            __end_of_DelayOffPointSelect 1C85               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 006C                __size_of_setDimmerReClock 0008  
         setDimmerLights_AdjControl@idle 0026                          _CC2500_ReadByte 1D86  
                     _CC2500_InitPATable 1DC1                 __end_of_setMemory_Modify 1C37  
          setDimmerLights_Trigger@lights 0024                       __end_of_setRF_Main 0737  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0069                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0068                             getLoad_OK@ok 0020  
       setDimmerLights_TriggerAdj@lights 0024                                 main@argc 01E5  
                               main@argv 01E7                     _getSw_KeyStatus$2565 0021  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$2566 0022  
                        _CC2500_PowerRST 1292                 __size_of_getSw_KeyStatus 001F  
            __end_of_Flash_Memory_Modify 143E                        ??_getPercentValue 0059  
                            _setLog_Code 11EB              __end_of_Flash_Memory_Unlock 1AC5  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1066  
                     __end_of_setSw_Main 0550                    ??_Load_Initialization 0022  
                          _Transceive_OK 03D1                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 1FD6                              pic14e$flags 007E  
           ??_setDimmerLights_IntrIOC_GO 0072               setDimmerLights_Line@lights 0020  
           ??_setDimmerLights_ErrorClose 0066                  setDimmerLights_SwOff@sw 0065  
      __end_of_getAll_DimmerLights_AdjGO 1B95              __size_of_setMemory_LoopSave 0013  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1F5B  __size_of_setDimmerLights_Initialization 0027  
         _setDimmerLights_Initialization 1F34              __end_of_setDimmerLights_Adj 14DD  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 1A53  
   __size_of_setDimmerLights_IntrControl 01AC                              getLoad_AD@i 0029  
                            getLoad_AD@j 0028                              getLoad_AD@k 0027  
                   _Flash_Memory_Erasing 1AF3                       ?_RF_Initialization 0070  
                             _SPI0Buffer 00D2          __end_of_DelayOff_Initialization 1A9C  
    __size_of_setDimmerLights_IntrIOC_GO 0028      __size_of_setDimmerLights_ErrorClose 005A  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1AA4  
     __end_of_setDimmerLights_AdjControl 11B5               _setDimmerLights_AdjControl 1180  
                    ??_RF_Initialization 0021                  __size_of_setMemory_Data 000C  
                         _setDelayOff_GO 179F         __size_of_setControl_Lights_Table 006E  
                 __end_of_DelayTimejudge 2000     __size_of_Flash_Memory_Initialization 00DC  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0066  
                  setMemory_Data@address 0022                    __end_of_DelayTime_1us 1F34  
                __end_of_CC2500_ReadByte 1DA3             __end_of_setSw_Initialization 1ABC  
                        _Timeout_Counter 1CAD          __size_of_getDimmerLights_Status 0010  
                   getPercentValue@value 005B               __end_of_LED_Initialization 1B0B  
       __size_of_setDimmerLights_Trigger 001E           __end_of_setTemp_Initialization 1A50  
               __size_of_setPercentValue 0046                  setMemory_Modify@command 0021  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1A56  
                  __end_of_CC2500_RxData 0BC1                    __end_of_CC2500_TxData 0A02  
                  _setLoad_AH_AL_Restore 1D6A                  __end_of_CC2500_PowerRST 12D6  
         getAll_DimmerLights_AdjGO@adjgo 0021  
