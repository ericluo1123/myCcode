

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Nov 03 10:09:11 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	intentry,global,class=CODE,delta=2
   155                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text136,local,class=CODE,merge=1,delta=2
   158                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   163                           	dabs	1,0x7E,2
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  011D                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  018E                     	;# 
   216  0191                     	;# 
   217  0191                     	;# 
   218  0192                     	;# 
   219  0193                     	;# 
   220  0193                     	;# 
   221  0194                     	;# 
   222  0195                     	;# 
   223  0196                     	;# 
   224  0197                     	;# 
   225  0199                     	;# 
   226  019A                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019C                     	;# 
   232  019C                     	;# 
   233  019D                     	;# 
   234  019E                     	;# 
   235  019F                     	;# 
   236  020D                     	;# 
   237  0210                     	;# 
   238  0211                     	;# 
   239  0211                     	;# 
   240  0212                     	;# 
   241  0212                     	;# 
   242  0213                     	;# 
   243  0213                     	;# 
   244  0214                     	;# 
   245  0214                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0216                     	;# 
   250  0216                     	;# 
   251  0217                     	;# 
   252  0217                     	;# 
   253  0291                     	;# 
   254  0291                     	;# 
   255  0292                     	;# 
   256  0293                     	;# 
   257  0298                     	;# 
   258  0298                     	;# 
   259  0299                     	;# 
   260  029A                     	;# 
   261  0394                     	;# 
   262  0395                     	;# 
   263  0396                     	;# 
   264  0FE4                     	;# 
   265  0FE5                     	;# 
   266  0FE6                     	;# 
   267  0FE7                     	;# 
   268  0FE8                     	;# 
   269  0FE9                     	;# 
   270  0FEA                     	;# 
   271  0FEB                     	;# 
   272  0FED                     	;# 
   273  0FEE                     	;# 
   274  0FEF                     	;# 
   275  0000                     	;# 
   276  0001                     	;# 
   277  0002                     	;# 
   278  0003                     	;# 
   279  0004                     	;# 
   280  0005                     	;# 
   281  0006                     	;# 
   282  0007                     	;# 
   283  0008                     	;# 
   284  0009                     	;# 
   285  000A                     	;# 
   286  000B                     	;# 
   287  000C                     	;# 
   288  000D                     	;# 
   289  000E                     	;# 
   290  0010                     	;# 
   291  0011                     	;# 
   292  0012                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0016                     	;# 
   296  0017                     	;# 
   297  0018                     	;# 
   298  0019                     	;# 
   299  001A                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  008C                     	;# 
   303  008D                     	;# 
   304  008E                     	;# 
   305  0090                     	;# 
   306  0091                     	;# 
   307  0092                     	;# 
   308  0095                     	;# 
   309  0096                     	;# 
   310  0097                     	;# 
   311  0099                     	;# 
   312  009A                     	;# 
   313  009B                     	;# 
   314  009B                     	;# 
   315  009C                     	;# 
   316  009D                     	;# 
   317  009E                     	;# 
   318  010C                     	;# 
   319  010D                     	;# 
   320  010E                     	;# 
   321  0116                     	;# 
   322  0117                     	;# 
   323  011D                     	;# 
   324  018C                     	;# 
   325  018D                     	;# 
   326  018E                     	;# 
   327  0191                     	;# 
   328  0191                     	;# 
   329  0192                     	;# 
   330  0193                     	;# 
   331  0193                     	;# 
   332  0194                     	;# 
   333  0195                     	;# 
   334  0196                     	;# 
   335  0197                     	;# 
   336  0199                     	;# 
   337  019A                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019C                     	;# 
   343  019C                     	;# 
   344  019D                     	;# 
   345  019E                     	;# 
   346  019F                     	;# 
   347  020D                     	;# 
   348  0210                     	;# 
   349  0211                     	;# 
   350  0211                     	;# 
   351  0212                     	;# 
   352  0212                     	;# 
   353  0213                     	;# 
   354  0213                     	;# 
   355  0214                     	;# 
   356  0214                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0216                     	;# 
   361  0216                     	;# 
   362  0217                     	;# 
   363  0217                     	;# 
   364  0291                     	;# 
   365  0291                     	;# 
   366  0292                     	;# 
   367  0293                     	;# 
   368  0298                     	;# 
   369  0298                     	;# 
   370  0299                     	;# 
   371  029A                     	;# 
   372  0394                     	;# 
   373  0395                     	;# 
   374  0396                     	;# 
   375  0FE4                     	;# 
   376  0FE5                     	;# 
   377  0FE6                     	;# 
   378  0FE7                     	;# 
   379  0FE8                     	;# 
   380  0FE9                     	;# 
   381  0FEA                     	;# 
   382  0FEB                     	;# 
   383  0FED                     	;# 
   384  0FEE                     	;# 
   385  0FEF                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  0010                     	;# 
   402  0011                     	;# 
   403  0012                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  0090                     	;# 
   417  0091                     	;# 
   418  0092                     	;# 
   419  0095                     	;# 
   420  0096                     	;# 
   421  0097                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009B                     	;# 
   426  009C                     	;# 
   427  009D                     	;# 
   428  009E                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0116                     	;# 
   433  0117                     	;# 
   434  011D                     	;# 
   435  018C                     	;# 
   436  018D                     	;# 
   437  018E                     	;# 
   438  0191                     	;# 
   439  0191                     	;# 
   440  0192                     	;# 
   441  0193                     	;# 
   442  0193                     	;# 
   443  0194                     	;# 
   444  0195                     	;# 
   445  0196                     	;# 
   446  0197                     	;# 
   447  0199                     	;# 
   448  019A                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019C                     	;# 
   454  019C                     	;# 
   455  019D                     	;# 
   456  019E                     	;# 
   457  019F                     	;# 
   458  020D                     	;# 
   459  0210                     	;# 
   460  0211                     	;# 
   461  0211                     	;# 
   462  0212                     	;# 
   463  0212                     	;# 
   464  0213                     	;# 
   465  0213                     	;# 
   466  0214                     	;# 
   467  0214                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0216                     	;# 
   472  0216                     	;# 
   473  0217                     	;# 
   474  0217                     	;# 
   475  0291                     	;# 
   476  0291                     	;# 
   477  0292                     	;# 
   478  0293                     	;# 
   479  0298                     	;# 
   480  0298                     	;# 
   481  0299                     	;# 
   482  029A                     	;# 
   483  0394                     	;# 
   484  0395                     	;# 
   485  0396                     	;# 
   486  0FE4                     	;# 
   487  0FE5                     	;# 
   488  0FE6                     	;# 
   489  0FE7                     	;# 
   490  0FE8                     	;# 
   491  0FE9                     	;# 
   492  0FEA                     	;# 
   493  0FEB                     	;# 
   494  0FED                     	;# 
   495  0FEE                     	;# 
   496  0FEF                     	;# 
   497  0000                     	;# 
   498  0001                     	;# 
   499  0002                     	;# 
   500  0003                     	;# 
   501  0004                     	;# 
   502  0005                     	;# 
   503  0006                     	;# 
   504  0007                     	;# 
   505  0008                     	;# 
   506  0009                     	;# 
   507  000A                     	;# 
   508  000B                     	;# 
   509  000C                     	;# 
   510  000D                     	;# 
   511  000E                     	;# 
   512  0010                     	;# 
   513  0011                     	;# 
   514  0012                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  008C                     	;# 
   525  008D                     	;# 
   526  008E                     	;# 
   527  0090                     	;# 
   528  0091                     	;# 
   529  0092                     	;# 
   530  0095                     	;# 
   531  0096                     	;# 
   532  0097                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  010C                     	;# 
   541  010D                     	;# 
   542  010E                     	;# 
   543  0116                     	;# 
   544  0117                     	;# 
   545  011D                     	;# 
   546  018C                     	;# 
   547  018D                     	;# 
   548  018E                     	;# 
   549  0191                     	;# 
   550  0191                     	;# 
   551  0192                     	;# 
   552  0193                     	;# 
   553  0193                     	;# 
   554  0194                     	;# 
   555  0195                     	;# 
   556  0196                     	;# 
   557  0197                     	;# 
   558  0199                     	;# 
   559  019A                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019C                     	;# 
   565  019C                     	;# 
   566  019D                     	;# 
   567  019E                     	;# 
   568  019F                     	;# 
   569  020D                     	;# 
   570  0210                     	;# 
   571  0211                     	;# 
   572  0211                     	;# 
   573  0212                     	;# 
   574  0212                     	;# 
   575  0213                     	;# 
   576  0213                     	;# 
   577  0214                     	;# 
   578  0214                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0216                     	;# 
   583  0216                     	;# 
   584  0217                     	;# 
   585  0217                     	;# 
   586  0291                     	;# 
   587  0291                     	;# 
   588  0292                     	;# 
   589  0293                     	;# 
   590  0298                     	;# 
   591  0298                     	;# 
   592  0299                     	;# 
   593  029A                     	;# 
   594  0394                     	;# 
   595  0395                     	;# 
   596  0396                     	;# 
   597  0FE4                     	;# 
   598  0FE5                     	;# 
   599  0FE6                     	;# 
   600  0FE7                     	;# 
   601  0FE8                     	;# 
   602  0FE9                     	;# 
   603  0FEA                     	;# 
   604  0FEB                     	;# 
   605  0FED                     	;# 
   606  0FEE                     	;# 
   607  0FEF                     	;# 
   608  0000                     	;# 
   609  0001                     	;# 
   610  0002                     	;# 
   611  0003                     	;# 
   612  0004                     	;# 
   613  0005                     	;# 
   614  0006                     	;# 
   615  0007                     	;# 
   616  0008                     	;# 
   617  0009                     	;# 
   618  000A                     	;# 
   619  000B                     	;# 
   620  000C                     	;# 
   621  000D                     	;# 
   622  000E                     	;# 
   623  0010                     	;# 
   624  0011                     	;# 
   625  0012                     	;# 
   626  0015                     	;# 
   627  0016                     	;# 
   628  0016                     	;# 
   629  0017                     	;# 
   630  0018                     	;# 
   631  0019                     	;# 
   632  001A                     	;# 
   633  001B                     	;# 
   634  001C                     	;# 
   635  008C                     	;# 
   636  008D                     	;# 
   637  008E                     	;# 
   638  0090                     	;# 
   639  0091                     	;# 
   640  0092                     	;# 
   641  0095                     	;# 
   642  0096                     	;# 
   643  0097                     	;# 
   644  0099                     	;# 
   645  009A                     	;# 
   646  009B                     	;# 
   647  009B                     	;# 
   648  009C                     	;# 
   649  009D                     	;# 
   650  009E                     	;# 
   651  010C                     	;# 
   652  010D                     	;# 
   653  010E                     	;# 
   654  0116                     	;# 
   655  0117                     	;# 
   656  011D                     	;# 
   657  018C                     	;# 
   658  018D                     	;# 
   659  018E                     	;# 
   660  0191                     	;# 
   661  0191                     	;# 
   662  0192                     	;# 
   663  0193                     	;# 
   664  0193                     	;# 
   665  0194                     	;# 
   666  0195                     	;# 
   667  0196                     	;# 
   668  0197                     	;# 
   669  0199                     	;# 
   670  019A                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019C                     	;# 
   676  019C                     	;# 
   677  019D                     	;# 
   678  019E                     	;# 
   679  019F                     	;# 
   680  020D                     	;# 
   681  0210                     	;# 
   682  0211                     	;# 
   683  0211                     	;# 
   684  0212                     	;# 
   685  0212                     	;# 
   686  0213                     	;# 
   687  0213                     	;# 
   688  0214                     	;# 
   689  0214                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0216                     	;# 
   694  0216                     	;# 
   695  0217                     	;# 
   696  0217                     	;# 
   697  0291                     	;# 
   698  0291                     	;# 
   699  0292                     	;# 
   700  0293                     	;# 
   701  0298                     	;# 
   702  0298                     	;# 
   703  0299                     	;# 
   704  029A                     	;# 
   705  0394                     	;# 
   706  0395                     	;# 
   707  0396                     	;# 
   708  0FE4                     	;# 
   709  0FE5                     	;# 
   710  0FE6                     	;# 
   711  0FE7                     	;# 
   712  0FE8                     	;# 
   713  0FE9                     	;# 
   714  0FEA                     	;# 
   715  0FEB                     	;# 
   716  0FED                     	;# 
   717  0FEE                     	;# 
   718  0FEF                     	;# 
   719  0000                     	;# 
   720  0001                     	;# 
   721  0002                     	;# 
   722  0003                     	;# 
   723  0004                     	;# 
   724  0005                     	;# 
   725  0006                     	;# 
   726  0007                     	;# 
   727  0008                     	;# 
   728  0009                     	;# 
   729  000A                     	;# 
   730  000B                     	;# 
   731  000C                     	;# 
   732  000D                     	;# 
   733  000E                     	;# 
   734  0010                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0015                     	;# 
   738  0016                     	;# 
   739  0016                     	;# 
   740  0017                     	;# 
   741  0018                     	;# 
   742  0019                     	;# 
   743  001A                     	;# 
   744  001B                     	;# 
   745  001C                     	;# 
   746  008C                     	;# 
   747  008D                     	;# 
   748  008E                     	;# 
   749  0090                     	;# 
   750  0091                     	;# 
   751  0092                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0097                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010E                     	;# 
   765  0116                     	;# 
   766  0117                     	;# 
   767  011D                     	;# 
   768  018C                     	;# 
   769  018D                     	;# 
   770  018E                     	;# 
   771  0191                     	;# 
   772  0191                     	;# 
   773  0192                     	;# 
   774  0193                     	;# 
   775  0193                     	;# 
   776  0194                     	;# 
   777  0195                     	;# 
   778  0196                     	;# 
   779  0197                     	;# 
   780  0199                     	;# 
   781  019A                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019C                     	;# 
   787  019C                     	;# 
   788  019D                     	;# 
   789  019E                     	;# 
   790  019F                     	;# 
   791  020D                     	;# 
   792  0210                     	;# 
   793  0211                     	;# 
   794  0211                     	;# 
   795  0212                     	;# 
   796  0212                     	;# 
   797  0213                     	;# 
   798  0213                     	;# 
   799  0214                     	;# 
   800  0214                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0216                     	;# 
   805  0216                     	;# 
   806  0217                     	;# 
   807  0217                     	;# 
   808  0291                     	;# 
   809  0291                     	;# 
   810  0292                     	;# 
   811  0293                     	;# 
   812  0298                     	;# 
   813  0298                     	;# 
   814  0299                     	;# 
   815  029A                     	;# 
   816  0394                     	;# 
   817  0395                     	;# 
   818  0396                     	;# 
   819  0FE4                     	;# 
   820  0FE5                     	;# 
   821  0FE6                     	;# 
   822  0FE7                     	;# 
   823  0FE8                     	;# 
   824  0FE9                     	;# 
   825  0FEA                     	;# 
   826  0FEB                     	;# 
   827  0FED                     	;# 
   828  0FEE                     	;# 
   829  0FEF                     	;# 
   830  0000                     	;# 
   831  0001                     	;# 
   832  0002                     	;# 
   833  0003                     	;# 
   834  0004                     	;# 
   835  0005                     	;# 
   836  0006                     	;# 
   837  0007                     	;# 
   838  0008                     	;# 
   839  0009                     	;# 
   840  000A                     	;# 
   841  000B                     	;# 
   842  000C                     	;# 
   843  000D                     	;# 
   844  000E                     	;# 
   845  0010                     	;# 
   846  0011                     	;# 
   847  0012                     	;# 
   848  0015                     	;# 
   849  0016                     	;# 
   850  0016                     	;# 
   851  0017                     	;# 
   852  0018                     	;# 
   853  0019                     	;# 
   854  001A                     	;# 
   855  001B                     	;# 
   856  001C                     	;# 
   857  008C                     	;# 
   858  008D                     	;# 
   859  008E                     	;# 
   860  0090                     	;# 
   861  0091                     	;# 
   862  0092                     	;# 
   863  0095                     	;# 
   864  0096                     	;# 
   865  0097                     	;# 
   866  0099                     	;# 
   867  009A                     	;# 
   868  009B                     	;# 
   869  009B                     	;# 
   870  009C                     	;# 
   871  009D                     	;# 
   872  009E                     	;# 
   873  010C                     	;# 
   874  010D                     	;# 
   875  010E                     	;# 
   876  0116                     	;# 
   877  0117                     	;# 
   878  011D                     	;# 
   879  018C                     	;# 
   880  018D                     	;# 
   881  018E                     	;# 
   882  0191                     	;# 
   883  0191                     	;# 
   884  0192                     	;# 
   885  0193                     	;# 
   886  0193                     	;# 
   887  0194                     	;# 
   888  0195                     	;# 
   889  0196                     	;# 
   890  0197                     	;# 
   891  0199                     	;# 
   892  019A                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019C                     	;# 
   898  019C                     	;# 
   899  019D                     	;# 
   900  019E                     	;# 
   901  019F                     	;# 
   902  020D                     	;# 
   903  0210                     	;# 
   904  0211                     	;# 
   905  0211                     	;# 
   906  0212                     	;# 
   907  0212                     	;# 
   908  0213                     	;# 
   909  0213                     	;# 
   910  0214                     	;# 
   911  0214                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0216                     	;# 
   916  0216                     	;# 
   917  0217                     	;# 
   918  0217                     	;# 
   919  0291                     	;# 
   920  0291                     	;# 
   921  0292                     	;# 
   922  0293                     	;# 
   923  0298                     	;# 
   924  0298                     	;# 
   925  0299                     	;# 
   926  029A                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0FE4                     	;# 
   931  0FE5                     	;# 
   932  0FE6                     	;# 
   933  0FE7                     	;# 
   934  0FE8                     	;# 
   935  0FE9                     	;# 
   936  0FEA                     	;# 
   937  0FEB                     	;# 
   938  0FED                     	;# 
   939  0FEE                     	;# 
   940  0FEF                     	;# 
   941  0000                     	;# 
   942  0001                     	;# 
   943  0002                     	;# 
   944  0003                     	;# 
   945  0004                     	;# 
   946  0005                     	;# 
   947  0006                     	;# 
   948  0007                     	;# 
   949  0008                     	;# 
   950  0009                     	;# 
   951  000A                     	;# 
   952  000B                     	;# 
   953  000C                     	;# 
   954  000D                     	;# 
   955  000E                     	;# 
   956  0010                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0015                     	;# 
   960  0016                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001C                     	;# 
   968  008C                     	;# 
   969  008D                     	;# 
   970  008E                     	;# 
   971  0090                     	;# 
   972  0091                     	;# 
   973  0092                     	;# 
   974  0095                     	;# 
   975  0096                     	;# 
   976  0097                     	;# 
   977  0099                     	;# 
   978  009A                     	;# 
   979  009B                     	;# 
   980  009B                     	;# 
   981  009C                     	;# 
   982  009D                     	;# 
   983  009E                     	;# 
   984  010C                     	;# 
   985  010D                     	;# 
   986  010E                     	;# 
   987  0116                     	;# 
   988  0117                     	;# 
   989  011D                     	;# 
   990  018C                     	;# 
   991  018D                     	;# 
   992  018E                     	;# 
   993  0191                     	;# 
   994  0191                     	;# 
   995  0192                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0197                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019C                     	;# 
  1009  019C                     	;# 
  1010  019D                     	;# 
  1011  019E                     	;# 
  1012  019F                     	;# 
  1013  020D                     	;# 
  1014  0210                     	;# 
  1015  0211                     	;# 
  1016  0211                     	;# 
  1017  0212                     	;# 
  1018  0212                     	;# 
  1019  0213                     	;# 
  1020  0213                     	;# 
  1021  0214                     	;# 
  1022  0214                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0216                     	;# 
  1027  0216                     	;# 
  1028  0217                     	;# 
  1029  0217                     	;# 
  1030  0291                     	;# 
  1031  0291                     	;# 
  1032  0292                     	;# 
  1033  0293                     	;# 
  1034  0298                     	;# 
  1035  0298                     	;# 
  1036  0299                     	;# 
  1037  029A                     	;# 
  1038  0394                     	;# 
  1039  0395                     	;# 
  1040  0396                     	;# 
  1041  0FE4                     	;# 
  1042  0FE5                     	;# 
  1043  0FE6                     	;# 
  1044  0FE7                     	;# 
  1045  0FE8                     	;# 
  1046  0FE9                     	;# 
  1047  0FEA                     	;# 
  1048  0FEB                     	;# 
  1049  0FED                     	;# 
  1050  0FEE                     	;# 
  1051  0FEF                     	;# 
  1052  0000                     	;# 
  1053  0001                     	;# 
  1054  0002                     	;# 
  1055  0003                     	;# 
  1056  0004                     	;# 
  1057  0005                     	;# 
  1058  0006                     	;# 
  1059  0007                     	;# 
  1060  0008                     	;# 
  1061  0009                     	;# 
  1062  000A                     	;# 
  1063  000B                     	;# 
  1064  000C                     	;# 
  1065  000D                     	;# 
  1066  000E                     	;# 
  1067  0010                     	;# 
  1068  0011                     	;# 
  1069  0012                     	;# 
  1070  0015                     	;# 
  1071  0016                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001C                     	;# 
  1079  008C                     	;# 
  1080  008D                     	;# 
  1081  008E                     	;# 
  1082  0090                     	;# 
  1083  0091                     	;# 
  1084  0092                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0097                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  010C                     	;# 
  1096  010D                     	;# 
  1097  010E                     	;# 
  1098  0116                     	;# 
  1099  0117                     	;# 
  1100  011D                     	;# 
  1101  018C                     	;# 
  1102  018D                     	;# 
  1103  018E                     	;# 
  1104  0191                     	;# 
  1105  0191                     	;# 
  1106  0192                     	;# 
  1107  0193                     	;# 
  1108  0193                     	;# 
  1109  0194                     	;# 
  1110  0195                     	;# 
  1111  0196                     	;# 
  1112  0197                     	;# 
  1113  0199                     	;# 
  1114  019A                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019C                     	;# 
  1120  019C                     	;# 
  1121  019D                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  020D                     	;# 
  1125  0210                     	;# 
  1126  0211                     	;# 
  1127  0211                     	;# 
  1128  0212                     	;# 
  1129  0212                     	;# 
  1130  0213                     	;# 
  1131  0213                     	;# 
  1132  0214                     	;# 
  1133  0214                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0216                     	;# 
  1138  0216                     	;# 
  1139  0217                     	;# 
  1140  0217                     	;# 
  1141  0291                     	;# 
  1142  0291                     	;# 
  1143  0292                     	;# 
  1144  0293                     	;# 
  1145  0298                     	;# 
  1146  0298                     	;# 
  1147  0299                     	;# 
  1148  029A                     	;# 
  1149  0394                     	;# 
  1150  0395                     	;# 
  1151  0396                     	;# 
  1152  0FE4                     	;# 
  1153  0FE5                     	;# 
  1154  0FE6                     	;# 
  1155  0FE7                     	;# 
  1156  0FE8                     	;# 
  1157  0FE9                     	;# 
  1158  0FEA                     	;# 
  1159  0FEB                     	;# 
  1160  0FED                     	;# 
  1161  0FEE                     	;# 
  1162  0FEF                     	;# 
  1163  0000                     	;# 
  1164  0001                     	;# 
  1165  0002                     	;# 
  1166  0003                     	;# 
  1167  0004                     	;# 
  1168  0005                     	;# 
  1169  0006                     	;# 
  1170  0007                     	;# 
  1171  0008                     	;# 
  1172  0009                     	;# 
  1173  000A                     	;# 
  1174  000B                     	;# 
  1175  000C                     	;# 
  1176  000D                     	;# 
  1177  000E                     	;# 
  1178  0010                     	;# 
  1179  0011                     	;# 
  1180  0012                     	;# 
  1181  0015                     	;# 
  1182  0016                     	;# 
  1183  0016                     	;# 
  1184  0017                     	;# 
  1185  0018                     	;# 
  1186  0019                     	;# 
  1187  001A                     	;# 
  1188  001B                     	;# 
  1189  001C                     	;# 
  1190  008C                     	;# 
  1191  008D                     	;# 
  1192  008E                     	;# 
  1193  0090                     	;# 
  1194  0091                     	;# 
  1195  0092                     	;# 
  1196  0095                     	;# 
  1197  0096                     	;# 
  1198  0097                     	;# 
  1199  0099                     	;# 
  1200  009A                     	;# 
  1201  009B                     	;# 
  1202  009B                     	;# 
  1203  009C                     	;# 
  1204  009D                     	;# 
  1205  009E                     	;# 
  1206  010C                     	;# 
  1207  010D                     	;# 
  1208  010E                     	;# 
  1209  0116                     	;# 
  1210  0117                     	;# 
  1211  011D                     	;# 
  1212  018C                     	;# 
  1213  018D                     	;# 
  1214  018E                     	;# 
  1215  0191                     	;# 
  1216  0191                     	;# 
  1217  0192                     	;# 
  1218  0193                     	;# 
  1219  0193                     	;# 
  1220  0194                     	;# 
  1221  0195                     	;# 
  1222  0196                     	;# 
  1223  0197                     	;# 
  1224  0199                     	;# 
  1225  019A                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019C                     	;# 
  1231  019C                     	;# 
  1232  019D                     	;# 
  1233  019E                     	;# 
  1234  019F                     	;# 
  1235  020D                     	;# 
  1236  0210                     	;# 
  1237  0211                     	;# 
  1238  0211                     	;# 
  1239  0212                     	;# 
  1240  0212                     	;# 
  1241  0213                     	;# 
  1242  0213                     	;# 
  1243  0214                     	;# 
  1244  0214                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0216                     	;# 
  1249  0216                     	;# 
  1250  0217                     	;# 
  1251  0217                     	;# 
  1252  0291                     	;# 
  1253  0291                     	;# 
  1254  0292                     	;# 
  1255  0293                     	;# 
  1256  0298                     	;# 
  1257  0298                     	;# 
  1258  0299                     	;# 
  1259  029A                     	;# 
  1260  0394                     	;# 
  1261  0395                     	;# 
  1262  0396                     	;# 
  1263  0FE4                     	;# 
  1264  0FE5                     	;# 
  1265  0FE6                     	;# 
  1266  0FE7                     	;# 
  1267  0FE8                     	;# 
  1268  0FE9                     	;# 
  1269  0FEA                     	;# 
  1270  0FEB                     	;# 
  1271  0FED                     	;# 
  1272  0FEE                     	;# 
  1273  0FEF                     	;# 
  1274  0000                     	;# 
  1275  0001                     	;# 
  1276  0002                     	;# 
  1277  0003                     	;# 
  1278  0004                     	;# 
  1279  0005                     	;# 
  1280  0006                     	;# 
  1281  0007                     	;# 
  1282  0008                     	;# 
  1283  0009                     	;# 
  1284  000A                     	;# 
  1285  000B                     	;# 
  1286  000C                     	;# 
  1287  000D                     	;# 
  1288  000E                     	;# 
  1289  0010                     	;# 
  1290  0011                     	;# 
  1291  0012                     	;# 
  1292  0015                     	;# 
  1293  0016                     	;# 
  1294  0016                     	;# 
  1295  0017                     	;# 
  1296  0018                     	;# 
  1297  0019                     	;# 
  1298  001A                     	;# 
  1299  001B                     	;# 
  1300  001C                     	;# 
  1301  008C                     	;# 
  1302  008D                     	;# 
  1303  008E                     	;# 
  1304  0090                     	;# 
  1305  0091                     	;# 
  1306  0092                     	;# 
  1307  0095                     	;# 
  1308  0096                     	;# 
  1309  0097                     	;# 
  1310  0099                     	;# 
  1311  009A                     	;# 
  1312  009B                     	;# 
  1313  009B                     	;# 
  1314  009C                     	;# 
  1315  009D                     	;# 
  1316  009E                     	;# 
  1317  010C                     	;# 
  1318  010D                     	;# 
  1319  010E                     	;# 
  1320  0116                     	;# 
  1321  0117                     	;# 
  1322  011D                     	;# 
  1323  018C                     	;# 
  1324  018D                     	;# 
  1325  018E                     	;# 
  1326  0191                     	;# 
  1327  0191                     	;# 
  1328  0192                     	;# 
  1329  0193                     	;# 
  1330  0193                     	;# 
  1331  0194                     	;# 
  1332  0195                     	;# 
  1333  0196                     	;# 
  1334  0197                     	;# 
  1335  0199                     	;# 
  1336  019A                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019C                     	;# 
  1342  019C                     	;# 
  1343  019D                     	;# 
  1344  019E                     	;# 
  1345  019F                     	;# 
  1346  020D                     	;# 
  1347  0210                     	;# 
  1348  0211                     	;# 
  1349  0211                     	;# 
  1350  0212                     	;# 
  1351  0212                     	;# 
  1352  0213                     	;# 
  1353  0213                     	;# 
  1354  0214                     	;# 
  1355  0214                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0216                     	;# 
  1360  0216                     	;# 
  1361  0217                     	;# 
  1362  0217                     	;# 
  1363  0291                     	;# 
  1364  0291                     	;# 
  1365  0292                     	;# 
  1366  0293                     	;# 
  1367  0298                     	;# 
  1368  0298                     	;# 
  1369  0299                     	;# 
  1370  029A                     	;# 
  1371  0394                     	;# 
  1372  0395                     	;# 
  1373  0396                     	;# 
  1374  0FE4                     	;# 
  1375  0FE5                     	;# 
  1376  0FE6                     	;# 
  1377  0FE7                     	;# 
  1378  0FE8                     	;# 
  1379  0FE9                     	;# 
  1380  0FEA                     	;# 
  1381  0FEB                     	;# 
  1382  0FED                     	;# 
  1383  0FEE                     	;# 
  1384  0FEF                     	;# 
  1385  0000                     	;# 
  1386  0001                     	;# 
  1387  0002                     	;# 
  1388  0003                     	;# 
  1389  0004                     	;# 
  1390  0005                     	;# 
  1391  0006                     	;# 
  1392  0007                     	;# 
  1393  0008                     	;# 
  1394  0009                     	;# 
  1395  000A                     	;# 
  1396  000B                     	;# 
  1397  000C                     	;# 
  1398  000D                     	;# 
  1399  000E                     	;# 
  1400  0010                     	;# 
  1401  0011                     	;# 
  1402  0012                     	;# 
  1403  0015                     	;# 
  1404  0016                     	;# 
  1405  0016                     	;# 
  1406  0017                     	;# 
  1407  0018                     	;# 
  1408  0019                     	;# 
  1409  001A                     	;# 
  1410  001B                     	;# 
  1411  001C                     	;# 
  1412  008C                     	;# 
  1413  008D                     	;# 
  1414  008E                     	;# 
  1415  0090                     	;# 
  1416  0091                     	;# 
  1417  0092                     	;# 
  1418  0095                     	;# 
  1419  0096                     	;# 
  1420  0097                     	;# 
  1421  0099                     	;# 
  1422  009A                     	;# 
  1423  009B                     	;# 
  1424  009B                     	;# 
  1425  009C                     	;# 
  1426  009D                     	;# 
  1427  009E                     	;# 
  1428  010C                     	;# 
  1429  010D                     	;# 
  1430  010E                     	;# 
  1431  0116                     	;# 
  1432  0117                     	;# 
  1433  011D                     	;# 
  1434  018C                     	;# 
  1435  018D                     	;# 
  1436  018E                     	;# 
  1437  0191                     	;# 
  1438  0191                     	;# 
  1439  0192                     	;# 
  1440  0193                     	;# 
  1441  0193                     	;# 
  1442  0194                     	;# 
  1443  0195                     	;# 
  1444  0196                     	;# 
  1445  0197                     	;# 
  1446  0199                     	;# 
  1447  019A                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019C                     	;# 
  1453  019C                     	;# 
  1454  019D                     	;# 
  1455  019E                     	;# 
  1456  019F                     	;# 
  1457  020D                     	;# 
  1458  0210                     	;# 
  1459  0211                     	;# 
  1460  0211                     	;# 
  1461  0212                     	;# 
  1462  0212                     	;# 
  1463  0213                     	;# 
  1464  0213                     	;# 
  1465  0214                     	;# 
  1466  0214                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0216                     	;# 
  1471  0216                     	;# 
  1472  0217                     	;# 
  1473  0217                     	;# 
  1474  0291                     	;# 
  1475  0291                     	;# 
  1476  0292                     	;# 
  1477  0293                     	;# 
  1478  0298                     	;# 
  1479  0298                     	;# 
  1480  0299                     	;# 
  1481  029A                     	;# 
  1482  0394                     	;# 
  1483  0395                     	;# 
  1484  0396                     	;# 
  1485  0FE4                     	;# 
  1486  0FE5                     	;# 
  1487  0FE6                     	;# 
  1488  0FE7                     	;# 
  1489  0FE8                     	;# 
  1490  0FE9                     	;# 
  1491  0FEA                     	;# 
  1492  0FEB                     	;# 
  1493  0FED                     	;# 
  1494  0FEE                     	;# 
  1495  0FEF                     	;# 
  1496  0000                     	;# 
  1497  0001                     	;# 
  1498  0002                     	;# 
  1499  0003                     	;# 
  1500  0004                     	;# 
  1501  0005                     	;# 
  1502  0006                     	;# 
  1503  0007                     	;# 
  1504  0008                     	;# 
  1505  0009                     	;# 
  1506  000A                     	;# 
  1507  000B                     	;# 
  1508  000C                     	;# 
  1509  000D                     	;# 
  1510  000E                     	;# 
  1511  0010                     	;# 
  1512  0011                     	;# 
  1513  0012                     	;# 
  1514  0015                     	;# 
  1515  0016                     	;# 
  1516  0016                     	;# 
  1517  0017                     	;# 
  1518  0018                     	;# 
  1519  0019                     	;# 
  1520  001A                     	;# 
  1521  001B                     	;# 
  1522  001C                     	;# 
  1523  008C                     	;# 
  1524  008D                     	;# 
  1525  008E                     	;# 
  1526  0090                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0095                     	;# 
  1530  0096                     	;# 
  1531  0097                     	;# 
  1532  0099                     	;# 
  1533  009A                     	;# 
  1534  009B                     	;# 
  1535  009B                     	;# 
  1536  009C                     	;# 
  1537  009D                     	;# 
  1538  009E                     	;# 
  1539  010C                     	;# 
  1540  010D                     	;# 
  1541  010E                     	;# 
  1542  0116                     	;# 
  1543  0117                     	;# 
  1544  011D                     	;# 
  1545  018C                     	;# 
  1546  018D                     	;# 
  1547  018E                     	;# 
  1548  0191                     	;# 
  1549  0191                     	;# 
  1550  0192                     	;# 
  1551  0193                     	;# 
  1552  0193                     	;# 
  1553  0194                     	;# 
  1554  0195                     	;# 
  1555  0196                     	;# 
  1556  0197                     	;# 
  1557  0199                     	;# 
  1558  019A                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  020D                     	;# 
  1569  0210                     	;# 
  1570  0211                     	;# 
  1571  0211                     	;# 
  1572  0212                     	;# 
  1573  0212                     	;# 
  1574  0213                     	;# 
  1575  0213                     	;# 
  1576  0214                     	;# 
  1577  0214                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0216                     	;# 
  1582  0216                     	;# 
  1583  0217                     	;# 
  1584  0217                     	;# 
  1585  0291                     	;# 
  1586  0291                     	;# 
  1587  0292                     	;# 
  1588  0293                     	;# 
  1589  0298                     	;# 
  1590  0298                     	;# 
  1591  0299                     	;# 
  1592  029A                     	;# 
  1593  0394                     	;# 
  1594  0395                     	;# 
  1595  0396                     	;# 
  1596  0FE4                     	;# 
  1597  0FE5                     	;# 
  1598  0FE6                     	;# 
  1599  0FE7                     	;# 
  1600  0FE8                     	;# 
  1601  0FE9                     	;# 
  1602  0FEA                     	;# 
  1603  0FEB                     	;# 
  1604  0FED                     	;# 
  1605  0FEE                     	;# 
  1606  0FEF                     	;# 
  1607  0000                     	;# 
  1608  0001                     	;# 
  1609  0002                     	;# 
  1610  0003                     	;# 
  1611  0004                     	;# 
  1612  0005                     	;# 
  1613  0006                     	;# 
  1614  0007                     	;# 
  1615  0008                     	;# 
  1616  0009                     	;# 
  1617  000A                     	;# 
  1618  000B                     	;# 
  1619  000C                     	;# 
  1620  000D                     	;# 
  1621  000E                     	;# 
  1622  0010                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0015                     	;# 
  1626  0016                     	;# 
  1627  0016                     	;# 
  1628  0017                     	;# 
  1629  0018                     	;# 
  1630  0019                     	;# 
  1631  001A                     	;# 
  1632  001B                     	;# 
  1633  001C                     	;# 
  1634  008C                     	;# 
  1635  008D                     	;# 
  1636  008E                     	;# 
  1637  0090                     	;# 
  1638  0091                     	;# 
  1639  0092                     	;# 
  1640  0095                     	;# 
  1641  0096                     	;# 
  1642  0097                     	;# 
  1643  0099                     	;# 
  1644  009A                     	;# 
  1645  009B                     	;# 
  1646  009B                     	;# 
  1647  009C                     	;# 
  1648  009D                     	;# 
  1649  009E                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  0116                     	;# 
  1654  0117                     	;# 
  1655  011D                     	;# 
  1656  018C                     	;# 
  1657  018D                     	;# 
  1658  018E                     	;# 
  1659  0191                     	;# 
  1660  0191                     	;# 
  1661  0192                     	;# 
  1662  0193                     	;# 
  1663  0193                     	;# 
  1664  0194                     	;# 
  1665  0195                     	;# 
  1666  0196                     	;# 
  1667  0197                     	;# 
  1668  0199                     	;# 
  1669  019A                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019C                     	;# 
  1675  019C                     	;# 
  1676  019D                     	;# 
  1677  019E                     	;# 
  1678  019F                     	;# 
  1679  020D                     	;# 
  1680  0210                     	;# 
  1681  0211                     	;# 
  1682  0211                     	;# 
  1683  0212                     	;# 
  1684  0212                     	;# 
  1685  0213                     	;# 
  1686  0213                     	;# 
  1687  0214                     	;# 
  1688  0214                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0216                     	;# 
  1693  0216                     	;# 
  1694  0217                     	;# 
  1695  0217                     	;# 
  1696  0291                     	;# 
  1697  0291                     	;# 
  1698  0292                     	;# 
  1699  0293                     	;# 
  1700  0298                     	;# 
  1701  0298                     	;# 
  1702  0299                     	;# 
  1703  029A                     	;# 
  1704  0394                     	;# 
  1705  0395                     	;# 
  1706  0396                     	;# 
  1707  0FE4                     	;# 
  1708  0FE5                     	;# 
  1709  0FE6                     	;# 
  1710  0FE7                     	;# 
  1711  0FE8                     	;# 
  1712  0FE9                     	;# 
  1713  0FEA                     	;# 
  1714  0FEB                     	;# 
  1715  0FED                     	;# 
  1716  0FEE                     	;# 
  1717  0FEF                     	;# 
  1718  0000                     	;# 
  1719  0001                     	;# 
  1720  0002                     	;# 
  1721  0003                     	;# 
  1722  0004                     	;# 
  1723  0005                     	;# 
  1724  0006                     	;# 
  1725  0007                     	;# 
  1726  0008                     	;# 
  1727  0009                     	;# 
  1728  000A                     	;# 
  1729  000B                     	;# 
  1730  000C                     	;# 
  1731  000D                     	;# 
  1732  000E                     	;# 
  1733  0010                     	;# 
  1734  0011                     	;# 
  1735  0012                     	;# 
  1736  0015                     	;# 
  1737  0016                     	;# 
  1738  0016                     	;# 
  1739  0017                     	;# 
  1740  0018                     	;# 
  1741  0019                     	;# 
  1742  001A                     	;# 
  1743  001B                     	;# 
  1744  001C                     	;# 
  1745  008C                     	;# 
  1746  008D                     	;# 
  1747  008E                     	;# 
  1748  0090                     	;# 
  1749  0091                     	;# 
  1750  0092                     	;# 
  1751  0095                     	;# 
  1752  0096                     	;# 
  1753  0097                     	;# 
  1754  0099                     	;# 
  1755  009A                     	;# 
  1756  009B                     	;# 
  1757  009B                     	;# 
  1758  009C                     	;# 
  1759  009D                     	;# 
  1760  009E                     	;# 
  1761  010C                     	;# 
  1762  010D                     	;# 
  1763  010E                     	;# 
  1764  0116                     	;# 
  1765  0117                     	;# 
  1766  011D                     	;# 
  1767  018C                     	;# 
  1768  018D                     	;# 
  1769  018E                     	;# 
  1770  0191                     	;# 
  1771  0191                     	;# 
  1772  0192                     	;# 
  1773  0193                     	;# 
  1774  0193                     	;# 
  1775  0194                     	;# 
  1776  0195                     	;# 
  1777  0196                     	;# 
  1778  0197                     	;# 
  1779  0199                     	;# 
  1780  019A                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019C                     	;# 
  1786  019C                     	;# 
  1787  019D                     	;# 
  1788  019E                     	;# 
  1789  019F                     	;# 
  1790  020D                     	;# 
  1791  0210                     	;# 
  1792  0211                     	;# 
  1793  0211                     	;# 
  1794  0212                     	;# 
  1795  0212                     	;# 
  1796  0213                     	;# 
  1797  0213                     	;# 
  1798  0214                     	;# 
  1799  0214                     	;# 
  1800  0215                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0216                     	;# 
  1804  0216                     	;# 
  1805  0217                     	;# 
  1806  0217                     	;# 
  1807  0291                     	;# 
  1808  0291                     	;# 
  1809  0292                     	;# 
  1810  0293                     	;# 
  1811  0298                     	;# 
  1812  0298                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  0394                     	;# 
  1816  0395                     	;# 
  1817  0396                     	;# 
  1818  0FE4                     	;# 
  1819  0FE5                     	;# 
  1820  0FE6                     	;# 
  1821  0FE7                     	;# 
  1822  0FE8                     	;# 
  1823  0FE9                     	;# 
  1824  0FEA                     	;# 
  1825  0FEB                     	;# 
  1826  0FED                     	;# 
  1827  0FEE                     	;# 
  1828  0FEF                     	;# 
  1829  0000                     	;# 
  1830  0001                     	;# 
  1831  0002                     	;# 
  1832  0003                     	;# 
  1833  0004                     	;# 
  1834  0005                     	;# 
  1835  0006                     	;# 
  1836  0007                     	;# 
  1837  0008                     	;# 
  1838  0009                     	;# 
  1839  000A                     	;# 
  1840  000B                     	;# 
  1841  000C                     	;# 
  1842  000D                     	;# 
  1843  000E                     	;# 
  1844  0010                     	;# 
  1845  0011                     	;# 
  1846  0012                     	;# 
  1847  0015                     	;# 
  1848  0016                     	;# 
  1849  0016                     	;# 
  1850  0017                     	;# 
  1851  0018                     	;# 
  1852  0019                     	;# 
  1853  001A                     	;# 
  1854  001B                     	;# 
  1855  001C                     	;# 
  1856  008C                     	;# 
  1857  008D                     	;# 
  1858  008E                     	;# 
  1859  0090                     	;# 
  1860  0091                     	;# 
  1861  0092                     	;# 
  1862  0095                     	;# 
  1863  0096                     	;# 
  1864  0097                     	;# 
  1865  0099                     	;# 
  1866  009A                     	;# 
  1867  009B                     	;# 
  1868  009B                     	;# 
  1869  009C                     	;# 
  1870  009D                     	;# 
  1871  009E                     	;# 
  1872  010C                     	;# 
  1873  010D                     	;# 
  1874  010E                     	;# 
  1875  0116                     	;# 
  1876  0117                     	;# 
  1877  011D                     	;# 
  1878  018C                     	;# 
  1879  018D                     	;# 
  1880  018E                     	;# 
  1881  0191                     	;# 
  1882  0191                     	;# 
  1883  0192                     	;# 
  1884  0193                     	;# 
  1885  0193                     	;# 
  1886  0194                     	;# 
  1887  0195                     	;# 
  1888  0196                     	;# 
  1889  0197                     	;# 
  1890  0199                     	;# 
  1891  019A                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019C                     	;# 
  1897  019C                     	;# 
  1898  019D                     	;# 
  1899  019E                     	;# 
  1900  019F                     	;# 
  1901  020D                     	;# 
  1902  0210                     	;# 
  1903  0211                     	;# 
  1904  0211                     	;# 
  1905  0212                     	;# 
  1906  0212                     	;# 
  1907  0213                     	;# 
  1908  0213                     	;# 
  1909  0214                     	;# 
  1910  0214                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0216                     	;# 
  1915  0216                     	;# 
  1916  0217                     	;# 
  1917  0217                     	;# 
  1918  0291                     	;# 
  1919  0291                     	;# 
  1920  0292                     	;# 
  1921  0293                     	;# 
  1922  0298                     	;# 
  1923  0298                     	;# 
  1924  0299                     	;# 
  1925  029A                     	;# 
  1926  0394                     	;# 
  1927  0395                     	;# 
  1928  0396                     	;# 
  1929  0FE4                     	;# 
  1930  0FE5                     	;# 
  1931  0FE6                     	;# 
  1932  0FE7                     	;# 
  1933  0FE8                     	;# 
  1934  0FE9                     	;# 
  1935  0FEA                     	;# 
  1936  0FEB                     	;# 
  1937  0FED                     	;# 
  1938  0FEE                     	;# 
  1939  0FEF                     	;# 
  1940  0000                     	;# 
  1941  0001                     	;# 
  1942  0002                     	;# 
  1943  0003                     	;# 
  1944  0004                     	;# 
  1945  0005                     	;# 
  1946  0006                     	;# 
  1947  0007                     	;# 
  1948  0008                     	;# 
  1949  0009                     	;# 
  1950  000A                     	;# 
  1951  000B                     	;# 
  1952  000C                     	;# 
  1953  000D                     	;# 
  1954  000E                     	;# 
  1955  0010                     	;# 
  1956  0011                     	;# 
  1957  0012                     	;# 
  1958  0015                     	;# 
  1959  0016                     	;# 
  1960  0016                     	;# 
  1961  0017                     	;# 
  1962  0018                     	;# 
  1963  0019                     	;# 
  1964  001A                     	;# 
  1965  001B                     	;# 
  1966  001C                     	;# 
  1967  008C                     	;# 
  1968  008D                     	;# 
  1969  008E                     	;# 
  1970  0090                     	;# 
  1971  0091                     	;# 
  1972  0092                     	;# 
  1973  0095                     	;# 
  1974  0096                     	;# 
  1975  0097                     	;# 
  1976  0099                     	;# 
  1977  009A                     	;# 
  1978  009B                     	;# 
  1979  009B                     	;# 
  1980  009C                     	;# 
  1981  009D                     	;# 
  1982  009E                     	;# 
  1983  010C                     	;# 
  1984  010D                     	;# 
  1985  010E                     	;# 
  1986  0116                     	;# 
  1987  0117                     	;# 
  1988  011D                     	;# 
  1989  018C                     	;# 
  1990  018D                     	;# 
  1991  018E                     	;# 
  1992  0191                     	;# 
  1993  0191                     	;# 
  1994  0192                     	;# 
  1995  0193                     	;# 
  1996  0193                     	;# 
  1997  0194                     	;# 
  1998  0195                     	;# 
  1999  0196                     	;# 
  2000  0197                     	;# 
  2001  0199                     	;# 
  2002  019A                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019C                     	;# 
  2008  019C                     	;# 
  2009  019D                     	;# 
  2010  019E                     	;# 
  2011  019F                     	;# 
  2012  020D                     	;# 
  2013  0210                     	;# 
  2014  0211                     	;# 
  2015  0211                     	;# 
  2016  0212                     	;# 
  2017  0212                     	;# 
  2018  0213                     	;# 
  2019  0213                     	;# 
  2020  0214                     	;# 
  2021  0214                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0216                     	;# 
  2026  0216                     	;# 
  2027  0217                     	;# 
  2028  0217                     	;# 
  2029  0291                     	;# 
  2030  0291                     	;# 
  2031  0292                     	;# 
  2032  0293                     	;# 
  2033  0298                     	;# 
  2034  0298                     	;# 
  2035  0299                     	;# 
  2036  029A                     	;# 
  2037  0394                     	;# 
  2038  0395                     	;# 
  2039  0396                     	;# 
  2040  0FE4                     	;# 
  2041  0FE5                     	;# 
  2042  0FE6                     	;# 
  2043  0FE7                     	;# 
  2044  0FE8                     	;# 
  2045  0FE9                     	;# 
  2046  0FEA                     	;# 
  2047  0FEB                     	;# 
  2048  0FED                     	;# 
  2049  0FEE                     	;# 
  2050  0FEF                     	;# 
  2051                           
  2052                           	psect	idataBANK4
  2053  1E59                     __pidataBANK4:	
  2054                           
  2055                           ;initializer for __product
  2056  1E59  3463               	retlw	99
  2057  1E5A  3402               	retlw	2
  2058  1E5B  3400               	retlw	0
  2059  1E5C  3400               	retlw	0
  2060  1E5D  3400               	retlw	0
  2061  1E5E  3400               	retlw	0
  2062  1E5F  3400               	retlw	0
  2063  1E60  3400               	retlw	0
  2064  1E61  3400               	retlw	0
  2065  1E62  3400               	retlw	0
  2066  1E63  3400               	retlw	0
  2067  1E64  3400               	retlw	0
  2068  1E65  34FF               	retlw	255
  2069  1E66  34FF               	retlw	255
  2070  1E67  34FF               	retlw	255
  2071  1E68  3400               	retlw	0
  2072  1E69  3400               	retlw	0
  2073  1E6A  3400               	retlw	0
  2074  1E6B  3400               	retlw	0
  2075  1E6C  3400               	retlw	0
  2076  1E6D  3400               	retlw	0
  2077  1E6E  3400               	retlw	0
  2078  1E6F  3400               	retlw	0
  2079  1E70  3400               	retlw	0
  2080  1E71  3400               	retlw	0
  2081  1E72  3400               	retlw	0
  2082  1E73  3400               	retlw	0
  2083  1E74  3400               	retlw	0
  2084  1E75  3400               	retlw	0
  2085  1E76  3400               	retlw	0
  2086  1E77  3400               	retlw	0
  2087  1E78  3400               	retlw	0
  2088                           
  2089                           	psect	stringtext
  2090  1000                     __pstringtext:	
  2091  1000                     _CC2500_registers_address:	
  2092  1000  3403               	retlw	3
  2093  1001  3416               	retlw	22
  2094  1002  3417               	retlw	23
  2095  1003  341E               	retlw	30
  2096  1004  341F               	retlw	31
  2097  1005  3420               	retlw	32
  2098  1006  342A               	retlw	42
  2099  1007  342B               	retlw	43
  2100  1008  340B               	retlw	11
  2101  1009  340C               	retlw	12
  2102  100A  340D               	retlw	13
  2103  100B  340E               	retlw	14
  2104  100C  340F               	retlw	15
  2105  100D  3410               	retlw	16
  2106  100E  3411               	retlw	17
  2107  100F  3412               	retlw	18
  2108  1010  3413               	retlw	19
  2109  1011  3414               	retlw	20
  2110  1012  340A               	retlw	10
  2111  1013  3415               	retlw	21
  2112  1014  3421               	retlw	33
  2113  1015  3422               	retlw	34
  2114  1016  3418               	retlw	24
  2115  1017  3419               	retlw	25
  2116  1018  341A               	retlw	26
  2117  1019  341B               	retlw	27
  2118  101A  341C               	retlw	28
  2119  101B  341D               	retlw	29
  2120  101C  3423               	retlw	35
  2121  101D  3424               	retlw	36
  2122  101E  3425               	retlw	37
  2123  101F  3426               	retlw	38
  2124  1020  3429               	retlw	41
  2125  1021  342C               	retlw	44
  2126  1022  342D               	retlw	45
  2127  1023  342E               	retlw	46
  2128  1024  3400               	retlw	0
  2129  1025  3401               	retlw	1
  2130  1026  3402               	retlw	2
  2131  1027  3407               	retlw	7
  2132  1028  3408               	retlw	8
  2133  1029  3409               	retlw	9
  2134  102A  3406               	retlw	6
  2135  102B  3404               	retlw	4
  2136  102C  3405               	retlw	5
  2137  102D  3427               	retlw	39
  2138  102E  3428               	retlw	40
  2139  102F                     __end_of_CC2500_registers_address:	
  2140  102F                     _CC2500_rfSettings:	
  2141  102F  3407               	retlw	7
  2142  1030  3407               	retlw	7
  2143  1031  3430               	retlw	48
  2144  1032  3487               	retlw	135
  2145  1033  346B               	retlw	107
  2146  1034  34F8               	retlw	248
  2147  1035  347F               	retlw	127
  2148  1036  343F               	retlw	63
  2149  1037  3409               	retlw	9
  2150  1038  3400               	retlw	0
  2151  1039  345C               	retlw	92
  2152  103A  34A7               	retlw	167
  2153  103B  3462               	retlw	98
  2154  103C  3486               	retlw	134
  2155  103D  3483               	retlw	131
  2156  103E  3403               	retlw	3
  2157  103F  3422               	retlw	34
  2158  1040  34F8               	retlw	248
  2159  1041  3400               	retlw	0
  2160  1042  3444               	retlw	68
  2161  1043  34B6               	retlw	182
  2162  1044  3410               	retlw	16
  2163  1045  3418               	retlw	24
  2164  1046  341D               	retlw	29
  2165  1047  341C               	retlw	28
  2166  1048  34C7               	retlw	199
  2167  1049  3400               	retlw	0
  2168  104A  34B2               	retlw	178
  2169  104B  34EA               	retlw	234
  2170  104C  340A               	retlw	10
  2171  104D  3400               	retlw	0
  2172  104E  3411               	retlw	17
  2173  104F  3459               	retlw	89
  2174  1050  3488               	retlw	136
  2175  1051  3431               	retlw	49
  2176  1052  340B               	retlw	11
  2177  1053  342F               	retlw	47
  2178  1054  342E               	retlw	46
  2179  1055  3406               	retlw	6
  2180  1056  3404               	retlw	4
  2181  1057  3405               	retlw	5
  2182  1058  3400               	retlw	0
  2183  1059  3430               	retlw	48
  2184  105A  34D3               	retlw	211
  2185  105B  3491               	retlw	145
  2186  105C  3441               	retlw	65
  2187  105D  3400               	retlw	0
  2188  105E                     __end_of_CC2500_rfSettings:	
  2189  105E                     _CC2500_patable_vaule:	
  2190  105E  34FE               	retlw	254
  2191  105F  34FE               	retlw	254
  2192  1060  34FE               	retlw	254
  2193  1061  34FE               	retlw	254
  2194  1062  34FE               	retlw	254
  2195  1063  34FE               	retlw	254
  2196  1064  34FE               	retlw	254
  2197  1065  34FE               	retlw	254
  2198  1066                     __end_of_CC2500_patable_vaule:	
  2199                           
  2200                           	psect	nvBANK0
  2201  006D                     __pnvBANK0:	
  2202  006D                     _product:	
  2203  006D                     	ds	1
  2204  000C                     _PORTA	set	12
  2205  000D                     _PORTB	set	13
  2206  000E                     _PORTC	set	14
  2207  0018                     _T1CON	set	24
  2208  0017                     _TMR1H	set	23
  2209  0016                     _TMR1L	set	22
  2210  005F                     _GIE	set	95
  2211  005B                     _IOCIE	set	91
  2212  0058                     _IOCIF	set	88
  2213  005E                     _PEIE	set	94
  2214  0060                     _RA0	set	96
  2215  0063                     _RA3	set	99
  2216  0064                     _RA4	set	100
  2217  0066                     _RA6	set	102
  2218  0067                     _RA7	set	103
  2219  0068                     _RB0	set	104
  2220  0069                     _RB1	set	105
  2221  006A                     _RB2	set	106
  2222  006B                     _RB3	set	107
  2223  006C                     _RB4	set	108
  2224  006D                     _RB5	set	109
  2225  0070                     _RC0	set	112
  2226  0071                     _RC1	set	113
  2227  0072                     _RC2	set	114
  2228  0074                     _RC4	set	116
  2229  0075                     _RC5	set	117
  2230  0077                     _RC7	set	119
  2231  0088                     _TMR1IF	set	136
  2232  009D                     _ADCON0	set	157
  2233  009E                     _ADCON1	set	158
  2234  009C                     _ADRESH	set	156
  2235  009B                     _ADRESL	set	155
  2236  0099                     _OSCCON	set	153
  2237  008C                     _TRISA	set	140
  2238  008D                     _TRISB	set	141
  2239  008E                     _TRISC	set	142
  2240  0097                     _WDTCON	set	151
  2241  04E9                     _GO_nDONE	set	1257
  2242  0488                     _TMR1IE	set	1160
  2243  0117                     _FVRCON	set	279
  2244  010C                     _LATA	set	268
  2245  010D                     _LATB	set	269
  2246  010E                     _LATC	set	270
  2247  018C                     _ANSELA	set	396
  2248  018D                     _ANSELB	set	397
  2249  018E                     _ANSELC	set	398
  2250  0192                     _PMADRH	set	402
  2251  0191                     _PMADRL	set	401
  2252  0196                     _PMCON2	set	406
  2253  0194                     _PMDATH	set	404
  2254  0193                     _PMDATL	set	403
  2255  0CAE                     _CFGS	set	3246
  2256  0CAC                     _FREE	set	3244
  2257  0CAD                     _LWLO	set	3245
  2258  0CA8                     _RD	set	3240
  2259  0CA9                     _WR	set	3241
  2260  0CAA                     _WREN	set	3242
  2261  1069                     _WPUB1	set	4201
  2262  106A                     _WPUB2	set	4202
  2263  0396                     _IOCBF	set	918
  2264  0395                     _IOCBN	set	917
  2265  0394                     _IOCBP	set	916
  2266  1CB2                     _IOCBF2	set	7346
  2267                           
  2268                           ; #config settings
  2269  0000                     
  2270                           	psect	cinit
  2271  0015                     start_initialization:	
  2272  0015                     __initialization:	
  2273                           
  2274                           ; Clear objects allocated to BITCOMMON
  2275  0015  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2276                           
  2277                           ; Clear objects allocated to COMMON
  2278  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2279  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2280  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2281  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2282  001A  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2283                           
  2284                           ; Clear objects allocated to BANK0
  2285  001B  01EA               	clrf	__pbssBANK0& (0+127)
  2286  001C  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  2287  001D  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  2288                           
  2289                           ; Clear objects allocated to BANK1
  2290  001E  30A0               	movlw	low __pbssBANK1
  2291  001F  0084               	movwf	4
  2292  0020  3000               	movlw	high __pbssBANK1
  2293  0021  0085               	movwf	5
  2294  0022  304F               	movlw	79
  2295  0023  3199  21FB  3180   	fcall	clear_ram0
  2296                           
  2297                           ; Clear objects allocated to BANK2
  2298  0026  3020               	movlw	low __pbssBANK2
  2299  0027  0084               	movwf	4
  2300  0028  3001               	movlw	high __pbssBANK2
  2301  0029  0085               	movwf	5
  2302  002A  304C               	movlw	76
  2303  002B  3199  21FB  3180   	fcall	clear_ram0
  2304                           
  2305                           ; Clear objects allocated to BANK3
  2306  002E  30A0               	movlw	low __pbssBANK3
  2307  002F  0084               	movwf	4
  2308  0030  3001               	movlw	high __pbssBANK3
  2309  0031  0085               	movwf	5
  2310  0032  3045               	movlw	69
  2311  0033  3199  21FB  3180   	fcall	clear_ram0
  2312                           
  2313                           ; Clear objects allocated to BANK4
  2314  0036  3020               	movlw	low __pbssBANK4
  2315  0037  0084               	movwf	4
  2316  0038  3002               	movlw	high __pbssBANK4
  2317  0039  0085               	movwf	5
  2318  003A  3025               	movlw	37
  2319  003B  3199  21FB  3180   	fcall	clear_ram0
  2320                           
  2321                           ; Initialize objects allocated to BANK4
  2322  003E  3059               	movlw	low __pidataBANK4
  2323  003F  0084               	movwf	4
  2324  0040  309E               	movlw	(high __pidataBANK4)| (0+128)
  2325  0041  0085               	movwf	5
  2326  0042  3045               	movlw	low __pdataBANK4
  2327  0043  0086               	movwf	6
  2328  0044  3002               	movlw	high __pdataBANK4
  2329  0045  0087               	movwf	7
  2330  0046  3020               	movlw	32
  2331  0047  3199  21F5         	fcall	init_ram
  2332  0049                     end_of_initialization:	
  2333                           ;End of C runtime variable initialization code
  2334                           
  2335  0049                     __end_of__initialization:	
  2336  0049  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2337  004A  0020               	movlb	0
  2338  004B  3195  2D13         	ljmp	_main	;jump to C main() function
  2339                           
  2340                           	psect	bitbssCOMMON
  2341  03D8                     __pbitbssCOMMON:	
  2342  03D8                     _Receive_OK:	
  2343  03D8                     	ds	1
  2344  03D9                     _Transceive_OK:	
  2345  03D9                     	ds	1
  2346                           
  2347                           	psect	bssCOMMON
  2348  0076                     __pbssCOMMON:	
  2349  0076                     _Dimmer:	
  2350  0076                     	ds	1
  2351  0077                     _DimmerLightsIntr:	
  2352  0077                     	ds	1
  2353  0078                     _LED:	
  2354  0078                     	ds	1
  2355  0079                     _RFSW:	
  2356  0079                     	ds	1
  2357  007A                     _SPI0Buffer:	
  2358  007A                     	ds	1
  2359                           
  2360                           	psect	bssBANK0
  2361  006A                     __pbssBANK0:	
  2362  006A                     _DelayOff:	
  2363  006A                     	ds	1
  2364  006B                     _DimmerLights:	
  2365  006B                     	ds	1
  2366  006C                     _Sw:	
  2367  006C                     	ds	1
  2368                           
  2369                           	psect	bssBANK1
  2370  00A0                     __pbssBANK1:	
  2371  00A0                     _myMain:	
  2372  00A0                     	ds	16
  2373  00B0                     _Buz1:	
  2374  00B0                     	ds	12
  2375  00BC                     _RF1:	
  2376  00BC                     	ds	12
  2377  00C8                     _Timer1:	
  2378  00C8                     	ds	3
  2379  00CB                     _WDT:	
  2380  00CB                     	ds	2
  2381  00CD                     _CRC:	
  2382  00CD                     	ds	1
  2383  00CE                     _DimmerLights11:	
  2384  00CE                     	ds	1
  2385  00CF                     _DimmerLights22:	
  2386  00CF                     	ds	1
  2387  00D0                     _DimmerLightsIntrIOC:	
  2388  00D0                     	ds	1
  2389  00D1                     _RSSI:	
  2390  00D1                     	ds	1
  2391  00D2                     _Rx_Length:	
  2392  00D2                     	ds	1
  2393  00D3                     _Tx_Length:	
  2394  00D3                     	ds	1
  2395  00D4                     _r_address:	
  2396  00D4                     	ds	1
  2397  00D5                     _r_data:	
  2398  00D5                     	ds	1
  2399  00D6                     _s_data:	
  2400  00D6                     	ds	1
  2401  00D7                     _Temp:	
  2402  00D7                     	ds	18
  2403  00E9                     _DlySw1:	
  2404  00E9                     	ds	2
  2405  00EB                     _DlySw2:	
  2406  00EB                     	ds	2
  2407  00ED                     _RFSW1:	
  2408  00ED                     	ds	1
  2409  00EE                     _RFSW2:	
  2410  00EE                     	ds	1
  2411                           
  2412                           	psect	bssBANK2
  2413  0120                     __pbssBANK2:	
  2414  0120                     _RF_Count:	
  2415  0120                     	ds	2
  2416  0122                     _Load1:	
  2417  0122                     	ds	50
  2418  0154                     _Sw1:	
  2419  0154                     	ds	9
  2420  015D                     _VarErrLED:	
  2421  015D                     	ds	4
  2422  0161                     _VarLED1:	
  2423  0161                     	ds	4
  2424  0165                     _VarLED2:	
  2425  0165                     	ds	4
  2426  0169                     _Dimmer1:	
  2427  0169                     	ds	3
  2428                           
  2429                           	psect	bssBANK3
  2430  01A0                     __pbssBANK3:	
  2431  01A0                     _RF_Data:	
  2432  01A0                     	ds	30
  2433  01BE                     _DimmerLights1:	
  2434  01BE                     	ds	15
  2435  01CD                     _DimmerLights2:	
  2436  01CD                     	ds	15
  2437  01DC                     _Sw2:	
  2438  01DC                     	ds	9
  2439                           
  2440                           	psect	bssBANK4
  2441  0220                     __pbssBANK4:	
  2442  0220                     _Memory:	
  2443  0220                     	ds	37
  2444                           
  2445                           	psect	dataBANK4
  2446  0245                     __pdataBANK4:	
  2447  0245                     __product:	
  2448  0245                     	ds	32
  2449                           
  2450                           	psect	clrtext
  2451  19FB                     clear_ram0:	
  2452                           ;	Called with FSR0 containing the base address, and
  2453                           ;	WREG with the size to clear
  2454                           
  2455  19FB  0064               	clrwdt	;clear the watchdog before getting into this loop
  2456  19FC                     clrloop0:	
  2457  19FC  0180               	clrf	0	;clear RAM location pointed to by FSR
  2458  19FD  3101               	addfsr 0,1
  2459  19FE  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2460  19FF  29FC               	goto	clrloop0	;have we reached the end yet?
  2461  1A00  3400               	retlw	0	;all done for this memory range, return
  2462                           
  2463                           	psect	inittext
  2464  19F5                     init_ram:	
  2465  19F5  00FE               	movwf	126
  2466  19F6                     initloop:	
  2467  19F6  0012               	moviw fsr0++
  2468  19F7  001E               	movwi fsr1++
  2469  19F8  0BFE               	decfsz	126,f
  2470  19F9  29F6               	goto	initloop
  2471  19FA  3400               	retlw	0
  2472                           
  2473                           	psect	cstackBANK2
  2474  016C                     __pcstackBANK2:	
  2475  016C                     ?_main:	
  2476  016C                     main@argc:	
  2477                           ; 2 bytes @ 0x0
  2478                           
  2479                           
  2480                           ; 2 bytes @ 0x0
  2481  016C                     	ds	2
  2482  016E                     main@argv:	
  2483                           
  2484                           ; 2 bytes @ 0x2
  2485  016E                     	ds	2
  2486                           
  2487                           	psect	cstackCOMMON
  2488  0070                     __pcstackCOMMON:	
  2489  0070                     ?_Timeout_Counter:	
  2490  0070                     ?_set_TimeoutCleared:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_CC2500_WriteByte:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_CC2500_WriteCommand:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_CC2500_ReadStatus:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_CC2500_ReadByte:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_CC2500_PowerRST:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_CC2500_InitSetREG:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_CC2500_InitPATable:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_CC2500_ClearTXFIFO:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_CC2500_ClearRXFIFO:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_CC2500_FrequencyCabr:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_CC2500_SIDLEMode:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_DlyOff_Initialization:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_DlyOff_Main:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_setTxData:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_setDimmerLights_Initialization:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_Dimmer_Initialization:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_setLoad_GO:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_setMemory_GO:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_setDimmerLights_Main:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_setDimmerLights_ERROR:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_setLoad_Count:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_setLED_Initialization:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_setLED_Main:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_Fosc_Set:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_IO_Set:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_TMR1_Set:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_ADC_Set:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_IOC_Set:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_WDT_Set:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_IOC_ISR:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_TMR1_ISR:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_Flash_Memory_Write:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_Flash_Memory_Modify:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_WDT_Clearing:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_myMain_Initialization:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_Temp_Initialization:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_Load_Initialization:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_Switch_Initialization:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_RF_Initialization:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_getLoad_AD:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_getTemp_AD:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_my_MainTimer:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_Temp_Main:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_Load_Main:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_Switch_Main:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_RF_Main:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setTemp_Enable:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setLoad_Enable:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_setSw_Enable:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setRF_Enable:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setLoad_AH_AL_Restore:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setLoad_Exceptions:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setTemp_Initialization:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setTemp_Main:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setOverTemp_Exceptions:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setRF_Initialization:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_setRF_Main:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_getRxData:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setLog_Code:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setControl_Lights_Table:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_setRFSW_Control:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_setRFSW_AdjControl:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_setRF_DimmerValue:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setSw_Initialization:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_setSw_Main:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_Sw_DimmerOnFunc:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_Sw_DimmerAdjFunc:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_Sw_DimmerOffFunc:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_Buzzer_Initialization:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Buzzer_Main:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_CC2500_TxData:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_CC2500_RxData:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_CC2500_PowerOnInitial:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_DelayOffPointSelect:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_DelayOff_Initialization:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_DelayOff_Main:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_DimmerIntrIOCPointSelect:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ??_DimmerIntrIOCPointSelect:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_DimmerIntrPointSelect:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ??_DimmerIntrPointSelect:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_setDimmerLights_IntrControl:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_DimmerLightsPointSelect:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_DimmerLights_Initialization:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_DimmerLights_Close:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_DimmerLights_Main:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_DimmerLights_Exceptions:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setDimmerLights_AdjRF:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_LedPointSelect:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_LED_Initialization:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_LED_Main:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_Mcu_Initialization:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_ISR:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setDimmerReClock:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_Flash_Memory_Initialization:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_Flash_Memory_Main:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_Flash_Memory_Unlock:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_Flash_Memory_Erasing:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_WDT_Main:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_setRF_Learn:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_RfSWPointSelect:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_TouchPower:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_SwPointSelect:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?i1_setLoad_StatusOff:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_DelayTimejudge:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_getDimmerLights_StatusFlag:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ?_getPercentValue:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ?_Flash_Memory_Read:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0070                     ?_getTemp_Safe:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0070                     ?_setPercentValue:	
  2821                           ; 1 bytes @ 0x0
  2822                           
  2823  0070                     ?_getMain_AD_Safe:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826  0070                     i1setLoad_StatusOff@command:	
  2827                           ; 1 bytes @ 0x0
  2828                           
  2829                           
  2830                           ; 1 bytes @ 0x0
  2831  0070                     	ds	1
  2832  0071                     ??i1_setLoad_StatusOff:	
  2833  0071                     DimmerIntrIOCPointSelect@lights:	
  2834                           ; 0 bytes @ 0x1
  2835                           
  2836  0071                     DimmerIntrPointSelect@lights:	
  2837                           ; 1 bytes @ 0x1
  2838                           
  2839  0071                     i1setLoad_StatusOff@lights:	
  2840                           ; 1 bytes @ 0x1
  2841                           
  2842                           
  2843                           ; 1 bytes @ 0x1
  2844  0071                     	ds	1
  2845  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2846  0072                     ??_setDimmerLights_IntrControl:	
  2847                           ; 0 bytes @ 0x2
  2848                           
  2849  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2850                           ; 0 bytes @ 0x2
  2851                           
  2852                           
  2853                           ; 1 bytes @ 0x2
  2854  0072                     	ds	1
  2855  0073                     ??_IOC_ISR:	
  2856  0073                     ??_setDimmerReClock:	
  2857                           ; 0 bytes @ 0x3
  2858                           
  2859                           
  2860                           ; 0 bytes @ 0x3
  2861  0073                     	ds	1
  2862  0074                     setDimmerLights_IntrControl@lights:	
  2863                           
  2864                           ; 1 bytes @ 0x4
  2865  0074                     	ds	1
  2866  0075                     ??_TMR1_ISR:	
  2867  0075                     ??_ISR:	
  2868                           ; 0 bytes @ 0x5
  2869                           
  2870                           
  2871                           ; 0 bytes @ 0x5
  2872  0075                     	ds	1
  2873                           
  2874                           	psect	cstackBANK0
  2875  0020                     __pcstackBANK0:	
  2876  0020                     ??_Timeout_Counter:	
  2877  0020                     ??_set_TimeoutCleared:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_CC2500_WriteByte:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_CC2500_ReadByte:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ?_DelayTime_1us:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_setTxData:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ?_setLoad_StatusOff:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_Dimmer_Initialization:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_getDimmerLights_StatusFlag:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_setLoad_GO:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_setMemory_GO:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_setLoad_Count:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ?_setLoad_StatusOn:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_Fosc_Set:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_IO_Set:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ??_TMR1_Set:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ??_ADC_Set:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_IOC_Set:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ??_WDT_Set:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ??_Flash_Memory_Read:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0020                     ??_Flash_Memory_Write:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0020                     ??_WDT_Clearing:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0020                     ??_myMain_Initialization:	
  2941                           ; 0 bytes @ 0x0
  2942                           
  2943  0020                     ??_Temp_Initialization:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0020                     ??_setTemp_Enable:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0020                     ??_setLoad_Enable:	
  2950                           ; 0 bytes @ 0x0
  2951                           
  2952  0020                     ??_setRF_Enable:	
  2953                           ; 0 bytes @ 0x0
  2954                           
  2955  0020                     ??_setLoad_AH_AL_Restore:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0020                     ??_getTemp_Safe:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0020                     ??_setTemp_Initialization:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0020                     ??_setRF_Initialization:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0020                     ??_Buzzer_Initialization:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_Buzzer_Main:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_DelayOffPointSelect:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_DimmerLightsPointSelect:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_LedPointSelect:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_Flash_Memory_Unlock:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_Flash_Memory_Erasing:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ??_WDT_Main:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ??_getMain_AD_Safe:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_setRF_Learn:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ??_RfSWPointSelect:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_TouchPower:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_SwPointSelect:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ?___bmul:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ?_getBuz_GO:	
  3010                           ; 1 bytes @ 0x0
  3011                           
  3012  0020                     ?_getAD:	
  3013                           ; 2 bytes @ 0x0
  3014                           
  3015  0020                     ?___wmul:	
  3016                           ; 2 bytes @ 0x0
  3017                           
  3018  0020                     ?___awdiv:	
  3019                           ; 2 bytes @ 0x0
  3020                           
  3021  0020                     ?___lwdiv:	
  3022                           ; 2 bytes @ 0x0
  3023                           
  3024  0020                     ?___ftpack:	
  3025                           ; 2 bytes @ 0x0
  3026                           
  3027  0020                     getAD@adcon1:	
  3028                           ; 3 bytes @ 0x0
  3029                           
  3030  0020                     getMain_AD_Safe@result:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033  0020                     setLoad_Enable@command:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036  0020                     setLoad_GO@command:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039  0020                     setLoad_StatusOn@command:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042  0020                     setLoad_StatusOff@command:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045  0020                     setTemp_Enable@command:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048  0020                     getTemp_Safe@result:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051  0020                     setRF_Learn@command:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054  0020                     setRF_Enable@command:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057  0020                     ___bmul@multiplicand:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060  0020                     DelayTime_1us@count:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063  0020                     ___wmul@multiplier:	
  3064                           ; 2 bytes @ 0x0
  3065                           
  3066  0020                     ___awdiv@divisor:	
  3067                           ; 2 bytes @ 0x0
  3068                           
  3069  0020                     ___lwdiv@divisor:	
  3070                           ; 2 bytes @ 0x0
  3071                           
  3072  0020                     ___ftpack@arg:	
  3073                           ; 2 bytes @ 0x0
  3074                           
  3075                           
  3076                           ; 3 bytes @ 0x0
  3077  0020                     	ds	1
  3078  0021                     ??_setLoad_StatusOff:	
  3079  0021                     ??_setLoad_StatusOn:	
  3080                           ; 0 bytes @ 0x1
  3081                           
  3082  0021                     ??_RF_Initialization:	
  3083                           ; 0 bytes @ 0x1
  3084                           
  3085  0021                     ??_Mcu_Initialization:	
  3086                           ; 0 bytes @ 0x1
  3087                           
  3088  0021                     ??___bmul:	
  3089                           ; 0 bytes @ 0x1
  3090                           
  3091  0021                     CC2500_WriteByte@loop_a:	
  3092                           ; 0 bytes @ 0x1
  3093                           
  3094  0021                     CC2500_ReadByte@loop_b:	
  3095                           ; 1 bytes @ 0x1
  3096                           
  3097  0021                     DelayOffPointSelect@sw:	
  3098                           ; 1 bytes @ 0x1
  3099                           
  3100  0021                     DimmerLightsPointSelect@lights:	
  3101                           ; 1 bytes @ 0x1
  3102                           
  3103  0021                     getDimmerLights_StatusFlag@Status:	
  3104                           ; 1 bytes @ 0x1
  3105                           
  3106  0021                     LedPointSelect@led:	
  3107                           ; 1 bytes @ 0x1
  3108                           
  3109  0021                     Flash_Memory_Read@i:	
  3110                           ; 1 bytes @ 0x1
  3111                           
  3112  0021                     Flash_Memory_Write@i:	
  3113                           ; 1 bytes @ 0x1
  3114                           
  3115  0021                     setLoad_Count@command:	
  3116                           ; 1 bytes @ 0x1
  3117                           
  3118  0021                     setLoad_StatusOn@lights:	
  3119                           ; 1 bytes @ 0x1
  3120                           
  3121  0021                     setLoad_StatusOff@lights:	
  3122                           ; 1 bytes @ 0x1
  3123                           
  3124  0021                     setLoad_AH_AL_Restore@i:	
  3125                           ; 1 bytes @ 0x1
  3126                           
  3127  0021                     RfSWPointSelect@sw:	
  3128                           ; 1 bytes @ 0x1
  3129                           
  3130  0021                     SwPointSelect@sw:	
  3131                           ; 1 bytes @ 0x1
  3132                           
  3133                           
  3134                           ; 1 bytes @ 0x1
  3135  0021                     	ds	1
  3136  0022                     ??_CC2500_WriteCommand:	
  3137  0022                     ??_CC2500_ReadStatus:	
  3138                           ; 0 bytes @ 0x2
  3139                           
  3140  0022                     ??_DelayTime_1us:	
  3141                           ; 0 bytes @ 0x2
  3142                           
  3143  0022                     ?_CC2500_WriteREG:	
  3144                           ; 0 bytes @ 0x2
  3145                           
  3146  0022                     ??_DlyOff_Initialization:	
  3147                           ; 0 bytes @ 0x2
  3148                           
  3149  0022                     ?_setSw_Status:	
  3150                           ; 0 bytes @ 0x2
  3151                           
  3152  0022                     ?_setRFSW_Status:	
  3153                           ; 0 bytes @ 0x2
  3154                           
  3155  0022                     ?_setDimmerLights_Trigger:	
  3156                           ; 0 bytes @ 0x2
  3157                           
  3158  0022                     ?_setDimmerLights_Switch:	
  3159                           ; 0 bytes @ 0x2
  3160                           
  3161  0022                     ??_setDimmerLights_Initialization:	
  3162                           ; 0 bytes @ 0x2
  3163                           
  3164  0022                     ?_setDimmerLights_TriggerERROR:	
  3165                           ; 0 bytes @ 0x2
  3166                           
  3167  0022                     ?_setLED:	
  3168                           ; 0 bytes @ 0x2
  3169                           
  3170  0022                     ??_setLED_Main:	
  3171                           ; 0 bytes @ 0x2
  3172                           
  3173  0022                     ??_Load_Initialization:	
  3174                           ; 0 bytes @ 0x2
  3175                           
  3176  0022                     ??_setSw_Enable:	
  3177                           ; 0 bytes @ 0x2
  3178                           
  3179  0022                     ??_getBuz_GO:	
  3180                           ; 0 bytes @ 0x2
  3181                           
  3182  0022                     ?_setDimmerLights_AdjGo:	
  3183                           ; 0 bytes @ 0x2
  3184                           
  3185  0022                     ?_setDimmerLights_TriggerAdj:	
  3186                           ; 0 bytes @ 0x2
  3187                           
  3188  0022                     ?_setDimmerLights_Clear:	
  3189                           ; 0 bytes @ 0x2
  3190                           
  3191  0022                     CC2500_WriteREG@value:	
  3192                           ; 0 bytes @ 0x2
  3193                           
  3194  0022                     DlyOff_Initialization@sw:	
  3195                           ; 1 bytes @ 0x2
  3196                           
  3197  0022                     _getDimmerLights_StatusFlag$2576:	
  3198                           ; 1 bytes @ 0x2
  3199                           
  3200  0022                     setDimmerLights_TriggerERROR@command:	
  3201                           ; 1 bytes @ 0x2
  3202                           
  3203  0022                     setDimmerLights_Switch@command:	
  3204                           ; 1 bytes @ 0x2
  3205                           
  3206  0022                     setDimmerLights_AdjGo@command:	
  3207                           ; 1 bytes @ 0x2
  3208                           
  3209  0022                     setDimmerLights_Trigger@command:	
  3210                           ; 1 bytes @ 0x2
  3211                           
  3212  0022                     setDimmerLights_TriggerAdj@command:	
  3213                           ; 1 bytes @ 0x2
  3214                           
  3215  0022                     setDimmerLights_Clear@command:	
  3216                           ; 1 bytes @ 0x2
  3217                           
  3218  0022                     setLED@command:	
  3219                           ; 1 bytes @ 0x2
  3220                           
  3221  0022                     Flash_Memory_Read@address:	
  3222                           ; 1 bytes @ 0x2
  3223                           
  3224  0022                     setMemory_GO@command:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227  0022                     setRFSW_Status@command:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230  0022                     setSw_Enable@command:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233  0022                     setSw_Status@command:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236  0022                     ___bmul@product:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239  0022                     DelayTime_1us@i:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242  0022                     ___wmul@multiplicand:	
  3243                           ; 2 bytes @ 0x2
  3244                           
  3245  0022                     ___awdiv@dividend:	
  3246                           ; 2 bytes @ 0x2
  3247                           
  3248  0022                     ___lwdiv@dividend:	
  3249                           ; 2 bytes @ 0x2
  3250                           
  3251                           
  3252                           ; 2 bytes @ 0x2
  3253  0022                     	ds	1
  3254  0023                     ??_CC2500_WriteREG:	
  3255  0023                     ??_setSw_Status:	
  3256                           ; 0 bytes @ 0x3
  3257                           
  3258  0023                     ??_setRFSW_Status:	
  3259                           ; 0 bytes @ 0x3
  3260                           
  3261  0023                     ??_setDimmerLights_Trigger:	
  3262                           ; 0 bytes @ 0x3
  3263                           
  3264  0023                     ??_setDimmerLights_Switch:	
  3265                           ; 0 bytes @ 0x3
  3266                           
  3267  0023                     ??_setDimmerLights_TriggerERROR:	
  3268                           ; 0 bytes @ 0x3
  3269                           
  3270  0023                     ??_setLED:	
  3271                           ; 0 bytes @ 0x3
  3272                           
  3273  0023                     ??_DelayOff_Initialization:	
  3274                           ; 0 bytes @ 0x3
  3275                           
  3276  0023                     ??_DimmerLights_Close:	
  3277                           ; 0 bytes @ 0x3
  3278                           
  3279  0023                     ??_setDimmerLights_AdjGo:	
  3280                           ; 0 bytes @ 0x3
  3281                           
  3282  0023                     ??_setDimmerLights_TriggerAdj:	
  3283                           ; 0 bytes @ 0x3
  3284                           
  3285  0023                     ??_setDimmerLights_Clear:	
  3286                           ; 0 bytes @ 0x3
  3287                           
  3288  0023                     ??_getAD:	
  3289                           ; 0 bytes @ 0x3
  3290                           
  3291  0023                     CC2500_WriteCommand@command:	
  3292                           ; 0 bytes @ 0x3
  3293                           
  3294  0023                     CC2500_ReadStatus@status_addr:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297  0023                     setDimmerLights_Initialization@lights:	
  3298                           ; 1 bytes @ 0x3
  3299                           
  3300  0023                     setDimmerLights_TriggerERROR@lights:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303  0023                     setDimmerLights_Switch@lights:	
  3304                           ; 1 bytes @ 0x3
  3305                           
  3306  0023                     setDimmerLights_AdjGo@lights:	
  3307                           ; 1 bytes @ 0x3
  3308                           
  3309  0023                     setDimmerLights_Trigger@lights:	
  3310                           ; 1 bytes @ 0x3
  3311                           
  3312  0023                     setDimmerLights_TriggerAdj@lights:	
  3313                           ; 1 bytes @ 0x3
  3314                           
  3315  0023                     setDimmerLights_Clear@lights:	
  3316                           ; 1 bytes @ 0x3
  3317                           
  3318  0023                     setLED@led:	
  3319                           ; 1 bytes @ 0x3
  3320                           
  3321  0023                     getAD@adcon0:	
  3322                           ; 1 bytes @ 0x3
  3323                           
  3324  0023                     Flash_Memory_Read@ret:	
  3325                           ; 1 bytes @ 0x3
  3326                           
  3327  0023                     setRFSW_Status@sw:	
  3328                           ; 1 bytes @ 0x3
  3329                           
  3330  0023                     setSw_Status@sw:	
  3331                           ; 1 bytes @ 0x3
  3332                           
  3333  0023                     ___bmul@multiplier:	
  3334                           ; 1 bytes @ 0x3
  3335                           
  3336  0023                     ___ftpack@exp:	
  3337                           ; 1 bytes @ 0x3
  3338                           
  3339                           
  3340                           ; 1 bytes @ 0x3
  3341  0023                     	ds	1
  3342  0024                     ??_CC2500_ClearTXFIFO:	
  3343  0024                     ??_CC2500_ClearRXFIFO:	
  3344                           ; 0 bytes @ 0x4
  3345                           
  3346  0024                     ??_CC2500_SIDLEMode:	
  3347                           ; 0 bytes @ 0x4
  3348                           
  3349  0024                     ??_DelayTimejudge:	
  3350                           ; 0 bytes @ 0x4
  3351                           
  3352  0024                     ?_setDimmerLights:	
  3353                           ; 0 bytes @ 0x4
  3354                           
  3355  0024                     ??_setDimmerLights_ERROR:	
  3356                           ; 0 bytes @ 0x4
  3357                           
  3358  0024                     ??_setLED_Initialization:	
  3359                           ; 0 bytes @ 0x4
  3360                           
  3361  0024                     ??_Flash_Memory_Modify:	
  3362                           ; 0 bytes @ 0x4
  3363                           
  3364  0024                     ??_getLoad_AD:	
  3365                           ; 0 bytes @ 0x4
  3366                           
  3367  0024                     ??_getTemp_AD:	
  3368                           ; 0 bytes @ 0x4
  3369                           
  3370  0024                     ??_setSw_Initialization:	
  3371                           ; 0 bytes @ 0x4
  3372                           
  3373  0024                     ??_Sw_DimmerAdjFunc:	
  3374                           ; 0 bytes @ 0x4
  3375                           
  3376  0024                     ??_CC2500_TxData:	
  3377                           ; 0 bytes @ 0x4
  3378                           
  3379  0024                     ??_CC2500_RxData:	
  3380                           ; 0 bytes @ 0x4
  3381                           
  3382  0024                     ??_DimmerLights_Initialization:	
  3383                           ; 0 bytes @ 0x4
  3384                           
  3385  0024                     ??___wmul:	
  3386                           ; 0 bytes @ 0x4
  3387                           
  3388  0024                     ??___awdiv:	
  3389                           ; 0 bytes @ 0x4
  3390                           
  3391  0024                     ??___lwdiv:	
  3392                           ; 0 bytes @ 0x4
  3393                           
  3394  0024                     CC2500_WriteREG@w_addr:	
  3395                           ; 0 bytes @ 0x4
  3396                           
  3397  0024                     setDimmerLights@status:	
  3398                           ; 1 bytes @ 0x4
  3399                           
  3400  0024                     setLED_Initialization@led:	
  3401                           ; 1 bytes @ 0x4
  3402                           
  3403  0024                     setLED_Main@led:	
  3404                           ; 1 bytes @ 0x4
  3405                           
  3406  0024                     setSw_Initialization@sw:	
  3407                           ; 1 bytes @ 0x4
  3408                           
  3409  0024                     Sw_DimmerAdjFunc@Idle:	
  3410                           ; 1 bytes @ 0x4
  3411                           
  3412  0024                     ___ftpack@sign:	
  3413                           ; 1 bytes @ 0x4
  3414                           
  3415  0024                     getBuz_GO@i:	
  3416                           ; 1 bytes @ 0x4
  3417                           
  3418  0024                     DelayTime_1us@j:	
  3419                           ; 2 bytes @ 0x4
  3420                           
  3421  0024                     ___wmul@product:	
  3422                           ; 2 bytes @ 0x4
  3423                           
  3424                           
  3425                           ; 2 bytes @ 0x4
  3426  0024                     	ds	1
  3427  0025                     ??_CC2500_InitSetREG:	
  3428  0025                     ??_CC2500_InitPATable:	
  3429                           ; 0 bytes @ 0x5
  3430                           
  3431  0025                     ??_setDimmerLights:	
  3432                           ; 0 bytes @ 0x5
  3433                           
  3434  0025                     ??_Switch_Initialization:	
  3435                           ; 0 bytes @ 0x5
  3436                           
  3437  0025                     ??___ftpack:	
  3438                           ; 0 bytes @ 0x5
  3439                           
  3440  0025                     ??_LED_Initialization:	
  3441                           ; 0 bytes @ 0x5
  3442                           
  3443  0025                     ??_LED_Main:	
  3444                           ; 0 bytes @ 0x5
  3445                           
  3446  0025                     CC2500_TxData@loop_e:	
  3447                           ; 0 bytes @ 0x5
  3448                           
  3449  0025                     CC2500_RxData@loop_f:	
  3450                           ; 1 bytes @ 0x5
  3451                           
  3452  0025                     setDimmerLights_ERROR@lights:	
  3453                           ; 1 bytes @ 0x5
  3454                           
  3455  0025                     Flash_Memory_Modify@i:	
  3456                           ; 1 bytes @ 0x5
  3457                           
  3458  0025                     getTemp_AD@channel:	
  3459                           ; 1 bytes @ 0x5
  3460                           
  3461  0025                     Sw_DimmerAdjFunc@sw:	
  3462                           ; 1 bytes @ 0x5
  3463                           
  3464  0025                     ___awdiv@counter:	
  3465                           ; 1 bytes @ 0x5
  3466                           
  3467  0025                     ___lwdiv@counter:	
  3468                           ; 1 bytes @ 0x5
  3469                           
  3470                           
  3471                           ; 1 bytes @ 0x5
  3472  0025                     	ds	1
  3473  0026                     ??_CC2500_PowerRST:	
  3474  0026                     ??_CC2500_FrequencyCabr:	
  3475                           ; 0 bytes @ 0x6
  3476                           
  3477  0026                     ??_Flash_Memory_Main:	
  3478                           ; 0 bytes @ 0x6
  3479                           
  3480  0026                     CC2500_InitSetREG@temp1:	
  3481                           ; 0 bytes @ 0x6
  3482                           
  3483  0026                     CC2500_InitPATable@temp:	
  3484                           ; 1 bytes @ 0x6
  3485                           
  3486  0026                     DelayTimejudge@i:	
  3487                           ; 1 bytes @ 0x6
  3488                           
  3489  0026                     setDimmerLights@lights:	
  3490                           ; 1 bytes @ 0x6
  3491                           
  3492  0026                     getLoad_AD@channel:	
  3493                           ; 1 bytes @ 0x6
  3494                           
  3495  0026                     ___awdiv@sign:	
  3496                           ; 1 bytes @ 0x6
  3497                           
  3498  0026                     ___lwdiv@quotient:	
  3499                           ; 1 bytes @ 0x6
  3500                           
  3501                           
  3502                           ; 2 bytes @ 0x6
  3503  0026                     	ds	1
  3504  0027                     CC2500_InitSetREG@temp2:	
  3505  0027                     CC2500_InitPATable@loop_d:	
  3506                           ; 1 bytes @ 0x7
  3507                           
  3508  0027                     DelayTimejudge@j:	
  3509                           ; 1 bytes @ 0x7
  3510                           
  3511  0027                     getLoad_AD@j:	
  3512                           ; 1 bytes @ 0x7
  3513                           
  3514  0027                     ___awdiv@quotient:	
  3515                           ; 1 bytes @ 0x7
  3516                           
  3517                           
  3518                           ; 2 bytes @ 0x7
  3519  0027                     	ds	1
  3520  0028                     ?___awtoft:	
  3521  0028                     CC2500_InitSetREG@loop_c:	
  3522                           ; 3 bytes @ 0x8
  3523                           
  3524  0028                     DelayTimejudge@k:	
  3525                           ; 1 bytes @ 0x8
  3526                           
  3527  0028                     getLoad_AD@i:	
  3528                           ; 1 bytes @ 0x8
  3529                           
  3530  0028                     ___awtoft@c:	
  3531                           ; 1 bytes @ 0x8
  3532                           
  3533                           
  3534                           ; 2 bytes @ 0x8
  3535  0028                     	ds	1
  3536  0029                     ?_setBuz:	
  3537  0029                     ??_CC2500_PowerOnInitial:	
  3538                           ; 0 bytes @ 0x9
  3539                           
  3540  0029                     DelayTimejudge@value:	
  3541                           ; 0 bytes @ 0x9
  3542                           
  3543  0029                     setBuz@time:	
  3544                           ; 1 bytes @ 0x9
  3545                           
  3546                           
  3547                           ; 2 bytes @ 0x9
  3548  0029                     	ds	1
  3549  002A                     ?_setDelayOff_GO:	
  3550  002A                     setDelayOff_GO@command:	
  3551                           ; 0 bytes @ 0xA
  3552                           
  3553                           
  3554                           ; 1 bytes @ 0xA
  3555  002A                     	ds	1
  3556  002B                     ??_setBuz:	
  3557  002B                     ??___awtoft:	
  3558                           ; 0 bytes @ 0xB
  3559                           
  3560  002B                     setDelayOff_GO@value:	
  3561                           ; 0 bytes @ 0xB
  3562                           
  3563                           
  3564                           ; 1 bytes @ 0xB
  3565  002B                     	ds	1
  3566  002C                     ??_setDelayOff_GO:	
  3567  002C                     setBuz@count:	
  3568                           ; 0 bytes @ 0xC
  3569                           
  3570                           
  3571                           ; 1 bytes @ 0xC
  3572  002C                     	ds	1
  3573  002D                     ??_my_MainTimer:	
  3574  002D                     ??_setLog_Code:	
  3575                           ; 0 bytes @ 0xD
  3576                           
  3577  002D                     ??_DimmerLights_Exceptions:	
  3578                           ; 0 bytes @ 0xD
  3579                           
  3580  002D                     DimmerLights_Exceptions@status:	
  3581                           ; 0 bytes @ 0xD
  3582                           
  3583  002D                     ___awtoft@sign:	
  3584                           ; 1 bytes @ 0xD
  3585                           
  3586                           
  3587                           ; 1 bytes @ 0xD
  3588  002D                     	ds	1
  3589  002E                     ??_setLoad_Exceptions:	
  3590  002E                     ??_setOverTemp_Exceptions:	
  3591                           ; 0 bytes @ 0xE
  3592                           
  3593  002E                     ?___ftdiv:	
  3594                           ; 0 bytes @ 0xE
  3595                           
  3596  002E                     ?___ftmul:	
  3597                           ; 3 bytes @ 0xE
  3598                           
  3599  002E                     setDelayOff_GO@sw:	
  3600                           ; 3 bytes @ 0xE
  3601                           
  3602  002E                     ___ftdiv@f2:	
  3603                           ; 1 bytes @ 0xE
  3604                           
  3605  002E                     ___ftmul@f1:	
  3606                           ; 3 bytes @ 0xE
  3607                           
  3608                           
  3609                           ; 3 bytes @ 0xE
  3610  002E                     	ds	1
  3611  002F                     setLoad_Exceptions@i:	
  3612  002F                     setOverTemp_Exceptions@i:	
  3613                           ; 1 bytes @ 0xF
  3614                           
  3615                           
  3616                           ; 1 bytes @ 0xF
  3617  002F                     	ds	1
  3618  0030                     setLoad_Exceptions@command:	
  3619  0030                     setOverTemp_Exceptions@command:	
  3620                           ; 1 bytes @ 0x10
  3621                           
  3622                           
  3623                           ; 1 bytes @ 0x10
  3624  0030                     	ds	1
  3625  0031                     ??_Load_Main:	
  3626  0031                     ??_setTemp_Main:	
  3627                           ; 0 bytes @ 0x11
  3628                           
  3629  0031                     ___ftdiv@f1:	
  3630                           ; 0 bytes @ 0x11
  3631                           
  3632  0031                     ___ftmul@f2:	
  3633                           ; 3 bytes @ 0x11
  3634                           
  3635                           
  3636                           ; 3 bytes @ 0x11
  3637  0031                     	ds	2
  3638  0033                     ??_Temp_Main:	
  3639  0033                     Load_Main@i:	
  3640                           ; 0 bytes @ 0x13
  3641                           
  3642                           
  3643                           ; 1 bytes @ 0x13
  3644  0033                     	ds	1
  3645  0034                     ??___ftdiv:	
  3646  0034                     ??___ftmul:	
  3647                           ; 0 bytes @ 0x14
  3648                           
  3649                           
  3650                           ; 0 bytes @ 0x14
  3651  0034                     	ds	4
  3652  0038                     ___ftdiv@cntr:	
  3653  0038                     ___ftmul@exp:	
  3654                           ; 1 bytes @ 0x18
  3655                           
  3656                           
  3657                           ; 1 bytes @ 0x18
  3658  0038                     	ds	1
  3659  0039                     ___ftdiv@f3:	
  3660  0039                     ___ftmul@f3_as_product:	
  3661                           ; 3 bytes @ 0x19
  3662                           
  3663                           
  3664                           ; 3 bytes @ 0x19
  3665  0039                     	ds	3
  3666  003C                     ___ftdiv@exp:	
  3667  003C                     ___ftmul@cntr:	
  3668                           ; 1 bytes @ 0x1C
  3669                           
  3670                           
  3671                           ; 1 bytes @ 0x1C
  3672  003C                     	ds	1
  3673  003D                     ___ftdiv@sign:	
  3674  003D                     ___ftmul@sign:	
  3675                           ; 1 bytes @ 0x1D
  3676                           
  3677                           
  3678                           ; 1 bytes @ 0x1D
  3679  003D                     	ds	1
  3680  003E                     ?___ftadd:	
  3681  003E                     ___ftadd@f1:	
  3682                           ; 3 bytes @ 0x1E
  3683                           
  3684                           
  3685                           ; 3 bytes @ 0x1E
  3686  003E                     	ds	3
  3687  0041                     ___ftadd@f2:	
  3688                           
  3689                           ; 3 bytes @ 0x21
  3690  0041                     	ds	3
  3691  0044                     ??___ftadd:	
  3692                           
  3693                           ; 0 bytes @ 0x24
  3694  0044                     	ds	4
  3695  0048                     ___ftadd@sign:	
  3696                           
  3697                           ; 1 bytes @ 0x28
  3698  0048                     	ds	1
  3699  0049                     ___ftadd@exp2:	
  3700                           
  3701                           ; 1 bytes @ 0x29
  3702  0049                     	ds	1
  3703  004A                     ___ftadd@exp1:	
  3704                           
  3705                           ; 1 bytes @ 0x2A
  3706  004A                     	ds	1
  3707  004B                     ?___fttol:	
  3708  004B                     ___fttol@f1:	
  3709                           ; 4 bytes @ 0x2B
  3710                           
  3711                           
  3712                           ; 3 bytes @ 0x2B
  3713  004B                     	ds	4
  3714  004F                     ??___fttol:	
  3715                           
  3716                           ; 0 bytes @ 0x2F
  3717  004F                     	ds	4
  3718  0053                     ___fttol@sign1:	
  3719                           
  3720                           ; 1 bytes @ 0x33
  3721  0053                     	ds	1
  3722  0054                     ___fttol@lval:	
  3723                           
  3724                           ; 4 bytes @ 0x34
  3725  0054                     	ds	4
  3726  0058                     ___fttol@exp1:	
  3727                           
  3728                           ; 1 bytes @ 0x38
  3729  0058                     	ds	1
  3730  0059                     ??_getPercentValue:	
  3731  0059                     ??_setPercentValue:	
  3732                           ; 0 bytes @ 0x39
  3733                           
  3734  0059                     setPercentValue@value:	
  3735                           ; 0 bytes @ 0x39
  3736                           
  3737                           
  3738                           ; 1 bytes @ 0x39
  3739  0059                     	ds	1
  3740  005A                     setPercentValue@i:	
  3741                           
  3742                           ; 3 bytes @ 0x3A
  3743  005A                     	ds	1
  3744  005B                     getPercentValue@value:	
  3745                           
  3746                           ; 1 bytes @ 0x3B
  3747  005B                     	ds	1
  3748  005C                     getPercentValue@i:	
  3749                           
  3750                           ; 3 bytes @ 0x3C
  3751  005C                     	ds	1
  3752  005D                     ?_setRF_DimmerLights:	
  3753  005D                     ??_Flash_Memory_Initialization:	
  3754                           ; 0 bytes @ 0x3D
  3755                           
  3756  005D                     setRF_DimmerLights@on:	
  3757                           ; 0 bytes @ 0x3D
  3758                           
  3759                           
  3760                           ; 1 bytes @ 0x3D
  3761  005D                     	ds	1
  3762  005E                     ??_setRF_DimmerLights:	
  3763  005E                     Flash_Memory_Initialization@i:	
  3764                           ; 0 bytes @ 0x3E
  3765                           
  3766                           
  3767                           ; 1 bytes @ 0x3E
  3768  005E                     	ds	1
  3769  005F                     ??_setDimmerLights_AdjRF:	
  3770                           
  3771                           ; 0 bytes @ 0x3F
  3772  005F                     	ds	1
  3773  0060                     setDimmerLights_AdjRF@lights:	
  3774  0060                     setRF_DimmerLights@status:	
  3775                           ; 1 bytes @ 0x40
  3776                           
  3777                           
  3778                           ; 1 bytes @ 0x40
  3779  0060                     	ds	1
  3780  0061                     ??_setRF_DimmerValue:	
  3781  0061                     setRF_DimmerLights@lights:	
  3782                           ; 0 bytes @ 0x41
  3783                           
  3784                           
  3785                           ; 1 bytes @ 0x41
  3786  0061                     	ds	1
  3787  0062                     ??_DlyOff_Main:	
  3788  0062                     ?_setDimmerLights_Adj:	
  3789                           ; 0 bytes @ 0x42
  3790                           
  3791  0062                     ??_setRFSW_Control:	
  3792                           ; 0 bytes @ 0x42
  3793                           
  3794  0062                     ??_Sw_DimmerOnFunc:	
  3795                           ; 0 bytes @ 0x42
  3796                           
  3797  0062                     ??_Sw_DimmerOffFunc:	
  3798                           ; 0 bytes @ 0x42
  3799                           
  3800  0062                     setDimmerLights_Adj@status:	
  3801                           ; 0 bytes @ 0x42
  3802                           
  3803  0062                     Sw_DimmerOnFunc@Idle:	
  3804                           ; 1 bytes @ 0x42
  3805                           
  3806                           
  3807                           ; 1 bytes @ 0x42
  3808  0062                     	ds	1
  3809  0063                     ??_setDimmerLights_Adj:	
  3810  0063                     setRFSW_Control@sw:	
  3811                           ; 0 bytes @ 0x43
  3812                           
  3813  0063                     setRF_DimmerValue@lights:	
  3814                           ; 1 bytes @ 0x43
  3815                           
  3816  0063                     Sw_DimmerOnFunc@sw:	
  3817                           ; 1 bytes @ 0x43
  3818                           
  3819                           
  3820                           ; 1 bytes @ 0x43
  3821  0063                     	ds	1
  3822  0064                     ??_setRFSW_AdjControl:	
  3823  0064                     DlyOff_Main@sw:	
  3824                           ; 0 bytes @ 0x44
  3825                           
  3826  0064                     setDimmerLights_Adj@lights:	
  3827                           ; 1 bytes @ 0x44
  3828                           
  3829  0064                     Sw_DimmerOffFunc@sw:	
  3830                           ; 1 bytes @ 0x44
  3831                           
  3832                           
  3833                           ; 1 bytes @ 0x44
  3834  0064                     	ds	1
  3835  0065                     ??_setDimmerLights_Main:	
  3836  0065                     ??_setSw_Main:	
  3837                           ; 0 bytes @ 0x45
  3838                           
  3839  0065                     ??_DelayOff_Main:	
  3840                           ; 0 bytes @ 0x45
  3841                           
  3842  0065                     setDimmerLights_Main@clear:	
  3843                           ; 0 bytes @ 0x45
  3844                           
  3845                           
  3846                           ; 1 bytes @ 0x45
  3847  0065                     	ds	1
  3848  0066                     setDimmerLights_Main@lights:	
  3849  0066                     setRFSW_AdjControl@sw:	
  3850                           ; 1 bytes @ 0x46
  3851                           
  3852                           
  3853                           ; 1 bytes @ 0x46
  3854  0066                     	ds	1
  3855  0067                     ??_setRF_Main:	
  3856  0067                     ??_getRxData:	
  3857                           ; 0 bytes @ 0x47
  3858                           
  3859  0067                     ??_setControl_Lights_Table:	
  3860                           ; 0 bytes @ 0x47
  3861                           
  3862  0067                     ??_DimmerLights_Main:	
  3863                           ; 0 bytes @ 0x47
  3864                           
  3865  0067                     _setSw_Main$6832:	
  3866                           ; 0 bytes @ 0x47
  3867                           
  3868                           
  3869                           ; 1 bytes @ 0x47
  3870  0067                     	ds	1
  3871  0068                     _setRF_Main$5745:	
  3872  0068                     _setSw_Main$6833:	
  3873                           ; 1 bytes @ 0x48
  3874                           
  3875                           
  3876                           ; 1 bytes @ 0x48
  3877  0068                     	ds	1
  3878  0069                     ??_RF_Main:	
  3879  0069                     setSw_Main@sw:	
  3880                           ; 0 bytes @ 0x49
  3881                           
  3882                           
  3883                           ; 1 bytes @ 0x49
  3884  0069                     	ds	1
  3885  006A                     ??_Switch_Main:	
  3886  006A                     ??_main:	
  3887                           ; 0 bytes @ 0x4A
  3888                           
  3889                           
  3890                           	psect	maintext
  3891  1513                     __pmaintext:	
  3892                           ; 0 bytes @ 0x4A
  3893 ;;
  3894 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3895 ;;
  3896 ;; *************** function _main *****************
  3897 ;; Defined at:
  3898 ;;		line 7 in file "../src/Main_B1.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;  argc            2    0[BANK2 ] int 
  3901 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;		None
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  2    0[BANK2 ] int 
  3906 ;; Registers used:
  3907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3908 ;; Tracked objects:
  3909 ;;		On entry : 17F/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3913 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3916 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3917 ;;Total ram usage:        4 bytes
  3918 ;; Hardware stack levels required when called:   15
  3919 ;; This function calls:
  3920 ;;		_Buzzer_Initialization
  3921 ;;		_Buzzer_Main
  3922 ;;		_CC2500_PowerOnInitial
  3923 ;;		_DelayOff_Initialization
  3924 ;;		_DelayOff_Main
  3925 ;;		_DimmerLights_Initialization
  3926 ;;		_DimmerLights_Main
  3927 ;;		_Flash_Memory_Initialization
  3928 ;;		_Flash_Memory_Main
  3929 ;;		_LED_Initialization
  3930 ;;		_LED_Main
  3931 ;;		_Load_Initialization
  3932 ;;		_Load_Main
  3933 ;;		_Mcu_Initialization
  3934 ;;		_RF_Initialization
  3935 ;;		_RF_Main
  3936 ;;		_Switch_Initialization
  3937 ;;		_Switch_Main
  3938 ;;		_Temp_Initialization
  3939 ;;		_Temp_Main
  3940 ;;		_WDT_Main
  3941 ;;		_getLoad_AD
  3942 ;;		_getTemp_AD
  3943 ;;		_myMain_Initialization
  3944 ;;		_my_MainTimer
  3945 ;; This function is called by:
  3946 ;;		Startup code after reset
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _main
  3952  1513                     _main:	
  3953                           
  3954                           ;Main_B1.c: 8: myMain_Initialization();
  3955                           
  3956                           ;incstack = 0
  3957                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3958  1513  319B  234A  3195   	fcall	_myMain_Initialization
  3959                           
  3960                           ;Main_B1.c: 9: Mcu_Initialization();
  3961  1516  319B  23EE  3195   	fcall	_Mcu_Initialization
  3962                           
  3963                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3964  1519  3186  269A  3195   	fcall	_Flash_Memory_Initialization
  3965                           
  3966                           ;Main_B1.c: 11: LED_Initialization();
  3967  151C  319A  22A6  3195   	fcall	_LED_Initialization
  3968                           
  3969                           ;Main_B1.c: 12: Buzzer_Initialization();
  3970  151F  3199  21C3  3195   	fcall	_Buzzer_Initialization
  3971                           
  3972                           ;Main_B1.c: 14: ;;
  3973                           ;Main_B1.c: 15: Temp_Initialization();
  3974  1522  3199  21CF  3195   	fcall	_Temp_Initialization
  3975                           
  3976                           ;Main_B1.c: 16: Load_Initialization();
  3977  1525  3199  21EA  3195   	fcall	_Load_Initialization
  3978                           
  3979                           ;Main_B1.c: 17: ;;
  3980                           ;Main_B1.c: 18: DelayOff_Initialization();
  3981  1528  319A  2210  3195   	fcall	_DelayOff_Initialization
  3982                           
  3983                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3984  152B  319C  24DA  3195   	fcall	_DimmerLights_Initialization
  3985                           
  3986                           ;Main_B1.c: 21: ;;
  3987                           ;Main_B1.c: 22: ;;
  3988                           ;Main_B1.c: 23: ;;
  3989                           ;Main_B1.c: 24: Switch_Initialization();
  3990  152E  319A  22D7  3195   	fcall	_Switch_Initialization
  3991                           
  3992                           ;Main_B1.c: 25: RF_Initialization();
  3993  1531  3199  21C6  3195   	fcall	_RF_Initialization
  3994                           
  3995                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3996  1534  319C  24AF  3195   	fcall	_CC2500_PowerOnInitial
  3997  1537                     l10633:	
  3998                           ;Main_B1.c: 27: ;;
  3999                           ;Main_B1.c: 29: while (1) {
  4000                           
  4001                           
  4002                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  4003  1537  0021               	movlb	1	; select bank1
  4004  1538  1C20               	btfss	_myMain^(0+128),0
  4005  1539  2D42               	goto	l10637
  4006                           
  4007                           ;Main_B1.c: 37: getLoad_AD(0x05);
  4008  153A  3005               	movlw	5
  4009  153B  318B  232F  3195   	fcall	_getLoad_AD
  4010                           
  4011                           ;Main_B1.c: 41: getTemp_AD(0x09);
  4012  153E  3009               	movlw	9
  4013  153F  3191  2118  3195   	fcall	_getTemp_AD
  4014  1542                     l10637:	
  4015                           
  4016                           ;Main_B1.c: 56: }
  4017                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  4018  1542  0021               	movlb	1	; select bank1
  4019  1543  1C48               	btfss	_Timer1^(0+128),0
  4020  1544  2D37               	goto	l10633
  4021                           
  4022                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  4023  1545  1048               	bcf	_Timer1^(0+128),0
  4024                           
  4025                           ;Main_B1.c: 94: my_MainTimer();
  4026  1546  3196  267D  3195   	fcall	_my_MainTimer
  4027                           
  4028                           ;Main_B1.c: 95: WDT_Main();
  4029  1549  319C  2412  3195   	fcall	_WDT_Main
  4030                           
  4031                           ;Main_B1.c: 96: ;;
  4032                           ;Main_B1.c: 97: ;;
  4033                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  4034  154C  0021               	movlb	1	; select bank1
  4035  154D  1C20               	btfss	_myMain^(0+128),0
  4036  154E  2D37               	goto	l10633
  4037                           
  4038                           ;Main_B1.c: 99: Flash_Memory_Main();
  4039  154F  319E  261A  3195   	fcall	_Flash_Memory_Main
  4040                           
  4041                           ;Main_B1.c: 101: LED_Main();
  4042  1552  319A  22B2  3195   	fcall	_LED_Main
  4043                           
  4044                           ;Main_B1.c: 102: Buzzer_Main();
  4045  1555  3193  2388  3195   	fcall	_Buzzer_Main
  4046                           
  4047                           ;Main_B1.c: 104: ;;
  4048                           ;Main_B1.c: 105: Temp_Main();
  4049  1558  3199  21D2  3195   	fcall	_Temp_Main
  4050                           
  4051                           ;Main_B1.c: 106: Load_Main();
  4052  155B  3182  220E  3195   	fcall	_Load_Main
  4053                           
  4054                           ;Main_B1.c: 107: ;;
  4055                           ;Main_B1.c: 109: ;;
  4056                           ;Main_B1.c: 110: DimmerLights_Main();
  4057  155E  319A  226D  3195   	fcall	_DimmerLights_Main
  4058                           
  4059                           ;Main_B1.c: 111: Switch_Main();
  4060  1561  319A  2240  3195   	fcall	_Switch_Main
  4061                           
  4062                           ;Main_B1.c: 112: ;;
  4063                           ;Main_B1.c: 113: ;;
  4064                           ;Main_B1.c: 115: RF_Main();
  4065  1564  3199  21C9  3195   	fcall	_RF_Main
  4066                           
  4067                           ;Main_B1.c: 116: DelayOff_Main();
  4068  1567  319A  2218  3195   	fcall	_DelayOff_Main
  4069                           
  4070                           ;Main_B1.c: 117: ;;
  4071  156A  2D37               	goto	l10633
  4072  156B                     __end_of_main:	
  4073                           ;Main_B1.c: 125: }
  4074                           ;Main_B1.c: 126: }
  4075                           ;Main_B1.c: 160: }
  4076                           ;Main_B1.c: 161: return (0);
  4077                           ;	Return value of _main is never used
  4078                           
  4079                           
  4080                           	psect	text1
  4081  167D                     __ptext1:	
  4082 ;; *************** function _my_MainTimer *****************
  4083 ;; Defined at:
  4084 ;;		line 180 in file "../src/Main_B1.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;		None
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;		None
  4089 ;; Return value:  Size  Location     Type
  4090 ;;		None               void
  4091 ;; Registers used:
  4092 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4093 ;; Tracked objects:
  4094 ;;		On entry : 0/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4102 ;;Total ram usage:        0 bytes
  4103 ;; Hardware stack levels used:    1
  4104 ;; Hardware stack levels required when called:    7
  4105 ;; This function calls:
  4106 ;;		_setBuz
  4107 ;;		_setLoad_Enable
  4108 ;;		_setRF_Enable
  4109 ;;		_setSw_Enable
  4110 ;;		_setTemp_Enable
  4111 ;; This function is called by:
  4112 ;;		_main
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           
  4117                           ;psect for function _my_MainTimer
  4118  167D                     _my_MainTimer:	
  4119                           
  4120                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  4121                           
  4122                           ;incstack = 0
  4123                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4124  167D  0021               	movlb	1	; select bank1
  4125  167E  1820               	btfsc	_myMain^(0+128),0
  4126  167F  2EAF               	goto	l10447
  4127                           
  4128                           ;Main_B1.c: 183: myMain.PowerCount++;
  4129  1680  3001               	movlw	1
  4130  1681  07A2               	addwf	(_myMain^(0+128)+2),f
  4131  1682  3000               	movlw	0
  4132  1683  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4133                           
  4134                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  4135  1684  3002               	movlw	2
  4136  1685  3EA0               	addlw	_myMain& (0+255)
  4137  1686  0086               	movwf	6
  4138  1687  0187               	clrf	7
  4139  1688  3F40               	moviw [0]fsr1
  4140  1689  3A96               	xorlw	150
  4141  168A  1D03               	skipz
  4142  168B  2E8E               	goto	u11255
  4143  168C  3F41               	moviw [1]fsr1
  4144  168D  3A00               	xorlw	0
  4145  168E                     u11255:	
  4146  168E  1D03               	skipz
  4147  168F  2EC7               	goto	l10457
  4148                           
  4149                           ;Main_B1.c: 185: {
  4150                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  4151  1690  01A2               	clrf	(_myMain^(0+128)+2)
  4152  1691  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4153                           
  4154                           ;Main_B1.c: 187: myMain.PowerON = 1;
  4155  1692  1420               	bsf	_myMain^(0+128),0
  4156                           
  4157                           ;Main_B1.c: 190: setTemp_Enable(1);
  4158  1693  3001               	movlw	1
  4159  1694  319A  2248  3196   	fcall	_setTemp_Enable
  4160                           
  4161                           ;Main_B1.c: 194: setLoad_Enable(1);
  4162  1697  3001               	movlw	1
  4163  1698  319A  2259  3196   	fcall	_setLoad_Enable
  4164                           
  4165                           ;Main_B1.c: 200: setBuz(3, 50);
  4166  169B  3032               	movlw	50
  4167  169C  0020               	movlb	0	; select bank0
  4168  169D  00A9               	movwf	setBuz@time
  4169  169E  3000               	movlw	0
  4170  169F  00AA               	movwf	setBuz@time+1
  4171  16A0  3003               	movlw	3
  4172  16A1  3195  256B  3196   	fcall	_setBuz
  4173                           
  4174                           ;Main_B1.c: 201: myMain.SelfTest = 1;
  4175  16A4  0021               	movlb	1	; select bank1
  4176  16A5  1620               	bsf	_myMain^(0+128),4
  4177                           
  4178                           ;Main_B1.c: 203: setSw_Enable(1);
  4179  16A6  3001               	movlw	1
  4180  16A7  319D  25A4  3196   	fcall	_setSw_Enable
  4181                           
  4182                           ;Main_B1.c: 206: setRF_Enable(1);
  4183  16AA  3001               	movlw	1
  4184  16AB  319B  2300  3196   	fcall	_setRF_Enable
  4185                           
  4186                           ;Main_B1.c: 210: }
  4187                           ;Main_B1.c: 211: } else {
  4188  16AE  2EC7               	goto	l10457
  4189  16AF                     l10447:	
  4190                           
  4191                           ;Main_B1.c: 219: myMain.Count1++;
  4192  16AF  3001               	movlw	1
  4193  16B0  0021               	movlb	1	; select bank1
  4194  16B1  07A6               	addwf	(_myMain^(0+128)+6),f
  4195  16B2  3000               	movlw	0
  4196  16B3  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4197                           
  4198                           ;Main_B1.c: 220: if (myMain.Count1 == 100)
  4199  16B4  3006               	movlw	6
  4200  16B5  3EA0               	addlw	_myMain& (0+255)
  4201  16B6  0086               	movwf	6
  4202  16B7  0187               	clrf	7
  4203  16B8  3F40               	moviw [0]fsr1
  4204  16B9  3A64               	xorlw	100
  4205  16BA  1D03               	skipz
  4206  16BB  2EBE               	goto	u11265
  4207  16BC  3F41               	moviw [1]fsr1
  4208  16BD  3A00               	xorlw	0
  4209  16BE                     u11265:	
  4210  16BE  1D03               	skipz
  4211  16BF  2EC7               	goto	l10457
  4212                           
  4213                           ;Main_B1.c: 221: {
  4214                           ;Main_B1.c: 222: myMain.Count1 = 0;
  4215  16C0  01A6               	clrf	(_myMain^(0+128)+6)
  4216  16C1  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4217                           
  4218                           ;Main_B1.c: 234: if (myMain.Flag) {
  4219  16C2  1CA0               	btfss	_myMain^(0+128),1
  4220  16C3  2EC6               	goto	l1556
  4221                           
  4222                           ;Main_B1.c: 235: myMain.Flag = 0;
  4223  16C4  10A0               	bcf	_myMain^(0+128),1
  4224                           
  4225                           ;Main_B1.c: 244: } else {
  4226  16C5  2EC7               	goto	l10457
  4227  16C6                     l1556:	
  4228                           
  4229                           ;Main_B1.c: 245: myMain.Flag = 1;
  4230  16C6  14A0               	bsf	_myMain^(0+128),1
  4231  16C7                     l10457:	
  4232                           
  4233                           ;Main_B1.c: 254: }
  4234                           ;Main_B1.c: 255: }
  4235                           ;Main_B1.c: 257: }
  4236                           ;Main_B1.c: 259: myMain.Count2++;
  4237  16C7  3001               	movlw	1
  4238  16C8  0021               	movlb	1	; select bank1
  4239  16C9  07A8               	addwf	(_myMain^(0+128)+8),f
  4240  16CA  3000               	movlw	0
  4241  16CB  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  4242                           
  4243                           ;Main_B1.c: 260: if (myMain.Count2 == 50) {
  4244  16CC  3008               	movlw	8
  4245  16CD  3EA0               	addlw	_myMain& (0+255)
  4246  16CE  0086               	movwf	6
  4247  16CF  0187               	clrf	7
  4248  16D0  3F40               	moviw [0]fsr1
  4249  16D1  3A32               	xorlw	50
  4250  16D2  1D03               	skipz
  4251  16D3  2ED6               	goto	u11285
  4252  16D4  3F41               	moviw [1]fsr1
  4253  16D5  3A00               	xorlw	0
  4254  16D6                     u11285:	
  4255  16D6  1D03               	skipz
  4256  16D7  0008               	return
  4257                           
  4258                           ;Main_B1.c: 261: myMain.Count2 = 0;
  4259  16D8  01A8               	clrf	(_myMain^(0+128)+8)
  4260  16D9  01A9               	clrf	((_myMain+1)^(0+128)+8)
  4261  16DA  0008               	return
  4262  16DB                     __end_of_my_MainTimer:	
  4263                           
  4264                           	psect	text2
  4265  1A48                     __ptext2:	
  4266 ;; *************** function _setTemp_Enable *****************
  4267 ;; Defined at:
  4268 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;  command         1    wreg     unsigned char 
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;  command         1    0[BANK0 ] unsigned char 
  4273 ;; Return value:  Size  Location     Type
  4274 ;;		None               void
  4275 ;; Registers used:
  4276 ;;		wreg
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;Total ram usage:        1 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    5
  4289 ;; This function calls:
  4290 ;;		Nothing
  4291 ;; This function is called by:
  4292 ;;		_my_MainTimer
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           
  4297                           ;psect for function _setTemp_Enable
  4298  1A48                     _setTemp_Enable:	
  4299                           
  4300                           ;incstack = 0
  4301                           ; Regs used in _setTemp_Enable: [wreg]
  4302                           ;setTemp_Enable@command stored from wreg
  4303  1A48  0020               	movlb	0	; select bank0
  4304  1A49  00A0               	movwf	setTemp_Enable@command
  4305                           
  4306                           ;OverTemperature_B1.c: 17: Temp.Enable = command;
  4307  1A4A  0820               	movf	setTemp_Enable@command,w
  4308  1A4B  0021               	movlb	1	; select bank1
  4309  1A4C  1057               	bcf	_Temp^(0+128),0
  4310  1A4D  1D03               	skipz
  4311  1A4E  1457               	bsf	_Temp^(0+128),0
  4312  1A4F  0008               	return
  4313  1A50                     __end_of_setTemp_Enable:	
  4314                           
  4315                           	psect	text3
  4316  1A59                     __ptext3:	
  4317 ;; *************** function _setLoad_Enable *****************
  4318 ;; Defined at:
  4319 ;;		line 257 in file "../src/OverLoad_B1.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  command         1    wreg     unsigned char 
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  command         1    0[BANK0 ] unsigned char 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;		None               void
  4326 ;; Registers used:
  4327 ;;		wreg
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4337 ;;Total ram usage:        1 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    5
  4340 ;; This function calls:
  4341 ;;		Nothing
  4342 ;; This function is called by:
  4343 ;;		_my_MainTimer
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           
  4348                           ;psect for function _setLoad_Enable
  4349  1A59                     _setLoad_Enable:	
  4350                           
  4351                           ;incstack = 0
  4352                           ; Regs used in _setLoad_Enable: [wreg]
  4353                           ;setLoad_Enable@command stored from wreg
  4354  1A59  0020               	movlb	0	; select bank0
  4355  1A5A  00A0               	movwf	setLoad_Enable@command
  4356                           
  4357                           ;OverLoad_B1.c: 258: Load1.Enable = command;
  4358  1A5B  0820               	movf	setLoad_Enable@command,w
  4359  1A5C  0022               	movlb	2	; select bank2
  4360  1A5D  1022               	bcf	_Load1^(0+256),0
  4361  1A5E  1D03               	skipz
  4362  1A5F  1422               	bsf	_Load1^(0+256),0
  4363                           
  4364                           ;OverLoad_B1.c: 259: Load1.GO = 0;
  4365  1A60  10A2               	bcf	_Load1^(0+256),1
  4366  1A61  0008               	return
  4367  1A62                     __end_of_setLoad_Enable:	
  4368                           
  4369                           	psect	text4
  4370  1B4A                     __ptext4:	
  4371 ;; *************** function _myMain_Initialization *****************
  4372 ;; Defined at:
  4373 ;;		line 167 in file "../src/Main_B1.c"
  4374 ;; Parameters:    Size  Location     Type
  4375 ;;		None
  4376 ;; Auto vars:     Size  Location     Type
  4377 ;;		None
  4378 ;; Return value:  Size  Location     Type
  4379 ;;		None               void
  4380 ;; Registers used:
  4381 ;;		wreg, fsr1l, fsr1h
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4391 ;;Total ram usage:        1 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:    5
  4394 ;; This function calls:
  4395 ;;		Nothing
  4396 ;; This function is called by:
  4397 ;;		_main
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           
  4402                           ;psect for function _myMain_Initialization
  4403  1B4A                     _myMain_Initialization:	
  4404                           
  4405                           ;Main_B1.c: 169: product = &_product;
  4406                           
  4407                           ;incstack = 0
  4408                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4409  1B4A  3045               	movlw	__product& (0+255)
  4410  1B4B  0020               	movlb	0	; select bank0
  4411  1B4C  00A0               	movwf	??_myMain_Initialization
  4412  1B4D  0820               	movf	??_myMain_Initialization,w
  4413  1B4E  00ED               	movwf	_product
  4414                           
  4415                           ;Main_B1.c: 170: product->Data[20] = 210;
  4416  1B4F  30D2               	movlw	210
  4417  1B50  00A0               	movwf	??_myMain_Initialization
  4418  1B51  086D               	movf	_product,w
  4419  1B52  3E14               	addlw	20
  4420  1B53  0086               	movwf	6
  4421  1B54  3002               	movlw	2	; select bank4/5
  4422  1B55  0087               	movwf	7
  4423  1B56  0820               	movf	??_myMain_Initialization,w
  4424  1B57  0081               	movwf	1
  4425  1B58  0008               	return
  4426  1B59                     __end_of_myMain_Initialization:	
  4427                           
  4428                           	psect	text5
  4429  1118                     __ptext5:	
  4430 ;; *************** function _getTemp_AD *****************
  4431 ;; Defined at:
  4432 ;;		line 33 in file "../src/OverTemperature_B1.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  channel         1    wreg     unsigned char 
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;  channel         1    5[BANK0 ] unsigned char 
  4437 ;; Return value:  Size  Location     Type
  4438 ;;		None               void
  4439 ;; Registers used:
  4440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4447 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4448 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4449 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4450 ;;Total ram usage:        2 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    7
  4453 ;; This function calls:
  4454 ;;		_getAD
  4455 ;; This function is called by:
  4456 ;;		_main
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           
  4461                           ;psect for function _getTemp_AD
  4462  1118                     _getTemp_AD:	
  4463                           
  4464                           ;incstack = 0
  4465                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4466                           ;getTemp_AD@channel stored from wreg
  4467  1118  0020               	movlb	0	; select bank0
  4468  1119  00A5               	movwf	getTemp_AD@channel
  4469                           
  4470                           ;OverTemperature_B1.c: 47: if (Temp.ADtoGO == 1) {
  4471  111A  0021               	movlb	1	; select bank1
  4472  111B  1D57               	btfss	_Temp^(0+128),2
  4473  111C  0008               	return
  4474                           
  4475                           ;OverTemperature_B1.c: 48: Temp.ADRES = getAD(channel, 0xf0);
  4476  111D  30F0               	movlw	240
  4477  111E  0020               	movlb	0	; select bank0
  4478  111F  00A4               	movwf	??_getTemp_AD
  4479  1120  0824               	movf	??_getTemp_AD,w
  4480  1121  00A0               	movwf	getAD@adcon1
  4481  1122  0825               	movf	getTemp_AD@channel,w
  4482  1123  319E  2639  3191   	fcall	_getAD
  4483  1126  0020               	movlb	0	; select bank0
  4484  1127  0821               	movf	?_getAD+1,w
  4485  1128  0021               	movlb	1	; select bank1
  4486  1129  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4487  112A  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4488  112B  0020               	movlb	0	; select bank0
  4489  112C  0820               	movf	?_getAD,w
  4490  112D  0021               	movlb	1	; select bank1
  4491  112E  01E3               	clrf	(_Temp^(0+128)+12)
  4492  112F  07E3               	addwf	(_Temp^(0+128)+12),f
  4493                           
  4494                           ;OverTemperature_B1.c: 49: if (Temp.ADH[0] < Temp.ADRES) {
  4495  1130  0864               	movf	((_Temp+1)^(0+128)+12),w
  4496  1131  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4497  1132  1D03               	skipz
  4498  1133  2936               	goto	u11225
  4499  1134  0863               	movf	(_Temp^(0+128)+12),w
  4500  1135  025F               	subwf	(_Temp^(0+128)+8),w
  4501  1136                     u11225:	
  4502  1136  1803               	skipnc
  4503  1137  293F               	goto	l10421
  4504                           
  4505                           ;OverTemperature_B1.c: 50: Temp.ADH[0] = Temp.ADRES;
  4506  1138  0864               	movf	((_Temp+1)^(0+128)+12),w
  4507  1139  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4508  113A  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4509  113B  0863               	movf	(_Temp^(0+128)+12),w
  4510  113C  01DF               	clrf	(_Temp^(0+128)+8)
  4511  113D  07DF               	addwf	(_Temp^(0+128)+8),f
  4512                           
  4513                           ;OverTemperature_B1.c: 51: } else if (Temp.ADH[1] < Temp.ADRES) {
  4514  113E  0008               	return
  4515  113F                     l10421:	
  4516  113F  0864               	movf	((_Temp+1)^(0+128)+12),w
  4517  1140  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4518  1141  1D03               	skipz
  4519  1142  2945               	goto	u11235
  4520  1143  0863               	movf	(_Temp^(0+128)+12),w
  4521  1144  0261               	subwf	(_Temp^(0+128)+10),w
  4522  1145                     u11235:	
  4523  1145  1803               	skipnc
  4524  1146  0008               	return
  4525                           
  4526                           ;OverTemperature_B1.c: 52: Temp.ADH[1] = Temp.ADRES;
  4527  1147  0864               	movf	((_Temp+1)^(0+128)+12),w
  4528  1148  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4529  1149  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4530  114A  0863               	movf	(_Temp^(0+128)+12),w
  4531  114B  01E1               	clrf	(_Temp^(0+128)+10)
  4532  114C  07E1               	addwf	(_Temp^(0+128)+10),f
  4533  114D  0008               	return
  4534  114E                     __end_of_getTemp_AD:	
  4535                           
  4536                           	psect	text6
  4537  0B2F                     __ptext6:	
  4538 ;; *************** function _getLoad_AD *****************
  4539 ;; Defined at:
  4540 ;;		line 15 in file "../src/OverLoad_B1.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;  channel         1    wreg     unsigned char 
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;  channel         1    6[BANK0 ] unsigned char 
  4545 ;;  i               1    8[BANK0 ] unsigned char 
  4546 ;;  j               1    7[BANK0 ] unsigned char 
  4547 ;; Return value:  Size  Location     Type
  4548 ;;		None               void
  4549 ;; Registers used:
  4550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4557 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4558 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4559 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4560 ;;Total ram usage:        5 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    7
  4563 ;; This function calls:
  4564 ;;		_getAD
  4565 ;; This function is called by:
  4566 ;;		_main
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           
  4571                           ;psect for function _getLoad_AD
  4572  0B2F                     _getLoad_AD:	
  4573                           
  4574                           ;incstack = 0
  4575                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4576                           ;getLoad_AD@channel stored from wreg
  4577  0B2F  0020               	movlb	0	; select bank0
  4578  0B30  00A6               	movwf	getLoad_AD@channel
  4579                           
  4580                           ;OverLoad_B1.c: 16: char i = 0, j = 0;
  4581  0B31  01A8               	clrf	getLoad_AD@i
  4582  0B32  01A7               	clrf	getLoad_AD@j
  4583                           
  4584                           ;OverLoad_B1.c: 18: if (Load1.ADtoGO == 1) {
  4585  0B33  0022               	movlb	2	; select bank2
  4586  0B34  1E22               	btfss	_Load1^(0+256),4
  4587  0B35  0008               	return
  4588                           
  4589                           ;OverLoad_B1.c: 19: Load1.ADRES = getAD(channel, 0xc0);
  4590  0B36  30C0               	movlw	192
  4591  0B37  0020               	movlb	0	; select bank0
  4592  0B38  00A4               	movwf	??_getLoad_AD
  4593  0B39  0824               	movf	??_getLoad_AD,w
  4594  0B3A  00A0               	movwf	getAD@adcon1
  4595  0B3B  0826               	movf	getLoad_AD@channel,w
  4596  0B3C  319E  2639  318B   	fcall	_getAD
  4597  0B3F  0020               	movlb	0	; select bank0
  4598  0B40  0821               	movf	?_getAD+1,w
  4599  0B41  0022               	movlb	2	; select bank2
  4600  0B42  01C5               	clrf	((_Load1+1)^(0+256)+34)
  4601  0B43  07C5               	addwf	((_Load1+1)^(0+256)+34),f
  4602  0B44  0020               	movlb	0	; select bank0
  4603  0B45  0820               	movf	?_getAD,w
  4604  0B46  0022               	movlb	2	; select bank2
  4605  0B47  01C4               	clrf	(_Load1^(0+256)+34)
  4606  0B48  07C4               	addwf	(_Load1^(0+256)+34),f
  4607                           
  4608                           ;OverLoad_B1.c: 20: for (i = 0; i < 5; i++) {
  4609  0B49  0020               	movlb	0	; select bank0
  4610  0B4A  01A8               	clrf	getLoad_AD@i
  4611  0B4B  3005               	movlw	5
  4612  0B4C  0228               	subwf	getLoad_AD@i,w
  4613  0B4D  1803               	btfsc	3,0
  4614  0B4E  2B7A               	goto	l10397
  4615  0B4F                     l10387:	
  4616                           
  4617                           ;OverLoad_B1.c: 21: if (Load1.AH[i] < Load1.ADRES) {
  4618  0B4F  3528               	lslf	getLoad_AD@i,w
  4619  0B50  3E2A               	addlw	(_Load1+8)& (0+255)
  4620  0B51  0086               	movwf	6
  4621  0B52  3001               	movlw	1	; select bank2/3
  4622  0B53  0087               	movwf	7
  4623  0B54  3F40               	moviw [0]fsr1
  4624  0B55  00A4               	movwf	??_getLoad_AD
  4625  0B56  3F41               	moviw [1]fsr1
  4626  0B57  00A5               	movwf	??_getLoad_AD+1
  4627  0B58  0022               	movlb	2	; select bank2
  4628  0B59  0845               	movf	((_Load1+1)^(0+256)+34),w
  4629  0B5A  0020               	movlb	0	; select bank0
  4630  0B5B  0225               	subwf	??_getLoad_AD+1,w
  4631  0B5C  1D03               	skipz
  4632  0B5D  2B62               	goto	u11155
  4633  0B5E  0022               	movlb	2	; select bank2
  4634  0B5F  0844               	movf	(_Load1^(0+256)+34),w
  4635  0B60  0020               	movlb	0	; select bank0
  4636  0B61  0224               	subwf	??_getLoad_AD,w
  4637  0B62                     u11155:	
  4638  0B62  1803               	skipnc
  4639  0B63  2B72               	goto	l10393
  4640                           
  4641                           ;OverLoad_B1.c: 22: Load1.AH[i] = Load1.ADRES;
  4642  0B64  3528               	lslf	getLoad_AD@i,w
  4643  0B65  3E2A               	addlw	(_Load1+8)& (0+255)
  4644  0B66  0086               	movwf	6
  4645  0B67  3001               	movlw	1	; select bank2/3
  4646  0B68  0087               	movwf	7
  4647  0B69  0022               	movlb	2	; select bank2
  4648  0B6A  0844               	movf	(_Load1^(0+256)+34),w
  4649  0B6B  3FC0               	movwi [0]fsr1
  4650  0B6C  0845               	movf	((_Load1+1)^(0+256)+34),w
  4651  0B6D  3FC1               	movwi [1]fsr1
  4652                           
  4653                           ;OverLoad_B1.c: 23: j = 1;
  4654  0B6E  0020               	movlb	0	; select bank0
  4655  0B6F  01A7               	clrf	getLoad_AD@j
  4656  0B70  0AA7               	incf	getLoad_AD@j,f
  4657                           
  4658                           ;OverLoad_B1.c: 24: break;
  4659  0B71  2B7A               	goto	l10397
  4660  0B72                     l10393:	
  4661  0B72  3001               	movlw	1
  4662  0B73  00A4               	movwf	??_getLoad_AD
  4663  0B74  0824               	movf	??_getLoad_AD,w
  4664  0B75  07A8               	addwf	getLoad_AD@i,f
  4665  0B76  3005               	movlw	5
  4666  0B77  0228               	subwf	getLoad_AD@i,w
  4667  0B78  1C03               	skipc
  4668  0B79  2B4F               	goto	l10387
  4669  0B7A                     l10397:	
  4670                           
  4671                           ;OverLoad_B1.c: 25: }
  4672                           ;OverLoad_B1.c: 26: }
  4673                           ;OverLoad_B1.c: 27: if (j == 0) {
  4674  0B7A  08A7               	movf	getLoad_AD@j,f
  4675  0B7B  1D03               	skipz
  4676  0B7C  0008               	return
  4677                           
  4678                           ;OverLoad_B1.c: 28: for (i = 0; i < 5; i++) {
  4679  0B7D  01A8               	clrf	getLoad_AD@i
  4680  0B7E                     L1:	
  4681  0B7E  3005               	movlw	5
  4682  0B7F  0228               	subwf	getLoad_AD@i,w
  4683  0B80  1803               	btfsc	3,0
  4684  0B81  0008               	return
  4685                           
  4686                           ;OverLoad_B1.c: 29: if (Load1.AL[i] > Load1.ADRES) {
  4687  0B82  3528               	lslf	getLoad_AD@i,w
  4688  0B83  3E34               	addlw	(_Load1+18)& (0+255)
  4689  0B84  0086               	movwf	6
  4690  0B85  3001               	movlw	1	; select bank2/3
  4691  0B86  0087               	movwf	7
  4692  0B87  3F40               	moviw [0]fsr1
  4693  0B88  00A4               	movwf	??_getLoad_AD
  4694  0B89  3F41               	moviw [1]fsr1
  4695  0B8A  00A5               	movwf	??_getLoad_AD+1
  4696  0B8B  0825               	movf	??_getLoad_AD+1,w
  4697  0B8C  0022               	movlb	2	; select bank2
  4698  0B8D  0245               	subwf	((_Load1+1)^(0+256)+34),w
  4699  0B8E  1D03               	skipz
  4700  0B8F  2B94               	goto	u11195
  4701  0B90  0020               	movlb	0	; select bank0
  4702  0B91  0824               	movf	??_getLoad_AD,w
  4703  0B92  0022               	movlb	2	; select bank2
  4704  0B93  0244               	subwf	(_Load1^(0+256)+34),w
  4705  0B94                     u11195:	
  4706  0B94  1803               	skipnc
  4707  0B95  2BA2               	goto	l10409
  4708                           
  4709                           ;OverLoad_B1.c: 30: Load1.AL[i] = Load1.ADRES;
  4710  0B96  0020               	movlb	0	; select bank0
  4711  0B97  3528               	lslf	getLoad_AD@i,w
  4712  0B98  3E34               	addlw	(_Load1+18)& (0+255)
  4713  0B99  0086               	movwf	6
  4714  0B9A  3001               	movlw	1	; select bank2/3
  4715  0B9B  0087               	movwf	7
  4716  0B9C  0022               	movlb	2	; select bank2
  4717  0B9D  0844               	movf	(_Load1^(0+256)+34),w
  4718  0B9E  3FC0               	movwi [0]fsr1
  4719  0B9F  0845               	movf	((_Load1+1)^(0+256)+34),w
  4720  0BA0  3FC1               	movwi [1]fsr1
  4721                           
  4722                           ;OverLoad_B1.c: 31: break;
  4723  0BA1  0008               	return
  4724  0BA2                     l10409:	
  4725  0BA2  3001               	movlw	1
  4726  0BA3  0020               	movlb	0	; select bank0
  4727  0BA4  00A4               	movwf	??_getLoad_AD
  4728  0BA5  0824               	movf	??_getLoad_AD,w
  4729  0BA6  07A8               	addwf	getLoad_AD@i,f
  4730  0BA7  2B7E               	goto	L1
  4731  0BA8                     __end_of_getLoad_AD:	
  4732                           
  4733                           	psect	text7
  4734  1E39                     __ptext7:	
  4735 ;; *************** function _getAD *****************
  4736 ;; Defined at:
  4737 ;;		line 453 in file "../src/MCU_B1.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;  adcon0          1    wreg     unsigned char 
  4740 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  2    0[BANK0 ] int 
  4745 ;; Registers used:
  4746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4752 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4753 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4755 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4756 ;;Total ram usage:        4 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    6
  4759 ;; This function calls:
  4760 ;;		_Timeout_Counter
  4761 ;;		_set_TimeoutCleared
  4762 ;; This function is called by:
  4763 ;;		_getLoad_AD
  4764 ;;		_getTemp_AD
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           
  4769                           ;psect for function _getAD
  4770  1E39                     _getAD:	
  4771                           
  4772                           ;incstack = 0
  4773                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4774                           ;getAD@adcon0 stored from wreg
  4775  1E39  0020               	movlb	0	; select bank0
  4776  1E3A  00A3               	movwf	getAD@adcon0
  4777                           
  4778                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4779  1E3B  0823               	movf	getAD@adcon0,w
  4780  1E3C  0021               	movlb	1	; select bank1
  4781  1E3D  009D               	movwf	29	;volatile
  4782                           
  4783                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4784  1E3E  0020               	movlb	0	; select bank0
  4785  1E3F  0820               	movf	getAD@adcon1,w
  4786  1E40  0021               	movlb	1	; select bank1
  4787  1E41  009E               	movwf	30	;volatile
  4788                           
  4789                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4790  1E42  149D               	bsf	29,1	;volatile
  4791                           
  4792                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4793  1E43  2E47               	goto	l9835
  4794  1E44                     l9833:	
  4795                           
  4796                           ;MCU_B1.c: 458: Timeout_Counter();
  4797  1E44  319C  249A  319E   	fcall	_Timeout_Counter
  4798  1E47                     l9835:	
  4799  1E47  0021               	movlb	1	; select bank1
  4800  1E48  1C9D               	btfss	29,1	;volatile
  4801  1E49  2E4C               	goto	l9839
  4802  1E4A  1D2D               	btfss	(_myMain^(0+128)+13),2
  4803  1E4B  2E44               	goto	l9833
  4804  1E4C                     l9839:	
  4805                           
  4806                           ;MCU_B1.c: 459: };
  4807                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4808  1E4C  3199  21E5         	fcall	_set_TimeoutCleared
  4809                           
  4810                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4811  1E4E  0021               	movlb	1	; select bank1
  4812  1E4F  081C               	movf	28,w	;volatile
  4813  1E50  0020               	movlb	0	; select bank0
  4814  1E51  01A1               	clrf	?_getAD+1
  4815  1E52  07A1               	addwf	?_getAD+1,f
  4816  1E53  0021               	movlb	1	; select bank1
  4817  1E54  081B               	movf	27,w	;volatile
  4818  1E55  0020               	movlb	0	; select bank0
  4819  1E56  01A0               	clrf	?_getAD
  4820  1E57  07A0               	addwf	?_getAD,f
  4821  1E58  0008               	return
  4822  1E59                     __end_of_getAD:	
  4823                           
  4824                           	psect	text8
  4825  1C12                     __ptext8:	
  4826 ;; *************** function _WDT_Main *****************
  4827 ;; Defined at:
  4828 ;;		line 1019 in file "../src/MCU_B1.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;		None
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;		None
  4833 ;; Return value:  Size  Location     Type
  4834 ;;		None               void
  4835 ;; Registers used:
  4836 ;;		wreg, status,2, status,0, pclath, cstack
  4837 ;; Tracked objects:
  4838 ;;		On entry : 0/0
  4839 ;;		On exit  : 0/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4845 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4846 ;;Total ram usage:        1 bytes
  4847 ;; Hardware stack levels used:    1
  4848 ;; Hardware stack levels required when called:    6
  4849 ;; This function calls:
  4850 ;;		_WDT_Clearing
  4851 ;; This function is called by:
  4852 ;;		_main
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           
  4857                           ;psect for function _WDT_Main
  4858  1C12                     _WDT_Main:	
  4859                           
  4860                           ;MCU_B1.c: 1020: if (WDT.Enable == 1) {
  4861                           
  4862                           ;incstack = 0
  4863                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4864  1C12  0021               	movlb	1	; select bank1
  4865  1C13  1C4B               	btfss	_WDT^(0+128),0
  4866  1C14  0008               	return
  4867                           
  4868                           ;MCU_B1.c: 1021: if (WDT.Timer-- > 0) {
  4869  1C15  3001               	movlw	1
  4870  1C16  02CC               	subwf	(_WDT^(0+128)+1),f
  4871  1C17  084C               	movf	(_WDT^(0+128)+1),w
  4872  1C18  3AFF               	xorlw	255
  4873  1C19  1903               	skipnz
  4874  1C1A  0008               	return
  4875                           
  4876                           ;MCU_B1.c: 1022: WDT.Timer = 100;
  4877  1C1B  3064               	movlw	100
  4878  1C1C  0020               	movlb	0	; select bank0
  4879  1C1D  00A0               	movwf	??_WDT_Main
  4880  1C1E  0820               	movf	??_WDT_Main,w
  4881  1C1F  0021               	movlb	1	; select bank1
  4882  1C20  00CC               	movwf	(_WDT^(0+128)+1)
  4883                           
  4884                           ;MCU_B1.c: 1023: WDT_Clearing();
  4885  1C21  3180  2002         	fcall	_WDT_Clearing
  4886  1C23  0008               	return
  4887  1C24                     __end_of_WDT_Main:	
  4888                           
  4889                           	psect	text9
  4890  0002                     __ptext9:	
  4891 ;; *************** function _WDT_Clearing *****************
  4892 ;; Defined at:
  4893 ;;		line 1029 in file "../src/MCU_B1.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;		None
  4898 ;; Return value:  Size  Location     Type
  4899 ;;		None               void
  4900 ;; Registers used:
  4901 ;;		None
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;Total ram usage:        0 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    5
  4914 ;; This function calls:
  4915 ;;		Nothing
  4916 ;; This function is called by:
  4917 ;;		_WDT_Main
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           
  4922                           ;psect for function _WDT_Clearing
  4923  0002                     _WDT_Clearing:	
  4924                           
  4925                           ;incstack = 0
  4926                           ; Regs used in _WDT_Clearing: []
  4927  0002  0064               	clrwdt	;# 
  4928  0003  0008               	return
  4929  0004                     __end_of_WDT_Clearing:	
  4930                           
  4931                           	psect	text10
  4932  19D2                     __ptext10:	
  4933 ;; *************** function _Temp_Main *****************
  4934 ;; Defined at:
  4935 ;;		line 64 in file "../src/OverTemperature_B1.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;		None
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;		None
  4940 ;; Return value:  Size  Location     Type
  4941 ;;		None               void
  4942 ;; Registers used:
  4943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4944 ;; Tracked objects:
  4945 ;;		On entry : 0/0
  4946 ;;		On exit  : 0/0
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;Total ram usage:        0 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; Hardware stack levels required when called:   11
  4956 ;; This function calls:
  4957 ;;		_setTemp_Main
  4958 ;; This function is called by:
  4959 ;;		_main
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           
  4964                           ;psect for function _Temp_Main
  4965  19D2                     _Temp_Main:	
  4966                           
  4967                           ;OverTemperature_B1.c: 66: setTemp_Main();
  4968                           
  4969                           ;incstack = 0
  4970                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4971  19D2  318D  2543         	fcall	_setTemp_Main
  4972  19D4  0008               	return
  4973  19D5                     __end_of_Temp_Main:	
  4974                           
  4975                           	psect	text11
  4976  0D43                     __ptext11:	
  4977 ;; *************** function _setTemp_Main *****************
  4978 ;; Defined at:
  4979 ;;		line 71 in file "../src/OverTemperature_B1.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;		None
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;		None
  4984 ;; Return value:  Size  Location     Type
  4985 ;;		None               void
  4986 ;; Registers used:
  4987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4997 ;;Total ram usage:        2 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:   10
  5000 ;; This function calls:
  5001 ;;		_getMain_AD_Safe
  5002 ;;		_setOverTemp_Exceptions
  5003 ;; This function is called by:
  5004 ;;		_Temp_Main
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           
  5009                           ;psect for function _setTemp_Main
  5010  0D43                     _setTemp_Main:	
  5011                           
  5012                           ;OverTemperature_B1.c: 72: if (Temp.Enable == 1) {
  5013                           
  5014                           ;incstack = 0
  5015                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5016  0D43  0021               	movlb	1	; select bank1
  5017  0D44  1C57               	btfss	_Temp^(0+128),0
  5018  0D45  0008               	return
  5019                           
  5020                           ;OverTemperature_B1.c: 73: if (Temp.ADtoGO == 0) {
  5021  0D46  1957               	btfsc	_Temp^(0+128),2
  5022  0D47  2D65               	goto	l9919
  5023                           
  5024                           ;OverTemperature_B1.c: 74: Temp.Time++;
  5025  0D48  3001               	movlw	1
  5026  0D49  07D8               	addwf	(_Temp^(0+128)+1),f
  5027  0D4A  3000               	movlw	0
  5028  0D4B  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5029                           
  5030                           ;OverTemperature_B1.c: 75: if (Temp.Time >= 500) {
  5031  0D4C  3001               	movlw	1
  5032  0D4D  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5033  0D4E  30F4               	movlw	244
  5034  0D4F  1903               	skipnz
  5035  0D50  0258               	subwf	(_Temp^(0+128)+1),w
  5036  0D51  1C03               	skipc
  5037  0D52  0008               	return
  5038                           
  5039                           ;OverTemperature_B1.c: 76: if (getMain_AD_Safe() == 1) {
  5040  0D53  319B  233B  318D   	fcall	_getMain_AD_Safe
  5041  0D56  3A01               	xorlw	1
  5042  0D57  1D03               	skipz
  5043  0D58  2D5F               	goto	l9917
  5044                           
  5045                           ;OverTemperature_B1.c: 77: Temp.Time = 0;
  5046  0D59  0021               	movlb	1	; select bank1
  5047  0D5A  01D8               	clrf	(_Temp^(0+128)+1)
  5048  0D5B  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5049                           
  5050                           ;OverTemperature_B1.c: 78: Temp.ADtoGO = 1;
  5051  0D5C  1557               	bsf	_Temp^(0+128),2
  5052                           
  5053                           ;OverTemperature_B1.c: 79: Temp.Safe = 0;
  5054  0D5D  1257               	bcf	_Temp^(0+128),4
  5055                           
  5056                           ;OverTemperature_B1.c: 81: } else {
  5057  0D5E  0008               	return
  5058  0D5F                     l9917:	
  5059                           
  5060                           ;OverTemperature_B1.c: 82: Temp.Time = 500;
  5061  0D5F  30F4               	movlw	244
  5062  0D60  0021               	movlb	1	; select bank1
  5063  0D61  00D8               	movwf	(_Temp^(0+128)+1)
  5064  0D62  3001               	movlw	1
  5065  0D63  00D9               	movwf	(_Temp^(0+128)+2)
  5066                           
  5067                           ;OverTemperature_B1.c: 83: }
  5068                           ;OverTemperature_B1.c: 84: }
  5069                           ;OverTemperature_B1.c: 85: } else {
  5070  0D64  0008               	return
  5071  0D65                     l9919:	
  5072                           
  5073                           ;OverTemperature_B1.c: 86: Temp.Time++;
  5074  0D65  3001               	movlw	1
  5075  0D66  07D8               	addwf	(_Temp^(0+128)+1),f
  5076  0D67  3000               	movlw	0
  5077  0D68  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5078                           
  5079                           ;OverTemperature_B1.c: 87: if (Temp.Time >= 5) {
  5080  0D69  3000               	movlw	0
  5081  0D6A  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5082  0D6B  3005               	movlw	5
  5083  0D6C  1903               	skipnz
  5084  0D6D  0258               	subwf	(_Temp^(0+128)+1),w
  5085  0D6E  1C03               	skipc
  5086  0D6F  0008               	return
  5087                           
  5088                           ;OverTemperature_B1.c: 88: Temp.Time = 0;
  5089  0D70  01D8               	clrf	(_Temp^(0+128)+1)
  5090  0D71  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5091                           
  5092                           ;OverTemperature_B1.c: 89: Temp.ADtoGO = 0;
  5093  0D72  1157               	bcf	_Temp^(0+128),2
  5094                           
  5095                           ;OverTemperature_B1.c: 90: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5096  0D73  300A               	movlw	10
  5097  0D74  3ED7               	addlw	_Temp& (0+255)
  5098  0D75  0086               	movwf	6
  5099  0D76  0187               	clrf	7
  5100  0D77  3008               	movlw	8
  5101  0D78  3ED7               	addlw	_Temp& (0+255)
  5102  0D79  0084               	movwf	4
  5103  0D7A  0185               	clrf	5
  5104  0D7B  3F40               	moviw [0]fsr1
  5105  0D7C  0700               	addwf	0,w
  5106  0D7D  0020               	movlb	0	; select bank0
  5107  0D7E  00B1               	movwf	??_setTemp_Main
  5108  0D7F  3101               	addfsr 0,1
  5109  0D80  3F41               	moviw [1]fsr1
  5110  0D81  3D00               	addwfc	0,w
  5111  0D82  00B2               	movwf	??_setTemp_Main+1
  5112  0D83  36B2               	lsrf	??_setTemp_Main+1,f
  5113  0D84  0CB1               	rrf	??_setTemp_Main,f
  5114  0D85  0831               	movf	??_setTemp_Main,w
  5115  0D86  0021               	movlb	1	; select bank1
  5116  0D87  00DD               	movwf	(_Temp^(0+128)+6)
  5117  0D88  0020               	movlb	0	; select bank0
  5118  0D89  0832               	movf	??_setTemp_Main+1,w
  5119  0D8A  0021               	movlb	1	; select bank1
  5120  0D8B  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5121                           
  5122                           ;OverTemperature_B1.c: 100: Temp.SafeValue = 600;
  5123  0D8C  3058               	movlw	88
  5124  0D8D  00E5               	movwf	(_Temp^(0+128)+14)
  5125  0D8E  3002               	movlw	2
  5126  0D8F  00E6               	movwf	(_Temp^(0+128)+15)
  5127                           
  5128                           ;OverTemperature_B1.c: 101: Temp.DangerValue = 550;
  5129  0D90  3026               	movlw	38
  5130  0D91  00E7               	movwf	(_Temp^(0+128)+16)
  5131  0D92  3002               	movlw	2
  5132  0D93  00E8               	movwf	(_Temp^(0+128)+17)
  5133                           
  5134                           ;OverTemperature_B1.c: 107: if (Temp.ERROR == 1) {
  5135  0D94  1CD7               	btfss	_Temp^(0+128),1
  5136  0D95  2DAE               	goto	l9945
  5137                           
  5138                           ;OverTemperature_B1.c: 108: if (Temp.AD >= Temp.SafeValue) {
  5139  0D96  0866               	movf	((_Temp+1)^(0+128)+14),w
  5140  0D97  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5141  0D98  1D03               	skipz
  5142  0D99  2D9C               	goto	u10335
  5143  0D9A  0865               	movf	(_Temp^(0+128)+14),w
  5144  0D9B  025D               	subwf	(_Temp^(0+128)+6),w
  5145  0D9C                     u10335:	
  5146  0D9C  1C03               	skipc
  5147  0D9D  2DC6               	goto	l9955
  5148                           
  5149                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5150  0D9E  3001               	movlw	1
  5151  0D9F  0020               	movlb	0	; select bank0
  5152  0DA0  00B1               	movwf	??_setTemp_Main
  5153  0DA1  0831               	movf	??_setTemp_Main,w
  5154  0DA2  0021               	movlb	1	; select bank1
  5155  0DA3  07DA               	addwf	(_Temp^(0+128)+3),f
  5156                           
  5157                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5158  0DA4  3003               	movlw	3
  5159  0DA5  025A               	subwf	(_Temp^(0+128)+3),w
  5160  0DA6  1C03               	skipc
  5161  0DA7  2DC8               	goto	l9957
  5162                           
  5163                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5164  0DA8  01DA               	clrf	(_Temp^(0+128)+3)
  5165                           
  5166                           ;OverTemperature_B1.c: 112: setOverTemp_Exceptions(0);
  5167  0DA9  3000               	movlw	0
  5168  0DAA  3191  21F7  318D   	fcall	_setOverTemp_Exceptions
  5169                           
  5170                           ;OverTemperature_B1.c: 113: }
  5171                           ;OverTemperature_B1.c: 114: } else {
  5172  0DAD  2DC8               	goto	l9957
  5173  0DAE                     l9945:	
  5174                           ;OverTemperature_B1.c: 116: }
  5175                           ;OverTemperature_B1.c: 117: } else {
  5176                           
  5177                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5178                           
  5179                           
  5180                           ;OverTemperature_B1.c: 118: if (Temp.AD <= Temp.DangerValue) {
  5181  0DAE  085E               	movf	((_Temp+1)^(0+128)+6),w
  5182  0DAF  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5183  0DB0  1D03               	skipz
  5184  0DB1  2DB4               	goto	u10355
  5185  0DB2  085D               	movf	(_Temp^(0+128)+6),w
  5186  0DB3  0267               	subwf	(_Temp^(0+128)+16),w
  5187  0DB4                     u10355:	
  5188  0DB4  1C03               	skipc
  5189  0DB5  2DC6               	goto	l9955
  5190                           
  5191                           ;OverTemperature_B1.c: 119: Temp.Count++;
  5192  0DB6  3001               	movlw	1
  5193  0DB7  0020               	movlb	0	; select bank0
  5194  0DB8  00B1               	movwf	??_setTemp_Main
  5195  0DB9  0831               	movf	??_setTemp_Main,w
  5196  0DBA  0021               	movlb	1	; select bank1
  5197  0DBB  07DA               	addwf	(_Temp^(0+128)+3),f
  5198                           
  5199                           ;OverTemperature_B1.c: 120: if (Temp.Count >= 3) {
  5200  0DBC  3003               	movlw	3
  5201  0DBD  025A               	subwf	(_Temp^(0+128)+3),w
  5202  0DBE  1C03               	skipc
  5203  0DBF  2DC8               	goto	l9957
  5204                           
  5205                           ;OverTemperature_B1.c: 121: Temp.Count = 0;
  5206  0DC0  01DA               	clrf	(_Temp^(0+128)+3)
  5207                           
  5208                           ;OverTemperature_B1.c: 122: setOverTemp_Exceptions(1);
  5209  0DC1  3001               	movlw	1
  5210  0DC2  3191  21F7  318D   	fcall	_setOverTemp_Exceptions
  5211                           
  5212                           ;OverTemperature_B1.c: 123: }
  5213                           ;OverTemperature_B1.c: 124: } else {
  5214  0DC5  2DC8               	goto	l9957
  5215  0DC6                     l9955:	
  5216                           
  5217                           ;OverTemperature_B1.c: 125: Temp.Count = 0;
  5218  0DC6  0021               	movlb	1	; select bank1
  5219  0DC7  01DA               	clrf	(_Temp^(0+128)+3)
  5220  0DC8                     l9957:	
  5221                           
  5222                           ;OverTemperature_B1.c: 126: }
  5223                           ;OverTemperature_B1.c: 127: }
  5224                           ;OverTemperature_B1.c: 128: if (Temp.ERROR == 0) {
  5225  0DC8  0021               	movlb	1	; select bank1
  5226  0DC9  1CD7               	btfss	_Temp^(0+128),1
  5227                           
  5228                           ;OverTemperature_B1.c: 129: Temp.Safe = 1;
  5229  0DCA  1657               	bsf	_Temp^(0+128),4
  5230                           
  5231                           ;OverTemperature_B1.c: 130: }
  5232                           ;OverTemperature_B1.c: 131: product->Data[24]=Temp.AD >> 8;
  5233  0DCB  085E               	movf	((_Temp+1)^(0+128)+6),w
  5234  0DCC  0020               	movlb	0	; select bank0
  5235  0DCD  00B1               	movwf	??_setTemp_Main
  5236  0DCE  086D               	movf	_product,w
  5237  0DCF  3E18               	addlw	24
  5238  0DD0  0086               	movwf	6
  5239  0DD1  3002               	movlw	2	; select bank4/5
  5240  0DD2  0087               	movwf	7
  5241  0DD3  0831               	movf	??_setTemp_Main,w
  5242  0DD4  0081               	movwf	1
  5243                           
  5244                           ;OverTemperature_B1.c: 132: product->Data[25]=Temp.AD;
  5245  0DD5  0021               	movlb	1	; select bank1
  5246  0DD6  085D               	movf	(_Temp^(0+128)+6),w
  5247  0DD7  0020               	movlb	0	; select bank0
  5248  0DD8  00B1               	movwf	??_setTemp_Main
  5249  0DD9  086D               	movf	_product,w
  5250  0DDA  3E19               	addlw	25
  5251  0DDB  0086               	movwf	6
  5252  0DDC  3002               	movlw	2	; select bank4/5
  5253  0DDD  0087               	movwf	7
  5254  0DDE  0831               	movf	??_setTemp_Main,w
  5255  0DDF  0081               	movwf	1
  5256                           
  5257                           ;OverTemperature_B1.c: 135: Temp.ADH[0] = 0;
  5258  0DE0  0021               	movlb	1	; select bank1
  5259  0DE1  01DF               	clrf	(_Temp^(0+128)+8)
  5260  0DE2  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5261                           
  5262                           ;OverTemperature_B1.c: 136: Temp.ADH[1] = 0;
  5263  0DE3  01E1               	clrf	(_Temp^(0+128)+10)
  5264  0DE4  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5265  0DE5  0008               	return
  5266  0DE6                     __end_of_setTemp_Main:	
  5267                           
  5268                           	psect	text12
  5269  11F7                     __ptext12:	
  5270 ;; *************** function _setOverTemp_Exceptions *****************
  5271 ;; Defined at:
  5272 ;;		line 143 in file "../src/OverTemperature_B1.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;  command         1    wreg     unsigned char 
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;  command         1   16[BANK0 ] unsigned char 
  5277 ;;  i               1   15[BANK0 ] unsigned char 
  5278 ;; Return value:  Size  Location     Type
  5279 ;;		None               void
  5280 ;; Registers used:
  5281 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5290 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;Total ram usage:        3 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; Hardware stack levels required when called:    9
  5294 ;; This function calls:
  5295 ;;		_DimmerLights_Exceptions
  5296 ;;		_setBuz
  5297 ;;		_setLED
  5298 ;;		_setRF_Enable
  5299 ;;		_setSw_Enable
  5300 ;; This function is called by:
  5301 ;;		_setTemp_Main
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           
  5306                           ;psect for function _setOverTemp_Exceptions
  5307  11F7                     _setOverTemp_Exceptions:	
  5308                           
  5309                           ;incstack = 0
  5310                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5311                           ;setOverTemp_Exceptions@command stored from wreg
  5312  11F7  0020               	movlb	0	; select bank0
  5313  11F8  00B0               	movwf	setOverTemp_Exceptions@command
  5314                           
  5315                           ;OverTemperature_B1.c: 144: char i = command == 1 ? 0 : 1;
  5316  11F9  0830               	movf	setOverTemp_Exceptions@command,w
  5317  11FA  3A01               	xorlw	1
  5318  11FB  3000               	movlw	0
  5319  11FC  1D03               	skipz
  5320  11FD  3001               	movlw	1
  5321  11FE  00AE               	movwf	??_setOverTemp_Exceptions
  5322  11FF  082E               	movf	??_setOverTemp_Exceptions,w
  5323  1200  00AF               	movwf	setOverTemp_Exceptions@i
  5324                           
  5325                           ;OverTemperature_B1.c: 145: Temp.ERROR = command;
  5326  1201  0830               	movf	setOverTemp_Exceptions@command,w
  5327  1202  0021               	movlb	1	; select bank1
  5328  1203  10D7               	bcf	_Temp^(0+128),1
  5329  1204  1D03               	skipz
  5330  1205  14D7               	bsf	_Temp^(0+128),1
  5331                           
  5332                           ;OverTemperature_B1.c: 146: Temp.Safe = i;
  5333  1206  0020               	movlb	0	; select bank0
  5334  1207  082F               	movf	setOverTemp_Exceptions@i,w
  5335  1208  0021               	movlb	1	; select bank1
  5336  1209  1257               	bcf	_Temp^(0+128),4
  5337  120A  1D03               	skipz
  5338  120B  1657               	bsf	_Temp^(0+128),4
  5339                           
  5340                           ;OverTemperature_B1.c: 147: if (command == 1) {
  5341  120C  0020               	movlb	0	; select bank0
  5342  120D  0830               	movf	setOverTemp_Exceptions@command,w
  5343  120E  3A01               	xorlw	1
  5344  120F  1D03               	skipz
  5345  1210  2A16               	goto	l9455
  5346                           
  5347                           ;OverTemperature_B1.c: 148: DimmerLights_Exceptions(1);
  5348  1211  3001               	movlw	1
  5349  1212  3193  23D2  3191   	fcall	_DimmerLights_Exceptions
  5350                           
  5351                           ;OverTemperature_B1.c: 152: } else if (command == 0) {
  5352  1215  2A22               	goto	l9459
  5353  1216                     l9455:	
  5354  1216  0020               	movlb	0	; select bank0
  5355  1217  08B0               	movf	setOverTemp_Exceptions@command,f
  5356  1218  1D03               	skipz
  5357  1219  2A22               	goto	l9459
  5358                           
  5359                           ;OverTemperature_B1.c: 153: setBuz(2, 100);
  5360  121A  3064               	movlw	100
  5361  121B  00A9               	movwf	setBuz@time
  5362  121C  3000               	movlw	0
  5363  121D  00AA               	movwf	setBuz@time+1
  5364  121E  3002               	movlw	2
  5365  121F  3195  256B  3191   	fcall	_setBuz
  5366  1222                     l9459:	
  5367                           
  5368                           ;OverTemperature_B1.c: 154: }
  5369                           ;OverTemperature_B1.c: 160: setLED(99, command + 10);
  5370  1222  0020               	movlb	0	; select bank0
  5371  1223  0830               	movf	setOverTemp_Exceptions@command,w
  5372  1224  3E0A               	addlw	10
  5373  1225  00AE               	movwf	??_setOverTemp_Exceptions
  5374  1226  082E               	movf	??_setOverTemp_Exceptions,w
  5375  1227  00A2               	movwf	setLED@command
  5376  1228  3063               	movlw	99
  5377  1229  3196  261F  3191   	fcall	_setLED
  5378                           
  5379                           ;OverTemperature_B1.c: 163: setSw_Enable(i);
  5380  122C  0020               	movlb	0	; select bank0
  5381  122D  082F               	movf	setOverTemp_Exceptions@i,w
  5382  122E  319D  25A4  3191   	fcall	_setSw_Enable
  5383                           
  5384                           ;OverTemperature_B1.c: 165: setRF_Enable(i);
  5385  1231  0020               	movlb	0	; select bank0
  5386  1232  082F               	movf	setOverTemp_Exceptions@i,w
  5387  1233  319B  2300         	fcall	_setRF_Enable
  5388  1235  0008               	return
  5389  1236                     __end_of_setOverTemp_Exceptions:	
  5390                           
  5391                           	psect	text13
  5392  1B3B                     __ptext13:	
  5393 ;; *************** function _getMain_AD_Safe *****************
  5394 ;; Defined at:
  5395 ;;		line 301 in file "../src/Main_B1.c"
  5396 ;; Parameters:    Size  Location     Type
  5397 ;;		None
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;  result          1    0[BANK0 ] unsigned char 
  5400 ;; Return value:  Size  Location     Type
  5401 ;;                  1    wreg      unsigned char 
  5402 ;; Registers used:
  5403 ;;		wreg, status,2
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;Total ram usage:        1 bytes
  5414 ;; Hardware stack levels used:    1
  5415 ;; Hardware stack levels required when called:    5
  5416 ;; This function calls:
  5417 ;;		Nothing
  5418 ;; This function is called by:
  5419 ;;		_setTemp_Main
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           
  5424                           ;psect for function _getMain_AD_Safe
  5425  1B3B                     _getMain_AD_Safe:	
  5426                           
  5427                           ;Main_B1.c: 302: char result = 1;
  5428                           
  5429                           ;incstack = 0
  5430                           ; Regs used in _getMain_AD_Safe: [wreg+status,2]
  5431  1B3B  0020               	movlb	0	; select bank0
  5432  1B3C  01A0               	clrf	getMain_AD_Safe@result
  5433  1B3D  0AA0               	incf	getMain_AD_Safe@result,f
  5434                           
  5435                           ;Main_B1.c: 308: if (result == 1) {
  5436  1B3E  0820               	movf	getMain_AD_Safe@result,w
  5437  1B3F  3A01               	xorlw	1
  5438  1B40  1D03               	skipz
  5439  1B41  2B48               	goto	l9447
  5440                           
  5441                           ;Main_B1.c: 309: result = Load1.Safe == 1 ? 1 : 0;
  5442  1B42  3000               	movlw	0
  5443  1B43  0022               	movlb	2	; select bank2
  5444  1B44  19A2               	btfsc	_Load1^(0+256),3
  5445  1B45  3001               	movlw	1
  5446  1B46  0020               	movlb	0	; select bank0
  5447  1B47  00A0               	movwf	getMain_AD_Safe@result
  5448  1B48                     l9447:	
  5449                           
  5450                           ;Main_B1.c: 310: }
  5451                           ;Main_B1.c: 312: return result;
  5452  1B48  0820               	movf	getMain_AD_Safe@result,w
  5453  1B49  0008               	return
  5454  1B4A                     __end_of_getMain_AD_Safe:	
  5455                           
  5456                           	psect	text14
  5457  19CF                     __ptext14:	
  5458 ;; *************** function _Temp_Initialization *****************
  5459 ;; Defined at:
  5460 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;		None
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;		None
  5465 ;; Return value:  Size  Location     Type
  5466 ;;		None               void
  5467 ;; Registers used:
  5468 ;;		status,2, status,0, pclath, cstack
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5478 ;;Total ram usage:        0 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    6
  5481 ;; This function calls:
  5482 ;;		_setTemp_Initialization
  5483 ;; This function is called by:
  5484 ;;		_main
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           
  5489                           ;psect for function _Temp_Initialization
  5490  19CF                     _Temp_Initialization:	
  5491                           
  5492                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5493                           
  5494                           ;incstack = 0
  5495                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5496  19CF  3199  21CC         	fcall	_setTemp_Initialization
  5497  19D1  0008               	return
  5498  19D2                     __end_of_Temp_Initialization:	
  5499                           
  5500                           	psect	text15
  5501  19CC                     __ptext15:	
  5502 ;; *************** function _setTemp_Initialization *****************
  5503 ;; Defined at:
  5504 ;;		line 59 in file "../src/OverTemperature_B1.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;		None
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;		None
  5509 ;; Return value:  Size  Location     Type
  5510 ;;		None               void
  5511 ;; Registers used:
  5512 ;;		None
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;Total ram usage:        0 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    5
  5525 ;; This function calls:
  5526 ;;		Nothing
  5527 ;; This function is called by:
  5528 ;;		_Temp_Initialization
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           
  5533                           ;psect for function _setTemp_Initialization
  5534  19CC                     _setTemp_Initialization:	
  5535                           
  5536                           ;OverTemperature_B1.c: 60: Temp.Safe = 1;
  5537                           
  5538                           ;incstack = 0
  5539                           ; Regs used in _setTemp_Initialization: []
  5540  19CC  0021               	movlb	1	; select bank1
  5541  19CD  1657               	bsf	_Temp^(0+128),4
  5542  19CE  0008               	return
  5543  19CF                     __end_of_setTemp_Initialization:	
  5544                           
  5545                           	psect	text16
  5546  1A40                     __ptext16:	
  5547 ;; *************** function _Switch_Main *****************
  5548 ;; Defined at:
  5549 ;;		line 67 in file "../src/Switch_B1.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;		None
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;		None
  5554 ;; Return value:  Size  Location     Type
  5555 ;;		None               void
  5556 ;; Registers used:
  5557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5567 ;;Total ram usage:        0 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; Hardware stack levels required when called:   11
  5570 ;; This function calls:
  5571 ;;		_setSw_Main
  5572 ;; This function is called by:
  5573 ;;		_main
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           
  5578                           ;psect for function _Switch_Main
  5579  1A40                     _Switch_Main:	
  5580                           
  5581                           ;Switch_B1.c: 69: setSw_Main(1);
  5582                           
  5583                           ;incstack = 0
  5584                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5585  1A40  3001               	movlw	1
  5586  1A41  3183  237B  319A   	fcall	_setSw_Main
  5587                           
  5588                           ;Switch_B1.c: 73: setSw_Main(2);
  5589  1A44  3002               	movlw	2
  5590  1A45  3183  237B         	fcall	_setSw_Main
  5591  1A47  0008               	return
  5592  1A48                     __end_of_Switch_Main:	
  5593                           
  5594                           	psect	text17
  5595  037B                     __ptext17:	
  5596 ;; *************** function _setSw_Main *****************
  5597 ;; Defined at:
  5598 ;;		line 117 in file "../src/Switch_B1.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  sw              1    wreg     unsigned char 
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;  sw              1   73[BANK0 ] unsigned char 
  5603 ;; Return value:  Size  Location     Type
  5604 ;;		None               void
  5605 ;; Registers used:
  5606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5613 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5614 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5615 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5616 ;;Total ram usage:        5 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; Hardware stack levels required when called:   10
  5619 ;; This function calls:
  5620 ;;		_SwPointSelect
  5621 ;;		_Sw_DimmerAdjFunc
  5622 ;;		_Sw_DimmerOffFunc
  5623 ;;		_Sw_DimmerOnFunc
  5624 ;;		_setBuz
  5625 ;;		_setRF_Learn
  5626 ;; This function is called by:
  5627 ;;		_Switch_Main
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           
  5632                           ;psect for function _setSw_Main
  5633  037B                     _setSw_Main:	
  5634                           
  5635                           ;incstack = 0
  5636                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5637                           ;setSw_Main@sw stored from wreg
  5638  037B  0020               	movlb	0	; select bank0
  5639  037C  00E9               	movwf	setSw_Main@sw
  5640                           
  5641                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5642  037D  0869               	movf	setSw_Main@sw,w
  5643  037E  3187  27EC  3183   	fcall	_SwPointSelect
  5644                           
  5645                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5646  0381  0020               	movlb	0	; select bank0
  5647  0382  086C               	movf	_Sw,w
  5648  0383  0086               	movwf	6
  5649  0384  3001               	movlw	1	; select bank2/3
  5650  0385  0087               	movwf	7
  5651  0386  1C01               	btfss	1,0
  5652  0387  0008               	return
  5653                           
  5654                           ;Switch_B1.c: 131: if (sw == 1) {
  5655  0388  0869               	movf	setSw_Main@sw,w
  5656  0389  3A01               	xorlw	1
  5657  038A  1D03               	skipz
  5658  038B  2B98               	goto	l10105
  5659                           
  5660                           ;Switch_B1.c: 132: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  5661  038C  01E7               	clrf	_setSw_Main$6832
  5662  038D  0AE7               	incf	_setSw_Main$6832,f
  5663  038E  1F0C               	btfss	12,6	;volatile
  5664  038F  1A0C               	btfsc	12,4	;volatile
  5665  0390  2B92               	goto	l10103
  5666  0391  01E7               	clrf	_setSw_Main$6832
  5667  0392                     l10103:	
  5668  0392  086C               	movf	_Sw,w
  5669  0393  0086               	movwf	6
  5670  0394  3001               	movlw	1	; select bank2/3
  5671  0395  0087               	movwf	7
  5672  0396  0867               	movf	_setSw_Main$6832,w
  5673  0397  2BA7               	goto	L2
  5674  0398                     l10105:	
  5675                           ;Switch_B1.c: 133: } else if (sw == 2) {
  5676                           
  5677  0398  0869               	movf	setSw_Main@sw,w
  5678  0399  3A02               	xorlw	2
  5679  039A  1D03               	skipz
  5680  039B  2BAA               	goto	l10115
  5681                           
  5682                           ;Switch_B1.c: 134: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  5683  039C  01E8               	clrf	_setSw_Main$6833
  5684  039D  0AE8               	incf	_setSw_Main$6833,f
  5685  039E  1C0C               	btfss	12,0	;volatile
  5686  039F  188D               	btfsc	13,1	;volatile
  5687  03A0  2BA2               	goto	l10113
  5688  03A1  01E8               	clrf	_setSw_Main$6833
  5689  03A2                     l10113:	
  5690  03A2  086C               	movf	_Sw,w
  5691  03A3  0086               	movwf	6
  5692  03A4  3001               	movlw	1	; select bank2/3
  5693  03A5  0087               	movwf	7
  5694  03A6  0868               	movf	_setSw_Main$6833,w
  5695  03A7                     L2:	
  5696  03A7  1081               	bcf	1,1
  5697  03A8  1D03               	skipz
  5698  03A9  1481               	bsf	1,1
  5699  03AA                     l10115:	
  5700                           
  5701                           ;Switch_B1.c: 135: }
  5702                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  5703  03AA  086C               	movf	_Sw,w
  5704  03AB  0086               	movwf	6
  5705  03AC  3001               	movlw	1	; select bank2/3
  5706  03AD  0087               	movwf	7
  5707  03AE  1C81               	btfss	1,1
  5708  03AF  2C74               	goto	l10163
  5709                           
  5710                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  5711  03B0  086C               	movf	_Sw,w
  5712  03B1  0086               	movwf	6
  5713  03B2  3001               	movlw	1	; select bank2/3
  5714  03B3  0087               	movwf	7
  5715  03B4  1901               	btfsc	1,2
  5716  03B5  2BD7               	goto	l10129
  5717                           
  5718                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  5719  03B6  3001               	movlw	1
  5720  03B7  00E5               	movwf	??_setSw_Main
  5721  03B8  086C               	movf	_Sw,w
  5722  03B9  3E02               	addlw	2
  5723  03BA  0086               	movwf	6
  5724  03BB  3001               	movlw	1	; select bank2/3
  5725  03BC  0087               	movwf	7
  5726  03BD  0865               	movf	??_setSw_Main,w
  5727  03BE  0781               	addwf	1,f
  5728                           
  5729                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  5730  03BF  086C               	movf	_Sw,w
  5731  03C0  3E02               	addlw	2
  5732  03C1  0086               	movwf	6
  5733  03C2  3001               	movlw	1	; select bank2/3
  5734  03C3  0087               	movwf	7
  5735  03C4  3005               	movlw	5
  5736  03C5  0201               	subwf	1,w
  5737  03C6  1C03               	skipc
  5738  03C7  0008               	return
  5739                           
  5740                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  5741  03C8  086C               	movf	_Sw,w
  5742  03C9  3E02               	addlw	2
  5743  03CA  0086               	movwf	6
  5744  03CB  3001               	movlw	1	; select bank2/3
  5745  03CC  0087               	movwf	7
  5746  03CD  0181               	clrf	1
  5747                           
  5748                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  5749  03CE  086C               	movf	_Sw,w
  5750  03CF  0086               	movwf	6
  5751  03D0  3001               	movlw	1	; select bank2/3
  5752  03D1  0087               	movwf	7
  5753  03D2  1501               	bsf	1,2
  5754                           
  5755                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  5756  03D3  0869               	movf	setSw_Main@sw,w
  5757  03D4  318A  224A         	fcall	_Sw_DimmerOnFunc
  5758                           
  5759                           ;Switch_B1.c: 173: }
  5760                           ;Switch_B1.c: 174: } else {
  5761  03D6  0008               	return
  5762  03D7                     l10129:	
  5763                           
  5764                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  5765  03D7  0020               	movlb	0	; select bank0
  5766  03D8  086C               	movf	_Sw,w
  5767  03D9  0086               	movwf	6
  5768  03DA  3001               	movlw	1	; select bank2/3
  5769  03DB  0087               	movwf	7
  5770  03DC  1981               	btfsc	1,3
  5771  03DD  2C04               	goto	l10139
  5772                           
  5773                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  5774  03DE  086C               	movf	_Sw,w
  5775  03DF  3E03               	addlw	3
  5776  03E0  0086               	movwf	6
  5777  03E1  3001               	movlw	1	; select bank2/3
  5778  03E2  0087               	movwf	7
  5779  03E3  3001               	movlw	1
  5780  03E4  0781               	addwf	1,f
  5781  03E5  3141               	addfsr 1,1
  5782  03E6  1803               	skipnc
  5783  03E7  0A81               	incf	1,f
  5784                           
  5785                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  5786  03E8  086C               	movf	_Sw,w
  5787  03E9  3E03               	addlw	3
  5788  03EA  0086               	movwf	6
  5789  03EB  3001               	movlw	1	; select bank2/3
  5790  03EC  0087               	movwf	7
  5791  03ED  3F40               	moviw [0]fsr1
  5792  03EE  00E5               	movwf	??_setSw_Main
  5793  03EF  3F41               	moviw [1]fsr1
  5794  03F0  00E6               	movwf	??_setSw_Main+1
  5795  03F1  3000               	movlw	0
  5796  03F2  0266               	subwf	??_setSw_Main+1,w
  5797  03F3  3096               	movlw	150
  5798  03F4  1903               	skipnz
  5799  03F5  0265               	subwf	??_setSw_Main,w
  5800  03F6  1C03               	skipc
  5801  03F7  0008               	return
  5802                           
  5803                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  5804  03F8  086C               	movf	_Sw,w
  5805  03F9  3E03               	addlw	3
  5806  03FA  0086               	movwf	6
  5807  03FB  3001               	movlw	1	; select bank2/3
  5808  03FC  0087               	movwf	7
  5809  03FD  3000               	movlw	0
  5810  03FE  3FC0               	movwi [0]fsr1
  5811  03FF  3FC1               	movwi [1]fsr1
  5812                           
  5813                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  5814  0400  0869               	movf	setSw_Main@sw,w
  5815  0401  3194  241D         	fcall	_Sw_DimmerAdjFunc
  5816                           
  5817                           ;Switch_B1.c: 184: }
  5818                           ;Switch_B1.c: 185: } else {
  5819  0403  0008               	return
  5820  0404                     l10139:	
  5821                           
  5822                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  5823  0404  0020               	movlb	0	; select bank0
  5824  0405  086C               	movf	_Sw,w
  5825  0406  0086               	movwf	6
  5826  0407  3001               	movlw	1	; select bank2/3
  5827  0408  0087               	movwf	7
  5828  0409  1A01               	btfsc	1,4
  5829  040A  2C42               	goto	l10153
  5830                           
  5831                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  5832  040B  086C               	movf	_Sw,w
  5833  040C  3E05               	addlw	5
  5834  040D  0086               	movwf	6
  5835  040E  3001               	movlw	1	; select bank2/3
  5836  040F  0087               	movwf	7
  5837  0410  3001               	movlw	1
  5838  0411  0781               	addwf	1,f
  5839  0412  3141               	addfsr 1,1
  5840  0413  1803               	skipnc
  5841  0414  0A81               	incf	1,f
  5842                           
  5843                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  5844  0415  086C               	movf	_Sw,w
  5845  0416  3E05               	addlw	5
  5846  0417  0086               	movwf	6
  5847  0418  3001               	movlw	1	; select bank2/3
  5848  0419  0087               	movwf	7
  5849  041A  3F40               	moviw [0]fsr1
  5850  041B  00E5               	movwf	??_setSw_Main
  5851  041C  3F41               	moviw [1]fsr1
  5852  041D  00E6               	movwf	??_setSw_Main+1
  5853  041E  3000               	movlw	0
  5854  041F  0266               	subwf	??_setSw_Main+1,w
  5855  0420  3096               	movlw	150
  5856  0421  1903               	skipnz
  5857  0422  0265               	subwf	??_setSw_Main,w
  5858  0423  1C03               	skipc
  5859  0424  0008               	return
  5860                           
  5861                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  5862  0425  086C               	movf	_Sw,w
  5863  0426  3E05               	addlw	5
  5864  0427  0086               	movwf	6
  5865  0428  3001               	movlw	1	; select bank2/3
  5866  0429  0087               	movwf	7
  5867  042A  3000               	movlw	0
  5868  042B  3FC0               	movwi [0]fsr1
  5869  042C  3FC1               	movwi [1]fsr1
  5870                           
  5871                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  5872  042D  086C               	movf	_Sw,w
  5873  042E  0086               	movwf	6
  5874  042F  3001               	movlw	1	; select bank2/3
  5875  0430  0087               	movwf	7
  5876  0431  1601               	bsf	1,4
  5877                           
  5878                           ;Switch_B1.c: 193: setRF_Learn(1);
  5879  0432  3001               	movlw	1
  5880  0433  319A  2238  3183   	fcall	_setRF_Learn
  5881                           
  5882                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  5883  0436  0021               	movlb	1	; select bank1
  5884  0437  1EA0               	btfss	_myMain^(0+128),5
  5885  0438  0008               	return
  5886                           
  5887                           ;Switch_B1.c: 196: setBuz(2, 100);
  5888  0439  3064               	movlw	100
  5889  043A  0020               	movlb	0	; select bank0
  5890  043B  00A9               	movwf	setBuz@time
  5891  043C  3000               	movlw	0
  5892  043D  00AA               	movwf	setBuz@time+1
  5893  043E  3002               	movlw	2
  5894  043F  3195  256B         	fcall	_setBuz
  5895                           
  5896                           ;Switch_B1.c: 197: }
  5897                           ;Switch_B1.c: 199: }
  5898                           ;Switch_B1.c: 200: } else {
  5899  0441  0008               	return
  5900  0442                     l10153:	
  5901                           
  5902                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  5903  0442  0020               	movlb	0	; select bank0
  5904  0443  086C               	movf	_Sw,w
  5905  0444  0086               	movwf	6
  5906  0445  3001               	movlw	1	; select bank2/3
  5907  0446  0087               	movwf	7
  5908  0447  1A81               	btfsc	1,5
  5909  0448  0008               	return
  5910                           
  5911                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  5912  0449  086C               	movf	_Sw,w
  5913  044A  3E07               	addlw	7
  5914  044B  0086               	movwf	6
  5915  044C  3001               	movlw	1	; select bank2/3
  5916  044D  0087               	movwf	7
  5917  044E  3001               	movlw	1
  5918  044F  0781               	addwf	1,f
  5919  0450  3141               	addfsr 1,1
  5920  0451  1803               	skipnc
  5921  0452  0A81               	incf	1,f
  5922                           
  5923                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  5924  0453  086C               	movf	_Sw,w
  5925  0454  3E07               	addlw	7
  5926  0455  0086               	movwf	6
  5927  0456  3001               	movlw	1	; select bank2/3
  5928  0457  0087               	movwf	7
  5929  0458  3F40               	moviw [0]fsr1
  5930  0459  00E5               	movwf	??_setSw_Main
  5931  045A  3F41               	moviw [1]fsr1
  5932  045B  00E6               	movwf	??_setSw_Main+1
  5933  045C  3001               	movlw	1
  5934  045D  0266               	subwf	??_setSw_Main+1,w
  5935  045E  302C               	movlw	44
  5936  045F  1903               	skipnz
  5937  0460  0265               	subwf	??_setSw_Main,w
  5938  0461  1C03               	skipc
  5939  0462  0008               	return
  5940                           
  5941                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5942  0463  086C               	movf	_Sw,w
  5943  0464  3E07               	addlw	7
  5944  0465  0086               	movwf	6
  5945  0466  3001               	movlw	1	; select bank2/3
  5946  0467  0087               	movwf	7
  5947  0468  3000               	movlw	0
  5948  0469  3FC0               	movwi [0]fsr1
  5949  046A  3FC1               	movwi [1]fsr1
  5950                           
  5951                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  5952  046B  086C               	movf	_Sw,w
  5953  046C  0086               	movwf	6
  5954  046D  3001               	movlw	1	; select bank2/3
  5955  046E  0087               	movwf	7
  5956  046F  1681               	bsf	1,5
  5957                           
  5958                           ;Switch_B1.c: 208: setRF_Learn(0);
  5959  0470  3000               	movlw	0
  5960  0471  319A  2238         	fcall	_setRF_Learn
  5961                           
  5962                           ;Switch_B1.c: 211: }
  5963                           ;Switch_B1.c: 212: }
  5964                           ;Switch_B1.c: 213: }
  5965                           ;Switch_B1.c: 214: }
  5966                           ;Switch_B1.c: 215: }
  5967                           ;Switch_B1.c: 216: } else {
  5968  0473  0008               	return
  5969  0474                     l10163:	
  5970                           
  5971                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  5972  0474  0020               	movlb	0	; select bank0
  5973  0475  086C               	movf	_Sw,w
  5974  0476  0086               	movwf	6
  5975  0477  3001               	movlw	1	; select bank2/3
  5976  0478  0087               	movwf	7
  5977  0479  1D01               	btfss	1,2
  5978  047A  0008               	return
  5979                           
  5980                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  5981  047B  3001               	movlw	1
  5982  047C  00E5               	movwf	??_setSw_Main
  5983  047D  086C               	movf	_Sw,w
  5984  047E  3E02               	addlw	2
  5985  047F  0086               	movwf	6
  5986  0480  3001               	movlw	1	; select bank2/3
  5987  0481  0087               	movwf	7
  5988  0482  0865               	movf	??_setSw_Main,w
  5989  0483  0781               	addwf	1,f
  5990                           
  5991                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  5992  0484  086C               	movf	_Sw,w
  5993  0485  3E02               	addlw	2
  5994  0486  0086               	movwf	6
  5995  0487  3001               	movlw	1	; select bank2/3
  5996  0488  0087               	movwf	7
  5997  0489  3005               	movlw	5
  5998  048A  0201               	subwf	1,w
  5999  048B  1C03               	skipc
  6000  048C  0008               	return
  6001                           
  6002                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  6003  048D  086C               	movf	_Sw,w
  6004  048E  3E02               	addlw	2
  6005  048F  0086               	movwf	6
  6006  0490  3001               	movlw	1	; select bank2/3
  6007  0491  0087               	movwf	7
  6008  0492  0181               	clrf	1
  6009                           
  6010                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  6011  0493  086C               	movf	_Sw,w
  6012  0494  0086               	movwf	6
  6013  0495  3001               	movlw	1	; select bank2/3
  6014  0496  0087               	movwf	7
  6015  0497  1101               	bcf	1,2
  6016                           
  6017                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  6018  0498  086C               	movf	_Sw,w
  6019  0499  3E03               	addlw	3
  6020  049A  0086               	movwf	6
  6021  049B  3001               	movlw	1	; select bank2/3
  6022  049C  0087               	movwf	7
  6023  049D  3000               	movlw	0
  6024  049E  3FC0               	movwi [0]fsr1
  6025  049F  3FC1               	movwi [1]fsr1
  6026                           
  6027                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  6028  04A0  086C               	movf	_Sw,w
  6029  04A1  0086               	movwf	6
  6030  04A2  3001               	movlw	1	; select bank2/3
  6031  04A3  0087               	movwf	7
  6032  04A4  1181               	bcf	1,3
  6033                           
  6034                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  6035  04A5  086C               	movf	_Sw,w
  6036  04A6  3E05               	addlw	5
  6037  04A7  0086               	movwf	6
  6038  04A8  3001               	movlw	1	; select bank2/3
  6039  04A9  0087               	movwf	7
  6040  04AA  3000               	movlw	0
  6041  04AB  3FC0               	movwi [0]fsr1
  6042  04AC  3FC1               	movwi [1]fsr1
  6043                           
  6044                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  6045  04AD  086C               	movf	_Sw,w
  6046  04AE  0086               	movwf	6
  6047  04AF  3001               	movlw	1	; select bank2/3
  6048  04B0  0087               	movwf	7
  6049  04B1  1201               	bcf	1,4
  6050                           
  6051                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  6052  04B2  086C               	movf	_Sw,w
  6053  04B3  3E07               	addlw	7
  6054  04B4  0086               	movwf	6
  6055  04B5  3001               	movlw	1	; select bank2/3
  6056  04B6  0087               	movwf	7
  6057  04B7  3000               	movlw	0
  6058  04B8  3FC0               	movwi [0]fsr1
  6059  04B9  3FC1               	movwi [1]fsr1
  6060                           
  6061                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  6062  04BA  086C               	movf	_Sw,w
  6063  04BB  0086               	movwf	6
  6064  04BC  3001               	movlw	1	; select bank2/3
  6065  04BD  0087               	movwf	7
  6066  04BE  1281               	bcf	1,5
  6067                           
  6068                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  6069  04BF  0869               	movf	setSw_Main@sw,w
  6070  04C0  3189  216A  3183   	fcall	_Sw_DimmerOffFunc
  6071                           
  6072                           ;Switch_B1.c: 232: setRF_Learn(0);
  6073  04C3  3000               	movlw	0
  6074  04C4  319A  2238         	fcall	_setRF_Learn
  6075  04C6  0008               	return
  6076  04C7                     __end_of_setSw_Main:	
  6077                           
  6078                           	psect	text18
  6079  1A38                     __ptext18:	
  6080 ;; *************** function _setRF_Learn *****************
  6081 ;; Defined at:
  6082 ;;		line 23 in file "../src/RF_Control_B1.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;  command         1    wreg     unsigned char 
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;  command         1    0[BANK0 ] unsigned char 
  6087 ;; Return value:  Size  Location     Type
  6088 ;;		None               void
  6089 ;; Registers used:
  6090 ;;		wreg
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6099 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6100 ;;Total ram usage:        1 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; Hardware stack levels required when called:    5
  6103 ;; This function calls:
  6104 ;;		Nothing
  6105 ;; This function is called by:
  6106 ;;		_setSw_Main
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110                           
  6111                           ;psect for function _setRF_Learn
  6112  1A38                     _setRF_Learn:	
  6113                           
  6114                           ;incstack = 0
  6115                           ; Regs used in _setRF_Learn: [wreg]
  6116                           ;setRF_Learn@command stored from wreg
  6117  1A38  0020               	movlb	0	; select bank0
  6118  1A39  00A0               	movwf	setRF_Learn@command
  6119                           
  6120                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  6121  1A3A  0820               	movf	setRF_Learn@command,w
  6122  1A3B  0021               	movlb	1	; select bank1
  6123  1A3C  133C               	bcf	_RF1^(0+128),6
  6124  1A3D  1D03               	skipz
  6125  1A3E  173C               	bsf	_RF1^(0+128),6
  6126  1A3F  0008               	return
  6127  1A40                     __end_of_setRF_Learn:	
  6128                           
  6129                           	psect	text19
  6130  0A4A                     __ptext19:	
  6131 ;; *************** function _Sw_DimmerOnFunc *****************
  6132 ;; Defined at:
  6133 ;;		line 241 in file "../src/Switch_B1.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  sw              1    wreg     unsigned char 
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;  sw              1   67[BANK0 ] unsigned char 
  6138 ;;  Idle            1   66[BANK0 ] unsigned char 
  6139 ;; Return value:  Size  Location     Type
  6140 ;;		None               void
  6141 ;; Registers used:
  6142 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;Total ram usage:        2 bytes
  6153 ;; Hardware stack levels used:    1
  6154 ;; Hardware stack levels required when called:    9
  6155 ;; This function calls:
  6156 ;;		_setBuz
  6157 ;;		_setDimmerLights_Switch
  6158 ;;		_setDimmerLights_Trigger
  6159 ;;		_setRFSW_Status
  6160 ;;		_setRF_DimmerLights
  6161 ;;		_setTxData
  6162 ;; This function is called by:
  6163 ;;		_setSw_Main
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           
  6168                           ;psect for function _Sw_DimmerOnFunc
  6169  0A4A                     _Sw_DimmerOnFunc:	
  6170                           
  6171                           ;incstack = 0
  6172                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6173                           ;Sw_DimmerOnFunc@sw stored from wreg
  6174  0A4A  0020               	movlb	0	; select bank0
  6175  0A4B  00E3               	movwf	Sw_DimmerOnFunc@sw
  6176                           
  6177                           ;Switch_B1.c: 242: char Idle = 1;
  6178  0A4C  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6179  0A4D  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6180                           
  6181                           ;Switch_B1.c: 256: if (sw == 1) {
  6182  0A4E  0863               	movf	Sw_DimmerOnFunc@sw,w
  6183  0A4F  3A01               	xorlw	1
  6184  0A50  1D03               	skipz
  6185  0A51  2A5C               	goto	l9515
  6186                           
  6187                           ;Switch_B1.c: 257: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6188  0A52  1003               	clrc
  6189  0A53  0023               	movlb	3	; select bank3
  6190  0A54  1DD5               	btfss	(_DimmerLights2^(0+384)+8),3
  6191  0A55  1403               	setc
  6192  0A56  3000               	movlw	0
  6193  0A57  1803               	btfsc	3,0
  6194  0A58  3001               	movlw	1
  6195  0A59  0020               	movlb	0	; select bank0
  6196  0A5A  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6197                           
  6198                           ;Switch_B1.c: 258: } else if (sw == 2) {
  6199  0A5B  2A69               	goto	l9519
  6200  0A5C                     l9515:	
  6201  0A5C  0863               	movf	Sw_DimmerOnFunc@sw,w
  6202  0A5D  3A02               	xorlw	2
  6203  0A5E  1D03               	skipz
  6204  0A5F  2A69               	goto	l9519
  6205                           
  6206                           ;Switch_B1.c: 259: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6207  0A60  1003               	clrc
  6208  0A61  0023               	movlb	3	; select bank3
  6209  0A62  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
  6210  0A63  1403               	setc
  6211  0A64  3000               	movlw	0
  6212  0A65  1803               	btfsc	3,0
  6213  0A66  3001               	movlw	1
  6214  0A67  0020               	movlb	0	; select bank0
  6215  0A68  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6216  0A69                     l9519:	
  6217                           
  6218                           ;Switch_B1.c: 260: }
  6219                           ;Switch_B1.c: 263: if (Idle == 1) {
  6220  0A69  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6221  0A6A  3A01               	xorlw	1
  6222  0A6B  1D03               	skipz
  6223  0A6C  0008               	return
  6224                           
  6225                           ;Switch_B1.c: 264: Sw->Flag = 1;
  6226  0A6D  086C               	movf	_Sw,w
  6227  0A6E  0086               	movwf	6
  6228  0A6F  3001               	movlw	1	; select bank2/3
  6229  0A70  0087               	movwf	7
  6230  0A71  1781               	bsf	1,7
  6231                           
  6232                           ;Switch_B1.c: 265: setBuz(1, 100);
  6233  0A72  3064               	movlw	100
  6234  0A73  00A9               	movwf	setBuz@time
  6235  0A74  3000               	movlw	0
  6236  0A75  00AA               	movwf	setBuz@time+1
  6237  0A76  3001               	movlw	1
  6238  0A77  3195  256B  318A   	fcall	_setBuz
  6239                           
  6240                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  6241  0A7A  0020               	movlb	0	; select bank0
  6242  0A7B  086C               	movf	_Sw,w
  6243  0A7C  0086               	movwf	6
  6244  0A7D  3001               	movlw	1	; select bank2/3
  6245  0A7E  0087               	movwf	7
  6246  0A7F  1B01               	btfsc	1,6
  6247  0A80  2AAA               	goto	l9539
  6248                           
  6249                           ;Switch_B1.c: 267: Sw->Status = 1;
  6250  0A81  086C               	movf	_Sw,w
  6251  0A82  0086               	movwf	6
  6252  0A83  3001               	movlw	1	; select bank2/3
  6253  0A84  0087               	movwf	7
  6254  0A85  1701               	bsf	1,6
  6255                           
  6256                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  6257  0A86  01A2               	clrf	setRFSW_Status@command
  6258  0A87  0AA2               	incf	setRFSW_Status@command,f
  6259  0A88  0863               	movf	Sw_DimmerOnFunc@sw,w
  6260  0A89  319A  22E4  318A   	fcall	_setRFSW_Status
  6261                           
  6262                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  6263  0A8C  0020               	movlb	0	; select bank0
  6264  0A8D  01A2               	clrf	setDimmerLights_Trigger@command
  6265  0A8E  0AA2               	incf	setDimmerLights_Trigger@command,f
  6266  0A8F  0863               	movf	Sw_DimmerOnFunc@sw,w
  6267  0A90  319B  2369  318A   	fcall	_setDimmerLights_Trigger
  6268                           
  6269                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  6270  0A93  0020               	movlb	0	; select bank0
  6271  0A94  01A2               	clrf	setDimmerLights_Switch@command
  6272  0A95  0AA2               	incf	setDimmerLights_Switch@command,f
  6273  0A96  0863               	movf	Sw_DimmerOnFunc@sw,w
  6274  0A97  319B  2359  318A   	fcall	_setDimmerLights_Switch
  6275                           
  6276                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  6277  0A9A  0020               	movlb	0	; select bank0
  6278  0A9B  086C               	movf	_Sw,w
  6279  0A9C  0086               	movwf	6
  6280  0A9D  3001               	movlw	1	; select bank2/3
  6281  0A9E  0087               	movwf	7
  6282  0A9F  3000               	movlw	0
  6283  0AA0  1B01               	btfsc	1,6
  6284  0AA1  3001               	movlw	1
  6285  0AA2  00DD               	movwf	setRF_DimmerLights@on
  6286  0AA3  0863               	movf	Sw_DimmerOnFunc@sw,w
  6287  0AA4  3188  20FE  318A   	fcall	_setRF_DimmerLights
  6288                           
  6289                           ;Switch_B1.c: 274: setTxData();
  6290  0AA7  318F  2743         	fcall	_setTxData
  6291                           
  6292                           ;Switch_B1.c: 276: } else {
  6293  0AA9  0008               	return
  6294  0AAA                     l9539:	
  6295                           
  6296                           ;Switch_B1.c: 277: Sw->Status = 0;
  6297  0AAA  0020               	movlb	0	; select bank0
  6298  0AAB  086C               	movf	_Sw,w
  6299  0AAC  0086               	movwf	6
  6300  0AAD  3001               	movlw	1	; select bank2/3
  6301  0AAE  0087               	movwf	7
  6302  0AAF  1301               	bcf	1,6
  6303                           
  6304                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  6305  0AB0  086C               	movf	_Sw,w
  6306  0AB1  0086               	movwf	6
  6307  0AB2  3001               	movlw	1	; select bank2/3
  6308  0AB3  0087               	movwf	7
  6309  0AB4  3000               	movlw	0
  6310  0AB5  1B01               	btfsc	1,6
  6311  0AB6  3001               	movlw	1
  6312  0AB7  00A2               	movwf	setRFSW_Status@command
  6313  0AB8  0863               	movf	Sw_DimmerOnFunc@sw,w
  6314  0AB9  319A  22E4         	fcall	_setRFSW_Status
  6315  0ABB  0008               	return
  6316  0ABC                     __end_of_Sw_DimmerOnFunc:	
  6317                           
  6318                           	psect	text20
  6319  096A                     __ptext20:	
  6320 ;; *************** function _Sw_DimmerOffFunc *****************
  6321 ;; Defined at:
  6322 ;;		line 284 in file "../src/Switch_B1.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  sw              1    wreg     unsigned char 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  sw              1   68[BANK0 ] unsigned char 
  6327 ;; Return value:  Size  Location     Type
  6328 ;;		None               void
  6329 ;; Registers used:
  6330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;Total ram usage:        3 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    9
  6343 ;; This function calls:
  6344 ;;		_setDelayOff_GO
  6345 ;;		_setDimmerLights_AdjGo
  6346 ;;		_setDimmerLights_Switch
  6347 ;;		_setDimmerLights_Trigger
  6348 ;;		_setDimmerLights_TriggerAdj
  6349 ;;		_setRF_DimmerLights
  6350 ;;		_setTxData
  6351 ;; This function is called by:
  6352 ;;		_setSw_Main
  6353 ;; This function uses a non-reentrant model
  6354 ;;
  6355                           
  6356                           
  6357                           ;psect for function _Sw_DimmerOffFunc
  6358  096A                     _Sw_DimmerOffFunc:	
  6359                           
  6360                           ;incstack = 0
  6361                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6362                           ;Sw_DimmerOffFunc@sw stored from wreg
  6363  096A  0020               	movlb	0	; select bank0
  6364  096B  00E4               	movwf	Sw_DimmerOffFunc@sw
  6365                           
  6366                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  6367  096C  086C               	movf	_Sw,w
  6368  096D  0086               	movwf	6
  6369  096E  3001               	movlw	1	; select bank2/3
  6370  096F  0087               	movwf	7
  6371  0970  1F81               	btfss	1,7
  6372  0971  0008               	return
  6373                           
  6374                           ;Switch_B1.c: 286: Sw->Flag = 0;
  6375  0972  086C               	movf	_Sw,w
  6376  0973  0086               	movwf	6
  6377  0974  3001               	movlw	1	; select bank2/3
  6378  0975  0087               	movwf	7
  6379  0976  1381               	bcf	1,7
  6380                           
  6381                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  6382  0977  086C               	movf	_Sw,w
  6383  0978  0086               	movwf	6
  6384  0979  3001               	movlw	1	; select bank2/3
  6385  097A  0087               	movwf	7
  6386  097B  1F01               	btfss	1,6
  6387  097C  29B5               	goto	l9583
  6388                           
  6389                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  6390  097D  0A6C               	incf	_Sw,w
  6391  097E  0086               	movwf	6
  6392  097F  3001               	movlw	1	; select bank2/3
  6393  0980  0087               	movwf	7
  6394  0981  1C01               	btfss	1,0
  6395  0982  0008               	return
  6396                           
  6397                           ;Switch_B1.c: 289: Sw->Adj = 0;
  6398  0983  0A6C               	incf	_Sw,w
  6399  0984  0086               	movwf	6
  6400  0985  3001               	movlw	1	; select bank2/3
  6401  0986  0087               	movwf	7
  6402  0987  1001               	bcf	1,0
  6403                           
  6404                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  6405  0988  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6406  0989  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6407  098A  0864               	movf	Sw_DimmerOffFunc@sw,w
  6408  098B  319B  2399  3189   	fcall	_setDimmerLights_TriggerAdj
  6409                           
  6410                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  6411  098E  0020               	movlb	0	; select bank0
  6412  098F  01A2               	clrf	setDimmerLights_AdjGo@command
  6413  0990  0864               	movf	Sw_DimmerOffFunc@sw,w
  6414  0991  319B  2389  3189   	fcall	_setDimmerLights_AdjGo
  6415                           
  6416                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  6417  0994  0020               	movlb	0	; select bank0
  6418  0995  0864               	movf	Sw_DimmerOffFunc@sw,w
  6419  0996  3E1A               	addlw	26
  6420  0997  076D               	addwf	_product,w
  6421  0998  00E2               	movwf	??_Sw_DimmerOffFunc
  6422  0999  0862               	movf	??_Sw_DimmerOffFunc,w
  6423  099A  0086               	movwf	6
  6424  099B  3002               	movlw	2	; select bank4/5
  6425  099C  0087               	movwf	7
  6426  099D  0801               	movf	1,w
  6427  099E  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6428  099F  086D               	movf	_product,w
  6429  09A0  3E11               	addlw	17
  6430  09A1  0086               	movwf	6
  6431  09A2  3002               	movlw	2	; select bank4/5
  6432  09A3  0087               	movwf	7
  6433  09A4  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6434  09A5  0081               	movwf	1
  6435                           
  6436                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  6437  09A6  086C               	movf	_Sw,w
  6438  09A7  0086               	movwf	6
  6439  09A8  3001               	movlw	1	; select bank2/3
  6440  09A9  0087               	movwf	7
  6441  09AA  3000               	movlw	0
  6442  09AB  1B01               	btfsc	1,6
  6443  09AC  3001               	movlw	1
  6444  09AD  00DD               	movwf	setRF_DimmerLights@on
  6445  09AE  0864               	movf	Sw_DimmerOffFunc@sw,w
  6446  09AF  3188  20FE  3189   	fcall	_setRF_DimmerLights
  6447                           
  6448                           ;Switch_B1.c: 295: setTxData();
  6449  09B2  318F  2743         	fcall	_setTxData
  6450                           
  6451                           ;Switch_B1.c: 297: }
  6452                           ;Switch_B1.c: 298: } else {
  6453  09B4  0008               	return
  6454  09B5                     l9583:	
  6455                           
  6456                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  6457  09B5  0020               	movlb	0	; select bank0
  6458  09B6  01A2               	clrf	setDimmerLights_Trigger@command
  6459  09B7  0AA2               	incf	setDimmerLights_Trigger@command,f
  6460  09B8  0864               	movf	Sw_DimmerOffFunc@sw,w
  6461  09B9  319B  2369  3189   	fcall	_setDimmerLights_Trigger
  6462                           
  6463                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  6464  09BC  0020               	movlb	0	; select bank0
  6465  09BD  01A2               	clrf	setDimmerLights_Switch@command
  6466  09BE  0864               	movf	Sw_DimmerOffFunc@sw,w
  6467  09BF  319B  2359  3189   	fcall	_setDimmerLights_Switch
  6468                           
  6469                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  6470  09C2  0020               	movlb	0	; select bank0
  6471  09C3  01AA               	clrf	setDelayOff_GO@command
  6472  09C4  01AB               	clrf	setDelayOff_GO@value
  6473  09C5  0864               	movf	Sw_DimmerOffFunc@sw,w
  6474  09C6  3196  26DB  3189   	fcall	_setDelayOff_GO
  6475                           
  6476                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  6477  09C9  0020               	movlb	0	; select bank0
  6478  09CA  086C               	movf	_Sw,w
  6479  09CB  0086               	movwf	6
  6480  09CC  3001               	movlw	1	; select bank2/3
  6481  09CD  0087               	movwf	7
  6482  09CE  3000               	movlw	0
  6483  09CF  1B01               	btfsc	1,6
  6484  09D0  3001               	movlw	1
  6485  09D1  00DD               	movwf	setRF_DimmerLights@on
  6486  09D2  0864               	movf	Sw_DimmerOffFunc@sw,w
  6487  09D3  3188  20FE  3189   	fcall	_setRF_DimmerLights
  6488                           
  6489                           ;Switch_B1.c: 304: setTxData();
  6490  09D6  318F  2743         	fcall	_setTxData
  6491  09D8  0008               	return
  6492  09D9                     __end_of_Sw_DimmerOffFunc:	
  6493                           
  6494                           	psect	text21
  6495  141D                     __ptext21:	
  6496 ;; *************** function _Sw_DimmerAdjFunc *****************
  6497 ;; Defined at:
  6498 ;;		line 311 in file "../src/Switch_B1.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;  sw              1    wreg     unsigned char 
  6501 ;; Auto vars:     Size  Location     Type
  6502 ;;  sw              1    5[BANK0 ] unsigned char 
  6503 ;;  Idle            1    4[BANK0 ] unsigned char 
  6504 ;; Return value:  Size  Location     Type
  6505 ;;		None               void
  6506 ;; Registers used:
  6507 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6508 ;; Tracked objects:
  6509 ;;		On entry : 0/0
  6510 ;;		On exit  : 0/0
  6511 ;;		Unchanged: 0/0
  6512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;Total ram usage:        2 bytes
  6518 ;; Hardware stack levels used:    1
  6519 ;; Hardware stack levels required when called:    7
  6520 ;; This function calls:
  6521 ;;		_setDimmerLights_AdjGo
  6522 ;;		_setDimmerLights_TriggerAdj
  6523 ;;		_setRFSW_Status
  6524 ;; This function is called by:
  6525 ;;		_setSw_Main
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           
  6530                           ;psect for function _Sw_DimmerAdjFunc
  6531  141D                     _Sw_DimmerAdjFunc:	
  6532                           
  6533                           ;incstack = 0
  6534                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6535                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6536  141D  0020               	movlb	0	; select bank0
  6537  141E  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6538                           
  6539                           ;Switch_B1.c: 312: char Idle = 1;
  6540  141F  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6541  1420  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6542                           
  6543                           ;Switch_B1.c: 325: if (sw == 1) {
  6544  1421  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6545  1422  3A01               	xorlw	1
  6546  1423  1D03               	skipz
  6547  1424  2C2F               	goto	l9549
  6548                           
  6549                           ;Switch_B1.c: 326: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6550  1425  1003               	clrc
  6551  1426  0023               	movlb	3	; select bank3
  6552  1427  1DD5               	btfss	(_DimmerLights2^(0+384)+8),3
  6553  1428  1403               	setc
  6554  1429  3000               	movlw	0
  6555  142A  1803               	btfsc	3,0
  6556  142B  3001               	movlw	1
  6557  142C  0020               	movlb	0	; select bank0
  6558  142D  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6559                           
  6560                           ;Switch_B1.c: 327: } else if (sw == 2) {
  6561  142E  2C3C               	goto	l9553
  6562  142F                     l9549:	
  6563  142F  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6564  1430  3A02               	xorlw	2
  6565  1431  1D03               	skipz
  6566  1432  2C3C               	goto	l9553
  6567                           
  6568                           ;Switch_B1.c: 328: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6569  1433  1003               	clrc
  6570  1434  0023               	movlb	3	; select bank3
  6571  1435  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
  6572  1436  1403               	setc
  6573  1437  3000               	movlw	0
  6574  1438  1803               	btfsc	3,0
  6575  1439  3001               	movlw	1
  6576  143A  0020               	movlb	0	; select bank0
  6577  143B  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6578  143C                     l9553:	
  6579                           
  6580                           ;Switch_B1.c: 329: }
  6581                           ;Switch_B1.c: 332: if (Idle == 1) {
  6582  143C  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6583  143D  3A01               	xorlw	1
  6584  143E  1D03               	skipz
  6585  143F  0008               	return
  6586                           
  6587                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  6588  1440  086C               	movf	_Sw,w
  6589  1441  0086               	movwf	6
  6590  1442  3001               	movlw	1	; select bank2/3
  6591  1443  0087               	movwf	7
  6592  1444  1F81               	btfss	1,7
  6593  1445  0008               	return
  6594                           
  6595                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  6596  1446  086C               	movf	_Sw,w
  6597  1447  0086               	movwf	6
  6598  1448  3001               	movlw	1	; select bank2/3
  6599  1449  0087               	movwf	7
  6600  144A  1581               	bsf	1,3
  6601                           
  6602                           ;Switch_B1.c: 335: Sw->Adj = 1;
  6603  144B  0A6C               	incf	_Sw,w
  6604  144C  0086               	movwf	6
  6605  144D  3001               	movlw	1	; select bank2/3
  6606  144E  0087               	movwf	7
  6607  144F  1401               	bsf	1,0
  6608                           
  6609                           ;Switch_B1.c: 336: Sw->Status = 1;
  6610  1450  086C               	movf	_Sw,w
  6611  1451  0086               	movwf	6
  6612  1452  3001               	movlw	1	; select bank2/3
  6613  1453  0087               	movwf	7
  6614  1454  1701               	bsf	1,6
  6615                           
  6616                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  6617  1455  01A2               	clrf	setRFSW_Status@command
  6618  1456  0AA2               	incf	setRFSW_Status@command,f
  6619  1457  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6620  1458  319A  22E4  3194   	fcall	_setRFSW_Status
  6621                           
  6622                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  6623  145B  0020               	movlb	0	; select bank0
  6624  145C  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6625  145D  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6626  145E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6627  145F  319B  2399  3194   	fcall	_setDimmerLights_TriggerAdj
  6628                           
  6629                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  6630  1462  0020               	movlb	0	; select bank0
  6631  1463  01A2               	clrf	setDimmerLights_AdjGo@command
  6632  1464  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6633  1465  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6634  1466  319B  2389         	fcall	_setDimmerLights_AdjGo
  6635  1468  0008               	return
  6636  1469                     __end_of_Sw_DimmerAdjFunc:	
  6637                           
  6638                           	psect	text22
  6639  1B99                     __ptext22:	
  6640 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6641 ;; Defined at:
  6642 ;;		line 722 in file "../src/Dimmer_B1.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;  lights          1    wreg     unsigned char 
  6645 ;;  command         1    2[BANK0 ] unsigned char 
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  lights          1    3[BANK0 ] unsigned char 
  6648 ;; Return value:  Size  Location     Type
  6649 ;;		None               void
  6650 ;; Registers used:
  6651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6657 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;Total ram usage:        2 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    6
  6664 ;; This function calls:
  6665 ;;		_DimmerLightsPointSelect
  6666 ;; This function is called by:
  6667 ;;		_Sw_DimmerOffFunc
  6668 ;;		_Sw_DimmerAdjFunc
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           
  6673                           ;psect for function _setDimmerLights_TriggerAdj
  6674  1B99                     _setDimmerLights_TriggerAdj:	
  6675                           
  6676                           ;incstack = 0
  6677                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6678                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6679  1B99  0020               	movlb	0	; select bank0
  6680  1B9A  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6681                           
  6682                           ;Dimmer_B1.c: 724: DimmerLightsPointSelect(lights);
  6683  1B9B  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6684  1B9C  319C  2424         	fcall	_DimmerLightsPointSelect
  6685                           
  6686                           ;Dimmer_B1.c: 725: DimmerLights->TriggerAdj = command;
  6687  1B9E  0020               	movlb	0	; select bank0
  6688  1B9F  086B               	movf	_DimmerLights,w
  6689  1BA0  3E08               	addlw	8
  6690  1BA1  0086               	movwf	6
  6691  1BA2  3001               	movlw	1	; select bank2/3
  6692  1BA3  0087               	movwf	7
  6693  1BA4  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6694  1BA5  1201               	bcf	1,4
  6695  1BA6  1D03               	skipz
  6696  1BA7  1601               	bsf	1,4
  6697  1BA8  0008               	return
  6698  1BA9                     __end_of_setDimmerLights_TriggerAdj:	
  6699                           
  6700                           	psect	text23
  6701  1B89                     __ptext23:	
  6702 ;; *************** function _setDimmerLights_AdjGo *****************
  6703 ;; Defined at:
  6704 ;;		line 710 in file "../src/Dimmer_B1.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;  lights          1    wreg     unsigned char 
  6707 ;;  command         1    2[BANK0 ] unsigned char 
  6708 ;; Auto vars:     Size  Location     Type
  6709 ;;  lights          1    3[BANK0 ] unsigned char 
  6710 ;; Return value:  Size  Location     Type
  6711 ;;		None               void
  6712 ;; Registers used:
  6713 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6714 ;; Tracked objects:
  6715 ;;		On entry : 0/0
  6716 ;;		On exit  : 0/0
  6717 ;;		Unchanged: 0/0
  6718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6719 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6720 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6722 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6723 ;;Total ram usage:        2 bytes
  6724 ;; Hardware stack levels used:    1
  6725 ;; Hardware stack levels required when called:    6
  6726 ;; This function calls:
  6727 ;;		_DimmerLightsPointSelect
  6728 ;; This function is called by:
  6729 ;;		_Sw_DimmerOffFunc
  6730 ;;		_Sw_DimmerAdjFunc
  6731 ;; This function uses a non-reentrant model
  6732 ;;
  6733                           
  6734                           
  6735                           ;psect for function _setDimmerLights_AdjGo
  6736  1B89                     _setDimmerLights_AdjGo:	
  6737                           
  6738                           ;incstack = 0
  6739                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6740                           ;setDimmerLights_AdjGo@lights stored from wreg
  6741  1B89  0020               	movlb	0	; select bank0
  6742  1B8A  00A3               	movwf	setDimmerLights_AdjGo@lights
  6743                           
  6744                           ;Dimmer_B1.c: 712: DimmerLightsPointSelect(lights);
  6745  1B8B  0823               	movf	setDimmerLights_AdjGo@lights,w
  6746  1B8C  319C  2424         	fcall	_DimmerLightsPointSelect
  6747                           
  6748                           ;Dimmer_B1.c: 713: DimmerLights->AdjGo = command;
  6749  1B8E  0020               	movlb	0	; select bank0
  6750  1B8F  086B               	movf	_DimmerLights,w
  6751  1B90  3E08               	addlw	8
  6752  1B91  0086               	movwf	6
  6753  1B92  3001               	movlw	1	; select bank2/3
  6754  1B93  0087               	movwf	7
  6755  1B94  0822               	movf	setDimmerLights_AdjGo@command,w
  6756  1B95  1181               	bcf	1,3
  6757  1B96  1D03               	skipz
  6758  1B97  1581               	bsf	1,3
  6759  1B98  0008               	return
  6760  1B99                     __end_of_setDimmerLights_AdjGo:	
  6761                           
  6762                           	psect	text24
  6763  1AD7                     __ptext24:	
  6764 ;; *************** function _Switch_Initialization *****************
  6765 ;; Defined at:
  6766 ;;		line 41 in file "../src/Switch_B1.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;		None
  6769 ;; Auto vars:     Size  Location     Type
  6770 ;;		None
  6771 ;; Return value:  Size  Location     Type
  6772 ;;		None               void
  6773 ;; Registers used:
  6774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6775 ;; Tracked objects:
  6776 ;;		On entry : 0/0
  6777 ;;		On exit  : 0/0
  6778 ;;		Unchanged: 0/0
  6779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;Total ram usage:        0 bytes
  6785 ;; Hardware stack levels used:    1
  6786 ;; Hardware stack levels required when called:    8
  6787 ;; This function calls:
  6788 ;;		_TouchPower
  6789 ;;		_setSw_Initialization
  6790 ;; This function is called by:
  6791 ;;		_main
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           
  6796                           ;psect for function _Switch_Initialization
  6797  1AD7                     _Switch_Initialization:	
  6798                           
  6799                           ;Switch_B1.c: 42: TouchPower();
  6800                           
  6801                           ;incstack = 0
  6802                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6803  1AD7  319B  232C  319A   	fcall	_TouchPower
  6804                           
  6805                           ;Switch_B1.c: 44: WPUB1 = 0;
  6806  1ADA  0024               	movlb	4	; select bank4
  6807  1ADB  108D               	bcf	13,1	;volatile
  6808                           
  6809                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6810  1ADC  3001               	movlw	1
  6811  1ADD  319A  2230  319A   	fcall	_setSw_Initialization
  6812                           
  6813                           ;Switch_B1.c: 57: setSw_Initialization(2);
  6814  1AE0  3002               	movlw	2
  6815  1AE1  319A  2230         	fcall	_setSw_Initialization
  6816  1AE3  0008               	return
  6817  1AE4                     __end_of_Switch_Initialization:	
  6818                           
  6819                           	psect	text25
  6820  1A30                     __ptext25:	
  6821 ;; *************** function _setSw_Initialization *****************
  6822 ;; Defined at:
  6823 ;;		line 83 in file "../src/Switch_B1.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  sw              1    wreg     unsigned char 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  sw              1    4[BANK0 ] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;		None               void
  6830 ;; Registers used:
  6831 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6840 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;Total ram usage:        1 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    7
  6844 ;; This function calls:
  6845 ;;		_setLED
  6846 ;; This function is called by:
  6847 ;;		_Switch_Initialization
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           
  6852                           ;psect for function _setSw_Initialization
  6853  1A30                     _setSw_Initialization:	
  6854                           
  6855                           ;incstack = 0
  6856                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6857                           ;setSw_Initialization@sw stored from wreg
  6858  1A30  0020               	movlb	0	; select bank0
  6859  1A31  00A4               	movwf	setSw_Initialization@sw
  6860                           
  6861                           ;Switch_B1.c: 84: setLED(sw, 1);
  6862  1A32  01A2               	clrf	setLED@command
  6863  1A33  0AA2               	incf	setLED@command,f
  6864  1A34  0824               	movf	setSw_Initialization@sw,w
  6865  1A35  3196  261F         	fcall	_setLED
  6866  1A37  0008               	return
  6867  1A38                     __end_of_setSw_Initialization:	
  6868                           
  6869                           	psect	text26
  6870  1B2C                     __ptext26:	
  6871 ;; *************** function _TouchPower *****************
  6872 ;; Defined at:
  6873 ;;		line 10 in file "../src/Switch_B1.c"
  6874 ;; Parameters:    Size  Location     Type
  6875 ;;		None
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;		None
  6878 ;; Return value:  Size  Location     Type
  6879 ;;		None               void
  6880 ;; Registers used:
  6881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6882 ;; Tracked objects:
  6883 ;;		On entry : 0/0
  6884 ;;		On exit  : 0/0
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;Total ram usage:        0 bytes
  6892 ;; Hardware stack levels used:    1
  6893 ;; Hardware stack levels required when called:    6
  6894 ;; This function calls:
  6895 ;;		_Timeout_Counter
  6896 ;;		_set_TimeoutCleared
  6897 ;; This function is called by:
  6898 ;;		_Switch_Initialization
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           
  6903                           ;psect for function _TouchPower
  6904  1B2C                     _TouchPower:	
  6905                           
  6906                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6907                           
  6908                           ;incstack = 0
  6909                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6910  1B2C  2B32               	goto	l10083
  6911  1B2D                     l2704:	
  6912                           
  6913                           ;Switch_B1.c: 12: RC5 = 1;
  6914  1B2D  0020               	movlb	0	; select bank0
  6915  1B2E  168E               	bsf	14,5	;volatile
  6916                           
  6917                           ;Switch_B1.c: 13: Timeout_Counter();
  6918  1B2F  319C  249A  319B   	fcall	_Timeout_Counter
  6919  1B32                     l10083:	
  6920  1B32  0020               	movlb	0	; select bank0
  6921  1B33  1A8E               	btfsc	14,5	;volatile
  6922  1B34  2B38               	goto	l10087
  6923  1B35  0021               	movlb	1	; select bank1
  6924  1B36  1D2D               	btfss	(_myMain^(0+128)+13),2
  6925  1B37  2B2D               	goto	l2704
  6926  1B38                     l10087:	
  6927                           
  6928                           ;Switch_B1.c: 14: }
  6929                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6930  1B38  3199  21E5         	fcall	_set_TimeoutCleared
  6931  1B3A  0008               	return
  6932  1B3B                     __end_of_TouchPower:	
  6933                           
  6934                           	psect	text27
  6935  19C9                     __ptext27:	
  6936 ;; *************** function _RF_Main *****************
  6937 ;; Defined at:
  6938 ;;		line 16 in file "../src/RF_Control_B1.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;		None               void
  6945 ;; Registers used:
  6946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;Total ram usage:        0 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:   14
  6959 ;; This function calls:
  6960 ;;		_setRF_Main
  6961 ;; This function is called by:
  6962 ;;		_main
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           
  6967                           ;psect for function _RF_Main
  6968  19C9                     _RF_Main:	
  6969                           
  6970                           ;RF_Control_B1.c: 18: setRF_Main();
  6971                           
  6972                           ;incstack = 0
  6973                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6974  19C9  3185  25BD         	fcall	_setRF_Main
  6975  19CB  0008               	return
  6976  19CC                     __end_of_RF_Main:	
  6977                           
  6978                           	psect	text28
  6979  05BD                     __ptext28:	
  6980 ;; *************** function _setRF_Main *****************
  6981 ;; Defined at:
  6982 ;;		line 52 in file "../src/RF_Control_B1.c"
  6983 ;; Parameters:    Size  Location     Type
  6984 ;;		None
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;  Receive_OK      1    0        unsigned char 
  6987 ;;  loop_f          1    0        unsigned char 
  6988 ;; Return value:  Size  Location     Type
  6989 ;;		None               void
  6990 ;; Registers used:
  6991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6992 ;; Tracked objects:
  6993 ;;		On entry : 0/0
  6994 ;;		On exit  : 0/0
  6995 ;;		Unchanged: 0/0
  6996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6998 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6999 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7001 ;;Total ram usage:        2 bytes
  7002 ;; Hardware stack levels used:    1
  7003 ;; Hardware stack levels required when called:   13
  7004 ;; This function calls:
  7005 ;;		_CC2500_ReadStatus
  7006 ;;		_CC2500_RxData
  7007 ;;		_CC2500_TxData
  7008 ;;		_CC2500_WriteCommand
  7009 ;;		_getBuz_GO
  7010 ;;		_getRxData
  7011 ;; This function is called by:
  7012 ;;		_RF_Main
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           
  7017                           ;psect for function _setRF_Main
  7018  05BD                     _setRF_Main:	
  7019                           
  7020                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  7021                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  7022                           
  7023                           ;incstack = 0
  7024                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7025  05BD  0021               	movlb	1	; select bank1
  7026  05BE  1C3C               	btfss	_RF1^(0+128),0
  7027  05BF  0008               	return
  7028                           
  7029                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  7030  05C0  319B  23CB  3185   	fcall	_getBuz_GO
  7031  05C3  0020               	movlb	0	; select bank0
  7032  05C4  0821               	movf	?_getBuz_GO+1,w
  7033  05C5  0420               	iorwf	?_getBuz_GO,w
  7034  05C6  1D03               	skipz
  7035  05C7  0008               	return
  7036                           
  7037                           ;RF_Control_B1.c: 64: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  7038  05C8  01E8               	clrf	_setRF_Main$5745
  7039  05C9  0AE8               	incf	_setRF_Main$5745,f
  7040  05CA  1F0C               	btfss	12,6	;volatile
  7041  05CB  1A0C               	btfsc	12,4	;volatile
  7042  05CC  2DD1               	goto	l9981
  7043  05CD  1C0C               	btfss	12,0	;volatile
  7044  05CE  188D               	btfsc	13,1	;volatile
  7045  05CF  2DD1               	goto	l9981
  7046  05D0  01E8               	clrf	_setRF_Main$5745
  7047  05D1                     l9981:	
  7048  05D1  0868               	movf	_setRF_Main$5745,w
  7049  05D2  0021               	movlb	1	; select bank1
  7050  05D3  13BC               	bcf	_RF1^(0+128),7
  7051  05D4  1D03               	skipz
  7052  05D5  17BC               	bsf	_RF1^(0+128),7
  7053                           
  7054                           ;RF_Control_B1.c: 71: if (RF1.Key == 1 && RF1.Learn == 0) {
  7055  05D6  1BBC               	btfsc	_RF1^(0+128),7
  7056  05D7  1B3C               	btfsc	_RF1^(0+128),6
  7057  05D8  2DDE               	goto	l2279
  7058                           
  7059                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  7060  05D9  01BE               	clrf	(_RF1^(0+128)+2)
  7061  05DA  01BF               	clrf	((_RF1+1)^(0+128)+2)
  7062                           
  7063                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  7064  05DB  14BD               	bsf	(_RF1^(0+128)+1),1
  7065                           
  7066                           ;RF_Control_B1.c: 74: RF1.RxStatus = 0;
  7067  05DC  11BC               	bcf	_RF1^(0+128),3
  7068                           
  7069                           ;RF_Control_B1.c: 76: } else {
  7070  05DD  0008               	return
  7071  05DE                     l2279:	
  7072                           
  7073                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  7074  05DE  18BD               	btfsc	(_RF1^(0+128)+1),1
  7075  05DF  1B3C               	btfsc	_RF1^(0+128),6
  7076  05E0  2DF5               	goto	l10003
  7077                           
  7078                           ;RF_Control_B1.c: 78: RF1.Count++;
  7079  05E1  3001               	movlw	1
  7080  05E2  07BE               	addwf	(_RF1^(0+128)+2),f
  7081  05E3  3000               	movlw	0
  7082  05E4  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  7083                           
  7084                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  7085  05E5  3002               	movlw	2
  7086  05E6  3EBC               	addlw	_RF1& (0+255)
  7087  05E7  0086               	movwf	6
  7088  05E8  0187               	clrf	7
  7089  05E9  3F40               	moviw [0]fsr1
  7090  05EA  0643               	xorwf	(_RF1^(0+128)+7),w
  7091  05EB  1D03               	skipz
  7092  05EC  2DEF               	goto	u10485
  7093  05ED  3F41               	moviw [1]fsr1
  7094  05EE  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  7095  05EF                     u10485:	
  7096  05EF  1D03               	skipz
  7097  05F0  2E67               	goto	l10057
  7098                           
  7099                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  7100  05F1  01BE               	clrf	(_RF1^(0+128)+2)
  7101  05F2  01BF               	clrf	((_RF1+1)^(0+128)+2)
  7102                           
  7103                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  7104  05F3  10BD               	bcf	(_RF1^(0+128)+1),1
  7105                           
  7106                           ;RF_Control_B1.c: 82: }
  7107                           ;RF_Control_B1.c: 83: } else {
  7108  05F4  2E67               	goto	l10057
  7109  05F5                     l10003:	
  7110                           
  7111                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  7112  05F5  01BE               	clrf	(_RF1^(0+128)+2)
  7113  05F6  01BF               	clrf	((_RF1+1)^(0+128)+2)
  7114                           
  7115                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  7116  05F7  10BD               	bcf	(_RF1^(0+128)+1),1
  7117                           
  7118                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  7119  05F8  193C               	btfsc	_RF1^(0+128),2
  7120  05F9  1B3C               	btfsc	_RF1^(0+128),6
  7121  05FA  2E16               	goto	l2284
  7122                           
  7123                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  7124  05FB  113C               	bcf	_RF1^(0+128),2
  7125                           
  7126                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  7127  05FC  11BC               	bcf	_RF1^(0+128),3
  7128                           
  7129                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  7130  05FD  10BC               	bcf	_RF1^(0+128),1
  7131                           
  7132                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  7133  05FE  303B               	movlw	59
  7134  05FF  319E  26BC  3185   	fcall	_CC2500_ReadStatus
  7135                           
  7136                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  7137  0602  0021               	movlb	1	; select bank1
  7138  0603  0856               	movf	_s_data^(0+128),w
  7139  0604  1903               	btfsc	3,2
  7140  0605  2E12               	goto	l2285
  7141                           
  7142                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  7143  0606  3036               	movlw	54
  7144  0607  319D  2508  3185   	fcall	_CC2500_WriteCommand
  7145                           
  7146                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  7147  060A  303B               	movlw	59
  7148  060B  319D  2508  3185   	fcall	_CC2500_WriteCommand
  7149                           
  7150                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  7151  060E  303A               	movlw	58
  7152  060F  319D  2508  3185   	fcall	_CC2500_WriteCommand
  7153  0612                     l2285:	
  7154                           
  7155                           ;RF_Control_B1.c: 97: }
  7156                           ;RF_Control_B1.c: 98: CC2500_TxData();
  7157  0612  3197  279B  3185   	fcall	_CC2500_TxData
  7158                           
  7159                           ;RF_Control_B1.c: 100: } else {
  7160  0615  2E67               	goto	l10057
  7161  0616                     l2284:	
  7162                           
  7163                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  7164  0616  1DBC               	btfss	_RF1^(0+128),3
  7165  0617  2E52               	goto	l2287
  7166                           
  7167                           ;RF_Control_B1.c: 103: CC2500_RxData();
  7168  0618  3189  21D9  3185   	fcall	_CC2500_RxData
  7169                           
  7170                           ;RF_Control_B1.c: 104: if (RF1.ReceiveGO == 1) {
  7171  061B  0021               	movlb	1	; select bank1
  7172  061C  1CBC               	btfss	_RF1^(0+128),1
  7173  061D  2E67               	goto	l10057
  7174                           
  7175                           ;RF_Control_B1.c: 105: RF1.ReceiveGO = 0;
  7176  061E  10BC               	bcf	_RF1^(0+128),1
  7177                           
  7178                           ;RF_Control_B1.c: 106: RF1.Correction = 0;
  7179  061F  12BD               	bcf	(_RF1^(0+128)+1),5
  7180                           
  7181                           ;RF_Control_B1.c: 107: RF1.CorrectionCounter = 0;
  7182  0620  01C6               	clrf	(_RF1^(0+128)+10)
  7183  0621  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7184                           
  7185                           ;RF_Control_B1.c: 116: getRxData();
  7186  0622  3188  202A  3185   	fcall	_getRxData
  7187                           
  7188                           ;RF_Control_B1.c: 117: RB5 = RB5 == 1 ? 0 : 1;
  7189  0625  3020               	movlw	32
  7190  0626  0020               	movlb	0	; select bank0
  7191  0627  068D               	xorwf	13,f
  7192                           
  7193                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  7194  0628  0021               	movlb	1	; select bank1
  7195  0629  14BD               	bsf	(_RF1^(0+128)+1),1
  7196                           
  7197                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  7198  062A  1DBD               	btfss	(_RF1^(0+128)+1),3
  7199  062B  2E39               	goto	l10041
  7200                           
  7201                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 10) {
  7202  062C  3000               	movlw	0
  7203  062D  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7204  062E  300B               	movlw	11
  7205  062F  1903               	skipnz
  7206  0630  0243               	subwf	(_RF1^(0+128)+7),w
  7207  0631  1C03               	skipc
  7208  0632  2E37               	goto	l10039
  7209                           
  7210                           ;RF_Control_B1.c: 124: RF1.RunTime = 10;
  7211  0633  300A               	movlw	10
  7212  0634  00C3               	movwf	(_RF1^(0+128)+7)
  7213  0635  3000               	movlw	0
  7214  0636  00C4               	movwf	(_RF1^(0+128)+8)
  7215  0637                     l10039:	
  7216                           
  7217                           ;RF_Control_B1.c: 125: }
  7218                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  7219  0637  01C0               	clrf	(_RF1^(0+128)+4)
  7220                           
  7221                           ;RF_Control_B1.c: 127: } else {
  7222  0638  2E67               	goto	l10057
  7223  0639                     l10041:	
  7224                           
  7225                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  7226  0639  3001               	movlw	1
  7227  063A  0020               	movlb	0	; select bank0
  7228  063B  00E7               	movwf	??_setRF_Main
  7229  063C  0867               	movf	??_setRF_Main,w
  7230  063D  0021               	movlb	1	; select bank1
  7231  063E  07C0               	addwf	(_RF1^(0+128)+4),f
  7232                           
  7233                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  7234  063F  0840               	movf	(_RF1^(0+128)+4),w
  7235  0640  3A02               	xorlw	2
  7236  0641  1D03               	skipz
  7237  0642  2E67               	goto	l10057
  7238                           
  7239                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  7240  0643  01C0               	clrf	(_RF1^(0+128)+4)
  7241                           
  7242                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  7243  0644  01C1               	clrf	(_RF1^(0+128)+5)
  7244  0645  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7245                           
  7246                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 200) {
  7247  0646  3000               	movlw	0
  7248  0647  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7249  0648  30C8               	movlw	200
  7250  0649  1903               	skipnz
  7251  064A  0243               	subwf	(_RF1^(0+128)+7),w
  7252  064B  1803               	skipnc
  7253  064C  2E67               	goto	l10057
  7254                           
  7255                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  7256  064D  300A               	movlw	10
  7257  064E  07C3               	addwf	(_RF1^(0+128)+7),f
  7258  064F  3000               	movlw	0
  7259  0650  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  7260                           
  7261                           ;RF_Control_B1.c: 134: }
  7262                           ;RF_Control_B1.c: 135: }
  7263                           ;RF_Control_B1.c: 136: }
  7264                           ;RF_Control_B1.c: 137: }
  7265                           ;RF_Control_B1.c: 138: } else {
  7266  0651  2E67               	goto	l10057
  7267  0652                     l2287:	
  7268                           
  7269                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7270  0652  1DBC               	btfss	_RF1^(0+128),3
  7271  0653  18BC               	btfsc	_RF1^(0+128),1
  7272  0654  2E67               	goto	l10057
  7273                           
  7274                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  7275  0655  15BC               	bsf	_RF1^(0+128),3
  7276                           
  7277                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  7278  0656  16BD               	bsf	(_RF1^(0+128)+1),5
  7279                           
  7280                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  7281  0657  3036               	movlw	54
  7282  0658  319D  2508  3185   	fcall	_CC2500_WriteCommand
  7283                           
  7284                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  7285  065B  303B               	movlw	59
  7286  065C  319D  2508  3185   	fcall	_CC2500_WriteCommand
  7287                           
  7288                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  7289  065F  303A               	movlw	58
  7290  0660  319D  2508  3185   	fcall	_CC2500_WriteCommand
  7291                           
  7292                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  7293  0663  3034               	movlw	52
  7294  0664  319D  2508  3185   	fcall	_CC2500_WriteCommand
  7295  0667                     l10057:	
  7296                           
  7297                           ;RF_Control_B1.c: 149: }
  7298                           ;RF_Control_B1.c: 151: }
  7299                           ;RF_Control_B1.c: 152: }
  7300                           ;RF_Control_B1.c: 153: }
  7301                           ;RF_Control_B1.c: 154: if (RF1.RxStatus == 1) {
  7302  0667  0021               	movlb	1	; select bank1
  7303  0668  1DBC               	btfss	_RF1^(0+128),3
  7304  0669  2E88               	goto	l10069
  7305                           
  7306                           ;RF_Control_B1.c: 155: RF1.CheckedCounter++;
  7307  066A  3001               	movlw	1
  7308  066B  07C1               	addwf	(_RF1^(0+128)+5),f
  7309  066C  3000               	movlw	0
  7310  066D  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  7311                           
  7312                           ;RF_Control_B1.c: 156: if (RF1.CheckedCounter == 100) {
  7313  066E  3005               	movlw	5
  7314  066F  3EBC               	addlw	_RF1& (0+255)
  7315  0670  0086               	movwf	6
  7316  0671  0187               	clrf	7
  7317  0672  3F40               	moviw [0]fsr1
  7318  0673  3A64               	xorlw	100
  7319  0674  1D03               	skipz
  7320  0675  2E78               	goto	u10615
  7321  0676  3F41               	moviw [1]fsr1
  7322  0677  3A00               	xorlw	0
  7323  0678                     u10615:	
  7324  0678  1D03               	skipz
  7325  0679  2E88               	goto	l10069
  7326                           
  7327                           ;RF_Control_B1.c: 157: RF1.CheckedCounter = 0;
  7328  067A  01C1               	clrf	(_RF1^(0+128)+5)
  7329  067B  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7330                           
  7331                           ;RF_Control_B1.c: 158: RF1.CheckCount = 0;
  7332  067C  01C0               	clrf	(_RF1^(0+128)+4)
  7333                           
  7334                           ;RF_Control_B1.c: 159: if (RF1.RunTime > 10) {
  7335  067D  3000               	movlw	0
  7336  067E  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7337  067F  300B               	movlw	11
  7338  0680  1903               	skipnz
  7339  0681  0243               	subwf	(_RF1^(0+128)+7),w
  7340  0682  1C03               	skipc
  7341  0683  2E88               	goto	l10069
  7342                           
  7343                           ;RF_Control_B1.c: 160: RF1.RunTime -= 10;
  7344  0684  300A               	movlw	10
  7345  0685  02C3               	subwf	(_RF1^(0+128)+7),f
  7346  0686  3000               	movlw	0
  7347  0687  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  7348  0688                     l10069:	
  7349                           
  7350                           ;RF_Control_B1.c: 161: }
  7351                           ;RF_Control_B1.c: 162: }
  7352                           ;RF_Control_B1.c: 163: }
  7353                           ;RF_Control_B1.c: 164: if (RF1.Correction == 1) {
  7354  0688  1EBD               	btfss	(_RF1^(0+128)+1),5
  7355  0689  0008               	return
  7356                           
  7357                           ;RF_Control_B1.c: 165: RF1.CorrectionCounter++;
  7358  068A  3001               	movlw	1
  7359  068B  07C6               	addwf	(_RF1^(0+128)+10),f
  7360  068C  3000               	movlw	0
  7361  068D  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  7362                           
  7363                           ;RF_Control_B1.c: 166: if (RF1.CorrectionCounter >= 30000) {
  7364  068E  3075               	movlw	117
  7365  068F  0247               	subwf	((_RF1+1)^(0+128)+10),w
  7366  0690  3030               	movlw	48
  7367  0691  1903               	skipnz
  7368  0692  0246               	subwf	(_RF1^(0+128)+10),w
  7369  0693  1C03               	skipc
  7370  0694  0008               	return
  7371                           
  7372                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter = 0;
  7373  0695  01C6               	clrf	(_RF1^(0+128)+10)
  7374  0696  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7375                           
  7376                           ;RF_Control_B1.c: 168: RF1.RxStatus = 0;
  7377  0697  11BC               	bcf	_RF1^(0+128),3
  7378                           
  7379                           ;RF_Control_B1.c: 169: RF1.ReceiveGO = 0;
  7380  0698  10BC               	bcf	_RF1^(0+128),1
  7381  0699  0008               	return
  7382  069A                     __end_of_setRF_Main:	
  7383                           
  7384                           	psect	text29
  7385  082A                     __ptext29:	
  7386 ;; *************** function _getRxData *****************
  7387 ;; Defined at:
  7388 ;;		line 252 in file "../src/RF_Control_B1.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;		None
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;		None
  7393 ;; Return value:  Size  Location     Type
  7394 ;;		None               void
  7395 ;; Registers used:
  7396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7397 ;; Tracked objects:
  7398 ;;		On entry : 0/0
  7399 ;;		On exit  : 0/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;Total ram usage:        0 bytes
  7407 ;; Hardware stack levels used:    1
  7408 ;; Hardware stack levels required when called:   12
  7409 ;; This function calls:
  7410 ;;		_setControl_Lights_Table
  7411 ;;		_setLog_Code
  7412 ;; This function is called by:
  7413 ;;		_setRF_Main
  7414 ;; This function uses a non-reentrant model
  7415 ;;
  7416                           
  7417                           
  7418                           ;psect for function _getRxData
  7419  082A                     _getRxData:	
  7420                           
  7421                           ;RF_Control_B1.c: 253: if (RF1.Learn == 1) {
  7422                           
  7423                           ;incstack = 0
  7424                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7425  082A  0021               	movlb	1	; select bank1
  7426  082B  1F3C               	btfss	_RF1^(0+128),6
  7427  082C  283D               	goto	l9475
  7428                           
  7429                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7430  082D  0023               	movlb	3	; select bank3
  7431  082E  08A0               	movf	_RF_Data^(0+384),f
  7432  082F  1D03               	skipz
  7433  0830  283A               	goto	l2318
  7434  0831  0821               	movf	(_RF_Data^(0+384)+1),w
  7435  0832  3A64               	xorlw	100
  7436  0833  1D03               	skipz
  7437  0834  283A               	goto	l2318
  7438                           
  7439                           ;RF_Control_B1.c: 255: setLog_Code();
  7440  0835  3190  20B1         	fcall	_setLog_Code
  7441                           
  7442                           ;RF_Control_B1.c: 256: RF1.Checked = 1;
  7443  0837  0021               	movlb	1	; select bank1
  7444  0838  15BD               	bsf	(_RF1^(0+128)+1),3
  7445                           
  7446                           ;RF_Control_B1.c: 257: } else {
  7447  0839  0008               	return
  7448  083A                     l2318:	
  7449                           
  7450                           ;RF_Control_B1.c: 258: RF1.Checked = 0;
  7451  083A  0021               	movlb	1	; select bank1
  7452  083B  11BD               	bcf	(_RF1^(0+128)+1),3
  7453                           
  7454                           ;RF_Control_B1.c: 259: }
  7455                           ;RF_Control_B1.c: 260: } else {
  7456  083C  0008               	return
  7457  083D                     l9475:	
  7458                           
  7459                           ;RF_Control_B1.c: 261: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7460  083D  0023               	movlb	3	; select bank3
  7461  083E  08A0               	movf	_RF_Data^(0+384),f
  7462  083F  1D03               	skipz
  7463  0840  287B               	goto	l9497
  7464  0841  0821               	movf	(_RF_Data^(0+384)+1),w
  7465  0842  3A02               	xorlw	2
  7466  0843  1D03               	skipz
  7467  0844  287B               	goto	l9497
  7468                           
  7469                           ;RF_Control_B1.c: 263: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7470  0845  082C               	movf	(_RF_Data^(0+384)+12),w
  7471  0846  3AFF               	xorlw	255
  7472  0847  1D03               	skipz
  7473  0848  2855               	goto	l9487
  7474  0849  082D               	movf	(_RF_Data^(0+384)+13),w
  7475  084A  3AFF               	xorlw	255
  7476  084B  1D03               	skipz
  7477  084C  2855               	goto	l9487
  7478  084D  082E               	movf	(_RF_Data^(0+384)+14),w
  7479  084E  3AFF               	xorlw	255
  7480  084F  1D03               	skipz
  7481  0850  2855               	goto	l9487
  7482                           
  7483                           ;RF_Control_B1.c: 264: __nop();
  7484  0851  0000               	nop
  7485                           
  7486                           ;RF_Control_B1.c: 265: RF1.Checked = 0;
  7487  0852  0021               	movlb	1	; select bank1
  7488  0853  11BD               	bcf	(_RF1^(0+128)+1),3
  7489                           
  7490                           ;RF_Control_B1.c: 266: } else {
  7491  0854  0008               	return
  7492  0855                     l9487:	
  7493                           
  7494                           ;RF_Control_B1.c: 267: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7495  0855  0020               	movlb	0	; select bank0
  7496  0856  086D               	movf	_product,w
  7497  0857  3E0C               	addlw	12
  7498  0858  0086               	movwf	6
  7499  0859  3002               	movlw	2	; select bank4/5
  7500  085A  0087               	movwf	7
  7501  085B  0023               	movlb	3	; select bank3
  7502  085C  082C               	movf	(_RF_Data^(0+384)+12),w
  7503  085D  0601               	xorwf	1,w
  7504  085E  1D03               	skipz
  7505  085F  0008               	return
  7506  0860  0020               	movlb	0	; select bank0
  7507  0861  086D               	movf	_product,w
  7508  0862  3E0D               	addlw	13
  7509  0863  0086               	movwf	6
  7510  0864  3002               	movlw	2	; select bank4/5
  7511  0865  0087               	movwf	7
  7512  0866  0023               	movlb	3	; select bank3
  7513  0867  082D               	movf	(_RF_Data^(0+384)+13),w
  7514  0868  0601               	xorwf	1,w
  7515  0869  1D03               	skipz
  7516  086A  0008               	return
  7517  086B  0020               	movlb	0	; select bank0
  7518  086C  086D               	movf	_product,w
  7519  086D  3E0E               	addlw	14
  7520  086E  0086               	movwf	6
  7521  086F  3002               	movlw	2	; select bank4/5
  7522  0870  0087               	movwf	7
  7523  0871  0023               	movlb	3	; select bank3
  7524  0872  082E               	movf	(_RF_Data^(0+384)+14),w
  7525  0873  0601               	xorwf	1,w
  7526  0874  1D03               	skipz
  7527  0875  0008               	return
  7528                           
  7529                           ;RF_Control_B1.c: 268: setControl_Lights_Table();
  7530  0876  3187  2761         	fcall	_setControl_Lights_Table
  7531                           
  7532                           ;RF_Control_B1.c: 269: RF1.Checked = 1;
  7533  0878  0021               	movlb	1	; select bank1
  7534  0879  15BD               	bsf	(_RF1^(0+128)+1),3
  7535                           
  7536                           ;RF_Control_B1.c: 270: }
  7537                           ;RF_Control_B1.c: 271: }
  7538                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7539  087A  0008               	return
  7540  087B                     l9497:	
  7541  087B  0023               	movlb	3	; select bank3
  7542  087C  0820               	movf	_RF_Data^(0+384),w
  7543  087D  3AFF               	xorlw	255
  7544  087E  1D03               	skipz
  7545  087F  2886               	goto	l9503
  7546  0880  0821               	movf	(_RF_Data^(0+384)+1),w
  7547  0881  3A02               	xorlw	2
  7548  0882  1D03               	skipz
  7549  0883  2886               	goto	l9503
  7550                           
  7551                           ;RF_Control_B1.c: 273: __nop();
  7552  0884  0000               	nop
  7553                           
  7554                           ;RF_Control_B1.c: 274: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7555  0885  0008               	return
  7556  0886                     l9503:	
  7557  0886  0023               	movlb	3	; select bank3
  7558  0887  08A0               	movf	_RF_Data^(0+384),f
  7559  0888  1D03               	skipz
  7560  0889  2890               	goto	l2328
  7561  088A  0821               	movf	(_RF_Data^(0+384)+1),w
  7562  088B  3A65               	xorlw	101
  7563  088C  1D03               	skipz
  7564  088D  2890               	goto	l2328
  7565                           
  7566                           ;RF_Control_B1.c: 275: __nop();
  7567  088E  0000               	nop
  7568                           
  7569                           ;RF_Control_B1.c: 276: } else {
  7570  088F  0008               	return
  7571  0890                     l2328:	
  7572                           
  7573                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  7574  0890  0021               	movlb	1	; select bank1
  7575  0891  11BD               	bcf	(_RF1^(0+128)+1),3
  7576  0892  0008               	return
  7577  0893                     __end_of_getRxData:	
  7578                           
  7579                           	psect	text30
  7580  10B1                     __ptext30:	
  7581 ;; *************** function _setLog_Code *****************
  7582 ;; Defined at:
  7583 ;;		line 287 in file "../src/RF_Control_B1.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;		None
  7586 ;; Auto vars:     Size  Location     Type
  7587 ;;		None
  7588 ;; Return value:  Size  Location     Type
  7589 ;;		None               void
  7590 ;; Registers used:
  7591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7592 ;; Tracked objects:
  7593 ;;		On entry : 0/0
  7594 ;;		On exit  : 0/0
  7595 ;;		Unchanged: 0/0
  7596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;Total ram usage:        1 bytes
  7602 ;; Hardware stack levels used:    1
  7603 ;; Hardware stack levels required when called:    7
  7604 ;; This function calls:
  7605 ;;		_setBuz
  7606 ;; This function is called by:
  7607 ;;		_getRxData
  7608 ;; This function uses a non-reentrant model
  7609 ;;
  7610                           
  7611                           
  7612                           ;psect for function _setLog_Code
  7613  10B1                     _setLog_Code:	
  7614                           
  7615                           ;RF_Control_B1.c: 288: product->Data[12]=RF_Data[12];
  7616                           
  7617                           ;incstack = 0
  7618                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7619  10B1  0023               	movlb	3	; select bank3
  7620  10B2  082C               	movf	(_RF_Data^(0+384)+12),w
  7621  10B3  0020               	movlb	0	; select bank0
  7622  10B4  00AD               	movwf	??_setLog_Code
  7623  10B5  086D               	movf	_product,w
  7624  10B6  3E0C               	addlw	12
  7625  10B7  0086               	movwf	6
  7626  10B8  3002               	movlw	2	; select bank4/5
  7627  10B9  0087               	movwf	7
  7628  10BA  082D               	movf	??_setLog_Code,w
  7629  10BB  0081               	movwf	1
  7630                           
  7631                           ;RF_Control_B1.c: 289: product->Data[13]=RF_Data[13];
  7632  10BC  0023               	movlb	3	; select bank3
  7633  10BD  082D               	movf	(_RF_Data^(0+384)+13),w
  7634  10BE  0020               	movlb	0	; select bank0
  7635  10BF  00AD               	movwf	??_setLog_Code
  7636  10C0  086D               	movf	_product,w
  7637  10C1  3E0D               	addlw	13
  7638  10C2  0086               	movwf	6
  7639  10C3  3002               	movlw	2	; select bank4/5
  7640  10C4  0087               	movwf	7
  7641  10C5  082D               	movf	??_setLog_Code,w
  7642  10C6  0081               	movwf	1
  7643                           
  7644                           ;RF_Control_B1.c: 290: product->Data[14]=RF_Data[14];
  7645  10C7  0023               	movlb	3	; select bank3
  7646  10C8  082E               	movf	(_RF_Data^(0+384)+14),w
  7647  10C9  0020               	movlb	0	; select bank0
  7648  10CA  00AD               	movwf	??_setLog_Code
  7649  10CB  086D               	movf	_product,w
  7650  10CC  3E0E               	addlw	14
  7651  10CD  0086               	movwf	6
  7652  10CE  3002               	movlw	2	; select bank4/5
  7653  10CF  0087               	movwf	7
  7654  10D0  082D               	movf	??_setLog_Code,w
  7655  10D1  0081               	movwf	1
  7656                           
  7657                           ;RF_Control_B1.c: 291: setBuz(1, 100);
  7658  10D2  3064               	movlw	100
  7659  10D3  00A9               	movwf	setBuz@time
  7660  10D4  3000               	movlw	0
  7661  10D5  00AA               	movwf	setBuz@time+1
  7662  10D6  3001               	movlw	1
  7663  10D7  3195  256B  3190   	fcall	_setBuz
  7664                           
  7665                           ;RF_Control_B1.c: 292: RF1.Learn = 0;
  7666  10DA  0021               	movlb	1	; select bank1
  7667  10DB  133C               	bcf	_RF1^(0+128),6
  7668                           
  7669                           ;RF_Control_B1.c: 293: if (myMain.First) {
  7670  10DC  1EA0               	btfss	_myMain^(0+128),5
  7671  10DD  28E0               	goto	l2333
  7672                           
  7673                           ;RF_Control_B1.c: 294: Memory.LoopSave=1;
  7674  10DE  0024               	movlb	4	; select bank4
  7675  10DF  1544               	bsf	(_Memory^(0+512)+36),2
  7676  10E0                     l2333:	
  7677                           
  7678                           ;RF_Control_B1.c: 295: }
  7679                           ;RF_Control_B1.c: 296: Memory.Modify=1;
  7680  10E0  0024               	movlb	4	; select bank4
  7681  10E1  1444               	bsf	(_Memory^(0+512)+36),0
  7682  10E2  0008               	return
  7683  10E3                     __end_of_setLog_Code:	
  7684                           
  7685                           	psect	text31
  7686  0761                     __ptext31:	
  7687 ;; *************** function _setControl_Lights_Table *****************
  7688 ;; Defined at:
  7689 ;;		line 300 in file "../src/RF_Control_B1.c"
  7690 ;; Parameters:    Size  Location     Type
  7691 ;;		None
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;		None
  7694 ;; Return value:  Size  Location     Type
  7695 ;;		None               void
  7696 ;; Registers used:
  7697 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7698 ;; Tracked objects:
  7699 ;;		On entry : 0/0
  7700 ;;		On exit  : 0/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;Total ram usage:        0 bytes
  7708 ;; Hardware stack levels used:    1
  7709 ;; Hardware stack levels required when called:   11
  7710 ;; This function calls:
  7711 ;;		_setBuz
  7712 ;;		_setDimmerLights
  7713 ;;		_setRFSW_AdjControl
  7714 ;;		_setRFSW_Control
  7715 ;;		_setRFSW_Status
  7716 ;;		_setSw_Status
  7717 ;;		_setTxData
  7718 ;; This function is called by:
  7719 ;;		_getRxData
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           
  7724                           ;psect for function _setControl_Lights_Table
  7725  0761                     _setControl_Lights_Table:	
  7726                           
  7727                           ;RF_Control_B1.c: 301: if (RF_Data[15] == 0x00) {
  7728                           
  7729                           ;incstack = 0
  7730                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7731  0761  0023               	movlb	3	; select bank3
  7732  0762  08AF               	movf	(_RF_Data^(0+384)+15),f
  7733  0763  1D03               	skipz
  7734  0764  2FAD               	goto	l9193
  7735                           
  7736                           ;RF_Control_B1.c: 303: setDimmerLights(1, 0);
  7737  0765  0020               	movlb	0	; select bank0
  7738  0766  01A4               	clrf	setDimmerLights@status
  7739  0767  3001               	movlw	1
  7740  0768  318C  242F  3187   	fcall	_setDimmerLights
  7741                           
  7742                           ;RF_Control_B1.c: 304: setRFSW_Status(1, 0);
  7743  076B  0020               	movlb	0	; select bank0
  7744  076C  01A2               	clrf	setRFSW_Status@command
  7745  076D  3001               	movlw	1
  7746  076E  319A  22E4  3187   	fcall	_setRFSW_Status
  7747                           
  7748                           ;RF_Control_B1.c: 305: setSw_Status(1, 0);
  7749  0771  0020               	movlb	0	; select bank0
  7750  0772  01A2               	clrf	setSw_Status@command
  7751  0773  3001               	movlw	1
  7752  0774  319B  231D  3187   	fcall	_setSw_Status
  7753                           
  7754                           ;RF_Control_B1.c: 308: setDimmerLights(2, 0);
  7755  0777  0020               	movlb	0	; select bank0
  7756  0778  01A4               	clrf	setDimmerLights@status
  7757  0779  3002               	movlw	2
  7758  077A  318C  242F  3187   	fcall	_setDimmerLights
  7759                           
  7760                           ;RF_Control_B1.c: 309: setRFSW_Status(2, 0);
  7761  077D  0020               	movlb	0	; select bank0
  7762  077E  01A2               	clrf	setRFSW_Status@command
  7763  077F  3002               	movlw	2
  7764  0780  319A  22E4  3187   	fcall	_setRFSW_Status
  7765                           
  7766                           ;RF_Control_B1.c: 310: setSw_Status(2, 0);
  7767  0783  0020               	movlb	0	; select bank0
  7768  0784  01A2               	clrf	setSw_Status@command
  7769  0785  3002               	movlw	2
  7770  0786  319B  231D  3187   	fcall	_setSw_Status
  7771                           
  7772                           ;RF_Control_B1.c: 318: product->Data[9]=0;
  7773  0789  0020               	movlb	0	; select bank0
  7774  078A  086D               	movf	_product,w
  7775  078B  3E09               	addlw	9
  7776  078C  0086               	movwf	6
  7777  078D  3002               	movlw	2	; select bank4/5
  7778  078E  0087               	movwf	7
  7779  078F  0181               	clrf	1
  7780                           
  7781                           ;RF_Control_B1.c: 319: product->Data[11]=0;
  7782  0790  086D               	movf	_product,w
  7783  0791  3E0B               	addlw	11
  7784  0792  0086               	movwf	6
  7785  0793  3002               	movlw	2	; select bank4/5
  7786  0794  0087               	movwf	7
  7787  0795  0181               	clrf	1
  7788                           
  7789                           ;RF_Control_B1.c: 320: product->Data[15]=0;
  7790  0796  086D               	movf	_product,w
  7791  0797  3E0F               	addlw	15
  7792  0798  0086               	movwf	6
  7793  0799  3002               	movlw	2	; select bank4/5
  7794  079A  0087               	movwf	7
  7795  079B  0181               	clrf	1
  7796                           
  7797                           ;RF_Control_B1.c: 321: product->Data[17]=0;
  7798  079C  086D               	movf	_product,w
  7799  079D  3E11               	addlw	17
  7800  079E  0086               	movwf	6
  7801  079F  3002               	movlw	2	; select bank4/5
  7802  07A0  0087               	movwf	7
  7803  07A1  0181               	clrf	1
  7804                           
  7805                           ;RF_Control_B1.c: 322: setBuz(1, 100);
  7806  07A2  3064               	movlw	100
  7807  07A3  00A9               	movwf	setBuz@time
  7808  07A4  3000               	movlw	0
  7809  07A5  00AA               	movwf	setBuz@time+1
  7810  07A6  3001               	movlw	1
  7811  07A7  3195  256B  3187   	fcall	_setBuz
  7812                           
  7813                           ;RF_Control_B1.c: 323: setTxData();
  7814  07AA  318F  2743         	fcall	_setTxData
  7815                           
  7816                           ;RF_Control_B1.c: 324: } else if (RF_Data[15] == 0x20) {
  7817  07AC  0008               	return
  7818  07AD                     l9193:	
  7819  07AD  0023               	movlb	3	; select bank3
  7820  07AE  082F               	movf	(_RF_Data^(0+384)+15),w
  7821  07AF  3A20               	xorlw	32
  7822  07B0  1D03               	skipz
  7823  07B1  2FC8               	goto	l9199
  7824                           
  7825                           ;RF_Control_B1.c: 325: product->Data[9]=0;
  7826  07B2  0020               	movlb	0	; select bank0
  7827  07B3  086D               	movf	_product,w
  7828  07B4  3E09               	addlw	9
  7829  07B5  0086               	movwf	6
  7830  07B6  3002               	movlw	2	; select bank4/5
  7831  07B7  0087               	movwf	7
  7832  07B8  0181               	clrf	1
  7833                           
  7834                           ;RF_Control_B1.c: 326: product->Data[11]=0;
  7835  07B9  086D               	movf	_product,w
  7836  07BA  3E0B               	addlw	11
  7837  07BB  0086               	movwf	6
  7838  07BC  3002               	movlw	2	; select bank4/5
  7839  07BD  0087               	movwf	7
  7840  07BE  0181               	clrf	1
  7841                           
  7842                           ;RF_Control_B1.c: 327: product->Data[17]=0;
  7843  07BF  086D               	movf	_product,w
  7844  07C0  3E11               	addlw	17
  7845  07C1  0086               	movwf	6
  7846  07C2  3002               	movlw	2	; select bank4/5
  7847  07C3  0087               	movwf	7
  7848  07C4  0181               	clrf	1
  7849                           
  7850                           ;RF_Control_B1.c: 328: setTxData();
  7851  07C5  318F  2743         	fcall	_setTxData
  7852                           
  7853                           ;RF_Control_B1.c: 329: }
  7854  07C7  0008               	return
  7855  07C8                     l9199:	
  7856                           
  7857                           ;RF_Control_B1.c: 331: else if (RF_Data[15] == 0x01) {
  7858  07C8  0023               	movlb	3	; select bank3
  7859  07C9  082F               	movf	(_RF_Data^(0+384)+15),w
  7860  07CA  3A01               	xorlw	1
  7861  07CB  1D03               	skipz
  7862  07CC  2FD1               	goto	l9203
  7863                           
  7864                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7865  07CD  3001               	movlw	1
  7866  07CE  318C  24B8         	fcall	_setRFSW_Control
  7867                           
  7868                           ;RF_Control_B1.c: 333: }
  7869  07D0  0008               	return
  7870  07D1                     l9203:	
  7871                           
  7872                           ;RF_Control_B1.c: 335: else if (RF_Data[15] == 0x11) {
  7873  07D1  0023               	movlb	3	; select bank3
  7874  07D2  082F               	movf	(_RF_Data^(0+384)+15),w
  7875  07D3  3A11               	xorlw	17
  7876  07D4  1D03               	skipz
  7877  07D5  2FDA               	goto	l9207
  7878                           
  7879                           ;RF_Control_B1.c: 336: setRFSW_AdjControl(1);
  7880  07D6  3001               	movlw	1
  7881  07D7  3191  21BD         	fcall	_setRFSW_AdjControl
  7882                           
  7883                           ;RF_Control_B1.c: 337: }
  7884  07D9  0008               	return
  7885  07DA                     l9207:	
  7886                           
  7887                           ;RF_Control_B1.c: 342: else if (RF_Data[15] == 0x02) {
  7888  07DA  0023               	movlb	3	; select bank3
  7889  07DB  082F               	movf	(_RF_Data^(0+384)+15),w
  7890  07DC  3A02               	xorlw	2
  7891  07DD  1D03               	skipz
  7892  07DE  2FE3               	goto	l9211
  7893                           
  7894                           ;RF_Control_B1.c: 343: setRFSW_Control(2);
  7895  07DF  3002               	movlw	2
  7896  07E0  318C  24B8         	fcall	_setRFSW_Control
  7897                           
  7898                           ;RF_Control_B1.c: 344: }
  7899  07E2  0008               	return
  7900  07E3                     l9211:	
  7901                           
  7902                           ;RF_Control_B1.c: 346: else if (RF_Data[15] == 0x21) {
  7903  07E3  0023               	movlb	3	; select bank3
  7904  07E4  082F               	movf	(_RF_Data^(0+384)+15),w
  7905  07E5  3A21               	xorlw	33
  7906  07E6  1D03               	skipz
  7907  07E7  0008               	return
  7908                           
  7909                           ;RF_Control_B1.c: 347: setRFSW_AdjControl(2);
  7910  07E8  3002               	movlw	2
  7911  07E9  3191  21BD         	fcall	_setRFSW_AdjControl
  7912  07EB  0008               	return
  7913  07EC                     __end_of_setControl_Lights_Table:	
  7914                           
  7915                           	psect	text32
  7916  0CB8                     __ptext32:	
  7917 ;; *************** function _setRFSW_Control *****************
  7918 ;; Defined at:
  7919 ;;		line 388 in file "../src/RF_Control_B1.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  sw              1    wreg     unsigned char 
  7922 ;; Auto vars:     Size  Location     Type
  7923 ;;  sw              1   67[BANK0 ] unsigned char 
  7924 ;; Return value:  Size  Location     Type
  7925 ;;		None               void
  7926 ;; Registers used:
  7927 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7928 ;; Tracked objects:
  7929 ;;		On entry : 0/0
  7930 ;;		On exit  : 0/0
  7931 ;;		Unchanged: 0/0
  7932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;Total ram usage:        2 bytes
  7938 ;; Hardware stack levels used:    1
  7939 ;; Hardware stack levels required when called:    9
  7940 ;; This function calls:
  7941 ;;		_RfSWPointSelect
  7942 ;;		_setBuz
  7943 ;;		_setDelayOff_GO
  7944 ;;		_setDimmerLights_Switch
  7945 ;;		_setDimmerLights_Trigger
  7946 ;;		_setRF_DimmerLights
  7947 ;;		_setSw_Status
  7948 ;;		_setTxData
  7949 ;; This function is called by:
  7950 ;;		_setControl_Lights_Table
  7951 ;; This function uses a non-reentrant model
  7952 ;;
  7953                           
  7954                           
  7955                           ;psect for function _setRFSW_Control
  7956  0CB8                     _setRFSW_Control:	
  7957                           
  7958                           ;incstack = 0
  7959                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7960                           ;setRFSW_Control@sw stored from wreg
  7961  0CB8  0020               	movlb	0	; select bank0
  7962  0CB9  00E3               	movwf	setRFSW_Control@sw
  7963                           
  7964                           ;RF_Control_B1.c: 389: RfSWPointSelect(sw);
  7965  0CBA  0863               	movf	setRFSW_Control@sw,w
  7966  0CBB  319C  2437  318C   	fcall	_RfSWPointSelect
  7967                           
  7968                           ;RF_Control_B1.c: 390: if (RFSW->Status == 0) {
  7969  0CBE  0879               	movf	_RFSW,w
  7970  0CBF  0086               	movwf	6
  7971  0CC0  0187               	clrf	7
  7972  0CC1  1801               	btfsc	1,0
  7973  0CC2  2CF7               	goto	l9037
  7974                           
  7975                           ;RF_Control_B1.c: 391: if (RF_Data[16] == 0x80) {
  7976  0CC3  0023               	movlb	3	; select bank3
  7977  0CC4  0830               	movf	(_RF_Data^(0+384)+16),w
  7978  0CC5  3A80               	xorlw	128
  7979  0CC6  1D03               	skipz
  7980  0CC7  2CD5               	goto	l9027
  7981                           
  7982                           ;RF_Control_B1.c: 392: setDelayOff_GO(sw, 1, RF_Data[17]);
  7983  0CC8  0020               	movlb	0	; select bank0
  7984  0CC9  01AA               	clrf	setDelayOff_GO@command
  7985  0CCA  0AAA               	incf	setDelayOff_GO@command,f
  7986  0CCB  0023               	movlb	3	; select bank3
  7987  0CCC  0831               	movf	(_RF_Data^(0+384)+17),w
  7988  0CCD  0020               	movlb	0	; select bank0
  7989  0CCE  00E2               	movwf	??_setRFSW_Control
  7990  0CCF  0862               	movf	??_setRFSW_Control,w
  7991  0CD0  00AB               	movwf	setDelayOff_GO@value
  7992  0CD1  0863               	movf	setRFSW_Control@sw,w
  7993  0CD2  3196  26DB  318C   	fcall	_setDelayOff_GO
  7994  0CD5                     l9027:	
  7995                           
  7996                           ;RF_Control_B1.c: 393: }
  7997                           ;RF_Control_B1.c: 394: RFSW->Status = 1;
  7998  0CD5  0879               	movf	_RFSW,w
  7999  0CD6  0086               	movwf	6
  8000  0CD7  0187               	clrf	7
  8001  0CD8  1401               	bsf	1,0
  8002                           
  8003                           ;RF_Control_B1.c: 395: setSw_Status(sw, 1);
  8004  0CD9  0020               	movlb	0	; select bank0
  8005  0CDA  01A2               	clrf	setSw_Status@command
  8006  0CDB  0AA2               	incf	setSw_Status@command,f
  8007  0CDC  0863               	movf	setRFSW_Control@sw,w
  8008  0CDD  319B  231D  318C   	fcall	_setSw_Status
  8009                           
  8010                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw, 1);
  8011  0CE0  0020               	movlb	0	; select bank0
  8012  0CE1  01A2               	clrf	setDimmerLights_Trigger@command
  8013  0CE2  0AA2               	incf	setDimmerLights_Trigger@command,f
  8014  0CE3  0863               	movf	setRFSW_Control@sw,w
  8015  0CE4  319B  2369  318C   	fcall	_setDimmerLights_Trigger
  8016                           
  8017                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw, 1);
  8018  0CE7  0020               	movlb	0	; select bank0
  8019  0CE8  01A2               	clrf	setDimmerLights_Switch@command
  8020  0CE9  0AA2               	incf	setDimmerLights_Switch@command,f
  8021  0CEA  0863               	movf	setRFSW_Control@sw,w
  8022  0CEB  319B  2359  318C   	fcall	_setDimmerLights_Switch
  8023                           
  8024                           ;RF_Control_B1.c: 400: setRF_DimmerLights(sw, RFSW->Status);
  8025  0CEE  0879               	movf	_RFSW,w
  8026  0CEF  0086               	movwf	6
  8027  0CF0  0187               	clrf	7
  8028  0CF1  3000               	movlw	0
  8029  0CF2  1801               	btfsc	1,0
  8030  0CF3  3001               	movlw	1
  8031  0CF4  0020               	movlb	0	; select bank0
  8032  0CF5  00DD               	movwf	setRF_DimmerLights@on
  8033  0CF6  2D33               	goto	L3
  8034  0CF7                     l9037:	
  8035                           ;RF_Control_B1.c: 401: } else {
  8036                           
  8037                           
  8038                           ;RF_Control_B1.c: 402: if (RF_Data[16] == 0x80) {
  8039  0CF7  0023               	movlb	3	; select bank3
  8040  0CF8  0830               	movf	(_RF_Data^(0+384)+16),w
  8041  0CF9  3A80               	xorlw	128
  8042  0CFA  1D03               	skipz
  8043  0CFB  2D0D               	goto	l9041
  8044                           
  8045                           ;RF_Control_B1.c: 403: setDelayOff_GO(sw, 1, RF_Data[17]);
  8046  0CFC  0020               	movlb	0	; select bank0
  8047  0CFD  01AA               	clrf	setDelayOff_GO@command
  8048  0CFE  0AAA               	incf	setDelayOff_GO@command,f
  8049  0CFF  0023               	movlb	3	; select bank3
  8050  0D00  0831               	movf	(_RF_Data^(0+384)+17),w
  8051  0D01  0020               	movlb	0	; select bank0
  8052  0D02  00E2               	movwf	??_setRFSW_Control
  8053  0D03  0862               	movf	??_setRFSW_Control,w
  8054  0D04  00AB               	movwf	setDelayOff_GO@value
  8055  0D05  0863               	movf	setRFSW_Control@sw,w
  8056  0D06  3196  26DB  318C   	fcall	_setDelayOff_GO
  8057                           
  8058                           ;RF_Control_B1.c: 404: setRF_DimmerLights(sw, 1);
  8059  0D09  0020               	movlb	0	; select bank0
  8060  0D0A  01DD               	clrf	setRF_DimmerLights@on
  8061  0D0B  0ADD               	incf	setRF_DimmerLights@on,f
  8062  0D0C  2D33               	goto	L3
  8063  0D0D                     l9041:	
  8064                           ;RF_Control_B1.c: 405: } else {
  8065                           
  8066                           
  8067                           ;RF_Control_B1.c: 406: RFSW->Status = 0;
  8068  0D0D  0879               	movf	_RFSW,w
  8069  0D0E  0086               	movwf	6
  8070  0D0F  0187               	clrf	7
  8071  0D10  1001               	bcf	1,0
  8072                           
  8073                           ;RF_Control_B1.c: 407: setSw_Status(sw, 0);
  8074  0D11  0020               	movlb	0	; select bank0
  8075  0D12  01A2               	clrf	setSw_Status@command
  8076  0D13  0863               	movf	setRFSW_Control@sw,w
  8077  0D14  319B  231D  318C   	fcall	_setSw_Status
  8078                           
  8079                           ;RF_Control_B1.c: 409: setDimmerLights_Trigger(sw, 1);
  8080  0D17  0020               	movlb	0	; select bank0
  8081  0D18  01A2               	clrf	setDimmerLights_Trigger@command
  8082  0D19  0AA2               	incf	setDimmerLights_Trigger@command,f
  8083  0D1A  0863               	movf	setRFSW_Control@sw,w
  8084  0D1B  319B  2369  318C   	fcall	_setDimmerLights_Trigger
  8085                           
  8086                           ;RF_Control_B1.c: 410: setDimmerLights_Switch(sw, RFSW->Status);
  8087  0D1E  0879               	movf	_RFSW,w
  8088  0D1F  0086               	movwf	6
  8089  0D20  0187               	clrf	7
  8090  0D21  3000               	movlw	0
  8091  0D22  1801               	btfsc	1,0
  8092  0D23  3001               	movlw	1
  8093  0D24  0020               	movlb	0	; select bank0
  8094  0D25  00A2               	movwf	setDimmerLights_Switch@command
  8095  0D26  0863               	movf	setRFSW_Control@sw,w
  8096  0D27  319B  2359  318C   	fcall	_setDimmerLights_Switch
  8097                           
  8098                           ;RF_Control_B1.c: 412: setDelayOff_GO(sw, 0, 0);
  8099  0D2A  0020               	movlb	0	; select bank0
  8100  0D2B  01AA               	clrf	setDelayOff_GO@command
  8101  0D2C  01AB               	clrf	setDelayOff_GO@value
  8102  0D2D  0863               	movf	setRFSW_Control@sw,w
  8103  0D2E  3196  26DB  318C   	fcall	_setDelayOff_GO
  8104                           
  8105                           ;RF_Control_B1.c: 413: setRF_DimmerLights(sw, 0);
  8106  0D31  0020               	movlb	0	; select bank0
  8107  0D32  01DD               	clrf	setRF_DimmerLights@on
  8108  0D33                     L3:	
  8109  0D33  0863               	movf	setRFSW_Control@sw,w
  8110  0D34  3188  20FE  318C   	fcall	_setRF_DimmerLights
  8111                           
  8112                           ;RF_Control_B1.c: 414: }
  8113                           ;RF_Control_B1.c: 415: }
  8114                           ;RF_Control_B1.c: 416: setBuz(1, 100);
  8115  0D37  3064               	movlw	100
  8116  0D38  0020               	movlb	0	; select bank0
  8117  0D39  00A9               	movwf	setBuz@time
  8118  0D3A  3000               	movlw	0
  8119  0D3B  00AA               	movwf	setBuz@time+1
  8120  0D3C  3001               	movlw	1
  8121  0D3D  3195  256B  318C   	fcall	_setBuz
  8122                           
  8123                           ;RF_Control_B1.c: 417: setTxData();
  8124  0D40  318F  2743         	fcall	_setTxData
  8125  0D42  0008               	return
  8126  0D43                     __end_of_setRFSW_Control:	
  8127                           
  8128                           	psect	text33
  8129  16DB                     __ptext33:	
  8130 ;; *************** function _setDelayOff_GO *****************
  8131 ;; Defined at:
  8132 ;;		line 86 in file "../src/DelayOff_B1.c"
  8133 ;; Parameters:    Size  Location     Type
  8134 ;;  sw              1    wreg     unsigned char 
  8135 ;;  command         1   10[BANK0 ] unsigned char 
  8136 ;;  value           1   11[BANK0 ] unsigned char 
  8137 ;; Auto vars:     Size  Location     Type
  8138 ;;  sw              1   14[BANK0 ] unsigned char 
  8139 ;; Return value:  Size  Location     Type
  8140 ;;		None               void
  8141 ;; Registers used:
  8142 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8143 ;; Tracked objects:
  8144 ;;		On entry : 0/0
  8145 ;;		On exit  : 0/0
  8146 ;;		Unchanged: 0/0
  8147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8148 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8149 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8150 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8151 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8152 ;;Total ram usage:        5 bytes
  8153 ;; Hardware stack levels used:    1
  8154 ;; Hardware stack levels required when called:    7
  8155 ;; This function calls:
  8156 ;;		_DelayOffPointSelect
  8157 ;;		_DelayTimejudge
  8158 ;; This function is called by:
  8159 ;;		_setRFSW_Control
  8160 ;;		_Sw_DimmerOffFunc
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164                           
  8165                           ;psect for function _setDelayOff_GO
  8166  16DB                     _setDelayOff_GO:	
  8167                           
  8168                           ;incstack = 0
  8169                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8170                           ;setDelayOff_GO@sw stored from wreg
  8171  16DB  0020               	movlb	0	; select bank0
  8172  16DC  00AE               	movwf	setDelayOff_GO@sw
  8173                           
  8174                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  8175  16DD  082E               	movf	setDelayOff_GO@sw,w
  8176  16DE  319C  2486  3196   	fcall	_DelayOffPointSelect
  8177                           
  8178                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  8179  16E1  0020               	movlb	0	; select bank0
  8180  16E2  086A               	movf	_DelayOff,w
  8181  16E3  0086               	movwf	6
  8182  16E4  0187               	clrf	7
  8183  16E5  1C01               	btfss	1,0
  8184  16E6  0008               	return
  8185                           
  8186                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  8187  16E7  082A               	movf	setDelayOff_GO@command,w
  8188  16E8  3A01               	xorlw	1
  8189  16E9  3000               	movlw	0
  8190  16EA  1903               	skipnz
  8191  16EB  3001               	movlw	1
  8192  16EC  00AC               	movwf	??_setDelayOff_GO
  8193  16ED  086A               	movf	_DelayOff,w
  8194  16EE  0086               	movwf	6
  8195  16EF  0187               	clrf	7
  8196  16F0  0DAC               	rlf	??_setDelayOff_GO,f
  8197  16F1  0801               	movf	1,w
  8198  16F2  062C               	xorwf	??_setDelayOff_GO,w
  8199  16F3  39FD               	andlw	-3
  8200  16F4  062C               	xorwf	??_setDelayOff_GO,w
  8201  16F5  0081               	movwf	1
  8202                           
  8203                           ;DelayOff_B1.c: 90: if (command == 1) {
  8204  16F6  082A               	movf	setDelayOff_GO@command,w
  8205  16F7  3A01               	xorlw	1
  8206  16F8  1D03               	skipz
  8207  16F9  2F23               	goto	l8807
  8208                           
  8209                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  8210  16FA  082B               	movf	setDelayOff_GO@value,w
  8211  16FB  3188  2000  3196   	fcall	_DelayTimejudge
  8212  16FE  0020               	movlb	0	; select bank0
  8213  16FF  00AC               	movwf	??_setDelayOff_GO
  8214  1700  086A               	movf	_DelayOff,w
  8215  1701  0086               	movwf	6
  8216  1702  0187               	clrf	7
  8217  1703  082C               	movf	??_setDelayOff_GO,w
  8218  1704  0081               	movwf	1
  8219                           
  8220                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  8221  1705  300F               	movlw	15
  8222  1706  052B               	andwf	setDelayOff_GO@value,w
  8223  1707  00AC               	movwf	??_setDelayOff_GO
  8224  1708  082C               	movf	??_setDelayOff_GO,w
  8225  1709  3A05               	xorlw	5
  8226  170A  1903               	skipnz
  8227  170B  2F10               	goto	l8801
  8228  170C  082B               	movf	setDelayOff_GO@value,w
  8229  170D  390F               	andlw	15
  8230  170E  1D03               	btfss	3,2
  8231  170F  2F16               	goto	l8805
  8232  1710                     l8801:	
  8233  1710  3026               	movlw	38
  8234  1711  022B               	subwf	setDelayOff_GO@value,w
  8235  1712  1803               	skipnc
  8236  1713  2F16               	goto	l8805
  8237                           
  8238                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  8239  1714  082B               	movf	setDelayOff_GO@value,w
  8240  1715  2F17               	goto	L4
  8241  1716                     l8805:	
  8242                           ;DelayOff_B1.c: 94: } else {
  8243                           
  8244                           
  8245                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  8246  1716  3005               	movlw	5
  8247  1717                     L4:	
  8248  1717  00AC               	movwf	??_setDelayOff_GO
  8249  1718  082E               	movf	setDelayOff_GO@sw,w
  8250  1719  3E1A               	addlw	26
  8251  171A  076D               	addwf	_product,w
  8252  171B  00AD               	movwf	??_setDelayOff_GO+1
  8253  171C  082D               	movf	??_setDelayOff_GO+1,w
  8254  171D  0086               	movwf	6
  8255  171E  3002               	movlw	2	; select bank4/5
  8256  171F  0087               	movwf	7
  8257  1720  082C               	movf	??_setDelayOff_GO,w
  8258  1721  0081               	movwf	1
  8259                           
  8260                           ;DelayOff_B1.c: 96: }
  8261                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  8262  1722  2F2F               	goto	l8811
  8263  1723                     l8807:	
  8264  1723  08AA               	movf	setDelayOff_GO@command,f
  8265  1724  1D03               	skipz
  8266  1725  2F2F               	goto	l8811
  8267                           
  8268                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  8269  1726  082E               	movf	setDelayOff_GO@sw,w
  8270  1727  3E1A               	addlw	26
  8271  1728  076D               	addwf	_product,w
  8272  1729  00AC               	movwf	??_setDelayOff_GO
  8273  172A  082C               	movf	??_setDelayOff_GO,w
  8274  172B  0086               	movwf	6
  8275  172C  3002               	movlw	2	; select bank4/5
  8276  172D  0087               	movwf	7
  8277  172E  0181               	clrf	1
  8278  172F                     l8811:	
  8279                           
  8280                           ;DelayOff_B1.c: 99: }
  8281                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  8282  172F  086A               	movf	_DelayOff,w
  8283  1730  0086               	movwf	6
  8284  1731  0187               	clrf	7
  8285  1732  3000               	movlw	0
  8286  1733  3FC0               	movwi [0]fsr1
  8287  1734  3FC1               	movwi [1]fsr1
  8288                           
  8289                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  8290  1735  086A               	movf	_DelayOff,w
  8291  1736  0086               	movwf	6
  8292  1737  0187               	clrf	7
  8293  1738  0181               	clrf	1
  8294  1739  0008               	return
  8295  173A                     __end_of_setDelayOff_GO:	
  8296                           
  8297                           	psect	text34
  8298  0800                     __ptext34:	
  8299 ;; *************** function _DelayTimejudge *****************
  8300 ;; Defined at:
  8301 ;;		line 106 in file "../src/DelayOff_B1.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;  value           1    wreg     unsigned char 
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;  value           1    9[BANK0 ] unsigned char 
  8306 ;;  k               1    8[BANK0 ] unsigned char 
  8307 ;;  j               1    7[BANK0 ] unsigned char 
  8308 ;;  i               1    6[BANK0 ] unsigned char 
  8309 ;; Return value:  Size  Location     Type
  8310 ;;                  1    wreg      unsigned char 
  8311 ;; Registers used:
  8312 ;;		wreg, status,2, status,0, pclath, cstack
  8313 ;; Tracked objects:
  8314 ;;		On entry : 0/0
  8315 ;;		On exit  : 0/0
  8316 ;;		Unchanged: 0/0
  8317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8319 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8320 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8321 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;Total ram usage:        6 bytes
  8323 ;; Hardware stack levels used:    1
  8324 ;; Hardware stack levels required when called:    6
  8325 ;; This function calls:
  8326 ;;		___bmul
  8327 ;; This function is called by:
  8328 ;;		_setDelayOff_GO
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           
  8333                           ;psect for function _DelayTimejudge
  8334  0800                     _DelayTimejudge:	
  8335                           
  8336                           ;incstack = 0
  8337                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  8338                           ;DelayTimejudge@value stored from wreg
  8339  0800  0020               	movlb	0	; select bank0
  8340  0801  00A9               	movwf	DelayTimejudge@value
  8341                           
  8342                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  8343  0802  3005               	movlw	5
  8344  0803  00A4               	movwf	??_DelayTimejudge
  8345  0804  0824               	movf	??_DelayTimejudge,w
  8346  0805  00A6               	movwf	DelayTimejudge@i
  8347  0806  01A7               	clrf	DelayTimejudge@j
  8348  0807  01A8               	clrf	DelayTimejudge@k
  8349                           
  8350                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  8351  0808  3031               	movlw	49
  8352  0809  0229               	subwf	DelayTimejudge@value,w
  8353  080A  1803               	skipnc
  8354  080B  2828               	goto	l8593
  8355                           
  8356                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  8357  080C  0829               	movf	DelayTimejudge@value,w
  8358  080D  390F               	andlw	15
  8359  080E  00A4               	movwf	??_DelayTimejudge
  8360  080F  0824               	movf	??_DelayTimejudge,w
  8361  0810  00A7               	movwf	DelayTimejudge@j
  8362                           
  8363                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  8364  0811  0829               	movf	DelayTimejudge@value,w
  8365  0812  00A4               	movwf	??_DelayTimejudge
  8366  0813  3004               	movlw	4
  8367  0814                     u8575:	
  8368  0814  36A4               	lsrf	??_DelayTimejudge,f
  8369  0815  0B89               	decfsz	9,f
  8370  0816  2814               	goto	u8575
  8371  0817  0824               	movf	??_DelayTimejudge,w
  8372  0818  390F               	andlw	15
  8373  0819  00A5               	movwf	??_DelayTimejudge+1
  8374  081A  0825               	movf	??_DelayTimejudge+1,w
  8375  081B  00A8               	movwf	DelayTimejudge@k
  8376                           
  8377                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  8378  081C  300A               	movlw	10
  8379  081D  00A4               	movwf	??_DelayTimejudge
  8380  081E  0824               	movf	??_DelayTimejudge,w
  8381  081F  00A0               	movwf	___bmul@multiplicand
  8382  0820  0828               	movf	DelayTimejudge@k,w
  8383  0821  319C  2400         	fcall	___bmul
  8384  0823  0020               	movlb	0	; select bank0
  8385  0824  0727               	addwf	DelayTimejudge@j,w
  8386  0825  00A5               	movwf	??_DelayTimejudge+1
  8387  0826  0825               	movf	??_DelayTimejudge+1,w
  8388  0827  00A6               	movwf	DelayTimejudge@i
  8389  0828                     l8593:	
  8390                           
  8391                           ;DelayOff_B1.c: 112: }
  8392                           ;DelayOff_B1.c: 133: return i;
  8393  0828  0826               	movf	DelayTimejudge@i,w
  8394  0829  0008               	return
  8395  082A                     __end_of_DelayTimejudge:	
  8396                           
  8397                           	psect	text35
  8398  1C00                     __ptext35:	
  8399 ;; *************** function ___bmul *****************
  8400 ;; Defined at:
  8401 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  8402 ;; Parameters:    Size  Location     Type
  8403 ;;  multiplier      1    wreg     unsigned char 
  8404 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;  multiplier      1    3[BANK0 ] unsigned char 
  8407 ;;  product         1    2[BANK0 ] unsigned char 
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  1    wreg      unsigned char 
  8410 ;; Registers used:
  8411 ;;		wreg, status,2, status,0
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8417 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;Total ram usage:        4 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    5
  8424 ;; This function calls:
  8425 ;;		Nothing
  8426 ;; This function is called by:
  8427 ;;		_DelayTimejudge
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           
  8432                           ;psect for function ___bmul
  8433  1C00                     ___bmul:	
  8434                           
  8435                           ;incstack = 0
  8436                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8437                           ;___bmul@multiplier stored from wreg
  8438  1C00  0020               	movlb	0	; select bank0
  8439  1C01  00A3               	movwf	___bmul@multiplier
  8440  1C02  01A2               	clrf	___bmul@product
  8441  1C03                     l8559:	
  8442  1C03  1C23               	btfss	___bmul@multiplier,0
  8443  1C04  2C09               	goto	l8563
  8444  1C05  0820               	movf	___bmul@multiplicand,w
  8445  1C06  00A1               	movwf	??___bmul
  8446  1C07  0821               	movf	??___bmul,w
  8447  1C08  07A2               	addwf	___bmul@product,f
  8448  1C09                     l8563:	
  8449  1C09  1003               	clrc
  8450  1C0A  0DA0               	rlf	___bmul@multiplicand,f
  8451  1C0B  1003               	clrc
  8452  1C0C  0CA3               	rrf	___bmul@multiplier,f
  8453  1C0D  08A3               	movf	___bmul@multiplier,f
  8454  1C0E  1D03               	skipz
  8455  1C0F  2C03               	goto	l8559
  8456  1C10  0822               	movf	___bmul@product,w
  8457  1C11  0008               	return
  8458  1C12                     __end_of___bmul:	
  8459                           
  8460                           	psect	text36
  8461  11BD                     __ptext36:	
  8462 ;; *************** function _setRFSW_AdjControl *****************
  8463 ;; Defined at:
  8464 ;;		line 421 in file "../src/RF_Control_B1.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;  sw              1    wreg     unsigned char 
  8467 ;; Auto vars:     Size  Location     Type
  8468 ;;  sw              1   70[BANK0 ] unsigned char 
  8469 ;; Return value:  Size  Location     Type
  8470 ;;		None               void
  8471 ;; Registers used:
  8472 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8473 ;; Tracked objects:
  8474 ;;		On entry : 0/0
  8475 ;;		On exit  : 0/0
  8476 ;;		Unchanged: 0/0
  8477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8479 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8480 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;Total ram usage:        3 bytes
  8483 ;; Hardware stack levels used:    1
  8484 ;; Hardware stack levels required when called:   10
  8485 ;; This function calls:
  8486 ;;		_RfSWPointSelect
  8487 ;;		_setRF_DimmerValue
  8488 ;;		_setTxData
  8489 ;; This function is called by:
  8490 ;;		_setControl_Lights_Table
  8491 ;; This function uses a non-reentrant model
  8492 ;;
  8493                           
  8494                           
  8495                           ;psect for function _setRFSW_AdjControl
  8496  11BD                     _setRFSW_AdjControl:	
  8497                           
  8498                           ;incstack = 0
  8499                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8500                           ;setRFSW_AdjControl@sw stored from wreg
  8501  11BD  0020               	movlb	0	; select bank0
  8502  11BE  00E6               	movwf	setRFSW_AdjControl@sw
  8503                           
  8504                           ;RF_Control_B1.c: 422: RfSWPointSelect(sw);
  8505  11BF  0866               	movf	setRFSW_AdjControl@sw,w
  8506  11C0  319C  2437  3191   	fcall	_RfSWPointSelect
  8507                           
  8508                           ;RF_Control_B1.c: 423: if (RFSW->Status == 1) {
  8509  11C3  0879               	movf	_RFSW,w
  8510  11C4  0086               	movwf	6
  8511  11C5  0187               	clrf	7
  8512  11C6  1C01               	btfss	1,0
  8513  11C7  29D0               	goto	l9065
  8514                           
  8515                           ;RF_Control_B1.c: 424: Memory.Modify=1;
  8516  11C8  0024               	movlb	4	; select bank4
  8517  11C9  1444               	bsf	(_Memory^(0+512)+36),0
  8518                           
  8519                           ;RF_Control_B1.c: 425: setRF_DimmerValue(sw);
  8520  11CA  0020               	movlb	0	; select bank0
  8521  11CB  0866               	movf	setRFSW_AdjControl@sw,w
  8522  11CC  3190  20E3  3191   	fcall	_setRF_DimmerValue
  8523                           
  8524                           ;RF_Control_B1.c: 426: } else {
  8525  11CF  29E2               	goto	l2365
  8526  11D0                     l9065:	
  8527                           
  8528                           ;RF_Control_B1.c: 427: product->Data[9]=product->Data[20 + sw];
  8529  11D0  0020               	movlb	0	; select bank0
  8530  11D1  0866               	movf	setRFSW_AdjControl@sw,w
  8531  11D2  3E14               	addlw	20
  8532  11D3  076D               	addwf	_product,w
  8533  11D4  00E4               	movwf	??_setRFSW_AdjControl
  8534  11D5  0864               	movf	??_setRFSW_AdjControl,w
  8535  11D6  0086               	movwf	6
  8536  11D7  3002               	movlw	2	; select bank4/5
  8537  11D8  0087               	movwf	7
  8538  11D9  0801               	movf	1,w
  8539  11DA  00E5               	movwf	??_setRFSW_AdjControl+1
  8540  11DB  086D               	movf	_product,w
  8541  11DC  3E09               	addlw	9
  8542  11DD  0086               	movwf	6
  8543  11DE  3002               	movlw	2	; select bank4/5
  8544  11DF  0087               	movwf	7
  8545  11E0  0865               	movf	??_setRFSW_AdjControl+1,w
  8546  11E1  0081               	movwf	1
  8547  11E2                     l2365:	
  8548                           
  8549                           ;RF_Control_B1.c: 428: }
  8550                           ;RF_Control_B1.c: 429: product->Data[17]=product->Data[26 + sw];
  8551  11E2  0020               	movlb	0	; select bank0
  8552  11E3  0866               	movf	setRFSW_AdjControl@sw,w
  8553  11E4  3E1A               	addlw	26
  8554  11E5  076D               	addwf	_product,w
  8555  11E6  00E4               	movwf	??_setRFSW_AdjControl
  8556  11E7  0864               	movf	??_setRFSW_AdjControl,w
  8557  11E8  0086               	movwf	6
  8558  11E9  3002               	movlw	2	; select bank4/5
  8559  11EA  0087               	movwf	7
  8560  11EB  0801               	movf	1,w
  8561  11EC  00E5               	movwf	??_setRFSW_AdjControl+1
  8562  11ED  086D               	movf	_product,w
  8563  11EE  3E11               	addlw	17
  8564  11EF  0086               	movwf	6
  8565  11F0  3002               	movlw	2	; select bank4/5
  8566  11F1  0087               	movwf	7
  8567  11F2  0865               	movf	??_setRFSW_AdjControl+1,w
  8568  11F3  0081               	movwf	1
  8569                           
  8570                           ;RF_Control_B1.c: 430: setTxData();
  8571  11F4  318F  2743         	fcall	_setTxData
  8572  11F6  0008               	return
  8573  11F7                     __end_of_setRFSW_AdjControl:	
  8574                           
  8575                           	psect	text37
  8576  10E3                     __ptext37:	
  8577 ;; *************** function _setRF_DimmerValue *****************
  8578 ;; Defined at:
  8579 ;;		line 441 in file "../src/RF_Control_B1.c"
  8580 ;; Parameters:    Size  Location     Type
  8581 ;;  lights          1    wreg     unsigned char 
  8582 ;; Auto vars:     Size  Location     Type
  8583 ;;  lights          1   67[BANK0 ] unsigned char 
  8584 ;; Return value:  Size  Location     Type
  8585 ;;		None               void
  8586 ;; Registers used:
  8587 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8588 ;; Tracked objects:
  8589 ;;		On entry : 0/0
  8590 ;;		On exit  : 0/0
  8591 ;;		Unchanged: 0/0
  8592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8594 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8595 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8596 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8597 ;;Total ram usage:        3 bytes
  8598 ;; Hardware stack levels used:    1
  8599 ;; Hardware stack levels required when called:    9
  8600 ;; This function calls:
  8601 ;;		_setDimmerLights_AdjRF
  8602 ;; This function is called by:
  8603 ;;		_setRFSW_AdjControl
  8604 ;; This function uses a non-reentrant model
  8605 ;;
  8606                           
  8607                           
  8608                           ;psect for function _setRF_DimmerValue
  8609  10E3                     _setRF_DimmerValue:	
  8610                           
  8611                           ;incstack = 0
  8612                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8613                           ;setRF_DimmerValue@lights stored from wreg
  8614  10E3  0020               	movlb	0	; select bank0
  8615  10E4  00E3               	movwf	setRF_DimmerValue@lights
  8616                           
  8617                           ;RF_Control_B1.c: 442: if (RF_Data[9] > 0x64) {
  8618  10E5  3065               	movlw	101
  8619  10E6  0023               	movlb	3	; select bank3
  8620  10E7  0229               	subwf	(_RF_Data^(0+384)+9),w
  8621  10E8  1C03               	skipc
  8622  10E9  28F0               	goto	l8899
  8623                           
  8624                           ;RF_Control_B1.c: 443: RF_Data[9] = 0x64;
  8625  10EA  3064               	movlw	100
  8626  10EB  0020               	movlb	0	; select bank0
  8627  10EC  00E1               	movwf	??_setRF_DimmerValue
  8628  10ED  0861               	movf	??_setRF_DimmerValue,w
  8629  10EE  0023               	movlb	3	; select bank3
  8630  10EF  00A9               	movwf	(_RF_Data^(0+384)+9)
  8631  10F0                     l8899:	
  8632                           
  8633                           ;RF_Control_B1.c: 444: }
  8634                           ;RF_Control_B1.c: 445: product->Data[9]=RF_Data[9];
  8635  10F0  0829               	movf	(_RF_Data^(0+384)+9),w
  8636  10F1  0020               	movlb	0	; select bank0
  8637  10F2  00E1               	movwf	??_setRF_DimmerValue
  8638  10F3  086D               	movf	_product,w
  8639  10F4  3E09               	addlw	9
  8640  10F5  0086               	movwf	6
  8641  10F6  3002               	movlw	2	; select bank4/5
  8642  10F7  0087               	movwf	7
  8643  10F8  0861               	movf	??_setRF_DimmerValue,w
  8644  10F9  0081               	movwf	1
  8645                           
  8646                           ;RF_Control_B1.c: 446: product->Data[11]=lights;
  8647  10FA  0863               	movf	setRF_DimmerValue@lights,w
  8648  10FB  00E1               	movwf	??_setRF_DimmerValue
  8649  10FC  086D               	movf	_product,w
  8650  10FD  3E0B               	addlw	11
  8651  10FE  0086               	movwf	6
  8652  10FF  3002               	movlw	2	; select bank4/5
  8653  1100  0087               	movwf	7
  8654  1101  0861               	movf	??_setRF_DimmerValue,w
  8655  1102  0081               	movwf	1
  8656                           
  8657                           ;RF_Control_B1.c: 447: product->Data[(20 + lights)]=product->Data[9];
  8658  1103  086D               	movf	_product,w
  8659  1104  3E09               	addlw	9
  8660  1105  0086               	movwf	6
  8661  1106  3002               	movlw	2	; select bank4/5
  8662  1107  0087               	movwf	7
  8663  1108  0801               	movf	1,w
  8664  1109  00E1               	movwf	??_setRF_DimmerValue
  8665  110A  0863               	movf	setRF_DimmerValue@lights,w
  8666  110B  3E14               	addlw	20
  8667  110C  076D               	addwf	_product,w
  8668  110D  00E2               	movwf	??_setRF_DimmerValue+1
  8669  110E  0862               	movf	??_setRF_DimmerValue+1,w
  8670  110F  0086               	movwf	6
  8671  1110  3002               	movlw	2	; select bank4/5
  8672  1111  0087               	movwf	7
  8673  1112  0861               	movf	??_setRF_DimmerValue,w
  8674  1113  0081               	movwf	1
  8675                           
  8676                           ;RF_Control_B1.c: 448: setDimmerLights_AdjRF(lights);
  8677  1114  0863               	movf	setRF_DimmerValue@lights,w
  8678  1115  319E  26DE         	fcall	_setDimmerLights_AdjRF
  8679  1117  0008               	return
  8680  1118                     __end_of_setRF_DimmerValue:	
  8681                           
  8682                           	psect	text38
  8683  1EDE                     __ptext38:	
  8684 ;; *************** function _setDimmerLights_AdjRF *****************
  8685 ;; Defined at:
  8686 ;;		line 690 in file "../src/Dimmer_B1.c"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;  lights          1    wreg     unsigned char 
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;  lights          1   64[BANK0 ] unsigned char 
  8691 ;; Return value:  Size  Location     Type
  8692 ;;		None               void
  8693 ;; Registers used:
  8694 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8695 ;; Tracked objects:
  8696 ;;		On entry : 0/0
  8697 ;;		On exit  : 0/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8703 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;Total ram usage:        2 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; Hardware stack levels required when called:    8
  8707 ;; This function calls:
  8708 ;;		_DimmerLightsPointSelect
  8709 ;;		_getPercentValue
  8710 ;; This function is called by:
  8711 ;;		_setRF_DimmerValue
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           
  8716                           ;psect for function _setDimmerLights_AdjRF
  8717  1EDE                     _setDimmerLights_AdjRF:	
  8718                           
  8719                           ;incstack = 0
  8720                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8721                           ;setDimmerLights_AdjRF@lights stored from wreg
  8722  1EDE  0020               	movlb	0	; select bank0
  8723  1EDF  00E0               	movwf	setDimmerLights_AdjRF@lights
  8724                           
  8725                           ;Dimmer_B1.c: 692: DimmerLightsPointSelect(lights);
  8726  1EE0  0860               	movf	setDimmerLights_AdjRF@lights,w
  8727  1EE1  319C  2424  319E   	fcall	_DimmerLightsPointSelect
  8728                           
  8729                           ;Dimmer_B1.c: 693: DimmerLights->AdjRF = 1;
  8730  1EE4  0020               	movlb	0	; select bank0
  8731  1EE5  086B               	movf	_DimmerLights,w
  8732  1EE6  0086               	movwf	6
  8733  1EE7  3001               	movlw	1	; select bank2/3
  8734  1EE8  0087               	movwf	7
  8735  1EE9  1501               	bsf	1,2
  8736                           
  8737                           ;Dimmer_B1.c: 694: DimmerLights->Signal = 1;
  8738  1EEA  086B               	movf	_DimmerLights,w
  8739  1EEB  0086               	movwf	6
  8740  1EEC  3001               	movlw	1	; select bank2/3
  8741  1EED  0087               	movwf	7
  8742  1EEE  1481               	bsf	1,1
  8743                           
  8744                           ;Dimmer_B1.c: 695: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8745  1EEF  086D               	movf	_product,w
  8746  1EF0  3E09               	addlw	9
  8747  1EF1  0086               	movwf	6
  8748  1EF2  3002               	movlw	2	; select bank4/5
  8749  1EF3  0087               	movwf	7
  8750  1EF4  0801               	movf	1,w
  8751  1EF5  3195  25C4         	fcall	_getPercentValue
  8752  1EF7  0020               	movlb	0	; select bank0
  8753  1EF8  00DF               	movwf	??_setDimmerLights_AdjRF
  8754  1EF9  086B               	movf	_DimmerLights,w
  8755  1EFA  3E05               	addlw	5
  8756  1EFB  0086               	movwf	6
  8757  1EFC  3001               	movlw	1	; select bank2/3
  8758  1EFD  0087               	movwf	7
  8759  1EFE  085F               	movf	??_setDimmerLights_AdjRF,w
  8760  1EFF  0081               	movwf	1
  8761  1F00  0008               	return
  8762  1F01                     __end_of_setDimmerLights_AdjRF:	
  8763                           
  8764                           	psect	text39
  8765  15C4                     __ptext39:	
  8766 ;; *************** function _getPercentValue *****************
  8767 ;; Defined at:
  8768 ;;		line 763 in file "../src/Dimmer_B1.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;  value           1    wreg     unsigned char 
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;  value           1   59[BANK0 ] unsigned char 
  8773 ;;  i               3   60[BANK0 ] float 
  8774 ;; Return value:  Size  Location     Type
  8775 ;;                  1    wreg      unsigned char 
  8776 ;; Registers used:
  8777 ;;		wreg, status,2, status,0, pclath, cstack
  8778 ;; Tracked objects:
  8779 ;;		On entry : 0/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;Total ram usage:        6 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; Hardware stack levels required when called:    7
  8790 ;; This function calls:
  8791 ;;		___awtoft
  8792 ;;		___ftadd
  8793 ;;		___ftdiv
  8794 ;;		___ftmul
  8795 ;;		___fttol
  8796 ;; This function is called by:
  8797 ;;		_setDimmerLights_AdjRF
  8798 ;; This function uses a non-reentrant model
  8799 ;;
  8800                           
  8801                           
  8802                           ;psect for function _getPercentValue
  8803  15C4                     _getPercentValue:	
  8804                           
  8805                           ;incstack = 0
  8806                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8807                           ;getPercentValue@value stored from wreg
  8808  15C4  0020               	movlb	0	; select bank0
  8809  15C5  00DB               	movwf	getPercentValue@value
  8810                           
  8811                           ;Dimmer_B1.c: 765: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8812  15C6  3000               	movlw	0
  8813  15C7  00DC               	movwf	getPercentValue@i
  8814  15C8  30E0               	movlw	224
  8815  15C9  00DD               	movwf	getPercentValue@i+1
  8816  15CA  3041               	movlw	65
  8817  15CB  00DE               	movwf	getPercentValue@i+2
  8818                           
  8819                           ;Dimmer_B1.c: 766: i /= 100;
  8820  15CC  3000               	movlw	0
  8821  15CD  00AE               	movwf	___ftdiv@f2
  8822  15CE  30C8               	movlw	200
  8823  15CF  00AF               	movwf	___ftdiv@f2+1
  8824  15D0  3042               	movlw	66
  8825  15D1  00B0               	movwf	___ftdiv@f2+2
  8826  15D2  085C               	movf	getPercentValue@i,w
  8827  15D3  00B1               	movwf	___ftdiv@f1
  8828  15D4  085D               	movf	getPercentValue@i+1,w
  8829  15D5  00B2               	movwf	___ftdiv@f1+1
  8830  15D6  085E               	movf	getPercentValue@i+2,w
  8831  15D7  00B3               	movwf	___ftdiv@f1+2
  8832  15D8  318D  25E6  3195   	fcall	___ftdiv
  8833  15DB  0020               	movlb	0	; select bank0
  8834  15DC  082E               	movf	?___ftdiv,w
  8835  15DD  00DC               	movwf	getPercentValue@i
  8836  15DE  082F               	movf	?___ftdiv+1,w
  8837  15DF  00DD               	movwf	getPercentValue@i+1
  8838  15E0  0830               	movf	?___ftdiv+2,w
  8839  15E1  00DE               	movwf	getPercentValue@i+2
  8840                           
  8841                           ;Dimmer_B1.c: 767: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8842  15E2  085B               	movf	getPercentValue@value,w
  8843  15E3  00D9               	movwf	??_getPercentValue
  8844  15E4  01DA               	clrf	??_getPercentValue+1
  8845  15E5  09D9               	comf	??_getPercentValue,f
  8846  15E6  09DA               	comf	??_getPercentValue+1,f
  8847  15E7  0AD9               	incf	??_getPercentValue,f
  8848  15E8  1903               	skipnz
  8849  15E9  0ADA               	incf	??_getPercentValue+1,f
  8850  15EA  0859               	movf	??_getPercentValue,w
  8851  15EB  3E64               	addlw	100
  8852  15EC  00A8               	movwf	___awtoft@c
  8853  15ED  3000               	movlw	0
  8854  15EE  3D5A               	addwfc	??_getPercentValue+1,w
  8855  15EF  00A9               	movwf	___awtoft@c+1
  8856  15F0  319E  269A  3195   	fcall	___awtoft
  8857  15F3  0020               	movlb	0	; select bank0
  8858  15F4  0828               	movf	?___awtoft,w
  8859  15F5  00B1               	movwf	___ftmul@f2
  8860  15F6  0829               	movf	?___awtoft+1,w
  8861  15F7  00B2               	movwf	___ftmul@f2+1
  8862  15F8  082A               	movf	?___awtoft+2,w
  8863  15F9  00B3               	movwf	___ftmul@f2+2
  8864  15FA  085C               	movf	getPercentValue@i,w
  8865  15FB  00AE               	movwf	___ftmul@f1
  8866  15FC  085D               	movf	getPercentValue@i+1,w
  8867  15FD  00AF               	movwf	___ftmul@f1+1
  8868  15FE  085E               	movf	getPercentValue@i+2,w
  8869  15FF  00B0               	movwf	___ftmul@f1+2
  8870  1600  318E  268F  3195   	fcall	___ftmul
  8871  1603  0020               	movlb	0	; select bank0
  8872  1604  082E               	movf	?___ftmul,w
  8873  1605  00C1               	movwf	___ftadd@f2
  8874  1606  082F               	movf	?___ftmul+1,w
  8875  1607  00C2               	movwf	___ftadd@f2+1
  8876  1608  0830               	movf	?___ftmul+2,w
  8877  1609  00C3               	movwf	___ftadd@f2+2
  8878  160A  3000               	movlw	0
  8879  160B  00BE               	movwf	___ftadd@f1
  8880  160C  3000               	movlw	0
  8881  160D  00BF               	movwf	___ftadd@f1+1
  8882  160E  3042               	movlw	66
  8883  160F  00C0               	movwf	___ftadd@f1+2
  8884  1610  3184  24C7  3195   	fcall	___ftadd
  8885  1613  0020               	movlb	0	; select bank0
  8886  1614  083E               	movf	?___ftadd,w
  8887  1615  00CB               	movwf	___fttol@f1
  8888  1616  083F               	movf	?___ftadd+1,w
  8889  1617  00CC               	movwf	___fttol@f1+1
  8890  1618  0840               	movf	?___ftadd+2,w
  8891  1619  00CD               	movwf	___fttol@f1+2
  8892  161A  318B  23A8         	fcall	___fttol
  8893  161C  0020               	movlb	0	; select bank0
  8894  161D  084B               	movf	?___fttol,w
  8895  161E  0008               	return
  8896  161F                     __end_of_getPercentValue:	
  8897                           
  8898                           	psect	text40
  8899  0E8F                     __ptext40:	
  8900 ;; *************** function ___ftmul *****************
  8901 ;; Defined at:
  8902 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8903 ;; Parameters:    Size  Location     Type
  8904 ;;  f1              3   14[BANK0 ] float 
  8905 ;;  f2              3   17[BANK0 ] float 
  8906 ;; Auto vars:     Size  Location     Type
  8907 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8908 ;;  sign            1   29[BANK0 ] unsigned char 
  8909 ;;  cntr            1   28[BANK0 ] unsigned char 
  8910 ;;  exp             1   24[BANK0 ] unsigned char 
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  3   14[BANK0 ] float 
  8913 ;; Registers used:
  8914 ;;		wreg, status,2, status,0, pclath, cstack
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8920 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8921 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;Total ram usage:       16 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; Hardware stack levels required when called:    6
  8927 ;; This function calls:
  8928 ;;		___ftpack
  8929 ;; This function is called by:
  8930 ;;		_getPercentValue
  8931 ;; This function uses a non-reentrant model
  8932 ;;
  8933                           
  8934                           
  8935                           ;psect for function ___ftmul
  8936  0E8F                     ___ftmul:	
  8937                           
  8938                           ;incstack = 0
  8939                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8940  0E8F  0020               	movlb	0	; select bank0
  8941  0E90  082E               	movf	___ftmul@f1,w
  8942  0E91  00B4               	movwf	??___ftmul
  8943  0E92  082F               	movf	___ftmul@f1+1,w
  8944  0E93  00B5               	movwf	??___ftmul+1
  8945  0E94  0830               	movf	___ftmul@f1+2,w
  8946  0E95  00B6               	movwf	??___ftmul+2
  8947  0E96  1003               	clrc
  8948  0E97  0D35               	rlf	??___ftmul+1,w
  8949  0E98  0D36               	rlf	??___ftmul+2,w
  8950  0E99  00B7               	movwf	??___ftmul+3
  8951  0E9A  0837               	movf	??___ftmul+3,w
  8952  0E9B  00B8               	movwf	___ftmul@exp
  8953  0E9C  08B8               	movf	___ftmul@exp,f
  8954  0E9D  1D03               	skipz
  8955  0E9E  2EA6               	goto	l6063
  8956  0E9F  3000               	movlw	0
  8957  0EA0  00AE               	movwf	?___ftmul
  8958  0EA1  3000               	movlw	0
  8959  0EA2  00AF               	movwf	?___ftmul+1
  8960  0EA3  3000               	movlw	0
  8961  0EA4  00B0               	movwf	?___ftmul+2
  8962  0EA5  0008               	return
  8963  0EA6                     l6063:	
  8964  0EA6  0831               	movf	___ftmul@f2,w
  8965  0EA7  00B4               	movwf	??___ftmul
  8966  0EA8  0832               	movf	___ftmul@f2+1,w
  8967  0EA9  00B5               	movwf	??___ftmul+1
  8968  0EAA  0833               	movf	___ftmul@f2+2,w
  8969  0EAB  00B6               	movwf	??___ftmul+2
  8970  0EAC  1003               	clrc
  8971  0EAD  0D35               	rlf	??___ftmul+1,w
  8972  0EAE  0D36               	rlf	??___ftmul+2,w
  8973  0EAF  00B7               	movwf	??___ftmul+3
  8974  0EB0  0837               	movf	??___ftmul+3,w
  8975  0EB1  00BD               	movwf	___ftmul@sign
  8976  0EB2  08BD               	movf	___ftmul@sign,f
  8977  0EB3  1D03               	skipz
  8978  0EB4  2EBC               	goto	l6069
  8979  0EB5  3000               	movlw	0
  8980  0EB6  00AE               	movwf	?___ftmul
  8981  0EB7  3000               	movlw	0
  8982  0EB8  00AF               	movwf	?___ftmul+1
  8983  0EB9  3000               	movlw	0
  8984  0EBA  00B0               	movwf	?___ftmul+2
  8985  0EBB  0008               	return
  8986  0EBC                     l6069:	
  8987  0EBC  083D               	movf	___ftmul@sign,w
  8988  0EBD  3E7B               	addlw	123
  8989  0EBE  00B4               	movwf	??___ftmul
  8990  0EBF  0834               	movf	??___ftmul,w
  8991  0EC0  07B8               	addwf	___ftmul@exp,f
  8992  0EC1  082E               	movf	___ftmul@f1,w
  8993  0EC2  00B4               	movwf	??___ftmul
  8994  0EC3  082F               	movf	___ftmul@f1+1,w
  8995  0EC4  00B5               	movwf	??___ftmul+1
  8996  0EC5  0830               	movf	___ftmul@f1+2,w
  8997  0EC6  00B6               	movwf	??___ftmul+2
  8998  0EC7  3010               	movlw	16
  8999  0EC8                     u4705:	
  9000  0EC8  36B6               	lsrf	??___ftmul+2,f
  9001  0EC9  0CB5               	rrf	??___ftmul+1,f
  9002  0ECA  0CB4               	rrf	??___ftmul,f
  9003  0ECB  0B89               	decfsz	9,f
  9004  0ECC  2EC8               	goto	u4705
  9005  0ECD  0834               	movf	??___ftmul,w
  9006  0ECE  00B7               	movwf	??___ftmul+3
  9007  0ECF  0837               	movf	??___ftmul+3,w
  9008  0ED0  00BD               	movwf	___ftmul@sign
  9009  0ED1  0831               	movf	___ftmul@f2,w
  9010  0ED2  00B4               	movwf	??___ftmul
  9011  0ED3  0832               	movf	___ftmul@f2+1,w
  9012  0ED4  00B5               	movwf	??___ftmul+1
  9013  0ED5  0833               	movf	___ftmul@f2+2,w
  9014  0ED6  00B6               	movwf	??___ftmul+2
  9015  0ED7  3010               	movlw	16
  9016  0ED8                     u4715:	
  9017  0ED8  36B6               	lsrf	??___ftmul+2,f
  9018  0ED9  0CB5               	rrf	??___ftmul+1,f
  9019  0EDA  0CB4               	rrf	??___ftmul,f
  9020  0EDB  0B89               	decfsz	9,f
  9021  0EDC  2ED8               	goto	u4715
  9022  0EDD  0834               	movf	??___ftmul,w
  9023  0EDE  00B7               	movwf	??___ftmul+3
  9024  0EDF  0837               	movf	??___ftmul+3,w
  9025  0EE0  06BD               	xorwf	___ftmul@sign,f
  9026  0EE1  3080               	movlw	128
  9027  0EE2  00B4               	movwf	??___ftmul
  9028  0EE3  0834               	movf	??___ftmul,w
  9029  0EE4  05BD               	andwf	___ftmul@sign,f
  9030  0EE5  17AF               	bsf	___ftmul@f1+1,7
  9031  0EE6  17B2               	bsf	___ftmul@f2+1,7
  9032  0EE7  30FF               	movlw	255
  9033  0EE8  05B1               	andwf	___ftmul@f2,f
  9034  0EE9  30FF               	movlw	255
  9035  0EEA  05B2               	andwf	___ftmul@f2+1,f
  9036  0EEB  3000               	movlw	0
  9037  0EEC  05B3               	andwf	___ftmul@f2+2,f
  9038  0EED  3000               	movlw	0
  9039  0EEE  00B9               	movwf	___ftmul@f3_as_product
  9040  0EEF  3000               	movlw	0
  9041  0EF0  00BA               	movwf	___ftmul@f3_as_product+1
  9042  0EF1  3000               	movlw	0
  9043  0EF2  00BB               	movwf	___ftmul@f3_as_product+2
  9044  0EF3  3007               	movlw	7
  9045  0EF4  00B4               	movwf	??___ftmul
  9046  0EF5  0834               	movf	??___ftmul,w
  9047  0EF6  00BC               	movwf	___ftmul@cntr
  9048  0EF7                     l6081:	
  9049  0EF7  1C2E               	btfss	___ftmul@f1,0
  9050  0EF8  2EFF               	goto	l6085
  9051  0EF9  0831               	movf	___ftmul@f2,w
  9052  0EFA  07B9               	addwf	___ftmul@f3_as_product,f
  9053  0EFB  0832               	movf	___ftmul@f2+1,w
  9054  0EFC  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9055  0EFD  0833               	movf	___ftmul@f2+2,w
  9056  0EFE  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9057  0EFF                     l6085:	
  9058  0EFF  3001               	movlw	1
  9059  0F00                     u4735:	
  9060  0F00  36B0               	lsrf	___ftmul@f1+2,f
  9061  0F01  0CAF               	rrf	___ftmul@f1+1,f
  9062  0F02  0CAE               	rrf	___ftmul@f1,f
  9063  0F03  0B89               	decfsz	9,f
  9064  0F04  2F00               	goto	u4735
  9065  0F05  3001               	movlw	1
  9066  0F06                     u4745:	
  9067  0F06  35B1               	lslf	___ftmul@f2,f
  9068  0F07  0DB2               	rlf	___ftmul@f2+1,f
  9069  0F08  0DB3               	rlf	___ftmul@f2+2,f
  9070  0F09  0B89               	decfsz	9,f
  9071  0F0A  2F06               	goto	u4745
  9072  0F0B  3001               	movlw	1
  9073  0F0C  02BC               	subwf	___ftmul@cntr,f
  9074  0F0D  1D03               	btfss	3,2
  9075  0F0E  2EF7               	goto	l6081
  9076  0F0F  3009               	movlw	9
  9077  0F10  00B4               	movwf	??___ftmul
  9078  0F11  0834               	movf	??___ftmul,w
  9079  0F12  00BC               	movwf	___ftmul@cntr
  9080  0F13                     l6093:	
  9081  0F13  1C2E               	btfss	___ftmul@f1,0
  9082  0F14  2F1B               	goto	l6097
  9083  0F15  0831               	movf	___ftmul@f2,w
  9084  0F16  07B9               	addwf	___ftmul@f3_as_product,f
  9085  0F17  0832               	movf	___ftmul@f2+1,w
  9086  0F18  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9087  0F19  0833               	movf	___ftmul@f2+2,w
  9088  0F1A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9089  0F1B                     l6097:	
  9090  0F1B  3001               	movlw	1
  9091  0F1C                     u4775:	
  9092  0F1C  36B0               	lsrf	___ftmul@f1+2,f
  9093  0F1D  0CAF               	rrf	___ftmul@f1+1,f
  9094  0F1E  0CAE               	rrf	___ftmul@f1,f
  9095  0F1F  0B89               	decfsz	9,f
  9096  0F20  2F1C               	goto	u4775
  9097  0F21  3001               	movlw	1
  9098  0F22                     u4785:	
  9099  0F22  36BB               	lsrf	___ftmul@f3_as_product+2,f
  9100  0F23  0CBA               	rrf	___ftmul@f3_as_product+1,f
  9101  0F24  0CB9               	rrf	___ftmul@f3_as_product,f
  9102  0F25  0B89               	decfsz	9,f
  9103  0F26  2F22               	goto	u4785
  9104  0F27  3001               	movlw	1
  9105  0F28  02BC               	subwf	___ftmul@cntr,f
  9106  0F29  1D03               	btfss	3,2
  9107  0F2A  2F13               	goto	l6093
  9108  0F2B  0839               	movf	___ftmul@f3_as_product,w
  9109  0F2C  00A0               	movwf	___ftpack@arg
  9110  0F2D  083A               	movf	___ftmul@f3_as_product+1,w
  9111  0F2E  00A1               	movwf	___ftpack@arg+1
  9112  0F2F  083B               	movf	___ftmul@f3_as_product+2,w
  9113  0F30  00A2               	movwf	___ftpack@arg+2
  9114  0F31  0838               	movf	___ftmul@exp,w
  9115  0F32  00B4               	movwf	??___ftmul
  9116  0F33  0834               	movf	??___ftmul,w
  9117  0F34  00A3               	movwf	___ftpack@exp
  9118  0F35  083D               	movf	___ftmul@sign,w
  9119  0F36  00B5               	movwf	??___ftmul+1
  9120  0F37  0835               	movf	??___ftmul+1,w
  9121  0F38  00A4               	movwf	___ftpack@sign
  9122  0F39  3197  273A         	fcall	___ftpack
  9123  0F3B  0020               	movlb	0	; select bank0
  9124  0F3C  0820               	movf	?___ftpack,w
  9125  0F3D  00AE               	movwf	?___ftmul
  9126  0F3E  0821               	movf	?___ftpack+1,w
  9127  0F3F  00AF               	movwf	?___ftmul+1
  9128  0F40  0822               	movf	?___ftpack+2,w
  9129  0F41  00B0               	movwf	?___ftmul+2
  9130  0F42  0008               	return
  9131  0F43                     __end_of___ftmul:	
  9132                           
  9133                           	psect	text41
  9134  04C7                     __ptext41:	
  9135 ;; *************** function ___ftadd *****************
  9136 ;; Defined at:
  9137 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;  f1              3   30[BANK0 ] float 
  9140 ;;  f2              3   33[BANK0 ] float 
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;  exp1            1   42[BANK0 ] unsigned char 
  9143 ;;  exp2            1   41[BANK0 ] unsigned char 
  9144 ;;  sign            1   40[BANK0 ] unsigned char 
  9145 ;; Return value:  Size  Location     Type
  9146 ;;                  3   30[BANK0 ] float 
  9147 ;; Registers used:
  9148 ;;		wreg, status,2, status,0, pclath, cstack
  9149 ;; Tracked objects:
  9150 ;;		On entry : 0/0
  9151 ;;		On exit  : 0/0
  9152 ;;		Unchanged: 0/0
  9153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9154 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9156 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9157 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9158 ;;Total ram usage:       13 bytes
  9159 ;; Hardware stack levels used:    1
  9160 ;; Hardware stack levels required when called:    6
  9161 ;; This function calls:
  9162 ;;		___ftpack
  9163 ;; This function is called by:
  9164 ;;		_getPercentValue
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           
  9169                           ;psect for function ___ftadd
  9170  04C7                     ___ftadd:	
  9171                           
  9172                           ;incstack = 0
  9173                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9174  04C7  0020               	movlb	0	; select bank0
  9175  04C8  083E               	movf	___ftadd@f1,w
  9176  04C9  00C4               	movwf	??___ftadd
  9177  04CA  083F               	movf	___ftadd@f1+1,w
  9178  04CB  00C5               	movwf	??___ftadd+1
  9179  04CC  0840               	movf	___ftadd@f1+2,w
  9180  04CD  00C6               	movwf	??___ftadd+2
  9181  04CE  1003               	clrc
  9182  04CF  0D45               	rlf	??___ftadd+1,w
  9183  04D0  0D46               	rlf	??___ftadd+2,w
  9184  04D1  00C7               	movwf	??___ftadd+3
  9185  04D2  0847               	movf	??___ftadd+3,w
  9186  04D3  00CA               	movwf	___ftadd@exp1
  9187  04D4  0841               	movf	___ftadd@f2,w
  9188  04D5  00C4               	movwf	??___ftadd
  9189  04D6  0842               	movf	___ftadd@f2+1,w
  9190  04D7  00C5               	movwf	??___ftadd+1
  9191  04D8  0843               	movf	___ftadd@f2+2,w
  9192  04D9  00C6               	movwf	??___ftadd+2
  9193  04DA  1003               	clrc
  9194  04DB  0D45               	rlf	??___ftadd+1,w
  9195  04DC  0D46               	rlf	??___ftadd+2,w
  9196  04DD  00C7               	movwf	??___ftadd+3
  9197  04DE  0847               	movf	??___ftadd+3,w
  9198  04DF  00C9               	movwf	___ftadd@exp2
  9199  04E0  084A               	movf	___ftadd@exp1,w
  9200  04E1  1903               	btfsc	3,2
  9201  04E2  2CEF               	goto	l5951
  9202  04E3  0849               	movf	___ftadd@exp2,w
  9203  04E4  024A               	subwf	___ftadd@exp1,w
  9204  04E5  1803               	skipnc
  9205  04E6  2CF6               	goto	l5955
  9206  04E7  034A               	decf	___ftadd@exp1,w
  9207  04E8  3AFF               	xorlw	255
  9208  04E9  0749               	addwf	___ftadd@exp2,w
  9209  04EA  00C4               	movwf	??___ftadd
  9210  04EB  3019               	movlw	25
  9211  04EC  0244               	subwf	??___ftadd,w
  9212  04ED  1C03               	skipc
  9213  04EE  2CF6               	goto	l5955
  9214  04EF                     l5951:	
  9215  04EF  0841               	movf	___ftadd@f2,w
  9216  04F0  00BE               	movwf	?___ftadd
  9217  04F1  0842               	movf	___ftadd@f2+1,w
  9218  04F2  00BF               	movwf	?___ftadd+1
  9219  04F3  0843               	movf	___ftadd@f2+2,w
  9220  04F4  00C0               	movwf	?___ftadd+2
  9221  04F5  0008               	return
  9222  04F6                     l5955:	
  9223  04F6  0849               	movf	___ftadd@exp2,w
  9224  04F7  1903               	btfsc	3,2
  9225  04F8  0008               	return
  9226  04F9  084A               	movf	___ftadd@exp1,w
  9227  04FA  0249               	subwf	___ftadd@exp2,w
  9228  04FB  1803               	skipnc
  9229  04FC  2D05               	goto	l5961
  9230  04FD  0349               	decf	___ftadd@exp2,w
  9231  04FE  3AFF               	xorlw	255
  9232  04FF  074A               	addwf	___ftadd@exp1,w
  9233  0500  00C4               	movwf	??___ftadd
  9234  0501  3019               	movlw	25
  9235  0502  0244               	subwf	??___ftadd,w
  9236  0503  1803               	btfsc	3,0
  9237  0504  0008               	return
  9238  0505                     l5961:	
  9239  0505  3006               	movlw	6
  9240  0506  00C4               	movwf	??___ftadd
  9241  0507  0844               	movf	??___ftadd,w
  9242  0508  00C8               	movwf	___ftadd@sign
  9243  0509  1BC0               	btfsc	___ftadd@f1+2,7
  9244  050A  17C8               	bsf	___ftadd@sign,7
  9245  050B  1BC3               	btfsc	___ftadd@f2+2,7
  9246  050C  1748               	bsf	___ftadd@sign,6
  9247  050D  17BF               	bsf	___ftadd@f1+1,7
  9248  050E  30FF               	movlw	255
  9249  050F  05BE               	andwf	___ftadd@f1,f
  9250  0510  30FF               	movlw	255
  9251  0511  05BF               	andwf	___ftadd@f1+1,f
  9252  0512  3000               	movlw	0
  9253  0513  05C0               	andwf	___ftadd@f1+2,f
  9254  0514  17C2               	bsf	___ftadd@f2+1,7
  9255  0515  30FF               	movlw	255
  9256  0516  05C1               	andwf	___ftadd@f2,f
  9257  0517  30FF               	movlw	255
  9258  0518  05C2               	andwf	___ftadd@f2+1,f
  9259  0519  3000               	movlw	0
  9260  051A  05C3               	andwf	___ftadd@f2+2,f
  9261  051B  0849               	movf	___ftadd@exp2,w
  9262  051C  024A               	subwf	___ftadd@exp1,w
  9263  051D  1803               	skipnc
  9264  051E  2D41               	goto	l5983
  9265  051F                     l5973:	
  9266  051F  3001               	movlw	1
  9267  0520                     u4465:	
  9268  0520  35C1               	lslf	___ftadd@f2,f
  9269  0521  0DC2               	rlf	___ftadd@f2+1,f
  9270  0522  0DC3               	rlf	___ftadd@f2+2,f
  9271  0523  0B89               	decfsz	9,f
  9272  0524  2D20               	goto	u4465
  9273  0525  3001               	movlw	1
  9274  0526  02C9               	subwf	___ftadd@exp2,f
  9275  0527  0849               	movf	___ftadd@exp2,w
  9276  0528  064A               	xorwf	___ftadd@exp1,w
  9277  0529  1903               	skipnz
  9278  052A  2D3C               	goto	l5981
  9279  052B  3001               	movlw	1
  9280  052C  02C8               	subwf	___ftadd@sign,f
  9281  052D  0848               	movf	___ftadd@sign,w
  9282  052E  3907               	andlw	7
  9283  052F  1903               	btfsc	3,2
  9284  0530  2D3C               	goto	l5981
  9285  0531  2D1F               	goto	l5973
  9286  0532                     l5979:	
  9287  0532  3001               	movlw	1
  9288  0533                     u4495:	
  9289  0533  36C0               	lsrf	___ftadd@f1+2,f
  9290  0534  0CBF               	rrf	___ftadd@f1+1,f
  9291  0535  0CBE               	rrf	___ftadd@f1,f
  9292  0536  0B89               	decfsz	9,f
  9293  0537  2D33               	goto	u4495
  9294  0538  3001               	movlw	1
  9295  0539  00C4               	movwf	??___ftadd
  9296  053A  0844               	movf	??___ftadd,w
  9297  053B  07CA               	addwf	___ftadd@exp1,f
  9298  053C                     l5981:	
  9299  053C  084A               	movf	___ftadd@exp1,w
  9300  053D  0649               	xorwf	___ftadd@exp2,w
  9301  053E  1903               	btfsc	3,2
  9302  053F  2D66               	goto	l3070
  9303  0540  2D32               	goto	l5979
  9304  0541                     l5983:	
  9305  0541  084A               	movf	___ftadd@exp1,w
  9306  0542  0249               	subwf	___ftadd@exp2,w
  9307  0543  1803               	skipnc
  9308  0544  2D66               	goto	l3070
  9309  0545                     l5985:	
  9310  0545  3001               	movlw	1
  9311  0546                     u4525:	
  9312  0546  35BE               	lslf	___ftadd@f1,f
  9313  0547  0DBF               	rlf	___ftadd@f1+1,f
  9314  0548  0DC0               	rlf	___ftadd@f1+2,f
  9315  0549  0B89               	decfsz	9,f
  9316  054A  2D46               	goto	u4525
  9317  054B  3001               	movlw	1
  9318  054C  02CA               	subwf	___ftadd@exp1,f
  9319  054D  0849               	movf	___ftadd@exp2,w
  9320  054E  064A               	xorwf	___ftadd@exp1,w
  9321  054F  1903               	skipnz
  9322  0550  2D62               	goto	l5993
  9323  0551  3001               	movlw	1
  9324  0552  02C8               	subwf	___ftadd@sign,f
  9325  0553  0848               	movf	___ftadd@sign,w
  9326  0554  3907               	andlw	7
  9327  0555  1903               	btfsc	3,2
  9328  0556  2D62               	goto	l5993
  9329  0557  2D45               	goto	l5985
  9330  0558                     l5991:	
  9331  0558  3001               	movlw	1
  9332  0559                     u4555:	
  9333  0559  36C3               	lsrf	___ftadd@f2+2,f
  9334  055A  0CC2               	rrf	___ftadd@f2+1,f
  9335  055B  0CC1               	rrf	___ftadd@f2,f
  9336  055C  0B89               	decfsz	9,f
  9337  055D  2D59               	goto	u4555
  9338  055E  3001               	movlw	1
  9339  055F  00C4               	movwf	??___ftadd
  9340  0560  0844               	movf	??___ftadd,w
  9341  0561  07C9               	addwf	___ftadd@exp2,f
  9342  0562                     l5993:	
  9343  0562  084A               	movf	___ftadd@exp1,w
  9344  0563  0649               	xorwf	___ftadd@exp2,w
  9345  0564  1D03               	skipz
  9346  0565  2D58               	goto	l5991
  9347  0566                     l3070:	
  9348  0566  1FC8               	btfss	___ftadd@sign,7
  9349  0567  2D78               	goto	l5997
  9350  0568  30FF               	movlw	255
  9351  0569  06BE               	xorwf	___ftadd@f1,f
  9352  056A  30FF               	movlw	255
  9353  056B  06BF               	xorwf	___ftadd@f1+1,f
  9354  056C  30FF               	movlw	255
  9355  056D  06C0               	xorwf	___ftadd@f1+2,f
  9356  056E  3001               	movlw	1
  9357  056F  07BE               	addwf	___ftadd@f1,f
  9358  0570  3000               	movlw	0
  9359  0571  1803               	skipnc
  9360  0572  3001               	movlw	1
  9361  0573  07BF               	addwf	___ftadd@f1+1,f
  9362  0574  3000               	movlw	0
  9363  0575  1803               	skipnc
  9364  0576  3001               	movlw	1
  9365  0577  07C0               	addwf	___ftadd@f1+2,f
  9366  0578                     l5997:	
  9367  0578  1F48               	btfss	___ftadd@sign,6
  9368  0579  2D8A               	goto	l6001
  9369  057A  30FF               	movlw	255
  9370  057B  06C1               	xorwf	___ftadd@f2,f
  9371  057C  30FF               	movlw	255
  9372  057D  06C2               	xorwf	___ftadd@f2+1,f
  9373  057E  30FF               	movlw	255
  9374  057F  06C3               	xorwf	___ftadd@f2+2,f
  9375  0580  3001               	movlw	1
  9376  0581  07C1               	addwf	___ftadd@f2,f
  9377  0582  3000               	movlw	0
  9378  0583  1803               	skipnc
  9379  0584  3001               	movlw	1
  9380  0585  07C2               	addwf	___ftadd@f2+1,f
  9381  0586  3000               	movlw	0
  9382  0587  1803               	skipnc
  9383  0588  3001               	movlw	1
  9384  0589  07C3               	addwf	___ftadd@f2+2,f
  9385  058A                     l6001:	
  9386  058A  01C8               	clrf	___ftadd@sign
  9387  058B  083E               	movf	___ftadd@f1,w
  9388  058C  07C1               	addwf	___ftadd@f2,f
  9389  058D  083F               	movf	___ftadd@f1+1,w
  9390  058E  3DC2               	addwfc	___ftadd@f2+1,f
  9391  058F  0840               	movf	___ftadd@f1+2,w
  9392  0590  3DC3               	addwfc	___ftadd@f2+2,f
  9393  0591  1FC3               	btfss	___ftadd@f2+2,7
  9394  0592  2DA5               	goto	l6011
  9395  0593  30FF               	movlw	255
  9396  0594  06C1               	xorwf	___ftadd@f2,f
  9397  0595  30FF               	movlw	255
  9398  0596  06C2               	xorwf	___ftadd@f2+1,f
  9399  0597  30FF               	movlw	255
  9400  0598  06C3               	xorwf	___ftadd@f2+2,f
  9401  0599  3001               	movlw	1
  9402  059A  07C1               	addwf	___ftadd@f2,f
  9403  059B  3000               	movlw	0
  9404  059C  1803               	skipnc
  9405  059D  3001               	movlw	1
  9406  059E  07C2               	addwf	___ftadd@f2+1,f
  9407  059F  3000               	movlw	0
  9408  05A0  1803               	skipnc
  9409  05A1  3001               	movlw	1
  9410  05A2  07C3               	addwf	___ftadd@f2+2,f
  9411  05A3  01C8               	clrf	___ftadd@sign
  9412  05A4  0AC8               	incf	___ftadd@sign,f
  9413  05A5                     l6011:	
  9414  05A5  0841               	movf	___ftadd@f2,w
  9415  05A6  00A0               	movwf	___ftpack@arg
  9416  05A7  0842               	movf	___ftadd@f2+1,w
  9417  05A8  00A1               	movwf	___ftpack@arg+1
  9418  05A9  0843               	movf	___ftadd@f2+2,w
  9419  05AA  00A2               	movwf	___ftpack@arg+2
  9420  05AB  084A               	movf	___ftadd@exp1,w
  9421  05AC  00C4               	movwf	??___ftadd
  9422  05AD  0844               	movf	??___ftadd,w
  9423  05AE  00A3               	movwf	___ftpack@exp
  9424  05AF  0848               	movf	___ftadd@sign,w
  9425  05B0  00C5               	movwf	??___ftadd+1
  9426  05B1  0845               	movf	??___ftadd+1,w
  9427  05B2  00A4               	movwf	___ftpack@sign
  9428  05B3  3197  273A         	fcall	___ftpack
  9429  05B5  0020               	movlb	0	; select bank0
  9430  05B6  0820               	movf	?___ftpack,w
  9431  05B7  00BE               	movwf	?___ftadd
  9432  05B8  0821               	movf	?___ftpack+1,w
  9433  05B9  00BF               	movwf	?___ftadd+1
  9434  05BA  0822               	movf	?___ftpack+2,w
  9435  05BB  00C0               	movwf	?___ftadd+2
  9436  05BC  0008               	return
  9437  05BD                     __end_of___ftadd:	
  9438                           
  9439                           	psect	text42
  9440  1BCB                     __ptext42:	
  9441 ;; *************** function _getBuz_GO *****************
  9442 ;; Defined at:
  9443 ;;		line 82 in file "../src/Buzzer_B1.c"
  9444 ;; Parameters:    Size  Location     Type
  9445 ;;		None
  9446 ;; Auto vars:     Size  Location     Type
  9447 ;;  i               2    4[BANK0 ] int 
  9448 ;; Return value:  Size  Location     Type
  9449 ;;                  2    0[BANK0 ] int 
  9450 ;; Registers used:
  9451 ;;		wreg, status,2, status,0
  9452 ;; Tracked objects:
  9453 ;;		On entry : 0/0
  9454 ;;		On exit  : 0/0
  9455 ;;		Unchanged: 0/0
  9456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9457 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;Total ram usage:        6 bytes
  9462 ;; Hardware stack levels used:    1
  9463 ;; Hardware stack levels required when called:    5
  9464 ;; This function calls:
  9465 ;;		Nothing
  9466 ;; This function is called by:
  9467 ;;		_setRF_Main
  9468 ;; This function uses a non-reentrant model
  9469 ;;
  9470                           
  9471                           
  9472                           ;psect for function _getBuz_GO
  9473  1BCB                     _getBuz_GO:	
  9474                           
  9475                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9476                           
  9477                           ;incstack = 0
  9478                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9479  1BCB  0021               	movlb	1	; select bank1
  9480  1BCC  0C30               	rrf	_Buz1^(0+128),w
  9481  1BCD  3901               	andlw	1
  9482  1BCE  0020               	movlb	0	; select bank0
  9483  1BCF  00A2               	movwf	??_getBuz_GO
  9484  1BD0  01A3               	clrf	??_getBuz_GO+1
  9485  1BD1  0822               	movf	??_getBuz_GO,w
  9486  1BD2  00A4               	movwf	getBuz_GO@i
  9487  1BD3  0823               	movf	??_getBuz_GO+1,w
  9488  1BD4  00A5               	movwf	getBuz_GO@i+1
  9489                           
  9490                           ;Buzzer_B1.c: 84: return i;
  9491  1BD5  0825               	movf	getBuz_GO@i+1,w
  9492  1BD6  01A1               	clrf	?_getBuz_GO+1
  9493  1BD7  07A1               	addwf	?_getBuz_GO+1,f
  9494  1BD8  0824               	movf	getBuz_GO@i,w
  9495  1BD9  01A0               	clrf	?_getBuz_GO
  9496  1BDA  07A0               	addwf	?_getBuz_GO,f
  9497  1BDB  0008               	return
  9498  1BDC                     __end_of_getBuz_GO:	
  9499                           
  9500                           	psect	text43
  9501  179B                     __ptext43:	
  9502 ;; *************** function _CC2500_TxData *****************
  9503 ;; Defined at:
  9504 ;;		line 32 in file "../src/CC2500_B1.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;		None
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9509 ;; Return value:  Size  Location     Type
  9510 ;;		None               void
  9511 ;; Registers used:
  9512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9513 ;; Tracked objects:
  9514 ;;		On entry : 0/0
  9515 ;;		On exit  : 0/0
  9516 ;;		Unchanged: 0/0
  9517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9521 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;Total ram usage:        2 bytes
  9523 ;; Hardware stack levels used:    1
  9524 ;; Hardware stack levels required when called:    7
  9525 ;; This function calls:
  9526 ;;		_CC2500_WriteByte
  9527 ;;		_CC2500_WriteCommand
  9528 ;;		_Timeout_Counter
  9529 ;;		_set_TimeoutCleared
  9530 ;; This function is called by:
  9531 ;;		_setRF_Main
  9532 ;; This function uses a non-reentrant model
  9533 ;;
  9534                           
  9535                           
  9536                           ;psect for function _CC2500_TxData
  9537  179B                     _CC2500_TxData:	
  9538                           
  9539                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9540                           ;CC2500_B1.c: 35: RC4 = 0;
  9541                           
  9542                           ;incstack = 0
  9543                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9544  179B  0020               	movlb	0	; select bank0
  9545  179C  120E               	bcf	14,4	;volatile
  9546                           
  9547                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9548  179D  307F               	movlw	127
  9549  179E  00A4               	movwf	??_CC2500_TxData
  9550  179F  0824               	movf	??_CC2500_TxData,w
  9551  17A0  00FA               	movwf	_SPI0Buffer
  9552                           
  9553                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9554  17A1  2FA5               	goto	l9225
  9555  17A2                     l9223:	
  9556                           
  9557                           ;CC2500_B1.c: 38: Timeout_Counter();
  9558  17A2  319C  249A  3197   	fcall	_Timeout_Counter
  9559  17A5                     l9225:	
  9560  17A5  0020               	movlb	0	; select bank0
  9561  17A6  1D0E               	btfss	14,2	;volatile
  9562  17A7  2FAB               	goto	l9229
  9563  17A8  0021               	movlb	1	; select bank1
  9564  17A9  1D2D               	btfss	(_myMain^(0+128)+13),2
  9565  17AA  2FA2               	goto	l9223
  9566  17AB                     l9229:	
  9567                           
  9568                           ;CC2500_B1.c: 39: };
  9569                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9570  17AB  3199  21E5  3197   	fcall	_set_TimeoutCleared
  9571                           
  9572                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9573  17AE  319C  2472  3197   	fcall	_CC2500_WriteByte
  9574                           
  9575                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9576  17B1  0021               	movlb	1	; select bank1
  9577  17B2  0853               	movf	_Tx_Length^(0+128),w
  9578  17B3  0020               	movlb	0	; select bank0
  9579  17B4  00A4               	movwf	??_CC2500_TxData
  9580  17B5  0824               	movf	??_CC2500_TxData,w
  9581  17B6  00FA               	movwf	_SPI0Buffer
  9582                           
  9583                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9584  17B7  319C  2472  3197   	fcall	_CC2500_WriteByte
  9585                           
  9586                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9587  17BA  0020               	movlb	0	; select bank0
  9588  17BB  01A5               	clrf	CC2500_TxData@loop_e
  9589  17BC                     l9243:	
  9590  17BC  0021               	movlb	1	; select bank1
  9591  17BD  0853               	movf	_Tx_Length^(0+128),w
  9592  17BE  0020               	movlb	0	; select bank0
  9593  17BF  0225               	subwf	CC2500_TxData@loop_e,w
  9594  17C0  1803               	btfsc	3,0
  9595  17C1  2FD4               	goto	l267
  9596                           
  9597                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9598  17C2  0825               	movf	CC2500_TxData@loop_e,w
  9599  17C3  3EA0               	addlw	_RF_Data& (0+255)
  9600  17C4  0086               	movwf	6
  9601  17C5  3001               	movlw	1	; select bank3/4
  9602  17C6  0087               	movwf	7
  9603  17C7  0801               	movf	1,w
  9604  17C8  00A4               	movwf	??_CC2500_TxData
  9605  17C9  0824               	movf	??_CC2500_TxData,w
  9606  17CA  00FA               	movwf	_SPI0Buffer
  9607                           
  9608                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9609  17CB  319C  2472  3197   	fcall	_CC2500_WriteByte
  9610  17CE  3001               	movlw	1
  9611  17CF  0020               	movlb	0	; select bank0
  9612  17D0  00A4               	movwf	??_CC2500_TxData
  9613  17D1  0824               	movf	??_CC2500_TxData,w
  9614  17D2  07A5               	addwf	CC2500_TxData@loop_e,f
  9615  17D3  2FBC               	goto	l9243
  9616  17D4                     l267:	
  9617                           
  9618                           ;CC2500_B1.c: 48: }
  9619                           ;CC2500_B1.c: 49: RC4 = 1;
  9620  17D4  160E               	bsf	14,4	;volatile
  9621                           
  9622                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9623  17D5  3035               	movlw	53
  9624  17D6  319D  2508  3197   	fcall	_CC2500_WriteCommand
  9625                           
  9626                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9627  17D9  2FDD               	goto	l9249
  9628  17DA                     l9247:	
  9629                           
  9630                           ;CC2500_B1.c: 52: Timeout_Counter();
  9631  17DA  319C  249A  3197   	fcall	_Timeout_Counter
  9632  17DD                     l9249:	
  9633  17DD  0020               	movlb	0	; select bank0
  9634  17DE  180D               	btfsc	13,0	;volatile
  9635  17DF  2FE3               	goto	l9253
  9636  17E0  0021               	movlb	1	; select bank1
  9637  17E1  1D2D               	btfss	(_myMain^(0+128)+13),2
  9638  17E2  2FDA               	goto	l9247
  9639  17E3                     l9253:	
  9640                           
  9641                           ;CC2500_B1.c: 53: };
  9642                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9643  17E3  3199  21E5  3197   	fcall	_set_TimeoutCleared
  9644                           
  9645                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9646  17E6  2FEA               	goto	l9257
  9647  17E7                     l9255:	
  9648                           
  9649                           ;CC2500_B1.c: 57: Timeout_Counter();
  9650  17E7  319C  249A  3197   	fcall	_Timeout_Counter
  9651  17EA                     l9257:	
  9652  17EA  0020               	movlb	0	; select bank0
  9653  17EB  1C0D               	btfss	13,0	;volatile
  9654  17EC  2FF0               	goto	l9261
  9655  17ED  0021               	movlb	1	; select bank1
  9656  17EE  1D2D               	btfss	(_myMain^(0+128)+13),2
  9657  17EF  2FE7               	goto	l9255
  9658  17F0                     l9261:	
  9659                           
  9660                           ;CC2500_B1.c: 58: };
  9661                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9662  17F0  3199  21E5  3197   	fcall	_set_TimeoutCleared
  9663                           
  9664                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9665  17F3  3036               	movlw	54
  9666  17F4  319D  2508  3197   	fcall	_CC2500_WriteCommand
  9667                           
  9668                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9669  17F7  303B               	movlw	59
  9670  17F8  319D  2508  3197   	fcall	_CC2500_WriteCommand
  9671                           
  9672                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9673  17FB  303A               	movlw	58
  9674  17FC  319D  2508         	fcall	_CC2500_WriteCommand
  9675                           
  9676                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9677  17FE  14FB               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9678  17FF  0008               	return
  9679  1800                     __end_of_CC2500_TxData:	
  9680                           
  9681                           	psect	text44
  9682  09D9                     __ptext44:	
  9683 ;; *************** function _CC2500_RxData *****************
  9684 ;; Defined at:
  9685 ;;		line 70 in file "../src/CC2500_B1.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;		None
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9690 ;; Return value:  Size  Location     Type
  9691 ;;		None               void
  9692 ;; Registers used:
  9693 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9694 ;; Tracked objects:
  9695 ;;		On entry : 0/0
  9696 ;;		On exit  : 0/0
  9697 ;;		Unchanged: 0/0
  9698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;Total ram usage:        2 bytes
  9704 ;; Hardware stack levels used:    1
  9705 ;; Hardware stack levels required when called:    7
  9706 ;; This function calls:
  9707 ;;		_CC2500_ReadByte
  9708 ;;		_CC2500_ReadStatus
  9709 ;;		_CC2500_WriteByte
  9710 ;;		_Timeout_Counter
  9711 ;;		_set_TimeoutCleared
  9712 ;; This function is called by:
  9713 ;;		_setRF_Main
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           
  9718                           ;psect for function _CC2500_RxData
  9719  09D9                     _CC2500_RxData:	
  9720                           
  9721                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9722                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9723                           
  9724                           ;incstack = 0
  9725                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9726  09D9  0020               	movlb	0	; select bank0
  9727  09DA  180D               	btfsc	13,0	;volatile
  9728  09DB  29E0               	goto	l9277
  9729  09DC  29E9               	goto	l9283
  9730  09DD                     l9275:	
  9731                           ;CC2500_B1.c: 76: {
  9732                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9733                           
  9734                           
  9735                           ;CC2500_B1.c: 78: Timeout_Counter();
  9736  09DD  319C  249A  3189   	fcall	_Timeout_Counter
  9737  09E0                     l9277:	
  9738  09E0  0020               	movlb	0	; select bank0
  9739  09E1  1C0D               	btfss	13,0	;volatile
  9740  09E2  29E6               	goto	l9281
  9741  09E3  0021               	movlb	1	; select bank1
  9742  09E4  1D2D               	btfss	(_myMain^(0+128)+13),2
  9743  09E5  29DD               	goto	l9275
  9744  09E6                     l9281:	
  9745                           
  9746                           ;CC2500_B1.c: 79: };
  9747                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9748  09E6  3199  21E5  3189   	fcall	_set_TimeoutCleared
  9749  09E9                     l9283:	
  9750                           
  9751                           ;CC2500_B1.c: 81: }
  9752                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9753  09E9  303B               	movlw	59
  9754  09EA  319E  26BC  3189   	fcall	_CC2500_ReadStatus
  9755                           
  9756                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9757  09ED  0021               	movlb	1	; select bank1
  9758  09EE  0856               	movf	_s_data^(0+128),w
  9759  09EF  1903               	btfsc	3,2
  9760  09F0  0008               	return
  9761                           
  9762                           ;CC2500_B1.c: 86: RC4 = 0;
  9763  09F1  0020               	movlb	0	; select bank0
  9764  09F2  120E               	bcf	14,4	;volatile
  9765                           
  9766                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9767  09F3  30FF               	movlw	255
  9768  09F4  00A4               	movwf	??_CC2500_RxData
  9769  09F5  0824               	movf	??_CC2500_RxData,w
  9770  09F6  00FA               	movwf	_SPI0Buffer
  9771                           
  9772                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9773  09F7  29FE               	goto	l9293
  9774  09F8                     l9295:	
  9775  09F8  0021               	movlb	1	; select bank1
  9776  09F9  192D               	btfsc	(_myMain^(0+128)+13),2
  9777  09FA  2A01               	goto	l292
  9778                           
  9779                           ;CC2500_B1.c: 89: Timeout_Counter();
  9780  09FB  319C  249A  3189   	fcall	_Timeout_Counter
  9781  09FE                     l9293:	
  9782  09FE  0020               	movlb	0	; select bank0
  9783  09FF  190E               	btfsc	14,2	;volatile
  9784  0A00  29F8               	goto	l9295
  9785  0A01                     l292:	
  9786                           
  9787                           ;CC2500_B1.c: 90: };
  9788                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9789  0A01  0021               	movlb	1	; select bank1
  9790  0A02  192D               	btfsc	(_myMain^(0+128)+13),2
  9791  0A03  2A44               	goto	l293
  9792                           
  9793                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9794  0A04  319C  2472  3189   	fcall	_CC2500_WriteByte
  9795                           
  9796                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9797  0A07  319C  24F1  3189   	fcall	_CC2500_ReadByte
  9798                           
  9799                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9800  0A0A  087A               	movf	_SPI0Buffer,w
  9801  0A0B  0020               	movlb	0	; select bank0
  9802  0A0C  00A4               	movwf	??_CC2500_RxData
  9803  0A0D  0824               	movf	??_CC2500_RxData,w
  9804  0A0E  0021               	movlb	1	; select bank1
  9805  0A0F  00D2               	movwf	_Rx_Length^(0+128)
  9806                           
  9807                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9808  0A10  0020               	movlb	0	; select bank0
  9809  0A11  01A5               	clrf	CC2500_RxData@loop_f
  9810  0A12                     l9309:	
  9811  0A12  0021               	movlb	1	; select bank1
  9812  0A13  0852               	movf	_Rx_Length^(0+128),w
  9813  0A14  0020               	movlb	0	; select bank0
  9814  0A15  0225               	subwf	CC2500_RxData@loop_f,w
  9815  0A16  1803               	btfsc	3,0
  9816  0A17  2A2A               	goto	l9311
  9817                           
  9818                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9819  0A18  319C  24F1  3189   	fcall	_CC2500_ReadByte
  9820                           
  9821                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9822  0A1B  087A               	movf	_SPI0Buffer,w
  9823  0A1C  0020               	movlb	0	; select bank0
  9824  0A1D  00A4               	movwf	??_CC2500_RxData
  9825  0A1E  0825               	movf	CC2500_RxData@loop_f,w
  9826  0A1F  3EA0               	addlw	_RF_Data& (0+255)
  9827  0A20  0086               	movwf	6
  9828  0A21  3001               	movlw	1	; select bank3/4
  9829  0A22  0087               	movwf	7
  9830  0A23  0824               	movf	??_CC2500_RxData,w
  9831  0A24  0081               	movwf	1
  9832  0A25  3001               	movlw	1
  9833  0A26  00A4               	movwf	??_CC2500_RxData
  9834  0A27  0824               	movf	??_CC2500_RxData,w
  9835  0A28  07A5               	addwf	CC2500_RxData@loop_f,f
  9836  0A29  2A12               	goto	l9309
  9837  0A2A                     l9311:	
  9838                           
  9839                           ;CC2500_B1.c: 99: }
  9840                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9841  0A2A  319C  24F1  3189   	fcall	_CC2500_ReadByte
  9842                           
  9843                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9844  0A2D  087A               	movf	_SPI0Buffer,w
  9845  0A2E  0020               	movlb	0	; select bank0
  9846  0A2F  00A4               	movwf	??_CC2500_RxData
  9847  0A30  0824               	movf	??_CC2500_RxData,w
  9848  0A31  0021               	movlb	1	; select bank1
  9849  0A32  00D1               	movwf	_RSSI^(0+128)
  9850                           
  9851                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9852  0A33  319C  24F1  3189   	fcall	_CC2500_ReadByte
  9853                           
  9854                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9855  0A36  087A               	movf	_SPI0Buffer,w
  9856  0A37  0020               	movlb	0	; select bank0
  9857  0A38  00A4               	movwf	??_CC2500_RxData
  9858  0A39  0824               	movf	??_CC2500_RxData,w
  9859  0A3A  0021               	movlb	1	; select bank1
  9860  0A3B  00CD               	movwf	_CRC^(0+128)
  9861                           
  9862                           ;CC2500_B1.c: 104: RC4 = 1;
  9863  0A3C  0020               	movlb	0	; select bank0
  9864  0A3D  160E               	bsf	14,4	;volatile
  9865                           
  9866                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9867  0A3E  0021               	movlb	1	; select bank1
  9868  0A3F  1BCD               	btfsc	_CRC^(0+128),7
  9869                           
  9870                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9871  0A40  147B               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9872                           
  9873                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9874  0A41  11BC               	bcf	_RF1^(0+128),3
  9875                           
  9876                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9877  0A42  14BC               	bsf	_RF1^(0+128),1
  9878                           
  9879                           ;CC2500_B1.c: 110: } else {
  9880  0A43  2A46               	goto	l9323
  9881  0A44                     l293:	
  9882                           
  9883                           ;CC2500_B1.c: 111: RC4 = 1;
  9884  0A44  0020               	movlb	0	; select bank0
  9885  0A45  160E               	bsf	14,4	;volatile
  9886  0A46                     l9323:	
  9887                           
  9888                           ;CC2500_B1.c: 112: }
  9889                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9890  0A46  3199  21E5         	fcall	_set_TimeoutCleared
  9891  0A48  0021               	movlb	1	; select bank1
  9892  0A49  0008               	return
  9893  0A4A                     __end_of_CC2500_RxData:	
  9894                           
  9895                           	psect	text45
  9896  1EBC                     __ptext45:	
  9897 ;; *************** function _CC2500_ReadStatus *****************
  9898 ;; Defined at:
  9899 ;;		line 304 in file "../src/CC2500_B1.c"
  9900 ;; Parameters:    Size  Location     Type
  9901 ;;  status_addr     1    wreg     unsigned char 
  9902 ;; Auto vars:     Size  Location     Type
  9903 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9904 ;; Return value:  Size  Location     Type
  9905 ;;		None               void
  9906 ;; Registers used:
  9907 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9908 ;; Tracked objects:
  9909 ;;		On entry : 0/0
  9910 ;;		On exit  : 0/0
  9911 ;;		Unchanged: 0/0
  9912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9915 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9916 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9917 ;;Total ram usage:        2 bytes
  9918 ;; Hardware stack levels used:    1
  9919 ;; Hardware stack levels required when called:    6
  9920 ;; This function calls:
  9921 ;;		_CC2500_ReadByte
  9922 ;;		_CC2500_WriteByte
  9923 ;;		_Timeout_Counter
  9924 ;;		_set_TimeoutCleared
  9925 ;; This function is called by:
  9926 ;;		_CC2500_RxData
  9927 ;;		_setRF_Main
  9928 ;; This function uses a non-reentrant model
  9929 ;;
  9930                           
  9931                           
  9932                           ;psect for function _CC2500_ReadStatus
  9933  1EBC                     _CC2500_ReadStatus:	
  9934                           
  9935                           ;incstack = 0
  9936                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9937                           ;CC2500_ReadStatus@status_addr stored from wreg
  9938  1EBC  0020               	movlb	0	; select bank0
  9939  1EBD  00A3               	movwf	CC2500_ReadStatus@status_addr
  9940                           
  9941                           ;CC2500_B1.c: 305: RC4 = 0;
  9942  1EBE  120E               	bcf	14,4	;volatile
  9943                           
  9944                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9945  1EBF  0823               	movf	CC2500_ReadStatus@status_addr,w
  9946  1EC0  3EC0               	addlw	192
  9947  1EC1  00A2               	movwf	??_CC2500_ReadStatus
  9948  1EC2  0822               	movf	??_CC2500_ReadStatus,w
  9949  1EC3  00FA               	movwf	_SPI0Buffer
  9950                           
  9951                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9952  1EC4  2EC8               	goto	l9091
  9953  1EC5                     l9089:	
  9954                           
  9955                           ;CC2500_B1.c: 309: Timeout_Counter();
  9956  1EC5  319C  249A  319E   	fcall	_Timeout_Counter
  9957  1EC8                     l9091:	
  9958  1EC8  0020               	movlb	0	; select bank0
  9959  1EC9  1D0E               	btfss	14,2	;volatile
  9960  1ECA  2ECE               	goto	l9095
  9961  1ECB  0021               	movlb	1	; select bank1
  9962  1ECC  1D2D               	btfss	(_myMain^(0+128)+13),2
  9963  1ECD  2EC5               	goto	l9089
  9964  1ECE                     l9095:	
  9965                           
  9966                           ;CC2500_B1.c: 310: };
  9967                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9968  1ECE  3199  21E5  319E   	fcall	_set_TimeoutCleared
  9969                           
  9970                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9971  1ED1  319C  2472  319E   	fcall	_CC2500_WriteByte
  9972                           
  9973                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9974  1ED4  319C  24F1         	fcall	_CC2500_ReadByte
  9975                           
  9976                           ;CC2500_B1.c: 315: RC4 = 1;
  9977  1ED6  0020               	movlb	0	; select bank0
  9978  1ED7  160E               	bsf	14,4	;volatile
  9979                           
  9980                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9981  1ED8  087A               	movf	_SPI0Buffer,w
  9982  1ED9  00A2               	movwf	??_CC2500_ReadStatus
  9983  1EDA  0822               	movf	??_CC2500_ReadStatus,w
  9984  1EDB  0021               	movlb	1	; select bank1
  9985  1EDC  00D6               	movwf	_s_data^(0+128)
  9986  1EDD  0008               	return
  9987  1EDE                     __end_of_CC2500_ReadStatus:	
  9988                           
  9989                           	psect	text46
  9990  1CF1                     __ptext46:	
  9991 ;; *************** function _CC2500_ReadByte *****************
  9992 ;; Defined at:
  9993 ;;		line 238 in file "../src/CC2500_B1.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;		None
  9996 ;; Auto vars:     Size  Location     Type
  9997 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9998 ;; Return value:  Size  Location     Type
  9999 ;;		None               void
 10000 ;; Registers used:
 10001 ;;		wreg, status,2, status,0
 10002 ;; Tracked objects:
 10003 ;;		On entry : 0/0
 10004 ;;		On exit  : 0/0
 10005 ;;		Unchanged: 0/0
 10006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;Total ram usage:        2 bytes
 10012 ;; Hardware stack levels used:    1
 10013 ;; Hardware stack levels required when called:    5
 10014 ;; This function calls:
 10015 ;;		Nothing
 10016 ;; This function is called by:
 10017 ;;		_CC2500_RxData
 10018 ;;		_CC2500_ReadStatus
 10019 ;;		_CC2500_ReadREG
 10020 ;; This function uses a non-reentrant model
 10021 ;;
 10022                           
 10023                           
 10024                           ;psect for function _CC2500_ReadByte
 10025  1CF1                     _CC2500_ReadByte:	
 10026                           
 10027                           ;CC2500_B1.c: 239: unsigned char loop_b;
 10028                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
 10029                           
 10030                           ;incstack = 0
 10031                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
 10032  1CF1  0020               	movlb	0	; select bank0
 10033  1CF2  01A1               	clrf	CC2500_ReadByte@loop_b
 10034  1CF3                     L5:	
 10035  1CF3  3008               	movlw	8
 10036  1CF4  0221               	subwf	CC2500_ReadByte@loop_b,w
 10037  1CF5  1803               	btfsc	3,0
 10038  1CF6  0008               	return
 10039                           
 10040                           ;CC2500_B1.c: 241: RC1 = 1;
 10041  1CF7  148E               	bsf	14,1	;volatile
 10042                           
 10043                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
 10044  1CF8  1003               	clrc
 10045  1CF9  0DFA               	rlf	_SPI0Buffer,f
 10046                           
 10047                           ;CC2500_B1.c: 243: if (RC2 == 1)
 10048  1CFA  1D0E               	btfss	14,2	;volatile
 10049  1CFB  2CFE               	goto	l8947
 10050                           
 10051                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
 10052  1CFC  147A               	bsf	_SPI0Buffer,0
 10053  1CFD  2D02               	goto	l8949
 10054  1CFE                     l8947:	
 10055                           
 10056                           ;CC2500_B1.c: 245: else
 10057                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
 10058  1CFE  30FE               	movlw	254
 10059  1CFF  00A0               	movwf	??_CC2500_ReadByte
 10060  1D00  0820               	movf	??_CC2500_ReadByte,w
 10061  1D01  05FA               	andwf	_SPI0Buffer,f
 10062  1D02                     l8949:	
 10063                           
 10064                           ;CC2500_B1.c: 247: RC1 = 0;
 10065  1D02  108E               	bcf	14,1	;volatile
 10066  1D03  3001               	movlw	1
 10067  1D04  00A0               	movwf	??_CC2500_ReadByte
 10068  1D05  0820               	movf	??_CC2500_ReadByte,w
 10069  1D06  07A1               	addwf	CC2500_ReadByte@loop_b,f
 10070  1D07  2CF3               	goto	L5
 10071  1D08                     __end_of_CC2500_ReadByte:	
 10072                           
 10073                           	psect	text47
 10074  19C6                     __ptext47:	
 10075 ;; *************** function _RF_Initialization *****************
 10076 ;; Defined at:
 10077 ;;		line 9 in file "../src/RF_Control_B1.c"
 10078 ;; Parameters:    Size  Location     Type
 10079 ;;		None
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;		None
 10082 ;; Return value:  Size  Location     Type
 10083 ;;		None               void
 10084 ;; Registers used:
 10085 ;;		wreg, status,2, status,0, pclath, cstack
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;Total ram usage:        0 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; Hardware stack levels required when called:    6
 10098 ;; This function calls:
 10099 ;;		_setRF_Initialization
 10100 ;; This function is called by:
 10101 ;;		_main
 10102 ;; This function uses a non-reentrant model
 10103 ;;
 10104                           
 10105                           
 10106                           ;psect for function _RF_Initialization
 10107  19C6                     _RF_Initialization:	
 10108                           
 10109                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10110                           
 10111                           ;incstack = 0
 10112                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10113  19C6  319A  2283         	fcall	_setRF_Initialization
 10114  19C8  0008               	return
 10115  19C9                     __end_of_RF_Initialization:	
 10116                           
 10117                           	psect	text48
 10118  1A83                     __ptext48:	
 10119 ;; *************** function _setRF_Initialization *****************
 10120 ;; Defined at:
 10121 ;;		line 43 in file "../src/RF_Control_B1.c"
 10122 ;; Parameters:    Size  Location     Type
 10123 ;;		None
 10124 ;; Auto vars:     Size  Location     Type
 10125 ;;		None
 10126 ;; Return value:  Size  Location     Type
 10127 ;;		None               void
 10128 ;; Registers used:
 10129 ;;		wreg
 10130 ;; Tracked objects:
 10131 ;;		On entry : 0/0
 10132 ;;		On exit  : 0/0
 10133 ;;		Unchanged: 0/0
 10134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;Total ram usage:        1 bytes
 10140 ;; Hardware stack levels used:    1
 10141 ;; Hardware stack levels required when called:    5
 10142 ;; This function calls:
 10143 ;;		Nothing
 10144 ;; This function is called by:
 10145 ;;		_RF_Initialization
 10146 ;; This function uses a non-reentrant model
 10147 ;;
 10148                           
 10149                           
 10150                           ;psect for function _setRF_Initialization
 10151  1A83                     _setRF_Initialization:	
 10152                           
 10153                           ;RF_Control_B1.c: 45: Tx_Length = 21;
 10154                           
 10155                           ;incstack = 0
 10156                           ; Regs used in _setRF_Initialization: [wreg]
 10157  1A83  3015               	movlw	21
 10158  1A84  0020               	movlb	0	; select bank0
 10159  1A85  00A0               	movwf	??_setRF_Initialization
 10160  1A86  0820               	movf	??_setRF_Initialization,w
 10161  1A87  0021               	movlb	1	; select bank1
 10162  1A88  00D3               	movwf	_Tx_Length^(0+128)
 10163                           
 10164                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
 10165  1A89  300A               	movlw	10
 10166  1A8A  00C3               	movwf	(_RF1^(0+128)+7)
 10167  1A8B  3000               	movlw	0
 10168  1A8C  00C4               	movwf	(_RF1^(0+128)+8)
 10169  1A8D  0008               	return
 10170  1A8E                     __end_of_setRF_Initialization:	
 10171                           
 10172                           	psect	text49
 10173  1BEE                     __ptext49:	
 10174 ;; *************** function _Mcu_Initialization *****************
 10175 ;; Defined at:
 10176 ;;		line 30 in file "../src/MCU_B1.c"
 10177 ;; Parameters:    Size  Location     Type
 10178 ;;		None
 10179 ;; Auto vars:     Size  Location     Type
 10180 ;;		None
 10181 ;; Return value:  Size  Location     Type
 10182 ;;		None               void
 10183 ;; Registers used:
 10184 ;;		wreg, status,2, status,0, pclath, cstack
 10185 ;; Tracked objects:
 10186 ;;		On entry : 0/0
 10187 ;;		On exit  : 0/0
 10188 ;;		Unchanged: 0/0
 10189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10194 ;;Total ram usage:        0 bytes
 10195 ;; Hardware stack levels used:    1
 10196 ;; Hardware stack levels required when called:    6
 10197 ;; This function calls:
 10198 ;;		_ADC_Set
 10199 ;;		_Fosc_Set
 10200 ;;		_IOC_Set
 10201 ;;		_IO_Set
 10202 ;;		_TMR1_Set
 10203 ;;		_WDT_Set
 10204 ;; This function is called by:
 10205 ;;		_main
 10206 ;; This function uses a non-reentrant model
 10207 ;;
 10208                           
 10209                           
 10210                           ;psect for function _Mcu_Initialization
 10211  1BEE                     _Mcu_Initialization:	
 10212                           
 10213                           ;MCU_B1.c: 32: Fosc_Set();
 10214                           
 10215                           ;incstack = 0
 10216                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10217  1BEE  3199  21E1  319B   	fcall	_Fosc_Set
 10218                           
 10219                           ;MCU_B1.c: 34: IO_Set();
 10220  1BF1  319D  2553  319B   	fcall	_IO_Set
 10221                           
 10222                           ;MCU_B1.c: 36: ;;
 10223                           ;MCU_B1.c: 38: TMR1_Set();
 10224  1BF4  319A  22BE  319B   	fcall	_TMR1_Set
 10225                           
 10226                           ;MCU_B1.c: 40: ADC_Set();
 10227  1BF7  319A  2201  319B   	fcall	_ADC_Set
 10228                           
 10229                           ;MCU_B1.c: 42: ;;
 10230                           ;MCU_B1.c: 44: ;;
 10231                           ;MCU_B1.c: 46: IOC_Set();
 10232  1BFA  319A  22CA  319B   	fcall	_IOC_Set
 10233                           
 10234                           ;MCU_B1.c: 48: ;;
 10235                           ;MCU_B1.c: 50: ;;
 10236                           ;MCU_B1.c: 52: WDT_Set();
 10237  1BFD  319A  2278         	fcall	_WDT_Set
 10238  1BFF  0008               	return
 10239  1C00                     __end_of_Mcu_Initialization:	
 10240                           
 10241                           	psect	text50
 10242  1A78                     __ptext50:	
 10243 ;; *************** function _WDT_Set *****************
 10244 ;; Defined at:
 10245 ;;		line 1005 in file "../src/MCU_B1.c"
 10246 ;; Parameters:    Size  Location     Type
 10247 ;;		None
 10248 ;; Auto vars:     Size  Location     Type
 10249 ;;		None
 10250 ;; Return value:  Size  Location     Type
 10251 ;;		None               void
 10252 ;; Registers used:
 10253 ;;		wreg
 10254 ;; Tracked objects:
 10255 ;;		On entry : 0/0
 10256 ;;		On exit  : 0/0
 10257 ;;		Unchanged: 0/0
 10258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10262 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10263 ;;Total ram usage:        1 bytes
 10264 ;; Hardware stack levels used:    1
 10265 ;; Hardware stack levels required when called:    5
 10266 ;; This function calls:
 10267 ;;		Nothing
 10268 ;; This function is called by:
 10269 ;;		_Mcu_Initialization
 10270 ;; This function uses a non-reentrant model
 10271 ;;
 10272                           
 10273                           
 10274                           ;psect for function _WDT_Set
 10275  1A78                     _WDT_Set:	
 10276                           
 10277                           ;MCU_B1.c: 1012: WDTCON = 0b00010111;;
 10278                           
 10279                           ;incstack = 0
 10280                           ; Regs used in _WDT_Set: [wreg]
 10281  1A78  3017               	movlw	23
 10282  1A79  0021               	movlb	1	; select bank1
 10283  1A7A  0097               	movwf	23	;volatile
 10284                           
 10285                           ;MCU_B1.c: 1014: WDT.Enable = 1;
 10286  1A7B  144B               	bsf	_WDT^(0+128),0
 10287                           
 10288                           ;MCU_B1.c: 1015: WDT.Timer = 10;
 10289  1A7C  300A               	movlw	10
 10290  1A7D  0020               	movlb	0	; select bank0
 10291  1A7E  00A0               	movwf	??_WDT_Set
 10292  1A7F  0820               	movf	??_WDT_Set,w
 10293  1A80  0021               	movlb	1	; select bank1
 10294  1A81  00CC               	movwf	(_WDT^(0+128)+1)
 10295  1A82  0008               	return
 10296  1A83                     __end_of_WDT_Set:	
 10297                           
 10298                           	psect	text51
 10299  1ABE                     __ptext51:	
 10300 ;; *************** function _TMR1_Set *****************
 10301 ;; Defined at:
 10302 ;;		line 199 in file "../src/MCU_B1.c"
 10303 ;; Parameters:    Size  Location     Type
 10304 ;;		None
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;		None
 10307 ;; Return value:  Size  Location     Type
 10308 ;;		None               void
 10309 ;; Registers used:
 10310 ;;		wreg
 10311 ;; Tracked objects:
 10312 ;;		On entry : 0/0
 10313 ;;		On exit  : 0/0
 10314 ;;		Unchanged: 0/0
 10315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;Total ram usage:        0 bytes
 10321 ;; Hardware stack levels used:    1
 10322 ;; Hardware stack levels required when called:    5
 10323 ;; This function calls:
 10324 ;;		Nothing
 10325 ;; This function is called by:
 10326 ;;		_Mcu_Initialization
 10327 ;; This function uses a non-reentrant model
 10328 ;;
 10329                           
 10330                           
 10331                           ;psect for function _TMR1_Set
 10332  1ABE                     _TMR1_Set:	
 10333                           
 10334                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
 10335                           
 10336                           ;incstack = 0
 10337                           ; Regs used in _TMR1_Set: [wreg]
 10338  1ABE  3041               	movlw	65
 10339  1ABF  0020               	movlb	0	; select bank0
 10340  1AC0  0098               	movwf	24	;volatile
 10341                           
 10342                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
 10343  1AC1  30FA               	movlw	250
 10344  1AC2  0097               	movwf	23	;volatile
 10345                           
 10346                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
 10347  1AC3  3038               	movlw	56
 10348  1AC4  0096               	movwf	22	;volatile
 10349                           
 10350                           ;MCU_B1.c: 203: TMR1IE = 1;
 10351  1AC5  0021               	movlb	1	; select bank1
 10352  1AC6  1411               	bsf	17,0	;volatile
 10353                           
 10354                           ;MCU_B1.c: 204: PEIE = 1;
 10355  1AC7  170B               	bsf	11,6	;volatile
 10356                           
 10357                           ;MCU_B1.c: 205: GIE = 1;
 10358  1AC8  178B               	bsf	11,7	;volatile
 10359  1AC9  0008               	return
 10360  1ACA                     __end_of_TMR1_Set:	
 10361                           
 10362                           	psect	text52
 10363  1D53                     __ptext52:	
 10364 ;; *************** function _IO_Set *****************
 10365 ;; Defined at:
 10366 ;;		line 60 in file "../src/MCU_B1.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;		None
 10369 ;; Auto vars:     Size  Location     Type
 10370 ;;		None
 10371 ;; Return value:  Size  Location     Type
 10372 ;;		None               void
 10373 ;; Registers used:
 10374 ;;		wreg, status,2
 10375 ;; Tracked objects:
 10376 ;;		On entry : 0/0
 10377 ;;		On exit  : 0/0
 10378 ;;		Unchanged: 0/0
 10379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;Total ram usage:        0 bytes
 10385 ;; Hardware stack levels used:    1
 10386 ;; Hardware stack levels required when called:    5
 10387 ;; This function calls:
 10388 ;;		Nothing
 10389 ;; This function is called by:
 10390 ;;		_Mcu_Initialization
 10391 ;; This function uses a non-reentrant model
 10392 ;;
 10393                           
 10394                           
 10395                           ;psect for function _IO_Set
 10396  1D53                     _IO_Set:	
 10397                           
 10398                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10399                           
 10400                           ;incstack = 0
 10401                           ; Regs used in _IO_Set: [wreg+status,2]
 10402  1D53  3077               	movlw	119
 10403  1D54  0021               	movlb	1	; select bank1
 10404  1D55  008C               	movwf	12	;volatile
 10405                           
 10406                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10407  1D56  3007               	movlw	7
 10408  1D57  008D               	movwf	13	;volatile
 10409                           
 10410                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10411  1D58  300C               	movlw	12
 10412  1D59  008E               	movwf	14	;volatile
 10413                           
 10414                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10415  1D5A  0022               	movlb	2	; select bank2
 10416  1D5B  018C               	clrf	12	;volatile
 10417                           
 10418                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10419  1D5C  3002               	movlw	2
 10420  1D5D  008D               	movwf	13	;volatile
 10421                           
 10422                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10423  1D5E  018E               	clrf	14	;volatile
 10424                           
 10425                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10426  1D5F  3022               	movlw	34
 10427  1D60  0023               	movlb	3	; select bank3
 10428  1D61  008C               	movwf	12	;volatile
 10429                           
 10430                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10431  1D62  018D               	clrf	13	;volatile
 10432                           
 10433                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10434  1D63  018E               	clrf	14	;volatile
 10435                           
 10436                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10437  1D64  3077               	movlw	119
 10438  1D65  0020               	movlb	0	; select bank0
 10439  1D66  008C               	movwf	12	;volatile
 10440                           
 10441                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10442  1D67  3007               	movlw	7
 10443  1D68  008D               	movwf	13	;volatile
 10444                           
 10445                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10446  1D69  300C               	movlw	12
 10447  1D6A  008E               	movwf	14	;volatile
 10448  1D6B  0008               	return
 10449  1D6C                     __end_of_IO_Set:	
 10450                           
 10451                           	psect	text53
 10452  1ACA                     __ptext53:	
 10453 ;; *************** function _IOC_Set *****************
 10454 ;; Defined at:
 10455 ;;		line 367 in file "../src/MCU_B1.c"
 10456 ;; Parameters:    Size  Location     Type
 10457 ;;		None
 10458 ;; Auto vars:     Size  Location     Type
 10459 ;;		None
 10460 ;; Return value:  Size  Location     Type
 10461 ;;		None               void
 10462 ;; Registers used:
 10463 ;;		wreg, status,2
 10464 ;; Tracked objects:
 10465 ;;		On entry : 0/0
 10466 ;;		On exit  : 0/0
 10467 ;;		Unchanged: 0/0
 10468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;Total ram usage:        0 bytes
 10474 ;; Hardware stack levels used:    1
 10475 ;; Hardware stack levels required when called:    5
 10476 ;; This function calls:
 10477 ;;		Nothing
 10478 ;; This function is called by:
 10479 ;;		_Mcu_Initialization
 10480 ;; This function uses a non-reentrant model
 10481 ;;
 10482                           
 10483                           
 10484                           ;psect for function _IOC_Set
 10485  1ACA                     _IOC_Set:	
 10486                           
 10487                           ;MCU_B1.c: 368: WPUB2 = 0;
 10488                           
 10489                           ;incstack = 0
 10490                           ; Regs used in _IOC_Set: [wreg+status,2]
 10491  1ACA  0024               	movlb	4	; select bank4
 10492  1ACB  110D               	bcf	13,2	;volatile
 10493                           
 10494                           ;MCU_B1.c: 371: IOCBP = 0b00000100;
 10495  1ACC  3004               	movlw	4
 10496  1ACD  0027               	movlb	7	; select bank7
 10497  1ACE  0094               	movwf	20	;volatile
 10498                           
 10499                           ;MCU_B1.c: 372: IOCBN = 0b00000100;
 10500  1ACF  3004               	movlw	4
 10501  1AD0  0095               	movwf	21	;volatile
 10502                           
 10503                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
 10504  1AD1  0196               	clrf	22	;volatile
 10505                           
 10506                           ;MCU_B1.c: 394: IOCIE = 1;
 10507  1AD2  158B               	bsf	11,3	;volatile
 10508                           
 10509                           ;MCU_B1.c: 395: IOCIF = 0;
 10510  1AD3  100B               	bcf	11,0	;volatile
 10511                           
 10512                           ;MCU_B1.c: 396: PEIE = 1;
 10513  1AD4  170B               	bsf	11,6	;volatile
 10514                           
 10515                           ;MCU_B1.c: 397: GIE = 1;
 10516  1AD5  178B               	bsf	11,7	;volatile
 10517  1AD6  0008               	return
 10518  1AD7                     __end_of_IOC_Set:	
 10519                           
 10520                           	psect	text54
 10521  19E1                     __ptext54:	
 10522 ;; *************** function _Fosc_Set *****************
 10523 ;; Defined at:
 10524 ;;		line 56 in file "../src/MCU_B1.c"
 10525 ;; Parameters:    Size  Location     Type
 10526 ;;		None
 10527 ;; Auto vars:     Size  Location     Type
 10528 ;;		None
 10529 ;; Return value:  Size  Location     Type
 10530 ;;		None               void
 10531 ;; Registers used:
 10532 ;;		wreg
 10533 ;; Tracked objects:
 10534 ;;		On entry : 0/0
 10535 ;;		On exit  : 0/0
 10536 ;;		Unchanged: 0/0
 10537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;Total ram usage:        0 bytes
 10543 ;; Hardware stack levels used:    1
 10544 ;; Hardware stack levels required when called:    5
 10545 ;; This function calls:
 10546 ;;		Nothing
 10547 ;; This function is called by:
 10548 ;;		_Mcu_Initialization
 10549 ;; This function uses a non-reentrant model
 10550 ;;
 10551                           
 10552                           
 10553                           ;psect for function _Fosc_Set
 10554  19E1                     _Fosc_Set:	
 10555                           
 10556                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10557                           
 10558                           ;incstack = 0
 10559                           ; Regs used in _Fosc_Set: [wreg]
 10560  19E1  3078               	movlw	120
 10561  19E2  0021               	movlb	1	; select bank1
 10562  19E3  0099               	movwf	25	;volatile
 10563  19E4  0008               	return
 10564  19E5                     __end_of_Fosc_Set:	
 10565                           
 10566                           	psect	text55
 10567  1A01                     __ptext55:	
 10568 ;; *************** function _ADC_Set *****************
 10569 ;; Defined at:
 10570 ;;		line 419 in file "../src/MCU_B1.c"
 10571 ;; Parameters:    Size  Location     Type
 10572 ;;		None
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;		None
 10575 ;; Return value:  Size  Location     Type
 10576 ;;		None               void
 10577 ;; Registers used:
 10578 ;;		wreg
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10588 ;;Total ram usage:        0 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    5
 10591 ;; This function calls:
 10592 ;;		Nothing
 10593 ;; This function is called by:
 10594 ;;		_Mcu_Initialization
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           
 10599                           ;psect for function _ADC_Set
 10600  1A01                     _ADC_Set:	
 10601                           
 10602                           ;MCU_B1.c: 420: ADCON1 = 0xf2;
 10603                           
 10604                           ;incstack = 0
 10605                           ; Regs used in _ADC_Set: [wreg]
 10606  1A01  30F2               	movlw	242
 10607  1A02  0021               	movlb	1	; select bank1
 10608  1A03  009E               	movwf	30	;volatile
 10609                           
 10610                           ;MCU_B1.c: 421: FVRCON = 0xc0;
 10611  1A04  30C0               	movlw	192
 10612  1A05  0022               	movlb	2	; select bank2
 10613  1A06  0097               	movwf	23	;volatile
 10614  1A07  0008               	return
 10615  1A08                     __end_of_ADC_Set:	
 10616                           
 10617                           	psect	text56
 10618  020E                     __ptext56:	
 10619 ;; *************** function _Load_Main *****************
 10620 ;; Defined at:
 10621 ;;		line 39 in file "../src/OverLoad_B1.c"
 10622 ;; Parameters:    Size  Location     Type
 10623 ;;		None
 10624 ;; Auto vars:     Size  Location     Type
 10625 ;;  i               1   19[BANK0 ] unsigned char 
 10626 ;; Return value:  Size  Location     Type
 10627 ;;		None               void
 10628 ;; Registers used:
 10629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10630 ;; Tracked objects:
 10631 ;;		On entry : 0/0
 10632 ;;		On exit  : 0/0
 10633 ;;		Unchanged: 0/0
 10634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10637 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10638 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10639 ;;Total ram usage:        3 bytes
 10640 ;; Hardware stack levels used:    1
 10641 ;; Hardware stack levels required when called:   10
 10642 ;; This function calls:
 10643 ;;		___lwdiv
 10644 ;;		___wmul
 10645 ;;		_getTemp_Safe
 10646 ;;		_setDimmerLights_Clear
 10647 ;;		_setLoad_AH_AL_Restore
 10648 ;;		_setLoad_Exceptions
 10649 ;; This function is called by:
 10650 ;;		_main
 10651 ;; This function uses a non-reentrant model
 10652 ;;
 10653                           
 10654                           
 10655                           ;psect for function _Load_Main
 10656  020E                     _Load_Main:	
 10657                           
 10658                           ;OverLoad_B1.c: 40: char i = 0;
 10659                           
 10660                           ;incstack = 0
 10661                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10662  020E  0020               	movlb	0	; select bank0
 10663  020F  01B3               	clrf	Load_Main@i
 10664                           
 10665                           ;OverLoad_B1.c: 41: if (Load1.ERROR == 1) {
 10666  0210  0022               	movlb	2	; select bank2
 10667  0211  1EA2               	btfss	_Load1^(0+256),5
 10668  0212  2A24               	goto	l1702
 10669                           
 10670                           ;OverLoad_B1.c: 42: Load1.ErrorTime++;
 10671  0213  3001               	movlw	1
 10672  0214  07A5               	addwf	(_Load1^(0+256)+3),f
 10673  0215  3000               	movlw	0
 10674  0216  3DA6               	addwfc	((_Load1+1)^(0+256)+3),f
 10675                           
 10676                           ;OverLoad_B1.c: 43: if (Load1.ErrorTime >= 1000)
 10677  0217  3003               	movlw	3
 10678  0218  0226               	subwf	((_Load1+1)^(0+256)+3),w
 10679  0219  30E8               	movlw	232
 10680  021A  1903               	skipnz
 10681  021B  0225               	subwf	(_Load1^(0+256)+3),w
 10682  021C  1C03               	skipc
 10683  021D  0008               	return
 10684                           
 10685                           ;OverLoad_B1.c: 44: {
 10686                           ;OverLoad_B1.c: 45: Load1.ErrorTime = 0;
 10687  021E  01A5               	clrf	(_Load1^(0+256)+3)
 10688  021F  01A6               	clrf	((_Load1+1)^(0+256)+3)
 10689                           
 10690                           ;OverLoad_B1.c: 46: setLoad_Exceptions(0);
 10691  0220  3000               	movlw	0
 10692  0221  3191  2185         	fcall	_setLoad_Exceptions
 10693                           
 10694                           ;OverLoad_B1.c: 47: }
 10695                           ;OverLoad_B1.c: 48: } else {
 10696  0223  0008               	return
 10697  0224                     l1702:	
 10698                           
 10699                           ;OverLoad_B1.c: 49: if (Load1.ADtoGO == 1) {
 10700  0224  1E22               	btfss	_Load1^(0+256),4
 10701  0225  2B4F               	goto	l1705
 10702                           
 10703                           ;OverLoad_B1.c: 50: Load1.Time++;
 10704  0226  3001               	movlw	1
 10705  0227  07A3               	addwf	(_Load1^(0+256)+1),f
 10706  0228  3000               	movlw	0
 10707  0229  3DA4               	addwfc	((_Load1+1)^(0+256)+1),f
 10708                           
 10709                           ;OverLoad_B1.c: 51: if (Load1.Time >= 5)
 10710  022A  3000               	movlw	0
 10711  022B  0224               	subwf	((_Load1+1)^(0+256)+1),w
 10712  022C  3005               	movlw	5
 10713  022D  1903               	skipnz
 10714  022E  0223               	subwf	(_Load1^(0+256)+1),w
 10715  022F  1C03               	skipc
 10716  0230  0008               	return
 10717                           
 10718                           ;OverLoad_B1.c: 52: {
 10719                           ;OverLoad_B1.c: 53: Load1.Time = 0;
 10720  0231  01A3               	clrf	(_Load1^(0+256)+1)
 10721  0232  01A4               	clrf	((_Load1+1)^(0+256)+1)
 10722                           
 10723                           ;OverLoad_B1.c: 54: Load1.ADtoGO = 0;
 10724  0233  1222               	bcf	_Load1^(0+256),4
 10725                           
 10726                           ;OverLoad_B1.c: 55: Load1.LightsCount = Load1.Lights1Status + Load1.Lights2Status + Load
      +                          1.Lights3Status;
 10727  0234  0851               	movf	(_Load1^(0+256)+47),w
 10728  0235  0752               	addwf	(_Load1^(0+256)+48),w
 10729  0236  0753               	addwf	(_Load1^(0+256)+49),w
 10730  0237  0020               	movlb	0	; select bank0
 10731  0238  00B1               	movwf	??_Load_Main
 10732  0239  0831               	movf	??_Load_Main,w
 10733  023A  0022               	movlb	2	; select bank2
 10734  023B  00CE               	movwf	(_Load1^(0+256)+44)
 10735                           
 10736                           ;OverLoad_B1.c: 56: for (i = 1; i < 4; i++) {
 10737  023C  0020               	movlb	0	; select bank0
 10738  023D  01B3               	clrf	Load_Main@i
 10739  023E  0AB3               	incf	Load_Main@i,f
 10740  023F  3004               	movlw	4
 10741  0240  0233               	subwf	Load_Main@i,w
 10742  0241  1803               	btfsc	3,0
 10743  0242  2A6D               	goto	l10495
 10744  0243                     l10489:	
 10745                           
 10746                           ;OverLoad_B1.c: 57: Load1.ADH += Load1.AH[i];
 10747  0243  3533               	lslf	Load_Main@i,w
 10748  0244  3E2A               	addlw	(_Load1+8)& (0+255)
 10749  0245  0086               	movwf	6
 10750  0246  3001               	movlw	1	; select bank2/3
 10751  0247  0087               	movwf	7
 10752  0248  3F40               	moviw [0]fsr1
 10753  0249  00B1               	movwf	??_Load_Main
 10754  024A  3F41               	moviw [1]fsr1
 10755  024B  00B2               	movwf	??_Load_Main+1
 10756  024C  0831               	movf	??_Load_Main,w
 10757  024D  0022               	movlb	2	; select bank2
 10758  024E  07C0               	addwf	(_Load1^(0+256)+30),f
 10759  024F  0020               	movlb	0	; select bank0
 10760  0250  0832               	movf	??_Load_Main+1,w
 10761  0251  0022               	movlb	2	; select bank2
 10762  0252  3DC1               	addwfc	((_Load1+1)^(0+256)+30),f
 10763                           
 10764                           ;OverLoad_B1.c: 58: Load1.ADL += Load1.AL[i];
 10765  0253  0020               	movlb	0	; select bank0
 10766  0254  3533               	lslf	Load_Main@i,w
 10767  0255  3E34               	addlw	(_Load1+18)& (0+255)
 10768  0256  0086               	movwf	6
 10769  0257  3001               	movlw	1	; select bank2/3
 10770  0258  0087               	movwf	7
 10771  0259  3F40               	moviw [0]fsr1
 10772  025A  00B1               	movwf	??_Load_Main
 10773  025B  3F41               	moviw [1]fsr1
 10774  025C  00B2               	movwf	??_Load_Main+1
 10775  025D  0831               	movf	??_Load_Main,w
 10776  025E  0022               	movlb	2	; select bank2
 10777  025F  07C2               	addwf	(_Load1^(0+256)+32),f
 10778  0260  0020               	movlb	0	; select bank0
 10779  0261  0832               	movf	??_Load_Main+1,w
 10780  0262  0022               	movlb	2	; select bank2
 10781  0263  3DC3               	addwfc	((_Load1+1)^(0+256)+32),f
 10782  0264  3001               	movlw	1
 10783  0265  0020               	movlb	0	; select bank0
 10784  0266  00B1               	movwf	??_Load_Main
 10785  0267  0831               	movf	??_Load_Main,w
 10786  0268  07B3               	addwf	Load_Main@i,f
 10787  0269  3004               	movlw	4
 10788  026A  0233               	subwf	Load_Main@i,w
 10789  026B  1C03               	skipc
 10790  026C  2A43               	goto	l10489
 10791  026D                     l10495:	
 10792                           
 10793                           ;OverLoad_B1.c: 59: }
 10794                           ;OverLoad_B1.c: 60: Load1.ADH /= 3;
 10795  026D  3003               	movlw	3
 10796  026E  00A0               	movwf	___lwdiv@divisor
 10797  026F  3000               	movlw	0
 10798  0270  00A1               	movwf	___lwdiv@divisor+1
 10799  0271  0022               	movlb	2	; select bank2
 10800  0272  0841               	movf	((_Load1+1)^(0+256)+30),w
 10801  0273  0020               	movlb	0	; select bank0
 10802  0274  01A3               	clrf	___lwdiv@dividend+1
 10803  0275  07A3               	addwf	___lwdiv@dividend+1,f
 10804  0276  0022               	movlb	2	; select bank2
 10805  0277  0840               	movf	(_Load1^(0+256)+30),w
 10806  0278  0020               	movlb	0	; select bank0
 10807  0279  01A2               	clrf	___lwdiv@dividend
 10808  027A  07A2               	addwf	___lwdiv@dividend,f
 10809  027B  3191  214E  3182   	fcall	___lwdiv
 10810  027E  0020               	movlb	0	; select bank0
 10811  027F  0821               	movf	?___lwdiv+1,w
 10812  0280  0022               	movlb	2	; select bank2
 10813  0281  01C1               	clrf	((_Load1+1)^(0+256)+30)
 10814  0282  07C1               	addwf	((_Load1+1)^(0+256)+30),f
 10815  0283  0020               	movlb	0	; select bank0
 10816  0284  0820               	movf	?___lwdiv,w
 10817  0285  0022               	movlb	2	; select bank2
 10818  0286  01C0               	clrf	(_Load1^(0+256)+30)
 10819  0287  07C0               	addwf	(_Load1^(0+256)+30),f
 10820                           
 10821                           ;OverLoad_B1.c: 61: Load1.ADL /= 3;
 10822  0288  3003               	movlw	3
 10823  0289  0020               	movlb	0	; select bank0
 10824  028A  00A0               	movwf	___lwdiv@divisor
 10825  028B  3000               	movlw	0
 10826  028C  00A1               	movwf	___lwdiv@divisor+1
 10827  028D  0022               	movlb	2	; select bank2
 10828  028E  0843               	movf	((_Load1+1)^(0+256)+32),w
 10829  028F  0020               	movlb	0	; select bank0
 10830  0290  01A3               	clrf	___lwdiv@dividend+1
 10831  0291  07A3               	addwf	___lwdiv@dividend+1,f
 10832  0292  0022               	movlb	2	; select bank2
 10833  0293  0842               	movf	(_Load1^(0+256)+32),w
 10834  0294  0020               	movlb	0	; select bank0
 10835  0295  01A2               	clrf	___lwdiv@dividend
 10836  0296  07A2               	addwf	___lwdiv@dividend,f
 10837  0297  3191  214E  3182   	fcall	___lwdiv
 10838  029A  0020               	movlb	0	; select bank0
 10839  029B  0821               	movf	?___lwdiv+1,w
 10840  029C  0022               	movlb	2	; select bank2
 10841  029D  01C3               	clrf	((_Load1+1)^(0+256)+32)
 10842  029E  07C3               	addwf	((_Load1+1)^(0+256)+32),f
 10843  029F  0020               	movlb	0	; select bank0
 10844  02A0  0820               	movf	?___lwdiv,w
 10845  02A1  0022               	movlb	2	; select bank2
 10846  02A2  01C2               	clrf	(_Load1^(0+256)+32)
 10847  02A3  07C2               	addwf	(_Load1^(0+256)+32),f
 10848                           
 10849                           ;OverLoad_B1.c: 62: if (Load1.ADH > Load1.ADL) {
 10850  02A4  0841               	movf	((_Load1+1)^(0+256)+30),w
 10851  02A5  0243               	subwf	((_Load1+1)^(0+256)+32),w
 10852  02A6  1D03               	skipz
 10853  02A7  2AAA               	goto	u11355
 10854  02A8  0840               	movf	(_Load1^(0+256)+30),w
 10855  02A9  0242               	subwf	(_Load1^(0+256)+32),w
 10856  02AA                     u11355:	
 10857  02AA  1803               	skipnc
 10858  02AB  2B4C               	goto	l10553
 10859                           
 10860                           ;OverLoad_B1.c: 63: Load1.AD = (Load1.ADH - Load1.ADL);
 10861  02AC  301E               	movlw	30
 10862  02AD  3E22               	addlw	_Load1& (0+255)
 10863  02AE  0086               	movwf	6
 10864  02AF  3001               	movlw	1	; select bank2/3
 10865  02B0  0087               	movwf	7
 10866  02B1  0942               	comf	(_Load1^(0+256)+32),w
 10867  02B2  0020               	movlb	0	; select bank0
 10868  02B3  00B1               	movwf	??_Load_Main
 10869  02B4  0022               	movlb	2	; select bank2
 10870  02B5  0943               	comf	((_Load1+1)^(0+256)+32),w
 10871  02B6  0020               	movlb	0	; select bank0
 10872  02B7  00B2               	movwf	??_Load_Main+1
 10873  02B8  0AB1               	incf	??_Load_Main,f
 10874  02B9  1903               	skipnz
 10875  02BA  0AB2               	incf	??_Load_Main+1,f
 10876  02BB  3F40               	moviw [0]fsr1
 10877  02BC  0731               	addwf	??_Load_Main,w
 10878  02BD  0022               	movlb	2	; select bank2
 10879  02BE  00BE               	movwf	(_Load1^(0+256)+28)
 10880  02BF  3F41               	moviw [1]fsr1
 10881  02C0  0020               	movlb	0	; select bank0
 10882  02C1  3D32               	addwfc	??_Load_Main+1,w
 10883  02C2  0022               	movlb	2	; select bank2
 10884  02C3  00BF               	movwf	(_Load1^(0+256)+29)
 10885                           
 10886                           ;OverLoad_B1.c: 65: if (Load1.Count < 2) {
 10887  02C4  3002               	movlw	2
 10888  02C5  024C               	subwf	(_Load1^(0+256)+42),w
 10889  02C6  1803               	skipnc
 10890  02C7  2AE9               	goto	l10517
 10891                           
 10892                           ;OverLoad_B1.c: 66: Load1.Count++;
 10893  02C8  3001               	movlw	1
 10894  02C9  0020               	movlb	0	; select bank0
 10895  02CA  00B1               	movwf	??_Load_Main
 10896  02CB  0831               	movf	??_Load_Main,w
 10897  02CC  0022               	movlb	2	; select bank2
 10898  02CD  07CC               	addwf	(_Load1^(0+256)+42),f
 10899                           
 10900                           ;OverLoad_B1.c: 67: if (Load1.Count == 1) {
 10901  02CE  084C               	movf	(_Load1^(0+256)+42),w
 10902  02CF  3A01               	xorlw	1
 10903  02D0  1D03               	skipz
 10904  02D1  2AD6               	goto	l10509
 10905                           
 10906                           ;OverLoad_B1.c: 68: Load1.JudgeValue = 500;
 10907  02D2  30F4               	movlw	244
 10908  02D3  00C8               	movwf	(_Load1^(0+256)+38)
 10909  02D4  3001               	movlw	1
 10910  02D5  2AE1               	goto	L6
 10911  02D6                     l10509:	
 10912                           ;OverLoad_B1.c: 69: } else if (Load1.Count == 2) {
 10913                           
 10914  02D6  084C               	movf	(_Load1^(0+256)+42),w
 10915  02D7  3A02               	xorlw	2
 10916  02D8  1D03               	skipz
 10917  02D9  2AE9               	goto	l10517
 10918                           
 10919                           ;OverLoad_B1.c: 70: if (Load1.LightsCount == 1) {
 10920  02DA  084E               	movf	(_Load1^(0+256)+44),w
 10921  02DB  3A01               	xorlw	1
 10922  02DC  1D03               	skipz
 10923  02DD  2AE3               	goto	l10515
 10924                           
 10925                           ;OverLoad_B1.c: 71: Load1.JudgeValue = 0x32;
 10926  02DE  3032               	movlw	50
 10927  02DF  00C8               	movwf	(_Load1^(0+256)+38)
 10928  02E0  3000               	movlw	0
 10929  02E1                     L6:	
 10930  02E1  00C9               	movwf	(_Load1^(0+256)+39)
 10931                           
 10932                           ;OverLoad_B1.c: 72: } else {
 10933  02E2  2AE9               	goto	l10517
 10934  02E3                     l10515:	
 10935                           
 10936                           ;OverLoad_B1.c: 73: Load1.JudgeValue = (0x32 + Load1.TotalLoad) - 0x08;
 10937  02E3  0828               	movf	(_Load1^(0+256)+6),w
 10938  02E4  3E2A               	addlw	42
 10939  02E5  00C8               	movwf	(_Load1^(0+256)+38)
 10940  02E6  3000               	movlw	0
 10941  02E7  3D29               	addwfc	((_Load1+1)^(0+256)+6),w
 10942  02E8  00C9               	movwf	((_Load1+1)^(0+256)+38)
 10943  02E9                     l10517:	
 10944                           
 10945                           ;OverLoad_B1.c: 74: }
 10946                           ;OverLoad_B1.c: 75: }
 10947                           ;OverLoad_B1.c: 76: }
 10948                           ;OverLoad_B1.c: 78: if (Load1.AD >= Load1.JudgeValue) {
 10949  02E9  0849               	movf	((_Load1+1)^(0+256)+38),w
 10950  02EA  023F               	subwf	((_Load1+1)^(0+256)+28),w
 10951  02EB  1D03               	skipz
 10952  02EC  2AEF               	goto	u11405
 10953  02ED  0848               	movf	(_Load1^(0+256)+38),w
 10954  02EE  023E               	subwf	(_Load1^(0+256)+28),w
 10955  02EF                     u11405:	
 10956  02EF  1C03               	skipc
 10957  02F0  2B01               	goto	l10527
 10958                           
 10959                           ;OverLoad_B1.c: 79: Load1.ErrorCount++;
 10960  02F1  3001               	movlw	1
 10961  02F2  0020               	movlb	0	; select bank0
 10962  02F3  00B1               	movwf	??_Load_Main
 10963  02F4  0831               	movf	??_Load_Main,w
 10964  02F5  0022               	movlb	2	; select bank2
 10965  02F6  07CD               	addwf	(_Load1^(0+256)+43),f
 10966                           
 10967                           ;OverLoad_B1.c: 80: if (Load1.ErrorCount > 2) {
 10968  02F7  3003               	movlw	3
 10969  02F8  024D               	subwf	(_Load1^(0+256)+43),w
 10970  02F9  1C03               	skipc
 10971  02FA  2B4C               	goto	l10553
 10972                           
 10973                           ;OverLoad_B1.c: 81: Load1.ErrorCount = 0;
 10974  02FB  01CD               	clrf	(_Load1^(0+256)+43)
 10975                           
 10976                           ;OverLoad_B1.c: 82: setLoad_Exceptions(1);
 10977  02FC  3001               	movlw	1
 10978  02FD  3191  2185  3182   	fcall	_setLoad_Exceptions
 10979                           
 10980                           ;OverLoad_B1.c: 90: }
 10981                           ;OverLoad_B1.c: 91: } else {
 10982  0300  2B4C               	goto	l10553
 10983  0301                     l10527:	
 10984                           
 10985                           ;OverLoad_B1.c: 93: Load1.ErrorCount = 0;
 10986  0301  0022               	movlb	2	; select bank2
 10987  0302  01CD               	clrf	(_Load1^(0+256)+43)
 10988                           
 10989                           ;OverLoad_B1.c: 94: if (Load1.SafeCount < 10) {
 10990  0303  300A               	movlw	10
 10991  0304  0250               	subwf	(_Load1^(0+256)+46),w
 10992  0305  1803               	skipnc
 10993  0306  2B0D               	goto	l10533
 10994                           
 10995                           ;OverLoad_B1.c: 95: Load1.SafeCount++;
 10996  0307  3001               	movlw	1
 10997  0308  0020               	movlb	0	; select bank0
 10998  0309  00B1               	movwf	??_Load_Main
 10999  030A  0831               	movf	??_Load_Main,w
 11000  030B  0022               	movlb	2	; select bank2
 11001  030C  07D0               	addwf	(_Load1^(0+256)+46),f
 11002  030D                     l10533:	
 11003                           
 11004                           ;OverLoad_B1.c: 96: }
 11005                           ;OverLoad_B1.c: 97: if (Load1.SafeCount >= 10) {
 11006  030D  300A               	movlw	10
 11007  030E  0250               	subwf	(_Load1^(0+256)+46),w
 11008  030F  1C03               	skipc
 11009  0310  2B4C               	goto	l10553
 11010                           
 11011                           ;OverLoad_B1.c: 98: Load1.Safe = 1;
 11012  0311  15A2               	bsf	_Load1^(0+256),3
 11013                           
 11014                           ;OverLoad_B1.c: 102: setDimmerLights_Clear(1, 1);
 11015  0312  0020               	movlb	0	; select bank0
 11016  0313  01A2               	clrf	setDimmerLights_Clear@command
 11017  0314  0AA2               	incf	setDimmerLights_Clear@command,f
 11018  0315  3001               	movlw	1
 11019  0316  319B  2379  3182   	fcall	_setDimmerLights_Clear
 11020                           
 11021                           ;OverLoad_B1.c: 112: setDimmerLights_Clear(2, 1);
 11022  0319  0020               	movlb	0	; select bank0
 11023  031A  01A2               	clrf	setDimmerLights_Clear@command
 11024  031B  0AA2               	incf	setDimmerLights_Clear@command,f
 11025  031C  3002               	movlw	2
 11026  031D  319B  2379  3182   	fcall	_setDimmerLights_Clear
 11027                           
 11028                           ;OverLoad_B1.c: 130: if (Load1.StatusOn == 1) {
 11029  0320  0022               	movlb	2	; select bank2
 11030  0321  1F22               	btfss	_Load1^(0+256),6
 11031  0322  2B2A               	goto	l10545
 11032                           
 11033                           ;OverLoad_B1.c: 131: Load1.StatusOn = 0;
 11034  0323  1322               	bcf	_Load1^(0+256),6
 11035                           
 11036                           ;OverLoad_B1.c: 132: Load1.TotalLoad = Load1.AD;
 11037  0324  083F               	movf	((_Load1+1)^(0+256)+28),w
 11038  0325  01A9               	clrf	((_Load1+1)^(0+256)+6)
 11039  0326  07A9               	addwf	((_Load1+1)^(0+256)+6),f
 11040  0327  083E               	movf	(_Load1^(0+256)+28),w
 11041  0328  01A8               	clrf	(_Load1^(0+256)+6)
 11042  0329  07A8               	addwf	(_Load1^(0+256)+6),f
 11043  032A                     l10545:	
 11044                           
 11045                           ;OverLoad_B1.c: 134: }
 11046                           ;OverLoad_B1.c: 136: if (Load1.StatusOff == 1) {
 11047  032A  1FA2               	btfss	_Load1^(0+256),7
 11048  032B  2B4C               	goto	l10553
 11049                           
 11050                           ;OverLoad_B1.c: 137: Load1.StatusOff = 0;
 11051  032C  13A2               	bcf	_Load1^(0+256),7
 11052                           
 11053                           ;OverLoad_B1.c: 138: Load1.TotalLoad = Load1.AD;
 11054  032D  083F               	movf	((_Load1+1)^(0+256)+28),w
 11055  032E  01A9               	clrf	((_Load1+1)^(0+256)+6)
 11056  032F  07A9               	addwf	((_Load1+1)^(0+256)+6),f
 11057  0330  083E               	movf	(_Load1^(0+256)+28),w
 11058  0331  01A8               	clrf	(_Load1^(0+256)+6)
 11059  0332  07A8               	addwf	(_Load1^(0+256)+6),f
 11060                           
 11061                           ;OverLoad_B1.c: 139: Load1.JudgeValue = 0x32 * Load1.LightsCount;
 11062  0333  084E               	movf	(_Load1^(0+256)+44),w
 11063  0334  0020               	movlb	0	; select bank0
 11064  0335  00B1               	movwf	??_Load_Main
 11065  0336  01B2               	clrf	??_Load_Main+1
 11066  0337  0831               	movf	??_Load_Main,w
 11067  0338  00A0               	movwf	___wmul@multiplier
 11068  0339  0832               	movf	??_Load_Main+1,w
 11069  033A  00A1               	movwf	___wmul@multiplier+1
 11070  033B  3032               	movlw	50
 11071  033C  00A2               	movwf	___wmul@multiplicand
 11072  033D  3000               	movlw	0
 11073  033E  00A3               	movwf	___wmul@multiplicand+1
 11074  033F  319D  25DD  3182   	fcall	___wmul
 11075  0342  0020               	movlb	0	; select bank0
 11076  0343  0821               	movf	?___wmul+1,w
 11077  0344  0022               	movlb	2	; select bank2
 11078  0345  01C9               	clrf	((_Load1+1)^(0+256)+38)
 11079  0346  07C9               	addwf	((_Load1+1)^(0+256)+38),f
 11080  0347  0020               	movlb	0	; select bank0
 11081  0348  0820               	movf	?___wmul,w
 11082  0349  0022               	movlb	2	; select bank2
 11083  034A  01C8               	clrf	(_Load1^(0+256)+38)
 11084  034B  07C8               	addwf	(_Load1^(0+256)+38),f
 11085  034C                     l10553:	
 11086                           
 11087                           ;OverLoad_B1.c: 140: }
 11088                           ;OverLoad_B1.c: 141: }
 11089                           ;OverLoad_B1.c: 142: }
 11090                           ;OverLoad_B1.c: 143: }
 11091                           ;OverLoad_B1.c: 144: setLoad_AH_AL_Restore();
 11092  034C  319D  2588         	fcall	_setLoad_AH_AL_Restore
 11093                           
 11094                           ;OverLoad_B1.c: 156: }
 11095                           ;OverLoad_B1.c: 157: } else {
 11096  034E  0008               	return
 11097  034F                     l1705:	
 11098                           
 11099                           ;OverLoad_B1.c: 158: if (Load1.GO == 1) {
 11100  034F  1CA2               	btfss	_Load1^(0+256),1
 11101  0350  2B5E               	goto	l1724
 11102                           
 11103                           ;OverLoad_B1.c: 159: if (Load1.LightsON == 0) {
 11104  0351  1922               	btfsc	_Load1^(0+256),2
 11105  0352  2B55               	goto	l10559
 11106                           
 11107                           ;OverLoad_B1.c: 160: Load1.LightsON = 1;
 11108  0353  1522               	bsf	_Load1^(0+256),2
 11109                           
 11110                           ;OverLoad_B1.c: 161: Load1.Safe = 0;
 11111  0354  11A2               	bcf	_Load1^(0+256),3
 11112  0355                     l10559:	
 11113                           
 11114                           ;OverLoad_B1.c: 162: }
 11115                           ;OverLoad_B1.c: 163: if (getTemp_Safe() == 1 && 1 == 1) {
 11116  0355  319A  2228  3182   	fcall	_getTemp_Safe
 11117  0358  3A01               	xorlw	1
 11118  0359  1D03               	skipz
 11119  035A  0008               	return
 11120                           
 11121                           ;OverLoad_B1.c: 164: Load1.ADtoGO = 1;
 11122  035B  0022               	movlb	2	; select bank2
 11123  035C  1622               	bsf	_Load1^(0+256),4
 11124                           
 11125                           ;OverLoad_B1.c: 165: }
 11126                           ;OverLoad_B1.c: 166: } else {
 11127  035D  0008               	return
 11128  035E                     l1724:	
 11129                           
 11130                           ;OverLoad_B1.c: 167: if (Load1.LightsON == 1) {
 11131  035E  1D22               	btfss	_Load1^(0+256),2
 11132  035F  0008               	return
 11133                           
 11134                           ;OverLoad_B1.c: 168: Load1.LightsON = 0;
 11135  0360  1122               	bcf	_Load1^(0+256),2
 11136                           
 11137                           ;OverLoad_B1.c: 169: Load1.Safe = 1;
 11138  0361  15A2               	bsf	_Load1^(0+256),3
 11139                           
 11140                           ;OverLoad_B1.c: 170: Load1.ErrorCount = 0;
 11141  0362  01CD               	clrf	(_Load1^(0+256)+43)
 11142                           
 11143                           ;OverLoad_B1.c: 171: Load1.Count = 0;
 11144  0363  01CC               	clrf	(_Load1^(0+256)+42)
 11145                           
 11146                           ;OverLoad_B1.c: 172: Load1.TotalLoad = 0;
 11147  0364  01A8               	clrf	(_Load1^(0+256)+6)
 11148  0365  01A9               	clrf	((_Load1+1)^(0+256)+6)
 11149                           
 11150                           ;OverLoad_B1.c: 173: Load1.StatusOn = 0;
 11151  0366  1322               	bcf	_Load1^(0+256),6
 11152                           
 11153                           ;OverLoad_B1.c: 174: Load1.StatusOff = 0;
 11154  0367  13A2               	bcf	_Load1^(0+256),7
 11155                           
 11156                           ;OverLoad_B1.c: 175: Load1.AD = 0;
 11157  0368  01BE               	clrf	(_Load1^(0+256)+28)
 11158  0369  01BF               	clrf	((_Load1+1)^(0+256)+28)
 11159                           
 11160                           ;OverLoad_B1.c: 176: setLoad_AH_AL_Restore();
 11161  036A  319D  2588  3182   	fcall	_setLoad_AH_AL_Restore
 11162                           
 11163                           ;OverLoad_B1.c: 180: setDimmerLights_Clear(1, 1);
 11164  036D  0020               	movlb	0	; select bank0
 11165  036E  01A2               	clrf	setDimmerLights_Clear@command
 11166  036F  0AA2               	incf	setDimmerLights_Clear@command,f
 11167  0370  3001               	movlw	1
 11168  0371  319B  2379  3182   	fcall	_setDimmerLights_Clear
 11169                           
 11170                           ;OverLoad_B1.c: 190: setDimmerLights_Clear(2, 1);
 11171  0374  0020               	movlb	0	; select bank0
 11172  0375  01A2               	clrf	setDimmerLights_Clear@command
 11173  0376  0AA2               	incf	setDimmerLights_Clear@command,f
 11174  0377  3002               	movlw	2
 11175  0378  319B  2379         	fcall	_setDimmerLights_Clear
 11176                           
 11177                           ;OverLoad_B1.c: 194: ;;
 11178  037A  0008               	return
 11179  037B                     __end_of_Load_Main:	
 11180                           
 11181                           	psect	text57
 11182  1185                     __ptext57:	
 11183 ;; *************** function _setLoad_Exceptions *****************
 11184 ;; Defined at:
 11185 ;;		line 230 in file "../src/OverLoad_B1.c"
 11186 ;; Parameters:    Size  Location     Type
 11187 ;;  command         1    wreg     unsigned char 
 11188 ;; Auto vars:     Size  Location     Type
 11189 ;;  command         1   16[BANK0 ] unsigned char 
 11190 ;;  i               1   15[BANK0 ] unsigned char 
 11191 ;; Return value:  Size  Location     Type
 11192 ;;		None               void
 11193 ;; Registers used:
 11194 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11195 ;; Tracked objects:
 11196 ;;		On entry : 0/0
 11197 ;;		On exit  : 0/0
 11198 ;;		Unchanged: 0/0
 11199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11201 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11202 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11203 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11204 ;;Total ram usage:        3 bytes
 11205 ;; Hardware stack levels used:    1
 11206 ;; Hardware stack levels required when called:    9
 11207 ;; This function calls:
 11208 ;;		_DimmerLights_Exceptions
 11209 ;;		_setLED
 11210 ;;		_setRF_Enable
 11211 ;;		_setSw_Enable
 11212 ;; This function is called by:
 11213 ;;		_Load_Main
 11214 ;; This function uses a non-reentrant model
 11215 ;;
 11216                           
 11217                           
 11218                           ;psect for function _setLoad_Exceptions
 11219  1185                     _setLoad_Exceptions:	
 11220                           
 11221                           ;incstack = 0
 11222                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11223                           ;setLoad_Exceptions@command stored from wreg
 11224  1185  0020               	movlb	0	; select bank0
 11225  1186  00B0               	movwf	setLoad_Exceptions@command
 11226                           
 11227                           ;OverLoad_B1.c: 231: char i = command == 1 ? 0 : 1;
 11228  1187  0830               	movf	setLoad_Exceptions@command,w
 11229  1188  3A01               	xorlw	1
 11230  1189  3000               	movlw	0
 11231  118A  1D03               	skipz
 11232  118B  3001               	movlw	1
 11233  118C  00AE               	movwf	??_setLoad_Exceptions
 11234  118D  082E               	movf	??_setLoad_Exceptions,w
 11235  118E  00AF               	movwf	setLoad_Exceptions@i
 11236                           
 11237                           ;OverLoad_B1.c: 232: Load1.ERROR = command;
 11238  118F  0830               	movf	setLoad_Exceptions@command,w
 11239  1190  0022               	movlb	2	; select bank2
 11240  1191  12A2               	bcf	_Load1^(0+256),5
 11241  1192  1D03               	skipz
 11242  1193  16A2               	bsf	_Load1^(0+256),5
 11243                           
 11244                           ;OverLoad_B1.c: 233: Load1.Safe = i;
 11245  1194  0020               	movlb	0	; select bank0
 11246  1195  082F               	movf	setLoad_Exceptions@i,w
 11247  1196  0022               	movlb	2	; select bank2
 11248  1197  11A2               	bcf	_Load1^(0+256),3
 11249  1198  1D03               	skipz
 11250  1199  15A2               	bsf	_Load1^(0+256),3
 11251                           
 11252                           ;OverLoad_B1.c: 234: Load1.ErrorStatus = command;
 11253  119A  0020               	movlb	0	; select bank0
 11254  119B  0830               	movf	setLoad_Exceptions@command,w
 11255  119C  00AE               	movwf	??_setLoad_Exceptions
 11256  119D  082E               	movf	??_setLoad_Exceptions,w
 11257  119E  0022               	movlb	2	; select bank2
 11258  119F  00A7               	movwf	(_Load1^(0+256)+5)
 11259                           
 11260                           ;OverLoad_B1.c: 236: if (command == 1) {
 11261  11A0  0020               	movlb	0	; select bank0
 11262  11A1  0830               	movf	setLoad_Exceptions@command,w
 11263  11A2  3A01               	xorlw	1
 11264  11A3  1D03               	skipz
 11265  11A4  29A9               	goto	l1732
 11266                           
 11267                           ;OverLoad_B1.c: 237: DimmerLights_Exceptions(2);
 11268  11A5  3002               	movlw	2
 11269  11A6  3193  23D2  3191   	fcall	_DimmerLights_Exceptions
 11270  11A9                     l1732:	
 11271                           
 11272                           ;OverLoad_B1.c: 241: }
 11273                           ;OverLoad_B1.c: 242: setLED(99, command + 10);
 11274  11A9  0020               	movlb	0	; select bank0
 11275  11AA  0830               	movf	setLoad_Exceptions@command,w
 11276  11AB  3E0A               	addlw	10
 11277  11AC  00AE               	movwf	??_setLoad_Exceptions
 11278  11AD  082E               	movf	??_setLoad_Exceptions,w
 11279  11AE  00A2               	movwf	setLED@command
 11280  11AF  3063               	movlw	99
 11281  11B0  3196  261F  3191   	fcall	_setLED
 11282                           
 11283                           ;OverLoad_B1.c: 244: setSw_Enable(i);
 11284  11B3  0020               	movlb	0	; select bank0
 11285  11B4  082F               	movf	setLoad_Exceptions@i,w
 11286  11B5  319D  25A4  3191   	fcall	_setSw_Enable
 11287                           
 11288                           ;OverLoad_B1.c: 246: setRF_Enable(i);
 11289  11B8  0020               	movlb	0	; select bank0
 11290  11B9  082F               	movf	setLoad_Exceptions@i,w
 11291  11BA  319B  2300         	fcall	_setRF_Enable
 11292  11BC  0008               	return
 11293  11BD                     __end_of_setLoad_Exceptions:	
 11294                           
 11295                           	psect	text58
 11296  1DA4                     __ptext58:	
 11297 ;; *************** function _setSw_Enable *****************
 11298 ;; Defined at:
 11299 ;;		line 91 in file "../src/Switch_B1.c"
 11300 ;; Parameters:    Size  Location     Type
 11301 ;;  command         1    wreg     unsigned char 
 11302 ;; Auto vars:     Size  Location     Type
 11303 ;;  command         1    2[BANK0 ] unsigned char 
 11304 ;; Return value:  Size  Location     Type
 11305 ;;		None               void
 11306 ;; Registers used:
 11307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11308 ;; Tracked objects:
 11309 ;;		On entry : 0/0
 11310 ;;		On exit  : 0/0
 11311 ;;		Unchanged: 0/0
 11312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11316 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11317 ;;Total ram usage:        1 bytes
 11318 ;; Hardware stack levels used:    1
 11319 ;; Hardware stack levels required when called:    6
 11320 ;; This function calls:
 11321 ;;		_SwPointSelect
 11322 ;; This function is called by:
 11323 ;;		_my_MainTimer
 11324 ;;		_setLoad_Exceptions
 11325 ;;		_setOverTemp_Exceptions
 11326 ;; This function uses a non-reentrant model
 11327 ;;
 11328                           
 11329                           
 11330                           ;psect for function _setSw_Enable
 11331  1DA4                     _setSw_Enable:	
 11332                           
 11333                           ;incstack = 0
 11334                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11335                           ;setSw_Enable@command stored from wreg
 11336  1DA4  0020               	movlb	0	; select bank0
 11337  1DA5  00A2               	movwf	setSw_Enable@command
 11338                           
 11339                           ;Switch_B1.c: 94: SwPointSelect(1);
 11340  1DA6  3001               	movlw	1
 11341  1DA7  3187  27EC  319D   	fcall	_SwPointSelect
 11342                           
 11343                           ;Switch_B1.c: 95: Sw->Enable = command;
 11344  1DAA  0020               	movlb	0	; select bank0
 11345  1DAB  086C               	movf	_Sw,w
 11346  1DAC  0086               	movwf	6
 11347  1DAD  3001               	movlw	1	; select bank2/3
 11348  1DAE  0087               	movwf	7
 11349  1DAF  0822               	movf	setSw_Enable@command,w
 11350  1DB0  1001               	bcf	1,0
 11351  1DB1  1D03               	skipz
 11352  1DB2  1401               	bsf	1,0
 11353                           
 11354                           ;Switch_B1.c: 99: SwPointSelect(2);
 11355  1DB3  3002               	movlw	2
 11356  1DB4  3187  27EC         	fcall	_SwPointSelect
 11357                           
 11358                           ;Switch_B1.c: 100: Sw->Enable = command;
 11359  1DB6  0020               	movlb	0	; select bank0
 11360  1DB7  086C               	movf	_Sw,w
 11361  1DB8  0086               	movwf	6
 11362  1DB9  3001               	movlw	1	; select bank2/3
 11363  1DBA  0087               	movwf	7
 11364  1DBB  0822               	movf	setSw_Enable@command,w
 11365  1DBC  1001               	bcf	1,0
 11366  1DBD  1D03               	skipz
 11367  1DBE  1401               	bsf	1,0
 11368  1DBF  0008               	return
 11369  1DC0                     __end_of_setSw_Enable:	
 11370                           
 11371                           	psect	text59
 11372  1B00                     __ptext59:	
 11373 ;; *************** function _setRF_Enable *****************
 11374 ;; Defined at:
 11375 ;;		line 227 in file "../src/RF_Control_B1.c"
 11376 ;; Parameters:    Size  Location     Type
 11377 ;;  command         1    wreg     unsigned char 
 11378 ;; Auto vars:     Size  Location     Type
 11379 ;;  command         1    0[BANK0 ] unsigned char 
 11380 ;; Return value:  Size  Location     Type
 11381 ;;		None               void
 11382 ;; Registers used:
 11383 ;;		wreg, status,2
 11384 ;; Tracked objects:
 11385 ;;		On entry : 0/0
 11386 ;;		On exit  : 0/0
 11387 ;;		Unchanged: 0/0
 11388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11392 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11393 ;;Total ram usage:        1 bytes
 11394 ;; Hardware stack levels used:    1
 11395 ;; Hardware stack levels required when called:    5
 11396 ;; This function calls:
 11397 ;;		Nothing
 11398 ;; This function is called by:
 11399 ;;		_my_MainTimer
 11400 ;;		_setLoad_Exceptions
 11401 ;;		_setOverTemp_Exceptions
 11402 ;; This function uses a non-reentrant model
 11403 ;;
 11404                           
 11405                           
 11406                           ;psect for function _setRF_Enable
 11407  1B00                     _setRF_Enable:	
 11408                           
 11409                           ;incstack = 0
 11410                           ; Regs used in _setRF_Enable: [wreg+status,2]
 11411                           ;setRF_Enable@command stored from wreg
 11412  1B00  0020               	movlb	0	; select bank0
 11413  1B01  00A0               	movwf	setRF_Enable@command
 11414                           
 11415                           ;RF_Control_B1.c: 228: RF1.Enable = command;
 11416  1B02  0820               	movf	setRF_Enable@command,w
 11417  1B03  0021               	movlb	1	; select bank1
 11418  1B04  103C               	bcf	_RF1^(0+128),0
 11419  1B05  1D03               	skipz
 11420  1B06  143C               	bsf	_RF1^(0+128),0
 11421                           
 11422                           ;RF_Control_B1.c: 229: RF1.Learn = 0;
 11423  1B07  133C               	bcf	_RF1^(0+128),6
 11424                           
 11425                           ;RF_Control_B1.c: 230: RF1.TransceiveGO = 0;
 11426  1B08  113C               	bcf	_RF1^(0+128),2
 11427                           
 11428                           ;RF_Control_B1.c: 231: RF1.RxStatus = 0;
 11429  1B09  11BC               	bcf	_RF1^(0+128),3
 11430                           
 11431                           ;RF_Control_B1.c: 232: RF1.ReceiveGO = 0;
 11432  1B0A  10BC               	bcf	_RF1^(0+128),1
 11433                           
 11434                           ;RF_Control_B1.c: 233: RF1.DebounceTime = 0;
 11435  1B0B  01C5               	clrf	(_RF1^(0+128)+9)
 11436                           
 11437                           ;RF_Control_B1.c: 234: RF1.Debounce = 0;
 11438  1B0C  12BC               	bcf	_RF1^(0+128),5
 11439  1B0D  0008               	return
 11440  1B0E                     __end_of_setRF_Enable:	
 11441                           
 11442                           	psect	text60
 11443  13D2                     __ptext60:	
 11444 ;; *************** function _DimmerLights_Exceptions *****************
 11445 ;; Defined at:
 11446 ;;		line 524 in file "../src/Dimmer_B1.c"
 11447 ;; Parameters:    Size  Location     Type
 11448 ;;  status          1    wreg     unsigned char 
 11449 ;; Auto vars:     Size  Location     Type
 11450 ;;  status          1   13[BANK0 ] unsigned char 
 11451 ;; Return value:  Size  Location     Type
 11452 ;;		None               void
 11453 ;; Registers used:
 11454 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11455 ;; Tracked objects:
 11456 ;;		On entry : 0/0
 11457 ;;		On exit  : 0/0
 11458 ;;		Unchanged: 0/0
 11459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11463 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11464 ;;Total ram usage:        1 bytes
 11465 ;; Hardware stack levels used:    1
 11466 ;; Hardware stack levels required when called:    8
 11467 ;; This function calls:
 11468 ;;		_getDimmerLights_StatusFlag
 11469 ;;		_setBuz
 11470 ;;		_setDimmerLights_ERROR
 11471 ;;		_setDimmerLights_TriggerERROR
 11472 ;; This function is called by:
 11473 ;;		_setLoad_Exceptions
 11474 ;;		_setOverTemp_Exceptions
 11475 ;; This function uses a non-reentrant model
 11476 ;;
 11477                           
 11478                           
 11479                           ;psect for function _DimmerLights_Exceptions
 11480  13D2                     _DimmerLights_Exceptions:	
 11481                           
 11482                           ;incstack = 0
 11483                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11484                           ;DimmerLights_Exceptions@status stored from wreg
 11485  13D2  0020               	movlb	0	; select bank0
 11486  13D3  00AD               	movwf	DimmerLights_Exceptions@status
 11487                           
 11488                           ;Dimmer_B1.c: 525: if (status == 1) {
 11489  13D4  082D               	movf	DimmerLights_Exceptions@status,w
 11490  13D5  3A01               	xorlw	1
 11491  13D6  1D03               	skipz
 11492  13D7  2BE8               	goto	l9115
 11493                           
 11494                           ;Dimmer_B1.c: 526: if (getDimmerLights_StatusFlag() == 1) {
 11495  13D8  319B  23A9  3193   	fcall	_getDimmerLights_StatusFlag
 11496  13DB  3A01               	xorlw	1
 11497  13DC  1D03               	skipz
 11498  13DD  2C00               	goto	l9123
 11499                           
 11500                           ;Dimmer_B1.c: 527: setBuz(10, 300);
 11501  13DE  302C               	movlw	44
 11502  13DF  0020               	movlb	0	; select bank0
 11503  13E0  00A9               	movwf	setBuz@time
 11504  13E1  3001               	movlw	1
 11505  13E2  00AA               	movwf	setBuz@time+1
 11506  13E3  300A               	movlw	10
 11507  13E4  3195  256B  3193   	fcall	_setBuz
 11508  13E7  2C00               	goto	l9123
 11509  13E8                     l9115:	
 11510                           ;Dimmer_B1.c: 539: } else if (status == 2)
 11511                           
 11512                           ;Dimmer_B1.c: 534: setDimmerLights_ERROR(2);
 11513                           
 11514                           ;Dimmer_B1.c: 528: }
 11515                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(1);
 11516                           
 11517  13E8  0020               	movlb	0	; select bank0
 11518  13E9  082D               	movf	DimmerLights_Exceptions@status,w
 11519  13EA  3A02               	xorlw	2
 11520  13EB  1D03               	skipz
 11521  13EC  2BFB               	goto	l9121
 11522                           
 11523                           ;Dimmer_B1.c: 540: {
 11524                           ;Dimmer_B1.c: 541: setBuz(5, 300);
 11525  13ED  302C               	movlw	44
 11526  13EE  00A9               	movwf	setBuz@time
 11527  13EF  3001               	movlw	1
 11528  13F0  00AA               	movwf	setBuz@time+1
 11529  13F1  3005               	movlw	5
 11530  13F2  3195  256B  3193   	fcall	_setBuz
 11531                           
 11532                           ;Dimmer_B1.c: 542: setDimmerLights_ERROR(Dimmer->Load);
 11533  13F5  0A76               	incf	_Dimmer,w
 11534  13F6  0086               	movwf	6
 11535  13F7  3001               	movlw	1	; select bank2/3
 11536  13F8  0087               	movwf	7
 11537  13F9  0801               	movf	1,w
 11538  13FA  2C05               	goto	L7
 11539  13FB                     l9121:	
 11540                           ;Dimmer_B1.c: 543: } else if (status == 3)
 11541                           
 11542  13FB  0020               	movlb	0	; select bank0
 11543  13FC  082D               	movf	DimmerLights_Exceptions@status,w
 11544  13FD  3A03               	xorlw	3
 11545  13FE  1D03               	skipz
 11546  13FF  2C08               	goto	l870
 11547  1400                     l9123:	
 11548                           
 11549                           ;Dimmer_B1.c: 544: {
 11550                           ;Dimmer_B1.c: 546: setDimmerLights_ERROR(1);
 11551  1400  3001               	movlw	1
 11552  1401  3194  24BD  3193   	fcall	_setDimmerLights_ERROR
 11553                           
 11554                           ;Dimmer_B1.c: 549: setDimmerLights_ERROR(2);
 11555  1404  3002               	movlw	2
 11556  1405                     L7:	
 11557  1405  3194  24BD  3193   	fcall	_setDimmerLights_ERROR
 11558  1408                     l870:	
 11559                           
 11560                           ;Dimmer_B1.c: 554: }
 11561                           ;Dimmer_B1.c: 557: setDimmerLights_TriggerERROR(1, 0);
 11562  1408  0020               	movlb	0	; select bank0
 11563  1409  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11564  140A  3001               	movlw	1
 11565  140B  319F  2779  3193   	fcall	_setDimmerLights_TriggerERROR
 11566                           
 11567                           ;Dimmer_B1.c: 560: setDimmerLights_TriggerERROR(2, 0);
 11568  140E  0020               	movlb	0	; select bank0
 11569  140F  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11570  1410  3002               	movlw	2
 11571  1411  319F  2779  3193   	fcall	_setDimmerLights_TriggerERROR
 11572                           
 11573                           ;Dimmer_B1.c: 566: if (myMain.SelfTest == 0) {
 11574  1414  0021               	movlb	1	; select bank1
 11575  1415  1A20               	btfsc	_myMain^(0+128),4
 11576  1416  0008               	return
 11577                           
 11578                           ;Dimmer_B1.c: 567: myMain.i = 0;
 11579  1417  102C               	bcf	(_myMain^(0+128)+12),0
 11580                           
 11581                           ;Dimmer_B1.c: 568: myMain.j = 0;
 11582  1418  10AC               	bcf	(_myMain^(0+128)+12),1
 11583                           
 11584                           ;Dimmer_B1.c: 569: myMain.k = 1;
 11585  1419  152C               	bsf	(_myMain^(0+128)+12),2
 11586                           
 11587                           ;Dimmer_B1.c: 570: myMain.Count2 = 0;
 11588  141A  01A8               	clrf	(_myMain^(0+128)+8)
 11589  141B  01A9               	clrf	((_myMain+1)^(0+128)+8)
 11590  141C  0008               	return
 11591  141D                     __end_of_DimmerLights_Exceptions:	
 11592                           
 11593                           	psect	text61
 11594  1F79                     __ptext61:	
 11595 ;; *************** function _setDimmerLights_TriggerERROR *****************
 11596 ;; Defined at:
 11597 ;;		line 593 in file "../src/Dimmer_B1.c"
 11598 ;; Parameters:    Size  Location     Type
 11599 ;;  lights          1    wreg     unsigned char 
 11600 ;;  command         1    2[BANK0 ] unsigned char 
 11601 ;; Auto vars:     Size  Location     Type
 11602 ;;  lights          1    3[BANK0 ] unsigned char 
 11603 ;; Return value:  Size  Location     Type
 11604 ;;		None               void
 11605 ;; Registers used:
 11606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11607 ;; Tracked objects:
 11608 ;;		On entry : 0/0
 11609 ;;		On exit  : 0/0
 11610 ;;		Unchanged: 0/0
 11611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11612 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11615 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;Total ram usage:        2 bytes
 11617 ;; Hardware stack levels used:    1
 11618 ;; Hardware stack levels required when called:    6
 11619 ;; This function calls:
 11620 ;;		_DimmerLightsPointSelect
 11621 ;; This function is called by:
 11622 ;;		_DimmerLights_Exceptions
 11623 ;; This function uses a non-reentrant model
 11624 ;;
 11625                           
 11626                           
 11627                           ;psect for function _setDimmerLights_TriggerERROR
 11628  1F79                     _setDimmerLights_TriggerERROR:	
 11629                           
 11630                           ;incstack = 0
 11631                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11632                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 11633  1F79  0020               	movlb	0	; select bank0
 11634  1F7A  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 11635                           
 11636                           ;Dimmer_B1.c: 595: DimmerLightsPointSelect(lights);
 11637  1F7B  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 11638  1F7C  319C  2424         	fcall	_DimmerLightsPointSelect
 11639                           
 11640                           ;Dimmer_B1.c: 596: DimmerLights->Trigger = command;
 11641  1F7E  0020               	movlb	0	; select bank0
 11642  1F7F  086B               	movf	_DimmerLights,w
 11643  1F80  3E08               	addlw	8
 11644  1F81  0086               	movwf	6
 11645  1F82  3001               	movlw	1	; select bank2/3
 11646  1F83  0087               	movwf	7
 11647  1F84  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11648  1F85  1101               	bcf	1,2
 11649  1F86  1D03               	skipz
 11650  1F87  1501               	bsf	1,2
 11651                           
 11652                           ;Dimmer_B1.c: 597: DimmerLights->Switch = command;
 11653  1F88  086B               	movf	_DimmerLights,w
 11654  1F89  3E08               	addlw	8
 11655  1F8A  0086               	movwf	6
 11656  1F8B  3001               	movlw	1	; select bank2/3
 11657  1F8C  0087               	movwf	7
 11658  1F8D  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11659  1F8E  1081               	bcf	1,1
 11660  1F8F  1D03               	skipz
 11661  1F90  1481               	bsf	1,1
 11662                           
 11663                           ;Dimmer_B1.c: 598: DimmerLights->TriggerAdj = command;
 11664  1F91  086B               	movf	_DimmerLights,w
 11665  1F92  3E08               	addlw	8
 11666  1F93  0086               	movwf	6
 11667  1F94  3001               	movlw	1	; select bank2/3
 11668  1F95  0087               	movwf	7
 11669  1F96  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11670  1F97  1201               	bcf	1,4
 11671  1F98  1D03               	skipz
 11672  1F99  1601               	bsf	1,4
 11673                           
 11674                           ;Dimmer_B1.c: 599: DimmerLights->AdjGo = command;
 11675  1F9A  086B               	movf	_DimmerLights,w
 11676  1F9B  3E08               	addlw	8
 11677  1F9C  0086               	movwf	6
 11678  1F9D  3001               	movlw	1	; select bank2/3
 11679  1F9E  0087               	movwf	7
 11680  1F9F  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11681  1FA0  1181               	bcf	1,3
 11682  1FA1  1D03               	skipz
 11683  1FA2  1581               	bsf	1,3
 11684  1FA3  0008               	return
 11685  1FA4                     __end_of_setDimmerLights_TriggerERROR:	
 11686                           
 11687                           	psect	text62
 11688  14BD                     __ptext62:	
 11689 ;; *************** function _setDimmerLights_ERROR *****************
 11690 ;; Defined at:
 11691 ;;		line 575 in file "../src/Dimmer_B1.c"
 11692 ;; Parameters:    Size  Location     Type
 11693 ;;  lights          1    wreg     unsigned char 
 11694 ;; Auto vars:     Size  Location     Type
 11695 ;;  lights          1    5[BANK0 ] unsigned char 
 11696 ;; Return value:  Size  Location     Type
 11697 ;;		None               void
 11698 ;; Registers used:
 11699 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11700 ;; Tracked objects:
 11701 ;;		On entry : 0/0
 11702 ;;		On exit  : 0/0
 11703 ;;		Unchanged: 0/0
 11704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11708 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11709 ;;Total ram usage:        2 bytes
 11710 ;; Hardware stack levels used:    1
 11711 ;; Hardware stack levels required when called:    7
 11712 ;; This function calls:
 11713 ;;		_DimmerLightsPointSelect
 11714 ;;		_setLED
 11715 ;;		_setLoad_StatusOff
 11716 ;;		_setRFSW_Status
 11717 ;;		_setSw_Status
 11718 ;; This function is called by:
 11719 ;;		_DimmerLights_Exceptions
 11720 ;; This function uses a non-reentrant model
 11721 ;;
 11722                           
 11723                           
 11724                           ;psect for function _setDimmerLights_ERROR
 11725  14BD                     _setDimmerLights_ERROR:	
 11726                           
 11727                           ;incstack = 0
 11728                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11729                           ;setDimmerLights_ERROR@lights stored from wreg
 11730  14BD  0020               	movlb	0	; select bank0
 11731  14BE  00A5               	movwf	setDimmerLights_ERROR@lights
 11732                           
 11733                           ;Dimmer_B1.c: 576: DimmerLightsPointSelect(lights);
 11734  14BF  0825               	movf	setDimmerLights_ERROR@lights,w
 11735  14C0  319C  2424  3194   	fcall	_DimmerLightsPointSelect
 11736                           
 11737                           ;Dimmer_B1.c: 577: if (DimmerLights->Status == 1) {
 11738  14C3  0020               	movlb	0	; select bank0
 11739  14C4  086B               	movf	_DimmerLights,w
 11740  14C5  0086               	movwf	6
 11741  14C6  3001               	movlw	1	; select bank2/3
 11742  14C7  0087               	movwf	7
 11743  14C8  1E81               	btfss	1,5
 11744  14C9  0008               	return
 11745                           
 11746                           ;Dimmer_B1.c: 579: DimmerLights->Signal = 0;
 11747  14CA  086B               	movf	_DimmerLights,w
 11748  14CB  0086               	movwf	6
 11749  14CC  3001               	movlw	1	; select bank2/3
 11750  14CD  0087               	movwf	7
 11751  14CE  1081               	bcf	1,1
 11752                           
 11753                           ;Dimmer_B1.c: 580: DimmerLights->AdjFlag = 0;
 11754  14CF  086B               	movf	_DimmerLights,w
 11755  14D0  0086               	movwf	6
 11756  14D1  3001               	movlw	1	; select bank2/3
 11757  14D2  0087               	movwf	7
 11758  14D3  1181               	bcf	1,3
 11759                           
 11760                           ;Dimmer_B1.c: 581: DimmerLights->AdjStatus = 0;
 11761  14D4  086B               	movf	_DimmerLights,w
 11762  14D5  0086               	movwf	6
 11763  14D6  3001               	movlw	1	; select bank2/3
 11764  14D7  0087               	movwf	7
 11765  14D8  1201               	bcf	1,4
 11766                           
 11767                           ;Dimmer_B1.c: 582: DimmerLights->StatusFlag = 0;
 11768  14D9  086B               	movf	_DimmerLights,w
 11769  14DA  0086               	movwf	6
 11770  14DB  3001               	movlw	1	; select bank2/3
 11771  14DC  0087               	movwf	7
 11772  14DD  1301               	bcf	1,6
 11773                           
 11774                           ;Dimmer_B1.c: 583: DimmerLights->DimmingTimeValue = 7;
 11775  14DE  3007               	movlw	7
 11776  14DF  00A4               	movwf	??_setDimmerLights_ERROR
 11777  14E0  086B               	movf	_DimmerLights,w
 11778  14E1  3E02               	addlw	2
 11779  14E2  0086               	movwf	6
 11780  14E3  3001               	movlw	1	; select bank2/3
 11781  14E4  0087               	movwf	7
 11782  14E5  0824               	movf	??_setDimmerLights_ERROR,w
 11783  14E6  0081               	movwf	1
 11784                           
 11785                           ;Dimmer_B1.c: 584: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11786  14E7  086B               	movf	_DimmerLights,w
 11787  14E8  3E06               	addlw	6
 11788  14E9  0086               	movwf	6
 11789  14EA  3001               	movlw	1	; select bank2/3
 11790  14EB  0087               	movwf	7
 11791  14EC  0801               	movf	1,w
 11792  14ED  00A4               	movwf	??_setDimmerLights_ERROR
 11793  14EE  086B               	movf	_DimmerLights,w
 11794  14EF  3E04               	addlw	4
 11795  14F0  0086               	movwf	6
 11796  14F1  3001               	movlw	1	; select bank2/3
 11797  14F2  0087               	movwf	7
 11798  14F3  0824               	movf	??_setDimmerLights_ERROR,w
 11799  14F4  0081               	movwf	1
 11800                           
 11801                           ;Dimmer_B1.c: 585: Dimmer->Detect = 1;
 11802  14F5  0876               	movf	_Dimmer,w
 11803  14F6  0086               	movwf	6
 11804  14F7  3001               	movlw	1	; select bank2/3
 11805  14F8  0087               	movwf	7
 11806  14F9  1401               	bsf	1,0
 11807                           
 11808                           ;Dimmer_B1.c: 586: setLoad_StatusOff(lights, 1);
 11809  14FA  01A0               	clrf	setLoad_StatusOff@command
 11810  14FB  0AA0               	incf	setLoad_StatusOff@command,f
 11811  14FC  0825               	movf	setDimmerLights_ERROR@lights,w
 11812  14FD  319D  253A  3194   	fcall	_setLoad_StatusOff
 11813                           
 11814                           ;Dimmer_B1.c: 587: setLED(lights, 1);
 11815  1500  0020               	movlb	0	; select bank0
 11816  1501  01A2               	clrf	setLED@command
 11817  1502  0AA2               	incf	setLED@command,f
 11818  1503  0825               	movf	setDimmerLights_ERROR@lights,w
 11819  1504  3196  261F  3194   	fcall	_setLED
 11820                           
 11821                           ;Dimmer_B1.c: 588: setSw_Status(lights, 0);
 11822  1507  0020               	movlb	0	; select bank0
 11823  1508  01A2               	clrf	setSw_Status@command
 11824  1509  0825               	movf	setDimmerLights_ERROR@lights,w
 11825  150A  319B  231D  3194   	fcall	_setSw_Status
 11826                           
 11827                           ;Dimmer_B1.c: 589: setRFSW_Status(lights, 0);
 11828  150D  0020               	movlb	0	; select bank0
 11829  150E  01A2               	clrf	setRFSW_Status@command
 11830  150F  0825               	movf	setDimmerLights_ERROR@lights,w
 11831  1510  319A  22E4         	fcall	_setRFSW_Status
 11832  1512  0008               	return
 11833  1513                     __end_of_setDimmerLights_ERROR:	
 11834                           
 11835                           	psect	text63
 11836  1B79                     __ptext63:	
 11837 ;; *************** function _setDimmerLights_Clear *****************
 11838 ;; Defined at:
 11839 ;;		line 728 in file "../src/Dimmer_B1.c"
 11840 ;; Parameters:    Size  Location     Type
 11841 ;;  lights          1    wreg     unsigned char 
 11842 ;;  command         1    2[BANK0 ] unsigned char 
 11843 ;; Auto vars:     Size  Location     Type
 11844 ;;  lights          1    3[BANK0 ] unsigned char 
 11845 ;; Return value:  Size  Location     Type
 11846 ;;		None               void
 11847 ;; Registers used:
 11848 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11849 ;; Tracked objects:
 11850 ;;		On entry : 0/0
 11851 ;;		On exit  : 0/0
 11852 ;;		Unchanged: 0/0
 11853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11854 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11855 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11857 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11858 ;;Total ram usage:        2 bytes
 11859 ;; Hardware stack levels used:    1
 11860 ;; Hardware stack levels required when called:    6
 11861 ;; This function calls:
 11862 ;;		_DimmerLightsPointSelect
 11863 ;; This function is called by:
 11864 ;;		_Load_Main
 11865 ;; This function uses a non-reentrant model
 11866 ;;
 11867                           
 11868                           
 11869                           ;psect for function _setDimmerLights_Clear
 11870  1B79                     _setDimmerLights_Clear:	
 11871                           
 11872                           ;incstack = 0
 11873                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11874                           ;setDimmerLights_Clear@lights stored from wreg
 11875  1B79  0020               	movlb	0	; select bank0
 11876  1B7A  00A3               	movwf	setDimmerLights_Clear@lights
 11877                           
 11878                           ;Dimmer_B1.c: 730: DimmerLightsPointSelect(lights);
 11879  1B7B  0823               	movf	setDimmerLights_Clear@lights,w
 11880  1B7C  319C  2424         	fcall	_DimmerLightsPointSelect
 11881                           
 11882                           ;Dimmer_B1.c: 731: DimmerLights->Clear = command;
 11883  1B7E  0020               	movlb	0	; select bank0
 11884  1B7F  086B               	movf	_DimmerLights,w
 11885  1B80  3E09               	addlw	9
 11886  1B81  0086               	movwf	6
 11887  1B82  3001               	movlw	1	; select bank2/3
 11888  1B83  0087               	movwf	7
 11889  1B84  0822               	movf	setDimmerLights_Clear@command,w
 11890  1B85  1101               	bcf	1,2
 11891  1B86  1D03               	skipz
 11892  1B87  1501               	bsf	1,2
 11893  1B88  0008               	return
 11894  1B89                     __end_of_setDimmerLights_Clear:	
 11895                           
 11896                           	psect	text64
 11897  1A28                     __ptext64:	
 11898 ;; *************** function _getTemp_Safe *****************
 11899 ;; Defined at:
 11900 ;;		line 21 in file "../src/OverTemperature_B1.c"
 11901 ;; Parameters:    Size  Location     Type
 11902 ;;		None
 11903 ;; Auto vars:     Size  Location     Type
 11904 ;;  result          1    0[BANK0 ] unsigned char 
 11905 ;; Return value:  Size  Location     Type
 11906 ;;                  1    wreg      unsigned char 
 11907 ;; Registers used:
 11908 ;;		wreg, status,2
 11909 ;; Tracked objects:
 11910 ;;		On entry : 0/0
 11911 ;;		On exit  : 0/0
 11912 ;;		Unchanged: 0/0
 11913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11915 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;Total ram usage:        1 bytes
 11919 ;; Hardware stack levels used:    1
 11920 ;; Hardware stack levels required when called:    5
 11921 ;; This function calls:
 11922 ;;		Nothing
 11923 ;; This function is called by:
 11924 ;;		_Load_Main
 11925 ;; This function uses a non-reentrant model
 11926 ;;
 11927                           
 11928                           
 11929                           ;psect for function _getTemp_Safe
 11930  1A28                     _getTemp_Safe:	
 11931                           
 11932                           ;OverTemperature_B1.c: 22: char result = Temp.Safe;
 11933                           
 11934                           ;incstack = 0
 11935                           ; Regs used in _getTemp_Safe: [wreg+status,2]
 11936  1A28  3000               	movlw	0
 11937  1A29  0021               	movlb	1	; select bank1
 11938  1A2A  1A57               	btfsc	_Temp^(0+128),4
 11939  1A2B  3001               	movlw	1
 11940  1A2C  0020               	movlb	0	; select bank0
 11941  1A2D  00A0               	movwf	getTemp_Safe@result
 11942                           
 11943                           ;OverTemperature_B1.c: 23: return result;
 11944  1A2E  0820               	movf	getTemp_Safe@result,w
 11945  1A2F  0008               	return
 11946  1A30                     __end_of_getTemp_Safe:	
 11947                           
 11948                           	psect	text65
 11949  1DDD                     __ptext65:	
 11950 ;; *************** function ___wmul *****************
 11951 ;; Defined at:
 11952 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11953 ;; Parameters:    Size  Location     Type
 11954 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11955 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11956 ;; Auto vars:     Size  Location     Type
 11957 ;;  product         2    4[BANK0 ] unsigned int 
 11958 ;; Return value:  Size  Location     Type
 11959 ;;                  2    0[BANK0 ] unsigned int 
 11960 ;; Registers used:
 11961 ;;		wreg, status,2, status,0
 11962 ;; Tracked objects:
 11963 ;;		On entry : 0/0
 11964 ;;		On exit  : 0/0
 11965 ;;		Unchanged: 0/0
 11966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11967 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11968 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11970 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11971 ;;Total ram usage:        6 bytes
 11972 ;; Hardware stack levels used:    1
 11973 ;; Hardware stack levels required when called:    5
 11974 ;; This function calls:
 11975 ;;		Nothing
 11976 ;; This function is called by:
 11977 ;;		_Load_Main
 11978 ;; This function uses a non-reentrant model
 11979 ;;
 11980                           
 11981                           
 11982                           ;psect for function ___wmul
 11983  1DDD                     ___wmul:	
 11984                           
 11985                           ;incstack = 0
 11986                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11987  1DDD  0020               	movlb	0	; select bank0
 11988  1DDE  01A4               	clrf	___wmul@product
 11989  1DDF  01A5               	clrf	___wmul@product+1
 11990  1DE0                     l10191:	
 11991  1DE0  1C20               	btfss	___wmul@multiplier,0
 11992  1DE1  2DE6               	goto	l2880
 11993  1DE2  0822               	movf	___wmul@multiplicand,w
 11994  1DE3  07A4               	addwf	___wmul@product,f
 11995  1DE4  0823               	movf	___wmul@multiplicand+1,w
 11996  1DE5  3DA5               	addwfc	___wmul@product+1,f
 11997  1DE6                     l2880:	
 11998  1DE6  3001               	movlw	1
 11999  1DE7                     u10875:	
 12000  1DE7  35A2               	lslf	___wmul@multiplicand,f
 12001  1DE8  0DA3               	rlf	___wmul@multiplicand+1,f
 12002  1DE9  0B89               	decfsz	9,f
 12003  1DEA  2DE7               	goto	u10875
 12004  1DEB  3001               	movlw	1
 12005  1DEC                     u10885:	
 12006  1DEC  36A1               	lsrf	___wmul@multiplier+1,f
 12007  1DED  0CA0               	rrf	___wmul@multiplier,f
 12008  1DEE  0B89               	decfsz	9,f
 12009  1DEF  2DEC               	goto	u10885
 12010  1DF0  0821               	movf	___wmul@multiplier+1,w
 12011  1DF1  0420               	iorwf	___wmul@multiplier,w
 12012  1DF2  1D03               	skipz
 12013  1DF3  2DE0               	goto	l10191
 12014  1DF4  0825               	movf	___wmul@product+1,w
 12015  1DF5  01A1               	clrf	?___wmul+1
 12016  1DF6  07A1               	addwf	?___wmul+1,f
 12017  1DF7  0824               	movf	___wmul@product,w
 12018  1DF8  01A0               	clrf	?___wmul
 12019  1DF9  07A0               	addwf	?___wmul,f
 12020  1DFA  0008               	return
 12021  1DFB                     __end_of___wmul:	
 12022                           
 12023                           	psect	text66
 12024  114E                     __ptext66:	
 12025 ;; *************** function ___lwdiv *****************
 12026 ;; Defined at:
 12027 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 12028 ;; Parameters:    Size  Location     Type
 12029 ;;  divisor         2    0[BANK0 ] unsigned int 
 12030 ;;  dividend        2    2[BANK0 ] unsigned int 
 12031 ;; Auto vars:     Size  Location     Type
 12032 ;;  quotient        2    6[BANK0 ] unsigned int 
 12033 ;;  counter         1    5[BANK0 ] unsigned char 
 12034 ;; Return value:  Size  Location     Type
 12035 ;;                  2    0[BANK0 ] unsigned int 
 12036 ;; Registers used:
 12037 ;;		wreg, status,2, status,0
 12038 ;; Tracked objects:
 12039 ;;		On entry : 0/0
 12040 ;;		On exit  : 0/0
 12041 ;;		Unchanged: 0/0
 12042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12043 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12044 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12047 ;;Total ram usage:        8 bytes
 12048 ;; Hardware stack levels used:    1
 12049 ;; Hardware stack levels required when called:    5
 12050 ;; This function calls:
 12051 ;;		Nothing
 12052 ;; This function is called by:
 12053 ;;		_Load_Main
 12054 ;; This function uses a non-reentrant model
 12055 ;;
 12056                           
 12057                           
 12058                           ;psect for function ___lwdiv
 12059  114E                     ___lwdiv:	
 12060                           
 12061                           ;incstack = 0
 12062                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12063  114E  0020               	movlb	0	; select bank0
 12064  114F  01A6               	clrf	___lwdiv@quotient
 12065  1150  01A7               	clrf	___lwdiv@quotient+1
 12066  1151  0821               	movf	___lwdiv@divisor+1,w
 12067  1152  0420               	iorwf	___lwdiv@divisor,w
 12068  1153  1903               	skipnz
 12069  1154  297E               	goto	l10223
 12070  1155  01A5               	clrf	___lwdiv@counter
 12071  1156  0AA5               	incf	___lwdiv@counter,f
 12072  1157                     l10211:	
 12073  1157  1BA1               	btfsc	___lwdiv@divisor+1,7
 12074  1158  2963               	goto	l10213
 12075  1159  3001               	movlw	1
 12076  115A                     u10915:	
 12077  115A  35A0               	lslf	___lwdiv@divisor,f
 12078  115B  0DA1               	rlf	___lwdiv@divisor+1,f
 12079  115C  0B89               	decfsz	9,f
 12080  115D  295A               	goto	u10915
 12081  115E  3001               	movlw	1
 12082  115F  00A4               	movwf	??___lwdiv
 12083  1160  0824               	movf	??___lwdiv,w
 12084  1161  07A5               	addwf	___lwdiv@counter,f
 12085  1162  2957               	goto	l10211
 12086  1163                     l10213:	
 12087  1163  3001               	movlw	1
 12088  1164                     u10935:	
 12089  1164  35A6               	lslf	___lwdiv@quotient,f
 12090  1165  0DA7               	rlf	___lwdiv@quotient+1,f
 12091  1166  0B89               	decfsz	9,f
 12092  1167  2964               	goto	u10935
 12093  1168  0821               	movf	___lwdiv@divisor+1,w
 12094  1169  0223               	subwf	___lwdiv@dividend+1,w
 12095  116A  1D03               	skipz
 12096  116B  296E               	goto	u10945
 12097  116C  0820               	movf	___lwdiv@divisor,w
 12098  116D  0222               	subwf	___lwdiv@dividend,w
 12099  116E                     u10945:	
 12100  116E  1C03               	skipc
 12101  116F  2975               	goto	l10219
 12102  1170  0820               	movf	___lwdiv@divisor,w
 12103  1171  02A2               	subwf	___lwdiv@dividend,f
 12104  1172  0821               	movf	___lwdiv@divisor+1,w
 12105  1173  3BA3               	subwfb	___lwdiv@dividend+1,f
 12106  1174  1426               	bsf	___lwdiv@quotient,0
 12107  1175                     l10219:	
 12108  1175  3001               	movlw	1
 12109  1176                     u10955:	
 12110  1176  36A1               	lsrf	___lwdiv@divisor+1,f
 12111  1177  0CA0               	rrf	___lwdiv@divisor,f
 12112  1178  0B89               	decfsz	9,f
 12113  1179  2976               	goto	u10955
 12114  117A  3001               	movlw	1
 12115  117B  02A5               	subwf	___lwdiv@counter,f
 12116  117C  1D03               	btfss	3,2
 12117  117D  2963               	goto	l10213
 12118  117E                     l10223:	
 12119  117E  0827               	movf	___lwdiv@quotient+1,w
 12120  117F  01A1               	clrf	?___lwdiv+1
 12121  1180  07A1               	addwf	?___lwdiv+1,f
 12122  1181  0826               	movf	___lwdiv@quotient,w
 12123  1182  01A0               	clrf	?___lwdiv
 12124  1183  07A0               	addwf	?___lwdiv,f
 12125  1184  0008               	return
 12126  1185                     __end_of___lwdiv:	
 12127                           
 12128                           	psect	text67
 12129  19EA                     __ptext67:	
 12130 ;; *************** function _Load_Initialization *****************
 12131 ;; Defined at:
 12132 ;;		line 9 in file "../src/OverLoad_B1.c"
 12133 ;; Parameters:    Size  Location     Type
 12134 ;;		None
 12135 ;; Auto vars:     Size  Location     Type
 12136 ;;		None
 12137 ;; Return value:  Size  Location     Type
 12138 ;;		None               void
 12139 ;; Registers used:
 12140 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12141 ;; Tracked objects:
 12142 ;;		On entry : 0/0
 12143 ;;		On exit  : 0/0
 12144 ;;		Unchanged: 0/0
 12145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;Total ram usage:        0 bytes
 12151 ;; Hardware stack levels used:    1
 12152 ;; Hardware stack levels required when called:    6
 12153 ;; This function calls:
 12154 ;;		_setLoad_AH_AL_Restore
 12155 ;; This function is called by:
 12156 ;;		_main
 12157 ;; This function uses a non-reentrant model
 12158 ;;
 12159                           
 12160                           
 12161                           ;psect for function _Load_Initialization
 12162  19EA                     _Load_Initialization:	
 12163                           
 12164                           ;OverLoad_B1.c: 10: Load1.Safe = 1;
 12165                           
 12166                           ;incstack = 0
 12167                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12168  19EA  0022               	movlb	2	; select bank2
 12169  19EB  15A2               	bsf	_Load1^(0+256),3
 12170                           
 12171                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12172  19EC  319D  2588         	fcall	_setLoad_AH_AL_Restore
 12173  19EE  0008               	return
 12174  19EF                     __end_of_Load_Initialization:	
 12175                           
 12176                           	psect	text68
 12177  1D88                     __ptext68:	
 12178 ;; *************** function _setLoad_AH_AL_Restore *****************
 12179 ;; Defined at:
 12180 ;;		line 319 in file "../src/OverLoad_B1.c"
 12181 ;; Parameters:    Size  Location     Type
 12182 ;;		None
 12183 ;; Auto vars:     Size  Location     Type
 12184 ;;  i               1    1[BANK0 ] unsigned char 
 12185 ;; Return value:  Size  Location     Type
 12186 ;;		None               void
 12187 ;; Registers used:
 12188 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12189 ;; Tracked objects:
 12190 ;;		On entry : 0/0
 12191 ;;		On exit  : 0/0
 12192 ;;		Unchanged: 0/0
 12193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12197 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12198 ;;Total ram usage:        2 bytes
 12199 ;; Hardware stack levels used:    1
 12200 ;; Hardware stack levels required when called:    5
 12201 ;; This function calls:
 12202 ;;		Nothing
 12203 ;; This function is called by:
 12204 ;;		_Load_Initialization
 12205 ;;		_Load_Main
 12206 ;; This function uses a non-reentrant model
 12207 ;;
 12208                           
 12209                           
 12210                           ;psect for function _setLoad_AH_AL_Restore
 12211  1D88                     _setLoad_AH_AL_Restore:	
 12212                           
 12213                           ;OverLoad_B1.c: 320: char i;
 12214                           ;OverLoad_B1.c: 321: for (i = 0; i < 5; i++) {
 12215                           
 12216                           ;incstack = 0
 12217                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12218  1D88  0020               	movlb	0	; select bank0
 12219  1D89  01A1               	clrf	setLoad_AH_AL_Restore@i
 12220  1D8A                     L8:	
 12221  1D8A  3005               	movlw	5
 12222  1D8B  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12223  1D8C  1803               	btfsc	3,0
 12224  1D8D  0008               	return
 12225                           
 12226                           ;OverLoad_B1.c: 322: Load1.AH[i] = 0;
 12227  1D8E  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12228  1D8F  3E2A               	addlw	(_Load1+8)& (0+255)
 12229  1D90  0086               	movwf	6
 12230  1D91  3001               	movlw	1	; select bank2/3
 12231  1D92  0087               	movwf	7
 12232  1D93  3000               	movlw	0
 12233  1D94  3FC0               	movwi [0]fsr1
 12234  1D95  3FC1               	movwi [1]fsr1
 12235                           
 12236                           ;OverLoad_B1.c: 323: Load1.AL[i] = 0xffff;
 12237  1D96  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12238  1D97  3E34               	addlw	(_Load1+18)& (0+255)
 12239  1D98  0086               	movwf	6
 12240  1D99  3001               	movlw	1	; select bank2/3
 12241  1D9A  0087               	movwf	7
 12242  1D9B  30FF               	movlw	255
 12243  1D9C  3FC0               	movwi [0]fsr1
 12244  1D9D  30FF               	movlw	255
 12245  1D9E  3FC1               	movwi [1]fsr1
 12246  1D9F  3001               	movlw	1
 12247  1DA0  00A0               	movwf	??_setLoad_AH_AL_Restore
 12248  1DA1  0820               	movf	??_setLoad_AH_AL_Restore,w
 12249  1DA2  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12250  1DA3  2D8A               	goto	L8
 12251  1DA4                     __end_of_setLoad_AH_AL_Restore:	
 12252                           
 12253                           	psect	text69
 12254  1AB2                     __ptext69:	
 12255 ;; *************** function _LED_Main *****************
 12256 ;; Defined at:
 12257 ;;		line 47 in file "../src/LED_B1.c"
 12258 ;; Parameters:    Size  Location     Type
 12259 ;;		None
 12260 ;; Auto vars:     Size  Location     Type
 12261 ;;		None
 12262 ;; Return value:  Size  Location     Type
 12263 ;;		None               void
 12264 ;; Registers used:
 12265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12266 ;; Tracked objects:
 12267 ;;		On entry : 0/0
 12268 ;;		On exit  : 0/0
 12269 ;;		Unchanged: 0/0
 12270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12275 ;;Total ram usage:        0 bytes
 12276 ;; Hardware stack levels used:    1
 12277 ;; Hardware stack levels required when called:    7
 12278 ;; This function calls:
 12279 ;;		_setLED_Main
 12280 ;; This function is called by:
 12281 ;;		_main
 12282 ;; This function uses a non-reentrant model
 12283 ;;
 12284                           
 12285                           
 12286                           ;psect for function _LED_Main
 12287  1AB2                     _LED_Main:	
 12288                           
 12289                           ;LED_B1.c: 49: setLED_Main(1);
 12290                           
 12291                           ;incstack = 0
 12292                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12293  1AB2  3001               	movlw	1
 12294  1AB3  3192  2236  319A   	fcall	_setLED_Main
 12295                           
 12296                           ;LED_B1.c: 52: setLED_Main(2);
 12297  1AB6  3002               	movlw	2
 12298  1AB7  3192  2236  319A   	fcall	_setLED_Main
 12299                           
 12300                           ;LED_B1.c: 58: setLED_Main(99);
 12301  1ABA  3063               	movlw	99
 12302  1ABB  3192  2236         	fcall	_setLED_Main
 12303  1ABD  0008               	return
 12304  1ABE                     __end_of_LED_Main:	
 12305                           
 12306                           	psect	text70
 12307  1236                     __ptext70:	
 12308 ;; *************** function _setLED_Main *****************
 12309 ;; Defined at:
 12310 ;;		line 192 in file "../src/LED_B1.c"
 12311 ;; Parameters:    Size  Location     Type
 12312 ;;  led             1    wreg     unsigned char 
 12313 ;; Auto vars:     Size  Location     Type
 12314 ;;  led             1    4[BANK0 ] unsigned char 
 12315 ;; Return value:  Size  Location     Type
 12316 ;;		None               void
 12317 ;; Registers used:
 12318 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12319 ;; Tracked objects:
 12320 ;;		On entry : 0/0
 12321 ;;		On exit  : 0/0
 12322 ;;		Unchanged: 0/0
 12323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12326 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12327 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12328 ;;Total ram usage:        3 bytes
 12329 ;; Hardware stack levels used:    1
 12330 ;; Hardware stack levels required when called:    6
 12331 ;; This function calls:
 12332 ;;		_LedPointSelect
 12333 ;; This function is called by:
 12334 ;;		_LED_Main
 12335 ;; This function uses a non-reentrant model
 12336 ;;
 12337                           
 12338                           
 12339                           ;psect for function _setLED_Main
 12340  1236                     _setLED_Main:	
 12341                           
 12342                           ;incstack = 0
 12343                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12344                           ;setLED_Main@led stored from wreg
 12345  1236  0020               	movlb	0	; select bank0
 12346  1237  00A4               	movwf	setLED_Main@led
 12347                           
 12348                           ;LED_B1.c: 193: LedPointSelect(led);
 12349  1238  0824               	movf	setLED_Main@led,w
 12350  1239  319D  25C0  3192   	fcall	_LedPointSelect
 12351                           
 12352                           ;LED_B1.c: 194: if (LED->GO == 1) {
 12353  123C  0878               	movf	_LED,w
 12354  123D  0086               	movwf	6
 12355  123E  3001               	movlw	1	; select bank2/3
 12356  123F  0087               	movwf	7
 12357  1240  1C81               	btfss	1,1
 12358  1241  0008               	return
 12359                           
 12360                           ;LED_B1.c: 195: LED->Time++;
 12361  1242  0A78               	incf	_LED,w
 12362  1243  0086               	movwf	6
 12363  1244  3001               	movlw	1	; select bank2/3
 12364  1245  0087               	movwf	7
 12365  1246  3001               	movlw	1
 12366  1247  0781               	addwf	1,f
 12367  1248  3141               	addfsr 1,1
 12368  1249  1803               	skipnc
 12369  124A  0A81               	incf	1,f
 12370                           
 12371                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 12372  124B  0A78               	incf	_LED,w
 12373  124C  0086               	movwf	6
 12374  124D  3001               	movlw	1	; select bank2/3
 12375  124E  0087               	movwf	7
 12376  124F  3F40               	moviw [0]fsr1
 12377  1250  0020               	movlb	0	; select bank0
 12378  1251  00A2               	movwf	??_setLED_Main
 12379  1252  3F41               	moviw [1]fsr1
 12380  1253  00A3               	movwf	??_setLED_Main+1
 12381  1254  3000               	movlw	0
 12382  1255  0223               	subwf	??_setLED_Main+1,w
 12383  1256  3032               	movlw	50
 12384  1257  1903               	skipnz
 12385  1258  0222               	subwf	??_setLED_Main,w
 12386  1259  1C03               	skipc
 12387  125A  0008               	return
 12388                           
 12389                           ;LED_B1.c: 197: LED->Time = 0;
 12390  125B  0A78               	incf	_LED,w
 12391  125C  0086               	movwf	6
 12392  125D  3001               	movlw	1	; select bank2/3
 12393  125E  0087               	movwf	7
 12394  125F  3000               	movlw	0
 12395  1260  3FC0               	movwi [0]fsr1
 12396  1261  3FC1               	movwi [1]fsr1
 12397                           
 12398                           ;LED_B1.c: 199: if (led == 1) {
 12399  1262  0824               	movf	setLED_Main@led,w
 12400  1263  3A01               	xorlw	1
 12401  1264  1D03               	skipz
 12402  1265  2A69               	goto	l9773
 12403                           
 12404                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 12405  1266  3008               	movlw	8
 12406  1267  068C               	xorwf	12,f
 12407                           
 12408                           ;LED_B1.c: 201: }
 12409  1268  0008               	return
 12410  1269                     l9773:	
 12411                           
 12412                           ;LED_B1.c: 204: else if (led == 2) {
 12413  1269  0824               	movf	setLED_Main@led,w
 12414  126A  3A02               	xorlw	2
 12415  126B  1D03               	skipz
 12416  126C  2A70               	goto	l9777
 12417                           
 12418                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 12419  126D  3080               	movlw	128
 12420  126E  068E               	xorwf	14,f
 12421                           
 12422                           ;LED_B1.c: 206: }
 12423  126F  0008               	return
 12424  1270                     l9777:	
 12425                           
 12426                           ;LED_B1.c: 214: else if (led == 99) {
 12427  1270  0824               	movf	setLED_Main@led,w
 12428  1271  3A63               	xorlw	99
 12429  1272  1D03               	skipz
 12430  1273  0008               	return
 12431                           
 12432                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 12433  1274  3020               	movlw	32
 12434  1275  068D               	xorwf	13,f
 12435  1276  0008               	return
 12436  1277                     __end_of_setLED_Main:	
 12437                           
 12438                           	psect	text71
 12439  1AA6                     __ptext71:	
 12440 ;; *************** function _LED_Initialization *****************
 12441 ;; Defined at:
 12442 ;;		line 31 in file "../src/LED_B1.c"
 12443 ;; Parameters:    Size  Location     Type
 12444 ;;		None
 12445 ;; Auto vars:     Size  Location     Type
 12446 ;;		None
 12447 ;; Return value:  Size  Location     Type
 12448 ;;		None               void
 12449 ;; Registers used:
 12450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12451 ;; Tracked objects:
 12452 ;;		On entry : 0/0
 12453 ;;		On exit  : 0/0
 12454 ;;		Unchanged: 0/0
 12455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;Total ram usage:        0 bytes
 12461 ;; Hardware stack levels used:    1
 12462 ;; Hardware stack levels required when called:    8
 12463 ;; This function calls:
 12464 ;;		_setLED_Initialization
 12465 ;; This function is called by:
 12466 ;;		_main
 12467 ;; This function uses a non-reentrant model
 12468 ;;
 12469                           
 12470                           
 12471                           ;psect for function _LED_Initialization
 12472  1AA6                     _LED_Initialization:	
 12473                           
 12474                           ;LED_B1.c: 33: setLED_Initialization(1);
 12475                           
 12476                           ;incstack = 0
 12477                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12478  1AA6  3001               	movlw	1
 12479  1AA7  319B  23BA  319A   	fcall	_setLED_Initialization
 12480                           
 12481                           ;LED_B1.c: 36: setLED_Initialization(2);
 12482  1AAA  3002               	movlw	2
 12483  1AAB  319B  23BA  319A   	fcall	_setLED_Initialization
 12484                           
 12485                           ;LED_B1.c: 42: setLED_Initialization(99);
 12486  1AAE  3063               	movlw	99
 12487  1AAF  319B  23BA         	fcall	_setLED_Initialization
 12488  1AB1  0008               	return
 12489  1AB2                     __end_of_LED_Initialization:	
 12490                           
 12491                           	psect	text72
 12492  1BBA                     __ptext72:	
 12493 ;; *************** function _setLED_Initialization *****************
 12494 ;; Defined at:
 12495 ;;		line 63 in file "../src/LED_B1.c"
 12496 ;; Parameters:    Size  Location     Type
 12497 ;;  led             1    wreg     unsigned char 
 12498 ;; Auto vars:     Size  Location     Type
 12499 ;;  led             1    4[BANK0 ] unsigned char 
 12500 ;; Return value:  Size  Location     Type
 12501 ;;		None               void
 12502 ;; Registers used:
 12503 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12504 ;; Tracked objects:
 12505 ;;		On entry : 0/0
 12506 ;;		On exit  : 0/0
 12507 ;;		Unchanged: 0/0
 12508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12510 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12512 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;Total ram usage:        1 bytes
 12514 ;; Hardware stack levels used:    1
 12515 ;; Hardware stack levels required when called:    7
 12516 ;; This function calls:
 12517 ;;		_LedPointSelect
 12518 ;;		_setLED
 12519 ;; This function is called by:
 12520 ;;		_LED_Initialization
 12521 ;; This function uses a non-reentrant model
 12522 ;;
 12523                           
 12524                           
 12525                           ;psect for function _setLED_Initialization
 12526  1BBA                     _setLED_Initialization:	
 12527                           
 12528                           ;incstack = 0
 12529                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12530                           ;setLED_Initialization@led stored from wreg
 12531  1BBA  0020               	movlb	0	; select bank0
 12532  1BBB  00A4               	movwf	setLED_Initialization@led
 12533                           
 12534                           ;LED_B1.c: 64: LedPointSelect(led);
 12535  1BBC  0824               	movf	setLED_Initialization@led,w
 12536  1BBD  319D  25C0  319B   	fcall	_LedPointSelect
 12537                           
 12538                           ;LED_B1.c: 65: LED->Enable = 1;
 12539  1BC0  0878               	movf	_LED,w
 12540  1BC1  0086               	movwf	6
 12541  1BC2  3001               	movlw	1	; select bank2/3
 12542  1BC3  0087               	movwf	7
 12543  1BC4  1401               	bsf	1,0
 12544                           
 12545                           ;LED_B1.c: 66: setLED(led, 0);
 12546  1BC5  0020               	movlb	0	; select bank0
 12547  1BC6  01A2               	clrf	setLED@command
 12548  1BC7  0824               	movf	setLED_Initialization@led,w
 12549  1BC8  3196  261F         	fcall	_setLED
 12550  1BCA  0008               	return
 12551  1BCB                     __end_of_setLED_Initialization:	
 12552                           
 12553                           	psect	text73
 12554  1E1A                     __ptext73:	
 12555 ;; *************** function _Flash_Memory_Main *****************
 12556 ;; Defined at:
 12557 ;;		line 900 in file "../src/MCU_B1.c"
 12558 ;; Parameters:    Size  Location     Type
 12559 ;;		None
 12560 ;; Auto vars:     Size  Location     Type
 12561 ;;		None
 12562 ;; Return value:  Size  Location     Type
 12563 ;;		None               void
 12564 ;; Registers used:
 12565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12566 ;; Tracked objects:
 12567 ;;		On entry : 0/0
 12568 ;;		On exit  : 0/0
 12569 ;;		Unchanged: 0/0
 12570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12575 ;;Total ram usage:        0 bytes
 12576 ;; Hardware stack levels used:    1
 12577 ;; Hardware stack levels required when called:    8
 12578 ;; This function calls:
 12579 ;;		_Flash_Memory_Modify
 12580 ;; This function is called by:
 12581 ;;		_main
 12582 ;; This function uses a non-reentrant model
 12583 ;;
 12584                           
 12585                           
 12586                           ;psect for function _Flash_Memory_Main
 12587  1E1A                     _Flash_Memory_Main:	
 12588                           
 12589                           ;MCU_B1.c: 901: if (Memory.GO == 1) {
 12590                           
 12591                           ;incstack = 0
 12592                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12593  1E1A  0024               	movlb	4	; select bank4
 12594  1E1B  1CC4               	btfss	(_Memory^(0+512)+36),1
 12595  1E1C  0008               	return
 12596                           
 12597                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 12598  1E1D  1C44               	btfss	(_Memory^(0+512)+36),0
 12599  1E1E  2E37               	goto	l1349
 12600                           
 12601                           ;MCU_B1.c: 903: Memory.Time++;
 12602  1E1F  3001               	movlw	1
 12603  1E20  07C2               	addwf	(_Memory^(0+512)+34),f
 12604  1E21  3000               	movlw	0
 12605  1E22  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12606                           
 12607                           ;MCU_B1.c: 904: if (Memory.Time == 25)
 12608  1E23  3022               	movlw	34
 12609  1E24  3E20               	addlw	_Memory& (0+255)
 12610  1E25  0086               	movwf	6
 12611  1E26  3002               	movlw	2	; select bank4/5
 12612  1E27  0087               	movwf	7
 12613  1E28  3F40               	moviw [0]fsr1
 12614  1E29  3A19               	xorlw	25
 12615  1E2A  1D03               	skipz
 12616  1E2B  2E2E               	goto	u11105
 12617  1E2C  3F41               	moviw [1]fsr1
 12618  1E2D  3A00               	xorlw	0
 12619  1E2E                     u11105:	
 12620  1E2E  1D03               	skipz
 12621  1E2F  0008               	return
 12622                           
 12623                           ;MCU_B1.c: 905: {
 12624                           ;MCU_B1.c: 906: Memory.Time = 0;
 12625  1E30  01C2               	clrf	(_Memory^(0+512)+34)
 12626  1E31  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12627                           
 12628                           ;MCU_B1.c: 907: Memory.Modify = 0;
 12629  1E32  1044               	bcf	(_Memory^(0+512)+36),0
 12630                           
 12631                           ;MCU_B1.c: 908: Memory.GO = 0;
 12632  1E33  10C4               	bcf	(_Memory^(0+512)+36),1
 12633                           
 12634                           ;MCU_B1.c: 909: Flash_Memory_Modify();
 12635  1E34  3192  22FE         	fcall	_Flash_Memory_Modify
 12636                           
 12637                           ;MCU_B1.c: 910: }
 12638                           ;MCU_B1.c: 911: } else {
 12639  1E36  0008               	return
 12640  1E37                     l1349:	
 12641                           
 12642                           ;MCU_B1.c: 912: Memory.GO = 0;
 12643  1E37  10C4               	bcf	(_Memory^(0+512)+36),1
 12644  1E38  0008               	return
 12645  1E39                     __end_of_Flash_Memory_Main:	
 12646                           
 12647                           	psect	text74
 12648  12FE                     __ptext74:	
 12649 ;; *************** function _Flash_Memory_Modify *****************
 12650 ;; Defined at:
 12651 ;;		line 969 in file "../src/MCU_B1.c"
 12652 ;; Parameters:    Size  Location     Type
 12653 ;;		None
 12654 ;; Auto vars:     Size  Location     Type
 12655 ;;  i               1    5[BANK0 ] unsigned char 
 12656 ;; Return value:  Size  Location     Type
 12657 ;;		None               void
 12658 ;; Registers used:
 12659 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12660 ;; Tracked objects:
 12661 ;;		On entry : 0/0
 12662 ;;		On exit  : 0/0
 12663 ;;		Unchanged: 0/0
 12664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;Total ram usage:        2 bytes
 12670 ;; Hardware stack levels used:    1
 12671 ;; Hardware stack levels required when called:    7
 12672 ;; This function calls:
 12673 ;;		_Flash_Memory_Erasing
 12674 ;;		_Flash_Memory_Read
 12675 ;;		_Flash_Memory_Write
 12676 ;; This function is called by:
 12677 ;;		_Flash_Memory_Main
 12678 ;; This function uses a non-reentrant model
 12679 ;;
 12680                           
 12681                           
 12682                           ;psect for function _Flash_Memory_Modify
 12683  12FE                     _Flash_Memory_Modify:	
 12684                           
 12685                           ;MCU_B1.c: 970: char i = 0;
 12686                           
 12687                           ;incstack = 0
 12688                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12689  12FE  0020               	movlb	0	; select bank0
 12690  12FF  01A5               	clrf	Flash_Memory_Modify@i
 12691                           
 12692                           ;MCU_B1.c: 971: for (i = 0; i < 32; i++) {
 12693  1300  01A5               	clrf	Flash_Memory_Modify@i
 12694  1301  3020               	movlw	32
 12695  1302  0225               	subwf	Flash_Memory_Modify@i,w
 12696  1303  1803               	btfsc	3,0
 12697  1304  2B1A               	goto	l9857
 12698  1305                     l9851:	
 12699                           
 12700                           ;MCU_B1.c: 972: Memory.Data[i] = Flash_Memory_Read(i);
 12701  1305  0825               	movf	Flash_Memory_Modify@i,w
 12702  1306  3190  2067  3192   	fcall	_Flash_Memory_Read
 12703  1309  0020               	movlb	0	; select bank0
 12704  130A  00A4               	movwf	??_Flash_Memory_Modify
 12705  130B  0825               	movf	Flash_Memory_Modify@i,w
 12706  130C  3E20               	addlw	_Memory& (0+255)
 12707  130D  0086               	movwf	6
 12708  130E  3002               	movlw	2	; select bank4/5
 12709  130F  0087               	movwf	7
 12710  1310  0824               	movf	??_Flash_Memory_Modify,w
 12711  1311  0081               	movwf	1
 12712  1312  3001               	movlw	1
 12713  1313  00A4               	movwf	??_Flash_Memory_Modify
 12714  1314  0824               	movf	??_Flash_Memory_Modify,w
 12715  1315  07A5               	addwf	Flash_Memory_Modify@i,f
 12716  1316  3020               	movlw	32
 12717  1317  0225               	subwf	Flash_Memory_Modify@i,w
 12718  1318  1C03               	skipc
 12719  1319  2B05               	goto	l9851
 12720  131A                     l9857:	
 12721                           
 12722                           ;MCU_B1.c: 973: }
 12723                           ;MCU_B1.c: 974: Memory.Data[0]=product->Data[12];
 12724  131A  086D               	movf	_product,w
 12725  131B  0086               	movwf	6
 12726  131C  3002               	movlw	2	; select bank4/5
 12727  131D  0087               	movwf	7
 12728  131E  3002               	movlw	2	; select bank4/5
 12729  131F  3F4C               	moviw [12]fsr1
 12730  1320  0024               	movlb	4	; select bank4
 12731  1321  00A0               	movwf	_Memory^(0+512)
 12732                           
 12733                           ;MCU_B1.c: 975: Memory.Data[1]=product->Data[13];
 12734  1322  0020               	movlb	0	; select bank0
 12735  1323  086D               	movf	_product,w
 12736  1324  0086               	movwf	6
 12737  1325  3002               	movlw	2	; select bank4/5
 12738  1326  0087               	movwf	7
 12739  1327  3002               	movlw	2	; select bank4/5
 12740  1328  3F4D               	moviw [13]fsr1
 12741  1329  0024               	movlb	4	; select bank4
 12742  132A  00A1               	movwf	(_Memory^(0+512)+1)
 12743                           
 12744                           ;MCU_B1.c: 976: Memory.Data[2]=product->Data[14];
 12745  132B  0020               	movlb	0	; select bank0
 12746  132C  086D               	movf	_product,w
 12747  132D  0086               	movwf	6
 12748  132E  3002               	movlw	2	; select bank4/5
 12749  132F  0087               	movwf	7
 12750  1330  3002               	movlw	2	; select bank4/5
 12751  1331  3F4E               	moviw [14]fsr1
 12752  1332  0024               	movlb	4	; select bank4
 12753  1333  00A2               	movwf	(_Memory^(0+512)+2)
 12754                           
 12755                           ;MCU_B1.c: 982: if (Memory.LoopSave == 1) {
 12756  1334  1D44               	btfss	(_Memory^(0+512)+36),2
 12757  1335  2B3A               	goto	l1371
 12758                           
 12759                           ;MCU_B1.c: 983: Memory.LoopSave = 0;
 12760  1336  1144               	bcf	(_Memory^(0+512)+36),2
 12761                           
 12762                           ;MCU_B1.c: 984: myMain.FirstOpen = 0;
 12763  1337  0021               	movlb	1	; select bank1
 12764  1338  11A0               	bcf	_myMain^(0+128),3
 12765                           
 12766                           ;MCU_B1.c: 985: myMain.First = 0;
 12767  1339  12A0               	bcf	_myMain^(0+128),5
 12768  133A                     l1371:	
 12769                           
 12770                           ;MCU_B1.c: 987: }
 12771                           ;MCU_B1.c: 988: GIE = 0;
 12772  133A  138B               	bcf	11,7	;volatile
 12773                           
 12774                           ;MCU_B1.c: 989: Flash_Memory_Erasing();
 12775  133B  319A  229A  3192   	fcall	_Flash_Memory_Erasing
 12776                           
 12777                           ;MCU_B1.c: 990: Flash_Memory_Write();
 12778  133E  319F  27D1         	fcall	_Flash_Memory_Write
 12779                           
 12780                           ;MCU_B1.c: 991: GIE = 1;
 12781  1340  178B               	bsf	11,7	;volatile
 12782  1341  0008               	return
 12783  1342                     __end_of_Flash_Memory_Modify:	
 12784                           
 12785                           	psect	text75
 12786  1A9A                     __ptext75:	
 12787 ;; *************** function _Flash_Memory_Erasing *****************
 12788 ;; Defined at:
 12789 ;;		line 958 in file "../src/MCU_B1.c"
 12790 ;; Parameters:    Size  Location     Type
 12791 ;;		None
 12792 ;; Auto vars:     Size  Location     Type
 12793 ;;		None
 12794 ;; Return value:  Size  Location     Type
 12795 ;;		None               void
 12796 ;; Registers used:
 12797 ;;		wreg, status,2, status,0, pclath, cstack
 12798 ;; Tracked objects:
 12799 ;;		On entry : 0/0
 12800 ;;		On exit  : 0/0
 12801 ;;		Unchanged: 0/0
 12802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12807 ;;Total ram usage:        0 bytes
 12808 ;; Hardware stack levels used:    1
 12809 ;; Hardware stack levels required when called:    6
 12810 ;; This function calls:
 12811 ;;		_Flash_Memory_Unlock
 12812 ;; This function is called by:
 12813 ;;		_Flash_Memory_Modify
 12814 ;; This function uses a non-reentrant model
 12815 ;;
 12816                           
 12817                           
 12818                           ;psect for function _Flash_Memory_Erasing
 12819  1A9A                     _Flash_Memory_Erasing:	
 12820                           
 12821                           ;MCU_B1.c: 959: CFGS = 0;
 12822                           
 12823                           ;incstack = 0
 12824                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12825  1A9A  0023               	movlb	3	; select bank3
 12826  1A9B  1315               	bcf	21,6	;volatile
 12827                           
 12828                           ;MCU_B1.c: 960: PMADRH = 0x30;
 12829  1A9C  3030               	movlw	48
 12830  1A9D  0092               	movwf	18	;volatile
 12831                           
 12832                           ;MCU_B1.c: 961: PMADRL = 0x00;
 12833  1A9E  0191               	clrf	17	;volatile
 12834                           
 12835                           ;MCU_B1.c: 962: FREE = 1;
 12836  1A9F  1615               	bsf	21,4	;volatile
 12837                           
 12838                           ;MCU_B1.c: 963: WREN = 1;
 12839  1AA0  1515               	bsf	21,2	;volatile
 12840                           
 12841                           ;MCU_B1.c: 964: Flash_Memory_Unlock();
 12842  1AA1  319A  2250         	fcall	_Flash_Memory_Unlock
 12843                           
 12844                           ;MCU_B1.c: 965: WREN = 0;
 12845  1AA3  0023               	movlb	3	; select bank3
 12846  1AA4  1115               	bcf	21,2	;volatile
 12847  1AA5  0008               	return
 12848  1AA6                     __end_of_Flash_Memory_Erasing:	
 12849                           
 12850                           	psect	text76
 12851  069A                     __ptext76:	
 12852 ;; *************** function _Flash_Memory_Initialization *****************
 12853 ;; Defined at:
 12854 ;;		line 859 in file "../src/MCU_B1.c"
 12855 ;; Parameters:    Size  Location     Type
 12856 ;;		None
 12857 ;; Auto vars:     Size  Location     Type
 12858 ;;  i               1   62[BANK0 ] unsigned char 
 12859 ;; Return value:  Size  Location     Type
 12860 ;;		None               void
 12861 ;; Registers used:
 12862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12863 ;; Tracked objects:
 12864 ;;		On entry : 0/0
 12865 ;;		On exit  : 0/0
 12866 ;;		Unchanged: 0/0
 12867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12871 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12872 ;;Total ram usage:        2 bytes
 12873 ;; Hardware stack levels used:    1
 12874 ;; Hardware stack levels required when called:    8
 12875 ;; This function calls:
 12876 ;;		_Flash_Memory_Read
 12877 ;;		_Flash_Memory_Write
 12878 ;;		_setPercentValue
 12879 ;; This function is called by:
 12880 ;;		_main
 12881 ;; This function uses a non-reentrant model
 12882 ;;
 12883                           
 12884                           
 12885                           ;psect for function _Flash_Memory_Initialization
 12886  069A                     _Flash_Memory_Initialization:	
 12887                           
 12888                           ;MCU_B1.c: 860: char i = 0;
 12889                           
 12890                           ;incstack = 0
 12891                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12892  069A  0020               	movlb	0	; select bank0
 12893  069B  01DE               	clrf	Flash_Memory_Initialization@i
 12894                           
 12895                           ;MCU_B1.c: 861: if (Flash_Memory_Read(31) == 0xaa) {
 12896  069C  301F               	movlw	31
 12897  069D  3190  2067  3186   	fcall	_Flash_Memory_Read
 12898  06A0  3AAA               	xorlw	170
 12899  06A1  1D03               	skipz
 12900  06A2  2F0C               	goto	l10305
 12901                           
 12902                           ;MCU_B1.c: 862: product->Data[12] = Flash_Memory_Read(0);
 12903  06A3  3000               	movlw	0
 12904  06A4  3190  2067  3186   	fcall	_Flash_Memory_Read
 12905  06A7  0020               	movlb	0	; select bank0
 12906  06A8  00DD               	movwf	??_Flash_Memory_Initialization
 12907  06A9  086D               	movf	_product,w
 12908  06AA  3E0C               	addlw	12
 12909  06AB  0086               	movwf	6
 12910  06AC  3002               	movlw	2	; select bank4/5
 12911  06AD  0087               	movwf	7
 12912  06AE  085D               	movf	??_Flash_Memory_Initialization,w
 12913  06AF  0081               	movwf	1
 12914                           
 12915                           ;MCU_B1.c: 863: product->Data[13] = Flash_Memory_Read(1);
 12916  06B0  3001               	movlw	1
 12917  06B1  3190  2067  3186   	fcall	_Flash_Memory_Read
 12918  06B4  0020               	movlb	0	; select bank0
 12919  06B5  00DD               	movwf	??_Flash_Memory_Initialization
 12920  06B6  086D               	movf	_product,w
 12921  06B7  3E0D               	addlw	13
 12922  06B8  0086               	movwf	6
 12923  06B9  3002               	movlw	2	; select bank4/5
 12924  06BA  0087               	movwf	7
 12925  06BB  085D               	movf	??_Flash_Memory_Initialization,w
 12926  06BC  0081               	movwf	1
 12927                           
 12928                           ;MCU_B1.c: 864: product->Data[14] = Flash_Memory_Read(2);
 12929  06BD  3002               	movlw	2
 12930  06BE  3190  2067  3186   	fcall	_Flash_Memory_Read
 12931  06C1  0020               	movlb	0	; select bank0
 12932  06C2  00DD               	movwf	??_Flash_Memory_Initialization
 12933  06C3  086D               	movf	_product,w
 12934  06C4  3E0E               	addlw	14
 12935  06C5  0086               	movwf	6
 12936  06C6  3002               	movlw	2	; select bank4/5
 12937  06C7  0087               	movwf	7
 12938  06C8  085D               	movf	??_Flash_Memory_Initialization,w
 12939  06C9  0081               	movwf	1
 12940                           
 12941                           ;MCU_B1.c: 870: i = setPercentValue(((char)((100-60)*0.8)));
 12942  06CA  3020               	movlw	32
 12943  06CB  3193  2342  3186   	fcall	_setPercentValue
 12944  06CE  0020               	movlb	0	; select bank0
 12945  06CF  00DD               	movwf	??_Flash_Memory_Initialization
 12946  06D0  085D               	movf	??_Flash_Memory_Initialization,w
 12947  06D1  00DE               	movwf	Flash_Memory_Initialization@i
 12948                           
 12949                           ;MCU_B1.c: 871: product->Data[21] = i;
 12950  06D2  085E               	movf	Flash_Memory_Initialization@i,w
 12951  06D3  00DD               	movwf	??_Flash_Memory_Initialization
 12952  06D4  086D               	movf	_product,w
 12953  06D5  3E15               	addlw	21
 12954  06D6  0086               	movwf	6
 12955  06D7  3002               	movlw	2	; select bank4/5
 12956  06D8  0087               	movwf	7
 12957  06D9  085D               	movf	??_Flash_Memory_Initialization,w
 12958  06DA  0081               	movwf	1
 12959                           
 12960                           ;MCU_B1.c: 872: product->Data[22] = i;
 12961  06DB  085E               	movf	Flash_Memory_Initialization@i,w
 12962  06DC  00DD               	movwf	??_Flash_Memory_Initialization
 12963  06DD  086D               	movf	_product,w
 12964  06DE  3E16               	addlw	22
 12965  06DF  0086               	movwf	6
 12966  06E0  3002               	movlw	2	; select bank4/5
 12967  06E1  0087               	movwf	7
 12968  06E2  085D               	movf	??_Flash_Memory_Initialization,w
 12969  06E3  0081               	movwf	1
 12970                           
 12971                           ;MCU_B1.c: 873: product->Data[23] = i;
 12972  06E4  085E               	movf	Flash_Memory_Initialization@i,w
 12973  06E5  00DD               	movwf	??_Flash_Memory_Initialization
 12974  06E6  086D               	movf	_product,w
 12975  06E7  3E17               	addlw	23
 12976  06E8  0086               	movwf	6
 12977  06E9  3002               	movlw	2	; select bank4/5
 12978  06EA  0087               	movwf	7
 12979  06EB  085D               	movf	??_Flash_Memory_Initialization,w
 12980  06EC  0081               	movwf	1
 12981                           
 12982                           ;MCU_B1.c: 875: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12983  06ED  086D               	movf	_product,w
 12984  06EE  3E0C               	addlw	12
 12985  06EF  0086               	movwf	6
 12986  06F0  3002               	movlw	2	; select bank4/5
 12987  06F1  0087               	movwf	7
 12988  06F2  0801               	movf	1,w
 12989  06F3  3AFF               	xorlw	255
 12990  06F4  1D03               	skipz
 12991  06F5  0008               	return
 12992  06F6  086D               	movf	_product,w
 12993  06F7  3E0D               	addlw	13
 12994  06F8  0086               	movwf	6
 12995  06F9  3002               	movlw	2	; select bank4/5
 12996  06FA  0087               	movwf	7
 12997  06FB  0801               	movf	1,w
 12998  06FC  3AFF               	xorlw	255
 12999  06FD  1D03               	skipz
 13000  06FE  0008               	return
 13001  06FF  086D               	movf	_product,w
 13002  0700  3E0E               	addlw	14
 13003  0701  0086               	movwf	6
 13004  0702  3002               	movlw	2	; select bank4/5
 13005  0703  0087               	movwf	7
 13006  0704  0801               	movf	1,w
 13007  0705  3AFF               	xorlw	255
 13008  0706  1D03               	skipz
 13009  0707  0008               	return
 13010                           
 13011                           ;MCU_B1.c: 876: myMain.FirstOpen = 1;
 13012  0708  0021               	movlb	1	; select bank1
 13013  0709  15A0               	bsf	_myMain^(0+128),3
 13014                           
 13015                           ;MCU_B1.c: 877: myMain.First = 1;
 13016  070A  16A0               	bsf	_myMain^(0+128),5
 13017                           
 13018                           ;MCU_B1.c: 878: }
 13019                           ;MCU_B1.c: 879: } else {
 13020  070B  0008               	return
 13021  070C                     l10305:	
 13022                           
 13023                           ;MCU_B1.c: 880: i = setPercentValue(((char)((100-60)*0.8)));
 13024  070C  3020               	movlw	32
 13025  070D  3193  2342  3186   	fcall	_setPercentValue
 13026  0710  0020               	movlb	0	; select bank0
 13027  0711  00DD               	movwf	??_Flash_Memory_Initialization
 13028  0712  085D               	movf	??_Flash_Memory_Initialization,w
 13029  0713  00DE               	movwf	Flash_Memory_Initialization@i
 13030                           
 13031                           ;MCU_B1.c: 881: Memory.Data[0]=0xff;
 13032  0714  30FF               	movlw	255
 13033  0715  00DD               	movwf	??_Flash_Memory_Initialization
 13034  0716  085D               	movf	??_Flash_Memory_Initialization,w
 13035  0717  0024               	movlb	4	; select bank4
 13036  0718  00A0               	movwf	_Memory^(0+512)
 13037                           
 13038                           ;MCU_B1.c: 882: Memory.Data[1]=0xff;
 13039  0719  30FF               	movlw	255
 13040  071A  0020               	movlb	0	; select bank0
 13041  071B  00DD               	movwf	??_Flash_Memory_Initialization
 13042  071C  085D               	movf	??_Flash_Memory_Initialization,w
 13043  071D  0024               	movlb	4	; select bank4
 13044  071E  00A1               	movwf	(_Memory^(0+512)+1)
 13045                           
 13046                           ;MCU_B1.c: 883: Memory.Data[2]=0xff;
 13047  071F  30FF               	movlw	255
 13048  0720  0020               	movlb	0	; select bank0
 13049  0721  00DD               	movwf	??_Flash_Memory_Initialization
 13050  0722  085D               	movf	??_Flash_Memory_Initialization,w
 13051  0723  0024               	movlb	4	; select bank4
 13052  0724  00A2               	movwf	(_Memory^(0+512)+2)
 13053                           
 13054                           ;MCU_B1.c: 884: Memory.Data[3]=0xff;
 13055  0725  30FF               	movlw	255
 13056  0726  0020               	movlb	0	; select bank0
 13057  0727  00DD               	movwf	??_Flash_Memory_Initialization
 13058  0728  085D               	movf	??_Flash_Memory_Initialization,w
 13059  0729  0024               	movlb	4	; select bank4
 13060  072A  00A3               	movwf	(_Memory^(0+512)+3)
 13061                           
 13062                           ;MCU_B1.c: 885: Memory.Data[4]=0xff;
 13063  072B  30FF               	movlw	255
 13064  072C  0020               	movlb	0	; select bank0
 13065  072D  00DD               	movwf	??_Flash_Memory_Initialization
 13066  072E  085D               	movf	??_Flash_Memory_Initialization,w
 13067  072F  0024               	movlb	4	; select bank4
 13068  0730  00A4               	movwf	(_Memory^(0+512)+4)
 13069                           
 13070                           ;MCU_B1.c: 886: Memory.Data[5]=0xff;
 13071  0731  30FF               	movlw	255
 13072  0732  0020               	movlb	0	; select bank0
 13073  0733  00DD               	movwf	??_Flash_Memory_Initialization
 13074  0734  085D               	movf	??_Flash_Memory_Initialization,w
 13075  0735  0024               	movlb	4	; select bank4
 13076  0736  00A5               	movwf	(_Memory^(0+512)+5)
 13077                           
 13078                           ;MCU_B1.c: 887: Memory.Data[31]=0xaa;
 13079  0737  30AA               	movlw	170
 13080  0738  0020               	movlb	0	; select bank0
 13081  0739  00DD               	movwf	??_Flash_Memory_Initialization
 13082  073A  085D               	movf	??_Flash_Memory_Initialization,w
 13083  073B  0024               	movlb	4	; select bank4
 13084  073C  00BF               	movwf	(_Memory^(0+512)+31)
 13085                           
 13086                           ;MCU_B1.c: 888: product->Data[21] = i;
 13087  073D  0020               	movlb	0	; select bank0
 13088  073E  085E               	movf	Flash_Memory_Initialization@i,w
 13089  073F  00DD               	movwf	??_Flash_Memory_Initialization
 13090  0740  086D               	movf	_product,w
 13091  0741  3E15               	addlw	21
 13092  0742  0086               	movwf	6
 13093  0743  3002               	movlw	2	; select bank4/5
 13094  0744  0087               	movwf	7
 13095  0745  085D               	movf	??_Flash_Memory_Initialization,w
 13096  0746  0081               	movwf	1
 13097                           
 13098                           ;MCU_B1.c: 889: product->Data[22] = i;
 13099  0747  085E               	movf	Flash_Memory_Initialization@i,w
 13100  0748  00DD               	movwf	??_Flash_Memory_Initialization
 13101  0749  086D               	movf	_product,w
 13102  074A  3E16               	addlw	22
 13103  074B  0086               	movwf	6
 13104  074C  3002               	movlw	2	; select bank4/5
 13105  074D  0087               	movwf	7
 13106  074E  085D               	movf	??_Flash_Memory_Initialization,w
 13107  074F  0081               	movwf	1
 13108                           
 13109                           ;MCU_B1.c: 890: product->Data[23] = i;
 13110  0750  085E               	movf	Flash_Memory_Initialization@i,w
 13111  0751  00DD               	movwf	??_Flash_Memory_Initialization
 13112  0752  086D               	movf	_product,w
 13113  0753  3E17               	addlw	23
 13114  0754  0086               	movwf	6
 13115  0755  3002               	movlw	2	; select bank4/5
 13116  0756  0087               	movwf	7
 13117  0757  085D               	movf	??_Flash_Memory_Initialization,w
 13118  0758  0081               	movwf	1
 13119                           
 13120                           ;MCU_B1.c: 891: GIE = 0;
 13121  0759  138B               	bcf	11,7	;volatile
 13122                           
 13123                           ;MCU_B1.c: 892: Flash_Memory_Write();
 13124  075A  319F  27D1         	fcall	_Flash_Memory_Write
 13125                           
 13126                           ;MCU_B1.c: 893: GIE = 1;
 13127  075C  178B               	bsf	11,7	;volatile
 13128                           
 13129                           ;MCU_B1.c: 894: myMain.FirstOpen = 1;
 13130  075D  0021               	movlb	1	; select bank1
 13131  075E  15A0               	bsf	_myMain^(0+128),3
 13132                           
 13133                           ;MCU_B1.c: 895: myMain.First = 1;
 13134  075F  16A0               	bsf	_myMain^(0+128),5
 13135  0760  0008               	return
 13136  0761                     __end_of_Flash_Memory_Initialization:	
 13137                           
 13138                           	psect	text77
 13139  1FD1                     __ptext77:	
 13140 ;; *************** function _Flash_Memory_Write *****************
 13141 ;; Defined at:
 13142 ;;		line 939 in file "../src/MCU_B1.c"
 13143 ;; Parameters:    Size  Location     Type
 13144 ;;		None
 13145 ;; Auto vars:     Size  Location     Type
 13146 ;;  i               1    1[BANK0 ] unsigned char 
 13147 ;; Return value:  Size  Location     Type
 13148 ;;		None               void
 13149 ;; Registers used:
 13150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13151 ;; Tracked objects:
 13152 ;;		On entry : 0/0
 13153 ;;		On exit  : 0/0
 13154 ;;		Unchanged: 0/0
 13155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;Total ram usage:        2 bytes
 13161 ;; Hardware stack levels used:    1
 13162 ;; Hardware stack levels required when called:    6
 13163 ;; This function calls:
 13164 ;;		_Flash_Memory_Unlock
 13165 ;; This function is called by:
 13166 ;;		_Flash_Memory_Initialization
 13167 ;;		_Flash_Memory_Modify
 13168 ;; This function uses a non-reentrant model
 13169 ;;
 13170                           
 13171                           
 13172                           ;psect for function _Flash_Memory_Write
 13173  1FD1                     _Flash_Memory_Write:	
 13174                           
 13175                           ;MCU_B1.c: 940: char i = 0;
 13176                           
 13177                           ;incstack = 0
 13178                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13179  1FD1  0020               	movlb	0	; select bank0
 13180  1FD2  01A1               	clrf	Flash_Memory_Write@i
 13181                           
 13182                           ;MCU_B1.c: 941: CFGS = 0;
 13183  1FD3  0023               	movlb	3	; select bank3
 13184  1FD4  1315               	bcf	21,6	;volatile
 13185                           
 13186                           ;MCU_B1.c: 942: PMADRH = 0x30;
 13187  1FD5  3030               	movlw	48
 13188  1FD6  0092               	movwf	18	;volatile
 13189                           
 13190                           ;MCU_B1.c: 943: PMDATH = 0;
 13191  1FD7  0194               	clrf	20	;volatile
 13192                           
 13193                           ;MCU_B1.c: 944: FREE = 0;
 13194  1FD8  1215               	bcf	21,4	;volatile
 13195                           
 13196                           ;MCU_B1.c: 945: LWLO = 1;
 13197  1FD9  1695               	bsf	21,5	;volatile
 13198                           
 13199                           ;MCU_B1.c: 946: WREN = 1;
 13200  1FDA  1515               	bsf	21,2	;volatile
 13201                           
 13202                           ;MCU_B1.c: 947: for (i = 0; i < 32; i++) {
 13203  1FDB  0020               	movlb	0	; select bank0
 13204  1FDC  01A1               	clrf	Flash_Memory_Write@i
 13205  1FDD  3020               	movlw	32
 13206  1FDE  0221               	subwf	Flash_Memory_Write@i,w
 13207  1FDF  1803               	btfsc	3,0
 13208  1FE0  2FF9               	goto	l1362
 13209  1FE1                     l9413:	
 13210                           
 13211                           ;MCU_B1.c: 948: PMADRL = i;
 13212  1FE1  0821               	movf	Flash_Memory_Write@i,w
 13213  1FE2  0023               	movlb	3	; select bank3
 13214  1FE3  0091               	movwf	17	;volatile
 13215                           
 13216                           ;MCU_B1.c: 949: PMDATL = Memory.Data[i];
 13217  1FE4  0020               	movlb	0	; select bank0
 13218  1FE5  0821               	movf	Flash_Memory_Write@i,w
 13219  1FE6  3E20               	addlw	_Memory& (0+255)
 13220  1FE7  0086               	movwf	6
 13221  1FE8  3002               	movlw	2	; select bank4/5
 13222  1FE9  0087               	movwf	7
 13223  1FEA  0801               	movf	1,w
 13224  1FEB  0023               	movlb	3	; select bank3
 13225  1FEC  0093               	movwf	19	;volatile
 13226                           
 13227                           ;MCU_B1.c: 950: Flash_Memory_Unlock();
 13228  1FED  319A  2250  319F   	fcall	_Flash_Memory_Unlock
 13229  1FF0  3001               	movlw	1
 13230  1FF1  0020               	movlb	0	; select bank0
 13231  1FF2  00A0               	movwf	??_Flash_Memory_Write
 13232  1FF3  0820               	movf	??_Flash_Memory_Write,w
 13233  1FF4  07A1               	addwf	Flash_Memory_Write@i,f
 13234  1FF5  3020               	movlw	32
 13235  1FF6  0221               	subwf	Flash_Memory_Write@i,w
 13236  1FF7  1C03               	skipc
 13237  1FF8  2FE1               	goto	l9413
 13238  1FF9                     l1362:	
 13239                           
 13240                           ;MCU_B1.c: 951: }
 13241                           ;MCU_B1.c: 952: LWLO = 0;
 13242  1FF9  0023               	movlb	3	; select bank3
 13243  1FFA  1295               	bcf	21,5	;volatile
 13244                           
 13245                           ;MCU_B1.c: 953: Flash_Memory_Unlock();
 13246  1FFB  319A  2250         	fcall	_Flash_Memory_Unlock
 13247                           
 13248                           ;MCU_B1.c: 954: WREN = 0;
 13249  1FFD  0023               	movlb	3	; select bank3
 13250  1FFE  1115               	bcf	21,2	;volatile
 13251  1FFF  0008               	return
 13252  2000                     __end_of_Flash_Memory_Write:	
 13253                           
 13254                           	psect	text78
 13255  1A50                     __ptext78:	
 13256 ;; *************** function _Flash_Memory_Unlock *****************
 13257 ;; Defined at:
 13258 ;;		line 918 in file "../src/MCU_B1.c"
 13259 ;; Parameters:    Size  Location     Type
 13260 ;;		None
 13261 ;; Auto vars:     Size  Location     Type
 13262 ;;		None
 13263 ;; Return value:  Size  Location     Type
 13264 ;;		None               void
 13265 ;; Registers used:
 13266 ;;		wreg
 13267 ;; Tracked objects:
 13268 ;;		On entry : 0/0
 13269 ;;		On exit  : 0/0
 13270 ;;		Unchanged: 0/0
 13271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13276 ;;Total ram usage:        0 bytes
 13277 ;; Hardware stack levels used:    1
 13278 ;; Hardware stack levels required when called:    5
 13279 ;; This function calls:
 13280 ;;		Nothing
 13281 ;; This function is called by:
 13282 ;;		_Flash_Memory_Write
 13283 ;;		_Flash_Memory_Erasing
 13284 ;; This function uses a non-reentrant model
 13285 ;;
 13286                           
 13287                           
 13288                           ;psect for function _Flash_Memory_Unlock
 13289  1A50                     _Flash_Memory_Unlock:	
 13290                           
 13291                           ;MCU_B1.c: 919: PMCON2 = 0x55;
 13292                           
 13293                           ;incstack = 0
 13294                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13295  1A50  3055               	movlw	85
 13296  1A51  0023               	movlb	3	; select bank3
 13297  1A52  0096               	movwf	22	;volatile
 13298                           
 13299                           ;MCU_B1.c: 920: PMCON2 = 0xaa;
 13300  1A53  30AA               	movlw	170
 13301  1A54  0096               	movwf	22	;volatile
 13302                           
 13303                           ;MCU_B1.c: 921: WR = 1;
 13304  1A55  1495               	bsf	21,1	;volatile
 13305                           
 13306                           ;MCU_B1.c: 922: __nop();
 13307  1A56  0000               	nop
 13308                           
 13309                           ;MCU_B1.c: 923: __nop();
 13310  1A57  0000               	nop
 13311  1A58  0008               	return
 13312  1A59                     __end_of_Flash_Memory_Unlock:	
 13313                           
 13314                           	psect	text79
 13315  1067                     __ptext79:	
 13316 ;; *************** function _Flash_Memory_Read *****************
 13317 ;; Defined at:
 13318 ;;		line 927 in file "../src/MCU_B1.c"
 13319 ;; Parameters:    Size  Location     Type
 13320 ;;  address         1    wreg     unsigned char 
 13321 ;; Auto vars:     Size  Location     Type
 13322 ;;  address         1    2[BANK0 ] unsigned char 
 13323 ;;  ret             1    3[BANK0 ] unsigned char 
 13324 ;;  i               1    1[BANK0 ] unsigned char 
 13325 ;; Return value:  Size  Location     Type
 13326 ;;                  1    wreg      unsigned char 
 13327 ;; Registers used:
 13328 ;;		wreg, status,2
 13329 ;; Tracked objects:
 13330 ;;		On entry : 0/0
 13331 ;;		On exit  : 0/0
 13332 ;;		Unchanged: 0/0
 13333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13335 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13337 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13338 ;;Total ram usage:        4 bytes
 13339 ;; Hardware stack levels used:    1
 13340 ;; Hardware stack levels required when called:    5
 13341 ;; This function calls:
 13342 ;;		Nothing
 13343 ;; This function is called by:
 13344 ;;		_Flash_Memory_Initialization
 13345 ;;		_Flash_Memory_Modify
 13346 ;; This function uses a non-reentrant model
 13347 ;;
 13348                           
 13349                           
 13350                           ;psect for function _Flash_Memory_Read
 13351  1067                     _Flash_Memory_Read:	
 13352                           
 13353                           ;incstack = 0
 13354                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13355                           ;Flash_Memory_Read@address stored from wreg
 13356  1067  0020               	movlb	0	; select bank0
 13357  1068  00A2               	movwf	Flash_Memory_Read@address
 13358                           
 13359                           ;MCU_B1.c: 928: char i = 0, ret = 0;
 13360  1069  01A1               	clrf	Flash_Memory_Read@i
 13361  106A  01A3               	clrf	Flash_Memory_Read@ret
 13362                           
 13363                           ;MCU_B1.c: 929: PMADRH = 0x30;
 13364  106B  3030               	movlw	48
 13365  106C  0023               	movlb	3	; select bank3
 13366  106D  0092               	movwf	18	;volatile
 13367                           
 13368                           ;MCU_B1.c: 930: PMADRL = address;
 13369  106E  0020               	movlb	0	; select bank0
 13370  106F  0822               	movf	Flash_Memory_Read@address,w
 13371  1070  0023               	movlb	3	; select bank3
 13372  1071  0091               	movwf	17	;volatile
 13373                           
 13374                           ;MCU_B1.c: 931: CFGS = 0;
 13375  1072  1315               	bcf	21,6	;volatile
 13376                           
 13377                           ;MCU_B1.c: 932: RD = 1;
 13378  1073  1415               	bsf	21,0	;volatile
 13379                           
 13380                           ;MCU_B1.c: 933: i = PMDATH;
 13381  1074  0814               	movf	20,w	;volatile
 13382  1075  0020               	movlb	0	; select bank0
 13383  1076  00A0               	movwf	??_Flash_Memory_Read
 13384  1077  0820               	movf	??_Flash_Memory_Read,w
 13385  1078  00A1               	movwf	Flash_Memory_Read@i
 13386                           
 13387                           ;MCU_B1.c: 934: ret = PMDATL;
 13388  1079  0023               	movlb	3	; select bank3
 13389  107A  0813               	movf	19,w	;volatile
 13390  107B  0020               	movlb	0	; select bank0
 13391  107C  00A0               	movwf	??_Flash_Memory_Read
 13392  107D  0820               	movf	??_Flash_Memory_Read,w
 13393  107E  00A3               	movwf	Flash_Memory_Read@ret
 13394                           
 13395                           ;MCU_B1.c: 935: return ret;
 13396  107F  0823               	movf	Flash_Memory_Read@ret,w
 13397  1080  0008               	return
 13398  1081                     __end_of_Flash_Memory_Read:	
 13399                           
 13400                           	psect	text80
 13401  1A6D                     __ptext80:	
 13402 ;; *************** function _DimmerLights_Main *****************
 13403 ;; Defined at:
 13404 ;;		line 418 in file "../src/Dimmer_B1.c"
 13405 ;; Parameters:    Size  Location     Type
 13406 ;;		None
 13407 ;; Auto vars:     Size  Location     Type
 13408 ;;		None
 13409 ;; Return value:  Size  Location     Type
 13410 ;;		None               void
 13411 ;; Registers used:
 13412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13413 ;; Tracked objects:
 13414 ;;		On entry : 0/0
 13415 ;;		On exit  : 0/0
 13416 ;;		Unchanged: 0/0
 13417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13422 ;;Total ram usage:        0 bytes
 13423 ;; Hardware stack levels used:    1
 13424 ;; Hardware stack levels required when called:   11
 13425 ;; This function calls:
 13426 ;;		_DimmerLights_Close
 13427 ;;		_setDimmerLights_Main
 13428 ;; This function is called by:
 13429 ;;		_main
 13430 ;; This function uses a non-reentrant model
 13431 ;;
 13432                           
 13433                           
 13434                           ;psect for function _DimmerLights_Main
 13435  1A6D                     _DimmerLights_Main:	
 13436                           
 13437                           ;Dimmer_B1.c: 421: setDimmerLights_Main(1);
 13438                           
 13439                           ;incstack = 0
 13440                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13441  1A6D  3001               	movlw	1
 13442  1A6E  318A  22BC  319A   	fcall	_setDimmerLights_Main
 13443                           
 13444                           ;Dimmer_B1.c: 425: setDimmerLights_Main(2);
 13445  1A71  3002               	movlw	2
 13446  1A72  318A  22BC  319A   	fcall	_setDimmerLights_Main
 13447                           
 13448                           ;Dimmer_B1.c: 432: DimmerLights_Close();
 13449  1A75  319D  2521         	fcall	_DimmerLights_Close
 13450  1A77  0008               	return
 13451  1A78                     __end_of_DimmerLights_Main:	
 13452                           
 13453                           	psect	text81
 13454  0ABC                     __ptext81:	
 13455 ;; *************** function _setDimmerLights_Main *****************
 13456 ;; Defined at:
 13457 ;;		line 436 in file "../src/Dimmer_B1.c"
 13458 ;; Parameters:    Size  Location     Type
 13459 ;;  lights          1    wreg     unsigned char 
 13460 ;; Auto vars:     Size  Location     Type
 13461 ;;  lights          1   70[BANK0 ] unsigned char 
 13462 ;;  clear           1   69[BANK0 ] unsigned char 
 13463 ;; Return value:  Size  Location     Type
 13464 ;;		None               void
 13465 ;; Registers used:
 13466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13467 ;; Tracked objects:
 13468 ;;		On entry : 0/0
 13469 ;;		On exit  : 0/0
 13470 ;;		Unchanged: 0/0
 13471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13473 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13475 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13476 ;;Total ram usage:        2 bytes
 13477 ;; Hardware stack levels used:    1
 13478 ;; Hardware stack levels required when called:   10
 13479 ;; This function calls:
 13480 ;;		_DimmerLightsPointSelect
 13481 ;;		_setBuz
 13482 ;;		_setDimmerLights
 13483 ;;		_setDimmerLights_Adj
 13484 ;; This function is called by:
 13485 ;;		_DimmerLights_Main
 13486 ;; This function uses a non-reentrant model
 13487 ;;
 13488                           
 13489                           
 13490                           ;psect for function _setDimmerLights_Main
 13491  0ABC                     _setDimmerLights_Main:	
 13492                           
 13493                           ;incstack = 0
 13494                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13495                           ;setDimmerLights_Main@lights stored from wreg
 13496  0ABC  0020               	movlb	0	; select bank0
 13497  0ABD  00E6               	movwf	setDimmerLights_Main@lights
 13498                           
 13499                           ;Dimmer_B1.c: 437: char clear = 1;
 13500  0ABE  01E5               	clrf	setDimmerLights_Main@clear
 13501  0ABF  0AE5               	incf	setDimmerLights_Main@clear,f
 13502                           
 13503                           ;Dimmer_B1.c: 438: DimmerLightsPointSelect(lights);
 13504  0AC0  0866               	movf	setDimmerLights_Main@lights,w
 13505  0AC1  319C  2424  318A   	fcall	_DimmerLightsPointSelect
 13506                           
 13507                           ;Dimmer_B1.c: 451: if (lights == 1) {
 13508  0AC4  0020               	movlb	0	; select bank0
 13509  0AC5  0866               	movf	setDimmerLights_Main@lights,w
 13510  0AC6  3A01               	xorlw	1
 13511  0AC7  1D03               	skipz
 13512  0AC8  2AD0               	goto	l9721
 13513                           
 13514                           ;Dimmer_B1.c: 452: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 13515  0AC9  3000               	movlw	0
 13516  0ACA  0023               	movlb	3	; select bank3
 13517  0ACB  1956               	btfsc	(_DimmerLights2^(0+384)+9),2
 13518  0ACC  3001               	movlw	1
 13519  0ACD  0020               	movlb	0	; select bank0
 13520  0ACE  00E5               	movwf	setDimmerLights_Main@clear
 13521                           
 13522                           ;Dimmer_B1.c: 453: } else if (lights == 2) {
 13523  0ACF  2ADA               	goto	l9725
 13524  0AD0                     l9721:	
 13525  0AD0  0866               	movf	setDimmerLights_Main@lights,w
 13526  0AD1  3A02               	xorlw	2
 13527  0AD2  1D03               	skipz
 13528  0AD3  2ADA               	goto	l9725
 13529                           
 13530                           ;Dimmer_B1.c: 454: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 13531  0AD4  3000               	movlw	0
 13532  0AD5  0023               	movlb	3	; select bank3
 13533  0AD6  1947               	btfsc	(_DimmerLights1^(0+384)+9),2
 13534  0AD7  3001               	movlw	1
 13535  0AD8  0020               	movlb	0	; select bank0
 13536  0AD9  00E5               	movwf	setDimmerLights_Main@clear
 13537  0ADA                     l9725:	
 13538                           
 13539                           ;Dimmer_B1.c: 455: }
 13540                           ;Dimmer_B1.c: 458: if (DimmerLights->Trigger == 1) {
 13541  0ADA  086B               	movf	_DimmerLights,w
 13542  0ADB  3E08               	addlw	8
 13543  0ADC  0086               	movwf	6
 13544  0ADD  3001               	movlw	1	; select bank2/3
 13545  0ADE  0087               	movwf	7
 13546  0ADF  1D01               	btfss	1,2
 13547  0AE0  2B02               	goto	l9737
 13548                           
 13549                           ;Dimmer_B1.c: 459: if (clear == 1) {
 13550  0AE1  0865               	movf	setDimmerLights_Main@clear,w
 13551  0AE2  3A01               	xorlw	1
 13552  0AE3  1D03               	skipz
 13553  0AE4  0008               	return
 13554                           
 13555                           ;Dimmer_B1.c: 460: DimmerLights->Trigger = 0;
 13556  0AE5  086B               	movf	_DimmerLights,w
 13557  0AE6  3E08               	addlw	8
 13558  0AE7  0086               	movwf	6
 13559  0AE8  3001               	movlw	1	; select bank2/3
 13560  0AE9  0087               	movwf	7
 13561  0AEA  1101               	bcf	1,2
 13562                           
 13563                           ;Dimmer_B1.c: 461: if (DimmerLights->Switch == 1) {
 13564  0AEB  086B               	movf	_DimmerLights,w
 13565  0AEC  3E08               	addlw	8
 13566  0AED  0086               	movwf	6
 13567  0AEE  3001               	movlw	1	; select bank2/3
 13568  0AEF  0087               	movwf	7
 13569  0AF0  1C81               	btfss	1,1
 13570  0AF1  2AF5               	goto	l9733
 13571                           
 13572                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 1);
 13573  0AF2  01A4               	clrf	setDimmerLights@status
 13574  0AF3  0AA4               	incf	setDimmerLights@status,f
 13575  0AF4  2AF7               	goto	L9
 13576  0AF5                     l9733:	
 13577                           ;Dimmer_B1.c: 463: } else {
 13578                           
 13579                           
 13580                           ;Dimmer_B1.c: 464: setDimmerLights(lights, 0);
 13581  0AF5  0020               	movlb	0	; select bank0
 13582  0AF6  01A4               	clrf	setDimmerLights@status
 13583  0AF7                     L9:	
 13584  0AF7  0866               	movf	setDimmerLights_Main@lights,w
 13585  0AF8  318C  242F         	fcall	_setDimmerLights
 13586                           
 13587                           ;Dimmer_B1.c: 465: }
 13588                           ;Dimmer_B1.c: 467: DimmerLights->Clear = 0;
 13589  0AFA  0020               	movlb	0	; select bank0
 13590  0AFB  086B               	movf	_DimmerLights,w
 13591  0AFC  3E09               	addlw	9
 13592  0AFD  0086               	movwf	6
 13593  0AFE  3001               	movlw	1	; select bank2/3
 13594  0AFF  0087               	movwf	7
 13595  0B00  1101               	bcf	1,2
 13596                           
 13597                           ;Dimmer_B1.c: 469: }
 13598                           ;Dimmer_B1.c: 470: } else {
 13599  0B01  0008               	return
 13600  0B02                     l9737:	
 13601                           
 13602                           ;Dimmer_B1.c: 471: if (DimmerLights->TriggerAdj == 1) {
 13603  0B02  086B               	movf	_DimmerLights,w
 13604  0B03  3E08               	addlw	8
 13605  0B04  0086               	movwf	6
 13606  0B05  3001               	movlw	1	; select bank2/3
 13607  0B06  0087               	movwf	7
 13608  0B07  1E01               	btfss	1,4
 13609  0B08  0008               	return
 13610                           
 13611                           ;Dimmer_B1.c: 472: if (clear == 1) {
 13612  0B09  0865               	movf	setDimmerLights_Main@clear,w
 13613  0B0A  3A01               	xorlw	1
 13614  0B0B  1D03               	skipz
 13615  0B0C  0008               	return
 13616                           
 13617                           ;Dimmer_B1.c: 473: DimmerLights->TriggerAdj = 0;
 13618  0B0D  086B               	movf	_DimmerLights,w
 13619  0B0E  3E08               	addlw	8
 13620  0B0F  0086               	movwf	6
 13621  0B10  3001               	movlw	1	; select bank2/3
 13622  0B11  0087               	movwf	7
 13623  0B12  1201               	bcf	1,4
 13624                           
 13625                           ;Dimmer_B1.c: 474: if (DimmerLights->AdjGo == 1) {
 13626  0B13  086B               	movf	_DimmerLights,w
 13627  0B14  3E08               	addlw	8
 13628  0B15  0086               	movwf	6
 13629  0B16  3001               	movlw	1	; select bank2/3
 13630  0B17  0087               	movwf	7
 13631  0B18  1D81               	btfss	1,3
 13632  0B19  2B29               	goto	l9747
 13633                           
 13634                           ;Dimmer_B1.c: 475: setDimmerLights_Adj(lights, 1);
 13635  0B1A  01E2               	clrf	setDimmerLights_Adj@status
 13636  0B1B  0AE2               	incf	setDimmerLights_Adj@status,f
 13637  0B1C  0866               	movf	setDimmerLights_Main@lights,w
 13638  0B1D  3192  22BA  318A   	fcall	_setDimmerLights_Adj
 13639                           
 13640                           ;Dimmer_B1.c: 476: setBuz(1, 100);
 13641  0B20  3064               	movlw	100
 13642  0B21  0020               	movlb	0	; select bank0
 13643  0B22  00A9               	movwf	setBuz@time
 13644  0B23  3000               	movlw	0
 13645  0B24  00AA               	movwf	setBuz@time+1
 13646  0B25  3001               	movlw	1
 13647  0B26  3195  256B         	fcall	_setBuz
 13648                           
 13649                           ;Dimmer_B1.c: 477: } else {
 13650  0B28  0008               	return
 13651  0B29                     l9747:	
 13652                           
 13653                           ;Dimmer_B1.c: 478: setDimmerLights_Adj(lights, 0);
 13654  0B29  0020               	movlb	0	; select bank0
 13655  0B2A  01E2               	clrf	setDimmerLights_Adj@status
 13656  0B2B  0866               	movf	setDimmerLights_Main@lights,w
 13657  0B2C  3192  22BA         	fcall	_setDimmerLights_Adj
 13658  0B2E  0008               	return
 13659  0B2F                     __end_of_setDimmerLights_Main:	
 13660                           
 13661                           	psect	text82
 13662  12BA                     __ptext82:	
 13663 ;; *************** function _setDimmerLights_Adj *****************
 13664 ;; Defined at:
 13665 ;;		line 657 in file "../src/Dimmer_B1.c"
 13666 ;; Parameters:    Size  Location     Type
 13667 ;;  lights          1    wreg     unsigned char 
 13668 ;;  status          1   66[BANK0 ] unsigned char 
 13669 ;; Auto vars:     Size  Location     Type
 13670 ;;  lights          1   68[BANK0 ] unsigned char 
 13671 ;; Return value:  Size  Location     Type
 13672 ;;		None               void
 13673 ;; Registers used:
 13674 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13675 ;; Tracked objects:
 13676 ;;		On entry : 0/0
 13677 ;;		On exit  : 0/0
 13678 ;;		Unchanged: 0/0
 13679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13680 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13683 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13684 ;;Total ram usage:        3 bytes
 13685 ;; Hardware stack levels used:    1
 13686 ;; Hardware stack levels required when called:    9
 13687 ;; This function calls:
 13688 ;;		_DimmerLightsPointSelect
 13689 ;;		_setLoad_StatusOff
 13690 ;;		_setRF_DimmerLights
 13691 ;;		_setTxData
 13692 ;; This function is called by:
 13693 ;;		_setDimmerLights_Main
 13694 ;; This function uses a non-reentrant model
 13695 ;;
 13696                           
 13697                           
 13698                           ;psect for function _setDimmerLights_Adj
 13699  12BA                     _setDimmerLights_Adj:	
 13700                           
 13701                           ;incstack = 0
 13702                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13703                           ;setDimmerLights_Adj@lights stored from wreg
 13704  12BA  0020               	movlb	0	; select bank0
 13705  12BB  00E4               	movwf	setDimmerLights_Adj@lights
 13706                           
 13707                           ;Dimmer_B1.c: 658: DimmerLightsPointSelect(lights);
 13708  12BC  0864               	movf	setDimmerLights_Adj@lights,w
 13709  12BD  319C  2424  3192   	fcall	_DimmerLightsPointSelect
 13710                           
 13711                           ;Dimmer_B1.c: 659: if (status == 1) {
 13712  12C0  0020               	movlb	0	; select bank0
 13713  12C1  0862               	movf	setDimmerLights_Adj@status,w
 13714  12C2  3A01               	xorlw	1
 13715  12C3  1D03               	skipz
 13716  12C4  2AD0               	goto	l9363
 13717                           
 13718                           ;Dimmer_B1.c: 660: DimmerLights->AdjFlag = 1;
 13719  12C5  086B               	movf	_DimmerLights,w
 13720  12C6  0086               	movwf	6
 13721  12C7  3001               	movlw	1	; select bank2/3
 13722  12C8  0087               	movwf	7
 13723  12C9  1581               	bsf	1,3
 13724                           
 13725                           ;Dimmer_B1.c: 661: DimmerLights->Signal = 1;
 13726  12CA  086B               	movf	_DimmerLights,w
 13727  12CB  0086               	movwf	6
 13728  12CC  3001               	movlw	1	; select bank2/3
 13729  12CD  0087               	movwf	7
 13730  12CE  1481               	bsf	1,1
 13731                           
 13732                           ;Dimmer_B1.c: 662: } else {
 13733  12CF  0008               	return
 13734  12D0                     l9363:	
 13735                           
 13736                           ;Dimmer_B1.c: 663: if (DimmerLights->AdjFlag == 1) {
 13737  12D0  086B               	movf	_DimmerLights,w
 13738  12D1  0086               	movwf	6
 13739  12D2  3001               	movlw	1	; select bank2/3
 13740  12D3  0087               	movwf	7
 13741  12D4  1D81               	btfss	1,3
 13742  12D5  0008               	return
 13743                           
 13744                           ;Dimmer_B1.c: 665: DimmerLights->Signal = 0;
 13745  12D6  086B               	movf	_DimmerLights,w
 13746  12D7  0086               	movwf	6
 13747  12D8  3001               	movlw	1	; select bank2/3
 13748  12D9  0087               	movwf	7
 13749  12DA  1081               	bcf	1,1
 13750                           
 13751                           ;Dimmer_B1.c: 666: DimmerLights->AdjFlag = 0;
 13752  12DB  086B               	movf	_DimmerLights,w
 13753  12DC  0086               	movwf	6
 13754  12DD  3001               	movlw	1	; select bank2/3
 13755  12DE  0087               	movwf	7
 13756  12DF  1181               	bcf	1,3
 13757                           
 13758                           ;Dimmer_B1.c: 667: setLoad_StatusOff(0, 1);
 13759  12E0  01A0               	clrf	setLoad_StatusOff@command
 13760  12E1  0AA0               	incf	setLoad_StatusOff@command,f
 13761  12E2  3000               	movlw	0
 13762  12E3  319D  253A  3192   	fcall	_setLoad_StatusOff
 13763                           
 13764                           ;Dimmer_B1.c: 668: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13765  12E6  0020               	movlb	0	; select bank0
 13766  12E7  086B               	movf	_DimmerLights,w
 13767  12E8  3E04               	addlw	4
 13768  12E9  0086               	movwf	6
 13769  12EA  3001               	movlw	1	; select bank2/3
 13770  12EB  0087               	movwf	7
 13771  12EC  0801               	movf	1,w
 13772  12ED  00E3               	movwf	??_setDimmerLights_Adj
 13773  12EE  086B               	movf	_DimmerLights,w
 13774  12EF  3E05               	addlw	5
 13775  12F0  0086               	movwf	6
 13776  12F1  3001               	movlw	1	; select bank2/3
 13777  12F2  0087               	movwf	7
 13778  12F3  0863               	movf	??_setDimmerLights_Adj,w
 13779  12F4  0081               	movwf	1
 13780                           
 13781                           ;Dimmer_B1.c: 676: setRF_DimmerLights(lights, 1);
 13782  12F5  01DD               	clrf	setRF_DimmerLights@on
 13783  12F6  0ADD               	incf	setRF_DimmerLights@on,f
 13784  12F7  0864               	movf	setDimmerLights_Adj@lights,w
 13785  12F8  3188  20FE  3192   	fcall	_setRF_DimmerLights
 13786                           
 13787                           ;Dimmer_B1.c: 677: setTxData();
 13788  12FB  318F  2743         	fcall	_setTxData
 13789  12FD  0008               	return
 13790  12FE                     __end_of_setDimmerLights_Adj:	
 13791                           
 13792                           	psect	text83
 13793  1D3A                     __ptext83:	
 13794 ;; *************** function _setLoad_StatusOff *****************
 13795 ;; Defined at:
 13796 ;;		line 287 in file "../src/OverLoad_B1.c"
 13797 ;; Parameters:    Size  Location     Type
 13798 ;;  lights          1    wreg     unsigned char 
 13799 ;;  command         1    0[BANK0 ] unsigned char 
 13800 ;; Auto vars:     Size  Location     Type
 13801 ;;  lights          1    1[BANK0 ] unsigned char 
 13802 ;; Return value:  Size  Location     Type
 13803 ;;		None               void
 13804 ;; Registers used:
 13805 ;;		wreg, status,2, status,0
 13806 ;; Tracked objects:
 13807 ;;		On entry : 0/0
 13808 ;;		On exit  : 0/0
 13809 ;;		Unchanged: 0/0
 13810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13811 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13814 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13815 ;;Total ram usage:        2 bytes
 13816 ;; Hardware stack levels used:    1
 13817 ;; Hardware stack levels required when called:    5
 13818 ;; This function calls:
 13819 ;;		Nothing
 13820 ;; This function is called by:
 13821 ;;		_setDimmerLights_ERROR
 13822 ;;		_setDimmerLights_Adj
 13823 ;; This function uses a non-reentrant model
 13824 ;;
 13825                           
 13826                           
 13827                           ;psect for function _setLoad_StatusOff
 13828  1D3A                     _setLoad_StatusOff:	
 13829                           
 13830                           ;incstack = 0
 13831                           ; Regs used in _setLoad_StatusOff: [wreg+status,2+status,0]
 13832                           ;setLoad_StatusOff@lights stored from wreg
 13833  1D3A  0020               	movlb	0	; select bank0
 13834  1D3B  00A1               	movwf	setLoad_StatusOff@lights
 13835                           
 13836                           ;OverLoad_B1.c: 288: Load1.StatusOff = command;
 13837  1D3C  0820               	movf	setLoad_StatusOff@command,w
 13838  1D3D  0022               	movlb	2	; select bank2
 13839  1D3E  13A2               	bcf	_Load1^(0+256),7
 13840  1D3F  1D03               	skipz
 13841  1D40  17A2               	bsf	_Load1^(0+256),7
 13842                           
 13843                           ;OverLoad_B1.c: 289: Load1.SafeCount -= 2;
 13844  1D41  3002               	movlw	2
 13845  1D42  02D0               	subwf	(_Load1^(0+256)+46),f
 13846                           
 13847                           ;OverLoad_B1.c: 292: if (lights == 1) {
 13848  1D43  0020               	movlb	0	; select bank0
 13849  1D44  0821               	movf	setLoad_StatusOff@lights,w
 13850  1D45  3A01               	xorlw	1
 13851  1D46  1D03               	skipz
 13852  1D47  2D4B               	goto	l8823
 13853                           
 13854                           ;OverLoad_B1.c: 293: Load1.Lights1Status = 0;
 13855  1D48  0022               	movlb	2	; select bank2
 13856  1D49  01D1               	clrf	(_Load1^(0+256)+47)
 13857                           
 13858                           ;OverLoad_B1.c: 294: }
 13859  1D4A  0008               	return
 13860  1D4B                     l8823:	
 13861                           
 13862                           ;OverLoad_B1.c: 297: else if (lights == 2) {
 13863  1D4B  0020               	movlb	0	; select bank0
 13864  1D4C  0821               	movf	setLoad_StatusOff@lights,w
 13865  1D4D  3A02               	xorlw	2
 13866  1D4E  1D03               	skipz
 13867  1D4F  0008               	return
 13868                           
 13869                           ;OverLoad_B1.c: 298: Load1.Lights2Status = 0;
 13870  1D50  0022               	movlb	2	; select bank2
 13871  1D51  01D2               	clrf	(_Load1^(0+256)+48)
 13872  1D52  0008               	return
 13873  1D53                     __end_of_setLoad_StatusOff:	
 13874                           
 13875                           	psect	text84
 13876  0C2F                     __ptext84:	
 13877 ;; *************** function _setDimmerLights *****************
 13878 ;; Defined at:
 13879 ;;		line 604 in file "../src/Dimmer_B1.c"
 13880 ;; Parameters:    Size  Location     Type
 13881 ;;  lights          1    wreg     unsigned char 
 13882 ;;  status          1    4[BANK0 ] unsigned char 
 13883 ;; Auto vars:     Size  Location     Type
 13884 ;;  lights          1    6[BANK0 ] unsigned char 
 13885 ;; Return value:  Size  Location     Type
 13886 ;;		None               void
 13887 ;; Registers used:
 13888 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13889 ;; Tracked objects:
 13890 ;;		On entry : 0/0
 13891 ;;		On exit  : 0/0
 13892 ;;		Unchanged: 0/0
 13893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13894 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13895 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13897 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13898 ;;Total ram usage:        3 bytes
 13899 ;; Hardware stack levels used:    1
 13900 ;; Hardware stack levels required when called:    7
 13901 ;; This function calls:
 13902 ;;		_DimmerLightsPointSelect
 13903 ;;		_setLED
 13904 ;;		_setLoad_Count
 13905 ;;		_setLoad_StatusOn
 13906 ;;		_setMemory_GO
 13907 ;; This function is called by:
 13908 ;;		_setDimmerLights_Main
 13909 ;;		_setControl_Lights_Table
 13910 ;; This function uses a non-reentrant model
 13911 ;;
 13912                           
 13913                           
 13914                           ;psect for function _setDimmerLights
 13915  0C2F                     _setDimmerLights:	
 13916                           
 13917                           ;incstack = 0
 13918                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13919                           ;setDimmerLights@lights stored from wreg
 13920  0C2F  0020               	movlb	0	; select bank0
 13921  0C30  00A6               	movwf	setDimmerLights@lights
 13922                           
 13923                           ;Dimmer_B1.c: 605: DimmerLightsPointSelect(lights);
 13924  0C31  0826               	movf	setDimmerLights@lights,w
 13925  0C32  319C  2424  318C   	fcall	_DimmerLightsPointSelect
 13926                           
 13927                           ;Dimmer_B1.c: 606: Dimmer->Load = lights;
 13928  0C35  0020               	movlb	0	; select bank0
 13929  0C36  0826               	movf	setDimmerLights@lights,w
 13930  0C37  00A5               	movwf	??_setDimmerLights
 13931  0C38  0A76               	incf	_Dimmer,w
 13932  0C39  0086               	movwf	6
 13933  0C3A  3001               	movlw	1	; select bank2/3
 13934  0C3B  0087               	movwf	7
 13935  0C3C  0825               	movf	??_setDimmerLights,w
 13936  0C3D  0081               	movwf	1
 13937                           
 13938                           ;Dimmer_B1.c: 607: if (status == 1) {
 13939  0C3E  0824               	movf	setDimmerLights@status,w
 13940  0C3F  3A01               	xorlw	1
 13941  0C40  1D03               	skipz
 13942  0C41  2C8C               	goto	l8993
 13943                           
 13944                           ;Dimmer_B1.c: 608: DimmerLights->Status = 1;
 13945  0C42  086B               	movf	_DimmerLights,w
 13946  0C43  0086               	movwf	6
 13947  0C44  3001               	movlw	1	; select bank2/3
 13948  0C45  0087               	movwf	7
 13949  0C46  1681               	bsf	1,5
 13950                           
 13951                           ;Dimmer_B1.c: 609: setLED(lights, 0);
 13952  0C47  01A2               	clrf	setLED@command
 13953  0C48  0826               	movf	setDimmerLights@lights,w
 13954  0C49  3196  261F  318C   	fcall	_setLED
 13955                           
 13956                           ;Dimmer_B1.c: 611: setLoad_Count(0);
 13957  0C4C  3000               	movlw	0
 13958  0C4D  319A  22F2  318C   	fcall	_setLoad_Count
 13959                           
 13960                           ;Dimmer_B1.c: 613: DimmerLights->Signal = 1;
 13961  0C50  0020               	movlb	0	; select bank0
 13962  0C51  086B               	movf	_DimmerLights,w
 13963  0C52  0086               	movwf	6
 13964  0C53  3001               	movlw	1	; select bank2/3
 13965  0C54  0087               	movwf	7
 13966  0C55  1481               	bsf	1,1
 13967                           
 13968                           ;Dimmer_B1.c: 614: DimmerLights->DimmingTimeValue = 7;
 13969  0C56  3007               	movlw	7
 13970  0C57  00A5               	movwf	??_setDimmerLights
 13971  0C58  086B               	movf	_DimmerLights,w
 13972  0C59  3E02               	addlw	2
 13973  0C5A  0086               	movwf	6
 13974  0C5B  3001               	movlw	1	; select bank2/3
 13975  0C5C  0087               	movwf	7
 13976  0C5D  0825               	movf	??_setDimmerLights,w
 13977  0C5E  0081               	movwf	1
 13978                           
 13979                           ;Dimmer_B1.c: 616: if (DimmerLights->StatusFlag == 0) {
 13980  0C5F  086B               	movf	_DimmerLights,w
 13981  0C60  0086               	movwf	6
 13982  0C61  3001               	movlw	1	; select bank2/3
 13983  0C62  0087               	movwf	7
 13984  0C63  1B01               	btfsc	1,6
 13985  0C64  0008               	return
 13986                           
 13987                           ;Dimmer_B1.c: 617: DimmerLights->StatusFlag = 1;
 13988  0C65  086B               	movf	_DimmerLights,w
 13989  0C66  0086               	movwf	6
 13990  0C67  3001               	movlw	1	; select bank2/3
 13991  0C68  0087               	movwf	7
 13992  0C69  1701               	bsf	1,6
 13993                           
 13994                           ;Dimmer_B1.c: 618: setLoad_StatusOn(lights, 1);
 13995  0C6A  01A0               	clrf	setLoad_StatusOn@command
 13996  0C6B  0AA0               	incf	setLoad_StatusOn@command,f
 13997  0C6C  0826               	movf	setDimmerLights@lights,w
 13998  0C6D  319D  256C  318C   	fcall	_setLoad_StatusOn
 13999                           
 14000                           ;Dimmer_B1.c: 619: setMemory_GO(0);
 14001  0C70  3000               	movlw	0
 14002  0C71  319C  24C4         	fcall	_setMemory_GO
 14003                           
 14004                           ;Dimmer_B1.c: 622: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 14005  0C73  0020               	movlb	0	; select bank0
 14006  0C74  086B               	movf	_DimmerLights,w
 14007  0C75  3E05               	addlw	5
 14008  0C76  0086               	movwf	6
 14009  0C77  3001               	movlw	1	; select bank2/3
 14010  0C78  0087               	movwf	7
 14011  0C79  0801               	movf	1,w
 14012  0C7A  00A5               	movwf	??_setDimmerLights
 14013  0C7B  086B               	movf	_DimmerLights,w
 14014  0C7C  3E04               	addlw	4
 14015  0C7D  0086               	movwf	6
 14016  0C7E  3001               	movlw	1	; select bank2/3
 14017  0C7F  0087               	movwf	7
 14018  0C80  0825               	movf	??_setDimmerLights,w
 14019  0C81  0081               	movwf	1
 14020                           
 14021                           ;Dimmer_B1.c: 626: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 14022  0C82  3020               	movlw	32
 14023  0C83  00A5               	movwf	??_setDimmerLights
 14024  0C84  086B               	movf	_DimmerLights,w
 14025  0C85  3E04               	addlw	4
 14026  0C86  0086               	movwf	6
 14027  0C87  3001               	movlw	1	; select bank2/3
 14028  0C88  0087               	movwf	7
 14029  0C89  0825               	movf	??_setDimmerLights,w
 14030  0C8A  0081               	movwf	1
 14031                           
 14032                           ;Dimmer_B1.c: 628: }
 14033                           ;Dimmer_B1.c: 629: } else {
 14034  0C8B  0008               	return
 14035  0C8C                     l8993:	
 14036                           
 14037                           ;Dimmer_B1.c: 630: DimmerLights->Status = 0;
 14038  0C8C  086B               	movf	_DimmerLights,w
 14039  0C8D  0086               	movwf	6
 14040  0C8E  3001               	movlw	1	; select bank2/3
 14041  0C8F  0087               	movwf	7
 14042  0C90  1281               	bcf	1,5
 14043                           
 14044                           ;Dimmer_B1.c: 632: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14045  0C91  086B               	movf	_DimmerLights,w
 14046  0C92  3E06               	addlw	6
 14047  0C93  0086               	movwf	6
 14048  0C94  3001               	movlw	1	; select bank2/3
 14049  0C95  0087               	movwf	7
 14050  0C96  0801               	movf	1,w
 14051  0C97  00A5               	movwf	??_setDimmerLights
 14052  0C98  086B               	movf	_DimmerLights,w
 14053  0C99  3E04               	addlw	4
 14054  0C9A  0086               	movwf	6
 14055  0C9B  3001               	movlw	1	; select bank2/3
 14056  0C9C  0087               	movwf	7
 14057  0C9D  0825               	movf	??_setDimmerLights,w
 14058  0C9E  0081               	movwf	1
 14059                           
 14060                           ;Dimmer_B1.c: 639: DimmerLights->Signal = 1;
 14061  0C9F  086B               	movf	_DimmerLights,w
 14062  0CA0  0086               	movwf	6
 14063  0CA1  3001               	movlw	1	; select bank2/3
 14064  0CA2  0087               	movwf	7
 14065  0CA3  1481               	bsf	1,1
 14066                           
 14067                           ;Dimmer_B1.c: 640: DimmerLights->AdjFlag = 0;
 14068  0CA4  086B               	movf	_DimmerLights,w
 14069  0CA5  0086               	movwf	6
 14070  0CA6  3001               	movlw	1	; select bank2/3
 14071  0CA7  0087               	movwf	7
 14072  0CA8  1181               	bcf	1,3
 14073                           
 14074                           ;Dimmer_B1.c: 641: DimmerLights->AdjStatus = 0;
 14075  0CA9  086B               	movf	_DimmerLights,w
 14076  0CAA  0086               	movwf	6
 14077  0CAB  3001               	movlw	1	; select bank2/3
 14078  0CAC  0087               	movwf	7
 14079  0CAD  1201               	bcf	1,4
 14080                           
 14081                           ;Dimmer_B1.c: 642: DimmerLights->DimmingTimeValue = 7;
 14082  0CAE  3007               	movlw	7
 14083  0CAF  00A5               	movwf	??_setDimmerLights
 14084  0CB0  086B               	movf	_DimmerLights,w
 14085  0CB1  3E02               	addlw	2
 14086  0CB2  0086               	movwf	6
 14087  0CB3  3001               	movlw	1	; select bank2/3
 14088  0CB4  0087               	movwf	7
 14089  0CB5  0825               	movf	??_setDimmerLights,w
 14090  0CB6  0081               	movwf	1
 14091  0CB7  0008               	return
 14092  0CB8                     __end_of_setDimmerLights:	
 14093                           
 14094                           	psect	text85
 14095  1D6C                     __ptext85:	
 14096 ;; *************** function _setLoad_StatusOn *****************
 14097 ;; Defined at:
 14098 ;;		line 266 in file "../src/OverLoad_B1.c"
 14099 ;; Parameters:    Size  Location     Type
 14100 ;;  lights          1    wreg     unsigned char 
 14101 ;;  command         1    0[BANK0 ] unsigned char 
 14102 ;; Auto vars:     Size  Location     Type
 14103 ;;  lights          1    1[BANK0 ] unsigned char 
 14104 ;; Return value:  Size  Location     Type
 14105 ;;		None               void
 14106 ;; Registers used:
 14107 ;;		wreg
 14108 ;; Tracked objects:
 14109 ;;		On entry : 0/0
 14110 ;;		On exit  : 0/0
 14111 ;;		Unchanged: 0/0
 14112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14113 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14117 ;;Total ram usage:        2 bytes
 14118 ;; Hardware stack levels used:    1
 14119 ;; Hardware stack levels required when called:    5
 14120 ;; This function calls:
 14121 ;;		Nothing
 14122 ;; This function is called by:
 14123 ;;		_setDimmerLights
 14124 ;; This function uses a non-reentrant model
 14125 ;;
 14126                           
 14127                           
 14128                           ;psect for function _setLoad_StatusOn
 14129  1D6C                     _setLoad_StatusOn:	
 14130                           
 14131                           ;incstack = 0
 14132                           ; Regs used in _setLoad_StatusOn: [wreg]
 14133                           ;setLoad_StatusOn@lights stored from wreg
 14134  1D6C  0020               	movlb	0	; select bank0
 14135  1D6D  00A1               	movwf	setLoad_StatusOn@lights
 14136                           
 14137                           ;OverLoad_B1.c: 267: Load1.GO = 1;
 14138  1D6E  0022               	movlb	2	; select bank2
 14139  1D6F  14A2               	bsf	_Load1^(0+256),1
 14140                           
 14141                           ;OverLoad_B1.c: 268: Load1.StatusOn = command;
 14142  1D70  0020               	movlb	0	; select bank0
 14143  1D71  0820               	movf	setLoad_StatusOn@command,w
 14144  1D72  0022               	movlb	2	; select bank2
 14145  1D73  1322               	bcf	_Load1^(0+256),6
 14146  1D74  1D03               	skipz
 14147  1D75  1722               	bsf	_Load1^(0+256),6
 14148                           
 14149                           ;OverLoad_B1.c: 271: if (lights == 1) {
 14150  1D76  0020               	movlb	0	; select bank0
 14151  1D77  0821               	movf	setLoad_StatusOn@lights,w
 14152  1D78  3A01               	xorlw	1
 14153  1D79  1D03               	skipz
 14154  1D7A  2D7F               	goto	l8891
 14155                           
 14156                           ;OverLoad_B1.c: 272: Load1.Lights1Status = 1;
 14157  1D7B  0022               	movlb	2	; select bank2
 14158  1D7C  01D1               	clrf	(_Load1^(0+256)+47)
 14159  1D7D  0AD1               	incf	(_Load1^(0+256)+47),f
 14160                           
 14161                           ;OverLoad_B1.c: 273: }
 14162  1D7E  0008               	return
 14163  1D7F                     l8891:	
 14164                           
 14165                           ;OverLoad_B1.c: 276: else if (lights == 2) {
 14166  1D7F  0020               	movlb	0	; select bank0
 14167  1D80  0821               	movf	setLoad_StatusOn@lights,w
 14168  1D81  3A02               	xorlw	2
 14169  1D82  1D03               	skipz
 14170  1D83  0008               	return
 14171                           
 14172                           ;OverLoad_B1.c: 277: Load1.Lights2Status = 1;
 14173  1D84  0022               	movlb	2	; select bank2
 14174  1D85  01D2               	clrf	(_Load1^(0+256)+48)
 14175  1D86  0AD2               	incf	(_Load1^(0+256)+48),f
 14176  1D87  0008               	return
 14177  1D88                     __end_of_setLoad_StatusOn:	
 14178                           
 14179                           	psect	text86
 14180  1AF2                     __ptext86:	
 14181 ;; *************** function _setLoad_Count *****************
 14182 ;; Defined at:
 14183 ;;		line 251 in file "../src/OverLoad_B1.c"
 14184 ;; Parameters:    Size  Location     Type
 14185 ;;  command         1    wreg     unsigned char 
 14186 ;; Auto vars:     Size  Location     Type
 14187 ;;  command         1    1[BANK0 ] unsigned char 
 14188 ;; Return value:  Size  Location     Type
 14189 ;;		None               void
 14190 ;; Registers used:
 14191 ;;		wreg
 14192 ;; Tracked objects:
 14193 ;;		On entry : 0/0
 14194 ;;		On exit  : 0/0
 14195 ;;		Unchanged: 0/0
 14196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14201 ;;Total ram usage:        2 bytes
 14202 ;; Hardware stack levels used:    1
 14203 ;; Hardware stack levels required when called:    5
 14204 ;; This function calls:
 14205 ;;		Nothing
 14206 ;; This function is called by:
 14207 ;;		_setDimmerLights
 14208 ;; This function uses a non-reentrant model
 14209 ;;
 14210                           
 14211                           
 14212                           ;psect for function _setLoad_Count
 14213  1AF2                     _setLoad_Count:	
 14214                           
 14215                           ;incstack = 0
 14216                           ; Regs used in _setLoad_Count: [wreg]
 14217                           ;setLoad_Count@command stored from wreg
 14218  1AF2  0020               	movlb	0	; select bank0
 14219  1AF3  00A1               	movwf	setLoad_Count@command
 14220                           
 14221                           ;OverLoad_B1.c: 252: Load1.Count = command;
 14222  1AF4  0821               	movf	setLoad_Count@command,w
 14223  1AF5  00A0               	movwf	??_setLoad_Count
 14224  1AF6  0820               	movf	??_setLoad_Count,w
 14225  1AF7  0022               	movlb	2	; select bank2
 14226  1AF8  00CC               	movwf	(_Load1^(0+256)+42)
 14227                           
 14228                           ;OverLoad_B1.c: 253: Load1.SafeCount = command;
 14229  1AF9  0020               	movlb	0	; select bank0
 14230  1AFA  0821               	movf	setLoad_Count@command,w
 14231  1AFB  00A0               	movwf	??_setLoad_Count
 14232  1AFC  0820               	movf	??_setLoad_Count,w
 14233  1AFD  0022               	movlb	2	; select bank2
 14234  1AFE  00D0               	movwf	(_Load1^(0+256)+46)
 14235  1AFF  0008               	return
 14236  1B00                     __end_of_setLoad_Count:	
 14237                           
 14238                           	psect	text87
 14239  161F                     __ptext87:	
 14240 ;; *************** function _setLED *****************
 14241 ;; Defined at:
 14242 ;;		line 70 in file "../src/LED_B1.c"
 14243 ;; Parameters:    Size  Location     Type
 14244 ;;  led             1    wreg     unsigned char 
 14245 ;;  command         1    2[BANK0 ] unsigned char 
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;  led             1    3[BANK0 ] unsigned char 
 14248 ;; Return value:  Size  Location     Type
 14249 ;;		None               void
 14250 ;; Registers used:
 14251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14252 ;; Tracked objects:
 14253 ;;		On entry : 0/0
 14254 ;;		On exit  : 0/0
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14257 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14260 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14261 ;;Total ram usage:        2 bytes
 14262 ;; Hardware stack levels used:    1
 14263 ;; Hardware stack levels required when called:    6
 14264 ;; This function calls:
 14265 ;;		_LedPointSelect
 14266 ;; This function is called by:
 14267 ;;		_setDimmerLights_ERROR
 14268 ;;		_setDimmerLights
 14269 ;;		_setLED_Initialization
 14270 ;;		_setLoad_Exceptions
 14271 ;;		_setOverTemp_Exceptions
 14272 ;;		_setSw_Initialization
 14273 ;; This function uses a non-reentrant model
 14274 ;;
 14275                           
 14276                           
 14277                           ;psect for function _setLED
 14278  161F                     _setLED:	
 14279                           
 14280                           ;incstack = 0
 14281                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14282                           ;setLED@led stored from wreg
 14283  161F  0020               	movlb	0	; select bank0
 14284  1620  00A3               	movwf	setLED@led
 14285                           
 14286                           ;LED_B1.c: 71: LedPointSelect(led);
 14287  1621  0823               	movf	setLED@led,w
 14288  1622  319D  25C0  3196   	fcall	_LedPointSelect
 14289                           
 14290                           ;LED_B1.c: 72: if (command == 0) {
 14291  1625  0020               	movlb	0	; select bank0
 14292  1626  08A2               	movf	setLED@command,f
 14293  1627  1D03               	skipz
 14294  1628  2E3B               	goto	l8849
 14295                           
 14296                           ;LED_B1.c: 74: if (led == 1) {
 14297  1629  0823               	movf	setLED@led,w
 14298  162A  3A01               	xorlw	1
 14299  162B  1D03               	skipz
 14300  162C  2E2F               	goto	l8841
 14301                           
 14302                           ;LED_B1.c: 78: RA3 = 1;
 14303  162D  158C               	bsf	12,3	;volatile
 14304                           
 14305                           ;LED_B1.c: 80: }
 14306  162E  0008               	return
 14307  162F                     l8841:	
 14308                           
 14309                           ;LED_B1.c: 83: else if (led == 2) {
 14310  162F  0823               	movf	setLED@led,w
 14311  1630  3A02               	xorlw	2
 14312  1631  1D03               	skipz
 14313  1632  2E35               	goto	l8845
 14314                           
 14315                           ;LED_B1.c: 87: RC7 = 1;
 14316  1633  178E               	bsf	14,7	;volatile
 14317                           
 14318                           ;LED_B1.c: 89: }
 14319  1634  0008               	return
 14320  1635                     l8845:	
 14321                           
 14322                           ;LED_B1.c: 101: else if (led == 99) {
 14323  1635  0823               	movf	setLED@led,w
 14324  1636  3A63               	xorlw	99
 14325  1637  1D03               	skipz
 14326  1638  0008               	return
 14327                           
 14328                           ;LED_B1.c: 105: RB5 = 1;
 14329  1639  168D               	bsf	13,5	;volatile
 14330                           
 14331                           ;LED_B1.c: 107: }
 14332                           ;LED_B1.c: 109: } else if (command == 1) {
 14333  163A  0008               	return
 14334  163B                     l8849:	
 14335  163B  0822               	movf	setLED@command,w
 14336  163C  3A01               	xorlw	1
 14337  163D  1D03               	skipz
 14338  163E  2E51               	goto	l8863
 14339                           
 14340                           ;LED_B1.c: 111: if (led == 1) {
 14341  163F  0823               	movf	setLED@led,w
 14342  1640  3A01               	xorlw	1
 14343  1641  1D03               	skipz
 14344  1642  2E45               	goto	l8855
 14345                           
 14346                           ;LED_B1.c: 115: RA3 = 0;
 14347  1643  118C               	bcf	12,3	;volatile
 14348                           
 14349                           ;LED_B1.c: 117: }
 14350  1644  0008               	return
 14351  1645                     l8855:	
 14352                           
 14353                           ;LED_B1.c: 120: else if (led == 2) {
 14354  1645  0823               	movf	setLED@led,w
 14355  1646  3A02               	xorlw	2
 14356  1647  1D03               	skipz
 14357  1648  2E4B               	goto	l8859
 14358                           
 14359                           ;LED_B1.c: 124: RC7 = 0;
 14360  1649  138E               	bcf	14,7	;volatile
 14361                           
 14362                           ;LED_B1.c: 126: }
 14363  164A  0008               	return
 14364  164B                     l8859:	
 14365                           
 14366                           ;LED_B1.c: 138: else if (led == 99) {
 14367  164B  0823               	movf	setLED@led,w
 14368  164C  3A63               	xorlw	99
 14369  164D  1D03               	skipz
 14370  164E  0008               	return
 14371                           
 14372                           ;LED_B1.c: 142: RB5 = 0;
 14373  164F  128D               	bcf	13,5	;volatile
 14374                           
 14375                           ;LED_B1.c: 144: }
 14376                           ;LED_B1.c: 146: } else if (command == 10) {
 14377  1650  0008               	return
 14378  1651                     l8863:	
 14379  1651  0822               	movf	setLED@command,w
 14380  1652  3A0A               	xorlw	10
 14381  1653  1D03               	skipz
 14382  1654  2E73               	goto	l8879
 14383                           
 14384                           ;LED_B1.c: 147: LED->GO = 0;
 14385  1655  0878               	movf	_LED,w
 14386  1656  0086               	movwf	6
 14387  1657  3001               	movlw	1	; select bank2/3
 14388  1658  0087               	movwf	7
 14389  1659  1081               	bcf	1,1
 14390                           
 14391                           ;LED_B1.c: 148: LED->Time = 0;
 14392  165A  0A78               	incf	_LED,w
 14393  165B  0086               	movwf	6
 14394  165C  3001               	movlw	1	; select bank2/3
 14395  165D  0087               	movwf	7
 14396  165E  3000               	movlw	0
 14397  165F  3FC0               	movwi [0]fsr1
 14398  1660  3FC1               	movwi [1]fsr1
 14399                           
 14400                           ;LED_B1.c: 150: if (led == 1) {
 14401  1661  0823               	movf	setLED@led,w
 14402  1662  3A01               	xorlw	1
 14403  1663  1D03               	skipz
 14404  1664  2E67               	goto	l8871
 14405                           
 14406                           ;LED_B1.c: 154: RA3 = 1;
 14407  1665  158C               	bsf	12,3	;volatile
 14408                           
 14409                           ;LED_B1.c: 156: }
 14410  1666  0008               	return
 14411  1667                     l8871:	
 14412                           
 14413                           ;LED_B1.c: 159: else if (led == 2) {
 14414  1667  0823               	movf	setLED@led,w
 14415  1668  3A02               	xorlw	2
 14416  1669  1D03               	skipz
 14417  166A  2E6D               	goto	l8875
 14418                           
 14419                           ;LED_B1.c: 163: RC7 = 1;
 14420  166B  178E               	bsf	14,7	;volatile
 14421                           
 14422                           ;LED_B1.c: 165: }
 14423  166C  0008               	return
 14424  166D                     l8875:	
 14425                           
 14426                           ;LED_B1.c: 177: else if (led == 99) {
 14427  166D  0823               	movf	setLED@led,w
 14428  166E  3A63               	xorlw	99
 14429  166F  1D03               	skipz
 14430  1670  0008               	return
 14431                           
 14432                           ;LED_B1.c: 181: RB5 = 1;
 14433  1671  168D               	bsf	13,5	;volatile
 14434                           
 14435                           ;LED_B1.c: 183: }
 14436                           ;LED_B1.c: 185: } else if (command == 11) {
 14437  1672  0008               	return
 14438  1673                     l8879:	
 14439  1673  0822               	movf	setLED@command,w
 14440  1674  3A0B               	xorlw	11
 14441  1675  1D03               	skipz
 14442  1676  0008               	return
 14443                           
 14444                           ;LED_B1.c: 186: LED->GO = 1;
 14445  1677  0878               	movf	_LED,w
 14446  1678  0086               	movwf	6
 14447  1679  3001               	movlw	1	; select bank2/3
 14448  167A  0087               	movwf	7
 14449  167B  1481               	bsf	1,1
 14450  167C  0008               	return
 14451  167D                     __end_of_setLED:	
 14452                           
 14453                           	psect	text88
 14454  1DC0                     __ptext88:	
 14455 ;; *************** function _LedPointSelect *****************
 14456 ;; Defined at:
 14457 ;;		line 7 in file "../src/LED_B1.c"
 14458 ;; Parameters:    Size  Location     Type
 14459 ;;  led             1    wreg     unsigned char 
 14460 ;; Auto vars:     Size  Location     Type
 14461 ;;  led             1    1[BANK0 ] unsigned char 
 14462 ;; Return value:  Size  Location     Type
 14463 ;;		None               void
 14464 ;; Registers used:
 14465 ;;		wreg
 14466 ;; Tracked objects:
 14467 ;;		On entry : 0/0
 14468 ;;		On exit  : 0/0
 14469 ;;		Unchanged: 0/0
 14470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14472 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14474 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14475 ;;Total ram usage:        2 bytes
 14476 ;; Hardware stack levels used:    1
 14477 ;; Hardware stack levels required when called:    5
 14478 ;; This function calls:
 14479 ;;		Nothing
 14480 ;; This function is called by:
 14481 ;;		_setLED_Initialization
 14482 ;;		_setLED
 14483 ;;		_setLED_Main
 14484 ;; This function uses a non-reentrant model
 14485 ;;
 14486                           
 14487                           
 14488                           ;psect for function _LedPointSelect
 14489  1DC0                     _LedPointSelect:	
 14490                           
 14491                           ;incstack = 0
 14492                           ; Regs used in _LedPointSelect: [wreg]
 14493                           ;LedPointSelect@led stored from wreg
 14494  1DC0  0020               	movlb	0	; select bank0
 14495  1DC1  00A1               	movwf	LedPointSelect@led
 14496                           
 14497                           ;LED_B1.c: 9: if (led == 1) {
 14498  1DC2  0821               	movf	LedPointSelect@led,w
 14499  1DC3  3A01               	xorlw	1
 14500  1DC4  1D03               	skipz
 14501  1DC5  2DCB               	goto	l8617
 14502                           
 14503                           ;LED_B1.c: 10: LED = &VarLED1;
 14504  1DC6  3061               	movlw	_VarLED1& (0+255)
 14505  1DC7  00A0               	movwf	??_LedPointSelect
 14506  1DC8  0820               	movf	??_LedPointSelect,w
 14507  1DC9  00F8               	movwf	_LED
 14508                           
 14509                           ;LED_B1.c: 11: }
 14510  1DCA  0008               	return
 14511  1DCB                     l8617:	
 14512                           
 14513                           ;LED_B1.c: 14: else if (led == 2) {
 14514  1DCB  0821               	movf	LedPointSelect@led,w
 14515  1DCC  3A02               	xorlw	2
 14516  1DCD  1D03               	skipz
 14517  1DCE  2DD4               	goto	l8621
 14518                           
 14519                           ;LED_B1.c: 15: LED = &VarLED2;
 14520  1DCF  3065               	movlw	_VarLED2& (0+255)
 14521  1DD0  00A0               	movwf	??_LedPointSelect
 14522  1DD1  0820               	movf	??_LedPointSelect,w
 14523  1DD2  00F8               	movwf	_LED
 14524                           
 14525                           ;LED_B1.c: 16: }
 14526  1DD3  0008               	return
 14527  1DD4                     l8621:	
 14528                           
 14529                           ;LED_B1.c: 24: else if (led == 99) {
 14530  1DD4  0821               	movf	LedPointSelect@led,w
 14531  1DD5  3A63               	xorlw	99
 14532  1DD6  1D03               	skipz
 14533  1DD7  0008               	return
 14534                           
 14535                           ;LED_B1.c: 25: LED = &VarErrLED;
 14536  1DD8  305D               	movlw	_VarErrLED& (0+255)
 14537  1DD9  00A0               	movwf	??_LedPointSelect
 14538  1DDA  0820               	movf	??_LedPointSelect,w
 14539  1DDB  00F8               	movwf	_LED
 14540  1DDC  0008               	return
 14541  1DDD                     __end_of_LedPointSelect:	
 14542                           
 14543                           	psect	text89
 14544  1D21                     __ptext89:	
 14545 ;; *************** function _DimmerLights_Close *****************
 14546 ;; Defined at:
 14547 ;;		line 407 in file "../src/Dimmer_B1.c"
 14548 ;; Parameters:    Size  Location     Type
 14549 ;;		None
 14550 ;; Auto vars:     Size  Location     Type
 14551 ;;		None
 14552 ;; Return value:  Size  Location     Type
 14553 ;;		None               void
 14554 ;; Registers used:
 14555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14556 ;; Tracked objects:
 14557 ;;		On entry : 0/0
 14558 ;;		On exit  : 0/0
 14559 ;;		Unchanged: 0/0
 14560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14565 ;;Total ram usage:        0 bytes
 14566 ;; Hardware stack levels used:    1
 14567 ;; Hardware stack levels required when called:    6
 14568 ;; This function calls:
 14569 ;;		_getDimmerLights_StatusFlag
 14570 ;;		_setLoad_GO
 14571 ;;		_setMemory_GO
 14572 ;; This function is called by:
 14573 ;;		_DimmerLights_Main
 14574 ;; This function uses a non-reentrant model
 14575 ;;
 14576                           
 14577                           
 14578                           ;psect for function _DimmerLights_Close
 14579  1D21                     _DimmerLights_Close:	
 14580                           
 14581                           ;Dimmer_B1.c: 408: if (Dimmer->Detect == 1) {
 14582                           
 14583                           ;incstack = 0
 14584                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14585  1D21  0876               	movf	_Dimmer,w
 14586  1D22  0086               	movwf	6
 14587  1D23  3001               	movlw	1	; select bank2/3
 14588  1D24  0087               	movwf	7
 14589  1D25  1C01               	btfss	1,0
 14590  1D26  0008               	return
 14591                           
 14592                           ;Dimmer_B1.c: 409: Dimmer->Detect = 0;
 14593  1D27  0876               	movf	_Dimmer,w
 14594  1D28  0086               	movwf	6
 14595  1D29  3001               	movlw	1	; select bank2/3
 14596  1D2A  0087               	movwf	7
 14597  1D2B  1001               	bcf	1,0
 14598                           
 14599                           ;Dimmer_B1.c: 410: if (getDimmerLights_StatusFlag() == 0) {
 14600  1D2C  319B  23A9  319D   	fcall	_getDimmerLights_StatusFlag
 14601  1D2F  3800               	iorlw	0
 14602  1D30  1D03               	skipz
 14603  1D31  0008               	return
 14604                           
 14605                           ;Dimmer_B1.c: 411: setLoad_GO(0);
 14606  1D32  3000               	movlw	0
 14607  1D33  319A  2220  319D   	fcall	_setLoad_GO
 14608                           
 14609                           ;Dimmer_B1.c: 412: setMemory_GO(1);
 14610  1D36  3001               	movlw	1
 14611  1D37  319C  24C4         	fcall	_setMemory_GO
 14612  1D39  0008               	return
 14613  1D3A                     __end_of_DimmerLights_Close:	
 14614                           
 14615                           	psect	text90
 14616  1CC4                     __ptext90:	
 14617 ;; *************** function _setMemory_GO *****************
 14618 ;; Defined at:
 14619 ;;		line 995 in file "../src/MCU_B1.c"
 14620 ;; Parameters:    Size  Location     Type
 14621 ;;  command         1    wreg     unsigned char 
 14622 ;; Auto vars:     Size  Location     Type
 14623 ;;  command         1    2[BANK0 ] unsigned char 
 14624 ;; Return value:  Size  Location     Type
 14625 ;;		None               void
 14626 ;; Registers used:
 14627 ;;		wreg, status,2, status,0
 14628 ;; Tracked objects:
 14629 ;;		On entry : 0/0
 14630 ;;		On exit  : 0/0
 14631 ;;		Unchanged: 0/0
 14632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14635 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;Total ram usage:        3 bytes
 14638 ;; Hardware stack levels used:    1
 14639 ;; Hardware stack levels required when called:    5
 14640 ;; This function calls:
 14641 ;;		Nothing
 14642 ;; This function is called by:
 14643 ;;		_DimmerLights_Close
 14644 ;;		_setDimmerLights
 14645 ;; This function uses a non-reentrant model
 14646 ;;
 14647                           
 14648                           
 14649                           ;psect for function _setMemory_GO
 14650  1CC4                     _setMemory_GO:	
 14651                           
 14652                           ;incstack = 0
 14653                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 14654                           ;setMemory_GO@command stored from wreg
 14655  1CC4  0020               	movlb	0	; select bank0
 14656  1CC5  00A2               	movwf	setMemory_GO@command
 14657                           
 14658                           ;MCU_B1.c: 996: Memory.GO = command;
 14659  1CC6  0822               	movf	setMemory_GO@command,w
 14660  1CC7  0024               	movlb	4	; select bank4
 14661  1CC8  10C4               	bcf	(_Memory^(0+512)+36),1
 14662  1CC9  1D03               	skipz
 14663  1CCA  14C4               	bsf	(_Memory^(0+512)+36),1
 14664                           
 14665                           ;MCU_B1.c: 997: if (command == 0) {
 14666  1CCB  0020               	movlb	0	; select bank0
 14667  1CCC  08A2               	movf	setMemory_GO@command,f
 14668  1CCD  1D03               	skipz
 14669  1CCE  0008               	return
 14670                           
 14671                           ;MCU_B1.c: 998: Memory.Time = command;
 14672  1CCF  0822               	movf	setMemory_GO@command,w
 14673  1CD0  00A0               	movwf	??_setMemory_GO
 14674  1CD1  01A1               	clrf	??_setMemory_GO+1
 14675  1CD2  0820               	movf	??_setMemory_GO,w
 14676  1CD3  0024               	movlb	4	; select bank4
 14677  1CD4  00C2               	movwf	(_Memory^(0+512)+34)
 14678  1CD5  0020               	movlb	0	; select bank0
 14679  1CD6  0821               	movf	??_setMemory_GO+1,w
 14680  1CD7  0024               	movlb	4	; select bank4
 14681  1CD8  00C3               	movwf	((_Memory+1)^(0+512)+34)
 14682  1CD9  0008               	return
 14683  1CDA                     __end_of_setMemory_GO:	
 14684                           
 14685                           	psect	text91
 14686  1A20                     __ptext91:	
 14687 ;; *************** function _setLoad_GO *****************
 14688 ;; Defined at:
 14689 ;;		line 262 in file "../src/OverLoad_B1.c"
 14690 ;; Parameters:    Size  Location     Type
 14691 ;;  command         1    wreg     unsigned char 
 14692 ;; Auto vars:     Size  Location     Type
 14693 ;;  command         1    0[BANK0 ] unsigned char 
 14694 ;; Return value:  Size  Location     Type
 14695 ;;		None               void
 14696 ;; Registers used:
 14697 ;;		wreg
 14698 ;; Tracked objects:
 14699 ;;		On entry : 0/0
 14700 ;;		On exit  : 0/0
 14701 ;;		Unchanged: 0/0
 14702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14707 ;;Total ram usage:        1 bytes
 14708 ;; Hardware stack levels used:    1
 14709 ;; Hardware stack levels required when called:    5
 14710 ;; This function calls:
 14711 ;;		Nothing
 14712 ;; This function is called by:
 14713 ;;		_DimmerLights_Close
 14714 ;; This function uses a non-reentrant model
 14715 ;;
 14716                           
 14717                           
 14718                           ;psect for function _setLoad_GO
 14719  1A20                     _setLoad_GO:	
 14720                           
 14721                           ;incstack = 0
 14722                           ; Regs used in _setLoad_GO: [wreg]
 14723                           ;setLoad_GO@command stored from wreg
 14724  1A20  0020               	movlb	0	; select bank0
 14725  1A21  00A0               	movwf	setLoad_GO@command
 14726                           
 14727                           ;OverLoad_B1.c: 263: Load1.GO = command;
 14728  1A22  0820               	movf	setLoad_GO@command,w
 14729  1A23  0022               	movlb	2	; select bank2
 14730  1A24  10A2               	bcf	_Load1^(0+256),1
 14731  1A25  1D03               	skipz
 14732  1A26  14A2               	bsf	_Load1^(0+256),1
 14733  1A27  0008               	return
 14734  1A28                     __end_of_setLoad_GO:	
 14735                           
 14736                           	psect	text92
 14737  1BA9                     __ptext92:	
 14738 ;; *************** function _getDimmerLights_StatusFlag *****************
 14739 ;; Defined at:
 14740 ;;		line 486 in file "../src/Dimmer_B1.c"
 14741 ;; Parameters:    Size  Location     Type
 14742 ;;		None
 14743 ;; Auto vars:     Size  Location     Type
 14744 ;;  Status          1    1[BANK0 ] unsigned char 
 14745 ;; Return value:  Size  Location     Type
 14746 ;;                  1    wreg      unsigned char 
 14747 ;; Registers used:
 14748 ;;		wreg, status,2
 14749 ;; Tracked objects:
 14750 ;;		On entry : 0/0
 14751 ;;		On exit  : 0/0
 14752 ;;		Unchanged: 0/0
 14753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14755 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;Total ram usage:        3 bytes
 14759 ;; Hardware stack levels used:    1
 14760 ;; Hardware stack levels required when called:    5
 14761 ;; This function calls:
 14762 ;;		Nothing
 14763 ;; This function is called by:
 14764 ;;		_DimmerLights_Close
 14765 ;;		_DimmerLights_Exceptions
 14766 ;; This function uses a non-reentrant model
 14767 ;;
 14768                           
 14769                           
 14770                           ;psect for function _getDimmerLights_StatusFlag
 14771  1BA9                     _getDimmerLights_StatusFlag:	
 14772                           
 14773                           ;Dimmer_B1.c: 487: char Status = 0;
 14774                           
 14775                           ;incstack = 0
 14776                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 14777  1BA9  0020               	movlb	0	; select bank0
 14778  1BAA  01A1               	clrf	getDimmerLights_StatusFlag@Status
 14779                           
 14780                           ;Dimmer_B1.c: 494: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 14781  1BAB  01A2               	clrf	_getDimmerLights_StatusFlag$2576
 14782  1BAC  0AA2               	incf	_getDimmerLights_StatusFlag$2576,f
 14783  1BAD  0023               	movlb	3	; select bank3
 14784  1BAE  1F3E               	btfss	_DimmerLights1^(0+384),6
 14785  1BAF  1B4D               	btfsc	_DimmerLights2^(0+384),6
 14786  1BB0  2BB3               	goto	l8963
 14787  1BB1  0020               	movlb	0	; select bank0
 14788  1BB2  01A2               	clrf	_getDimmerLights_StatusFlag$2576
 14789  1BB3                     l8963:	
 14790  1BB3  0020               	movlb	0	; select bank0
 14791  1BB4  0822               	movf	_getDimmerLights_StatusFlag$2576,w
 14792  1BB5  00A0               	movwf	??_getDimmerLights_StatusFlag
 14793  1BB6  0820               	movf	??_getDimmerLights_StatusFlag,w
 14794  1BB7  00A1               	movwf	getDimmerLights_StatusFlag@Status
 14795                           
 14796                           ;Dimmer_B1.c: 501: return Status;
 14797  1BB8  0821               	movf	getDimmerLights_StatusFlag@Status,w
 14798  1BB9  0008               	return
 14799  1BBA                     __end_of_getDimmerLights_StatusFlag:	
 14800                           
 14801                           	psect	text93
 14802  1CDA                     __ptext93:	
 14803 ;; *************** function _DimmerLights_Initialization *****************
 14804 ;; Defined at:
 14805 ;;		line 345 in file "../src/Dimmer_B1.c"
 14806 ;; Parameters:    Size  Location     Type
 14807 ;;		None
 14808 ;; Auto vars:     Size  Location     Type
 14809 ;;		None
 14810 ;; Return value:  Size  Location     Type
 14811 ;;		None               void
 14812 ;; Registers used:
 14813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14814 ;; Tracked objects:
 14815 ;;		On entry : 0/0
 14816 ;;		On exit  : 0/0
 14817 ;;		Unchanged: 0/0
 14818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14821 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14822 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14823 ;;Total ram usage:        1 bytes
 14824 ;; Hardware stack levels used:    1
 14825 ;; Hardware stack levels required when called:    7
 14826 ;; This function calls:
 14827 ;;		_Dimmer_Initialization
 14828 ;;		_setDimmerLights_Initialization
 14829 ;; This function is called by:
 14830 ;;		_main
 14831 ;; This function uses a non-reentrant model
 14832 ;;
 14833                           
 14834                           
 14835                           ;psect for function _DimmerLights_Initialization
 14836  1CDA                     _DimmerLights_Initialization:	
 14837                           
 14838                           ;Dimmer_B1.c: 348: DimmerLights11 = &DimmerLights1;
 14839                           
 14840                           ;incstack = 0
 14841                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14842  1CDA  30BE               	movlw	_DimmerLights1& (0+255)
 14843  1CDB  0020               	movlb	0	; select bank0
 14844  1CDC  00A4               	movwf	??_DimmerLights_Initialization
 14845  1CDD  0824               	movf	??_DimmerLights_Initialization,w
 14846  1CDE  0021               	movlb	1	; select bank1
 14847  1CDF  00CE               	movwf	_DimmerLights11^(0+128)
 14848                           
 14849                           ;Dimmer_B1.c: 349: setDimmerLights_Initialization(1);
 14850  1CE0  3001               	movlw	1
 14851  1CE1  319F  27A4  319C   	fcall	_setDimmerLights_Initialization
 14852                           
 14853                           ;Dimmer_B1.c: 353: DimmerLights22 = &DimmerLights2;
 14854  1CE4  30CD               	movlw	_DimmerLights2& (0+255)
 14855  1CE5  0020               	movlb	0	; select bank0
 14856  1CE6  00A4               	movwf	??_DimmerLights_Initialization
 14857  1CE7  0824               	movf	??_DimmerLights_Initialization,w
 14858  1CE8  0021               	movlb	1	; select bank1
 14859  1CE9  00CF               	movwf	_DimmerLights22^(0+128)
 14860                           
 14861                           ;Dimmer_B1.c: 354: setDimmerLights_Initialization(2);
 14862  1CEA  3002               	movlw	2
 14863  1CEB  319F  27A4  319C   	fcall	_setDimmerLights_Initialization
 14864                           
 14865                           ;Dimmer_B1.c: 363: Dimmer_Initialization();
 14866  1CEE  3199  21EF         	fcall	_Dimmer_Initialization
 14867  1CF0  0008               	return
 14868  1CF1                     __end_of_DimmerLights_Initialization:	
 14869                           
 14870                           	psect	text94
 14871  1FA4                     __ptext94:	
 14872 ;; *************** function _setDimmerLights_Initialization *****************
 14873 ;; Defined at:
 14874 ;;		line 368 in file "../src/Dimmer_B1.c"
 14875 ;; Parameters:    Size  Location     Type
 14876 ;;  lights          1    wreg     unsigned char 
 14877 ;; Auto vars:     Size  Location     Type
 14878 ;;  lights          1    3[BANK0 ] unsigned char 
 14879 ;; Return value:  Size  Location     Type
 14880 ;;		None               void
 14881 ;; Registers used:
 14882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14883 ;; Tracked objects:
 14884 ;;		On entry : 0/0
 14885 ;;		On exit  : 0/0
 14886 ;;		Unchanged: 0/0
 14887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14890 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14892 ;;Total ram usage:        2 bytes
 14893 ;; Hardware stack levels used:    1
 14894 ;; Hardware stack levels required when called:    6
 14895 ;; This function calls:
 14896 ;;		_DimmerLightsPointSelect
 14897 ;; This function is called by:
 14898 ;;		_DimmerLights_Initialization
 14899 ;; This function uses a non-reentrant model
 14900 ;;
 14901                           
 14902                           
 14903                           ;psect for function _setDimmerLights_Initialization
 14904  1FA4                     _setDimmerLights_Initialization:	
 14905                           
 14906                           ;incstack = 0
 14907                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14908                           ;setDimmerLights_Initialization@lights stored from wreg
 14909  1FA4  0020               	movlb	0	; select bank0
 14910  1FA5  00A3               	movwf	setDimmerLights_Initialization@lights
 14911                           
 14912                           ;Dimmer_B1.c: 370: DimmerLightsPointSelect(lights);
 14913  1FA6  0823               	movf	setDimmerLights_Initialization@lights,w
 14914  1FA7  319C  2424         	fcall	_DimmerLightsPointSelect
 14915                           
 14916                           ;Dimmer_B1.c: 371: DimmerLights->Clear = 1;
 14917  1FA9  0020               	movlb	0	; select bank0
 14918  1FAA  086B               	movf	_DimmerLights,w
 14919  1FAB  3E09               	addlw	9
 14920  1FAC  0086               	movwf	6
 14921  1FAD  3001               	movlw	1	; select bank2/3
 14922  1FAE  0087               	movwf	7
 14923  1FAF  1501               	bsf	1,2
 14924                           
 14925                           ;Dimmer_B1.c: 377: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 14926  1FB0  3020               	movlw	32
 14927  1FB1  00A2               	movwf	??_setDimmerLights_Initialization
 14928  1FB2  086B               	movf	_DimmerLights,w
 14929  1FB3  3E05               	addlw	5
 14930  1FB4  0086               	movwf	6
 14931  1FB5  3001               	movlw	1	; select bank2/3
 14932  1FB6  0087               	movwf	7
 14933  1FB7  0822               	movf	??_setDimmerLights_Initialization,w
 14934  1FB8  0081               	movwf	1
 14935                           
 14936                           ;Dimmer_B1.c: 378: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 14937  1FB9  303C               	movlw	60
 14938  1FBA  00A2               	movwf	??_setDimmerLights_Initialization
 14939  1FBB  086B               	movf	_DimmerLights,w
 14940  1FBC  3E06               	addlw	6
 14941  1FBD  0086               	movwf	6
 14942  1FBE  3001               	movlw	1	; select bank2/3
 14943  1FBF  0087               	movwf	7
 14944  1FC0  0822               	movf	??_setDimmerLights_Initialization,w
 14945  1FC1  0081               	movwf	1
 14946                           
 14947                           ;Dimmer_B1.c: 388: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14948  1FC2  086B               	movf	_DimmerLights,w
 14949  1FC3  3E06               	addlw	6
 14950  1FC4  0086               	movwf	6
 14951  1FC5  3001               	movlw	1	; select bank2/3
 14952  1FC6  0087               	movwf	7
 14953  1FC7  0801               	movf	1,w
 14954  1FC8  00A2               	movwf	??_setDimmerLights_Initialization
 14955  1FC9  086B               	movf	_DimmerLights,w
 14956  1FCA  3E04               	addlw	4
 14957  1FCB  0086               	movwf	6
 14958  1FCC  3001               	movlw	1	; select bank2/3
 14959  1FCD  0087               	movwf	7
 14960  1FCE  0822               	movf	??_setDimmerLights_Initialization,w
 14961  1FCF  0081               	movwf	1
 14962  1FD0  0008               	return
 14963  1FD1                     __end_of_setDimmerLights_Initialization:	
 14964                           
 14965                           	psect	text95
 14966  19EF                     __ptext95:	
 14967 ;; *************** function _Dimmer_Initialization *****************
 14968 ;; Defined at:
 14969 ;;		line 797 in file "../src/Dimmer_B1.c"
 14970 ;; Parameters:    Size  Location     Type
 14971 ;;		None
 14972 ;; Auto vars:     Size  Location     Type
 14973 ;;		None
 14974 ;; Return value:  Size  Location     Type
 14975 ;;		None               void
 14976 ;; Registers used:
 14977 ;;		wreg
 14978 ;; Tracked objects:
 14979 ;;		On entry : 0/0
 14980 ;;		On exit  : 0/0
 14981 ;;		Unchanged: 0/0
 14982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;Total ram usage:        1 bytes
 14988 ;; Hardware stack levels used:    1
 14989 ;; Hardware stack levels required when called:    5
 14990 ;; This function calls:
 14991 ;;		Nothing
 14992 ;; This function is called by:
 14993 ;;		_DimmerLights_Initialization
 14994 ;; This function uses a non-reentrant model
 14995 ;;
 14996                           
 14997                           
 14998                           ;psect for function _Dimmer_Initialization
 14999  19EF                     _Dimmer_Initialization:	
 15000                           
 15001                           ;Dimmer_B1.c: 799: Dimmer = &Dimmer1;
 15002                           
 15003                           ;incstack = 0
 15004                           ; Regs used in _Dimmer_Initialization: [wreg]
 15005  19EF  3069               	movlw	_Dimmer1& (0+255)
 15006  19F0  0020               	movlb	0	; select bank0
 15007  19F1  00A0               	movwf	??_Dimmer_Initialization
 15008  19F2  0820               	movf	??_Dimmer_Initialization,w
 15009  19F3  00F6               	movwf	_Dimmer
 15010  19F4  0008               	return
 15011  19F5                     __end_of_Dimmer_Initialization:	
 15012                           
 15013                           	psect	text96
 15014  1A18                     __ptext96:	
 15015 ;; *************** function _DelayOff_Main *****************
 15016 ;; Defined at:
 15017 ;;		line 41 in file "../src/DelayOff_B1.c"
 15018 ;; Parameters:    Size  Location     Type
 15019 ;;		None
 15020 ;; Auto vars:     Size  Location     Type
 15021 ;;		None
 15022 ;; Return value:  Size  Location     Type
 15023 ;;		None               void
 15024 ;; Registers used:
 15025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15026 ;; Tracked objects:
 15027 ;;		On entry : 0/0
 15028 ;;		On exit  : 0/0
 15029 ;;		Unchanged: 0/0
 15030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15035 ;;Total ram usage:        0 bytes
 15036 ;; Hardware stack levels used:    1
 15037 ;; Hardware stack levels required when called:   10
 15038 ;; This function calls:
 15039 ;;		_DlyOff_Main
 15040 ;; This function is called by:
 15041 ;;		_main
 15042 ;; This function uses a non-reentrant model
 15043 ;;
 15044                           
 15045                           
 15046                           ;psect for function _DelayOff_Main
 15047  1A18                     _DelayOff_Main:	
 15048                           
 15049                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15050                           
 15051                           ;incstack = 0
 15052                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15053  1A18  3001               	movlw	1
 15054  1A19  3188  2093  319A   	fcall	_DlyOff_Main
 15055                           
 15056                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15057  1A1C  3002               	movlw	2
 15058  1A1D  3188  2093         	fcall	_DlyOff_Main
 15059  1A1F  0008               	return
 15060  1A20                     __end_of_DelayOff_Main:	
 15061                           
 15062                           	psect	text97
 15063  0893                     __ptext97:	
 15064 ;; *************** function _DlyOff_Main *****************
 15065 ;; Defined at:
 15066 ;;		line 62 in file "../src/DelayOff_B1.c"
 15067 ;; Parameters:    Size  Location     Type
 15068 ;;  sw              1    wreg     unsigned char 
 15069 ;; Auto vars:     Size  Location     Type
 15070 ;;  sw              1   68[BANK0 ] unsigned char 
 15071 ;; Return value:  Size  Location     Type
 15072 ;;		None               void
 15073 ;; Registers used:
 15074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15075 ;; Tracked objects:
 15076 ;;		On entry : 0/0
 15077 ;;		On exit  : 0/0
 15078 ;;		Unchanged: 0/0
 15079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15082 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15084 ;;Total ram usage:        3 bytes
 15085 ;; Hardware stack levels used:    1
 15086 ;; Hardware stack levels required when called:    9
 15087 ;; This function calls:
 15088 ;;		_DelayOffPointSelect
 15089 ;;		_setBuz
 15090 ;;		_setDimmerLights_Switch
 15091 ;;		_setDimmerLights_Trigger
 15092 ;;		_setRFSW_Status
 15093 ;;		_setRF_DimmerLights
 15094 ;;		_setSw_Status
 15095 ;;		_setTxData
 15096 ;; This function is called by:
 15097 ;;		_DelayOff_Main
 15098 ;; This function uses a non-reentrant model
 15099 ;;
 15100                           
 15101                           
 15102                           ;psect for function _DlyOff_Main
 15103  0893                     _DlyOff_Main:	
 15104                           
 15105                           ;incstack = 0
 15106                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15107                           ;DlyOff_Main@sw stored from wreg
 15108  0893  0020               	movlb	0	; select bank0
 15109  0894  00E4               	movwf	DlyOff_Main@sw
 15110                           
 15111                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15112  0895  0864               	movf	DlyOff_Main@sw,w
 15113  0896  319C  2486  3188   	fcall	_DelayOffPointSelect
 15114                           
 15115                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15116  0899  0020               	movlb	0	; select bank0
 15117  089A  086A               	movf	_DelayOff,w
 15118  089B  0086               	movwf	6
 15119  089C  0187               	clrf	7
 15120  089D  1C81               	btfss	1,1
 15121  089E  0008               	return
 15122                           
 15123                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15124  089F  086A               	movf	_DelayOff,w
 15125  08A0  0086               	movwf	6
 15126  08A1  0187               	clrf	7
 15127  08A2  3001               	movlw	1
 15128  08A3  0781               	addwf	1,f
 15129  08A4  3141               	addfsr 1,1
 15130  08A5  1803               	skipnc
 15131  08A6  0A81               	incf	1,f
 15132                           
 15133                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 15134  08A7  086A               	movf	_DelayOff,w
 15135  08A8  0086               	movwf	6
 15136  08A9  0187               	clrf	7
 15137  08AA  3F40               	moviw [0]fsr1
 15138  08AB  00E2               	movwf	??_DlyOff_Main
 15139  08AC  3F41               	moviw [1]fsr1
 15140  08AD  00E3               	movwf	??_DlyOff_Main+1
 15141  08AE  3016               	movlw	22
 15142  08AF  0263               	subwf	??_DlyOff_Main+1,w
 15143  08B0  3012               	movlw	18
 15144  08B1  1903               	skipnz
 15145  08B2  0262               	subwf	??_DlyOff_Main,w
 15146  08B3  1C03               	skipc
 15147  08B4  0008               	return
 15148                           
 15149                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15150  08B5  086A               	movf	_DelayOff,w
 15151  08B6  0086               	movwf	6
 15152  08B7  0187               	clrf	7
 15153  08B8  3000               	movlw	0
 15154  08B9  3FC0               	movwi [0]fsr1
 15155  08BA  3FC1               	movwi [1]fsr1
 15156                           
 15157                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15158  08BB  3001               	movlw	1
 15159  08BC  00E2               	movwf	??_DlyOff_Main
 15160  08BD  086A               	movf	_DelayOff,w
 15161  08BE  0086               	movwf	6
 15162  08BF  0187               	clrf	7
 15163  08C0  0862               	movf	??_DlyOff_Main,w
 15164  08C1  0781               	addwf	1,f
 15165                           
 15166                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15167  08C2  086A               	movf	_DelayOff,w
 15168  08C3  0086               	movwf	6
 15169  08C4  0187               	clrf	7
 15170  08C5  086A               	movf	_DelayOff,w
 15171  08C6  0084               	movwf	4
 15172  08C7  0185               	clrf	5
 15173  08C8  0800               	movf	0,w
 15174  08C9  0201               	subwf	1,w
 15175  08CA  1C03               	skipc
 15176  08CB  0008               	return
 15177                           
 15178                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15179  08CC  086A               	movf	_DelayOff,w
 15180  08CD  0086               	movwf	6
 15181  08CE  0187               	clrf	7
 15182  08CF  0181               	clrf	1
 15183                           
 15184                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15185  08D0  086A               	movf	_DelayOff,w
 15186  08D1  0086               	movwf	6
 15187  08D2  0187               	clrf	7
 15188  08D3  1081               	bcf	1,1
 15189                           
 15190                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 15191  08D4  01A2               	clrf	setSw_Status@command
 15192  08D5  0864               	movf	DlyOff_Main@sw,w
 15193  08D6  319B  231D  3188   	fcall	_setSw_Status
 15194                           
 15195                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 15196  08D9  0020               	movlb	0	; select bank0
 15197  08DA  01A2               	clrf	setRFSW_Status@command
 15198  08DB  0864               	movf	DlyOff_Main@sw,w
 15199  08DC  319A  22E4  3188   	fcall	_setRFSW_Status
 15200                           
 15201                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 15202  08DF  0020               	movlb	0	; select bank0
 15203  08E0  01DD               	clrf	setRF_DimmerLights@on
 15204  08E1  0864               	movf	DlyOff_Main@sw,w
 15205  08E2  3188  20FE  3188   	fcall	_setRF_DimmerLights
 15206                           
 15207                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 15208  08E5  0020               	movlb	0	; select bank0
 15209  08E6  01A2               	clrf	setDimmerLights_Trigger@command
 15210  08E7  0AA2               	incf	setDimmerLights_Trigger@command,f
 15211  08E8  0864               	movf	DlyOff_Main@sw,w
 15212  08E9  319B  2369  3188   	fcall	_setDimmerLights_Trigger
 15213                           
 15214                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 15215  08EC  0020               	movlb	0	; select bank0
 15216  08ED  01A2               	clrf	setDimmerLights_Switch@command
 15217  08EE  0864               	movf	DlyOff_Main@sw,w
 15218  08EF  319B  2359  3188   	fcall	_setDimmerLights_Switch
 15219                           
 15220                           ;DelayOff_B1.c: 78: setTxData();
 15221  08F2  318F  2743  3188   	fcall	_setTxData
 15222                           
 15223                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 15224  08F5  3064               	movlw	100
 15225  08F6  0020               	movlb	0	; select bank0
 15226  08F7  00A9               	movwf	setBuz@time
 15227  08F8  3000               	movlw	0
 15228  08F9  00AA               	movwf	setBuz@time+1
 15229  08FA  3001               	movlw	1
 15230  08FB  3195  256B         	fcall	_setBuz
 15231  08FD  0008               	return
 15232  08FE                     __end_of_DlyOff_Main:	
 15233                           
 15234                           	psect	text98
 15235  0F43                     __ptext98:	
 15236 ;; *************** function _setTxData *****************
 15237 ;; Defined at:
 15238 ;;		line 186 in file "../src/RF_Control_B1.c"
 15239 ;; Parameters:    Size  Location     Type
 15240 ;;		None
 15241 ;; Auto vars:     Size  Location     Type
 15242 ;;  i               1    0        unsigned char 
 15243 ;; Return value:  Size  Location     Type
 15244 ;;		None               void
 15245 ;; Registers used:
 15246 ;;		wreg, fsr1l, fsr1h
 15247 ;; Tracked objects:
 15248 ;;		On entry : 0/0
 15249 ;;		On exit  : 0/0
 15250 ;;		Unchanged: 0/0
 15251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15254 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15255 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15256 ;;Total ram usage:        1 bytes
 15257 ;; Hardware stack levels used:    1
 15258 ;; Hardware stack levels required when called:    5
 15259 ;; This function calls:
 15260 ;;		Nothing
 15261 ;; This function is called by:
 15262 ;;		_DlyOff_Main
 15263 ;;		_setDimmerLights_Adj
 15264 ;;		_setControl_Lights_Table
 15265 ;;		_setRFSW_Control
 15266 ;;		_setRFSW_AdjControl
 15267 ;;		_Sw_DimmerOnFunc
 15268 ;;		_Sw_DimmerOffFunc
 15269 ;; This function uses a non-reentrant model
 15270 ;;
 15271                           
 15272                           
 15273                           ;psect for function _setTxData
 15274  0F43                     _setTxData:	
 15275                           
 15276                           ;RF_Control_B1.c: 187: char i;
 15277                           ;RF_Control_B1.c: 188: if (RF1.Enable == 1) {
 15278                           
 15279                           ;incstack = 0
 15280                           ; Regs used in _setTxData: [wregfsr1]
 15281  0F43  0021               	movlb	1	; select bank1
 15282  0F44  1C3C               	btfss	_RF1^(0+128),0
 15283  0F45  0008               	return
 15284                           
 15285                           ;RF_Control_B1.c: 190: RF1.TransceiveGO = 1;
 15286  0F46  153C               	bsf	_RF1^(0+128),2
 15287                           
 15288                           ;RF_Control_B1.c: 191: RF1.RunTime = 20;
 15289  0F47  3014               	movlw	20
 15290  0F48  00C3               	movwf	(_RF1^(0+128)+7)
 15291  0F49  3000               	movlw	0
 15292  0F4A  00C4               	movwf	(_RF1^(0+128)+8)
 15293                           
 15294                           ;RF_Control_B1.c: 201: RF_Data[0] = 0x63;
 15295  0F4B  3063               	movlw	99
 15296  0F4C  0020               	movlb	0	; select bank0
 15297  0F4D  00A0               	movwf	??_setTxData
 15298  0F4E  0820               	movf	??_setTxData,w
 15299  0F4F  0023               	movlb	3	; select bank3
 15300  0F50  00A0               	movwf	_RF_Data^(0+384)
 15301                           
 15302                           ;RF_Control_B1.c: 202: RF_Data[1] = 0x02;
 15303  0F51  3002               	movlw	2
 15304  0F52  0020               	movlb	0	; select bank0
 15305  0F53  00A0               	movwf	??_setTxData
 15306  0F54  0820               	movf	??_setTxData,w
 15307  0F55  0023               	movlb	3	; select bank3
 15308  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15309                           
 15310                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15311  0F57  0020               	movlb	0	; select bank0
 15312  0F58  086D               	movf	_product,w
 15313  0F59  0086               	movwf	6
 15314  0F5A  3002               	movlw	2	; select bank4/5
 15315  0F5B  0087               	movwf	7
 15316  0F5C  3002               	movlw	2	; select bank4/5
 15317  0F5D  3F42               	moviw [2]fsr1
 15318  0F5E  0023               	movlb	3	; select bank3
 15319  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15320                           
 15321                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15322  0F60  0020               	movlb	0	; select bank0
 15323  0F61  086D               	movf	_product,w
 15324  0F62  0086               	movwf	6
 15325  0F63  3002               	movlw	2	; select bank4/5
 15326  0F64  0087               	movwf	7
 15327  0F65  3002               	movlw	2	; select bank4/5
 15328  0F66  3F43               	moviw [3]fsr1
 15329  0F67  0023               	movlb	3	; select bank3
 15330  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15331                           
 15332                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15333  0F69  0020               	movlb	0	; select bank0
 15334  0F6A  086D               	movf	_product,w
 15335  0F6B  0086               	movwf	6
 15336  0F6C  3002               	movlw	2	; select bank4/5
 15337  0F6D  0087               	movwf	7
 15338  0F6E  3002               	movlw	2	; select bank4/5
 15339  0F6F  3F44               	moviw [4]fsr1
 15340  0F70  0023               	movlb	3	; select bank3
 15341  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15342                           
 15343                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15344  0F72  0020               	movlb	0	; select bank0
 15345  0F73  086D               	movf	_product,w
 15346  0F74  0086               	movwf	6
 15347  0F75  3002               	movlw	2	; select bank4/5
 15348  0F76  0087               	movwf	7
 15349  0F77  3002               	movlw	2	; select bank4/5
 15350  0F78  3F45               	moviw [5]fsr1
 15351  0F79  0023               	movlb	3	; select bank3
 15352  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15353                           
 15354                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15355  0F7B  0020               	movlb	0	; select bank0
 15356  0F7C  086D               	movf	_product,w
 15357  0F7D  0086               	movwf	6
 15358  0F7E  3002               	movlw	2	; select bank4/5
 15359  0F7F  0087               	movwf	7
 15360  0F80  3002               	movlw	2	; select bank4/5
 15361  0F81  3F46               	moviw [6]fsr1
 15362  0F82  0023               	movlb	3	; select bank3
 15363  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15364                           
 15365                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15366  0F84  0020               	movlb	0	; select bank0
 15367  0F85  086D               	movf	_product,w
 15368  0F86  0086               	movwf	6
 15369  0F87  3002               	movlw	2	; select bank4/5
 15370  0F88  0087               	movwf	7
 15371  0F89  3002               	movlw	2	; select bank4/5
 15372  0F8A  3F47               	moviw [7]fsr1
 15373  0F8B  0023               	movlb	3	; select bank3
 15374  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15375                           
 15376                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15377  0F8D  0020               	movlb	0	; select bank0
 15378  0F8E  086D               	movf	_product,w
 15379  0F8F  0086               	movwf	6
 15380  0F90  3002               	movlw	2	; select bank4/5
 15381  0F91  0087               	movwf	7
 15382  0F92  3002               	movlw	2	; select bank4/5
 15383  0F93  3F48               	moviw [8]fsr1
 15384  0F94  0023               	movlb	3	; select bank3
 15385  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15386                           
 15387                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15388  0F96  0020               	movlb	0	; select bank0
 15389  0F97  086D               	movf	_product,w
 15390  0F98  0086               	movwf	6
 15391  0F99  3002               	movlw	2	; select bank4/5
 15392  0F9A  0087               	movwf	7
 15393  0F9B  3002               	movlw	2	; select bank4/5
 15394  0F9C  3F49               	moviw [9]fsr1
 15395  0F9D  0023               	movlb	3	; select bank3
 15396  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15397                           
 15398                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15399  0F9F  0020               	movlb	0	; select bank0
 15400  0FA0  086D               	movf	_product,w
 15401  0FA1  0086               	movwf	6
 15402  0FA2  3002               	movlw	2	; select bank4/5
 15403  0FA3  0087               	movwf	7
 15404  0FA4  3002               	movlw	2	; select bank4/5
 15405  0FA5  3F4A               	moviw [10]fsr1
 15406  0FA6  0023               	movlb	3	; select bank3
 15407  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15408                           
 15409                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15410  0FA8  0020               	movlb	0	; select bank0
 15411  0FA9  086D               	movf	_product,w
 15412  0FAA  0086               	movwf	6
 15413  0FAB  3002               	movlw	2	; select bank4/5
 15414  0FAC  0087               	movwf	7
 15415  0FAD  3002               	movlw	2	; select bank4/5
 15416  0FAE  3F4B               	moviw [11]fsr1
 15417  0FAF  0023               	movlb	3	; select bank3
 15418  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15419                           
 15420                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15421  0FB1  0020               	movlb	0	; select bank0
 15422  0FB2  086D               	movf	_product,w
 15423  0FB3  0086               	movwf	6
 15424  0FB4  3002               	movlw	2	; select bank4/5
 15425  0FB5  0087               	movwf	7
 15426  0FB6  3002               	movlw	2	; select bank4/5
 15427  0FB7  3F4C               	moviw [12]fsr1
 15428  0FB8  0023               	movlb	3	; select bank3
 15429  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15430                           
 15431                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15432  0FBA  0020               	movlb	0	; select bank0
 15433  0FBB  086D               	movf	_product,w
 15434  0FBC  0086               	movwf	6
 15435  0FBD  3002               	movlw	2	; select bank4/5
 15436  0FBE  0087               	movwf	7
 15437  0FBF  3002               	movlw	2	; select bank4/5
 15438  0FC0  3F4D               	moviw [13]fsr1
 15439  0FC1  0023               	movlb	3	; select bank3
 15440  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15441                           
 15442                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15443  0FC3  0020               	movlb	0	; select bank0
 15444  0FC4  086D               	movf	_product,w
 15445  0FC5  0086               	movwf	6
 15446  0FC6  3002               	movlw	2	; select bank4/5
 15447  0FC7  0087               	movwf	7
 15448  0FC8  3002               	movlw	2	; select bank4/5
 15449  0FC9  3F4E               	moviw [14]fsr1
 15450  0FCA  0023               	movlb	3	; select bank3
 15451  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15452                           
 15453                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15454  0FCC  0020               	movlb	0	; select bank0
 15455  0FCD  086D               	movf	_product,w
 15456  0FCE  0086               	movwf	6
 15457  0FCF  3002               	movlw	2	; select bank4/5
 15458  0FD0  0087               	movwf	7
 15459  0FD1  3002               	movlw	2	; select bank4/5
 15460  0FD2  3F4F               	moviw [15]fsr1
 15461  0FD3  0023               	movlb	3	; select bank3
 15462  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15463                           
 15464                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15465  0FD5  0020               	movlb	0	; select bank0
 15466  0FD6  086D               	movf	_product,w
 15467  0FD7  0086               	movwf	6
 15468  0FD8  3002               	movlw	2	; select bank4/5
 15469  0FD9  0087               	movwf	7
 15470  0FDA  3002               	movlw	2	; select bank4/5
 15471  0FDB  3F50               	moviw [16]fsr1
 15472  0FDC  0023               	movlb	3	; select bank3
 15473  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15474                           
 15475                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15476  0FDE  0020               	movlb	0	; select bank0
 15477  0FDF  086D               	movf	_product,w
 15478  0FE0  0086               	movwf	6
 15479  0FE1  3002               	movlw	2	; select bank4/5
 15480  0FE2  0087               	movwf	7
 15481  0FE3  3002               	movlw	2	; select bank4/5
 15482  0FE4  3F51               	moviw [17]fsr1
 15483  0FE5  0023               	movlb	3	; select bank3
 15484  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15485                           
 15486                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15487  0FE7  0020               	movlb	0	; select bank0
 15488  0FE8  086D               	movf	_product,w
 15489  0FE9  0086               	movwf	6
 15490  0FEA  3002               	movlw	2	; select bank4/5
 15491  0FEB  0087               	movwf	7
 15492  0FEC  3002               	movlw	2	; select bank4/5
 15493  0FED  3F52               	moviw [18]fsr1
 15494  0FEE  0023               	movlb	3	; select bank3
 15495  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15496                           
 15497                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15498  0FF0  0020               	movlb	0	; select bank0
 15499  0FF1  086D               	movf	_product,w
 15500  0FF2  0086               	movwf	6
 15501  0FF3  3002               	movlw	2	; select bank4/5
 15502  0FF4  0087               	movwf	7
 15503  0FF5  3002               	movlw	2	; select bank4/5
 15504  0FF6  3F53               	moviw [19]fsr1
 15505  0FF7  0023               	movlb	3	; select bank3
 15506  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15507                           
 15508                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15509  0FF9  30D2               	movlw	210
 15510  0FFA  0020               	movlb	0	; select bank0
 15511  0FFB  00A0               	movwf	??_setTxData
 15512  0FFC  0820               	movf	??_setTxData,w
 15513  0FFD  0023               	movlb	3	; select bank3
 15514  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15515  0FFF  0008               	return
 15516  1000                     __end_of_setTxData:	
 15517                           
 15518                           	psect	text99
 15519  1B1D                     __ptext99:	
 15520 ;; *************** function _setSw_Status *****************
 15521 ;; Defined at:
 15522 ;;		line 111 in file "../src/Switch_B1.c"
 15523 ;; Parameters:    Size  Location     Type
 15524 ;;  sw              1    wreg     unsigned char 
 15525 ;;  command         1    2[BANK0 ] unsigned char 
 15526 ;; Auto vars:     Size  Location     Type
 15527 ;;  sw              1    3[BANK0 ] unsigned char 
 15528 ;; Return value:  Size  Location     Type
 15529 ;;		None               void
 15530 ;; Registers used:
 15531 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15532 ;; Tracked objects:
 15533 ;;		On entry : 0/0
 15534 ;;		On exit  : 0/0
 15535 ;;		Unchanged: 0/0
 15536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15537 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15538 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15540 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15541 ;;Total ram usage:        2 bytes
 15542 ;; Hardware stack levels used:    1
 15543 ;; Hardware stack levels required when called:    6
 15544 ;; This function calls:
 15545 ;;		_SwPointSelect
 15546 ;; This function is called by:
 15547 ;;		_DlyOff_Main
 15548 ;;		_setDimmerLights_ERROR
 15549 ;;		_setControl_Lights_Table
 15550 ;;		_setRFSW_Control
 15551 ;; This function uses a non-reentrant model
 15552 ;;
 15553                           
 15554                           
 15555                           ;psect for function _setSw_Status
 15556  1B1D                     _setSw_Status:	
 15557                           
 15558                           ;incstack = 0
 15559                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15560                           ;setSw_Status@sw stored from wreg
 15561  1B1D  0020               	movlb	0	; select bank0
 15562  1B1E  00A3               	movwf	setSw_Status@sw
 15563                           
 15564                           ;Switch_B1.c: 112: SwPointSelect(sw);
 15565  1B1F  0823               	movf	setSw_Status@sw,w
 15566  1B20  3187  27EC         	fcall	_SwPointSelect
 15567                           
 15568                           ;Switch_B1.c: 113: Sw->Status = command;
 15569  1B22  0020               	movlb	0	; select bank0
 15570  1B23  086C               	movf	_Sw,w
 15571  1B24  0086               	movwf	6
 15572  1B25  3001               	movlw	1	; select bank2/3
 15573  1B26  0087               	movwf	7
 15574  1B27  0822               	movf	setSw_Status@command,w
 15575  1B28  1301               	bcf	1,6
 15576  1B29  1D03               	skipz
 15577  1B2A  1701               	bsf	1,6
 15578  1B2B  0008               	return
 15579  1B2C                     __end_of_setSw_Status:	
 15580                           
 15581                           	psect	text100
 15582  07EC                     __ptext100:	
 15583 ;; *************** function _SwPointSelect *****************
 15584 ;; Defined at:
 15585 ;;		line 21 in file "../src/Switch_B1.c"
 15586 ;; Parameters:    Size  Location     Type
 15587 ;;  sw              1    wreg     unsigned char 
 15588 ;; Auto vars:     Size  Location     Type
 15589 ;;  sw              1    1[BANK0 ] unsigned char 
 15590 ;; Return value:  Size  Location     Type
 15591 ;;		None               void
 15592 ;; Registers used:
 15593 ;;		wreg
 15594 ;; Tracked objects:
 15595 ;;		On entry : 0/0
 15596 ;;		On exit  : 0/0
 15597 ;;		Unchanged: 0/0
 15598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15600 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15603 ;;Total ram usage:        2 bytes
 15604 ;; Hardware stack levels used:    1
 15605 ;; Hardware stack levels required when called:    5
 15606 ;; This function calls:
 15607 ;;		Nothing
 15608 ;; This function is called by:
 15609 ;;		_setSw_Enable
 15610 ;;		_setSw_Status
 15611 ;;		_setSw_Main
 15612 ;;		_Sw_Detect
 15613 ;; This function uses a non-reentrant model
 15614 ;;
 15615                           
 15616                           
 15617                           ;psect for function _SwPointSelect
 15618  07EC                     _SwPointSelect:	
 15619                           
 15620                           ;incstack = 0
 15621                           ; Regs used in _SwPointSelect: [wreg]
 15622                           ;SwPointSelect@sw stored from wreg
 15623  07EC  0020               	movlb	0	; select bank0
 15624  07ED  00A1               	movwf	SwPointSelect@sw
 15625                           
 15626                           ;Switch_B1.c: 24: if (sw == 1) {
 15627  07EE  0821               	movf	SwPointSelect@sw,w
 15628  07EF  3A01               	xorlw	1
 15629  07F0  1D03               	skipz
 15630  07F1  2FF7               	goto	l8635
 15631                           
 15632                           ;Switch_B1.c: 25: Sw = &Sw1;
 15633  07F2  3054               	movlw	_Sw1& (0+255)
 15634  07F3  00A0               	movwf	??_SwPointSelect
 15635  07F4  0820               	movf	??_SwPointSelect,w
 15636  07F5  00EC               	movwf	_Sw
 15637                           
 15638                           ;Switch_B1.c: 26: }
 15639  07F6  0008               	return
 15640  07F7                     l8635:	
 15641                           
 15642                           ;Switch_B1.c: 29: else if (sw == 2) {
 15643  07F7  0821               	movf	SwPointSelect@sw,w
 15644  07F8  3A02               	xorlw	2
 15645  07F9  1D03               	skipz
 15646  07FA  0008               	return
 15647                           
 15648                           ;Switch_B1.c: 30: Sw = &Sw2;
 15649  07FB  30DC               	movlw	_Sw2& (0+255)
 15650  07FC  00A0               	movwf	??_SwPointSelect
 15651  07FD  0820               	movf	??_SwPointSelect,w
 15652  07FE  00EC               	movwf	_Sw
 15653  07FF  0008               	return
 15654  0800                     __end_of_SwPointSelect:	
 15655                           
 15656                           	psect	text101
 15657  08FE                     __ptext101:	
 15658 ;; *************** function _setRF_DimmerLights *****************
 15659 ;; Defined at:
 15660 ;;		line 452 in file "../src/RF_Control_B1.c"
 15661 ;; Parameters:    Size  Location     Type
 15662 ;;  lights          1    wreg     unsigned char 
 15663 ;;  on              1   61[BANK0 ] unsigned char 
 15664 ;; Auto vars:     Size  Location     Type
 15665 ;;  lights          1   65[BANK0 ] unsigned char 
 15666 ;;  status          1   64[BANK0 ] unsigned char 
 15667 ;; Return value:  Size  Location     Type
 15668 ;;		None               void
 15669 ;; Registers used:
 15670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15671 ;; Tracked objects:
 15672 ;;		On entry : 0/0
 15673 ;;		On exit  : 0/0
 15674 ;;		Unchanged: 0/0
 15675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15676 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15677 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15678 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15679 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15680 ;;Total ram usage:        5 bytes
 15681 ;; Hardware stack levels used:    1
 15682 ;; Hardware stack levels required when called:    8
 15683 ;; This function calls:
 15684 ;;		_setPercentValue
 15685 ;; This function is called by:
 15686 ;;		_DlyOff_Main
 15687 ;;		_setDimmerLights_Adj
 15688 ;;		_setRFSW_Control
 15689 ;;		_Sw_DimmerOnFunc
 15690 ;;		_Sw_DimmerOffFunc
 15691 ;; This function uses a non-reentrant model
 15692 ;;
 15693                           
 15694                           
 15695                           ;psect for function _setRF_DimmerLights
 15696  08FE                     _setRF_DimmerLights:	
 15697                           
 15698                           ;incstack = 0
 15699                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15700                           ;setRF_DimmerLights@lights stored from wreg
 15701  08FE  0020               	movlb	0	; select bank0
 15702  08FF  00E1               	movwf	setRF_DimmerLights@lights
 15703                           
 15704                           ;RF_Control_B1.c: 453: char status;
 15705                           ;RF_Control_B1.c: 454: status = 1;
 15706  0900  01E0               	clrf	setRF_DimmerLights@status
 15707  0901  0AE0               	incf	setRF_DimmerLights@status,f
 15708                           
 15709                           ;RF_Control_B1.c: 455: status <<= (lights - 1);
 15710  0902  0861               	movf	setRF_DimmerLights@lights,w
 15711  0903  3EFF               	addlw	-1
 15712  0904  0A89               	incf	9,f
 15713  0905  2908               	goto	u8790
 15714  0906                     u8795:	
 15715  0906  1003               	clrc
 15716  0907  0DE0               	rlf	setRF_DimmerLights@status,f
 15717  0908                     u8790:	
 15718  0908  3EFF               	addlw	-1
 15719  0909  1D03               	skipz
 15720  090A  2906               	goto	u8795
 15721                           
 15722                           ;RF_Control_B1.c: 456: product->Data[11]=lights;
 15723  090B  0861               	movf	setRF_DimmerLights@lights,w
 15724  090C  00DE               	movwf	??_setRF_DimmerLights
 15725  090D  086D               	movf	_product,w
 15726  090E  3E0B               	addlw	11
 15727  090F  0086               	movwf	6
 15728  0910  3002               	movlw	2	; select bank4/5
 15729  0911  0087               	movwf	7
 15730  0912  085E               	movf	??_setRF_DimmerLights,w
 15731  0913  0081               	movwf	1
 15732                           
 15733                           ;RF_Control_B1.c: 459: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 15734  0914  3020               	movlw	32
 15735  0915  3193  2342  3188   	fcall	_setPercentValue
 15736  0918  0020               	movlb	0	; select bank0
 15737  0919  00DE               	movwf	??_setRF_DimmerLights
 15738  091A  0861               	movf	setRF_DimmerLights@lights,w
 15739  091B  3E14               	addlw	20
 15740  091C  076D               	addwf	_product,w
 15741  091D  00DF               	movwf	??_setRF_DimmerLights+1
 15742  091E  085F               	movf	??_setRF_DimmerLights+1,w
 15743  091F  0086               	movwf	6
 15744  0920  3002               	movlw	2	; select bank4/5
 15745  0921  0087               	movwf	7
 15746  0922  085E               	movf	??_setRF_DimmerLights,w
 15747  0923  0081               	movwf	1
 15748                           
 15749                           ;RF_Control_B1.c: 462: product->Data[9]=product->Data[20 + lights];
 15750  0924  0861               	movf	setRF_DimmerLights@lights,w
 15751  0925  3E14               	addlw	20
 15752  0926  076D               	addwf	_product,w
 15753  0927  00DE               	movwf	??_setRF_DimmerLights
 15754  0928  085E               	movf	??_setRF_DimmerLights,w
 15755  0929  0086               	movwf	6
 15756  092A  3002               	movlw	2	; select bank4/5
 15757  092B  0087               	movwf	7
 15758  092C  0801               	movf	1,w
 15759  092D  00DF               	movwf	??_setRF_DimmerLights+1
 15760  092E  086D               	movf	_product,w
 15761  092F  3E09               	addlw	9
 15762  0930  0086               	movwf	6
 15763  0931  3002               	movlw	2	; select bank4/5
 15764  0932  0087               	movwf	7
 15765  0933  085F               	movf	??_setRF_DimmerLights+1,w
 15766  0934  0081               	movwf	1
 15767                           
 15768                           ;RF_Control_B1.c: 463: product->Data[17]=product->Data[26 + lights];
 15769  0935  0861               	movf	setRF_DimmerLights@lights,w
 15770  0936  3E1A               	addlw	26
 15771  0937  076D               	addwf	_product,w
 15772  0938  00DE               	movwf	??_setRF_DimmerLights
 15773  0939  085E               	movf	??_setRF_DimmerLights,w
 15774  093A  0086               	movwf	6
 15775  093B  3002               	movlw	2	; select bank4/5
 15776  093C  0087               	movwf	7
 15777  093D  0801               	movf	1,w
 15778  093E  00DF               	movwf	??_setRF_DimmerLights+1
 15779  093F  086D               	movf	_product,w
 15780  0940  3E11               	addlw	17
 15781  0941  0086               	movwf	6
 15782  0942  3002               	movlw	2	; select bank4/5
 15783  0943  0087               	movwf	7
 15784  0944  085F               	movf	??_setRF_DimmerLights+1,w
 15785  0945  0081               	movwf	1
 15786                           
 15787                           ;RF_Control_B1.c: 464: if (on == 1) {
 15788  0946  085D               	movf	setRF_DimmerLights@on,w
 15789  0947  3A01               	xorlw	1
 15790  0948  1D03               	skipz
 15791  0949  295A               	goto	l8735
 15792                           
 15793                           ;RF_Control_B1.c: 465: product->Data[15]=(product->Data[15] | status);
 15794  094A  086D               	movf	_product,w
 15795  094B  3E0F               	addlw	15
 15796  094C  0086               	movwf	6
 15797  094D  3002               	movlw	2	; select bank4/5
 15798  094E  0087               	movwf	7
 15799  094F  0801               	movf	1,w
 15800  0950  0460               	iorwf	setRF_DimmerLights@status,w
 15801  0951  00DE               	movwf	??_setRF_DimmerLights
 15802  0952  086D               	movf	_product,w
 15803  0953  3E0F               	addlw	15
 15804  0954  0086               	movwf	6
 15805  0955  3002               	movlw	2	; select bank4/5
 15806  0956  0087               	movwf	7
 15807  0957  085E               	movf	??_setRF_DimmerLights,w
 15808  0958  0081               	movwf	1
 15809                           
 15810                           ;RF_Control_B1.c: 466: } else {
 15811  0959  0008               	return
 15812  095A                     l8735:	
 15813                           
 15814                           ;RF_Control_B1.c: 467: product->Data[15]=(product->Data[15]&(~status));
 15815  095A  086D               	movf	_product,w
 15816  095B  3E0F               	addlw	15
 15817  095C  0086               	movwf	6
 15818  095D  3002               	movlw	2	; select bank4/5
 15819  095E  0087               	movwf	7
 15820  095F  0960               	comf	setRF_DimmerLights@status,w
 15821  0960  0501               	andwf	1,w
 15822  0961  00DE               	movwf	??_setRF_DimmerLights
 15823  0962  086D               	movf	_product,w
 15824  0963  3E0F               	addlw	15
 15825  0964  0086               	movwf	6
 15826  0965  3002               	movlw	2	; select bank4/5
 15827  0966  0087               	movwf	7
 15828  0967  085E               	movf	??_setRF_DimmerLights,w
 15829  0968  0081               	movwf	1
 15830  0969  0008               	return
 15831  096A                     __end_of_setRF_DimmerLights:	
 15832                           
 15833                           	psect	text102
 15834  1342                     __ptext102:	
 15835 ;; *************** function _setPercentValue *****************
 15836 ;; Defined at:
 15837 ;;		line 779 in file "../src/Dimmer_B1.c"
 15838 ;; Parameters:    Size  Location     Type
 15839 ;;  value           1    wreg     unsigned char 
 15840 ;; Auto vars:     Size  Location     Type
 15841 ;;  value           1   57[BANK0 ] unsigned char 
 15842 ;;  i               3   58[BANK0 ] float 
 15843 ;; Return value:  Size  Location     Type
 15844 ;;                  1    wreg      unsigned char 
 15845 ;; Registers used:
 15846 ;;		wreg, status,2, status,0, pclath, cstack
 15847 ;; Tracked objects:
 15848 ;;		On entry : 0/0
 15849 ;;		On exit  : 0/0
 15850 ;;		Unchanged: 0/0
 15851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15853 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15855 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15856 ;;Total ram usage:        4 bytes
 15857 ;; Hardware stack levels used:    1
 15858 ;; Hardware stack levels required when called:    7
 15859 ;; This function calls:
 15860 ;;		___awtoft
 15861 ;;		___ftdiv
 15862 ;;		___fttol
 15863 ;; This function is called by:
 15864 ;;		_Flash_Memory_Initialization
 15865 ;;		_setRF_DimmerLights
 15866 ;; This function uses a non-reentrant model
 15867 ;;
 15868                           
 15869                           
 15870                           ;psect for function _setPercentValue
 15871  1342                     _setPercentValue:	
 15872                           
 15873                           ;incstack = 0
 15874                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15875                           ;setPercentValue@value stored from wreg
 15876  1342  0020               	movlb	0	; select bank0
 15877  1343  00D9               	movwf	setPercentValue@value
 15878                           
 15879                           ;Dimmer_B1.c: 781: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 15880  1344  3000               	movlw	0
 15881  1345  00DA               	movwf	setPercentValue@i
 15882  1346  30E0               	movlw	224
 15883  1347  00DB               	movwf	setPercentValue@i+1
 15884  1348  3041               	movlw	65
 15885  1349  00DC               	movwf	setPercentValue@i+2
 15886                           
 15887                           ;Dimmer_B1.c: 782: i /= 100;
 15888  134A  3000               	movlw	0
 15889  134B  00AE               	movwf	___ftdiv@f2
 15890  134C  30C8               	movlw	200
 15891  134D  00AF               	movwf	___ftdiv@f2+1
 15892  134E  3042               	movlw	66
 15893  134F  00B0               	movwf	___ftdiv@f2+2
 15894  1350  085A               	movf	setPercentValue@i,w
 15895  1351  00B1               	movwf	___ftdiv@f1
 15896  1352  085B               	movf	setPercentValue@i+1,w
 15897  1353  00B2               	movwf	___ftdiv@f1+1
 15898  1354  085C               	movf	setPercentValue@i+2,w
 15899  1355  00B3               	movwf	___ftdiv@f1+2
 15900  1356  318D  25E6  3193   	fcall	___ftdiv
 15901  1359  0020               	movlb	0	; select bank0
 15902  135A  082E               	movf	?___ftdiv,w
 15903  135B  00DA               	movwf	setPercentValue@i
 15904  135C  082F               	movf	?___ftdiv+1,w
 15905  135D  00DB               	movwf	setPercentValue@i+1
 15906  135E  0830               	movf	?___ftdiv+2,w
 15907  135F  00DC               	movwf	setPercentValue@i+2
 15908                           
 15909                           ;Dimmer_B1.c: 783: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 15910  1360  0859               	movf	setPercentValue@value,w
 15911  1361  3EE0               	addlw	224
 15912  1362  00A8               	movwf	___awtoft@c
 15913  1363  30FF               	movlw	255
 15914  1364  1803               	skipnc
 15915  1365  3000               	movlw	0
 15916  1366  00A9               	movwf	___awtoft@c+1
 15917  1367  319E  269A  3193   	fcall	___awtoft
 15918  136A  0020               	movlb	0	; select bank0
 15919  136B  0828               	movf	?___awtoft,w
 15920  136C  00B1               	movwf	___ftdiv@f1
 15921  136D  0829               	movf	?___awtoft+1,w
 15922  136E  00B2               	movwf	___ftdiv@f1+1
 15923  136F  082A               	movf	?___awtoft+2,w
 15924  1370  00B3               	movwf	___ftdiv@f1+2
 15925  1371  085A               	movf	setPercentValue@i,w
 15926  1372  00AE               	movwf	___ftdiv@f2
 15927  1373  085B               	movf	setPercentValue@i+1,w
 15928  1374  00AF               	movwf	___ftdiv@f2+1
 15929  1375  085C               	movf	setPercentValue@i+2,w
 15930  1376  00B0               	movwf	___ftdiv@f2+2
 15931  1377  318D  25E6  3193   	fcall	___ftdiv
 15932  137A  0020               	movlb	0	; select bank0
 15933  137B  082E               	movf	?___ftdiv,w
 15934  137C  00CB               	movwf	___fttol@f1
 15935  137D  082F               	movf	?___ftdiv+1,w
 15936  137E  00CC               	movwf	___fttol@f1+1
 15937  137F  0830               	movf	?___ftdiv+2,w
 15938  1380  00CD               	movwf	___fttol@f1+2
 15939  1381  318B  23A8         	fcall	___fttol
 15940  1383  0020               	movlb	0	; select bank0
 15941  1384  034B               	decf	?___fttol,w
 15942  1385  3AFF               	xorlw	255
 15943  1386  3E64               	addlw	100
 15944  1387  0008               	return
 15945  1388                     __end_of_setPercentValue:	
 15946                           
 15947                           	psect	text103
 15948  0BA8                     __ptext103:	
 15949 ;; *************** function ___fttol *****************
 15950 ;; Defined at:
 15951 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15952 ;; Parameters:    Size  Location     Type
 15953 ;;  f1              3   43[BANK0 ] float 
 15954 ;; Auto vars:     Size  Location     Type
 15955 ;;  lval            4   52[BANK0 ] unsigned long 
 15956 ;;  exp1            1   56[BANK0 ] unsigned char 
 15957 ;;  sign1           1   51[BANK0 ] unsigned char 
 15958 ;; Return value:  Size  Location     Type
 15959 ;;                  4   43[BANK0 ] long 
 15960 ;; Registers used:
 15961 ;;		wreg, status,2, status,0
 15962 ;; Tracked objects:
 15963 ;;		On entry : 0/0
 15964 ;;		On exit  : 0/0
 15965 ;;		Unchanged: 0/0
 15966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15967 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15968 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15969 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15970 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15971 ;;Total ram usage:       14 bytes
 15972 ;; Hardware stack levels used:    1
 15973 ;; Hardware stack levels required when called:    5
 15974 ;; This function calls:
 15975 ;;		Nothing
 15976 ;; This function is called by:
 15977 ;;		_getPercentValue
 15978 ;;		_setPercentValue
 15979 ;; This function uses a non-reentrant model
 15980 ;;
 15981                           
 15982                           
 15983                           ;psect for function ___fttol
 15984  0BA8                     ___fttol:	
 15985                           
 15986                           ;incstack = 0
 15987                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15988  0BA8  0020               	movlb	0	; select bank0
 15989  0BA9  084B               	movf	___fttol@f1,w
 15990  0BAA  00CF               	movwf	??___fttol
 15991  0BAB  084C               	movf	___fttol@f1+1,w
 15992  0BAC  00D0               	movwf	??___fttol+1
 15993  0BAD  084D               	movf	___fttol@f1+2,w
 15994  0BAE  00D1               	movwf	??___fttol+2
 15995  0BAF  1003               	clrc
 15996  0BB0  0D50               	rlf	??___fttol+1,w
 15997  0BB1  0D51               	rlf	??___fttol+2,w
 15998  0BB2  00D2               	movwf	??___fttol+3
 15999  0BB3  0852               	movf	??___fttol+3,w
 16000  0BB4  00D8               	movwf	___fttol@exp1
 16001  0BB5  08D8               	movf	___fttol@exp1,f
 16002  0BB6  1D03               	skipz
 16003  0BB7  2BC1               	goto	l6113
 16004  0BB8  3000               	movlw	0
 16005  0BB9  00CE               	movwf	?___fttol+3
 16006  0BBA  3000               	movlw	0
 16007  0BBB  00CD               	movwf	?___fttol+2
 16008  0BBC  3000               	movlw	0
 16009  0BBD  00CC               	movwf	?___fttol+1
 16010  0BBE  3000               	movlw	0
 16011  0BBF  00CB               	movwf	?___fttol
 16012  0BC0  0008               	return
 16013  0BC1                     l6113:	
 16014  0BC1  084B               	movf	___fttol@f1,w
 16015  0BC2  00CF               	movwf	??___fttol
 16016  0BC3  084C               	movf	___fttol@f1+1,w
 16017  0BC4  00D0               	movwf	??___fttol+1
 16018  0BC5  084D               	movf	___fttol@f1+2,w
 16019  0BC6  00D1               	movwf	??___fttol+2
 16020  0BC7  3017               	movlw	23
 16021  0BC8                     u4815:	
 16022  0BC8  36D1               	lsrf	??___fttol+2,f
 16023  0BC9  0CD0               	rrf	??___fttol+1,f
 16024  0BCA  0CCF               	rrf	??___fttol,f
 16025  0BCB  0B89               	decfsz	9,f
 16026  0BCC  2BC8               	goto	u4815
 16027  0BCD  084F               	movf	??___fttol,w
 16028  0BCE  00D2               	movwf	??___fttol+3
 16029  0BCF  0852               	movf	??___fttol+3,w
 16030  0BD0  00D3               	movwf	___fttol@sign1
 16031  0BD1  17CC               	bsf	___fttol@f1+1,7
 16032  0BD2  30FF               	movlw	255
 16033  0BD3  05CB               	andwf	___fttol@f1,f
 16034  0BD4  30FF               	movlw	255
 16035  0BD5  05CC               	andwf	___fttol@f1+1,f
 16036  0BD6  3000               	movlw	0
 16037  0BD7  05CD               	andwf	___fttol@f1+2,f
 16038  0BD8  084B               	movf	___fttol@f1,w
 16039  0BD9  00D4               	movwf	___fttol@lval
 16040  0BDA  084C               	movf	___fttol@f1+1,w
 16041  0BDB  00D5               	movwf	___fttol@lval+1
 16042  0BDC  084D               	movf	___fttol@f1+2,w
 16043  0BDD  00D6               	movwf	___fttol@lval+2
 16044  0BDE  01D7               	clrf	___fttol@lval+3
 16045  0BDF  308E               	movlw	142
 16046  0BE0  02D8               	subwf	___fttol@exp1,f
 16047  0BE1  1FD8               	btfss	___fttol@exp1,7
 16048  0BE2  2BFF               	goto	l6133
 16049  0BE3  0858               	movf	___fttol@exp1,w
 16050  0BE4  3A80               	xorlw	128
 16051  0BE5  3E8F               	addlw	143
 16052  0BE6  1803               	skipnc
 16053  0BE7  2BF1               	goto	l6131
 16054  0BE8  3000               	movlw	0
 16055  0BE9  00CE               	movwf	?___fttol+3
 16056  0BEA  3000               	movlw	0
 16057  0BEB  00CD               	movwf	?___fttol+2
 16058  0BEC  3000               	movlw	0
 16059  0BED  00CC               	movwf	?___fttol+1
 16060  0BEE  3000               	movlw	0
 16061  0BEF  00CB               	movwf	?___fttol
 16062  0BF0  0008               	return
 16063  0BF1                     l6131:	
 16064  0BF1  3001               	movlw	1
 16065  0BF2                     u4845:	
 16066  0BF2  36D7               	lsrf	___fttol@lval+3,f
 16067  0BF3  0CD6               	rrf	___fttol@lval+2,f
 16068  0BF4  0CD5               	rrf	___fttol@lval+1,f
 16069  0BF5  0CD4               	rrf	___fttol@lval,f
 16070  0BF6  0B89               	decfsz	9,f
 16071  0BF7  2BF2               	goto	u4845
 16072  0BF8  3001               	movlw	1
 16073  0BF9  00CF               	movwf	??___fttol
 16074  0BFA  084F               	movf	??___fttol,w
 16075  0BFB  07D8               	addwf	___fttol@exp1,f
 16076  0BFC  1903               	btfsc	3,2
 16077  0BFD  2C18               	goto	l6143
 16078  0BFE  2BF1               	goto	l6131
 16079  0BFF                     l6133:	
 16080  0BFF  3018               	movlw	24
 16081  0C00  0258               	subwf	___fttol@exp1,w
 16082  0C01  1C03               	skipc
 16083  0C02  2C15               	goto	l6141
 16084  0C03  3000               	movlw	0
 16085  0C04  00CE               	movwf	?___fttol+3
 16086  0C05  3000               	movlw	0
 16087  0C06  00CD               	movwf	?___fttol+2
 16088  0C07  3000               	movlw	0
 16089  0C08  00CC               	movwf	?___fttol+1
 16090  0C09  3000               	movlw	0
 16091  0C0A  00CB               	movwf	?___fttol
 16092  0C0B  0008               	return
 16093  0C0C                     l6139:	
 16094  0C0C  3001               	movlw	1
 16095  0C0D                     u4875:	
 16096  0C0D  35D4               	lslf	___fttol@lval,f
 16097  0C0E  0DD5               	rlf	___fttol@lval+1,f
 16098  0C0F  0DD6               	rlf	___fttol@lval+2,f
 16099  0C10  0DD7               	rlf	___fttol@lval+3,f
 16100  0C11  0B89               	decfsz	9,f
 16101  0C12  2C0D               	goto	u4875
 16102  0C13  3001               	movlw	1
 16103  0C14  02D8               	subwf	___fttol@exp1,f
 16104  0C15                     l6141:	
 16105  0C15  08D8               	movf	___fttol@exp1,f
 16106  0C16  1D03               	skipz
 16107  0C17  2C0C               	goto	l6139
 16108  0C18                     l6143:	
 16109  0C18  0853               	movf	___fttol@sign1,w
 16110  0C19  1903               	btfsc	3,2
 16111  0C1A  2C26               	goto	l6147
 16112  0C1B  09D4               	comf	___fttol@lval,f
 16113  0C1C  09D5               	comf	___fttol@lval+1,f
 16114  0C1D  09D6               	comf	___fttol@lval+2,f
 16115  0C1E  09D7               	comf	___fttol@lval+3,f
 16116  0C1F  0AD4               	incf	___fttol@lval,f
 16117  0C20  1903               	skipnz
 16118  0C21  0AD5               	incf	___fttol@lval+1,f
 16119  0C22  1903               	skipnz
 16120  0C23  0AD6               	incf	___fttol@lval+2,f
 16121  0C24  1903               	skipnz
 16122  0C25  0AD7               	incf	___fttol@lval+3,f
 16123  0C26                     l6147:	
 16124  0C26  0857               	movf	___fttol@lval+3,w
 16125  0C27  00CE               	movwf	?___fttol+3
 16126  0C28  0856               	movf	___fttol@lval+2,w
 16127  0C29  00CD               	movwf	?___fttol+2
 16128  0C2A  0855               	movf	___fttol@lval+1,w
 16129  0C2B  00CC               	movwf	?___fttol+1
 16130  0C2C  0854               	movf	___fttol@lval,w
 16131  0C2D  00CB               	movwf	?___fttol
 16132  0C2E  0008               	return
 16133  0C2F                     __end_of___fttol:	
 16134                           
 16135                           	psect	text104
 16136  0DE6                     __ptext104:	
 16137 ;; *************** function ___ftdiv *****************
 16138 ;; Defined at:
 16139 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16140 ;; Parameters:    Size  Location     Type
 16141 ;;  f2              3   14[BANK0 ] float 
 16142 ;;  f1              3   17[BANK0 ] float 
 16143 ;; Auto vars:     Size  Location     Type
 16144 ;;  f3              3   25[BANK0 ] float 
 16145 ;;  sign            1   29[BANK0 ] unsigned char 
 16146 ;;  exp             1   28[BANK0 ] unsigned char 
 16147 ;;  cntr            1   24[BANK0 ] unsigned char 
 16148 ;; Return value:  Size  Location     Type
 16149 ;;                  3   14[BANK0 ] float 
 16150 ;; Registers used:
 16151 ;;		wreg, status,2, status,0, pclath, cstack
 16152 ;; Tracked objects:
 16153 ;;		On entry : 0/0
 16154 ;;		On exit  : 0/0
 16155 ;;		Unchanged: 0/0
 16156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16157 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16158 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16159 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16160 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16161 ;;Total ram usage:       16 bytes
 16162 ;; Hardware stack levels used:    1
 16163 ;; Hardware stack levels required when called:    6
 16164 ;; This function calls:
 16165 ;;		___ftpack
 16166 ;; This function is called by:
 16167 ;;		_getPercentValue
 16168 ;;		_setPercentValue
 16169 ;; This function uses a non-reentrant model
 16170 ;;
 16171                           
 16172                           
 16173                           ;psect for function ___ftdiv
 16174  0DE6                     ___ftdiv:	
 16175                           
 16176                           ;incstack = 0
 16177                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16178  0DE6  0020               	movlb	0	; select bank0
 16179  0DE7  0831               	movf	___ftdiv@f1,w
 16180  0DE8  00B4               	movwf	??___ftdiv
 16181  0DE9  0832               	movf	___ftdiv@f1+1,w
 16182  0DEA  00B5               	movwf	??___ftdiv+1
 16183  0DEB  0833               	movf	___ftdiv@f1+2,w
 16184  0DEC  00B6               	movwf	??___ftdiv+2
 16185  0DED  1003               	clrc
 16186  0DEE  0D35               	rlf	??___ftdiv+1,w
 16187  0DEF  0D36               	rlf	??___ftdiv+2,w
 16188  0DF0  00B7               	movwf	??___ftdiv+3
 16189  0DF1  0837               	movf	??___ftdiv+3,w
 16190  0DF2  00BC               	movwf	___ftdiv@exp
 16191  0DF3  08BC               	movf	___ftdiv@exp,f
 16192  0DF4  1D03               	skipz
 16193  0DF5  2DFD               	goto	l6021
 16194  0DF6  3000               	movlw	0
 16195  0DF7  00AE               	movwf	?___ftdiv
 16196  0DF8  3000               	movlw	0
 16197  0DF9  00AF               	movwf	?___ftdiv+1
 16198  0DFA  3000               	movlw	0
 16199  0DFB  00B0               	movwf	?___ftdiv+2
 16200  0DFC  0008               	return
 16201  0DFD                     l6021:	
 16202  0DFD  082E               	movf	___ftdiv@f2,w
 16203  0DFE  00B4               	movwf	??___ftdiv
 16204  0DFF  082F               	movf	___ftdiv@f2+1,w
 16205  0E00  00B5               	movwf	??___ftdiv+1
 16206  0E01  0830               	movf	___ftdiv@f2+2,w
 16207  0E02  00B6               	movwf	??___ftdiv+2
 16208  0E03  1003               	clrc
 16209  0E04  0D35               	rlf	??___ftdiv+1,w
 16210  0E05  0D36               	rlf	??___ftdiv+2,w
 16211  0E06  00B7               	movwf	??___ftdiv+3
 16212  0E07  0837               	movf	??___ftdiv+3,w
 16213  0E08  00BD               	movwf	___ftdiv@sign
 16214  0E09  08BD               	movf	___ftdiv@sign,f
 16215  0E0A  1D03               	skipz
 16216  0E0B  2E13               	goto	l6027
 16217  0E0C  3000               	movlw	0
 16218  0E0D  00AE               	movwf	?___ftdiv
 16219  0E0E  3000               	movlw	0
 16220  0E0F  00AF               	movwf	?___ftdiv+1
 16221  0E10  3000               	movlw	0
 16222  0E11  00B0               	movwf	?___ftdiv+2
 16223  0E12  0008               	return
 16224  0E13                     l6027:	
 16225  0E13  3000               	movlw	0
 16226  0E14  00B9               	movwf	___ftdiv@f3
 16227  0E15  3000               	movlw	0
 16228  0E16  00BA               	movwf	___ftdiv@f3+1
 16229  0E17  3000               	movlw	0
 16230  0E18  00BB               	movwf	___ftdiv@f3+2
 16231  0E19  3089               	movlw	137
 16232  0E1A  073D               	addwf	___ftdiv@sign,w
 16233  0E1B  00B4               	movwf	??___ftdiv
 16234  0E1C  0834               	movf	??___ftdiv,w
 16235  0E1D  02BC               	subwf	___ftdiv@exp,f
 16236  0E1E  0831               	movf	___ftdiv@f1,w
 16237  0E1F  00B4               	movwf	??___ftdiv
 16238  0E20  0832               	movf	___ftdiv@f1+1,w
 16239  0E21  00B5               	movwf	??___ftdiv+1
 16240  0E22  0833               	movf	___ftdiv@f1+2,w
 16241  0E23  00B6               	movwf	??___ftdiv+2
 16242  0E24  3010               	movlw	16
 16243  0E25                     u4625:	
 16244  0E25  36B6               	lsrf	??___ftdiv+2,f
 16245  0E26  0CB5               	rrf	??___ftdiv+1,f
 16246  0E27  0CB4               	rrf	??___ftdiv,f
 16247  0E28  0B89               	decfsz	9,f
 16248  0E29  2E25               	goto	u4625
 16249  0E2A  0834               	movf	??___ftdiv,w
 16250  0E2B  00B7               	movwf	??___ftdiv+3
 16251  0E2C  0837               	movf	??___ftdiv+3,w
 16252  0E2D  00BD               	movwf	___ftdiv@sign
 16253  0E2E  082E               	movf	___ftdiv@f2,w
 16254  0E2F  00B4               	movwf	??___ftdiv
 16255  0E30  082F               	movf	___ftdiv@f2+1,w
 16256  0E31  00B5               	movwf	??___ftdiv+1
 16257  0E32  0830               	movf	___ftdiv@f2+2,w
 16258  0E33  00B6               	movwf	??___ftdiv+2
 16259  0E34  3010               	movlw	16
 16260  0E35                     u4635:	
 16261  0E35  36B6               	lsrf	??___ftdiv+2,f
 16262  0E36  0CB5               	rrf	??___ftdiv+1,f
 16263  0E37  0CB4               	rrf	??___ftdiv,f
 16264  0E38  0B89               	decfsz	9,f
 16265  0E39  2E35               	goto	u4635
 16266  0E3A  0834               	movf	??___ftdiv,w
 16267  0E3B  00B7               	movwf	??___ftdiv+3
 16268  0E3C  0837               	movf	??___ftdiv+3,w
 16269  0E3D  06BD               	xorwf	___ftdiv@sign,f
 16270  0E3E  3080               	movlw	128
 16271  0E3F  00B4               	movwf	??___ftdiv
 16272  0E40  0834               	movf	??___ftdiv,w
 16273  0E41  05BD               	andwf	___ftdiv@sign,f
 16274  0E42  17B2               	bsf	___ftdiv@f1+1,7
 16275  0E43  30FF               	movlw	255
 16276  0E44  05B1               	andwf	___ftdiv@f1,f
 16277  0E45  30FF               	movlw	255
 16278  0E46  05B2               	andwf	___ftdiv@f1+1,f
 16279  0E47  3000               	movlw	0
 16280  0E48  05B3               	andwf	___ftdiv@f1+2,f
 16281  0E49  17AF               	bsf	___ftdiv@f2+1,7
 16282  0E4A  30FF               	movlw	255
 16283  0E4B  05AE               	andwf	___ftdiv@f2,f
 16284  0E4C  30FF               	movlw	255
 16285  0E4D  05AF               	andwf	___ftdiv@f2+1,f
 16286  0E4E  3000               	movlw	0
 16287  0E4F  05B0               	andwf	___ftdiv@f2+2,f
 16288  0E50  3018               	movlw	24
 16289  0E51  00B4               	movwf	??___ftdiv
 16290  0E52  0834               	movf	??___ftdiv,w
 16291  0E53  00B8               	movwf	___ftdiv@cntr
 16292  0E54                     l6041:	
 16293  0E54  3001               	movlw	1
 16294  0E55                     u4645:	
 16295  0E55  35B9               	lslf	___ftdiv@f3,f
 16296  0E56  0DBA               	rlf	___ftdiv@f3+1,f
 16297  0E57  0DBB               	rlf	___ftdiv@f3+2,f
 16298  0E58  0B89               	decfsz	9,f
 16299  0E59  2E55               	goto	u4645
 16300  0E5A  0830               	movf	___ftdiv@f2+2,w
 16301  0E5B  0233               	subwf	___ftdiv@f1+2,w
 16302  0E5C  1D03               	skipz
 16303  0E5D  2E64               	goto	u4655
 16304  0E5E  082F               	movf	___ftdiv@f2+1,w
 16305  0E5F  0232               	subwf	___ftdiv@f1+1,w
 16306  0E60  1D03               	skipz
 16307  0E61  2E64               	goto	u4655
 16308  0E62  082E               	movf	___ftdiv@f2,w
 16309  0E63  0231               	subwf	___ftdiv@f1,w
 16310  0E64                     u4655:	
 16311  0E64  1C03               	skipc
 16312  0E65  2E6D               	goto	l6049
 16313  0E66  082E               	movf	___ftdiv@f2,w
 16314  0E67  02B1               	subwf	___ftdiv@f1,f
 16315  0E68  082F               	movf	___ftdiv@f2+1,w
 16316  0E69  3BB2               	subwfb	___ftdiv@f1+1,f
 16317  0E6A  0830               	movf	___ftdiv@f2+2,w
 16318  0E6B  3BB3               	subwfb	___ftdiv@f1+2,f
 16319  0E6C  1439               	bsf	___ftdiv@f3,0
 16320  0E6D                     l6049:	
 16321  0E6D  3001               	movlw	1
 16322  0E6E                     u4665:	
 16323  0E6E  35B1               	lslf	___ftdiv@f1,f
 16324  0E6F  0DB2               	rlf	___ftdiv@f1+1,f
 16325  0E70  0DB3               	rlf	___ftdiv@f1+2,f
 16326  0E71  0B89               	decfsz	9,f
 16327  0E72  2E6E               	goto	u4665
 16328  0E73  3001               	movlw	1
 16329  0E74  02B8               	subwf	___ftdiv@cntr,f
 16330  0E75  1D03               	btfss	3,2
 16331  0E76  2E54               	goto	l6041
 16332  0E77  0839               	movf	___ftdiv@f3,w
 16333  0E78  00A0               	movwf	___ftpack@arg
 16334  0E79  083A               	movf	___ftdiv@f3+1,w
 16335  0E7A  00A1               	movwf	___ftpack@arg+1
 16336  0E7B  083B               	movf	___ftdiv@f3+2,w
 16337  0E7C  00A2               	movwf	___ftpack@arg+2
 16338  0E7D  083C               	movf	___ftdiv@exp,w
 16339  0E7E  00B4               	movwf	??___ftdiv
 16340  0E7F  0834               	movf	??___ftdiv,w
 16341  0E80  00A3               	movwf	___ftpack@exp
 16342  0E81  083D               	movf	___ftdiv@sign,w
 16343  0E82  00B5               	movwf	??___ftdiv+1
 16344  0E83  0835               	movf	??___ftdiv+1,w
 16345  0E84  00A4               	movwf	___ftpack@sign
 16346  0E85  3197  273A         	fcall	___ftpack
 16347  0E87  0020               	movlb	0	; select bank0
 16348  0E88  0820               	movf	?___ftpack,w
 16349  0E89  00AE               	movwf	?___ftdiv
 16350  0E8A  0821               	movf	?___ftpack+1,w
 16351  0E8B  00AF               	movwf	?___ftdiv+1
 16352  0E8C  0822               	movf	?___ftpack+2,w
 16353  0E8D  00B0               	movwf	?___ftdiv+2
 16354  0E8E  0008               	return
 16355  0E8F                     __end_of___ftdiv:	
 16356                           
 16357                           	psect	text105
 16358  1E9A                     __ptext105:	
 16359 ;; *************** function ___awtoft *****************
 16360 ;; Defined at:
 16361 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16362 ;; Parameters:    Size  Location     Type
 16363 ;;  c               2    8[BANK0 ] int 
 16364 ;; Auto vars:     Size  Location     Type
 16365 ;;  sign            1   13[BANK0 ] unsigned char 
 16366 ;; Return value:  Size  Location     Type
 16367 ;;                  3    8[BANK0 ] float 
 16368 ;; Registers used:
 16369 ;;		wreg, status,2, status,0, pclath, cstack
 16370 ;; Tracked objects:
 16371 ;;		On entry : 0/0
 16372 ;;		On exit  : 0/0
 16373 ;;		Unchanged: 0/0
 16374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16375 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16376 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16378 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16379 ;;Total ram usage:        6 bytes
 16380 ;; Hardware stack levels used:    1
 16381 ;; Hardware stack levels required when called:    6
 16382 ;; This function calls:
 16383 ;;		___ftpack
 16384 ;; This function is called by:
 16385 ;;		_getPercentValue
 16386 ;;		_setPercentValue
 16387 ;; This function uses a non-reentrant model
 16388 ;;
 16389                           
 16390                           
 16391                           ;psect for function ___awtoft
 16392  1E9A                     ___awtoft:	
 16393                           
 16394                           ;incstack = 0
 16395                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16396  1E9A  0020               	movlb	0	; select bank0
 16397  1E9B  01AD               	clrf	___awtoft@sign
 16398  1E9C  1FA9               	btfss	___awtoft@c+1,7
 16399  1E9D  2EA5               	goto	l8539
 16400  1E9E  09A8               	comf	___awtoft@c,f
 16401  1E9F  09A9               	comf	___awtoft@c+1,f
 16402  1EA0  0AA8               	incf	___awtoft@c,f
 16403  1EA1  1903               	skipnz
 16404  1EA2  0AA9               	incf	___awtoft@c+1,f
 16405  1EA3  01AD               	clrf	___awtoft@sign
 16406  1EA4  0AAD               	incf	___awtoft@sign,f
 16407  1EA5                     l8539:	
 16408  1EA5  0828               	movf	___awtoft@c,w
 16409  1EA6  00A0               	movwf	___ftpack@arg
 16410  1EA7  0829               	movf	___awtoft@c+1,w
 16411  1EA8  00A1               	movwf	___ftpack@arg+1
 16412  1EA9  01A2               	clrf	___ftpack@arg+2
 16413  1EAA  308E               	movlw	142
 16414  1EAB  00AB               	movwf	??___awtoft
 16415  1EAC  082B               	movf	??___awtoft,w
 16416  1EAD  00A3               	movwf	___ftpack@exp
 16417  1EAE  082D               	movf	___awtoft@sign,w
 16418  1EAF  00AC               	movwf	??___awtoft+1
 16419  1EB0  082C               	movf	??___awtoft+1,w
 16420  1EB1  00A4               	movwf	___ftpack@sign
 16421  1EB2  3197  273A         	fcall	___ftpack
 16422  1EB4  0020               	movlb	0	; select bank0
 16423  1EB5  0820               	movf	?___ftpack,w
 16424  1EB6  00A8               	movwf	?___awtoft
 16425  1EB7  0821               	movf	?___ftpack+1,w
 16426  1EB8  00A9               	movwf	?___awtoft+1
 16427  1EB9  0822               	movf	?___ftpack+2,w
 16428  1EBA  00AA               	movwf	?___awtoft+2
 16429  1EBB  0008               	return
 16430  1EBC                     __end_of___awtoft:	
 16431                           
 16432                           	psect	text106
 16433  173A                     __ptext106:	
 16434 ;; *************** function ___ftpack *****************
 16435 ;; Defined at:
 16436 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16437 ;; Parameters:    Size  Location     Type
 16438 ;;  arg             3    0[BANK0 ] unsigned um
 16439 ;;  exp             1    3[BANK0 ] unsigned char 
 16440 ;;  sign            1    4[BANK0 ] unsigned char 
 16441 ;; Auto vars:     Size  Location     Type
 16442 ;;		None
 16443 ;; Return value:  Size  Location     Type
 16444 ;;                  3    0[BANK0 ] float 
 16445 ;; Registers used:
 16446 ;;		wreg, status,2, status,0
 16447 ;; Tracked objects:
 16448 ;;		On entry : 0/0
 16449 ;;		On exit  : 0/0
 16450 ;;		Unchanged: 0/0
 16451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16452 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16454 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16455 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16456 ;;Total ram usage:        8 bytes
 16457 ;; Hardware stack levels used:    1
 16458 ;; Hardware stack levels required when called:    5
 16459 ;; This function calls:
 16460 ;;		Nothing
 16461 ;; This function is called by:
 16462 ;;		___awtoft
 16463 ;;		___ftadd
 16464 ;;		___ftdiv
 16465 ;;		___ftmul
 16466 ;; This function uses a non-reentrant model
 16467 ;;
 16468                           
 16469                           
 16470                           ;psect for function ___ftpack
 16471  173A                     ___ftpack:	
 16472                           
 16473                           ;incstack = 0
 16474                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16475  173A  0020               	movlb	0	; select bank0
 16476  173B  0823               	movf	___ftpack@exp,w
 16477  173C  1903               	btfsc	3,2
 16478  173D  2F43               	goto	l5905
 16479  173E  0822               	movf	___ftpack@arg+2,w
 16480  173F  0421               	iorwf	___ftpack@arg+1,w
 16481  1740  0420               	iorwf	___ftpack@arg,w
 16482  1741  1D03               	skipz
 16483  1742  2F54               	goto	l5911
 16484  1743                     l5905:	
 16485  1743  3000               	movlw	0
 16486  1744  00A0               	movwf	?___ftpack
 16487  1745  3000               	movlw	0
 16488  1746  00A1               	movwf	?___ftpack+1
 16489  1747  3000               	movlw	0
 16490  1748  00A2               	movwf	?___ftpack+2
 16491  1749  0008               	return
 16492  174A                     l5909:	
 16493  174A  3001               	movlw	1
 16494  174B  00A5               	movwf	??___ftpack
 16495  174C  0825               	movf	??___ftpack,w
 16496  174D  07A3               	addwf	___ftpack@exp,f
 16497  174E  3001               	movlw	1
 16498  174F                     u4275:	
 16499  174F  36A2               	lsrf	___ftpack@arg+2,f
 16500  1750  0CA1               	rrf	___ftpack@arg+1,f
 16501  1751  0CA0               	rrf	___ftpack@arg,f
 16502  1752  0B89               	decfsz	9,f
 16503  1753  2F4F               	goto	u4275
 16504  1754                     l5911:	
 16505  1754  30FE               	movlw	254
 16506  1755  0522               	andwf	___ftpack@arg+2,w
 16507  1756  1903               	btfsc	3,2
 16508  1757  2F6D               	goto	l3041
 16509  1758  2F4A               	goto	l5909
 16510  1759                     l5913:	
 16511  1759  3001               	movlw	1
 16512  175A  00A5               	movwf	??___ftpack
 16513  175B  0825               	movf	??___ftpack,w
 16514  175C  07A3               	addwf	___ftpack@exp,f
 16515  175D  3001               	movlw	1
 16516  175E  07A0               	addwf	___ftpack@arg,f
 16517  175F  3000               	movlw	0
 16518  1760  1803               	skipnc
 16519  1761  3001               	movlw	1
 16520  1762  07A1               	addwf	___ftpack@arg+1,f
 16521  1763  3000               	movlw	0
 16522  1764  1803               	skipnc
 16523  1765  3001               	movlw	1
 16524  1766  07A2               	addwf	___ftpack@arg+2,f
 16525  1767  3001               	movlw	1
 16526  1768                     u4295:	
 16527  1768  36A2               	lsrf	___ftpack@arg+2,f
 16528  1769  0CA1               	rrf	___ftpack@arg+1,f
 16529  176A  0CA0               	rrf	___ftpack@arg,f
 16530  176B  0B89               	decfsz	9,f
 16531  176C  2F68               	goto	u4295
 16532  176D                     l3041:	
 16533  176D  30FF               	movlw	255
 16534  176E  0522               	andwf	___ftpack@arg+2,w
 16535  176F  1903               	btfsc	3,2
 16536  1770  2F7A               	goto	l5921
 16537  1771  2F59               	goto	l5913
 16538  1772                     l5919:	
 16539  1772  3001               	movlw	1
 16540  1773  02A3               	subwf	___ftpack@exp,f
 16541  1774  3001               	movlw	1
 16542  1775                     u4315:	
 16543  1775  35A0               	lslf	___ftpack@arg,f
 16544  1776  0DA1               	rlf	___ftpack@arg+1,f
 16545  1777  0DA2               	rlf	___ftpack@arg+2,f
 16546  1778  0B89               	decfsz	9,f
 16547  1779  2F75               	goto	u4315
 16548  177A                     l5921:	
 16549  177A  1FA1               	btfss	___ftpack@arg+1,7
 16550  177B  2F72               	goto	l5919
 16551  177C  1823               	btfsc	___ftpack@exp,0
 16552  177D  2F84               	goto	l3047
 16553  177E  30FF               	movlw	255
 16554  177F  05A0               	andwf	___ftpack@arg,f
 16555  1780  307F               	movlw	127
 16556  1781  05A1               	andwf	___ftpack@arg+1,f
 16557  1782  30FF               	movlw	255
 16558  1783  05A2               	andwf	___ftpack@arg+2,f
 16559  1784                     l3047:	
 16560  1784  1003               	clrc
 16561  1785  0CA3               	rrf	___ftpack@exp,f
 16562  1786  0823               	movf	___ftpack@exp,w
 16563  1787  00A5               	movwf	??___ftpack
 16564  1788  01A6               	clrf	??___ftpack+1
 16565  1789  01A7               	clrf	??___ftpack+2
 16566  178A  3010               	movlw	16
 16567  178B                     u4345:	
 16568  178B  35A5               	lslf	??___ftpack,f
 16569  178C  0DA6               	rlf	??___ftpack+1,f
 16570  178D  0DA7               	rlf	??___ftpack+2,f
 16571  178E  0B89               	decfsz	9,f
 16572  178F  2F8B               	goto	u4345
 16573  1790  0825               	movf	??___ftpack,w
 16574  1791  04A0               	iorwf	___ftpack@arg,f
 16575  1792  0826               	movf	??___ftpack+1,w
 16576  1793  04A1               	iorwf	___ftpack@arg+1,f
 16577  1794  0827               	movf	??___ftpack+2,w
 16578  1795  04A2               	iorwf	___ftpack@arg+2,f
 16579  1796  0824               	movf	___ftpack@sign,w
 16580  1797  1903               	btfsc	3,2
 16581  1798  0008               	return
 16582  1799  17A2               	bsf	___ftpack@arg+2,7
 16583  179A  0008               	return
 16584  179B                     __end_of___ftpack:	
 16585                           
 16586                           	psect	text107
 16587  1AE4                     __ptext107:	
 16588 ;; *************** function _setRFSW_Status *****************
 16589 ;; Defined at:
 16590 ;;		line 434 in file "../src/RF_Control_B1.c"
 16591 ;; Parameters:    Size  Location     Type
 16592 ;;  sw              1    wreg     unsigned char 
 16593 ;;  command         1    2[BANK0 ] unsigned char 
 16594 ;; Auto vars:     Size  Location     Type
 16595 ;;  sw              1    3[BANK0 ] unsigned char 
 16596 ;; Return value:  Size  Location     Type
 16597 ;;		None               void
 16598 ;; Registers used:
 16599 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16600 ;; Tracked objects:
 16601 ;;		On entry : 0/0
 16602 ;;		On exit  : 0/0
 16603 ;;		Unchanged: 0/0
 16604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16605 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16606 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16608 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;Total ram usage:        2 bytes
 16610 ;; Hardware stack levels used:    1
 16611 ;; Hardware stack levels required when called:    6
 16612 ;; This function calls:
 16613 ;;		_RfSWPointSelect
 16614 ;; This function is called by:
 16615 ;;		_DlyOff_Main
 16616 ;;		_setDimmerLights_ERROR
 16617 ;;		_setControl_Lights_Table
 16618 ;;		_Sw_DimmerOnFunc
 16619 ;;		_Sw_DimmerAdjFunc
 16620 ;; This function uses a non-reentrant model
 16621 ;;
 16622                           
 16623                           
 16624                           ;psect for function _setRFSW_Status
 16625  1AE4                     _setRFSW_Status:	
 16626                           
 16627                           ;incstack = 0
 16628                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16629                           ;setRFSW_Status@sw stored from wreg
 16630  1AE4  0020               	movlb	0	; select bank0
 16631  1AE5  00A3               	movwf	setRFSW_Status@sw
 16632                           
 16633                           ;RF_Control_B1.c: 435: RfSWPointSelect(sw);
 16634  1AE6  0823               	movf	setRFSW_Status@sw,w
 16635  1AE7  319C  2437         	fcall	_RfSWPointSelect
 16636                           
 16637                           ;RF_Control_B1.c: 436: RFSW->Status = command;
 16638  1AE9  0879               	movf	_RFSW,w
 16639  1AEA  0086               	movwf	6
 16640  1AEB  0187               	clrf	7
 16641  1AEC  0020               	movlb	0	; select bank0
 16642  1AED  0822               	movf	setRFSW_Status@command,w
 16643  1AEE  1001               	bcf	1,0
 16644  1AEF  1D03               	skipz
 16645  1AF0  1401               	bsf	1,0
 16646  1AF1  0008               	return
 16647  1AF2                     __end_of_setRFSW_Status:	
 16648                           
 16649                           	psect	text108
 16650  1C37                     __ptext108:	
 16651 ;; *************** function _RfSWPointSelect *****************
 16652 ;; Defined at:
 16653 ;;		line 369 in file "../src/RF_Control_B1.c"
 16654 ;; Parameters:    Size  Location     Type
 16655 ;;  sw              1    wreg     unsigned char 
 16656 ;; Auto vars:     Size  Location     Type
 16657 ;;  sw              1    1[BANK0 ] unsigned char 
 16658 ;; Return value:  Size  Location     Type
 16659 ;;		None               void
 16660 ;; Registers used:
 16661 ;;		wreg
 16662 ;; Tracked objects:
 16663 ;;		On entry : 0/0
 16664 ;;		On exit  : 0/0
 16665 ;;		Unchanged: 0/0
 16666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16668 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16669 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16671 ;;Total ram usage:        2 bytes
 16672 ;; Hardware stack levels used:    1
 16673 ;; Hardware stack levels required when called:    5
 16674 ;; This function calls:
 16675 ;;		Nothing
 16676 ;; This function is called by:
 16677 ;;		_setRFSW_Control
 16678 ;;		_setRFSW_AdjControl
 16679 ;;		_setRFSW_Status
 16680 ;; This function uses a non-reentrant model
 16681 ;;
 16682                           
 16683                           
 16684                           ;psect for function _RfSWPointSelect
 16685  1C37                     _RfSWPointSelect:	
 16686                           
 16687                           ;incstack = 0
 16688                           ; Regs used in _RfSWPointSelect: [wreg]
 16689                           ;RfSWPointSelect@sw stored from wreg
 16690  1C37  0020               	movlb	0	; select bank0
 16691  1C38  00A1               	movwf	RfSWPointSelect@sw
 16692                           
 16693                           ;RF_Control_B1.c: 371: if (sw == 1) {
 16694  1C39  0821               	movf	RfSWPointSelect@sw,w
 16695  1C3A  3A01               	xorlw	1
 16696  1C3B  1D03               	skipz
 16697  1C3C  2C41               	goto	l2351
 16698                           
 16699                           ;RF_Control_B1.c: 372: RFSW = &RFSW1;
 16700  1C3D  30ED               	movlw	_RFSW1& (0+255)
 16701  1C3E  00A0               	movwf	??_RfSWPointSelect
 16702  1C3F  0820               	movf	??_RfSWPointSelect,w
 16703  1C40  00F9               	movwf	_RFSW
 16704  1C41                     l2351:	
 16705                           
 16706                           ;RF_Control_B1.c: 373: }
 16707                           ;RF_Control_B1.c: 376: if (sw == 2) {
 16708  1C41  0821               	movf	RfSWPointSelect@sw,w
 16709  1C42  3A02               	xorlw	2
 16710  1C43  1D03               	skipz
 16711  1C44  0008               	return
 16712                           
 16713                           ;RF_Control_B1.c: 377: RFSW = &RFSW2;
 16714  1C45  30EE               	movlw	_RFSW2& (0+255)
 16715  1C46  00A0               	movwf	??_RfSWPointSelect
 16716  1C47  0820               	movf	??_RfSWPointSelect,w
 16717  1C48  00F9               	movwf	_RFSW
 16718  1C49  0008               	return
 16719  1C4A                     __end_of_RfSWPointSelect:	
 16720                           
 16721                           	psect	text109
 16722  1B69                     __ptext109:	
 16723 ;; *************** function _setDimmerLights_Trigger *****************
 16724 ;; Defined at:
 16725 ;;		line 716 in file "../src/Dimmer_B1.c"
 16726 ;; Parameters:    Size  Location     Type
 16727 ;;  lights          1    wreg     unsigned char 
 16728 ;;  command         1    2[BANK0 ] unsigned char 
 16729 ;; Auto vars:     Size  Location     Type
 16730 ;;  lights          1    3[BANK0 ] unsigned char 
 16731 ;; Return value:  Size  Location     Type
 16732 ;;		None               void
 16733 ;; Registers used:
 16734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16735 ;; Tracked objects:
 16736 ;;		On entry : 0/0
 16737 ;;		On exit  : 0/0
 16738 ;;		Unchanged: 0/0
 16739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16740 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16744 ;;Total ram usage:        2 bytes
 16745 ;; Hardware stack levels used:    1
 16746 ;; Hardware stack levels required when called:    6
 16747 ;; This function calls:
 16748 ;;		_DimmerLightsPointSelect
 16749 ;; This function is called by:
 16750 ;;		_DlyOff_Main
 16751 ;;		_setRFSW_Control
 16752 ;;		_Sw_DimmerOnFunc
 16753 ;;		_Sw_DimmerOffFunc
 16754 ;; This function uses a non-reentrant model
 16755 ;;
 16756                           
 16757                           
 16758                           ;psect for function _setDimmerLights_Trigger
 16759  1B69                     _setDimmerLights_Trigger:	
 16760                           
 16761                           ;incstack = 0
 16762                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16763                           ;setDimmerLights_Trigger@lights stored from wreg
 16764  1B69  0020               	movlb	0	; select bank0
 16765  1B6A  00A3               	movwf	setDimmerLights_Trigger@lights
 16766                           
 16767                           ;Dimmer_B1.c: 718: DimmerLightsPointSelect(lights);
 16768  1B6B  0823               	movf	setDimmerLights_Trigger@lights,w
 16769  1B6C  319C  2424         	fcall	_DimmerLightsPointSelect
 16770                           
 16771                           ;Dimmer_B1.c: 719: DimmerLights->Trigger = command;
 16772  1B6E  0020               	movlb	0	; select bank0
 16773  1B6F  086B               	movf	_DimmerLights,w
 16774  1B70  3E08               	addlw	8
 16775  1B71  0086               	movwf	6
 16776  1B72  3001               	movlw	1	; select bank2/3
 16777  1B73  0087               	movwf	7
 16778  1B74  0822               	movf	setDimmerLights_Trigger@command,w
 16779  1B75  1101               	bcf	1,2
 16780  1B76  1D03               	skipz
 16781  1B77  1501               	bsf	1,2
 16782  1B78  0008               	return
 16783  1B79                     __end_of_setDimmerLights_Trigger:	
 16784                           
 16785                           	psect	text110
 16786  1B59                     __ptext110:	
 16787 ;; *************** function _setDimmerLights_Switch *****************
 16788 ;; Defined at:
 16789 ;;		line 704 in file "../src/Dimmer_B1.c"
 16790 ;; Parameters:    Size  Location     Type
 16791 ;;  lights          1    wreg     unsigned char 
 16792 ;;  command         1    2[BANK0 ] unsigned char 
 16793 ;; Auto vars:     Size  Location     Type
 16794 ;;  lights          1    3[BANK0 ] unsigned char 
 16795 ;; Return value:  Size  Location     Type
 16796 ;;		None               void
 16797 ;; Registers used:
 16798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16799 ;; Tracked objects:
 16800 ;;		On entry : 0/0
 16801 ;;		On exit  : 0/0
 16802 ;;		Unchanged: 0/0
 16803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16804 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16808 ;;Total ram usage:        2 bytes
 16809 ;; Hardware stack levels used:    1
 16810 ;; Hardware stack levels required when called:    6
 16811 ;; This function calls:
 16812 ;;		_DimmerLightsPointSelect
 16813 ;; This function is called by:
 16814 ;;		_DlyOff_Main
 16815 ;;		_setRFSW_Control
 16816 ;;		_Sw_DimmerOnFunc
 16817 ;;		_Sw_DimmerOffFunc
 16818 ;; This function uses a non-reentrant model
 16819 ;;
 16820                           
 16821                           
 16822                           ;psect for function _setDimmerLights_Switch
 16823  1B59                     _setDimmerLights_Switch:	
 16824                           
 16825                           ;incstack = 0
 16826                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16827                           ;setDimmerLights_Switch@lights stored from wreg
 16828  1B59  0020               	movlb	0	; select bank0
 16829  1B5A  00A3               	movwf	setDimmerLights_Switch@lights
 16830                           
 16831                           ;Dimmer_B1.c: 706: DimmerLightsPointSelect(lights);
 16832  1B5B  0823               	movf	setDimmerLights_Switch@lights,w
 16833  1B5C  319C  2424         	fcall	_DimmerLightsPointSelect
 16834                           
 16835                           ;Dimmer_B1.c: 707: DimmerLights->Switch = command;
 16836  1B5E  0020               	movlb	0	; select bank0
 16837  1B5F  086B               	movf	_DimmerLights,w
 16838  1B60  3E08               	addlw	8
 16839  1B61  0086               	movwf	6
 16840  1B62  3001               	movlw	1	; select bank2/3
 16841  1B63  0087               	movwf	7
 16842  1B64  0822               	movf	setDimmerLights_Switch@command,w
 16843  1B65  1081               	bcf	1,1
 16844  1B66  1D03               	skipz
 16845  1B67  1481               	bsf	1,1
 16846  1B68  0008               	return
 16847  1B69                     __end_of_setDimmerLights_Switch:	
 16848                           
 16849                           	psect	text111
 16850  1C24                     __ptext111:	
 16851 ;; *************** function _DimmerLightsPointSelect *****************
 16852 ;; Defined at:
 16853 ;;		line 326 in file "../src/Dimmer_B1.c"
 16854 ;; Parameters:    Size  Location     Type
 16855 ;;  lights          1    wreg     unsigned char 
 16856 ;; Auto vars:     Size  Location     Type
 16857 ;;  lights          1    1[BANK0 ] unsigned char 
 16858 ;; Return value:  Size  Location     Type
 16859 ;;		None               void
 16860 ;; Registers used:
 16861 ;;		wreg
 16862 ;; Tracked objects:
 16863 ;;		On entry : 0/0
 16864 ;;		On exit  : 0/0
 16865 ;;		Unchanged: 0/0
 16866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16870 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16871 ;;Total ram usage:        2 bytes
 16872 ;; Hardware stack levels used:    1
 16873 ;; Hardware stack levels required when called:    5
 16874 ;; This function calls:
 16875 ;;		Nothing
 16876 ;; This function is called by:
 16877 ;;		_setDimmerLights_Initialization
 16878 ;;		_setDimmerLights_Main
 16879 ;;		_setDimmerLights_ERROR
 16880 ;;		_setDimmerLights_TriggerERROR
 16881 ;;		_setDimmerLights
 16882 ;;		_setDimmerLights_Adj
 16883 ;;		_setDimmerLights_AdjRF
 16884 ;;		_setDimmerLights_Switch
 16885 ;;		_setDimmerLights_AdjGo
 16886 ;;		_setDimmerLights_Trigger
 16887 ;;		_setDimmerLights_TriggerAdj
 16888 ;;		_setDimmerLights_Clear
 16889 ;;		_setDimmerLights_GO
 16890 ;;		_setDimmerLights_MaxmumValue
 16891 ;; This function uses a non-reentrant model
 16892 ;;
 16893                           
 16894                           
 16895                           ;psect for function _DimmerLightsPointSelect
 16896  1C24                     _DimmerLightsPointSelect:	
 16897                           
 16898                           ;incstack = 0
 16899                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16900                           ;DimmerLightsPointSelect@lights stored from wreg
 16901  1C24  0020               	movlb	0	; select bank0
 16902  1C25  00A1               	movwf	DimmerLightsPointSelect@lights
 16903                           
 16904                           ;Dimmer_B1.c: 328: if (lights == 1) {
 16905  1C26  0821               	movf	DimmerLightsPointSelect@lights,w
 16906  1C27  3A01               	xorlw	1
 16907  1C28  1D03               	skipz
 16908  1C29  2C2E               	goto	l824
 16909                           
 16910                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights1;
 16911  1C2A  30BE               	movlw	_DimmerLights1& (0+255)
 16912  1C2B  00A0               	movwf	??_DimmerLightsPointSelect
 16913  1C2C  0820               	movf	??_DimmerLightsPointSelect,w
 16914  1C2D  00EB               	movwf	_DimmerLights
 16915  1C2E                     l824:	
 16916                           
 16917                           ;Dimmer_B1.c: 330: }
 16918                           ;Dimmer_B1.c: 333: if (lights == 2) {
 16919  1C2E  0821               	movf	DimmerLightsPointSelect@lights,w
 16920  1C2F  3A02               	xorlw	2
 16921  1C30  1D03               	skipz
 16922  1C31  0008               	return
 16923                           
 16924                           ;Dimmer_B1.c: 334: DimmerLights = &DimmerLights2;
 16925  1C32  30CD               	movlw	_DimmerLights2& (0+255)
 16926  1C33  00A0               	movwf	??_DimmerLightsPointSelect
 16927  1C34  0820               	movf	??_DimmerLightsPointSelect,w
 16928  1C35  00EB               	movwf	_DimmerLights
 16929  1C36  0008               	return
 16930  1C37                     __end_of_DimmerLightsPointSelect:	
 16931                           
 16932                           	psect	text112
 16933  156B                     __ptext112:	
 16934 ;; *************** function _setBuz *****************
 16935 ;; Defined at:
 16936 ;;		line 22 in file "../src/Buzzer_B1.c"
 16937 ;; Parameters:    Size  Location     Type
 16938 ;;  count           1    wreg     unsigned char 
 16939 ;;  time            2    9[BANK0 ] int 
 16940 ;; Auto vars:     Size  Location     Type
 16941 ;;  count           1   12[BANK0 ] unsigned char 
 16942 ;; Return value:  Size  Location     Type
 16943 ;;		None               void
 16944 ;; Registers used:
 16945 ;;		wreg, status,2, status,0, pclath, cstack
 16946 ;; Tracked objects:
 16947 ;;		On entry : 0/0
 16948 ;;		On exit  : 0/0
 16949 ;;		Unchanged: 0/0
 16950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16951 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16952 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16953 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16954 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16955 ;;Total ram usage:        4 bytes
 16956 ;; Hardware stack levels used:    1
 16957 ;; Hardware stack levels required when called:    6
 16958 ;; This function calls:
 16959 ;;		___awdiv
 16960 ;; This function is called by:
 16961 ;;		_DlyOff_Main
 16962 ;;		_setDimmerLights_Main
 16963 ;;		_DimmerLights_Exceptions
 16964 ;;		_my_MainTimer
 16965 ;;		_setOverTemp_Exceptions
 16966 ;;		_setLog_Code
 16967 ;;		_setControl_Lights_Table
 16968 ;;		_setRFSW_Control
 16969 ;;		_setSw_Main
 16970 ;;		_Sw_DimmerOnFunc
 16971 ;; This function uses a non-reentrant model
 16972 ;;
 16973                           
 16974                           
 16975                           ;psect for function _setBuz
 16976  156B                     _setBuz:	
 16977                           
 16978                           ;incstack = 0
 16979                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16980                           ;setBuz@count stored from wreg
 16981  156B  0020               	movlb	0	; select bank0
 16982  156C  00AC               	movwf	setBuz@count
 16983                           
 16984                           ;Buzzer_B1.c: 23: time /= 10;
 16985  156D  300A               	movlw	10
 16986  156E  00A0               	movwf	___awdiv@divisor
 16987  156F  3000               	movlw	0
 16988  1570  00A1               	movwf	___awdiv@divisor+1
 16989  1571  082A               	movf	setBuz@time+1,w
 16990  1572  01A3               	clrf	___awdiv@dividend+1
 16991  1573  07A3               	addwf	___awdiv@dividend+1,f
 16992  1574  0829               	movf	setBuz@time,w
 16993  1575  01A2               	clrf	___awdiv@dividend
 16994  1576  07A2               	addwf	___awdiv@dividend,f
 16995  1577  3194  2469  3195   	fcall	___awdiv
 16996  157A  0020               	movlb	0	; select bank0
 16997  157B  0821               	movf	?___awdiv+1,w
 16998  157C  01AA               	clrf	setBuz@time+1
 16999  157D  07AA               	addwf	setBuz@time+1,f
 17000  157E  0820               	movf	?___awdiv,w
 17001  157F  01A9               	clrf	setBuz@time
 17002  1580  07A9               	addwf	setBuz@time,f
 17003                           
 17004                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 17005  1581  0021               	movlb	1	; select bank1
 17006  1582  1C30               	btfss	_Buz1^(0+128),0
 17007  1583  0008               	return
 17008                           
 17009                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 17010  1584  18B0               	btfsc	_Buz1^(0+128),1
 17011  1585  2D9C               	goto	l102
 17012                           
 17013                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 17014  1586  14B0               	bsf	_Buz1^(0+128),1
 17015                           
 17016                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 17017  1587  01B1               	clrf	(_Buz1^(0+128)+1)
 17018  1588  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 17019                           
 17020                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 17021  1589  0020               	movlb	0	; select bank0
 17022  158A  082C               	movf	setBuz@count,w
 17023  158B  00AB               	movwf	??_setBuz
 17024  158C  082B               	movf	??_setBuz,w
 17025  158D  0021               	movlb	1	; select bank1
 17026  158E  00B3               	movwf	(_Buz1^(0+128)+3)
 17027                           
 17028                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 17029  158F  0020               	movlb	0	; select bank0
 17030  1590  082A               	movf	setBuz@time+1,w
 17031  1591  0021               	movlb	1	; select bank1
 17032  1592  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17033  1593  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17034  1594  0020               	movlb	0	; select bank0
 17035  1595  0829               	movf	setBuz@time,w
 17036  1596  0021               	movlb	1	; select bank1
 17037  1597  01B6               	clrf	(_Buz1^(0+128)+6)
 17038  1598  07B6               	addwf	(_Buz1^(0+128)+6),f
 17039                           
 17040                           ;Buzzer_B1.c: 30: RB3 = 1;
 17041  1599  0020               	movlb	0	; select bank0
 17042  159A  158D               	bsf	13,3	;volatile
 17043                           
 17044                           ;Buzzer_B1.c: 31: } else {
 17045  159B  0008               	return
 17046  159C                     l102:	
 17047                           
 17048                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 17049  159C  19B0               	btfsc	_Buz1^(0+128),3
 17050  159D  2DB0               	goto	l104
 17051                           
 17052                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 17053  159E  15B0               	bsf	_Buz1^(0+128),3
 17054                           
 17055                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 17056  159F  0020               	movlb	0	; select bank0
 17057  15A0  082C               	movf	setBuz@count,w
 17058  15A1  00AB               	movwf	??_setBuz
 17059  15A2  082B               	movf	??_setBuz,w
 17060  15A3  0021               	movlb	1	; select bank1
 17061  15A4  00B4               	movwf	(_Buz1^(0+128)+4)
 17062                           
 17063                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17064  15A5  0020               	movlb	0	; select bank0
 17065  15A6  082A               	movf	setBuz@time+1,w
 17066  15A7  0021               	movlb	1	; select bank1
 17067  15A8  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 17068  15A9  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 17069  15AA  0020               	movlb	0	; select bank0
 17070  15AB  0829               	movf	setBuz@time,w
 17071  15AC  0021               	movlb	1	; select bank1
 17072  15AD  01B8               	clrf	(_Buz1^(0+128)+8)
 17073  15AE  07B8               	addwf	(_Buz1^(0+128)+8),f
 17074                           
 17075                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17076  15AF  0008               	return
 17077  15B0                     l104:	
 17078  15B0  1A30               	btfsc	_Buz1^(0+128),4
 17079  15B1  0008               	return
 17080                           
 17081                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17082  15B2  1630               	bsf	_Buz1^(0+128),4
 17083                           
 17084                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17085  15B3  0020               	movlb	0	; select bank0
 17086  15B4  082C               	movf	setBuz@count,w
 17087  15B5  00AB               	movwf	??_setBuz
 17088  15B6  082B               	movf	??_setBuz,w
 17089  15B7  0021               	movlb	1	; select bank1
 17090  15B8  00B5               	movwf	(_Buz1^(0+128)+5)
 17091                           
 17092                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17093  15B9  0020               	movlb	0	; select bank0
 17094  15BA  082A               	movf	setBuz@time+1,w
 17095  15BB  0021               	movlb	1	; select bank1
 17096  15BC  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 17097  15BD  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 17098  15BE  0020               	movlb	0	; select bank0
 17099  15BF  0829               	movf	setBuz@time,w
 17100  15C0  0021               	movlb	1	; select bank1
 17101  15C1  01BA               	clrf	(_Buz1^(0+128)+10)
 17102  15C2  07BA               	addwf	(_Buz1^(0+128)+10),f
 17103  15C3  0008               	return
 17104  15C4                     __end_of_setBuz:	
 17105                           
 17106                           	psect	text113
 17107  1469                     __ptext113:	
 17108 ;; *************** function ___awdiv *****************
 17109 ;; Defined at:
 17110 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17111 ;; Parameters:    Size  Location     Type
 17112 ;;  divisor         2    0[BANK0 ] int 
 17113 ;;  dividend        2    2[BANK0 ] int 
 17114 ;; Auto vars:     Size  Location     Type
 17115 ;;  quotient        2    7[BANK0 ] int 
 17116 ;;  sign            1    6[BANK0 ] unsigned char 
 17117 ;;  counter         1    5[BANK0 ] unsigned char 
 17118 ;; Return value:  Size  Location     Type
 17119 ;;                  2    0[BANK0 ] int 
 17120 ;; Registers used:
 17121 ;;		wreg, status,2, status,0
 17122 ;; Tracked objects:
 17123 ;;		On entry : 0/0
 17124 ;;		On exit  : 0/0
 17125 ;;		Unchanged: 0/0
 17126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17127 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17128 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17129 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17130 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17131 ;;Total ram usage:        9 bytes
 17132 ;; Hardware stack levels used:    1
 17133 ;; Hardware stack levels required when called:    5
 17134 ;; This function calls:
 17135 ;;		Nothing
 17136 ;; This function is called by:
 17137 ;;		_setBuz
 17138 ;; This function uses a non-reentrant model
 17139 ;;
 17140                           
 17141                           
 17142                           ;psect for function ___awdiv
 17143  1469                     ___awdiv:	
 17144                           
 17145                           ;incstack = 0
 17146                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17147  1469  0020               	movlb	0	; select bank0
 17148  146A  01A6               	clrf	___awdiv@sign
 17149  146B  1FA1               	btfss	___awdiv@divisor+1,7
 17150  146C  2C74               	goto	l8647
 17151  146D  09A0               	comf	___awdiv@divisor,f
 17152  146E  09A1               	comf	___awdiv@divisor+1,f
 17153  146F  0AA0               	incf	___awdiv@divisor,f
 17154  1470  1903               	skipnz
 17155  1471  0AA1               	incf	___awdiv@divisor+1,f
 17156  1472  01A6               	clrf	___awdiv@sign
 17157  1473  0AA6               	incf	___awdiv@sign,f
 17158  1474                     l8647:	
 17159  1474  1FA3               	btfss	___awdiv@dividend+1,7
 17160  1475  2C7F               	goto	l8653
 17161  1476  09A2               	comf	___awdiv@dividend,f
 17162  1477  09A3               	comf	___awdiv@dividend+1,f
 17163  1478  0AA2               	incf	___awdiv@dividend,f
 17164  1479  1903               	skipnz
 17165  147A  0AA3               	incf	___awdiv@dividend+1,f
 17166  147B  3001               	movlw	1
 17167  147C  00A4               	movwf	??___awdiv
 17168  147D  0824               	movf	??___awdiv,w
 17169  147E  06A6               	xorwf	___awdiv@sign,f
 17170  147F                     l8653:	
 17171  147F  01A7               	clrf	___awdiv@quotient
 17172  1480  01A8               	clrf	___awdiv@quotient+1
 17173  1481  0821               	movf	___awdiv@divisor+1,w
 17174  1482  0420               	iorwf	___awdiv@divisor,w
 17175  1483  1903               	skipnz
 17176  1484  2CAE               	goto	l8675
 17177  1485  01A5               	clrf	___awdiv@counter
 17178  1486  0AA5               	incf	___awdiv@counter,f
 17179  1487                     l8663:	
 17180  1487  1BA1               	btfsc	___awdiv@divisor+1,7
 17181  1488  2C93               	goto	l8665
 17182  1489  3001               	movlw	1
 17183  148A                     u8685:	
 17184  148A  35A0               	lslf	___awdiv@divisor,f
 17185  148B  0DA1               	rlf	___awdiv@divisor+1,f
 17186  148C  0B89               	decfsz	9,f
 17187  148D  2C8A               	goto	u8685
 17188  148E  3001               	movlw	1
 17189  148F  00A4               	movwf	??___awdiv
 17190  1490  0824               	movf	??___awdiv,w
 17191  1491  07A5               	addwf	___awdiv@counter,f
 17192  1492  2C87               	goto	l8663
 17193  1493                     l8665:	
 17194  1493  3001               	movlw	1
 17195  1494                     u8705:	
 17196  1494  35A7               	lslf	___awdiv@quotient,f
 17197  1495  0DA8               	rlf	___awdiv@quotient+1,f
 17198  1496  0B89               	decfsz	9,f
 17199  1497  2C94               	goto	u8705
 17200  1498  0821               	movf	___awdiv@divisor+1,w
 17201  1499  0223               	subwf	___awdiv@dividend+1,w
 17202  149A  1D03               	skipz
 17203  149B  2C9E               	goto	u8715
 17204  149C  0820               	movf	___awdiv@divisor,w
 17205  149D  0222               	subwf	___awdiv@dividend,w
 17206  149E                     u8715:	
 17207  149E  1C03               	skipc
 17208  149F  2CA5               	goto	l8671
 17209  14A0  0820               	movf	___awdiv@divisor,w
 17210  14A1  02A2               	subwf	___awdiv@dividend,f
 17211  14A2  0821               	movf	___awdiv@divisor+1,w
 17212  14A3  3BA3               	subwfb	___awdiv@dividend+1,f
 17213  14A4  1427               	bsf	___awdiv@quotient,0
 17214  14A5                     l8671:	
 17215  14A5  3001               	movlw	1
 17216  14A6                     u8725:	
 17217  14A6  36A1               	lsrf	___awdiv@divisor+1,f
 17218  14A7  0CA0               	rrf	___awdiv@divisor,f
 17219  14A8  0B89               	decfsz	9,f
 17220  14A9  2CA6               	goto	u8725
 17221  14AA  3001               	movlw	1
 17222  14AB  02A5               	subwf	___awdiv@counter,f
 17223  14AC  1D03               	btfss	3,2
 17224  14AD  2C93               	goto	l8665
 17225  14AE                     l8675:	
 17226  14AE  0826               	movf	___awdiv@sign,w
 17227  14AF  1903               	btfsc	3,2
 17228  14B0  2CB6               	goto	l8679
 17229  14B1  09A7               	comf	___awdiv@quotient,f
 17230  14B2  09A8               	comf	___awdiv@quotient+1,f
 17231  14B3  0AA7               	incf	___awdiv@quotient,f
 17232  14B4  1903               	skipnz
 17233  14B5  0AA8               	incf	___awdiv@quotient+1,f
 17234  14B6                     l8679:	
 17235  14B6  0828               	movf	___awdiv@quotient+1,w
 17236  14B7  01A1               	clrf	?___awdiv+1
 17237  14B8  07A1               	addwf	?___awdiv+1,f
 17238  14B9  0827               	movf	___awdiv@quotient,w
 17239  14BA  01A0               	clrf	?___awdiv
 17240  14BB  07A0               	addwf	?___awdiv,f
 17241  14BC  0008               	return
 17242  14BD                     __end_of___awdiv:	
 17243                           
 17244                           	psect	text114
 17245  1A10                     __ptext114:	
 17246 ;; *************** function _DelayOff_Initialization *****************
 17247 ;; Defined at:
 17248 ;;		line 26 in file "../src/DelayOff_B1.c"
 17249 ;; Parameters:    Size  Location     Type
 17250 ;;		None
 17251 ;; Auto vars:     Size  Location     Type
 17252 ;;		None
 17253 ;; Return value:  Size  Location     Type
 17254 ;;		None               void
 17255 ;; Registers used:
 17256 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17257 ;; Tracked objects:
 17258 ;;		On entry : 0/0
 17259 ;;		On exit  : 0/0
 17260 ;;		Unchanged: 0/0
 17261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17266 ;;Total ram usage:        0 bytes
 17267 ;; Hardware stack levels used:    1
 17268 ;; Hardware stack levels required when called:    7
 17269 ;; This function calls:
 17270 ;;		_DlyOff_Initialization
 17271 ;; This function is called by:
 17272 ;;		_main
 17273 ;; This function uses a non-reentrant model
 17274 ;;
 17275                           
 17276                           
 17277                           ;psect for function _DelayOff_Initialization
 17278  1A10                     _DelayOff_Initialization:	
 17279                           
 17280                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17281                           
 17282                           ;incstack = 0
 17283                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17284  1A10  3001               	movlw	1
 17285  1A11  319A  2262  319A   	fcall	_DlyOff_Initialization
 17286                           
 17287                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17288  1A14  3002               	movlw	2
 17289  1A15  319A  2262         	fcall	_DlyOff_Initialization
 17290  1A17  0008               	return
 17291  1A18                     __end_of_DelayOff_Initialization:	
 17292                           
 17293                           	psect	text115
 17294  1A62                     __ptext115:	
 17295 ;; *************** function _DlyOff_Initialization *****************
 17296 ;; Defined at:
 17297 ;;		line 56 in file "../src/DelayOff_B1.c"
 17298 ;; Parameters:    Size  Location     Type
 17299 ;;  sw              1    wreg     unsigned char 
 17300 ;; Auto vars:     Size  Location     Type
 17301 ;;  sw              1    2[BANK0 ] unsigned char 
 17302 ;; Return value:  Size  Location     Type
 17303 ;;		None               void
 17304 ;; Registers used:
 17305 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17306 ;; Tracked objects:
 17307 ;;		On entry : 0/0
 17308 ;;		On exit  : 0/0
 17309 ;;		Unchanged: 0/0
 17310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17315 ;;Total ram usage:        1 bytes
 17316 ;; Hardware stack levels used:    1
 17317 ;; Hardware stack levels required when called:    6
 17318 ;; This function calls:
 17319 ;;		_DelayOffPointSelect
 17320 ;; This function is called by:
 17321 ;;		_DelayOff_Initialization
 17322 ;; This function uses a non-reentrant model
 17323 ;;
 17324                           
 17325                           
 17326                           ;psect for function _DlyOff_Initialization
 17327  1A62                     _DlyOff_Initialization:	
 17328                           
 17329                           ;incstack = 0
 17330                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17331                           ;DlyOff_Initialization@sw stored from wreg
 17332  1A62  0020               	movlb	0	; select bank0
 17333  1A63  00A2               	movwf	DlyOff_Initialization@sw
 17334                           
 17335                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17336  1A64  0822               	movf	DlyOff_Initialization@sw,w
 17337  1A65  319C  2486         	fcall	_DelayOffPointSelect
 17338                           
 17339                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 17340  1A67  0020               	movlb	0	; select bank0
 17341  1A68  086A               	movf	_DelayOff,w
 17342  1A69  0086               	movwf	6
 17343  1A6A  0187               	clrf	7
 17344  1A6B  1401               	bsf	1,0
 17345  1A6C  0008               	return
 17346  1A6D                     __end_of_DlyOff_Initialization:	
 17347                           
 17348                           	psect	text116
 17349  1C86                     __ptext116:	
 17350 ;; *************** function _DelayOffPointSelect *****************
 17351 ;; Defined at:
 17352 ;;		line 7 in file "../src/DelayOff_B1.c"
 17353 ;; Parameters:    Size  Location     Type
 17354 ;;  sw              1    wreg     unsigned char 
 17355 ;; Auto vars:     Size  Location     Type
 17356 ;;  sw              1    1[BANK0 ] unsigned char 
 17357 ;; Return value:  Size  Location     Type
 17358 ;;		None               void
 17359 ;; Registers used:
 17360 ;;		wreg
 17361 ;; Tracked objects:
 17362 ;;		On entry : 0/0
 17363 ;;		On exit  : 0/0
 17364 ;;		Unchanged: 0/0
 17365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17369 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17370 ;;Total ram usage:        2 bytes
 17371 ;; Hardware stack levels used:    1
 17372 ;; Hardware stack levels required when called:    5
 17373 ;; This function calls:
 17374 ;;		Nothing
 17375 ;; This function is called by:
 17376 ;;		_DlyOff_Initialization
 17377 ;;		_DlyOff_Main
 17378 ;;		_setDelayOff_GO
 17379 ;; This function uses a non-reentrant model
 17380 ;;
 17381                           
 17382                           
 17383                           ;psect for function _DelayOffPointSelect
 17384  1C86                     _DelayOffPointSelect:	
 17385                           
 17386                           ;incstack = 0
 17387                           ; Regs used in _DelayOffPointSelect: [wreg]
 17388                           ;DelayOffPointSelect@sw stored from wreg
 17389  1C86  0020               	movlb	0	; select bank0
 17390  1C87  00A1               	movwf	DelayOffPointSelect@sw
 17391                           
 17392                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17393  1C88  0821               	movf	DelayOffPointSelect@sw,w
 17394  1C89  3A01               	xorlw	1
 17395  1C8A  1D03               	skipz
 17396  1C8B  2C91               	goto	l8577
 17397                           
 17398                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17399  1C8C  30E9               	movlw	_DlySw1& (0+255)
 17400  1C8D  00A0               	movwf	??_DelayOffPointSelect
 17401  1C8E  0820               	movf	??_DelayOffPointSelect,w
 17402  1C8F  00EA               	movwf	_DelayOff
 17403                           
 17404                           ;DelayOff_B1.c: 11: }
 17405  1C90  0008               	return
 17406  1C91                     l8577:	
 17407                           
 17408                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17409  1C91  0821               	movf	DelayOffPointSelect@sw,w
 17410  1C92  3A02               	xorlw	2
 17411  1C93  1D03               	skipz
 17412  1C94  0008               	return
 17413                           
 17414                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17415  1C95  30EB               	movlw	_DlySw2& (0+255)
 17416  1C96  00A0               	movwf	??_DelayOffPointSelect
 17417  1C97  0820               	movf	??_DelayOffPointSelect,w
 17418  1C98  00EA               	movwf	_DelayOff
 17419  1C99  0008               	return
 17420  1C9A                     __end_of_DelayOffPointSelect:	
 17421                           
 17422                           	psect	text117
 17423  1CAF                     __ptext117:	
 17424 ;; *************** function _CC2500_PowerOnInitial *****************
 17425 ;; Defined at:
 17426 ;;		line 122 in file "../src/CC2500_B1.c"
 17427 ;; Parameters:    Size  Location     Type
 17428 ;;		None
 17429 ;; Auto vars:     Size  Location     Type
 17430 ;;		None
 17431 ;; Return value:  Size  Location     Type
 17432 ;;		None               void
 17433 ;; Registers used:
 17434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17435 ;; Tracked objects:
 17436 ;;		On entry : 0/0
 17437 ;;		On exit  : 0/0
 17438 ;;		Unchanged: 0/0
 17439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17444 ;;Total ram usage:        0 bytes
 17445 ;; Hardware stack levels used:    1
 17446 ;; Hardware stack levels required when called:    8
 17447 ;; This function calls:
 17448 ;;		_CC2500_ClearRXFIFO
 17449 ;;		_CC2500_ClearTXFIFO
 17450 ;;		_CC2500_FrequencyCabr
 17451 ;;		_CC2500_InitPATable
 17452 ;;		_CC2500_InitSetREG
 17453 ;;		_CC2500_PowerRST
 17454 ;;		_CC2500_SIDLEMode
 17455 ;; This function is called by:
 17456 ;;		_main
 17457 ;; This function uses a non-reentrant model
 17458 ;;
 17459                           
 17460                           
 17461                           ;psect for function _CC2500_PowerOnInitial
 17462  1CAF                     _CC2500_PowerOnInitial:	
 17463                           
 17464                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 17465                           
 17466                           ;incstack = 0
 17467                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17468  1CAF  3192  2277  319C   	fcall	_CC2500_PowerRST
 17469                           
 17470                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 17471  1CB2  319F  274F  319C   	fcall	_CC2500_InitSetREG
 17472                           
 17473                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 17474  1CB5  319D  25FB  319C   	fcall	_CC2500_InitPATable
 17475                           
 17476                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 17477  1CB8  3199  21D9  319C   	fcall	_CC2500_ClearTXFIFO
 17478                           
 17479                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 17480  1CBB  3199  21D5  319C   	fcall	_CC2500_ClearRXFIFO
 17481                           
 17482                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 17483  1CBE  319A  228E  319C   	fcall	_CC2500_FrequencyCabr
 17484                           
 17485                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 17486  1CC1  3199  21DD         	fcall	_CC2500_SIDLEMode
 17487  1CC3  0008               	return
 17488  1CC4                     __end_of_CC2500_PowerOnInitial:	
 17489                           
 17490                           	psect	text118
 17491  19DD                     __ptext118:	
 17492 ;; *************** function _CC2500_SIDLEMode *****************
 17493 ;; Defined at:
 17494 ;;		line 212 in file "../src/CC2500_B1.c"
 17495 ;; Parameters:    Size  Location     Type
 17496 ;;		None
 17497 ;; Auto vars:     Size  Location     Type
 17498 ;;		None
 17499 ;; Return value:  Size  Location     Type
 17500 ;;		None               void
 17501 ;; Registers used:
 17502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17503 ;; Tracked objects:
 17504 ;;		On entry : 0/0
 17505 ;;		On exit  : 0/0
 17506 ;;		Unchanged: 0/0
 17507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17512 ;;Total ram usage:        0 bytes
 17513 ;; Hardware stack levels used:    1
 17514 ;; Hardware stack levels required when called:    7
 17515 ;; This function calls:
 17516 ;;		_CC2500_WriteCommand
 17517 ;; This function is called by:
 17518 ;;		_CC2500_PowerOnInitial
 17519 ;; This function uses a non-reentrant model
 17520 ;;
 17521                           
 17522                           
 17523                           ;psect for function _CC2500_SIDLEMode
 17524  19DD                     _CC2500_SIDLEMode:	
 17525                           
 17526                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 17527                           
 17528                           ;incstack = 0
 17529                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17530  19DD  3036               	movlw	54
 17531  19DE  319D  2508         	fcall	_CC2500_WriteCommand
 17532  19E0  0008               	return
 17533  19E1                     __end_of_CC2500_SIDLEMode:	
 17534                           
 17535                           	psect	text119
 17536  1277                     __ptext119:	
 17537 ;; *************** function _CC2500_PowerRST *****************
 17538 ;; Defined at:
 17539 ;;		line 135 in file "../src/CC2500_B1.c"
 17540 ;; Parameters:    Size  Location     Type
 17541 ;;		None
 17542 ;; Auto vars:     Size  Location     Type
 17543 ;;		None
 17544 ;; Return value:  Size  Location     Type
 17545 ;;		None               void
 17546 ;; Registers used:
 17547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17548 ;; Tracked objects:
 17549 ;;		On entry : 0/0
 17550 ;;		On exit  : 0/0
 17551 ;;		Unchanged: 0/0
 17552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17557 ;;Total ram usage:        1 bytes
 17558 ;; Hardware stack levels used:    1
 17559 ;; Hardware stack levels required when called:    6
 17560 ;; This function calls:
 17561 ;;		_CC2500_WriteByte
 17562 ;;		_DelayTime_1us
 17563 ;;		_Timeout_Counter
 17564 ;;		_set_TimeoutCleared
 17565 ;; This function is called by:
 17566 ;;		_CC2500_PowerOnInitial
 17567 ;; This function uses a non-reentrant model
 17568 ;;
 17569                           
 17570                           
 17571                           ;psect for function _CC2500_PowerRST
 17572  1277                     _CC2500_PowerRST:	
 17573                           
 17574                           ;CC2500_B1.c: 136: RC1 = 0;
 17575                           
 17576                           ;incstack = 0
 17577                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17578  1277  0020               	movlb	0	; select bank0
 17579  1278  108E               	bcf	14,1	;volatile
 17580                           
 17581                           ;CC2500_B1.c: 137: RC0 = 0;
 17582  1279  100E               	bcf	14,0	;volatile
 17583                           
 17584                           ;CC2500_B1.c: 138: RC4 = 1;
 17585  127A  160E               	bsf	14,4	;volatile
 17586                           
 17587                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 17588  127B  300A               	movlw	10
 17589  127C  00A0               	movwf	DelayTime_1us@count
 17590  127D  3000               	movlw	0
 17591  127E  00A1               	movwf	DelayTime_1us@count+1
 17592  127F  319F  2701  3192   	fcall	_DelayTime_1us
 17593                           
 17594                           ;CC2500_B1.c: 140: RC4 = 0;
 17595  1282  0020               	movlb	0	; select bank0
 17596  1283  120E               	bcf	14,4	;volatile
 17597                           
 17598                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 17599  1284  300A               	movlw	10
 17600  1285  00A0               	movwf	DelayTime_1us@count
 17601  1286  3000               	movlw	0
 17602  1287  00A1               	movwf	DelayTime_1us@count+1
 17603  1288  319F  2701  3192   	fcall	_DelayTime_1us
 17604                           
 17605                           ;CC2500_B1.c: 142: RC4 = 1;
 17606  128B  0020               	movlb	0	; select bank0
 17607  128C  160E               	bsf	14,4	;volatile
 17608                           
 17609                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 17610  128D  3028               	movlw	40
 17611  128E  00A0               	movwf	DelayTime_1us@count
 17612  128F  3000               	movlw	0
 17613  1290  00A1               	movwf	DelayTime_1us@count+1
 17614  1291  319F  2701  3192   	fcall	_DelayTime_1us
 17615                           
 17616                           ;CC2500_B1.c: 144: RC4 = 0;
 17617  1294  0020               	movlb	0	; select bank0
 17618  1295  120E               	bcf	14,4	;volatile
 17619                           
 17620                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 17621  1296  3030               	movlw	48
 17622  1297  00A6               	movwf	??_CC2500_PowerRST
 17623  1298  0826               	movf	??_CC2500_PowerRST,w
 17624  1299  00FA               	movwf	_SPI0Buffer
 17625                           
 17626                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 17627  129A  2A9E               	goto	l9599
 17628  129B                     l9597:	
 17629                           
 17630                           ;CC2500_B1.c: 147: Timeout_Counter();
 17631  129B  319C  249A  3192   	fcall	_Timeout_Counter
 17632  129E                     l9599:	
 17633  129E  0020               	movlb	0	; select bank0
 17634  129F  1D0E               	btfss	14,2	;volatile
 17635  12A0  2AA4               	goto	l9603
 17636  12A1  0021               	movlb	1	; select bank1
 17637  12A2  1D2D               	btfss	(_myMain^(0+128)+13),2
 17638  12A3  2A9B               	goto	l9597
 17639  12A4                     l9603:	
 17640                           
 17641                           ;CC2500_B1.c: 148: };
 17642                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 17643  12A4  3199  21E5  3192   	fcall	_set_TimeoutCleared
 17644                           
 17645                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 17646  12A7  319C  2472  3192   	fcall	_CC2500_WriteByte
 17647                           
 17648                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 17649  12AA  2AAE               	goto	l9609
 17650  12AB                     l9607:	
 17651                           
 17652                           ;CC2500_B1.c: 152: Timeout_Counter();
 17653  12AB  319C  249A  3192   	fcall	_Timeout_Counter
 17654  12AE                     l9609:	
 17655  12AE  0020               	movlb	0	; select bank0
 17656  12AF  1D0E               	btfss	14,2	;volatile
 17657  12B0  2AB4               	goto	l9613
 17658  12B1  0021               	movlb	1	; select bank1
 17659  12B2  1D2D               	btfss	(_myMain^(0+128)+13),2
 17660  12B3  2AAB               	goto	l9607
 17661  12B4                     l9613:	
 17662                           
 17663                           ;CC2500_B1.c: 153: };
 17664                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 17665  12B4  3199  21E5         	fcall	_set_TimeoutCleared
 17666                           
 17667                           ;CC2500_B1.c: 155: RC0 = 0;
 17668  12B6  0020               	movlb	0	; select bank0
 17669  12B7  100E               	bcf	14,0	;volatile
 17670                           
 17671                           ;CC2500_B1.c: 156: RC4 = 1;
 17672  12B8  160E               	bsf	14,4	;volatile
 17673  12B9  0008               	return
 17674  12BA                     __end_of_CC2500_PowerRST:	
 17675                           
 17676                           	psect	text120
 17677  1F4F                     __ptext120:	
 17678 ;; *************** function _CC2500_InitSetREG *****************
 17679 ;; Defined at:
 17680 ;;		line 162 in file "../src/CC2500_B1.c"
 17681 ;; Parameters:    Size  Location     Type
 17682 ;;		None
 17683 ;; Auto vars:     Size  Location     Type
 17684 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17685 ;;  temp2           1    7[BANK0 ] unsigned char 
 17686 ;;  temp1           1    6[BANK0 ] unsigned char 
 17687 ;; Return value:  Size  Location     Type
 17688 ;;		None               void
 17689 ;; Registers used:
 17690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17691 ;; Tracked objects:
 17692 ;;		On entry : 0/0
 17693 ;;		On exit  : 0/0
 17694 ;;		Unchanged: 0/0
 17695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17697 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17698 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17699 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17700 ;;Total ram usage:        4 bytes
 17701 ;; Hardware stack levels used:    1
 17702 ;; Hardware stack levels required when called:    7
 17703 ;; This function calls:
 17704 ;;		_CC2500_WriteREG
 17705 ;; This function is called by:
 17706 ;;		_CC2500_PowerOnInitial
 17707 ;; This function uses a non-reentrant model
 17708 ;;
 17709                           
 17710                           
 17711                           ;psect for function _CC2500_InitSetREG
 17712  1F4F                     _CC2500_InitSetREG:	
 17713                           
 17714                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17715                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17716                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17717                           
 17718                           ;incstack = 0
 17719                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17720  1F4F  0020               	movlb	0	; select bank0
 17721  1F50  01A8               	clrf	CC2500_InitSetREG@loop_c
 17722  1F51                     L10:	
 17723  1F51  302F               	movlw	47
 17724  1F52  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17725  1F53  1803               	btfsc	3,0
 17726  1F54  0008               	return
 17727                           
 17728                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17729  1F55  0828               	movf	CC2500_InitSetREG@loop_c,w
 17730  1F56  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17731  1F57  0084               	movwf	4
 17732  1F58  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17733  1F59  1803               	skipnc
 17734  1F5A  3E01               	addlw	1
 17735  1F5B  0085               	movwf	5
 17736  1F5C  0800               	movf	0,w	;code access
 17737  1F5D  00A5               	movwf	??_CC2500_InitSetREG
 17738  1F5E  0825               	movf	??_CC2500_InitSetREG,w
 17739  1F5F  00A6               	movwf	CC2500_InitSetREG@temp1
 17740                           
 17741                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17742  1F60  0828               	movf	CC2500_InitSetREG@loop_c,w
 17743  1F61  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17744  1F62  0084               	movwf	4
 17745  1F63  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17746  1F64  1803               	skipnc
 17747  1F65  3E01               	addlw	1
 17748  1F66  0085               	movwf	5
 17749  1F67  0800               	movf	0,w	;code access
 17750  1F68  00A5               	movwf	??_CC2500_InitSetREG
 17751  1F69  0825               	movf	??_CC2500_InitSetREG,w
 17752  1F6A  00A7               	movwf	CC2500_InitSetREG@temp2
 17753                           
 17754                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17755  1F6B  0827               	movf	CC2500_InitSetREG@temp2,w
 17756  1F6C  00A5               	movwf	??_CC2500_InitSetREG
 17757  1F6D  0825               	movf	??_CC2500_InitSetREG,w
 17758  1F6E  00A2               	movwf	CC2500_WriteREG@value
 17759  1F6F  0826               	movf	CC2500_InitSetREG@temp1,w
 17760  1F70  319E  2679  319F   	fcall	_CC2500_WriteREG
 17761  1F73  3001               	movlw	1
 17762  1F74  0020               	movlb	0	; select bank0
 17763  1F75  00A5               	movwf	??_CC2500_InitSetREG
 17764  1F76  0825               	movf	??_CC2500_InitSetREG,w
 17765  1F77  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17766  1F78  2F51               	goto	L10
 17767  1F79                     __end_of_CC2500_InitSetREG:	
 17768                           
 17769                           	psect	text121
 17770  1DFB                     __ptext121:	
 17771 ;; *************** function _CC2500_InitPATable *****************
 17772 ;; Defined at:
 17773 ;;		line 177 in file "../src/CC2500_B1.c"
 17774 ;; Parameters:    Size  Location     Type
 17775 ;;		None
 17776 ;; Auto vars:     Size  Location     Type
 17777 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17778 ;;  temp            1    6[BANK0 ] unsigned char 
 17779 ;; Return value:  Size  Location     Type
 17780 ;;		None               void
 17781 ;; Registers used:
 17782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17783 ;; Tracked objects:
 17784 ;;		On entry : 0/0
 17785 ;;		On exit  : 0/0
 17786 ;;		Unchanged: 0/0
 17787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17789 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17791 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17792 ;;Total ram usage:        3 bytes
 17793 ;; Hardware stack levels used:    1
 17794 ;; Hardware stack levels required when called:    7
 17795 ;; This function calls:
 17796 ;;		_CC2500_WriteREG
 17797 ;; This function is called by:
 17798 ;;		_CC2500_PowerOnInitial
 17799 ;; This function uses a non-reentrant model
 17800 ;;
 17801                           
 17802                           
 17803                           ;psect for function _CC2500_InitPATable
 17804  1DFB                     _CC2500_InitPATable:	
 17805                           
 17806                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17807                           ;CC2500_B1.c: 179: unsigned char temp;
 17808                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17809                           
 17810                           ;incstack = 0
 17811                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17812  1DFB  0020               	movlb	0	; select bank0
 17813  1DFC  01A7               	clrf	CC2500_InitPATable@loop_d
 17814  1DFD                     L11:	
 17815  1DFD  3008               	movlw	8
 17816  1DFE  0227               	subwf	CC2500_InitPATable@loop_d,w
 17817  1DFF  1803               	btfsc	3,0
 17818  1E00  0008               	return
 17819                           
 17820                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17821  1E01  0827               	movf	CC2500_InitPATable@loop_d,w
 17822  1E02  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17823  1E03  0084               	movwf	4
 17824  1E04  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17825  1E05  1803               	skipnc
 17826  1E06  3E01               	addlw	1
 17827  1E07  0085               	movwf	5
 17828  1E08  0800               	movf	0,w	;code access
 17829  1E09  00A5               	movwf	??_CC2500_InitPATable
 17830  1E0A  0825               	movf	??_CC2500_InitPATable,w
 17831  1E0B  00A6               	movwf	CC2500_InitPATable@temp
 17832                           
 17833                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17834  1E0C  0826               	movf	CC2500_InitPATable@temp,w
 17835  1E0D  00A5               	movwf	??_CC2500_InitPATable
 17836  1E0E  0825               	movf	??_CC2500_InitPATable,w
 17837  1E0F  00A2               	movwf	CC2500_WriteREG@value
 17838  1E10  303E               	movlw	62
 17839  1E11  319E  2679  319D   	fcall	_CC2500_WriteREG
 17840  1E14  3001               	movlw	1
 17841  1E15  0020               	movlb	0	; select bank0
 17842  1E16  00A5               	movwf	??_CC2500_InitPATable
 17843  1E17  0825               	movf	??_CC2500_InitPATable,w
 17844  1E18  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17845  1E19  2DFD               	goto	L11
 17846  1E1A                     __end_of_CC2500_InitPATable:	
 17847                           
 17848                           	psect	text122
 17849  1E79                     __ptext122:	
 17850 ;; *************** function _CC2500_WriteREG *****************
 17851 ;; Defined at:
 17852 ;;		line 254 in file "../src/CC2500_B1.c"
 17853 ;; Parameters:    Size  Location     Type
 17854 ;;  w_addr          1    wreg     unsigned char 
 17855 ;;  value           1    2[BANK0 ] unsigned char 
 17856 ;; Auto vars:     Size  Location     Type
 17857 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17858 ;; Return value:  Size  Location     Type
 17859 ;;		None               void
 17860 ;; Registers used:
 17861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17862 ;; Tracked objects:
 17863 ;;		On entry : 0/0
 17864 ;;		On exit  : 0/0
 17865 ;;		Unchanged: 0/0
 17866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17867 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17870 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17871 ;;Total ram usage:        3 bytes
 17872 ;; Hardware stack levels used:    1
 17873 ;; Hardware stack levels required when called:    6
 17874 ;; This function calls:
 17875 ;;		_CC2500_WriteByte
 17876 ;;		_Timeout_Counter
 17877 ;;		_set_TimeoutCleared
 17878 ;; This function is called by:
 17879 ;;		_CC2500_InitSetREG
 17880 ;;		_CC2500_InitPATable
 17881 ;; This function uses a non-reentrant model
 17882 ;;
 17883                           
 17884                           
 17885                           ;psect for function _CC2500_WriteREG
 17886  1E79                     _CC2500_WriteREG:	
 17887                           
 17888                           ;incstack = 0
 17889                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17890                           ;CC2500_WriteREG@w_addr stored from wreg
 17891  1E79  0020               	movlb	0	; select bank0
 17892  1E7A  00A4               	movwf	CC2500_WriteREG@w_addr
 17893                           
 17894                           ;CC2500_B1.c: 255: RC4 = 0;
 17895  1E7B  120E               	bcf	14,4	;volatile
 17896                           
 17897                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17898  1E7C  0824               	movf	CC2500_WriteREG@w_addr,w
 17899  1E7D  00A3               	movwf	??_CC2500_WriteREG
 17900  1E7E  0823               	movf	??_CC2500_WriteREG,w
 17901  1E7F  00FA               	movwf	_SPI0Buffer
 17902                           
 17903                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17904  1E80  2E84               	goto	l9343
 17905  1E81                     l9341:	
 17906                           
 17907                           ;CC2500_B1.c: 258: Timeout_Counter();
 17908  1E81  319C  249A  319E   	fcall	_Timeout_Counter
 17909  1E84                     l9343:	
 17910  1E84  0020               	movlb	0	; select bank0
 17911  1E85  1D0E               	btfss	14,2	;volatile
 17912  1E86  2E8A               	goto	l9347
 17913  1E87  0021               	movlb	1	; select bank1
 17914  1E88  1D2D               	btfss	(_myMain^(0+128)+13),2
 17915  1E89  2E81               	goto	l9341
 17916  1E8A                     l9347:	
 17917                           
 17918                           ;CC2500_B1.c: 259: };
 17919                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17920  1E8A  3199  21E5  319E   	fcall	_set_TimeoutCleared
 17921                           
 17922                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17923  1E8D  319C  2472  319E   	fcall	_CC2500_WriteByte
 17924                           
 17925                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17926  1E90  0020               	movlb	0	; select bank0
 17927  1E91  0822               	movf	CC2500_WriteREG@value,w
 17928  1E92  00A3               	movwf	??_CC2500_WriteREG
 17929  1E93  0823               	movf	??_CC2500_WriteREG,w
 17930  1E94  00FA               	movwf	_SPI0Buffer
 17931                           
 17932                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17933  1E95  319C  2472         	fcall	_CC2500_WriteByte
 17934                           
 17935                           ;CC2500_B1.c: 265: RC4 = 1;
 17936  1E97  0020               	movlb	0	; select bank0
 17937  1E98  160E               	bsf	14,4	;volatile
 17938  1E99  0008               	return
 17939  1E9A                     __end_of_CC2500_WriteREG:	
 17940                           
 17941                           	psect	text123
 17942  1A8E                     __ptext123:	
 17943 ;; *************** function _CC2500_FrequencyCabr *****************
 17944 ;; Defined at:
 17945 ;;		line 204 in file "../src/CC2500_B1.c"
 17946 ;; Parameters:    Size  Location     Type
 17947 ;;		None
 17948 ;; Auto vars:     Size  Location     Type
 17949 ;;		None
 17950 ;; Return value:  Size  Location     Type
 17951 ;;		None               void
 17952 ;; Registers used:
 17953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17954 ;; Tracked objects:
 17955 ;;		On entry : 0/0
 17956 ;;		On exit  : 0/0
 17957 ;;		Unchanged: 0/0
 17958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17963 ;;Total ram usage:        0 bytes
 17964 ;; Hardware stack levels used:    1
 17965 ;; Hardware stack levels required when called:    7
 17966 ;; This function calls:
 17967 ;;		_CC2500_WriteCommand
 17968 ;;		_DelayTime_1us
 17969 ;; This function is called by:
 17970 ;;		_CC2500_PowerOnInitial
 17971 ;; This function uses a non-reentrant model
 17972 ;;
 17973                           
 17974                           
 17975                           ;psect for function _CC2500_FrequencyCabr
 17976  1A8E                     _CC2500_FrequencyCabr:	
 17977                           
 17978                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17979                           
 17980                           ;incstack = 0
 17981                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17982  1A8E  3033               	movlw	51
 17983  1A8F  319D  2508  319A   	fcall	_CC2500_WriteCommand
 17984                           
 17985                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17986  1A92  30E8               	movlw	232
 17987  1A93  0020               	movlb	0	; select bank0
 17988  1A94  00A0               	movwf	DelayTime_1us@count
 17989  1A95  3003               	movlw	3
 17990  1A96  00A1               	movwf	DelayTime_1us@count+1
 17991  1A97  319F  2701         	fcall	_DelayTime_1us
 17992  1A99  0008               	return
 17993  1A9A                     __end_of_CC2500_FrequencyCabr:	
 17994                           
 17995                           	psect	text124
 17996  1F01                     __ptext124:	
 17997 ;; *************** function _DelayTime_1us *****************
 17998 ;; Defined at:
 17999 ;;		line 323 in file "../src/CC2500_B1.c"
 18000 ;; Parameters:    Size  Location     Type
 18001 ;;  count           2    0[BANK0 ] int 
 18002 ;; Auto vars:     Size  Location     Type
 18003 ;;  j               2    4[BANK0 ] unsigned int 
 18004 ;;  i               2    2[BANK0 ] unsigned int 
 18005 ;; Return value:  Size  Location     Type
 18006 ;;		None               void
 18007 ;; Registers used:
 18008 ;;		wreg, status,2
 18009 ;; Tracked objects:
 18010 ;;		On entry : 0/0
 18011 ;;		On exit  : 0/0
 18012 ;;		Unchanged: 0/0
 18013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18014 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18015 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18017 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18018 ;;Total ram usage:        6 bytes
 18019 ;; Hardware stack levels used:    1
 18020 ;; Hardware stack levels required when called:    5
 18021 ;; This function calls:
 18022 ;;		Nothing
 18023 ;; This function is called by:
 18024 ;;		_CC2500_PowerRST
 18025 ;;		_CC2500_FrequencyCabr
 18026 ;; This function uses a non-reentrant model
 18027 ;;
 18028                           
 18029                           
 18030                           ;psect for function _DelayTime_1us
 18031  1F01                     _DelayTime_1us:	
 18032                           
 18033                           ;CC2500_B1.c: 324: unsigned int i, j;
 18034                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 18035                           
 18036                           ;incstack = 0
 18037                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 18038  1F01  3001               	movlw	1
 18039  1F02  0020               	movlb	0	; select bank0
 18040  1F03  00A2               	movwf	DelayTime_1us@i
 18041  1F04  3000               	movlw	0
 18042  1F05  00A3               	movwf	DelayTime_1us@i+1
 18043  1F06                     l386:	
 18044  1F06  0821               	movf	DelayTime_1us@count+1,w
 18045  1F07  0223               	subwf	DelayTime_1us@i+1,w
 18046  1F08  1D03               	skipz
 18047  1F09  2F0C               	goto	u9575
 18048  1F0A  0820               	movf	DelayTime_1us@count,w
 18049  1F0B  0222               	subwf	DelayTime_1us@i,w
 18050  1F0C                     u9575:	
 18051  1F0C  1803               	btfsc	3,0
 18052  1F0D  0008               	return
 18053                           
 18054                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 18055  1F0E  01A4               	clrf	DelayTime_1us@j
 18056  1F0F  01A5               	clrf	DelayTime_1us@j+1
 18057  1F10  3000               	movlw	0
 18058  1F11  0225               	subwf	DelayTime_1us@j+1,w
 18059  1F12  3002               	movlw	2
 18060  1F13  1903               	skipnz
 18061  1F14  0224               	subwf	DelayTime_1us@j,w
 18062  1F15  1803               	btfsc	3,0
 18063  1F16  2F22               	goto	l9335
 18064  1F17                     l9333:	
 18065  1F17  3001               	movlw	1
 18066  1F18  07A4               	addwf	DelayTime_1us@j,f
 18067  1F19  3000               	movlw	0
 18068  1F1A  3DA5               	addwfc	DelayTime_1us@j+1,f
 18069  1F1B  3000               	movlw	0
 18070  1F1C  0225               	subwf	DelayTime_1us@j+1,w
 18071  1F1D  3002               	movlw	2
 18072  1F1E  1903               	skipnz
 18073  1F1F  0224               	subwf	DelayTime_1us@j,w
 18074  1F20  1C03               	skipc
 18075  1F21  2F17               	goto	l9333
 18076  1F22                     l9335:	
 18077  1F22  3001               	movlw	1
 18078  1F23  07A2               	addwf	DelayTime_1us@i,f
 18079  1F24  3000               	movlw	0
 18080  1F25  3DA3               	addwfc	DelayTime_1us@i+1,f
 18081  1F26  2F06               	goto	l386
 18082  1F27                     __end_of_DelayTime_1us:	
 18083                           
 18084                           	psect	text125
 18085  19D9                     __ptext125:	
 18086 ;; *************** function _CC2500_ClearTXFIFO *****************
 18087 ;; Defined at:
 18088 ;;		line 190 in file "../src/CC2500_B1.c"
 18089 ;; Parameters:    Size  Location     Type
 18090 ;;		None
 18091 ;; Auto vars:     Size  Location     Type
 18092 ;;		None
 18093 ;; Return value:  Size  Location     Type
 18094 ;;		None               void
 18095 ;; Registers used:
 18096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18097 ;; Tracked objects:
 18098 ;;		On entry : 0/0
 18099 ;;		On exit  : 0/0
 18100 ;;		Unchanged: 0/0
 18101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18106 ;;Total ram usage:        0 bytes
 18107 ;; Hardware stack levels used:    1
 18108 ;; Hardware stack levels required when called:    7
 18109 ;; This function calls:
 18110 ;;		_CC2500_WriteCommand
 18111 ;; This function is called by:
 18112 ;;		_CC2500_PowerOnInitial
 18113 ;; This function uses a non-reentrant model
 18114 ;;
 18115                           
 18116                           
 18117                           ;psect for function _CC2500_ClearTXFIFO
 18118  19D9                     _CC2500_ClearTXFIFO:	
 18119                           
 18120                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 18121                           
 18122                           ;incstack = 0
 18123                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18124  19D9  303B               	movlw	59
 18125  19DA  319D  2508         	fcall	_CC2500_WriteCommand
 18126  19DC  0008               	return
 18127  19DD                     __end_of_CC2500_ClearTXFIFO:	
 18128                           
 18129                           	psect	text126
 18130  19D5                     __ptext126:	
 18131 ;; *************** function _CC2500_ClearRXFIFO *****************
 18132 ;; Defined at:
 18133 ;;		line 197 in file "../src/CC2500_B1.c"
 18134 ;; Parameters:    Size  Location     Type
 18135 ;;		None
 18136 ;; Auto vars:     Size  Location     Type
 18137 ;;		None
 18138 ;; Return value:  Size  Location     Type
 18139 ;;		None               void
 18140 ;; Registers used:
 18141 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18142 ;; Tracked objects:
 18143 ;;		On entry : 0/0
 18144 ;;		On exit  : 0/0
 18145 ;;		Unchanged: 0/0
 18146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18151 ;;Total ram usage:        0 bytes
 18152 ;; Hardware stack levels used:    1
 18153 ;; Hardware stack levels required when called:    7
 18154 ;; This function calls:
 18155 ;;		_CC2500_WriteCommand
 18156 ;; This function is called by:
 18157 ;;		_CC2500_PowerOnInitial
 18158 ;; This function uses a non-reentrant model
 18159 ;;
 18160                           
 18161                           
 18162                           ;psect for function _CC2500_ClearRXFIFO
 18163  19D5                     _CC2500_ClearRXFIFO:	
 18164                           
 18165                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 18166                           
 18167                           ;incstack = 0
 18168                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18169  19D5  303A               	movlw	58
 18170  19D6  319D  2508         	fcall	_CC2500_WriteCommand
 18171  19D8  0008               	return
 18172  19D9                     __end_of_CC2500_ClearRXFIFO:	
 18173                           
 18174                           	psect	text127
 18175  1D08                     __ptext127:	
 18176 ;; *************** function _CC2500_WriteCommand *****************
 18177 ;; Defined at:
 18178 ;;		line 288 in file "../src/CC2500_B1.c"
 18179 ;; Parameters:    Size  Location     Type
 18180 ;;  command         1    wreg     unsigned char 
 18181 ;; Auto vars:     Size  Location     Type
 18182 ;;  command         1    3[BANK0 ] unsigned char 
 18183 ;; Return value:  Size  Location     Type
 18184 ;;		None               void
 18185 ;; Registers used:
 18186 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18187 ;; Tracked objects:
 18188 ;;		On entry : 0/0
 18189 ;;		On exit  : 0/0
 18190 ;;		Unchanged: 0/0
 18191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18193 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18194 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18195 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18196 ;;Total ram usage:        2 bytes
 18197 ;; Hardware stack levels used:    1
 18198 ;; Hardware stack levels required when called:    6
 18199 ;; This function calls:
 18200 ;;		_CC2500_WriteByte
 18201 ;;		_Timeout_Counter
 18202 ;;		_set_TimeoutCleared
 18203 ;; This function is called by:
 18204 ;;		_CC2500_TxData
 18205 ;;		_CC2500_ClearTXFIFO
 18206 ;;		_CC2500_ClearRXFIFO
 18207 ;;		_CC2500_FrequencyCabr
 18208 ;;		_CC2500_SIDLEMode
 18209 ;;		_setRF_Main
 18210 ;;		_RF_RxDisable
 18211 ;; This function uses a non-reentrant model
 18212 ;;
 18213                           
 18214                           
 18215                           ;psect for function _CC2500_WriteCommand
 18216  1D08                     _CC2500_WriteCommand:	
 18217                           
 18218                           ;incstack = 0
 18219                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18220                           ;CC2500_WriteCommand@command stored from wreg
 18221  1D08  0020               	movlb	0	; select bank0
 18222  1D09  00A3               	movwf	CC2500_WriteCommand@command
 18223                           
 18224                           ;CC2500_B1.c: 289: RC4 = 0;
 18225  1D0A  120E               	bcf	14,4	;volatile
 18226                           
 18227                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 18228  1D0B  0823               	movf	CC2500_WriteCommand@command,w
 18229  1D0C  00A2               	movwf	??_CC2500_WriteCommand
 18230  1D0D  0822               	movf	??_CC2500_WriteCommand,w
 18231  1D0E  00FA               	movwf	_SPI0Buffer
 18232                           
 18233                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 18234  1D0F  2D13               	goto	l9075
 18235  1D10                     l9073:	
 18236                           
 18237                           ;CC2500_B1.c: 293: Timeout_Counter();
 18238  1D10  319C  249A  319D   	fcall	_Timeout_Counter
 18239  1D13                     l9075:	
 18240  1D13  0020               	movlb	0	; select bank0
 18241  1D14  1D0E               	btfss	14,2	;volatile
 18242  1D15  2D19               	goto	l9079
 18243  1D16  0021               	movlb	1	; select bank1
 18244  1D17  1D2D               	btfss	(_myMain^(0+128)+13),2
 18245  1D18  2D10               	goto	l9073
 18246  1D19                     l9079:	
 18247                           
 18248                           ;CC2500_B1.c: 294: };
 18249                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 18250  1D19  3199  21E5  319D   	fcall	_set_TimeoutCleared
 18251                           
 18252                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 18253  1D1C  319C  2472         	fcall	_CC2500_WriteByte
 18254                           
 18255                           ;CC2500_B1.c: 298: RC4 = 1;
 18256  1D1E  0020               	movlb	0	; select bank0
 18257  1D1F  160E               	bsf	14,4	;volatile
 18258  1D20  0008               	return
 18259  1D21                     __end_of_CC2500_WriteCommand:	
 18260                           
 18261                           	psect	text128
 18262  19E5                     __ptext128:	
 18263 ;; *************** function _set_TimeoutCleared *****************
 18264 ;; Defined at:
 18265 ;;		line 278 in file "../src/Main_B1.c"
 18266 ;; Parameters:    Size  Location     Type
 18267 ;;		None
 18268 ;; Auto vars:     Size  Location     Type
 18269 ;;		None
 18270 ;; Return value:  Size  Location     Type
 18271 ;;		None               void
 18272 ;; Registers used:
 18273 ;;		status,2
 18274 ;; Tracked objects:
 18275 ;;		On entry : 0/0
 18276 ;;		On exit  : 0/0
 18277 ;;		Unchanged: 0/0
 18278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18283 ;;Total ram usage:        0 bytes
 18284 ;; Hardware stack levels used:    1
 18285 ;; Hardware stack levels required when called:    5
 18286 ;; This function calls:
 18287 ;;		Nothing
 18288 ;; This function is called by:
 18289 ;;		_CC2500_TxData
 18290 ;;		_CC2500_RxData
 18291 ;;		_CC2500_PowerRST
 18292 ;;		_CC2500_WriteREG
 18293 ;;		_CC2500_WriteCommand
 18294 ;;		_CC2500_ReadStatus
 18295 ;;		_getAD
 18296 ;;		_TouchPower
 18297 ;;		_CC2500_ReadREG
 18298 ;; This function uses a non-reentrant model
 18299 ;;
 18300                           
 18301                           
 18302                           ;psect for function _set_TimeoutCleared
 18303  19E5                     _set_TimeoutCleared:	
 18304                           
 18305                           ;Main_B1.c: 279: myMain.Timeout = 0;
 18306                           
 18307                           ;incstack = 0
 18308                           ; Regs used in _set_TimeoutCleared: [status,2]
 18309  19E5  0021               	movlb	1	; select bank1
 18310  19E6  112D               	bcf	(_myMain^(0+128)+13),2
 18311                           
 18312                           ;Main_B1.c: 280: myMain.Timeout_Counter = 0;
 18313  19E7  01AE               	clrf	(_myMain^(0+128)+14)
 18314  19E8  01AF               	clrf	((_myMain+1)^(0+128)+14)
 18315  19E9  0008               	return
 18316  19EA                     __end_of_set_TimeoutCleared:	
 18317                           
 18318                           	psect	text129
 18319  1C9A                     __ptext129:	
 18320 ;; *************** function _Timeout_Counter *****************
 18321 ;; Defined at:
 18322 ;;		line 268 in file "../src/Main_B1.c"
 18323 ;; Parameters:    Size  Location     Type
 18324 ;;		None
 18325 ;; Auto vars:     Size  Location     Type
 18326 ;;		None
 18327 ;; Return value:  Size  Location     Type
 18328 ;;		None               void
 18329 ;; Registers used:
 18330 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18331 ;; Tracked objects:
 18332 ;;		On entry : 0/0
 18333 ;;		On exit  : 0/0
 18334 ;;		Unchanged: 0/0
 18335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18340 ;;Total ram usage:        0 bytes
 18341 ;; Hardware stack levels used:    1
 18342 ;; Hardware stack levels required when called:    5
 18343 ;; This function calls:
 18344 ;;		Nothing
 18345 ;; This function is called by:
 18346 ;;		_CC2500_TxData
 18347 ;;		_CC2500_RxData
 18348 ;;		_CC2500_PowerRST
 18349 ;;		_CC2500_WriteREG
 18350 ;;		_CC2500_WriteCommand
 18351 ;;		_CC2500_ReadStatus
 18352 ;;		_getAD
 18353 ;;		_TouchPower
 18354 ;;		_CC2500_ReadREG
 18355 ;; This function uses a non-reentrant model
 18356 ;;
 18357                           
 18358                           
 18359                           ;psect for function _Timeout_Counter
 18360  1C9A                     _Timeout_Counter:	
 18361                           
 18362                           ;Main_B1.c: 269: myMain.Timeout_Counter++;
 18363                           
 18364                           ;incstack = 0
 18365                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18366  1C9A  3001               	movlw	1
 18367  1C9B  0021               	movlb	1	; select bank1
 18368  1C9C  07AE               	addwf	(_myMain^(0+128)+14),f
 18369  1C9D  3000               	movlw	0
 18370  1C9E  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 18371                           
 18372                           ;Main_B1.c: 270: if (myMain.Timeout_Counter == 10000) {
 18373  1C9F  300E               	movlw	14
 18374  1CA0  3EA0               	addlw	_myMain& (0+255)
 18375  1CA1  0086               	movwf	6
 18376  1CA2  0187               	clrf	7
 18377  1CA3  3F40               	moviw [0]fsr1
 18378  1CA4  3A10               	xorlw	16
 18379  1CA5  1D03               	skipz
 18380  1CA6  2CA9               	goto	u9075
 18381  1CA7  3F41               	moviw [1]fsr1
 18382  1CA8  3A27               	xorlw	39
 18383  1CA9                     u9075:	
 18384  1CA9  1D03               	skipz
 18385  1CAA  0008               	return
 18386                           
 18387                           ;Main_B1.c: 271: myMain.Timeout_Counter = 0;
 18388  1CAB  01AE               	clrf	(_myMain^(0+128)+14)
 18389  1CAC  01AF               	clrf	((_myMain+1)^(0+128)+14)
 18390                           
 18391                           ;Main_B1.c: 272: myMain.Timeout = 1;
 18392  1CAD  152D               	bsf	(_myMain^(0+128)+13),2
 18393  1CAE  0008               	return
 18394  1CAF                     __end_of_Timeout_Counter:	
 18395                           
 18396                           	psect	text130
 18397  1C72                     __ptext130:	
 18398 ;; *************** function _CC2500_WriteByte *****************
 18399 ;; Defined at:
 18400 ;;		line 222 in file "../src/CC2500_B1.c"
 18401 ;; Parameters:    Size  Location     Type
 18402 ;;		None
 18403 ;; Auto vars:     Size  Location     Type
 18404 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18405 ;; Return value:  Size  Location     Type
 18406 ;;		None               void
 18407 ;; Registers used:
 18408 ;;		wreg, status,2, status,0
 18409 ;; Tracked objects:
 18410 ;;		On entry : 0/0
 18411 ;;		On exit  : 0/0
 18412 ;;		Unchanged: 0/0
 18413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18416 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18417 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18418 ;;Total ram usage:        2 bytes
 18419 ;; Hardware stack levels used:    1
 18420 ;; Hardware stack levels required when called:    5
 18421 ;; This function calls:
 18422 ;;		Nothing
 18423 ;; This function is called by:
 18424 ;;		_CC2500_TxData
 18425 ;;		_CC2500_RxData
 18426 ;;		_CC2500_PowerRST
 18427 ;;		_CC2500_WriteREG
 18428 ;;		_CC2500_WriteCommand
 18429 ;;		_CC2500_ReadStatus
 18430 ;;		_CC2500_ReadREG
 18431 ;; This function uses a non-reentrant model
 18432 ;;
 18433                           
 18434                           
 18435                           ;psect for function _CC2500_WriteByte
 18436  1C72                     _CC2500_WriteByte:	
 18437                           
 18438                           ;CC2500_B1.c: 223: unsigned char loop_a;
 18439                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 18440                           
 18441                           ;incstack = 0
 18442                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18443  1C72  0020               	movlb	0	; select bank0
 18444  1C73  01A1               	clrf	CC2500_WriteByte@loop_a
 18445  1C74                     L12:	
 18446  1C74  3008               	movlw	8
 18447  1C75  0221               	subwf	CC2500_WriteByte@loop_a,w
 18448  1C76  1803               	btfsc	3,0
 18449  1C77  0008               	return
 18450                           
 18451                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 18452  1C78  1FFA               	btfss	_SPI0Buffer,7
 18453  1C79  2C7C               	goto	l342
 18454                           
 18455                           ;CC2500_B1.c: 226: RC0 = 1;
 18456  1C7A  140E               	bsf	14,0	;volatile
 18457  1C7B  2C7D               	goto	l343
 18458  1C7C                     l342:	
 18459                           
 18460                           ;CC2500_B1.c: 227: else
 18461                           ;CC2500_B1.c: 228: RC0 = 0;
 18462  1C7C  100E               	bcf	14,0	;volatile
 18463  1C7D                     l343:	
 18464                           
 18465                           ;CC2500_B1.c: 229: RC1 = 1;
 18466  1C7D  148E               	bsf	14,1	;volatile
 18467                           
 18468                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 18469  1C7E  1003               	clrc
 18470  1C7F  0DFA               	rlf	_SPI0Buffer,f
 18471                           
 18472                           ;CC2500_B1.c: 231: RC1 = 0;
 18473  1C80  108E               	bcf	14,1	;volatile
 18474  1C81  3001               	movlw	1
 18475  1C82  00A0               	movwf	??_CC2500_WriteByte
 18476  1C83  0820               	movf	??_CC2500_WriteByte,w
 18477  1C84  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18478  1C85  2C74               	goto	L12
 18479  1C86                     __end_of_CC2500_WriteByte:	
 18480                           
 18481                           	psect	text131
 18482  1388                     __ptext131:	
 18483 ;; *************** function _Buzzer_Main *****************
 18484 ;; Defined at:
 18485 ;;		line 46 in file "../src/Buzzer_B1.c"
 18486 ;; Parameters:    Size  Location     Type
 18487 ;;		None
 18488 ;; Auto vars:     Size  Location     Type
 18489 ;;		None
 18490 ;; Return value:  Size  Location     Type
 18491 ;;		None               void
 18492 ;; Registers used:
 18493 ;;		wreg, status,2, status,0
 18494 ;; Tracked objects:
 18495 ;;		On entry : 0/0
 18496 ;;		On exit  : 0/0
 18497 ;;		Unchanged: 0/0
 18498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18501 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18502 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18503 ;;Total ram usage:        1 bytes
 18504 ;; Hardware stack levels used:    1
 18505 ;; Hardware stack levels required when called:    5
 18506 ;; This function calls:
 18507 ;;		Nothing
 18508 ;; This function is called by:
 18509 ;;		_main
 18510 ;; This function uses a non-reentrant model
 18511 ;;
 18512                           
 18513                           
 18514                           ;psect for function _Buzzer_Main
 18515  1388                     _Buzzer_Main:	
 18516                           
 18517                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18518                           
 18519                           ;incstack = 0
 18520                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18521  1388  0021               	movlb	1	; select bank1
 18522  1389  1CB0               	btfss	_Buz1^(0+128),1
 18523  138A  0008               	return
 18524                           
 18525                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18526  138B  3001               	movlw	1
 18527  138C  07B1               	addwf	(_Buz1^(0+128)+1),f
 18528  138D  3000               	movlw	0
 18529  138E  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 18530                           
 18531                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18532  138F  0837               	movf	((_Buz1+1)^(0+128)+6),w
 18533  1390  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 18534  1391  1D03               	skipz
 18535  1392  2B95               	goto	u10985
 18536  1393  0836               	movf	(_Buz1^(0+128)+6),w
 18537  1394  0231               	subwf	(_Buz1^(0+128)+1),w
 18538  1395                     u10985:	
 18539  1395  1C03               	skipc
 18540  1396  0008               	return
 18541                           
 18542                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18543  1397  01B1               	clrf	(_Buz1^(0+128)+1)
 18544  1398  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 18545                           
 18546                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18547  1399  12B0               	bcf	_Buz1^(0+128),5
 18548  139A  0020               	movlb	0	; select bank0
 18549  139B  1D8D               	btfss	13,3	;volatile
 18550  139C  2B9F               	goto	l10237
 18551  139D  0021               	movlb	1	; select bank1
 18552  139E  16B0               	bsf	_Buz1^(0+128),5
 18553  139F                     l10237:	
 18554                           
 18555                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18556  139F  0021               	movlb	1	; select bank1
 18557  13A0  1AB0               	btfsc	_Buz1^(0+128),5
 18558  13A1  2BCB               	goto	l112
 18559                           
 18560                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18561  13A2  08B3               	movf	(_Buz1^(0+128)+3),f
 18562  13A3  1D03               	skipz
 18563  13A4  2BC7               	goto	l113
 18564                           
 18565                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18566  13A5  1DB0               	btfss	_Buz1^(0+128),3
 18567  13A6  2BB5               	goto	l114
 18568                           
 18569                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18570  13A7  11B0               	bcf	_Buz1^(0+128),3
 18571                           
 18572                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18573  13A8  0834               	movf	(_Buz1^(0+128)+4),w
 18574  13A9  0020               	movlb	0	; select bank0
 18575  13AA  00A0               	movwf	??_Buzzer_Main
 18576  13AB  0820               	movf	??_Buzzer_Main,w
 18577  13AC  0021               	movlb	1	; select bank1
 18578  13AD  00B3               	movwf	(_Buz1^(0+128)+3)
 18579                           
 18580                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18581  13AE  0839               	movf	((_Buz1+1)^(0+128)+8),w
 18582  13AF  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 18583  13B0  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 18584  13B1  0838               	movf	(_Buz1^(0+128)+8),w
 18585  13B2  01B6               	clrf	(_Buz1^(0+128)+6)
 18586  13B3  07B6               	addwf	(_Buz1^(0+128)+6),f
 18587                           
 18588                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18589  13B4  0008               	return
 18590  13B5                     l114:	
 18591  13B5  1E30               	btfss	_Buz1^(0+128),4
 18592  13B6  2BC5               	goto	l116
 18593                           
 18594                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18595  13B7  1230               	bcf	_Buz1^(0+128),4
 18596                           
 18597                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18598  13B8  0835               	movf	(_Buz1^(0+128)+5),w
 18599  13B9  0020               	movlb	0	; select bank0
 18600  13BA  00A0               	movwf	??_Buzzer_Main
 18601  13BB  0820               	movf	??_Buzzer_Main,w
 18602  13BC  0021               	movlb	1	; select bank1
 18603  13BD  00B3               	movwf	(_Buz1^(0+128)+3)
 18604                           
 18605                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18606  13BE  083B               	movf	((_Buz1+1)^(0+128)+10),w
 18607  13BF  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 18608  13C0  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 18609  13C1  083A               	movf	(_Buz1^(0+128)+10),w
 18610  13C2  01B6               	clrf	(_Buz1^(0+128)+6)
 18611  13C3  07B6               	addwf	(_Buz1^(0+128)+6),f
 18612                           
 18613                           ;Buzzer_B1.c: 62: } else {
 18614  13C4  0008               	return
 18615  13C5                     l116:	
 18616                           
 18617                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18618  13C5  10B0               	bcf	_Buz1^(0+128),1
 18619                           
 18620                           ;Buzzer_B1.c: 64: }
 18621                           ;Buzzer_B1.c: 65: } else {
 18622  13C6  0008               	return
 18623  13C7                     l113:	
 18624                           
 18625                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18626  13C7  16B0               	bsf	_Buz1^(0+128),5
 18627                           
 18628                           ;Buzzer_B1.c: 68: RB3 = 1;
 18629  13C8  0020               	movlb	0	; select bank0
 18630  13C9  158D               	bsf	13,3	;volatile
 18631                           
 18632                           ;Buzzer_B1.c: 69: }
 18633                           ;Buzzer_B1.c: 70: } else {
 18634  13CA  0008               	return
 18635  13CB                     l112:	
 18636                           
 18637                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18638  13CB  12B0               	bcf	_Buz1^(0+128),5
 18639                           
 18640                           ;Buzzer_B1.c: 73: RB3 = 0;
 18641  13CC  0020               	movlb	0	; select bank0
 18642  13CD  118D               	bcf	13,3	;volatile
 18643                           
 18644                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18645  13CE  3001               	movlw	1
 18646  13CF  0021               	movlb	1	; select bank1
 18647  13D0  02B3               	subwf	(_Buz1^(0+128)+3),f
 18648  13D1  0008               	return
 18649  13D2                     __end_of_Buzzer_Main:	
 18650                           
 18651                           	psect	text132
 18652  19C3                     __ptext132:	
 18653 ;; *************** function _Buzzer_Initialization *****************
 18654 ;; Defined at:
 18655 ;;		line 11 in file "../src/Buzzer_B1.c"
 18656 ;; Parameters:    Size  Location     Type
 18657 ;;		None
 18658 ;; Auto vars:     Size  Location     Type
 18659 ;;		None
 18660 ;; Return value:  Size  Location     Type
 18661 ;;		None               void
 18662 ;; Registers used:
 18663 ;;		None
 18664 ;; Tracked objects:
 18665 ;;		On entry : 0/0
 18666 ;;		On exit  : 0/0
 18667 ;;		Unchanged: 0/0
 18668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18673 ;;Total ram usage:        0 bytes
 18674 ;; Hardware stack levels used:    1
 18675 ;; Hardware stack levels required when called:    5
 18676 ;; This function calls:
 18677 ;;		Nothing
 18678 ;; This function is called by:
 18679 ;;		_main
 18680 ;; This function uses a non-reentrant model
 18681 ;;
 18682                           
 18683                           
 18684                           ;psect for function _Buzzer_Initialization
 18685  19C3                     _Buzzer_Initialization:	
 18686                           
 18687                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18688                           
 18689                           ;incstack = 0
 18690                           ; Regs used in _Buzzer_Initialization: []
 18691  19C3  0021               	movlb	1	; select bank1
 18692  19C4  1430               	bsf	_Buz1^(0+128),0
 18693  19C5  0008               	return
 18694  19C6                     __end_of_Buzzer_Initialization:	
 18695                           
 18696                           	psect	intentry
 18697  0004                     __pintentry:	
 18698 ;; *************** function _ISR *****************
 18699 ;; Defined at:
 18700 ;;		line 107 in file "../src/MCU_B1.c"
 18701 ;; Parameters:    Size  Location     Type
 18702 ;;		None
 18703 ;; Auto vars:     Size  Location     Type
 18704 ;;		None
 18705 ;; Return value:  Size  Location     Type
 18706 ;;		None               void
 18707 ;; Registers used:
 18708 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18709 ;; Tracked objects:
 18710 ;;		On entry : 0/0
 18711 ;;		On exit  : 0/0
 18712 ;;		Unchanged: 0/0
 18713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18716 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18717 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18718 ;;Total ram usage:        1 bytes
 18719 ;; Hardware stack levels used:    1
 18720 ;; Hardware stack levels required when called:    4
 18721 ;; This function calls:
 18722 ;;		_IOC_ISR
 18723 ;;		_TMR1_ISR
 18724 ;; This function is called by:
 18725 ;;		Interrupt level 1
 18726 ;; This function uses a non-reentrant model
 18727 ;;
 18728                           
 18729  0004                     _ISR:	
 18730                           
 18731                           ;incstack = 0
 18732                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18733  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18734  0005  3180               	pagesel	$
 18735  0006  0020               	movlb	0	; select bank0
 18736  0007  087F               	movf	127,w
 18737  0008  00F5               	movwf	??_ISR
 18738                           
 18739                           ;MCU_B1.c: 109: IOC_ISR();
 18740  0009  319B  230E  3180   	fcall	_IOC_ISR
 18741                           
 18742                           ;MCU_B1.c: 111: ;;
 18743                           ;MCU_B1.c: 113: TMR1_ISR();
 18744  000C  319F  2727         	fcall	_TMR1_ISR
 18745  000E  0875               	movf	??_ISR,w
 18746  000F  0020               	movlb	0	; select bank0
 18747  0010  00FF               	movwf	127
 18748  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18749  0012  0009               	retfie
 18750  0013                     __end_of_ISR:	
 18751                           
 18752                           	psect	text134
 18753  1F27                     __ptext134:	
 18754 ;; *************** function _TMR1_ISR *****************
 18755 ;; Defined at:
 18756 ;;		line 209 in file "../src/MCU_B1.c"
 18757 ;; Parameters:    Size  Location     Type
 18758 ;;		None
 18759 ;; Auto vars:     Size  Location     Type
 18760 ;;		None
 18761 ;; Return value:  Size  Location     Type
 18762 ;;		None               void
 18763 ;; Registers used:
 18764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18765 ;; Tracked objects:
 18766 ;;		On entry : 0/0
 18767 ;;		On exit  : 0/0
 18768 ;;		Unchanged: 0/0
 18769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18774 ;;Total ram usage:        0 bytes
 18775 ;; Hardware stack levels used:    1
 18776 ;; Hardware stack levels required when called:    2
 18777 ;; This function calls:
 18778 ;;		_setDimmerLights_IntrControl
 18779 ;; This function is called by:
 18780 ;;		_ISR
 18781 ;; This function uses a non-reentrant model
 18782 ;;
 18783                           
 18784                           
 18785                           ;psect for function _TMR1_ISR
 18786  1F27                     _TMR1_ISR:	
 18787                           
 18788                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18789                           
 18790                           ;incstack = 0
 18791                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18792  1F27  0021               	movlb	1	; select bank1
 18793  1F28  1C11               	btfss	17,0	;volatile
 18794  1F29  0008               	return
 18795  1F2A  0020               	movlb	0	; select bank0
 18796  1F2B  1C11               	btfss	17,0	;volatile
 18797  1F2C  0008               	return
 18798                           
 18799                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18800  1F2D  30FA               	movlw	250
 18801  1F2E  0097               	movwf	23	;volatile
 18802                           
 18803                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18804  1F2F  3038               	movlw	56
 18805  1F30  0096               	movwf	22	;volatile
 18806                           
 18807                           ;MCU_B1.c: 214: TMR1IF = 0;
 18808  1F31  1011               	bcf	17,0	;volatile
 18809                           
 18810                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18811  1F32  3001               	movlw	1
 18812  1F33  3180  204D  319F   	fcall	_setDimmerLights_IntrControl
 18813                           
 18814                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18815  1F36  3002               	movlw	2
 18816  1F37  3180  204D  319F   	fcall	_setDimmerLights_IntrControl
 18817                           
 18818                           ;MCU_B1.c: 234: Timer1.Count++;
 18819  1F3A  3001               	movlw	1
 18820  1F3B  0021               	movlb	1	; select bank1
 18821  1F3C  07C9               	addwf	(_Timer1^(0+128)+1),f
 18822  1F3D  3000               	movlw	0
 18823  1F3E  3DCA               	addwfc	((_Timer1+1)^(0+128)+1),f
 18824                           
 18825                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18826  1F3F  3001               	movlw	1
 18827  1F40  3EC8               	addlw	_Timer1& (0+255)
 18828  1F41  0086               	movwf	6
 18829  1F42  0187               	clrf	7
 18830  1F43  3F40               	moviw [0]fsr1
 18831  1F44  3A64               	xorlw	100
 18832  1F45  1D03               	skipz
 18833  1F46  2F49               	goto	u786_25
 18834  1F47  3F41               	moviw [1]fsr1
 18835  1F48  3A00               	xorlw	0
 18836  1F49                     u786_25:	
 18837  1F49  1D03               	skipz
 18838  1F4A  0008               	return
 18839                           
 18840                           ;MCU_B1.c: 236: {
 18841                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18842  1F4B  01C9               	clrf	(_Timer1^(0+128)+1)
 18843  1F4C  01CA               	clrf	((_Timer1+1)^(0+128)+1)
 18844                           
 18845                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18846  1F4D  1448               	bsf	_Timer1^(0+128),0
 18847  1F4E  0008               	return
 18848  1F4F                     __end_of_TMR1_ISR:	
 18849                           
 18850                           	psect	text135
 18851  004D                     __ptext135:	
 18852 ;; *************** function _setDimmerLights_IntrControl *****************
 18853 ;; Defined at:
 18854 ;;		line 94 in file "../src/Dimmer_B1.c"
 18855 ;; Parameters:    Size  Location     Type
 18856 ;;  lights          1    wreg     unsigned char 
 18857 ;; Auto vars:     Size  Location     Type
 18858 ;;  lights          1    4[COMMON] unsigned char 
 18859 ;; Return value:  Size  Location     Type
 18860 ;;		None               void
 18861 ;; Registers used:
 18862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18863 ;; Tracked objects:
 18864 ;;		On entry : 0/0
 18865 ;;		On exit  : 0/0
 18866 ;;		Unchanged: 0/0
 18867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18870 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18871 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18872 ;;Total ram usage:        3 bytes
 18873 ;; Hardware stack levels used:    1
 18874 ;; Hardware stack levels required when called:    1
 18875 ;; This function calls:
 18876 ;;		_DimmerIntrPointSelect
 18877 ;;		i1_setLoad_StatusOff
 18878 ;; This function is called by:
 18879 ;;		_TMR1_ISR
 18880 ;; This function uses a non-reentrant model
 18881 ;;
 18882                           
 18883                           
 18884                           ;psect for function _setDimmerLights_IntrControl
 18885  004D                     _setDimmerLights_IntrControl:	
 18886                           
 18887                           ;incstack = 0
 18888                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18889                           ;setDimmerLights_IntrControl@lights stored from wreg
 18890  004D  00F4               	movwf	setDimmerLights_IntrControl@lights
 18891                           
 18892                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 18893  004E  0874               	movf	setDimmerLights_IntrControl@lights,w
 18894  004F  319B  23DC  3180   	fcall	_DimmerIntrPointSelect
 18895                           
 18896                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 18897  0052  0877               	movf	_DimmerLightsIntr,w
 18898  0053  0086               	movwf	6
 18899  0054  3001               	movlw	1	; select bank2/3
 18900  0055  0087               	movwf	7
 18901  0056  1C01               	btfss	1,0
 18902  0057  28A8               	goto	i1l7363
 18903                           
 18904                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 18905  0058  3001               	movlw	1
 18906  0059  00F2               	movwf	??_setDimmerLights_IntrControl
 18907  005A  0877               	movf	_DimmerLightsIntr,w
 18908  005B  3E03               	addlw	3
 18909  005C  0086               	movwf	6
 18910  005D  3001               	movlw	1	; select bank2/3
 18911  005E  0087               	movwf	7
 18912  005F  0872               	movf	??_setDimmerLights_IntrControl,w
 18913  0060  0781               	addwf	1,f
 18914                           
 18915                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r->Correction)) {
 18916  0061  0876               	movf	_Dimmer,w
 18917  0062  3E02               	addlw	2
 18918  0063  0086               	movwf	6
 18919  0064  3001               	movlw	1	; select bank2/3
 18920  0065  0087               	movwf	7
 18921  0066  0877               	movf	_DimmerLightsIntr,w
 18922  0067  3E04               	addlw	4
 18923  0068  0084               	movwf	4
 18924  0069  3001               	movlw	1	; select bank2/3
 18925  006A  0085               	movwf	5
 18926  006B  0800               	movf	0,w
 18927  006C  0701               	addwf	1,w
 18928  006D  00F2               	movwf	??_setDimmerLights_IntrControl
 18929  006E  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18930  006F  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 18931  0070  0877               	movf	_DimmerLightsIntr,w
 18932  0071  3E03               	addlw	3
 18933  0072  0086               	movwf	6
 18934  0073  3001               	movlw	1	; select bank2/3
 18935  0074  0087               	movwf	7
 18936  0075  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18937  0076  3A80               	xorlw	128
 18938  0077  3C80               	sublw	128
 18939  0078  1D03               	skipz
 18940  0079  287C               	goto	u654_25
 18941  007A  0872               	movf	??_setDimmerLights_IntrControl,w
 18942  007B  0201               	subwf	1,w
 18943  007C                     u654_25:	
 18944  007C  1C03               	skipc
 18945  007D  29B7               	goto	i1l7427
 18946                           
 18947                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 18948  007E  0877               	movf	_DimmerLightsIntr,w
 18949  007F  3E03               	addlw	3
 18950  0080  0086               	movwf	6
 18951  0081  3001               	movlw	1	; select bank2/3
 18952  0082  0087               	movwf	7
 18953  0083  0181               	clrf	1
 18954                           
 18955                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 18956  0084  0877               	movf	_DimmerLightsIntr,w
 18957  0085  0086               	movwf	6
 18958  0086  3001               	movlw	1	; select bank2/3
 18959  0087  0087               	movwf	7
 18960  0088  1001               	bcf	1,0
 18961                           
 18962                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 18963  0089  0877               	movf	_DimmerLightsIntr,w
 18964  008A  0086               	movwf	6
 18965  008B  3001               	movlw	1	; select bank2/3
 18966  008C  0087               	movwf	7
 18967  008D  1F01               	btfss	1,6
 18968  008E  29B7               	goto	i1l7427
 18969                           
 18970                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 18971  008F  0877               	movf	_DimmerLightsIntr,w
 18972  0090  3E08               	addlw	8
 18973  0091  0086               	movwf	6
 18974  0092  3001               	movlw	1	; select bank2/3
 18975  0093  0087               	movwf	7
 18976  0094  1401               	bsf	1,0
 18977                           
 18978                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 18979  0095  0877               	movf	_DimmerLightsIntr,w
 18980  0096  3E08               	addlw	8
 18981  0097  0086               	movwf	6
 18982  0098  3001               	movlw	1	; select bank2/3
 18983  0099  0087               	movwf	7
 18984  009A  1681               	bsf	1,5
 18985                           
 18986                           ;Dimmer_B1.c: 107: if (lights == 1) {
 18987  009B  0874               	movf	setDimmerLights_IntrControl@lights,w
 18988  009C  3A01               	xorlw	1
 18989  009D  1D03               	skipz
 18990  009E  28A1               	goto	i1l7359
 18991                           
 18992                           ;Dimmer_B1.c: 108: RA7 = 1;
 18993  009F  0020               	movlb	0	; select bank0
 18994  00A0  178C               	bsf	12,7	;volatile
 18995  00A1                     i1l7359:	
 18996                           ;Dimmer_B1.c: 109: ;;
 18997                           
 18998                           
 18999                           ;Dimmer_B1.c: 110: }
 19000                           ;Dimmer_B1.c: 113: if (lights == 2) {
 19001  00A1  0874               	movf	setDimmerLights_IntrControl@lights,w
 19002  00A2  3A02               	xorlw	2
 19003  00A3  1D03               	skipz
 19004  00A4  29B7               	goto	i1l7427
 19005                           
 19006                           ;Dimmer_B1.c: 114: RB4 = 1;
 19007  00A5  0020               	movlb	0	; select bank0
 19008  00A6  160D               	bsf	13,4	;volatile
 19009                           
 19010                           ;Dimmer_B1.c: 115: }
 19011                           ;Dimmer_B1.c: 122: }
 19012                           ;Dimmer_B1.c: 123: }
 19013                           ;Dimmer_B1.c: 124: } else {
 19014  00A7  29B7               	goto	i1l7427
 19015  00A8                     i1l7363:	
 19016                           
 19017                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 19018  00A8  0877               	movf	_DimmerLightsIntr,w
 19019  00A9  3E08               	addlw	8
 19020  00AA  0086               	movwf	6
 19021  00AB  3001               	movlw	1	; select bank2/3
 19022  00AC  0087               	movwf	7
 19023  00AD  1C01               	btfss	1,0
 19024  00AE  29B7               	goto	i1l7427
 19025                           
 19026                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 19027  00AF  0877               	movf	_DimmerLightsIntr,w
 19028  00B0  3E08               	addlw	8
 19029  00B1  0086               	movwf	6
 19030  00B2  3001               	movlw	1	; select bank2/3
 19031  00B3  0087               	movwf	7
 19032  00B4  1001               	bcf	1,0
 19033                           
 19034                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 19035  00B5  0877               	movf	_DimmerLightsIntr,w
 19036  00B6  0086               	movwf	6
 19037  00B7  3001               	movlw	1	; select bank2/3
 19038  00B8  0087               	movwf	7
 19039  00B9  1C81               	btfss	1,1
 19040  00BA  29B7               	goto	i1l7427
 19041                           
 19042                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 19043  00BB  3001               	movlw	1
 19044  00BC  00F2               	movwf	??_setDimmerLights_IntrControl
 19045  00BD  0A77               	incf	_DimmerLightsIntr,w
 19046  00BE  0086               	movwf	6
 19047  00BF  3001               	movlw	1	; select bank2/3
 19048  00C0  0087               	movwf	7
 19049  00C1  0872               	movf	??_setDimmerLights_IntrControl,w
 19050  00C2  0781               	addwf	1,f
 19051                           
 19052                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 19053  00C3  0A77               	incf	_DimmerLightsIntr,w
 19054  00C4  0086               	movwf	6
 19055  00C5  3001               	movlw	1	; select bank2/3
 19056  00C6  0087               	movwf	7
 19057  00C7  0877               	movf	_DimmerLightsIntr,w
 19058  00C8  3E02               	addlw	2
 19059  00C9  0084               	movwf	4
 19060  00CA  3001               	movlw	1	; select bank2/3
 19061  00CB  0085               	movwf	5
 19062  00CC  0800               	movf	0,w
 19063  00CD  0201               	subwf	1,w
 19064  00CE  1C03               	skipc
 19065  00CF  29B7               	goto	i1l7427
 19066                           
 19067                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 19068  00D0  0A77               	incf	_DimmerLightsIntr,w
 19069  00D1  0086               	movwf	6
 19070  00D2  3001               	movlw	1	; select bank2/3
 19071  00D3  0087               	movwf	7
 19072  00D4  0181               	clrf	1
 19073                           
 19074                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 19075  00D5  0877               	movf	_DimmerLightsIntr,w
 19076  00D6  0086               	movwf	6
 19077  00D7  3001               	movlw	1	; select bank2/3
 19078  00D8  0087               	movwf	7
 19079  00D9  1D81               	btfss	1,3
 19080  00DA  2911               	goto	i1l7389
 19081                           
 19082                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 19083  00DB  0877               	movf	_DimmerLightsIntr,w
 19084  00DC  0086               	movwf	6
 19085  00DD  3001               	movlw	1	; select bank2/3
 19086  00DE  0087               	movwf	7
 19087  00DF  1A01               	btfsc	1,4
 19088  00E0  28F8               	goto	i1l7383
 19089                           
 19090                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 19091  00E1  0877               	movf	_DimmerLightsIntr,w
 19092  00E2  3E04               	addlw	4
 19093  00E3  0086               	movwf	6
 19094  00E4  3001               	movlw	1	; select bank2/3
 19095  00E5  0087               	movwf	7
 19096  00E6  3021               	movlw	33
 19097  00E7  0201               	subwf	1,w
 19098  00E8  1C03               	skipc
 19099  00E9  28F2               	goto	i1l7381
 19100                           
 19101                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 19102  00EA  0877               	movf	_DimmerLightsIntr,w
 19103  00EB  3E04               	addlw	4
 19104  00EC  0086               	movwf	6
 19105  00ED  3001               	movlw	1	; select bank2/3
 19106  00EE  0087               	movwf	7
 19107  00EF  3001               	movlw	1
 19108  00F0  0281               	subwf	1,f
 19109                           
 19110                           ;Dimmer_B1.c: 135: } else {
 19111  00F1  29B7               	goto	i1l7427
 19112  00F2                     i1l7381:	
 19113                           
 19114                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 19115  00F2  0877               	movf	_DimmerLightsIntr,w
 19116  00F3  0086               	movwf	6
 19117  00F4  3001               	movlw	1	; select bank2/3
 19118  00F5  0087               	movwf	7
 19119  00F6  1601               	bsf	1,4
 19120                           
 19121                           ;Dimmer_B1.c: 137: }
 19122                           ;Dimmer_B1.c: 138: } else {
 19123  00F7  29B7               	goto	i1l7427
 19124  00F8                     i1l7383:	
 19125                           
 19126                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 19127  00F8  0877               	movf	_DimmerLightsIntr,w
 19128  00F9  3E04               	addlw	4
 19129  00FA  0086               	movwf	6
 19130  00FB  3001               	movlw	1	; select bank2/3
 19131  00FC  0087               	movwf	7
 19132  00FD  303C               	movlw	60
 19133  00FE  0201               	subwf	1,w
 19134  00FF  1803               	skipnc
 19135  0100  290B               	goto	i1l7387
 19136                           
 19137                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 19138  0101  3001               	movlw	1
 19139  0102  00F2               	movwf	??_setDimmerLights_IntrControl
 19140  0103  0877               	movf	_DimmerLightsIntr,w
 19141  0104  3E04               	addlw	4
 19142  0105  0086               	movwf	6
 19143  0106  3001               	movlw	1	; select bank2/3
 19144  0107  0087               	movwf	7
 19145  0108  0872               	movf	??_setDimmerLights_IntrControl,w
 19146  0109  0781               	addwf	1,f
 19147                           
 19148                           ;Dimmer_B1.c: 141: } else {
 19149  010A  29B7               	goto	i1l7427
 19150  010B                     i1l7387:	
 19151                           
 19152                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 19153  010B  0877               	movf	_DimmerLightsIntr,w
 19154  010C  0086               	movwf	6
 19155  010D  3001               	movlw	1	; select bank2/3
 19156  010E  0087               	movwf	7
 19157  010F  1201               	bcf	1,4
 19158                           
 19159                           ;Dimmer_B1.c: 143: }
 19160                           ;Dimmer_B1.c: 144: }
 19161                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 19162  0110  29B7               	goto	i1l7427
 19163  0111                     i1l7389:	
 19164  0111  0877               	movf	_DimmerLightsIntr,w
 19165  0112  0086               	movwf	6
 19166  0113  3001               	movlw	1	; select bank2/3
 19167  0114  0087               	movwf	7
 19168  0115  1D01               	btfss	1,2
 19169  0116  2958               	goto	i1l7403
 19170                           
 19171                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 19172  0117  0877               	movf	_DimmerLightsIntr,w
 19173  0118  3E05               	addlw	5
 19174  0119  0086               	movwf	6
 19175  011A  3001               	movlw	1	; select bank2/3
 19176  011B  0087               	movwf	7
 19177  011C  0877               	movf	_DimmerLightsIntr,w
 19178  011D  3E04               	addlw	4
 19179  011E  0084               	movwf	4
 19180  011F  3001               	movlw	1	; select bank2/3
 19181  0120  0085               	movwf	5
 19182  0121  0800               	movf	0,w
 19183  0122  0201               	subwf	1,w
 19184  0123  1803               	skipnc
 19185  0124  292D               	goto	i1l7395
 19186                           
 19187                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 19188  0125  0877               	movf	_DimmerLightsIntr,w
 19189  0126  3E04               	addlw	4
 19190  0127  0086               	movwf	6
 19191  0128  3001               	movlw	1	; select bank2/3
 19192  0129  0087               	movwf	7
 19193  012A  3001               	movlw	1
 19194  012B  0281               	subwf	1,f
 19195                           
 19196                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 19197  012C  2944               	goto	i1l7399
 19198  012D                     i1l7395:	
 19199  012D  0877               	movf	_DimmerLightsIntr,w
 19200  012E  3E04               	addlw	4
 19201  012F  0086               	movwf	6
 19202  0130  3001               	movlw	1	; select bank2/3
 19203  0131  0087               	movwf	7
 19204  0132  0877               	movf	_DimmerLightsIntr,w
 19205  0133  3E05               	addlw	5
 19206  0134  0084               	movwf	4
 19207  0135  3001               	movlw	1	; select bank2/3
 19208  0136  0085               	movwf	5
 19209  0137  0800               	movf	0,w
 19210  0138  0201               	subwf	1,w
 19211  0139  1803               	skipnc
 19212  013A  2944               	goto	i1l7399
 19213                           
 19214                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 19215  013B  3001               	movlw	1
 19216  013C  00F2               	movwf	??_setDimmerLights_IntrControl
 19217  013D  0877               	movf	_DimmerLightsIntr,w
 19218  013E  3E04               	addlw	4
 19219  013F  0086               	movwf	6
 19220  0140  3001               	movlw	1	; select bank2/3
 19221  0141  0087               	movwf	7
 19222  0142  0872               	movf	??_setDimmerLights_IntrControl,w
 19223  0143  0781               	addwf	1,f
 19224  0144                     i1l7399:	
 19225                           
 19226                           ;Dimmer_B1.c: 150: }
 19227                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 19228  0144  0877               	movf	_DimmerLightsIntr,w
 19229  0145  3E05               	addlw	5
 19230  0146  0086               	movwf	6
 19231  0147  3001               	movlw	1	; select bank2/3
 19232  0148  0087               	movwf	7
 19233  0149  0877               	movf	_DimmerLightsIntr,w
 19234  014A  3E04               	addlw	4
 19235  014B  0084               	movwf	4
 19236  014C  3001               	movlw	1	; select bank2/3
 19237  014D  0085               	movwf	5
 19238  014E  0800               	movf	0,w
 19239  014F  0601               	xorwf	1,w
 19240  0150  1D03               	skipz
 19241  0151  29B7               	goto	i1l7427
 19242                           
 19243                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 19244  0152  0877               	movf	_DimmerLightsIntr,w
 19245  0153  0086               	movwf	6
 19246  0154  3001               	movlw	1	; select bank2/3
 19247  0155  0087               	movwf	7
 19248  0156  1101               	bcf	1,2
 19249  0157  2973               	goto	i1l7409
 19250  0158                     i1l7403:	
 19251                           ;Dimmer_B1.c: 154: }
 19252                           ;Dimmer_B1.c: 155: } else {
 19253                           
 19254                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 19255                           
 19256                           
 19257                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 19258  0158  0877               	movf	_DimmerLightsIntr,w
 19259  0159  0086               	movwf	6
 19260  015A  3001               	movlw	1	; select bank2/3
 19261  015B  0087               	movwf	7
 19262  015C  1E81               	btfss	1,5
 19263  015D  2979               	goto	i1l7411
 19264                           
 19265                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 19266  015E  0877               	movf	_DimmerLightsIntr,w
 19267  015F  3E04               	addlw	4
 19268  0160  0086               	movwf	6
 19269  0161  3001               	movlw	1	; select bank2/3
 19270  0162  0087               	movwf	7
 19271  0163  3001               	movlw	1
 19272  0164  0281               	subwf	1,f
 19273                           
 19274                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 19275  0165  0877               	movf	_DimmerLightsIntr,w
 19276  0166  3E05               	addlw	5
 19277  0167  0086               	movwf	6
 19278  0168  3001               	movlw	1	; select bank2/3
 19279  0169  0087               	movwf	7
 19280  016A  0877               	movf	_DimmerLightsIntr,w
 19281  016B  3E04               	addlw	4
 19282  016C  0084               	movwf	4
 19283  016D  3001               	movlw	1	; select bank2/3
 19284  016E  0085               	movwf	5
 19285  016F  0800               	movf	0,w
 19286  0170  0201               	subwf	1,w
 19287  0171  1C03               	skipc
 19288  0172  29B7               	goto	i1l7427
 19289  0173                     i1l7409:	
 19290                           
 19291                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 19292  0173  0877               	movf	_DimmerLightsIntr,w
 19293  0174  0086               	movwf	6
 19294  0175  3001               	movlw	1	; select bank2/3
 19295  0176  0087               	movwf	7
 19296  0177  1081               	bcf	1,1
 19297                           
 19298                           ;Dimmer_B1.c: 160: }
 19299                           ;Dimmer_B1.c: 161: } else {
 19300  0178  29B7               	goto	i1l7427
 19301  0179                     i1l7411:	
 19302                           
 19303                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 19304  0179  3001               	movlw	1
 19305  017A  00F2               	movwf	??_setDimmerLights_IntrControl
 19306  017B  0877               	movf	_DimmerLightsIntr,w
 19307  017C  3E04               	addlw	4
 19308  017D  0086               	movwf	6
 19309  017E  3001               	movlw	1	; select bank2/3
 19310  017F  0087               	movwf	7
 19311  0180  0872               	movf	??_setDimmerLights_IntrControl,w
 19312  0181  0781               	addwf	1,f
 19313                           
 19314                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 19315  0182  0877               	movf	_DimmerLightsIntr,w
 19316  0183  3E04               	addlw	4
 19317  0184  0086               	movwf	6
 19318  0185  3001               	movlw	1	; select bank2/3
 19319  0186  0087               	movwf	7
 19320  0187  0877               	movf	_DimmerLightsIntr,w
 19321  0188  3E06               	addlw	6
 19322  0189  0084               	movwf	4
 19323  018A  3001               	movlw	1	; select bank2/3
 19324  018B  0085               	movwf	5
 19325  018C  0800               	movf	0,w
 19326  018D  0201               	subwf	1,w
 19327  018E  1C03               	skipc
 19328  018F  29B7               	goto	i1l7427
 19329                           
 19330                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 19331  0190  0877               	movf	_DimmerLightsIntr,w
 19332  0191  0086               	movwf	6
 19333  0192  3001               	movlw	1	; select bank2/3
 19334  0193  0087               	movwf	7
 19335  0194  1081               	bcf	1,1
 19336                           
 19337                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 19338  0195  0877               	movf	_DimmerLightsIntr,w
 19339  0196  0086               	movwf	6
 19340  0197  3001               	movlw	1	; select bank2/3
 19341  0198  0087               	movwf	7
 19342  0199  1301               	bcf	1,6
 19343                           
 19344                           ;Dimmer_B1.c: 166: DimmerLightsIntr->Clear = 1;
 19345  019A  0877               	movf	_DimmerLightsIntr,w
 19346  019B  3E09               	addlw	9
 19347  019C  0086               	movwf	6
 19348  019D  3001               	movlw	1	; select bank2/3
 19349  019E  0087               	movwf	7
 19350  019F  1501               	bsf	1,2
 19351                           
 19352                           ;Dimmer_B1.c: 167: Dimmer->Detect = 1;
 19353  01A0  0876               	movf	_Dimmer,w
 19354  01A1  0086               	movwf	6
 19355  01A2  3001               	movlw	1	; select bank2/3
 19356  01A3  0087               	movwf	7
 19357  01A4  1401               	bsf	1,0
 19358                           
 19359                           ;Dimmer_B1.c: 169: if (lights == 1) {
 19360  01A5  0874               	movf	setDimmerLights_IntrControl@lights,w
 19361  01A6  3A01               	xorlw	1
 19362  01A7  1D03               	skipz
 19363  01A8  29AB               	goto	i1l7421
 19364                           
 19365                           ;Dimmer_B1.c: 170: RA3 = 0;
 19366  01A9  0020               	movlb	0	; select bank0
 19367  01AA  118C               	bcf	12,3	;volatile
 19368  01AB                     i1l7421:	
 19369                           
 19370                           ;Dimmer_B1.c: 172: }
 19371                           ;Dimmer_B1.c: 175: if (lights == 2) {
 19372  01AB  0874               	movf	setDimmerLights_IntrControl@lights,w
 19373  01AC  3A02               	xorlw	2
 19374  01AD  1D03               	skipz
 19375  01AE  29B1               	goto	i1l7425
 19376                           
 19377                           ;Dimmer_B1.c: 176: RC7 = 0;
 19378  01AF  0020               	movlb	0	; select bank0
 19379  01B0  138E               	bcf	14,7	;volatile
 19380  01B1                     i1l7425:	
 19381                           
 19382                           ;Dimmer_B1.c: 177: }
 19383                           ;Dimmer_B1.c: 184: setLoad_StatusOff(lights, 1);
 19384  01B1  01F0               	clrf	i1setLoad_StatusOff@command
 19385  01B2  0AF0               	incf	i1setLoad_StatusOff@command,f
 19386  01B3  0874               	movf	setDimmerLights_IntrControl@lights,w
 19387  01B4  319C  245E  3180   	fcall	i1_setLoad_StatusOff
 19388  01B7                     i1l7427:	
 19389                           
 19390                           ;Dimmer_B1.c: 185: }
 19391                           ;Dimmer_B1.c: 186: }
 19392                           ;Dimmer_B1.c: 187: }
 19393                           ;Dimmer_B1.c: 188: }
 19394                           ;Dimmer_B1.c: 189: }
 19395                           ;Dimmer_B1.c: 190: }
 19396                           ;Dimmer_B1.c: 191: }
 19397                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->Triac == 1) {
 19398  01B7  0877               	movf	_DimmerLightsIntr,w
 19399  01B8  3E08               	addlw	8
 19400  01B9  0086               	movwf	6
 19401  01BA  3001               	movlw	1	; select bank2/3
 19402  01BB  0087               	movwf	7
 19403  01BC  1E81               	btfss	1,5
 19404  01BD  29E8               	goto	i1l7445
 19405                           
 19406                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime++;
 19407  01BE  3001               	movlw	1
 19408  01BF  00F2               	movwf	??_setDimmerLights_IntrControl
 19409  01C0  0877               	movf	_DimmerLightsIntr,w
 19410  01C1  3E07               	addlw	7
 19411  01C2  0086               	movwf	6
 19412  01C3  3001               	movlw	1	; select bank2/3
 19413  01C4  0087               	movwf	7
 19414  01C5  0872               	movf	??_setDimmerLights_IntrControl,w
 19415  01C6  0781               	addwf	1,f
 19416                           
 19417                           ;Dimmer_B1.c: 194: if (DimmerLightsIntr->TriacTime >= 5) {
 19418  01C7  0877               	movf	_DimmerLightsIntr,w
 19419  01C8  3E07               	addlw	7
 19420  01C9  0086               	movwf	6
 19421  01CA  3001               	movlw	1	; select bank2/3
 19422  01CB  0087               	movwf	7
 19423  01CC  3005               	movlw	5
 19424  01CD  0201               	subwf	1,w
 19425  01CE  1C03               	skipc
 19426  01CF  29E8               	goto	i1l7445
 19427                           
 19428                           ;Dimmer_B1.c: 195: DimmerLightsIntr->TriacTime = 0;
 19429  01D0  0877               	movf	_DimmerLightsIntr,w
 19430  01D1  3E07               	addlw	7
 19431  01D2  0086               	movwf	6
 19432  01D3  3001               	movlw	1	; select bank2/3
 19433  01D4  0087               	movwf	7
 19434  01D5  0181               	clrf	1
 19435                           
 19436                           ;Dimmer_B1.c: 196: DimmerLightsIntr->Triac = 0;
 19437  01D6  0877               	movf	_DimmerLightsIntr,w
 19438  01D7  3E08               	addlw	8
 19439  01D8  0086               	movwf	6
 19440  01D9  3001               	movlw	1	; select bank2/3
 19441  01DA  0087               	movwf	7
 19442  01DB  1281               	bcf	1,5
 19443                           
 19444                           ;Dimmer_B1.c: 199: if (lights == 1) {
 19445  01DC  0874               	movf	setDimmerLights_IntrControl@lights,w
 19446  01DD  3A01               	xorlw	1
 19447  01DE  1D03               	skipz
 19448  01DF  29E2               	goto	i1l7441
 19449                           
 19450                           ;Dimmer_B1.c: 200: RA7 = 0;
 19451  01E0  0020               	movlb	0	; select bank0
 19452  01E1  138C               	bcf	12,7	;volatile
 19453  01E2                     i1l7441:	
 19454                           ;Dimmer_B1.c: 201: ;;
 19455                           
 19456                           
 19457                           ;Dimmer_B1.c: 202: }
 19458                           ;Dimmer_B1.c: 205: if (lights == 2) {
 19459  01E2  0874               	movf	setDimmerLights_IntrControl@lights,w
 19460  01E3  3A02               	xorlw	2
 19461  01E4  1D03               	skipz
 19462  01E5  29E8               	goto	i1l7445
 19463                           
 19464                           ;Dimmer_B1.c: 206: RB4 = 0;
 19465  01E6  0020               	movlb	0	; select bank0
 19466  01E7  120D               	bcf	13,4	;volatile
 19467  01E8                     i1l7445:	
 19468                           
 19469                           ;Dimmer_B1.c: 207: }
 19470                           ;Dimmer_B1.c: 214: }
 19471                           ;Dimmer_B1.c: 215: }
 19472                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacFlag == 1) {
 19473  01E8  0877               	movf	_DimmerLightsIntr,w
 19474  01E9  3E09               	addlw	9
 19475  01EA  0086               	movwf	6
 19476  01EB  3001               	movlw	1	; select bank2/3
 19477  01EC  0087               	movwf	7
 19478  01ED  1E81               	btfss	1,5
 19479  01EE  0008               	return
 19480                           
 19481                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount++;
 19482  01EF  3001               	movlw	1
 19483  01F0  00F2               	movwf	??_setDimmerLights_IntrControl
 19484  01F1  0877               	movf	_DimmerLightsIntr,w
 19485  01F2  3E0A               	addlw	10
 19486  01F3  0086               	movwf	6
 19487  01F4  3001               	movlw	1	; select bank2/3
 19488  01F5  0087               	movwf	7
 19489  01F6  0872               	movf	??_setDimmerLights_IntrControl,w
 19490  01F7  0781               	addwf	1,f
 19491                           
 19492                           ;Dimmer_B1.c: 218: if (DimmerLightsIntr->TriacCount == 70) {
 19493  01F8  0877               	movf	_DimmerLightsIntr,w
 19494  01F9  3E0A               	addlw	10
 19495  01FA  0086               	movwf	6
 19496  01FB  3001               	movlw	1	; select bank2/3
 19497  01FC  0087               	movwf	7
 19498  01FD  0801               	movf	1,w
 19499  01FE  3A46               	xorlw	70
 19500  01FF  1D03               	skipz
 19501  0200  0008               	return
 19502                           
 19503                           ;Dimmer_B1.c: 219: DimmerLightsIntr->TriacCount = 0;
 19504  0201  0877               	movf	_DimmerLightsIntr,w
 19505  0202  3E0A               	addlw	10
 19506  0203  0086               	movwf	6
 19507  0204  3001               	movlw	1	; select bank2/3
 19508  0205  0087               	movwf	7
 19509  0206  0181               	clrf	1
 19510                           
 19511                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacFlag = 0;
 19512  0207  0877               	movf	_DimmerLightsIntr,w
 19513  0208  3E09               	addlw	9
 19514  0209  0086               	movwf	6
 19515  020A  3001               	movlw	1	; select bank2/3
 19516  020B  0087               	movwf	7
 19517  020C  1281               	bcf	1,5
 19518  020D  0008               	return
 19519  020E                     __end_of_setDimmerLights_IntrControl:	
 19520                           
 19521                           	psect	text136
 19522  1C5E                     __ptext136:	
 19523 ;; *************** function i1_setLoad_StatusOff *****************
 19524 ;; Defined at:
 19525 ;;		line 287 in file "../src/OverLoad_B1.c"
 19526 ;; Parameters:    Size  Location     Type
 19527 ;;  lights          1    wreg     unsigned char 
 19528 ;;  command         1    0[COMMON] unsigned char 
 19529 ;; Auto vars:     Size  Location     Type
 19530 ;;  lights          1    1[COMMON] unsigned char 
 19531 ;; Return value:  Size  Location     Type
 19532 ;;		None               void
 19533 ;; Registers used:
 19534 ;;		wreg, status,2, status,0
 19535 ;; Tracked objects:
 19536 ;;		On entry : 0/0
 19537 ;;		On exit  : 0/0
 19538 ;;		Unchanged: 0/0
 19539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19540 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19541 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19543 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19544 ;;Total ram usage:        2 bytes
 19545 ;; Hardware stack levels used:    1
 19546 ;; This function calls:
 19547 ;;		Nothing
 19548 ;; This function is called by:
 19549 ;;		_setDimmerLights_IntrControl
 19550 ;; This function uses a non-reentrant model
 19551 ;;
 19552                           
 19553                           
 19554                           ;psect for function i1_setLoad_StatusOff
 19555  1C5E                     i1_setLoad_StatusOff:	
 19556                           
 19557                           ;incstack = 0
 19558                           ; Regs used in i1_setLoad_StatusOff: [wreg+status,2+status,0]
 19559                           ;i1setLoad_StatusOff@lights stored from wreg
 19560  1C5E  00F1               	movwf	i1setLoad_StatusOff@lights
 19561                           
 19562                           ;OverLoad_B1.c: 288: Load1.StatusOff = command;
 19563  1C5F  0870               	movf	i1setLoad_StatusOff@command,w
 19564  1C60  0022               	movlb	2	; select bank2
 19565  1C61  13A2               	bcf	_Load1^(0+256),7
 19566  1C62  1D03               	skipz
 19567  1C63  17A2               	bsf	_Load1^(0+256),7
 19568                           
 19569                           ;OverLoad_B1.c: 289: Load1.SafeCount -= 2;
 19570  1C64  3002               	movlw	2
 19571  1C65  02D0               	subwf	(_Load1^(0+256)+46),f
 19572                           
 19573                           ;OverLoad_B1.c: 292: if (lights == 1) {
 19574  1C66  0871               	movf	i1setLoad_StatusOff@lights,w
 19575  1C67  3A01               	xorlw	1
 19576  1C68  1D03               	skipz
 19577  1C69  2C6C               	goto	i1l7227
 19578                           
 19579                           ;OverLoad_B1.c: 293: Load1.Lights1Status = 0;
 19580  1C6A  01D1               	clrf	(_Load1^(0+256)+47)
 19581                           
 19582                           ;OverLoad_B1.c: 294: }
 19583  1C6B  0008               	return
 19584  1C6C                     i1l7227:	
 19585                           
 19586                           ;OverLoad_B1.c: 297: else if (lights == 2) {
 19587  1C6C  0871               	movf	i1setLoad_StatusOff@lights,w
 19588  1C6D  3A02               	xorlw	2
 19589  1C6E  1D03               	skipz
 19590  1C6F  0008               	return
 19591                           
 19592                           ;OverLoad_B1.c: 298: Load1.Lights2Status = 0;
 19593  1C70  01D2               	clrf	(_Load1^(0+256)+48)
 19594  1C71  0008               	return
 19595  1C72                     __end_ofi1_setLoad_StatusOff:	
 19596                           
 19597                           	psect	text137
 19598  1BDC                     __ptext137:	
 19599 ;; *************** function _DimmerIntrPointSelect *****************
 19600 ;; Defined at:
 19601 ;;		line 72 in file "../src/Dimmer_B1.c"
 19602 ;; Parameters:    Size  Location     Type
 19603 ;;  lights          1    wreg     unsigned char 
 19604 ;; Auto vars:     Size  Location     Type
 19605 ;;  lights          1    1[COMMON] unsigned char 
 19606 ;; Return value:  Size  Location     Type
 19607 ;;		None               void
 19608 ;; Registers used:
 19609 ;;		wreg
 19610 ;; Tracked objects:
 19611 ;;		On entry : 0/0
 19612 ;;		On exit  : 0/0
 19613 ;;		Unchanged: 0/0
 19614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19616 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19617 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19618 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19619 ;;Total ram usage:        2 bytes
 19620 ;; Hardware stack levels used:    1
 19621 ;; This function calls:
 19622 ;;		Nothing
 19623 ;; This function is called by:
 19624 ;;		_setDimmerLights_IntrControl
 19625 ;; This function uses a non-reentrant model
 19626 ;;
 19627                           
 19628                           
 19629                           ;psect for function _DimmerIntrPointSelect
 19630  1BDC                     _DimmerIntrPointSelect:	
 19631                           
 19632                           ;incstack = 0
 19633                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19634                           ;DimmerIntrPointSelect@lights stored from wreg
 19635  1BDC  00F1               	movwf	DimmerIntrPointSelect@lights
 19636                           
 19637                           ;Dimmer_B1.c: 74: if (lights == 1) {
 19638  1BDD  0871               	movf	DimmerIntrPointSelect@lights,w
 19639  1BDE  3A01               	xorlw	1
 19640  1BDF  1D03               	skipz
 19641  1BE0  2BE5               	goto	i1l781
 19642                           
 19643                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 19644  1BE1  30BE               	movlw	_DimmerLights1& (0+255)
 19645  1BE2  00F0               	movwf	??_DimmerIntrPointSelect
 19646  1BE3  0870               	movf	??_DimmerIntrPointSelect,w
 19647  1BE4  00F7               	movwf	_DimmerLightsIntr
 19648  1BE5                     i1l781:	
 19649                           
 19650                           ;Dimmer_B1.c: 76: }
 19651                           ;Dimmer_B1.c: 79: if (lights == 2) {
 19652  1BE5  0871               	movf	DimmerIntrPointSelect@lights,w
 19653  1BE6  3A02               	xorlw	2
 19654  1BE7  1D03               	skipz
 19655  1BE8  0008               	return
 19656                           
 19657                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 19658  1BE9  30CD               	movlw	_DimmerLights2& (0+255)
 19659  1BEA  00F0               	movwf	??_DimmerIntrPointSelect
 19660  1BEB  0870               	movf	??_DimmerIntrPointSelect,w
 19661  1BEC  00F7               	movwf	_DimmerLightsIntr
 19662  1BED  0008               	return
 19663  1BEE                     __end_of_DimmerIntrPointSelect:	
 19664                           
 19665                           	psect	text138
 19666  1B0E                     __ptext138:	
 19667 ;; *************** function _IOC_ISR *****************
 19668 ;; Defined at:
 19669 ;;		line 401 in file "../src/MCU_B1.c"
 19670 ;; Parameters:    Size  Location     Type
 19671 ;;		None
 19672 ;; Auto vars:     Size  Location     Type
 19673 ;;		None
 19674 ;; Return value:  Size  Location     Type
 19675 ;;		None               void
 19676 ;; Registers used:
 19677 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19678 ;; Tracked objects:
 19679 ;;		On entry : 0/0
 19680 ;;		On exit  : 0/0
 19681 ;;		Unchanged: 0/0
 19682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19687 ;;Total ram usage:        0 bytes
 19688 ;; Hardware stack levels used:    1
 19689 ;; Hardware stack levels required when called:    3
 19690 ;; This function calls:
 19691 ;;		_setDimmerReClock
 19692 ;; This function is called by:
 19693 ;;		_ISR
 19694 ;; This function uses a non-reentrant model
 19695 ;;
 19696                           
 19697                           
 19698                           ;psect for function _IOC_ISR
 19699  1B0E                     _IOC_ISR:	
 19700                           
 19701                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19702                           
 19703                           ;incstack = 0
 19704                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19705  1B0E  1D8B               	btfss	11,3	;volatile
 19706  1B0F  0008               	return
 19707  1B10  1C0B               	btfss	11,0	;volatile
 19708  1B11  0008               	return
 19709  1B12  0027               	movlb	7	; select bank7
 19710  1B13  1D16               	btfss	22,2	;volatile
 19711  1B14  0008               	return
 19712                           
 19713                           ;MCU_B1.c: 403: IOCBF2 = 0;
 19714  1B15  1116               	bcf	22,2	;volatile
 19715                           
 19716                           ;MCU_B1.c: 404: IOCIF = 0;
 19717  1B16  100B               	bcf	11,0	;volatile
 19718                           
 19719                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 19720  1B17  0021               	movlb	1	; select bank1
 19721  1B18  1C20               	btfss	_myMain^(0+128),0
 19722  1B19  0008               	return
 19723                           
 19724                           ;MCU_B1.c: 407: setDimmerReClock();
 19725  1B1A  319A  2208         	fcall	_setDimmerReClock
 19726  1B1C  0008               	return
 19727  1B1D                     __end_of_IOC_ISR:	
 19728                           
 19729                           	psect	text139
 19730  1A08                     __ptext139:	
 19731 ;; *************** function _setDimmerReClock *****************
 19732 ;; Defined at:
 19733 ;;		line 244 in file "../src/MCU_B1.c"
 19734 ;; Parameters:    Size  Location     Type
 19735 ;;		None
 19736 ;; Auto vars:     Size  Location     Type
 19737 ;;		None
 19738 ;; Return value:  Size  Location     Type
 19739 ;;		None               void
 19740 ;; Registers used:
 19741 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19742 ;; Tracked objects:
 19743 ;;		On entry : 0/0
 19744 ;;		On exit  : 0/0
 19745 ;;		Unchanged: 0/0
 19746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19751 ;;Total ram usage:        0 bytes
 19752 ;; Hardware stack levels used:    1
 19753 ;; Hardware stack levels required when called:    2
 19754 ;; This function calls:
 19755 ;;		_setDimmerLights_IntrIOC_GO
 19756 ;; This function is called by:
 19757 ;;		_IOC_ISR
 19758 ;; This function uses a non-reentrant model
 19759 ;;
 19760                           
 19761                           
 19762                           ;psect for function _setDimmerReClock
 19763  1A08                     _setDimmerReClock:	
 19764                           
 19765                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 19766                           
 19767                           ;incstack = 0
 19768                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19769  1A08  3001               	movlw	1
 19770  1A09  3190  2081  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19771                           
 19772                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 19773  1A0C  3002               	movlw	2
 19774  1A0D  3190  2081         	fcall	_setDimmerLights_IntrIOC_GO
 19775  1A0F  0008               	return
 19776  1A10                     __end_of_setDimmerReClock:	
 19777                           
 19778                           	psect	text140
 19779  1081                     __ptext140:	
 19780 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19781 ;; Defined at:
 19782 ;;		line 28 in file "../src/Dimmer_B1.c"
 19783 ;; Parameters:    Size  Location     Type
 19784 ;;  lights          1    wreg     unsigned char 
 19785 ;; Auto vars:     Size  Location     Type
 19786 ;;  lights          1    2[COMMON] unsigned char 
 19787 ;; Return value:  Size  Location     Type
 19788 ;;		None               void
 19789 ;; Registers used:
 19790 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19791 ;; Tracked objects:
 19792 ;;		On entry : 0/0
 19793 ;;		On exit  : 0/0
 19794 ;;		Unchanged: 0/0
 19795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19797 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19799 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19800 ;;Total ram usage:        1 bytes
 19801 ;; Hardware stack levels used:    1
 19802 ;; Hardware stack levels required when called:    1
 19803 ;; This function calls:
 19804 ;;		_DimmerIntrIOCPointSelect
 19805 ;; This function is called by:
 19806 ;;		_setDimmerReClock
 19807 ;; This function uses a non-reentrant model
 19808 ;;
 19809                           
 19810                           
 19811                           ;psect for function _setDimmerLights_IntrIOC_GO
 19812  1081                     _setDimmerLights_IntrIOC_GO:	
 19813                           
 19814                           ;incstack = 0
 19815                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19816                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19817  1081  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19818                           
 19819                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 19820  1082  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19821  1083  319C  244A  3190   	fcall	_DimmerIntrIOCPointSelect
 19822                           
 19823                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 19824  1086  0021               	movlb	1	; select bank1
 19825  1087  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 19826  1088  0086               	movwf	6
 19827  1089  3001               	movlw	1	; select bank2/3
 19828  108A  0087               	movwf	7
 19829  108B  1801               	btfsc	1,0
 19830  108C  0008               	return
 19831  108D  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 19832  108E  3E09               	addlw	9
 19833  108F  0086               	movwf	6
 19834  1090  3001               	movlw	1	; select bank2/3
 19835  1091  0087               	movwf	7
 19836  1092  1A81               	btfsc	1,5
 19837  1093  0008               	return
 19838                           
 19839                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 19840  1094  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 19841  1095  0086               	movwf	6
 19842  1096  3001               	movlw	1	; select bank2/3
 19843  1097  0087               	movwf	7
 19844  1098  1401               	bsf	1,0
 19845                           
 19846                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 19847  1099  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 19848  109A  3E09               	addlw	9
 19849  109B  0086               	movwf	6
 19850  109C  3001               	movlw	1	; select bank2/3
 19851  109D  0087               	movwf	7
 19852  109E  1681               	bsf	1,5
 19853                           
 19854                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 19855  109F  0020               	movlb	0	; select bank0
 19856  10A0  1D0D               	btfss	13,2	;volatile
 19857  10A1  28AA               	goto	i1l6981
 19858                           
 19859                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 19860  10A2  0876               	movf	_Dimmer,w
 19861  10A3  3E02               	addlw	2
 19862  10A4  0086               	movwf	6
 19863  10A5  3001               	movlw	1	; select bank2/3
 19864  10A6  0087               	movwf	7
 19865  10A7  0181               	clrf	1
 19866  10A8  0A81               	incf	1,f
 19867                           
 19868                           ;Dimmer_B1.c: 37: } else {
 19869  10A9  0008               	return
 19870  10AA                     i1l6981:	
 19871                           
 19872                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 19873  10AA  0876               	movf	_Dimmer,w
 19874  10AB  3E02               	addlw	2
 19875  10AC  0086               	movwf	6
 19876  10AD  3001               	movlw	1	; select bank2/3
 19877  10AE  0087               	movwf	7
 19878  10AF  0181               	clrf	1
 19879  10B0  0008               	return
 19880  10B1                     __end_of_setDimmerLights_IntrIOC_GO:	
 19881                           
 19882                           	psect	text141
 19883  1C4A                     __ptext141:	
 19884 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19885 ;; Defined at:
 19886 ;;		line 8 in file "../src/Dimmer_B1.c"
 19887 ;; Parameters:    Size  Location     Type
 19888 ;;  lights          1    wreg     unsigned char 
 19889 ;; Auto vars:     Size  Location     Type
 19890 ;;  lights          1    1[COMMON] unsigned char 
 19891 ;; Return value:  Size  Location     Type
 19892 ;;		None               void
 19893 ;; Registers used:
 19894 ;;		wreg
 19895 ;; Tracked objects:
 19896 ;;		On entry : 0/0
 19897 ;;		On exit  : 0/0
 19898 ;;		Unchanged: 0/0
 19899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19901 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19902 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19903 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19904 ;;Total ram usage:        2 bytes
 19905 ;; Hardware stack levels used:    1
 19906 ;; This function calls:
 19907 ;;		Nothing
 19908 ;; This function is called by:
 19909 ;;		_setDimmerLights_IntrIOC_GO
 19910 ;; This function uses a non-reentrant model
 19911 ;;
 19912                           
 19913                           
 19914                           ;psect for function _DimmerIntrIOCPointSelect
 19915  1C4A                     _DimmerIntrIOCPointSelect:	
 19916                           
 19917                           ;incstack = 0
 19918                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19919                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19920  1C4A  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19921                           
 19922                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19923  1C4B  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19924  1C4C  3A01               	xorlw	1
 19925  1C4D  1D03               	skipz
 19926  1C4E  2C54               	goto	i1l770
 19927                           
 19928                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19929  1C4F  30BE               	movlw	_DimmerLights1& (0+255)
 19930  1C50  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19931  1C51  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19932  1C52  0021               	movlb	1	; select bank1
 19933  1C53  00D0               	movwf	_DimmerLightsIntrIOC^(0+128)
 19934  1C54                     i1l770:	
 19935                           
 19936                           ;Dimmer_B1.c: 12: }
 19937                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19938  1C54  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19939  1C55  3A02               	xorlw	2
 19940  1C56  1D03               	skipz
 19941  1C57  0008               	return
 19942                           
 19943                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19944  1C58  30CD               	movlw	_DimmerLights2& (0+255)
 19945  1C59  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19946  1C5A  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19947  1C5B  0021               	movlb	1	; select bank1
 19948  1C5C  00D0               	movwf	_DimmerLightsIntrIOC^(0+128)
 19949  1C5D  0008               	return
 19950  1C5E                     __end_of_DimmerIntrIOCPointSelect:	
 19951  007E                     btemp	set	126	;btemp
 19952  007E                     pic14e$flags	set	126
 19953  007E                     wtemp	set	126
 19954  007E                     wtemp0	set	126
 19955  0080                     wtemp1	set	128
 19956  0082                     wtemp2	set	130
 19957  0084                     wtemp3	set	132
 19958  0086                     wtemp4	set	134
 19959  0088                     wtemp5	set	136
 19960  007F                     wtemp6	set	127
 19961  007E                     ttemp	set	126
 19962  007E                     ttemp0	set	126
 19963  0081                     ttemp1	set	129
 19964  0084                     ttemp2	set	132
 19965  0087                     ttemp3	set	135
 19966  007F                     ttemp4	set	127
 19967  007E                     ltemp	set	126
 19968  007E                     ltemp0	set	126
 19969  0082                     ltemp1	set	130
 19970  0086                     ltemp2	set	134
 19971  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         269
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     74      78
    BANK1            80      0      79
    BANK2            80      4      80
    BANK3            80      0      69
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK2[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerLights_IntrControl->i1_setLoad_StatusOff
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  131570
                                              0 BANK2      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    2234
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           5     5      0     601
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    9589
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    9589
                                             17 BANK0      2     2      0
                    _getMain_AD_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    9521
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getMain_AD_Safe                                      1     1      0      68
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   29437
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   29437
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0   12930
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12426
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1711
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     332
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     332
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1182
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1182
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   38679
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   38679
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37736
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    2017
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35719
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14744
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1710
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15222
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15036
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14943
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            3     3      0    9342
                                             17 BANK0      3     3      0
                            ___lwdiv
                             ___wmul
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   3     3      0    7504
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     124
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    5947
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     425
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    3338
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     540
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getTemp_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     344
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     657
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1306
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1306
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   13950
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   13752
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    9249
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     370
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2136
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     197
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1151
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     198
         _getDimmerLights_StatusFlag
                         _setLoad_GO
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13669
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13669
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     748
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     852
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     644
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     644
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    2017
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     378
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     312
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     312
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (14) i1_setLoad_StatusOff                                 2     1      1      92
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___awdiv
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_AD_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setLoad_Enable
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect
       i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4A      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      4      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     183      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     183      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Nov 03 10:09:11 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1E9A                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006C  
     __end_of_getDimmerLights_StatusFlag 1BBA               _getDimmerLights_StatusFlag 1BA9  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 173A  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1D53  
                   _setDimmerLights_Main 0ABC                             ___ftadd@sign 0048  
                                    l102 159C                                      l112 13CB  
                                    l104 15B0                                      l113 13C7  
                                    l114 13B5                                      l116 13C5  
                                    l342 1C7C                                      l343 1C7D  
                                    l267 17D4                                      l292 0A01  
                                    l293 0A44                                      l386 1F06  
                                    l824 1C2E                                      l870 1408  
                                    _GIE 005F                                      _CRC 00CD  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 0078                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BC  
                                    _ISR 0004                                      _WDT 00CB  
                                    _Sw1 0154                                      _Sw2 01DC  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1C86  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 19C3  
                        __end_of_ADC_Set 1A08                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0C2F                    _setDimmerLights_ERROR 14BD  
                  _setDimmerLights_AdjRF 1EDE                    _setDimmerLights_AdjGo 1B89  
                __size_of_setTemp_Enable 0008                    _setDimmerLights_Clear 1B79  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1B1D                               Load_Main@i 0033  
                           ___ftdiv@sign 003D                                     l3041 176D  
                                   l1362 1FF9                 ?_DimmerLightsPointSelect 0070  
                                   l1371 133A                                     l1349 1E37  
                                   l2333 10E0                                     l1702 0224  
                                   l3070 0566                                     l2318 083A  
                                   l2351 1C41                                     l3047 1784  
                                   l2328 0890                                     l1705 034F  
                                   l1732 11A9                                     l1724 035E  
                                   l2284 0616                                     l1556 16C6  
                        __end_of_IOC_Set 1AD7                                     l2365 11E2  
                                   l2285 0612                                     l2287 0652  
                                   l2279 05DE                                     l2704 1B2D  
                                   l6001 058A                                     l6011 05A5  
                                   l6021 0DFD                                     l6041 0E54  
                                   l6113 0BC1                                     l6027 0E13  
                                   l6131 0BF1                                     l6141 0C15  
                                   l6133 0BFF                                     l6143 0C18  
                                   l6063 0EA6                                     l2880 1DE6  
                                   l6049 0E6D                                     l6081 0EF7  
                                   l6147 0C26                                     l6139 0C0C  
                                   l6093 0F13                                     l6085 0EFF  
                                   l6069 0EBC                                     l6097 0F1B  
                                   l5911 1754                                     l5921 177A  
                                   l5913 1759                                     l5905 1743  
                                   l9121 13FB                                     l9041 0D0D  
                                   l9123 1400                                     l9115 13E8  
                                   l9027 0CD5                                     l9211 07E3  
                                   l9203 07D1                                     l5909 174A  
                                   l9037 0CF7                                     l5919 1772  
                                   l9311 0A2A                                     l9223 17A2  
                                   l5951 04EF                                     l9207 07DA  
                                   l9073 1D10                                     l9225 17A5  
                                   l5961 0505                                     l9065 11D0  
                                   l9075 1D13                                     l9091 1EC8  
                                   l9323 0A46                                     l9243 17BC  
                                   l5955 04F6                                     l9333 1F17  
                                   l9341 1E81                                     l8621 1DD4  
                                   l9413 1FE1                                     l9309 0A12  
                                   l9261 17F0                                     l9253 17E3  
                                   l9229 17AB                                     l5981 053C  
                                   l5973 051F                                     l9079 1D19  
                                   l9335 1F22                                     l9343 1E84  
                                   l9095 1ECE                                     l9255 17E7  
                                   l9247 17DA                                     l5991 0558  
                                   l5983 0541                                     l9503 0886  
                                   l8617 1DCB                                     l9089 1EC5  
                                   l9281 09E6                                     l9257 17EA  
                                   l9249 17DD                                     l5993 0562  
                                   l5985 0545                                     l8801 1710  
                                   l9193 07AD                                     l9347 1E8A  
                                   l9603 12A4                                     l8539 1EA5  
                                   l8635 07F7                                     l9363 12D0  
                                   l9275 09DD                                     l9283 09E9  
                                   l5979 0532                                     l8563 1C09  
                                   l8811 172F                                     l9515 0A5C  
                                   l9613 12B4                                     l8653 147F  
                                   l9293 09FE                                     l9277 09E0  
                                   l5997 0578                                     l8805 1716  
                  _myMain_Initialization 1B4A                                     l9607 12AB  
                                   l8671 14A5                                     l8663 1487  
                                   l8647 1474                                     l8735 095A  
                                   l8823 1D4B                                     l9295 09F8  
                                   l8559 1C03                                     l8807 1723  
                                   l9199 07C8                                     l9519 0A69  
                                   l9447 1B48                                     l9455 1216  
                                   l9609 12AE                                     l8577 1C91  
                                   l8665 1493                                     l8841 162F  
                                   l9721 0AD0                                     l8593 0828  
                                   l9553 143C                                     l8675 14AE  
                                   l9475 083D                                     l9539 0AAA  
                                   l9459 1222                                     l8845 1635  
                                   l9733 0AF5                                     l9725 0ADA  
                                   l9549 142F                                     l8679 14B6  
                                   l8871 1667                                     l8855 1645  
                                   l8863 1651                                     l9487 0855  
                                   l9583 09B5                                     l8849 163B  
                                   l9737 0B02                                     l9497 087B  
                                   l9833 1E44                                     _CFGS 0CAE  
                                   l8963 1BB3                                     l8875 166D  
                                   l8859 164B                                     l8891 1D7F  
                                   l9747 0B29                                     l9851 1305  
                                   l8947 1CFE                                     l9835 1E47  
                                   l9597 129B                                     l9773 1269  
                                   l8949 1D02                                     l9917 0D5F  
                                   l9599 129E                                     l8879 1673  
                                   l9919 0D65                                     l9839 1E4C  
                           __CFG_WDTE$ON 0000                                     l8993 0C8C  
                                   l9857 131A                                     l9777 1270  
                                   l9945 0DAE                                     l8899 10F0  
                                   l9955 0DC6                                     l9981 05D1  
                                   l9957 0DC8                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4315 1775  
                                   u4345 178B                                     u4275 174F  
                                   _PEIE 005E                                     u4525 0546  
                                   u4295 1768                                     u4625 0E25  
                                   u4465 0520                                     u4705 0EC8  
                                   u4635 0E35                                     u4555 0559  
                                   u4715 0ED8                                     u4645 0E55  
                                   u4655 0E64                                     u4815 0BC8  
                                   u4495 0533                                     u4735 0F00  
                                   u4665 0E6E                                     u4745 0F06  
                                   u4845 0BF2                                     u4775 0F1C  
                                   u4785 0F22                                     u4875 0C0D  
                                   u9075 1CA9                                     u8705 1494  
                                   u8715 149E                                     u8725 14A6  
                                   u8575 0814                                     u8685 148A  
                                   u8790 0908                                     u9575 1F0C  
                                   u8795 0906                                     _LWLO 0CAD  
                                   _RFSW 0079                                     _RSSI 00D1  
                                   _WREN 0CAA                                     _Buz1 00B0  
                                   _Temp 00D7                                     _main 1513  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 08FE  
                        __end_of_RF_Main 19CC                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 1A83                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1A08  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 11F7                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                                    ??_ISR 0075  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1ABE  
          __end_of_DimmerIntrPointSelect 1BEE                                    l10003 05F5  
                                  l10103 0392                                    l10041 0639  
                                  l10113 03A2                                    l10105 0398  
                                  l10211 1157                                    l10115 03AA  
                                  l10213 1163                                    l10223 117E  
                                  l10039 0637                                    l10305 070C  
                                  l10057 0667                                    l10153 0442  
                                  l10129 03D7                                    l10219 1175  
                                  l10083 1B32                                    l10139 0404  
                                  l10163 0474                                    l10237 139F  
                                  l10069 0688                                    l10421 113F  
                                  l10191 1DE0                                    l10087 1B38  
                                  l10409 0BA2                                    l10515 02E3  
                                  l10533 030D                                    l10509 02D6  
                                  l10517 02E9                                    l10527 0301  
                                  l10447 16AF                                    l10545 032A  
                                  l10553 034C                                    l10393 0B72  
                                  l10457 16C7                                    l10633 1537  
                                  l10387 0B4F                                    l10397 0B7A  
                                  l10637 1542                                    l10559 0355  
                                  l10495 026D                    ?_setDimmerLights_Main 0070  
                                  l10489 0243                          ?_setDelayOff_GO 002A  
                  __end_of_setLoad_Count 1B00                                    ?_main 016C  
                        __end_of___awdiv 14BD                          __end_of___ftadd 05BD  
                        __end_of___ftdiv 0E8F                                    u11105 1E2E  
                        __end_of___ftmul 0F43                                    u10335 0D9C  
                                  u11225 1136                                    u10355 0DB4  
                                  u11155 0B62                                    u11235 1145  
                        ___awdiv@divisor 0020                                    u11405 02EF  
                                  u10615 0678                                    u11255 168E  
                                  _T1CON 0018                                    u11265 16BE  
                                  u11355 02AA                                    u11195 0B94  
                        __end_of___fttol 0C2F                                    u10485 05EF  
                                  u11285 16D6                                    u10915 115A  
           setDimmerLights_AdjGo@command 0022                                    u10935 1164  
                                  u10945 116E                                    u10955 1176  
                                  u10875 1DE7                                    u10885 1DEC  
                                  u10985 1395                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1185                                    i1l770 1C54  
                                  i1l781 1BE5                   _setDimmerLights_Switch 1B59  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00ED                                    _RFSW2 00EE  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0014                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _Load1 0122  
                __end_of_Timeout_Counter 1CAF                            __CFG_WRT$HALF 0000  
                       ?_getMain_AD_Safe 0070       __end_of_setDimmerLights_IntrIOC_GO 10B1  
             _setDimmerLights_IntrIOC_GO 1081                         __end_of_TMR1_ISR 1F4F  
           __size_of_CC2500_WriteCommand 0019                         __end_of_TMR1_Set 1ACA  
                                  _getAD 1E39                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 141D            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                         _setLoad_Enable 1A59              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1C24  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03D8                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1BCB                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 08FE  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                setDimmerLights_Main@clear 0065  
                  setLoad_Enable@command 0020                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 15C4                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 156B                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 19E5                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0CB8  
                   _setSw_Initialization 1A30                  setOverTemp_Exceptions@i 002F  
             __size_of_setLoad_StatusOff 0019                                   ??_main 006A  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0761                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03D8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C37  
                 ?_setDimmerLights_AdjRF 0070                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 008B                         ??_setRFSW_Status 0023  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 1A62                     __end_of_getTemp_Safe 1A30  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 0893                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 0069                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0070  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1EBC                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 179B                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1B69                                   i1l7227 1C6C  
                                 i1l7411 0179                                   i1l7403 0158  
                                 i1l7421 01AB                                   i1l7441 01E2  
                                 i1l7425 01B1                                   i1l7409 0173  
                                 i1l7427 01B7                                   i1l7363 00A8  
                                 i1l7445 01E8                                   i1l7381 00F2  
                                 i1l7383 00F8                                   i1l7359 00A1  
                                 i1l7395 012D                                   i1l7387 010B  
                                 i1l7389 0111                                   i1l7399 0144  
                                 i1l6981 10AA                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                     __size_of_Load_Main 016D                                   u654_25 007C  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 _IO_Set 1D53                                   u786_25 1F49  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 19EF           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1CC4                                   _Dimmer 0076  
                                 _DlySw1 00E9                                   _DlySw2 00EB  
            __size_of_setLoad_Exceptions 0038               __end_of_Mcu_Initialization 1C00  
                    __end_of_Buzzer_Main 13D2                                   _Memory 0220  
                                 _Timer1 00C8       __end_of_setDimmerLights_TriggerAdj 1BA9  
             _setDimmerLights_TriggerAdj 1B99                                   ___bmul 1C00  
          setDimmerLights_Switch@command 0022                                   ___wmul 1DDD  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                              ??___lwdiv 0024              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00D5  
                                 _s_data 00D6                                   _setLED 161F  
                                 _myMain 00A0                         _DimmerLightsIntr 0077  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                       ___awdiv@quotient 0027                                   _setBuz 156B  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 19EF  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
    __end_of_setDimmerLights_IntrControl 020E              _setDimmerLights_IntrControl 004D  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ?_Timeout_Counter 0070                    __end_of_SwPointSelect 0800  
                        ?_setLoad_Enable 0070                            ?_setRF_Enable 0070  
                         _setTemp_Enable 1A48                          _RfSWPointSelect 1C37  
           __size_of_Flash_Memory_Modify 0044        setDimmerLights_IntrControl@lights 0074  
            __size_of_DimmerLights_Close 0019                  __size_of_LedPointSelect 001D  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1B2C                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 161F         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0049              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                          ?_my_MainTimer 0070                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK4 1E59  
                          __end_of_getAD 1E59                                ?_TMR1_ISR 0070  
                              ?_TMR1_Set 0070                   setLoad_AH_AL_Restore@i 0021  
           __size_of_setDimmerLights_Adj 0044                       _LED_Initialization 1AA6  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 004B  
                       ??_DelayTimejudge 0024              ?_getDimmerLights_StatusFlag 0070  
              __size_of_setLoad_StatusOn 001C            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
                      __end_of_Load_Main 037B                       __size_of_getBuz_GO 0011  
             __end_of_set_TimeoutCleared 19EA                 __end_of_setDimmerReClock 1A10  
                     __size_of_getRxData 0069                      ?_LED_Initialization 0070  
                 __end_of_setTemp_Enable 1A50                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0020                           _DimmerLights11 00CE  
                         _DimmerLights22 00CF                     __size_of_setLED_Main 0041  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 19CF                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK0 006A  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0220  
                              ?_Fosc_Set 0070                              _Buzzer_Main 1388  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 19D5  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1A10                            ??_Switch_Main 006A  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006B  
                      LedPointSelect@led 0021                      i1_setLoad_StatusOff 1C5E  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0008  
                     getTemp_Safe@result 0020                              setBuz@count 002C  
                             __pmaintext 1513                      _CC2500_WriteCommand 1D08  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR1_ISR 0075                            ?_setTemp_Main 0070  
                             _getLoad_AD 0B2F                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00BD  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1A01                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1118                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1A8E                    __size_of_getTemp_Safe 0008  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 11BD  
                __end_of_RfSWPointSelect 1C4A                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0070                                  _IOC_ISR 1B0E  
                        ?_setTemp_Enable 0070                                  _IOC_Set 1ACA  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1E1A                        _Flash_Memory_Read 1067  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0071  
                 __size_of_CC2500_TxData 0065                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                                  _RF_Data 01A0  
                                _RF_Main 19C9                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1A78  
        __end_of_setControl_Lights_Table 07EC                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 0A4A  
                        _setPercentValue 1342                  ??_setLoad_AH_AL_Restore 0020  
                         ??_setMemory_GO 0020                         ?_getPercentValue 0070  
                                _Dimmer1 0169             __end_of_CC2500_FrequencyCabr 1A9A  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1BDC  
                    ??_Flash_Memory_Main 0026                      ??_Flash_Memory_Read 0020  
                                _VarLED1 0161                                  _VarLED2 0165  
                      __end_of_getRxData 0893                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1C5E                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1B79                     ??_setRFSW_AdjControl 0064  
                           _getTemp_Safe 1A28                           ??_setTemp_Main 0031  
                        __size_of___bmul 0012           __end_of_setDimmerLights_Switch 1B69  
                                ___awdiv 1469                                  ___ftadd 04C7  
                         ??_setSw_Enable 0022                                  ___ftdiv 0DE6  
                        __size_of___wmul 001E                                  ___ftmul 0E8F  
                                ___fttol 0BA8                      __end_of_Switch_Main 1A48  
                                ___lwdiv 114E                  ??_Buzzer_Initialization 0020  
               ??_setOverTemp_Exceptions 002E                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0059                           ??_setSw_Status 0023  
                                __ptext1 167D                                  __ptext2 1A48  
                                __ptext3 1A59                                  __ptext4 1B4A  
                                __ptext5 1118                                  __ptext6 0B2F  
                                __ptext7 1E39                                  __ptext8 1C12  
                                __ptext9 0002                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                ??_setDimmerLights_Clear 0023                      Sw_DimmerOnFunc@Idle 0062  
                  ??i1_setLoad_StatusOff 0071                    _DimmerIntrPointSelect 1BDC  
                           __size_of_ISR 000F                __end_of_Flash_Memory_Main 1E39  
              __end_of_Flash_Memory_Read 1081                               _setRF_Main 05BD  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1A18  
                      _DimmerLights_Main 1A6D           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1A6D  
             __end_of_CC2500_ClearRXFIFO 19D9                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 19DD            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006D                           _LedPointSelect 1DC0  
                    _DelayOffPointSelect 1C86                                  clrloop0 19FC  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1AE4  
                   end_of_initialization 0049                ??_DelayOff_Initialization 0023  
                             _setLoad_GO 1A20                        _CC2500_InitSetREG 1F4F  
                          _DelayTime_1us 1F01                        __end_of_setTxData 1000  
             __end_of_Flash_Memory_Write 2000                    getMain_AD_Safe@result 0020  
                                init_ram 19F5                 __size_of_getMain_AD_Safe 000F  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 19F6  
                             _setSw_Main 037B                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 1EBC                   __size_of_setLoad_Count 000E  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1BBA  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 09D9                            _CC2500_TxData 179B  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1B0E  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 12FE  
                _DimmerLights_Exceptions 13D2                              ?_getLoad_AD 0070  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1A50  
                    ??_CC2500_ReadStatus 0022                         _setLoad_StatusOn 1D6C  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                setLoad_Exceptions@command 0030  
                    __size_of_TouchPower 000F                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 1A78  
                     _Mcu_Initialization 1BEE                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0043                     __end_of_my_MainTimer 16DB  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$6832 0067                          _setSw_Main$6833 0068  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1DDD  
                __end_of_Sw_DimmerOnFunc 0ABC                  __end_of_setPercentValue 1388  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 1F79  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 12BA                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1EDE               __end_of_setLoad_Exceptions 11BD  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1D6C  
                   _setRF_Initialization 1A83                              _Switch_Main 1A40  
            setDimmerLights_Clear@lights 0023                      setLoad_Exceptions@i 002F  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C24  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1CAF  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1C12                __size_of_Sw_DimmerAdjFunc 004C  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1C4A  
                         __end_of___wmul 1DFB          __size_of_setOverTemp_Exceptions 003F  
                      __size_of_TMR1_ISR 0028                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C                     __end_of_setMemory_GO 1CDA  
          __size_of_setDimmerLights_Main 0073                           __end_of_setLED 167D  
                         __end_of_setBuz 15C4                            _setLoad_Count 1AF2  
        _getDimmerLights_StatusFlag$2576 0022                     _CC2500_FrequencyCabr 1A8E  
                setLoad_StatusOn@command 0020                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0CB8  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 10E3  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1D3A  
                              _Load_Main 020E                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0013                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1E1A  
        __size_of_setTemp_Initialization 0003                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0DE6  
                            ?_setLoad_GO 0070                     __end_of_setSw_Enable 1DC0  
                    __size_of_getLoad_AD 0079                             ?_Buzzer_Main 0070  
                     _set_TimeoutCleared 19E5                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 015D  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0036                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1B2C                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              i1setLoad_StatusOff@lights 0071                  __size_of_setRFSW_Status 000E  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 19D2  
              ??_DimmerLights_Exceptions 002D            setOverTemp_Exceptions@command 0030  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D2                        ??_getMain_AD_Safe 0020  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00D3  
                            __pdataBANK4 0245                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0070  
                       _CC2500_SIDLEMode 19DD               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 1118                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$5745 0068                              __pbssCOMMON 0076  
                               ?_IOC_Set 0070                                ___latbits 0003  
                             ?_Load_Main 0070                    setTemp_Enable@command 0020  
                    setRF_Enable@command 0020                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                            __pcstackBANK2 016C  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0089                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 006B  
             __size_of_CC2500_ReadStatus 0022                   _setOverTemp_Exceptions 11F7  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01BE                            _DimmerLights2 01CD  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1DA4                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006D              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00DD                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 19CC                                _getBuz_GO 1BCB  
    __end_of_Flash_Memory_Initialization 0761              _Flash_Memory_Initialization 069A  
                               ?___awdiv 0020                                __ptext100 07EC  
                              __ptext101 08FE                                __ptext110 1B59  
                              __ptext102 1342                                __ptext111 1C24  
                              __ptext103 0BA8                                __ptext120 1F4F  
                              __ptext112 156B                                __ptext104 0DE6  
                              __ptext121 1DFB                                __ptext113 1469  
                              __ptext105 1E9A                                __ptext130 1C72  
                              __ptext122 1E79                                __ptext114 1A10  
                              __ptext106 173A                                __ptext131 1388  
                              __ptext123 1A8E                                __ptext115 1A62  
                              __ptext107 1AE4                                __ptext140 1081  
                              __ptext132 19C3                                __ptext124 1F01  
                              __ptext116 1C86                                __ptext108 1C37  
                              __ptext141 1C4A                                __ptext125 19D9  
                              __ptext117 1CAF                                __ptext109 1B69  
                               ?___ftadd 003E                                __ptext134 1F27  
                              __ptext126 19D5                                __ptext118 19DD  
                              __ptext135 004D                                __ptext127 1D08  
                              __ptext119 1277                                __ptext136 1C5E  
                              __ptext128 19E5                                __ptext137 1BDC  
                              __ptext129 1C9A                                __ptext138 1B0E  
                              __ptext139 1A08                                _getRxData 082A  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                    __size_of_my_MainTimer 005E  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 0D43  
                    __size_of_setLoad_GO 0008            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 19C6  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1B3B  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0056  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 014C            __end_of_setDimmerLights_ERROR 1513  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1F01  
          __end_of_setDimmerLights_AdjGo 1B99                   CC2500_WriteByte@loop_a 0021  
         __size_of_setDimmerLights_Clear 0010            __end_of_setDimmerLights_Clear 1B89  
                              _r_address 00D4           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1B59  
                         __size_of_getAD 0020                             _setRF_Enable 1B00  
                       ___lwdiv@quotient 0026                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 07EC                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 1277                      _DimmerLightsIntrIOC 00D0  
               __end_of_setLoad_StatusOn 1D88                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 19D2                        _CC2500_rfSettings 102F  
                         ___wmul@product 0024                                 _LED_Main 1AB2  
                        SwPointSelect@sw 0021                                clear_ram0 19FB  
               CC2500_InitPATable@loop_d 0027                             _my_MainTimer 167D  
                              _setTxData 0F43      __end_of_DimmerLights_Initialization 1CF1  
            _DimmerLights_Initialization 1CDA                       _CC2500_ClearRXFIFO 19D5  
                     _CC2500_ClearTXFIFO 19D9           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1A40                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003A  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 1FD1  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 1F27                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1C72  
                               _TMR1_Set 1ABE                         _Sw_DimmerAdjFunc 141D  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                        ??_setLoad_Count 0020        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 0120                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1D21                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1C12                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 096A                    __size_of_setTemp_Main 00A3  
                __size_of_setDelayOff_GO 005F                    __size_of_setSw_Enable 001C  
                               _DelayOff 006A                             setSw_Main@sw 0069  
       setDimmerLights_IntrIOC_GO@lights 0072                              ??_Load_Main 0031  
                       __size_of_IOC_ISR 000F             ?_setDimmerLights_IntrControl 0070  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 1AA6  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 10E3  
                  _DlyOff_Initialization 1A62                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 19E1                         __size_of_WDT_Set 000B  
                 setLoad_StatusOn@lights 0021                       __end_of_getLoad_AD 0BA8  
                  _Switch_Initialization 1AD7                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 1AE4  
                           _setMemory_GO 1CC4                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 114E                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1C72                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 005E                              ??_Temp_Main 0033  
                      setRFSW_Control@sw 0063                      _Load_Initialization 19EA  
                              setLED@led 0023     __end_of_setDimmerLights_TriggerERROR 1FA4  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 1F79  
                ??_DimmerIntrPointSelect 0070                             _setTemp_Main 0D43  
                     _setLoad_Exceptions 1185                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1DA4  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                                 ___awtoft 1E9A  
                       ??_LedPointSelect 0020                                 ___ftpack 173A  
                           _setSw_Status 1B1D                        getTemp_AD@channel 0025  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1236                      ?_setLoad_Exceptions 0070  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 096A  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
                        ___lwdiv@divisor 0020                     ?_Load_Initialization 0070  
                        ___lwdiv@counter 0025                                 __ptext10 19D2  
                               __ptext11 0D43                                 __ptext20 096A  
                               __ptext12 11F7                                 __ptext21 141D  
                               __ptext13 1B3B                                 __ptext30 10B1  
                               __ptext22 1B99                                 __ptext14 19CF  
                               __ptext31 0761                                 __ptext23 1B89  
                               __ptext15 19CC                                 __ptext40 0E8F  
                               __ptext32 0CB8                                 __ptext24 1AD7  
                               __ptext16 1A40                                 __ptext41 04C7  
                               __ptext33 16DB                                 __ptext25 1A30  
                               __ptext17 037B                                 __ptext50 1A78  
                               __ptext42 1BCB                                 __ptext34 0800  
                               __ptext26 1B2C                                 __ptext18 1A38  
                               __ptext51 1ABE                                 __ptext43 179B  
                               __ptext35 1C00                                 __ptext27 19C9  
                               __ptext19 0A4A                                 __ptext60 13D2  
                               __ptext52 1D53                                 __ptext44 09D9  
                               __ptext36 11BD                                 __ptext28 05BD  
                               __ptext61 1F79                                 __ptext53 1ACA  
                               __ptext45 1EBC                                 __ptext37 10E3  
                               __ptext29 082A                                 __ptext70 1236  
                               __ptext62 14BD                                 __ptext54 19E1  
                               __ptext46 1CF1                                 __ptext38 1EDE  
                               __ptext71 1AA6                                 __ptext63 1B79  
                               __ptext55 1A01                                 __ptext47 19C6  
                               __ptext39 15C4                                 __ptext80 1A6D  
                               __ptext72 1BBA                                 __ptext64 1A28  
                               __ptext56 020E                                 __ptext48 1A83  
                               __ptext81 0ABC                                 __ptext73 1E1A  
                               __ptext65 1DDD                                 __ptext57 1185  
                               __ptext49 1BEE                                 __ptext90 1CC4  
                               __ptext82 12BA                                 __ptext74 12FE  
                               __ptext66 114E                                 __ptext58 1DA4  
                               __ptext91 1A20                                 __ptext83 1D3A  
                               __ptext75 1A9A                                 __ptext67 19EA  
                               __ptext59 1B00                                 __ptext92 1BA9  
                               __ptext84 0C2F                                 __ptext76 069A  
                               __ptext68 1D88                                 __ptext93 1CDA  
                               __ptext85 1D6C                                 __ptext77 1FD1  
                               __ptext69 1AB2                                 __ptext94 1FA4  
                               __ptext86 1AF2                                 __ptext78 1A50  
                               __ptext95 19EF                                 __ptext87 161F  
                               __ptext79 1067                                 __ptext96 1A18  
                               __ptext88 1DC0                                 __ptext97 0893  
                               __ptext89 1D21                                 __ptext98 0F43  
                               __ptext99 1B1D                                 __product 0245  
          ??_setDimmerLights_IntrControl 0072                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0013  
                        _getMain_AD_Safe 1B3B           __size_of_Dimmer_Initialization 0006  
                 __end_of_setRFSW_Status 1AF2            __end_of_Dimmer_Initialization 19F5  
           __end_of_setDimmerLights_Main 0B2F              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1A38  
               __end_of_CC2500_SIDLEMode 19E1               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1C9A               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1D21                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 0008                     ??_setLoad_Exceptions 002E  
                        _CC2500_ReadByte 1CF1                       _CC2500_InitPATable 1DFB  
    __size_of_getDimmerLights_StatusFlag 0011            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 069A                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 016C  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 016E  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 1277  
                     __end_of_setLoad_GO 1A28              __end_of_Flash_Memory_Modify 1342  
                      ??_getPercentValue 0059                              _setLog_Code 10B1  
            __end_of_Flash_Memory_Unlock 1A59                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1E79                       __end_of_setSw_Main 04C7  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_OK 03D9                     setLoad_Count@command 0021  
                 ?_DlyOff_Initialization 0070                  ?_setOverTemp_Exceptions 0070  
                         _DelayTimejudge 0800                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0009                   ?_Switch_Initialization 0070  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1FD1  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 1FA4              __end_of_setDimmerLights_Adj 12FE  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 19C6  
   __size_of_setDimmerLights_IntrControl 01C1                              getLoad_AD@i 0028  
                            getLoad_AD@j 0027                            ?_getTemp_Safe 0070  
                   _Flash_Memory_Erasing 1A9A                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007A          __end_of_DelayOff_Initialization 1A18  
    __size_of_setDimmerLights_IntrIOC_GO 0030                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1A20                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 16DB         __size_of_setControl_Lights_Table 008B  
                      _setLoad_StatusOff 1D3A                   __end_of_DelayTimejudge 082A  
         __end_of_setOverTemp_Exceptions 1236                  __end_of_getMain_AD_Safe 1B4A  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 1F27                 __end_of_Sw_DimmerAdjFunc 1469  
                __end_of_CC2500_ReadByte 1D08             __end_of_setSw_Initialization 1A38  
                        _Timeout_Counter 1C9A                     getPercentValue@value 005B  
             __end_of_LED_Initialization 1AB2         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 19CF  
               __size_of_Sw_DimmerOnFunc 0072                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0070                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 19C9  
               __end_of_Sw_DimmerOffFunc 09D9                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0A4A                    __end_of_CC2500_TxData 1800  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 1D88  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 12BA  
