

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Oct 28 14:04:29 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	intentry,global,class=CODE,delta=2
   155                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text136,local,class=CODE,merge=1,delta=2
   158                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   163                           	dabs	1,0x7E,2
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  011D                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  018E                     	;# 
   216  0191                     	;# 
   217  0191                     	;# 
   218  0192                     	;# 
   219  0193                     	;# 
   220  0193                     	;# 
   221  0194                     	;# 
   222  0195                     	;# 
   223  0196                     	;# 
   224  0197                     	;# 
   225  0199                     	;# 
   226  019A                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019C                     	;# 
   232  019C                     	;# 
   233  019D                     	;# 
   234  019E                     	;# 
   235  019F                     	;# 
   236  020D                     	;# 
   237  0210                     	;# 
   238  0211                     	;# 
   239  0211                     	;# 
   240  0212                     	;# 
   241  0212                     	;# 
   242  0213                     	;# 
   243  0213                     	;# 
   244  0214                     	;# 
   245  0214                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0216                     	;# 
   250  0216                     	;# 
   251  0217                     	;# 
   252  0217                     	;# 
   253  0291                     	;# 
   254  0291                     	;# 
   255  0292                     	;# 
   256  0293                     	;# 
   257  0298                     	;# 
   258  0298                     	;# 
   259  0299                     	;# 
   260  029A                     	;# 
   261  0394                     	;# 
   262  0395                     	;# 
   263  0396                     	;# 
   264  0FE4                     	;# 
   265  0FE5                     	;# 
   266  0FE6                     	;# 
   267  0FE7                     	;# 
   268  0FE8                     	;# 
   269  0FE9                     	;# 
   270  0FEA                     	;# 
   271  0FEB                     	;# 
   272  0FED                     	;# 
   273  0FEE                     	;# 
   274  0FEF                     	;# 
   275  0000                     	;# 
   276  0001                     	;# 
   277  0002                     	;# 
   278  0003                     	;# 
   279  0004                     	;# 
   280  0005                     	;# 
   281  0006                     	;# 
   282  0007                     	;# 
   283  0008                     	;# 
   284  0009                     	;# 
   285  000A                     	;# 
   286  000B                     	;# 
   287  000C                     	;# 
   288  000D                     	;# 
   289  000E                     	;# 
   290  0010                     	;# 
   291  0011                     	;# 
   292  0012                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0016                     	;# 
   296  0017                     	;# 
   297  0018                     	;# 
   298  0019                     	;# 
   299  001A                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  008C                     	;# 
   303  008D                     	;# 
   304  008E                     	;# 
   305  0090                     	;# 
   306  0091                     	;# 
   307  0092                     	;# 
   308  0095                     	;# 
   309  0096                     	;# 
   310  0097                     	;# 
   311  0099                     	;# 
   312  009A                     	;# 
   313  009B                     	;# 
   314  009B                     	;# 
   315  009C                     	;# 
   316  009D                     	;# 
   317  009E                     	;# 
   318  010C                     	;# 
   319  010D                     	;# 
   320  010E                     	;# 
   321  0116                     	;# 
   322  0117                     	;# 
   323  011D                     	;# 
   324  018C                     	;# 
   325  018D                     	;# 
   326  018E                     	;# 
   327  0191                     	;# 
   328  0191                     	;# 
   329  0192                     	;# 
   330  0193                     	;# 
   331  0193                     	;# 
   332  0194                     	;# 
   333  0195                     	;# 
   334  0196                     	;# 
   335  0197                     	;# 
   336  0199                     	;# 
   337  019A                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019C                     	;# 
   343  019C                     	;# 
   344  019D                     	;# 
   345  019E                     	;# 
   346  019F                     	;# 
   347  020D                     	;# 
   348  0210                     	;# 
   349  0211                     	;# 
   350  0211                     	;# 
   351  0212                     	;# 
   352  0212                     	;# 
   353  0213                     	;# 
   354  0213                     	;# 
   355  0214                     	;# 
   356  0214                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0216                     	;# 
   361  0216                     	;# 
   362  0217                     	;# 
   363  0217                     	;# 
   364  0291                     	;# 
   365  0291                     	;# 
   366  0292                     	;# 
   367  0293                     	;# 
   368  0298                     	;# 
   369  0298                     	;# 
   370  0299                     	;# 
   371  029A                     	;# 
   372  0394                     	;# 
   373  0395                     	;# 
   374  0396                     	;# 
   375  0FE4                     	;# 
   376  0FE5                     	;# 
   377  0FE6                     	;# 
   378  0FE7                     	;# 
   379  0FE8                     	;# 
   380  0FE9                     	;# 
   381  0FEA                     	;# 
   382  0FEB                     	;# 
   383  0FED                     	;# 
   384  0FEE                     	;# 
   385  0FEF                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  0010                     	;# 
   402  0011                     	;# 
   403  0012                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  0090                     	;# 
   417  0091                     	;# 
   418  0092                     	;# 
   419  0095                     	;# 
   420  0096                     	;# 
   421  0097                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009B                     	;# 
   426  009C                     	;# 
   427  009D                     	;# 
   428  009E                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0116                     	;# 
   433  0117                     	;# 
   434  011D                     	;# 
   435  018C                     	;# 
   436  018D                     	;# 
   437  018E                     	;# 
   438  0191                     	;# 
   439  0191                     	;# 
   440  0192                     	;# 
   441  0193                     	;# 
   442  0193                     	;# 
   443  0194                     	;# 
   444  0195                     	;# 
   445  0196                     	;# 
   446  0197                     	;# 
   447  0199                     	;# 
   448  019A                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019C                     	;# 
   454  019C                     	;# 
   455  019D                     	;# 
   456  019E                     	;# 
   457  019F                     	;# 
   458  020D                     	;# 
   459  0210                     	;# 
   460  0211                     	;# 
   461  0211                     	;# 
   462  0212                     	;# 
   463  0212                     	;# 
   464  0213                     	;# 
   465  0213                     	;# 
   466  0214                     	;# 
   467  0214                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0216                     	;# 
   472  0216                     	;# 
   473  0217                     	;# 
   474  0217                     	;# 
   475  0291                     	;# 
   476  0291                     	;# 
   477  0292                     	;# 
   478  0293                     	;# 
   479  0298                     	;# 
   480  0298                     	;# 
   481  0299                     	;# 
   482  029A                     	;# 
   483  0394                     	;# 
   484  0395                     	;# 
   485  0396                     	;# 
   486  0FE4                     	;# 
   487  0FE5                     	;# 
   488  0FE6                     	;# 
   489  0FE7                     	;# 
   490  0FE8                     	;# 
   491  0FE9                     	;# 
   492  0FEA                     	;# 
   493  0FEB                     	;# 
   494  0FED                     	;# 
   495  0FEE                     	;# 
   496  0FEF                     	;# 
   497  0000                     	;# 
   498  0001                     	;# 
   499  0002                     	;# 
   500  0003                     	;# 
   501  0004                     	;# 
   502  0005                     	;# 
   503  0006                     	;# 
   504  0007                     	;# 
   505  0008                     	;# 
   506  0009                     	;# 
   507  000A                     	;# 
   508  000B                     	;# 
   509  000C                     	;# 
   510  000D                     	;# 
   511  000E                     	;# 
   512  0010                     	;# 
   513  0011                     	;# 
   514  0012                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  008C                     	;# 
   525  008D                     	;# 
   526  008E                     	;# 
   527  0090                     	;# 
   528  0091                     	;# 
   529  0092                     	;# 
   530  0095                     	;# 
   531  0096                     	;# 
   532  0097                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  010C                     	;# 
   541  010D                     	;# 
   542  010E                     	;# 
   543  0116                     	;# 
   544  0117                     	;# 
   545  011D                     	;# 
   546  018C                     	;# 
   547  018D                     	;# 
   548  018E                     	;# 
   549  0191                     	;# 
   550  0191                     	;# 
   551  0192                     	;# 
   552  0193                     	;# 
   553  0193                     	;# 
   554  0194                     	;# 
   555  0195                     	;# 
   556  0196                     	;# 
   557  0197                     	;# 
   558  0199                     	;# 
   559  019A                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019C                     	;# 
   565  019C                     	;# 
   566  019D                     	;# 
   567  019E                     	;# 
   568  019F                     	;# 
   569  020D                     	;# 
   570  0210                     	;# 
   571  0211                     	;# 
   572  0211                     	;# 
   573  0212                     	;# 
   574  0212                     	;# 
   575  0213                     	;# 
   576  0213                     	;# 
   577  0214                     	;# 
   578  0214                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0216                     	;# 
   583  0216                     	;# 
   584  0217                     	;# 
   585  0217                     	;# 
   586  0291                     	;# 
   587  0291                     	;# 
   588  0292                     	;# 
   589  0293                     	;# 
   590  0298                     	;# 
   591  0298                     	;# 
   592  0299                     	;# 
   593  029A                     	;# 
   594  0394                     	;# 
   595  0395                     	;# 
   596  0396                     	;# 
   597  0FE4                     	;# 
   598  0FE5                     	;# 
   599  0FE6                     	;# 
   600  0FE7                     	;# 
   601  0FE8                     	;# 
   602  0FE9                     	;# 
   603  0FEA                     	;# 
   604  0FEB                     	;# 
   605  0FED                     	;# 
   606  0FEE                     	;# 
   607  0FEF                     	;# 
   608  0000                     	;# 
   609  0001                     	;# 
   610  0002                     	;# 
   611  0003                     	;# 
   612  0004                     	;# 
   613  0005                     	;# 
   614  0006                     	;# 
   615  0007                     	;# 
   616  0008                     	;# 
   617  0009                     	;# 
   618  000A                     	;# 
   619  000B                     	;# 
   620  000C                     	;# 
   621  000D                     	;# 
   622  000E                     	;# 
   623  0010                     	;# 
   624  0011                     	;# 
   625  0012                     	;# 
   626  0015                     	;# 
   627  0016                     	;# 
   628  0016                     	;# 
   629  0017                     	;# 
   630  0018                     	;# 
   631  0019                     	;# 
   632  001A                     	;# 
   633  001B                     	;# 
   634  001C                     	;# 
   635  008C                     	;# 
   636  008D                     	;# 
   637  008E                     	;# 
   638  0090                     	;# 
   639  0091                     	;# 
   640  0092                     	;# 
   641  0095                     	;# 
   642  0096                     	;# 
   643  0097                     	;# 
   644  0099                     	;# 
   645  009A                     	;# 
   646  009B                     	;# 
   647  009B                     	;# 
   648  009C                     	;# 
   649  009D                     	;# 
   650  009E                     	;# 
   651  010C                     	;# 
   652  010D                     	;# 
   653  010E                     	;# 
   654  0116                     	;# 
   655  0117                     	;# 
   656  011D                     	;# 
   657  018C                     	;# 
   658  018D                     	;# 
   659  018E                     	;# 
   660  0191                     	;# 
   661  0191                     	;# 
   662  0192                     	;# 
   663  0193                     	;# 
   664  0193                     	;# 
   665  0194                     	;# 
   666  0195                     	;# 
   667  0196                     	;# 
   668  0197                     	;# 
   669  0199                     	;# 
   670  019A                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019C                     	;# 
   676  019C                     	;# 
   677  019D                     	;# 
   678  019E                     	;# 
   679  019F                     	;# 
   680  020D                     	;# 
   681  0210                     	;# 
   682  0211                     	;# 
   683  0211                     	;# 
   684  0212                     	;# 
   685  0212                     	;# 
   686  0213                     	;# 
   687  0213                     	;# 
   688  0214                     	;# 
   689  0214                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0216                     	;# 
   694  0216                     	;# 
   695  0217                     	;# 
   696  0217                     	;# 
   697  0291                     	;# 
   698  0291                     	;# 
   699  0292                     	;# 
   700  0293                     	;# 
   701  0298                     	;# 
   702  0298                     	;# 
   703  0299                     	;# 
   704  029A                     	;# 
   705  0394                     	;# 
   706  0395                     	;# 
   707  0396                     	;# 
   708  0FE4                     	;# 
   709  0FE5                     	;# 
   710  0FE6                     	;# 
   711  0FE7                     	;# 
   712  0FE8                     	;# 
   713  0FE9                     	;# 
   714  0FEA                     	;# 
   715  0FEB                     	;# 
   716  0FED                     	;# 
   717  0FEE                     	;# 
   718  0FEF                     	;# 
   719  0000                     	;# 
   720  0001                     	;# 
   721  0002                     	;# 
   722  0003                     	;# 
   723  0004                     	;# 
   724  0005                     	;# 
   725  0006                     	;# 
   726  0007                     	;# 
   727  0008                     	;# 
   728  0009                     	;# 
   729  000A                     	;# 
   730  000B                     	;# 
   731  000C                     	;# 
   732  000D                     	;# 
   733  000E                     	;# 
   734  0010                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0015                     	;# 
   738  0016                     	;# 
   739  0016                     	;# 
   740  0017                     	;# 
   741  0018                     	;# 
   742  0019                     	;# 
   743  001A                     	;# 
   744  001B                     	;# 
   745  001C                     	;# 
   746  008C                     	;# 
   747  008D                     	;# 
   748  008E                     	;# 
   749  0090                     	;# 
   750  0091                     	;# 
   751  0092                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0097                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010E                     	;# 
   765  0116                     	;# 
   766  0117                     	;# 
   767  011D                     	;# 
   768  018C                     	;# 
   769  018D                     	;# 
   770  018E                     	;# 
   771  0191                     	;# 
   772  0191                     	;# 
   773  0192                     	;# 
   774  0193                     	;# 
   775  0193                     	;# 
   776  0194                     	;# 
   777  0195                     	;# 
   778  0196                     	;# 
   779  0197                     	;# 
   780  0199                     	;# 
   781  019A                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019C                     	;# 
   787  019C                     	;# 
   788  019D                     	;# 
   789  019E                     	;# 
   790  019F                     	;# 
   791  020D                     	;# 
   792  0210                     	;# 
   793  0211                     	;# 
   794  0211                     	;# 
   795  0212                     	;# 
   796  0212                     	;# 
   797  0213                     	;# 
   798  0213                     	;# 
   799  0214                     	;# 
   800  0214                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0216                     	;# 
   805  0216                     	;# 
   806  0217                     	;# 
   807  0217                     	;# 
   808  0291                     	;# 
   809  0291                     	;# 
   810  0292                     	;# 
   811  0293                     	;# 
   812  0298                     	;# 
   813  0298                     	;# 
   814  0299                     	;# 
   815  029A                     	;# 
   816  0394                     	;# 
   817  0395                     	;# 
   818  0396                     	;# 
   819  0FE4                     	;# 
   820  0FE5                     	;# 
   821  0FE6                     	;# 
   822  0FE7                     	;# 
   823  0FE8                     	;# 
   824  0FE9                     	;# 
   825  0FEA                     	;# 
   826  0FEB                     	;# 
   827  0FED                     	;# 
   828  0FEE                     	;# 
   829  0FEF                     	;# 
   830  0000                     	;# 
   831  0001                     	;# 
   832  0002                     	;# 
   833  0003                     	;# 
   834  0004                     	;# 
   835  0005                     	;# 
   836  0006                     	;# 
   837  0007                     	;# 
   838  0008                     	;# 
   839  0009                     	;# 
   840  000A                     	;# 
   841  000B                     	;# 
   842  000C                     	;# 
   843  000D                     	;# 
   844  000E                     	;# 
   845  0010                     	;# 
   846  0011                     	;# 
   847  0012                     	;# 
   848  0015                     	;# 
   849  0016                     	;# 
   850  0016                     	;# 
   851  0017                     	;# 
   852  0018                     	;# 
   853  0019                     	;# 
   854  001A                     	;# 
   855  001B                     	;# 
   856  001C                     	;# 
   857  008C                     	;# 
   858  008D                     	;# 
   859  008E                     	;# 
   860  0090                     	;# 
   861  0091                     	;# 
   862  0092                     	;# 
   863  0095                     	;# 
   864  0096                     	;# 
   865  0097                     	;# 
   866  0099                     	;# 
   867  009A                     	;# 
   868  009B                     	;# 
   869  009B                     	;# 
   870  009C                     	;# 
   871  009D                     	;# 
   872  009E                     	;# 
   873  010C                     	;# 
   874  010D                     	;# 
   875  010E                     	;# 
   876  0116                     	;# 
   877  0117                     	;# 
   878  011D                     	;# 
   879  018C                     	;# 
   880  018D                     	;# 
   881  018E                     	;# 
   882  0191                     	;# 
   883  0191                     	;# 
   884  0192                     	;# 
   885  0193                     	;# 
   886  0193                     	;# 
   887  0194                     	;# 
   888  0195                     	;# 
   889  0196                     	;# 
   890  0197                     	;# 
   891  0199                     	;# 
   892  019A                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019C                     	;# 
   898  019C                     	;# 
   899  019D                     	;# 
   900  019E                     	;# 
   901  019F                     	;# 
   902  020D                     	;# 
   903  0210                     	;# 
   904  0211                     	;# 
   905  0211                     	;# 
   906  0212                     	;# 
   907  0212                     	;# 
   908  0213                     	;# 
   909  0213                     	;# 
   910  0214                     	;# 
   911  0214                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0216                     	;# 
   916  0216                     	;# 
   917  0217                     	;# 
   918  0217                     	;# 
   919  0291                     	;# 
   920  0291                     	;# 
   921  0292                     	;# 
   922  0293                     	;# 
   923  0298                     	;# 
   924  0298                     	;# 
   925  0299                     	;# 
   926  029A                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0FE4                     	;# 
   931  0FE5                     	;# 
   932  0FE6                     	;# 
   933  0FE7                     	;# 
   934  0FE8                     	;# 
   935  0FE9                     	;# 
   936  0FEA                     	;# 
   937  0FEB                     	;# 
   938  0FED                     	;# 
   939  0FEE                     	;# 
   940  0FEF                     	;# 
   941  0000                     	;# 
   942  0001                     	;# 
   943  0002                     	;# 
   944  0003                     	;# 
   945  0004                     	;# 
   946  0005                     	;# 
   947  0006                     	;# 
   948  0007                     	;# 
   949  0008                     	;# 
   950  0009                     	;# 
   951  000A                     	;# 
   952  000B                     	;# 
   953  000C                     	;# 
   954  000D                     	;# 
   955  000E                     	;# 
   956  0010                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0015                     	;# 
   960  0016                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001C                     	;# 
   968  008C                     	;# 
   969  008D                     	;# 
   970  008E                     	;# 
   971  0090                     	;# 
   972  0091                     	;# 
   973  0092                     	;# 
   974  0095                     	;# 
   975  0096                     	;# 
   976  0097                     	;# 
   977  0099                     	;# 
   978  009A                     	;# 
   979  009B                     	;# 
   980  009B                     	;# 
   981  009C                     	;# 
   982  009D                     	;# 
   983  009E                     	;# 
   984  010C                     	;# 
   985  010D                     	;# 
   986  010E                     	;# 
   987  0116                     	;# 
   988  0117                     	;# 
   989  011D                     	;# 
   990  018C                     	;# 
   991  018D                     	;# 
   992  018E                     	;# 
   993  0191                     	;# 
   994  0191                     	;# 
   995  0192                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0197                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019C                     	;# 
  1009  019C                     	;# 
  1010  019D                     	;# 
  1011  019E                     	;# 
  1012  019F                     	;# 
  1013  020D                     	;# 
  1014  0210                     	;# 
  1015  0211                     	;# 
  1016  0211                     	;# 
  1017  0212                     	;# 
  1018  0212                     	;# 
  1019  0213                     	;# 
  1020  0213                     	;# 
  1021  0214                     	;# 
  1022  0214                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0216                     	;# 
  1027  0216                     	;# 
  1028  0217                     	;# 
  1029  0217                     	;# 
  1030  0291                     	;# 
  1031  0291                     	;# 
  1032  0292                     	;# 
  1033  0293                     	;# 
  1034  0298                     	;# 
  1035  0298                     	;# 
  1036  0299                     	;# 
  1037  029A                     	;# 
  1038  0394                     	;# 
  1039  0395                     	;# 
  1040  0396                     	;# 
  1041  0FE4                     	;# 
  1042  0FE5                     	;# 
  1043  0FE6                     	;# 
  1044  0FE7                     	;# 
  1045  0FE8                     	;# 
  1046  0FE9                     	;# 
  1047  0FEA                     	;# 
  1048  0FEB                     	;# 
  1049  0FED                     	;# 
  1050  0FEE                     	;# 
  1051  0FEF                     	;# 
  1052  0000                     	;# 
  1053  0001                     	;# 
  1054  0002                     	;# 
  1055  0003                     	;# 
  1056  0004                     	;# 
  1057  0005                     	;# 
  1058  0006                     	;# 
  1059  0007                     	;# 
  1060  0008                     	;# 
  1061  0009                     	;# 
  1062  000A                     	;# 
  1063  000B                     	;# 
  1064  000C                     	;# 
  1065  000D                     	;# 
  1066  000E                     	;# 
  1067  0010                     	;# 
  1068  0011                     	;# 
  1069  0012                     	;# 
  1070  0015                     	;# 
  1071  0016                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001C                     	;# 
  1079  008C                     	;# 
  1080  008D                     	;# 
  1081  008E                     	;# 
  1082  0090                     	;# 
  1083  0091                     	;# 
  1084  0092                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0097                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  010C                     	;# 
  1096  010D                     	;# 
  1097  010E                     	;# 
  1098  0116                     	;# 
  1099  0117                     	;# 
  1100  011D                     	;# 
  1101  018C                     	;# 
  1102  018D                     	;# 
  1103  018E                     	;# 
  1104  0191                     	;# 
  1105  0191                     	;# 
  1106  0192                     	;# 
  1107  0193                     	;# 
  1108  0193                     	;# 
  1109  0194                     	;# 
  1110  0195                     	;# 
  1111  0196                     	;# 
  1112  0197                     	;# 
  1113  0199                     	;# 
  1114  019A                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019C                     	;# 
  1120  019C                     	;# 
  1121  019D                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  020D                     	;# 
  1125  0210                     	;# 
  1126  0211                     	;# 
  1127  0211                     	;# 
  1128  0212                     	;# 
  1129  0212                     	;# 
  1130  0213                     	;# 
  1131  0213                     	;# 
  1132  0214                     	;# 
  1133  0214                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0216                     	;# 
  1138  0216                     	;# 
  1139  0217                     	;# 
  1140  0217                     	;# 
  1141  0291                     	;# 
  1142  0291                     	;# 
  1143  0292                     	;# 
  1144  0293                     	;# 
  1145  0298                     	;# 
  1146  0298                     	;# 
  1147  0299                     	;# 
  1148  029A                     	;# 
  1149  0394                     	;# 
  1150  0395                     	;# 
  1151  0396                     	;# 
  1152  0FE4                     	;# 
  1153  0FE5                     	;# 
  1154  0FE6                     	;# 
  1155  0FE7                     	;# 
  1156  0FE8                     	;# 
  1157  0FE9                     	;# 
  1158  0FEA                     	;# 
  1159  0FEB                     	;# 
  1160  0FED                     	;# 
  1161  0FEE                     	;# 
  1162  0FEF                     	;# 
  1163  0000                     	;# 
  1164  0001                     	;# 
  1165  0002                     	;# 
  1166  0003                     	;# 
  1167  0004                     	;# 
  1168  0005                     	;# 
  1169  0006                     	;# 
  1170  0007                     	;# 
  1171  0008                     	;# 
  1172  0009                     	;# 
  1173  000A                     	;# 
  1174  000B                     	;# 
  1175  000C                     	;# 
  1176  000D                     	;# 
  1177  000E                     	;# 
  1178  0010                     	;# 
  1179  0011                     	;# 
  1180  0012                     	;# 
  1181  0015                     	;# 
  1182  0016                     	;# 
  1183  0016                     	;# 
  1184  0017                     	;# 
  1185  0018                     	;# 
  1186  0019                     	;# 
  1187  001A                     	;# 
  1188  001B                     	;# 
  1189  001C                     	;# 
  1190  008C                     	;# 
  1191  008D                     	;# 
  1192  008E                     	;# 
  1193  0090                     	;# 
  1194  0091                     	;# 
  1195  0092                     	;# 
  1196  0095                     	;# 
  1197  0096                     	;# 
  1198  0097                     	;# 
  1199  0099                     	;# 
  1200  009A                     	;# 
  1201  009B                     	;# 
  1202  009B                     	;# 
  1203  009C                     	;# 
  1204  009D                     	;# 
  1205  009E                     	;# 
  1206  010C                     	;# 
  1207  010D                     	;# 
  1208  010E                     	;# 
  1209  0116                     	;# 
  1210  0117                     	;# 
  1211  011D                     	;# 
  1212  018C                     	;# 
  1213  018D                     	;# 
  1214  018E                     	;# 
  1215  0191                     	;# 
  1216  0191                     	;# 
  1217  0192                     	;# 
  1218  0193                     	;# 
  1219  0193                     	;# 
  1220  0194                     	;# 
  1221  0195                     	;# 
  1222  0196                     	;# 
  1223  0197                     	;# 
  1224  0199                     	;# 
  1225  019A                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019C                     	;# 
  1231  019C                     	;# 
  1232  019D                     	;# 
  1233  019E                     	;# 
  1234  019F                     	;# 
  1235  020D                     	;# 
  1236  0210                     	;# 
  1237  0211                     	;# 
  1238  0211                     	;# 
  1239  0212                     	;# 
  1240  0212                     	;# 
  1241  0213                     	;# 
  1242  0213                     	;# 
  1243  0214                     	;# 
  1244  0214                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0216                     	;# 
  1249  0216                     	;# 
  1250  0217                     	;# 
  1251  0217                     	;# 
  1252  0291                     	;# 
  1253  0291                     	;# 
  1254  0292                     	;# 
  1255  0293                     	;# 
  1256  0298                     	;# 
  1257  0298                     	;# 
  1258  0299                     	;# 
  1259  029A                     	;# 
  1260  0394                     	;# 
  1261  0395                     	;# 
  1262  0396                     	;# 
  1263  0FE4                     	;# 
  1264  0FE5                     	;# 
  1265  0FE6                     	;# 
  1266  0FE7                     	;# 
  1267  0FE8                     	;# 
  1268  0FE9                     	;# 
  1269  0FEA                     	;# 
  1270  0FEB                     	;# 
  1271  0FED                     	;# 
  1272  0FEE                     	;# 
  1273  0FEF                     	;# 
  1274  0000                     	;# 
  1275  0001                     	;# 
  1276  0002                     	;# 
  1277  0003                     	;# 
  1278  0004                     	;# 
  1279  0005                     	;# 
  1280  0006                     	;# 
  1281  0007                     	;# 
  1282  0008                     	;# 
  1283  0009                     	;# 
  1284  000A                     	;# 
  1285  000B                     	;# 
  1286  000C                     	;# 
  1287  000D                     	;# 
  1288  000E                     	;# 
  1289  0010                     	;# 
  1290  0011                     	;# 
  1291  0012                     	;# 
  1292  0015                     	;# 
  1293  0016                     	;# 
  1294  0016                     	;# 
  1295  0017                     	;# 
  1296  0018                     	;# 
  1297  0019                     	;# 
  1298  001A                     	;# 
  1299  001B                     	;# 
  1300  001C                     	;# 
  1301  008C                     	;# 
  1302  008D                     	;# 
  1303  008E                     	;# 
  1304  0090                     	;# 
  1305  0091                     	;# 
  1306  0092                     	;# 
  1307  0095                     	;# 
  1308  0096                     	;# 
  1309  0097                     	;# 
  1310  0099                     	;# 
  1311  009A                     	;# 
  1312  009B                     	;# 
  1313  009B                     	;# 
  1314  009C                     	;# 
  1315  009D                     	;# 
  1316  009E                     	;# 
  1317  010C                     	;# 
  1318  010D                     	;# 
  1319  010E                     	;# 
  1320  0116                     	;# 
  1321  0117                     	;# 
  1322  011D                     	;# 
  1323  018C                     	;# 
  1324  018D                     	;# 
  1325  018E                     	;# 
  1326  0191                     	;# 
  1327  0191                     	;# 
  1328  0192                     	;# 
  1329  0193                     	;# 
  1330  0193                     	;# 
  1331  0194                     	;# 
  1332  0195                     	;# 
  1333  0196                     	;# 
  1334  0197                     	;# 
  1335  0199                     	;# 
  1336  019A                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019C                     	;# 
  1342  019C                     	;# 
  1343  019D                     	;# 
  1344  019E                     	;# 
  1345  019F                     	;# 
  1346  020D                     	;# 
  1347  0210                     	;# 
  1348  0211                     	;# 
  1349  0211                     	;# 
  1350  0212                     	;# 
  1351  0212                     	;# 
  1352  0213                     	;# 
  1353  0213                     	;# 
  1354  0214                     	;# 
  1355  0214                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0216                     	;# 
  1360  0216                     	;# 
  1361  0217                     	;# 
  1362  0217                     	;# 
  1363  0291                     	;# 
  1364  0291                     	;# 
  1365  0292                     	;# 
  1366  0293                     	;# 
  1367  0298                     	;# 
  1368  0298                     	;# 
  1369  0299                     	;# 
  1370  029A                     	;# 
  1371  0394                     	;# 
  1372  0395                     	;# 
  1373  0396                     	;# 
  1374  0FE4                     	;# 
  1375  0FE5                     	;# 
  1376  0FE6                     	;# 
  1377  0FE7                     	;# 
  1378  0FE8                     	;# 
  1379  0FE9                     	;# 
  1380  0FEA                     	;# 
  1381  0FEB                     	;# 
  1382  0FED                     	;# 
  1383  0FEE                     	;# 
  1384  0FEF                     	;# 
  1385  0000                     	;# 
  1386  0001                     	;# 
  1387  0002                     	;# 
  1388  0003                     	;# 
  1389  0004                     	;# 
  1390  0005                     	;# 
  1391  0006                     	;# 
  1392  0007                     	;# 
  1393  0008                     	;# 
  1394  0009                     	;# 
  1395  000A                     	;# 
  1396  000B                     	;# 
  1397  000C                     	;# 
  1398  000D                     	;# 
  1399  000E                     	;# 
  1400  0010                     	;# 
  1401  0011                     	;# 
  1402  0012                     	;# 
  1403  0015                     	;# 
  1404  0016                     	;# 
  1405  0016                     	;# 
  1406  0017                     	;# 
  1407  0018                     	;# 
  1408  0019                     	;# 
  1409  001A                     	;# 
  1410  001B                     	;# 
  1411  001C                     	;# 
  1412  008C                     	;# 
  1413  008D                     	;# 
  1414  008E                     	;# 
  1415  0090                     	;# 
  1416  0091                     	;# 
  1417  0092                     	;# 
  1418  0095                     	;# 
  1419  0096                     	;# 
  1420  0097                     	;# 
  1421  0099                     	;# 
  1422  009A                     	;# 
  1423  009B                     	;# 
  1424  009B                     	;# 
  1425  009C                     	;# 
  1426  009D                     	;# 
  1427  009E                     	;# 
  1428  010C                     	;# 
  1429  010D                     	;# 
  1430  010E                     	;# 
  1431  0116                     	;# 
  1432  0117                     	;# 
  1433  011D                     	;# 
  1434  018C                     	;# 
  1435  018D                     	;# 
  1436  018E                     	;# 
  1437  0191                     	;# 
  1438  0191                     	;# 
  1439  0192                     	;# 
  1440  0193                     	;# 
  1441  0193                     	;# 
  1442  0194                     	;# 
  1443  0195                     	;# 
  1444  0196                     	;# 
  1445  0197                     	;# 
  1446  0199                     	;# 
  1447  019A                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019C                     	;# 
  1453  019C                     	;# 
  1454  019D                     	;# 
  1455  019E                     	;# 
  1456  019F                     	;# 
  1457  020D                     	;# 
  1458  0210                     	;# 
  1459  0211                     	;# 
  1460  0211                     	;# 
  1461  0212                     	;# 
  1462  0212                     	;# 
  1463  0213                     	;# 
  1464  0213                     	;# 
  1465  0214                     	;# 
  1466  0214                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0216                     	;# 
  1471  0216                     	;# 
  1472  0217                     	;# 
  1473  0217                     	;# 
  1474  0291                     	;# 
  1475  0291                     	;# 
  1476  0292                     	;# 
  1477  0293                     	;# 
  1478  0298                     	;# 
  1479  0298                     	;# 
  1480  0299                     	;# 
  1481  029A                     	;# 
  1482  0394                     	;# 
  1483  0395                     	;# 
  1484  0396                     	;# 
  1485  0FE4                     	;# 
  1486  0FE5                     	;# 
  1487  0FE6                     	;# 
  1488  0FE7                     	;# 
  1489  0FE8                     	;# 
  1490  0FE9                     	;# 
  1491  0FEA                     	;# 
  1492  0FEB                     	;# 
  1493  0FED                     	;# 
  1494  0FEE                     	;# 
  1495  0FEF                     	;# 
  1496  0000                     	;# 
  1497  0001                     	;# 
  1498  0002                     	;# 
  1499  0003                     	;# 
  1500  0004                     	;# 
  1501  0005                     	;# 
  1502  0006                     	;# 
  1503  0007                     	;# 
  1504  0008                     	;# 
  1505  0009                     	;# 
  1506  000A                     	;# 
  1507  000B                     	;# 
  1508  000C                     	;# 
  1509  000D                     	;# 
  1510  000E                     	;# 
  1511  0010                     	;# 
  1512  0011                     	;# 
  1513  0012                     	;# 
  1514  0015                     	;# 
  1515  0016                     	;# 
  1516  0016                     	;# 
  1517  0017                     	;# 
  1518  0018                     	;# 
  1519  0019                     	;# 
  1520  001A                     	;# 
  1521  001B                     	;# 
  1522  001C                     	;# 
  1523  008C                     	;# 
  1524  008D                     	;# 
  1525  008E                     	;# 
  1526  0090                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0095                     	;# 
  1530  0096                     	;# 
  1531  0097                     	;# 
  1532  0099                     	;# 
  1533  009A                     	;# 
  1534  009B                     	;# 
  1535  009B                     	;# 
  1536  009C                     	;# 
  1537  009D                     	;# 
  1538  009E                     	;# 
  1539  010C                     	;# 
  1540  010D                     	;# 
  1541  010E                     	;# 
  1542  0116                     	;# 
  1543  0117                     	;# 
  1544  011D                     	;# 
  1545  018C                     	;# 
  1546  018D                     	;# 
  1547  018E                     	;# 
  1548  0191                     	;# 
  1549  0191                     	;# 
  1550  0192                     	;# 
  1551  0193                     	;# 
  1552  0193                     	;# 
  1553  0194                     	;# 
  1554  0195                     	;# 
  1555  0196                     	;# 
  1556  0197                     	;# 
  1557  0199                     	;# 
  1558  019A                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  020D                     	;# 
  1569  0210                     	;# 
  1570  0211                     	;# 
  1571  0211                     	;# 
  1572  0212                     	;# 
  1573  0212                     	;# 
  1574  0213                     	;# 
  1575  0213                     	;# 
  1576  0214                     	;# 
  1577  0214                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0216                     	;# 
  1582  0216                     	;# 
  1583  0217                     	;# 
  1584  0217                     	;# 
  1585  0291                     	;# 
  1586  0291                     	;# 
  1587  0292                     	;# 
  1588  0293                     	;# 
  1589  0298                     	;# 
  1590  0298                     	;# 
  1591  0299                     	;# 
  1592  029A                     	;# 
  1593  0394                     	;# 
  1594  0395                     	;# 
  1595  0396                     	;# 
  1596  0FE4                     	;# 
  1597  0FE5                     	;# 
  1598  0FE6                     	;# 
  1599  0FE7                     	;# 
  1600  0FE8                     	;# 
  1601  0FE9                     	;# 
  1602  0FEA                     	;# 
  1603  0FEB                     	;# 
  1604  0FED                     	;# 
  1605  0FEE                     	;# 
  1606  0FEF                     	;# 
  1607  0000                     	;# 
  1608  0001                     	;# 
  1609  0002                     	;# 
  1610  0003                     	;# 
  1611  0004                     	;# 
  1612  0005                     	;# 
  1613  0006                     	;# 
  1614  0007                     	;# 
  1615  0008                     	;# 
  1616  0009                     	;# 
  1617  000A                     	;# 
  1618  000B                     	;# 
  1619  000C                     	;# 
  1620  000D                     	;# 
  1621  000E                     	;# 
  1622  0010                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0015                     	;# 
  1626  0016                     	;# 
  1627  0016                     	;# 
  1628  0017                     	;# 
  1629  0018                     	;# 
  1630  0019                     	;# 
  1631  001A                     	;# 
  1632  001B                     	;# 
  1633  001C                     	;# 
  1634  008C                     	;# 
  1635  008D                     	;# 
  1636  008E                     	;# 
  1637  0090                     	;# 
  1638  0091                     	;# 
  1639  0092                     	;# 
  1640  0095                     	;# 
  1641  0096                     	;# 
  1642  0097                     	;# 
  1643  0099                     	;# 
  1644  009A                     	;# 
  1645  009B                     	;# 
  1646  009B                     	;# 
  1647  009C                     	;# 
  1648  009D                     	;# 
  1649  009E                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  0116                     	;# 
  1654  0117                     	;# 
  1655  011D                     	;# 
  1656  018C                     	;# 
  1657  018D                     	;# 
  1658  018E                     	;# 
  1659  0191                     	;# 
  1660  0191                     	;# 
  1661  0192                     	;# 
  1662  0193                     	;# 
  1663  0193                     	;# 
  1664  0194                     	;# 
  1665  0195                     	;# 
  1666  0196                     	;# 
  1667  0197                     	;# 
  1668  0199                     	;# 
  1669  019A                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019C                     	;# 
  1675  019C                     	;# 
  1676  019D                     	;# 
  1677  019E                     	;# 
  1678  019F                     	;# 
  1679  020D                     	;# 
  1680  0210                     	;# 
  1681  0211                     	;# 
  1682  0211                     	;# 
  1683  0212                     	;# 
  1684  0212                     	;# 
  1685  0213                     	;# 
  1686  0213                     	;# 
  1687  0214                     	;# 
  1688  0214                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0216                     	;# 
  1693  0216                     	;# 
  1694  0217                     	;# 
  1695  0217                     	;# 
  1696  0291                     	;# 
  1697  0291                     	;# 
  1698  0292                     	;# 
  1699  0293                     	;# 
  1700  0298                     	;# 
  1701  0298                     	;# 
  1702  0299                     	;# 
  1703  029A                     	;# 
  1704  0394                     	;# 
  1705  0395                     	;# 
  1706  0396                     	;# 
  1707  0FE4                     	;# 
  1708  0FE5                     	;# 
  1709  0FE6                     	;# 
  1710  0FE7                     	;# 
  1711  0FE8                     	;# 
  1712  0FE9                     	;# 
  1713  0FEA                     	;# 
  1714  0FEB                     	;# 
  1715  0FED                     	;# 
  1716  0FEE                     	;# 
  1717  0FEF                     	;# 
  1718  0000                     	;# 
  1719  0001                     	;# 
  1720  0002                     	;# 
  1721  0003                     	;# 
  1722  0004                     	;# 
  1723  0005                     	;# 
  1724  0006                     	;# 
  1725  0007                     	;# 
  1726  0008                     	;# 
  1727  0009                     	;# 
  1728  000A                     	;# 
  1729  000B                     	;# 
  1730  000C                     	;# 
  1731  000D                     	;# 
  1732  000E                     	;# 
  1733  0010                     	;# 
  1734  0011                     	;# 
  1735  0012                     	;# 
  1736  0015                     	;# 
  1737  0016                     	;# 
  1738  0016                     	;# 
  1739  0017                     	;# 
  1740  0018                     	;# 
  1741  0019                     	;# 
  1742  001A                     	;# 
  1743  001B                     	;# 
  1744  001C                     	;# 
  1745  008C                     	;# 
  1746  008D                     	;# 
  1747  008E                     	;# 
  1748  0090                     	;# 
  1749  0091                     	;# 
  1750  0092                     	;# 
  1751  0095                     	;# 
  1752  0096                     	;# 
  1753  0097                     	;# 
  1754  0099                     	;# 
  1755  009A                     	;# 
  1756  009B                     	;# 
  1757  009B                     	;# 
  1758  009C                     	;# 
  1759  009D                     	;# 
  1760  009E                     	;# 
  1761  010C                     	;# 
  1762  010D                     	;# 
  1763  010E                     	;# 
  1764  0116                     	;# 
  1765  0117                     	;# 
  1766  011D                     	;# 
  1767  018C                     	;# 
  1768  018D                     	;# 
  1769  018E                     	;# 
  1770  0191                     	;# 
  1771  0191                     	;# 
  1772  0192                     	;# 
  1773  0193                     	;# 
  1774  0193                     	;# 
  1775  0194                     	;# 
  1776  0195                     	;# 
  1777  0196                     	;# 
  1778  0197                     	;# 
  1779  0199                     	;# 
  1780  019A                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019C                     	;# 
  1786  019C                     	;# 
  1787  019D                     	;# 
  1788  019E                     	;# 
  1789  019F                     	;# 
  1790  020D                     	;# 
  1791  0210                     	;# 
  1792  0211                     	;# 
  1793  0211                     	;# 
  1794  0212                     	;# 
  1795  0212                     	;# 
  1796  0213                     	;# 
  1797  0213                     	;# 
  1798  0214                     	;# 
  1799  0214                     	;# 
  1800  0215                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0216                     	;# 
  1804  0216                     	;# 
  1805  0217                     	;# 
  1806  0217                     	;# 
  1807  0291                     	;# 
  1808  0291                     	;# 
  1809  0292                     	;# 
  1810  0293                     	;# 
  1811  0298                     	;# 
  1812  0298                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  0394                     	;# 
  1816  0395                     	;# 
  1817  0396                     	;# 
  1818  0FE4                     	;# 
  1819  0FE5                     	;# 
  1820  0FE6                     	;# 
  1821  0FE7                     	;# 
  1822  0FE8                     	;# 
  1823  0FE9                     	;# 
  1824  0FEA                     	;# 
  1825  0FEB                     	;# 
  1826  0FED                     	;# 
  1827  0FEE                     	;# 
  1828  0FEF                     	;# 
  1829  0000                     	;# 
  1830  0001                     	;# 
  1831  0002                     	;# 
  1832  0003                     	;# 
  1833  0004                     	;# 
  1834  0005                     	;# 
  1835  0006                     	;# 
  1836  0007                     	;# 
  1837  0008                     	;# 
  1838  0009                     	;# 
  1839  000A                     	;# 
  1840  000B                     	;# 
  1841  000C                     	;# 
  1842  000D                     	;# 
  1843  000E                     	;# 
  1844  0010                     	;# 
  1845  0011                     	;# 
  1846  0012                     	;# 
  1847  0015                     	;# 
  1848  0016                     	;# 
  1849  0016                     	;# 
  1850  0017                     	;# 
  1851  0018                     	;# 
  1852  0019                     	;# 
  1853  001A                     	;# 
  1854  001B                     	;# 
  1855  001C                     	;# 
  1856  008C                     	;# 
  1857  008D                     	;# 
  1858  008E                     	;# 
  1859  0090                     	;# 
  1860  0091                     	;# 
  1861  0092                     	;# 
  1862  0095                     	;# 
  1863  0096                     	;# 
  1864  0097                     	;# 
  1865  0099                     	;# 
  1866  009A                     	;# 
  1867  009B                     	;# 
  1868  009B                     	;# 
  1869  009C                     	;# 
  1870  009D                     	;# 
  1871  009E                     	;# 
  1872  010C                     	;# 
  1873  010D                     	;# 
  1874  010E                     	;# 
  1875  0116                     	;# 
  1876  0117                     	;# 
  1877  011D                     	;# 
  1878  018C                     	;# 
  1879  018D                     	;# 
  1880  018E                     	;# 
  1881  0191                     	;# 
  1882  0191                     	;# 
  1883  0192                     	;# 
  1884  0193                     	;# 
  1885  0193                     	;# 
  1886  0194                     	;# 
  1887  0195                     	;# 
  1888  0196                     	;# 
  1889  0197                     	;# 
  1890  0199                     	;# 
  1891  019A                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019C                     	;# 
  1897  019C                     	;# 
  1898  019D                     	;# 
  1899  019E                     	;# 
  1900  019F                     	;# 
  1901  020D                     	;# 
  1902  0210                     	;# 
  1903  0211                     	;# 
  1904  0211                     	;# 
  1905  0212                     	;# 
  1906  0212                     	;# 
  1907  0213                     	;# 
  1908  0213                     	;# 
  1909  0214                     	;# 
  1910  0214                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0216                     	;# 
  1915  0216                     	;# 
  1916  0217                     	;# 
  1917  0217                     	;# 
  1918  0291                     	;# 
  1919  0291                     	;# 
  1920  0292                     	;# 
  1921  0293                     	;# 
  1922  0298                     	;# 
  1923  0298                     	;# 
  1924  0299                     	;# 
  1925  029A                     	;# 
  1926  0394                     	;# 
  1927  0395                     	;# 
  1928  0396                     	;# 
  1929  0FE4                     	;# 
  1930  0FE5                     	;# 
  1931  0FE6                     	;# 
  1932  0FE7                     	;# 
  1933  0FE8                     	;# 
  1934  0FE9                     	;# 
  1935  0FEA                     	;# 
  1936  0FEB                     	;# 
  1937  0FED                     	;# 
  1938  0FEE                     	;# 
  1939  0FEF                     	;# 
  1940  0000                     	;# 
  1941  0001                     	;# 
  1942  0002                     	;# 
  1943  0003                     	;# 
  1944  0004                     	;# 
  1945  0005                     	;# 
  1946  0006                     	;# 
  1947  0007                     	;# 
  1948  0008                     	;# 
  1949  0009                     	;# 
  1950  000A                     	;# 
  1951  000B                     	;# 
  1952  000C                     	;# 
  1953  000D                     	;# 
  1954  000E                     	;# 
  1955  0010                     	;# 
  1956  0011                     	;# 
  1957  0012                     	;# 
  1958  0015                     	;# 
  1959  0016                     	;# 
  1960  0016                     	;# 
  1961  0017                     	;# 
  1962  0018                     	;# 
  1963  0019                     	;# 
  1964  001A                     	;# 
  1965  001B                     	;# 
  1966  001C                     	;# 
  1967  008C                     	;# 
  1968  008D                     	;# 
  1969  008E                     	;# 
  1970  0090                     	;# 
  1971  0091                     	;# 
  1972  0092                     	;# 
  1973  0095                     	;# 
  1974  0096                     	;# 
  1975  0097                     	;# 
  1976  0099                     	;# 
  1977  009A                     	;# 
  1978  009B                     	;# 
  1979  009B                     	;# 
  1980  009C                     	;# 
  1981  009D                     	;# 
  1982  009E                     	;# 
  1983  010C                     	;# 
  1984  010D                     	;# 
  1985  010E                     	;# 
  1986  0116                     	;# 
  1987  0117                     	;# 
  1988  011D                     	;# 
  1989  018C                     	;# 
  1990  018D                     	;# 
  1991  018E                     	;# 
  1992  0191                     	;# 
  1993  0191                     	;# 
  1994  0192                     	;# 
  1995  0193                     	;# 
  1996  0193                     	;# 
  1997  0194                     	;# 
  1998  0195                     	;# 
  1999  0196                     	;# 
  2000  0197                     	;# 
  2001  0199                     	;# 
  2002  019A                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019C                     	;# 
  2008  019C                     	;# 
  2009  019D                     	;# 
  2010  019E                     	;# 
  2011  019F                     	;# 
  2012  020D                     	;# 
  2013  0210                     	;# 
  2014  0211                     	;# 
  2015  0211                     	;# 
  2016  0212                     	;# 
  2017  0212                     	;# 
  2018  0213                     	;# 
  2019  0213                     	;# 
  2020  0214                     	;# 
  2021  0214                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0216                     	;# 
  2026  0216                     	;# 
  2027  0217                     	;# 
  2028  0217                     	;# 
  2029  0291                     	;# 
  2030  0291                     	;# 
  2031  0292                     	;# 
  2032  0293                     	;# 
  2033  0298                     	;# 
  2034  0298                     	;# 
  2035  0299                     	;# 
  2036  029A                     	;# 
  2037  0394                     	;# 
  2038  0395                     	;# 
  2039  0396                     	;# 
  2040  0FE4                     	;# 
  2041  0FE5                     	;# 
  2042  0FE6                     	;# 
  2043  0FE7                     	;# 
  2044  0FE8                     	;# 
  2045  0FE9                     	;# 
  2046  0FEA                     	;# 
  2047  0FEB                     	;# 
  2048  0FED                     	;# 
  2049  0FEE                     	;# 
  2050  0FEF                     	;# 
  2051                           
  2052                           	psect	idataBANK4
  2053  1E68                     __pidataBANK4:	
  2054                           
  2055                           ;initializer for __product
  2056  1E68  3463               	retlw	99
  2057  1E69  3402               	retlw	2
  2058  1E6A  3400               	retlw	0
  2059  1E6B  3400               	retlw	0
  2060  1E6C  3400               	retlw	0
  2061  1E6D  3400               	retlw	0
  2062  1E6E  3400               	retlw	0
  2063  1E6F  3400               	retlw	0
  2064  1E70  3400               	retlw	0
  2065  1E71  3400               	retlw	0
  2066  1E72  3400               	retlw	0
  2067  1E73  3400               	retlw	0
  2068  1E74  34FF               	retlw	255
  2069  1E75  34FF               	retlw	255
  2070  1E76  34FF               	retlw	255
  2071  1E77  3400               	retlw	0
  2072  1E78  3400               	retlw	0
  2073  1E79  3400               	retlw	0
  2074  1E7A  3400               	retlw	0
  2075  1E7B  3400               	retlw	0
  2076  1E7C  3400               	retlw	0
  2077  1E7D  3400               	retlw	0
  2078  1E7E  3400               	retlw	0
  2079  1E7F  3400               	retlw	0
  2080  1E80  3400               	retlw	0
  2081  1E81  3400               	retlw	0
  2082  1E82  3400               	retlw	0
  2083  1E83  3400               	retlw	0
  2084  1E84  3400               	retlw	0
  2085  1E85  3400               	retlw	0
  2086  1E86  3400               	retlw	0
  2087  1E87  3400               	retlw	0
  2088                           
  2089                           	psect	stringtext
  2090  1000                     __pstringtext:	
  2091  1000                     _CC2500_registers_address:	
  2092  1000  3403               	retlw	3
  2093  1001  3416               	retlw	22
  2094  1002  3417               	retlw	23
  2095  1003  341E               	retlw	30
  2096  1004  341F               	retlw	31
  2097  1005  3420               	retlw	32
  2098  1006  342A               	retlw	42
  2099  1007  342B               	retlw	43
  2100  1008  340B               	retlw	11
  2101  1009  340C               	retlw	12
  2102  100A  340D               	retlw	13
  2103  100B  340E               	retlw	14
  2104  100C  340F               	retlw	15
  2105  100D  3410               	retlw	16
  2106  100E  3411               	retlw	17
  2107  100F  3412               	retlw	18
  2108  1010  3413               	retlw	19
  2109  1011  3414               	retlw	20
  2110  1012  340A               	retlw	10
  2111  1013  3415               	retlw	21
  2112  1014  3421               	retlw	33
  2113  1015  3422               	retlw	34
  2114  1016  3418               	retlw	24
  2115  1017  3419               	retlw	25
  2116  1018  341A               	retlw	26
  2117  1019  341B               	retlw	27
  2118  101A  341C               	retlw	28
  2119  101B  341D               	retlw	29
  2120  101C  3423               	retlw	35
  2121  101D  3424               	retlw	36
  2122  101E  3425               	retlw	37
  2123  101F  3426               	retlw	38
  2124  1020  3429               	retlw	41
  2125  1021  342C               	retlw	44
  2126  1022  342D               	retlw	45
  2127  1023  342E               	retlw	46
  2128  1024  3400               	retlw	0
  2129  1025  3401               	retlw	1
  2130  1026  3402               	retlw	2
  2131  1027  3407               	retlw	7
  2132  1028  3408               	retlw	8
  2133  1029  3409               	retlw	9
  2134  102A  3406               	retlw	6
  2135  102B  3404               	retlw	4
  2136  102C  3405               	retlw	5
  2137  102D  3427               	retlw	39
  2138  102E  3428               	retlw	40
  2139  102F                     __end_of_CC2500_registers_address:	
  2140  102F                     _CC2500_rfSettings:	
  2141  102F  3407               	retlw	7
  2142  1030  3407               	retlw	7
  2143  1031  3430               	retlw	48
  2144  1032  3487               	retlw	135
  2145  1033  346B               	retlw	107
  2146  1034  34F8               	retlw	248
  2147  1035  347F               	retlw	127
  2148  1036  343F               	retlw	63
  2149  1037  3409               	retlw	9
  2150  1038  3400               	retlw	0
  2151  1039  345C               	retlw	92
  2152  103A  34A7               	retlw	167
  2153  103B  3462               	retlw	98
  2154  103C  3486               	retlw	134
  2155  103D  3483               	retlw	131
  2156  103E  3403               	retlw	3
  2157  103F  3422               	retlw	34
  2158  1040  34F8               	retlw	248
  2159  1041  3400               	retlw	0
  2160  1042  3444               	retlw	68
  2161  1043  34B6               	retlw	182
  2162  1044  3410               	retlw	16
  2163  1045  3418               	retlw	24
  2164  1046  341D               	retlw	29
  2165  1047  341C               	retlw	28
  2166  1048  34C7               	retlw	199
  2167  1049  3400               	retlw	0
  2168  104A  34B2               	retlw	178
  2169  104B  34EA               	retlw	234
  2170  104C  340A               	retlw	10
  2171  104D  3400               	retlw	0
  2172  104E  3411               	retlw	17
  2173  104F  3459               	retlw	89
  2174  1050  3488               	retlw	136
  2175  1051  3431               	retlw	49
  2176  1052  340B               	retlw	11
  2177  1053  342F               	retlw	47
  2178  1054  342E               	retlw	46
  2179  1055  3406               	retlw	6
  2180  1056  3404               	retlw	4
  2181  1057  3405               	retlw	5
  2182  1058  3400               	retlw	0
  2183  1059  3430               	retlw	48
  2184  105A  34D3               	retlw	211
  2185  105B  3491               	retlw	145
  2186  105C  3441               	retlw	65
  2187  105D  3400               	retlw	0
  2188  105E                     __end_of_CC2500_rfSettings:	
  2189  105E                     _CC2500_patable_vaule:	
  2190  105E  34FE               	retlw	254
  2191  105F  34FE               	retlw	254
  2192  1060  34FE               	retlw	254
  2193  1061  34FE               	retlw	254
  2194  1062  34FE               	retlw	254
  2195  1063  34FE               	retlw	254
  2196  1064  34FE               	retlw	254
  2197  1065  34FE               	retlw	254
  2198  1066                     __end_of_CC2500_patable_vaule:	
  2199                           
  2200                           	psect	nvBANK0
  2201  006D                     __pnvBANK0:	
  2202  006D                     _product:	
  2203  006D                     	ds	1
  2204  000C                     _PORTA	set	12
  2205  000D                     _PORTB	set	13
  2206  000E                     _PORTC	set	14
  2207  0018                     _T1CON	set	24
  2208  0017                     _TMR1H	set	23
  2209  0016                     _TMR1L	set	22
  2210  005F                     _GIE	set	95
  2211  005B                     _IOCIE	set	91
  2212  0058                     _IOCIF	set	88
  2213  005E                     _PEIE	set	94
  2214  0060                     _RA0	set	96
  2215  0063                     _RA3	set	99
  2216  0064                     _RA4	set	100
  2217  0066                     _RA6	set	102
  2218  0067                     _RA7	set	103
  2219  0068                     _RB0	set	104
  2220  0069                     _RB1	set	105
  2221  006A                     _RB2	set	106
  2222  006B                     _RB3	set	107
  2223  006C                     _RB4	set	108
  2224  006D                     _RB5	set	109
  2225  0070                     _RC0	set	112
  2226  0071                     _RC1	set	113
  2227  0072                     _RC2	set	114
  2228  0074                     _RC4	set	116
  2229  0075                     _RC5	set	117
  2230  0077                     _RC7	set	119
  2231  0088                     _TMR1IF	set	136
  2232  009D                     _ADCON0	set	157
  2233  009E                     _ADCON1	set	158
  2234  009C                     _ADRESH	set	156
  2235  009B                     _ADRESL	set	155
  2236  0099                     _OSCCON	set	153
  2237  008C                     _TRISA	set	140
  2238  008D                     _TRISB	set	141
  2239  008E                     _TRISC	set	142
  2240  0097                     _WDTCON	set	151
  2241  04E9                     _GO_nDONE	set	1257
  2242  0488                     _TMR1IE	set	1160
  2243  0117                     _FVRCON	set	279
  2244  010C                     _LATA	set	268
  2245  010D                     _LATB	set	269
  2246  010E                     _LATC	set	270
  2247  018C                     _ANSELA	set	396
  2248  018D                     _ANSELB	set	397
  2249  018E                     _ANSELC	set	398
  2250  0192                     _PMADRH	set	402
  2251  0191                     _PMADRL	set	401
  2252  0196                     _PMCON2	set	406
  2253  0194                     _PMDATH	set	404
  2254  0193                     _PMDATL	set	403
  2255  0CAE                     _CFGS	set	3246
  2256  0CAC                     _FREE	set	3244
  2257  0CAD                     _LWLO	set	3245
  2258  0CA8                     _RD	set	3240
  2259  0CA9                     _WR	set	3241
  2260  0CAA                     _WREN	set	3242
  2261  1069                     _WPUB1	set	4201
  2262  106A                     _WPUB2	set	4202
  2263  0396                     _IOCBF	set	918
  2264  0395                     _IOCBN	set	917
  2265  0394                     _IOCBP	set	916
  2266  1CB2                     _IOCBF2	set	7346
  2267                           
  2268                           ; #config settings
  2269  0000                     
  2270                           	psect	cinit
  2271  0015                     start_initialization:	
  2272  0015                     __initialization:	
  2273                           
  2274                           ; Clear objects allocated to BITCOMMON
  2275  0015  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2276                           
  2277                           ; Clear objects allocated to COMMON
  2278  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2279  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2280  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2281  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2282  001A  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2283                           
  2284                           ; Clear objects allocated to BANK0
  2285  001B  01EA               	clrf	__pbssBANK0& (0+127)
  2286  001C  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  2287  001D  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  2288                           
  2289                           ; Clear objects allocated to BANK1
  2290  001E  30A0               	movlw	low __pbssBANK1
  2291  001F  0084               	movwf	4
  2292  0020  3000               	movlw	high __pbssBANK1
  2293  0021  0085               	movwf	5
  2294  0022  3050               	movlw	80
  2295  0023  319A  220C  3180   	fcall	clear_ram0
  2296                           
  2297                           ; Clear objects allocated to BANK2
  2298  0026  3020               	movlw	low __pbssBANK2
  2299  0027  0084               	movwf	4
  2300  0028  3001               	movlw	high __pbssBANK2
  2301  0029  0085               	movwf	5
  2302  002A  304B               	movlw	75
  2303  002B  319A  220C  3180   	fcall	clear_ram0
  2304                           
  2305                           ; Clear objects allocated to BANK3
  2306  002E  30A0               	movlw	low __pbssBANK3
  2307  002F  0084               	movwf	4
  2308  0030  3001               	movlw	high __pbssBANK3
  2309  0031  0085               	movwf	5
  2310  0032  304F               	movlw	79
  2311  0033  319A  220C  3180   	fcall	clear_ram0
  2312                           
  2313                           ; Clear objects allocated to BANK4
  2314  0036  3020               	movlw	low __pbssBANK4
  2315  0037  0084               	movwf	4
  2316  0038  3002               	movlw	high __pbssBANK4
  2317  0039  0085               	movwf	5
  2318  003A  3025               	movlw	37
  2319  003B  319A  220C  3180   	fcall	clear_ram0
  2320                           
  2321                           ; Initialize objects allocated to BANK4
  2322  003E  3068               	movlw	low __pidataBANK4
  2323  003F  0084               	movwf	4
  2324  0040  309E               	movlw	(high __pidataBANK4)| (0+128)
  2325  0041  0085               	movwf	5
  2326  0042  3045               	movlw	low __pdataBANK4
  2327  0043  0086               	movwf	6
  2328  0044  3002               	movlw	high __pdataBANK4
  2329  0045  0087               	movwf	7
  2330  0046  3020               	movlw	32
  2331  0047  319A  2206         	fcall	init_ram
  2332  0049                     end_of_initialization:	
  2333                           ;End of C runtime variable initialization code
  2334                           
  2335  0049                     __end_of__initialization:	
  2336  0049  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2337  004A  0020               	movlb	0
  2338  004B  3195  2D13         	ljmp	_main	;jump to C main() function
  2339                           
  2340                           	psect	bitbssCOMMON
  2341  03D8                     __pbitbssCOMMON:	
  2342  03D8                     _Receive_OK:	
  2343  03D8                     	ds	1
  2344  03D9                     _Transceive_OK:	
  2345  03D9                     	ds	1
  2346                           
  2347                           	psect	bssCOMMON
  2348  0076                     __pbssCOMMON:	
  2349  0076                     _Dimmer:	
  2350  0076                     	ds	1
  2351  0077                     _DimmerLightsIntr:	
  2352  0077                     	ds	1
  2353  0078                     _LED:	
  2354  0078                     	ds	1
  2355  0079                     _RFSW:	
  2356  0079                     	ds	1
  2357  007A                     _SPI0Buffer:	
  2358  007A                     	ds	1
  2359                           
  2360                           	psect	bssBANK0
  2361  006A                     __pbssBANK0:	
  2362  006A                     _DelayOff:	
  2363  006A                     	ds	1
  2364  006B                     _DimmerLights:	
  2365  006B                     	ds	1
  2366  006C                     _Sw:	
  2367  006C                     	ds	1
  2368                           
  2369                           	psect	bssBANK1
  2370  00A0                     __pbssBANK1:	
  2371  00A0                     _myMain:	
  2372  00A0                     	ds	19
  2373  00B3                     _Buz1:	
  2374  00B3                     	ds	12
  2375  00BF                     _RF1:	
  2376  00BF                     	ds	12
  2377  00CB                     _Timer1:	
  2378  00CB                     	ds	3
  2379  00CE                     _RF_Count:	
  2380  00CE                     	ds	2
  2381  00D0                     _WDT:	
  2382  00D0                     	ds	2
  2383  00D2                     _CRC:	
  2384  00D2                     	ds	1
  2385  00D3                     _DimmerLights11:	
  2386  00D3                     	ds	1
  2387  00D4                     _DimmerLights22:	
  2388  00D4                     	ds	1
  2389  00D5                     _DimmerLightsIntrIOC:	
  2390  00D5                     	ds	1
  2391  00D6                     _RSSI:	
  2392  00D6                     	ds	1
  2393  00D7                     _Rx_Length:	
  2394  00D7                     	ds	1
  2395  00D8                     _Tx_Length:	
  2396  00D8                     	ds	1
  2397  00D9                     _r_address:	
  2398  00D9                     	ds	1
  2399  00DA                     _r_data:	
  2400  00DA                     	ds	1
  2401  00DB                     _s_data:	
  2402  00DB                     	ds	1
  2403  00DC                     _Temp1:	
  2404  00DC                     	ds	14
  2405  00EA                     _DlySw1:	
  2406  00EA                     	ds	2
  2407  00EC                     _DlySw2:	
  2408  00EC                     	ds	2
  2409  00EE                     _RFSW1:	
  2410  00EE                     	ds	1
  2411  00EF                     _RFSW2:	
  2412  00EF                     	ds	1
  2413                           
  2414                           	psect	bssBANK2
  2415  0120                     __pbssBANK2:	
  2416  0120                     _RF_Data:	
  2417  0120                     	ds	21
  2418  0135                     _DimmerLights1:	
  2419  0135                     	ds	15
  2420  0144                     _DimmerLights2:	
  2421  0144                     	ds	15
  2422  0153                     _Sw1:	
  2423  0153                     	ds	9
  2424  015C                     _VarErrLED:	
  2425  015C                     	ds	4
  2426  0160                     _VarLED1:	
  2427  0160                     	ds	4
  2428  0164                     _VarLED2:	
  2429  0164                     	ds	4
  2430  0168                     _Dimmer1:	
  2431  0168                     	ds	3
  2432                           
  2433                           	psect	bssBANK3
  2434  01A0                     __pbssBANK3:	
  2435  01A0                     _Load1:	
  2436  01A0                     	ds	70
  2437  01E6                     _Sw2:	
  2438  01E6                     	ds	9
  2439                           
  2440                           	psect	bssBANK4
  2441  0220                     __pbssBANK4:	
  2442  0220                     _Memory:	
  2443  0220                     	ds	37
  2444                           
  2445                           	psect	dataBANK4
  2446  0245                     __pdataBANK4:	
  2447  0245                     __product:	
  2448  0245                     	ds	32
  2449                           
  2450                           	psect	clrtext
  2451  1A0C                     clear_ram0:	
  2452                           ;	Called with FSR0 containing the base address, and
  2453                           ;	WREG with the size to clear
  2454                           
  2455  1A0C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2456  1A0D                     clrloop0:	
  2457  1A0D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2458  1A0E  3101               	addfsr 0,1
  2459  1A0F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2460  1A10  2A0D               	goto	clrloop0	;have we reached the end yet?
  2461  1A11  3400               	retlw	0	;all done for this memory range, return
  2462                           
  2463                           	psect	inittext
  2464  1A06                     init_ram:	
  2465  1A06  00FE               	movwf	126
  2466  1A07                     initloop:	
  2467  1A07  0012               	moviw fsr0++
  2468  1A08  001E               	movwi fsr1++
  2469  1A09  0BFE               	decfsz	126,f
  2470  1A0A  2A07               	goto	initloop
  2471  1A0B  3400               	retlw	0
  2472                           
  2473                           	psect	cstackBANK2
  2474  016B                     __pcstackBANK2:	
  2475  016B                     ?_main:	
  2476  016B                     main@argc:	
  2477                           ; 2 bytes @ 0x0
  2478                           
  2479                           
  2480                           ; 2 bytes @ 0x0
  2481  016B                     	ds	2
  2482  016D                     main@argv:	
  2483                           
  2484                           ; 2 bytes @ 0x2
  2485  016D                     	ds	2
  2486                           
  2487                           	psect	cstackCOMMON
  2488  0070                     __pcstackCOMMON:	
  2489  0070                     ?_Timeout_Counter:	
  2490  0070                     ?_set_TimeoutCleared:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_CC2500_WriteByte:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_CC2500_WriteCommand:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_CC2500_ReadStatus:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_CC2500_ReadByte:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_CC2500_PowerRST:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_CC2500_InitSetREG:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_CC2500_InitPATable:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_CC2500_ClearTXFIFO:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_CC2500_ClearRXFIFO:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_CC2500_FrequencyCabr:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_CC2500_SIDLEMode:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_DlyOff_Initialization:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_DlyOff_Main:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_setTxData:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_setDimmerLights_Initialization:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_Dimmer_Initialization:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_setLoad_GO:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_setMemory_GO:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_setDimmerLights_Main:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_setDimmerLights_ERROR:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_setLoad_Count:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_setLED_Initialization:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_setLED_Main:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_Fosc_Set:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_IO_Set:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_TMR1_Set:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_ADC_Set:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_IOC_Set:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_WDT_Set:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_IOC_ISR:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_TMR1_ISR:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_Flash_Memory_Write:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_Flash_Memory_Modify:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_WDT_Clearing:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_myMain_Initialization:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_Temp_Initialization:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_Load_Initialization:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_Switch_Initialization:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_RF_Initialization:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_getLoad_AD:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_getTemp_AD:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_my_MainTime:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_Temp_Main:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_Load_Main:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_Switch_Main:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_RF_Main:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setTemp_Enable:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setLoad_Enable:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_setSw_Enable:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setRF_Enable:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setLoad_AH_AL_Restore:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setLoad_Exceptions:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setTemp_Initialization:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setTemp_Main:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setOverTemp_Exceptions:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setRF_Initialization:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_setRF_Main:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_getRxData:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setLog_Code:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setControl_Lights_Table:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_setRFSW_Control:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_setRFSW_AdjControl:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_setRF_DimmerValue:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setSw_Initialization:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_setSw_Main:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_Sw_DimmerOnFunc:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_Sw_DimmerAdjFunc:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_Sw_DimmerOffFunc:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_Buzzer_Initialization:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Buzzer_Main:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_CC2500_TxData:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_CC2500_RxData:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_CC2500_PowerOnInitial:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_DelayOffPointSelect:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_DelayOff_Initialization:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_DelayOff_Main:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_DimmerIntrIOCPointSelect:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ??_DimmerIntrIOCPointSelect:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_DimmerIntrPointSelect:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ??_DimmerIntrPointSelect:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_setDimmerLights_IntrControl:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_DimmerLightsPointSelect:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_DimmerLights_Initialization:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_DimmerLights_Close:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_DimmerLights_Main:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_DimmerLights_Exceptions:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setDimmerLights_AdjRF:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_LedPointSelect:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_LED_Initialization:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_LED_Main:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_Mcu_Initialization:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_ISR:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setDimmerReClock:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_Flash_Memory_Initialization:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_Flash_Memory_Main:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_Flash_Memory_Unlock:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_Flash_Memory_Erasing:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_WDT_Main:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_setRF_Learn:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_RfSWPointSelect:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_TouchPower:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_SwPointSelect:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?i1_setLoad_StatusOff:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_DelayTimejudge:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_getDimmerLights_StatusFlag:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ?_getPercentValue:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ?_Flash_Memory_Read:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0070                     ?_getTemp_Safe:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0070                     ?_setPercentValue:	
  2821                           ; 1 bytes @ 0x0
  2822                           
  2823  0070                     ?_getLoad_Safe:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826  0070                     i1setLoad_StatusOff@command:	
  2827                           ; 1 bytes @ 0x0
  2828                           
  2829                           
  2830                           ; 1 bytes @ 0x0
  2831  0070                     	ds	1
  2832  0071                     ??i1_setLoad_StatusOff:	
  2833  0071                     DimmerIntrIOCPointSelect@lights:	
  2834                           ; 0 bytes @ 0x1
  2835                           
  2836  0071                     DimmerIntrPointSelect@lights:	
  2837                           ; 1 bytes @ 0x1
  2838                           
  2839  0071                     i1setLoad_StatusOff@lights:	
  2840                           ; 1 bytes @ 0x1
  2841                           
  2842                           
  2843                           ; 1 bytes @ 0x1
  2844  0071                     	ds	1
  2845  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2846  0072                     ??_setDimmerLights_IntrControl:	
  2847                           ; 0 bytes @ 0x2
  2848                           
  2849  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2850                           ; 0 bytes @ 0x2
  2851                           
  2852                           
  2853                           ; 1 bytes @ 0x2
  2854  0072                     	ds	1
  2855  0073                     ??_IOC_ISR:	
  2856  0073                     ??_setDimmerReClock:	
  2857                           ; 0 bytes @ 0x3
  2858                           
  2859                           
  2860                           ; 0 bytes @ 0x3
  2861  0073                     	ds	1
  2862  0074                     setDimmerLights_IntrControl@lights:	
  2863                           
  2864                           ; 1 bytes @ 0x4
  2865  0074                     	ds	1
  2866  0075                     ??_TMR1_ISR:	
  2867  0075                     ??_ISR:	
  2868                           ; 0 bytes @ 0x5
  2869                           
  2870                           
  2871                           ; 0 bytes @ 0x5
  2872  0075                     	ds	1
  2873                           
  2874                           	psect	cstackBANK0
  2875  0020                     __pcstackBANK0:	
  2876  0020                     ??_Timeout_Counter:	
  2877  0020                     ??_set_TimeoutCleared:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_CC2500_WriteByte:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_CC2500_ReadByte:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ?_DelayTime_1us:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_setTxData:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ?_setLoad_StatusOff:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_Dimmer_Initialization:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_getDimmerLights_StatusFlag:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_setLoad_GO:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_setMemory_GO:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_setLoad_Count:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ?_setLoad_StatusOn:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_Fosc_Set:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_IO_Set:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ??_TMR1_Set:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ??_ADC_Set:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_IOC_Set:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ??_WDT_Set:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ??_Flash_Memory_Read:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0020                     ??_Flash_Memory_Write:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0020                     ??_WDT_Clearing:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0020                     ??_myMain_Initialization:	
  2941                           ; 0 bytes @ 0x0
  2942                           
  2943  0020                     ??_Temp_Initialization:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0020                     ??_setTemp_Enable:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0020                     ??_setLoad_Enable:	
  2950                           ; 0 bytes @ 0x0
  2951                           
  2952  0020                     ??_setRF_Enable:	
  2953                           ; 0 bytes @ 0x0
  2954                           
  2955  0020                     ??_setLoad_AH_AL_Restore:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0020                     ??_getTemp_Safe:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0020                     ??_setTemp_Initialization:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0020                     ??_setRF_Initialization:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0020                     ??_Buzzer_Initialization:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_Buzzer_Main:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_DelayOffPointSelect:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_DimmerLightsPointSelect:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_LedPointSelect:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_Flash_Memory_Unlock:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_Flash_Memory_Erasing:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ??_WDT_Main:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ??_getLoad_Safe:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_setRF_Learn:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ??_RfSWPointSelect:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_TouchPower:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_SwPointSelect:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ?___bmul:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ?_getBuz_GO:	
  3010                           ; 1 bytes @ 0x0
  3011                           
  3012  0020                     ?_getAD:	
  3013                           ; 2 bytes @ 0x0
  3014                           
  3015  0020                     ?___wmul:	
  3016                           ; 2 bytes @ 0x0
  3017                           
  3018  0020                     ?___awdiv:	
  3019                           ; 2 bytes @ 0x0
  3020                           
  3021  0020                     ?___lwdiv:	
  3022                           ; 2 bytes @ 0x0
  3023                           
  3024  0020                     ?___ftpack:	
  3025                           ; 2 bytes @ 0x0
  3026                           
  3027  0020                     getAD@adcon1:	
  3028                           ; 3 bytes @ 0x0
  3029                           
  3030  0020                     setLoad_Enable@command:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033  0020                     setLoad_GO@command:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036  0020                     setLoad_StatusOn@command:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039  0020                     setLoad_StatusOff@command:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042  0020                     getLoad_Safe@result:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045  0020                     setTemp_Enable@command:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048  0020                     getTemp_Safe@result:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051  0020                     setRF_Learn@command:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054  0020                     setRF_Enable@command:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057  0020                     ___bmul@multiplicand:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060  0020                     DelayTime_1us@count:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063  0020                     ___wmul@multiplier:	
  3064                           ; 2 bytes @ 0x0
  3065                           
  3066  0020                     ___awdiv@divisor:	
  3067                           ; 2 bytes @ 0x0
  3068                           
  3069  0020                     ___lwdiv@divisor:	
  3070                           ; 2 bytes @ 0x0
  3071                           
  3072  0020                     ___ftpack@arg:	
  3073                           ; 2 bytes @ 0x0
  3074                           
  3075                           
  3076                           ; 3 bytes @ 0x0
  3077  0020                     	ds	1
  3078  0021                     ??_setLoad_StatusOff:	
  3079  0021                     ??_setLoad_StatusOn:	
  3080                           ; 0 bytes @ 0x1
  3081                           
  3082  0021                     ??_RF_Initialization:	
  3083                           ; 0 bytes @ 0x1
  3084                           
  3085  0021                     ??_Mcu_Initialization:	
  3086                           ; 0 bytes @ 0x1
  3087                           
  3088  0021                     ??___bmul:	
  3089                           ; 0 bytes @ 0x1
  3090                           
  3091  0021                     CC2500_WriteByte@loop_a:	
  3092                           ; 0 bytes @ 0x1
  3093                           
  3094  0021                     CC2500_ReadByte@loop_b:	
  3095                           ; 1 bytes @ 0x1
  3096                           
  3097  0021                     DelayOffPointSelect@sw:	
  3098                           ; 1 bytes @ 0x1
  3099                           
  3100  0021                     DimmerLightsPointSelect@lights:	
  3101                           ; 1 bytes @ 0x1
  3102                           
  3103  0021                     getDimmerLights_StatusFlag@Status:	
  3104                           ; 1 bytes @ 0x1
  3105                           
  3106  0021                     LedPointSelect@led:	
  3107                           ; 1 bytes @ 0x1
  3108                           
  3109  0021                     Flash_Memory_Read@i:	
  3110                           ; 1 bytes @ 0x1
  3111                           
  3112  0021                     Flash_Memory_Write@i:	
  3113                           ; 1 bytes @ 0x1
  3114                           
  3115  0021                     setLoad_Count@command:	
  3116                           ; 1 bytes @ 0x1
  3117                           
  3118  0021                     setLoad_StatusOn@lights:	
  3119                           ; 1 bytes @ 0x1
  3120                           
  3121  0021                     setLoad_StatusOff@lights:	
  3122                           ; 1 bytes @ 0x1
  3123                           
  3124  0021                     setLoad_AH_AL_Restore@i:	
  3125                           ; 1 bytes @ 0x1
  3126                           
  3127  0021                     RfSWPointSelect@sw:	
  3128                           ; 1 bytes @ 0x1
  3129                           
  3130  0021                     SwPointSelect@sw:	
  3131                           ; 1 bytes @ 0x1
  3132                           
  3133                           
  3134                           ; 1 bytes @ 0x1
  3135  0021                     	ds	1
  3136  0022                     ??_CC2500_WriteCommand:	
  3137  0022                     ??_CC2500_ReadStatus:	
  3138                           ; 0 bytes @ 0x2
  3139                           
  3140  0022                     ??_DelayTime_1us:	
  3141                           ; 0 bytes @ 0x2
  3142                           
  3143  0022                     ?_CC2500_WriteREG:	
  3144                           ; 0 bytes @ 0x2
  3145                           
  3146  0022                     ??_DlyOff_Initialization:	
  3147                           ; 0 bytes @ 0x2
  3148                           
  3149  0022                     ?_setSw_Status:	
  3150                           ; 0 bytes @ 0x2
  3151                           
  3152  0022                     ?_setRFSW_Status:	
  3153                           ; 0 bytes @ 0x2
  3154                           
  3155  0022                     ?_setDimmerLights_Trigger:	
  3156                           ; 0 bytes @ 0x2
  3157                           
  3158  0022                     ?_setDimmerLights_Switch:	
  3159                           ; 0 bytes @ 0x2
  3160                           
  3161  0022                     ??_setDimmerLights_Initialization:	
  3162                           ; 0 bytes @ 0x2
  3163                           
  3164  0022                     ?_setDimmerLights_TriggerERROR:	
  3165                           ; 0 bytes @ 0x2
  3166                           
  3167  0022                     ?_setLED:	
  3168                           ; 0 bytes @ 0x2
  3169                           
  3170  0022                     ??_setLED_Main:	
  3171                           ; 0 bytes @ 0x2
  3172                           
  3173  0022                     ??_Load_Initialization:	
  3174                           ; 0 bytes @ 0x2
  3175                           
  3176  0022                     ??_setSw_Enable:	
  3177                           ; 0 bytes @ 0x2
  3178                           
  3179  0022                     ??_getBuz_GO:	
  3180                           ; 0 bytes @ 0x2
  3181                           
  3182  0022                     ?_setDimmerLights_AdjGo:	
  3183                           ; 0 bytes @ 0x2
  3184                           
  3185  0022                     ?_setDimmerLights_TriggerAdj:	
  3186                           ; 0 bytes @ 0x2
  3187                           
  3188  0022                     ?_setDimmerLights_Clear:	
  3189                           ; 0 bytes @ 0x2
  3190                           
  3191  0022                     CC2500_WriteREG@value:	
  3192                           ; 0 bytes @ 0x2
  3193                           
  3194  0022                     DlyOff_Initialization@sw:	
  3195                           ; 1 bytes @ 0x2
  3196                           
  3197  0022                     _getDimmerLights_StatusFlag$2618:	
  3198                           ; 1 bytes @ 0x2
  3199                           
  3200  0022                     setDimmerLights_TriggerERROR@command:	
  3201                           ; 1 bytes @ 0x2
  3202                           
  3203  0022                     setDimmerLights_Switch@command:	
  3204                           ; 1 bytes @ 0x2
  3205                           
  3206  0022                     setDimmerLights_AdjGo@command:	
  3207                           ; 1 bytes @ 0x2
  3208                           
  3209  0022                     setDimmerLights_Trigger@command:	
  3210                           ; 1 bytes @ 0x2
  3211                           
  3212  0022                     setDimmerLights_TriggerAdj@command:	
  3213                           ; 1 bytes @ 0x2
  3214                           
  3215  0022                     setDimmerLights_Clear@command:	
  3216                           ; 1 bytes @ 0x2
  3217                           
  3218  0022                     setLED@command:	
  3219                           ; 1 bytes @ 0x2
  3220                           
  3221  0022                     Flash_Memory_Read@address:	
  3222                           ; 1 bytes @ 0x2
  3223                           
  3224  0022                     setMemory_GO@command:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227  0022                     setRFSW_Status@command:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230  0022                     setSw_Enable@command:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233  0022                     setSw_Status@command:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236  0022                     ___bmul@product:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239  0022                     DelayTime_1us@i:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242  0022                     ___wmul@multiplicand:	
  3243                           ; 2 bytes @ 0x2
  3244                           
  3245  0022                     ___awdiv@dividend:	
  3246                           ; 2 bytes @ 0x2
  3247                           
  3248  0022                     ___lwdiv@dividend:	
  3249                           ; 2 bytes @ 0x2
  3250                           
  3251                           
  3252                           ; 2 bytes @ 0x2
  3253  0022                     	ds	1
  3254  0023                     ??_CC2500_WriteREG:	
  3255  0023                     ??_setSw_Status:	
  3256                           ; 0 bytes @ 0x3
  3257                           
  3258  0023                     ??_setRFSW_Status:	
  3259                           ; 0 bytes @ 0x3
  3260                           
  3261  0023                     ??_setDimmerLights_Trigger:	
  3262                           ; 0 bytes @ 0x3
  3263                           
  3264  0023                     ??_setDimmerLights_Switch:	
  3265                           ; 0 bytes @ 0x3
  3266                           
  3267  0023                     ??_setDimmerLights_TriggerERROR:	
  3268                           ; 0 bytes @ 0x3
  3269                           
  3270  0023                     ??_setLED:	
  3271                           ; 0 bytes @ 0x3
  3272                           
  3273  0023                     ??_DelayOff_Initialization:	
  3274                           ; 0 bytes @ 0x3
  3275                           
  3276  0023                     ??_DimmerLights_Close:	
  3277                           ; 0 bytes @ 0x3
  3278                           
  3279  0023                     ??_setDimmerLights_AdjGo:	
  3280                           ; 0 bytes @ 0x3
  3281                           
  3282  0023                     ??_setDimmerLights_TriggerAdj:	
  3283                           ; 0 bytes @ 0x3
  3284                           
  3285  0023                     ??_setDimmerLights_Clear:	
  3286                           ; 0 bytes @ 0x3
  3287                           
  3288  0023                     ??_getAD:	
  3289                           ; 0 bytes @ 0x3
  3290                           
  3291  0023                     CC2500_WriteCommand@command:	
  3292                           ; 0 bytes @ 0x3
  3293                           
  3294  0023                     CC2500_ReadStatus@status_addr:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297  0023                     setDimmerLights_Initialization@lights:	
  3298                           ; 1 bytes @ 0x3
  3299                           
  3300  0023                     setDimmerLights_TriggerERROR@lights:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303  0023                     setDimmerLights_Switch@lights:	
  3304                           ; 1 bytes @ 0x3
  3305                           
  3306  0023                     setDimmerLights_AdjGo@lights:	
  3307                           ; 1 bytes @ 0x3
  3308                           
  3309  0023                     setDimmerLights_Trigger@lights:	
  3310                           ; 1 bytes @ 0x3
  3311                           
  3312  0023                     setDimmerLights_TriggerAdj@lights:	
  3313                           ; 1 bytes @ 0x3
  3314                           
  3315  0023                     setDimmerLights_Clear@lights:	
  3316                           ; 1 bytes @ 0x3
  3317                           
  3318  0023                     setLED@led:	
  3319                           ; 1 bytes @ 0x3
  3320                           
  3321  0023                     getAD@adcon0:	
  3322                           ; 1 bytes @ 0x3
  3323                           
  3324  0023                     Flash_Memory_Read@ret:	
  3325                           ; 1 bytes @ 0x3
  3326                           
  3327  0023                     setRFSW_Status@sw:	
  3328                           ; 1 bytes @ 0x3
  3329                           
  3330  0023                     setSw_Status@sw:	
  3331                           ; 1 bytes @ 0x3
  3332                           
  3333  0023                     ___bmul@multiplier:	
  3334                           ; 1 bytes @ 0x3
  3335                           
  3336  0023                     ___ftpack@exp:	
  3337                           ; 1 bytes @ 0x3
  3338                           
  3339                           
  3340                           ; 1 bytes @ 0x3
  3341  0023                     	ds	1
  3342  0024                     ??_CC2500_ClearTXFIFO:	
  3343  0024                     ??_CC2500_ClearRXFIFO:	
  3344                           ; 0 bytes @ 0x4
  3345                           
  3346  0024                     ??_CC2500_SIDLEMode:	
  3347                           ; 0 bytes @ 0x4
  3348                           
  3349  0024                     ??_DelayTimejudge:	
  3350                           ; 0 bytes @ 0x4
  3351                           
  3352  0024                     ?_setDimmerLights:	
  3353                           ; 0 bytes @ 0x4
  3354                           
  3355  0024                     ??_setDimmerLights_ERROR:	
  3356                           ; 0 bytes @ 0x4
  3357                           
  3358  0024                     ??_setLED_Initialization:	
  3359                           ; 0 bytes @ 0x4
  3360                           
  3361  0024                     ??_Flash_Memory_Modify:	
  3362                           ; 0 bytes @ 0x4
  3363                           
  3364  0024                     ??_getLoad_AD:	
  3365                           ; 0 bytes @ 0x4
  3366                           
  3367  0024                     ??_getTemp_AD:	
  3368                           ; 0 bytes @ 0x4
  3369                           
  3370  0024                     ??_setSw_Initialization:	
  3371                           ; 0 bytes @ 0x4
  3372                           
  3373  0024                     ??_Sw_DimmerAdjFunc:	
  3374                           ; 0 bytes @ 0x4
  3375                           
  3376  0024                     ??_CC2500_TxData:	
  3377                           ; 0 bytes @ 0x4
  3378                           
  3379  0024                     ??_CC2500_RxData:	
  3380                           ; 0 bytes @ 0x4
  3381                           
  3382  0024                     ??_DimmerLights_Initialization:	
  3383                           ; 0 bytes @ 0x4
  3384                           
  3385  0024                     ??___wmul:	
  3386                           ; 0 bytes @ 0x4
  3387                           
  3388  0024                     ??___awdiv:	
  3389                           ; 0 bytes @ 0x4
  3390                           
  3391  0024                     ??___lwdiv:	
  3392                           ; 0 bytes @ 0x4
  3393                           
  3394  0024                     CC2500_WriteREG@w_addr:	
  3395                           ; 0 bytes @ 0x4
  3396                           
  3397  0024                     setDimmerLights@status:	
  3398                           ; 1 bytes @ 0x4
  3399                           
  3400  0024                     setLED_Initialization@led:	
  3401                           ; 1 bytes @ 0x4
  3402                           
  3403  0024                     setLED_Main@led:	
  3404                           ; 1 bytes @ 0x4
  3405                           
  3406  0024                     setSw_Initialization@sw:	
  3407                           ; 1 bytes @ 0x4
  3408                           
  3409  0024                     Sw_DimmerAdjFunc@Idle:	
  3410                           ; 1 bytes @ 0x4
  3411                           
  3412  0024                     ___ftpack@sign:	
  3413                           ; 1 bytes @ 0x4
  3414                           
  3415  0024                     getBuz_GO@i:	
  3416                           ; 1 bytes @ 0x4
  3417                           
  3418  0024                     DelayTime_1us@j:	
  3419                           ; 2 bytes @ 0x4
  3420                           
  3421  0024                     ___wmul@product:	
  3422                           ; 2 bytes @ 0x4
  3423                           
  3424                           
  3425                           ; 2 bytes @ 0x4
  3426  0024                     	ds	1
  3427  0025                     ??_CC2500_InitSetREG:	
  3428  0025                     ??_CC2500_InitPATable:	
  3429                           ; 0 bytes @ 0x5
  3430                           
  3431  0025                     ??_setDimmerLights:	
  3432                           ; 0 bytes @ 0x5
  3433                           
  3434  0025                     ??_Switch_Initialization:	
  3435                           ; 0 bytes @ 0x5
  3436                           
  3437  0025                     ??___ftpack:	
  3438                           ; 0 bytes @ 0x5
  3439                           
  3440  0025                     ??_LED_Initialization:	
  3441                           ; 0 bytes @ 0x5
  3442                           
  3443  0025                     ??_LED_Main:	
  3444                           ; 0 bytes @ 0x5
  3445                           
  3446  0025                     CC2500_TxData@loop_e:	
  3447                           ; 0 bytes @ 0x5
  3448                           
  3449  0025                     CC2500_RxData@loop_f:	
  3450                           ; 1 bytes @ 0x5
  3451                           
  3452  0025                     setDimmerLights_ERROR@lights:	
  3453                           ; 1 bytes @ 0x5
  3454                           
  3455  0025                     Flash_Memory_Modify@i:	
  3456                           ; 1 bytes @ 0x5
  3457                           
  3458  0025                     getTemp_AD@channel:	
  3459                           ; 1 bytes @ 0x5
  3460                           
  3461  0025                     Sw_DimmerAdjFunc@sw:	
  3462                           ; 1 bytes @ 0x5
  3463                           
  3464  0025                     ___awdiv@counter:	
  3465                           ; 1 bytes @ 0x5
  3466                           
  3467  0025                     ___lwdiv@counter:	
  3468                           ; 1 bytes @ 0x5
  3469                           
  3470                           
  3471                           ; 1 bytes @ 0x5
  3472  0025                     	ds	1
  3473  0026                     ??_CC2500_PowerRST:	
  3474  0026                     ??_CC2500_FrequencyCabr:	
  3475                           ; 0 bytes @ 0x6
  3476                           
  3477  0026                     ??_Flash_Memory_Main:	
  3478                           ; 0 bytes @ 0x6
  3479                           
  3480  0026                     CC2500_InitSetREG@temp1:	
  3481                           ; 0 bytes @ 0x6
  3482                           
  3483  0026                     CC2500_InitPATable@temp:	
  3484                           ; 1 bytes @ 0x6
  3485                           
  3486  0026                     DelayTimejudge@i:	
  3487                           ; 1 bytes @ 0x6
  3488                           
  3489  0026                     setDimmerLights@lights:	
  3490                           ; 1 bytes @ 0x6
  3491                           
  3492  0026                     getLoad_AD@channel:	
  3493                           ; 1 bytes @ 0x6
  3494                           
  3495  0026                     ___awdiv@sign:	
  3496                           ; 1 bytes @ 0x6
  3497                           
  3498  0026                     ___lwdiv@quotient:	
  3499                           ; 1 bytes @ 0x6
  3500                           
  3501                           
  3502                           ; 2 bytes @ 0x6
  3503  0026                     	ds	1
  3504  0027                     CC2500_InitSetREG@temp2:	
  3505  0027                     CC2500_InitPATable@loop_d:	
  3506                           ; 1 bytes @ 0x7
  3507                           
  3508  0027                     DelayTimejudge@j:	
  3509                           ; 1 bytes @ 0x7
  3510                           
  3511  0027                     getLoad_AD@j:	
  3512                           ; 1 bytes @ 0x7
  3513                           
  3514  0027                     ___awdiv@quotient:	
  3515                           ; 1 bytes @ 0x7
  3516                           
  3517                           
  3518                           ; 2 bytes @ 0x7
  3519  0027                     	ds	1
  3520  0028                     ?___awtoft:	
  3521  0028                     CC2500_InitSetREG@loop_c:	
  3522                           ; 3 bytes @ 0x8
  3523                           
  3524  0028                     DelayTimejudge@k:	
  3525                           ; 1 bytes @ 0x8
  3526                           
  3527  0028                     getLoad_AD@i:	
  3528                           ; 1 bytes @ 0x8
  3529                           
  3530  0028                     ___awtoft@c:	
  3531                           ; 1 bytes @ 0x8
  3532                           
  3533                           
  3534                           ; 2 bytes @ 0x8
  3535  0028                     	ds	1
  3536  0029                     ?_setBuz:	
  3537  0029                     ??_CC2500_PowerOnInitial:	
  3538                           ; 0 bytes @ 0x9
  3539                           
  3540  0029                     DelayTimejudge@value:	
  3541                           ; 0 bytes @ 0x9
  3542                           
  3543  0029                     setBuz@time:	
  3544                           ; 1 bytes @ 0x9
  3545                           
  3546                           
  3547                           ; 2 bytes @ 0x9
  3548  0029                     	ds	1
  3549  002A                     ?_setDelayOff_GO:	
  3550  002A                     setDelayOff_GO@command:	
  3551                           ; 0 bytes @ 0xA
  3552                           
  3553                           
  3554                           ; 1 bytes @ 0xA
  3555  002A                     	ds	1
  3556  002B                     ??_setBuz:	
  3557  002B                     ??___awtoft:	
  3558                           ; 0 bytes @ 0xB
  3559                           
  3560  002B                     setDelayOff_GO@value:	
  3561                           ; 0 bytes @ 0xB
  3562                           
  3563                           
  3564                           ; 1 bytes @ 0xB
  3565  002B                     	ds	1
  3566  002C                     ??_setDelayOff_GO:	
  3567  002C                     setBuz@count:	
  3568                           ; 0 bytes @ 0xC
  3569                           
  3570                           
  3571                           ; 1 bytes @ 0xC
  3572  002C                     	ds	1
  3573  002D                     ??_my_MainTime:	
  3574  002D                     ??_setLog_Code:	
  3575                           ; 0 bytes @ 0xD
  3576                           
  3577  002D                     ??_DimmerLights_Exceptions:	
  3578                           ; 0 bytes @ 0xD
  3579                           
  3580  002D                     DimmerLights_Exceptions@status:	
  3581                           ; 0 bytes @ 0xD
  3582                           
  3583  002D                     ___awtoft@sign:	
  3584                           ; 1 bytes @ 0xD
  3585                           
  3586                           
  3587                           ; 1 bytes @ 0xD
  3588  002D                     	ds	1
  3589  002E                     ??_setLoad_Exceptions:	
  3590  002E                     ??_setOverTemp_Exceptions:	
  3591                           ; 0 bytes @ 0xE
  3592                           
  3593  002E                     ?___ftdiv:	
  3594                           ; 0 bytes @ 0xE
  3595                           
  3596  002E                     ?___ftmul:	
  3597                           ; 3 bytes @ 0xE
  3598                           
  3599  002E                     setDelayOff_GO@sw:	
  3600                           ; 3 bytes @ 0xE
  3601                           
  3602  002E                     ___ftdiv@f2:	
  3603                           ; 1 bytes @ 0xE
  3604                           
  3605  002E                     ___ftmul@f1:	
  3606                           ; 3 bytes @ 0xE
  3607                           
  3608                           
  3609                           ; 3 bytes @ 0xE
  3610  002E                     	ds	1
  3611  002F                     setLoad_Exceptions@i:	
  3612  002F                     setOverTemp_Exceptions@i:	
  3613                           ; 1 bytes @ 0xF
  3614                           
  3615                           
  3616                           ; 1 bytes @ 0xF
  3617  002F                     	ds	1
  3618  0030                     setLoad_Exceptions@command:	
  3619  0030                     setOverTemp_Exceptions@command:	
  3620                           ; 1 bytes @ 0x10
  3621                           
  3622                           
  3623                           ; 1 bytes @ 0x10
  3624  0030                     	ds	1
  3625  0031                     ??_Load_Main:	
  3626  0031                     ??_setTemp_Main:	
  3627                           ; 0 bytes @ 0x11
  3628                           
  3629  0031                     ___ftdiv@f1:	
  3630                           ; 0 bytes @ 0x11
  3631                           
  3632  0031                     ___ftmul@f2:	
  3633                           ; 3 bytes @ 0x11
  3634                           
  3635                           
  3636                           ; 3 bytes @ 0x11
  3637  0031                     	ds	1
  3638  0032                     ??_Temp_Main:	
  3639                           
  3640                           ; 0 bytes @ 0x12
  3641  0032                     	ds	1
  3642  0033                     Load_Main@i:	
  3643                           
  3644                           ; 1 bytes @ 0x13
  3645  0033                     	ds	1
  3646  0034                     ??___ftdiv:	
  3647  0034                     ??___ftmul:	
  3648                           ; 0 bytes @ 0x14
  3649                           
  3650                           
  3651                           ; 0 bytes @ 0x14
  3652  0034                     	ds	4
  3653  0038                     ___ftdiv@cntr:	
  3654  0038                     ___ftmul@exp:	
  3655                           ; 1 bytes @ 0x18
  3656                           
  3657                           
  3658                           ; 1 bytes @ 0x18
  3659  0038                     	ds	1
  3660  0039                     ___ftdiv@f3:	
  3661  0039                     ___ftmul@f3_as_product:	
  3662                           ; 3 bytes @ 0x19
  3663                           
  3664                           
  3665                           ; 3 bytes @ 0x19
  3666  0039                     	ds	3
  3667  003C                     ___ftdiv@exp:	
  3668  003C                     ___ftmul@cntr:	
  3669                           ; 1 bytes @ 0x1C
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0x1C
  3673  003C                     	ds	1
  3674  003D                     ___ftdiv@sign:	
  3675  003D                     ___ftmul@sign:	
  3676                           ; 1 bytes @ 0x1D
  3677                           
  3678                           
  3679                           ; 1 bytes @ 0x1D
  3680  003D                     	ds	1
  3681  003E                     ?___ftadd:	
  3682  003E                     ___ftadd@f1:	
  3683                           ; 3 bytes @ 0x1E
  3684                           
  3685                           
  3686                           ; 3 bytes @ 0x1E
  3687  003E                     	ds	3
  3688  0041                     ___ftadd@f2:	
  3689                           
  3690                           ; 3 bytes @ 0x21
  3691  0041                     	ds	3
  3692  0044                     ??___ftadd:	
  3693                           
  3694                           ; 0 bytes @ 0x24
  3695  0044                     	ds	4
  3696  0048                     ___ftadd@sign:	
  3697                           
  3698                           ; 1 bytes @ 0x28
  3699  0048                     	ds	1
  3700  0049                     ___ftadd@exp2:	
  3701                           
  3702                           ; 1 bytes @ 0x29
  3703  0049                     	ds	1
  3704  004A                     ___ftadd@exp1:	
  3705                           
  3706                           ; 1 bytes @ 0x2A
  3707  004A                     	ds	1
  3708  004B                     ?___fttol:	
  3709  004B                     ___fttol@f1:	
  3710                           ; 4 bytes @ 0x2B
  3711                           
  3712                           
  3713                           ; 3 bytes @ 0x2B
  3714  004B                     	ds	4
  3715  004F                     ??___fttol:	
  3716                           
  3717                           ; 0 bytes @ 0x2F
  3718  004F                     	ds	4
  3719  0053                     ___fttol@sign1:	
  3720                           
  3721                           ; 1 bytes @ 0x33
  3722  0053                     	ds	1
  3723  0054                     ___fttol@lval:	
  3724                           
  3725                           ; 4 bytes @ 0x34
  3726  0054                     	ds	4
  3727  0058                     ___fttol@exp1:	
  3728                           
  3729                           ; 1 bytes @ 0x38
  3730  0058                     	ds	1
  3731  0059                     ??_getPercentValue:	
  3732  0059                     ??_setPercentValue:	
  3733                           ; 0 bytes @ 0x39
  3734                           
  3735  0059                     setPercentValue@value:	
  3736                           ; 0 bytes @ 0x39
  3737                           
  3738                           
  3739                           ; 1 bytes @ 0x39
  3740  0059                     	ds	1
  3741  005A                     setPercentValue@i:	
  3742                           
  3743                           ; 3 bytes @ 0x3A
  3744  005A                     	ds	1
  3745  005B                     getPercentValue@value:	
  3746                           
  3747                           ; 1 bytes @ 0x3B
  3748  005B                     	ds	1
  3749  005C                     getPercentValue@i:	
  3750                           
  3751                           ; 3 bytes @ 0x3C
  3752  005C                     	ds	1
  3753  005D                     ?_setRF_DimmerLights:	
  3754  005D                     ??_Flash_Memory_Initialization:	
  3755                           ; 0 bytes @ 0x3D
  3756                           
  3757  005D                     setRF_DimmerLights@on:	
  3758                           ; 0 bytes @ 0x3D
  3759                           
  3760                           
  3761                           ; 1 bytes @ 0x3D
  3762  005D                     	ds	1
  3763  005E                     ??_setRF_DimmerLights:	
  3764  005E                     Flash_Memory_Initialization@i:	
  3765                           ; 0 bytes @ 0x3E
  3766                           
  3767                           
  3768                           ; 1 bytes @ 0x3E
  3769  005E                     	ds	1
  3770  005F                     ??_setDimmerLights_AdjRF:	
  3771                           
  3772                           ; 0 bytes @ 0x3F
  3773  005F                     	ds	1
  3774  0060                     setDimmerLights_AdjRF@lights:	
  3775  0060                     setRF_DimmerLights@status:	
  3776                           ; 1 bytes @ 0x40
  3777                           
  3778                           
  3779                           ; 1 bytes @ 0x40
  3780  0060                     	ds	1
  3781  0061                     ??_setRF_DimmerValue:	
  3782  0061                     setRF_DimmerLights@lights:	
  3783                           ; 0 bytes @ 0x41
  3784                           
  3785                           
  3786                           ; 1 bytes @ 0x41
  3787  0061                     	ds	1
  3788  0062                     ??_DlyOff_Main:	
  3789  0062                     ?_setDimmerLights_Adj:	
  3790                           ; 0 bytes @ 0x42
  3791                           
  3792  0062                     ??_setRFSW_Control:	
  3793                           ; 0 bytes @ 0x42
  3794                           
  3795  0062                     ??_Sw_DimmerOnFunc:	
  3796                           ; 0 bytes @ 0x42
  3797                           
  3798  0062                     ??_Sw_DimmerOffFunc:	
  3799                           ; 0 bytes @ 0x42
  3800                           
  3801  0062                     setDimmerLights_Adj@status:	
  3802                           ; 0 bytes @ 0x42
  3803                           
  3804  0062                     Sw_DimmerOnFunc@Idle:	
  3805                           ; 1 bytes @ 0x42
  3806                           
  3807                           
  3808                           ; 1 bytes @ 0x42
  3809  0062                     	ds	1
  3810  0063                     ??_setDimmerLights_Adj:	
  3811  0063                     setRFSW_Control@sw:	
  3812                           ; 0 bytes @ 0x43
  3813                           
  3814  0063                     setRF_DimmerValue@lights:	
  3815                           ; 1 bytes @ 0x43
  3816                           
  3817  0063                     Sw_DimmerOnFunc@sw:	
  3818                           ; 1 bytes @ 0x43
  3819                           
  3820                           
  3821                           ; 1 bytes @ 0x43
  3822  0063                     	ds	1
  3823  0064                     ??_setRFSW_AdjControl:	
  3824  0064                     DlyOff_Main@sw:	
  3825                           ; 0 bytes @ 0x44
  3826                           
  3827  0064                     setDimmerLights_Adj@lights:	
  3828                           ; 1 bytes @ 0x44
  3829                           
  3830  0064                     Sw_DimmerOffFunc@sw:	
  3831                           ; 1 bytes @ 0x44
  3832                           
  3833                           
  3834                           ; 1 bytes @ 0x44
  3835  0064                     	ds	1
  3836  0065                     ??_setDimmerLights_Main:	
  3837  0065                     ??_setSw_Main:	
  3838                           ; 0 bytes @ 0x45
  3839                           
  3840  0065                     ??_DelayOff_Main:	
  3841                           ; 0 bytes @ 0x45
  3842                           
  3843  0065                     setDimmerLights_Main@clear:	
  3844                           ; 0 bytes @ 0x45
  3845                           
  3846                           
  3847                           ; 1 bytes @ 0x45
  3848  0065                     	ds	1
  3849  0066                     setDimmerLights_Main@lights:	
  3850  0066                     setRFSW_AdjControl@sw:	
  3851                           ; 1 bytes @ 0x46
  3852                           
  3853                           
  3854                           ; 1 bytes @ 0x46
  3855  0066                     	ds	1
  3856  0067                     ??_setRF_Main:	
  3857  0067                     ??_getRxData:	
  3858                           ; 0 bytes @ 0x47
  3859                           
  3860  0067                     ??_setControl_Lights_Table:	
  3861                           ; 0 bytes @ 0x47
  3862                           
  3863  0067                     ??_DimmerLights_Main:	
  3864                           ; 0 bytes @ 0x47
  3865                           
  3866  0067                     _setSw_Main$6944:	
  3867                           ; 0 bytes @ 0x47
  3868                           
  3869                           
  3870                           ; 1 bytes @ 0x47
  3871  0067                     	ds	1
  3872  0068                     _setRF_Main$5836:	
  3873  0068                     _setSw_Main$6945:	
  3874                           ; 1 bytes @ 0x48
  3875                           
  3876                           
  3877                           ; 1 bytes @ 0x48
  3878  0068                     	ds	1
  3879  0069                     ??_RF_Main:	
  3880  0069                     setSw_Main@sw:	
  3881                           ; 0 bytes @ 0x49
  3882                           
  3883                           
  3884                           ; 1 bytes @ 0x49
  3885  0069                     	ds	1
  3886  006A                     ??_Switch_Main:	
  3887  006A                     ??_main:	
  3888                           ; 0 bytes @ 0x4A
  3889                           
  3890                           
  3891                           	psect	maintext
  3892  1513                     __pmaintext:	
  3893                           ; 0 bytes @ 0x4A
  3894 ;;
  3895 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3896 ;;
  3897 ;; *************** function _main *****************
  3898 ;; Defined at:
  3899 ;;		line 7 in file "../src/Main_B1.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;  argc            2    0[BANK2 ] int 
  3902 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;		None
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  2    0[BANK2 ] int 
  3907 ;; Registers used:
  3908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3909 ;; Tracked objects:
  3910 ;;		On entry : 17F/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3914 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3917 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3918 ;;Total ram usage:        4 bytes
  3919 ;; Hardware stack levels required when called:   15
  3920 ;; This function calls:
  3921 ;;		_Buzzer_Initialization
  3922 ;;		_Buzzer_Main
  3923 ;;		_CC2500_PowerOnInitial
  3924 ;;		_DelayOff_Initialization
  3925 ;;		_DelayOff_Main
  3926 ;;		_DimmerLights_Initialization
  3927 ;;		_DimmerLights_Main
  3928 ;;		_Flash_Memory_Initialization
  3929 ;;		_Flash_Memory_Main
  3930 ;;		_LED_Initialization
  3931 ;;		_LED_Main
  3932 ;;		_Load_Initialization
  3933 ;;		_Load_Main
  3934 ;;		_Mcu_Initialization
  3935 ;;		_RF_Initialization
  3936 ;;		_RF_Main
  3937 ;;		_Switch_Initialization
  3938 ;;		_Switch_Main
  3939 ;;		_Temp_Initialization
  3940 ;;		_Temp_Main
  3941 ;;		_WDT_Main
  3942 ;;		_getLoad_AD
  3943 ;;		_getTemp_AD
  3944 ;;		_myMain_Initialization
  3945 ;;		_my_MainTime
  3946 ;; This function is called by:
  3947 ;;		Startup code after reset
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           
  3952                           ;psect for function _main
  3953  1513                     _main:	
  3954                           
  3955                           ;Main_B1.c: 8: myMain_Initialization();
  3956                           
  3957                           ;incstack = 0
  3958                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3959  1513  319B  2352  3195   	fcall	_myMain_Initialization
  3960                           
  3961                           ;Main_B1.c: 9: Mcu_Initialization();
  3962  1516  319B  23F6  3195   	fcall	_Mcu_Initialization
  3963                           
  3964                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3965  1519  3186  269B  3195   	fcall	_Flash_Memory_Initialization
  3966                           
  3967                           ;Main_B1.c: 11: LED_Initialization();
  3968  151C  319A  22BF  3195   	fcall	_LED_Initialization
  3969                           
  3970                           ;Main_B1.c: 12: Buzzer_Initialization();
  3971  151F  3199  21D9  3195   	fcall	_Buzzer_Initialization
  3972                           
  3973                           ;Main_B1.c: 14: ;;
  3974                           ;Main_B1.c: 15: Temp_Initialization();
  3975  1522  3199  21E5  3195   	fcall	_Temp_Initialization
  3976                           
  3977                           ;Main_B1.c: 16: Load_Initialization();
  3978  1525  3190  2066  3195   	fcall	_Load_Initialization
  3979                           
  3980                           ;Main_B1.c: 17: ;;
  3981                           ;Main_B1.c: 18: DelayOff_Initialization();
  3982  1528  319A  2221  3195   	fcall	_DelayOff_Initialization
  3983                           
  3984                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3985  152B  319C  24E5  3195   	fcall	_DimmerLights_Initialization
  3986                           
  3987                           ;Main_B1.c: 21: ;;
  3988                           ;Main_B1.c: 22: ;;
  3989                           ;Main_B1.c: 23: ;;
  3990                           ;Main_B1.c: 24: Switch_Initialization();
  3991  152E  319A  22FD  3195   	fcall	_Switch_Initialization
  3992                           
  3993                           ;Main_B1.c: 25: RF_Initialization();
  3994  1531  3199  21DC  3195   	fcall	_RF_Initialization
  3995                           
  3996                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3997  1534  319C  24A4  3195   	fcall	_CC2500_PowerOnInitial
  3998  1537                     l10596:	
  3999                           ;Main_B1.c: 27: ;;
  4000                           ;Main_B1.c: 29: while (1) {
  4001                           
  4002                           
  4003                           ;Main_B1.c: 31: if (myMain.PowerON) {
  4004  1537  0021               	movlb	1	; select bank1
  4005  1538  1C20               	btfss	_myMain^(0+128),0
  4006  1539  2D42               	goto	l10600
  4007                           
  4008                           ;Main_B1.c: 33: ;;
  4009                           ;Main_B1.c: 37: getLoad_AD(0x05);
  4010  153A  3005               	movlw	5
  4011  153B  318B  234C  3195   	fcall	_getLoad_AD
  4012                           
  4013                           ;Main_B1.c: 41: getTemp_AD(0x09);
  4014  153E  3009               	movlw	9
  4015  153F  3191  215E  3195   	fcall	_getTemp_AD
  4016  1542                     l10600:	
  4017                           ;Main_B1.c: 45: ;;
  4018                           
  4019                           
  4020                           ;Main_B1.c: 60: }
  4021                           ;Main_B1.c: 96: if (myMain.T1_Timerout) {
  4022  1542  0021               	movlb	1	; select bank1
  4023  1543  1D20               	btfss	_myMain^(0+128),2
  4024  1544  2D37               	goto	l10596
  4025                           
  4026                           ;Main_B1.c: 97: myMain.T1_Timerout = 0;
  4027  1545  1120               	bcf	_myMain^(0+128),2
  4028                           
  4029                           ;Main_B1.c: 98: my_MainTime();
  4030  1546  3196  267D  3195   	fcall	_my_MainTime
  4031                           
  4032                           ;Main_B1.c: 99: WDT_Main();
  4033  1549  319C  241A  3195   	fcall	_WDT_Main
  4034                           
  4035                           ;Main_B1.c: 100: ;;
  4036                           ;Main_B1.c: 101: ;;
  4037                           ;Main_B1.c: 102: if (myMain.PowerON) {
  4038  154C  0021               	movlb	1	; select bank1
  4039  154D  1C20               	btfss	_myMain^(0+128),0
  4040  154E  2D37               	goto	l10596
  4041                           
  4042                           ;Main_B1.c: 103: Flash_Memory_Main();
  4043  154F  319E  2629  3195   	fcall	_Flash_Memory_Main
  4044                           
  4045                           ;Main_B1.c: 105: LED_Main();
  4046  1552  319A  22CB  3195   	fcall	_LED_Main
  4047                           
  4048                           ;Main_B1.c: 106: Buzzer_Main();
  4049  1555  3193  2388  3195   	fcall	_Buzzer_Main
  4050                           
  4051                           ;Main_B1.c: 108: ;;
  4052                           ;Main_B1.c: 109: Temp_Main();
  4053  1558  3199  21E8  3195   	fcall	_Temp_Main
  4054                           
  4055                           ;Main_B1.c: 110: Load_Main();
  4056  155B  3182  220E  3195   	fcall	_Load_Main
  4057                           
  4058                           ;Main_B1.c: 111: ;;
  4059                           ;Main_B1.c: 113: ;;
  4060                           ;Main_B1.c: 114: DimmerLights_Main();
  4061  155E  319A  2286  3195   	fcall	_DimmerLights_Main
  4062                           
  4063                           ;Main_B1.c: 115: Switch_Main();
  4064  1561  319A  2251  3195   	fcall	_Switch_Main
  4065                           
  4066                           ;Main_B1.c: 116: ;;
  4067                           ;Main_B1.c: 117: ;;
  4068                           ;Main_B1.c: 119: RF_Main();
  4069  1564  3199  21DF  3195   	fcall	_RF_Main
  4070                           
  4071                           ;Main_B1.c: 120: DelayOff_Main();
  4072  1567  319A  2229  3195   	fcall	_DelayOff_Main
  4073                           
  4074                           ;Main_B1.c: 121: ;;
  4075  156A  2D37               	goto	l10596
  4076  156B                     __end_of_main:	
  4077                           ;Main_B1.c: 129: }
  4078                           ;Main_B1.c: 130: }
  4079                           ;Main_B1.c: 164: }
  4080                           ;Main_B1.c: 165: return (0);
  4081                           ;	Return value of _main is never used
  4082                           
  4083                           
  4084                           	psect	text1
  4085  167D                     __ptext1:	
  4086 ;; *************** function _my_MainTime *****************
  4087 ;; Defined at:
  4088 ;;		line 183 in file "../src/Main_B1.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;		None
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;		None
  4093 ;; Return value:  Size  Location     Type
  4094 ;;		None               void
  4095 ;; Registers used:
  4096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4106 ;;Total ram usage:        0 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    7
  4109 ;; This function calls:
  4110 ;;		_setBuz
  4111 ;;		_setLoad_Enable
  4112 ;;		_setRF_Enable
  4113 ;;		_setSw_Enable
  4114 ;;		_setTemp_Enable
  4115 ;; This function is called by:
  4116 ;;		_main
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           
  4121                           ;psect for function _my_MainTime
  4122  167D                     _my_MainTime:	
  4123                           
  4124                           ;Main_B1.c: 185: if (myMain.PowerON == 0) {
  4125                           
  4126                           ;incstack = 0
  4127                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4128  167D  0021               	movlb	1	; select bank1
  4129  167E  1820               	btfsc	_myMain^(0+128),0
  4130  167F  2EAF               	goto	l10410
  4131                           
  4132                           ;Main_B1.c: 186: myMain.PowerCount++;
  4133  1680  3001               	movlw	1
  4134  1681  07A2               	addwf	(_myMain^(0+128)+2),f
  4135  1682  3000               	movlw	0
  4136  1683  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4137                           
  4138                           ;Main_B1.c: 187: if (myMain.PowerCount == 150)
  4139  1684  3002               	movlw	2
  4140  1685  3EA0               	addlw	_myMain& (0+255)
  4141  1686  0086               	movwf	6
  4142  1687  0187               	clrf	7
  4143  1688  3F40               	moviw [0]fsr1
  4144  1689  3A96               	xorlw	150
  4145  168A  1D03               	skipz
  4146  168B  2E8E               	goto	u11265
  4147  168C  3F41               	moviw [1]fsr1
  4148  168D  3A00               	xorlw	0
  4149  168E                     u11265:	
  4150  168E  1D03               	skipz
  4151  168F  2EC7               	goto	l10420
  4152                           
  4153                           ;Main_B1.c: 188: {
  4154                           ;Main_B1.c: 189: myMain.PowerCount = 0;
  4155  1690  01A2               	clrf	(_myMain^(0+128)+2)
  4156  1691  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4157                           
  4158                           ;Main_B1.c: 190: myMain.PowerON = 1;
  4159  1692  1420               	bsf	_myMain^(0+128),0
  4160                           
  4161                           ;Main_B1.c: 193: setTemp_Enable(1);
  4162  1693  3001               	movlw	1
  4163  1694  319A  2261  3196   	fcall	_setTemp_Enable
  4164                           
  4165                           ;Main_B1.c: 197: setLoad_Enable(1);
  4166  1697  3001               	movlw	1
  4167  1698  319A  2272  3196   	fcall	_setLoad_Enable
  4168                           
  4169                           ;Main_B1.c: 203: setBuz(3, 50);
  4170  169B  3032               	movlw	50
  4171  169C  0020               	movlb	0	; select bank0
  4172  169D  00A9               	movwf	setBuz@time
  4173  169E  3000               	movlw	0
  4174  169F  00AA               	movwf	setBuz@time+1
  4175  16A0  3003               	movlw	3
  4176  16A1  3195  256B  3196   	fcall	_setBuz
  4177                           
  4178                           ;Main_B1.c: 204: myMain.SelfTest = 1;
  4179  16A4  0021               	movlb	1	; select bank1
  4180  16A5  17A0               	bsf	_myMain^(0+128),7
  4181                           
  4182                           ;Main_B1.c: 206: setSw_Enable(1);
  4183  16A6  3001               	movlw	1
  4184  16A7  319D  2594  3196   	fcall	_setSw_Enable
  4185                           
  4186                           ;Main_B1.c: 209: setRF_Enable(1);
  4187  16AA  3001               	movlw	1
  4188  16AB  319B  2326  3196   	fcall	_setRF_Enable
  4189                           
  4190                           ;Main_B1.c: 213: }
  4191                           ;Main_B1.c: 214: } else {
  4192  16AE  2EC7               	goto	l10420
  4193  16AF                     l10410:	
  4194                           
  4195                           ;Main_B1.c: 222: myMain.Count1++;
  4196  16AF  3001               	movlw	1
  4197  16B0  0021               	movlb	1	; select bank1
  4198  16B1  07A6               	addwf	(_myMain^(0+128)+6),f
  4199  16B2  3000               	movlw	0
  4200  16B3  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4201                           
  4202                           ;Main_B1.c: 223: if (myMain.Count1 == 100)
  4203  16B4  3006               	movlw	6
  4204  16B5  3EA0               	addlw	_myMain& (0+255)
  4205  16B6  0086               	movwf	6
  4206  16B7  0187               	clrf	7
  4207  16B8  3F40               	moviw [0]fsr1
  4208  16B9  3A64               	xorlw	100
  4209  16BA  1D03               	skipz
  4210  16BB  2EBE               	goto	u11275
  4211  16BC  3F41               	moviw [1]fsr1
  4212  16BD  3A00               	xorlw	0
  4213  16BE                     u11275:	
  4214  16BE  1D03               	skipz
  4215  16BF  2EC7               	goto	l10420
  4216                           
  4217                           ;Main_B1.c: 224: {
  4218                           ;Main_B1.c: 225: myMain.Count1 = 0;
  4219  16C0  01A6               	clrf	(_myMain^(0+128)+6)
  4220  16C1  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4221                           
  4222                           ;Main_B1.c: 237: if (myMain.Flag) {
  4223  16C2  1E20               	btfss	_myMain^(0+128),4
  4224  16C3  2EC6               	goto	l1556
  4225                           
  4226                           ;Main_B1.c: 238: myMain.Flag = 0;
  4227  16C4  1220               	bcf	_myMain^(0+128),4
  4228                           
  4229                           ;Main_B1.c: 247: } else {
  4230  16C5  2EC7               	goto	l10420
  4231  16C6                     l1556:	
  4232                           
  4233                           ;Main_B1.c: 248: myMain.Flag = 1;
  4234  16C6  1620               	bsf	_myMain^(0+128),4
  4235  16C7                     l10420:	
  4236                           
  4237                           ;Main_B1.c: 257: }
  4238                           ;Main_B1.c: 258: }
  4239                           ;Main_B1.c: 260: }
  4240                           ;Main_B1.c: 262: myMain.Count2++;
  4241  16C7  3001               	movlw	1
  4242  16C8  0021               	movlb	1	; select bank1
  4243  16C9  07A8               	addwf	(_myMain^(0+128)+8),f
  4244  16CA  3000               	movlw	0
  4245  16CB  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  4246                           
  4247                           ;Main_B1.c: 263: if (myMain.Count2 == 50) {
  4248  16CC  3008               	movlw	8
  4249  16CD  3EA0               	addlw	_myMain& (0+255)
  4250  16CE  0086               	movwf	6
  4251  16CF  0187               	clrf	7
  4252  16D0  3F40               	moviw [0]fsr1
  4253  16D1  3A32               	xorlw	50
  4254  16D2  1D03               	skipz
  4255  16D3  2ED6               	goto	u11295
  4256  16D4  3F41               	moviw [1]fsr1
  4257  16D5  3A00               	xorlw	0
  4258  16D6                     u11295:	
  4259  16D6  1D03               	skipz
  4260  16D7  0008               	return
  4261                           
  4262                           ;Main_B1.c: 264: myMain.Count2 = 0;
  4263  16D8  01A8               	clrf	(_myMain^(0+128)+8)
  4264  16D9  01A9               	clrf	((_myMain+1)^(0+128)+8)
  4265  16DA  0008               	return
  4266  16DB                     __end_of_my_MainTime:	
  4267                           
  4268                           	psect	text2
  4269  1A61                     __ptext2:	
  4270 ;; *************** function _setTemp_Enable *****************
  4271 ;; Defined at:
  4272 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  command         1    wreg     unsigned char 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  command         1    0[BANK0 ] unsigned char 
  4277 ;; Return value:  Size  Location     Type
  4278 ;;		None               void
  4279 ;; Registers used:
  4280 ;;		wreg
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;Total ram usage:        1 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    5
  4293 ;; This function calls:
  4294 ;;		Nothing
  4295 ;; This function is called by:
  4296 ;;		_my_MainTime
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           
  4301                           ;psect for function _setTemp_Enable
  4302  1A61                     _setTemp_Enable:	
  4303                           
  4304                           ;incstack = 0
  4305                           ; Regs used in _setTemp_Enable: [wreg]
  4306                           ;setTemp_Enable@command stored from wreg
  4307  1A61  0020               	movlb	0	; select bank0
  4308  1A62  00A0               	movwf	setTemp_Enable@command
  4309                           
  4310                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4311  1A63  0820               	movf	setTemp_Enable@command,w
  4312  1A64  0021               	movlb	1	; select bank1
  4313  1A65  105C               	bcf	_Temp1^(0+128),0
  4314  1A66  1D03               	skipz
  4315  1A67  145C               	bsf	_Temp1^(0+128),0
  4316  1A68  0008               	return
  4317  1A69                     __end_of_setTemp_Enable:	
  4318                           
  4319                           	psect	text3
  4320  1A72                     __ptext3:	
  4321 ;; *************** function _setLoad_Enable *****************
  4322 ;; Defined at:
  4323 ;;		line 258 in file "../src/OverLoad_B1.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  command         1    wreg     unsigned char 
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;  command         1    0[BANK0 ] unsigned char 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;		None               void
  4330 ;; Registers used:
  4331 ;;		wreg
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4340 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;Total ram usage:        1 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    5
  4344 ;; This function calls:
  4345 ;;		Nothing
  4346 ;; This function is called by:
  4347 ;;		_my_MainTime
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           
  4352                           ;psect for function _setLoad_Enable
  4353  1A72                     _setLoad_Enable:	
  4354                           
  4355                           ;incstack = 0
  4356                           ; Regs used in _setLoad_Enable: [wreg]
  4357                           ;setLoad_Enable@command stored from wreg
  4358  1A72  0020               	movlb	0	; select bank0
  4359  1A73  00A0               	movwf	setLoad_Enable@command
  4360                           
  4361                           ;OverLoad_B1.c: 259: Load1.Enable = command;
  4362  1A74  0820               	movf	setLoad_Enable@command,w
  4363  1A75  0023               	movlb	3	; select bank3
  4364  1A76  1020               	bcf	_Load1^(0+384),0
  4365  1A77  1D03               	skipz
  4366  1A78  1420               	bsf	_Load1^(0+384),0
  4367                           
  4368                           ;OverLoad_B1.c: 260: Load1.GO = 0;
  4369  1A79  10A0               	bcf	_Load1^(0+384),1
  4370  1A7A  0008               	return
  4371  1A7B                     __end_of_setLoad_Enable:	
  4372                           
  4373                           	psect	text4
  4374  1B52                     __ptext4:	
  4375 ;; *************** function _myMain_Initialization *****************
  4376 ;; Defined at:
  4377 ;;		line 171 in file "../src/Main_B1.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;		None
  4380 ;; Auto vars:     Size  Location     Type
  4381 ;;		None
  4382 ;; Return value:  Size  Location     Type
  4383 ;;		None               void
  4384 ;; Registers used:
  4385 ;;		wreg, fsr1l, fsr1h
  4386 ;; Tracked objects:
  4387 ;;		On entry : 0/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4394 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4395 ;;Total ram usage:        1 bytes
  4396 ;; Hardware stack levels used:    1
  4397 ;; Hardware stack levels required when called:    5
  4398 ;; This function calls:
  4399 ;;		Nothing
  4400 ;; This function is called by:
  4401 ;;		_main
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           
  4406                           ;psect for function _myMain_Initialization
  4407  1B52                     _myMain_Initialization:	
  4408                           
  4409                           ;Main_B1.c: 173: product = &_product;
  4410                           
  4411                           ;incstack = 0
  4412                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4413  1B52  3045               	movlw	__product& (0+255)
  4414  1B53  0020               	movlb	0	; select bank0
  4415  1B54  00A0               	movwf	??_myMain_Initialization
  4416  1B55  0820               	movf	??_myMain_Initialization,w
  4417  1B56  00ED               	movwf	_product
  4418                           
  4419                           ;Main_B1.c: 174: product->Data[20] = 210;
  4420  1B57  30D2               	movlw	210
  4421  1B58  00A0               	movwf	??_myMain_Initialization
  4422  1B59  086D               	movf	_product,w
  4423  1B5A  3E14               	addlw	20
  4424  1B5B  0086               	movwf	6
  4425  1B5C  3002               	movlw	2	; select bank4/5
  4426  1B5D  0087               	movwf	7
  4427  1B5E  0820               	movf	??_myMain_Initialization,w
  4428  1B5F  0081               	movwf	1
  4429  1B60  0008               	return
  4430  1B61                     __end_of_myMain_Initialization:	
  4431                           
  4432                           	psect	text5
  4433  115E                     __ptext5:	
  4434 ;; *************** function _getTemp_AD *****************
  4435 ;; Defined at:
  4436 ;;		line 33 in file "../src/OverTemperature_B1.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;  channel         1    wreg     unsigned char 
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;  channel         1    5[BANK0 ] unsigned char 
  4441 ;; Return value:  Size  Location     Type
  4442 ;;		None               void
  4443 ;; Registers used:
  4444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4445 ;; Tracked objects:
  4446 ;;		On entry : 0/0
  4447 ;;		On exit  : 0/0
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4451 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4452 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4453 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4454 ;;Total ram usage:        2 bytes
  4455 ;; Hardware stack levels used:    1
  4456 ;; Hardware stack levels required when called:    7
  4457 ;; This function calls:
  4458 ;;		_getAD
  4459 ;; This function is called by:
  4460 ;;		_main
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           
  4465                           ;psect for function _getTemp_AD
  4466  115E                     _getTemp_AD:	
  4467                           
  4468                           ;incstack = 0
  4469                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4470                           ;getTemp_AD@channel stored from wreg
  4471  115E  0020               	movlb	0	; select bank0
  4472  115F  00A5               	movwf	getTemp_AD@channel
  4473                           
  4474                           ;OverTemperature_B1.c: 34: if (Temp1.ADtoGO == 1) {
  4475  1160  0021               	movlb	1	; select bank1
  4476  1161  1D5C               	btfss	_Temp1^(0+128),2
  4477  1162  0008               	return
  4478                           
  4479                           ;OverTemperature_B1.c: 35: Temp1.ADRES = getAD(channel, 0xf0);
  4480  1163  30F0               	movlw	240
  4481  1164  0020               	movlb	0	; select bank0
  4482  1165  00A4               	movwf	??_getTemp_AD
  4483  1166  0824               	movf	??_getTemp_AD,w
  4484  1167  00A0               	movwf	getAD@adcon1
  4485  1168  0825               	movf	getTemp_AD@channel,w
  4486  1169  319E  2648  3191   	fcall	_getAD
  4487  116C  0020               	movlb	0	; select bank0
  4488  116D  0821               	movf	?_getAD+1,w
  4489  116E  0021               	movlb	1	; select bank1
  4490  116F  01E9               	clrf	((_Temp1+1)^(0+128)+12)
  4491  1170  07E9               	addwf	((_Temp1+1)^(0+128)+12),f
  4492  1171  0020               	movlb	0	; select bank0
  4493  1172  0820               	movf	?_getAD,w
  4494  1173  0021               	movlb	1	; select bank1
  4495  1174  01E8               	clrf	(_Temp1^(0+128)+12)
  4496  1175  07E8               	addwf	(_Temp1^(0+128)+12),f
  4497                           
  4498                           ;OverTemperature_B1.c: 36: if (Temp1.ADH[0] < Temp1.ADRES) {
  4499  1176  0869               	movf	((_Temp1+1)^(0+128)+12),w
  4500  1177  0265               	subwf	((_Temp1+1)^(0+128)+8),w
  4501  1178  1D03               	skipz
  4502  1179  297C               	goto	u11235
  4503  117A  0868               	movf	(_Temp1^(0+128)+12),w
  4504  117B  0264               	subwf	(_Temp1^(0+128)+8),w
  4505  117C                     u11235:	
  4506  117C  1803               	skipnc
  4507  117D  2985               	goto	l10384
  4508                           
  4509                           ;OverTemperature_B1.c: 37: Temp1.ADH[0] = Temp1.ADRES;
  4510  117E  0869               	movf	((_Temp1+1)^(0+128)+12),w
  4511  117F  01E5               	clrf	((_Temp1+1)^(0+128)+8)
  4512  1180  07E5               	addwf	((_Temp1+1)^(0+128)+8),f
  4513  1181  0868               	movf	(_Temp1^(0+128)+12),w
  4514  1182  01E4               	clrf	(_Temp1^(0+128)+8)
  4515  1183  07E4               	addwf	(_Temp1^(0+128)+8),f
  4516                           
  4517                           ;OverTemperature_B1.c: 38: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4518  1184  0008               	return
  4519  1185                     l10384:	
  4520  1185  0869               	movf	((_Temp1+1)^(0+128)+12),w
  4521  1186  0267               	subwf	((_Temp1+1)^(0+128)+10),w
  4522  1187  1D03               	skipz
  4523  1188  298B               	goto	u11245
  4524  1189  0868               	movf	(_Temp1^(0+128)+12),w
  4525  118A  0266               	subwf	(_Temp1^(0+128)+10),w
  4526  118B                     u11245:	
  4527  118B  1803               	skipnc
  4528  118C  0008               	return
  4529                           
  4530                           ;OverTemperature_B1.c: 39: Temp1.ADH[1] = Temp1.ADRES;
  4531  118D  0869               	movf	((_Temp1+1)^(0+128)+12),w
  4532  118E  01E7               	clrf	((_Temp1+1)^(0+128)+10)
  4533  118F  07E7               	addwf	((_Temp1+1)^(0+128)+10),f
  4534  1190  0868               	movf	(_Temp1^(0+128)+12),w
  4535  1191  01E6               	clrf	(_Temp1^(0+128)+10)
  4536  1192  07E6               	addwf	(_Temp1^(0+128)+10),f
  4537  1193  0008               	return
  4538  1194                     __end_of_getTemp_AD:	
  4539                           
  4540                           	psect	text6
  4541  0B4C                     __ptext6:	
  4542 ;; *************** function _getLoad_AD *****************
  4543 ;; Defined at:
  4544 ;;		line 15 in file "../src/OverLoad_B1.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;  channel         1    wreg     unsigned char 
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;  channel         1    6[BANK0 ] unsigned char 
  4549 ;;  i               1    8[BANK0 ] unsigned char 
  4550 ;;  j               1    7[BANK0 ] unsigned char 
  4551 ;; Return value:  Size  Location     Type
  4552 ;;		None               void
  4553 ;; Registers used:
  4554 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4561 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4562 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4563 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4564 ;;Total ram usage:        5 bytes
  4565 ;; Hardware stack levels used:    1
  4566 ;; Hardware stack levels required when called:    7
  4567 ;; This function calls:
  4568 ;;		_getAD
  4569 ;; This function is called by:
  4570 ;;		_main
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           
  4575                           ;psect for function _getLoad_AD
  4576  0B4C                     _getLoad_AD:	
  4577                           
  4578                           ;incstack = 0
  4579                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4580                           ;getLoad_AD@channel stored from wreg
  4581  0B4C  0020               	movlb	0	; select bank0
  4582  0B4D  00A6               	movwf	getLoad_AD@channel
  4583                           
  4584                           ;OverLoad_B1.c: 16: char i = 0, j = 0;
  4585  0B4E  01A8               	clrf	getLoad_AD@i
  4586  0B4F  01A7               	clrf	getLoad_AD@j
  4587                           
  4588                           ;OverLoad_B1.c: 18: if (Load1.ADtoGO == 1) {
  4589  0B50  0023               	movlb	3	; select bank3
  4590  0B51  1E20               	btfss	_Load1^(0+384),4
  4591  0B52  0008               	return
  4592                           
  4593                           ;OverLoad_B1.c: 19: Load1.ADRES = getAD(channel, 0xc0);
  4594  0B53  30C0               	movlw	192
  4595  0B54  0020               	movlb	0	; select bank0
  4596  0B55  00A4               	movwf	??_getLoad_AD
  4597  0B56  0824               	movf	??_getLoad_AD,w
  4598  0B57  00A0               	movwf	getAD@adcon1
  4599  0B58  0826               	movf	getLoad_AD@channel,w
  4600  0B59  319E  2648  318B   	fcall	_getAD
  4601  0B5C  0020               	movlb	0	; select bank0
  4602  0B5D  0821               	movf	?_getAD+1,w
  4603  0B5E  0023               	movlb	3	; select bank3
  4604  0B5F  01D3               	clrf	((_Load1+1)^(0+384)+50)
  4605  0B60  07D3               	addwf	((_Load1+1)^(0+384)+50),f
  4606  0B61  0020               	movlb	0	; select bank0
  4607  0B62  0820               	movf	?_getAD,w
  4608  0B63  0023               	movlb	3	; select bank3
  4609  0B64  01D2               	clrf	(_Load1^(0+384)+50)
  4610  0B65  07D2               	addwf	(_Load1^(0+384)+50),f
  4611                           
  4612                           ;OverLoad_B1.c: 20: for (i = 0; i < 5; i++) {
  4613  0B66  0020               	movlb	0	; select bank0
  4614  0B67  01A8               	clrf	getLoad_AD@i
  4615  0B68  3005               	movlw	5
  4616  0B69  0228               	subwf	getLoad_AD@i,w
  4617  0B6A  1803               	btfsc	3,0
  4618  0B6B  2B97               	goto	l10360
  4619  0B6C                     l10350:	
  4620                           
  4621                           ;OverLoad_B1.c: 21: if (Load1.AH[i] < Load1.ADRES) {
  4622  0B6C  3528               	lslf	getLoad_AD@i,w
  4623  0B6D  3EA8               	addlw	(_Load1+8)& (0+255)
  4624  0B6E  0086               	movwf	6
  4625  0B6F  3001               	movlw	1	; select bank3/4
  4626  0B70  0087               	movwf	7
  4627  0B71  3F40               	moviw [0]fsr1
  4628  0B72  00A4               	movwf	??_getLoad_AD
  4629  0B73  3F41               	moviw [1]fsr1
  4630  0B74  00A5               	movwf	??_getLoad_AD+1
  4631  0B75  0023               	movlb	3	; select bank3
  4632  0B76  0853               	movf	((_Load1+1)^(0+384)+50),w
  4633  0B77  0020               	movlb	0	; select bank0
  4634  0B78  0225               	subwf	??_getLoad_AD+1,w
  4635  0B79  1D03               	skipz
  4636  0B7A  2B7F               	goto	u11165
  4637  0B7B  0023               	movlb	3	; select bank3
  4638  0B7C  0852               	movf	(_Load1^(0+384)+50),w
  4639  0B7D  0020               	movlb	0	; select bank0
  4640  0B7E  0224               	subwf	??_getLoad_AD,w
  4641  0B7F                     u11165:	
  4642  0B7F  1803               	skipnc
  4643  0B80  2B8F               	goto	l10356
  4644                           
  4645                           ;OverLoad_B1.c: 22: Load1.AH[i] = Load1.ADRES;
  4646  0B81  3528               	lslf	getLoad_AD@i,w
  4647  0B82  3EA8               	addlw	(_Load1+8)& (0+255)
  4648  0B83  0086               	movwf	6
  4649  0B84  3001               	movlw	1	; select bank3/4
  4650  0B85  0087               	movwf	7
  4651  0B86  0023               	movlb	3	; select bank3
  4652  0B87  0852               	movf	(_Load1^(0+384)+50),w
  4653  0B88  3FC0               	movwi [0]fsr1
  4654  0B89  0853               	movf	((_Load1+1)^(0+384)+50),w
  4655  0B8A  3FC1               	movwi [1]fsr1
  4656                           
  4657                           ;OverLoad_B1.c: 23: j = 1;
  4658  0B8B  0020               	movlb	0	; select bank0
  4659  0B8C  01A7               	clrf	getLoad_AD@j
  4660  0B8D  0AA7               	incf	getLoad_AD@j,f
  4661                           
  4662                           ;OverLoad_B1.c: 24: break;
  4663  0B8E  2B97               	goto	l10360
  4664  0B8F                     l10356:	
  4665  0B8F  3001               	movlw	1
  4666  0B90  00A4               	movwf	??_getLoad_AD
  4667  0B91  0824               	movf	??_getLoad_AD,w
  4668  0B92  07A8               	addwf	getLoad_AD@i,f
  4669  0B93  3005               	movlw	5
  4670  0B94  0228               	subwf	getLoad_AD@i,w
  4671  0B95  1C03               	skipc
  4672  0B96  2B6C               	goto	l10350
  4673  0B97                     l10360:	
  4674                           
  4675                           ;OverLoad_B1.c: 25: }
  4676                           ;OverLoad_B1.c: 26: }
  4677                           ;OverLoad_B1.c: 27: if (j == 0) {
  4678  0B97  08A7               	movf	getLoad_AD@j,f
  4679  0B98  1D03               	skipz
  4680  0B99  0008               	return
  4681                           
  4682                           ;OverLoad_B1.c: 28: for (i = 0; i < 5; i++) {
  4683  0B9A  01A8               	clrf	getLoad_AD@i
  4684  0B9B                     L1:	
  4685  0B9B  3005               	movlw	5
  4686  0B9C  0228               	subwf	getLoad_AD@i,w
  4687  0B9D  1803               	btfsc	3,0
  4688  0B9E  0008               	return
  4689                           
  4690                           ;OverLoad_B1.c: 29: if (Load1.AL[i] > Load1.ADRES) {
  4691  0B9F  3528               	lslf	getLoad_AD@i,w
  4692  0BA0  3EBA               	addlw	(_Load1+26)& (0+255)
  4693  0BA1  0086               	movwf	6
  4694  0BA2  3001               	movlw	1	; select bank3/4
  4695  0BA3  0087               	movwf	7
  4696  0BA4  3F40               	moviw [0]fsr1
  4697  0BA5  00A4               	movwf	??_getLoad_AD
  4698  0BA6  3F41               	moviw [1]fsr1
  4699  0BA7  00A5               	movwf	??_getLoad_AD+1
  4700  0BA8  0825               	movf	??_getLoad_AD+1,w
  4701  0BA9  0023               	movlb	3	; select bank3
  4702  0BAA  0253               	subwf	((_Load1+1)^(0+384)+50),w
  4703  0BAB  1D03               	skipz
  4704  0BAC  2BB1               	goto	u11205
  4705  0BAD  0020               	movlb	0	; select bank0
  4706  0BAE  0824               	movf	??_getLoad_AD,w
  4707  0BAF  0023               	movlb	3	; select bank3
  4708  0BB0  0252               	subwf	(_Load1^(0+384)+50),w
  4709  0BB1                     u11205:	
  4710  0BB1  1803               	skipnc
  4711  0BB2  2BBF               	goto	l10372
  4712                           
  4713                           ;OverLoad_B1.c: 30: Load1.AL[i] = Load1.ADRES;
  4714  0BB3  0020               	movlb	0	; select bank0
  4715  0BB4  3528               	lslf	getLoad_AD@i,w
  4716  0BB5  3EBA               	addlw	(_Load1+26)& (0+255)
  4717  0BB6  0086               	movwf	6
  4718  0BB7  3001               	movlw	1	; select bank3/4
  4719  0BB8  0087               	movwf	7
  4720  0BB9  0023               	movlb	3	; select bank3
  4721  0BBA  0852               	movf	(_Load1^(0+384)+50),w
  4722  0BBB  3FC0               	movwi [0]fsr1
  4723  0BBC  0853               	movf	((_Load1+1)^(0+384)+50),w
  4724  0BBD  3FC1               	movwi [1]fsr1
  4725                           
  4726                           ;OverLoad_B1.c: 31: break;
  4727  0BBE  0008               	return
  4728  0BBF                     l10372:	
  4729  0BBF  3001               	movlw	1
  4730  0BC0  0020               	movlb	0	; select bank0
  4731  0BC1  00A4               	movwf	??_getLoad_AD
  4732  0BC2  0824               	movf	??_getLoad_AD,w
  4733  0BC3  07A8               	addwf	getLoad_AD@i,f
  4734  0BC4  2B9B               	goto	L1
  4735  0BC5                     __end_of_getLoad_AD:	
  4736                           
  4737                           	psect	text7
  4738  1E48                     __ptext7:	
  4739 ;; *************** function _getAD *****************
  4740 ;; Defined at:
  4741 ;;		line 453 in file "../src/MCU_B1.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;  adcon0          1    wreg     unsigned char 
  4744 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  2    0[BANK0 ] int 
  4749 ;; Registers used:
  4750 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4756 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4757 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4759 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4760 ;;Total ram usage:        4 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    6
  4763 ;; This function calls:
  4764 ;;		_Timeout_Counter
  4765 ;;		_set_TimeoutCleared
  4766 ;; This function is called by:
  4767 ;;		_getLoad_AD
  4768 ;;		_getTemp_AD
  4769 ;; This function uses a non-reentrant model
  4770 ;;
  4771                           
  4772                           
  4773                           ;psect for function _getAD
  4774  1E48                     _getAD:	
  4775                           
  4776                           ;incstack = 0
  4777                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4778                           ;getAD@adcon0 stored from wreg
  4779  1E48  0020               	movlb	0	; select bank0
  4780  1E49  00A3               	movwf	getAD@adcon0
  4781                           
  4782                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4783  1E4A  0823               	movf	getAD@adcon0,w
  4784  1E4B  0021               	movlb	1	; select bank1
  4785  1E4C  009D               	movwf	29	;volatile
  4786                           
  4787                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4788  1E4D  0020               	movlb	0	; select bank0
  4789  1E4E  0820               	movf	getAD@adcon1,w
  4790  1E4F  0021               	movlb	1	; select bank1
  4791  1E50  009E               	movwf	30	;volatile
  4792                           
  4793                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4794  1E51  149D               	bsf	29,1	;volatile
  4795                           
  4796                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4797  1E52  2E56               	goto	l9802
  4798  1E53                     l9800:	
  4799                           
  4800                           ;MCU_B1.c: 458: Timeout_Counter();
  4801  1E53  319C  248F  319E   	fcall	_Timeout_Counter
  4802  1E56                     l9802:	
  4803  1E56  0021               	movlb	1	; select bank1
  4804  1E57  1C9D               	btfss	29,1	;volatile
  4805  1E58  2E5B               	goto	l9806
  4806  1E59  1D30               	btfss	(_myMain^(0+128)+16),2
  4807  1E5A  2E53               	goto	l9800
  4808  1E5B                     l9806:	
  4809                           
  4810                           ;MCU_B1.c: 459: };
  4811                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4812  1E5B  3199  21FB         	fcall	_set_TimeoutCleared
  4813                           
  4814                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4815  1E5D  0021               	movlb	1	; select bank1
  4816  1E5E  081C               	movf	28,w	;volatile
  4817  1E5F  0020               	movlb	0	; select bank0
  4818  1E60  01A1               	clrf	?_getAD+1
  4819  1E61  07A1               	addwf	?_getAD+1,f
  4820  1E62  0021               	movlb	1	; select bank1
  4821  1E63  081B               	movf	27,w	;volatile
  4822  1E64  0020               	movlb	0	; select bank0
  4823  1E65  01A0               	clrf	?_getAD
  4824  1E66  07A0               	addwf	?_getAD,f
  4825  1E67  0008               	return
  4826  1E68                     __end_of_getAD:	
  4827                           
  4828                           	psect	text8
  4829  1C1A                     __ptext8:	
  4830 ;; *************** function _WDT_Main *****************
  4831 ;; Defined at:
  4832 ;;		line 1019 in file "../src/MCU_B1.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;		None
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;		None
  4837 ;; Return value:  Size  Location     Type
  4838 ;;		None               void
  4839 ;; Registers used:
  4840 ;;		wreg, status,2, status,0, pclath, cstack
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;Total ram usage:        1 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    6
  4853 ;; This function calls:
  4854 ;;		_WDT_Clearing
  4855 ;; This function is called by:
  4856 ;;		_main
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           
  4861                           ;psect for function _WDT_Main
  4862  1C1A                     _WDT_Main:	
  4863                           
  4864                           ;MCU_B1.c: 1020: if (WDT.Enable == 1) {
  4865                           
  4866                           ;incstack = 0
  4867                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4868  1C1A  0021               	movlb	1	; select bank1
  4869  1C1B  1C50               	btfss	_WDT^(0+128),0
  4870  1C1C  0008               	return
  4871                           
  4872                           ;MCU_B1.c: 1021: if (WDT.Timer-- > 0) {
  4873  1C1D  3001               	movlw	1
  4874  1C1E  02D1               	subwf	(_WDT^(0+128)+1),f
  4875  1C1F  0851               	movf	(_WDT^(0+128)+1),w
  4876  1C20  3AFF               	xorlw	255
  4877  1C21  1903               	skipnz
  4878  1C22  0008               	return
  4879                           
  4880                           ;MCU_B1.c: 1022: WDT.Timer = 100;
  4881  1C23  3064               	movlw	100
  4882  1C24  0020               	movlb	0	; select bank0
  4883  1C25  00A0               	movwf	??_WDT_Main
  4884  1C26  0820               	movf	??_WDT_Main,w
  4885  1C27  0021               	movlb	1	; select bank1
  4886  1C28  00D1               	movwf	(_WDT^(0+128)+1)
  4887                           
  4888                           ;MCU_B1.c: 1023: WDT_Clearing();
  4889  1C29  3180  2002         	fcall	_WDT_Clearing
  4890  1C2B  0008               	return
  4891  1C2C                     __end_of_WDT_Main:	
  4892                           
  4893                           	psect	text9
  4894  0002                     __ptext9:	
  4895 ;; *************** function _WDT_Clearing *****************
  4896 ;; Defined at:
  4897 ;;		line 1029 in file "../src/MCU_B1.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;		None
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;		None
  4902 ;; Return value:  Size  Location     Type
  4903 ;;		None               void
  4904 ;; Registers used:
  4905 ;;		None
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4915 ;;Total ram usage:        0 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:    5
  4918 ;; This function calls:
  4919 ;;		Nothing
  4920 ;; This function is called by:
  4921 ;;		_WDT_Main
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           
  4926                           ;psect for function _WDT_Clearing
  4927  0002                     _WDT_Clearing:	
  4928                           
  4929                           ;incstack = 0
  4930                           ; Regs used in _WDT_Clearing: []
  4931  0002  0064               	clrwdt	;# 
  4932  0003  0008               	return
  4933  0004                     __end_of_WDT_Clearing:	
  4934                           
  4935                           	psect	text10
  4936  19E8                     __ptext10:	
  4937 ;; *************** function _Temp_Main *****************
  4938 ;; Defined at:
  4939 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;		None
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;		None
  4944 ;; Return value:  Size  Location     Type
  4945 ;;		None               void
  4946 ;; Registers used:
  4947 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4957 ;;Total ram usage:        0 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:   11
  4960 ;; This function calls:
  4961 ;;		_setTemp_Main
  4962 ;; This function is called by:
  4963 ;;		_main
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           
  4968                           ;psect for function _Temp_Main
  4969  19E8                     _Temp_Main:	
  4970                           
  4971                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4972                           
  4973                           ;incstack = 0
  4974                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4975  19E8  318B  23C5         	fcall	_setTemp_Main
  4976  19EA  0008               	return
  4977  19EB                     __end_of_Temp_Main:	
  4978                           
  4979                           	psect	text11
  4980  0BC5                     __ptext11:	
  4981 ;; *************** function _setTemp_Main *****************
  4982 ;; Defined at:
  4983 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;		None
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;		None
  4988 ;; Return value:  Size  Location     Type
  4989 ;;		None               void
  4990 ;; Registers used:
  4991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5000 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5001 ;;Total ram usage:        1 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:   10
  5004 ;; This function calls:
  5005 ;;		_getLoad_Safe
  5006 ;;		_setOverTemp_Exceptions
  5007 ;; This function is called by:
  5008 ;;		_Temp_Main
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           
  5013                           ;psect for function _setTemp_Main
  5014  0BC5                     _setTemp_Main:	
  5015                           
  5016                           ;OverTemperature_B1.c: 58: if (Temp1.Enable == 1) {
  5017                           
  5018                           ;incstack = 0
  5019                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5020  0BC5  0021               	movlb	1	; select bank1
  5021  0BC6  1C5C               	btfss	_Temp1^(0+128),0
  5022  0BC7  0008               	return
  5023                           
  5024                           ;OverTemperature_B1.c: 59: if (Temp1.ADtoGO == 0) {
  5025  0BC8  195C               	btfsc	_Temp1^(0+128),2
  5026  0BC9  2BE7               	goto	l9886
  5027                           
  5028                           ;OverTemperature_B1.c: 60: Temp1.Time++;
  5029  0BCA  3001               	movlw	1
  5030  0BCB  07DD               	addwf	(_Temp1^(0+128)+1),f
  5031  0BCC  3000               	movlw	0
  5032  0BCD  3DDE               	addwfc	((_Temp1+1)^(0+128)+1),f
  5033                           
  5034                           ;OverTemperature_B1.c: 61: if (Temp1.Time >= 500)
  5035  0BCE  3001               	movlw	1
  5036  0BCF  025E               	subwf	((_Temp1+1)^(0+128)+1),w
  5037  0BD0  30F4               	movlw	244
  5038  0BD1  1903               	skipnz
  5039  0BD2  025D               	subwf	(_Temp1^(0+128)+1),w
  5040  0BD3  1C03               	skipc
  5041  0BD4  0008               	return
  5042                           
  5043                           ;OverTemperature_B1.c: 62: {
  5044                           ;OverTemperature_B1.c: 63: if (getLoad_Safe() == 1 && 1 == 1) {
  5045  0BD5  319A  2259  318B   	fcall	_getLoad_Safe
  5046  0BD8  3A01               	xorlw	1
  5047  0BD9  1D03               	skipz
  5048  0BDA  2BE1               	goto	l9884
  5049                           
  5050                           ;OverTemperature_B1.c: 64: Temp1.Time = 0;
  5051  0BDB  0021               	movlb	1	; select bank1
  5052  0BDC  01DD               	clrf	(_Temp1^(0+128)+1)
  5053  0BDD  01DE               	clrf	((_Temp1+1)^(0+128)+1)
  5054                           
  5055                           ;OverTemperature_B1.c: 65: Temp1.ADtoGO = 1;
  5056  0BDE  155C               	bsf	_Temp1^(0+128),2
  5057                           
  5058                           ;OverTemperature_B1.c: 66: Temp1.Safe = 0;
  5059  0BDF  125C               	bcf	_Temp1^(0+128),4
  5060                           
  5061                           ;OverTemperature_B1.c: 68: } else {
  5062  0BE0  0008               	return
  5063  0BE1                     l9884:	
  5064                           
  5065                           ;OverTemperature_B1.c: 69: Temp1.Time = 1000;
  5066  0BE1  30E8               	movlw	232
  5067  0BE2  0021               	movlb	1	; select bank1
  5068  0BE3  00DD               	movwf	(_Temp1^(0+128)+1)
  5069  0BE4  3003               	movlw	3
  5070  0BE5  00DE               	movwf	(_Temp1^(0+128)+2)
  5071                           
  5072                           ;OverTemperature_B1.c: 70: }
  5073                           ;OverTemperature_B1.c: 71: }
  5074                           ;OverTemperature_B1.c: 72: } else {
  5075  0BE6  0008               	return
  5076  0BE7                     l9886:	
  5077                           
  5078                           ;OverTemperature_B1.c: 73: Temp1.Time++;
  5079  0BE7  3001               	movlw	1
  5080  0BE8  07DD               	addwf	(_Temp1^(0+128)+1),f
  5081  0BE9  3000               	movlw	0
  5082  0BEA  3DDE               	addwfc	((_Temp1+1)^(0+128)+1),f
  5083                           
  5084                           ;OverTemperature_B1.c: 74: if (Temp1.Time >= 4) {
  5085  0BEB  3000               	movlw	0
  5086  0BEC  025E               	subwf	((_Temp1+1)^(0+128)+1),w
  5087  0BED  3004               	movlw	4
  5088  0BEE  1903               	skipnz
  5089  0BEF  025D               	subwf	(_Temp1^(0+128)+1),w
  5090  0BF0  1C03               	skipc
  5091  0BF1  0008               	return
  5092                           
  5093                           ;OverTemperature_B1.c: 75: Temp1.Time = 0;
  5094  0BF2  01DD               	clrf	(_Temp1^(0+128)+1)
  5095  0BF3  01DE               	clrf	((_Temp1+1)^(0+128)+1)
  5096                           
  5097                           ;OverTemperature_B1.c: 76: Temp1.ADtoGO = 0;
  5098  0BF4  115C               	bcf	_Temp1^(0+128),2
  5099                           
  5100                           ;OverTemperature_B1.c: 77: Temp1.AD = Temp1.ADH[1];
  5101  0BF5  0867               	movf	((_Temp1+1)^(0+128)+10),w
  5102  0BF6  01E3               	clrf	((_Temp1+1)^(0+128)+6)
  5103  0BF7  07E3               	addwf	((_Temp1+1)^(0+128)+6),f
  5104  0BF8  0866               	movf	(_Temp1^(0+128)+10),w
  5105  0BF9  01E2               	clrf	(_Temp1^(0+128)+6)
  5106  0BFA  07E2               	addwf	(_Temp1^(0+128)+6),f
  5107                           
  5108                           ;OverTemperature_B1.c: 78: if (Temp1.ERROR == 1) {
  5109  0BFB  1CDC               	btfss	_Temp1^(0+128),1
  5110  0BFC  2C14               	goto	l9908
  5111                           
  5112                           ;OverTemperature_B1.c: 79: if (Temp1.AD >= 600) {
  5113  0BFD  3002               	movlw	2
  5114  0BFE  0263               	subwf	((_Temp1+1)^(0+128)+6),w
  5115  0BFF  3058               	movlw	88
  5116  0C00  1903               	skipnz
  5117  0C01  0262               	subwf	(_Temp1^(0+128)+6),w
  5118  0C02  1C03               	skipc
  5119  0C03  2C2B               	goto	l9918
  5120                           
  5121                           ;OverTemperature_B1.c: 80: Temp1.Count++;
  5122  0C04  3001               	movlw	1
  5123  0C05  0020               	movlb	0	; select bank0
  5124  0C06  00B1               	movwf	??_setTemp_Main
  5125  0C07  0831               	movf	??_setTemp_Main,w
  5126  0C08  0021               	movlb	1	; select bank1
  5127  0C09  07DF               	addwf	(_Temp1^(0+128)+3),f
  5128                           
  5129                           ;OverTemperature_B1.c: 81: if (Temp1.Count >= 3) {
  5130  0C0A  3003               	movlw	3
  5131  0C0B  025F               	subwf	(_Temp1^(0+128)+3),w
  5132  0C0C  1C03               	skipc
  5133  0C0D  2C2D               	goto	l9920
  5134                           
  5135                           ;OverTemperature_B1.c: 82: Temp1.Count = 0;
  5136  0C0E  01DF               	clrf	(_Temp1^(0+128)+3)
  5137                           
  5138                           ;OverTemperature_B1.c: 83: setOverTemp_Exceptions(0);
  5139  0C0F  3000               	movlw	0
  5140  0C10  3192  223D  318B   	fcall	_setOverTemp_Exceptions
  5141                           
  5142                           ;OverTemperature_B1.c: 84: }
  5143                           ;OverTemperature_B1.c: 85: } else {
  5144  0C13  2C2D               	goto	l9920
  5145  0C14                     l9908:	
  5146                           ;OverTemperature_B1.c: 87: }
  5147                           ;OverTemperature_B1.c: 88: } else {
  5148                           
  5149                           ;OverTemperature_B1.c: 86: Temp1.Count = 0;
  5150                           
  5151                           
  5152                           ;OverTemperature_B1.c: 89: if (Temp1.AD <= 550) {
  5153  0C14  3002               	movlw	2
  5154  0C15  0263               	subwf	((_Temp1+1)^(0+128)+6),w
  5155  0C16  3027               	movlw	39
  5156  0C17  1903               	skipnz
  5157  0C18  0262               	subwf	(_Temp1^(0+128)+6),w
  5158  0C19  1803               	skipnc
  5159  0C1A  2C2B               	goto	l9918
  5160                           
  5161                           ;OverTemperature_B1.c: 90: Temp1.Count++;
  5162  0C1B  3001               	movlw	1
  5163  0C1C  0020               	movlb	0	; select bank0
  5164  0C1D  00B1               	movwf	??_setTemp_Main
  5165  0C1E  0831               	movf	??_setTemp_Main,w
  5166  0C1F  0021               	movlb	1	; select bank1
  5167  0C20  07DF               	addwf	(_Temp1^(0+128)+3),f
  5168                           
  5169                           ;OverTemperature_B1.c: 91: if (Temp1.Count >= 3) {
  5170  0C21  3003               	movlw	3
  5171  0C22  025F               	subwf	(_Temp1^(0+128)+3),w
  5172  0C23  1C03               	skipc
  5173  0C24  2C2D               	goto	l9920
  5174                           
  5175                           ;OverTemperature_B1.c: 92: Temp1.Count = 0;
  5176  0C25  01DF               	clrf	(_Temp1^(0+128)+3)
  5177                           
  5178                           ;OverTemperature_B1.c: 93: setOverTemp_Exceptions(1);
  5179  0C26  3001               	movlw	1
  5180  0C27  3192  223D  318B   	fcall	_setOverTemp_Exceptions
  5181                           
  5182                           ;OverTemperature_B1.c: 94: }
  5183                           ;OverTemperature_B1.c: 95: } else {
  5184  0C2A  2C2D               	goto	l9920
  5185  0C2B                     l9918:	
  5186                           
  5187                           ;OverTemperature_B1.c: 96: Temp1.Count = 0;
  5188  0C2B  0021               	movlb	1	; select bank1
  5189  0C2C  01DF               	clrf	(_Temp1^(0+128)+3)
  5190  0C2D                     l9920:	
  5191                           
  5192                           ;OverTemperature_B1.c: 97: }
  5193                           ;OverTemperature_B1.c: 98: }
  5194                           ;OverTemperature_B1.c: 99: if (Temp1.ERROR == 0) {
  5195  0C2D  0021               	movlb	1	; select bank1
  5196  0C2E  1CDC               	btfss	_Temp1^(0+128),1
  5197                           
  5198                           ;OverTemperature_B1.c: 100: Temp1.Safe = 1;
  5199  0C2F  165C               	bsf	_Temp1^(0+128),4
  5200                           
  5201                           ;OverTemperature_B1.c: 101: }
  5202                           ;OverTemperature_B1.c: 102: product->Data[24]=Temp1.AD >> 8;
  5203  0C30  0863               	movf	((_Temp1+1)^(0+128)+6),w
  5204  0C31  0020               	movlb	0	; select bank0
  5205  0C32  00B1               	movwf	??_setTemp_Main
  5206  0C33  086D               	movf	_product,w
  5207  0C34  3E18               	addlw	24
  5208  0C35  0086               	movwf	6
  5209  0C36  3002               	movlw	2	; select bank4/5
  5210  0C37  0087               	movwf	7
  5211  0C38  0831               	movf	??_setTemp_Main,w
  5212  0C39  0081               	movwf	1
  5213                           
  5214                           ;OverTemperature_B1.c: 103: product->Data[25]=Temp1.AD;
  5215  0C3A  0021               	movlb	1	; select bank1
  5216  0C3B  0862               	movf	(_Temp1^(0+128)+6),w
  5217  0C3C  0020               	movlb	0	; select bank0
  5218  0C3D  00B1               	movwf	??_setTemp_Main
  5219  0C3E  086D               	movf	_product,w
  5220  0C3F  3E19               	addlw	25
  5221  0C40  0086               	movwf	6
  5222  0C41  3002               	movlw	2	; select bank4/5
  5223  0C42  0087               	movwf	7
  5224  0C43  0831               	movf	??_setTemp_Main,w
  5225  0C44  0081               	movwf	1
  5226                           
  5227                           ;OverTemperature_B1.c: 106: Temp1.ADH[0] = 0;
  5228  0C45  0021               	movlb	1	; select bank1
  5229  0C46  01E4               	clrf	(_Temp1^(0+128)+8)
  5230  0C47  01E5               	clrf	((_Temp1+1)^(0+128)+8)
  5231                           
  5232                           ;OverTemperature_B1.c: 107: Temp1.ADH[1] = 0;
  5233  0C48  01E6               	clrf	(_Temp1^(0+128)+10)
  5234  0C49  01E7               	clrf	((_Temp1+1)^(0+128)+10)
  5235  0C4A  0008               	return
  5236  0C4B                     __end_of_setTemp_Main:	
  5237                           
  5238                           	psect	text12
  5239  123D                     __ptext12:	
  5240 ;; *************** function _setOverTemp_Exceptions *****************
  5241 ;; Defined at:
  5242 ;;		line 114 in file "../src/OverTemperature_B1.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  command         1    wreg     unsigned char 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;  command         1   16[BANK0 ] unsigned char 
  5247 ;;  i               1   15[BANK0 ] unsigned char 
  5248 ;; Return value:  Size  Location     Type
  5249 ;;		None               void
  5250 ;; Registers used:
  5251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5261 ;;Total ram usage:        3 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    9
  5264 ;; This function calls:
  5265 ;;		_DimmerLights_Exceptions
  5266 ;;		_setBuz
  5267 ;;		_setLED
  5268 ;;		_setRF_Enable
  5269 ;;		_setSw_Enable
  5270 ;; This function is called by:
  5271 ;;		_setTemp_Main
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           
  5276                           ;psect for function _setOverTemp_Exceptions
  5277  123D                     _setOverTemp_Exceptions:	
  5278                           
  5279                           ;incstack = 0
  5280                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5281                           ;setOverTemp_Exceptions@command stored from wreg
  5282  123D  0020               	movlb	0	; select bank0
  5283  123E  00B0               	movwf	setOverTemp_Exceptions@command
  5284                           
  5285                           ;OverTemperature_B1.c: 115: char i = command == 1 ? 0 : 1;
  5286  123F  0830               	movf	setOverTemp_Exceptions@command,w
  5287  1240  3A01               	xorlw	1
  5288  1241  3000               	movlw	0
  5289  1242  1D03               	skipz
  5290  1243  3001               	movlw	1
  5291  1244  00AE               	movwf	??_setOverTemp_Exceptions
  5292  1245  082E               	movf	??_setOverTemp_Exceptions,w
  5293  1246  00AF               	movwf	setOverTemp_Exceptions@i
  5294                           
  5295                           ;OverTemperature_B1.c: 116: Temp1.ERROR = command;
  5296  1247  0830               	movf	setOverTemp_Exceptions@command,w
  5297  1248  0021               	movlb	1	; select bank1
  5298  1249  10DC               	bcf	_Temp1^(0+128),1
  5299  124A  1D03               	skipz
  5300  124B  14DC               	bsf	_Temp1^(0+128),1
  5301                           
  5302                           ;OverTemperature_B1.c: 117: Temp1.Safe = i;
  5303  124C  0020               	movlb	0	; select bank0
  5304  124D  082F               	movf	setOverTemp_Exceptions@i,w
  5305  124E  0021               	movlb	1	; select bank1
  5306  124F  125C               	bcf	_Temp1^(0+128),4
  5307  1250  1D03               	skipz
  5308  1251  165C               	bsf	_Temp1^(0+128),4
  5309                           
  5310                           ;OverTemperature_B1.c: 118: if (command == 1) {
  5311  1252  0020               	movlb	0	; select bank0
  5312  1253  0830               	movf	setOverTemp_Exceptions@command,w
  5313  1254  3A01               	xorlw	1
  5314  1255  1D03               	skipz
  5315  1256  2A5C               	goto	l9422
  5316                           
  5317                           ;OverTemperature_B1.c: 119: DimmerLights_Exceptions(1);
  5318  1257  3001               	movlw	1
  5319  1258  3193  23D2  3192   	fcall	_DimmerLights_Exceptions
  5320                           
  5321                           ;OverTemperature_B1.c: 123: } else if (command == 0) {
  5322  125B  2A68               	goto	l9426
  5323  125C                     l9422:	
  5324  125C  0020               	movlb	0	; select bank0
  5325  125D  08B0               	movf	setOverTemp_Exceptions@command,f
  5326  125E  1D03               	skipz
  5327  125F  2A68               	goto	l9426
  5328                           
  5329                           ;OverTemperature_B1.c: 124: setBuz(2, 100);
  5330  1260  3064               	movlw	100
  5331  1261  00A9               	movwf	setBuz@time
  5332  1262  3000               	movlw	0
  5333  1263  00AA               	movwf	setBuz@time+1
  5334  1264  3002               	movlw	2
  5335  1265  3195  256B  3192   	fcall	_setBuz
  5336  1268                     l9426:	
  5337                           
  5338                           ;OverTemperature_B1.c: 125: }
  5339                           ;OverTemperature_B1.c: 128: setLED(99, command + 10);
  5340  1268  0020               	movlb	0	; select bank0
  5341  1269  0830               	movf	setOverTemp_Exceptions@command,w
  5342  126A  3E0A               	addlw	10
  5343  126B  00AE               	movwf	??_setOverTemp_Exceptions
  5344  126C  082E               	movf	??_setOverTemp_Exceptions,w
  5345  126D  00A2               	movwf	setLED@command
  5346  126E  3063               	movlw	99
  5347  126F  3196  261F  3192   	fcall	_setLED
  5348                           
  5349                           ;OverTemperature_B1.c: 130: setSw_Enable(i);
  5350  1272  0020               	movlb	0	; select bank0
  5351  1273  082F               	movf	setOverTemp_Exceptions@i,w
  5352  1274  319D  2594  3192   	fcall	_setSw_Enable
  5353                           
  5354                           ;OverTemperature_B1.c: 132: setRF_Enable(i);
  5355  1277  0020               	movlb	0	; select bank0
  5356  1278  082F               	movf	setOverTemp_Exceptions@i,w
  5357  1279  319B  2326         	fcall	_setRF_Enable
  5358  127B  0008               	return
  5359  127C                     __end_of_setOverTemp_Exceptions:	
  5360                           
  5361                           	psect	text13
  5362  1A59                     __ptext13:	
  5363 ;; *************** function _getLoad_Safe *****************
  5364 ;; Defined at:
  5365 ;;		line 296 in file "../src/OverLoad_B1.c"
  5366 ;; Parameters:    Size  Location     Type
  5367 ;;		None
  5368 ;; Auto vars:     Size  Location     Type
  5369 ;;  result          1    0[BANK0 ] unsigned char 
  5370 ;; Return value:  Size  Location     Type
  5371 ;;                  1    wreg      unsigned char 
  5372 ;; Registers used:
  5373 ;;		wreg, status,2
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5382 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5383 ;;Total ram usage:        1 bytes
  5384 ;; Hardware stack levels used:    1
  5385 ;; Hardware stack levels required when called:    5
  5386 ;; This function calls:
  5387 ;;		Nothing
  5388 ;; This function is called by:
  5389 ;;		_setTemp_Main
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           
  5394                           ;psect for function _getLoad_Safe
  5395  1A59                     _getLoad_Safe:	
  5396                           
  5397                           ;OverLoad_B1.c: 297: char result = Load1.Safe;
  5398                           
  5399                           ;incstack = 0
  5400                           ; Regs used in _getLoad_Safe: [wreg+status,2]
  5401  1A59  3000               	movlw	0
  5402  1A5A  0023               	movlb	3	; select bank3
  5403  1A5B  19A0               	btfsc	_Load1^(0+384),3
  5404  1A5C  3001               	movlw	1
  5405  1A5D  0020               	movlb	0	; select bank0
  5406  1A5E  00A0               	movwf	getLoad_Safe@result
  5407                           
  5408                           ;OverLoad_B1.c: 298: return result;
  5409  1A5F  0820               	movf	getLoad_Safe@result,w
  5410  1A60  0008               	return
  5411  1A61                     __end_of_getLoad_Safe:	
  5412                           
  5413                           	psect	text14
  5414  19E5                     __ptext14:	
  5415 ;; *************** function _Temp_Initialization *****************
  5416 ;; Defined at:
  5417 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5418 ;; Parameters:    Size  Location     Type
  5419 ;;		None
  5420 ;; Auto vars:     Size  Location     Type
  5421 ;;		None
  5422 ;; Return value:  Size  Location     Type
  5423 ;;		None               void
  5424 ;; Registers used:
  5425 ;;		status,2, status,0, pclath, cstack
  5426 ;; Tracked objects:
  5427 ;;		On entry : 0/0
  5428 ;;		On exit  : 0/0
  5429 ;;		Unchanged: 0/0
  5430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5435 ;;Total ram usage:        0 bytes
  5436 ;; Hardware stack levels used:    1
  5437 ;; Hardware stack levels required when called:    6
  5438 ;; This function calls:
  5439 ;;		_setTemp_Initialization
  5440 ;; This function is called by:
  5441 ;;		_main
  5442 ;; This function uses a non-reentrant model
  5443 ;;
  5444                           
  5445                           
  5446                           ;psect for function _Temp_Initialization
  5447  19E5                     _Temp_Initialization:	
  5448                           
  5449                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5450                           
  5451                           ;incstack = 0
  5452                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5453  19E5  3199  21E2         	fcall	_setTemp_Initialization
  5454  19E7  0008               	return
  5455  19E8                     __end_of_Temp_Initialization:	
  5456                           
  5457                           	psect	text15
  5458  19E2                     __ptext15:	
  5459 ;; *************** function _setTemp_Initialization *****************
  5460 ;; Defined at:
  5461 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;		None
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;		None
  5466 ;; Return value:  Size  Location     Type
  5467 ;;		None               void
  5468 ;; Registers used:
  5469 ;;		None
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5479 ;;Total ram usage:        0 bytes
  5480 ;; Hardware stack levels used:    1
  5481 ;; Hardware stack levels required when called:    5
  5482 ;; This function calls:
  5483 ;;		Nothing
  5484 ;; This function is called by:
  5485 ;;		_Temp_Initialization
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           
  5490                           ;psect for function _setTemp_Initialization
  5491  19E2                     _setTemp_Initialization:	
  5492                           
  5493                           ;OverTemperature_B1.c: 46: Temp1.Safe = 1;
  5494                           
  5495                           ;incstack = 0
  5496                           ; Regs used in _setTemp_Initialization: []
  5497  19E2  0021               	movlb	1	; select bank1
  5498  19E3  165C               	bsf	_Temp1^(0+128),4
  5499  19E4  0008               	return
  5500  19E5                     __end_of_setTemp_Initialization:	
  5501                           
  5502                           	psect	text16
  5503  1A51                     __ptext16:	
  5504 ;; *************** function _Switch_Main *****************
  5505 ;; Defined at:
  5506 ;;		line 67 in file "../src/Switch_B1.c"
  5507 ;; Parameters:    Size  Location     Type
  5508 ;;		None
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;		None
  5511 ;; Return value:  Size  Location     Type
  5512 ;;		None               void
  5513 ;; Registers used:
  5514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5524 ;;Total ram usage:        0 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:   11
  5527 ;; This function calls:
  5528 ;;		_setSw_Main
  5529 ;; This function is called by:
  5530 ;;		_main
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           
  5535                           ;psect for function _Switch_Main
  5536  1A51                     _Switch_Main:	
  5537                           
  5538                           ;Switch_B1.c: 69: setSw_Main(1);
  5539                           
  5540                           ;incstack = 0
  5541                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5542  1A51  3001               	movlw	1
  5543  1A52  3183  237C  319A   	fcall	_setSw_Main
  5544                           
  5545                           ;Switch_B1.c: 73: setSw_Main(2);
  5546  1A55  3002               	movlw	2
  5547  1A56  3183  237C         	fcall	_setSw_Main
  5548  1A58  0008               	return
  5549  1A59                     __end_of_Switch_Main:	
  5550                           
  5551                           	psect	text17
  5552  037C                     __ptext17:	
  5553 ;; *************** function _setSw_Main *****************
  5554 ;; Defined at:
  5555 ;;		line 117 in file "../src/Switch_B1.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;  sw              1    wreg     unsigned char 
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;  sw              1   73[BANK0 ] unsigned char 
  5560 ;; Return value:  Size  Location     Type
  5561 ;;		None               void
  5562 ;; Registers used:
  5563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5570 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5571 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5572 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5573 ;;Total ram usage:        5 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:   10
  5576 ;; This function calls:
  5577 ;;		_SwPointSelect
  5578 ;;		_Sw_DimmerAdjFunc
  5579 ;;		_Sw_DimmerOffFunc
  5580 ;;		_Sw_DimmerOnFunc
  5581 ;;		_setBuz
  5582 ;;		_setRF_Learn
  5583 ;; This function is called by:
  5584 ;;		_Switch_Main
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           
  5589                           ;psect for function _setSw_Main
  5590  037C                     _setSw_Main:	
  5591                           
  5592                           ;incstack = 0
  5593                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5594                           ;setSw_Main@sw stored from wreg
  5595  037C  0020               	movlb	0	; select bank0
  5596  037D  00E9               	movwf	setSw_Main@sw
  5597                           
  5598                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5599  037E  0869               	movf	setSw_Main@sw,w
  5600  037F  319C  247B  3183   	fcall	_SwPointSelect
  5601                           
  5602                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5603  0382  0020               	movlb	0	; select bank0
  5604  0383  086C               	movf	_Sw,w
  5605  0384  0086               	movwf	6
  5606  0385  3001               	movlw	1	; select bank2/3
  5607  0386  0087               	movwf	7
  5608  0387  1C01               	btfss	1,0
  5609  0388  0008               	return
  5610                           
  5611                           ;Switch_B1.c: 131: if (sw == 1) {
  5612  0389  0869               	movf	setSw_Main@sw,w
  5613  038A  3A01               	xorlw	1
  5614  038B  1D03               	skipz
  5615  038C  2B99               	goto	l10068
  5616                           
  5617                           ;Switch_B1.c: 132: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  5618  038D  01E7               	clrf	_setSw_Main$6944
  5619  038E  0AE7               	incf	_setSw_Main$6944,f
  5620  038F  1F0C               	btfss	12,6	;volatile
  5621  0390  1A0C               	btfsc	12,4	;volatile
  5622  0391  2B93               	goto	l10066
  5623  0392  01E7               	clrf	_setSw_Main$6944
  5624  0393                     l10066:	
  5625  0393  086C               	movf	_Sw,w
  5626  0394  0086               	movwf	6
  5627  0395  3001               	movlw	1	; select bank2/3
  5628  0396  0087               	movwf	7
  5629  0397  0867               	movf	_setSw_Main$6944,w
  5630  0398  2BA8               	goto	L2
  5631  0399                     l10068:	
  5632                           ;Switch_B1.c: 133: } else if (sw == 2) {
  5633                           
  5634  0399  0869               	movf	setSw_Main@sw,w
  5635  039A  3A02               	xorlw	2
  5636  039B  1D03               	skipz
  5637  039C  2BAB               	goto	l10078
  5638                           
  5639                           ;Switch_B1.c: 134: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  5640  039D  01E8               	clrf	_setSw_Main$6945
  5641  039E  0AE8               	incf	_setSw_Main$6945,f
  5642  039F  1C0C               	btfss	12,0	;volatile
  5643  03A0  188D               	btfsc	13,1	;volatile
  5644  03A1  2BA3               	goto	l10076
  5645  03A2  01E8               	clrf	_setSw_Main$6945
  5646  03A3                     l10076:	
  5647  03A3  086C               	movf	_Sw,w
  5648  03A4  0086               	movwf	6
  5649  03A5  3001               	movlw	1	; select bank2/3
  5650  03A6  0087               	movwf	7
  5651  03A7  0868               	movf	_setSw_Main$6945,w
  5652  03A8                     L2:	
  5653  03A8  1081               	bcf	1,1
  5654  03A9  1D03               	skipz
  5655  03AA  1481               	bsf	1,1
  5656  03AB                     l10078:	
  5657                           
  5658                           ;Switch_B1.c: 135: }
  5659                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  5660  03AB  086C               	movf	_Sw,w
  5661  03AC  0086               	movwf	6
  5662  03AD  3001               	movlw	1	; select bank2/3
  5663  03AE  0087               	movwf	7
  5664  03AF  1C81               	btfss	1,1
  5665  03B0  2C75               	goto	l10126
  5666                           
  5667                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  5668  03B1  086C               	movf	_Sw,w
  5669  03B2  0086               	movwf	6
  5670  03B3  3001               	movlw	1	; select bank2/3
  5671  03B4  0087               	movwf	7
  5672  03B5  1901               	btfsc	1,2
  5673  03B6  2BD8               	goto	l10092
  5674                           
  5675                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  5676  03B7  3001               	movlw	1
  5677  03B8  00E5               	movwf	??_setSw_Main
  5678  03B9  086C               	movf	_Sw,w
  5679  03BA  3E02               	addlw	2
  5680  03BB  0086               	movwf	6
  5681  03BC  3001               	movlw	1	; select bank2/3
  5682  03BD  0087               	movwf	7
  5683  03BE  0865               	movf	??_setSw_Main,w
  5684  03BF  0781               	addwf	1,f
  5685                           
  5686                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  5687  03C0  086C               	movf	_Sw,w
  5688  03C1  3E02               	addlw	2
  5689  03C2  0086               	movwf	6
  5690  03C3  3001               	movlw	1	; select bank2/3
  5691  03C4  0087               	movwf	7
  5692  03C5  3005               	movlw	5
  5693  03C6  0201               	subwf	1,w
  5694  03C7  1C03               	skipc
  5695  03C8  0008               	return
  5696                           
  5697                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  5698  03C9  086C               	movf	_Sw,w
  5699  03CA  3E02               	addlw	2
  5700  03CB  0086               	movwf	6
  5701  03CC  3001               	movlw	1	; select bank2/3
  5702  03CD  0087               	movwf	7
  5703  03CE  0181               	clrf	1
  5704                           
  5705                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  5706  03CF  086C               	movf	_Sw,w
  5707  03D0  0086               	movwf	6
  5708  03D1  3001               	movlw	1	; select bank2/3
  5709  03D2  0087               	movwf	7
  5710  03D3  1501               	bsf	1,2
  5711                           
  5712                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  5713  03D4  0869               	movf	setSw_Main@sw,w
  5714  03D5  318A  2267         	fcall	_Sw_DimmerOnFunc
  5715                           
  5716                           ;Switch_B1.c: 173: }
  5717                           ;Switch_B1.c: 174: } else {
  5718  03D7  0008               	return
  5719  03D8                     l10092:	
  5720                           
  5721                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  5722  03D8  0020               	movlb	0	; select bank0
  5723  03D9  086C               	movf	_Sw,w
  5724  03DA  0086               	movwf	6
  5725  03DB  3001               	movlw	1	; select bank2/3
  5726  03DC  0087               	movwf	7
  5727  03DD  1981               	btfsc	1,3
  5728  03DE  2C05               	goto	l10102
  5729                           
  5730                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  5731  03DF  086C               	movf	_Sw,w
  5732  03E0  3E03               	addlw	3
  5733  03E1  0086               	movwf	6
  5734  03E2  3001               	movlw	1	; select bank2/3
  5735  03E3  0087               	movwf	7
  5736  03E4  3001               	movlw	1
  5737  03E5  0781               	addwf	1,f
  5738  03E6  3141               	addfsr 1,1
  5739  03E7  1803               	skipnc
  5740  03E8  0A81               	incf	1,f
  5741                           
  5742                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  5743  03E9  086C               	movf	_Sw,w
  5744  03EA  3E03               	addlw	3
  5745  03EB  0086               	movwf	6
  5746  03EC  3001               	movlw	1	; select bank2/3
  5747  03ED  0087               	movwf	7
  5748  03EE  3F40               	moviw [0]fsr1
  5749  03EF  00E5               	movwf	??_setSw_Main
  5750  03F0  3F41               	moviw [1]fsr1
  5751  03F1  00E6               	movwf	??_setSw_Main+1
  5752  03F2  3000               	movlw	0
  5753  03F3  0266               	subwf	??_setSw_Main+1,w
  5754  03F4  3096               	movlw	150
  5755  03F5  1903               	skipnz
  5756  03F6  0265               	subwf	??_setSw_Main,w
  5757  03F7  1C03               	skipc
  5758  03F8  0008               	return
  5759                           
  5760                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  5761  03F9  086C               	movf	_Sw,w
  5762  03FA  3E03               	addlw	3
  5763  03FB  0086               	movwf	6
  5764  03FC  3001               	movlw	1	; select bank2/3
  5765  03FD  0087               	movwf	7
  5766  03FE  3000               	movlw	0
  5767  03FF  3FC0               	movwi [0]fsr1
  5768  0400  3FC1               	movwi [1]fsr1
  5769                           
  5770                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  5771  0401  0869               	movf	setSw_Main@sw,w
  5772  0402  3194  241D         	fcall	_Sw_DimmerAdjFunc
  5773                           
  5774                           ;Switch_B1.c: 184: }
  5775                           ;Switch_B1.c: 185: } else {
  5776  0404  0008               	return
  5777  0405                     l10102:	
  5778                           
  5779                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  5780  0405  0020               	movlb	0	; select bank0
  5781  0406  086C               	movf	_Sw,w
  5782  0407  0086               	movwf	6
  5783  0408  3001               	movlw	1	; select bank2/3
  5784  0409  0087               	movwf	7
  5785  040A  1A01               	btfsc	1,4
  5786  040B  2C43               	goto	l10116
  5787                           
  5788                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  5789  040C  086C               	movf	_Sw,w
  5790  040D  3E05               	addlw	5
  5791  040E  0086               	movwf	6
  5792  040F  3001               	movlw	1	; select bank2/3
  5793  0410  0087               	movwf	7
  5794  0411  3001               	movlw	1
  5795  0412  0781               	addwf	1,f
  5796  0413  3141               	addfsr 1,1
  5797  0414  1803               	skipnc
  5798  0415  0A81               	incf	1,f
  5799                           
  5800                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  5801  0416  086C               	movf	_Sw,w
  5802  0417  3E05               	addlw	5
  5803  0418  0086               	movwf	6
  5804  0419  3001               	movlw	1	; select bank2/3
  5805  041A  0087               	movwf	7
  5806  041B  3F40               	moviw [0]fsr1
  5807  041C  00E5               	movwf	??_setSw_Main
  5808  041D  3F41               	moviw [1]fsr1
  5809  041E  00E6               	movwf	??_setSw_Main+1
  5810  041F  3000               	movlw	0
  5811  0420  0266               	subwf	??_setSw_Main+1,w
  5812  0421  3096               	movlw	150
  5813  0422  1903               	skipnz
  5814  0423  0265               	subwf	??_setSw_Main,w
  5815  0424  1C03               	skipc
  5816  0425  0008               	return
  5817                           
  5818                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  5819  0426  086C               	movf	_Sw,w
  5820  0427  3E05               	addlw	5
  5821  0428  0086               	movwf	6
  5822  0429  3001               	movlw	1	; select bank2/3
  5823  042A  0087               	movwf	7
  5824  042B  3000               	movlw	0
  5825  042C  3FC0               	movwi [0]fsr1
  5826  042D  3FC1               	movwi [1]fsr1
  5827                           
  5828                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  5829  042E  086C               	movf	_Sw,w
  5830  042F  0086               	movwf	6
  5831  0430  3001               	movlw	1	; select bank2/3
  5832  0431  0087               	movwf	7
  5833  0432  1601               	bsf	1,4
  5834                           
  5835                           ;Switch_B1.c: 193: setRF_Learn(1);
  5836  0433  3001               	movlw	1
  5837  0434  319A  2249  3183   	fcall	_setRF_Learn
  5838                           
  5839                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  5840  0437  0021               	movlb	1	; select bank1
  5841  0438  1C21               	btfss	(_myMain^(0+128)+1),0
  5842  0439  0008               	return
  5843                           
  5844                           ;Switch_B1.c: 196: setBuz(2, 100);
  5845  043A  3064               	movlw	100
  5846  043B  0020               	movlb	0	; select bank0
  5847  043C  00A9               	movwf	setBuz@time
  5848  043D  3000               	movlw	0
  5849  043E  00AA               	movwf	setBuz@time+1
  5850  043F  3002               	movlw	2
  5851  0440  3195  256B         	fcall	_setBuz
  5852                           
  5853                           ;Switch_B1.c: 197: }
  5854                           ;Switch_B1.c: 199: }
  5855                           ;Switch_B1.c: 200: } else {
  5856  0442  0008               	return
  5857  0443                     l10116:	
  5858                           
  5859                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  5860  0443  0020               	movlb	0	; select bank0
  5861  0444  086C               	movf	_Sw,w
  5862  0445  0086               	movwf	6
  5863  0446  3001               	movlw	1	; select bank2/3
  5864  0447  0087               	movwf	7
  5865  0448  1A81               	btfsc	1,5
  5866  0449  0008               	return
  5867                           
  5868                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  5869  044A  086C               	movf	_Sw,w
  5870  044B  3E07               	addlw	7
  5871  044C  0086               	movwf	6
  5872  044D  3001               	movlw	1	; select bank2/3
  5873  044E  0087               	movwf	7
  5874  044F  3001               	movlw	1
  5875  0450  0781               	addwf	1,f
  5876  0451  3141               	addfsr 1,1
  5877  0452  1803               	skipnc
  5878  0453  0A81               	incf	1,f
  5879                           
  5880                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  5881  0454  086C               	movf	_Sw,w
  5882  0455  3E07               	addlw	7
  5883  0456  0086               	movwf	6
  5884  0457  3001               	movlw	1	; select bank2/3
  5885  0458  0087               	movwf	7
  5886  0459  3F40               	moviw [0]fsr1
  5887  045A  00E5               	movwf	??_setSw_Main
  5888  045B  3F41               	moviw [1]fsr1
  5889  045C  00E6               	movwf	??_setSw_Main+1
  5890  045D  3001               	movlw	1
  5891  045E  0266               	subwf	??_setSw_Main+1,w
  5892  045F  302C               	movlw	44
  5893  0460  1903               	skipnz
  5894  0461  0265               	subwf	??_setSw_Main,w
  5895  0462  1C03               	skipc
  5896  0463  0008               	return
  5897                           
  5898                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5899  0464  086C               	movf	_Sw,w
  5900  0465  3E07               	addlw	7
  5901  0466  0086               	movwf	6
  5902  0467  3001               	movlw	1	; select bank2/3
  5903  0468  0087               	movwf	7
  5904  0469  3000               	movlw	0
  5905  046A  3FC0               	movwi [0]fsr1
  5906  046B  3FC1               	movwi [1]fsr1
  5907                           
  5908                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  5909  046C  086C               	movf	_Sw,w
  5910  046D  0086               	movwf	6
  5911  046E  3001               	movlw	1	; select bank2/3
  5912  046F  0087               	movwf	7
  5913  0470  1681               	bsf	1,5
  5914                           
  5915                           ;Switch_B1.c: 208: setRF_Learn(0);
  5916  0471  3000               	movlw	0
  5917  0472  319A  2249         	fcall	_setRF_Learn
  5918                           
  5919                           ;Switch_B1.c: 211: }
  5920                           ;Switch_B1.c: 212: }
  5921                           ;Switch_B1.c: 213: }
  5922                           ;Switch_B1.c: 214: }
  5923                           ;Switch_B1.c: 215: }
  5924                           ;Switch_B1.c: 216: } else {
  5925  0474  0008               	return
  5926  0475                     l10126:	
  5927                           
  5928                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  5929  0475  0020               	movlb	0	; select bank0
  5930  0476  086C               	movf	_Sw,w
  5931  0477  0086               	movwf	6
  5932  0478  3001               	movlw	1	; select bank2/3
  5933  0479  0087               	movwf	7
  5934  047A  1D01               	btfss	1,2
  5935  047B  0008               	return
  5936                           
  5937                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  5938  047C  3001               	movlw	1
  5939  047D  00E5               	movwf	??_setSw_Main
  5940  047E  086C               	movf	_Sw,w
  5941  047F  3E02               	addlw	2
  5942  0480  0086               	movwf	6
  5943  0481  3001               	movlw	1	; select bank2/3
  5944  0482  0087               	movwf	7
  5945  0483  0865               	movf	??_setSw_Main,w
  5946  0484  0781               	addwf	1,f
  5947                           
  5948                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  5949  0485  086C               	movf	_Sw,w
  5950  0486  3E02               	addlw	2
  5951  0487  0086               	movwf	6
  5952  0488  3001               	movlw	1	; select bank2/3
  5953  0489  0087               	movwf	7
  5954  048A  3005               	movlw	5
  5955  048B  0201               	subwf	1,w
  5956  048C  1C03               	skipc
  5957  048D  0008               	return
  5958                           
  5959                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  5960  048E  086C               	movf	_Sw,w
  5961  048F  3E02               	addlw	2
  5962  0490  0086               	movwf	6
  5963  0491  3001               	movlw	1	; select bank2/3
  5964  0492  0087               	movwf	7
  5965  0493  0181               	clrf	1
  5966                           
  5967                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  5968  0494  086C               	movf	_Sw,w
  5969  0495  0086               	movwf	6
  5970  0496  3001               	movlw	1	; select bank2/3
  5971  0497  0087               	movwf	7
  5972  0498  1101               	bcf	1,2
  5973                           
  5974                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  5975  0499  086C               	movf	_Sw,w
  5976  049A  3E03               	addlw	3
  5977  049B  0086               	movwf	6
  5978  049C  3001               	movlw	1	; select bank2/3
  5979  049D  0087               	movwf	7
  5980  049E  3000               	movlw	0
  5981  049F  3FC0               	movwi [0]fsr1
  5982  04A0  3FC1               	movwi [1]fsr1
  5983                           
  5984                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  5985  04A1  086C               	movf	_Sw,w
  5986  04A2  0086               	movwf	6
  5987  04A3  3001               	movlw	1	; select bank2/3
  5988  04A4  0087               	movwf	7
  5989  04A5  1181               	bcf	1,3
  5990                           
  5991                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  5992  04A6  086C               	movf	_Sw,w
  5993  04A7  3E05               	addlw	5
  5994  04A8  0086               	movwf	6
  5995  04A9  3001               	movlw	1	; select bank2/3
  5996  04AA  0087               	movwf	7
  5997  04AB  3000               	movlw	0
  5998  04AC  3FC0               	movwi [0]fsr1
  5999  04AD  3FC1               	movwi [1]fsr1
  6000                           
  6001                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  6002  04AE  086C               	movf	_Sw,w
  6003  04AF  0086               	movwf	6
  6004  04B0  3001               	movlw	1	; select bank2/3
  6005  04B1  0087               	movwf	7
  6006  04B2  1201               	bcf	1,4
  6007                           
  6008                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  6009  04B3  086C               	movf	_Sw,w
  6010  04B4  3E07               	addlw	7
  6011  04B5  0086               	movwf	6
  6012  04B6  3001               	movlw	1	; select bank2/3
  6013  04B7  0087               	movwf	7
  6014  04B8  3000               	movlw	0
  6015  04B9  3FC0               	movwi [0]fsr1
  6016  04BA  3FC1               	movwi [1]fsr1
  6017                           
  6018                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  6019  04BB  086C               	movf	_Sw,w
  6020  04BC  0086               	movwf	6
  6021  04BD  3001               	movlw	1	; select bank2/3
  6022  04BE  0087               	movwf	7
  6023  04BF  1281               	bcf	1,5
  6024                           
  6025                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  6026  04C0  0869               	movf	setSw_Main@sw,w
  6027  04C1  3189  2187  3183   	fcall	_Sw_DimmerOffFunc
  6028                           
  6029                           ;Switch_B1.c: 232: setRF_Learn(0);
  6030  04C4  3000               	movlw	0
  6031  04C5  319A  2249         	fcall	_setRF_Learn
  6032  04C7  0008               	return
  6033  04C8                     __end_of_setSw_Main:	
  6034                           
  6035                           	psect	text18
  6036  1A49                     __ptext18:	
  6037 ;; *************** function _setRF_Learn *****************
  6038 ;; Defined at:
  6039 ;;		line 23 in file "../src/RF_Control_B1.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;  command         1    wreg     unsigned char 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  command         1    0[BANK0 ] unsigned char 
  6044 ;; Return value:  Size  Location     Type
  6045 ;;		None               void
  6046 ;; Registers used:
  6047 ;;		wreg
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6056 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;Total ram usage:        1 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:    5
  6060 ;; This function calls:
  6061 ;;		Nothing
  6062 ;; This function is called by:
  6063 ;;		_setSw_Main
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           
  6068                           ;psect for function _setRF_Learn
  6069  1A49                     _setRF_Learn:	
  6070                           
  6071                           ;incstack = 0
  6072                           ; Regs used in _setRF_Learn: [wreg]
  6073                           ;setRF_Learn@command stored from wreg
  6074  1A49  0020               	movlb	0	; select bank0
  6075  1A4A  00A0               	movwf	setRF_Learn@command
  6076                           
  6077                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  6078  1A4B  0820               	movf	setRF_Learn@command,w
  6079  1A4C  0021               	movlb	1	; select bank1
  6080  1A4D  133F               	bcf	_RF1^(0+128),6
  6081  1A4E  1D03               	skipz
  6082  1A4F  173F               	bsf	_RF1^(0+128),6
  6083  1A50  0008               	return
  6084  1A51                     __end_of_setRF_Learn:	
  6085                           
  6086                           	psect	text19
  6087  0A67                     __ptext19:	
  6088 ;; *************** function _Sw_DimmerOnFunc *****************
  6089 ;; Defined at:
  6090 ;;		line 241 in file "../src/Switch_B1.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  sw              1    wreg     unsigned char 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  sw              1   67[BANK0 ] unsigned char 
  6095 ;;  Idle            1   66[BANK0 ] unsigned char 
  6096 ;; Return value:  Size  Location     Type
  6097 ;;		None               void
  6098 ;; Registers used:
  6099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6108 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6109 ;;Total ram usage:        2 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    9
  6112 ;; This function calls:
  6113 ;;		_setBuz
  6114 ;;		_setDimmerLights_Switch
  6115 ;;		_setDimmerLights_Trigger
  6116 ;;		_setRFSW_Status
  6117 ;;		_setRF_DimmerLights
  6118 ;;		_setTxData
  6119 ;; This function is called by:
  6120 ;;		_setSw_Main
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           
  6125                           ;psect for function _Sw_DimmerOnFunc
  6126  0A67                     _Sw_DimmerOnFunc:	
  6127                           
  6128                           ;incstack = 0
  6129                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6130                           ;Sw_DimmerOnFunc@sw stored from wreg
  6131  0A67  0020               	movlb	0	; select bank0
  6132  0A68  00E3               	movwf	Sw_DimmerOnFunc@sw
  6133                           
  6134                           ;Switch_B1.c: 242: char Idle = 1;
  6135  0A69  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6136  0A6A  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6137                           
  6138                           ;Switch_B1.c: 256: if (sw == 1) {
  6139  0A6B  0863               	movf	Sw_DimmerOnFunc@sw,w
  6140  0A6C  3A01               	xorlw	1
  6141  0A6D  1D03               	skipz
  6142  0A6E  2A79               	goto	l9482
  6143                           
  6144                           ;Switch_B1.c: 257: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6145  0A6F  1003               	clrc
  6146  0A70  0022               	movlb	2	; select bank2
  6147  0A71  1DCC               	btfss	(_DimmerLights2^(0+256)+8),3
  6148  0A72  1403               	setc
  6149  0A73  3000               	movlw	0
  6150  0A74  1803               	btfsc	3,0
  6151  0A75  3001               	movlw	1
  6152  0A76  0020               	movlb	0	; select bank0
  6153  0A77  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6154                           
  6155                           ;Switch_B1.c: 258: } else if (sw == 2) {
  6156  0A78  2A86               	goto	l9486
  6157  0A79                     l9482:	
  6158  0A79  0863               	movf	Sw_DimmerOnFunc@sw,w
  6159  0A7A  3A02               	xorlw	2
  6160  0A7B  1D03               	skipz
  6161  0A7C  2A86               	goto	l9486
  6162                           
  6163                           ;Switch_B1.c: 259: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6164  0A7D  1003               	clrc
  6165  0A7E  0022               	movlb	2	; select bank2
  6166  0A7F  1DBD               	btfss	(_DimmerLights1^(0+256)+8),3
  6167  0A80  1403               	setc
  6168  0A81  3000               	movlw	0
  6169  0A82  1803               	btfsc	3,0
  6170  0A83  3001               	movlw	1
  6171  0A84  0020               	movlb	0	; select bank0
  6172  0A85  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6173  0A86                     l9486:	
  6174                           
  6175                           ;Switch_B1.c: 260: }
  6176                           ;Switch_B1.c: 263: if (Idle == 1) {
  6177  0A86  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6178  0A87  3A01               	xorlw	1
  6179  0A88  1D03               	skipz
  6180  0A89  0008               	return
  6181                           
  6182                           ;Switch_B1.c: 264: Sw->Flag = 1;
  6183  0A8A  086C               	movf	_Sw,w
  6184  0A8B  0086               	movwf	6
  6185  0A8C  3001               	movlw	1	; select bank2/3
  6186  0A8D  0087               	movwf	7
  6187  0A8E  1781               	bsf	1,7
  6188                           
  6189                           ;Switch_B1.c: 265: setBuz(1, 100);
  6190  0A8F  3064               	movlw	100
  6191  0A90  00A9               	movwf	setBuz@time
  6192  0A91  3000               	movlw	0
  6193  0A92  00AA               	movwf	setBuz@time+1
  6194  0A93  3001               	movlw	1
  6195  0A94  3195  256B  318A   	fcall	_setBuz
  6196                           
  6197                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  6198  0A97  0020               	movlb	0	; select bank0
  6199  0A98  086C               	movf	_Sw,w
  6200  0A99  0086               	movwf	6
  6201  0A9A  3001               	movlw	1	; select bank2/3
  6202  0A9B  0087               	movwf	7
  6203  0A9C  1B01               	btfsc	1,6
  6204  0A9D  2AC7               	goto	l9506
  6205                           
  6206                           ;Switch_B1.c: 267: Sw->Status = 1;
  6207  0A9E  086C               	movf	_Sw,w
  6208  0A9F  0086               	movwf	6
  6209  0AA0  3001               	movlw	1	; select bank2/3
  6210  0AA1  0087               	movwf	7
  6211  0AA2  1701               	bsf	1,6
  6212                           
  6213                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  6214  0AA3  01A2               	clrf	setRFSW_Status@command
  6215  0AA4  0AA2               	incf	setRFSW_Status@command,f
  6216  0AA5  0863               	movf	Sw_DimmerOnFunc@sw,w
  6217  0AA6  319B  230A  318A   	fcall	_setRFSW_Status
  6218                           
  6219                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  6220  0AA9  0020               	movlb	0	; select bank0
  6221  0AAA  01A2               	clrf	setDimmerLights_Trigger@command
  6222  0AAB  0AA2               	incf	setDimmerLights_Trigger@command,f
  6223  0AAC  0863               	movf	Sw_DimmerOnFunc@sw,w
  6224  0AAD  319B  2371  318A   	fcall	_setDimmerLights_Trigger
  6225                           
  6226                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  6227  0AB0  0020               	movlb	0	; select bank0
  6228  0AB1  01A2               	clrf	setDimmerLights_Switch@command
  6229  0AB2  0AA2               	incf	setDimmerLights_Switch@command,f
  6230  0AB3  0863               	movf	Sw_DimmerOnFunc@sw,w
  6231  0AB4  319B  2361  318A   	fcall	_setDimmerLights_Switch
  6232                           
  6233                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  6234  0AB7  0020               	movlb	0	; select bank0
  6235  0AB8  086C               	movf	_Sw,w
  6236  0AB9  0086               	movwf	6
  6237  0ABA  3001               	movlw	1	; select bank2/3
  6238  0ABB  0087               	movwf	7
  6239  0ABC  3000               	movlw	0
  6240  0ABD  1B01               	btfsc	1,6
  6241  0ABE  3001               	movlw	1
  6242  0ABF  00DD               	movwf	setRF_DimmerLights@on
  6243  0AC0  0863               	movf	Sw_DimmerOnFunc@sw,w
  6244  0AC1  3189  211B  318A   	fcall	_setRF_DimmerLights
  6245                           
  6246                           ;Switch_B1.c: 274: setTxData();
  6247  0AC4  318F  2743         	fcall	_setTxData
  6248                           
  6249                           ;Switch_B1.c: 276: } else {
  6250  0AC6  0008               	return
  6251  0AC7                     l9506:	
  6252                           
  6253                           ;Switch_B1.c: 277: Sw->Status = 0;
  6254  0AC7  0020               	movlb	0	; select bank0
  6255  0AC8  086C               	movf	_Sw,w
  6256  0AC9  0086               	movwf	6
  6257  0ACA  3001               	movlw	1	; select bank2/3
  6258  0ACB  0087               	movwf	7
  6259  0ACC  1301               	bcf	1,6
  6260                           
  6261                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  6262  0ACD  086C               	movf	_Sw,w
  6263  0ACE  0086               	movwf	6
  6264  0ACF  3001               	movlw	1	; select bank2/3
  6265  0AD0  0087               	movwf	7
  6266  0AD1  3000               	movlw	0
  6267  0AD2  1B01               	btfsc	1,6
  6268  0AD3  3001               	movlw	1
  6269  0AD4  00A2               	movwf	setRFSW_Status@command
  6270  0AD5  0863               	movf	Sw_DimmerOnFunc@sw,w
  6271  0AD6  319B  230A         	fcall	_setRFSW_Status
  6272  0AD8  0008               	return
  6273  0AD9                     __end_of_Sw_DimmerOnFunc:	
  6274                           
  6275                           	psect	text20
  6276  0987                     __ptext20:	
  6277 ;; *************** function _Sw_DimmerOffFunc *****************
  6278 ;; Defined at:
  6279 ;;		line 284 in file "../src/Switch_B1.c"
  6280 ;; Parameters:    Size  Location     Type
  6281 ;;  sw              1    wreg     unsigned char 
  6282 ;; Auto vars:     Size  Location     Type
  6283 ;;  sw              1   68[BANK0 ] unsigned char 
  6284 ;; Return value:  Size  Location     Type
  6285 ;;		None               void
  6286 ;; Registers used:
  6287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6288 ;; Tracked objects:
  6289 ;;		On entry : 0/0
  6290 ;;		On exit  : 0/0
  6291 ;;		Unchanged: 0/0
  6292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6295 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6296 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6297 ;;Total ram usage:        3 bytes
  6298 ;; Hardware stack levels used:    1
  6299 ;; Hardware stack levels required when called:    9
  6300 ;; This function calls:
  6301 ;;		_setDelayOff_GO
  6302 ;;		_setDimmerLights_AdjGo
  6303 ;;		_setDimmerLights_Switch
  6304 ;;		_setDimmerLights_Trigger
  6305 ;;		_setDimmerLights_TriggerAdj
  6306 ;;		_setRF_DimmerLights
  6307 ;;		_setTxData
  6308 ;; This function is called by:
  6309 ;;		_setSw_Main
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           
  6314                           ;psect for function _Sw_DimmerOffFunc
  6315  0987                     _Sw_DimmerOffFunc:	
  6316                           
  6317                           ;incstack = 0
  6318                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6319                           ;Sw_DimmerOffFunc@sw stored from wreg
  6320  0987  0020               	movlb	0	; select bank0
  6321  0988  00E4               	movwf	Sw_DimmerOffFunc@sw
  6322                           
  6323                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  6324  0989  086C               	movf	_Sw,w
  6325  098A  0086               	movwf	6
  6326  098B  3001               	movlw	1	; select bank2/3
  6327  098C  0087               	movwf	7
  6328  098D  1F81               	btfss	1,7
  6329  098E  0008               	return
  6330                           
  6331                           ;Switch_B1.c: 286: Sw->Flag = 0;
  6332  098F  086C               	movf	_Sw,w
  6333  0990  0086               	movwf	6
  6334  0991  3001               	movlw	1	; select bank2/3
  6335  0992  0087               	movwf	7
  6336  0993  1381               	bcf	1,7
  6337                           
  6338                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  6339  0994  086C               	movf	_Sw,w
  6340  0995  0086               	movwf	6
  6341  0996  3001               	movlw	1	; select bank2/3
  6342  0997  0087               	movwf	7
  6343  0998  1F01               	btfss	1,6
  6344  0999  29D2               	goto	l9550
  6345                           
  6346                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  6347  099A  0A6C               	incf	_Sw,w
  6348  099B  0086               	movwf	6
  6349  099C  3001               	movlw	1	; select bank2/3
  6350  099D  0087               	movwf	7
  6351  099E  1C01               	btfss	1,0
  6352  099F  0008               	return
  6353                           
  6354                           ;Switch_B1.c: 289: Sw->Adj = 0;
  6355  09A0  0A6C               	incf	_Sw,w
  6356  09A1  0086               	movwf	6
  6357  09A2  3001               	movlw	1	; select bank2/3
  6358  09A3  0087               	movwf	7
  6359  09A4  1001               	bcf	1,0
  6360                           
  6361                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  6362  09A5  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6363  09A6  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6364  09A7  0864               	movf	Sw_DimmerOffFunc@sw,w
  6365  09A8  319B  23A1  3189   	fcall	_setDimmerLights_TriggerAdj
  6366                           
  6367                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  6368  09AB  0020               	movlb	0	; select bank0
  6369  09AC  01A2               	clrf	setDimmerLights_AdjGo@command
  6370  09AD  0864               	movf	Sw_DimmerOffFunc@sw,w
  6371  09AE  319B  2391  3189   	fcall	_setDimmerLights_AdjGo
  6372                           
  6373                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  6374  09B1  0020               	movlb	0	; select bank0
  6375  09B2  0864               	movf	Sw_DimmerOffFunc@sw,w
  6376  09B3  3E1A               	addlw	26
  6377  09B4  076D               	addwf	_product,w
  6378  09B5  00E2               	movwf	??_Sw_DimmerOffFunc
  6379  09B6  0862               	movf	??_Sw_DimmerOffFunc,w
  6380  09B7  0086               	movwf	6
  6381  09B8  3002               	movlw	2	; select bank4/5
  6382  09B9  0087               	movwf	7
  6383  09BA  0801               	movf	1,w
  6384  09BB  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6385  09BC  086D               	movf	_product,w
  6386  09BD  3E11               	addlw	17
  6387  09BE  0086               	movwf	6
  6388  09BF  3002               	movlw	2	; select bank4/5
  6389  09C0  0087               	movwf	7
  6390  09C1  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6391  09C2  0081               	movwf	1
  6392                           
  6393                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  6394  09C3  086C               	movf	_Sw,w
  6395  09C4  0086               	movwf	6
  6396  09C5  3001               	movlw	1	; select bank2/3
  6397  09C6  0087               	movwf	7
  6398  09C7  3000               	movlw	0
  6399  09C8  1B01               	btfsc	1,6
  6400  09C9  3001               	movlw	1
  6401  09CA  00DD               	movwf	setRF_DimmerLights@on
  6402  09CB  0864               	movf	Sw_DimmerOffFunc@sw,w
  6403  09CC  3189  211B  3189   	fcall	_setRF_DimmerLights
  6404                           
  6405                           ;Switch_B1.c: 295: setTxData();
  6406  09CF  318F  2743         	fcall	_setTxData
  6407                           
  6408                           ;Switch_B1.c: 297: }
  6409                           ;Switch_B1.c: 298: } else {
  6410  09D1  0008               	return
  6411  09D2                     l9550:	
  6412                           
  6413                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  6414  09D2  0020               	movlb	0	; select bank0
  6415  09D3  01A2               	clrf	setDimmerLights_Trigger@command
  6416  09D4  0AA2               	incf	setDimmerLights_Trigger@command,f
  6417  09D5  0864               	movf	Sw_DimmerOffFunc@sw,w
  6418  09D6  319B  2371  3189   	fcall	_setDimmerLights_Trigger
  6419                           
  6420                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  6421  09D9  0020               	movlb	0	; select bank0
  6422  09DA  01A2               	clrf	setDimmerLights_Switch@command
  6423  09DB  0864               	movf	Sw_DimmerOffFunc@sw,w
  6424  09DC  319B  2361  3189   	fcall	_setDimmerLights_Switch
  6425                           
  6426                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  6427  09DF  0020               	movlb	0	; select bank0
  6428  09E0  01AA               	clrf	setDelayOff_GO@command
  6429  09E1  01AB               	clrf	setDelayOff_GO@value
  6430  09E2  0864               	movf	Sw_DimmerOffFunc@sw,w
  6431  09E3  3196  26DB  3189   	fcall	_setDelayOff_GO
  6432                           
  6433                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  6434  09E6  0020               	movlb	0	; select bank0
  6435  09E7  086C               	movf	_Sw,w
  6436  09E8  0086               	movwf	6
  6437  09E9  3001               	movlw	1	; select bank2/3
  6438  09EA  0087               	movwf	7
  6439  09EB  3000               	movlw	0
  6440  09EC  1B01               	btfsc	1,6
  6441  09ED  3001               	movlw	1
  6442  09EE  00DD               	movwf	setRF_DimmerLights@on
  6443  09EF  0864               	movf	Sw_DimmerOffFunc@sw,w
  6444  09F0  3189  211B  3189   	fcall	_setRF_DimmerLights
  6445                           
  6446                           ;Switch_B1.c: 304: setTxData();
  6447  09F3  318F  2743         	fcall	_setTxData
  6448  09F5  0008               	return
  6449  09F6                     __end_of_Sw_DimmerOffFunc:	
  6450                           
  6451                           	psect	text21
  6452  141D                     __ptext21:	
  6453 ;; *************** function _Sw_DimmerAdjFunc *****************
  6454 ;; Defined at:
  6455 ;;		line 311 in file "../src/Switch_B1.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;  sw              1    wreg     unsigned char 
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;  sw              1    5[BANK0 ] unsigned char 
  6460 ;;  Idle            1    4[BANK0 ] unsigned char 
  6461 ;; Return value:  Size  Location     Type
  6462 ;;		None               void
  6463 ;; Registers used:
  6464 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;Total ram usage:        2 bytes
  6475 ;; Hardware stack levels used:    1
  6476 ;; Hardware stack levels required when called:    7
  6477 ;; This function calls:
  6478 ;;		_setDimmerLights_AdjGo
  6479 ;;		_setDimmerLights_TriggerAdj
  6480 ;;		_setRFSW_Status
  6481 ;; This function is called by:
  6482 ;;		_setSw_Main
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           
  6487                           ;psect for function _Sw_DimmerAdjFunc
  6488  141D                     _Sw_DimmerAdjFunc:	
  6489                           
  6490                           ;incstack = 0
  6491                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6492                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6493  141D  0020               	movlb	0	; select bank0
  6494  141E  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6495                           
  6496                           ;Switch_B1.c: 312: char Idle = 1;
  6497  141F  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6498  1420  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6499                           
  6500                           ;Switch_B1.c: 325: if (sw == 1) {
  6501  1421  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6502  1422  3A01               	xorlw	1
  6503  1423  1D03               	skipz
  6504  1424  2C2F               	goto	l9516
  6505                           
  6506                           ;Switch_B1.c: 326: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6507  1425  1003               	clrc
  6508  1426  0022               	movlb	2	; select bank2
  6509  1427  1DCC               	btfss	(_DimmerLights2^(0+256)+8),3
  6510  1428  1403               	setc
  6511  1429  3000               	movlw	0
  6512  142A  1803               	btfsc	3,0
  6513  142B  3001               	movlw	1
  6514  142C  0020               	movlb	0	; select bank0
  6515  142D  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6516                           
  6517                           ;Switch_B1.c: 327: } else if (sw == 2) {
  6518  142E  2C3C               	goto	l9520
  6519  142F                     l9516:	
  6520  142F  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6521  1430  3A02               	xorlw	2
  6522  1431  1D03               	skipz
  6523  1432  2C3C               	goto	l9520
  6524                           
  6525                           ;Switch_B1.c: 328: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6526  1433  1003               	clrc
  6527  1434  0022               	movlb	2	; select bank2
  6528  1435  1DBD               	btfss	(_DimmerLights1^(0+256)+8),3
  6529  1436  1403               	setc
  6530  1437  3000               	movlw	0
  6531  1438  1803               	btfsc	3,0
  6532  1439  3001               	movlw	1
  6533  143A  0020               	movlb	0	; select bank0
  6534  143B  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6535  143C                     l9520:	
  6536                           
  6537                           ;Switch_B1.c: 329: }
  6538                           ;Switch_B1.c: 332: if (Idle == 1) {
  6539  143C  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6540  143D  3A01               	xorlw	1
  6541  143E  1D03               	skipz
  6542  143F  0008               	return
  6543                           
  6544                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  6545  1440  086C               	movf	_Sw,w
  6546  1441  0086               	movwf	6
  6547  1442  3001               	movlw	1	; select bank2/3
  6548  1443  0087               	movwf	7
  6549  1444  1F81               	btfss	1,7
  6550  1445  0008               	return
  6551                           
  6552                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  6553  1446  086C               	movf	_Sw,w
  6554  1447  0086               	movwf	6
  6555  1448  3001               	movlw	1	; select bank2/3
  6556  1449  0087               	movwf	7
  6557  144A  1581               	bsf	1,3
  6558                           
  6559                           ;Switch_B1.c: 335: Sw->Adj = 1;
  6560  144B  0A6C               	incf	_Sw,w
  6561  144C  0086               	movwf	6
  6562  144D  3001               	movlw	1	; select bank2/3
  6563  144E  0087               	movwf	7
  6564  144F  1401               	bsf	1,0
  6565                           
  6566                           ;Switch_B1.c: 336: Sw->Status = 1;
  6567  1450  086C               	movf	_Sw,w
  6568  1451  0086               	movwf	6
  6569  1452  3001               	movlw	1	; select bank2/3
  6570  1453  0087               	movwf	7
  6571  1454  1701               	bsf	1,6
  6572                           
  6573                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  6574  1455  01A2               	clrf	setRFSW_Status@command
  6575  1456  0AA2               	incf	setRFSW_Status@command,f
  6576  1457  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6577  1458  319B  230A  3194   	fcall	_setRFSW_Status
  6578                           
  6579                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  6580  145B  0020               	movlb	0	; select bank0
  6581  145C  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6582  145D  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6583  145E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6584  145F  319B  23A1  3194   	fcall	_setDimmerLights_TriggerAdj
  6585                           
  6586                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  6587  1462  0020               	movlb	0	; select bank0
  6588  1463  01A2               	clrf	setDimmerLights_AdjGo@command
  6589  1464  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6590  1465  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6591  1466  319B  2391         	fcall	_setDimmerLights_AdjGo
  6592  1468  0008               	return
  6593  1469                     __end_of_Sw_DimmerAdjFunc:	
  6594                           
  6595                           	psect	text22
  6596  1BA1                     __ptext22:	
  6597 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6598 ;; Defined at:
  6599 ;;		line 720 in file "../src/Dimmer_B1.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;  lights          1    wreg     unsigned char 
  6602 ;;  command         1    2[BANK0 ] unsigned char 
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;  lights          1    3[BANK0 ] unsigned char 
  6605 ;; Return value:  Size  Location     Type
  6606 ;;		None               void
  6607 ;; Registers used:
  6608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6614 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;Total ram usage:        2 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:    6
  6621 ;; This function calls:
  6622 ;;		_DimmerLightsPointSelect
  6623 ;; This function is called by:
  6624 ;;		_Sw_DimmerOffFunc
  6625 ;;		_Sw_DimmerAdjFunc
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           
  6630                           ;psect for function _setDimmerLights_TriggerAdj
  6631  1BA1                     _setDimmerLights_TriggerAdj:	
  6632                           
  6633                           ;incstack = 0
  6634                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6635                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6636  1BA1  0020               	movlb	0	; select bank0
  6637  1BA2  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6638                           
  6639                           ;Dimmer_B1.c: 722: DimmerLightsPointSelect(lights);
  6640  1BA3  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6641  1BA4  319C  242C         	fcall	_DimmerLightsPointSelect
  6642                           
  6643                           ;Dimmer_B1.c: 723: DimmerLights->TriggerAdj = command;
  6644  1BA6  0020               	movlb	0	; select bank0
  6645  1BA7  086B               	movf	_DimmerLights,w
  6646  1BA8  3E08               	addlw	8
  6647  1BA9  0086               	movwf	6
  6648  1BAA  3001               	movlw	1	; select bank2/3
  6649  1BAB  0087               	movwf	7
  6650  1BAC  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6651  1BAD  1201               	bcf	1,4
  6652  1BAE  1D03               	skipz
  6653  1BAF  1601               	bsf	1,4
  6654  1BB0  0008               	return
  6655  1BB1                     __end_of_setDimmerLights_TriggerAdj:	
  6656                           
  6657                           	psect	text23
  6658  1B91                     __ptext23:	
  6659 ;; *************** function _setDimmerLights_AdjGo *****************
  6660 ;; Defined at:
  6661 ;;		line 708 in file "../src/Dimmer_B1.c"
  6662 ;; Parameters:    Size  Location     Type
  6663 ;;  lights          1    wreg     unsigned char 
  6664 ;;  command         1    2[BANK0 ] unsigned char 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;  lights          1    3[BANK0 ] unsigned char 
  6667 ;; Return value:  Size  Location     Type
  6668 ;;		None               void
  6669 ;; Registers used:
  6670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6676 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;Total ram usage:        2 bytes
  6681 ;; Hardware stack levels used:    1
  6682 ;; Hardware stack levels required when called:    6
  6683 ;; This function calls:
  6684 ;;		_DimmerLightsPointSelect
  6685 ;; This function is called by:
  6686 ;;		_Sw_DimmerOffFunc
  6687 ;;		_Sw_DimmerAdjFunc
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function _setDimmerLights_AdjGo
  6693  1B91                     _setDimmerLights_AdjGo:	
  6694                           
  6695                           ;incstack = 0
  6696                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6697                           ;setDimmerLights_AdjGo@lights stored from wreg
  6698  1B91  0020               	movlb	0	; select bank0
  6699  1B92  00A3               	movwf	setDimmerLights_AdjGo@lights
  6700                           
  6701                           ;Dimmer_B1.c: 710: DimmerLightsPointSelect(lights);
  6702  1B93  0823               	movf	setDimmerLights_AdjGo@lights,w
  6703  1B94  319C  242C         	fcall	_DimmerLightsPointSelect
  6704                           
  6705                           ;Dimmer_B1.c: 711: DimmerLights->AdjGo = command;
  6706  1B96  0020               	movlb	0	; select bank0
  6707  1B97  086B               	movf	_DimmerLights,w
  6708  1B98  3E08               	addlw	8
  6709  1B99  0086               	movwf	6
  6710  1B9A  3001               	movlw	1	; select bank2/3
  6711  1B9B  0087               	movwf	7
  6712  1B9C  0822               	movf	setDimmerLights_AdjGo@command,w
  6713  1B9D  1181               	bcf	1,3
  6714  1B9E  1D03               	skipz
  6715  1B9F  1581               	bsf	1,3
  6716  1BA0  0008               	return
  6717  1BA1                     __end_of_setDimmerLights_AdjGo:	
  6718                           
  6719                           	psect	text24
  6720  1AFD                     __ptext24:	
  6721 ;; *************** function _Switch_Initialization *****************
  6722 ;; Defined at:
  6723 ;;		line 41 in file "../src/Switch_B1.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;		None
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;		None
  6728 ;; Return value:  Size  Location     Type
  6729 ;;		None               void
  6730 ;; Registers used:
  6731 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;Total ram usage:        0 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    8
  6744 ;; This function calls:
  6745 ;;		_TouchPower
  6746 ;;		_setSw_Initialization
  6747 ;; This function is called by:
  6748 ;;		_main
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           
  6753                           ;psect for function _Switch_Initialization
  6754  1AFD                     _Switch_Initialization:	
  6755                           
  6756                           ;Switch_B1.c: 42: TouchPower();
  6757                           
  6758                           ;incstack = 0
  6759                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6760  1AFD  319B  2343  319A   	fcall	_TouchPower
  6761                           
  6762                           ;Switch_B1.c: 44: WPUB1 = 0;
  6763  1B00  0024               	movlb	4	; select bank4
  6764  1B01  108D               	bcf	13,1	;volatile
  6765                           
  6766                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6767  1B02  3001               	movlw	1
  6768  1B03  319A  2241  319A   	fcall	_setSw_Initialization
  6769                           
  6770                           ;Switch_B1.c: 57: setSw_Initialization(2);
  6771  1B06  3002               	movlw	2
  6772  1B07  319A  2241         	fcall	_setSw_Initialization
  6773  1B09  0008               	return
  6774  1B0A                     __end_of_Switch_Initialization:	
  6775                           
  6776                           	psect	text25
  6777  1A41                     __ptext25:	
  6778 ;; *************** function _setSw_Initialization *****************
  6779 ;; Defined at:
  6780 ;;		line 83 in file "../src/Switch_B1.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;  sw              1    wreg     unsigned char 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  sw              1    4[BANK0 ] unsigned char 
  6785 ;; Return value:  Size  Location     Type
  6786 ;;		None               void
  6787 ;; Registers used:
  6788 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;Total ram usage:        1 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    7
  6801 ;; This function calls:
  6802 ;;		_setLED
  6803 ;; This function is called by:
  6804 ;;		_Switch_Initialization
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           
  6809                           ;psect for function _setSw_Initialization
  6810  1A41                     _setSw_Initialization:	
  6811                           
  6812                           ;incstack = 0
  6813                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6814                           ;setSw_Initialization@sw stored from wreg
  6815  1A41  0020               	movlb	0	; select bank0
  6816  1A42  00A4               	movwf	setSw_Initialization@sw
  6817                           
  6818                           ;Switch_B1.c: 84: setLED(sw, 1);
  6819  1A43  01A2               	clrf	setLED@command
  6820  1A44  0AA2               	incf	setLED@command,f
  6821  1A45  0824               	movf	setSw_Initialization@sw,w
  6822  1A46  3196  261F         	fcall	_setLED
  6823  1A48  0008               	return
  6824  1A49                     __end_of_setSw_Initialization:	
  6825                           
  6826                           	psect	text26
  6827  1B43                     __ptext26:	
  6828 ;; *************** function _TouchPower *****************
  6829 ;; Defined at:
  6830 ;;		line 10 in file "../src/Switch_B1.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;		None
  6833 ;; Auto vars:     Size  Location     Type
  6834 ;;		None
  6835 ;; Return value:  Size  Location     Type
  6836 ;;		None               void
  6837 ;; Registers used:
  6838 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6839 ;; Tracked objects:
  6840 ;;		On entry : 0/0
  6841 ;;		On exit  : 0/0
  6842 ;;		Unchanged: 0/0
  6843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6848 ;;Total ram usage:        0 bytes
  6849 ;; Hardware stack levels used:    1
  6850 ;; Hardware stack levels required when called:    6
  6851 ;; This function calls:
  6852 ;;		_Timeout_Counter
  6853 ;;		_set_TimeoutCleared
  6854 ;; This function is called by:
  6855 ;;		_Switch_Initialization
  6856 ;; This function uses a non-reentrant model
  6857 ;;
  6858                           
  6859                           
  6860                           ;psect for function _TouchPower
  6861  1B43                     _TouchPower:	
  6862                           
  6863                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6864                           
  6865                           ;incstack = 0
  6866                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6867  1B43  2B49               	goto	l10046
  6868  1B44                     l2693:	
  6869                           
  6870                           ;Switch_B1.c: 12: RC5 = 1;
  6871  1B44  0020               	movlb	0	; select bank0
  6872  1B45  168E               	bsf	14,5	;volatile
  6873                           
  6874                           ;Switch_B1.c: 13: Timeout_Counter();
  6875  1B46  319C  248F  319B   	fcall	_Timeout_Counter
  6876  1B49                     l10046:	
  6877  1B49  0020               	movlb	0	; select bank0
  6878  1B4A  1A8E               	btfsc	14,5	;volatile
  6879  1B4B  2B4F               	goto	l10050
  6880  1B4C  0021               	movlb	1	; select bank1
  6881  1B4D  1D30               	btfss	(_myMain^(0+128)+16),2
  6882  1B4E  2B44               	goto	l2693
  6883  1B4F                     l10050:	
  6884                           
  6885                           ;Switch_B1.c: 14: }
  6886                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6887  1B4F  3199  21FB         	fcall	_set_TimeoutCleared
  6888  1B51  0008               	return
  6889  1B52                     __end_of_TouchPower:	
  6890                           
  6891                           	psect	text27
  6892  19DF                     __ptext27:	
  6893 ;; *************** function _RF_Main *****************
  6894 ;; Defined at:
  6895 ;;		line 16 in file "../src/RF_Control_B1.c"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;		None
  6898 ;; Auto vars:     Size  Location     Type
  6899 ;;		None
  6900 ;; Return value:  Size  Location     Type
  6901 ;;		None               void
  6902 ;; Registers used:
  6903 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6904 ;; Tracked objects:
  6905 ;;		On entry : 0/0
  6906 ;;		On exit  : 0/0
  6907 ;;		Unchanged: 0/0
  6908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6913 ;;Total ram usage:        0 bytes
  6914 ;; Hardware stack levels used:    1
  6915 ;; Hardware stack levels required when called:   14
  6916 ;; This function calls:
  6917 ;;		_setRF_Main
  6918 ;; This function is called by:
  6919 ;;		_main
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           
  6924                           ;psect for function _RF_Main
  6925  19DF                     _RF_Main:	
  6926                           
  6927                           ;RF_Control_B1.c: 18: setRF_Main();
  6928                           
  6929                           ;incstack = 0
  6930                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6931  19DF  3185  25BE         	fcall	_setRF_Main
  6932  19E1  0008               	return
  6933  19E2                     __end_of_RF_Main:	
  6934                           
  6935                           	psect	text28
  6936  05BE                     __ptext28:	
  6937 ;; *************** function _setRF_Main *****************
  6938 ;; Defined at:
  6939 ;;		line 52 in file "../src/RF_Control_B1.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;		None
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  Receive_OK      1    0        unsigned char 
  6944 ;;  loop_f          1    0        unsigned char 
  6945 ;; Return value:  Size  Location     Type
  6946 ;;		None               void
  6947 ;; Registers used:
  6948 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6957 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6958 ;;Total ram usage:        2 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:   13
  6961 ;; This function calls:
  6962 ;;		_CC2500_ReadStatus
  6963 ;;		_CC2500_RxData
  6964 ;;		_CC2500_TxData
  6965 ;;		_CC2500_WriteCommand
  6966 ;;		_getBuz_GO
  6967 ;;		_getRxData
  6968 ;; This function is called by:
  6969 ;;		_RF_Main
  6970 ;; This function uses a non-reentrant model
  6971 ;;
  6972                           
  6973                           
  6974                           ;psect for function _setRF_Main
  6975  05BE                     _setRF_Main:	
  6976                           
  6977                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  6978                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6979                           
  6980                           ;incstack = 0
  6981                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6982  05BE  0021               	movlb	1	; select bank1
  6983  05BF  1C3F               	btfss	_RF1^(0+128),0
  6984  05C0  0008               	return
  6985                           
  6986                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6987  05C1  319B  23D3  3185   	fcall	_getBuz_GO
  6988  05C4  0020               	movlb	0	; select bank0
  6989  05C5  0821               	movf	?_getBuz_GO+1,w
  6990  05C6  0420               	iorwf	?_getBuz_GO,w
  6991  05C7  1D03               	skipz
  6992  05C8  0008               	return
  6993                           
  6994                           ;RF_Control_B1.c: 64: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6995  05C9  01E8               	clrf	_setRF_Main$5836
  6996  05CA  0AE8               	incf	_setRF_Main$5836,f
  6997  05CB  1F0C               	btfss	12,6	;volatile
  6998  05CC  1A0C               	btfsc	12,4	;volatile
  6999  05CD  2DD2               	goto	l9944
  7000  05CE  1C0C               	btfss	12,0	;volatile
  7001  05CF  188D               	btfsc	13,1	;volatile
  7002  05D0  2DD2               	goto	l9944
  7003  05D1  01E8               	clrf	_setRF_Main$5836
  7004  05D2                     l9944:	
  7005  05D2  0868               	movf	_setRF_Main$5836,w
  7006  05D3  0021               	movlb	1	; select bank1
  7007  05D4  13BF               	bcf	_RF1^(0+128),7
  7008  05D5  1D03               	skipz
  7009  05D6  17BF               	bsf	_RF1^(0+128),7
  7010                           
  7011                           ;RF_Control_B1.c: 71: if (RF1.Key == 1 && RF1.Learn == 0) {
  7012  05D7  1BBF               	btfsc	_RF1^(0+128),7
  7013  05D8  1B3F               	btfsc	_RF1^(0+128),6
  7014  05D9  2DDF               	goto	l2268
  7015                           
  7016                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  7017  05DA  01C1               	clrf	(_RF1^(0+128)+2)
  7018  05DB  01C2               	clrf	((_RF1+1)^(0+128)+2)
  7019                           
  7020                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  7021  05DC  14C0               	bsf	(_RF1^(0+128)+1),1
  7022                           
  7023                           ;RF_Control_B1.c: 74: RF1.RxStatus = 0;
  7024  05DD  11BF               	bcf	_RF1^(0+128),3
  7025                           
  7026                           ;RF_Control_B1.c: 76: } else {
  7027  05DE  0008               	return
  7028  05DF                     l2268:	
  7029                           
  7030                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  7031  05DF  18C0               	btfsc	(_RF1^(0+128)+1),1
  7032  05E0  1B3F               	btfsc	_RF1^(0+128),6
  7033  05E1  2DF6               	goto	l9966
  7034                           
  7035                           ;RF_Control_B1.c: 78: RF1.Count++;
  7036  05E2  3001               	movlw	1
  7037  05E3  07C1               	addwf	(_RF1^(0+128)+2),f
  7038  05E4  3000               	movlw	0
  7039  05E5  3DC2               	addwfc	((_RF1+1)^(0+128)+2),f
  7040                           
  7041                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  7042  05E6  3002               	movlw	2
  7043  05E7  3EBF               	addlw	_RF1& (0+255)
  7044  05E8  0086               	movwf	6
  7045  05E9  0187               	clrf	7
  7046  05EA  3F40               	moviw [0]fsr1
  7047  05EB  0646               	xorwf	(_RF1^(0+128)+7),w
  7048  05EC  1D03               	skipz
  7049  05ED  2DF0               	goto	u10495
  7050  05EE  3F41               	moviw [1]fsr1
  7051  05EF  0647               	xorwf	((_RF1+1)^(0+128)+7),w
  7052  05F0                     u10495:	
  7053  05F0  1D03               	skipz
  7054  05F1  2E68               	goto	l10020
  7055                           
  7056                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  7057  05F2  01C1               	clrf	(_RF1^(0+128)+2)
  7058  05F3  01C2               	clrf	((_RF1+1)^(0+128)+2)
  7059                           
  7060                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  7061  05F4  10C0               	bcf	(_RF1^(0+128)+1),1
  7062                           
  7063                           ;RF_Control_B1.c: 82: }
  7064                           ;RF_Control_B1.c: 83: } else {
  7065  05F5  2E68               	goto	l10020
  7066  05F6                     l9966:	
  7067                           
  7068                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  7069  05F6  01C1               	clrf	(_RF1^(0+128)+2)
  7070  05F7  01C2               	clrf	((_RF1+1)^(0+128)+2)
  7071                           
  7072                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  7073  05F8  10C0               	bcf	(_RF1^(0+128)+1),1
  7074                           
  7075                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  7076  05F9  193F               	btfsc	_RF1^(0+128),2
  7077  05FA  1B3F               	btfsc	_RF1^(0+128),6
  7078  05FB  2E17               	goto	l2273
  7079                           
  7080                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  7081  05FC  113F               	bcf	_RF1^(0+128),2
  7082                           
  7083                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  7084  05FD  11BF               	bcf	_RF1^(0+128),3
  7085                           
  7086                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  7087  05FE  10BF               	bcf	_RF1^(0+128),1
  7088                           
  7089                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  7090  05FF  303B               	movlw	59
  7091  0600  319E  26CB  3185   	fcall	_CC2500_ReadStatus
  7092                           
  7093                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  7094  0603  0021               	movlb	1	; select bank1
  7095  0604  085B               	movf	_s_data^(0+128),w
  7096  0605  1903               	btfsc	3,2
  7097  0606  2E13               	goto	l2274
  7098                           
  7099                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  7100  0607  3036               	movlw	54
  7101  0608  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7102                           
  7103                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  7104  060B  303B               	movlw	59
  7105  060C  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7106                           
  7107                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  7108  060F  303A               	movlw	58
  7109  0610  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7110  0613                     l2274:	
  7111                           
  7112                           ;RF_Control_B1.c: 97: }
  7113                           ;RF_Control_B1.c: 98: CC2500_TxData();
  7114  0613  3197  279B  3185   	fcall	_CC2500_TxData
  7115                           
  7116                           ;RF_Control_B1.c: 100: } else {
  7117  0616  2E68               	goto	l10020
  7118  0617                     l2273:	
  7119                           
  7120                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  7121  0617  1DBF               	btfss	_RF1^(0+128),3
  7122  0618  2E53               	goto	l2276
  7123                           
  7124                           ;RF_Control_B1.c: 103: CC2500_RxData();
  7125  0619  3189  21F6  3185   	fcall	_CC2500_RxData
  7126                           
  7127                           ;RF_Control_B1.c: 104: if (RF1.ReceiveGO == 1) {
  7128  061C  0021               	movlb	1	; select bank1
  7129  061D  1CBF               	btfss	_RF1^(0+128),1
  7130  061E  2E68               	goto	l10020
  7131                           
  7132                           ;RF_Control_B1.c: 105: RF1.ReceiveGO = 0;
  7133  061F  10BF               	bcf	_RF1^(0+128),1
  7134                           
  7135                           ;RF_Control_B1.c: 106: RF1.Correction = 0;
  7136  0620  12C0               	bcf	(_RF1^(0+128)+1),5
  7137                           
  7138                           ;RF_Control_B1.c: 107: RF1.CorrectionCounter = 0;
  7139  0621  01C9               	clrf	(_RF1^(0+128)+10)
  7140  0622  01CA               	clrf	((_RF1+1)^(0+128)+10)
  7141                           
  7142                           ;RF_Control_B1.c: 116: getRxData();
  7143  0623  3188  2047  3185   	fcall	_getRxData
  7144                           
  7145                           ;RF_Control_B1.c: 117: RB5 = RB5 == 1 ? 0 : 1;
  7146  0626  3020               	movlw	32
  7147  0627  0020               	movlb	0	; select bank0
  7148  0628  068D               	xorwf	13,f
  7149                           
  7150                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  7151  0629  0021               	movlb	1	; select bank1
  7152  062A  14C0               	bsf	(_RF1^(0+128)+1),1
  7153                           
  7154                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  7155  062B  1DC0               	btfss	(_RF1^(0+128)+1),3
  7156  062C  2E3A               	goto	l10004
  7157                           
  7158                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 20) {
  7159  062D  3000               	movlw	0
  7160  062E  0247               	subwf	((_RF1+1)^(0+128)+7),w
  7161  062F  3015               	movlw	21
  7162  0630  1903               	skipnz
  7163  0631  0246               	subwf	(_RF1^(0+128)+7),w
  7164  0632  1C03               	skipc
  7165  0633  2E38               	goto	l10002
  7166                           
  7167                           ;RF_Control_B1.c: 124: RF1.RunTime = 20;
  7168  0634  3014               	movlw	20
  7169  0635  00C6               	movwf	(_RF1^(0+128)+7)
  7170  0636  3000               	movlw	0
  7171  0637  00C7               	movwf	(_RF1^(0+128)+8)
  7172  0638                     l10002:	
  7173                           
  7174                           ;RF_Control_B1.c: 125: }
  7175                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  7176  0638  01C3               	clrf	(_RF1^(0+128)+4)
  7177                           
  7178                           ;RF_Control_B1.c: 127: } else {
  7179  0639  2E68               	goto	l10020
  7180  063A                     l10004:	
  7181                           
  7182                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  7183  063A  3001               	movlw	1
  7184  063B  0020               	movlb	0	; select bank0
  7185  063C  00E7               	movwf	??_setRF_Main
  7186  063D  0867               	movf	??_setRF_Main,w
  7187  063E  0021               	movlb	1	; select bank1
  7188  063F  07C3               	addwf	(_RF1^(0+128)+4),f
  7189                           
  7190                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  7191  0640  0843               	movf	(_RF1^(0+128)+4),w
  7192  0641  3A02               	xorlw	2
  7193  0642  1D03               	skipz
  7194  0643  2E68               	goto	l10020
  7195                           
  7196                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  7197  0644  01C3               	clrf	(_RF1^(0+128)+4)
  7198                           
  7199                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  7200  0645  01C4               	clrf	(_RF1^(0+128)+5)
  7201  0646  01C5               	clrf	((_RF1+1)^(0+128)+5)
  7202                           
  7203                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 300) {
  7204  0647  3001               	movlw	1
  7205  0648  0247               	subwf	((_RF1+1)^(0+128)+7),w
  7206  0649  302C               	movlw	44
  7207  064A  1903               	skipnz
  7208  064B  0246               	subwf	(_RF1^(0+128)+7),w
  7209  064C  1803               	skipnc
  7210  064D  2E68               	goto	l10020
  7211                           
  7212                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  7213  064E  300A               	movlw	10
  7214  064F  07C6               	addwf	(_RF1^(0+128)+7),f
  7215  0650  3000               	movlw	0
  7216  0651  3DC7               	addwfc	((_RF1+1)^(0+128)+7),f
  7217                           
  7218                           ;RF_Control_B1.c: 134: }
  7219                           ;RF_Control_B1.c: 135: }
  7220                           ;RF_Control_B1.c: 136: }
  7221                           ;RF_Control_B1.c: 137: }
  7222                           ;RF_Control_B1.c: 138: } else {
  7223  0652  2E68               	goto	l10020
  7224  0653                     l2276:	
  7225                           
  7226                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7227  0653  1DBF               	btfss	_RF1^(0+128),3
  7228  0654  18BF               	btfsc	_RF1^(0+128),1
  7229  0655  2E68               	goto	l10020
  7230                           
  7231                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  7232  0656  15BF               	bsf	_RF1^(0+128),3
  7233                           
  7234                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  7235  0657  16C0               	bsf	(_RF1^(0+128)+1),5
  7236                           
  7237                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  7238  0658  3036               	movlw	54
  7239  0659  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7240                           
  7241                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  7242  065C  303B               	movlw	59
  7243  065D  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7244                           
  7245                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  7246  0660  303A               	movlw	58
  7247  0661  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7248                           
  7249                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  7250  0664  3034               	movlw	52
  7251  0665  319D  2513  3185   	fcall	_CC2500_WriteCommand
  7252  0668                     l10020:	
  7253                           
  7254                           ;RF_Control_B1.c: 149: }
  7255                           ;RF_Control_B1.c: 151: }
  7256                           ;RF_Control_B1.c: 152: }
  7257                           ;RF_Control_B1.c: 153: }
  7258                           ;RF_Control_B1.c: 154: if (RF1.RxStatus == 1) {
  7259  0668  0021               	movlb	1	; select bank1
  7260  0669  1DBF               	btfss	_RF1^(0+128),3
  7261  066A  2E89               	goto	l10032
  7262                           
  7263                           ;RF_Control_B1.c: 155: RF1.CheckedCounter++;
  7264  066B  3001               	movlw	1
  7265  066C  07C4               	addwf	(_RF1^(0+128)+5),f
  7266  066D  3000               	movlw	0
  7267  066E  3DC5               	addwfc	((_RF1+1)^(0+128)+5),f
  7268                           
  7269                           ;RF_Control_B1.c: 156: if (RF1.CheckedCounter == 100) {
  7270  066F  3005               	movlw	5
  7271  0670  3EBF               	addlw	_RF1& (0+255)
  7272  0671  0086               	movwf	6
  7273  0672  0187               	clrf	7
  7274  0673  3F40               	moviw [0]fsr1
  7275  0674  3A64               	xorlw	100
  7276  0675  1D03               	skipz
  7277  0676  2E79               	goto	u10625
  7278  0677  3F41               	moviw [1]fsr1
  7279  0678  3A00               	xorlw	0
  7280  0679                     u10625:	
  7281  0679  1D03               	skipz
  7282  067A  2E89               	goto	l10032
  7283                           
  7284                           ;RF_Control_B1.c: 157: RF1.CheckedCounter = 0;
  7285  067B  01C4               	clrf	(_RF1^(0+128)+5)
  7286  067C  01C5               	clrf	((_RF1+1)^(0+128)+5)
  7287                           
  7288                           ;RF_Control_B1.c: 158: RF1.CheckCount = 0;
  7289  067D  01C3               	clrf	(_RF1^(0+128)+4)
  7290                           
  7291                           ;RF_Control_B1.c: 159: if (RF1.RunTime > 20) {
  7292  067E  3000               	movlw	0
  7293  067F  0247               	subwf	((_RF1+1)^(0+128)+7),w
  7294  0680  3015               	movlw	21
  7295  0681  1903               	skipnz
  7296  0682  0246               	subwf	(_RF1^(0+128)+7),w
  7297  0683  1C03               	skipc
  7298  0684  2E89               	goto	l10032
  7299                           
  7300                           ;RF_Control_B1.c: 160: RF1.RunTime -= 10;
  7301  0685  300A               	movlw	10
  7302  0686  02C6               	subwf	(_RF1^(0+128)+7),f
  7303  0687  3000               	movlw	0
  7304  0688  3BC7               	subwfb	((_RF1+1)^(0+128)+7),f
  7305  0689                     l10032:	
  7306                           
  7307                           ;RF_Control_B1.c: 161: }
  7308                           ;RF_Control_B1.c: 162: }
  7309                           ;RF_Control_B1.c: 163: }
  7310                           ;RF_Control_B1.c: 164: if (RF1.Correction == 1) {
  7311  0689  1EC0               	btfss	(_RF1^(0+128)+1),5
  7312  068A  0008               	return
  7313                           
  7314                           ;RF_Control_B1.c: 165: RF1.CorrectionCounter++;
  7315  068B  3001               	movlw	1
  7316  068C  07C9               	addwf	(_RF1^(0+128)+10),f
  7317  068D  3000               	movlw	0
  7318  068E  3DCA               	addwfc	((_RF1+1)^(0+128)+10),f
  7319                           
  7320                           ;RF_Control_B1.c: 166: if (RF1.CorrectionCounter >= 30000) {
  7321  068F  3075               	movlw	117
  7322  0690  024A               	subwf	((_RF1+1)^(0+128)+10),w
  7323  0691  3030               	movlw	48
  7324  0692  1903               	skipnz
  7325  0693  0249               	subwf	(_RF1^(0+128)+10),w
  7326  0694  1C03               	skipc
  7327  0695  0008               	return
  7328                           
  7329                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter = 0;
  7330  0696  01C9               	clrf	(_RF1^(0+128)+10)
  7331  0697  01CA               	clrf	((_RF1+1)^(0+128)+10)
  7332                           
  7333                           ;RF_Control_B1.c: 168: RF1.RxStatus = 0;
  7334  0698  11BF               	bcf	_RF1^(0+128),3
  7335                           
  7336                           ;RF_Control_B1.c: 169: RF1.ReceiveGO = 0;
  7337  0699  10BF               	bcf	_RF1^(0+128),1
  7338  069A  0008               	return
  7339  069B                     __end_of_setRF_Main:	
  7340                           
  7341                           	psect	text29
  7342  0847                     __ptext29:	
  7343 ;; *************** function _getRxData *****************
  7344 ;; Defined at:
  7345 ;;		line 252 in file "../src/RF_Control_B1.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;		None
  7348 ;; Auto vars:     Size  Location     Type
  7349 ;;		None
  7350 ;; Return value:  Size  Location     Type
  7351 ;;		None               void
  7352 ;; Registers used:
  7353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7363 ;;Total ram usage:        0 bytes
  7364 ;; Hardware stack levels used:    1
  7365 ;; Hardware stack levels required when called:   12
  7366 ;; This function calls:
  7367 ;;		_setControl_Lights_Table
  7368 ;;		_setLog_Code
  7369 ;; This function is called by:
  7370 ;;		_setRF_Main
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           
  7375                           ;psect for function _getRxData
  7376  0847                     _getRxData:	
  7377                           
  7378                           ;RF_Control_B1.c: 253: if (RF1.Learn == 1) {
  7379                           
  7380                           ;incstack = 0
  7381                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7382  0847  0021               	movlb	1	; select bank1
  7383  0848  1F3F               	btfss	_RF1^(0+128),6
  7384  0849  285A               	goto	l9442
  7385                           
  7386                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7387  084A  0022               	movlb	2	; select bank2
  7388  084B  08A0               	movf	_RF_Data^(0+256),f
  7389  084C  1D03               	skipz
  7390  084D  2857               	goto	l2307
  7391  084E  0821               	movf	(_RF_Data^(0+256)+1),w
  7392  084F  3A64               	xorlw	100
  7393  0850  1D03               	skipz
  7394  0851  2857               	goto	l2307
  7395                           
  7396                           ;RF_Control_B1.c: 255: setLog_Code();
  7397  0852  3190  20F7         	fcall	_setLog_Code
  7398                           
  7399                           ;RF_Control_B1.c: 256: RF1.Checked = 1;
  7400  0854  0021               	movlb	1	; select bank1
  7401  0855  15C0               	bsf	(_RF1^(0+128)+1),3
  7402                           
  7403                           ;RF_Control_B1.c: 257: } else {
  7404  0856  0008               	return
  7405  0857                     l2307:	
  7406                           
  7407                           ;RF_Control_B1.c: 258: RF1.Checked = 0;
  7408  0857  0021               	movlb	1	; select bank1
  7409  0858  11C0               	bcf	(_RF1^(0+128)+1),3
  7410                           
  7411                           ;RF_Control_B1.c: 259: }
  7412                           ;RF_Control_B1.c: 260: } else {
  7413  0859  0008               	return
  7414  085A                     l9442:	
  7415                           
  7416                           ;RF_Control_B1.c: 261: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7417  085A  0022               	movlb	2	; select bank2
  7418  085B  08A0               	movf	_RF_Data^(0+256),f
  7419  085C  1D03               	skipz
  7420  085D  2898               	goto	l9464
  7421  085E  0821               	movf	(_RF_Data^(0+256)+1),w
  7422  085F  3A02               	xorlw	2
  7423  0860  1D03               	skipz
  7424  0861  2898               	goto	l9464
  7425                           
  7426                           ;RF_Control_B1.c: 263: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7427  0862  082C               	movf	(_RF_Data^(0+256)+12),w
  7428  0863  3AFF               	xorlw	255
  7429  0864  1D03               	skipz
  7430  0865  2872               	goto	l9454
  7431  0866  082D               	movf	(_RF_Data^(0+256)+13),w
  7432  0867  3AFF               	xorlw	255
  7433  0868  1D03               	skipz
  7434  0869  2872               	goto	l9454
  7435  086A  082E               	movf	(_RF_Data^(0+256)+14),w
  7436  086B  3AFF               	xorlw	255
  7437  086C  1D03               	skipz
  7438  086D  2872               	goto	l9454
  7439                           
  7440                           ;RF_Control_B1.c: 264: __nop();
  7441  086E  0000               	nop
  7442                           
  7443                           ;RF_Control_B1.c: 265: RF1.Checked = 0;
  7444  086F  0021               	movlb	1	; select bank1
  7445  0870  11C0               	bcf	(_RF1^(0+128)+1),3
  7446                           
  7447                           ;RF_Control_B1.c: 266: } else {
  7448  0871  0008               	return
  7449  0872                     l9454:	
  7450                           
  7451                           ;RF_Control_B1.c: 267: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7452  0872  0020               	movlb	0	; select bank0
  7453  0873  086D               	movf	_product,w
  7454  0874  3E0C               	addlw	12
  7455  0875  0086               	movwf	6
  7456  0876  3002               	movlw	2	; select bank4/5
  7457  0877  0087               	movwf	7
  7458  0878  0022               	movlb	2	; select bank2
  7459  0879  082C               	movf	(_RF_Data^(0+256)+12),w
  7460  087A  0601               	xorwf	1,w
  7461  087B  1D03               	skipz
  7462  087C  0008               	return
  7463  087D  0020               	movlb	0	; select bank0
  7464  087E  086D               	movf	_product,w
  7465  087F  3E0D               	addlw	13
  7466  0880  0086               	movwf	6
  7467  0881  3002               	movlw	2	; select bank4/5
  7468  0882  0087               	movwf	7
  7469  0883  0022               	movlb	2	; select bank2
  7470  0884  082D               	movf	(_RF_Data^(0+256)+13),w
  7471  0885  0601               	xorwf	1,w
  7472  0886  1D03               	skipz
  7473  0887  0008               	return
  7474  0888  0020               	movlb	0	; select bank0
  7475  0889  086D               	movf	_product,w
  7476  088A  3E0E               	addlw	14
  7477  088B  0086               	movwf	6
  7478  088C  3002               	movlw	2	; select bank4/5
  7479  088D  0087               	movwf	7
  7480  088E  0022               	movlb	2	; select bank2
  7481  088F  082E               	movf	(_RF_Data^(0+256)+14),w
  7482  0890  0601               	xorwf	1,w
  7483  0891  1D03               	skipz
  7484  0892  0008               	return
  7485                           
  7486                           ;RF_Control_B1.c: 268: setControl_Lights_Table();
  7487  0893  3187  2762         	fcall	_setControl_Lights_Table
  7488                           
  7489                           ;RF_Control_B1.c: 269: RF1.Checked = 1;
  7490  0895  0021               	movlb	1	; select bank1
  7491  0896  15C0               	bsf	(_RF1^(0+128)+1),3
  7492                           
  7493                           ;RF_Control_B1.c: 270: }
  7494                           ;RF_Control_B1.c: 271: }
  7495                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7496  0897  0008               	return
  7497  0898                     l9464:	
  7498  0898  0022               	movlb	2	; select bank2
  7499  0899  0820               	movf	_RF_Data^(0+256),w
  7500  089A  3AFF               	xorlw	255
  7501  089B  1D03               	skipz
  7502  089C  28A3               	goto	l9470
  7503  089D  0821               	movf	(_RF_Data^(0+256)+1),w
  7504  089E  3A02               	xorlw	2
  7505  089F  1D03               	skipz
  7506  08A0  28A3               	goto	l9470
  7507                           
  7508                           ;RF_Control_B1.c: 273: __nop();
  7509  08A1  0000               	nop
  7510                           
  7511                           ;RF_Control_B1.c: 274: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7512  08A2  0008               	return
  7513  08A3                     l9470:	
  7514  08A3  0022               	movlb	2	; select bank2
  7515  08A4  08A0               	movf	_RF_Data^(0+256),f
  7516  08A5  1D03               	skipz
  7517  08A6  28AD               	goto	l2317
  7518  08A7  0821               	movf	(_RF_Data^(0+256)+1),w
  7519  08A8  3A65               	xorlw	101
  7520  08A9  1D03               	skipz
  7521  08AA  28AD               	goto	l2317
  7522                           
  7523                           ;RF_Control_B1.c: 275: __nop();
  7524  08AB  0000               	nop
  7525                           
  7526                           ;RF_Control_B1.c: 276: } else {
  7527  08AC  0008               	return
  7528  08AD                     l2317:	
  7529                           
  7530                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  7531  08AD  0021               	movlb	1	; select bank1
  7532  08AE  11C0               	bcf	(_RF1^(0+128)+1),3
  7533  08AF  0008               	return
  7534  08B0                     __end_of_getRxData:	
  7535                           
  7536                           	psect	text30
  7537  10F7                     __ptext30:	
  7538 ;; *************** function _setLog_Code *****************
  7539 ;; Defined at:
  7540 ;;		line 287 in file "../src/RF_Control_B1.c"
  7541 ;; Parameters:    Size  Location     Type
  7542 ;;		None
  7543 ;; Auto vars:     Size  Location     Type
  7544 ;;		None
  7545 ;; Return value:  Size  Location     Type
  7546 ;;		None               void
  7547 ;; Registers used:
  7548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7549 ;; Tracked objects:
  7550 ;;		On entry : 0/0
  7551 ;;		On exit  : 0/0
  7552 ;;		Unchanged: 0/0
  7553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7557 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7558 ;;Total ram usage:        1 bytes
  7559 ;; Hardware stack levels used:    1
  7560 ;; Hardware stack levels required when called:    7
  7561 ;; This function calls:
  7562 ;;		_setBuz
  7563 ;; This function is called by:
  7564 ;;		_getRxData
  7565 ;; This function uses a non-reentrant model
  7566 ;;
  7567                           
  7568                           
  7569                           ;psect for function _setLog_Code
  7570  10F7                     _setLog_Code:	
  7571                           
  7572                           ;RF_Control_B1.c: 288: product->Data[12]=RF_Data[12];
  7573                           
  7574                           ;incstack = 0
  7575                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7576  10F7  0022               	movlb	2	; select bank2
  7577  10F8  082C               	movf	(_RF_Data^(0+256)+12),w
  7578  10F9  0020               	movlb	0	; select bank0
  7579  10FA  00AD               	movwf	??_setLog_Code
  7580  10FB  086D               	movf	_product,w
  7581  10FC  3E0C               	addlw	12
  7582  10FD  0086               	movwf	6
  7583  10FE  3002               	movlw	2	; select bank4/5
  7584  10FF  0087               	movwf	7
  7585  1100  082D               	movf	??_setLog_Code,w
  7586  1101  0081               	movwf	1
  7587                           
  7588                           ;RF_Control_B1.c: 289: product->Data[13]=RF_Data[13];
  7589  1102  0022               	movlb	2	; select bank2
  7590  1103  082D               	movf	(_RF_Data^(0+256)+13),w
  7591  1104  0020               	movlb	0	; select bank0
  7592  1105  00AD               	movwf	??_setLog_Code
  7593  1106  086D               	movf	_product,w
  7594  1107  3E0D               	addlw	13
  7595  1108  0086               	movwf	6
  7596  1109  3002               	movlw	2	; select bank4/5
  7597  110A  0087               	movwf	7
  7598  110B  082D               	movf	??_setLog_Code,w
  7599  110C  0081               	movwf	1
  7600                           
  7601                           ;RF_Control_B1.c: 290: product->Data[14]=RF_Data[14];
  7602  110D  0022               	movlb	2	; select bank2
  7603  110E  082E               	movf	(_RF_Data^(0+256)+14),w
  7604  110F  0020               	movlb	0	; select bank0
  7605  1110  00AD               	movwf	??_setLog_Code
  7606  1111  086D               	movf	_product,w
  7607  1112  3E0E               	addlw	14
  7608  1113  0086               	movwf	6
  7609  1114  3002               	movlw	2	; select bank4/5
  7610  1115  0087               	movwf	7
  7611  1116  082D               	movf	??_setLog_Code,w
  7612  1117  0081               	movwf	1
  7613                           
  7614                           ;RF_Control_B1.c: 291: setBuz(1, 100);
  7615  1118  3064               	movlw	100
  7616  1119  00A9               	movwf	setBuz@time
  7617  111A  3000               	movlw	0
  7618  111B  00AA               	movwf	setBuz@time+1
  7619  111C  3001               	movlw	1
  7620  111D  3195  256B  3190   	fcall	_setBuz
  7621                           
  7622                           ;RF_Control_B1.c: 292: RF1.Learn = 0;
  7623  1120  0021               	movlb	1	; select bank1
  7624  1121  133F               	bcf	_RF1^(0+128),6
  7625                           
  7626                           ;RF_Control_B1.c: 293: if (myMain.First) {
  7627  1122  1C21               	btfss	(_myMain^(0+128)+1),0
  7628  1123  2926               	goto	l2322
  7629                           
  7630                           ;RF_Control_B1.c: 294: Memory.LoopSave=1;
  7631  1124  0024               	movlb	4	; select bank4
  7632  1125  1544               	bsf	(_Memory^(0+512)+36),2
  7633  1126                     l2322:	
  7634                           
  7635                           ;RF_Control_B1.c: 295: }
  7636                           ;RF_Control_B1.c: 296: Memory.Modify=1;
  7637  1126  0024               	movlb	4	; select bank4
  7638  1127  1444               	bsf	(_Memory^(0+512)+36),0
  7639  1128  0008               	return
  7640  1129                     __end_of_setLog_Code:	
  7641                           
  7642                           	psect	text31
  7643  0762                     __ptext31:	
  7644 ;; *************** function _setControl_Lights_Table *****************
  7645 ;; Defined at:
  7646 ;;		line 300 in file "../src/RF_Control_B1.c"
  7647 ;; Parameters:    Size  Location     Type
  7648 ;;		None
  7649 ;; Auto vars:     Size  Location     Type
  7650 ;;		None
  7651 ;; Return value:  Size  Location     Type
  7652 ;;		None               void
  7653 ;; Registers used:
  7654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7655 ;; Tracked objects:
  7656 ;;		On entry : 0/0
  7657 ;;		On exit  : 0/0
  7658 ;;		Unchanged: 0/0
  7659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7664 ;;Total ram usage:        0 bytes
  7665 ;; Hardware stack levels used:    1
  7666 ;; Hardware stack levels required when called:   11
  7667 ;; This function calls:
  7668 ;;		_setBuz
  7669 ;;		_setDimmerLights
  7670 ;;		_setRFSW_AdjControl
  7671 ;;		_setRFSW_Control
  7672 ;;		_setRFSW_Status
  7673 ;;		_setSw_Status
  7674 ;;		_setTxData
  7675 ;; This function is called by:
  7676 ;;		_getRxData
  7677 ;; This function uses a non-reentrant model
  7678 ;;
  7679                           
  7680                           
  7681                           ;psect for function _setControl_Lights_Table
  7682  0762                     _setControl_Lights_Table:	
  7683                           
  7684                           ;RF_Control_B1.c: 301: if (RF_Data[15] == 0x00) {
  7685                           
  7686                           ;incstack = 0
  7687                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7688  0762  0022               	movlb	2	; select bank2
  7689  0763  08AF               	movf	(_RF_Data^(0+256)+15),f
  7690  0764  1D03               	skipz
  7691  0765  2FAE               	goto	l9164
  7692                           
  7693                           ;RF_Control_B1.c: 303: setDimmerLights(1, 0);
  7694  0766  0020               	movlb	0	; select bank0
  7695  0767  01A4               	clrf	setDimmerLights@status
  7696  0768  3001               	movlw	1
  7697  0769  318C  24D2  3187   	fcall	_setDimmerLights
  7698                           
  7699                           ;RF_Control_B1.c: 304: setRFSW_Status(1, 0);
  7700  076C  0020               	movlb	0	; select bank0
  7701  076D  01A2               	clrf	setRFSW_Status@command
  7702  076E  3001               	movlw	1
  7703  076F  319B  230A  3187   	fcall	_setRFSW_Status
  7704                           
  7705                           ;RF_Control_B1.c: 305: setSw_Status(1, 0);
  7706  0772  0020               	movlb	0	; select bank0
  7707  0773  01A2               	clrf	setSw_Status@command
  7708  0774  3001               	movlw	1
  7709  0775  319B  2334  3187   	fcall	_setSw_Status
  7710                           
  7711                           ;RF_Control_B1.c: 308: setDimmerLights(2, 0);
  7712  0778  0020               	movlb	0	; select bank0
  7713  0779  01A4               	clrf	setDimmerLights@status
  7714  077A  3002               	movlw	2
  7715  077B  318C  24D2  3187   	fcall	_setDimmerLights
  7716                           
  7717                           ;RF_Control_B1.c: 309: setRFSW_Status(2, 0);
  7718  077E  0020               	movlb	0	; select bank0
  7719  077F  01A2               	clrf	setRFSW_Status@command
  7720  0780  3002               	movlw	2
  7721  0781  319B  230A  3187   	fcall	_setRFSW_Status
  7722                           
  7723                           ;RF_Control_B1.c: 310: setSw_Status(2, 0);
  7724  0784  0020               	movlb	0	; select bank0
  7725  0785  01A2               	clrf	setSw_Status@command
  7726  0786  3002               	movlw	2
  7727  0787  319B  2334  3187   	fcall	_setSw_Status
  7728                           
  7729                           ;RF_Control_B1.c: 318: product->Data[9]=0;
  7730  078A  0020               	movlb	0	; select bank0
  7731  078B  086D               	movf	_product,w
  7732  078C  3E09               	addlw	9
  7733  078D  0086               	movwf	6
  7734  078E  3002               	movlw	2	; select bank4/5
  7735  078F  0087               	movwf	7
  7736  0790  0181               	clrf	1
  7737                           
  7738                           ;RF_Control_B1.c: 319: product->Data[11]=0;
  7739  0791  086D               	movf	_product,w
  7740  0792  3E0B               	addlw	11
  7741  0793  0086               	movwf	6
  7742  0794  3002               	movlw	2	; select bank4/5
  7743  0795  0087               	movwf	7
  7744  0796  0181               	clrf	1
  7745                           
  7746                           ;RF_Control_B1.c: 320: product->Data[15]=0;
  7747  0797  086D               	movf	_product,w
  7748  0798  3E0F               	addlw	15
  7749  0799  0086               	movwf	6
  7750  079A  3002               	movlw	2	; select bank4/5
  7751  079B  0087               	movwf	7
  7752  079C  0181               	clrf	1
  7753                           
  7754                           ;RF_Control_B1.c: 321: product->Data[17]=0;
  7755  079D  086D               	movf	_product,w
  7756  079E  3E11               	addlw	17
  7757  079F  0086               	movwf	6
  7758  07A0  3002               	movlw	2	; select bank4/5
  7759  07A1  0087               	movwf	7
  7760  07A2  0181               	clrf	1
  7761                           
  7762                           ;RF_Control_B1.c: 322: setBuz(1, 100);
  7763  07A3  3064               	movlw	100
  7764  07A4  00A9               	movwf	setBuz@time
  7765  07A5  3000               	movlw	0
  7766  07A6  00AA               	movwf	setBuz@time+1
  7767  07A7  3001               	movlw	1
  7768  07A8  3195  256B  3187   	fcall	_setBuz
  7769                           
  7770                           ;RF_Control_B1.c: 323: setTxData();
  7771  07AB  318F  2743         	fcall	_setTxData
  7772                           
  7773                           ;RF_Control_B1.c: 324: } else if (RF_Data[15] == 0x20) {
  7774  07AD  0008               	return
  7775  07AE                     l9164:	
  7776  07AE  0022               	movlb	2	; select bank2
  7777  07AF  082F               	movf	(_RF_Data^(0+256)+15),w
  7778  07B0  3A20               	xorlw	32
  7779  07B1  1D03               	skipz
  7780  07B2  2FC9               	goto	l9170
  7781                           
  7782                           ;RF_Control_B1.c: 325: product->Data[9]=0;
  7783  07B3  0020               	movlb	0	; select bank0
  7784  07B4  086D               	movf	_product,w
  7785  07B5  3E09               	addlw	9
  7786  07B6  0086               	movwf	6
  7787  07B7  3002               	movlw	2	; select bank4/5
  7788  07B8  0087               	movwf	7
  7789  07B9  0181               	clrf	1
  7790                           
  7791                           ;RF_Control_B1.c: 326: product->Data[11]=0;
  7792  07BA  086D               	movf	_product,w
  7793  07BB  3E0B               	addlw	11
  7794  07BC  0086               	movwf	6
  7795  07BD  3002               	movlw	2	; select bank4/5
  7796  07BE  0087               	movwf	7
  7797  07BF  0181               	clrf	1
  7798                           
  7799                           ;RF_Control_B1.c: 327: product->Data[17]=0;
  7800  07C0  086D               	movf	_product,w
  7801  07C1  3E11               	addlw	17
  7802  07C2  0086               	movwf	6
  7803  07C3  3002               	movlw	2	; select bank4/5
  7804  07C4  0087               	movwf	7
  7805  07C5  0181               	clrf	1
  7806                           
  7807                           ;RF_Control_B1.c: 328: setTxData();
  7808  07C6  318F  2743         	fcall	_setTxData
  7809                           
  7810                           ;RF_Control_B1.c: 329: }
  7811  07C8  0008               	return
  7812  07C9                     l9170:	
  7813                           
  7814                           ;RF_Control_B1.c: 331: else if (RF_Data[15] == 0x01) {
  7815  07C9  0022               	movlb	2	; select bank2
  7816  07CA  082F               	movf	(_RF_Data^(0+256)+15),w
  7817  07CB  3A01               	xorlw	1
  7818  07CC  1D03               	skipz
  7819  07CD  2FD2               	goto	l9174
  7820                           
  7821                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7822  07CE  3001               	movlw	1
  7823  07CF  318D  255B         	fcall	_setRFSW_Control
  7824                           
  7825                           ;RF_Control_B1.c: 333: }
  7826  07D1  0008               	return
  7827  07D2                     l9174:	
  7828                           
  7829                           ;RF_Control_B1.c: 335: else if (RF_Data[15] == 0x11) {
  7830  07D2  0022               	movlb	2	; select bank2
  7831  07D3  082F               	movf	(_RF_Data^(0+256)+15),w
  7832  07D4  3A11               	xorlw	17
  7833  07D5  1D03               	skipz
  7834  07D6  2FDB               	goto	l9178
  7835                           
  7836                           ;RF_Control_B1.c: 336: setRFSW_AdjControl(1);
  7837  07D7  3001               	movlw	1
  7838  07D8  3192  2203         	fcall	_setRFSW_AdjControl
  7839                           
  7840                           ;RF_Control_B1.c: 337: }
  7841  07DA  0008               	return
  7842  07DB                     l9178:	
  7843                           
  7844                           ;RF_Control_B1.c: 342: else if (RF_Data[15] == 0x02) {
  7845  07DB  0022               	movlb	2	; select bank2
  7846  07DC  082F               	movf	(_RF_Data^(0+256)+15),w
  7847  07DD  3A02               	xorlw	2
  7848  07DE  1D03               	skipz
  7849  07DF  2FE4               	goto	l9182
  7850                           
  7851                           ;RF_Control_B1.c: 343: setRFSW_Control(2);
  7852  07E0  3002               	movlw	2
  7853  07E1  318D  255B         	fcall	_setRFSW_Control
  7854                           
  7855                           ;RF_Control_B1.c: 344: }
  7856  07E3  0008               	return
  7857  07E4                     l9182:	
  7858                           
  7859                           ;RF_Control_B1.c: 346: else if (RF_Data[15] == 0x21) {
  7860  07E4  0022               	movlb	2	; select bank2
  7861  07E5  082F               	movf	(_RF_Data^(0+256)+15),w
  7862  07E6  3A21               	xorlw	33
  7863  07E7  1D03               	skipz
  7864  07E8  0008               	return
  7865                           
  7866                           ;RF_Control_B1.c: 347: setRFSW_AdjControl(2);
  7867  07E9  3002               	movlw	2
  7868  07EA  3192  2203         	fcall	_setRFSW_AdjControl
  7869  07EC  0008               	return
  7870  07ED                     __end_of_setControl_Lights_Table:	
  7871                           
  7872                           	psect	text32
  7873  0D5B                     __ptext32:	
  7874 ;; *************** function _setRFSW_Control *****************
  7875 ;; Defined at:
  7876 ;;		line 388 in file "../src/RF_Control_B1.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;  sw              1    wreg     unsigned char 
  7879 ;; Auto vars:     Size  Location     Type
  7880 ;;  sw              1   67[BANK0 ] unsigned char 
  7881 ;; Return value:  Size  Location     Type
  7882 ;;		None               void
  7883 ;; Registers used:
  7884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7885 ;; Tracked objects:
  7886 ;;		On entry : 0/0
  7887 ;;		On exit  : 0/0
  7888 ;;		Unchanged: 0/0
  7889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;Total ram usage:        2 bytes
  7895 ;; Hardware stack levels used:    1
  7896 ;; Hardware stack levels required when called:    9
  7897 ;; This function calls:
  7898 ;;		_RfSWPointSelect
  7899 ;;		_setBuz
  7900 ;;		_setDelayOff_GO
  7901 ;;		_setDimmerLights_Switch
  7902 ;;		_setDimmerLights_Trigger
  7903 ;;		_setRF_DimmerLights
  7904 ;;		_setSw_Status
  7905 ;;		_setTxData
  7906 ;; This function is called by:
  7907 ;;		_setControl_Lights_Table
  7908 ;; This function uses a non-reentrant model
  7909 ;;
  7910                           
  7911                           
  7912                           ;psect for function _setRFSW_Control
  7913  0D5B                     _setRFSW_Control:	
  7914                           
  7915                           ;incstack = 0
  7916                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7917                           ;setRFSW_Control@sw stored from wreg
  7918  0D5B  0020               	movlb	0	; select bank0
  7919  0D5C  00E3               	movwf	setRFSW_Control@sw
  7920                           
  7921                           ;RF_Control_B1.c: 389: RfSWPointSelect(sw);
  7922  0D5D  0863               	movf	setRFSW_Control@sw,w
  7923  0D5E  3187  27ED  318D   	fcall	_RfSWPointSelect
  7924                           
  7925                           ;RF_Control_B1.c: 390: if (RFSW->Status == 0) {
  7926  0D61  0879               	movf	_RFSW,w
  7927  0D62  0086               	movwf	6
  7928  0D63  0187               	clrf	7
  7929  0D64  1801               	btfsc	1,0
  7930  0D65  2D9A               	goto	l9008
  7931                           
  7932                           ;RF_Control_B1.c: 391: if (RF_Data[16] == 0x80) {
  7933  0D66  0022               	movlb	2	; select bank2
  7934  0D67  0830               	movf	(_RF_Data^(0+256)+16),w
  7935  0D68  3A80               	xorlw	128
  7936  0D69  1D03               	skipz
  7937  0D6A  2D78               	goto	l8998
  7938                           
  7939                           ;RF_Control_B1.c: 392: setDelayOff_GO(sw, 1, RF_Data[17]);
  7940  0D6B  0020               	movlb	0	; select bank0
  7941  0D6C  01AA               	clrf	setDelayOff_GO@command
  7942  0D6D  0AAA               	incf	setDelayOff_GO@command,f
  7943  0D6E  0022               	movlb	2	; select bank2
  7944  0D6F  0831               	movf	(_RF_Data^(0+256)+17),w
  7945  0D70  0020               	movlb	0	; select bank0
  7946  0D71  00E2               	movwf	??_setRFSW_Control
  7947  0D72  0862               	movf	??_setRFSW_Control,w
  7948  0D73  00AB               	movwf	setDelayOff_GO@value
  7949  0D74  0863               	movf	setRFSW_Control@sw,w
  7950  0D75  3196  26DB  318D   	fcall	_setDelayOff_GO
  7951  0D78                     l8998:	
  7952                           
  7953                           ;RF_Control_B1.c: 393: }
  7954                           ;RF_Control_B1.c: 394: RFSW->Status = 1;
  7955  0D78  0879               	movf	_RFSW,w
  7956  0D79  0086               	movwf	6
  7957  0D7A  0187               	clrf	7
  7958  0D7B  1401               	bsf	1,0
  7959                           
  7960                           ;RF_Control_B1.c: 395: setSw_Status(sw, 1);
  7961  0D7C  0020               	movlb	0	; select bank0
  7962  0D7D  01A2               	clrf	setSw_Status@command
  7963  0D7E  0AA2               	incf	setSw_Status@command,f
  7964  0D7F  0863               	movf	setRFSW_Control@sw,w
  7965  0D80  319B  2334  318D   	fcall	_setSw_Status
  7966                           
  7967                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw, 1);
  7968  0D83  0020               	movlb	0	; select bank0
  7969  0D84  01A2               	clrf	setDimmerLights_Trigger@command
  7970  0D85  0AA2               	incf	setDimmerLights_Trigger@command,f
  7971  0D86  0863               	movf	setRFSW_Control@sw,w
  7972  0D87  319B  2371  318D   	fcall	_setDimmerLights_Trigger
  7973                           
  7974                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw, 1);
  7975  0D8A  0020               	movlb	0	; select bank0
  7976  0D8B  01A2               	clrf	setDimmerLights_Switch@command
  7977  0D8C  0AA2               	incf	setDimmerLights_Switch@command,f
  7978  0D8D  0863               	movf	setRFSW_Control@sw,w
  7979  0D8E  319B  2361  318D   	fcall	_setDimmerLights_Switch
  7980                           
  7981                           ;RF_Control_B1.c: 400: setRF_DimmerLights(sw, RFSW->Status);
  7982  0D91  0879               	movf	_RFSW,w
  7983  0D92  0086               	movwf	6
  7984  0D93  0187               	clrf	7
  7985  0D94  3000               	movlw	0
  7986  0D95  1801               	btfsc	1,0
  7987  0D96  3001               	movlw	1
  7988  0D97  0020               	movlb	0	; select bank0
  7989  0D98  00DD               	movwf	setRF_DimmerLights@on
  7990  0D99  2DD6               	goto	L3
  7991  0D9A                     l9008:	
  7992                           ;RF_Control_B1.c: 401: } else {
  7993                           
  7994                           
  7995                           ;RF_Control_B1.c: 402: if (RF_Data[16] == 0x80) {
  7996  0D9A  0022               	movlb	2	; select bank2
  7997  0D9B  0830               	movf	(_RF_Data^(0+256)+16),w
  7998  0D9C  3A80               	xorlw	128
  7999  0D9D  1D03               	skipz
  8000  0D9E  2DB0               	goto	l9012
  8001                           
  8002                           ;RF_Control_B1.c: 403: setDelayOff_GO(sw, 1, RF_Data[17]);
  8003  0D9F  0020               	movlb	0	; select bank0
  8004  0DA0  01AA               	clrf	setDelayOff_GO@command
  8005  0DA1  0AAA               	incf	setDelayOff_GO@command,f
  8006  0DA2  0022               	movlb	2	; select bank2
  8007  0DA3  0831               	movf	(_RF_Data^(0+256)+17),w
  8008  0DA4  0020               	movlb	0	; select bank0
  8009  0DA5  00E2               	movwf	??_setRFSW_Control
  8010  0DA6  0862               	movf	??_setRFSW_Control,w
  8011  0DA7  00AB               	movwf	setDelayOff_GO@value
  8012  0DA8  0863               	movf	setRFSW_Control@sw,w
  8013  0DA9  3196  26DB  318D   	fcall	_setDelayOff_GO
  8014                           
  8015                           ;RF_Control_B1.c: 404: setRF_DimmerLights(sw, 1);
  8016  0DAC  0020               	movlb	0	; select bank0
  8017  0DAD  01DD               	clrf	setRF_DimmerLights@on
  8018  0DAE  0ADD               	incf	setRF_DimmerLights@on,f
  8019  0DAF  2DD6               	goto	L3
  8020  0DB0                     l9012:	
  8021                           ;RF_Control_B1.c: 405: } else {
  8022                           
  8023                           
  8024                           ;RF_Control_B1.c: 406: RFSW->Status = 0;
  8025  0DB0  0879               	movf	_RFSW,w
  8026  0DB1  0086               	movwf	6
  8027  0DB2  0187               	clrf	7
  8028  0DB3  1001               	bcf	1,0
  8029                           
  8030                           ;RF_Control_B1.c: 407: setSw_Status(sw, 0);
  8031  0DB4  0020               	movlb	0	; select bank0
  8032  0DB5  01A2               	clrf	setSw_Status@command
  8033  0DB6  0863               	movf	setRFSW_Control@sw,w
  8034  0DB7  319B  2334  318D   	fcall	_setSw_Status
  8035                           
  8036                           ;RF_Control_B1.c: 409: setDimmerLights_Trigger(sw, 1);
  8037  0DBA  0020               	movlb	0	; select bank0
  8038  0DBB  01A2               	clrf	setDimmerLights_Trigger@command
  8039  0DBC  0AA2               	incf	setDimmerLights_Trigger@command,f
  8040  0DBD  0863               	movf	setRFSW_Control@sw,w
  8041  0DBE  319B  2371  318D   	fcall	_setDimmerLights_Trigger
  8042                           
  8043                           ;RF_Control_B1.c: 410: setDimmerLights_Switch(sw, RFSW->Status);
  8044  0DC1  0879               	movf	_RFSW,w
  8045  0DC2  0086               	movwf	6
  8046  0DC3  0187               	clrf	7
  8047  0DC4  3000               	movlw	0
  8048  0DC5  1801               	btfsc	1,0
  8049  0DC6  3001               	movlw	1
  8050  0DC7  0020               	movlb	0	; select bank0
  8051  0DC8  00A2               	movwf	setDimmerLights_Switch@command
  8052  0DC9  0863               	movf	setRFSW_Control@sw,w
  8053  0DCA  319B  2361  318D   	fcall	_setDimmerLights_Switch
  8054                           
  8055                           ;RF_Control_B1.c: 412: setDelayOff_GO(sw, 0, 0);
  8056  0DCD  0020               	movlb	0	; select bank0
  8057  0DCE  01AA               	clrf	setDelayOff_GO@command
  8058  0DCF  01AB               	clrf	setDelayOff_GO@value
  8059  0DD0  0863               	movf	setRFSW_Control@sw,w
  8060  0DD1  3196  26DB  318D   	fcall	_setDelayOff_GO
  8061                           
  8062                           ;RF_Control_B1.c: 413: setRF_DimmerLights(sw, 0);
  8063  0DD4  0020               	movlb	0	; select bank0
  8064  0DD5  01DD               	clrf	setRF_DimmerLights@on
  8065  0DD6                     L3:	
  8066  0DD6  0863               	movf	setRFSW_Control@sw,w
  8067  0DD7  3189  211B  318D   	fcall	_setRF_DimmerLights
  8068                           
  8069                           ;RF_Control_B1.c: 414: }
  8070                           ;RF_Control_B1.c: 415: }
  8071                           ;RF_Control_B1.c: 416: setBuz(1, 100);
  8072  0DDA  3064               	movlw	100
  8073  0DDB  0020               	movlb	0	; select bank0
  8074  0DDC  00A9               	movwf	setBuz@time
  8075  0DDD  3000               	movlw	0
  8076  0DDE  00AA               	movwf	setBuz@time+1
  8077  0DDF  3001               	movlw	1
  8078  0DE0  3195  256B  318D   	fcall	_setBuz
  8079                           
  8080                           ;RF_Control_B1.c: 417: setTxData();
  8081  0DE3  318F  2743         	fcall	_setTxData
  8082  0DE5  0008               	return
  8083  0DE6                     __end_of_setRFSW_Control:	
  8084                           
  8085                           	psect	text33
  8086  16DB                     __ptext33:	
  8087 ;; *************** function _setDelayOff_GO *****************
  8088 ;; Defined at:
  8089 ;;		line 86 in file "../src/DelayOff_B1.c"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;  sw              1    wreg     unsigned char 
  8092 ;;  command         1   10[BANK0 ] unsigned char 
  8093 ;;  value           1   11[BANK0 ] unsigned char 
  8094 ;; Auto vars:     Size  Location     Type
  8095 ;;  sw              1   14[BANK0 ] unsigned char 
  8096 ;; Return value:  Size  Location     Type
  8097 ;;		None               void
  8098 ;; Registers used:
  8099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;Total ram usage:        5 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    7
  8112 ;; This function calls:
  8113 ;;		_DelayOffPointSelect
  8114 ;;		_DelayTimejudge
  8115 ;; This function is called by:
  8116 ;;		_setRFSW_Control
  8117 ;;		_Sw_DimmerOffFunc
  8118 ;; This function uses a non-reentrant model
  8119 ;;
  8120                           
  8121                           
  8122                           ;psect for function _setDelayOff_GO
  8123  16DB                     _setDelayOff_GO:	
  8124                           
  8125                           ;incstack = 0
  8126                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8127                           ;setDelayOff_GO@sw stored from wreg
  8128  16DB  0020               	movlb	0	; select bank0
  8129  16DC  00AE               	movwf	setDelayOff_GO@sw
  8130                           
  8131                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  8132  16DD  082E               	movf	setDelayOff_GO@sw,w
  8133  16DE  319C  2467  3196   	fcall	_DelayOffPointSelect
  8134                           
  8135                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  8136  16E1  0020               	movlb	0	; select bank0
  8137  16E2  086A               	movf	_DelayOff,w
  8138  16E3  0086               	movwf	6
  8139  16E4  0187               	clrf	7
  8140  16E5  1C01               	btfss	1,0
  8141  16E6  0008               	return
  8142                           
  8143                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  8144  16E7  082A               	movf	setDelayOff_GO@command,w
  8145  16E8  3A01               	xorlw	1
  8146  16E9  3000               	movlw	0
  8147  16EA  1903               	skipnz
  8148  16EB  3001               	movlw	1
  8149  16EC  00AC               	movwf	??_setDelayOff_GO
  8150  16ED  086A               	movf	_DelayOff,w
  8151  16EE  0086               	movwf	6
  8152  16EF  0187               	clrf	7
  8153  16F0  0DAC               	rlf	??_setDelayOff_GO,f
  8154  16F1  0801               	movf	1,w
  8155  16F2  062C               	xorwf	??_setDelayOff_GO,w
  8156  16F3  39FD               	andlw	-3
  8157  16F4  062C               	xorwf	??_setDelayOff_GO,w
  8158  16F5  0081               	movwf	1
  8159                           
  8160                           ;DelayOff_B1.c: 90: if (command == 1) {
  8161  16F6  082A               	movf	setDelayOff_GO@command,w
  8162  16F7  3A01               	xorlw	1
  8163  16F8  1D03               	skipz
  8164  16F9  2F23               	goto	l8770
  8165                           
  8166                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  8167  16FA  082B               	movf	setDelayOff_GO@value,w
  8168  16FB  319F  27AB  3196   	fcall	_DelayTimejudge
  8169  16FE  0020               	movlb	0	; select bank0
  8170  16FF  00AC               	movwf	??_setDelayOff_GO
  8171  1700  086A               	movf	_DelayOff,w
  8172  1701  0086               	movwf	6
  8173  1702  0187               	clrf	7
  8174  1703  082C               	movf	??_setDelayOff_GO,w
  8175  1704  0081               	movwf	1
  8176                           
  8177                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  8178  1705  300F               	movlw	15
  8179  1706  052B               	andwf	setDelayOff_GO@value,w
  8180  1707  00AC               	movwf	??_setDelayOff_GO
  8181  1708  082C               	movf	??_setDelayOff_GO,w
  8182  1709  3A05               	xorlw	5
  8183  170A  1903               	skipnz
  8184  170B  2F10               	goto	l8764
  8185  170C  082B               	movf	setDelayOff_GO@value,w
  8186  170D  390F               	andlw	15
  8187  170E  1D03               	btfss	3,2
  8188  170F  2F16               	goto	l8768
  8189  1710                     l8764:	
  8190  1710  3026               	movlw	38
  8191  1711  022B               	subwf	setDelayOff_GO@value,w
  8192  1712  1803               	skipnc
  8193  1713  2F16               	goto	l8768
  8194                           
  8195                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  8196  1714  082B               	movf	setDelayOff_GO@value,w
  8197  1715  2F17               	goto	L4
  8198  1716                     l8768:	
  8199                           ;DelayOff_B1.c: 94: } else {
  8200                           
  8201                           
  8202                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  8203  1716  3005               	movlw	5
  8204  1717                     L4:	
  8205  1717  00AC               	movwf	??_setDelayOff_GO
  8206  1718  082E               	movf	setDelayOff_GO@sw,w
  8207  1719  3E1A               	addlw	26
  8208  171A  076D               	addwf	_product,w
  8209  171B  00AD               	movwf	??_setDelayOff_GO+1
  8210  171C  082D               	movf	??_setDelayOff_GO+1,w
  8211  171D  0086               	movwf	6
  8212  171E  3002               	movlw	2	; select bank4/5
  8213  171F  0087               	movwf	7
  8214  1720  082C               	movf	??_setDelayOff_GO,w
  8215  1721  0081               	movwf	1
  8216                           
  8217                           ;DelayOff_B1.c: 96: }
  8218                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  8219  1722  2F2F               	goto	l8774
  8220  1723                     l8770:	
  8221  1723  08AA               	movf	setDelayOff_GO@command,f
  8222  1724  1D03               	skipz
  8223  1725  2F2F               	goto	l8774
  8224                           
  8225                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  8226  1726  082E               	movf	setDelayOff_GO@sw,w
  8227  1727  3E1A               	addlw	26
  8228  1728  076D               	addwf	_product,w
  8229  1729  00AC               	movwf	??_setDelayOff_GO
  8230  172A  082C               	movf	??_setDelayOff_GO,w
  8231  172B  0086               	movwf	6
  8232  172C  3002               	movlw	2	; select bank4/5
  8233  172D  0087               	movwf	7
  8234  172E  0181               	clrf	1
  8235  172F                     l8774:	
  8236                           
  8237                           ;DelayOff_B1.c: 99: }
  8238                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  8239  172F  086A               	movf	_DelayOff,w
  8240  1730  0086               	movwf	6
  8241  1731  0187               	clrf	7
  8242  1732  3000               	movlw	0
  8243  1733  3FC0               	movwi [0]fsr1
  8244  1734  3FC1               	movwi [1]fsr1
  8245                           
  8246                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  8247  1735  086A               	movf	_DelayOff,w
  8248  1736  0086               	movwf	6
  8249  1737  0187               	clrf	7
  8250  1738  0181               	clrf	1
  8251  1739  0008               	return
  8252  173A                     __end_of_setDelayOff_GO:	
  8253                           
  8254                           	psect	text34
  8255  1FAB                     __ptext34:	
  8256 ;; *************** function _DelayTimejudge *****************
  8257 ;; Defined at:
  8258 ;;		line 106 in file "../src/DelayOff_B1.c"
  8259 ;; Parameters:    Size  Location     Type
  8260 ;;  value           1    wreg     unsigned char 
  8261 ;; Auto vars:     Size  Location     Type
  8262 ;;  value           1    9[BANK0 ] unsigned char 
  8263 ;;  k               1    8[BANK0 ] unsigned char 
  8264 ;;  j               1    7[BANK0 ] unsigned char 
  8265 ;;  i               1    6[BANK0 ] unsigned char 
  8266 ;; Return value:  Size  Location     Type
  8267 ;;                  1    wreg      unsigned char 
  8268 ;; Registers used:
  8269 ;;		wreg, status,2, status,0, pclath, cstack
  8270 ;; Tracked objects:
  8271 ;;		On entry : 0/0
  8272 ;;		On exit  : 0/0
  8273 ;;		Unchanged: 0/0
  8274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8277 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8278 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8279 ;;Total ram usage:        6 bytes
  8280 ;; Hardware stack levels used:    1
  8281 ;; Hardware stack levels required when called:    6
  8282 ;; This function calls:
  8283 ;;		___bmul
  8284 ;; This function is called by:
  8285 ;;		_setDelayOff_GO
  8286 ;; This function uses a non-reentrant model
  8287 ;;
  8288                           
  8289                           
  8290                           ;psect for function _DelayTimejudge
  8291  1FAB                     _DelayTimejudge:	
  8292                           
  8293                           ;incstack = 0
  8294                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  8295                           ;DelayTimejudge@value stored from wreg
  8296  1FAB  0020               	movlb	0	; select bank0
  8297  1FAC  00A9               	movwf	DelayTimejudge@value
  8298                           
  8299                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  8300  1FAD  3005               	movlw	5
  8301  1FAE  00A4               	movwf	??_DelayTimejudge
  8302  1FAF  0824               	movf	??_DelayTimejudge,w
  8303  1FB0  00A6               	movwf	DelayTimejudge@i
  8304  1FB1  01A7               	clrf	DelayTimejudge@j
  8305  1FB2  01A8               	clrf	DelayTimejudge@k
  8306                           
  8307                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  8308  1FB3  3031               	movlw	49
  8309  1FB4  0229               	subwf	DelayTimejudge@value,w
  8310  1FB5  1803               	skipnc
  8311  1FB6  2FD3               	goto	l8556
  8312                           
  8313                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  8314  1FB7  0829               	movf	DelayTimejudge@value,w
  8315  1FB8  390F               	andlw	15
  8316  1FB9  00A4               	movwf	??_DelayTimejudge
  8317  1FBA  0824               	movf	??_DelayTimejudge,w
  8318  1FBB  00A7               	movwf	DelayTimejudge@j
  8319                           
  8320                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  8321  1FBC  0829               	movf	DelayTimejudge@value,w
  8322  1FBD  00A4               	movwf	??_DelayTimejudge
  8323  1FBE  3004               	movlw	4
  8324  1FBF                     u8575:	
  8325  1FBF  36A4               	lsrf	??_DelayTimejudge,f
  8326  1FC0  0B89               	decfsz	9,f
  8327  1FC1  2FBF               	goto	u8575
  8328  1FC2  0824               	movf	??_DelayTimejudge,w
  8329  1FC3  390F               	andlw	15
  8330  1FC4  00A5               	movwf	??_DelayTimejudge+1
  8331  1FC5  0825               	movf	??_DelayTimejudge+1,w
  8332  1FC6  00A8               	movwf	DelayTimejudge@k
  8333                           
  8334                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  8335  1FC7  300A               	movlw	10
  8336  1FC8  00A4               	movwf	??_DelayTimejudge
  8337  1FC9  0824               	movf	??_DelayTimejudge,w
  8338  1FCA  00A0               	movwf	___bmul@multiplicand
  8339  1FCB  0828               	movf	DelayTimejudge@k,w
  8340  1FCC  319C  2408         	fcall	___bmul
  8341  1FCE  0020               	movlb	0	; select bank0
  8342  1FCF  0727               	addwf	DelayTimejudge@j,w
  8343  1FD0  00A5               	movwf	??_DelayTimejudge+1
  8344  1FD1  0825               	movf	??_DelayTimejudge+1,w
  8345  1FD2  00A6               	movwf	DelayTimejudge@i
  8346  1FD3                     l8556:	
  8347                           
  8348                           ;DelayOff_B1.c: 112: }
  8349                           ;DelayOff_B1.c: 133: return i;
  8350  1FD3  0826               	movf	DelayTimejudge@i,w
  8351  1FD4  0008               	return
  8352  1FD5                     __end_of_DelayTimejudge:	
  8353                           
  8354                           	psect	text35
  8355  1C08                     __ptext35:	
  8356 ;; *************** function ___bmul *****************
  8357 ;; Defined at:
  8358 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  8359 ;; Parameters:    Size  Location     Type
  8360 ;;  multiplier      1    wreg     unsigned char 
  8361 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8362 ;; Auto vars:     Size  Location     Type
  8363 ;;  multiplier      1    3[BANK0 ] unsigned char 
  8364 ;;  product         1    2[BANK0 ] unsigned char 
  8365 ;; Return value:  Size  Location     Type
  8366 ;;                  1    wreg      unsigned char 
  8367 ;; Registers used:
  8368 ;;		wreg, status,2, status,0
  8369 ;; Tracked objects:
  8370 ;;		On entry : 0/0
  8371 ;;		On exit  : 0/0
  8372 ;;		Unchanged: 0/0
  8373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8374 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8375 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8377 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8378 ;;Total ram usage:        4 bytes
  8379 ;; Hardware stack levels used:    1
  8380 ;; Hardware stack levels required when called:    5
  8381 ;; This function calls:
  8382 ;;		Nothing
  8383 ;; This function is called by:
  8384 ;;		_DelayTimejudge
  8385 ;; This function uses a non-reentrant model
  8386 ;;
  8387                           
  8388                           
  8389                           ;psect for function ___bmul
  8390  1C08                     ___bmul:	
  8391                           
  8392                           ;incstack = 0
  8393                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8394                           ;___bmul@multiplier stored from wreg
  8395  1C08  0020               	movlb	0	; select bank0
  8396  1C09  00A3               	movwf	___bmul@multiplier
  8397  1C0A  01A2               	clrf	___bmul@product
  8398  1C0B                     l8522:	
  8399  1C0B  1C23               	btfss	___bmul@multiplier,0
  8400  1C0C  2C11               	goto	l8526
  8401  1C0D  0820               	movf	___bmul@multiplicand,w
  8402  1C0E  00A1               	movwf	??___bmul
  8403  1C0F  0821               	movf	??___bmul,w
  8404  1C10  07A2               	addwf	___bmul@product,f
  8405  1C11                     l8526:	
  8406  1C11  1003               	clrc
  8407  1C12  0DA0               	rlf	___bmul@multiplicand,f
  8408  1C13  1003               	clrc
  8409  1C14  0CA3               	rrf	___bmul@multiplier,f
  8410  1C15  08A3               	movf	___bmul@multiplier,f
  8411  1C16  1D03               	skipz
  8412  1C17  2C0B               	goto	l8522
  8413  1C18  0822               	movf	___bmul@product,w
  8414  1C19  0008               	return
  8415  1C1A                     __end_of___bmul:	
  8416                           
  8417                           	psect	text36
  8418  1203                     __ptext36:	
  8419 ;; *************** function _setRFSW_AdjControl *****************
  8420 ;; Defined at:
  8421 ;;		line 421 in file "../src/RF_Control_B1.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;  sw              1    wreg     unsigned char 
  8424 ;; Auto vars:     Size  Location     Type
  8425 ;;  sw              1   70[BANK0 ] unsigned char 
  8426 ;; Return value:  Size  Location     Type
  8427 ;;		None               void
  8428 ;; Registers used:
  8429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8430 ;; Tracked objects:
  8431 ;;		On entry : 0/0
  8432 ;;		On exit  : 0/0
  8433 ;;		Unchanged: 0/0
  8434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8437 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;Total ram usage:        3 bytes
  8440 ;; Hardware stack levels used:    1
  8441 ;; Hardware stack levels required when called:   10
  8442 ;; This function calls:
  8443 ;;		_RfSWPointSelect
  8444 ;;		_setRF_DimmerValue
  8445 ;;		_setTxData
  8446 ;; This function is called by:
  8447 ;;		_setControl_Lights_Table
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           
  8452                           ;psect for function _setRFSW_AdjControl
  8453  1203                     _setRFSW_AdjControl:	
  8454                           
  8455                           ;incstack = 0
  8456                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8457                           ;setRFSW_AdjControl@sw stored from wreg
  8458  1203  0020               	movlb	0	; select bank0
  8459  1204  00E6               	movwf	setRFSW_AdjControl@sw
  8460                           
  8461                           ;RF_Control_B1.c: 422: RfSWPointSelect(sw);
  8462  1205  0866               	movf	setRFSW_AdjControl@sw,w
  8463  1206  3187  27ED  3192   	fcall	_RfSWPointSelect
  8464                           
  8465                           ;RF_Control_B1.c: 423: if (RFSW->Status == 1) {
  8466  1209  0879               	movf	_RFSW,w
  8467  120A  0086               	movwf	6
  8468  120B  0187               	clrf	7
  8469  120C  1C01               	btfss	1,0
  8470  120D  2A16               	goto	l9036
  8471                           
  8472                           ;RF_Control_B1.c: 424: Memory.Modify=1;
  8473  120E  0024               	movlb	4	; select bank4
  8474  120F  1444               	bsf	(_Memory^(0+512)+36),0
  8475                           
  8476                           ;RF_Control_B1.c: 425: setRF_DimmerValue(sw);
  8477  1210  0020               	movlb	0	; select bank0
  8478  1211  0866               	movf	setRFSW_AdjControl@sw,w
  8479  1212  3191  2129  3192   	fcall	_setRF_DimmerValue
  8480                           
  8481                           ;RF_Control_B1.c: 426: } else {
  8482  1215  2A28               	goto	l2354
  8483  1216                     l9036:	
  8484                           
  8485                           ;RF_Control_B1.c: 427: product->Data[9]=product->Data[20 + sw];
  8486  1216  0020               	movlb	0	; select bank0
  8487  1217  0866               	movf	setRFSW_AdjControl@sw,w
  8488  1218  3E14               	addlw	20
  8489  1219  076D               	addwf	_product,w
  8490  121A  00E4               	movwf	??_setRFSW_AdjControl
  8491  121B  0864               	movf	??_setRFSW_AdjControl,w
  8492  121C  0086               	movwf	6
  8493  121D  3002               	movlw	2	; select bank4/5
  8494  121E  0087               	movwf	7
  8495  121F  0801               	movf	1,w
  8496  1220  00E5               	movwf	??_setRFSW_AdjControl+1
  8497  1221  086D               	movf	_product,w
  8498  1222  3E09               	addlw	9
  8499  1223  0086               	movwf	6
  8500  1224  3002               	movlw	2	; select bank4/5
  8501  1225  0087               	movwf	7
  8502  1226  0865               	movf	??_setRFSW_AdjControl+1,w
  8503  1227  0081               	movwf	1
  8504  1228                     l2354:	
  8505                           
  8506                           ;RF_Control_B1.c: 428: }
  8507                           ;RF_Control_B1.c: 429: product->Data[17]=product->Data[26 + sw];
  8508  1228  0020               	movlb	0	; select bank0
  8509  1229  0866               	movf	setRFSW_AdjControl@sw,w
  8510  122A  3E1A               	addlw	26
  8511  122B  076D               	addwf	_product,w
  8512  122C  00E4               	movwf	??_setRFSW_AdjControl
  8513  122D  0864               	movf	??_setRFSW_AdjControl,w
  8514  122E  0086               	movwf	6
  8515  122F  3002               	movlw	2	; select bank4/5
  8516  1230  0087               	movwf	7
  8517  1231  0801               	movf	1,w
  8518  1232  00E5               	movwf	??_setRFSW_AdjControl+1
  8519  1233  086D               	movf	_product,w
  8520  1234  3E11               	addlw	17
  8521  1235  0086               	movwf	6
  8522  1236  3002               	movlw	2	; select bank4/5
  8523  1237  0087               	movwf	7
  8524  1238  0865               	movf	??_setRFSW_AdjControl+1,w
  8525  1239  0081               	movwf	1
  8526                           
  8527                           ;RF_Control_B1.c: 430: setTxData();
  8528  123A  318F  2743         	fcall	_setTxData
  8529  123C  0008               	return
  8530  123D                     __end_of_setRFSW_AdjControl:	
  8531                           
  8532                           	psect	text37
  8533  1129                     __ptext37:	
  8534 ;; *************** function _setRF_DimmerValue *****************
  8535 ;; Defined at:
  8536 ;;		line 441 in file "../src/RF_Control_B1.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;  lights          1    wreg     unsigned char 
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;  lights          1   67[BANK0 ] unsigned char 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;		None               void
  8543 ;; Registers used:
  8544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;Total ram usage:        3 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    9
  8557 ;; This function calls:
  8558 ;;		_setDimmerLights_AdjRF
  8559 ;; This function is called by:
  8560 ;;		_setRFSW_AdjControl
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           
  8565                           ;psect for function _setRF_DimmerValue
  8566  1129                     _setRF_DimmerValue:	
  8567                           
  8568                           ;incstack = 0
  8569                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8570                           ;setRF_DimmerValue@lights stored from wreg
  8571  1129  0020               	movlb	0	; select bank0
  8572  112A  00E3               	movwf	setRF_DimmerValue@lights
  8573                           
  8574                           ;RF_Control_B1.c: 442: if (RF_Data[9] > 0x64) {
  8575  112B  3065               	movlw	101
  8576  112C  0022               	movlb	2	; select bank2
  8577  112D  0229               	subwf	(_RF_Data^(0+256)+9),w
  8578  112E  1C03               	skipc
  8579  112F  2936               	goto	l8870
  8580                           
  8581                           ;RF_Control_B1.c: 443: RF_Data[9] = 0x64;
  8582  1130  3064               	movlw	100
  8583  1131  0020               	movlb	0	; select bank0
  8584  1132  00E1               	movwf	??_setRF_DimmerValue
  8585  1133  0861               	movf	??_setRF_DimmerValue,w
  8586  1134  0022               	movlb	2	; select bank2
  8587  1135  00A9               	movwf	(_RF_Data^(0+256)+9)
  8588  1136                     l8870:	
  8589                           
  8590                           ;RF_Control_B1.c: 444: }
  8591                           ;RF_Control_B1.c: 445: product->Data[9]=RF_Data[9];
  8592  1136  0829               	movf	(_RF_Data^(0+256)+9),w
  8593  1137  0020               	movlb	0	; select bank0
  8594  1138  00E1               	movwf	??_setRF_DimmerValue
  8595  1139  086D               	movf	_product,w
  8596  113A  3E09               	addlw	9
  8597  113B  0086               	movwf	6
  8598  113C  3002               	movlw	2	; select bank4/5
  8599  113D  0087               	movwf	7
  8600  113E  0861               	movf	??_setRF_DimmerValue,w
  8601  113F  0081               	movwf	1
  8602                           
  8603                           ;RF_Control_B1.c: 446: product->Data[11]=lights;
  8604  1140  0863               	movf	setRF_DimmerValue@lights,w
  8605  1141  00E1               	movwf	??_setRF_DimmerValue
  8606  1142  086D               	movf	_product,w
  8607  1143  3E0B               	addlw	11
  8608  1144  0086               	movwf	6
  8609  1145  3002               	movlw	2	; select bank4/5
  8610  1146  0087               	movwf	7
  8611  1147  0861               	movf	??_setRF_DimmerValue,w
  8612  1148  0081               	movwf	1
  8613                           
  8614                           ;RF_Control_B1.c: 447: product->Data[(20 + lights)]=product->Data[9];
  8615  1149  086D               	movf	_product,w
  8616  114A  3E09               	addlw	9
  8617  114B  0086               	movwf	6
  8618  114C  3002               	movlw	2	; select bank4/5
  8619  114D  0087               	movwf	7
  8620  114E  0801               	movf	1,w
  8621  114F  00E1               	movwf	??_setRF_DimmerValue
  8622  1150  0863               	movf	setRF_DimmerValue@lights,w
  8623  1151  3E14               	addlw	20
  8624  1152  076D               	addwf	_product,w
  8625  1153  00E2               	movwf	??_setRF_DimmerValue+1
  8626  1154  0862               	movf	??_setRF_DimmerValue+1,w
  8627  1155  0086               	movwf	6
  8628  1156  3002               	movlw	2	; select bank4/5
  8629  1157  0087               	movwf	7
  8630  1158  0861               	movf	??_setRF_DimmerValue,w
  8631  1159  0081               	movwf	1
  8632                           
  8633                           ;RF_Control_B1.c: 448: setDimmerLights_AdjRF(lights);
  8634  115A  0863               	movf	setRF_DimmerValue@lights,w
  8635  115B  319F  2710         	fcall	_setDimmerLights_AdjRF
  8636  115D  0008               	return
  8637  115E                     __end_of_setRF_DimmerValue:	
  8638                           
  8639                           	psect	text38
  8640  1F10                     __ptext38:	
  8641 ;; *************** function _setDimmerLights_AdjRF *****************
  8642 ;; Defined at:
  8643 ;;		line 688 in file "../src/Dimmer_B1.c"
  8644 ;; Parameters:    Size  Location     Type
  8645 ;;  lights          1    wreg     unsigned char 
  8646 ;; Auto vars:     Size  Location     Type
  8647 ;;  lights          1   64[BANK0 ] unsigned char 
  8648 ;; Return value:  Size  Location     Type
  8649 ;;		None               void
  8650 ;; Registers used:
  8651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8652 ;; Tracked objects:
  8653 ;;		On entry : 0/0
  8654 ;;		On exit  : 0/0
  8655 ;;		Unchanged: 0/0
  8656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8661 ;;Total ram usage:        2 bytes
  8662 ;; Hardware stack levels used:    1
  8663 ;; Hardware stack levels required when called:    8
  8664 ;; This function calls:
  8665 ;;		_DimmerLightsPointSelect
  8666 ;;		_getPercentValue
  8667 ;; This function is called by:
  8668 ;;		_setRF_DimmerValue
  8669 ;; This function uses a non-reentrant model
  8670 ;;
  8671                           
  8672                           
  8673                           ;psect for function _setDimmerLights_AdjRF
  8674  1F10                     _setDimmerLights_AdjRF:	
  8675                           
  8676                           ;incstack = 0
  8677                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8678                           ;setDimmerLights_AdjRF@lights stored from wreg
  8679  1F10  0020               	movlb	0	; select bank0
  8680  1F11  00E0               	movwf	setDimmerLights_AdjRF@lights
  8681                           
  8682                           ;Dimmer_B1.c: 690: DimmerLightsPointSelect(lights);
  8683  1F12  0860               	movf	setDimmerLights_AdjRF@lights,w
  8684  1F13  319C  242C  319F   	fcall	_DimmerLightsPointSelect
  8685                           
  8686                           ;Dimmer_B1.c: 691: DimmerLights->AdjRF = 1;
  8687  1F16  0020               	movlb	0	; select bank0
  8688  1F17  086B               	movf	_DimmerLights,w
  8689  1F18  0086               	movwf	6
  8690  1F19  3001               	movlw	1	; select bank2/3
  8691  1F1A  0087               	movwf	7
  8692  1F1B  1501               	bsf	1,2
  8693                           
  8694                           ;Dimmer_B1.c: 692: DimmerLights->Signal = 1;
  8695  1F1C  086B               	movf	_DimmerLights,w
  8696  1F1D  0086               	movwf	6
  8697  1F1E  3001               	movlw	1	; select bank2/3
  8698  1F1F  0087               	movwf	7
  8699  1F20  1481               	bsf	1,1
  8700                           
  8701                           ;Dimmer_B1.c: 693: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8702  1F21  086D               	movf	_product,w
  8703  1F22  3E09               	addlw	9
  8704  1F23  0086               	movwf	6
  8705  1F24  3002               	movlw	2	; select bank4/5
  8706  1F25  0087               	movwf	7
  8707  1F26  0801               	movf	1,w
  8708  1F27  3195  25C4         	fcall	_getPercentValue
  8709  1F29  0020               	movlb	0	; select bank0
  8710  1F2A  00DF               	movwf	??_setDimmerLights_AdjRF
  8711  1F2B  086B               	movf	_DimmerLights,w
  8712  1F2C  3E05               	addlw	5
  8713  1F2D  0086               	movwf	6
  8714  1F2E  3001               	movlw	1	; select bank2/3
  8715  1F2F  0087               	movwf	7
  8716  1F30  085F               	movf	??_setDimmerLights_AdjRF,w
  8717  1F31  0081               	movwf	1
  8718  1F32  0008               	return
  8719  1F33                     __end_of_setDimmerLights_AdjRF:	
  8720                           
  8721                           	psect	text39
  8722  15C4                     __ptext39:	
  8723 ;; *************** function _getPercentValue *****************
  8724 ;; Defined at:
  8725 ;;		line 761 in file "../src/Dimmer_B1.c"
  8726 ;; Parameters:    Size  Location     Type
  8727 ;;  value           1    wreg     unsigned char 
  8728 ;; Auto vars:     Size  Location     Type
  8729 ;;  value           1   59[BANK0 ] unsigned char 
  8730 ;;  i               3   60[BANK0 ] float 
  8731 ;; Return value:  Size  Location     Type
  8732 ;;                  1    wreg      unsigned char 
  8733 ;; Registers used:
  8734 ;;		wreg, status,2, status,0, pclath, cstack
  8735 ;; Tracked objects:
  8736 ;;		On entry : 0/0
  8737 ;;		On exit  : 0/0
  8738 ;;		Unchanged: 0/0
  8739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8744 ;;Total ram usage:        6 bytes
  8745 ;; Hardware stack levels used:    1
  8746 ;; Hardware stack levels required when called:    7
  8747 ;; This function calls:
  8748 ;;		___awtoft
  8749 ;;		___ftadd
  8750 ;;		___ftdiv
  8751 ;;		___ftmul
  8752 ;;		___fttol
  8753 ;; This function is called by:
  8754 ;;		_setDimmerLights_AdjRF
  8755 ;; This function uses a non-reentrant model
  8756 ;;
  8757                           
  8758                           
  8759                           ;psect for function _getPercentValue
  8760  15C4                     _getPercentValue:	
  8761                           
  8762                           ;incstack = 0
  8763                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8764                           ;getPercentValue@value stored from wreg
  8765  15C4  0020               	movlb	0	; select bank0
  8766  15C5  00DB               	movwf	getPercentValue@value
  8767                           
  8768                           ;Dimmer_B1.c: 763: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8769  15C6  3000               	movlw	0
  8770  15C7  00DC               	movwf	getPercentValue@i
  8771  15C8  30E0               	movlw	224
  8772  15C9  00DD               	movwf	getPercentValue@i+1
  8773  15CA  3041               	movlw	65
  8774  15CB  00DE               	movwf	getPercentValue@i+2
  8775                           
  8776                           ;Dimmer_B1.c: 764: i /= 100;
  8777  15CC  3000               	movlw	0
  8778  15CD  00AE               	movwf	___ftdiv@f2
  8779  15CE  30C8               	movlw	200
  8780  15CF  00AF               	movwf	___ftdiv@f2+1
  8781  15D0  3042               	movlw	66
  8782  15D1  00B0               	movwf	___ftdiv@f2+2
  8783  15D2  085C               	movf	getPercentValue@i,w
  8784  15D3  00B1               	movwf	___ftdiv@f1
  8785  15D4  085D               	movf	getPercentValue@i+1,w
  8786  15D5  00B2               	movwf	___ftdiv@f1+1
  8787  15D6  085E               	movf	getPercentValue@i+2,w
  8788  15D7  00B3               	movwf	___ftdiv@f1+2
  8789  15D8  318D  25E6  3195   	fcall	___ftdiv
  8790  15DB  0020               	movlb	0	; select bank0
  8791  15DC  082E               	movf	?___ftdiv,w
  8792  15DD  00DC               	movwf	getPercentValue@i
  8793  15DE  082F               	movf	?___ftdiv+1,w
  8794  15DF  00DD               	movwf	getPercentValue@i+1
  8795  15E0  0830               	movf	?___ftdiv+2,w
  8796  15E1  00DE               	movwf	getPercentValue@i+2
  8797                           
  8798                           ;Dimmer_B1.c: 765: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8799  15E2  085B               	movf	getPercentValue@value,w
  8800  15E3  00D9               	movwf	??_getPercentValue
  8801  15E4  01DA               	clrf	??_getPercentValue+1
  8802  15E5  09D9               	comf	??_getPercentValue,f
  8803  15E6  09DA               	comf	??_getPercentValue+1,f
  8804  15E7  0AD9               	incf	??_getPercentValue,f
  8805  15E8  1903               	skipnz
  8806  15E9  0ADA               	incf	??_getPercentValue+1,f
  8807  15EA  0859               	movf	??_getPercentValue,w
  8808  15EB  3E64               	addlw	100
  8809  15EC  00A8               	movwf	___awtoft@c
  8810  15ED  3000               	movlw	0
  8811  15EE  3D5A               	addwfc	??_getPercentValue+1,w
  8812  15EF  00A9               	movwf	___awtoft@c+1
  8813  15F0  319E  26A9  3195   	fcall	___awtoft
  8814  15F3  0020               	movlb	0	; select bank0
  8815  15F4  0828               	movf	?___awtoft,w
  8816  15F5  00B1               	movwf	___ftmul@f2
  8817  15F6  0829               	movf	?___awtoft+1,w
  8818  15F7  00B2               	movwf	___ftmul@f2+1
  8819  15F8  082A               	movf	?___awtoft+2,w
  8820  15F9  00B3               	movwf	___ftmul@f2+2
  8821  15FA  085C               	movf	getPercentValue@i,w
  8822  15FB  00AE               	movwf	___ftmul@f1
  8823  15FC  085D               	movf	getPercentValue@i+1,w
  8824  15FD  00AF               	movwf	___ftmul@f1+1
  8825  15FE  085E               	movf	getPercentValue@i+2,w
  8826  15FF  00B0               	movwf	___ftmul@f1+2
  8827  1600  318E  268F  3195   	fcall	___ftmul
  8828  1603  0020               	movlb	0	; select bank0
  8829  1604  082E               	movf	?___ftmul,w
  8830  1605  00C1               	movwf	___ftadd@f2
  8831  1606  082F               	movf	?___ftmul+1,w
  8832  1607  00C2               	movwf	___ftadd@f2+1
  8833  1608  0830               	movf	?___ftmul+2,w
  8834  1609  00C3               	movwf	___ftadd@f2+2
  8835  160A  3000               	movlw	0
  8836  160B  00BE               	movwf	___ftadd@f1
  8837  160C  3000               	movlw	0
  8838  160D  00BF               	movwf	___ftadd@f1+1
  8839  160E  3042               	movlw	66
  8840  160F  00C0               	movwf	___ftadd@f1+2
  8841  1610  3184  24C8  3195   	fcall	___ftadd
  8842  1613  0020               	movlb	0	; select bank0
  8843  1614  083E               	movf	?___ftadd,w
  8844  1615  00CB               	movwf	___fttol@f1
  8845  1616  083F               	movf	?___ftadd+1,w
  8846  1617  00CC               	movwf	___fttol@f1+1
  8847  1618  0840               	movf	?___ftadd+2,w
  8848  1619  00CD               	movwf	___fttol@f1+2
  8849  161A  318C  244B         	fcall	___fttol
  8850  161C  0020               	movlb	0	; select bank0
  8851  161D  084B               	movf	?___fttol,w
  8852  161E  0008               	return
  8853  161F                     __end_of_getPercentValue:	
  8854                           
  8855                           	psect	text40
  8856  0E8F                     __ptext40:	
  8857 ;; *************** function ___ftmul *****************
  8858 ;; Defined at:
  8859 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8860 ;; Parameters:    Size  Location     Type
  8861 ;;  f1              3   14[BANK0 ] float 
  8862 ;;  f2              3   17[BANK0 ] float 
  8863 ;; Auto vars:     Size  Location     Type
  8864 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8865 ;;  sign            1   29[BANK0 ] unsigned char 
  8866 ;;  cntr            1   28[BANK0 ] unsigned char 
  8867 ;;  exp             1   24[BANK0 ] unsigned char 
  8868 ;; Return value:  Size  Location     Type
  8869 ;;                  3   14[BANK0 ] float 
  8870 ;; Registers used:
  8871 ;;		wreg, status,2, status,0, pclath, cstack
  8872 ;; Tracked objects:
  8873 ;;		On entry : 0/0
  8874 ;;		On exit  : 0/0
  8875 ;;		Unchanged: 0/0
  8876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8877 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8878 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8880 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;Total ram usage:       16 bytes
  8882 ;; Hardware stack levels used:    1
  8883 ;; Hardware stack levels required when called:    6
  8884 ;; This function calls:
  8885 ;;		___ftpack
  8886 ;; This function is called by:
  8887 ;;		_getPercentValue
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           
  8892                           ;psect for function ___ftmul
  8893  0E8F                     ___ftmul:	
  8894                           
  8895                           ;incstack = 0
  8896                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8897  0E8F  0020               	movlb	0	; select bank0
  8898  0E90  082E               	movf	___ftmul@f1,w
  8899  0E91  00B4               	movwf	??___ftmul
  8900  0E92  082F               	movf	___ftmul@f1+1,w
  8901  0E93  00B5               	movwf	??___ftmul+1
  8902  0E94  0830               	movf	___ftmul@f1+2,w
  8903  0E95  00B6               	movwf	??___ftmul+2
  8904  0E96  1003               	clrc
  8905  0E97  0D35               	rlf	??___ftmul+1,w
  8906  0E98  0D36               	rlf	??___ftmul+2,w
  8907  0E99  00B7               	movwf	??___ftmul+3
  8908  0E9A  0837               	movf	??___ftmul+3,w
  8909  0E9B  00B8               	movwf	___ftmul@exp
  8910  0E9C  08B8               	movf	___ftmul@exp,f
  8911  0E9D  1D03               	skipz
  8912  0E9E  2EA6               	goto	l6036
  8913  0E9F  3000               	movlw	0
  8914  0EA0  00AE               	movwf	?___ftmul
  8915  0EA1  3000               	movlw	0
  8916  0EA2  00AF               	movwf	?___ftmul+1
  8917  0EA3  3000               	movlw	0
  8918  0EA4  00B0               	movwf	?___ftmul+2
  8919  0EA5  0008               	return
  8920  0EA6                     l6036:	
  8921  0EA6  0831               	movf	___ftmul@f2,w
  8922  0EA7  00B4               	movwf	??___ftmul
  8923  0EA8  0832               	movf	___ftmul@f2+1,w
  8924  0EA9  00B5               	movwf	??___ftmul+1
  8925  0EAA  0833               	movf	___ftmul@f2+2,w
  8926  0EAB  00B6               	movwf	??___ftmul+2
  8927  0EAC  1003               	clrc
  8928  0EAD  0D35               	rlf	??___ftmul+1,w
  8929  0EAE  0D36               	rlf	??___ftmul+2,w
  8930  0EAF  00B7               	movwf	??___ftmul+3
  8931  0EB0  0837               	movf	??___ftmul+3,w
  8932  0EB1  00BD               	movwf	___ftmul@sign
  8933  0EB2  08BD               	movf	___ftmul@sign,f
  8934  0EB3  1D03               	skipz
  8935  0EB4  2EBC               	goto	l6042
  8936  0EB5  3000               	movlw	0
  8937  0EB6  00AE               	movwf	?___ftmul
  8938  0EB7  3000               	movlw	0
  8939  0EB8  00AF               	movwf	?___ftmul+1
  8940  0EB9  3000               	movlw	0
  8941  0EBA  00B0               	movwf	?___ftmul+2
  8942  0EBB  0008               	return
  8943  0EBC                     l6042:	
  8944  0EBC  083D               	movf	___ftmul@sign,w
  8945  0EBD  3E7B               	addlw	123
  8946  0EBE  00B4               	movwf	??___ftmul
  8947  0EBF  0834               	movf	??___ftmul,w
  8948  0EC0  07B8               	addwf	___ftmul@exp,f
  8949  0EC1  082E               	movf	___ftmul@f1,w
  8950  0EC2  00B4               	movwf	??___ftmul
  8951  0EC3  082F               	movf	___ftmul@f1+1,w
  8952  0EC4  00B5               	movwf	??___ftmul+1
  8953  0EC5  0830               	movf	___ftmul@f1+2,w
  8954  0EC6  00B6               	movwf	??___ftmul+2
  8955  0EC7  3010               	movlw	16
  8956  0EC8                     u4705:	
  8957  0EC8  36B6               	lsrf	??___ftmul+2,f
  8958  0EC9  0CB5               	rrf	??___ftmul+1,f
  8959  0ECA  0CB4               	rrf	??___ftmul,f
  8960  0ECB  0B89               	decfsz	9,f
  8961  0ECC  2EC8               	goto	u4705
  8962  0ECD  0834               	movf	??___ftmul,w
  8963  0ECE  00B7               	movwf	??___ftmul+3
  8964  0ECF  0837               	movf	??___ftmul+3,w
  8965  0ED0  00BD               	movwf	___ftmul@sign
  8966  0ED1  0831               	movf	___ftmul@f2,w
  8967  0ED2  00B4               	movwf	??___ftmul
  8968  0ED3  0832               	movf	___ftmul@f2+1,w
  8969  0ED4  00B5               	movwf	??___ftmul+1
  8970  0ED5  0833               	movf	___ftmul@f2+2,w
  8971  0ED6  00B6               	movwf	??___ftmul+2
  8972  0ED7  3010               	movlw	16
  8973  0ED8                     u4715:	
  8974  0ED8  36B6               	lsrf	??___ftmul+2,f
  8975  0ED9  0CB5               	rrf	??___ftmul+1,f
  8976  0EDA  0CB4               	rrf	??___ftmul,f
  8977  0EDB  0B89               	decfsz	9,f
  8978  0EDC  2ED8               	goto	u4715
  8979  0EDD  0834               	movf	??___ftmul,w
  8980  0EDE  00B7               	movwf	??___ftmul+3
  8981  0EDF  0837               	movf	??___ftmul+3,w
  8982  0EE0  06BD               	xorwf	___ftmul@sign,f
  8983  0EE1  3080               	movlw	128
  8984  0EE2  00B4               	movwf	??___ftmul
  8985  0EE3  0834               	movf	??___ftmul,w
  8986  0EE4  05BD               	andwf	___ftmul@sign,f
  8987  0EE5  17AF               	bsf	___ftmul@f1+1,7
  8988  0EE6  17B2               	bsf	___ftmul@f2+1,7
  8989  0EE7  30FF               	movlw	255
  8990  0EE8  05B1               	andwf	___ftmul@f2,f
  8991  0EE9  30FF               	movlw	255
  8992  0EEA  05B2               	andwf	___ftmul@f2+1,f
  8993  0EEB  3000               	movlw	0
  8994  0EEC  05B3               	andwf	___ftmul@f2+2,f
  8995  0EED  3000               	movlw	0
  8996  0EEE  00B9               	movwf	___ftmul@f3_as_product
  8997  0EEF  3000               	movlw	0
  8998  0EF0  00BA               	movwf	___ftmul@f3_as_product+1
  8999  0EF1  3000               	movlw	0
  9000  0EF2  00BB               	movwf	___ftmul@f3_as_product+2
  9001  0EF3  3007               	movlw	7
  9002  0EF4  00B4               	movwf	??___ftmul
  9003  0EF5  0834               	movf	??___ftmul,w
  9004  0EF6  00BC               	movwf	___ftmul@cntr
  9005  0EF7                     l6054:	
  9006  0EF7  1C2E               	btfss	___ftmul@f1,0
  9007  0EF8  2EFF               	goto	l6058
  9008  0EF9  0831               	movf	___ftmul@f2,w
  9009  0EFA  07B9               	addwf	___ftmul@f3_as_product,f
  9010  0EFB  0832               	movf	___ftmul@f2+1,w
  9011  0EFC  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9012  0EFD  0833               	movf	___ftmul@f2+2,w
  9013  0EFE  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9014  0EFF                     l6058:	
  9015  0EFF  3001               	movlw	1
  9016  0F00                     u4735:	
  9017  0F00  36B0               	lsrf	___ftmul@f1+2,f
  9018  0F01  0CAF               	rrf	___ftmul@f1+1,f
  9019  0F02  0CAE               	rrf	___ftmul@f1,f
  9020  0F03  0B89               	decfsz	9,f
  9021  0F04  2F00               	goto	u4735
  9022  0F05  3001               	movlw	1
  9023  0F06                     u4745:	
  9024  0F06  35B1               	lslf	___ftmul@f2,f
  9025  0F07  0DB2               	rlf	___ftmul@f2+1,f
  9026  0F08  0DB3               	rlf	___ftmul@f2+2,f
  9027  0F09  0B89               	decfsz	9,f
  9028  0F0A  2F06               	goto	u4745
  9029  0F0B  3001               	movlw	1
  9030  0F0C  02BC               	subwf	___ftmul@cntr,f
  9031  0F0D  1D03               	btfss	3,2
  9032  0F0E  2EF7               	goto	l6054
  9033  0F0F  3009               	movlw	9
  9034  0F10  00B4               	movwf	??___ftmul
  9035  0F11  0834               	movf	??___ftmul,w
  9036  0F12  00BC               	movwf	___ftmul@cntr
  9037  0F13                     l6066:	
  9038  0F13  1C2E               	btfss	___ftmul@f1,0
  9039  0F14  2F1B               	goto	l6070
  9040  0F15  0831               	movf	___ftmul@f2,w
  9041  0F16  07B9               	addwf	___ftmul@f3_as_product,f
  9042  0F17  0832               	movf	___ftmul@f2+1,w
  9043  0F18  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9044  0F19  0833               	movf	___ftmul@f2+2,w
  9045  0F1A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9046  0F1B                     l6070:	
  9047  0F1B  3001               	movlw	1
  9048  0F1C                     u4775:	
  9049  0F1C  36B0               	lsrf	___ftmul@f1+2,f
  9050  0F1D  0CAF               	rrf	___ftmul@f1+1,f
  9051  0F1E  0CAE               	rrf	___ftmul@f1,f
  9052  0F1F  0B89               	decfsz	9,f
  9053  0F20  2F1C               	goto	u4775
  9054  0F21  3001               	movlw	1
  9055  0F22                     u4785:	
  9056  0F22  36BB               	lsrf	___ftmul@f3_as_product+2,f
  9057  0F23  0CBA               	rrf	___ftmul@f3_as_product+1,f
  9058  0F24  0CB9               	rrf	___ftmul@f3_as_product,f
  9059  0F25  0B89               	decfsz	9,f
  9060  0F26  2F22               	goto	u4785
  9061  0F27  3001               	movlw	1
  9062  0F28  02BC               	subwf	___ftmul@cntr,f
  9063  0F29  1D03               	btfss	3,2
  9064  0F2A  2F13               	goto	l6066
  9065  0F2B  0839               	movf	___ftmul@f3_as_product,w
  9066  0F2C  00A0               	movwf	___ftpack@arg
  9067  0F2D  083A               	movf	___ftmul@f3_as_product+1,w
  9068  0F2E  00A1               	movwf	___ftpack@arg+1
  9069  0F2F  083B               	movf	___ftmul@f3_as_product+2,w
  9070  0F30  00A2               	movwf	___ftpack@arg+2
  9071  0F31  0838               	movf	___ftmul@exp,w
  9072  0F32  00B4               	movwf	??___ftmul
  9073  0F33  0834               	movf	??___ftmul,w
  9074  0F34  00A3               	movwf	___ftpack@exp
  9075  0F35  083D               	movf	___ftmul@sign,w
  9076  0F36  00B5               	movwf	??___ftmul+1
  9077  0F37  0835               	movf	??___ftmul+1,w
  9078  0F38  00A4               	movwf	___ftpack@sign
  9079  0F39  3197  273A         	fcall	___ftpack
  9080  0F3B  0020               	movlb	0	; select bank0
  9081  0F3C  0820               	movf	?___ftpack,w
  9082  0F3D  00AE               	movwf	?___ftmul
  9083  0F3E  0821               	movf	?___ftpack+1,w
  9084  0F3F  00AF               	movwf	?___ftmul+1
  9085  0F40  0822               	movf	?___ftpack+2,w
  9086  0F41  00B0               	movwf	?___ftmul+2
  9087  0F42  0008               	return
  9088  0F43                     __end_of___ftmul:	
  9089                           
  9090                           	psect	text41
  9091  04C8                     __ptext41:	
  9092 ;; *************** function ___ftadd *****************
  9093 ;; Defined at:
  9094 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;  f1              3   30[BANK0 ] float 
  9097 ;;  f2              3   33[BANK0 ] float 
  9098 ;; Auto vars:     Size  Location     Type
  9099 ;;  exp1            1   42[BANK0 ] unsigned char 
  9100 ;;  exp2            1   41[BANK0 ] unsigned char 
  9101 ;;  sign            1   40[BANK0 ] unsigned char 
  9102 ;; Return value:  Size  Location     Type
  9103 ;;                  3   30[BANK0 ] float 
  9104 ;; Registers used:
  9105 ;;		wreg, status,2, status,0, pclath, cstack
  9106 ;; Tracked objects:
  9107 ;;		On entry : 0/0
  9108 ;;		On exit  : 0/0
  9109 ;;		Unchanged: 0/0
  9110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9111 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;Total ram usage:       13 bytes
  9116 ;; Hardware stack levels used:    1
  9117 ;; Hardware stack levels required when called:    6
  9118 ;; This function calls:
  9119 ;;		___ftpack
  9120 ;; This function is called by:
  9121 ;;		_getPercentValue
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125                           
  9126                           ;psect for function ___ftadd
  9127  04C8                     ___ftadd:	
  9128                           
  9129                           ;incstack = 0
  9130                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9131  04C8  0020               	movlb	0	; select bank0
  9132  04C9  083E               	movf	___ftadd@f1,w
  9133  04CA  00C4               	movwf	??___ftadd
  9134  04CB  083F               	movf	___ftadd@f1+1,w
  9135  04CC  00C5               	movwf	??___ftadd+1
  9136  04CD  0840               	movf	___ftadd@f1+2,w
  9137  04CE  00C6               	movwf	??___ftadd+2
  9138  04CF  1003               	clrc
  9139  04D0  0D45               	rlf	??___ftadd+1,w
  9140  04D1  0D46               	rlf	??___ftadd+2,w
  9141  04D2  00C7               	movwf	??___ftadd+3
  9142  04D3  0847               	movf	??___ftadd+3,w
  9143  04D4  00CA               	movwf	___ftadd@exp1
  9144  04D5  0841               	movf	___ftadd@f2,w
  9145  04D6  00C4               	movwf	??___ftadd
  9146  04D7  0842               	movf	___ftadd@f2+1,w
  9147  04D8  00C5               	movwf	??___ftadd+1
  9148  04D9  0843               	movf	___ftadd@f2+2,w
  9149  04DA  00C6               	movwf	??___ftadd+2
  9150  04DB  1003               	clrc
  9151  04DC  0D45               	rlf	??___ftadd+1,w
  9152  04DD  0D46               	rlf	??___ftadd+2,w
  9153  04DE  00C7               	movwf	??___ftadd+3
  9154  04DF  0847               	movf	??___ftadd+3,w
  9155  04E0  00C9               	movwf	___ftadd@exp2
  9156  04E1  084A               	movf	___ftadd@exp1,w
  9157  04E2  1903               	btfsc	3,2
  9158  04E3  2CF0               	goto	l5924
  9159  04E4  0849               	movf	___ftadd@exp2,w
  9160  04E5  024A               	subwf	___ftadd@exp1,w
  9161  04E6  1803               	skipnc
  9162  04E7  2CF7               	goto	l5928
  9163  04E8  034A               	decf	___ftadd@exp1,w
  9164  04E9  3AFF               	xorlw	255
  9165  04EA  0749               	addwf	___ftadd@exp2,w
  9166  04EB  00C4               	movwf	??___ftadd
  9167  04EC  3019               	movlw	25
  9168  04ED  0244               	subwf	??___ftadd,w
  9169  04EE  1C03               	skipc
  9170  04EF  2CF7               	goto	l5928
  9171  04F0                     l5924:	
  9172  04F0  0841               	movf	___ftadd@f2,w
  9173  04F1  00BE               	movwf	?___ftadd
  9174  04F2  0842               	movf	___ftadd@f2+1,w
  9175  04F3  00BF               	movwf	?___ftadd+1
  9176  04F4  0843               	movf	___ftadd@f2+2,w
  9177  04F5  00C0               	movwf	?___ftadd+2
  9178  04F6  0008               	return
  9179  04F7                     l5928:	
  9180  04F7  0849               	movf	___ftadd@exp2,w
  9181  04F8  1903               	btfsc	3,2
  9182  04F9  0008               	return
  9183  04FA  084A               	movf	___ftadd@exp1,w
  9184  04FB  0249               	subwf	___ftadd@exp2,w
  9185  04FC  1803               	skipnc
  9186  04FD  2D06               	goto	l5934
  9187  04FE  0349               	decf	___ftadd@exp2,w
  9188  04FF  3AFF               	xorlw	255
  9189  0500  074A               	addwf	___ftadd@exp1,w
  9190  0501  00C4               	movwf	??___ftadd
  9191  0502  3019               	movlw	25
  9192  0503  0244               	subwf	??___ftadd,w
  9193  0504  1803               	btfsc	3,0
  9194  0505  0008               	return
  9195  0506                     l5934:	
  9196  0506  3006               	movlw	6
  9197  0507  00C4               	movwf	??___ftadd
  9198  0508  0844               	movf	??___ftadd,w
  9199  0509  00C8               	movwf	___ftadd@sign
  9200  050A  1BC0               	btfsc	___ftadd@f1+2,7
  9201  050B  17C8               	bsf	___ftadd@sign,7
  9202  050C  1BC3               	btfsc	___ftadd@f2+2,7
  9203  050D  1748               	bsf	___ftadd@sign,6
  9204  050E  17BF               	bsf	___ftadd@f1+1,7
  9205  050F  30FF               	movlw	255
  9206  0510  05BE               	andwf	___ftadd@f1,f
  9207  0511  30FF               	movlw	255
  9208  0512  05BF               	andwf	___ftadd@f1+1,f
  9209  0513  3000               	movlw	0
  9210  0514  05C0               	andwf	___ftadd@f1+2,f
  9211  0515  17C2               	bsf	___ftadd@f2+1,7
  9212  0516  30FF               	movlw	255
  9213  0517  05C1               	andwf	___ftadd@f2,f
  9214  0518  30FF               	movlw	255
  9215  0519  05C2               	andwf	___ftadd@f2+1,f
  9216  051A  3000               	movlw	0
  9217  051B  05C3               	andwf	___ftadd@f2+2,f
  9218  051C  0849               	movf	___ftadd@exp2,w
  9219  051D  024A               	subwf	___ftadd@exp1,w
  9220  051E  1803               	skipnc
  9221  051F  2D42               	goto	l5956
  9222  0520                     l5946:	
  9223  0520  3001               	movlw	1
  9224  0521                     u4465:	
  9225  0521  35C1               	lslf	___ftadd@f2,f
  9226  0522  0DC2               	rlf	___ftadd@f2+1,f
  9227  0523  0DC3               	rlf	___ftadd@f2+2,f
  9228  0524  0B89               	decfsz	9,f
  9229  0525  2D21               	goto	u4465
  9230  0526  3001               	movlw	1
  9231  0527  02C9               	subwf	___ftadd@exp2,f
  9232  0528  0849               	movf	___ftadd@exp2,w
  9233  0529  064A               	xorwf	___ftadd@exp1,w
  9234  052A  1903               	skipnz
  9235  052B  2D3D               	goto	l5954
  9236  052C  3001               	movlw	1
  9237  052D  02C8               	subwf	___ftadd@sign,f
  9238  052E  0848               	movf	___ftadd@sign,w
  9239  052F  3907               	andlw	7
  9240  0530  1903               	btfsc	3,2
  9241  0531  2D3D               	goto	l5954
  9242  0532  2D20               	goto	l5946
  9243  0533                     l5952:	
  9244  0533  3001               	movlw	1
  9245  0534                     u4495:	
  9246  0534  36C0               	lsrf	___ftadd@f1+2,f
  9247  0535  0CBF               	rrf	___ftadd@f1+1,f
  9248  0536  0CBE               	rrf	___ftadd@f1,f
  9249  0537  0B89               	decfsz	9,f
  9250  0538  2D34               	goto	u4495
  9251  0539  3001               	movlw	1
  9252  053A  00C4               	movwf	??___ftadd
  9253  053B  0844               	movf	??___ftadd,w
  9254  053C  07CA               	addwf	___ftadd@exp1,f
  9255  053D                     l5954:	
  9256  053D  084A               	movf	___ftadd@exp1,w
  9257  053E  0649               	xorwf	___ftadd@exp2,w
  9258  053F  1903               	btfsc	3,2
  9259  0540  2D67               	goto	l3059
  9260  0541  2D33               	goto	l5952
  9261  0542                     l5956:	
  9262  0542  084A               	movf	___ftadd@exp1,w
  9263  0543  0249               	subwf	___ftadd@exp2,w
  9264  0544  1803               	skipnc
  9265  0545  2D67               	goto	l3059
  9266  0546                     l5958:	
  9267  0546  3001               	movlw	1
  9268  0547                     u4525:	
  9269  0547  35BE               	lslf	___ftadd@f1,f
  9270  0548  0DBF               	rlf	___ftadd@f1+1,f
  9271  0549  0DC0               	rlf	___ftadd@f1+2,f
  9272  054A  0B89               	decfsz	9,f
  9273  054B  2D47               	goto	u4525
  9274  054C  3001               	movlw	1
  9275  054D  02CA               	subwf	___ftadd@exp1,f
  9276  054E  0849               	movf	___ftadd@exp2,w
  9277  054F  064A               	xorwf	___ftadd@exp1,w
  9278  0550  1903               	skipnz
  9279  0551  2D63               	goto	l5966
  9280  0552  3001               	movlw	1
  9281  0553  02C8               	subwf	___ftadd@sign,f
  9282  0554  0848               	movf	___ftadd@sign,w
  9283  0555  3907               	andlw	7
  9284  0556  1903               	btfsc	3,2
  9285  0557  2D63               	goto	l5966
  9286  0558  2D46               	goto	l5958
  9287  0559                     l5964:	
  9288  0559  3001               	movlw	1
  9289  055A                     u4555:	
  9290  055A  36C3               	lsrf	___ftadd@f2+2,f
  9291  055B  0CC2               	rrf	___ftadd@f2+1,f
  9292  055C  0CC1               	rrf	___ftadd@f2,f
  9293  055D  0B89               	decfsz	9,f
  9294  055E  2D5A               	goto	u4555
  9295  055F  3001               	movlw	1
  9296  0560  00C4               	movwf	??___ftadd
  9297  0561  0844               	movf	??___ftadd,w
  9298  0562  07C9               	addwf	___ftadd@exp2,f
  9299  0563                     l5966:	
  9300  0563  084A               	movf	___ftadd@exp1,w
  9301  0564  0649               	xorwf	___ftadd@exp2,w
  9302  0565  1D03               	skipz
  9303  0566  2D59               	goto	l5964
  9304  0567                     l3059:	
  9305  0567  1FC8               	btfss	___ftadd@sign,7
  9306  0568  2D79               	goto	l5970
  9307  0569  30FF               	movlw	255
  9308  056A  06BE               	xorwf	___ftadd@f1,f
  9309  056B  30FF               	movlw	255
  9310  056C  06BF               	xorwf	___ftadd@f1+1,f
  9311  056D  30FF               	movlw	255
  9312  056E  06C0               	xorwf	___ftadd@f1+2,f
  9313  056F  3001               	movlw	1
  9314  0570  07BE               	addwf	___ftadd@f1,f
  9315  0571  3000               	movlw	0
  9316  0572  1803               	skipnc
  9317  0573  3001               	movlw	1
  9318  0574  07BF               	addwf	___ftadd@f1+1,f
  9319  0575  3000               	movlw	0
  9320  0576  1803               	skipnc
  9321  0577  3001               	movlw	1
  9322  0578  07C0               	addwf	___ftadd@f1+2,f
  9323  0579                     l5970:	
  9324  0579  1F48               	btfss	___ftadd@sign,6
  9325  057A  2D8B               	goto	l5974
  9326  057B  30FF               	movlw	255
  9327  057C  06C1               	xorwf	___ftadd@f2,f
  9328  057D  30FF               	movlw	255
  9329  057E  06C2               	xorwf	___ftadd@f2+1,f
  9330  057F  30FF               	movlw	255
  9331  0580  06C3               	xorwf	___ftadd@f2+2,f
  9332  0581  3001               	movlw	1
  9333  0582  07C1               	addwf	___ftadd@f2,f
  9334  0583  3000               	movlw	0
  9335  0584  1803               	skipnc
  9336  0585  3001               	movlw	1
  9337  0586  07C2               	addwf	___ftadd@f2+1,f
  9338  0587  3000               	movlw	0
  9339  0588  1803               	skipnc
  9340  0589  3001               	movlw	1
  9341  058A  07C3               	addwf	___ftadd@f2+2,f
  9342  058B                     l5974:	
  9343  058B  01C8               	clrf	___ftadd@sign
  9344  058C  083E               	movf	___ftadd@f1,w
  9345  058D  07C1               	addwf	___ftadd@f2,f
  9346  058E  083F               	movf	___ftadd@f1+1,w
  9347  058F  3DC2               	addwfc	___ftadd@f2+1,f
  9348  0590  0840               	movf	___ftadd@f1+2,w
  9349  0591  3DC3               	addwfc	___ftadd@f2+2,f
  9350  0592  1FC3               	btfss	___ftadd@f2+2,7
  9351  0593  2DA6               	goto	l5984
  9352  0594  30FF               	movlw	255
  9353  0595  06C1               	xorwf	___ftadd@f2,f
  9354  0596  30FF               	movlw	255
  9355  0597  06C2               	xorwf	___ftadd@f2+1,f
  9356  0598  30FF               	movlw	255
  9357  0599  06C3               	xorwf	___ftadd@f2+2,f
  9358  059A  3001               	movlw	1
  9359  059B  07C1               	addwf	___ftadd@f2,f
  9360  059C  3000               	movlw	0
  9361  059D  1803               	skipnc
  9362  059E  3001               	movlw	1
  9363  059F  07C2               	addwf	___ftadd@f2+1,f
  9364  05A0  3000               	movlw	0
  9365  05A1  1803               	skipnc
  9366  05A2  3001               	movlw	1
  9367  05A3  07C3               	addwf	___ftadd@f2+2,f
  9368  05A4  01C8               	clrf	___ftadd@sign
  9369  05A5  0AC8               	incf	___ftadd@sign,f
  9370  05A6                     l5984:	
  9371  05A6  0841               	movf	___ftadd@f2,w
  9372  05A7  00A0               	movwf	___ftpack@arg
  9373  05A8  0842               	movf	___ftadd@f2+1,w
  9374  05A9  00A1               	movwf	___ftpack@arg+1
  9375  05AA  0843               	movf	___ftadd@f2+2,w
  9376  05AB  00A2               	movwf	___ftpack@arg+2
  9377  05AC  084A               	movf	___ftadd@exp1,w
  9378  05AD  00C4               	movwf	??___ftadd
  9379  05AE  0844               	movf	??___ftadd,w
  9380  05AF  00A3               	movwf	___ftpack@exp
  9381  05B0  0848               	movf	___ftadd@sign,w
  9382  05B1  00C5               	movwf	??___ftadd+1
  9383  05B2  0845               	movf	??___ftadd+1,w
  9384  05B3  00A4               	movwf	___ftpack@sign
  9385  05B4  3197  273A         	fcall	___ftpack
  9386  05B6  0020               	movlb	0	; select bank0
  9387  05B7  0820               	movf	?___ftpack,w
  9388  05B8  00BE               	movwf	?___ftadd
  9389  05B9  0821               	movf	?___ftpack+1,w
  9390  05BA  00BF               	movwf	?___ftadd+1
  9391  05BB  0822               	movf	?___ftpack+2,w
  9392  05BC  00C0               	movwf	?___ftadd+2
  9393  05BD  0008               	return
  9394  05BE                     __end_of___ftadd:	
  9395                           
  9396                           	psect	text42
  9397  1BD3                     __ptext42:	
  9398 ;; *************** function _getBuz_GO *****************
  9399 ;; Defined at:
  9400 ;;		line 82 in file "../src/Buzzer_B1.c"
  9401 ;; Parameters:    Size  Location     Type
  9402 ;;		None
  9403 ;; Auto vars:     Size  Location     Type
  9404 ;;  i               2    4[BANK0 ] int 
  9405 ;; Return value:  Size  Location     Type
  9406 ;;                  2    0[BANK0 ] int 
  9407 ;; Registers used:
  9408 ;;		wreg, status,2, status,0
  9409 ;; Tracked objects:
  9410 ;;		On entry : 0/0
  9411 ;;		On exit  : 0/0
  9412 ;;		Unchanged: 0/0
  9413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9414 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;Total ram usage:        6 bytes
  9419 ;; Hardware stack levels used:    1
  9420 ;; Hardware stack levels required when called:    5
  9421 ;; This function calls:
  9422 ;;		Nothing
  9423 ;; This function is called by:
  9424 ;;		_setRF_Main
  9425 ;; This function uses a non-reentrant model
  9426 ;;
  9427                           
  9428                           
  9429                           ;psect for function _getBuz_GO
  9430  1BD3                     _getBuz_GO:	
  9431                           
  9432                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9433                           
  9434                           ;incstack = 0
  9435                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9436  1BD3  0021               	movlb	1	; select bank1
  9437  1BD4  0C33               	rrf	_Buz1^(0+128),w
  9438  1BD5  3901               	andlw	1
  9439  1BD6  0020               	movlb	0	; select bank0
  9440  1BD7  00A2               	movwf	??_getBuz_GO
  9441  1BD8  01A3               	clrf	??_getBuz_GO+1
  9442  1BD9  0822               	movf	??_getBuz_GO,w
  9443  1BDA  00A4               	movwf	getBuz_GO@i
  9444  1BDB  0823               	movf	??_getBuz_GO+1,w
  9445  1BDC  00A5               	movwf	getBuz_GO@i+1
  9446                           
  9447                           ;Buzzer_B1.c: 84: return i;
  9448  1BDD  0825               	movf	getBuz_GO@i+1,w
  9449  1BDE  01A1               	clrf	?_getBuz_GO+1
  9450  1BDF  07A1               	addwf	?_getBuz_GO+1,f
  9451  1BE0  0824               	movf	getBuz_GO@i,w
  9452  1BE1  01A0               	clrf	?_getBuz_GO
  9453  1BE2  07A0               	addwf	?_getBuz_GO,f
  9454  1BE3  0008               	return
  9455  1BE4                     __end_of_getBuz_GO:	
  9456                           
  9457                           	psect	text43
  9458  179B                     __ptext43:	
  9459 ;; *************** function _CC2500_TxData *****************
  9460 ;; Defined at:
  9461 ;;		line 32 in file "../src/CC2500_B1.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9466 ;; Return value:  Size  Location     Type
  9467 ;;		None               void
  9468 ;; Registers used:
  9469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;Total ram usage:        2 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    7
  9482 ;; This function calls:
  9483 ;;		_CC2500_WriteByte
  9484 ;;		_CC2500_WriteCommand
  9485 ;;		_Timeout_Counter
  9486 ;;		_set_TimeoutCleared
  9487 ;; This function is called by:
  9488 ;;		_setRF_Main
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           
  9493                           ;psect for function _CC2500_TxData
  9494  179B                     _CC2500_TxData:	
  9495                           
  9496                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9497                           ;CC2500_B1.c: 35: RC4 = 0;
  9498                           
  9499                           ;incstack = 0
  9500                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9501  179B  0020               	movlb	0	; select bank0
  9502  179C  120E               	bcf	14,4	;volatile
  9503                           
  9504                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9505  179D  307F               	movlw	127
  9506  179E  00A4               	movwf	??_CC2500_TxData
  9507  179F  0824               	movf	??_CC2500_TxData,w
  9508  17A0  00FA               	movwf	_SPI0Buffer
  9509                           
  9510                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9511  17A1  2FA5               	goto	l9196
  9512  17A2                     l9194:	
  9513                           
  9514                           ;CC2500_B1.c: 38: Timeout_Counter();
  9515  17A2  319C  248F  3197   	fcall	_Timeout_Counter
  9516  17A5                     l9196:	
  9517  17A5  0020               	movlb	0	; select bank0
  9518  17A6  1D0E               	btfss	14,2	;volatile
  9519  17A7  2FAB               	goto	l9200
  9520  17A8  0021               	movlb	1	; select bank1
  9521  17A9  1D30               	btfss	(_myMain^(0+128)+16),2
  9522  17AA  2FA2               	goto	l9194
  9523  17AB                     l9200:	
  9524                           
  9525                           ;CC2500_B1.c: 39: };
  9526                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9527  17AB  3199  21FB  3197   	fcall	_set_TimeoutCleared
  9528                           
  9529                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9530  17AE  319C  2453  3197   	fcall	_CC2500_WriteByte
  9531                           
  9532                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9533  17B1  0021               	movlb	1	; select bank1
  9534  17B2  0858               	movf	_Tx_Length^(0+128),w
  9535  17B3  0020               	movlb	0	; select bank0
  9536  17B4  00A4               	movwf	??_CC2500_TxData
  9537  17B5  0824               	movf	??_CC2500_TxData,w
  9538  17B6  00FA               	movwf	_SPI0Buffer
  9539                           
  9540                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9541  17B7  319C  2453  3197   	fcall	_CC2500_WriteByte
  9542                           
  9543                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9544  17BA  0020               	movlb	0	; select bank0
  9545  17BB  01A5               	clrf	CC2500_TxData@loop_e
  9546  17BC                     l9214:	
  9547  17BC  0021               	movlb	1	; select bank1
  9548  17BD  0858               	movf	_Tx_Length^(0+128),w
  9549  17BE  0020               	movlb	0	; select bank0
  9550  17BF  0225               	subwf	CC2500_TxData@loop_e,w
  9551  17C0  1803               	btfsc	3,0
  9552  17C1  2FD4               	goto	l267
  9553                           
  9554                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9555  17C2  0825               	movf	CC2500_TxData@loop_e,w
  9556  17C3  3E20               	addlw	_RF_Data& (0+255)
  9557  17C4  0086               	movwf	6
  9558  17C5  3001               	movlw	1	; select bank2/3
  9559  17C6  0087               	movwf	7
  9560  17C7  0801               	movf	1,w
  9561  17C8  00A4               	movwf	??_CC2500_TxData
  9562  17C9  0824               	movf	??_CC2500_TxData,w
  9563  17CA  00FA               	movwf	_SPI0Buffer
  9564                           
  9565                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9566  17CB  319C  2453  3197   	fcall	_CC2500_WriteByte
  9567  17CE  3001               	movlw	1
  9568  17CF  0020               	movlb	0	; select bank0
  9569  17D0  00A4               	movwf	??_CC2500_TxData
  9570  17D1  0824               	movf	??_CC2500_TxData,w
  9571  17D2  07A5               	addwf	CC2500_TxData@loop_e,f
  9572  17D3  2FBC               	goto	l9214
  9573  17D4                     l267:	
  9574                           
  9575                           ;CC2500_B1.c: 48: }
  9576                           ;CC2500_B1.c: 49: RC4 = 1;
  9577  17D4  160E               	bsf	14,4	;volatile
  9578                           
  9579                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9580  17D5  3035               	movlw	53
  9581  17D6  319D  2513  3197   	fcall	_CC2500_WriteCommand
  9582                           
  9583                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9584  17D9  2FDD               	goto	l9220
  9585  17DA                     l9218:	
  9586                           
  9587                           ;CC2500_B1.c: 52: Timeout_Counter();
  9588  17DA  319C  248F  3197   	fcall	_Timeout_Counter
  9589  17DD                     l9220:	
  9590  17DD  0020               	movlb	0	; select bank0
  9591  17DE  180D               	btfsc	13,0	;volatile
  9592  17DF  2FE3               	goto	l9224
  9593  17E0  0021               	movlb	1	; select bank1
  9594  17E1  1D30               	btfss	(_myMain^(0+128)+16),2
  9595  17E2  2FDA               	goto	l9218
  9596  17E3                     l9224:	
  9597                           
  9598                           ;CC2500_B1.c: 53: };
  9599                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9600  17E3  3199  21FB  3197   	fcall	_set_TimeoutCleared
  9601                           
  9602                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9603  17E6  2FEA               	goto	l9228
  9604  17E7                     l9226:	
  9605                           
  9606                           ;CC2500_B1.c: 57: Timeout_Counter();
  9607  17E7  319C  248F  3197   	fcall	_Timeout_Counter
  9608  17EA                     l9228:	
  9609  17EA  0020               	movlb	0	; select bank0
  9610  17EB  1C0D               	btfss	13,0	;volatile
  9611  17EC  2FF0               	goto	l9232
  9612  17ED  0021               	movlb	1	; select bank1
  9613  17EE  1D30               	btfss	(_myMain^(0+128)+16),2
  9614  17EF  2FE7               	goto	l9226
  9615  17F0                     l9232:	
  9616                           
  9617                           ;CC2500_B1.c: 58: };
  9618                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9619  17F0  3199  21FB  3197   	fcall	_set_TimeoutCleared
  9620                           
  9621                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9622  17F3  3036               	movlw	54
  9623  17F4  319D  2513  3197   	fcall	_CC2500_WriteCommand
  9624                           
  9625                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9626  17F7  303B               	movlw	59
  9627  17F8  319D  2513  3197   	fcall	_CC2500_WriteCommand
  9628                           
  9629                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9630  17FB  303A               	movlw	58
  9631  17FC  319D  2513         	fcall	_CC2500_WriteCommand
  9632                           
  9633                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9634  17FE  14FB               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9635  17FF  0008               	return
  9636  1800                     __end_of_CC2500_TxData:	
  9637                           
  9638                           	psect	text44
  9639  09F6                     __ptext44:	
  9640 ;; *************** function _CC2500_RxData *****************
  9641 ;; Defined at:
  9642 ;;		line 70 in file "../src/CC2500_B1.c"
  9643 ;; Parameters:    Size  Location     Type
  9644 ;;		None
  9645 ;; Auto vars:     Size  Location     Type
  9646 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9647 ;; Return value:  Size  Location     Type
  9648 ;;		None               void
  9649 ;; Registers used:
  9650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9651 ;; Tracked objects:
  9652 ;;		On entry : 0/0
  9653 ;;		On exit  : 0/0
  9654 ;;		Unchanged: 0/0
  9655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;Total ram usage:        2 bytes
  9661 ;; Hardware stack levels used:    1
  9662 ;; Hardware stack levels required when called:    7
  9663 ;; This function calls:
  9664 ;;		_CC2500_ReadByte
  9665 ;;		_CC2500_ReadStatus
  9666 ;;		_CC2500_WriteByte
  9667 ;;		_Timeout_Counter
  9668 ;;		_set_TimeoutCleared
  9669 ;; This function is called by:
  9670 ;;		_setRF_Main
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           
  9675                           ;psect for function _CC2500_RxData
  9676  09F6                     _CC2500_RxData:	
  9677                           
  9678                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9679                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9680                           
  9681                           ;incstack = 0
  9682                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9683  09F6  0020               	movlb	0	; select bank0
  9684  09F7  180D               	btfsc	13,0	;volatile
  9685  09F8  29FD               	goto	l9248
  9686  09F9  2A06               	goto	l9254
  9687  09FA                     l9246:	
  9688                           ;CC2500_B1.c: 76: {
  9689                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9690                           
  9691                           
  9692                           ;CC2500_B1.c: 78: Timeout_Counter();
  9693  09FA  319C  248F  3189   	fcall	_Timeout_Counter
  9694  09FD                     l9248:	
  9695  09FD  0020               	movlb	0	; select bank0
  9696  09FE  1C0D               	btfss	13,0	;volatile
  9697  09FF  2A03               	goto	l9252
  9698  0A00  0021               	movlb	1	; select bank1
  9699  0A01  1D30               	btfss	(_myMain^(0+128)+16),2
  9700  0A02  29FA               	goto	l9246
  9701  0A03                     l9252:	
  9702                           
  9703                           ;CC2500_B1.c: 79: };
  9704                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9705  0A03  3199  21FB  3189   	fcall	_set_TimeoutCleared
  9706  0A06                     l9254:	
  9707                           
  9708                           ;CC2500_B1.c: 81: }
  9709                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9710  0A06  303B               	movlw	59
  9711  0A07  319E  26CB  3189   	fcall	_CC2500_ReadStatus
  9712                           
  9713                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9714  0A0A  0021               	movlb	1	; select bank1
  9715  0A0B  085B               	movf	_s_data^(0+128),w
  9716  0A0C  1903               	btfsc	3,2
  9717  0A0D  0008               	return
  9718                           
  9719                           ;CC2500_B1.c: 86: RC4 = 0;
  9720  0A0E  0020               	movlb	0	; select bank0
  9721  0A0F  120E               	bcf	14,4	;volatile
  9722                           
  9723                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9724  0A10  30FF               	movlw	255
  9725  0A11  00A4               	movwf	??_CC2500_RxData
  9726  0A12  0824               	movf	??_CC2500_RxData,w
  9727  0A13  00FA               	movwf	_SPI0Buffer
  9728                           
  9729                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9730  0A14  2A1B               	goto	l9264
  9731  0A15                     l9266:	
  9732  0A15  0021               	movlb	1	; select bank1
  9733  0A16  1930               	btfsc	(_myMain^(0+128)+16),2
  9734  0A17  2A1E               	goto	l292
  9735                           
  9736                           ;CC2500_B1.c: 89: Timeout_Counter();
  9737  0A18  319C  248F  3189   	fcall	_Timeout_Counter
  9738  0A1B                     l9264:	
  9739  0A1B  0020               	movlb	0	; select bank0
  9740  0A1C  190E               	btfsc	14,2	;volatile
  9741  0A1D  2A15               	goto	l9266
  9742  0A1E                     l292:	
  9743                           
  9744                           ;CC2500_B1.c: 90: };
  9745                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9746  0A1E  0021               	movlb	1	; select bank1
  9747  0A1F  1930               	btfsc	(_myMain^(0+128)+16),2
  9748  0A20  2A61               	goto	l293
  9749                           
  9750                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9751  0A21  319C  2453  3189   	fcall	_CC2500_WriteByte
  9752                           
  9753                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9754  0A24  319C  24FC  3189   	fcall	_CC2500_ReadByte
  9755                           
  9756                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9757  0A27  087A               	movf	_SPI0Buffer,w
  9758  0A28  0020               	movlb	0	; select bank0
  9759  0A29  00A4               	movwf	??_CC2500_RxData
  9760  0A2A  0824               	movf	??_CC2500_RxData,w
  9761  0A2B  0021               	movlb	1	; select bank1
  9762  0A2C  00D7               	movwf	_Rx_Length^(0+128)
  9763                           
  9764                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9765  0A2D  0020               	movlb	0	; select bank0
  9766  0A2E  01A5               	clrf	CC2500_RxData@loop_f
  9767  0A2F                     l9280:	
  9768  0A2F  0021               	movlb	1	; select bank1
  9769  0A30  0857               	movf	_Rx_Length^(0+128),w
  9770  0A31  0020               	movlb	0	; select bank0
  9771  0A32  0225               	subwf	CC2500_RxData@loop_f,w
  9772  0A33  1803               	btfsc	3,0
  9773  0A34  2A47               	goto	l9282
  9774                           
  9775                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9776  0A35  319C  24FC  3189   	fcall	_CC2500_ReadByte
  9777                           
  9778                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9779  0A38  087A               	movf	_SPI0Buffer,w
  9780  0A39  0020               	movlb	0	; select bank0
  9781  0A3A  00A4               	movwf	??_CC2500_RxData
  9782  0A3B  0825               	movf	CC2500_RxData@loop_f,w
  9783  0A3C  3E20               	addlw	_RF_Data& (0+255)
  9784  0A3D  0086               	movwf	6
  9785  0A3E  3001               	movlw	1	; select bank2/3
  9786  0A3F  0087               	movwf	7
  9787  0A40  0824               	movf	??_CC2500_RxData,w
  9788  0A41  0081               	movwf	1
  9789  0A42  3001               	movlw	1
  9790  0A43  00A4               	movwf	??_CC2500_RxData
  9791  0A44  0824               	movf	??_CC2500_RxData,w
  9792  0A45  07A5               	addwf	CC2500_RxData@loop_f,f
  9793  0A46  2A2F               	goto	l9280
  9794  0A47                     l9282:	
  9795                           
  9796                           ;CC2500_B1.c: 99: }
  9797                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9798  0A47  319C  24FC  3189   	fcall	_CC2500_ReadByte
  9799                           
  9800                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9801  0A4A  087A               	movf	_SPI0Buffer,w
  9802  0A4B  0020               	movlb	0	; select bank0
  9803  0A4C  00A4               	movwf	??_CC2500_RxData
  9804  0A4D  0824               	movf	??_CC2500_RxData,w
  9805  0A4E  0021               	movlb	1	; select bank1
  9806  0A4F  00D6               	movwf	_RSSI^(0+128)
  9807                           
  9808                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9809  0A50  319C  24FC  3189   	fcall	_CC2500_ReadByte
  9810                           
  9811                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9812  0A53  087A               	movf	_SPI0Buffer,w
  9813  0A54  0020               	movlb	0	; select bank0
  9814  0A55  00A4               	movwf	??_CC2500_RxData
  9815  0A56  0824               	movf	??_CC2500_RxData,w
  9816  0A57  0021               	movlb	1	; select bank1
  9817  0A58  00D2               	movwf	_CRC^(0+128)
  9818                           
  9819                           ;CC2500_B1.c: 104: RC4 = 1;
  9820  0A59  0020               	movlb	0	; select bank0
  9821  0A5A  160E               	bsf	14,4	;volatile
  9822                           
  9823                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9824  0A5B  0021               	movlb	1	; select bank1
  9825  0A5C  1BD2               	btfsc	_CRC^(0+128),7
  9826                           
  9827                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9828  0A5D  147B               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9829                           
  9830                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9831  0A5E  11BF               	bcf	_RF1^(0+128),3
  9832                           
  9833                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9834  0A5F  14BF               	bsf	_RF1^(0+128),1
  9835                           
  9836                           ;CC2500_B1.c: 110: } else {
  9837  0A60  2A63               	goto	l9294
  9838  0A61                     l293:	
  9839                           
  9840                           ;CC2500_B1.c: 111: RC4 = 1;
  9841  0A61  0020               	movlb	0	; select bank0
  9842  0A62  160E               	bsf	14,4	;volatile
  9843  0A63                     l9294:	
  9844                           
  9845                           ;CC2500_B1.c: 112: }
  9846                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9847  0A63  3199  21FB         	fcall	_set_TimeoutCleared
  9848  0A65  0021               	movlb	1	; select bank1
  9849  0A66  0008               	return
  9850  0A67                     __end_of_CC2500_RxData:	
  9851                           
  9852                           	psect	text45
  9853  1ECB                     __ptext45:	
  9854 ;; *************** function _CC2500_ReadStatus *****************
  9855 ;; Defined at:
  9856 ;;		line 304 in file "../src/CC2500_B1.c"
  9857 ;; Parameters:    Size  Location     Type
  9858 ;;  status_addr     1    wreg     unsigned char 
  9859 ;; Auto vars:     Size  Location     Type
  9860 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9861 ;; Return value:  Size  Location     Type
  9862 ;;		None               void
  9863 ;; Registers used:
  9864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9865 ;; Tracked objects:
  9866 ;;		On entry : 0/0
  9867 ;;		On exit  : 0/0
  9868 ;;		Unchanged: 0/0
  9869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9871 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;Total ram usage:        2 bytes
  9875 ;; Hardware stack levels used:    1
  9876 ;; Hardware stack levels required when called:    6
  9877 ;; This function calls:
  9878 ;;		_CC2500_ReadByte
  9879 ;;		_CC2500_WriteByte
  9880 ;;		_Timeout_Counter
  9881 ;;		_set_TimeoutCleared
  9882 ;; This function is called by:
  9883 ;;		_CC2500_RxData
  9884 ;;		_setRF_Main
  9885 ;; This function uses a non-reentrant model
  9886 ;;
  9887                           
  9888                           
  9889                           ;psect for function _CC2500_ReadStatus
  9890  1ECB                     _CC2500_ReadStatus:	
  9891                           
  9892                           ;incstack = 0
  9893                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9894                           ;CC2500_ReadStatus@status_addr stored from wreg
  9895  1ECB  0020               	movlb	0	; select bank0
  9896  1ECC  00A3               	movwf	CC2500_ReadStatus@status_addr
  9897                           
  9898                           ;CC2500_B1.c: 305: RC4 = 0;
  9899  1ECD  120E               	bcf	14,4	;volatile
  9900                           
  9901                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9902  1ECE  0823               	movf	CC2500_ReadStatus@status_addr,w
  9903  1ECF  3EC0               	addlw	192
  9904  1ED0  00A2               	movwf	??_CC2500_ReadStatus
  9905  1ED1  0822               	movf	??_CC2500_ReadStatus,w
  9906  1ED2  00FA               	movwf	_SPI0Buffer
  9907                           
  9908                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9909  1ED3  2ED7               	goto	l9062
  9910  1ED4                     l9060:	
  9911                           
  9912                           ;CC2500_B1.c: 309: Timeout_Counter();
  9913  1ED4  319C  248F  319E   	fcall	_Timeout_Counter
  9914  1ED7                     l9062:	
  9915  1ED7  0020               	movlb	0	; select bank0
  9916  1ED8  1D0E               	btfss	14,2	;volatile
  9917  1ED9  2EDD               	goto	l9066
  9918  1EDA  0021               	movlb	1	; select bank1
  9919  1EDB  1D30               	btfss	(_myMain^(0+128)+16),2
  9920  1EDC  2ED4               	goto	l9060
  9921  1EDD                     l9066:	
  9922                           
  9923                           ;CC2500_B1.c: 310: };
  9924                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9925  1EDD  3199  21FB  319E   	fcall	_set_TimeoutCleared
  9926                           
  9927                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9928  1EE0  319C  2453  319E   	fcall	_CC2500_WriteByte
  9929                           
  9930                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9931  1EE3  319C  24FC         	fcall	_CC2500_ReadByte
  9932                           
  9933                           ;CC2500_B1.c: 315: RC4 = 1;
  9934  1EE5  0020               	movlb	0	; select bank0
  9935  1EE6  160E               	bsf	14,4	;volatile
  9936                           
  9937                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9938  1EE7  087A               	movf	_SPI0Buffer,w
  9939  1EE8  00A2               	movwf	??_CC2500_ReadStatus
  9940  1EE9  0822               	movf	??_CC2500_ReadStatus,w
  9941  1EEA  0021               	movlb	1	; select bank1
  9942  1EEB  00DB               	movwf	_s_data^(0+128)
  9943  1EEC  0008               	return
  9944  1EED                     __end_of_CC2500_ReadStatus:	
  9945                           
  9946                           	psect	text46
  9947  1CFC                     __ptext46:	
  9948 ;; *************** function _CC2500_ReadByte *****************
  9949 ;; Defined at:
  9950 ;;		line 238 in file "../src/CC2500_B1.c"
  9951 ;; Parameters:    Size  Location     Type
  9952 ;;		None
  9953 ;; Auto vars:     Size  Location     Type
  9954 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9955 ;; Return value:  Size  Location     Type
  9956 ;;		None               void
  9957 ;; Registers used:
  9958 ;;		wreg, status,2, status,0
  9959 ;; Tracked objects:
  9960 ;;		On entry : 0/0
  9961 ;;		On exit  : 0/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;Total ram usage:        2 bytes
  9969 ;; Hardware stack levels used:    1
  9970 ;; Hardware stack levels required when called:    5
  9971 ;; This function calls:
  9972 ;;		Nothing
  9973 ;; This function is called by:
  9974 ;;		_CC2500_RxData
  9975 ;;		_CC2500_ReadStatus
  9976 ;;		_CC2500_ReadREG
  9977 ;; This function uses a non-reentrant model
  9978 ;;
  9979                           
  9980                           
  9981                           ;psect for function _CC2500_ReadByte
  9982  1CFC                     _CC2500_ReadByte:	
  9983                           
  9984                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9985                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9986                           
  9987                           ;incstack = 0
  9988                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9989  1CFC  0020               	movlb	0	; select bank0
  9990  1CFD  01A1               	clrf	CC2500_ReadByte@loop_b
  9991  1CFE                     L5:	
  9992  1CFE  3008               	movlw	8
  9993  1CFF  0221               	subwf	CC2500_ReadByte@loop_b,w
  9994  1D00  1803               	btfsc	3,0
  9995  1D01  0008               	return
  9996                           
  9997                           ;CC2500_B1.c: 241: RC1 = 1;
  9998  1D02  148E               	bsf	14,1	;volatile
  9999                           
 10000                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
 10001  1D03  1003               	clrc
 10002  1D04  0DFA               	rlf	_SPI0Buffer,f
 10003                           
 10004                           ;CC2500_B1.c: 243: if (RC2 == 1)
 10005  1D05  1D0E               	btfss	14,2	;volatile
 10006  1D06  2D09               	goto	l8918
 10007                           
 10008                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
 10009  1D07  147A               	bsf	_SPI0Buffer,0
 10010  1D08  2D0D               	goto	l8920
 10011  1D09                     l8918:	
 10012                           
 10013                           ;CC2500_B1.c: 245: else
 10014                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
 10015  1D09  30FE               	movlw	254
 10016  1D0A  00A0               	movwf	??_CC2500_ReadByte
 10017  1D0B  0820               	movf	??_CC2500_ReadByte,w
 10018  1D0C  05FA               	andwf	_SPI0Buffer,f
 10019  1D0D                     l8920:	
 10020                           
 10021                           ;CC2500_B1.c: 247: RC1 = 0;
 10022  1D0D  108E               	bcf	14,1	;volatile
 10023  1D0E  3001               	movlw	1
 10024  1D0F  00A0               	movwf	??_CC2500_ReadByte
 10025  1D10  0820               	movf	??_CC2500_ReadByte,w
 10026  1D11  07A1               	addwf	CC2500_ReadByte@loop_b,f
 10027  1D12  2CFE               	goto	L5
 10028  1D13                     __end_of_CC2500_ReadByte:	
 10029                           
 10030                           	psect	text47
 10031  19DC                     __ptext47:	
 10032 ;; *************** function _RF_Initialization *****************
 10033 ;; Defined at:
 10034 ;;		line 9 in file "../src/RF_Control_B1.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;		None
 10037 ;; Auto vars:     Size  Location     Type
 10038 ;;		None
 10039 ;; Return value:  Size  Location     Type
 10040 ;;		None               void
 10041 ;; Registers used:
 10042 ;;		wreg, status,2, status,0, pclath, cstack
 10043 ;; Tracked objects:
 10044 ;;		On entry : 0/0
 10045 ;;		On exit  : 0/0
 10046 ;;		Unchanged: 0/0
 10047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;Total ram usage:        0 bytes
 10053 ;; Hardware stack levels used:    1
 10054 ;; Hardware stack levels required when called:    6
 10055 ;; This function calls:
 10056 ;;		_setRF_Initialization
 10057 ;; This function is called by:
 10058 ;;		_main
 10059 ;; This function uses a non-reentrant model
 10060 ;;
 10061                           
 10062                           
 10063                           ;psect for function _RF_Initialization
 10064  19DC                     _RF_Initialization:	
 10065                           
 10066                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10067                           
 10068                           ;incstack = 0
 10069                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10070  19DC  319A  229C         	fcall	_setRF_Initialization
 10071  19DE  0008               	return
 10072  19DF                     __end_of_RF_Initialization:	
 10073                           
 10074                           	psect	text48
 10075  1A9C                     __ptext48:	
 10076 ;; *************** function _setRF_Initialization *****************
 10077 ;; Defined at:
 10078 ;;		line 43 in file "../src/RF_Control_B1.c"
 10079 ;; Parameters:    Size  Location     Type
 10080 ;;		None
 10081 ;; Auto vars:     Size  Location     Type
 10082 ;;		None
 10083 ;; Return value:  Size  Location     Type
 10084 ;;		None               void
 10085 ;; Registers used:
 10086 ;;		wreg
 10087 ;; Tracked objects:
 10088 ;;		On entry : 0/0
 10089 ;;		On exit  : 0/0
 10090 ;;		Unchanged: 0/0
 10091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10094 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10096 ;;Total ram usage:        1 bytes
 10097 ;; Hardware stack levels used:    1
 10098 ;; Hardware stack levels required when called:    5
 10099 ;; This function calls:
 10100 ;;		Nothing
 10101 ;; This function is called by:
 10102 ;;		_RF_Initialization
 10103 ;; This function uses a non-reentrant model
 10104 ;;
 10105                           
 10106                           
 10107                           ;psect for function _setRF_Initialization
 10108  1A9C                     _setRF_Initialization:	
 10109                           
 10110                           ;RF_Control_B1.c: 45: Tx_Length = 21;
 10111                           
 10112                           ;incstack = 0
 10113                           ; Regs used in _setRF_Initialization: [wreg]
 10114  1A9C  3015               	movlw	21
 10115  1A9D  0020               	movlb	0	; select bank0
 10116  1A9E  00A0               	movwf	??_setRF_Initialization
 10117  1A9F  0820               	movf	??_setRF_Initialization,w
 10118  1AA0  0021               	movlb	1	; select bank1
 10119  1AA1  00D8               	movwf	_Tx_Length^(0+128)
 10120                           
 10121                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
 10122  1AA2  3014               	movlw	20
 10123  1AA3  00C6               	movwf	(_RF1^(0+128)+7)
 10124  1AA4  3000               	movlw	0
 10125  1AA5  00C7               	movwf	(_RF1^(0+128)+8)
 10126  1AA6  0008               	return
 10127  1AA7                     __end_of_setRF_Initialization:	
 10128                           
 10129                           	psect	text49
 10130  1BF6                     __ptext49:	
 10131 ;; *************** function _Mcu_Initialization *****************
 10132 ;; Defined at:
 10133 ;;		line 30 in file "../src/MCU_B1.c"
 10134 ;; Parameters:    Size  Location     Type
 10135 ;;		None
 10136 ;; Auto vars:     Size  Location     Type
 10137 ;;		None
 10138 ;; Return value:  Size  Location     Type
 10139 ;;		None               void
 10140 ;; Registers used:
 10141 ;;		wreg, status,2, status,0, pclath, cstack
 10142 ;; Tracked objects:
 10143 ;;		On entry : 0/0
 10144 ;;		On exit  : 0/0
 10145 ;;		Unchanged: 0/0
 10146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10151 ;;Total ram usage:        0 bytes
 10152 ;; Hardware stack levels used:    1
 10153 ;; Hardware stack levels required when called:    6
 10154 ;; This function calls:
 10155 ;;		_ADC_Set
 10156 ;;		_Fosc_Set
 10157 ;;		_IOC_Set
 10158 ;;		_IO_Set
 10159 ;;		_TMR1_Set
 10160 ;;		_WDT_Set
 10161 ;; This function is called by:
 10162 ;;		_main
 10163 ;; This function uses a non-reentrant model
 10164 ;;
 10165                           
 10166                           
 10167                           ;psect for function _Mcu_Initialization
 10168  1BF6                     _Mcu_Initialization:	
 10169                           
 10170                           ;MCU_B1.c: 32: Fosc_Set();
 10171                           
 10172                           ;incstack = 0
 10173                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10174  1BF6  3199  21F7  319B   	fcall	_Fosc_Set
 10175                           
 10176                           ;MCU_B1.c: 34: IO_Set();
 10177  1BF9  319D  2545  319B   	fcall	_IO_Set
 10178                           
 10179                           ;MCU_B1.c: 36: ;;
 10180                           ;MCU_B1.c: 38: TMR1_Set();
 10181  1BFC  319A  22D7  319B   	fcall	_TMR1_Set
 10182                           
 10183                           ;MCU_B1.c: 40: ADC_Set();
 10184  1BFF  319A  2212  319B   	fcall	_ADC_Set
 10185                           
 10186                           ;MCU_B1.c: 42: ;;
 10187                           ;MCU_B1.c: 44: ;;
 10188                           ;MCU_B1.c: 46: IOC_Set();
 10189  1C02  319A  22F0  319B   	fcall	_IOC_Set
 10190                           
 10191                           ;MCU_B1.c: 48: ;;
 10192                           ;MCU_B1.c: 50: ;;
 10193                           ;MCU_B1.c: 52: WDT_Set();
 10194  1C05  319A  2291         	fcall	_WDT_Set
 10195  1C07  0008               	return
 10196  1C08                     __end_of_Mcu_Initialization:	
 10197                           
 10198                           	psect	text50
 10199  1A91                     __ptext50:	
 10200 ;; *************** function _WDT_Set *****************
 10201 ;; Defined at:
 10202 ;;		line 1005 in file "../src/MCU_B1.c"
 10203 ;; Parameters:    Size  Location     Type
 10204 ;;		None
 10205 ;; Auto vars:     Size  Location     Type
 10206 ;;		None
 10207 ;; Return value:  Size  Location     Type
 10208 ;;		None               void
 10209 ;; Registers used:
 10210 ;;		wreg
 10211 ;; Tracked objects:
 10212 ;;		On entry : 0/0
 10213 ;;		On exit  : 0/0
 10214 ;;		Unchanged: 0/0
 10215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;Total ram usage:        1 bytes
 10221 ;; Hardware stack levels used:    1
 10222 ;; Hardware stack levels required when called:    5
 10223 ;; This function calls:
 10224 ;;		Nothing
 10225 ;; This function is called by:
 10226 ;;		_Mcu_Initialization
 10227 ;; This function uses a non-reentrant model
 10228 ;;
 10229                           
 10230                           
 10231                           ;psect for function _WDT_Set
 10232  1A91                     _WDT_Set:	
 10233                           
 10234                           ;MCU_B1.c: 1012: WDTCON = 0b00010111;;
 10235                           
 10236                           ;incstack = 0
 10237                           ; Regs used in _WDT_Set: [wreg]
 10238  1A91  3017               	movlw	23
 10239  1A92  0021               	movlb	1	; select bank1
 10240  1A93  0097               	movwf	23	;volatile
 10241                           
 10242                           ;MCU_B1.c: 1014: WDT.Enable = 1;
 10243  1A94  1450               	bsf	_WDT^(0+128),0
 10244                           
 10245                           ;MCU_B1.c: 1015: WDT.Timer = 10;
 10246  1A95  300A               	movlw	10
 10247  1A96  0020               	movlb	0	; select bank0
 10248  1A97  00A0               	movwf	??_WDT_Set
 10249  1A98  0820               	movf	??_WDT_Set,w
 10250  1A99  0021               	movlb	1	; select bank1
 10251  1A9A  00D1               	movwf	(_WDT^(0+128)+1)
 10252  1A9B  0008               	return
 10253  1A9C                     __end_of_WDT_Set:	
 10254                           
 10255                           	psect	text51
 10256  1AD7                     __ptext51:	
 10257 ;; *************** function _TMR1_Set *****************
 10258 ;; Defined at:
 10259 ;;		line 199 in file "../src/MCU_B1.c"
 10260 ;; Parameters:    Size  Location     Type
 10261 ;;		None
 10262 ;; Auto vars:     Size  Location     Type
 10263 ;;		None
 10264 ;; Return value:  Size  Location     Type
 10265 ;;		None               void
 10266 ;; Registers used:
 10267 ;;		wreg
 10268 ;; Tracked objects:
 10269 ;;		On entry : 0/0
 10270 ;;		On exit  : 0/0
 10271 ;;		Unchanged: 0/0
 10272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;Total ram usage:        0 bytes
 10278 ;; Hardware stack levels used:    1
 10279 ;; Hardware stack levels required when called:    5
 10280 ;; This function calls:
 10281 ;;		Nothing
 10282 ;; This function is called by:
 10283 ;;		_Mcu_Initialization
 10284 ;; This function uses a non-reentrant model
 10285 ;;
 10286                           
 10287                           
 10288                           ;psect for function _TMR1_Set
 10289  1AD7                     _TMR1_Set:	
 10290                           
 10291                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
 10292                           
 10293                           ;incstack = 0
 10294                           ; Regs used in _TMR1_Set: [wreg]
 10295  1AD7  3041               	movlw	65
 10296  1AD8  0020               	movlb	0	; select bank0
 10297  1AD9  0098               	movwf	24	;volatile
 10298                           
 10299                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
 10300  1ADA  30FA               	movlw	250
 10301  1ADB  0097               	movwf	23	;volatile
 10302                           
 10303                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
 10304  1ADC  3038               	movlw	56
 10305  1ADD  0096               	movwf	22	;volatile
 10306                           
 10307                           ;MCU_B1.c: 203: TMR1IE = 1;
 10308  1ADE  0021               	movlb	1	; select bank1
 10309  1ADF  1411               	bsf	17,0	;volatile
 10310                           
 10311                           ;MCU_B1.c: 204: PEIE = 1;
 10312  1AE0  170B               	bsf	11,6	;volatile
 10313                           
 10314                           ;MCU_B1.c: 205: GIE = 1;
 10315  1AE1  178B               	bsf	11,7	;volatile
 10316  1AE2  0008               	return
 10317  1AE3                     __end_of_TMR1_Set:	
 10318                           
 10319                           	psect	text52
 10320  1D45                     __ptext52:	
 10321 ;; *************** function _IO_Set *****************
 10322 ;; Defined at:
 10323 ;;		line 60 in file "../src/MCU_B1.c"
 10324 ;; Parameters:    Size  Location     Type
 10325 ;;		None
 10326 ;; Auto vars:     Size  Location     Type
 10327 ;;		None
 10328 ;; Return value:  Size  Location     Type
 10329 ;;		None               void
 10330 ;; Registers used:
 10331 ;;		wreg, status,2
 10332 ;; Tracked objects:
 10333 ;;		On entry : 0/0
 10334 ;;		On exit  : 0/0
 10335 ;;		Unchanged: 0/0
 10336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;Total ram usage:        0 bytes
 10342 ;; Hardware stack levels used:    1
 10343 ;; Hardware stack levels required when called:    5
 10344 ;; This function calls:
 10345 ;;		Nothing
 10346 ;; This function is called by:
 10347 ;;		_Mcu_Initialization
 10348 ;; This function uses a non-reentrant model
 10349 ;;
 10350                           
 10351                           
 10352                           ;psect for function _IO_Set
 10353  1D45                     _IO_Set:	
 10354                           
 10355                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10356                           
 10357                           ;incstack = 0
 10358                           ; Regs used in _IO_Set: [wreg+status,2]
 10359  1D45  3077               	movlw	119
 10360  1D46  0021               	movlb	1	; select bank1
 10361  1D47  008C               	movwf	12	;volatile
 10362                           
 10363                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10364  1D48  3007               	movlw	7
 10365  1D49  008D               	movwf	13	;volatile
 10366                           
 10367                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10368  1D4A  300C               	movlw	12
 10369  1D4B  008E               	movwf	14	;volatile
 10370                           
 10371                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10372  1D4C  0022               	movlb	2	; select bank2
 10373  1D4D  018C               	clrf	12	;volatile
 10374                           
 10375                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10376  1D4E  3002               	movlw	2
 10377  1D4F  008D               	movwf	13	;volatile
 10378                           
 10379                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10380  1D50  018E               	clrf	14	;volatile
 10381                           
 10382                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10383  1D51  3022               	movlw	34
 10384  1D52  0023               	movlb	3	; select bank3
 10385  1D53  008C               	movwf	12	;volatile
 10386                           
 10387                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10388  1D54  018D               	clrf	13	;volatile
 10389                           
 10390                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10391  1D55  018E               	clrf	14	;volatile
 10392                           
 10393                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10394  1D56  3077               	movlw	119
 10395  1D57  0020               	movlb	0	; select bank0
 10396  1D58  008C               	movwf	12	;volatile
 10397                           
 10398                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10399  1D59  3007               	movlw	7
 10400  1D5A  008D               	movwf	13	;volatile
 10401                           
 10402                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10403  1D5B  300C               	movlw	12
 10404  1D5C  008E               	movwf	14	;volatile
 10405  1D5D  0008               	return
 10406  1D5E                     __end_of_IO_Set:	
 10407                           
 10408                           	psect	text53
 10409  1AF0                     __ptext53:	
 10410 ;; *************** function _IOC_Set *****************
 10411 ;; Defined at:
 10412 ;;		line 367 in file "../src/MCU_B1.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;		None
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;		None
 10417 ;; Return value:  Size  Location     Type
 10418 ;;		None               void
 10419 ;; Registers used:
 10420 ;;		wreg, status,2
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;Total ram usage:        0 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; Hardware stack levels required when called:    5
 10433 ;; This function calls:
 10434 ;;		Nothing
 10435 ;; This function is called by:
 10436 ;;		_Mcu_Initialization
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           
 10441                           ;psect for function _IOC_Set
 10442  1AF0                     _IOC_Set:	
 10443                           
 10444                           ;MCU_B1.c: 368: WPUB2 = 0;
 10445                           
 10446                           ;incstack = 0
 10447                           ; Regs used in _IOC_Set: [wreg+status,2]
 10448  1AF0  0024               	movlb	4	; select bank4
 10449  1AF1  110D               	bcf	13,2	;volatile
 10450                           
 10451                           ;MCU_B1.c: 371: IOCBP = 0b00000100;
 10452  1AF2  3004               	movlw	4
 10453  1AF3  0027               	movlb	7	; select bank7
 10454  1AF4  0094               	movwf	20	;volatile
 10455                           
 10456                           ;MCU_B1.c: 372: IOCBN = 0b00000100;
 10457  1AF5  3004               	movlw	4
 10458  1AF6  0095               	movwf	21	;volatile
 10459                           
 10460                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
 10461  1AF7  0196               	clrf	22	;volatile
 10462                           
 10463                           ;MCU_B1.c: 394: IOCIE = 1;
 10464  1AF8  158B               	bsf	11,3	;volatile
 10465                           
 10466                           ;MCU_B1.c: 395: IOCIF = 0;
 10467  1AF9  100B               	bcf	11,0	;volatile
 10468                           
 10469                           ;MCU_B1.c: 396: PEIE = 1;
 10470  1AFA  170B               	bsf	11,6	;volatile
 10471                           
 10472                           ;MCU_B1.c: 397: GIE = 1;
 10473  1AFB  178B               	bsf	11,7	;volatile
 10474  1AFC  0008               	return
 10475  1AFD                     __end_of_IOC_Set:	
 10476                           
 10477                           	psect	text54
 10478  19F7                     __ptext54:	
 10479 ;; *************** function _Fosc_Set *****************
 10480 ;; Defined at:
 10481 ;;		line 56 in file "../src/MCU_B1.c"
 10482 ;; Parameters:    Size  Location     Type
 10483 ;;		None
 10484 ;; Auto vars:     Size  Location     Type
 10485 ;;		None
 10486 ;; Return value:  Size  Location     Type
 10487 ;;		None               void
 10488 ;; Registers used:
 10489 ;;		wreg
 10490 ;; Tracked objects:
 10491 ;;		On entry : 0/0
 10492 ;;		On exit  : 0/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;Total ram usage:        0 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:    5
 10502 ;; This function calls:
 10503 ;;		Nothing
 10504 ;; This function is called by:
 10505 ;;		_Mcu_Initialization
 10506 ;; This function uses a non-reentrant model
 10507 ;;
 10508                           
 10509                           
 10510                           ;psect for function _Fosc_Set
 10511  19F7                     _Fosc_Set:	
 10512                           
 10513                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10514                           
 10515                           ;incstack = 0
 10516                           ; Regs used in _Fosc_Set: [wreg]
 10517  19F7  3078               	movlw	120
 10518  19F8  0021               	movlb	1	; select bank1
 10519  19F9  0099               	movwf	25	;volatile
 10520  19FA  0008               	return
 10521  19FB                     __end_of_Fosc_Set:	
 10522                           
 10523                           	psect	text55
 10524  1A12                     __ptext55:	
 10525 ;; *************** function _ADC_Set *****************
 10526 ;; Defined at:
 10527 ;;		line 419 in file "../src/MCU_B1.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;		None
 10530 ;; Auto vars:     Size  Location     Type
 10531 ;;		None
 10532 ;; Return value:  Size  Location     Type
 10533 ;;		None               void
 10534 ;; Registers used:
 10535 ;;		wreg
 10536 ;; Tracked objects:
 10537 ;;		On entry : 0/0
 10538 ;;		On exit  : 0/0
 10539 ;;		Unchanged: 0/0
 10540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;Total ram usage:        0 bytes
 10546 ;; Hardware stack levels used:    1
 10547 ;; Hardware stack levels required when called:    5
 10548 ;; This function calls:
 10549 ;;		Nothing
 10550 ;; This function is called by:
 10551 ;;		_Mcu_Initialization
 10552 ;; This function uses a non-reentrant model
 10553 ;;
 10554                           
 10555                           
 10556                           ;psect for function _ADC_Set
 10557  1A12                     _ADC_Set:	
 10558                           
 10559                           ;MCU_B1.c: 420: ADCON1 = 0xf2;
 10560                           
 10561                           ;incstack = 0
 10562                           ; Regs used in _ADC_Set: [wreg]
 10563  1A12  30F2               	movlw	242
 10564  1A13  0021               	movlb	1	; select bank1
 10565  1A14  009E               	movwf	30	;volatile
 10566                           
 10567                           ;MCU_B1.c: 421: FVRCON = 0xc0;
 10568  1A15  30C0               	movlw	192
 10569  1A16  0022               	movlb	2	; select bank2
 10570  1A17  0097               	movwf	23	;volatile
 10571  1A18  0008               	return
 10572  1A19                     __end_of_ADC_Set:	
 10573                           
 10574                           	psect	text56
 10575  020E                     __ptext56:	
 10576 ;; *************** function _Load_Main *****************
 10577 ;; Defined at:
 10578 ;;		line 39 in file "../src/OverLoad_B1.c"
 10579 ;; Parameters:    Size  Location     Type
 10580 ;;		None
 10581 ;; Auto vars:     Size  Location     Type
 10582 ;;  i               1   19[BANK0 ] unsigned char 
 10583 ;; Return value:  Size  Location     Type
 10584 ;;		None               void
 10585 ;; Registers used:
 10586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10587 ;; Tracked objects:
 10588 ;;		On entry : 0/0
 10589 ;;		On exit  : 0/0
 10590 ;;		Unchanged: 0/0
 10591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10593 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;Total ram usage:        3 bytes
 10597 ;; Hardware stack levels used:    1
 10598 ;; Hardware stack levels required when called:   10
 10599 ;; This function calls:
 10600 ;;		___lwdiv
 10601 ;;		___wmul
 10602 ;;		_getTemp_Safe
 10603 ;;		_setDimmerLights_Clear
 10604 ;;		_setLoad_AH_AL_Restore
 10605 ;;		_setLoad_Exceptions
 10606 ;; This function is called by:
 10607 ;;		_main
 10608 ;; This function uses a non-reentrant model
 10609 ;;
 10610                           
 10611                           
 10612                           ;psect for function _Load_Main
 10613  020E                     _Load_Main:	
 10614                           
 10615                           ;OverLoad_B1.c: 40: char i = 0;
 10616                           
 10617                           ;incstack = 0
 10618                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10619  020E  0020               	movlb	0	; select bank0
 10620  020F  01B3               	clrf	Load_Main@i
 10621                           
 10622                           ;OverLoad_B1.c: 41: if (Load1.ERROR == 1) {
 10623  0210  0023               	movlb	3	; select bank3
 10624  0211  1EA0               	btfss	_Load1^(0+384),5
 10625  0212  2A24               	goto	l1691
 10626                           
 10627                           ;OverLoad_B1.c: 42: Load1.ErrorTime++;
 10628  0213  3001               	movlw	1
 10629  0214  07A3               	addwf	(_Load1^(0+384)+3),f
 10630  0215  3000               	movlw	0
 10631  0216  3DA4               	addwfc	((_Load1+1)^(0+384)+3),f
 10632                           
 10633                           ;OverLoad_B1.c: 43: if (Load1.ErrorTime >= 1000)
 10634  0217  3003               	movlw	3
 10635  0218  0224               	subwf	((_Load1+1)^(0+384)+3),w
 10636  0219  30E8               	movlw	232
 10637  021A  1903               	skipnz
 10638  021B  0223               	subwf	(_Load1^(0+384)+3),w
 10639  021C  1C03               	skipc
 10640  021D  0008               	return
 10641                           
 10642                           ;OverLoad_B1.c: 44: {
 10643                           ;OverLoad_B1.c: 45: Load1.ErrorTime = 0;
 10644  021E  01A3               	clrf	(_Load1^(0+384)+3)
 10645  021F  01A4               	clrf	((_Load1+1)^(0+384)+3)
 10646                           
 10647                           ;OverLoad_B1.c: 46: setLoad_Exceptions(0);
 10648  0220  3000               	movlw	0
 10649  0221  3191  21CB         	fcall	_setLoad_Exceptions
 10650                           
 10651                           ;OverLoad_B1.c: 47: }
 10652                           ;OverLoad_B1.c: 48: } else {
 10653  0223  0008               	return
 10654  0224                     l1691:	
 10655                           
 10656                           ;OverLoad_B1.c: 49: if (Load1.ADtoGO == 1) {
 10657  0224  1E20               	btfss	_Load1^(0+384),4
 10658  0225  2B4F               	goto	l1694
 10659                           
 10660                           ;OverLoad_B1.c: 50: Load1.Time++;
 10661  0226  3001               	movlw	1
 10662  0227  07A1               	addwf	(_Load1^(0+384)+1),f
 10663  0228  3000               	movlw	0
 10664  0229  3DA2               	addwfc	((_Load1+1)^(0+384)+1),f
 10665                           
 10666                           ;OverLoad_B1.c: 51: if (Load1.Time >= 5)
 10667  022A  3000               	movlw	0
 10668  022B  0222               	subwf	((_Load1+1)^(0+384)+1),w
 10669  022C  3005               	movlw	5
 10670  022D  1903               	skipnz
 10671  022E  0221               	subwf	(_Load1^(0+384)+1),w
 10672  022F  1C03               	skipc
 10673  0230  0008               	return
 10674                           
 10675                           ;OverLoad_B1.c: 52: {
 10676                           ;OverLoad_B1.c: 53: Load1.Time = 0;
 10677  0231  01A1               	clrf	(_Load1^(0+384)+1)
 10678  0232  01A2               	clrf	((_Load1+1)^(0+384)+1)
 10679                           
 10680                           ;OverLoad_B1.c: 54: Load1.ADtoGO = 0;
 10681  0233  1220               	bcf	_Load1^(0+384),4
 10682                           
 10683                           ;OverLoad_B1.c: 55: Load1.LightsCount = Load1.Lights1Status + Load1.Lights2Status + Load
      +                          1.Lights3Status;
 10684  0234  0863               	movf	(_Load1^(0+384)+67),w
 10685  0235  0764               	addwf	(_Load1^(0+384)+68),w
 10686  0236  0765               	addwf	(_Load1^(0+384)+69),w
 10687  0237  0020               	movlb	0	; select bank0
 10688  0238  00B1               	movwf	??_Load_Main
 10689  0239  0831               	movf	??_Load_Main,w
 10690  023A  0023               	movlb	3	; select bank3
 10691  023B  00DE               	movwf	(_Load1^(0+384)+62)
 10692                           
 10693                           ;OverLoad_B1.c: 56: for (i = 1; i < 4; i++) {
 10694  023C  0020               	movlb	0	; select bank0
 10695  023D  01B3               	clrf	Load_Main@i
 10696  023E  0AB3               	incf	Load_Main@i,f
 10697  023F  3004               	movlw	4
 10698  0240  0233               	subwf	Load_Main@i,w
 10699  0241  1803               	btfsc	3,0
 10700  0242  2A6D               	goto	l10458
 10701  0243                     l10452:	
 10702                           
 10703                           ;OverLoad_B1.c: 57: Load1.ADH += Load1.AH[i];
 10704  0243  3533               	lslf	Load_Main@i,w
 10705  0244  3EA8               	addlw	(_Load1+8)& (0+255)
 10706  0245  0086               	movwf	6
 10707  0246  3001               	movlw	1	; select bank3/4
 10708  0247  0087               	movwf	7
 10709  0248  3F40               	moviw [0]fsr1
 10710  0249  00B1               	movwf	??_Load_Main
 10711  024A  3F41               	moviw [1]fsr1
 10712  024B  00B2               	movwf	??_Load_Main+1
 10713  024C  0831               	movf	??_Load_Main,w
 10714  024D  0023               	movlb	3	; select bank3
 10715  024E  07CE               	addwf	(_Load1^(0+384)+46),f
 10716  024F  0020               	movlb	0	; select bank0
 10717  0250  0832               	movf	??_Load_Main+1,w
 10718  0251  0023               	movlb	3	; select bank3
 10719  0252  3DCF               	addwfc	((_Load1+1)^(0+384)+46),f
 10720                           
 10721                           ;OverLoad_B1.c: 58: Load1.ADL += Load1.AL[i];
 10722  0253  0020               	movlb	0	; select bank0
 10723  0254  3533               	lslf	Load_Main@i,w
 10724  0255  3EBA               	addlw	(_Load1+26)& (0+255)
 10725  0256  0086               	movwf	6
 10726  0257  3001               	movlw	1	; select bank3/4
 10727  0258  0087               	movwf	7
 10728  0259  3F40               	moviw [0]fsr1
 10729  025A  00B1               	movwf	??_Load_Main
 10730  025B  3F41               	moviw [1]fsr1
 10731  025C  00B2               	movwf	??_Load_Main+1
 10732  025D  0831               	movf	??_Load_Main,w
 10733  025E  0023               	movlb	3	; select bank3
 10734  025F  07D0               	addwf	(_Load1^(0+384)+48),f
 10735  0260  0020               	movlb	0	; select bank0
 10736  0261  0832               	movf	??_Load_Main+1,w
 10737  0262  0023               	movlb	3	; select bank3
 10738  0263  3DD1               	addwfc	((_Load1+1)^(0+384)+48),f
 10739  0264  3001               	movlw	1
 10740  0265  0020               	movlb	0	; select bank0
 10741  0266  00B1               	movwf	??_Load_Main
 10742  0267  0831               	movf	??_Load_Main,w
 10743  0268  07B3               	addwf	Load_Main@i,f
 10744  0269  3004               	movlw	4
 10745  026A  0233               	subwf	Load_Main@i,w
 10746  026B  1C03               	skipc
 10747  026C  2A43               	goto	l10452
 10748  026D                     l10458:	
 10749                           
 10750                           ;OverLoad_B1.c: 59: }
 10751                           ;OverLoad_B1.c: 60: Load1.ADH /= 3;
 10752  026D  3003               	movlw	3
 10753  026E  00A0               	movwf	___lwdiv@divisor
 10754  026F  3000               	movlw	0
 10755  0270  00A1               	movwf	___lwdiv@divisor+1
 10756  0271  0023               	movlb	3	; select bank3
 10757  0272  084F               	movf	((_Load1+1)^(0+384)+46),w
 10758  0273  0020               	movlb	0	; select bank0
 10759  0274  01A3               	clrf	___lwdiv@dividend+1
 10760  0275  07A3               	addwf	___lwdiv@dividend+1,f
 10761  0276  0023               	movlb	3	; select bank3
 10762  0277  084E               	movf	(_Load1^(0+384)+46),w
 10763  0278  0020               	movlb	0	; select bank0
 10764  0279  01A2               	clrf	___lwdiv@dividend
 10765  027A  07A2               	addwf	___lwdiv@dividend,f
 10766  027B  3191  2194  3182   	fcall	___lwdiv
 10767  027E  0020               	movlb	0	; select bank0
 10768  027F  0821               	movf	?___lwdiv+1,w
 10769  0280  0023               	movlb	3	; select bank3
 10770  0281  01CF               	clrf	((_Load1+1)^(0+384)+46)
 10771  0282  07CF               	addwf	((_Load1+1)^(0+384)+46),f
 10772  0283  0020               	movlb	0	; select bank0
 10773  0284  0820               	movf	?___lwdiv,w
 10774  0285  0023               	movlb	3	; select bank3
 10775  0286  01CE               	clrf	(_Load1^(0+384)+46)
 10776  0287  07CE               	addwf	(_Load1^(0+384)+46),f
 10777                           
 10778                           ;OverLoad_B1.c: 61: Load1.ADL /= 3;
 10779  0288  3003               	movlw	3
 10780  0289  0020               	movlb	0	; select bank0
 10781  028A  00A0               	movwf	___lwdiv@divisor
 10782  028B  3000               	movlw	0
 10783  028C  00A1               	movwf	___lwdiv@divisor+1
 10784  028D  0023               	movlb	3	; select bank3
 10785  028E  0851               	movf	((_Load1+1)^(0+384)+48),w
 10786  028F  0020               	movlb	0	; select bank0
 10787  0290  01A3               	clrf	___lwdiv@dividend+1
 10788  0291  07A3               	addwf	___lwdiv@dividend+1,f
 10789  0292  0023               	movlb	3	; select bank3
 10790  0293  0850               	movf	(_Load1^(0+384)+48),w
 10791  0294  0020               	movlb	0	; select bank0
 10792  0295  01A2               	clrf	___lwdiv@dividend
 10793  0296  07A2               	addwf	___lwdiv@dividend,f
 10794  0297  3191  2194  3182   	fcall	___lwdiv
 10795  029A  0020               	movlb	0	; select bank0
 10796  029B  0821               	movf	?___lwdiv+1,w
 10797  029C  0023               	movlb	3	; select bank3
 10798  029D  01D1               	clrf	((_Load1+1)^(0+384)+48)
 10799  029E  07D1               	addwf	((_Load1+1)^(0+384)+48),f
 10800  029F  0020               	movlb	0	; select bank0
 10801  02A0  0820               	movf	?___lwdiv,w
 10802  02A1  0023               	movlb	3	; select bank3
 10803  02A2  01D0               	clrf	(_Load1^(0+384)+48)
 10804  02A3  07D0               	addwf	(_Load1^(0+384)+48),f
 10805                           
 10806                           ;OverLoad_B1.c: 62: if (Load1.ADH > Load1.ADL) {
 10807  02A4  084F               	movf	((_Load1+1)^(0+384)+46),w
 10808  02A5  0251               	subwf	((_Load1+1)^(0+384)+48),w
 10809  02A6  1D03               	skipz
 10810  02A7  2AAA               	goto	u11365
 10811  02A8  084E               	movf	(_Load1^(0+384)+46),w
 10812  02A9  0250               	subwf	(_Load1^(0+384)+48),w
 10813  02AA                     u11365:	
 10814  02AA  1803               	skipnc
 10815  02AB  2B4C               	goto	l10516
 10816                           
 10817                           ;OverLoad_B1.c: 63: Load1.AD = (Load1.ADH - Load1.ADL);
 10818  02AC  302E               	movlw	46
 10819  02AD  3EA0               	addlw	_Load1& (0+255)
 10820  02AE  0086               	movwf	6
 10821  02AF  3001               	movlw	1	; select bank3/4
 10822  02B0  0087               	movwf	7
 10823  02B1  0950               	comf	(_Load1^(0+384)+48),w
 10824  02B2  0020               	movlb	0	; select bank0
 10825  02B3  00B1               	movwf	??_Load_Main
 10826  02B4  0023               	movlb	3	; select bank3
 10827  02B5  0951               	comf	((_Load1+1)^(0+384)+48),w
 10828  02B6  0020               	movlb	0	; select bank0
 10829  02B7  00B2               	movwf	??_Load_Main+1
 10830  02B8  0AB1               	incf	??_Load_Main,f
 10831  02B9  1903               	skipnz
 10832  02BA  0AB2               	incf	??_Load_Main+1,f
 10833  02BB  3F40               	moviw [0]fsr1
 10834  02BC  0731               	addwf	??_Load_Main,w
 10835  02BD  0023               	movlb	3	; select bank3
 10836  02BE  00CC               	movwf	(_Load1^(0+384)+44)
 10837  02BF  3F41               	moviw [1]fsr1
 10838  02C0  0020               	movlb	0	; select bank0
 10839  02C1  3D32               	addwfc	??_Load_Main+1,w
 10840  02C2  0023               	movlb	3	; select bank3
 10841  02C3  00CD               	movwf	(_Load1^(0+384)+45)
 10842                           
 10843                           ;OverLoad_B1.c: 65: if (Load1.Count < 2) {
 10844  02C4  3002               	movlw	2
 10845  02C5  025A               	subwf	(_Load1^(0+384)+58),w
 10846  02C6  1803               	skipnc
 10847  02C7  2AE9               	goto	l10480
 10848                           
 10849                           ;OverLoad_B1.c: 66: Load1.Count++;
 10850  02C8  3001               	movlw	1
 10851  02C9  0020               	movlb	0	; select bank0
 10852  02CA  00B1               	movwf	??_Load_Main
 10853  02CB  0831               	movf	??_Load_Main,w
 10854  02CC  0023               	movlb	3	; select bank3
 10855  02CD  07DA               	addwf	(_Load1^(0+384)+58),f
 10856                           
 10857                           ;OverLoad_B1.c: 67: if (Load1.Count == 1) {
 10858  02CE  085A               	movf	(_Load1^(0+384)+58),w
 10859  02CF  3A01               	xorlw	1
 10860  02D0  1D03               	skipz
 10861  02D1  2AD6               	goto	l10472
 10862                           
 10863                           ;OverLoad_B1.c: 68: Load1.JudgeValue = 500;
 10864  02D2  30F4               	movlw	244
 10865  02D3  00D6               	movwf	(_Load1^(0+384)+54)
 10866  02D4  3001               	movlw	1
 10867  02D5  2AE1               	goto	L6
 10868  02D6                     l10472:	
 10869                           ;OverLoad_B1.c: 69: } else if (Load1.Count == 2) {
 10870                           
 10871  02D6  085A               	movf	(_Load1^(0+384)+58),w
 10872  02D7  3A02               	xorlw	2
 10873  02D8  1D03               	skipz
 10874  02D9  2AE9               	goto	l10480
 10875                           
 10876                           ;OverLoad_B1.c: 70: if (Load1.LightsCount == 1) {
 10877  02DA  085E               	movf	(_Load1^(0+384)+62),w
 10878  02DB  3A01               	xorlw	1
 10879  02DC  1D03               	skipz
 10880  02DD  2AE3               	goto	l10478
 10881                           
 10882                           ;OverLoad_B1.c: 71: Load1.JudgeValue = 0x32;
 10883  02DE  3032               	movlw	50
 10884  02DF  00D6               	movwf	(_Load1^(0+384)+54)
 10885  02E0  3000               	movlw	0
 10886  02E1                     L6:	
 10887  02E1  00D7               	movwf	(_Load1^(0+384)+55)
 10888                           
 10889                           ;OverLoad_B1.c: 72: } else {
 10890  02E2  2AE9               	goto	l10480
 10891  02E3                     l10478:	
 10892                           
 10893                           ;OverLoad_B1.c: 73: Load1.JudgeValue = (0x32 + Load1.TotalLoad) - 0x08;
 10894  02E3  0826               	movf	(_Load1^(0+384)+6),w
 10895  02E4  3E2A               	addlw	42
 10896  02E5  00D6               	movwf	(_Load1^(0+384)+54)
 10897  02E6  3000               	movlw	0
 10898  02E7  3D27               	addwfc	((_Load1+1)^(0+384)+6),w
 10899  02E8  00D7               	movwf	((_Load1+1)^(0+384)+54)
 10900  02E9                     l10480:	
 10901                           
 10902                           ;OverLoad_B1.c: 74: }
 10903                           ;OverLoad_B1.c: 75: }
 10904                           ;OverLoad_B1.c: 76: }
 10905                           ;OverLoad_B1.c: 78: if (Load1.AD >= Load1.JudgeValue) {
 10906  02E9  0857               	movf	((_Load1+1)^(0+384)+54),w
 10907  02EA  024D               	subwf	((_Load1+1)^(0+384)+44),w
 10908  02EB  1D03               	skipz
 10909  02EC  2AEF               	goto	u11415
 10910  02ED  0856               	movf	(_Load1^(0+384)+54),w
 10911  02EE  024C               	subwf	(_Load1^(0+384)+44),w
 10912  02EF                     u11415:	
 10913  02EF  1C03               	skipc
 10914  02F0  2B01               	goto	l10490
 10915                           
 10916                           ;OverLoad_B1.c: 79: Load1.ErrorCount++;
 10917  02F1  3001               	movlw	1
 10918  02F2  0020               	movlb	0	; select bank0
 10919  02F3  00B1               	movwf	??_Load_Main
 10920  02F4  0831               	movf	??_Load_Main,w
 10921  02F5  0023               	movlb	3	; select bank3
 10922  02F6  07DC               	addwf	(_Load1^(0+384)+60),f
 10923                           
 10924                           ;OverLoad_B1.c: 80: if (Load1.ErrorCount > 2) {
 10925  02F7  3003               	movlw	3
 10926  02F8  025C               	subwf	(_Load1^(0+384)+60),w
 10927  02F9  1C03               	skipc
 10928  02FA  2B4C               	goto	l10516
 10929                           
 10930                           ;OverLoad_B1.c: 81: Load1.ErrorCount = 0;
 10931  02FB  01DC               	clrf	(_Load1^(0+384)+60)
 10932                           
 10933                           ;OverLoad_B1.c: 82: setLoad_Exceptions(1);
 10934  02FC  3001               	movlw	1
 10935  02FD  3191  21CB  3182   	fcall	_setLoad_Exceptions
 10936                           
 10937                           ;OverLoad_B1.c: 90: }
 10938                           ;OverLoad_B1.c: 91: } else {
 10939  0300  2B4C               	goto	l10516
 10940  0301                     l10490:	
 10941                           
 10942                           ;OverLoad_B1.c: 92: Load1.ErrorCount = 0;
 10943  0301  0023               	movlb	3	; select bank3
 10944  0302  01DC               	clrf	(_Load1^(0+384)+60)
 10945                           
 10946                           ;OverLoad_B1.c: 93: if (Load1.SafeCount < 10) {
 10947  0303  300A               	movlw	10
 10948  0304  0262               	subwf	(_Load1^(0+384)+66),w
 10949  0305  1803               	skipnc
 10950  0306  2B0D               	goto	l10496
 10951                           
 10952                           ;OverLoad_B1.c: 94: Load1.SafeCount++;
 10953  0307  3001               	movlw	1
 10954  0308  0020               	movlb	0	; select bank0
 10955  0309  00B1               	movwf	??_Load_Main
 10956  030A  0831               	movf	??_Load_Main,w
 10957  030B  0023               	movlb	3	; select bank3
 10958  030C  07E2               	addwf	(_Load1^(0+384)+66),f
 10959  030D                     l10496:	
 10960                           
 10961                           ;OverLoad_B1.c: 95: }
 10962                           ;OverLoad_B1.c: 96: if (Load1.SafeCount >= 10) {
 10963  030D  300A               	movlw	10
 10964  030E  0262               	subwf	(_Load1^(0+384)+66),w
 10965  030F  1C03               	skipc
 10966  0310  2B4C               	goto	l10516
 10967                           
 10968                           ;OverLoad_B1.c: 97: Load1.Safe = 1;
 10969  0311  15A0               	bsf	_Load1^(0+384),3
 10970                           
 10971                           ;OverLoad_B1.c: 101: setDimmerLights_Clear(1, 1);
 10972  0312  0020               	movlb	0	; select bank0
 10973  0313  01A2               	clrf	setDimmerLights_Clear@command
 10974  0314  0AA2               	incf	setDimmerLights_Clear@command,f
 10975  0315  3001               	movlw	1
 10976  0316  319B  2381  3182   	fcall	_setDimmerLights_Clear
 10977                           
 10978                           ;OverLoad_B1.c: 105: ;;
 10979                           ;OverLoad_B1.c: 111: setDimmerLights_Clear(2, 1);
 10980  0319  0020               	movlb	0	; select bank0
 10981  031A  01A2               	clrf	setDimmerLights_Clear@command
 10982  031B  0AA2               	incf	setDimmerLights_Clear@command,f
 10983  031C  3002               	movlw	2
 10984  031D  319B  2381  3182   	fcall	_setDimmerLights_Clear
 10985                           
 10986                           ;OverLoad_B1.c: 115: ;;
 10987                           ;OverLoad_B1.c: 129: if (Load1.StatusOn == 1) {
 10988  0320  0023               	movlb	3	; select bank3
 10989  0321  1F20               	btfss	_Load1^(0+384),6
 10990  0322  2B2A               	goto	l10508
 10991                           
 10992                           ;OverLoad_B1.c: 130: Load1.StatusOn = 0;
 10993  0323  1320               	bcf	_Load1^(0+384),6
 10994                           
 10995                           ;OverLoad_B1.c: 131: Load1.TotalLoad = Load1.AD;
 10996  0324  084D               	movf	((_Load1+1)^(0+384)+44),w
 10997  0325  01A7               	clrf	((_Load1+1)^(0+384)+6)
 10998  0326  07A7               	addwf	((_Load1+1)^(0+384)+6),f
 10999  0327  084C               	movf	(_Load1^(0+384)+44),w
 11000  0328  01A6               	clrf	(_Load1^(0+384)+6)
 11001  0329  07A6               	addwf	(_Load1^(0+384)+6),f
 11002  032A                     l10508:	
 11003                           
 11004                           ;OverLoad_B1.c: 133: }
 11005                           ;OverLoad_B1.c: 135: if (Load1.StatusOff == 1) {
 11006  032A  1FA0               	btfss	_Load1^(0+384),7
 11007  032B  2B4C               	goto	l10516
 11008                           
 11009                           ;OverLoad_B1.c: 136: Load1.StatusOff = 0;
 11010  032C  13A0               	bcf	_Load1^(0+384),7
 11011                           
 11012                           ;OverLoad_B1.c: 137: Load1.TotalLoad = Load1.AD;
 11013  032D  084D               	movf	((_Load1+1)^(0+384)+44),w
 11014  032E  01A7               	clrf	((_Load1+1)^(0+384)+6)
 11015  032F  07A7               	addwf	((_Load1+1)^(0+384)+6),f
 11016  0330  084C               	movf	(_Load1^(0+384)+44),w
 11017  0331  01A6               	clrf	(_Load1^(0+384)+6)
 11018  0332  07A6               	addwf	(_Load1^(0+384)+6),f
 11019                           
 11020                           ;OverLoad_B1.c: 138: Load1.JudgeValue = 0x32 * Load1.LightsCount;
 11021  0333  085E               	movf	(_Load1^(0+384)+62),w
 11022  0334  0020               	movlb	0	; select bank0
 11023  0335  00B1               	movwf	??_Load_Main
 11024  0336  01B2               	clrf	??_Load_Main+1
 11025  0337  0831               	movf	??_Load_Main,w
 11026  0338  00A0               	movwf	___wmul@multiplier
 11027  0339  0832               	movf	??_Load_Main+1,w
 11028  033A  00A1               	movwf	___wmul@multiplier+1
 11029  033B  3032               	movlw	50
 11030  033C  00A2               	movwf	___wmul@multiplicand
 11031  033D  3000               	movlw	0
 11032  033E  00A3               	movwf	___wmul@multiplicand+1
 11033  033F  319D  25CD  3182   	fcall	___wmul
 11034  0342  0020               	movlb	0	; select bank0
 11035  0343  0821               	movf	?___wmul+1,w
 11036  0344  0023               	movlb	3	; select bank3
 11037  0345  01D7               	clrf	((_Load1+1)^(0+384)+54)
 11038  0346  07D7               	addwf	((_Load1+1)^(0+384)+54),f
 11039  0347  0020               	movlb	0	; select bank0
 11040  0348  0820               	movf	?___wmul,w
 11041  0349  0023               	movlb	3	; select bank3
 11042  034A  01D6               	clrf	(_Load1^(0+384)+54)
 11043  034B  07D6               	addwf	(_Load1^(0+384)+54),f
 11044  034C                     l10516:	
 11045                           
 11046                           ;OverLoad_B1.c: 139: }
 11047                           ;OverLoad_B1.c: 140: }
 11048                           ;OverLoad_B1.c: 141: }
 11049                           ;OverLoad_B1.c: 142: }
 11050                           ;OverLoad_B1.c: 143: setLoad_AH_AL_Restore();
 11051  034C  319D  2578         	fcall	_setLoad_AH_AL_Restore
 11052                           
 11053                           ;OverLoad_B1.c: 155: }
 11054                           ;OverLoad_B1.c: 156: } else {
 11055  034E  0008               	return
 11056  034F                     l1694:	
 11057                           
 11058                           ;OverLoad_B1.c: 157: if (Load1.GO == 1) {
 11059  034F  1CA0               	btfss	_Load1^(0+384),1
 11060  0350  2B5E               	goto	l1713
 11061                           
 11062                           ;OverLoad_B1.c: 158: if (Load1.LightsON == 0) {
 11063  0351  1920               	btfsc	_Load1^(0+384),2
 11064  0352  2B55               	goto	l10522
 11065                           
 11066                           ;OverLoad_B1.c: 159: Load1.LightsON = 1;
 11067  0353  1520               	bsf	_Load1^(0+384),2
 11068                           
 11069                           ;OverLoad_B1.c: 160: Load1.Safe = 0;
 11070  0354  11A0               	bcf	_Load1^(0+384),3
 11071  0355                     l10522:	
 11072                           
 11073                           ;OverLoad_B1.c: 161: }
 11074                           ;OverLoad_B1.c: 162: if (getTemp_Safe() == 1 && 1 == 1) {
 11075  0355  319A  2239  3182   	fcall	_getTemp_Safe
 11076  0358  3A01               	xorlw	1
 11077  0359  1D03               	skipz
 11078  035A  0008               	return
 11079                           
 11080                           ;OverLoad_B1.c: 163: Load1.ADtoGO = 1;
 11081  035B  0023               	movlb	3	; select bank3
 11082  035C  1620               	bsf	_Load1^(0+384),4
 11083                           
 11084                           ;OverLoad_B1.c: 164: }
 11085                           ;OverLoad_B1.c: 165: } else {
 11086  035D  0008               	return
 11087  035E                     l1713:	
 11088                           
 11089                           ;OverLoad_B1.c: 166: if (Load1.LightsON == 1) {
 11090  035E  1D20               	btfss	_Load1^(0+384),2
 11091  035F  0008               	return
 11092                           
 11093                           ;OverLoad_B1.c: 167: Load1.LightsON = 0;
 11094  0360  1120               	bcf	_Load1^(0+384),2
 11095                           
 11096                           ;OverLoad_B1.c: 168: Load1.Safe = 1;
 11097  0361  15A0               	bsf	_Load1^(0+384),3
 11098                           
 11099                           ;OverLoad_B1.c: 169: Load1.ErrorCount = 0;
 11100  0362  01DC               	clrf	(_Load1^(0+384)+60)
 11101                           
 11102                           ;OverLoad_B1.c: 170: Load1.Count = 0;
 11103  0363  01DA               	clrf	(_Load1^(0+384)+58)
 11104                           
 11105                           ;OverLoad_B1.c: 171: Load1.TotalLoad = 0;
 11106  0364  01A6               	clrf	(_Load1^(0+384)+6)
 11107  0365  01A7               	clrf	((_Load1+1)^(0+384)+6)
 11108                           
 11109                           ;OverLoad_B1.c: 172: Load1.NumberCount = 0;
 11110  0366  01DF               	clrf	(_Load1^(0+384)+63)
 11111                           
 11112                           ;OverLoad_B1.c: 173: Load1.StatusOn = 0;
 11113  0367  1320               	bcf	_Load1^(0+384),6
 11114                           
 11115                           ;OverLoad_B1.c: 174: Load1.StatusOff = 0;
 11116  0368  13A0               	bcf	_Load1^(0+384),7
 11117                           
 11118                           ;OverLoad_B1.c: 175: Load1.AD = 0;
 11119  0369  01CC               	clrf	(_Load1^(0+384)+44)
 11120  036A  01CD               	clrf	((_Load1+1)^(0+384)+44)
 11121                           
 11122                           ;OverLoad_B1.c: 176: setLoad_AH_AL_Restore();
 11123  036B  319D  2578  3182   	fcall	_setLoad_AH_AL_Restore
 11124                           
 11125                           ;OverLoad_B1.c: 180: setDimmerLights_Clear(1, 1);
 11126  036E  0020               	movlb	0	; select bank0
 11127  036F  01A2               	clrf	setDimmerLights_Clear@command
 11128  0370  0AA2               	incf	setDimmerLights_Clear@command,f
 11129  0371  3001               	movlw	1
 11130  0372  319B  2381  3182   	fcall	_setDimmerLights_Clear
 11131                           
 11132                           ;OverLoad_B1.c: 184: ;;
 11133                           ;OverLoad_B1.c: 190: setDimmerLights_Clear(2, 1);
 11134  0375  0020               	movlb	0	; select bank0
 11135  0376  01A2               	clrf	setDimmerLights_Clear@command
 11136  0377  0AA2               	incf	setDimmerLights_Clear@command,f
 11137  0378  3002               	movlw	2
 11138  0379  319B  2381         	fcall	_setDimmerLights_Clear
 11139                           
 11140                           ;OverLoad_B1.c: 194: ;;
 11141  037B  0008               	return
 11142  037C                     __end_of_Load_Main:	
 11143                           
 11144                           	psect	text57
 11145  11CB                     __ptext57:	
 11146 ;; *************** function _setLoad_Exceptions *****************
 11147 ;; Defined at:
 11148 ;;		line 231 in file "../src/OverLoad_B1.c"
 11149 ;; Parameters:    Size  Location     Type
 11150 ;;  command         1    wreg     unsigned char 
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  command         1   16[BANK0 ] unsigned char 
 11153 ;;  i               1   15[BANK0 ] unsigned char 
 11154 ;; Return value:  Size  Location     Type
 11155 ;;		None               void
 11156 ;; Registers used:
 11157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11158 ;; Tracked objects:
 11159 ;;		On entry : 0/0
 11160 ;;		On exit  : 0/0
 11161 ;;		Unchanged: 0/0
 11162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;Total ram usage:        3 bytes
 11168 ;; Hardware stack levels used:    1
 11169 ;; Hardware stack levels required when called:    9
 11170 ;; This function calls:
 11171 ;;		_DimmerLights_Exceptions
 11172 ;;		_setLED
 11173 ;;		_setRF_Enable
 11174 ;;		_setSw_Enable
 11175 ;; This function is called by:
 11176 ;;		_Load_Main
 11177 ;; This function uses a non-reentrant model
 11178 ;;
 11179                           
 11180                           
 11181                           ;psect for function _setLoad_Exceptions
 11182  11CB                     _setLoad_Exceptions:	
 11183                           
 11184                           ;incstack = 0
 11185                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11186                           ;setLoad_Exceptions@command stored from wreg
 11187  11CB  0020               	movlb	0	; select bank0
 11188  11CC  00B0               	movwf	setLoad_Exceptions@command
 11189                           
 11190                           ;OverLoad_B1.c: 232: char i = command == 1 ? 0 : 1;
 11191  11CD  0830               	movf	setLoad_Exceptions@command,w
 11192  11CE  3A01               	xorlw	1
 11193  11CF  3000               	movlw	0
 11194  11D0  1D03               	skipz
 11195  11D1  3001               	movlw	1
 11196  11D2  00AE               	movwf	??_setLoad_Exceptions
 11197  11D3  082E               	movf	??_setLoad_Exceptions,w
 11198  11D4  00AF               	movwf	setLoad_Exceptions@i
 11199                           
 11200                           ;OverLoad_B1.c: 233: Load1.ERROR = command;
 11201  11D5  0830               	movf	setLoad_Exceptions@command,w
 11202  11D6  0023               	movlb	3	; select bank3
 11203  11D7  12A0               	bcf	_Load1^(0+384),5
 11204  11D8  1D03               	skipz
 11205  11D9  16A0               	bsf	_Load1^(0+384),5
 11206                           
 11207                           ;OverLoad_B1.c: 234: Load1.Safe = i;
 11208  11DA  0020               	movlb	0	; select bank0
 11209  11DB  082F               	movf	setLoad_Exceptions@i,w
 11210  11DC  0023               	movlb	3	; select bank3
 11211  11DD  11A0               	bcf	_Load1^(0+384),3
 11212  11DE  1D03               	skipz
 11213  11DF  15A0               	bsf	_Load1^(0+384),3
 11214                           
 11215                           ;OverLoad_B1.c: 235: Load1.ErrorStatus = command;
 11216  11E0  0020               	movlb	0	; select bank0
 11217  11E1  0830               	movf	setLoad_Exceptions@command,w
 11218  11E2  00AE               	movwf	??_setLoad_Exceptions
 11219  11E3  082E               	movf	??_setLoad_Exceptions,w
 11220  11E4  0023               	movlb	3	; select bank3
 11221  11E5  00A5               	movwf	(_Load1^(0+384)+5)
 11222                           
 11223                           ;OverLoad_B1.c: 237: if (command == 1) {
 11224  11E6  0020               	movlb	0	; select bank0
 11225  11E7  0830               	movf	setLoad_Exceptions@command,w
 11226  11E8  3A01               	xorlw	1
 11227  11E9  1D03               	skipz
 11228  11EA  29EF               	goto	l1721
 11229                           
 11230                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 11231  11EB  3002               	movlw	2
 11232  11EC  3193  23D2  3191   	fcall	_DimmerLights_Exceptions
 11233  11EF                     l1721:	
 11234                           
 11235                           ;OverLoad_B1.c: 242: }
 11236                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 11237  11EF  0020               	movlb	0	; select bank0
 11238  11F0  0830               	movf	setLoad_Exceptions@command,w
 11239  11F1  3E0A               	addlw	10
 11240  11F2  00AE               	movwf	??_setLoad_Exceptions
 11241  11F3  082E               	movf	??_setLoad_Exceptions,w
 11242  11F4  00A2               	movwf	setLED@command
 11243  11F5  3063               	movlw	99
 11244  11F6  3196  261F  3191   	fcall	_setLED
 11245                           
 11246                           ;OverLoad_B1.c: 245: setSw_Enable(i);
 11247  11F9  0020               	movlb	0	; select bank0
 11248  11FA  082F               	movf	setLoad_Exceptions@i,w
 11249  11FB  319D  2594  3191   	fcall	_setSw_Enable
 11250                           
 11251                           ;OverLoad_B1.c: 247: setRF_Enable(i);
 11252  11FE  0020               	movlb	0	; select bank0
 11253  11FF  082F               	movf	setLoad_Exceptions@i,w
 11254  1200  319B  2326         	fcall	_setRF_Enable
 11255  1202  0008               	return
 11256  1203                     __end_of_setLoad_Exceptions:	
 11257                           
 11258                           	psect	text58
 11259  1D94                     __ptext58:	
 11260 ;; *************** function _setSw_Enable *****************
 11261 ;; Defined at:
 11262 ;;		line 91 in file "../src/Switch_B1.c"
 11263 ;; Parameters:    Size  Location     Type
 11264 ;;  command         1    wreg     unsigned char 
 11265 ;; Auto vars:     Size  Location     Type
 11266 ;;  command         1    2[BANK0 ] unsigned char 
 11267 ;; Return value:  Size  Location     Type
 11268 ;;		None               void
 11269 ;; Registers used:
 11270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11271 ;; Tracked objects:
 11272 ;;		On entry : 0/0
 11273 ;;		On exit  : 0/0
 11274 ;;		Unchanged: 0/0
 11275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11279 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;Total ram usage:        1 bytes
 11281 ;; Hardware stack levels used:    1
 11282 ;; Hardware stack levels required when called:    6
 11283 ;; This function calls:
 11284 ;;		_SwPointSelect
 11285 ;; This function is called by:
 11286 ;;		_my_MainTime
 11287 ;;		_setLoad_Exceptions
 11288 ;;		_setOverTemp_Exceptions
 11289 ;; This function uses a non-reentrant model
 11290 ;;
 11291                           
 11292                           
 11293                           ;psect for function _setSw_Enable
 11294  1D94                     _setSw_Enable:	
 11295                           
 11296                           ;incstack = 0
 11297                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11298                           ;setSw_Enable@command stored from wreg
 11299  1D94  0020               	movlb	0	; select bank0
 11300  1D95  00A2               	movwf	setSw_Enable@command
 11301                           
 11302                           ;Switch_B1.c: 94: SwPointSelect(1);
 11303  1D96  3001               	movlw	1
 11304  1D97  319C  247B  319D   	fcall	_SwPointSelect
 11305                           
 11306                           ;Switch_B1.c: 95: Sw->Enable = command;
 11307  1D9A  0020               	movlb	0	; select bank0
 11308  1D9B  086C               	movf	_Sw,w
 11309  1D9C  0086               	movwf	6
 11310  1D9D  3001               	movlw	1	; select bank2/3
 11311  1D9E  0087               	movwf	7
 11312  1D9F  0822               	movf	setSw_Enable@command,w
 11313  1DA0  1001               	bcf	1,0
 11314  1DA1  1D03               	skipz
 11315  1DA2  1401               	bsf	1,0
 11316                           
 11317                           ;Switch_B1.c: 99: SwPointSelect(2);
 11318  1DA3  3002               	movlw	2
 11319  1DA4  319C  247B         	fcall	_SwPointSelect
 11320                           
 11321                           ;Switch_B1.c: 100: Sw->Enable = command;
 11322  1DA6  0020               	movlb	0	; select bank0
 11323  1DA7  086C               	movf	_Sw,w
 11324  1DA8  0086               	movwf	6
 11325  1DA9  3001               	movlw	1	; select bank2/3
 11326  1DAA  0087               	movwf	7
 11327  1DAB  0822               	movf	setSw_Enable@command,w
 11328  1DAC  1001               	bcf	1,0
 11329  1DAD  1D03               	skipz
 11330  1DAE  1401               	bsf	1,0
 11331  1DAF  0008               	return
 11332  1DB0                     __end_of_setSw_Enable:	
 11333                           
 11334                           	psect	text59
 11335  1B26                     __ptext59:	
 11336 ;; *************** function _setRF_Enable *****************
 11337 ;; Defined at:
 11338 ;;		line 227 in file "../src/RF_Control_B1.c"
 11339 ;; Parameters:    Size  Location     Type
 11340 ;;  command         1    wreg     unsigned char 
 11341 ;; Auto vars:     Size  Location     Type
 11342 ;;  command         1    0[BANK0 ] unsigned char 
 11343 ;; Return value:  Size  Location     Type
 11344 ;;		None               void
 11345 ;; Registers used:
 11346 ;;		wreg, status,2
 11347 ;; Tracked objects:
 11348 ;;		On entry : 0/0
 11349 ;;		On exit  : 0/0
 11350 ;;		Unchanged: 0/0
 11351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11356 ;;Total ram usage:        1 bytes
 11357 ;; Hardware stack levels used:    1
 11358 ;; Hardware stack levels required when called:    5
 11359 ;; This function calls:
 11360 ;;		Nothing
 11361 ;; This function is called by:
 11362 ;;		_my_MainTime
 11363 ;;		_setLoad_Exceptions
 11364 ;;		_setOverTemp_Exceptions
 11365 ;; This function uses a non-reentrant model
 11366 ;;
 11367                           
 11368                           
 11369                           ;psect for function _setRF_Enable
 11370  1B26                     _setRF_Enable:	
 11371                           
 11372                           ;incstack = 0
 11373                           ; Regs used in _setRF_Enable: [wreg+status,2]
 11374                           ;setRF_Enable@command stored from wreg
 11375  1B26  0020               	movlb	0	; select bank0
 11376  1B27  00A0               	movwf	setRF_Enable@command
 11377                           
 11378                           ;RF_Control_B1.c: 228: RF1.Enable = command;
 11379  1B28  0820               	movf	setRF_Enable@command,w
 11380  1B29  0021               	movlb	1	; select bank1
 11381  1B2A  103F               	bcf	_RF1^(0+128),0
 11382  1B2B  1D03               	skipz
 11383  1B2C  143F               	bsf	_RF1^(0+128),0
 11384                           
 11385                           ;RF_Control_B1.c: 229: RF1.Learn = 0;
 11386  1B2D  133F               	bcf	_RF1^(0+128),6
 11387                           
 11388                           ;RF_Control_B1.c: 230: RF1.TransceiveGO = 0;
 11389  1B2E  113F               	bcf	_RF1^(0+128),2
 11390                           
 11391                           ;RF_Control_B1.c: 231: RF1.RxStatus = 0;
 11392  1B2F  11BF               	bcf	_RF1^(0+128),3
 11393                           
 11394                           ;RF_Control_B1.c: 232: RF1.ReceiveGO = 0;
 11395  1B30  10BF               	bcf	_RF1^(0+128),1
 11396                           
 11397                           ;RF_Control_B1.c: 233: RF1.DebounceTime = 0;
 11398  1B31  01C8               	clrf	(_RF1^(0+128)+9)
 11399                           
 11400                           ;RF_Control_B1.c: 234: RF1.Debounce = 0;
 11401  1B32  12BF               	bcf	_RF1^(0+128),5
 11402  1B33  0008               	return
 11403  1B34                     __end_of_setRF_Enable:	
 11404                           
 11405                           	psect	text60
 11406  13D2                     __ptext60:	
 11407 ;; *************** function _DimmerLights_Exceptions *****************
 11408 ;; Defined at:
 11409 ;;		line 522 in file "../src/Dimmer_B1.c"
 11410 ;; Parameters:    Size  Location     Type
 11411 ;;  status          1    wreg     unsigned char 
 11412 ;; Auto vars:     Size  Location     Type
 11413 ;;  status          1   13[BANK0 ] unsigned char 
 11414 ;; Return value:  Size  Location     Type
 11415 ;;		None               void
 11416 ;; Registers used:
 11417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11418 ;; Tracked objects:
 11419 ;;		On entry : 0/0
 11420 ;;		On exit  : 0/0
 11421 ;;		Unchanged: 0/0
 11422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11424 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11427 ;;Total ram usage:        1 bytes
 11428 ;; Hardware stack levels used:    1
 11429 ;; Hardware stack levels required when called:    8
 11430 ;; This function calls:
 11431 ;;		_getDimmerLights_StatusFlag
 11432 ;;		_setBuz
 11433 ;;		_setDimmerLights_ERROR
 11434 ;;		_setDimmerLights_TriggerERROR
 11435 ;; This function is called by:
 11436 ;;		_setLoad_Exceptions
 11437 ;;		_setOverTemp_Exceptions
 11438 ;; This function uses a non-reentrant model
 11439 ;;
 11440                           
 11441                           
 11442                           ;psect for function _DimmerLights_Exceptions
 11443  13D2                     _DimmerLights_Exceptions:	
 11444                           
 11445                           ;incstack = 0
 11446                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11447                           ;DimmerLights_Exceptions@status stored from wreg
 11448  13D2  0020               	movlb	0	; select bank0
 11449  13D3  00AD               	movwf	DimmerLights_Exceptions@status
 11450                           
 11451                           ;Dimmer_B1.c: 523: if (status == 1) {
 11452  13D4  082D               	movf	DimmerLights_Exceptions@status,w
 11453  13D5  3A01               	xorlw	1
 11454  13D6  1D03               	skipz
 11455  13D7  2BE8               	goto	l9086
 11456                           
 11457                           ;Dimmer_B1.c: 524: if (getDimmerLights_StatusFlag() == 1) {
 11458  13D8  319B  23B1  3193   	fcall	_getDimmerLights_StatusFlag
 11459  13DB  3A01               	xorlw	1
 11460  13DC  1D03               	skipz
 11461  13DD  2C00               	goto	l9094
 11462                           
 11463                           ;Dimmer_B1.c: 525: setBuz(10, 300);
 11464  13DE  302C               	movlw	44
 11465  13DF  0020               	movlb	0	; select bank0
 11466  13E0  00A9               	movwf	setBuz@time
 11467  13E1  3001               	movlw	1
 11468  13E2  00AA               	movwf	setBuz@time+1
 11469  13E3  300A               	movlw	10
 11470  13E4  3195  256B  3193   	fcall	_setBuz
 11471  13E7  2C00               	goto	l9094
 11472  13E8                     l9086:	
 11473                           ;Dimmer_B1.c: 537: } else if (status == 2)
 11474                           
 11475                           ;Dimmer_B1.c: 532: setDimmerLights_ERROR(2);
 11476                           
 11477                           ;Dimmer_B1.c: 526: }
 11478                           ;Dimmer_B1.c: 529: setDimmerLights_ERROR(1);
 11479                           
 11480  13E8  0020               	movlb	0	; select bank0
 11481  13E9  082D               	movf	DimmerLights_Exceptions@status,w
 11482  13EA  3A02               	xorlw	2
 11483  13EB  1D03               	skipz
 11484  13EC  2BFB               	goto	l9092
 11485                           
 11486                           ;Dimmer_B1.c: 538: {
 11487                           ;Dimmer_B1.c: 539: setBuz(5, 300);
 11488  13ED  302C               	movlw	44
 11489  13EE  00A9               	movwf	setBuz@time
 11490  13EF  3001               	movlw	1
 11491  13F0  00AA               	movwf	setBuz@time+1
 11492  13F1  3005               	movlw	5
 11493  13F2  3195  256B  3193   	fcall	_setBuz
 11494                           
 11495                           ;Dimmer_B1.c: 540: setDimmerLights_ERROR(Dimmer->Load);
 11496  13F5  0A76               	incf	_Dimmer,w
 11497  13F6  0086               	movwf	6
 11498  13F7  3001               	movlw	1	; select bank2/3
 11499  13F8  0087               	movwf	7
 11500  13F9  0801               	movf	1,w
 11501  13FA  2C05               	goto	L7
 11502  13FB                     l9092:	
 11503                           ;Dimmer_B1.c: 541: } else if (status == 3)
 11504                           
 11505  13FB  0020               	movlb	0	; select bank0
 11506  13FC  082D               	movf	DimmerLights_Exceptions@status,w
 11507  13FD  3A03               	xorlw	3
 11508  13FE  1D03               	skipz
 11509  13FF  2C08               	goto	l870
 11510  1400                     l9094:	
 11511                           
 11512                           ;Dimmer_B1.c: 542: {
 11513                           ;Dimmer_B1.c: 544: setDimmerLights_ERROR(1);
 11514  1400  3001               	movlw	1
 11515  1401  3194  24BD  3193   	fcall	_setDimmerLights_ERROR
 11516                           
 11517                           ;Dimmer_B1.c: 547: setDimmerLights_ERROR(2);
 11518  1404  3002               	movlw	2
 11519  1405                     L7:	
 11520  1405  3194  24BD  3193   	fcall	_setDimmerLights_ERROR
 11521  1408                     l870:	
 11522                           
 11523                           ;Dimmer_B1.c: 552: }
 11524                           ;Dimmer_B1.c: 555: setDimmerLights_TriggerERROR(1, 0);
 11525  1408  0020               	movlb	0	; select bank0
 11526  1409  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11527  140A  3001               	movlw	1
 11528  140B  319F  27D5  3193   	fcall	_setDimmerLights_TriggerERROR
 11529                           
 11530                           ;Dimmer_B1.c: 558: setDimmerLights_TriggerERROR(2, 0);
 11531  140E  0020               	movlb	0	; select bank0
 11532  140F  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11533  1410  3002               	movlw	2
 11534  1411  319F  27D5  3193   	fcall	_setDimmerLights_TriggerERROR
 11535                           
 11536                           ;Dimmer_B1.c: 564: if (myMain.SelfTest == 0) {
 11537  1414  0021               	movlb	1	; select bank1
 11538  1415  1BA0               	btfsc	_myMain^(0+128),7
 11539  1416  0008               	return
 11540                           
 11541                           ;Dimmer_B1.c: 565: myMain.i = 0;
 11542  1417  102F               	bcf	(_myMain^(0+128)+15),0
 11543                           
 11544                           ;Dimmer_B1.c: 566: myMain.j = 0;
 11545  1418  10AF               	bcf	(_myMain^(0+128)+15),1
 11546                           
 11547                           ;Dimmer_B1.c: 567: myMain.k = 1;
 11548  1419  152F               	bsf	(_myMain^(0+128)+15),2
 11549                           
 11550                           ;Dimmer_B1.c: 568: myMain.Count2 = 0;
 11551  141A  01A8               	clrf	(_myMain^(0+128)+8)
 11552  141B  01A9               	clrf	((_myMain+1)^(0+128)+8)
 11553  141C  0008               	return
 11554  141D                     __end_of_DimmerLights_Exceptions:	
 11555                           
 11556                           	psect	text61
 11557  1FD5                     __ptext61:	
 11558 ;; *************** function _setDimmerLights_TriggerERROR *****************
 11559 ;; Defined at:
 11560 ;;		line 591 in file "../src/Dimmer_B1.c"
 11561 ;; Parameters:    Size  Location     Type
 11562 ;;  lights          1    wreg     unsigned char 
 11563 ;;  command         1    2[BANK0 ] unsigned char 
 11564 ;; Auto vars:     Size  Location     Type
 11565 ;;  lights          1    3[BANK0 ] unsigned char 
 11566 ;; Return value:  Size  Location     Type
 11567 ;;		None               void
 11568 ;; Registers used:
 11569 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11570 ;; Tracked objects:
 11571 ;;		On entry : 0/0
 11572 ;;		On exit  : 0/0
 11573 ;;		Unchanged: 0/0
 11574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11575 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;Total ram usage:        2 bytes
 11580 ;; Hardware stack levels used:    1
 11581 ;; Hardware stack levels required when called:    6
 11582 ;; This function calls:
 11583 ;;		_DimmerLightsPointSelect
 11584 ;; This function is called by:
 11585 ;;		_DimmerLights_Exceptions
 11586 ;; This function uses a non-reentrant model
 11587 ;;
 11588                           
 11589                           
 11590                           ;psect for function _setDimmerLights_TriggerERROR
 11591  1FD5                     _setDimmerLights_TriggerERROR:	
 11592                           
 11593                           ;incstack = 0
 11594                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11595                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 11596  1FD5  0020               	movlb	0	; select bank0
 11597  1FD6  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 11598                           
 11599                           ;Dimmer_B1.c: 593: DimmerLightsPointSelect(lights);
 11600  1FD7  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 11601  1FD8  319C  242C         	fcall	_DimmerLightsPointSelect
 11602                           
 11603                           ;Dimmer_B1.c: 594: DimmerLights->Trigger = command;
 11604  1FDA  0020               	movlb	0	; select bank0
 11605  1FDB  086B               	movf	_DimmerLights,w
 11606  1FDC  3E08               	addlw	8
 11607  1FDD  0086               	movwf	6
 11608  1FDE  3001               	movlw	1	; select bank2/3
 11609  1FDF  0087               	movwf	7
 11610  1FE0  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11611  1FE1  1101               	bcf	1,2
 11612  1FE2  1D03               	skipz
 11613  1FE3  1501               	bsf	1,2
 11614                           
 11615                           ;Dimmer_B1.c: 595: DimmerLights->Switch = command;
 11616  1FE4  086B               	movf	_DimmerLights,w
 11617  1FE5  3E08               	addlw	8
 11618  1FE6  0086               	movwf	6
 11619  1FE7  3001               	movlw	1	; select bank2/3
 11620  1FE8  0087               	movwf	7
 11621  1FE9  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11622  1FEA  1081               	bcf	1,1
 11623  1FEB  1D03               	skipz
 11624  1FEC  1481               	bsf	1,1
 11625                           
 11626                           ;Dimmer_B1.c: 596: DimmerLights->TriggerAdj = command;
 11627  1FED  086B               	movf	_DimmerLights,w
 11628  1FEE  3E08               	addlw	8
 11629  1FEF  0086               	movwf	6
 11630  1FF0  3001               	movlw	1	; select bank2/3
 11631  1FF1  0087               	movwf	7
 11632  1FF2  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11633  1FF3  1201               	bcf	1,4
 11634  1FF4  1D03               	skipz
 11635  1FF5  1601               	bsf	1,4
 11636                           
 11637                           ;Dimmer_B1.c: 597: DimmerLights->AdjGo = command;
 11638  1FF6  086B               	movf	_DimmerLights,w
 11639  1FF7  3E08               	addlw	8
 11640  1FF8  0086               	movwf	6
 11641  1FF9  3001               	movlw	1	; select bank2/3
 11642  1FFA  0087               	movwf	7
 11643  1FFB  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11644  1FFC  1181               	bcf	1,3
 11645  1FFD  1D03               	skipz
 11646  1FFE  1581               	bsf	1,3
 11647  1FFF  0008               	return
 11648  2000                     __end_of_setDimmerLights_TriggerERROR:	
 11649                           
 11650                           	psect	text62
 11651  14BD                     __ptext62:	
 11652 ;; *************** function _setDimmerLights_ERROR *****************
 11653 ;; Defined at:
 11654 ;;		line 573 in file "../src/Dimmer_B1.c"
 11655 ;; Parameters:    Size  Location     Type
 11656 ;;  lights          1    wreg     unsigned char 
 11657 ;; Auto vars:     Size  Location     Type
 11658 ;;  lights          1    5[BANK0 ] unsigned char 
 11659 ;; Return value:  Size  Location     Type
 11660 ;;		None               void
 11661 ;; Registers used:
 11662 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11663 ;; Tracked objects:
 11664 ;;		On entry : 0/0
 11665 ;;		On exit  : 0/0
 11666 ;;		Unchanged: 0/0
 11667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11672 ;;Total ram usage:        2 bytes
 11673 ;; Hardware stack levels used:    1
 11674 ;; Hardware stack levels required when called:    7
 11675 ;; This function calls:
 11676 ;;		_DimmerLightsPointSelect
 11677 ;;		_setLED
 11678 ;;		_setLoad_StatusOff
 11679 ;;		_setRFSW_Status
 11680 ;;		_setSw_Status
 11681 ;; This function is called by:
 11682 ;;		_DimmerLights_Exceptions
 11683 ;; This function uses a non-reentrant model
 11684 ;;
 11685                           
 11686                           
 11687                           ;psect for function _setDimmerLights_ERROR
 11688  14BD                     _setDimmerLights_ERROR:	
 11689                           
 11690                           ;incstack = 0
 11691                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11692                           ;setDimmerLights_ERROR@lights stored from wreg
 11693  14BD  0020               	movlb	0	; select bank0
 11694  14BE  00A5               	movwf	setDimmerLights_ERROR@lights
 11695                           
 11696                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(lights);
 11697  14BF  0825               	movf	setDimmerLights_ERROR@lights,w
 11698  14C0  319C  242C  3194   	fcall	_DimmerLightsPointSelect
 11699                           
 11700                           ;Dimmer_B1.c: 575: if (DimmerLights->Status == 1) {
 11701  14C3  0020               	movlb	0	; select bank0
 11702  14C4  086B               	movf	_DimmerLights,w
 11703  14C5  0086               	movwf	6
 11704  14C6  3001               	movlw	1	; select bank2/3
 11705  14C7  0087               	movwf	7
 11706  14C8  1E81               	btfss	1,5
 11707  14C9  0008               	return
 11708                           
 11709                           ;Dimmer_B1.c: 577: DimmerLights->Signal = 0;
 11710  14CA  086B               	movf	_DimmerLights,w
 11711  14CB  0086               	movwf	6
 11712  14CC  3001               	movlw	1	; select bank2/3
 11713  14CD  0087               	movwf	7
 11714  14CE  1081               	bcf	1,1
 11715                           
 11716                           ;Dimmer_B1.c: 578: DimmerLights->AdjFlag = 0;
 11717  14CF  086B               	movf	_DimmerLights,w
 11718  14D0  0086               	movwf	6
 11719  14D1  3001               	movlw	1	; select bank2/3
 11720  14D2  0087               	movwf	7
 11721  14D3  1181               	bcf	1,3
 11722                           
 11723                           ;Dimmer_B1.c: 579: DimmerLights->AdjStatus = 0;
 11724  14D4  086B               	movf	_DimmerLights,w
 11725  14D5  0086               	movwf	6
 11726  14D6  3001               	movlw	1	; select bank2/3
 11727  14D7  0087               	movwf	7
 11728  14D8  1201               	bcf	1,4
 11729                           
 11730                           ;Dimmer_B1.c: 580: DimmerLights->StatusFlag = 0;
 11731  14D9  086B               	movf	_DimmerLights,w
 11732  14DA  0086               	movwf	6
 11733  14DB  3001               	movlw	1	; select bank2/3
 11734  14DC  0087               	movwf	7
 11735  14DD  1301               	bcf	1,6
 11736                           
 11737                           ;Dimmer_B1.c: 581: DimmerLights->DimmingTimeValue = 7;
 11738  14DE  3007               	movlw	7
 11739  14DF  00A4               	movwf	??_setDimmerLights_ERROR
 11740  14E0  086B               	movf	_DimmerLights,w
 11741  14E1  3E02               	addlw	2
 11742  14E2  0086               	movwf	6
 11743  14E3  3001               	movlw	1	; select bank2/3
 11744  14E4  0087               	movwf	7
 11745  14E5  0824               	movf	??_setDimmerLights_ERROR,w
 11746  14E6  0081               	movwf	1
 11747                           
 11748                           ;Dimmer_B1.c: 582: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11749  14E7  086B               	movf	_DimmerLights,w
 11750  14E8  3E06               	addlw	6
 11751  14E9  0086               	movwf	6
 11752  14EA  3001               	movlw	1	; select bank2/3
 11753  14EB  0087               	movwf	7
 11754  14EC  0801               	movf	1,w
 11755  14ED  00A4               	movwf	??_setDimmerLights_ERROR
 11756  14EE  086B               	movf	_DimmerLights,w
 11757  14EF  3E04               	addlw	4
 11758  14F0  0086               	movwf	6
 11759  14F1  3001               	movlw	1	; select bank2/3
 11760  14F2  0087               	movwf	7
 11761  14F3  0824               	movf	??_setDimmerLights_ERROR,w
 11762  14F4  0081               	movwf	1
 11763                           
 11764                           ;Dimmer_B1.c: 583: Dimmer->Detect = 1;
 11765  14F5  0876               	movf	_Dimmer,w
 11766  14F6  0086               	movwf	6
 11767  14F7  3001               	movlw	1	; select bank2/3
 11768  14F8  0087               	movwf	7
 11769  14F9  1401               	bsf	1,0
 11770                           
 11771                           ;Dimmer_B1.c: 584: setLoad_StatusOff(lights, 1);
 11772  14FA  01A0               	clrf	setLoad_StatusOff@command
 11773  14FB  0AA0               	incf	setLoad_StatusOff@command,f
 11774  14FC  0825               	movf	setDimmerLights_ERROR@lights,w
 11775  14FD  319E  260A  3194   	fcall	_setLoad_StatusOff
 11776                           
 11777                           ;Dimmer_B1.c: 585: setLED(lights, 1);
 11778  1500  0020               	movlb	0	; select bank0
 11779  1501  01A2               	clrf	setLED@command
 11780  1502  0AA2               	incf	setLED@command,f
 11781  1503  0825               	movf	setDimmerLights_ERROR@lights,w
 11782  1504  3196  261F  3194   	fcall	_setLED
 11783                           
 11784                           ;Dimmer_B1.c: 586: setSw_Status(lights, 0);
 11785  1507  0020               	movlb	0	; select bank0
 11786  1508  01A2               	clrf	setSw_Status@command
 11787  1509  0825               	movf	setDimmerLights_ERROR@lights,w
 11788  150A  319B  2334  3194   	fcall	_setSw_Status
 11789                           
 11790                           ;Dimmer_B1.c: 587: setRFSW_Status(lights, 0);
 11791  150D  0020               	movlb	0	; select bank0
 11792  150E  01A2               	clrf	setRFSW_Status@command
 11793  150F  0825               	movf	setDimmerLights_ERROR@lights,w
 11794  1510  319B  230A         	fcall	_setRFSW_Status
 11795  1512  0008               	return
 11796  1513                     __end_of_setDimmerLights_ERROR:	
 11797                           
 11798                           	psect	text63
 11799  1B81                     __ptext63:	
 11800 ;; *************** function _setDimmerLights_Clear *****************
 11801 ;; Defined at:
 11802 ;;		line 726 in file "../src/Dimmer_B1.c"
 11803 ;; Parameters:    Size  Location     Type
 11804 ;;  lights          1    wreg     unsigned char 
 11805 ;;  command         1    2[BANK0 ] unsigned char 
 11806 ;; Auto vars:     Size  Location     Type
 11807 ;;  lights          1    3[BANK0 ] unsigned char 
 11808 ;; Return value:  Size  Location     Type
 11809 ;;		None               void
 11810 ;; Registers used:
 11811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11812 ;; Tracked objects:
 11813 ;;		On entry : 0/0
 11814 ;;		On exit  : 0/0
 11815 ;;		Unchanged: 0/0
 11816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11817 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;Total ram usage:        2 bytes
 11822 ;; Hardware stack levels used:    1
 11823 ;; Hardware stack levels required when called:    6
 11824 ;; This function calls:
 11825 ;;		_DimmerLightsPointSelect
 11826 ;; This function is called by:
 11827 ;;		_Load_Main
 11828 ;; This function uses a non-reentrant model
 11829 ;;
 11830                           
 11831                           
 11832                           ;psect for function _setDimmerLights_Clear
 11833  1B81                     _setDimmerLights_Clear:	
 11834                           
 11835                           ;incstack = 0
 11836                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11837                           ;setDimmerLights_Clear@lights stored from wreg
 11838  1B81  0020               	movlb	0	; select bank0
 11839  1B82  00A3               	movwf	setDimmerLights_Clear@lights
 11840                           
 11841                           ;Dimmer_B1.c: 728: DimmerLightsPointSelect(lights);
 11842  1B83  0823               	movf	setDimmerLights_Clear@lights,w
 11843  1B84  319C  242C         	fcall	_DimmerLightsPointSelect
 11844                           
 11845                           ;Dimmer_B1.c: 729: DimmerLights->Clear = command;
 11846  1B86  0020               	movlb	0	; select bank0
 11847  1B87  086B               	movf	_DimmerLights,w
 11848  1B88  3E09               	addlw	9
 11849  1B89  0086               	movwf	6
 11850  1B8A  3001               	movlw	1	; select bank2/3
 11851  1B8B  0087               	movwf	7
 11852  1B8C  0822               	movf	setDimmerLights_Clear@command,w
 11853  1B8D  1101               	bcf	1,2
 11854  1B8E  1D03               	skipz
 11855  1B8F  1501               	bsf	1,2
 11856  1B90  0008               	return
 11857  1B91                     __end_of_setDimmerLights_Clear:	
 11858                           
 11859                           	psect	text64
 11860  1A39                     __ptext64:	
 11861 ;; *************** function _getTemp_Safe *****************
 11862 ;; Defined at:
 11863 ;;		line 21 in file "../src/OverTemperature_B1.c"
 11864 ;; Parameters:    Size  Location     Type
 11865 ;;		None
 11866 ;; Auto vars:     Size  Location     Type
 11867 ;;  result          1    0[BANK0 ] unsigned char 
 11868 ;; Return value:  Size  Location     Type
 11869 ;;                  1    wreg      unsigned char 
 11870 ;; Registers used:
 11871 ;;		wreg, status,2
 11872 ;; Tracked objects:
 11873 ;;		On entry : 0/0
 11874 ;;		On exit  : 0/0
 11875 ;;		Unchanged: 0/0
 11876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11878 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11880 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11881 ;;Total ram usage:        1 bytes
 11882 ;; Hardware stack levels used:    1
 11883 ;; Hardware stack levels required when called:    5
 11884 ;; This function calls:
 11885 ;;		Nothing
 11886 ;; This function is called by:
 11887 ;;		_Load_Main
 11888 ;; This function uses a non-reentrant model
 11889 ;;
 11890                           
 11891                           
 11892                           ;psect for function _getTemp_Safe
 11893  1A39                     _getTemp_Safe:	
 11894                           
 11895                           ;OverTemperature_B1.c: 22: char result = Temp1.Safe;
 11896                           
 11897                           ;incstack = 0
 11898                           ; Regs used in _getTemp_Safe: [wreg+status,2]
 11899  1A39  3000               	movlw	0
 11900  1A3A  0021               	movlb	1	; select bank1
 11901  1A3B  1A5C               	btfsc	_Temp1^(0+128),4
 11902  1A3C  3001               	movlw	1
 11903  1A3D  0020               	movlb	0	; select bank0
 11904  1A3E  00A0               	movwf	getTemp_Safe@result
 11905                           
 11906                           ;OverTemperature_B1.c: 23: return result;
 11907  1A3F  0820               	movf	getTemp_Safe@result,w
 11908  1A40  0008               	return
 11909  1A41                     __end_of_getTemp_Safe:	
 11910                           
 11911                           	psect	text65
 11912  1DCD                     __ptext65:	
 11913 ;; *************** function ___wmul *****************
 11914 ;; Defined at:
 11915 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11916 ;; Parameters:    Size  Location     Type
 11917 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11918 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11919 ;; Auto vars:     Size  Location     Type
 11920 ;;  product         2    4[BANK0 ] unsigned int 
 11921 ;; Return value:  Size  Location     Type
 11922 ;;                  2    0[BANK0 ] unsigned int 
 11923 ;; Registers used:
 11924 ;;		wreg, status,2, status,0
 11925 ;; Tracked objects:
 11926 ;;		On entry : 0/0
 11927 ;;		On exit  : 0/0
 11928 ;;		Unchanged: 0/0
 11929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11930 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11933 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11934 ;;Total ram usage:        6 bytes
 11935 ;; Hardware stack levels used:    1
 11936 ;; Hardware stack levels required when called:    5
 11937 ;; This function calls:
 11938 ;;		Nothing
 11939 ;; This function is called by:
 11940 ;;		_Load_Main
 11941 ;; This function uses a non-reentrant model
 11942 ;;
 11943                           
 11944                           
 11945                           ;psect for function ___wmul
 11946  1DCD                     ___wmul:	
 11947                           
 11948                           ;incstack = 0
 11949                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11950  1DCD  0020               	movlb	0	; select bank0
 11951  1DCE  01A4               	clrf	___wmul@product
 11952  1DCF  01A5               	clrf	___wmul@product+1
 11953  1DD0                     l10154:	
 11954  1DD0  1C20               	btfss	___wmul@multiplier,0
 11955  1DD1  2DD6               	goto	l2869
 11956  1DD2  0822               	movf	___wmul@multiplicand,w
 11957  1DD3  07A4               	addwf	___wmul@product,f
 11958  1DD4  0823               	movf	___wmul@multiplicand+1,w
 11959  1DD5  3DA5               	addwfc	___wmul@product+1,f
 11960  1DD6                     l2869:	
 11961  1DD6  3001               	movlw	1
 11962  1DD7                     u10885:	
 11963  1DD7  35A2               	lslf	___wmul@multiplicand,f
 11964  1DD8  0DA3               	rlf	___wmul@multiplicand+1,f
 11965  1DD9  0B89               	decfsz	9,f
 11966  1DDA  2DD7               	goto	u10885
 11967  1DDB  3001               	movlw	1
 11968  1DDC                     u10895:	
 11969  1DDC  36A1               	lsrf	___wmul@multiplier+1,f
 11970  1DDD  0CA0               	rrf	___wmul@multiplier,f
 11971  1DDE  0B89               	decfsz	9,f
 11972  1DDF  2DDC               	goto	u10895
 11973  1DE0  0821               	movf	___wmul@multiplier+1,w
 11974  1DE1  0420               	iorwf	___wmul@multiplier,w
 11975  1DE2  1D03               	skipz
 11976  1DE3  2DD0               	goto	l10154
 11977  1DE4  0825               	movf	___wmul@product+1,w
 11978  1DE5  01A1               	clrf	?___wmul+1
 11979  1DE6  07A1               	addwf	?___wmul+1,f
 11980  1DE7  0824               	movf	___wmul@product,w
 11981  1DE8  01A0               	clrf	?___wmul
 11982  1DE9  07A0               	addwf	?___wmul,f
 11983  1DEA  0008               	return
 11984  1DEB                     __end_of___wmul:	
 11985                           
 11986                           	psect	text66
 11987  1194                     __ptext66:	
 11988 ;; *************** function ___lwdiv *****************
 11989 ;; Defined at:
 11990 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11991 ;; Parameters:    Size  Location     Type
 11992 ;;  divisor         2    0[BANK0 ] unsigned int 
 11993 ;;  dividend        2    2[BANK0 ] unsigned int 
 11994 ;; Auto vars:     Size  Location     Type
 11995 ;;  quotient        2    6[BANK0 ] unsigned int 
 11996 ;;  counter         1    5[BANK0 ] unsigned char 
 11997 ;; Return value:  Size  Location     Type
 11998 ;;                  2    0[BANK0 ] unsigned int 
 11999 ;; Registers used:
 12000 ;;		wreg, status,2, status,0
 12001 ;; Tracked objects:
 12002 ;;		On entry : 0/0
 12003 ;;		On exit  : 0/0
 12004 ;;		Unchanged: 0/0
 12005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12006 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;Total ram usage:        8 bytes
 12011 ;; Hardware stack levels used:    1
 12012 ;; Hardware stack levels required when called:    5
 12013 ;; This function calls:
 12014 ;;		Nothing
 12015 ;; This function is called by:
 12016 ;;		_Load_Main
 12017 ;; This function uses a non-reentrant model
 12018 ;;
 12019                           
 12020                           
 12021                           ;psect for function ___lwdiv
 12022  1194                     ___lwdiv:	
 12023                           
 12024                           ;incstack = 0
 12025                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12026  1194  0020               	movlb	0	; select bank0
 12027  1195  01A6               	clrf	___lwdiv@quotient
 12028  1196  01A7               	clrf	___lwdiv@quotient+1
 12029  1197  0821               	movf	___lwdiv@divisor+1,w
 12030  1198  0420               	iorwf	___lwdiv@divisor,w
 12031  1199  1903               	skipnz
 12032  119A  29C4               	goto	l10186
 12033  119B  01A5               	clrf	___lwdiv@counter
 12034  119C  0AA5               	incf	___lwdiv@counter,f
 12035  119D                     l10174:	
 12036  119D  1BA1               	btfsc	___lwdiv@divisor+1,7
 12037  119E  29A9               	goto	l10176
 12038  119F  3001               	movlw	1
 12039  11A0                     u10925:	
 12040  11A0  35A0               	lslf	___lwdiv@divisor,f
 12041  11A1  0DA1               	rlf	___lwdiv@divisor+1,f
 12042  11A2  0B89               	decfsz	9,f
 12043  11A3  29A0               	goto	u10925
 12044  11A4  3001               	movlw	1
 12045  11A5  00A4               	movwf	??___lwdiv
 12046  11A6  0824               	movf	??___lwdiv,w
 12047  11A7  07A5               	addwf	___lwdiv@counter,f
 12048  11A8  299D               	goto	l10174
 12049  11A9                     l10176:	
 12050  11A9  3001               	movlw	1
 12051  11AA                     u10945:	
 12052  11AA  35A6               	lslf	___lwdiv@quotient,f
 12053  11AB  0DA7               	rlf	___lwdiv@quotient+1,f
 12054  11AC  0B89               	decfsz	9,f
 12055  11AD  29AA               	goto	u10945
 12056  11AE  0821               	movf	___lwdiv@divisor+1,w
 12057  11AF  0223               	subwf	___lwdiv@dividend+1,w
 12058  11B0  1D03               	skipz
 12059  11B1  29B4               	goto	u10955
 12060  11B2  0820               	movf	___lwdiv@divisor,w
 12061  11B3  0222               	subwf	___lwdiv@dividend,w
 12062  11B4                     u10955:	
 12063  11B4  1C03               	skipc
 12064  11B5  29BB               	goto	l10182
 12065  11B6  0820               	movf	___lwdiv@divisor,w
 12066  11B7  02A2               	subwf	___lwdiv@dividend,f
 12067  11B8  0821               	movf	___lwdiv@divisor+1,w
 12068  11B9  3BA3               	subwfb	___lwdiv@dividend+1,f
 12069  11BA  1426               	bsf	___lwdiv@quotient,0
 12070  11BB                     l10182:	
 12071  11BB  3001               	movlw	1
 12072  11BC                     u10965:	
 12073  11BC  36A1               	lsrf	___lwdiv@divisor+1,f
 12074  11BD  0CA0               	rrf	___lwdiv@divisor,f
 12075  11BE  0B89               	decfsz	9,f
 12076  11BF  29BC               	goto	u10965
 12077  11C0  3001               	movlw	1
 12078  11C1  02A5               	subwf	___lwdiv@counter,f
 12079  11C2  1D03               	btfss	3,2
 12080  11C3  29A9               	goto	l10176
 12081  11C4                     l10186:	
 12082  11C4  0827               	movf	___lwdiv@quotient+1,w
 12083  11C5  01A1               	clrf	?___lwdiv+1
 12084  11C6  07A1               	addwf	?___lwdiv+1,f
 12085  11C7  0826               	movf	___lwdiv@quotient,w
 12086  11C8  01A0               	clrf	?___lwdiv
 12087  11C9  07A0               	addwf	?___lwdiv,f
 12088  11CA  0008               	return
 12089  11CB                     __end_of___lwdiv:	
 12090                           
 12091                           	psect	text67
 12092  1066                     __ptext67:	
 12093 ;; *************** function _Load_Initialization *****************
 12094 ;; Defined at:
 12095 ;;		line 9 in file "../src/OverLoad_B1.c"
 12096 ;; Parameters:    Size  Location     Type
 12097 ;;		None
 12098 ;; Auto vars:     Size  Location     Type
 12099 ;;		None
 12100 ;; Return value:  Size  Location     Type
 12101 ;;		None               void
 12102 ;; Registers used:
 12103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12104 ;; Tracked objects:
 12105 ;;		On entry : 0/0
 12106 ;;		On exit  : 0/0
 12107 ;;		Unchanged: 0/0
 12108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;Total ram usage:        0 bytes
 12114 ;; Hardware stack levels used:    1
 12115 ;; Hardware stack levels required when called:    6
 12116 ;; This function calls:
 12117 ;;		_setLoad_AH_AL_Restore
 12118 ;; This function is called by:
 12119 ;;		_main
 12120 ;; This function uses a non-reentrant model
 12121 ;;
 12122                           
 12123                           
 12124                           ;psect for function _Load_Initialization
 12125  1066                     _Load_Initialization:	
 12126                           
 12127                           ;OverLoad_B1.c: 10: Load1.Safe = 1;
 12128                           
 12129                           ;incstack = 0
 12130                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12131  1066  0023               	movlb	3	; select bank3
 12132  1067  15A0               	bsf	_Load1^(0+384),3
 12133                           
 12134                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12135  1068  319D  2578         	fcall	_setLoad_AH_AL_Restore
 12136  106A  0008               	return
 12137  106B                     __end_of_Load_Initialization:	
 12138                           
 12139                           	psect	text68
 12140  1D78                     __ptext68:	
 12141 ;; *************** function _setLoad_AH_AL_Restore *****************
 12142 ;; Defined at:
 12143 ;;		line 307 in file "../src/OverLoad_B1.c"
 12144 ;; Parameters:    Size  Location     Type
 12145 ;;		None
 12146 ;; Auto vars:     Size  Location     Type
 12147 ;;  i               1    1[BANK0 ] unsigned char 
 12148 ;; Return value:  Size  Location     Type
 12149 ;;		None               void
 12150 ;; Registers used:
 12151 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12152 ;; Tracked objects:
 12153 ;;		On entry : 0/0
 12154 ;;		On exit  : 0/0
 12155 ;;		Unchanged: 0/0
 12156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12160 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12161 ;;Total ram usage:        2 bytes
 12162 ;; Hardware stack levels used:    1
 12163 ;; Hardware stack levels required when called:    5
 12164 ;; This function calls:
 12165 ;;		Nothing
 12166 ;; This function is called by:
 12167 ;;		_Load_Initialization
 12168 ;;		_Load_Main
 12169 ;; This function uses a non-reentrant model
 12170 ;;
 12171                           
 12172                           
 12173                           ;psect for function _setLoad_AH_AL_Restore
 12174  1D78                     _setLoad_AH_AL_Restore:	
 12175                           
 12176                           ;OverLoad_B1.c: 308: char i;
 12177                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 12178                           
 12179                           ;incstack = 0
 12180                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12181  1D78  0020               	movlb	0	; select bank0
 12182  1D79  01A1               	clrf	setLoad_AH_AL_Restore@i
 12183  1D7A                     L8:	
 12184  1D7A  3005               	movlw	5
 12185  1D7B  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12186  1D7C  1803               	btfsc	3,0
 12187  1D7D  0008               	return
 12188                           
 12189                           ;OverLoad_B1.c: 310: Load1.AH[i] = 0;
 12190  1D7E  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12191  1D7F  3EA8               	addlw	(_Load1+8)& (0+255)
 12192  1D80  0086               	movwf	6
 12193  1D81  3001               	movlw	1	; select bank3/4
 12194  1D82  0087               	movwf	7
 12195  1D83  3000               	movlw	0
 12196  1D84  3FC0               	movwi [0]fsr1
 12197  1D85  3FC1               	movwi [1]fsr1
 12198                           
 12199                           ;OverLoad_B1.c: 311: Load1.AL[i] = 0xffff;
 12200  1D86  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12201  1D87  3EBA               	addlw	(_Load1+26)& (0+255)
 12202  1D88  0086               	movwf	6
 12203  1D89  3001               	movlw	1	; select bank3/4
 12204  1D8A  0087               	movwf	7
 12205  1D8B  30FF               	movlw	255
 12206  1D8C  3FC0               	movwi [0]fsr1
 12207  1D8D  30FF               	movlw	255
 12208  1D8E  3FC1               	movwi [1]fsr1
 12209  1D8F  3001               	movlw	1
 12210  1D90  00A0               	movwf	??_setLoad_AH_AL_Restore
 12211  1D91  0820               	movf	??_setLoad_AH_AL_Restore,w
 12212  1D92  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12213  1D93  2D7A               	goto	L8
 12214  1D94                     __end_of_setLoad_AH_AL_Restore:	
 12215                           
 12216                           	psect	text69
 12217  1ACB                     __ptext69:	
 12218 ;; *************** function _LED_Main *****************
 12219 ;; Defined at:
 12220 ;;		line 47 in file "../src/LED_B1.c"
 12221 ;; Parameters:    Size  Location     Type
 12222 ;;		None
 12223 ;; Auto vars:     Size  Location     Type
 12224 ;;		None
 12225 ;; Return value:  Size  Location     Type
 12226 ;;		None               void
 12227 ;; Registers used:
 12228 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12229 ;; Tracked objects:
 12230 ;;		On entry : 0/0
 12231 ;;		On exit  : 0/0
 12232 ;;		Unchanged: 0/0
 12233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12238 ;;Total ram usage:        0 bytes
 12239 ;; Hardware stack levels used:    1
 12240 ;; Hardware stack levels required when called:    7
 12241 ;; This function calls:
 12242 ;;		_setLED_Main
 12243 ;; This function is called by:
 12244 ;;		_main
 12245 ;; This function uses a non-reentrant model
 12246 ;;
 12247                           
 12248                           
 12249                           ;psect for function _LED_Main
 12250  1ACB                     _LED_Main:	
 12251                           
 12252                           ;LED_B1.c: 49: setLED_Main(1);
 12253                           
 12254                           ;incstack = 0
 12255                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12256  1ACB  3001               	movlw	1
 12257  1ACC  3192  227C  319A   	fcall	_setLED_Main
 12258                           
 12259                           ;LED_B1.c: 52: setLED_Main(2);
 12260  1ACF  3002               	movlw	2
 12261  1AD0  3192  227C  319A   	fcall	_setLED_Main
 12262                           
 12263                           ;LED_B1.c: 58: setLED_Main(99);
 12264  1AD3  3063               	movlw	99
 12265  1AD4  3192  227C         	fcall	_setLED_Main
 12266  1AD6  0008               	return
 12267  1AD7                     __end_of_LED_Main:	
 12268                           
 12269                           	psect	text70
 12270  127C                     __ptext70:	
 12271 ;; *************** function _setLED_Main *****************
 12272 ;; Defined at:
 12273 ;;		line 192 in file "../src/LED_B1.c"
 12274 ;; Parameters:    Size  Location     Type
 12275 ;;  led             1    wreg     unsigned char 
 12276 ;; Auto vars:     Size  Location     Type
 12277 ;;  led             1    4[BANK0 ] unsigned char 
 12278 ;; Return value:  Size  Location     Type
 12279 ;;		None               void
 12280 ;; Registers used:
 12281 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12282 ;; Tracked objects:
 12283 ;;		On entry : 0/0
 12284 ;;		On exit  : 0/0
 12285 ;;		Unchanged: 0/0
 12286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12289 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;Total ram usage:        3 bytes
 12292 ;; Hardware stack levels used:    1
 12293 ;; Hardware stack levels required when called:    6
 12294 ;; This function calls:
 12295 ;;		_LedPointSelect
 12296 ;; This function is called by:
 12297 ;;		_LED_Main
 12298 ;; This function uses a non-reentrant model
 12299 ;;
 12300                           
 12301                           
 12302                           ;psect for function _setLED_Main
 12303  127C                     _setLED_Main:	
 12304                           
 12305                           ;incstack = 0
 12306                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12307                           ;setLED_Main@led stored from wreg
 12308  127C  0020               	movlb	0	; select bank0
 12309  127D  00A4               	movwf	setLED_Main@led
 12310                           
 12311                           ;LED_B1.c: 193: LedPointSelect(led);
 12312  127E  0824               	movf	setLED_Main@led,w
 12313  127F  319D  25B0  3192   	fcall	_LedPointSelect
 12314                           
 12315                           ;LED_B1.c: 194: if (LED->GO == 1) {
 12316  1282  0878               	movf	_LED,w
 12317  1283  0086               	movwf	6
 12318  1284  3001               	movlw	1	; select bank2/3
 12319  1285  0087               	movwf	7
 12320  1286  1C81               	btfss	1,1
 12321  1287  0008               	return
 12322                           
 12323                           ;LED_B1.c: 195: LED->Time++;
 12324  1288  0A78               	incf	_LED,w
 12325  1289  0086               	movwf	6
 12326  128A  3001               	movlw	1	; select bank2/3
 12327  128B  0087               	movwf	7
 12328  128C  3001               	movlw	1
 12329  128D  0781               	addwf	1,f
 12330  128E  3141               	addfsr 1,1
 12331  128F  1803               	skipnc
 12332  1290  0A81               	incf	1,f
 12333                           
 12334                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 12335  1291  0A78               	incf	_LED,w
 12336  1292  0086               	movwf	6
 12337  1293  3001               	movlw	1	; select bank2/3
 12338  1294  0087               	movwf	7
 12339  1295  3F40               	moviw [0]fsr1
 12340  1296  0020               	movlb	0	; select bank0
 12341  1297  00A2               	movwf	??_setLED_Main
 12342  1298  3F41               	moviw [1]fsr1
 12343  1299  00A3               	movwf	??_setLED_Main+1
 12344  129A  3000               	movlw	0
 12345  129B  0223               	subwf	??_setLED_Main+1,w
 12346  129C  3032               	movlw	50
 12347  129D  1903               	skipnz
 12348  129E  0222               	subwf	??_setLED_Main,w
 12349  129F  1C03               	skipc
 12350  12A0  0008               	return
 12351                           
 12352                           ;LED_B1.c: 197: LED->Time = 0;
 12353  12A1  0A78               	incf	_LED,w
 12354  12A2  0086               	movwf	6
 12355  12A3  3001               	movlw	1	; select bank2/3
 12356  12A4  0087               	movwf	7
 12357  12A5  3000               	movlw	0
 12358  12A6  3FC0               	movwi [0]fsr1
 12359  12A7  3FC1               	movwi [1]fsr1
 12360                           
 12361                           ;LED_B1.c: 199: if (led == 1) {
 12362  12A8  0824               	movf	setLED_Main@led,w
 12363  12A9  3A01               	xorlw	1
 12364  12AA  1D03               	skipz
 12365  12AB  2AAF               	goto	l9740
 12366                           
 12367                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 12368  12AC  3008               	movlw	8
 12369  12AD  068C               	xorwf	12,f
 12370                           
 12371                           ;LED_B1.c: 201: }
 12372  12AE  0008               	return
 12373  12AF                     l9740:	
 12374                           
 12375                           ;LED_B1.c: 204: else if (led == 2) {
 12376  12AF  0824               	movf	setLED_Main@led,w
 12377  12B0  3A02               	xorlw	2
 12378  12B1  1D03               	skipz
 12379  12B2  2AB6               	goto	l9744
 12380                           
 12381                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 12382  12B3  3080               	movlw	128
 12383  12B4  068E               	xorwf	14,f
 12384                           
 12385                           ;LED_B1.c: 206: }
 12386  12B5  0008               	return
 12387  12B6                     l9744:	
 12388                           
 12389                           ;LED_B1.c: 214: else if (led == 99) {
 12390  12B6  0824               	movf	setLED_Main@led,w
 12391  12B7  3A63               	xorlw	99
 12392  12B8  1D03               	skipz
 12393  12B9  0008               	return
 12394                           
 12395                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 12396  12BA  3020               	movlw	32
 12397  12BB  068D               	xorwf	13,f
 12398  12BC  0008               	return
 12399  12BD                     __end_of_setLED_Main:	
 12400                           
 12401                           	psect	text71
 12402  1ABF                     __ptext71:	
 12403 ;; *************** function _LED_Initialization *****************
 12404 ;; Defined at:
 12405 ;;		line 31 in file "../src/LED_B1.c"
 12406 ;; Parameters:    Size  Location     Type
 12407 ;;		None
 12408 ;; Auto vars:     Size  Location     Type
 12409 ;;		None
 12410 ;; Return value:  Size  Location     Type
 12411 ;;		None               void
 12412 ;; Registers used:
 12413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12414 ;; Tracked objects:
 12415 ;;		On entry : 0/0
 12416 ;;		On exit  : 0/0
 12417 ;;		Unchanged: 0/0
 12418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;Total ram usage:        0 bytes
 12424 ;; Hardware stack levels used:    1
 12425 ;; Hardware stack levels required when called:    8
 12426 ;; This function calls:
 12427 ;;		_setLED_Initialization
 12428 ;; This function is called by:
 12429 ;;		_main
 12430 ;; This function uses a non-reentrant model
 12431 ;;
 12432                           
 12433                           
 12434                           ;psect for function _LED_Initialization
 12435  1ABF                     _LED_Initialization:	
 12436                           
 12437                           ;LED_B1.c: 33: setLED_Initialization(1);
 12438                           
 12439                           ;incstack = 0
 12440                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12441  1ABF  3001               	movlw	1
 12442  1AC0  319B  23C2  319A   	fcall	_setLED_Initialization
 12443                           
 12444                           ;LED_B1.c: 36: setLED_Initialization(2);
 12445  1AC3  3002               	movlw	2
 12446  1AC4  319B  23C2  319A   	fcall	_setLED_Initialization
 12447                           
 12448                           ;LED_B1.c: 42: setLED_Initialization(99);
 12449  1AC7  3063               	movlw	99
 12450  1AC8  319B  23C2         	fcall	_setLED_Initialization
 12451  1ACA  0008               	return
 12452  1ACB                     __end_of_LED_Initialization:	
 12453                           
 12454                           	psect	text72
 12455  1BC2                     __ptext72:	
 12456 ;; *************** function _setLED_Initialization *****************
 12457 ;; Defined at:
 12458 ;;		line 63 in file "../src/LED_B1.c"
 12459 ;; Parameters:    Size  Location     Type
 12460 ;;  led             1    wreg     unsigned char 
 12461 ;; Auto vars:     Size  Location     Type
 12462 ;;  led             1    4[BANK0 ] unsigned char 
 12463 ;; Return value:  Size  Location     Type
 12464 ;;		None               void
 12465 ;; Registers used:
 12466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12467 ;; Tracked objects:
 12468 ;;		On entry : 0/0
 12469 ;;		On exit  : 0/0
 12470 ;;		Unchanged: 0/0
 12471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12475 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12476 ;;Total ram usage:        1 bytes
 12477 ;; Hardware stack levels used:    1
 12478 ;; Hardware stack levels required when called:    7
 12479 ;; This function calls:
 12480 ;;		_LedPointSelect
 12481 ;;		_setLED
 12482 ;; This function is called by:
 12483 ;;		_LED_Initialization
 12484 ;; This function uses a non-reentrant model
 12485 ;;
 12486                           
 12487                           
 12488                           ;psect for function _setLED_Initialization
 12489  1BC2                     _setLED_Initialization:	
 12490                           
 12491                           ;incstack = 0
 12492                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12493                           ;setLED_Initialization@led stored from wreg
 12494  1BC2  0020               	movlb	0	; select bank0
 12495  1BC3  00A4               	movwf	setLED_Initialization@led
 12496                           
 12497                           ;LED_B1.c: 64: LedPointSelect(led);
 12498  1BC4  0824               	movf	setLED_Initialization@led,w
 12499  1BC5  319D  25B0  319B   	fcall	_LedPointSelect
 12500                           
 12501                           ;LED_B1.c: 65: LED->Enable = 1;
 12502  1BC8  0878               	movf	_LED,w
 12503  1BC9  0086               	movwf	6
 12504  1BCA  3001               	movlw	1	; select bank2/3
 12505  1BCB  0087               	movwf	7
 12506  1BCC  1401               	bsf	1,0
 12507                           
 12508                           ;LED_B1.c: 66: setLED(led, 0);
 12509  1BCD  0020               	movlb	0	; select bank0
 12510  1BCE  01A2               	clrf	setLED@command
 12511  1BCF  0824               	movf	setLED_Initialization@led,w
 12512  1BD0  3196  261F         	fcall	_setLED
 12513  1BD2  0008               	return
 12514  1BD3                     __end_of_setLED_Initialization:	
 12515                           
 12516                           	psect	text73
 12517  1E29                     __ptext73:	
 12518 ;; *************** function _Flash_Memory_Main *****************
 12519 ;; Defined at:
 12520 ;;		line 900 in file "../src/MCU_B1.c"
 12521 ;; Parameters:    Size  Location     Type
 12522 ;;		None
 12523 ;; Auto vars:     Size  Location     Type
 12524 ;;		None
 12525 ;; Return value:  Size  Location     Type
 12526 ;;		None               void
 12527 ;; Registers used:
 12528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12529 ;; Tracked objects:
 12530 ;;		On entry : 0/0
 12531 ;;		On exit  : 0/0
 12532 ;;		Unchanged: 0/0
 12533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;Total ram usage:        0 bytes
 12539 ;; Hardware stack levels used:    1
 12540 ;; Hardware stack levels required when called:    8
 12541 ;; This function calls:
 12542 ;;		_Flash_Memory_Modify
 12543 ;; This function is called by:
 12544 ;;		_main
 12545 ;; This function uses a non-reentrant model
 12546 ;;
 12547                           
 12548                           
 12549                           ;psect for function _Flash_Memory_Main
 12550  1E29                     _Flash_Memory_Main:	
 12551                           
 12552                           ;MCU_B1.c: 901: if (Memory.GO == 1) {
 12553                           
 12554                           ;incstack = 0
 12555                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12556  1E29  0024               	movlb	4	; select bank4
 12557  1E2A  1CC4               	btfss	(_Memory^(0+512)+36),1
 12558  1E2B  0008               	return
 12559                           
 12560                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 12561  1E2C  1C44               	btfss	(_Memory^(0+512)+36),0
 12562  1E2D  2E46               	goto	l1349
 12563                           
 12564                           ;MCU_B1.c: 903: Memory.Time++;
 12565  1E2E  3001               	movlw	1
 12566  1E2F  07C2               	addwf	(_Memory^(0+512)+34),f
 12567  1E30  3000               	movlw	0
 12568  1E31  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12569                           
 12570                           ;MCU_B1.c: 904: if (Memory.Time == 25)
 12571  1E32  3022               	movlw	34
 12572  1E33  3E20               	addlw	_Memory& (0+255)
 12573  1E34  0086               	movwf	6
 12574  1E35  3002               	movlw	2	; select bank4/5
 12575  1E36  0087               	movwf	7
 12576  1E37  3F40               	moviw [0]fsr1
 12577  1E38  3A19               	xorlw	25
 12578  1E39  1D03               	skipz
 12579  1E3A  2E3D               	goto	u11115
 12580  1E3B  3F41               	moviw [1]fsr1
 12581  1E3C  3A00               	xorlw	0
 12582  1E3D                     u11115:	
 12583  1E3D  1D03               	skipz
 12584  1E3E  0008               	return
 12585                           
 12586                           ;MCU_B1.c: 905: {
 12587                           ;MCU_B1.c: 906: Memory.Time = 0;
 12588  1E3F  01C2               	clrf	(_Memory^(0+512)+34)
 12589  1E40  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12590                           
 12591                           ;MCU_B1.c: 907: Memory.Modify = 0;
 12592  1E41  1044               	bcf	(_Memory^(0+512)+36),0
 12593                           
 12594                           ;MCU_B1.c: 908: Memory.GO = 0;
 12595  1E42  10C4               	bcf	(_Memory^(0+512)+36),1
 12596                           
 12597                           ;MCU_B1.c: 909: Flash_Memory_Modify();
 12598  1E43  3193  2344         	fcall	_Flash_Memory_Modify
 12599                           
 12600                           ;MCU_B1.c: 910: }
 12601                           ;MCU_B1.c: 911: } else {
 12602  1E45  0008               	return
 12603  1E46                     l1349:	
 12604                           
 12605                           ;MCU_B1.c: 912: Memory.GO = 0;
 12606  1E46  10C4               	bcf	(_Memory^(0+512)+36),1
 12607  1E47  0008               	return
 12608  1E48                     __end_of_Flash_Memory_Main:	
 12609                           
 12610                           	psect	text74
 12611  1344                     __ptext74:	
 12612 ;; *************** function _Flash_Memory_Modify *****************
 12613 ;; Defined at:
 12614 ;;		line 969 in file "../src/MCU_B1.c"
 12615 ;; Parameters:    Size  Location     Type
 12616 ;;		None
 12617 ;; Auto vars:     Size  Location     Type
 12618 ;;  i               1    5[BANK0 ] unsigned char 
 12619 ;; Return value:  Size  Location     Type
 12620 ;;		None               void
 12621 ;; Registers used:
 12622 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12623 ;; Tracked objects:
 12624 ;;		On entry : 0/0
 12625 ;;		On exit  : 0/0
 12626 ;;		Unchanged: 0/0
 12627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12631 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12632 ;;Total ram usage:        2 bytes
 12633 ;; Hardware stack levels used:    1
 12634 ;; Hardware stack levels required when called:    7
 12635 ;; This function calls:
 12636 ;;		_Flash_Memory_Erasing
 12637 ;;		_Flash_Memory_Read
 12638 ;;		_Flash_Memory_Write
 12639 ;; This function is called by:
 12640 ;;		_Flash_Memory_Main
 12641 ;; This function uses a non-reentrant model
 12642 ;;
 12643                           
 12644                           
 12645                           ;psect for function _Flash_Memory_Modify
 12646  1344                     _Flash_Memory_Modify:	
 12647                           
 12648                           ;MCU_B1.c: 970: char i = 0;
 12649                           
 12650                           ;incstack = 0
 12651                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12652  1344  0020               	movlb	0	; select bank0
 12653  1345  01A5               	clrf	Flash_Memory_Modify@i
 12654                           
 12655                           ;MCU_B1.c: 971: for (i = 0; i < 32; i++) {
 12656  1346  01A5               	clrf	Flash_Memory_Modify@i
 12657  1347  3020               	movlw	32
 12658  1348  0225               	subwf	Flash_Memory_Modify@i,w
 12659  1349  1803               	btfsc	3,0
 12660  134A  2B60               	goto	l9824
 12661  134B                     l9818:	
 12662                           
 12663                           ;MCU_B1.c: 972: Memory.Data[i] = Flash_Memory_Read(i);
 12664  134B  0825               	movf	Flash_Memory_Modify@i,w
 12665  134C  319D  255E  3193   	fcall	_Flash_Memory_Read
 12666  134F  0020               	movlb	0	; select bank0
 12667  1350  00A4               	movwf	??_Flash_Memory_Modify
 12668  1351  0825               	movf	Flash_Memory_Modify@i,w
 12669  1352  3E20               	addlw	_Memory& (0+255)
 12670  1353  0086               	movwf	6
 12671  1354  3002               	movlw	2	; select bank4/5
 12672  1355  0087               	movwf	7
 12673  1356  0824               	movf	??_Flash_Memory_Modify,w
 12674  1357  0081               	movwf	1
 12675  1358  3001               	movlw	1
 12676  1359  00A4               	movwf	??_Flash_Memory_Modify
 12677  135A  0824               	movf	??_Flash_Memory_Modify,w
 12678  135B  07A5               	addwf	Flash_Memory_Modify@i,f
 12679  135C  3020               	movlw	32
 12680  135D  0225               	subwf	Flash_Memory_Modify@i,w
 12681  135E  1C03               	skipc
 12682  135F  2B4B               	goto	l9818
 12683  1360                     l9824:	
 12684                           
 12685                           ;MCU_B1.c: 973: }
 12686                           ;MCU_B1.c: 974: Memory.Data[0]=product->Data[12];
 12687  1360  086D               	movf	_product,w
 12688  1361  0086               	movwf	6
 12689  1362  3002               	movlw	2	; select bank4/5
 12690  1363  0087               	movwf	7
 12691  1364  3002               	movlw	2	; select bank4/5
 12692  1365  3F4C               	moviw [12]fsr1
 12693  1366  0024               	movlb	4	; select bank4
 12694  1367  00A0               	movwf	_Memory^(0+512)
 12695                           
 12696                           ;MCU_B1.c: 975: Memory.Data[1]=product->Data[13];
 12697  1368  0020               	movlb	0	; select bank0
 12698  1369  086D               	movf	_product,w
 12699  136A  0086               	movwf	6
 12700  136B  3002               	movlw	2	; select bank4/5
 12701  136C  0087               	movwf	7
 12702  136D  3002               	movlw	2	; select bank4/5
 12703  136E  3F4D               	moviw [13]fsr1
 12704  136F  0024               	movlb	4	; select bank4
 12705  1370  00A1               	movwf	(_Memory^(0+512)+1)
 12706                           
 12707                           ;MCU_B1.c: 976: Memory.Data[2]=product->Data[14];
 12708  1371  0020               	movlb	0	; select bank0
 12709  1372  086D               	movf	_product,w
 12710  1373  0086               	movwf	6
 12711  1374  3002               	movlw	2	; select bank4/5
 12712  1375  0087               	movwf	7
 12713  1376  3002               	movlw	2	; select bank4/5
 12714  1377  3F4E               	moviw [14]fsr1
 12715  1378  0024               	movlb	4	; select bank4
 12716  1379  00A2               	movwf	(_Memory^(0+512)+2)
 12717                           
 12718                           ;MCU_B1.c: 982: if (Memory.LoopSave == 1) {
 12719  137A  1D44               	btfss	(_Memory^(0+512)+36),2
 12720  137B  2B80               	goto	l1371
 12721                           
 12722                           ;MCU_B1.c: 983: Memory.LoopSave = 0;
 12723  137C  1144               	bcf	(_Memory^(0+512)+36),2
 12724                           
 12725                           ;MCU_B1.c: 984: myMain.FirstOpen = 0;
 12726  137D  0021               	movlb	1	; select bank1
 12727  137E  1320               	bcf	_myMain^(0+128),6
 12728                           
 12729                           ;MCU_B1.c: 985: myMain.First = 0;
 12730  137F  1021               	bcf	(_myMain^(0+128)+1),0
 12731  1380                     l1371:	
 12732                           
 12733                           ;MCU_B1.c: 987: }
 12734                           ;MCU_B1.c: 988: GIE = 0;
 12735  1380  138B               	bcf	11,7	;volatile
 12736                           
 12737                           ;MCU_B1.c: 989: Flash_Memory_Erasing();
 12738  1381  319A  22B3  3193   	fcall	_Flash_Memory_Erasing
 12739                           
 12740                           ;MCU_B1.c: 990: Flash_Memory_Write();
 12741  1384  3190  2098         	fcall	_Flash_Memory_Write
 12742                           
 12743                           ;MCU_B1.c: 991: GIE = 1;
 12744  1386  178B               	bsf	11,7	;volatile
 12745  1387  0008               	return
 12746  1388                     __end_of_Flash_Memory_Modify:	
 12747                           
 12748                           	psect	text75
 12749  1AB3                     __ptext75:	
 12750 ;; *************** function _Flash_Memory_Erasing *****************
 12751 ;; Defined at:
 12752 ;;		line 958 in file "../src/MCU_B1.c"
 12753 ;; Parameters:    Size  Location     Type
 12754 ;;		None
 12755 ;; Auto vars:     Size  Location     Type
 12756 ;;		None
 12757 ;; Return value:  Size  Location     Type
 12758 ;;		None               void
 12759 ;; Registers used:
 12760 ;;		wreg, status,2, status,0, pclath, cstack
 12761 ;; Tracked objects:
 12762 ;;		On entry : 0/0
 12763 ;;		On exit  : 0/0
 12764 ;;		Unchanged: 0/0
 12765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;Total ram usage:        0 bytes
 12771 ;; Hardware stack levels used:    1
 12772 ;; Hardware stack levels required when called:    6
 12773 ;; This function calls:
 12774 ;;		_Flash_Memory_Unlock
 12775 ;; This function is called by:
 12776 ;;		_Flash_Memory_Modify
 12777 ;; This function uses a non-reentrant model
 12778 ;;
 12779                           
 12780                           
 12781                           ;psect for function _Flash_Memory_Erasing
 12782  1AB3                     _Flash_Memory_Erasing:	
 12783                           
 12784                           ;MCU_B1.c: 959: CFGS = 0;
 12785                           
 12786                           ;incstack = 0
 12787                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12788  1AB3  0023               	movlb	3	; select bank3
 12789  1AB4  1315               	bcf	21,6	;volatile
 12790                           
 12791                           ;MCU_B1.c: 960: PMADRH = 0x30;
 12792  1AB5  3030               	movlw	48
 12793  1AB6  0092               	movwf	18	;volatile
 12794                           
 12795                           ;MCU_B1.c: 961: PMADRL = 0x00;
 12796  1AB7  0191               	clrf	17	;volatile
 12797                           
 12798                           ;MCU_B1.c: 962: FREE = 1;
 12799  1AB8  1615               	bsf	21,4	;volatile
 12800                           
 12801                           ;MCU_B1.c: 963: WREN = 1;
 12802  1AB9  1515               	bsf	21,2	;volatile
 12803                           
 12804                           ;MCU_B1.c: 964: Flash_Memory_Unlock();
 12805  1ABA  319A  2269         	fcall	_Flash_Memory_Unlock
 12806                           
 12807                           ;MCU_B1.c: 965: WREN = 0;
 12808  1ABC  0023               	movlb	3	; select bank3
 12809  1ABD  1115               	bcf	21,2	;volatile
 12810  1ABE  0008               	return
 12811  1ABF                     __end_of_Flash_Memory_Erasing:	
 12812                           
 12813                           	psect	text76
 12814  069B                     __ptext76:	
 12815 ;; *************** function _Flash_Memory_Initialization *****************
 12816 ;; Defined at:
 12817 ;;		line 859 in file "../src/MCU_B1.c"
 12818 ;; Parameters:    Size  Location     Type
 12819 ;;		None
 12820 ;; Auto vars:     Size  Location     Type
 12821 ;;  i               1   62[BANK0 ] unsigned char 
 12822 ;; Return value:  Size  Location     Type
 12823 ;;		None               void
 12824 ;; Registers used:
 12825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12826 ;; Tracked objects:
 12827 ;;		On entry : 0/0
 12828 ;;		On exit  : 0/0
 12829 ;;		Unchanged: 0/0
 12830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12833 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12834 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12835 ;;Total ram usage:        2 bytes
 12836 ;; Hardware stack levels used:    1
 12837 ;; Hardware stack levels required when called:    8
 12838 ;; This function calls:
 12839 ;;		_Flash_Memory_Read
 12840 ;;		_Flash_Memory_Write
 12841 ;;		_setPercentValue
 12842 ;; This function is called by:
 12843 ;;		_main
 12844 ;; This function uses a non-reentrant model
 12845 ;;
 12846                           
 12847                           
 12848                           ;psect for function _Flash_Memory_Initialization
 12849  069B                     _Flash_Memory_Initialization:	
 12850                           
 12851                           ;MCU_B1.c: 860: char i = 0;
 12852                           
 12853                           ;incstack = 0
 12854                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12855  069B  0020               	movlb	0	; select bank0
 12856  069C  01DE               	clrf	Flash_Memory_Initialization@i
 12857                           
 12858                           ;MCU_B1.c: 861: if (Flash_Memory_Read(31) == 0xaa) {
 12859  069D  301F               	movlw	31
 12860  069E  319D  255E  3186   	fcall	_Flash_Memory_Read
 12861  06A1  3AAA               	xorlw	170
 12862  06A2  1D03               	skipz
 12863  06A3  2F0D               	goto	l10268
 12864                           
 12865                           ;MCU_B1.c: 862: product->Data[12] = Flash_Memory_Read(0);
 12866  06A4  3000               	movlw	0
 12867  06A5  319D  255E  3186   	fcall	_Flash_Memory_Read
 12868  06A8  0020               	movlb	0	; select bank0
 12869  06A9  00DD               	movwf	??_Flash_Memory_Initialization
 12870  06AA  086D               	movf	_product,w
 12871  06AB  3E0C               	addlw	12
 12872  06AC  0086               	movwf	6
 12873  06AD  3002               	movlw	2	; select bank4/5
 12874  06AE  0087               	movwf	7
 12875  06AF  085D               	movf	??_Flash_Memory_Initialization,w
 12876  06B0  0081               	movwf	1
 12877                           
 12878                           ;MCU_B1.c: 863: product->Data[13] = Flash_Memory_Read(1);
 12879  06B1  3001               	movlw	1
 12880  06B2  319D  255E  3186   	fcall	_Flash_Memory_Read
 12881  06B5  0020               	movlb	0	; select bank0
 12882  06B6  00DD               	movwf	??_Flash_Memory_Initialization
 12883  06B7  086D               	movf	_product,w
 12884  06B8  3E0D               	addlw	13
 12885  06B9  0086               	movwf	6
 12886  06BA  3002               	movlw	2	; select bank4/5
 12887  06BB  0087               	movwf	7
 12888  06BC  085D               	movf	??_Flash_Memory_Initialization,w
 12889  06BD  0081               	movwf	1
 12890                           
 12891                           ;MCU_B1.c: 864: product->Data[14] = Flash_Memory_Read(2);
 12892  06BE  3002               	movlw	2
 12893  06BF  319D  255E  3186   	fcall	_Flash_Memory_Read
 12894  06C2  0020               	movlb	0	; select bank0
 12895  06C3  00DD               	movwf	??_Flash_Memory_Initialization
 12896  06C4  086D               	movf	_product,w
 12897  06C5  3E0E               	addlw	14
 12898  06C6  0086               	movwf	6
 12899  06C7  3002               	movlw	2	; select bank4/5
 12900  06C8  0087               	movwf	7
 12901  06C9  085D               	movf	??_Flash_Memory_Initialization,w
 12902  06CA  0081               	movwf	1
 12903                           
 12904                           ;MCU_B1.c: 870: i = setPercentValue(((char)((100-60)*0.8)));
 12905  06CB  3020               	movlw	32
 12906  06CC  3188  2001  3186   	fcall	_setPercentValue
 12907  06CF  0020               	movlb	0	; select bank0
 12908  06D0  00DD               	movwf	??_Flash_Memory_Initialization
 12909  06D1  085D               	movf	??_Flash_Memory_Initialization,w
 12910  06D2  00DE               	movwf	Flash_Memory_Initialization@i
 12911                           
 12912                           ;MCU_B1.c: 871: product->Data[21] = i;
 12913  06D3  085E               	movf	Flash_Memory_Initialization@i,w
 12914  06D4  00DD               	movwf	??_Flash_Memory_Initialization
 12915  06D5  086D               	movf	_product,w
 12916  06D6  3E15               	addlw	21
 12917  06D7  0086               	movwf	6
 12918  06D8  3002               	movlw	2	; select bank4/5
 12919  06D9  0087               	movwf	7
 12920  06DA  085D               	movf	??_Flash_Memory_Initialization,w
 12921  06DB  0081               	movwf	1
 12922                           
 12923                           ;MCU_B1.c: 872: product->Data[22] = i;
 12924  06DC  085E               	movf	Flash_Memory_Initialization@i,w
 12925  06DD  00DD               	movwf	??_Flash_Memory_Initialization
 12926  06DE  086D               	movf	_product,w
 12927  06DF  3E16               	addlw	22
 12928  06E0  0086               	movwf	6
 12929  06E1  3002               	movlw	2	; select bank4/5
 12930  06E2  0087               	movwf	7
 12931  06E3  085D               	movf	??_Flash_Memory_Initialization,w
 12932  06E4  0081               	movwf	1
 12933                           
 12934                           ;MCU_B1.c: 873: product->Data[23] = i;
 12935  06E5  085E               	movf	Flash_Memory_Initialization@i,w
 12936  06E6  00DD               	movwf	??_Flash_Memory_Initialization
 12937  06E7  086D               	movf	_product,w
 12938  06E8  3E17               	addlw	23
 12939  06E9  0086               	movwf	6
 12940  06EA  3002               	movlw	2	; select bank4/5
 12941  06EB  0087               	movwf	7
 12942  06EC  085D               	movf	??_Flash_Memory_Initialization,w
 12943  06ED  0081               	movwf	1
 12944                           
 12945                           ;MCU_B1.c: 875: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12946  06EE  086D               	movf	_product,w
 12947  06EF  3E0C               	addlw	12
 12948  06F0  0086               	movwf	6
 12949  06F1  3002               	movlw	2	; select bank4/5
 12950  06F2  0087               	movwf	7
 12951  06F3  0801               	movf	1,w
 12952  06F4  3AFF               	xorlw	255
 12953  06F5  1D03               	skipz
 12954  06F6  0008               	return
 12955  06F7  086D               	movf	_product,w
 12956  06F8  3E0D               	addlw	13
 12957  06F9  0086               	movwf	6
 12958  06FA  3002               	movlw	2	; select bank4/5
 12959  06FB  0087               	movwf	7
 12960  06FC  0801               	movf	1,w
 12961  06FD  3AFF               	xorlw	255
 12962  06FE  1D03               	skipz
 12963  06FF  0008               	return
 12964  0700  086D               	movf	_product,w
 12965  0701  3E0E               	addlw	14
 12966  0702  0086               	movwf	6
 12967  0703  3002               	movlw	2	; select bank4/5
 12968  0704  0087               	movwf	7
 12969  0705  0801               	movf	1,w
 12970  0706  3AFF               	xorlw	255
 12971  0707  1D03               	skipz
 12972  0708  0008               	return
 12973                           
 12974                           ;MCU_B1.c: 876: myMain.FirstOpen = 1;
 12975  0709  0021               	movlb	1	; select bank1
 12976  070A  1720               	bsf	_myMain^(0+128),6
 12977                           
 12978                           ;MCU_B1.c: 877: myMain.First = 1;
 12979  070B  1421               	bsf	(_myMain^(0+128)+1),0
 12980                           
 12981                           ;MCU_B1.c: 878: }
 12982                           ;MCU_B1.c: 879: } else {
 12983  070C  0008               	return
 12984  070D                     l10268:	
 12985                           
 12986                           ;MCU_B1.c: 880: i = setPercentValue(((char)((100-60)*0.8)));
 12987  070D  3020               	movlw	32
 12988  070E  3188  2001  3186   	fcall	_setPercentValue
 12989  0711  0020               	movlb	0	; select bank0
 12990  0712  00DD               	movwf	??_Flash_Memory_Initialization
 12991  0713  085D               	movf	??_Flash_Memory_Initialization,w
 12992  0714  00DE               	movwf	Flash_Memory_Initialization@i
 12993                           
 12994                           ;MCU_B1.c: 881: Memory.Data[0]=0xff;
 12995  0715  30FF               	movlw	255
 12996  0716  00DD               	movwf	??_Flash_Memory_Initialization
 12997  0717  085D               	movf	??_Flash_Memory_Initialization,w
 12998  0718  0024               	movlb	4	; select bank4
 12999  0719  00A0               	movwf	_Memory^(0+512)
 13000                           
 13001                           ;MCU_B1.c: 882: Memory.Data[1]=0xff;
 13002  071A  30FF               	movlw	255
 13003  071B  0020               	movlb	0	; select bank0
 13004  071C  00DD               	movwf	??_Flash_Memory_Initialization
 13005  071D  085D               	movf	??_Flash_Memory_Initialization,w
 13006  071E  0024               	movlb	4	; select bank4
 13007  071F  00A1               	movwf	(_Memory^(0+512)+1)
 13008                           
 13009                           ;MCU_B1.c: 883: Memory.Data[2]=0xff;
 13010  0720  30FF               	movlw	255
 13011  0721  0020               	movlb	0	; select bank0
 13012  0722  00DD               	movwf	??_Flash_Memory_Initialization
 13013  0723  085D               	movf	??_Flash_Memory_Initialization,w
 13014  0724  0024               	movlb	4	; select bank4
 13015  0725  00A2               	movwf	(_Memory^(0+512)+2)
 13016                           
 13017                           ;MCU_B1.c: 884: Memory.Data[3]=0xff;
 13018  0726  30FF               	movlw	255
 13019  0727  0020               	movlb	0	; select bank0
 13020  0728  00DD               	movwf	??_Flash_Memory_Initialization
 13021  0729  085D               	movf	??_Flash_Memory_Initialization,w
 13022  072A  0024               	movlb	4	; select bank4
 13023  072B  00A3               	movwf	(_Memory^(0+512)+3)
 13024                           
 13025                           ;MCU_B1.c: 885: Memory.Data[4]=0xff;
 13026  072C  30FF               	movlw	255
 13027  072D  0020               	movlb	0	; select bank0
 13028  072E  00DD               	movwf	??_Flash_Memory_Initialization
 13029  072F  085D               	movf	??_Flash_Memory_Initialization,w
 13030  0730  0024               	movlb	4	; select bank4
 13031  0731  00A4               	movwf	(_Memory^(0+512)+4)
 13032                           
 13033                           ;MCU_B1.c: 886: Memory.Data[5]=0xff;
 13034  0732  30FF               	movlw	255
 13035  0733  0020               	movlb	0	; select bank0
 13036  0734  00DD               	movwf	??_Flash_Memory_Initialization
 13037  0735  085D               	movf	??_Flash_Memory_Initialization,w
 13038  0736  0024               	movlb	4	; select bank4
 13039  0737  00A5               	movwf	(_Memory^(0+512)+5)
 13040                           
 13041                           ;MCU_B1.c: 887: Memory.Data[31]=0xaa;
 13042  0738  30AA               	movlw	170
 13043  0739  0020               	movlb	0	; select bank0
 13044  073A  00DD               	movwf	??_Flash_Memory_Initialization
 13045  073B  085D               	movf	??_Flash_Memory_Initialization,w
 13046  073C  0024               	movlb	4	; select bank4
 13047  073D  00BF               	movwf	(_Memory^(0+512)+31)
 13048                           
 13049                           ;MCU_B1.c: 888: product->Data[21] = i;
 13050  073E  0020               	movlb	0	; select bank0
 13051  073F  085E               	movf	Flash_Memory_Initialization@i,w
 13052  0740  00DD               	movwf	??_Flash_Memory_Initialization
 13053  0741  086D               	movf	_product,w
 13054  0742  3E15               	addlw	21
 13055  0743  0086               	movwf	6
 13056  0744  3002               	movlw	2	; select bank4/5
 13057  0745  0087               	movwf	7
 13058  0746  085D               	movf	??_Flash_Memory_Initialization,w
 13059  0747  0081               	movwf	1
 13060                           
 13061                           ;MCU_B1.c: 889: product->Data[22] = i;
 13062  0748  085E               	movf	Flash_Memory_Initialization@i,w
 13063  0749  00DD               	movwf	??_Flash_Memory_Initialization
 13064  074A  086D               	movf	_product,w
 13065  074B  3E16               	addlw	22
 13066  074C  0086               	movwf	6
 13067  074D  3002               	movlw	2	; select bank4/5
 13068  074E  0087               	movwf	7
 13069  074F  085D               	movf	??_Flash_Memory_Initialization,w
 13070  0750  0081               	movwf	1
 13071                           
 13072                           ;MCU_B1.c: 890: product->Data[23] = i;
 13073  0751  085E               	movf	Flash_Memory_Initialization@i,w
 13074  0752  00DD               	movwf	??_Flash_Memory_Initialization
 13075  0753  086D               	movf	_product,w
 13076  0754  3E17               	addlw	23
 13077  0755  0086               	movwf	6
 13078  0756  3002               	movlw	2	; select bank4/5
 13079  0757  0087               	movwf	7
 13080  0758  085D               	movf	??_Flash_Memory_Initialization,w
 13081  0759  0081               	movwf	1
 13082                           
 13083                           ;MCU_B1.c: 891: GIE = 0;
 13084  075A  138B               	bcf	11,7	;volatile
 13085                           
 13086                           ;MCU_B1.c: 892: Flash_Memory_Write();
 13087  075B  3190  2098         	fcall	_Flash_Memory_Write
 13088                           
 13089                           ;MCU_B1.c: 893: GIE = 1;
 13090  075D  178B               	bsf	11,7	;volatile
 13091                           
 13092                           ;MCU_B1.c: 894: myMain.FirstOpen = 1;
 13093  075E  0021               	movlb	1	; select bank1
 13094  075F  1720               	bsf	_myMain^(0+128),6
 13095                           
 13096                           ;MCU_B1.c: 895: myMain.First = 1;
 13097  0760  1421               	bsf	(_myMain^(0+128)+1),0
 13098  0761  0008               	return
 13099  0762                     __end_of_Flash_Memory_Initialization:	
 13100                           
 13101                           	psect	text77
 13102  1098                     __ptext77:	
 13103 ;; *************** function _Flash_Memory_Write *****************
 13104 ;; Defined at:
 13105 ;;		line 939 in file "../src/MCU_B1.c"
 13106 ;; Parameters:    Size  Location     Type
 13107 ;;		None
 13108 ;; Auto vars:     Size  Location     Type
 13109 ;;  i               1    1[BANK0 ] unsigned char 
 13110 ;; Return value:  Size  Location     Type
 13111 ;;		None               void
 13112 ;; Registers used:
 13113 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13114 ;; Tracked objects:
 13115 ;;		On entry : 0/0
 13116 ;;		On exit  : 0/0
 13117 ;;		Unchanged: 0/0
 13118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13120 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13122 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13123 ;;Total ram usage:        2 bytes
 13124 ;; Hardware stack levels used:    1
 13125 ;; Hardware stack levels required when called:    6
 13126 ;; This function calls:
 13127 ;;		_Flash_Memory_Unlock
 13128 ;; This function is called by:
 13129 ;;		_Flash_Memory_Initialization
 13130 ;;		_Flash_Memory_Modify
 13131 ;; This function uses a non-reentrant model
 13132 ;;
 13133                           
 13134                           
 13135                           ;psect for function _Flash_Memory_Write
 13136  1098                     _Flash_Memory_Write:	
 13137                           
 13138                           ;MCU_B1.c: 940: char i = 0;
 13139                           
 13140                           ;incstack = 0
 13141                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13142  1098  0020               	movlb	0	; select bank0
 13143  1099  01A1               	clrf	Flash_Memory_Write@i
 13144                           
 13145                           ;MCU_B1.c: 941: CFGS = 0;
 13146  109A  0023               	movlb	3	; select bank3
 13147  109B  1315               	bcf	21,6	;volatile
 13148                           
 13149                           ;MCU_B1.c: 942: PMADRH = 0x30;
 13150  109C  3030               	movlw	48
 13151  109D  0092               	movwf	18	;volatile
 13152                           
 13153                           ;MCU_B1.c: 943: PMDATH = 0;
 13154  109E  0194               	clrf	20	;volatile
 13155                           
 13156                           ;MCU_B1.c: 944: FREE = 0;
 13157  109F  1215               	bcf	21,4	;volatile
 13158                           
 13159                           ;MCU_B1.c: 945: LWLO = 1;
 13160  10A0  1695               	bsf	21,5	;volatile
 13161                           
 13162                           ;MCU_B1.c: 946: WREN = 1;
 13163  10A1  1515               	bsf	21,2	;volatile
 13164                           
 13165                           ;MCU_B1.c: 947: for (i = 0; i < 32; i++) {
 13166  10A2  0020               	movlb	0	; select bank0
 13167  10A3  01A1               	clrf	Flash_Memory_Write@i
 13168  10A4  3020               	movlw	32
 13169  10A5  0221               	subwf	Flash_Memory_Write@i,w
 13170  10A6  1803               	btfsc	3,0
 13171  10A7  28C0               	goto	l1362
 13172  10A8                     l9384:	
 13173                           
 13174                           ;MCU_B1.c: 948: PMADRL = i;
 13175  10A8  0821               	movf	Flash_Memory_Write@i,w
 13176  10A9  0023               	movlb	3	; select bank3
 13177  10AA  0091               	movwf	17	;volatile
 13178                           
 13179                           ;MCU_B1.c: 949: PMDATL = Memory.Data[i];
 13180  10AB  0020               	movlb	0	; select bank0
 13181  10AC  0821               	movf	Flash_Memory_Write@i,w
 13182  10AD  3E20               	addlw	_Memory& (0+255)
 13183  10AE  0086               	movwf	6
 13184  10AF  3002               	movlw	2	; select bank4/5
 13185  10B0  0087               	movwf	7
 13186  10B1  0801               	movf	1,w
 13187  10B2  0023               	movlb	3	; select bank3
 13188  10B3  0093               	movwf	19	;volatile
 13189                           
 13190                           ;MCU_B1.c: 950: Flash_Memory_Unlock();
 13191  10B4  319A  2269  3190   	fcall	_Flash_Memory_Unlock
 13192  10B7  3001               	movlw	1
 13193  10B8  0020               	movlb	0	; select bank0
 13194  10B9  00A0               	movwf	??_Flash_Memory_Write
 13195  10BA  0820               	movf	??_Flash_Memory_Write,w
 13196  10BB  07A1               	addwf	Flash_Memory_Write@i,f
 13197  10BC  3020               	movlw	32
 13198  10BD  0221               	subwf	Flash_Memory_Write@i,w
 13199  10BE  1C03               	skipc
 13200  10BF  28A8               	goto	l9384
 13201  10C0                     l1362:	
 13202                           
 13203                           ;MCU_B1.c: 951: }
 13204                           ;MCU_B1.c: 952: LWLO = 0;
 13205  10C0  0023               	movlb	3	; select bank3
 13206  10C1  1295               	bcf	21,5	;volatile
 13207                           
 13208                           ;MCU_B1.c: 953: Flash_Memory_Unlock();
 13209  10C2  319A  2269         	fcall	_Flash_Memory_Unlock
 13210                           
 13211                           ;MCU_B1.c: 954: WREN = 0;
 13212  10C4  0023               	movlb	3	; select bank3
 13213  10C5  1115               	bcf	21,2	;volatile
 13214  10C6  0008               	return
 13215  10C7                     __end_of_Flash_Memory_Write:	
 13216                           
 13217                           	psect	text78
 13218  1A69                     __ptext78:	
 13219 ;; *************** function _Flash_Memory_Unlock *****************
 13220 ;; Defined at:
 13221 ;;		line 918 in file "../src/MCU_B1.c"
 13222 ;; Parameters:    Size  Location     Type
 13223 ;;		None
 13224 ;; Auto vars:     Size  Location     Type
 13225 ;;		None
 13226 ;; Return value:  Size  Location     Type
 13227 ;;		None               void
 13228 ;; Registers used:
 13229 ;;		wreg
 13230 ;; Tracked objects:
 13231 ;;		On entry : 0/0
 13232 ;;		On exit  : 0/0
 13233 ;;		Unchanged: 0/0
 13234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13239 ;;Total ram usage:        0 bytes
 13240 ;; Hardware stack levels used:    1
 13241 ;; Hardware stack levels required when called:    5
 13242 ;; This function calls:
 13243 ;;		Nothing
 13244 ;; This function is called by:
 13245 ;;		_Flash_Memory_Write
 13246 ;;		_Flash_Memory_Erasing
 13247 ;; This function uses a non-reentrant model
 13248 ;;
 13249                           
 13250                           
 13251                           ;psect for function _Flash_Memory_Unlock
 13252  1A69                     _Flash_Memory_Unlock:	
 13253                           
 13254                           ;MCU_B1.c: 919: PMCON2 = 0x55;
 13255                           
 13256                           ;incstack = 0
 13257                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13258  1A69  3055               	movlw	85
 13259  1A6A  0023               	movlb	3	; select bank3
 13260  1A6B  0096               	movwf	22	;volatile
 13261                           
 13262                           ;MCU_B1.c: 920: PMCON2 = 0xaa;
 13263  1A6C  30AA               	movlw	170
 13264  1A6D  0096               	movwf	22	;volatile
 13265                           
 13266                           ;MCU_B1.c: 921: WR = 1;
 13267  1A6E  1495               	bsf	21,1	;volatile
 13268                           
 13269                           ;MCU_B1.c: 922: __nop();
 13270  1A6F  0000               	nop
 13271                           
 13272                           ;MCU_B1.c: 923: __nop();
 13273  1A70  0000               	nop
 13274  1A71  0008               	return
 13275  1A72                     __end_of_Flash_Memory_Unlock:	
 13276                           
 13277                           	psect	text79
 13278  1D5E                     __ptext79:	
 13279 ;; *************** function _Flash_Memory_Read *****************
 13280 ;; Defined at:
 13281 ;;		line 927 in file "../src/MCU_B1.c"
 13282 ;; Parameters:    Size  Location     Type
 13283 ;;  address         1    wreg     unsigned char 
 13284 ;; Auto vars:     Size  Location     Type
 13285 ;;  address         1    2[BANK0 ] unsigned char 
 13286 ;;  ret             1    3[BANK0 ] unsigned char 
 13287 ;;  i               1    1[BANK0 ] unsigned char 
 13288 ;; Return value:  Size  Location     Type
 13289 ;;                  1    wreg      unsigned char 
 13290 ;; Registers used:
 13291 ;;		wreg, status,2
 13292 ;; Tracked objects:
 13293 ;;		On entry : 0/0
 13294 ;;		On exit  : 0/0
 13295 ;;		Unchanged: 0/0
 13296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13301 ;;Total ram usage:        4 bytes
 13302 ;; Hardware stack levels used:    1
 13303 ;; Hardware stack levels required when called:    5
 13304 ;; This function calls:
 13305 ;;		Nothing
 13306 ;; This function is called by:
 13307 ;;		_Flash_Memory_Initialization
 13308 ;;		_Flash_Memory_Modify
 13309 ;; This function uses a non-reentrant model
 13310 ;;
 13311                           
 13312                           
 13313                           ;psect for function _Flash_Memory_Read
 13314  1D5E                     _Flash_Memory_Read:	
 13315                           
 13316                           ;incstack = 0
 13317                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13318                           ;Flash_Memory_Read@address stored from wreg
 13319  1D5E  0020               	movlb	0	; select bank0
 13320  1D5F  00A2               	movwf	Flash_Memory_Read@address
 13321                           
 13322                           ;MCU_B1.c: 928: char i = 0, ret = 0;
 13323  1D60  01A1               	clrf	Flash_Memory_Read@i
 13324  1D61  01A3               	clrf	Flash_Memory_Read@ret
 13325                           
 13326                           ;MCU_B1.c: 929: PMADRH = 0x30;
 13327  1D62  3030               	movlw	48
 13328  1D63  0023               	movlb	3	; select bank3
 13329  1D64  0092               	movwf	18	;volatile
 13330                           
 13331                           ;MCU_B1.c: 930: PMADRL = address;
 13332  1D65  0020               	movlb	0	; select bank0
 13333  1D66  0822               	movf	Flash_Memory_Read@address,w
 13334  1D67  0023               	movlb	3	; select bank3
 13335  1D68  0091               	movwf	17	;volatile
 13336                           
 13337                           ;MCU_B1.c: 931: CFGS = 0;
 13338  1D69  1315               	bcf	21,6	;volatile
 13339                           
 13340                           ;MCU_B1.c: 932: RD = 1;
 13341  1D6A  1415               	bsf	21,0	;volatile
 13342                           
 13343                           ;MCU_B1.c: 933: i = PMDATH;
 13344  1D6B  0814               	movf	20,w	;volatile
 13345  1D6C  0020               	movlb	0	; select bank0
 13346  1D6D  00A0               	movwf	??_Flash_Memory_Read
 13347  1D6E  0820               	movf	??_Flash_Memory_Read,w
 13348  1D6F  00A1               	movwf	Flash_Memory_Read@i
 13349                           
 13350                           ;MCU_B1.c: 934: ret = PMDATL;
 13351  1D70  0023               	movlb	3	; select bank3
 13352  1D71  0813               	movf	19,w	;volatile
 13353  1D72  0020               	movlb	0	; select bank0
 13354  1D73  00A0               	movwf	??_Flash_Memory_Read
 13355  1D74  0820               	movf	??_Flash_Memory_Read,w
 13356  1D75  00A3               	movwf	Flash_Memory_Read@ret
 13357                           
 13358                           ;MCU_B1.c: 935: return ret;
 13359  1D76  0823               	movf	Flash_Memory_Read@ret,w
 13360  1D77  0008               	return
 13361  1D78                     __end_of_Flash_Memory_Read:	
 13362                           
 13363                           	psect	text80
 13364  1A86                     __ptext80:	
 13365 ;; *************** function _DimmerLights_Main *****************
 13366 ;; Defined at:
 13367 ;;		line 416 in file "../src/Dimmer_B1.c"
 13368 ;; Parameters:    Size  Location     Type
 13369 ;;		None
 13370 ;; Auto vars:     Size  Location     Type
 13371 ;;		None
 13372 ;; Return value:  Size  Location     Type
 13373 ;;		None               void
 13374 ;; Registers used:
 13375 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13376 ;; Tracked objects:
 13377 ;;		On entry : 0/0
 13378 ;;		On exit  : 0/0
 13379 ;;		Unchanged: 0/0
 13380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13385 ;;Total ram usage:        0 bytes
 13386 ;; Hardware stack levels used:    1
 13387 ;; Hardware stack levels required when called:   11
 13388 ;; This function calls:
 13389 ;;		_DimmerLights_Close
 13390 ;;		_setDimmerLights_Main
 13391 ;; This function is called by:
 13392 ;;		_main
 13393 ;; This function uses a non-reentrant model
 13394 ;;
 13395                           
 13396                           
 13397                           ;psect for function _DimmerLights_Main
 13398  1A86                     _DimmerLights_Main:	
 13399                           
 13400                           ;Dimmer_B1.c: 419: setDimmerLights_Main(1);
 13401                           
 13402                           ;incstack = 0
 13403                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13404  1A86  3001               	movlw	1
 13405  1A87  318A  22D9  319A   	fcall	_setDimmerLights_Main
 13406                           
 13407                           ;Dimmer_B1.c: 423: setDimmerLights_Main(2);
 13408  1A8A  3002               	movlw	2
 13409  1A8B  318A  22D9  319A   	fcall	_setDimmerLights_Main
 13410                           
 13411                           ;Dimmer_B1.c: 430: DimmerLights_Close();
 13412  1A8E  319D  252C         	fcall	_DimmerLights_Close
 13413  1A90  0008               	return
 13414  1A91                     __end_of_DimmerLights_Main:	
 13415                           
 13416                           	psect	text81
 13417  0AD9                     __ptext81:	
 13418 ;; *************** function _setDimmerLights_Main *****************
 13419 ;; Defined at:
 13420 ;;		line 434 in file "../src/Dimmer_B1.c"
 13421 ;; Parameters:    Size  Location     Type
 13422 ;;  lights          1    wreg     unsigned char 
 13423 ;; Auto vars:     Size  Location     Type
 13424 ;;  lights          1   70[BANK0 ] unsigned char 
 13425 ;;  clear           1   69[BANK0 ] unsigned char 
 13426 ;; Return value:  Size  Location     Type
 13427 ;;		None               void
 13428 ;; Registers used:
 13429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13430 ;; Tracked objects:
 13431 ;;		On entry : 0/0
 13432 ;;		On exit  : 0/0
 13433 ;;		Unchanged: 0/0
 13434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13438 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13439 ;;Total ram usage:        2 bytes
 13440 ;; Hardware stack levels used:    1
 13441 ;; Hardware stack levels required when called:   10
 13442 ;; This function calls:
 13443 ;;		_DimmerLightsPointSelect
 13444 ;;		_setBuz
 13445 ;;		_setDimmerLights
 13446 ;;		_setDimmerLights_Adj
 13447 ;; This function is called by:
 13448 ;;		_DimmerLights_Main
 13449 ;; This function uses a non-reentrant model
 13450 ;;
 13451                           
 13452                           
 13453                           ;psect for function _setDimmerLights_Main
 13454  0AD9                     _setDimmerLights_Main:	
 13455                           
 13456                           ;incstack = 0
 13457                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13458                           ;setDimmerLights_Main@lights stored from wreg
 13459  0AD9  0020               	movlb	0	; select bank0
 13460  0ADA  00E6               	movwf	setDimmerLights_Main@lights
 13461                           
 13462                           ;Dimmer_B1.c: 435: char clear = 1;
 13463  0ADB  01E5               	clrf	setDimmerLights_Main@clear
 13464  0ADC  0AE5               	incf	setDimmerLights_Main@clear,f
 13465                           
 13466                           ;Dimmer_B1.c: 436: DimmerLightsPointSelect(lights);
 13467  0ADD  0866               	movf	setDimmerLights_Main@lights,w
 13468  0ADE  319C  242C  318A   	fcall	_DimmerLightsPointSelect
 13469                           
 13470                           ;Dimmer_B1.c: 449: if (lights == 1) {
 13471  0AE1  0020               	movlb	0	; select bank0
 13472  0AE2  0866               	movf	setDimmerLights_Main@lights,w
 13473  0AE3  3A01               	xorlw	1
 13474  0AE4  1D03               	skipz
 13475  0AE5  2AED               	goto	l9688
 13476                           
 13477                           ;Dimmer_B1.c: 450: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 13478  0AE6  3000               	movlw	0
 13479  0AE7  0022               	movlb	2	; select bank2
 13480  0AE8  194D               	btfsc	(_DimmerLights2^(0+256)+9),2
 13481  0AE9  3001               	movlw	1
 13482  0AEA  0020               	movlb	0	; select bank0
 13483  0AEB  00E5               	movwf	setDimmerLights_Main@clear
 13484                           
 13485                           ;Dimmer_B1.c: 451: } else if (lights == 2) {
 13486  0AEC  2AF7               	goto	l9692
 13487  0AED                     l9688:	
 13488  0AED  0866               	movf	setDimmerLights_Main@lights,w
 13489  0AEE  3A02               	xorlw	2
 13490  0AEF  1D03               	skipz
 13491  0AF0  2AF7               	goto	l9692
 13492                           
 13493                           ;Dimmer_B1.c: 452: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 13494  0AF1  3000               	movlw	0
 13495  0AF2  0022               	movlb	2	; select bank2
 13496  0AF3  193E               	btfsc	(_DimmerLights1^(0+256)+9),2
 13497  0AF4  3001               	movlw	1
 13498  0AF5  0020               	movlb	0	; select bank0
 13499  0AF6  00E5               	movwf	setDimmerLights_Main@clear
 13500  0AF7                     l9692:	
 13501                           
 13502                           ;Dimmer_B1.c: 453: }
 13503                           ;Dimmer_B1.c: 456: if (DimmerLights->Trigger == 1) {
 13504  0AF7  086B               	movf	_DimmerLights,w
 13505  0AF8  3E08               	addlw	8
 13506  0AF9  0086               	movwf	6
 13507  0AFA  3001               	movlw	1	; select bank2/3
 13508  0AFB  0087               	movwf	7
 13509  0AFC  1D01               	btfss	1,2
 13510  0AFD  2B1F               	goto	l9704
 13511                           
 13512                           ;Dimmer_B1.c: 457: if (clear == 1) {
 13513  0AFE  0865               	movf	setDimmerLights_Main@clear,w
 13514  0AFF  3A01               	xorlw	1
 13515  0B00  1D03               	skipz
 13516  0B01  0008               	return
 13517                           
 13518                           ;Dimmer_B1.c: 458: DimmerLights->Trigger = 0;
 13519  0B02  086B               	movf	_DimmerLights,w
 13520  0B03  3E08               	addlw	8
 13521  0B04  0086               	movwf	6
 13522  0B05  3001               	movlw	1	; select bank2/3
 13523  0B06  0087               	movwf	7
 13524  0B07  1101               	bcf	1,2
 13525                           
 13526                           ;Dimmer_B1.c: 459: if (DimmerLights->Switch == 1) {
 13527  0B08  086B               	movf	_DimmerLights,w
 13528  0B09  3E08               	addlw	8
 13529  0B0A  0086               	movwf	6
 13530  0B0B  3001               	movlw	1	; select bank2/3
 13531  0B0C  0087               	movwf	7
 13532  0B0D  1C81               	btfss	1,1
 13533  0B0E  2B12               	goto	l9700
 13534                           
 13535                           ;Dimmer_B1.c: 460: setDimmerLights(lights, 1);
 13536  0B0F  01A4               	clrf	setDimmerLights@status
 13537  0B10  0AA4               	incf	setDimmerLights@status,f
 13538  0B11  2B14               	goto	L9
 13539  0B12                     l9700:	
 13540                           ;Dimmer_B1.c: 461: } else {
 13541                           
 13542                           
 13543                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 0);
 13544  0B12  0020               	movlb	0	; select bank0
 13545  0B13  01A4               	clrf	setDimmerLights@status
 13546  0B14                     L9:	
 13547  0B14  0866               	movf	setDimmerLights_Main@lights,w
 13548  0B15  318C  24D2         	fcall	_setDimmerLights
 13549                           
 13550                           ;Dimmer_B1.c: 463: }
 13551                           ;Dimmer_B1.c: 465: DimmerLights->Clear = 0;
 13552  0B17  0020               	movlb	0	; select bank0
 13553  0B18  086B               	movf	_DimmerLights,w
 13554  0B19  3E09               	addlw	9
 13555  0B1A  0086               	movwf	6
 13556  0B1B  3001               	movlw	1	; select bank2/3
 13557  0B1C  0087               	movwf	7
 13558  0B1D  1101               	bcf	1,2
 13559                           
 13560                           ;Dimmer_B1.c: 467: }
 13561                           ;Dimmer_B1.c: 468: } else {
 13562  0B1E  0008               	return
 13563  0B1F                     l9704:	
 13564                           
 13565                           ;Dimmer_B1.c: 469: if (DimmerLights->TriggerAdj == 1) {
 13566  0B1F  086B               	movf	_DimmerLights,w
 13567  0B20  3E08               	addlw	8
 13568  0B21  0086               	movwf	6
 13569  0B22  3001               	movlw	1	; select bank2/3
 13570  0B23  0087               	movwf	7
 13571  0B24  1E01               	btfss	1,4
 13572  0B25  0008               	return
 13573                           
 13574                           ;Dimmer_B1.c: 470: if (clear == 1) {
 13575  0B26  0865               	movf	setDimmerLights_Main@clear,w
 13576  0B27  3A01               	xorlw	1
 13577  0B28  1D03               	skipz
 13578  0B29  0008               	return
 13579                           
 13580                           ;Dimmer_B1.c: 471: DimmerLights->TriggerAdj = 0;
 13581  0B2A  086B               	movf	_DimmerLights,w
 13582  0B2B  3E08               	addlw	8
 13583  0B2C  0086               	movwf	6
 13584  0B2D  3001               	movlw	1	; select bank2/3
 13585  0B2E  0087               	movwf	7
 13586  0B2F  1201               	bcf	1,4
 13587                           
 13588                           ;Dimmer_B1.c: 472: if (DimmerLights->AdjGo == 1) {
 13589  0B30  086B               	movf	_DimmerLights,w
 13590  0B31  3E08               	addlw	8
 13591  0B32  0086               	movwf	6
 13592  0B33  3001               	movlw	1	; select bank2/3
 13593  0B34  0087               	movwf	7
 13594  0B35  1D81               	btfss	1,3
 13595  0B36  2B46               	goto	l9714
 13596                           
 13597                           ;Dimmer_B1.c: 473: setDimmerLights_Adj(lights, 1);
 13598  0B37  01E2               	clrf	setDimmerLights_Adj@status
 13599  0B38  0AE2               	incf	setDimmerLights_Adj@status,f
 13600  0B39  0866               	movf	setDimmerLights_Main@lights,w
 13601  0B3A  3193  2300  318A   	fcall	_setDimmerLights_Adj
 13602                           
 13603                           ;Dimmer_B1.c: 474: setBuz(1, 100);
 13604  0B3D  3064               	movlw	100
 13605  0B3E  0020               	movlb	0	; select bank0
 13606  0B3F  00A9               	movwf	setBuz@time
 13607  0B40  3000               	movlw	0
 13608  0B41  00AA               	movwf	setBuz@time+1
 13609  0B42  3001               	movlw	1
 13610  0B43  3195  256B         	fcall	_setBuz
 13611                           
 13612                           ;Dimmer_B1.c: 475: } else {
 13613  0B45  0008               	return
 13614  0B46                     l9714:	
 13615                           
 13616                           ;Dimmer_B1.c: 476: setDimmerLights_Adj(lights, 0);
 13617  0B46  0020               	movlb	0	; select bank0
 13618  0B47  01E2               	clrf	setDimmerLights_Adj@status
 13619  0B48  0866               	movf	setDimmerLights_Main@lights,w
 13620  0B49  3193  2300         	fcall	_setDimmerLights_Adj
 13621  0B4B  0008               	return
 13622  0B4C                     __end_of_setDimmerLights_Main:	
 13623                           
 13624                           	psect	text82
 13625  1300                     __ptext82:	
 13626 ;; *************** function _setDimmerLights_Adj *****************
 13627 ;; Defined at:
 13628 ;;		line 655 in file "../src/Dimmer_B1.c"
 13629 ;; Parameters:    Size  Location     Type
 13630 ;;  lights          1    wreg     unsigned char 
 13631 ;;  status          1   66[BANK0 ] unsigned char 
 13632 ;; Auto vars:     Size  Location     Type
 13633 ;;  lights          1   68[BANK0 ] unsigned char 
 13634 ;; Return value:  Size  Location     Type
 13635 ;;		None               void
 13636 ;; Registers used:
 13637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13638 ;; Tracked objects:
 13639 ;;		On entry : 0/0
 13640 ;;		On exit  : 0/0
 13641 ;;		Unchanged: 0/0
 13642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13643 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13646 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13647 ;;Total ram usage:        3 bytes
 13648 ;; Hardware stack levels used:    1
 13649 ;; Hardware stack levels required when called:    9
 13650 ;; This function calls:
 13651 ;;		_DimmerLightsPointSelect
 13652 ;;		_setLoad_StatusOff
 13653 ;;		_setRF_DimmerLights
 13654 ;;		_setTxData
 13655 ;; This function is called by:
 13656 ;;		_setDimmerLights_Main
 13657 ;; This function uses a non-reentrant model
 13658 ;;
 13659                           
 13660                           
 13661                           ;psect for function _setDimmerLights_Adj
 13662  1300                     _setDimmerLights_Adj:	
 13663                           
 13664                           ;incstack = 0
 13665                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13666                           ;setDimmerLights_Adj@lights stored from wreg
 13667  1300  0020               	movlb	0	; select bank0
 13668  1301  00E4               	movwf	setDimmerLights_Adj@lights
 13669                           
 13670                           ;Dimmer_B1.c: 656: DimmerLightsPointSelect(lights);
 13671  1302  0864               	movf	setDimmerLights_Adj@lights,w
 13672  1303  319C  242C  3193   	fcall	_DimmerLightsPointSelect
 13673                           
 13674                           ;Dimmer_B1.c: 657: if (status == 1) {
 13675  1306  0020               	movlb	0	; select bank0
 13676  1307  0862               	movf	setDimmerLights_Adj@status,w
 13677  1308  3A01               	xorlw	1
 13678  1309  1D03               	skipz
 13679  130A  2B16               	goto	l9334
 13680                           
 13681                           ;Dimmer_B1.c: 658: DimmerLights->AdjFlag = 1;
 13682  130B  086B               	movf	_DimmerLights,w
 13683  130C  0086               	movwf	6
 13684  130D  3001               	movlw	1	; select bank2/3
 13685  130E  0087               	movwf	7
 13686  130F  1581               	bsf	1,3
 13687                           
 13688                           ;Dimmer_B1.c: 659: DimmerLights->Signal = 1;
 13689  1310  086B               	movf	_DimmerLights,w
 13690  1311  0086               	movwf	6
 13691  1312  3001               	movlw	1	; select bank2/3
 13692  1313  0087               	movwf	7
 13693  1314  1481               	bsf	1,1
 13694                           
 13695                           ;Dimmer_B1.c: 660: } else {
 13696  1315  0008               	return
 13697  1316                     l9334:	
 13698                           
 13699                           ;Dimmer_B1.c: 661: if (DimmerLights->AdjFlag == 1) {
 13700  1316  086B               	movf	_DimmerLights,w
 13701  1317  0086               	movwf	6
 13702  1318  3001               	movlw	1	; select bank2/3
 13703  1319  0087               	movwf	7
 13704  131A  1D81               	btfss	1,3
 13705  131B  0008               	return
 13706                           
 13707                           ;Dimmer_B1.c: 663: DimmerLights->Signal = 0;
 13708  131C  086B               	movf	_DimmerLights,w
 13709  131D  0086               	movwf	6
 13710  131E  3001               	movlw	1	; select bank2/3
 13711  131F  0087               	movwf	7
 13712  1320  1081               	bcf	1,1
 13713                           
 13714                           ;Dimmer_B1.c: 664: DimmerLights->AdjFlag = 0;
 13715  1321  086B               	movf	_DimmerLights,w
 13716  1322  0086               	movwf	6
 13717  1323  3001               	movlw	1	; select bank2/3
 13718  1324  0087               	movwf	7
 13719  1325  1181               	bcf	1,3
 13720                           
 13721                           ;Dimmer_B1.c: 665: setLoad_StatusOff(0, 1);
 13722  1326  01A0               	clrf	setLoad_StatusOff@command
 13723  1327  0AA0               	incf	setLoad_StatusOff@command,f
 13724  1328  3000               	movlw	0
 13725  1329  319E  260A  3193   	fcall	_setLoad_StatusOff
 13726                           
 13727                           ;Dimmer_B1.c: 666: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13728  132C  0020               	movlb	0	; select bank0
 13729  132D  086B               	movf	_DimmerLights,w
 13730  132E  3E04               	addlw	4
 13731  132F  0086               	movwf	6
 13732  1330  3001               	movlw	1	; select bank2/3
 13733  1331  0087               	movwf	7
 13734  1332  0801               	movf	1,w
 13735  1333  00E3               	movwf	??_setDimmerLights_Adj
 13736  1334  086B               	movf	_DimmerLights,w
 13737  1335  3E05               	addlw	5
 13738  1336  0086               	movwf	6
 13739  1337  3001               	movlw	1	; select bank2/3
 13740  1338  0087               	movwf	7
 13741  1339  0863               	movf	??_setDimmerLights_Adj,w
 13742  133A  0081               	movwf	1
 13743                           
 13744                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, 1);
 13745  133B  01DD               	clrf	setRF_DimmerLights@on
 13746  133C  0ADD               	incf	setRF_DimmerLights@on,f
 13747  133D  0864               	movf	setDimmerLights_Adj@lights,w
 13748  133E  3189  211B  3193   	fcall	_setRF_DimmerLights
 13749                           
 13750                           ;Dimmer_B1.c: 675: setTxData();
 13751  1341  318F  2743         	fcall	_setTxData
 13752  1343  0008               	return
 13753  1344                     __end_of_setDimmerLights_Adj:	
 13754                           
 13755                           	psect	text83
 13756  1E0A                     __ptext83:	
 13757 ;; *************** function _setLoad_StatusOff *****************
 13758 ;; Defined at:
 13759 ;;		line 282 in file "../src/OverLoad_B1.c"
 13760 ;; Parameters:    Size  Location     Type
 13761 ;;  lights          1    wreg     unsigned char 
 13762 ;;  command         1    0[BANK0 ] unsigned char 
 13763 ;; Auto vars:     Size  Location     Type
 13764 ;;  lights          1    1[BANK0 ] unsigned char 
 13765 ;; Return value:  Size  Location     Type
 13766 ;;		None               void
 13767 ;; Registers used:
 13768 ;;		wreg, status,2, status,0
 13769 ;; Tracked objects:
 13770 ;;		On entry : 0/0
 13771 ;;		On exit  : 0/0
 13772 ;;		Unchanged: 0/0
 13773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13774 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13775 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13777 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13778 ;;Total ram usage:        2 bytes
 13779 ;; Hardware stack levels used:    1
 13780 ;; Hardware stack levels required when called:    5
 13781 ;; This function calls:
 13782 ;;		Nothing
 13783 ;; This function is called by:
 13784 ;;		_setDimmerLights_ERROR
 13785 ;;		_setDimmerLights_Adj
 13786 ;; This function uses a non-reentrant model
 13787 ;;
 13788                           
 13789                           
 13790                           ;psect for function _setLoad_StatusOff
 13791  1E0A                     _setLoad_StatusOff:	
 13792                           
 13793                           ;incstack = 0
 13794                           ; Regs used in _setLoad_StatusOff: [wreg+status,2+status,0]
 13795                           ;setLoad_StatusOff@lights stored from wreg
 13796  1E0A  0020               	movlb	0	; select bank0
 13797  1E0B  00A1               	movwf	setLoad_StatusOff@lights
 13798                           
 13799                           ;OverLoad_B1.c: 283: Load1.StatusOff = command;
 13800  1E0C  0820               	movf	setLoad_StatusOff@command,w
 13801  1E0D  0023               	movlb	3	; select bank3
 13802  1E0E  13A0               	bcf	_Load1^(0+384),7
 13803  1E0F  1D03               	skipz
 13804  1E10  17A0               	bsf	_Load1^(0+384),7
 13805                           
 13806                           ;OverLoad_B1.c: 284: Load1.SafeCount -= 2;
 13807  1E11  3002               	movlw	2
 13808  1E12  02E2               	subwf	(_Load1^(0+384)+66),f
 13809                           
 13810                           ;OverLoad_B1.c: 285: if (lights == 1) {
 13811  1E13  0020               	movlb	0	; select bank0
 13812  1E14  0821               	movf	setLoad_StatusOff@lights,w
 13813  1E15  3A01               	xorlw	1
 13814  1E16  1D03               	skipz
 13815  1E17  2E1A               	goto	l8786
 13816                           
 13817                           ;OverLoad_B1.c: 286: Load1.Lights1Status = 0;
 13818  1E18  0023               	movlb	3	; select bank3
 13819  1E19  01E3               	clrf	(_Load1^(0+384)+67)
 13820  1E1A                     l8786:	
 13821                           
 13822                           ;OverLoad_B1.c: 287: }
 13823                           ;OverLoad_B1.c: 288: if (lights == 2) {
 13824  1E1A  0020               	movlb	0	; select bank0
 13825  1E1B  0821               	movf	setLoad_StatusOff@lights,w
 13826  1E1C  3A02               	xorlw	2
 13827  1E1D  1D03               	skipz
 13828  1E1E  2E21               	goto	l8790
 13829                           
 13830                           ;OverLoad_B1.c: 289: Load1.Lights2Status = 0;
 13831  1E1F  0023               	movlb	3	; select bank3
 13832  1E20  01E4               	clrf	(_Load1^(0+384)+68)
 13833  1E21                     l8790:	
 13834                           
 13835                           ;OverLoad_B1.c: 290: }
 13836                           ;OverLoad_B1.c: 291: if (lights == 3) {
 13837  1E21  0020               	movlb	0	; select bank0
 13838  1E22  0821               	movf	setLoad_StatusOff@lights,w
 13839  1E23  3A03               	xorlw	3
 13840  1E24  1D03               	skipz
 13841  1E25  0008               	return
 13842                           
 13843                           ;OverLoad_B1.c: 292: Load1.Lights3Status = 0;
 13844  1E26  0023               	movlb	3	; select bank3
 13845  1E27  01E5               	clrf	(_Load1^(0+384)+69)
 13846  1E28  0008               	return
 13847  1E29                     __end_of_setLoad_StatusOff:	
 13848                           
 13849                           	psect	text84
 13850  0CD2                     __ptext84:	
 13851 ;; *************** function _setDimmerLights *****************
 13852 ;; Defined at:
 13853 ;;		line 602 in file "../src/Dimmer_B1.c"
 13854 ;; Parameters:    Size  Location     Type
 13855 ;;  lights          1    wreg     unsigned char 
 13856 ;;  status          1    4[BANK0 ] unsigned char 
 13857 ;; Auto vars:     Size  Location     Type
 13858 ;;  lights          1    6[BANK0 ] unsigned char 
 13859 ;; Return value:  Size  Location     Type
 13860 ;;		None               void
 13861 ;; Registers used:
 13862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13863 ;; Tracked objects:
 13864 ;;		On entry : 0/0
 13865 ;;		On exit  : 0/0
 13866 ;;		Unchanged: 0/0
 13867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13868 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13871 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13872 ;;Total ram usage:        3 bytes
 13873 ;; Hardware stack levels used:    1
 13874 ;; Hardware stack levels required when called:    7
 13875 ;; This function calls:
 13876 ;;		_DimmerLightsPointSelect
 13877 ;;		_setLED
 13878 ;;		_setLoad_Count
 13879 ;;		_setLoad_StatusOn
 13880 ;;		_setMemory_GO
 13881 ;; This function is called by:
 13882 ;;		_setDimmerLights_Main
 13883 ;;		_setControl_Lights_Table
 13884 ;; This function uses a non-reentrant model
 13885 ;;
 13886                           
 13887                           
 13888                           ;psect for function _setDimmerLights
 13889  0CD2                     _setDimmerLights:	
 13890                           
 13891                           ;incstack = 0
 13892                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13893                           ;setDimmerLights@lights stored from wreg
 13894  0CD2  0020               	movlb	0	; select bank0
 13895  0CD3  00A6               	movwf	setDimmerLights@lights
 13896                           
 13897                           ;Dimmer_B1.c: 603: DimmerLightsPointSelect(lights);
 13898  0CD4  0826               	movf	setDimmerLights@lights,w
 13899  0CD5  319C  242C  318C   	fcall	_DimmerLightsPointSelect
 13900                           
 13901                           ;Dimmer_B1.c: 604: Dimmer->Load = lights;
 13902  0CD8  0020               	movlb	0	; select bank0
 13903  0CD9  0826               	movf	setDimmerLights@lights,w
 13904  0CDA  00A5               	movwf	??_setDimmerLights
 13905  0CDB  0A76               	incf	_Dimmer,w
 13906  0CDC  0086               	movwf	6
 13907  0CDD  3001               	movlw	1	; select bank2/3
 13908  0CDE  0087               	movwf	7
 13909  0CDF  0825               	movf	??_setDimmerLights,w
 13910  0CE0  0081               	movwf	1
 13911                           
 13912                           ;Dimmer_B1.c: 605: if (status == 1) {
 13913  0CE1  0824               	movf	setDimmerLights@status,w
 13914  0CE2  3A01               	xorlw	1
 13915  0CE3  1D03               	skipz
 13916  0CE4  2D2F               	goto	l8964
 13917                           
 13918                           ;Dimmer_B1.c: 606: DimmerLights->Status = 1;
 13919  0CE5  086B               	movf	_DimmerLights,w
 13920  0CE6  0086               	movwf	6
 13921  0CE7  3001               	movlw	1	; select bank2/3
 13922  0CE8  0087               	movwf	7
 13923  0CE9  1681               	bsf	1,5
 13924                           
 13925                           ;Dimmer_B1.c: 607: setLED(lights, 0);
 13926  0CEA  01A2               	clrf	setLED@command
 13927  0CEB  0826               	movf	setDimmerLights@lights,w
 13928  0CEC  3196  261F  318C   	fcall	_setLED
 13929                           
 13930                           ;Dimmer_B1.c: 609: setLoad_Count(0);
 13931  0CEF  3000               	movlw	0
 13932  0CF0  319B  2318  318C   	fcall	_setLoad_Count
 13933                           
 13934                           ;Dimmer_B1.c: 611: DimmerLights->Signal = 1;
 13935  0CF3  0020               	movlb	0	; select bank0
 13936  0CF4  086B               	movf	_DimmerLights,w
 13937  0CF5  0086               	movwf	6
 13938  0CF6  3001               	movlw	1	; select bank2/3
 13939  0CF7  0087               	movwf	7
 13940  0CF8  1481               	bsf	1,1
 13941                           
 13942                           ;Dimmer_B1.c: 612: DimmerLights->DimmingTimeValue = 7;
 13943  0CF9  3007               	movlw	7
 13944  0CFA  00A5               	movwf	??_setDimmerLights
 13945  0CFB  086B               	movf	_DimmerLights,w
 13946  0CFC  3E02               	addlw	2
 13947  0CFD  0086               	movwf	6
 13948  0CFE  3001               	movlw	1	; select bank2/3
 13949  0CFF  0087               	movwf	7
 13950  0D00  0825               	movf	??_setDimmerLights,w
 13951  0D01  0081               	movwf	1
 13952                           
 13953                           ;Dimmer_B1.c: 614: if (DimmerLights->StatusFlag == 0) {
 13954  0D02  086B               	movf	_DimmerLights,w
 13955  0D03  0086               	movwf	6
 13956  0D04  3001               	movlw	1	; select bank2/3
 13957  0D05  0087               	movwf	7
 13958  0D06  1B01               	btfsc	1,6
 13959  0D07  0008               	return
 13960                           
 13961                           ;Dimmer_B1.c: 615: DimmerLights->StatusFlag = 1;
 13962  0D08  086B               	movf	_DimmerLights,w
 13963  0D09  0086               	movwf	6
 13964  0D0A  3001               	movlw	1	; select bank2/3
 13965  0D0B  0087               	movwf	7
 13966  0D0C  1701               	bsf	1,6
 13967                           
 13968                           ;Dimmer_B1.c: 616: setLoad_StatusOn(lights, 1);
 13969  0D0D  01A0               	clrf	setLoad_StatusOn@command
 13970  0D0E  0AA0               	incf	setLoad_StatusOn@command,f
 13971  0D0F  0826               	movf	setDimmerLights@lights,w
 13972  0D10  319E  26ED  318C   	fcall	_setLoad_StatusOn
 13973                           
 13974                           ;Dimmer_B1.c: 617: setMemory_GO(0);
 13975  0D13  3000               	movlw	0
 13976  0D14  319C  24CF         	fcall	_setMemory_GO
 13977                           
 13978                           ;Dimmer_B1.c: 620: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13979  0D16  0020               	movlb	0	; select bank0
 13980  0D17  086B               	movf	_DimmerLights,w
 13981  0D18  3E05               	addlw	5
 13982  0D19  0086               	movwf	6
 13983  0D1A  3001               	movlw	1	; select bank2/3
 13984  0D1B  0087               	movwf	7
 13985  0D1C  0801               	movf	1,w
 13986  0D1D  00A5               	movwf	??_setDimmerLights
 13987  0D1E  086B               	movf	_DimmerLights,w
 13988  0D1F  3E04               	addlw	4
 13989  0D20  0086               	movwf	6
 13990  0D21  3001               	movlw	1	; select bank2/3
 13991  0D22  0087               	movwf	7
 13992  0D23  0825               	movf	??_setDimmerLights,w
 13993  0D24  0081               	movwf	1
 13994                           
 13995                           ;Dimmer_B1.c: 624: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 13996  0D25  3020               	movlw	32
 13997  0D26  00A5               	movwf	??_setDimmerLights
 13998  0D27  086B               	movf	_DimmerLights,w
 13999  0D28  3E04               	addlw	4
 14000  0D29  0086               	movwf	6
 14001  0D2A  3001               	movlw	1	; select bank2/3
 14002  0D2B  0087               	movwf	7
 14003  0D2C  0825               	movf	??_setDimmerLights,w
 14004  0D2D  0081               	movwf	1
 14005                           
 14006                           ;Dimmer_B1.c: 626: }
 14007                           ;Dimmer_B1.c: 627: } else {
 14008  0D2E  0008               	return
 14009  0D2F                     l8964:	
 14010                           
 14011                           ;Dimmer_B1.c: 628: DimmerLights->Status = 0;
 14012  0D2F  086B               	movf	_DimmerLights,w
 14013  0D30  0086               	movwf	6
 14014  0D31  3001               	movlw	1	; select bank2/3
 14015  0D32  0087               	movwf	7
 14016  0D33  1281               	bcf	1,5
 14017                           
 14018                           ;Dimmer_B1.c: 630: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14019  0D34  086B               	movf	_DimmerLights,w
 14020  0D35  3E06               	addlw	6
 14021  0D36  0086               	movwf	6
 14022  0D37  3001               	movlw	1	; select bank2/3
 14023  0D38  0087               	movwf	7
 14024  0D39  0801               	movf	1,w
 14025  0D3A  00A5               	movwf	??_setDimmerLights
 14026  0D3B  086B               	movf	_DimmerLights,w
 14027  0D3C  3E04               	addlw	4
 14028  0D3D  0086               	movwf	6
 14029  0D3E  3001               	movlw	1	; select bank2/3
 14030  0D3F  0087               	movwf	7
 14031  0D40  0825               	movf	??_setDimmerLights,w
 14032  0D41  0081               	movwf	1
 14033                           
 14034                           ;Dimmer_B1.c: 637: DimmerLights->Signal = 1;
 14035  0D42  086B               	movf	_DimmerLights,w
 14036  0D43  0086               	movwf	6
 14037  0D44  3001               	movlw	1	; select bank2/3
 14038  0D45  0087               	movwf	7
 14039  0D46  1481               	bsf	1,1
 14040                           
 14041                           ;Dimmer_B1.c: 638: DimmerLights->AdjFlag = 0;
 14042  0D47  086B               	movf	_DimmerLights,w
 14043  0D48  0086               	movwf	6
 14044  0D49  3001               	movlw	1	; select bank2/3
 14045  0D4A  0087               	movwf	7
 14046  0D4B  1181               	bcf	1,3
 14047                           
 14048                           ;Dimmer_B1.c: 639: DimmerLights->AdjStatus = 0;
 14049  0D4C  086B               	movf	_DimmerLights,w
 14050  0D4D  0086               	movwf	6
 14051  0D4E  3001               	movlw	1	; select bank2/3
 14052  0D4F  0087               	movwf	7
 14053  0D50  1201               	bcf	1,4
 14054                           
 14055                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 14056  0D51  3007               	movlw	7
 14057  0D52  00A5               	movwf	??_setDimmerLights
 14058  0D53  086B               	movf	_DimmerLights,w
 14059  0D54  3E02               	addlw	2
 14060  0D55  0086               	movwf	6
 14061  0D56  3001               	movlw	1	; select bank2/3
 14062  0D57  0087               	movwf	7
 14063  0D58  0825               	movf	??_setDimmerLights,w
 14064  0D59  0081               	movwf	1
 14065  0D5A  0008               	return
 14066  0D5B                     __end_of_setDimmerLights:	
 14067                           
 14068                           	psect	text85
 14069  1EED                     __ptext85:	
 14070 ;; *************** function _setLoad_StatusOn *****************
 14071 ;; Defined at:
 14072 ;;		line 267 in file "../src/OverLoad_B1.c"
 14073 ;; Parameters:    Size  Location     Type
 14074 ;;  lights          1    wreg     unsigned char 
 14075 ;;  command         1    0[BANK0 ] unsigned char 
 14076 ;; Auto vars:     Size  Location     Type
 14077 ;;  lights          1    1[BANK0 ] unsigned char 
 14078 ;; Return value:  Size  Location     Type
 14079 ;;		None               void
 14080 ;; Registers used:
 14081 ;;		wreg
 14082 ;; Tracked objects:
 14083 ;;		On entry : 0/0
 14084 ;;		On exit  : 0/0
 14085 ;;		Unchanged: 0/0
 14086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14087 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14088 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14090 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14091 ;;Total ram usage:        2 bytes
 14092 ;; Hardware stack levels used:    1
 14093 ;; Hardware stack levels required when called:    5
 14094 ;; This function calls:
 14095 ;;		Nothing
 14096 ;; This function is called by:
 14097 ;;		_setDimmerLights
 14098 ;; This function uses a non-reentrant model
 14099 ;;
 14100                           
 14101                           
 14102                           ;psect for function _setLoad_StatusOn
 14103  1EED                     _setLoad_StatusOn:	
 14104                           
 14105                           ;incstack = 0
 14106                           ; Regs used in _setLoad_StatusOn: [wreg]
 14107                           ;setLoad_StatusOn@lights stored from wreg
 14108  1EED  0020               	movlb	0	; select bank0
 14109  1EEE  00A1               	movwf	setLoad_StatusOn@lights
 14110                           
 14111                           ;OverLoad_B1.c: 268: Load1.GO = 1;
 14112  1EEF  0023               	movlb	3	; select bank3
 14113  1EF0  14A0               	bsf	_Load1^(0+384),1
 14114                           
 14115                           ;OverLoad_B1.c: 269: Load1.StatusOn = command;
 14116  1EF1  0020               	movlb	0	; select bank0
 14117  1EF2  0820               	movf	setLoad_StatusOn@command,w
 14118  1EF3  0023               	movlb	3	; select bank3
 14119  1EF4  1320               	bcf	_Load1^(0+384),6
 14120  1EF5  1D03               	skipz
 14121  1EF6  1720               	bsf	_Load1^(0+384),6
 14122                           
 14123                           ;OverLoad_B1.c: 271: if (lights == 1) {
 14124  1EF7  0020               	movlb	0	; select bank0
 14125  1EF8  0821               	movf	setLoad_StatusOn@lights,w
 14126  1EF9  3A01               	xorlw	1
 14127  1EFA  1D03               	skipz
 14128  1EFB  2EFF               	goto	l8858
 14129                           
 14130                           ;OverLoad_B1.c: 272: Load1.Lights1Status = 1;
 14131  1EFC  0023               	movlb	3	; select bank3
 14132  1EFD  01E3               	clrf	(_Load1^(0+384)+67)
 14133  1EFE  0AE3               	incf	(_Load1^(0+384)+67),f
 14134  1EFF                     l8858:	
 14135                           
 14136                           ;OverLoad_B1.c: 273: }
 14137                           ;OverLoad_B1.c: 274: if (lights == 2) {
 14138  1EFF  0020               	movlb	0	; select bank0
 14139  1F00  0821               	movf	setLoad_StatusOn@lights,w
 14140  1F01  3A02               	xorlw	2
 14141  1F02  1D03               	skipz
 14142  1F03  2F07               	goto	l8862
 14143                           
 14144                           ;OverLoad_B1.c: 275: Load1.Lights2Status = 1;
 14145  1F04  0023               	movlb	3	; select bank3
 14146  1F05  01E4               	clrf	(_Load1^(0+384)+68)
 14147  1F06  0AE4               	incf	(_Load1^(0+384)+68),f
 14148  1F07                     l8862:	
 14149                           
 14150                           ;OverLoad_B1.c: 276: }
 14151                           ;OverLoad_B1.c: 277: if (lights == 3) {
 14152  1F07  0020               	movlb	0	; select bank0
 14153  1F08  0821               	movf	setLoad_StatusOn@lights,w
 14154  1F09  3A03               	xorlw	3
 14155  1F0A  1D03               	skipz
 14156  1F0B  0008               	return
 14157                           
 14158                           ;OverLoad_B1.c: 278: Load1.Lights3Status = 1;
 14159  1F0C  0023               	movlb	3	; select bank3
 14160  1F0D  01E5               	clrf	(_Load1^(0+384)+69)
 14161  1F0E  0AE5               	incf	(_Load1^(0+384)+69),f
 14162  1F0F  0008               	return
 14163  1F10                     __end_of_setLoad_StatusOn:	
 14164                           
 14165                           	psect	text86
 14166  1B18                     __ptext86:	
 14167 ;; *************** function _setLoad_Count *****************
 14168 ;; Defined at:
 14169 ;;		line 252 in file "../src/OverLoad_B1.c"
 14170 ;; Parameters:    Size  Location     Type
 14171 ;;  command         1    wreg     unsigned char 
 14172 ;; Auto vars:     Size  Location     Type
 14173 ;;  command         1    1[BANK0 ] unsigned char 
 14174 ;; Return value:  Size  Location     Type
 14175 ;;		None               void
 14176 ;; Registers used:
 14177 ;;		wreg
 14178 ;; Tracked objects:
 14179 ;;		On entry : 0/0
 14180 ;;		On exit  : 0/0
 14181 ;;		Unchanged: 0/0
 14182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14186 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14187 ;;Total ram usage:        2 bytes
 14188 ;; Hardware stack levels used:    1
 14189 ;; Hardware stack levels required when called:    5
 14190 ;; This function calls:
 14191 ;;		Nothing
 14192 ;; This function is called by:
 14193 ;;		_setDimmerLights
 14194 ;; This function uses a non-reentrant model
 14195 ;;
 14196                           
 14197                           
 14198                           ;psect for function _setLoad_Count
 14199  1B18                     _setLoad_Count:	
 14200                           
 14201                           ;incstack = 0
 14202                           ; Regs used in _setLoad_Count: [wreg]
 14203                           ;setLoad_Count@command stored from wreg
 14204  1B18  0020               	movlb	0	; select bank0
 14205  1B19  00A1               	movwf	setLoad_Count@command
 14206                           
 14207                           ;OverLoad_B1.c: 253: Load1.Count = command;
 14208  1B1A  0821               	movf	setLoad_Count@command,w
 14209  1B1B  00A0               	movwf	??_setLoad_Count
 14210  1B1C  0820               	movf	??_setLoad_Count,w
 14211  1B1D  0023               	movlb	3	; select bank3
 14212  1B1E  00DA               	movwf	(_Load1^(0+384)+58)
 14213                           
 14214                           ;OverLoad_B1.c: 254: Load1.SafeCount = command;
 14215  1B1F  0020               	movlb	0	; select bank0
 14216  1B20  0821               	movf	setLoad_Count@command,w
 14217  1B21  00A0               	movwf	??_setLoad_Count
 14218  1B22  0820               	movf	??_setLoad_Count,w
 14219  1B23  0023               	movlb	3	; select bank3
 14220  1B24  00E2               	movwf	(_Load1^(0+384)+66)
 14221  1B25  0008               	return
 14222  1B26                     __end_of_setLoad_Count:	
 14223                           
 14224                           	psect	text87
 14225  161F                     __ptext87:	
 14226 ;; *************** function _setLED *****************
 14227 ;; Defined at:
 14228 ;;		line 70 in file "../src/LED_B1.c"
 14229 ;; Parameters:    Size  Location     Type
 14230 ;;  led             1    wreg     unsigned char 
 14231 ;;  command         1    2[BANK0 ] unsigned char 
 14232 ;; Auto vars:     Size  Location     Type
 14233 ;;  led             1    3[BANK0 ] unsigned char 
 14234 ;; Return value:  Size  Location     Type
 14235 ;;		None               void
 14236 ;; Registers used:
 14237 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14238 ;; Tracked objects:
 14239 ;;		On entry : 0/0
 14240 ;;		On exit  : 0/0
 14241 ;;		Unchanged: 0/0
 14242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14243 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14244 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14246 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14247 ;;Total ram usage:        2 bytes
 14248 ;; Hardware stack levels used:    1
 14249 ;; Hardware stack levels required when called:    6
 14250 ;; This function calls:
 14251 ;;		_LedPointSelect
 14252 ;; This function is called by:
 14253 ;;		_setDimmerLights_ERROR
 14254 ;;		_setDimmerLights
 14255 ;;		_setLED_Initialization
 14256 ;;		_setLoad_Exceptions
 14257 ;;		_setOverTemp_Exceptions
 14258 ;;		_setSw_Initialization
 14259 ;; This function uses a non-reentrant model
 14260 ;;
 14261                           
 14262                           
 14263                           ;psect for function _setLED
 14264  161F                     _setLED:	
 14265                           
 14266                           ;incstack = 0
 14267                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14268                           ;setLED@led stored from wreg
 14269  161F  0020               	movlb	0	; select bank0
 14270  1620  00A3               	movwf	setLED@led
 14271                           
 14272                           ;LED_B1.c: 71: LedPointSelect(led);
 14273  1621  0823               	movf	setLED@led,w
 14274  1622  319D  25B0  3196   	fcall	_LedPointSelect
 14275                           
 14276                           ;LED_B1.c: 72: if (command == 0) {
 14277  1625  0020               	movlb	0	; select bank0
 14278  1626  08A2               	movf	setLED@command,f
 14279  1627  1D03               	skipz
 14280  1628  2E3B               	goto	l8816
 14281                           
 14282                           ;LED_B1.c: 74: if (led == 1) {
 14283  1629  0823               	movf	setLED@led,w
 14284  162A  3A01               	xorlw	1
 14285  162B  1D03               	skipz
 14286  162C  2E2F               	goto	l8808
 14287                           
 14288                           ;LED_B1.c: 78: RA3 = 1;
 14289  162D  158C               	bsf	12,3	;volatile
 14290                           
 14291                           ;LED_B1.c: 80: }
 14292  162E  0008               	return
 14293  162F                     l8808:	
 14294                           
 14295                           ;LED_B1.c: 83: else if (led == 2) {
 14296  162F  0823               	movf	setLED@led,w
 14297  1630  3A02               	xorlw	2
 14298  1631  1D03               	skipz
 14299  1632  2E35               	goto	l8812
 14300                           
 14301                           ;LED_B1.c: 87: RC7 = 1;
 14302  1633  178E               	bsf	14,7	;volatile
 14303                           
 14304                           ;LED_B1.c: 89: }
 14305  1634  0008               	return
 14306  1635                     l8812:	
 14307                           
 14308                           ;LED_B1.c: 101: else if (led == 99) {
 14309  1635  0823               	movf	setLED@led,w
 14310  1636  3A63               	xorlw	99
 14311  1637  1D03               	skipz
 14312  1638  0008               	return
 14313                           
 14314                           ;LED_B1.c: 105: RB5 = 1;
 14315  1639  168D               	bsf	13,5	;volatile
 14316                           
 14317                           ;LED_B1.c: 107: }
 14318                           ;LED_B1.c: 109: } else if (command == 1) {
 14319  163A  0008               	return
 14320  163B                     l8816:	
 14321  163B  0822               	movf	setLED@command,w
 14322  163C  3A01               	xorlw	1
 14323  163D  1D03               	skipz
 14324  163E  2E51               	goto	l8830
 14325                           
 14326                           ;LED_B1.c: 111: if (led == 1) {
 14327  163F  0823               	movf	setLED@led,w
 14328  1640  3A01               	xorlw	1
 14329  1641  1D03               	skipz
 14330  1642  2E45               	goto	l8822
 14331                           
 14332                           ;LED_B1.c: 115: RA3 = 0;
 14333  1643  118C               	bcf	12,3	;volatile
 14334                           
 14335                           ;LED_B1.c: 117: }
 14336  1644  0008               	return
 14337  1645                     l8822:	
 14338                           
 14339                           ;LED_B1.c: 120: else if (led == 2) {
 14340  1645  0823               	movf	setLED@led,w
 14341  1646  3A02               	xorlw	2
 14342  1647  1D03               	skipz
 14343  1648  2E4B               	goto	l8826
 14344                           
 14345                           ;LED_B1.c: 124: RC7 = 0;
 14346  1649  138E               	bcf	14,7	;volatile
 14347                           
 14348                           ;LED_B1.c: 126: }
 14349  164A  0008               	return
 14350  164B                     l8826:	
 14351                           
 14352                           ;LED_B1.c: 138: else if (led == 99) {
 14353  164B  0823               	movf	setLED@led,w
 14354  164C  3A63               	xorlw	99
 14355  164D  1D03               	skipz
 14356  164E  0008               	return
 14357                           
 14358                           ;LED_B1.c: 142: RB5 = 0;
 14359  164F  128D               	bcf	13,5	;volatile
 14360                           
 14361                           ;LED_B1.c: 144: }
 14362                           ;LED_B1.c: 146: } else if (command == 10) {
 14363  1650  0008               	return
 14364  1651                     l8830:	
 14365  1651  0822               	movf	setLED@command,w
 14366  1652  3A0A               	xorlw	10
 14367  1653  1D03               	skipz
 14368  1654  2E73               	goto	l8846
 14369                           
 14370                           ;LED_B1.c: 147: LED->GO = 0;
 14371  1655  0878               	movf	_LED,w
 14372  1656  0086               	movwf	6
 14373  1657  3001               	movlw	1	; select bank2/3
 14374  1658  0087               	movwf	7
 14375  1659  1081               	bcf	1,1
 14376                           
 14377                           ;LED_B1.c: 148: LED->Time = 0;
 14378  165A  0A78               	incf	_LED,w
 14379  165B  0086               	movwf	6
 14380  165C  3001               	movlw	1	; select bank2/3
 14381  165D  0087               	movwf	7
 14382  165E  3000               	movlw	0
 14383  165F  3FC0               	movwi [0]fsr1
 14384  1660  3FC1               	movwi [1]fsr1
 14385                           
 14386                           ;LED_B1.c: 150: if (led == 1) {
 14387  1661  0823               	movf	setLED@led,w
 14388  1662  3A01               	xorlw	1
 14389  1663  1D03               	skipz
 14390  1664  2E67               	goto	l8838
 14391                           
 14392                           ;LED_B1.c: 154: RA3 = 1;
 14393  1665  158C               	bsf	12,3	;volatile
 14394                           
 14395                           ;LED_B1.c: 156: }
 14396  1666  0008               	return
 14397  1667                     l8838:	
 14398                           
 14399                           ;LED_B1.c: 159: else if (led == 2) {
 14400  1667  0823               	movf	setLED@led,w
 14401  1668  3A02               	xorlw	2
 14402  1669  1D03               	skipz
 14403  166A  2E6D               	goto	l8842
 14404                           
 14405                           ;LED_B1.c: 163: RC7 = 1;
 14406  166B  178E               	bsf	14,7	;volatile
 14407                           
 14408                           ;LED_B1.c: 165: }
 14409  166C  0008               	return
 14410  166D                     l8842:	
 14411                           
 14412                           ;LED_B1.c: 177: else if (led == 99) {
 14413  166D  0823               	movf	setLED@led,w
 14414  166E  3A63               	xorlw	99
 14415  166F  1D03               	skipz
 14416  1670  0008               	return
 14417                           
 14418                           ;LED_B1.c: 181: RB5 = 1;
 14419  1671  168D               	bsf	13,5	;volatile
 14420                           
 14421                           ;LED_B1.c: 183: }
 14422                           ;LED_B1.c: 185: } else if (command == 11) {
 14423  1672  0008               	return
 14424  1673                     l8846:	
 14425  1673  0822               	movf	setLED@command,w
 14426  1674  3A0B               	xorlw	11
 14427  1675  1D03               	skipz
 14428  1676  0008               	return
 14429                           
 14430                           ;LED_B1.c: 186: LED->GO = 1;
 14431  1677  0878               	movf	_LED,w
 14432  1678  0086               	movwf	6
 14433  1679  3001               	movlw	1	; select bank2/3
 14434  167A  0087               	movwf	7
 14435  167B  1481               	bsf	1,1
 14436  167C  0008               	return
 14437  167D                     __end_of_setLED:	
 14438                           
 14439                           	psect	text88
 14440  1DB0                     __ptext88:	
 14441 ;; *************** function _LedPointSelect *****************
 14442 ;; Defined at:
 14443 ;;		line 7 in file "../src/LED_B1.c"
 14444 ;; Parameters:    Size  Location     Type
 14445 ;;  led             1    wreg     unsigned char 
 14446 ;; Auto vars:     Size  Location     Type
 14447 ;;  led             1    1[BANK0 ] unsigned char 
 14448 ;; Return value:  Size  Location     Type
 14449 ;;		None               void
 14450 ;; Registers used:
 14451 ;;		wreg
 14452 ;; Tracked objects:
 14453 ;;		On entry : 0/0
 14454 ;;		On exit  : 0/0
 14455 ;;		Unchanged: 0/0
 14456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14458 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14459 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14460 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14461 ;;Total ram usage:        2 bytes
 14462 ;; Hardware stack levels used:    1
 14463 ;; Hardware stack levels required when called:    5
 14464 ;; This function calls:
 14465 ;;		Nothing
 14466 ;; This function is called by:
 14467 ;;		_setLED_Initialization
 14468 ;;		_setLED
 14469 ;;		_setLED_Main
 14470 ;; This function uses a non-reentrant model
 14471 ;;
 14472                           
 14473                           
 14474                           ;psect for function _LedPointSelect
 14475  1DB0                     _LedPointSelect:	
 14476                           
 14477                           ;incstack = 0
 14478                           ; Regs used in _LedPointSelect: [wreg]
 14479                           ;LedPointSelect@led stored from wreg
 14480  1DB0  0020               	movlb	0	; select bank0
 14481  1DB1  00A1               	movwf	LedPointSelect@led
 14482                           
 14483                           ;LED_B1.c: 9: if (led == 1) {
 14484  1DB2  0821               	movf	LedPointSelect@led,w
 14485  1DB3  3A01               	xorlw	1
 14486  1DB4  1D03               	skipz
 14487  1DB5  2DBB               	goto	l8580
 14488                           
 14489                           ;LED_B1.c: 10: LED = &VarLED1;
 14490  1DB6  3060               	movlw	_VarLED1& (0+255)
 14491  1DB7  00A0               	movwf	??_LedPointSelect
 14492  1DB8  0820               	movf	??_LedPointSelect,w
 14493  1DB9  00F8               	movwf	_LED
 14494                           
 14495                           ;LED_B1.c: 11: }
 14496  1DBA  0008               	return
 14497  1DBB                     l8580:	
 14498                           
 14499                           ;LED_B1.c: 14: else if (led == 2) {
 14500  1DBB  0821               	movf	LedPointSelect@led,w
 14501  1DBC  3A02               	xorlw	2
 14502  1DBD  1D03               	skipz
 14503  1DBE  2DC4               	goto	l8584
 14504                           
 14505                           ;LED_B1.c: 15: LED = &VarLED2;
 14506  1DBF  3064               	movlw	_VarLED2& (0+255)
 14507  1DC0  00A0               	movwf	??_LedPointSelect
 14508  1DC1  0820               	movf	??_LedPointSelect,w
 14509  1DC2  00F8               	movwf	_LED
 14510                           
 14511                           ;LED_B1.c: 16: }
 14512  1DC3  0008               	return
 14513  1DC4                     l8584:	
 14514                           
 14515                           ;LED_B1.c: 24: else if (led == 99) {
 14516  1DC4  0821               	movf	LedPointSelect@led,w
 14517  1DC5  3A63               	xorlw	99
 14518  1DC6  1D03               	skipz
 14519  1DC7  0008               	return
 14520                           
 14521                           ;LED_B1.c: 25: LED = &VarErrLED;
 14522  1DC8  305C               	movlw	_VarErrLED& (0+255)
 14523  1DC9  00A0               	movwf	??_LedPointSelect
 14524  1DCA  0820               	movf	??_LedPointSelect,w
 14525  1DCB  00F8               	movwf	_LED
 14526  1DCC  0008               	return
 14527  1DCD                     __end_of_LedPointSelect:	
 14528                           
 14529                           	psect	text89
 14530  1D2C                     __ptext89:	
 14531 ;; *************** function _DimmerLights_Close *****************
 14532 ;; Defined at:
 14533 ;;		line 405 in file "../src/Dimmer_B1.c"
 14534 ;; Parameters:    Size  Location     Type
 14535 ;;		None
 14536 ;; Auto vars:     Size  Location     Type
 14537 ;;		None
 14538 ;; Return value:  Size  Location     Type
 14539 ;;		None               void
 14540 ;; Registers used:
 14541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14542 ;; Tracked objects:
 14543 ;;		On entry : 0/0
 14544 ;;		On exit  : 0/0
 14545 ;;		Unchanged: 0/0
 14546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14551 ;;Total ram usage:        0 bytes
 14552 ;; Hardware stack levels used:    1
 14553 ;; Hardware stack levels required when called:    6
 14554 ;; This function calls:
 14555 ;;		_getDimmerLights_StatusFlag
 14556 ;;		_setLoad_GO
 14557 ;;		_setMemory_GO
 14558 ;; This function is called by:
 14559 ;;		_DimmerLights_Main
 14560 ;; This function uses a non-reentrant model
 14561 ;;
 14562                           
 14563                           
 14564                           ;psect for function _DimmerLights_Close
 14565  1D2C                     _DimmerLights_Close:	
 14566                           
 14567                           ;Dimmer_B1.c: 406: if (Dimmer->Detect == 1) {
 14568                           
 14569                           ;incstack = 0
 14570                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14571  1D2C  0876               	movf	_Dimmer,w
 14572  1D2D  0086               	movwf	6
 14573  1D2E  3001               	movlw	1	; select bank2/3
 14574  1D2F  0087               	movwf	7
 14575  1D30  1C01               	btfss	1,0
 14576  1D31  0008               	return
 14577                           
 14578                           ;Dimmer_B1.c: 407: Dimmer->Detect = 0;
 14579  1D32  0876               	movf	_Dimmer,w
 14580  1D33  0086               	movwf	6
 14581  1D34  3001               	movlw	1	; select bank2/3
 14582  1D35  0087               	movwf	7
 14583  1D36  1001               	bcf	1,0
 14584                           
 14585                           ;Dimmer_B1.c: 408: if (getDimmerLights_StatusFlag() == 0) {
 14586  1D37  319B  23B1  319D   	fcall	_getDimmerLights_StatusFlag
 14587  1D3A  3800               	iorlw	0
 14588  1D3B  1D03               	skipz
 14589  1D3C  0008               	return
 14590                           
 14591                           ;Dimmer_B1.c: 409: setLoad_GO(0);
 14592  1D3D  3000               	movlw	0
 14593  1D3E  319A  2231  319D   	fcall	_setLoad_GO
 14594                           
 14595                           ;Dimmer_B1.c: 410: setMemory_GO(1);
 14596  1D41  3001               	movlw	1
 14597  1D42  319C  24CF         	fcall	_setMemory_GO
 14598  1D44  0008               	return
 14599  1D45                     __end_of_DimmerLights_Close:	
 14600                           
 14601                           	psect	text90
 14602  1CCF                     __ptext90:	
 14603 ;; *************** function _setMemory_GO *****************
 14604 ;; Defined at:
 14605 ;;		line 995 in file "../src/MCU_B1.c"
 14606 ;; Parameters:    Size  Location     Type
 14607 ;;  command         1    wreg     unsigned char 
 14608 ;; Auto vars:     Size  Location     Type
 14609 ;;  command         1    2[BANK0 ] unsigned char 
 14610 ;; Return value:  Size  Location     Type
 14611 ;;		None               void
 14612 ;; Registers used:
 14613 ;;		wreg, status,2, status,0
 14614 ;; Tracked objects:
 14615 ;;		On entry : 0/0
 14616 ;;		On exit  : 0/0
 14617 ;;		Unchanged: 0/0
 14618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14620 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14621 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14622 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14623 ;;Total ram usage:        3 bytes
 14624 ;; Hardware stack levels used:    1
 14625 ;; Hardware stack levels required when called:    5
 14626 ;; This function calls:
 14627 ;;		Nothing
 14628 ;; This function is called by:
 14629 ;;		_DimmerLights_Close
 14630 ;;		_setDimmerLights
 14631 ;; This function uses a non-reentrant model
 14632 ;;
 14633                           
 14634                           
 14635                           ;psect for function _setMemory_GO
 14636  1CCF                     _setMemory_GO:	
 14637                           
 14638                           ;incstack = 0
 14639                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 14640                           ;setMemory_GO@command stored from wreg
 14641  1CCF  0020               	movlb	0	; select bank0
 14642  1CD0  00A2               	movwf	setMemory_GO@command
 14643                           
 14644                           ;MCU_B1.c: 996: Memory.GO = command;
 14645  1CD1  0822               	movf	setMemory_GO@command,w
 14646  1CD2  0024               	movlb	4	; select bank4
 14647  1CD3  10C4               	bcf	(_Memory^(0+512)+36),1
 14648  1CD4  1D03               	skipz
 14649  1CD5  14C4               	bsf	(_Memory^(0+512)+36),1
 14650                           
 14651                           ;MCU_B1.c: 997: if (command == 0) {
 14652  1CD6  0020               	movlb	0	; select bank0
 14653  1CD7  08A2               	movf	setMemory_GO@command,f
 14654  1CD8  1D03               	skipz
 14655  1CD9  0008               	return
 14656                           
 14657                           ;MCU_B1.c: 998: Memory.Time = command;
 14658  1CDA  0822               	movf	setMemory_GO@command,w
 14659  1CDB  00A0               	movwf	??_setMemory_GO
 14660  1CDC  01A1               	clrf	??_setMemory_GO+1
 14661  1CDD  0820               	movf	??_setMemory_GO,w
 14662  1CDE  0024               	movlb	4	; select bank4
 14663  1CDF  00C2               	movwf	(_Memory^(0+512)+34)
 14664  1CE0  0020               	movlb	0	; select bank0
 14665  1CE1  0821               	movf	??_setMemory_GO+1,w
 14666  1CE2  0024               	movlb	4	; select bank4
 14667  1CE3  00C3               	movwf	((_Memory+1)^(0+512)+34)
 14668  1CE4  0008               	return
 14669  1CE5                     __end_of_setMemory_GO:	
 14670                           
 14671                           	psect	text91
 14672  1A31                     __ptext91:	
 14673 ;; *************** function _setLoad_GO *****************
 14674 ;; Defined at:
 14675 ;;		line 263 in file "../src/OverLoad_B1.c"
 14676 ;; Parameters:    Size  Location     Type
 14677 ;;  command         1    wreg     unsigned char 
 14678 ;; Auto vars:     Size  Location     Type
 14679 ;;  command         1    0[BANK0 ] unsigned char 
 14680 ;; Return value:  Size  Location     Type
 14681 ;;		None               void
 14682 ;; Registers used:
 14683 ;;		wreg
 14684 ;; Tracked objects:
 14685 ;;		On entry : 0/0
 14686 ;;		On exit  : 0/0
 14687 ;;		Unchanged: 0/0
 14688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14692 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14693 ;;Total ram usage:        1 bytes
 14694 ;; Hardware stack levels used:    1
 14695 ;; Hardware stack levels required when called:    5
 14696 ;; This function calls:
 14697 ;;		Nothing
 14698 ;; This function is called by:
 14699 ;;		_DimmerLights_Close
 14700 ;; This function uses a non-reentrant model
 14701 ;;
 14702                           
 14703                           
 14704                           ;psect for function _setLoad_GO
 14705  1A31                     _setLoad_GO:	
 14706                           
 14707                           ;incstack = 0
 14708                           ; Regs used in _setLoad_GO: [wreg]
 14709                           ;setLoad_GO@command stored from wreg
 14710  1A31  0020               	movlb	0	; select bank0
 14711  1A32  00A0               	movwf	setLoad_GO@command
 14712                           
 14713                           ;OverLoad_B1.c: 264: Load1.GO = command;
 14714  1A33  0820               	movf	setLoad_GO@command,w
 14715  1A34  0023               	movlb	3	; select bank3
 14716  1A35  10A0               	bcf	_Load1^(0+384),1
 14717  1A36  1D03               	skipz
 14718  1A37  14A0               	bsf	_Load1^(0+384),1
 14719  1A38  0008               	return
 14720  1A39                     __end_of_setLoad_GO:	
 14721                           
 14722                           	psect	text92
 14723  1BB1                     __ptext92:	
 14724 ;; *************** function _getDimmerLights_StatusFlag *****************
 14725 ;; Defined at:
 14726 ;;		line 484 in file "../src/Dimmer_B1.c"
 14727 ;; Parameters:    Size  Location     Type
 14728 ;;		None
 14729 ;; Auto vars:     Size  Location     Type
 14730 ;;  Status          1    1[BANK0 ] unsigned char 
 14731 ;; Return value:  Size  Location     Type
 14732 ;;                  1    wreg      unsigned char 
 14733 ;; Registers used:
 14734 ;;		wreg, status,2
 14735 ;; Tracked objects:
 14736 ;;		On entry : 0/0
 14737 ;;		On exit  : 0/0
 14738 ;;		Unchanged: 0/0
 14739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14741 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14742 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14743 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14744 ;;Total ram usage:        3 bytes
 14745 ;; Hardware stack levels used:    1
 14746 ;; Hardware stack levels required when called:    5
 14747 ;; This function calls:
 14748 ;;		Nothing
 14749 ;; This function is called by:
 14750 ;;		_DimmerLights_Close
 14751 ;;		_DimmerLights_Exceptions
 14752 ;; This function uses a non-reentrant model
 14753 ;;
 14754                           
 14755                           
 14756                           ;psect for function _getDimmerLights_StatusFlag
 14757  1BB1                     _getDimmerLights_StatusFlag:	
 14758                           
 14759                           ;Dimmer_B1.c: 485: char Status = 0;
 14760                           
 14761                           ;incstack = 0
 14762                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 14763  1BB1  0020               	movlb	0	; select bank0
 14764  1BB2  01A1               	clrf	getDimmerLights_StatusFlag@Status
 14765                           
 14766                           ;Dimmer_B1.c: 492: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 14767  1BB3  01A2               	clrf	_getDimmerLights_StatusFlag$2618
 14768  1BB4  0AA2               	incf	_getDimmerLights_StatusFlag$2618,f
 14769  1BB5  0022               	movlb	2	; select bank2
 14770  1BB6  1F35               	btfss	_DimmerLights1^(0+256),6
 14771  1BB7  1B44               	btfsc	_DimmerLights2^(0+256),6
 14772  1BB8  2BBB               	goto	l8934
 14773  1BB9  0020               	movlb	0	; select bank0
 14774  1BBA  01A2               	clrf	_getDimmerLights_StatusFlag$2618
 14775  1BBB                     l8934:	
 14776  1BBB  0020               	movlb	0	; select bank0
 14777  1BBC  0822               	movf	_getDimmerLights_StatusFlag$2618,w
 14778  1BBD  00A0               	movwf	??_getDimmerLights_StatusFlag
 14779  1BBE  0820               	movf	??_getDimmerLights_StatusFlag,w
 14780  1BBF  00A1               	movwf	getDimmerLights_StatusFlag@Status
 14781                           
 14782                           ;Dimmer_B1.c: 499: return Status;
 14783  1BC0  0821               	movf	getDimmerLights_StatusFlag@Status,w
 14784  1BC1  0008               	return
 14785  1BC2                     __end_of_getDimmerLights_StatusFlag:	
 14786                           
 14787                           	psect	text93
 14788  1CE5                     __ptext93:	
 14789 ;; *************** function _DimmerLights_Initialization *****************
 14790 ;; Defined at:
 14791 ;;		line 343 in file "../src/Dimmer_B1.c"
 14792 ;; Parameters:    Size  Location     Type
 14793 ;;		None
 14794 ;; Auto vars:     Size  Location     Type
 14795 ;;		None
 14796 ;; Return value:  Size  Location     Type
 14797 ;;		None               void
 14798 ;; Registers used:
 14799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14800 ;; Tracked objects:
 14801 ;;		On entry : 0/0
 14802 ;;		On exit  : 0/0
 14803 ;;		Unchanged: 0/0
 14804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14808 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14809 ;;Total ram usage:        1 bytes
 14810 ;; Hardware stack levels used:    1
 14811 ;; Hardware stack levels required when called:    7
 14812 ;; This function calls:
 14813 ;;		_Dimmer_Initialization
 14814 ;;		_setDimmerLights_Initialization
 14815 ;; This function is called by:
 14816 ;;		_main
 14817 ;; This function uses a non-reentrant model
 14818 ;;
 14819                           
 14820                           
 14821                           ;psect for function _DimmerLights_Initialization
 14822  1CE5                     _DimmerLights_Initialization:	
 14823                           
 14824                           ;Dimmer_B1.c: 346: DimmerLights11 = &DimmerLights1;
 14825                           
 14826                           ;incstack = 0
 14827                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14828  1CE5  3035               	movlw	_DimmerLights1& (0+255)
 14829  1CE6  0020               	movlb	0	; select bank0
 14830  1CE7  00A4               	movwf	??_DimmerLights_Initialization
 14831  1CE8  0824               	movf	??_DimmerLights_Initialization,w
 14832  1CE9  0021               	movlb	1	; select bank1
 14833  1CEA  00D3               	movwf	_DimmerLights11^(0+128)
 14834                           
 14835                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(1);
 14836  1CEB  3001               	movlw	1
 14837  1CEC  3190  206B  319C   	fcall	_setDimmerLights_Initialization
 14838                           
 14839                           ;Dimmer_B1.c: 351: DimmerLights22 = &DimmerLights2;
 14840  1CEF  3044               	movlw	_DimmerLights2& (0+255)
 14841  1CF0  0020               	movlb	0	; select bank0
 14842  1CF1  00A4               	movwf	??_DimmerLights_Initialization
 14843  1CF2  0824               	movf	??_DimmerLights_Initialization,w
 14844  1CF3  0021               	movlb	1	; select bank1
 14845  1CF4  00D4               	movwf	_DimmerLights22^(0+128)
 14846                           
 14847                           ;Dimmer_B1.c: 352: setDimmerLights_Initialization(2);
 14848  1CF5  3002               	movlw	2
 14849  1CF6  3190  206B  319C   	fcall	_setDimmerLights_Initialization
 14850                           
 14851                           ;Dimmer_B1.c: 361: Dimmer_Initialization();
 14852  1CF9  319A  2200         	fcall	_Dimmer_Initialization
 14853  1CFB  0008               	return
 14854  1CFC                     __end_of_DimmerLights_Initialization:	
 14855                           
 14856                           	psect	text94
 14857  106B                     __ptext94:	
 14858 ;; *************** function _setDimmerLights_Initialization *****************
 14859 ;; Defined at:
 14860 ;;		line 366 in file "../src/Dimmer_B1.c"
 14861 ;; Parameters:    Size  Location     Type
 14862 ;;  lights          1    wreg     unsigned char 
 14863 ;; Auto vars:     Size  Location     Type
 14864 ;;  lights          1    3[BANK0 ] unsigned char 
 14865 ;; Return value:  Size  Location     Type
 14866 ;;		None               void
 14867 ;; Registers used:
 14868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14869 ;; Tracked objects:
 14870 ;;		On entry : 0/0
 14871 ;;		On exit  : 0/0
 14872 ;;		Unchanged: 0/0
 14873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14877 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14878 ;;Total ram usage:        2 bytes
 14879 ;; Hardware stack levels used:    1
 14880 ;; Hardware stack levels required when called:    6
 14881 ;; This function calls:
 14882 ;;		_DimmerLightsPointSelect
 14883 ;; This function is called by:
 14884 ;;		_DimmerLights_Initialization
 14885 ;; This function uses a non-reentrant model
 14886 ;;
 14887                           
 14888                           
 14889                           ;psect for function _setDimmerLights_Initialization
 14890  106B                     _setDimmerLights_Initialization:	
 14891                           
 14892                           ;incstack = 0
 14893                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14894                           ;setDimmerLights_Initialization@lights stored from wreg
 14895  106B  0020               	movlb	0	; select bank0
 14896  106C  00A3               	movwf	setDimmerLights_Initialization@lights
 14897                           
 14898                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 14899  106D  0823               	movf	setDimmerLights_Initialization@lights,w
 14900  106E  319C  242C         	fcall	_DimmerLightsPointSelect
 14901                           
 14902                           ;Dimmer_B1.c: 369: DimmerLights->Clear = 1;
 14903  1070  0020               	movlb	0	; select bank0
 14904  1071  086B               	movf	_DimmerLights,w
 14905  1072  3E09               	addlw	9
 14906  1073  0086               	movwf	6
 14907  1074  3001               	movlw	1	; select bank2/3
 14908  1075  0087               	movwf	7
 14909  1076  1501               	bsf	1,2
 14910                           
 14911                           ;Dimmer_B1.c: 375: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 14912  1077  3020               	movlw	32
 14913  1078  00A2               	movwf	??_setDimmerLights_Initialization
 14914  1079  086B               	movf	_DimmerLights,w
 14915  107A  3E05               	addlw	5
 14916  107B  0086               	movwf	6
 14917  107C  3001               	movlw	1	; select bank2/3
 14918  107D  0087               	movwf	7
 14919  107E  0822               	movf	??_setDimmerLights_Initialization,w
 14920  107F  0081               	movwf	1
 14921                           
 14922                           ;Dimmer_B1.c: 376: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 14923  1080  303C               	movlw	60
 14924  1081  00A2               	movwf	??_setDimmerLights_Initialization
 14925  1082  086B               	movf	_DimmerLights,w
 14926  1083  3E06               	addlw	6
 14927  1084  0086               	movwf	6
 14928  1085  3001               	movlw	1	; select bank2/3
 14929  1086  0087               	movwf	7
 14930  1087  0822               	movf	??_setDimmerLights_Initialization,w
 14931  1088  0081               	movwf	1
 14932                           
 14933                           ;Dimmer_B1.c: 386: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14934  1089  086B               	movf	_DimmerLights,w
 14935  108A  3E06               	addlw	6
 14936  108B  0086               	movwf	6
 14937  108C  3001               	movlw	1	; select bank2/3
 14938  108D  0087               	movwf	7
 14939  108E  0801               	movf	1,w
 14940  108F  00A2               	movwf	??_setDimmerLights_Initialization
 14941  1090  086B               	movf	_DimmerLights,w
 14942  1091  3E04               	addlw	4
 14943  1092  0086               	movwf	6
 14944  1093  3001               	movlw	1	; select bank2/3
 14945  1094  0087               	movwf	7
 14946  1095  0822               	movf	??_setDimmerLights_Initialization,w
 14947  1096  0081               	movwf	1
 14948  1097  0008               	return
 14949  1098                     __end_of_setDimmerLights_Initialization:	
 14950                           
 14951                           	psect	text95
 14952  1A00                     __ptext95:	
 14953 ;; *************** function _Dimmer_Initialization *****************
 14954 ;; Defined at:
 14955 ;;		line 795 in file "../src/Dimmer_B1.c"
 14956 ;; Parameters:    Size  Location     Type
 14957 ;;		None
 14958 ;; Auto vars:     Size  Location     Type
 14959 ;;		None
 14960 ;; Return value:  Size  Location     Type
 14961 ;;		None               void
 14962 ;; Registers used:
 14963 ;;		wreg
 14964 ;; Tracked objects:
 14965 ;;		On entry : 0/0
 14966 ;;		On exit  : 0/0
 14967 ;;		Unchanged: 0/0
 14968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14972 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;Total ram usage:        1 bytes
 14974 ;; Hardware stack levels used:    1
 14975 ;; Hardware stack levels required when called:    5
 14976 ;; This function calls:
 14977 ;;		Nothing
 14978 ;; This function is called by:
 14979 ;;		_DimmerLights_Initialization
 14980 ;; This function uses a non-reentrant model
 14981 ;;
 14982                           
 14983                           
 14984                           ;psect for function _Dimmer_Initialization
 14985  1A00                     _Dimmer_Initialization:	
 14986                           
 14987                           ;Dimmer_B1.c: 797: Dimmer = &Dimmer1;
 14988                           
 14989                           ;incstack = 0
 14990                           ; Regs used in _Dimmer_Initialization: [wreg]
 14991  1A00  3068               	movlw	_Dimmer1& (0+255)
 14992  1A01  0020               	movlb	0	; select bank0
 14993  1A02  00A0               	movwf	??_Dimmer_Initialization
 14994  1A03  0820               	movf	??_Dimmer_Initialization,w
 14995  1A04  00F6               	movwf	_Dimmer
 14996  1A05  0008               	return
 14997  1A06                     __end_of_Dimmer_Initialization:	
 14998                           
 14999                           	psect	text96
 15000  1A29                     __ptext96:	
 15001 ;; *************** function _DelayOff_Main *****************
 15002 ;; Defined at:
 15003 ;;		line 41 in file "../src/DelayOff_B1.c"
 15004 ;; Parameters:    Size  Location     Type
 15005 ;;		None
 15006 ;; Auto vars:     Size  Location     Type
 15007 ;;		None
 15008 ;; Return value:  Size  Location     Type
 15009 ;;		None               void
 15010 ;; Registers used:
 15011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15012 ;; Tracked objects:
 15013 ;;		On entry : 0/0
 15014 ;;		On exit  : 0/0
 15015 ;;		Unchanged: 0/0
 15016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15021 ;;Total ram usage:        0 bytes
 15022 ;; Hardware stack levels used:    1
 15023 ;; Hardware stack levels required when called:   10
 15024 ;; This function calls:
 15025 ;;		_DlyOff_Main
 15026 ;; This function is called by:
 15027 ;;		_main
 15028 ;; This function uses a non-reentrant model
 15029 ;;
 15030                           
 15031                           
 15032                           ;psect for function _DelayOff_Main
 15033  1A29                     _DelayOff_Main:	
 15034                           
 15035                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15036                           
 15037                           ;incstack = 0
 15038                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15039  1A29  3001               	movlw	1
 15040  1A2A  3188  20B0  319A   	fcall	_DlyOff_Main
 15041                           
 15042                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15043  1A2D  3002               	movlw	2
 15044  1A2E  3188  20B0         	fcall	_DlyOff_Main
 15045  1A30  0008               	return
 15046  1A31                     __end_of_DelayOff_Main:	
 15047                           
 15048                           	psect	text97
 15049  08B0                     __ptext97:	
 15050 ;; *************** function _DlyOff_Main *****************
 15051 ;; Defined at:
 15052 ;;		line 62 in file "../src/DelayOff_B1.c"
 15053 ;; Parameters:    Size  Location     Type
 15054 ;;  sw              1    wreg     unsigned char 
 15055 ;; Auto vars:     Size  Location     Type
 15056 ;;  sw              1   68[BANK0 ] unsigned char 
 15057 ;; Return value:  Size  Location     Type
 15058 ;;		None               void
 15059 ;; Registers used:
 15060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15061 ;; Tracked objects:
 15062 ;;		On entry : 0/0
 15063 ;;		On exit  : 0/0
 15064 ;;		Unchanged: 0/0
 15065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15068 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15069 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15070 ;;Total ram usage:        3 bytes
 15071 ;; Hardware stack levels used:    1
 15072 ;; Hardware stack levels required when called:    9
 15073 ;; This function calls:
 15074 ;;		_DelayOffPointSelect
 15075 ;;		_setBuz
 15076 ;;		_setDimmerLights_Switch
 15077 ;;		_setDimmerLights_Trigger
 15078 ;;		_setRFSW_Status
 15079 ;;		_setRF_DimmerLights
 15080 ;;		_setSw_Status
 15081 ;;		_setTxData
 15082 ;; This function is called by:
 15083 ;;		_DelayOff_Main
 15084 ;; This function uses a non-reentrant model
 15085 ;;
 15086                           
 15087                           
 15088                           ;psect for function _DlyOff_Main
 15089  08B0                     _DlyOff_Main:	
 15090                           
 15091                           ;incstack = 0
 15092                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15093                           ;DlyOff_Main@sw stored from wreg
 15094  08B0  0020               	movlb	0	; select bank0
 15095  08B1  00E4               	movwf	DlyOff_Main@sw
 15096                           
 15097                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15098  08B2  0864               	movf	DlyOff_Main@sw,w
 15099  08B3  319C  2467  3188   	fcall	_DelayOffPointSelect
 15100                           
 15101                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15102  08B6  0020               	movlb	0	; select bank0
 15103  08B7  086A               	movf	_DelayOff,w
 15104  08B8  0086               	movwf	6
 15105  08B9  0187               	clrf	7
 15106  08BA  1C81               	btfss	1,1
 15107  08BB  0008               	return
 15108                           
 15109                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15110  08BC  086A               	movf	_DelayOff,w
 15111  08BD  0086               	movwf	6
 15112  08BE  0187               	clrf	7
 15113  08BF  3001               	movlw	1
 15114  08C0  0781               	addwf	1,f
 15115  08C1  3141               	addfsr 1,1
 15116  08C2  1803               	skipnc
 15117  08C3  0A81               	incf	1,f
 15118                           
 15119                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 15120  08C4  086A               	movf	_DelayOff,w
 15121  08C5  0086               	movwf	6
 15122  08C6  0187               	clrf	7
 15123  08C7  3F40               	moviw [0]fsr1
 15124  08C8  00E2               	movwf	??_DlyOff_Main
 15125  08C9  3F41               	moviw [1]fsr1
 15126  08CA  00E3               	movwf	??_DlyOff_Main+1
 15127  08CB  3016               	movlw	22
 15128  08CC  0263               	subwf	??_DlyOff_Main+1,w
 15129  08CD  3012               	movlw	18
 15130  08CE  1903               	skipnz
 15131  08CF  0262               	subwf	??_DlyOff_Main,w
 15132  08D0  1C03               	skipc
 15133  08D1  0008               	return
 15134                           
 15135                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15136  08D2  086A               	movf	_DelayOff,w
 15137  08D3  0086               	movwf	6
 15138  08D4  0187               	clrf	7
 15139  08D5  3000               	movlw	0
 15140  08D6  3FC0               	movwi [0]fsr1
 15141  08D7  3FC1               	movwi [1]fsr1
 15142                           
 15143                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15144  08D8  3001               	movlw	1
 15145  08D9  00E2               	movwf	??_DlyOff_Main
 15146  08DA  086A               	movf	_DelayOff,w
 15147  08DB  0086               	movwf	6
 15148  08DC  0187               	clrf	7
 15149  08DD  0862               	movf	??_DlyOff_Main,w
 15150  08DE  0781               	addwf	1,f
 15151                           
 15152                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15153  08DF  086A               	movf	_DelayOff,w
 15154  08E0  0086               	movwf	6
 15155  08E1  0187               	clrf	7
 15156  08E2  086A               	movf	_DelayOff,w
 15157  08E3  0084               	movwf	4
 15158  08E4  0185               	clrf	5
 15159  08E5  0800               	movf	0,w
 15160  08E6  0201               	subwf	1,w
 15161  08E7  1C03               	skipc
 15162  08E8  0008               	return
 15163                           
 15164                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15165  08E9  086A               	movf	_DelayOff,w
 15166  08EA  0086               	movwf	6
 15167  08EB  0187               	clrf	7
 15168  08EC  0181               	clrf	1
 15169                           
 15170                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15171  08ED  086A               	movf	_DelayOff,w
 15172  08EE  0086               	movwf	6
 15173  08EF  0187               	clrf	7
 15174  08F0  1081               	bcf	1,1
 15175                           
 15176                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 15177  08F1  01A2               	clrf	setSw_Status@command
 15178  08F2  0864               	movf	DlyOff_Main@sw,w
 15179  08F3  319B  2334  3188   	fcall	_setSw_Status
 15180                           
 15181                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 15182  08F6  0020               	movlb	0	; select bank0
 15183  08F7  01A2               	clrf	setRFSW_Status@command
 15184  08F8  0864               	movf	DlyOff_Main@sw,w
 15185  08F9  319B  230A  3188   	fcall	_setRFSW_Status
 15186                           
 15187                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 15188  08FC  0020               	movlb	0	; select bank0
 15189  08FD  01DD               	clrf	setRF_DimmerLights@on
 15190  08FE  0864               	movf	DlyOff_Main@sw,w
 15191  08FF  3189  211B  3188   	fcall	_setRF_DimmerLights
 15192                           
 15193                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 15194  0902  0020               	movlb	0	; select bank0
 15195  0903  01A2               	clrf	setDimmerLights_Trigger@command
 15196  0904  0AA2               	incf	setDimmerLights_Trigger@command,f
 15197  0905  0864               	movf	DlyOff_Main@sw,w
 15198  0906  319B  2371  3188   	fcall	_setDimmerLights_Trigger
 15199                           
 15200                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 15201  0909  0020               	movlb	0	; select bank0
 15202  090A  01A2               	clrf	setDimmerLights_Switch@command
 15203  090B  0864               	movf	DlyOff_Main@sw,w
 15204  090C  319B  2361  3188   	fcall	_setDimmerLights_Switch
 15205                           
 15206                           ;DelayOff_B1.c: 78: setTxData();
 15207  090F  318F  2743  3188   	fcall	_setTxData
 15208                           
 15209                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 15210  0912  3064               	movlw	100
 15211  0913  0020               	movlb	0	; select bank0
 15212  0914  00A9               	movwf	setBuz@time
 15213  0915  3000               	movlw	0
 15214  0916  00AA               	movwf	setBuz@time+1
 15215  0917  3001               	movlw	1
 15216  0918  3195  256B         	fcall	_setBuz
 15217  091A  0008               	return
 15218  091B                     __end_of_DlyOff_Main:	
 15219                           
 15220                           	psect	text98
 15221  0F43                     __ptext98:	
 15222 ;; *************** function _setTxData *****************
 15223 ;; Defined at:
 15224 ;;		line 186 in file "../src/RF_Control_B1.c"
 15225 ;; Parameters:    Size  Location     Type
 15226 ;;		None
 15227 ;; Auto vars:     Size  Location     Type
 15228 ;;  i               1    0        unsigned char 
 15229 ;; Return value:  Size  Location     Type
 15230 ;;		None               void
 15231 ;; Registers used:
 15232 ;;		wreg, fsr1l, fsr1h
 15233 ;; Tracked objects:
 15234 ;;		On entry : 0/0
 15235 ;;		On exit  : 0/0
 15236 ;;		Unchanged: 0/0
 15237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15242 ;;Total ram usage:        1 bytes
 15243 ;; Hardware stack levels used:    1
 15244 ;; Hardware stack levels required when called:    5
 15245 ;; This function calls:
 15246 ;;		Nothing
 15247 ;; This function is called by:
 15248 ;;		_DlyOff_Main
 15249 ;;		_setDimmerLights_Adj
 15250 ;;		_setControl_Lights_Table
 15251 ;;		_setRFSW_Control
 15252 ;;		_setRFSW_AdjControl
 15253 ;;		_Sw_DimmerOnFunc
 15254 ;;		_Sw_DimmerOffFunc
 15255 ;; This function uses a non-reentrant model
 15256 ;;
 15257                           
 15258                           
 15259                           ;psect for function _setTxData
 15260  0F43                     _setTxData:	
 15261                           
 15262                           ;RF_Control_B1.c: 187: char i;
 15263                           ;RF_Control_B1.c: 188: if (RF1.Enable == 1) {
 15264                           
 15265                           ;incstack = 0
 15266                           ; Regs used in _setTxData: [wregfsr1]
 15267  0F43  0021               	movlb	1	; select bank1
 15268  0F44  1C3F               	btfss	_RF1^(0+128),0
 15269  0F45  0008               	return
 15270                           
 15271                           ;RF_Control_B1.c: 190: RF1.TransceiveGO = 1;
 15272  0F46  153F               	bsf	_RF1^(0+128),2
 15273                           
 15274                           ;RF_Control_B1.c: 191: RF1.RunTime = 20;
 15275  0F47  3014               	movlw	20
 15276  0F48  00C6               	movwf	(_RF1^(0+128)+7)
 15277  0F49  3000               	movlw	0
 15278  0F4A  00C7               	movwf	(_RF1^(0+128)+8)
 15279                           
 15280                           ;RF_Control_B1.c: 201: RF_Data[0] = 0x63;
 15281  0F4B  3063               	movlw	99
 15282  0F4C  0020               	movlb	0	; select bank0
 15283  0F4D  00A0               	movwf	??_setTxData
 15284  0F4E  0820               	movf	??_setTxData,w
 15285  0F4F  0022               	movlb	2	; select bank2
 15286  0F50  00A0               	movwf	_RF_Data^(0+256)
 15287                           
 15288                           ;RF_Control_B1.c: 202: RF_Data[1] = 0x02;
 15289  0F51  3002               	movlw	2
 15290  0F52  0020               	movlb	0	; select bank0
 15291  0F53  00A0               	movwf	??_setTxData
 15292  0F54  0820               	movf	??_setTxData,w
 15293  0F55  0022               	movlb	2	; select bank2
 15294  0F56  00A1               	movwf	(_RF_Data^(0+256)+1)
 15295                           
 15296                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15297  0F57  0020               	movlb	0	; select bank0
 15298  0F58  086D               	movf	_product,w
 15299  0F59  0086               	movwf	6
 15300  0F5A  3002               	movlw	2	; select bank4/5
 15301  0F5B  0087               	movwf	7
 15302  0F5C  3002               	movlw	2	; select bank4/5
 15303  0F5D  3F42               	moviw [2]fsr1
 15304  0F5E  0022               	movlb	2	; select bank2
 15305  0F5F  00A2               	movwf	(_RF_Data^(0+256)+2)
 15306                           
 15307                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15308  0F60  0020               	movlb	0	; select bank0
 15309  0F61  086D               	movf	_product,w
 15310  0F62  0086               	movwf	6
 15311  0F63  3002               	movlw	2	; select bank4/5
 15312  0F64  0087               	movwf	7
 15313  0F65  3002               	movlw	2	; select bank4/5
 15314  0F66  3F43               	moviw [3]fsr1
 15315  0F67  0022               	movlb	2	; select bank2
 15316  0F68  00A3               	movwf	(_RF_Data^(0+256)+3)
 15317                           
 15318                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15319  0F69  0020               	movlb	0	; select bank0
 15320  0F6A  086D               	movf	_product,w
 15321  0F6B  0086               	movwf	6
 15322  0F6C  3002               	movlw	2	; select bank4/5
 15323  0F6D  0087               	movwf	7
 15324  0F6E  3002               	movlw	2	; select bank4/5
 15325  0F6F  3F44               	moviw [4]fsr1
 15326  0F70  0022               	movlb	2	; select bank2
 15327  0F71  00A4               	movwf	(_RF_Data^(0+256)+4)
 15328                           
 15329                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15330  0F72  0020               	movlb	0	; select bank0
 15331  0F73  086D               	movf	_product,w
 15332  0F74  0086               	movwf	6
 15333  0F75  3002               	movlw	2	; select bank4/5
 15334  0F76  0087               	movwf	7
 15335  0F77  3002               	movlw	2	; select bank4/5
 15336  0F78  3F45               	moviw [5]fsr1
 15337  0F79  0022               	movlb	2	; select bank2
 15338  0F7A  00A5               	movwf	(_RF_Data^(0+256)+5)
 15339                           
 15340                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15341  0F7B  0020               	movlb	0	; select bank0
 15342  0F7C  086D               	movf	_product,w
 15343  0F7D  0086               	movwf	6
 15344  0F7E  3002               	movlw	2	; select bank4/5
 15345  0F7F  0087               	movwf	7
 15346  0F80  3002               	movlw	2	; select bank4/5
 15347  0F81  3F46               	moviw [6]fsr1
 15348  0F82  0022               	movlb	2	; select bank2
 15349  0F83  00A6               	movwf	(_RF_Data^(0+256)+6)
 15350                           
 15351                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15352  0F84  0020               	movlb	0	; select bank0
 15353  0F85  086D               	movf	_product,w
 15354  0F86  0086               	movwf	6
 15355  0F87  3002               	movlw	2	; select bank4/5
 15356  0F88  0087               	movwf	7
 15357  0F89  3002               	movlw	2	; select bank4/5
 15358  0F8A  3F47               	moviw [7]fsr1
 15359  0F8B  0022               	movlb	2	; select bank2
 15360  0F8C  00A7               	movwf	(_RF_Data^(0+256)+7)
 15361                           
 15362                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15363  0F8D  0020               	movlb	0	; select bank0
 15364  0F8E  086D               	movf	_product,w
 15365  0F8F  0086               	movwf	6
 15366  0F90  3002               	movlw	2	; select bank4/5
 15367  0F91  0087               	movwf	7
 15368  0F92  3002               	movlw	2	; select bank4/5
 15369  0F93  3F48               	moviw [8]fsr1
 15370  0F94  0022               	movlb	2	; select bank2
 15371  0F95  00A8               	movwf	(_RF_Data^(0+256)+8)
 15372                           
 15373                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15374  0F96  0020               	movlb	0	; select bank0
 15375  0F97  086D               	movf	_product,w
 15376  0F98  0086               	movwf	6
 15377  0F99  3002               	movlw	2	; select bank4/5
 15378  0F9A  0087               	movwf	7
 15379  0F9B  3002               	movlw	2	; select bank4/5
 15380  0F9C  3F49               	moviw [9]fsr1
 15381  0F9D  0022               	movlb	2	; select bank2
 15382  0F9E  00A9               	movwf	(_RF_Data^(0+256)+9)
 15383                           
 15384                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15385  0F9F  0020               	movlb	0	; select bank0
 15386  0FA0  086D               	movf	_product,w
 15387  0FA1  0086               	movwf	6
 15388  0FA2  3002               	movlw	2	; select bank4/5
 15389  0FA3  0087               	movwf	7
 15390  0FA4  3002               	movlw	2	; select bank4/5
 15391  0FA5  3F4A               	moviw [10]fsr1
 15392  0FA6  0022               	movlb	2	; select bank2
 15393  0FA7  00AA               	movwf	(_RF_Data^(0+256)+10)
 15394                           
 15395                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15396  0FA8  0020               	movlb	0	; select bank0
 15397  0FA9  086D               	movf	_product,w
 15398  0FAA  0086               	movwf	6
 15399  0FAB  3002               	movlw	2	; select bank4/5
 15400  0FAC  0087               	movwf	7
 15401  0FAD  3002               	movlw	2	; select bank4/5
 15402  0FAE  3F4B               	moviw [11]fsr1
 15403  0FAF  0022               	movlb	2	; select bank2
 15404  0FB0  00AB               	movwf	(_RF_Data^(0+256)+11)
 15405                           
 15406                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15407  0FB1  0020               	movlb	0	; select bank0
 15408  0FB2  086D               	movf	_product,w
 15409  0FB3  0086               	movwf	6
 15410  0FB4  3002               	movlw	2	; select bank4/5
 15411  0FB5  0087               	movwf	7
 15412  0FB6  3002               	movlw	2	; select bank4/5
 15413  0FB7  3F4C               	moviw [12]fsr1
 15414  0FB8  0022               	movlb	2	; select bank2
 15415  0FB9  00AC               	movwf	(_RF_Data^(0+256)+12)
 15416                           
 15417                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15418  0FBA  0020               	movlb	0	; select bank0
 15419  0FBB  086D               	movf	_product,w
 15420  0FBC  0086               	movwf	6
 15421  0FBD  3002               	movlw	2	; select bank4/5
 15422  0FBE  0087               	movwf	7
 15423  0FBF  3002               	movlw	2	; select bank4/5
 15424  0FC0  3F4D               	moviw [13]fsr1
 15425  0FC1  0022               	movlb	2	; select bank2
 15426  0FC2  00AD               	movwf	(_RF_Data^(0+256)+13)
 15427                           
 15428                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15429  0FC3  0020               	movlb	0	; select bank0
 15430  0FC4  086D               	movf	_product,w
 15431  0FC5  0086               	movwf	6
 15432  0FC6  3002               	movlw	2	; select bank4/5
 15433  0FC7  0087               	movwf	7
 15434  0FC8  3002               	movlw	2	; select bank4/5
 15435  0FC9  3F4E               	moviw [14]fsr1
 15436  0FCA  0022               	movlb	2	; select bank2
 15437  0FCB  00AE               	movwf	(_RF_Data^(0+256)+14)
 15438                           
 15439                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15440  0FCC  0020               	movlb	0	; select bank0
 15441  0FCD  086D               	movf	_product,w
 15442  0FCE  0086               	movwf	6
 15443  0FCF  3002               	movlw	2	; select bank4/5
 15444  0FD0  0087               	movwf	7
 15445  0FD1  3002               	movlw	2	; select bank4/5
 15446  0FD2  3F4F               	moviw [15]fsr1
 15447  0FD3  0022               	movlb	2	; select bank2
 15448  0FD4  00AF               	movwf	(_RF_Data^(0+256)+15)
 15449                           
 15450                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15451  0FD5  0020               	movlb	0	; select bank0
 15452  0FD6  086D               	movf	_product,w
 15453  0FD7  0086               	movwf	6
 15454  0FD8  3002               	movlw	2	; select bank4/5
 15455  0FD9  0087               	movwf	7
 15456  0FDA  3002               	movlw	2	; select bank4/5
 15457  0FDB  3F50               	moviw [16]fsr1
 15458  0FDC  0022               	movlb	2	; select bank2
 15459  0FDD  00B0               	movwf	(_RF_Data^(0+256)+16)
 15460                           
 15461                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15462  0FDE  0020               	movlb	0	; select bank0
 15463  0FDF  086D               	movf	_product,w
 15464  0FE0  0086               	movwf	6
 15465  0FE1  3002               	movlw	2	; select bank4/5
 15466  0FE2  0087               	movwf	7
 15467  0FE3  3002               	movlw	2	; select bank4/5
 15468  0FE4  3F51               	moviw [17]fsr1
 15469  0FE5  0022               	movlb	2	; select bank2
 15470  0FE6  00B1               	movwf	(_RF_Data^(0+256)+17)
 15471                           
 15472                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15473  0FE7  0020               	movlb	0	; select bank0
 15474  0FE8  086D               	movf	_product,w
 15475  0FE9  0086               	movwf	6
 15476  0FEA  3002               	movlw	2	; select bank4/5
 15477  0FEB  0087               	movwf	7
 15478  0FEC  3002               	movlw	2	; select bank4/5
 15479  0FED  3F52               	moviw [18]fsr1
 15480  0FEE  0022               	movlb	2	; select bank2
 15481  0FEF  00B2               	movwf	(_RF_Data^(0+256)+18)
 15482                           
 15483                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15484  0FF0  0020               	movlb	0	; select bank0
 15485  0FF1  086D               	movf	_product,w
 15486  0FF2  0086               	movwf	6
 15487  0FF3  3002               	movlw	2	; select bank4/5
 15488  0FF4  0087               	movwf	7
 15489  0FF5  3002               	movlw	2	; select bank4/5
 15490  0FF6  3F53               	moviw [19]fsr1
 15491  0FF7  0022               	movlb	2	; select bank2
 15492  0FF8  00B3               	movwf	(_RF_Data^(0+256)+19)
 15493                           
 15494                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15495  0FF9  30D2               	movlw	210
 15496  0FFA  0020               	movlb	0	; select bank0
 15497  0FFB  00A0               	movwf	??_setTxData
 15498  0FFC  0820               	movf	??_setTxData,w
 15499  0FFD  0022               	movlb	2	; select bank2
 15500  0FFE  00B4               	movwf	(_RF_Data^(0+256)+20)
 15501  0FFF  0008               	return
 15502  1000                     __end_of_setTxData:	
 15503                           
 15504                           	psect	text99
 15505  1B34                     __ptext99:	
 15506 ;; *************** function _setSw_Status *****************
 15507 ;; Defined at:
 15508 ;;		line 111 in file "../src/Switch_B1.c"
 15509 ;; Parameters:    Size  Location     Type
 15510 ;;  sw              1    wreg     unsigned char 
 15511 ;;  command         1    2[BANK0 ] unsigned char 
 15512 ;; Auto vars:     Size  Location     Type
 15513 ;;  sw              1    3[BANK0 ] unsigned char 
 15514 ;; Return value:  Size  Location     Type
 15515 ;;		None               void
 15516 ;; Registers used:
 15517 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15518 ;; Tracked objects:
 15519 ;;		On entry : 0/0
 15520 ;;		On exit  : 0/0
 15521 ;;		Unchanged: 0/0
 15522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15523 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15526 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15527 ;;Total ram usage:        2 bytes
 15528 ;; Hardware stack levels used:    1
 15529 ;; Hardware stack levels required when called:    6
 15530 ;; This function calls:
 15531 ;;		_SwPointSelect
 15532 ;; This function is called by:
 15533 ;;		_DlyOff_Main
 15534 ;;		_setDimmerLights_ERROR
 15535 ;;		_setControl_Lights_Table
 15536 ;;		_setRFSW_Control
 15537 ;; This function uses a non-reentrant model
 15538 ;;
 15539                           
 15540                           
 15541                           ;psect for function _setSw_Status
 15542  1B34                     _setSw_Status:	
 15543                           
 15544                           ;incstack = 0
 15545                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15546                           ;setSw_Status@sw stored from wreg
 15547  1B34  0020               	movlb	0	; select bank0
 15548  1B35  00A3               	movwf	setSw_Status@sw
 15549                           
 15550                           ;Switch_B1.c: 112: SwPointSelect(sw);
 15551  1B36  0823               	movf	setSw_Status@sw,w
 15552  1B37  319C  247B         	fcall	_SwPointSelect
 15553                           
 15554                           ;Switch_B1.c: 113: Sw->Status = command;
 15555  1B39  0020               	movlb	0	; select bank0
 15556  1B3A  086C               	movf	_Sw,w
 15557  1B3B  0086               	movwf	6
 15558  1B3C  3001               	movlw	1	; select bank2/3
 15559  1B3D  0087               	movwf	7
 15560  1B3E  0822               	movf	setSw_Status@command,w
 15561  1B3F  1301               	bcf	1,6
 15562  1B40  1D03               	skipz
 15563  1B41  1701               	bsf	1,6
 15564  1B42  0008               	return
 15565  1B43                     __end_of_setSw_Status:	
 15566                           
 15567                           	psect	text100
 15568  1C7B                     __ptext100:	
 15569 ;; *************** function _SwPointSelect *****************
 15570 ;; Defined at:
 15571 ;;		line 21 in file "../src/Switch_B1.c"
 15572 ;; Parameters:    Size  Location     Type
 15573 ;;  sw              1    wreg     unsigned char 
 15574 ;; Auto vars:     Size  Location     Type
 15575 ;;  sw              1    1[BANK0 ] unsigned char 
 15576 ;; Return value:  Size  Location     Type
 15577 ;;		None               void
 15578 ;; Registers used:
 15579 ;;		wreg
 15580 ;; Tracked objects:
 15581 ;;		On entry : 0/0
 15582 ;;		On exit  : 0/0
 15583 ;;		Unchanged: 0/0
 15584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15588 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15589 ;;Total ram usage:        2 bytes
 15590 ;; Hardware stack levels used:    1
 15591 ;; Hardware stack levels required when called:    5
 15592 ;; This function calls:
 15593 ;;		Nothing
 15594 ;; This function is called by:
 15595 ;;		_setSw_Enable
 15596 ;;		_setSw_Status
 15597 ;;		_setSw_Main
 15598 ;;		_Sw_Detect
 15599 ;; This function uses a non-reentrant model
 15600 ;;
 15601                           
 15602                           
 15603                           ;psect for function _SwPointSelect
 15604  1C7B                     _SwPointSelect:	
 15605                           
 15606                           ;incstack = 0
 15607                           ; Regs used in _SwPointSelect: [wreg]
 15608                           ;SwPointSelect@sw stored from wreg
 15609  1C7B  0020               	movlb	0	; select bank0
 15610  1C7C  00A1               	movwf	SwPointSelect@sw
 15611                           
 15612                           ;Switch_B1.c: 24: if (sw == 1) {
 15613  1C7D  0821               	movf	SwPointSelect@sw,w
 15614  1C7E  3A01               	xorlw	1
 15615  1C7F  1D03               	skipz
 15616  1C80  2C86               	goto	l8598
 15617                           
 15618                           ;Switch_B1.c: 25: Sw = &Sw1;
 15619  1C81  3053               	movlw	_Sw1& (0+255)
 15620  1C82  00A0               	movwf	??_SwPointSelect
 15621  1C83  0820               	movf	??_SwPointSelect,w
 15622  1C84  00EC               	movwf	_Sw
 15623                           
 15624                           ;Switch_B1.c: 26: }
 15625  1C85  0008               	return
 15626  1C86                     l8598:	
 15627                           
 15628                           ;Switch_B1.c: 29: else if (sw == 2) {
 15629  1C86  0821               	movf	SwPointSelect@sw,w
 15630  1C87  3A02               	xorlw	2
 15631  1C88  1D03               	skipz
 15632  1C89  0008               	return
 15633                           
 15634                           ;Switch_B1.c: 30: Sw = &Sw2;
 15635  1C8A  30E6               	movlw	_Sw2& (0+255)
 15636  1C8B  00A0               	movwf	??_SwPointSelect
 15637  1C8C  0820               	movf	??_SwPointSelect,w
 15638  1C8D  00EC               	movwf	_Sw
 15639  1C8E  0008               	return
 15640  1C8F                     __end_of_SwPointSelect:	
 15641                           
 15642                           	psect	text101
 15643  091B                     __ptext101:	
 15644 ;; *************** function _setRF_DimmerLights *****************
 15645 ;; Defined at:
 15646 ;;		line 452 in file "../src/RF_Control_B1.c"
 15647 ;; Parameters:    Size  Location     Type
 15648 ;;  lights          1    wreg     unsigned char 
 15649 ;;  on              1   61[BANK0 ] unsigned char 
 15650 ;; Auto vars:     Size  Location     Type
 15651 ;;  lights          1   65[BANK0 ] unsigned char 
 15652 ;;  status          1   64[BANK0 ] unsigned char 
 15653 ;; Return value:  Size  Location     Type
 15654 ;;		None               void
 15655 ;; Registers used:
 15656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15657 ;; Tracked objects:
 15658 ;;		On entry : 0/0
 15659 ;;		On exit  : 0/0
 15660 ;;		Unchanged: 0/0
 15661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15662 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15663 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15664 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15665 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15666 ;;Total ram usage:        5 bytes
 15667 ;; Hardware stack levels used:    1
 15668 ;; Hardware stack levels required when called:    8
 15669 ;; This function calls:
 15670 ;;		_setPercentValue
 15671 ;; This function is called by:
 15672 ;;		_DlyOff_Main
 15673 ;;		_setDimmerLights_Adj
 15674 ;;		_setRFSW_Control
 15675 ;;		_Sw_DimmerOnFunc
 15676 ;;		_Sw_DimmerOffFunc
 15677 ;; This function uses a non-reentrant model
 15678 ;;
 15679                           
 15680                           
 15681                           ;psect for function _setRF_DimmerLights
 15682  091B                     _setRF_DimmerLights:	
 15683                           
 15684                           ;incstack = 0
 15685                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15686                           ;setRF_DimmerLights@lights stored from wreg
 15687  091B  0020               	movlb	0	; select bank0
 15688  091C  00E1               	movwf	setRF_DimmerLights@lights
 15689                           
 15690                           ;RF_Control_B1.c: 453: char status;
 15691                           ;RF_Control_B1.c: 454: status = 1;
 15692  091D  01E0               	clrf	setRF_DimmerLights@status
 15693  091E  0AE0               	incf	setRF_DimmerLights@status,f
 15694                           
 15695                           ;RF_Control_B1.c: 455: status <<= (lights - 1);
 15696  091F  0861               	movf	setRF_DimmerLights@lights,w
 15697  0920  3EFF               	addlw	-1
 15698  0921  0A89               	incf	9,f
 15699  0922  2925               	goto	u8790
 15700  0923                     u8795:	
 15701  0923  1003               	clrc
 15702  0924  0DE0               	rlf	setRF_DimmerLights@status,f
 15703  0925                     u8790:	
 15704  0925  3EFF               	addlw	-1
 15705  0926  1D03               	skipz
 15706  0927  2923               	goto	u8795
 15707                           
 15708                           ;RF_Control_B1.c: 456: product->Data[11]=lights;
 15709  0928  0861               	movf	setRF_DimmerLights@lights,w
 15710  0929  00DE               	movwf	??_setRF_DimmerLights
 15711  092A  086D               	movf	_product,w
 15712  092B  3E0B               	addlw	11
 15713  092C  0086               	movwf	6
 15714  092D  3002               	movlw	2	; select bank4/5
 15715  092E  0087               	movwf	7
 15716  092F  085E               	movf	??_setRF_DimmerLights,w
 15717  0930  0081               	movwf	1
 15718                           
 15719                           ;RF_Control_B1.c: 459: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 15720  0931  3020               	movlw	32
 15721  0932  3188  2001  3189   	fcall	_setPercentValue
 15722  0935  0020               	movlb	0	; select bank0
 15723  0936  00DE               	movwf	??_setRF_DimmerLights
 15724  0937  0861               	movf	setRF_DimmerLights@lights,w
 15725  0938  3E14               	addlw	20
 15726  0939  076D               	addwf	_product,w
 15727  093A  00DF               	movwf	??_setRF_DimmerLights+1
 15728  093B  085F               	movf	??_setRF_DimmerLights+1,w
 15729  093C  0086               	movwf	6
 15730  093D  3002               	movlw	2	; select bank4/5
 15731  093E  0087               	movwf	7
 15732  093F  085E               	movf	??_setRF_DimmerLights,w
 15733  0940  0081               	movwf	1
 15734                           
 15735                           ;RF_Control_B1.c: 462: product->Data[9]=product->Data[20 + lights];
 15736  0941  0861               	movf	setRF_DimmerLights@lights,w
 15737  0942  3E14               	addlw	20
 15738  0943  076D               	addwf	_product,w
 15739  0944  00DE               	movwf	??_setRF_DimmerLights
 15740  0945  085E               	movf	??_setRF_DimmerLights,w
 15741  0946  0086               	movwf	6
 15742  0947  3002               	movlw	2	; select bank4/5
 15743  0948  0087               	movwf	7
 15744  0949  0801               	movf	1,w
 15745  094A  00DF               	movwf	??_setRF_DimmerLights+1
 15746  094B  086D               	movf	_product,w
 15747  094C  3E09               	addlw	9
 15748  094D  0086               	movwf	6
 15749  094E  3002               	movlw	2	; select bank4/5
 15750  094F  0087               	movwf	7
 15751  0950  085F               	movf	??_setRF_DimmerLights+1,w
 15752  0951  0081               	movwf	1
 15753                           
 15754                           ;RF_Control_B1.c: 463: product->Data[17]=product->Data[26 + lights];
 15755  0952  0861               	movf	setRF_DimmerLights@lights,w
 15756  0953  3E1A               	addlw	26
 15757  0954  076D               	addwf	_product,w
 15758  0955  00DE               	movwf	??_setRF_DimmerLights
 15759  0956  085E               	movf	??_setRF_DimmerLights,w
 15760  0957  0086               	movwf	6
 15761  0958  3002               	movlw	2	; select bank4/5
 15762  0959  0087               	movwf	7
 15763  095A  0801               	movf	1,w
 15764  095B  00DF               	movwf	??_setRF_DimmerLights+1
 15765  095C  086D               	movf	_product,w
 15766  095D  3E11               	addlw	17
 15767  095E  0086               	movwf	6
 15768  095F  3002               	movlw	2	; select bank4/5
 15769  0960  0087               	movwf	7
 15770  0961  085F               	movf	??_setRF_DimmerLights+1,w
 15771  0962  0081               	movwf	1
 15772                           
 15773                           ;RF_Control_B1.c: 464: if (on == 1) {
 15774  0963  085D               	movf	setRF_DimmerLights@on,w
 15775  0964  3A01               	xorlw	1
 15776  0965  1D03               	skipz
 15777  0966  2977               	goto	l8698
 15778                           
 15779                           ;RF_Control_B1.c: 465: product->Data[15]=(product->Data[15] | status);
 15780  0967  086D               	movf	_product,w
 15781  0968  3E0F               	addlw	15
 15782  0969  0086               	movwf	6
 15783  096A  3002               	movlw	2	; select bank4/5
 15784  096B  0087               	movwf	7
 15785  096C  0801               	movf	1,w
 15786  096D  0460               	iorwf	setRF_DimmerLights@status,w
 15787  096E  00DE               	movwf	??_setRF_DimmerLights
 15788  096F  086D               	movf	_product,w
 15789  0970  3E0F               	addlw	15
 15790  0971  0086               	movwf	6
 15791  0972  3002               	movlw	2	; select bank4/5
 15792  0973  0087               	movwf	7
 15793  0974  085E               	movf	??_setRF_DimmerLights,w
 15794  0975  0081               	movwf	1
 15795                           
 15796                           ;RF_Control_B1.c: 466: } else {
 15797  0976  0008               	return
 15798  0977                     l8698:	
 15799                           
 15800                           ;RF_Control_B1.c: 467: product->Data[15]=(product->Data[15]&(~status));
 15801  0977  086D               	movf	_product,w
 15802  0978  3E0F               	addlw	15
 15803  0979  0086               	movwf	6
 15804  097A  3002               	movlw	2	; select bank4/5
 15805  097B  0087               	movwf	7
 15806  097C  0960               	comf	setRF_DimmerLights@status,w
 15807  097D  0501               	andwf	1,w
 15808  097E  00DE               	movwf	??_setRF_DimmerLights
 15809  097F  086D               	movf	_product,w
 15810  0980  3E0F               	addlw	15
 15811  0981  0086               	movwf	6
 15812  0982  3002               	movlw	2	; select bank4/5
 15813  0983  0087               	movwf	7
 15814  0984  085E               	movf	??_setRF_DimmerLights,w
 15815  0985  0081               	movwf	1
 15816  0986  0008               	return
 15817  0987                     __end_of_setRF_DimmerLights:	
 15818                           
 15819                           	psect	text102
 15820  0801                     __ptext102:	
 15821 ;; *************** function _setPercentValue *****************
 15822 ;; Defined at:
 15823 ;;		line 777 in file "../src/Dimmer_B1.c"
 15824 ;; Parameters:    Size  Location     Type
 15825 ;;  value           1    wreg     unsigned char 
 15826 ;; Auto vars:     Size  Location     Type
 15827 ;;  value           1   57[BANK0 ] unsigned char 
 15828 ;;  i               3   58[BANK0 ] float 
 15829 ;; Return value:  Size  Location     Type
 15830 ;;                  1    wreg      unsigned char 
 15831 ;; Registers used:
 15832 ;;		wreg, status,2, status,0, pclath, cstack
 15833 ;; Tracked objects:
 15834 ;;		On entry : 0/0
 15835 ;;		On exit  : 0/0
 15836 ;;		Unchanged: 0/0
 15837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15839 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15841 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15842 ;;Total ram usage:        4 bytes
 15843 ;; Hardware stack levels used:    1
 15844 ;; Hardware stack levels required when called:    7
 15845 ;; This function calls:
 15846 ;;		___awtoft
 15847 ;;		___ftdiv
 15848 ;;		___fttol
 15849 ;; This function is called by:
 15850 ;;		_Flash_Memory_Initialization
 15851 ;;		_setRF_DimmerLights
 15852 ;; This function uses a non-reentrant model
 15853 ;;
 15854                           
 15855                           
 15856                           ;psect for function _setPercentValue
 15857  0801                     _setPercentValue:	
 15858                           
 15859                           ;incstack = 0
 15860                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15861                           ;setPercentValue@value stored from wreg
 15862  0801  0020               	movlb	0	; select bank0
 15863  0802  00D9               	movwf	setPercentValue@value
 15864                           
 15865                           ;Dimmer_B1.c: 779: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 15866  0803  3000               	movlw	0
 15867  0804  00DA               	movwf	setPercentValue@i
 15868  0805  30E0               	movlw	224
 15869  0806  00DB               	movwf	setPercentValue@i+1
 15870  0807  3041               	movlw	65
 15871  0808  00DC               	movwf	setPercentValue@i+2
 15872                           
 15873                           ;Dimmer_B1.c: 780: i /= 100;
 15874  0809  3000               	movlw	0
 15875  080A  00AE               	movwf	___ftdiv@f2
 15876  080B  30C8               	movlw	200
 15877  080C  00AF               	movwf	___ftdiv@f2+1
 15878  080D  3042               	movlw	66
 15879  080E  00B0               	movwf	___ftdiv@f2+2
 15880  080F  085A               	movf	setPercentValue@i,w
 15881  0810  00B1               	movwf	___ftdiv@f1
 15882  0811  085B               	movf	setPercentValue@i+1,w
 15883  0812  00B2               	movwf	___ftdiv@f1+1
 15884  0813  085C               	movf	setPercentValue@i+2,w
 15885  0814  00B3               	movwf	___ftdiv@f1+2
 15886  0815  318D  25E6  3188   	fcall	___ftdiv
 15887  0818  0020               	movlb	0	; select bank0
 15888  0819  082E               	movf	?___ftdiv,w
 15889  081A  00DA               	movwf	setPercentValue@i
 15890  081B  082F               	movf	?___ftdiv+1,w
 15891  081C  00DB               	movwf	setPercentValue@i+1
 15892  081D  0830               	movf	?___ftdiv+2,w
 15893  081E  00DC               	movwf	setPercentValue@i+2
 15894                           
 15895                           ;Dimmer_B1.c: 781: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 15896  081F  0859               	movf	setPercentValue@value,w
 15897  0820  3EE0               	addlw	224
 15898  0821  00A8               	movwf	___awtoft@c
 15899  0822  30FF               	movlw	255
 15900  0823  1803               	skipnc
 15901  0824  3000               	movlw	0
 15902  0825  00A9               	movwf	___awtoft@c+1
 15903  0826  319E  26A9  3188   	fcall	___awtoft
 15904  0829  0020               	movlb	0	; select bank0
 15905  082A  0828               	movf	?___awtoft,w
 15906  082B  00B1               	movwf	___ftdiv@f1
 15907  082C  0829               	movf	?___awtoft+1,w
 15908  082D  00B2               	movwf	___ftdiv@f1+1
 15909  082E  082A               	movf	?___awtoft+2,w
 15910  082F  00B3               	movwf	___ftdiv@f1+2
 15911  0830  085A               	movf	setPercentValue@i,w
 15912  0831  00AE               	movwf	___ftdiv@f2
 15913  0832  085B               	movf	setPercentValue@i+1,w
 15914  0833  00AF               	movwf	___ftdiv@f2+1
 15915  0834  085C               	movf	setPercentValue@i+2,w
 15916  0835  00B0               	movwf	___ftdiv@f2+2
 15917  0836  318D  25E6  3188   	fcall	___ftdiv
 15918  0839  0020               	movlb	0	; select bank0
 15919  083A  082E               	movf	?___ftdiv,w
 15920  083B  00CB               	movwf	___fttol@f1
 15921  083C  082F               	movf	?___ftdiv+1,w
 15922  083D  00CC               	movwf	___fttol@f1+1
 15923  083E  0830               	movf	?___ftdiv+2,w
 15924  083F  00CD               	movwf	___fttol@f1+2
 15925  0840  318C  244B         	fcall	___fttol
 15926  0842  0020               	movlb	0	; select bank0
 15927  0843  034B               	decf	?___fttol,w
 15928  0844  3AFF               	xorlw	255
 15929  0845  3E64               	addlw	100
 15930  0846  0008               	return
 15931  0847                     __end_of_setPercentValue:	
 15932                           
 15933                           	psect	text103
 15934  0C4B                     __ptext103:	
 15935 ;; *************** function ___fttol *****************
 15936 ;; Defined at:
 15937 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15938 ;; Parameters:    Size  Location     Type
 15939 ;;  f1              3   43[BANK0 ] float 
 15940 ;; Auto vars:     Size  Location     Type
 15941 ;;  lval            4   52[BANK0 ] unsigned long 
 15942 ;;  exp1            1   56[BANK0 ] unsigned char 
 15943 ;;  sign1           1   51[BANK0 ] unsigned char 
 15944 ;; Return value:  Size  Location     Type
 15945 ;;                  4   43[BANK0 ] long 
 15946 ;; Registers used:
 15947 ;;		wreg, status,2, status,0
 15948 ;; Tracked objects:
 15949 ;;		On entry : 0/0
 15950 ;;		On exit  : 0/0
 15951 ;;		Unchanged: 0/0
 15952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15953 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15954 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15955 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15956 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15957 ;;Total ram usage:       14 bytes
 15958 ;; Hardware stack levels used:    1
 15959 ;; Hardware stack levels required when called:    5
 15960 ;; This function calls:
 15961 ;;		Nothing
 15962 ;; This function is called by:
 15963 ;;		_getPercentValue
 15964 ;;		_setPercentValue
 15965 ;; This function uses a non-reentrant model
 15966 ;;
 15967                           
 15968                           
 15969                           ;psect for function ___fttol
 15970  0C4B                     ___fttol:	
 15971                           
 15972                           ;incstack = 0
 15973                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15974  0C4B  0020               	movlb	0	; select bank0
 15975  0C4C  084B               	movf	___fttol@f1,w
 15976  0C4D  00CF               	movwf	??___fttol
 15977  0C4E  084C               	movf	___fttol@f1+1,w
 15978  0C4F  00D0               	movwf	??___fttol+1
 15979  0C50  084D               	movf	___fttol@f1+2,w
 15980  0C51  00D1               	movwf	??___fttol+2
 15981  0C52  1003               	clrc
 15982  0C53  0D50               	rlf	??___fttol+1,w
 15983  0C54  0D51               	rlf	??___fttol+2,w
 15984  0C55  00D2               	movwf	??___fttol+3
 15985  0C56  0852               	movf	??___fttol+3,w
 15986  0C57  00D8               	movwf	___fttol@exp1
 15987  0C58  08D8               	movf	___fttol@exp1,f
 15988  0C59  1D03               	skipz
 15989  0C5A  2C64               	goto	l6086
 15990  0C5B  3000               	movlw	0
 15991  0C5C  00CE               	movwf	?___fttol+3
 15992  0C5D  3000               	movlw	0
 15993  0C5E  00CD               	movwf	?___fttol+2
 15994  0C5F  3000               	movlw	0
 15995  0C60  00CC               	movwf	?___fttol+1
 15996  0C61  3000               	movlw	0
 15997  0C62  00CB               	movwf	?___fttol
 15998  0C63  0008               	return
 15999  0C64                     l6086:	
 16000  0C64  084B               	movf	___fttol@f1,w
 16001  0C65  00CF               	movwf	??___fttol
 16002  0C66  084C               	movf	___fttol@f1+1,w
 16003  0C67  00D0               	movwf	??___fttol+1
 16004  0C68  084D               	movf	___fttol@f1+2,w
 16005  0C69  00D1               	movwf	??___fttol+2
 16006  0C6A  3017               	movlw	23
 16007  0C6B                     u4815:	
 16008  0C6B  36D1               	lsrf	??___fttol+2,f
 16009  0C6C  0CD0               	rrf	??___fttol+1,f
 16010  0C6D  0CCF               	rrf	??___fttol,f
 16011  0C6E  0B89               	decfsz	9,f
 16012  0C6F  2C6B               	goto	u4815
 16013  0C70  084F               	movf	??___fttol,w
 16014  0C71  00D2               	movwf	??___fttol+3
 16015  0C72  0852               	movf	??___fttol+3,w
 16016  0C73  00D3               	movwf	___fttol@sign1
 16017  0C74  17CC               	bsf	___fttol@f1+1,7
 16018  0C75  30FF               	movlw	255
 16019  0C76  05CB               	andwf	___fttol@f1,f
 16020  0C77  30FF               	movlw	255
 16021  0C78  05CC               	andwf	___fttol@f1+1,f
 16022  0C79  3000               	movlw	0
 16023  0C7A  05CD               	andwf	___fttol@f1+2,f
 16024  0C7B  084B               	movf	___fttol@f1,w
 16025  0C7C  00D4               	movwf	___fttol@lval
 16026  0C7D  084C               	movf	___fttol@f1+1,w
 16027  0C7E  00D5               	movwf	___fttol@lval+1
 16028  0C7F  084D               	movf	___fttol@f1+2,w
 16029  0C80  00D6               	movwf	___fttol@lval+2
 16030  0C81  01D7               	clrf	___fttol@lval+3
 16031  0C82  308E               	movlw	142
 16032  0C83  02D8               	subwf	___fttol@exp1,f
 16033  0C84  1FD8               	btfss	___fttol@exp1,7
 16034  0C85  2CA2               	goto	l6106
 16035  0C86  0858               	movf	___fttol@exp1,w
 16036  0C87  3A80               	xorlw	128
 16037  0C88  3E8F               	addlw	143
 16038  0C89  1803               	skipnc
 16039  0C8A  2C94               	goto	l6104
 16040  0C8B  3000               	movlw	0
 16041  0C8C  00CE               	movwf	?___fttol+3
 16042  0C8D  3000               	movlw	0
 16043  0C8E  00CD               	movwf	?___fttol+2
 16044  0C8F  3000               	movlw	0
 16045  0C90  00CC               	movwf	?___fttol+1
 16046  0C91  3000               	movlw	0
 16047  0C92  00CB               	movwf	?___fttol
 16048  0C93  0008               	return
 16049  0C94                     l6104:	
 16050  0C94  3001               	movlw	1
 16051  0C95                     u4845:	
 16052  0C95  36D7               	lsrf	___fttol@lval+3,f
 16053  0C96  0CD6               	rrf	___fttol@lval+2,f
 16054  0C97  0CD5               	rrf	___fttol@lval+1,f
 16055  0C98  0CD4               	rrf	___fttol@lval,f
 16056  0C99  0B89               	decfsz	9,f
 16057  0C9A  2C95               	goto	u4845
 16058  0C9B  3001               	movlw	1
 16059  0C9C  00CF               	movwf	??___fttol
 16060  0C9D  084F               	movf	??___fttol,w
 16061  0C9E  07D8               	addwf	___fttol@exp1,f
 16062  0C9F  1903               	btfsc	3,2
 16063  0CA0  2CBB               	goto	l6116
 16064  0CA1  2C94               	goto	l6104
 16065  0CA2                     l6106:	
 16066  0CA2  3018               	movlw	24
 16067  0CA3  0258               	subwf	___fttol@exp1,w
 16068  0CA4  1C03               	skipc
 16069  0CA5  2CB8               	goto	l6114
 16070  0CA6  3000               	movlw	0
 16071  0CA7  00CE               	movwf	?___fttol+3
 16072  0CA8  3000               	movlw	0
 16073  0CA9  00CD               	movwf	?___fttol+2
 16074  0CAA  3000               	movlw	0
 16075  0CAB  00CC               	movwf	?___fttol+1
 16076  0CAC  3000               	movlw	0
 16077  0CAD  00CB               	movwf	?___fttol
 16078  0CAE  0008               	return
 16079  0CAF                     l6112:	
 16080  0CAF  3001               	movlw	1
 16081  0CB0                     u4875:	
 16082  0CB0  35D4               	lslf	___fttol@lval,f
 16083  0CB1  0DD5               	rlf	___fttol@lval+1,f
 16084  0CB2  0DD6               	rlf	___fttol@lval+2,f
 16085  0CB3  0DD7               	rlf	___fttol@lval+3,f
 16086  0CB4  0B89               	decfsz	9,f
 16087  0CB5  2CB0               	goto	u4875
 16088  0CB6  3001               	movlw	1
 16089  0CB7  02D8               	subwf	___fttol@exp1,f
 16090  0CB8                     l6114:	
 16091  0CB8  08D8               	movf	___fttol@exp1,f
 16092  0CB9  1D03               	skipz
 16093  0CBA  2CAF               	goto	l6112
 16094  0CBB                     l6116:	
 16095  0CBB  0853               	movf	___fttol@sign1,w
 16096  0CBC  1903               	btfsc	3,2
 16097  0CBD  2CC9               	goto	l6120
 16098  0CBE  09D4               	comf	___fttol@lval,f
 16099  0CBF  09D5               	comf	___fttol@lval+1,f
 16100  0CC0  09D6               	comf	___fttol@lval+2,f
 16101  0CC1  09D7               	comf	___fttol@lval+3,f
 16102  0CC2  0AD4               	incf	___fttol@lval,f
 16103  0CC3  1903               	skipnz
 16104  0CC4  0AD5               	incf	___fttol@lval+1,f
 16105  0CC5  1903               	skipnz
 16106  0CC6  0AD6               	incf	___fttol@lval+2,f
 16107  0CC7  1903               	skipnz
 16108  0CC8  0AD7               	incf	___fttol@lval+3,f
 16109  0CC9                     l6120:	
 16110  0CC9  0857               	movf	___fttol@lval+3,w
 16111  0CCA  00CE               	movwf	?___fttol+3
 16112  0CCB  0856               	movf	___fttol@lval+2,w
 16113  0CCC  00CD               	movwf	?___fttol+2
 16114  0CCD  0855               	movf	___fttol@lval+1,w
 16115  0CCE  00CC               	movwf	?___fttol+1
 16116  0CCF  0854               	movf	___fttol@lval,w
 16117  0CD0  00CB               	movwf	?___fttol
 16118  0CD1  0008               	return
 16119  0CD2                     __end_of___fttol:	
 16120                           
 16121                           	psect	text104
 16122  0DE6                     __ptext104:	
 16123 ;; *************** function ___ftdiv *****************
 16124 ;; Defined at:
 16125 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16126 ;; Parameters:    Size  Location     Type
 16127 ;;  f2              3   14[BANK0 ] float 
 16128 ;;  f1              3   17[BANK0 ] float 
 16129 ;; Auto vars:     Size  Location     Type
 16130 ;;  f3              3   25[BANK0 ] float 
 16131 ;;  sign            1   29[BANK0 ] unsigned char 
 16132 ;;  exp             1   28[BANK0 ] unsigned char 
 16133 ;;  cntr            1   24[BANK0 ] unsigned char 
 16134 ;; Return value:  Size  Location     Type
 16135 ;;                  3   14[BANK0 ] float 
 16136 ;; Registers used:
 16137 ;;		wreg, status,2, status,0, pclath, cstack
 16138 ;; Tracked objects:
 16139 ;;		On entry : 0/0
 16140 ;;		On exit  : 0/0
 16141 ;;		Unchanged: 0/0
 16142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16143 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16144 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16145 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16146 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16147 ;;Total ram usage:       16 bytes
 16148 ;; Hardware stack levels used:    1
 16149 ;; Hardware stack levels required when called:    6
 16150 ;; This function calls:
 16151 ;;		___ftpack
 16152 ;; This function is called by:
 16153 ;;		_getPercentValue
 16154 ;;		_setPercentValue
 16155 ;; This function uses a non-reentrant model
 16156 ;;
 16157                           
 16158                           
 16159                           ;psect for function ___ftdiv
 16160  0DE6                     ___ftdiv:	
 16161                           
 16162                           ;incstack = 0
 16163                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16164  0DE6  0020               	movlb	0	; select bank0
 16165  0DE7  0831               	movf	___ftdiv@f1,w
 16166  0DE8  00B4               	movwf	??___ftdiv
 16167  0DE9  0832               	movf	___ftdiv@f1+1,w
 16168  0DEA  00B5               	movwf	??___ftdiv+1
 16169  0DEB  0833               	movf	___ftdiv@f1+2,w
 16170  0DEC  00B6               	movwf	??___ftdiv+2
 16171  0DED  1003               	clrc
 16172  0DEE  0D35               	rlf	??___ftdiv+1,w
 16173  0DEF  0D36               	rlf	??___ftdiv+2,w
 16174  0DF0  00B7               	movwf	??___ftdiv+3
 16175  0DF1  0837               	movf	??___ftdiv+3,w
 16176  0DF2  00BC               	movwf	___ftdiv@exp
 16177  0DF3  08BC               	movf	___ftdiv@exp,f
 16178  0DF4  1D03               	skipz
 16179  0DF5  2DFD               	goto	l5994
 16180  0DF6  3000               	movlw	0
 16181  0DF7  00AE               	movwf	?___ftdiv
 16182  0DF8  3000               	movlw	0
 16183  0DF9  00AF               	movwf	?___ftdiv+1
 16184  0DFA  3000               	movlw	0
 16185  0DFB  00B0               	movwf	?___ftdiv+2
 16186  0DFC  0008               	return
 16187  0DFD                     l5994:	
 16188  0DFD  082E               	movf	___ftdiv@f2,w
 16189  0DFE  00B4               	movwf	??___ftdiv
 16190  0DFF  082F               	movf	___ftdiv@f2+1,w
 16191  0E00  00B5               	movwf	??___ftdiv+1
 16192  0E01  0830               	movf	___ftdiv@f2+2,w
 16193  0E02  00B6               	movwf	??___ftdiv+2
 16194  0E03  1003               	clrc
 16195  0E04  0D35               	rlf	??___ftdiv+1,w
 16196  0E05  0D36               	rlf	??___ftdiv+2,w
 16197  0E06  00B7               	movwf	??___ftdiv+3
 16198  0E07  0837               	movf	??___ftdiv+3,w
 16199  0E08  00BD               	movwf	___ftdiv@sign
 16200  0E09  08BD               	movf	___ftdiv@sign,f
 16201  0E0A  1D03               	skipz
 16202  0E0B  2E13               	goto	l6000
 16203  0E0C  3000               	movlw	0
 16204  0E0D  00AE               	movwf	?___ftdiv
 16205  0E0E  3000               	movlw	0
 16206  0E0F  00AF               	movwf	?___ftdiv+1
 16207  0E10  3000               	movlw	0
 16208  0E11  00B0               	movwf	?___ftdiv+2
 16209  0E12  0008               	return
 16210  0E13                     l6000:	
 16211  0E13  3000               	movlw	0
 16212  0E14  00B9               	movwf	___ftdiv@f3
 16213  0E15  3000               	movlw	0
 16214  0E16  00BA               	movwf	___ftdiv@f3+1
 16215  0E17  3000               	movlw	0
 16216  0E18  00BB               	movwf	___ftdiv@f3+2
 16217  0E19  3089               	movlw	137
 16218  0E1A  073D               	addwf	___ftdiv@sign,w
 16219  0E1B  00B4               	movwf	??___ftdiv
 16220  0E1C  0834               	movf	??___ftdiv,w
 16221  0E1D  02BC               	subwf	___ftdiv@exp,f
 16222  0E1E  0831               	movf	___ftdiv@f1,w
 16223  0E1F  00B4               	movwf	??___ftdiv
 16224  0E20  0832               	movf	___ftdiv@f1+1,w
 16225  0E21  00B5               	movwf	??___ftdiv+1
 16226  0E22  0833               	movf	___ftdiv@f1+2,w
 16227  0E23  00B6               	movwf	??___ftdiv+2
 16228  0E24  3010               	movlw	16
 16229  0E25                     u4625:	
 16230  0E25  36B6               	lsrf	??___ftdiv+2,f
 16231  0E26  0CB5               	rrf	??___ftdiv+1,f
 16232  0E27  0CB4               	rrf	??___ftdiv,f
 16233  0E28  0B89               	decfsz	9,f
 16234  0E29  2E25               	goto	u4625
 16235  0E2A  0834               	movf	??___ftdiv,w
 16236  0E2B  00B7               	movwf	??___ftdiv+3
 16237  0E2C  0837               	movf	??___ftdiv+3,w
 16238  0E2D  00BD               	movwf	___ftdiv@sign
 16239  0E2E  082E               	movf	___ftdiv@f2,w
 16240  0E2F  00B4               	movwf	??___ftdiv
 16241  0E30  082F               	movf	___ftdiv@f2+1,w
 16242  0E31  00B5               	movwf	??___ftdiv+1
 16243  0E32  0830               	movf	___ftdiv@f2+2,w
 16244  0E33  00B6               	movwf	??___ftdiv+2
 16245  0E34  3010               	movlw	16
 16246  0E35                     u4635:	
 16247  0E35  36B6               	lsrf	??___ftdiv+2,f
 16248  0E36  0CB5               	rrf	??___ftdiv+1,f
 16249  0E37  0CB4               	rrf	??___ftdiv,f
 16250  0E38  0B89               	decfsz	9,f
 16251  0E39  2E35               	goto	u4635
 16252  0E3A  0834               	movf	??___ftdiv,w
 16253  0E3B  00B7               	movwf	??___ftdiv+3
 16254  0E3C  0837               	movf	??___ftdiv+3,w
 16255  0E3D  06BD               	xorwf	___ftdiv@sign,f
 16256  0E3E  3080               	movlw	128
 16257  0E3F  00B4               	movwf	??___ftdiv
 16258  0E40  0834               	movf	??___ftdiv,w
 16259  0E41  05BD               	andwf	___ftdiv@sign,f
 16260  0E42  17B2               	bsf	___ftdiv@f1+1,7
 16261  0E43  30FF               	movlw	255
 16262  0E44  05B1               	andwf	___ftdiv@f1,f
 16263  0E45  30FF               	movlw	255
 16264  0E46  05B2               	andwf	___ftdiv@f1+1,f
 16265  0E47  3000               	movlw	0
 16266  0E48  05B3               	andwf	___ftdiv@f1+2,f
 16267  0E49  17AF               	bsf	___ftdiv@f2+1,7
 16268  0E4A  30FF               	movlw	255
 16269  0E4B  05AE               	andwf	___ftdiv@f2,f
 16270  0E4C  30FF               	movlw	255
 16271  0E4D  05AF               	andwf	___ftdiv@f2+1,f
 16272  0E4E  3000               	movlw	0
 16273  0E4F  05B0               	andwf	___ftdiv@f2+2,f
 16274  0E50  3018               	movlw	24
 16275  0E51  00B4               	movwf	??___ftdiv
 16276  0E52  0834               	movf	??___ftdiv,w
 16277  0E53  00B8               	movwf	___ftdiv@cntr
 16278  0E54                     l6014:	
 16279  0E54  3001               	movlw	1
 16280  0E55                     u4645:	
 16281  0E55  35B9               	lslf	___ftdiv@f3,f
 16282  0E56  0DBA               	rlf	___ftdiv@f3+1,f
 16283  0E57  0DBB               	rlf	___ftdiv@f3+2,f
 16284  0E58  0B89               	decfsz	9,f
 16285  0E59  2E55               	goto	u4645
 16286  0E5A  0830               	movf	___ftdiv@f2+2,w
 16287  0E5B  0233               	subwf	___ftdiv@f1+2,w
 16288  0E5C  1D03               	skipz
 16289  0E5D  2E64               	goto	u4655
 16290  0E5E  082F               	movf	___ftdiv@f2+1,w
 16291  0E5F  0232               	subwf	___ftdiv@f1+1,w
 16292  0E60  1D03               	skipz
 16293  0E61  2E64               	goto	u4655
 16294  0E62  082E               	movf	___ftdiv@f2,w
 16295  0E63  0231               	subwf	___ftdiv@f1,w
 16296  0E64                     u4655:	
 16297  0E64  1C03               	skipc
 16298  0E65  2E6D               	goto	l6022
 16299  0E66  082E               	movf	___ftdiv@f2,w
 16300  0E67  02B1               	subwf	___ftdiv@f1,f
 16301  0E68  082F               	movf	___ftdiv@f2+1,w
 16302  0E69  3BB2               	subwfb	___ftdiv@f1+1,f
 16303  0E6A  0830               	movf	___ftdiv@f2+2,w
 16304  0E6B  3BB3               	subwfb	___ftdiv@f1+2,f
 16305  0E6C  1439               	bsf	___ftdiv@f3,0
 16306  0E6D                     l6022:	
 16307  0E6D  3001               	movlw	1
 16308  0E6E                     u4665:	
 16309  0E6E  35B1               	lslf	___ftdiv@f1,f
 16310  0E6F  0DB2               	rlf	___ftdiv@f1+1,f
 16311  0E70  0DB3               	rlf	___ftdiv@f1+2,f
 16312  0E71  0B89               	decfsz	9,f
 16313  0E72  2E6E               	goto	u4665
 16314  0E73  3001               	movlw	1
 16315  0E74  02B8               	subwf	___ftdiv@cntr,f
 16316  0E75  1D03               	btfss	3,2
 16317  0E76  2E54               	goto	l6014
 16318  0E77  0839               	movf	___ftdiv@f3,w
 16319  0E78  00A0               	movwf	___ftpack@arg
 16320  0E79  083A               	movf	___ftdiv@f3+1,w
 16321  0E7A  00A1               	movwf	___ftpack@arg+1
 16322  0E7B  083B               	movf	___ftdiv@f3+2,w
 16323  0E7C  00A2               	movwf	___ftpack@arg+2
 16324  0E7D  083C               	movf	___ftdiv@exp,w
 16325  0E7E  00B4               	movwf	??___ftdiv
 16326  0E7F  0834               	movf	??___ftdiv,w
 16327  0E80  00A3               	movwf	___ftpack@exp
 16328  0E81  083D               	movf	___ftdiv@sign,w
 16329  0E82  00B5               	movwf	??___ftdiv+1
 16330  0E83  0835               	movf	??___ftdiv+1,w
 16331  0E84  00A4               	movwf	___ftpack@sign
 16332  0E85  3197  273A         	fcall	___ftpack
 16333  0E87  0020               	movlb	0	; select bank0
 16334  0E88  0820               	movf	?___ftpack,w
 16335  0E89  00AE               	movwf	?___ftdiv
 16336  0E8A  0821               	movf	?___ftpack+1,w
 16337  0E8B  00AF               	movwf	?___ftdiv+1
 16338  0E8C  0822               	movf	?___ftpack+2,w
 16339  0E8D  00B0               	movwf	?___ftdiv+2
 16340  0E8E  0008               	return
 16341  0E8F                     __end_of___ftdiv:	
 16342                           
 16343                           	psect	text105
 16344  1EA9                     __ptext105:	
 16345 ;; *************** function ___awtoft *****************
 16346 ;; Defined at:
 16347 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16348 ;; Parameters:    Size  Location     Type
 16349 ;;  c               2    8[BANK0 ] int 
 16350 ;; Auto vars:     Size  Location     Type
 16351 ;;  sign            1   13[BANK0 ] unsigned char 
 16352 ;; Return value:  Size  Location     Type
 16353 ;;                  3    8[BANK0 ] float 
 16354 ;; Registers used:
 16355 ;;		wreg, status,2, status,0, pclath, cstack
 16356 ;; Tracked objects:
 16357 ;;		On entry : 0/0
 16358 ;;		On exit  : 0/0
 16359 ;;		Unchanged: 0/0
 16360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16361 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16363 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16364 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16365 ;;Total ram usage:        6 bytes
 16366 ;; Hardware stack levels used:    1
 16367 ;; Hardware stack levels required when called:    6
 16368 ;; This function calls:
 16369 ;;		___ftpack
 16370 ;; This function is called by:
 16371 ;;		_getPercentValue
 16372 ;;		_setPercentValue
 16373 ;; This function uses a non-reentrant model
 16374 ;;
 16375                           
 16376                           
 16377                           ;psect for function ___awtoft
 16378  1EA9                     ___awtoft:	
 16379                           
 16380                           ;incstack = 0
 16381                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16382  1EA9  0020               	movlb	0	; select bank0
 16383  1EAA  01AD               	clrf	___awtoft@sign
 16384  1EAB  1FA9               	btfss	___awtoft@c+1,7
 16385  1EAC  2EB4               	goto	l8502
 16386  1EAD  09A8               	comf	___awtoft@c,f
 16387  1EAE  09A9               	comf	___awtoft@c+1,f
 16388  1EAF  0AA8               	incf	___awtoft@c,f
 16389  1EB0  1903               	skipnz
 16390  1EB1  0AA9               	incf	___awtoft@c+1,f
 16391  1EB2  01AD               	clrf	___awtoft@sign
 16392  1EB3  0AAD               	incf	___awtoft@sign,f
 16393  1EB4                     l8502:	
 16394  1EB4  0828               	movf	___awtoft@c,w
 16395  1EB5  00A0               	movwf	___ftpack@arg
 16396  1EB6  0829               	movf	___awtoft@c+1,w
 16397  1EB7  00A1               	movwf	___ftpack@arg+1
 16398  1EB8  01A2               	clrf	___ftpack@arg+2
 16399  1EB9  308E               	movlw	142
 16400  1EBA  00AB               	movwf	??___awtoft
 16401  1EBB  082B               	movf	??___awtoft,w
 16402  1EBC  00A3               	movwf	___ftpack@exp
 16403  1EBD  082D               	movf	___awtoft@sign,w
 16404  1EBE  00AC               	movwf	??___awtoft+1
 16405  1EBF  082C               	movf	??___awtoft+1,w
 16406  1EC0  00A4               	movwf	___ftpack@sign
 16407  1EC1  3197  273A         	fcall	___ftpack
 16408  1EC3  0020               	movlb	0	; select bank0
 16409  1EC4  0820               	movf	?___ftpack,w
 16410  1EC5  00A8               	movwf	?___awtoft
 16411  1EC6  0821               	movf	?___ftpack+1,w
 16412  1EC7  00A9               	movwf	?___awtoft+1
 16413  1EC8  0822               	movf	?___ftpack+2,w
 16414  1EC9  00AA               	movwf	?___awtoft+2
 16415  1ECA  0008               	return
 16416  1ECB                     __end_of___awtoft:	
 16417                           
 16418                           	psect	text106
 16419  173A                     __ptext106:	
 16420 ;; *************** function ___ftpack *****************
 16421 ;; Defined at:
 16422 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16423 ;; Parameters:    Size  Location     Type
 16424 ;;  arg             3    0[BANK0 ] unsigned um
 16425 ;;  exp             1    3[BANK0 ] unsigned char 
 16426 ;;  sign            1    4[BANK0 ] unsigned char 
 16427 ;; Auto vars:     Size  Location     Type
 16428 ;;		None
 16429 ;; Return value:  Size  Location     Type
 16430 ;;                  3    0[BANK0 ] float 
 16431 ;; Registers used:
 16432 ;;		wreg, status,2, status,0
 16433 ;; Tracked objects:
 16434 ;;		On entry : 0/0
 16435 ;;		On exit  : 0/0
 16436 ;;		Unchanged: 0/0
 16437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16438 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16440 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16441 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16442 ;;Total ram usage:        8 bytes
 16443 ;; Hardware stack levels used:    1
 16444 ;; Hardware stack levels required when called:    5
 16445 ;; This function calls:
 16446 ;;		Nothing
 16447 ;; This function is called by:
 16448 ;;		___awtoft
 16449 ;;		___ftadd
 16450 ;;		___ftdiv
 16451 ;;		___ftmul
 16452 ;; This function uses a non-reentrant model
 16453 ;;
 16454                           
 16455                           
 16456                           ;psect for function ___ftpack
 16457  173A                     ___ftpack:	
 16458                           
 16459                           ;incstack = 0
 16460                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16461  173A  0020               	movlb	0	; select bank0
 16462  173B  0823               	movf	___ftpack@exp,w
 16463  173C  1903               	btfsc	3,2
 16464  173D  2F43               	goto	l5878
 16465  173E  0822               	movf	___ftpack@arg+2,w
 16466  173F  0421               	iorwf	___ftpack@arg+1,w
 16467  1740  0420               	iorwf	___ftpack@arg,w
 16468  1741  1D03               	skipz
 16469  1742  2F54               	goto	l5884
 16470  1743                     l5878:	
 16471  1743  3000               	movlw	0
 16472  1744  00A0               	movwf	?___ftpack
 16473  1745  3000               	movlw	0
 16474  1746  00A1               	movwf	?___ftpack+1
 16475  1747  3000               	movlw	0
 16476  1748  00A2               	movwf	?___ftpack+2
 16477  1749  0008               	return
 16478  174A                     l5882:	
 16479  174A  3001               	movlw	1
 16480  174B  00A5               	movwf	??___ftpack
 16481  174C  0825               	movf	??___ftpack,w
 16482  174D  07A3               	addwf	___ftpack@exp,f
 16483  174E  3001               	movlw	1
 16484  174F                     u4275:	
 16485  174F  36A2               	lsrf	___ftpack@arg+2,f
 16486  1750  0CA1               	rrf	___ftpack@arg+1,f
 16487  1751  0CA0               	rrf	___ftpack@arg,f
 16488  1752  0B89               	decfsz	9,f
 16489  1753  2F4F               	goto	u4275
 16490  1754                     l5884:	
 16491  1754  30FE               	movlw	254
 16492  1755  0522               	andwf	___ftpack@arg+2,w
 16493  1756  1903               	btfsc	3,2
 16494  1757  2F6D               	goto	l3030
 16495  1758  2F4A               	goto	l5882
 16496  1759                     l5886:	
 16497  1759  3001               	movlw	1
 16498  175A  00A5               	movwf	??___ftpack
 16499  175B  0825               	movf	??___ftpack,w
 16500  175C  07A3               	addwf	___ftpack@exp,f
 16501  175D  3001               	movlw	1
 16502  175E  07A0               	addwf	___ftpack@arg,f
 16503  175F  3000               	movlw	0
 16504  1760  1803               	skipnc
 16505  1761  3001               	movlw	1
 16506  1762  07A1               	addwf	___ftpack@arg+1,f
 16507  1763  3000               	movlw	0
 16508  1764  1803               	skipnc
 16509  1765  3001               	movlw	1
 16510  1766  07A2               	addwf	___ftpack@arg+2,f
 16511  1767  3001               	movlw	1
 16512  1768                     u4295:	
 16513  1768  36A2               	lsrf	___ftpack@arg+2,f
 16514  1769  0CA1               	rrf	___ftpack@arg+1,f
 16515  176A  0CA0               	rrf	___ftpack@arg,f
 16516  176B  0B89               	decfsz	9,f
 16517  176C  2F68               	goto	u4295
 16518  176D                     l3030:	
 16519  176D  30FF               	movlw	255
 16520  176E  0522               	andwf	___ftpack@arg+2,w
 16521  176F  1903               	btfsc	3,2
 16522  1770  2F7A               	goto	l5894
 16523  1771  2F59               	goto	l5886
 16524  1772                     l5892:	
 16525  1772  3001               	movlw	1
 16526  1773  02A3               	subwf	___ftpack@exp,f
 16527  1774  3001               	movlw	1
 16528  1775                     u4315:	
 16529  1775  35A0               	lslf	___ftpack@arg,f
 16530  1776  0DA1               	rlf	___ftpack@arg+1,f
 16531  1777  0DA2               	rlf	___ftpack@arg+2,f
 16532  1778  0B89               	decfsz	9,f
 16533  1779  2F75               	goto	u4315
 16534  177A                     l5894:	
 16535  177A  1FA1               	btfss	___ftpack@arg+1,7
 16536  177B  2F72               	goto	l5892
 16537  177C  1823               	btfsc	___ftpack@exp,0
 16538  177D  2F84               	goto	l3036
 16539  177E  30FF               	movlw	255
 16540  177F  05A0               	andwf	___ftpack@arg,f
 16541  1780  307F               	movlw	127
 16542  1781  05A1               	andwf	___ftpack@arg+1,f
 16543  1782  30FF               	movlw	255
 16544  1783  05A2               	andwf	___ftpack@arg+2,f
 16545  1784                     l3036:	
 16546  1784  1003               	clrc
 16547  1785  0CA3               	rrf	___ftpack@exp,f
 16548  1786  0823               	movf	___ftpack@exp,w
 16549  1787  00A5               	movwf	??___ftpack
 16550  1788  01A6               	clrf	??___ftpack+1
 16551  1789  01A7               	clrf	??___ftpack+2
 16552  178A  3010               	movlw	16
 16553  178B                     u4345:	
 16554  178B  35A5               	lslf	??___ftpack,f
 16555  178C  0DA6               	rlf	??___ftpack+1,f
 16556  178D  0DA7               	rlf	??___ftpack+2,f
 16557  178E  0B89               	decfsz	9,f
 16558  178F  2F8B               	goto	u4345
 16559  1790  0825               	movf	??___ftpack,w
 16560  1791  04A0               	iorwf	___ftpack@arg,f
 16561  1792  0826               	movf	??___ftpack+1,w
 16562  1793  04A1               	iorwf	___ftpack@arg+1,f
 16563  1794  0827               	movf	??___ftpack+2,w
 16564  1795  04A2               	iorwf	___ftpack@arg+2,f
 16565  1796  0824               	movf	___ftpack@sign,w
 16566  1797  1903               	btfsc	3,2
 16567  1798  0008               	return
 16568  1799  17A2               	bsf	___ftpack@arg+2,7
 16569  179A  0008               	return
 16570  179B                     __end_of___ftpack:	
 16571                           
 16572                           	psect	text107
 16573  1B0A                     __ptext107:	
 16574 ;; *************** function _setRFSW_Status *****************
 16575 ;; Defined at:
 16576 ;;		line 434 in file "../src/RF_Control_B1.c"
 16577 ;; Parameters:    Size  Location     Type
 16578 ;;  sw              1    wreg     unsigned char 
 16579 ;;  command         1    2[BANK0 ] unsigned char 
 16580 ;; Auto vars:     Size  Location     Type
 16581 ;;  sw              1    3[BANK0 ] unsigned char 
 16582 ;; Return value:  Size  Location     Type
 16583 ;;		None               void
 16584 ;; Registers used:
 16585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16586 ;; Tracked objects:
 16587 ;;		On entry : 0/0
 16588 ;;		On exit  : 0/0
 16589 ;;		Unchanged: 0/0
 16590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16591 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16594 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16595 ;;Total ram usage:        2 bytes
 16596 ;; Hardware stack levels used:    1
 16597 ;; Hardware stack levels required when called:    6
 16598 ;; This function calls:
 16599 ;;		_RfSWPointSelect
 16600 ;; This function is called by:
 16601 ;;		_DlyOff_Main
 16602 ;;		_setDimmerLights_ERROR
 16603 ;;		_setControl_Lights_Table
 16604 ;;		_Sw_DimmerOnFunc
 16605 ;;		_Sw_DimmerAdjFunc
 16606 ;; This function uses a non-reentrant model
 16607 ;;
 16608                           
 16609                           
 16610                           ;psect for function _setRFSW_Status
 16611  1B0A                     _setRFSW_Status:	
 16612                           
 16613                           ;incstack = 0
 16614                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16615                           ;setRFSW_Status@sw stored from wreg
 16616  1B0A  0020               	movlb	0	; select bank0
 16617  1B0B  00A3               	movwf	setRFSW_Status@sw
 16618                           
 16619                           ;RF_Control_B1.c: 435: RfSWPointSelect(sw);
 16620  1B0C  0823               	movf	setRFSW_Status@sw,w
 16621  1B0D  3187  27ED         	fcall	_RfSWPointSelect
 16622                           
 16623                           ;RF_Control_B1.c: 436: RFSW->Status = command;
 16624  1B0F  0879               	movf	_RFSW,w
 16625  1B10  0086               	movwf	6
 16626  1B11  0187               	clrf	7
 16627  1B12  0020               	movlb	0	; select bank0
 16628  1B13  0822               	movf	setRFSW_Status@command,w
 16629  1B14  1001               	bcf	1,0
 16630  1B15  1D03               	skipz
 16631  1B16  1401               	bsf	1,0
 16632  1B17  0008               	return
 16633  1B18                     __end_of_setRFSW_Status:	
 16634                           
 16635                           	psect	text108
 16636  07ED                     __ptext108:	
 16637 ;; *************** function _RfSWPointSelect *****************
 16638 ;; Defined at:
 16639 ;;		line 369 in file "../src/RF_Control_B1.c"
 16640 ;; Parameters:    Size  Location     Type
 16641 ;;  sw              1    wreg     unsigned char 
 16642 ;; Auto vars:     Size  Location     Type
 16643 ;;  sw              1    1[BANK0 ] unsigned char 
 16644 ;; Return value:  Size  Location     Type
 16645 ;;		None               void
 16646 ;; Registers used:
 16647 ;;		wreg
 16648 ;; Tracked objects:
 16649 ;;		On entry : 0/0
 16650 ;;		On exit  : 0/0
 16651 ;;		Unchanged: 0/0
 16652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16656 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16657 ;;Total ram usage:        2 bytes
 16658 ;; Hardware stack levels used:    1
 16659 ;; Hardware stack levels required when called:    5
 16660 ;; This function calls:
 16661 ;;		Nothing
 16662 ;; This function is called by:
 16663 ;;		_setRFSW_Control
 16664 ;;		_setRFSW_AdjControl
 16665 ;;		_setRFSW_Status
 16666 ;; This function uses a non-reentrant model
 16667 ;;
 16668                           
 16669                           
 16670                           ;psect for function _RfSWPointSelect
 16671  07ED                     _RfSWPointSelect:	
 16672                           
 16673                           ;incstack = 0
 16674                           ; Regs used in _RfSWPointSelect: [wreg]
 16675                           ;RfSWPointSelect@sw stored from wreg
 16676  07ED  0020               	movlb	0	; select bank0
 16677  07EE  00A1               	movwf	RfSWPointSelect@sw
 16678                           
 16679                           ;RF_Control_B1.c: 371: if (sw == 1) {
 16680  07EF  0821               	movf	RfSWPointSelect@sw,w
 16681  07F0  3A01               	xorlw	1
 16682  07F1  1D03               	skipz
 16683  07F2  2FF7               	goto	l2340
 16684                           
 16685                           ;RF_Control_B1.c: 372: RFSW = &RFSW1;
 16686  07F3  30EE               	movlw	_RFSW1& (0+255)
 16687  07F4  00A0               	movwf	??_RfSWPointSelect
 16688  07F5  0820               	movf	??_RfSWPointSelect,w
 16689  07F6  00F9               	movwf	_RFSW
 16690  07F7                     l2340:	
 16691                           
 16692                           ;RF_Control_B1.c: 373: }
 16693                           ;RF_Control_B1.c: 376: if (sw == 2) {
 16694  07F7  0821               	movf	RfSWPointSelect@sw,w
 16695  07F8  3A02               	xorlw	2
 16696  07F9  1D03               	skipz
 16697  07FA  0008               	return
 16698                           
 16699                           ;RF_Control_B1.c: 377: RFSW = &RFSW2;
 16700  07FB  30EF               	movlw	_RFSW2& (0+255)
 16701  07FC  00A0               	movwf	??_RfSWPointSelect
 16702  07FD  0820               	movf	??_RfSWPointSelect,w
 16703  07FE  00F9               	movwf	_RFSW
 16704  07FF  0008               	return
 16705  0800                     __end_of_RfSWPointSelect:	
 16706                           
 16707                           	psect	text109
 16708  1B71                     __ptext109:	
 16709 ;; *************** function _setDimmerLights_Trigger *****************
 16710 ;; Defined at:
 16711 ;;		line 714 in file "../src/Dimmer_B1.c"
 16712 ;; Parameters:    Size  Location     Type
 16713 ;;  lights          1    wreg     unsigned char 
 16714 ;;  command         1    2[BANK0 ] unsigned char 
 16715 ;; Auto vars:     Size  Location     Type
 16716 ;;  lights          1    3[BANK0 ] unsigned char 
 16717 ;; Return value:  Size  Location     Type
 16718 ;;		None               void
 16719 ;; Registers used:
 16720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16721 ;; Tracked objects:
 16722 ;;		On entry : 0/0
 16723 ;;		On exit  : 0/0
 16724 ;;		Unchanged: 0/0
 16725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16726 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16727 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16729 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16730 ;;Total ram usage:        2 bytes
 16731 ;; Hardware stack levels used:    1
 16732 ;; Hardware stack levels required when called:    6
 16733 ;; This function calls:
 16734 ;;		_DimmerLightsPointSelect
 16735 ;; This function is called by:
 16736 ;;		_DlyOff_Main
 16737 ;;		_setRFSW_Control
 16738 ;;		_Sw_DimmerOnFunc
 16739 ;;		_Sw_DimmerOffFunc
 16740 ;; This function uses a non-reentrant model
 16741 ;;
 16742                           
 16743                           
 16744                           ;psect for function _setDimmerLights_Trigger
 16745  1B71                     _setDimmerLights_Trigger:	
 16746                           
 16747                           ;incstack = 0
 16748                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16749                           ;setDimmerLights_Trigger@lights stored from wreg
 16750  1B71  0020               	movlb	0	; select bank0
 16751  1B72  00A3               	movwf	setDimmerLights_Trigger@lights
 16752                           
 16753                           ;Dimmer_B1.c: 716: DimmerLightsPointSelect(lights);
 16754  1B73  0823               	movf	setDimmerLights_Trigger@lights,w
 16755  1B74  319C  242C         	fcall	_DimmerLightsPointSelect
 16756                           
 16757                           ;Dimmer_B1.c: 717: DimmerLights->Trigger = command;
 16758  1B76  0020               	movlb	0	; select bank0
 16759  1B77  086B               	movf	_DimmerLights,w
 16760  1B78  3E08               	addlw	8
 16761  1B79  0086               	movwf	6
 16762  1B7A  3001               	movlw	1	; select bank2/3
 16763  1B7B  0087               	movwf	7
 16764  1B7C  0822               	movf	setDimmerLights_Trigger@command,w
 16765  1B7D  1101               	bcf	1,2
 16766  1B7E  1D03               	skipz
 16767  1B7F  1501               	bsf	1,2
 16768  1B80  0008               	return
 16769  1B81                     __end_of_setDimmerLights_Trigger:	
 16770                           
 16771                           	psect	text110
 16772  1B61                     __ptext110:	
 16773 ;; *************** function _setDimmerLights_Switch *****************
 16774 ;; Defined at:
 16775 ;;		line 702 in file "../src/Dimmer_B1.c"
 16776 ;; Parameters:    Size  Location     Type
 16777 ;;  lights          1    wreg     unsigned char 
 16778 ;;  command         1    2[BANK0 ] unsigned char 
 16779 ;; Auto vars:     Size  Location     Type
 16780 ;;  lights          1    3[BANK0 ] unsigned char 
 16781 ;; Return value:  Size  Location     Type
 16782 ;;		None               void
 16783 ;; Registers used:
 16784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16785 ;; Tracked objects:
 16786 ;;		On entry : 0/0
 16787 ;;		On exit  : 0/0
 16788 ;;		Unchanged: 0/0
 16789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16790 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16794 ;;Total ram usage:        2 bytes
 16795 ;; Hardware stack levels used:    1
 16796 ;; Hardware stack levels required when called:    6
 16797 ;; This function calls:
 16798 ;;		_DimmerLightsPointSelect
 16799 ;; This function is called by:
 16800 ;;		_DlyOff_Main
 16801 ;;		_setRFSW_Control
 16802 ;;		_Sw_DimmerOnFunc
 16803 ;;		_Sw_DimmerOffFunc
 16804 ;; This function uses a non-reentrant model
 16805 ;;
 16806                           
 16807                           
 16808                           ;psect for function _setDimmerLights_Switch
 16809  1B61                     _setDimmerLights_Switch:	
 16810                           
 16811                           ;incstack = 0
 16812                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16813                           ;setDimmerLights_Switch@lights stored from wreg
 16814  1B61  0020               	movlb	0	; select bank0
 16815  1B62  00A3               	movwf	setDimmerLights_Switch@lights
 16816                           
 16817                           ;Dimmer_B1.c: 704: DimmerLightsPointSelect(lights);
 16818  1B63  0823               	movf	setDimmerLights_Switch@lights,w
 16819  1B64  319C  242C         	fcall	_DimmerLightsPointSelect
 16820                           
 16821                           ;Dimmer_B1.c: 705: DimmerLights->Switch = command;
 16822  1B66  0020               	movlb	0	; select bank0
 16823  1B67  086B               	movf	_DimmerLights,w
 16824  1B68  3E08               	addlw	8
 16825  1B69  0086               	movwf	6
 16826  1B6A  3001               	movlw	1	; select bank2/3
 16827  1B6B  0087               	movwf	7
 16828  1B6C  0822               	movf	setDimmerLights_Switch@command,w
 16829  1B6D  1081               	bcf	1,1
 16830  1B6E  1D03               	skipz
 16831  1B6F  1481               	bsf	1,1
 16832  1B70  0008               	return
 16833  1B71                     __end_of_setDimmerLights_Switch:	
 16834                           
 16835                           	psect	text111
 16836  1C2C                     __ptext111:	
 16837 ;; *************** function _DimmerLightsPointSelect *****************
 16838 ;; Defined at:
 16839 ;;		line 324 in file "../src/Dimmer_B1.c"
 16840 ;; Parameters:    Size  Location     Type
 16841 ;;  lights          1    wreg     unsigned char 
 16842 ;; Auto vars:     Size  Location     Type
 16843 ;;  lights          1    1[BANK0 ] unsigned char 
 16844 ;; Return value:  Size  Location     Type
 16845 ;;		None               void
 16846 ;; Registers used:
 16847 ;;		wreg
 16848 ;; Tracked objects:
 16849 ;;		On entry : 0/0
 16850 ;;		On exit  : 0/0
 16851 ;;		Unchanged: 0/0
 16852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16855 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16856 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16857 ;;Total ram usage:        2 bytes
 16858 ;; Hardware stack levels used:    1
 16859 ;; Hardware stack levels required when called:    5
 16860 ;; This function calls:
 16861 ;;		Nothing
 16862 ;; This function is called by:
 16863 ;;		_setDimmerLights_Initialization
 16864 ;;		_setDimmerLights_Main
 16865 ;;		_setDimmerLights_ERROR
 16866 ;;		_setDimmerLights_TriggerERROR
 16867 ;;		_setDimmerLights
 16868 ;;		_setDimmerLights_Adj
 16869 ;;		_setDimmerLights_AdjRF
 16870 ;;		_setDimmerLights_Switch
 16871 ;;		_setDimmerLights_AdjGo
 16872 ;;		_setDimmerLights_Trigger
 16873 ;;		_setDimmerLights_TriggerAdj
 16874 ;;		_setDimmerLights_Clear
 16875 ;;		_setDimmerLights_GO
 16876 ;;		_setDimmerLights_MaxmumValue
 16877 ;; This function uses a non-reentrant model
 16878 ;;
 16879                           
 16880                           
 16881                           ;psect for function _DimmerLightsPointSelect
 16882  1C2C                     _DimmerLightsPointSelect:	
 16883                           
 16884                           ;incstack = 0
 16885                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16886                           ;DimmerLightsPointSelect@lights stored from wreg
 16887  1C2C  0020               	movlb	0	; select bank0
 16888  1C2D  00A1               	movwf	DimmerLightsPointSelect@lights
 16889                           
 16890                           ;Dimmer_B1.c: 326: if (lights == 1) {
 16891  1C2E  0821               	movf	DimmerLightsPointSelect@lights,w
 16892  1C2F  3A01               	xorlw	1
 16893  1C30  1D03               	skipz
 16894  1C31  2C36               	goto	l824
 16895                           
 16896                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 16897  1C32  3035               	movlw	_DimmerLights1& (0+255)
 16898  1C33  00A0               	movwf	??_DimmerLightsPointSelect
 16899  1C34  0820               	movf	??_DimmerLightsPointSelect,w
 16900  1C35  00EB               	movwf	_DimmerLights
 16901  1C36                     l824:	
 16902                           
 16903                           ;Dimmer_B1.c: 328: }
 16904                           ;Dimmer_B1.c: 331: if (lights == 2) {
 16905  1C36  0821               	movf	DimmerLightsPointSelect@lights,w
 16906  1C37  3A02               	xorlw	2
 16907  1C38  1D03               	skipz
 16908  1C39  0008               	return
 16909                           
 16910                           ;Dimmer_B1.c: 332: DimmerLights = &DimmerLights2;
 16911  1C3A  3044               	movlw	_DimmerLights2& (0+255)
 16912  1C3B  00A0               	movwf	??_DimmerLightsPointSelect
 16913  1C3C  0820               	movf	??_DimmerLightsPointSelect,w
 16914  1C3D  00EB               	movwf	_DimmerLights
 16915  1C3E  0008               	return
 16916  1C3F                     __end_of_DimmerLightsPointSelect:	
 16917                           
 16918                           	psect	text112
 16919  156B                     __ptext112:	
 16920 ;; *************** function _setBuz *****************
 16921 ;; Defined at:
 16922 ;;		line 22 in file "../src/Buzzer_B1.c"
 16923 ;; Parameters:    Size  Location     Type
 16924 ;;  count           1    wreg     unsigned char 
 16925 ;;  time            2    9[BANK0 ] int 
 16926 ;; Auto vars:     Size  Location     Type
 16927 ;;  count           1   12[BANK0 ] unsigned char 
 16928 ;; Return value:  Size  Location     Type
 16929 ;;		None               void
 16930 ;; Registers used:
 16931 ;;		wreg, status,2, status,0, pclath, cstack
 16932 ;; Tracked objects:
 16933 ;;		On entry : 0/0
 16934 ;;		On exit  : 0/0
 16935 ;;		Unchanged: 0/0
 16936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16937 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16938 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16939 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16941 ;;Total ram usage:        4 bytes
 16942 ;; Hardware stack levels used:    1
 16943 ;; Hardware stack levels required when called:    6
 16944 ;; This function calls:
 16945 ;;		___awdiv
 16946 ;; This function is called by:
 16947 ;;		_DlyOff_Main
 16948 ;;		_setDimmerLights_Main
 16949 ;;		_DimmerLights_Exceptions
 16950 ;;		_my_MainTime
 16951 ;;		_setOverTemp_Exceptions
 16952 ;;		_setLog_Code
 16953 ;;		_setControl_Lights_Table
 16954 ;;		_setRFSW_Control
 16955 ;;		_setSw_Main
 16956 ;;		_Sw_DimmerOnFunc
 16957 ;; This function uses a non-reentrant model
 16958 ;;
 16959                           
 16960                           
 16961                           ;psect for function _setBuz
 16962  156B                     _setBuz:	
 16963                           
 16964                           ;incstack = 0
 16965                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16966                           ;setBuz@count stored from wreg
 16967  156B  0020               	movlb	0	; select bank0
 16968  156C  00AC               	movwf	setBuz@count
 16969                           
 16970                           ;Buzzer_B1.c: 23: time /= 10;
 16971  156D  300A               	movlw	10
 16972  156E  00A0               	movwf	___awdiv@divisor
 16973  156F  3000               	movlw	0
 16974  1570  00A1               	movwf	___awdiv@divisor+1
 16975  1571  082A               	movf	setBuz@time+1,w
 16976  1572  01A3               	clrf	___awdiv@dividend+1
 16977  1573  07A3               	addwf	___awdiv@dividend+1,f
 16978  1574  0829               	movf	setBuz@time,w
 16979  1575  01A2               	clrf	___awdiv@dividend
 16980  1576  07A2               	addwf	___awdiv@dividend,f
 16981  1577  3194  2469  3195   	fcall	___awdiv
 16982  157A  0020               	movlb	0	; select bank0
 16983  157B  0821               	movf	?___awdiv+1,w
 16984  157C  01AA               	clrf	setBuz@time+1
 16985  157D  07AA               	addwf	setBuz@time+1,f
 16986  157E  0820               	movf	?___awdiv,w
 16987  157F  01A9               	clrf	setBuz@time
 16988  1580  07A9               	addwf	setBuz@time,f
 16989                           
 16990                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16991  1581  0021               	movlb	1	; select bank1
 16992  1582  1C33               	btfss	_Buz1^(0+128),0
 16993  1583  0008               	return
 16994                           
 16995                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16996  1584  18B3               	btfsc	_Buz1^(0+128),1
 16997  1585  2D9C               	goto	l102
 16998                           
 16999                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 17000  1586  14B3               	bsf	_Buz1^(0+128),1
 17001                           
 17002                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 17003  1587  01B4               	clrf	(_Buz1^(0+128)+1)
 17004  1588  01B5               	clrf	((_Buz1+1)^(0+128)+1)
 17005                           
 17006                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 17007  1589  0020               	movlb	0	; select bank0
 17008  158A  082C               	movf	setBuz@count,w
 17009  158B  00AB               	movwf	??_setBuz
 17010  158C  082B               	movf	??_setBuz,w
 17011  158D  0021               	movlb	1	; select bank1
 17012  158E  00B6               	movwf	(_Buz1^(0+128)+3)
 17013                           
 17014                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 17015  158F  0020               	movlb	0	; select bank0
 17016  1590  082A               	movf	setBuz@time+1,w
 17017  1591  0021               	movlb	1	; select bank1
 17018  1592  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 17019  1593  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 17020  1594  0020               	movlb	0	; select bank0
 17021  1595  0829               	movf	setBuz@time,w
 17022  1596  0021               	movlb	1	; select bank1
 17023  1597  01B9               	clrf	(_Buz1^(0+128)+6)
 17024  1598  07B9               	addwf	(_Buz1^(0+128)+6),f
 17025                           
 17026                           ;Buzzer_B1.c: 30: RB3 = 1;
 17027  1599  0020               	movlb	0	; select bank0
 17028  159A  158D               	bsf	13,3	;volatile
 17029                           
 17030                           ;Buzzer_B1.c: 31: } else {
 17031  159B  0008               	return
 17032  159C                     l102:	
 17033                           
 17034                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 17035  159C  19B3               	btfsc	_Buz1^(0+128),3
 17036  159D  2DB0               	goto	l104
 17037                           
 17038                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 17039  159E  15B3               	bsf	_Buz1^(0+128),3
 17040                           
 17041                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 17042  159F  0020               	movlb	0	; select bank0
 17043  15A0  082C               	movf	setBuz@count,w
 17044  15A1  00AB               	movwf	??_setBuz
 17045  15A2  082B               	movf	??_setBuz,w
 17046  15A3  0021               	movlb	1	; select bank1
 17047  15A4  00B7               	movwf	(_Buz1^(0+128)+4)
 17048                           
 17049                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17050  15A5  0020               	movlb	0	; select bank0
 17051  15A6  082A               	movf	setBuz@time+1,w
 17052  15A7  0021               	movlb	1	; select bank1
 17053  15A8  01BC               	clrf	((_Buz1+1)^(0+128)+8)
 17054  15A9  07BC               	addwf	((_Buz1+1)^(0+128)+8),f
 17055  15AA  0020               	movlb	0	; select bank0
 17056  15AB  0829               	movf	setBuz@time,w
 17057  15AC  0021               	movlb	1	; select bank1
 17058  15AD  01BB               	clrf	(_Buz1^(0+128)+8)
 17059  15AE  07BB               	addwf	(_Buz1^(0+128)+8),f
 17060                           
 17061                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17062  15AF  0008               	return
 17063  15B0                     l104:	
 17064  15B0  1A33               	btfsc	_Buz1^(0+128),4
 17065  15B1  0008               	return
 17066                           
 17067                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17068  15B2  1633               	bsf	_Buz1^(0+128),4
 17069                           
 17070                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17071  15B3  0020               	movlb	0	; select bank0
 17072  15B4  082C               	movf	setBuz@count,w
 17073  15B5  00AB               	movwf	??_setBuz
 17074  15B6  082B               	movf	??_setBuz,w
 17075  15B7  0021               	movlb	1	; select bank1
 17076  15B8  00B8               	movwf	(_Buz1^(0+128)+5)
 17077                           
 17078                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17079  15B9  0020               	movlb	0	; select bank0
 17080  15BA  082A               	movf	setBuz@time+1,w
 17081  15BB  0021               	movlb	1	; select bank1
 17082  15BC  01BE               	clrf	((_Buz1+1)^(0+128)+10)
 17083  15BD  07BE               	addwf	((_Buz1+1)^(0+128)+10),f
 17084  15BE  0020               	movlb	0	; select bank0
 17085  15BF  0829               	movf	setBuz@time,w
 17086  15C0  0021               	movlb	1	; select bank1
 17087  15C1  01BD               	clrf	(_Buz1^(0+128)+10)
 17088  15C2  07BD               	addwf	(_Buz1^(0+128)+10),f
 17089  15C3  0008               	return
 17090  15C4                     __end_of_setBuz:	
 17091                           
 17092                           	psect	text113
 17093  1469                     __ptext113:	
 17094 ;; *************** function ___awdiv *****************
 17095 ;; Defined at:
 17096 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17097 ;; Parameters:    Size  Location     Type
 17098 ;;  divisor         2    0[BANK0 ] int 
 17099 ;;  dividend        2    2[BANK0 ] int 
 17100 ;; Auto vars:     Size  Location     Type
 17101 ;;  quotient        2    7[BANK0 ] int 
 17102 ;;  sign            1    6[BANK0 ] unsigned char 
 17103 ;;  counter         1    5[BANK0 ] unsigned char 
 17104 ;; Return value:  Size  Location     Type
 17105 ;;                  2    0[BANK0 ] int 
 17106 ;; Registers used:
 17107 ;;		wreg, status,2, status,0
 17108 ;; Tracked objects:
 17109 ;;		On entry : 0/0
 17110 ;;		On exit  : 0/0
 17111 ;;		Unchanged: 0/0
 17112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17113 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17114 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17116 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17117 ;;Total ram usage:        9 bytes
 17118 ;; Hardware stack levels used:    1
 17119 ;; Hardware stack levels required when called:    5
 17120 ;; This function calls:
 17121 ;;		Nothing
 17122 ;; This function is called by:
 17123 ;;		_setBuz
 17124 ;; This function uses a non-reentrant model
 17125 ;;
 17126                           
 17127                           
 17128                           ;psect for function ___awdiv
 17129  1469                     ___awdiv:	
 17130                           
 17131                           ;incstack = 0
 17132                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17133  1469  0020               	movlb	0	; select bank0
 17134  146A  01A6               	clrf	___awdiv@sign
 17135  146B  1FA1               	btfss	___awdiv@divisor+1,7
 17136  146C  2C74               	goto	l8610
 17137  146D  09A0               	comf	___awdiv@divisor,f
 17138  146E  09A1               	comf	___awdiv@divisor+1,f
 17139  146F  0AA0               	incf	___awdiv@divisor,f
 17140  1470  1903               	skipnz
 17141  1471  0AA1               	incf	___awdiv@divisor+1,f
 17142  1472  01A6               	clrf	___awdiv@sign
 17143  1473  0AA6               	incf	___awdiv@sign,f
 17144  1474                     l8610:	
 17145  1474  1FA3               	btfss	___awdiv@dividend+1,7
 17146  1475  2C7F               	goto	l8616
 17147  1476  09A2               	comf	___awdiv@dividend,f
 17148  1477  09A3               	comf	___awdiv@dividend+1,f
 17149  1478  0AA2               	incf	___awdiv@dividend,f
 17150  1479  1903               	skipnz
 17151  147A  0AA3               	incf	___awdiv@dividend+1,f
 17152  147B  3001               	movlw	1
 17153  147C  00A4               	movwf	??___awdiv
 17154  147D  0824               	movf	??___awdiv,w
 17155  147E  06A6               	xorwf	___awdiv@sign,f
 17156  147F                     l8616:	
 17157  147F  01A7               	clrf	___awdiv@quotient
 17158  1480  01A8               	clrf	___awdiv@quotient+1
 17159  1481  0821               	movf	___awdiv@divisor+1,w
 17160  1482  0420               	iorwf	___awdiv@divisor,w
 17161  1483  1903               	skipnz
 17162  1484  2CAE               	goto	l8638
 17163  1485  01A5               	clrf	___awdiv@counter
 17164  1486  0AA5               	incf	___awdiv@counter,f
 17165  1487                     l8626:	
 17166  1487  1BA1               	btfsc	___awdiv@divisor+1,7
 17167  1488  2C93               	goto	l8628
 17168  1489  3001               	movlw	1
 17169  148A                     u8685:	
 17170  148A  35A0               	lslf	___awdiv@divisor,f
 17171  148B  0DA1               	rlf	___awdiv@divisor+1,f
 17172  148C  0B89               	decfsz	9,f
 17173  148D  2C8A               	goto	u8685
 17174  148E  3001               	movlw	1
 17175  148F  00A4               	movwf	??___awdiv
 17176  1490  0824               	movf	??___awdiv,w
 17177  1491  07A5               	addwf	___awdiv@counter,f
 17178  1492  2C87               	goto	l8626
 17179  1493                     l8628:	
 17180  1493  3001               	movlw	1
 17181  1494                     u8705:	
 17182  1494  35A7               	lslf	___awdiv@quotient,f
 17183  1495  0DA8               	rlf	___awdiv@quotient+1,f
 17184  1496  0B89               	decfsz	9,f
 17185  1497  2C94               	goto	u8705
 17186  1498  0821               	movf	___awdiv@divisor+1,w
 17187  1499  0223               	subwf	___awdiv@dividend+1,w
 17188  149A  1D03               	skipz
 17189  149B  2C9E               	goto	u8715
 17190  149C  0820               	movf	___awdiv@divisor,w
 17191  149D  0222               	subwf	___awdiv@dividend,w
 17192  149E                     u8715:	
 17193  149E  1C03               	skipc
 17194  149F  2CA5               	goto	l8634
 17195  14A0  0820               	movf	___awdiv@divisor,w
 17196  14A1  02A2               	subwf	___awdiv@dividend,f
 17197  14A2  0821               	movf	___awdiv@divisor+1,w
 17198  14A3  3BA3               	subwfb	___awdiv@dividend+1,f
 17199  14A4  1427               	bsf	___awdiv@quotient,0
 17200  14A5                     l8634:	
 17201  14A5  3001               	movlw	1
 17202  14A6                     u8725:	
 17203  14A6  36A1               	lsrf	___awdiv@divisor+1,f
 17204  14A7  0CA0               	rrf	___awdiv@divisor,f
 17205  14A8  0B89               	decfsz	9,f
 17206  14A9  2CA6               	goto	u8725
 17207  14AA  3001               	movlw	1
 17208  14AB  02A5               	subwf	___awdiv@counter,f
 17209  14AC  1D03               	btfss	3,2
 17210  14AD  2C93               	goto	l8628
 17211  14AE                     l8638:	
 17212  14AE  0826               	movf	___awdiv@sign,w
 17213  14AF  1903               	btfsc	3,2
 17214  14B0  2CB6               	goto	l8642
 17215  14B1  09A7               	comf	___awdiv@quotient,f
 17216  14B2  09A8               	comf	___awdiv@quotient+1,f
 17217  14B3  0AA7               	incf	___awdiv@quotient,f
 17218  14B4  1903               	skipnz
 17219  14B5  0AA8               	incf	___awdiv@quotient+1,f
 17220  14B6                     l8642:	
 17221  14B6  0828               	movf	___awdiv@quotient+1,w
 17222  14B7  01A1               	clrf	?___awdiv+1
 17223  14B8  07A1               	addwf	?___awdiv+1,f
 17224  14B9  0827               	movf	___awdiv@quotient,w
 17225  14BA  01A0               	clrf	?___awdiv
 17226  14BB  07A0               	addwf	?___awdiv,f
 17227  14BC  0008               	return
 17228  14BD                     __end_of___awdiv:	
 17229                           
 17230                           	psect	text114
 17231  1A21                     __ptext114:	
 17232 ;; *************** function _DelayOff_Initialization *****************
 17233 ;; Defined at:
 17234 ;;		line 26 in file "../src/DelayOff_B1.c"
 17235 ;; Parameters:    Size  Location     Type
 17236 ;;		None
 17237 ;; Auto vars:     Size  Location     Type
 17238 ;;		None
 17239 ;; Return value:  Size  Location     Type
 17240 ;;		None               void
 17241 ;; Registers used:
 17242 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17243 ;; Tracked objects:
 17244 ;;		On entry : 0/0
 17245 ;;		On exit  : 0/0
 17246 ;;		Unchanged: 0/0
 17247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17252 ;;Total ram usage:        0 bytes
 17253 ;; Hardware stack levels used:    1
 17254 ;; Hardware stack levels required when called:    7
 17255 ;; This function calls:
 17256 ;;		_DlyOff_Initialization
 17257 ;; This function is called by:
 17258 ;;		_main
 17259 ;; This function uses a non-reentrant model
 17260 ;;
 17261                           
 17262                           
 17263                           ;psect for function _DelayOff_Initialization
 17264  1A21                     _DelayOff_Initialization:	
 17265                           
 17266                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17267                           
 17268                           ;incstack = 0
 17269                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17270  1A21  3001               	movlw	1
 17271  1A22  319A  227B  319A   	fcall	_DlyOff_Initialization
 17272                           
 17273                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17274  1A25  3002               	movlw	2
 17275  1A26  319A  227B         	fcall	_DlyOff_Initialization
 17276  1A28  0008               	return
 17277  1A29                     __end_of_DelayOff_Initialization:	
 17278                           
 17279                           	psect	text115
 17280  1A7B                     __ptext115:	
 17281 ;; *************** function _DlyOff_Initialization *****************
 17282 ;; Defined at:
 17283 ;;		line 56 in file "../src/DelayOff_B1.c"
 17284 ;; Parameters:    Size  Location     Type
 17285 ;;  sw              1    wreg     unsigned char 
 17286 ;; Auto vars:     Size  Location     Type
 17287 ;;  sw              1    2[BANK0 ] unsigned char 
 17288 ;; Return value:  Size  Location     Type
 17289 ;;		None               void
 17290 ;; Registers used:
 17291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17292 ;; Tracked objects:
 17293 ;;		On entry : 0/0
 17294 ;;		On exit  : 0/0
 17295 ;;		Unchanged: 0/0
 17296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17300 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17301 ;;Total ram usage:        1 bytes
 17302 ;; Hardware stack levels used:    1
 17303 ;; Hardware stack levels required when called:    6
 17304 ;; This function calls:
 17305 ;;		_DelayOffPointSelect
 17306 ;; This function is called by:
 17307 ;;		_DelayOff_Initialization
 17308 ;; This function uses a non-reentrant model
 17309 ;;
 17310                           
 17311                           
 17312                           ;psect for function _DlyOff_Initialization
 17313  1A7B                     _DlyOff_Initialization:	
 17314                           
 17315                           ;incstack = 0
 17316                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17317                           ;DlyOff_Initialization@sw stored from wreg
 17318  1A7B  0020               	movlb	0	; select bank0
 17319  1A7C  00A2               	movwf	DlyOff_Initialization@sw
 17320                           
 17321                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17322  1A7D  0822               	movf	DlyOff_Initialization@sw,w
 17323  1A7E  319C  2467         	fcall	_DelayOffPointSelect
 17324                           
 17325                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 17326  1A80  0020               	movlb	0	; select bank0
 17327  1A81  086A               	movf	_DelayOff,w
 17328  1A82  0086               	movwf	6
 17329  1A83  0187               	clrf	7
 17330  1A84  1401               	bsf	1,0
 17331  1A85  0008               	return
 17332  1A86                     __end_of_DlyOff_Initialization:	
 17333                           
 17334                           	psect	text116
 17335  1C67                     __ptext116:	
 17336 ;; *************** function _DelayOffPointSelect *****************
 17337 ;; Defined at:
 17338 ;;		line 7 in file "../src/DelayOff_B1.c"
 17339 ;; Parameters:    Size  Location     Type
 17340 ;;  sw              1    wreg     unsigned char 
 17341 ;; Auto vars:     Size  Location     Type
 17342 ;;  sw              1    1[BANK0 ] unsigned char 
 17343 ;; Return value:  Size  Location     Type
 17344 ;;		None               void
 17345 ;; Registers used:
 17346 ;;		wreg
 17347 ;; Tracked objects:
 17348 ;;		On entry : 0/0
 17349 ;;		On exit  : 0/0
 17350 ;;		Unchanged: 0/0
 17351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17355 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17356 ;;Total ram usage:        2 bytes
 17357 ;; Hardware stack levels used:    1
 17358 ;; Hardware stack levels required when called:    5
 17359 ;; This function calls:
 17360 ;;		Nothing
 17361 ;; This function is called by:
 17362 ;;		_DlyOff_Initialization
 17363 ;;		_DlyOff_Main
 17364 ;;		_setDelayOff_GO
 17365 ;; This function uses a non-reentrant model
 17366 ;;
 17367                           
 17368                           
 17369                           ;psect for function _DelayOffPointSelect
 17370  1C67                     _DelayOffPointSelect:	
 17371                           
 17372                           ;incstack = 0
 17373                           ; Regs used in _DelayOffPointSelect: [wreg]
 17374                           ;DelayOffPointSelect@sw stored from wreg
 17375  1C67  0020               	movlb	0	; select bank0
 17376  1C68  00A1               	movwf	DelayOffPointSelect@sw
 17377                           
 17378                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17379  1C69  0821               	movf	DelayOffPointSelect@sw,w
 17380  1C6A  3A01               	xorlw	1
 17381  1C6B  1D03               	skipz
 17382  1C6C  2C72               	goto	l8540
 17383                           
 17384                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17385  1C6D  30EA               	movlw	_DlySw1& (0+255)
 17386  1C6E  00A0               	movwf	??_DelayOffPointSelect
 17387  1C6F  0820               	movf	??_DelayOffPointSelect,w
 17388  1C70  00EA               	movwf	_DelayOff
 17389                           
 17390                           ;DelayOff_B1.c: 11: }
 17391  1C71  0008               	return
 17392  1C72                     l8540:	
 17393                           
 17394                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17395  1C72  0821               	movf	DelayOffPointSelect@sw,w
 17396  1C73  3A02               	xorlw	2
 17397  1C74  1D03               	skipz
 17398  1C75  0008               	return
 17399                           
 17400                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17401  1C76  30EC               	movlw	_DlySw2& (0+255)
 17402  1C77  00A0               	movwf	??_DelayOffPointSelect
 17403  1C78  0820               	movf	??_DelayOffPointSelect,w
 17404  1C79  00EA               	movwf	_DelayOff
 17405  1C7A  0008               	return
 17406  1C7B                     __end_of_DelayOffPointSelect:	
 17407                           
 17408                           	psect	text117
 17409  1CA4                     __ptext117:	
 17410 ;; *************** function _CC2500_PowerOnInitial *****************
 17411 ;; Defined at:
 17412 ;;		line 122 in file "../src/CC2500_B1.c"
 17413 ;; Parameters:    Size  Location     Type
 17414 ;;		None
 17415 ;; Auto vars:     Size  Location     Type
 17416 ;;		None
 17417 ;; Return value:  Size  Location     Type
 17418 ;;		None               void
 17419 ;; Registers used:
 17420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17421 ;; Tracked objects:
 17422 ;;		On entry : 0/0
 17423 ;;		On exit  : 0/0
 17424 ;;		Unchanged: 0/0
 17425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17430 ;;Total ram usage:        0 bytes
 17431 ;; Hardware stack levels used:    1
 17432 ;; Hardware stack levels required when called:    8
 17433 ;; This function calls:
 17434 ;;		_CC2500_ClearRXFIFO
 17435 ;;		_CC2500_ClearTXFIFO
 17436 ;;		_CC2500_FrequencyCabr
 17437 ;;		_CC2500_InitPATable
 17438 ;;		_CC2500_InitSetREG
 17439 ;;		_CC2500_PowerRST
 17440 ;;		_CC2500_SIDLEMode
 17441 ;; This function is called by:
 17442 ;;		_main
 17443 ;; This function uses a non-reentrant model
 17444 ;;
 17445                           
 17446                           
 17447                           ;psect for function _CC2500_PowerOnInitial
 17448  1CA4                     _CC2500_PowerOnInitial:	
 17449                           
 17450                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 17451                           
 17452                           ;incstack = 0
 17453                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17454  1CA4  3192  22BD  319C   	fcall	_CC2500_PowerRST
 17455                           
 17456                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 17457  1CA7  319F  2781  319C   	fcall	_CC2500_InitSetREG
 17458                           
 17459                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 17460  1CAA  319D  25EB  319C   	fcall	_CC2500_InitPATable
 17461                           
 17462                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 17463  1CAD  3199  21EF  319C   	fcall	_CC2500_ClearTXFIFO
 17464                           
 17465                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 17466  1CB0  3199  21EB  319C   	fcall	_CC2500_ClearRXFIFO
 17467                           
 17468                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 17469  1CB3  319A  22A7  319C   	fcall	_CC2500_FrequencyCabr
 17470                           
 17471                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 17472  1CB6  3199  21F3         	fcall	_CC2500_SIDLEMode
 17473  1CB8  0008               	return
 17474  1CB9                     __end_of_CC2500_PowerOnInitial:	
 17475                           
 17476                           	psect	text118
 17477  19F3                     __ptext118:	
 17478 ;; *************** function _CC2500_SIDLEMode *****************
 17479 ;; Defined at:
 17480 ;;		line 212 in file "../src/CC2500_B1.c"
 17481 ;; Parameters:    Size  Location     Type
 17482 ;;		None
 17483 ;; Auto vars:     Size  Location     Type
 17484 ;;		None
 17485 ;; Return value:  Size  Location     Type
 17486 ;;		None               void
 17487 ;; Registers used:
 17488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17489 ;; Tracked objects:
 17490 ;;		On entry : 0/0
 17491 ;;		On exit  : 0/0
 17492 ;;		Unchanged: 0/0
 17493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17498 ;;Total ram usage:        0 bytes
 17499 ;; Hardware stack levels used:    1
 17500 ;; Hardware stack levels required when called:    7
 17501 ;; This function calls:
 17502 ;;		_CC2500_WriteCommand
 17503 ;; This function is called by:
 17504 ;;		_CC2500_PowerOnInitial
 17505 ;; This function uses a non-reentrant model
 17506 ;;
 17507                           
 17508                           
 17509                           ;psect for function _CC2500_SIDLEMode
 17510  19F3                     _CC2500_SIDLEMode:	
 17511                           
 17512                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 17513                           
 17514                           ;incstack = 0
 17515                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17516  19F3  3036               	movlw	54
 17517  19F4  319D  2513         	fcall	_CC2500_WriteCommand
 17518  19F6  0008               	return
 17519  19F7                     __end_of_CC2500_SIDLEMode:	
 17520                           
 17521                           	psect	text119
 17522  12BD                     __ptext119:	
 17523 ;; *************** function _CC2500_PowerRST *****************
 17524 ;; Defined at:
 17525 ;;		line 135 in file "../src/CC2500_B1.c"
 17526 ;; Parameters:    Size  Location     Type
 17527 ;;		None
 17528 ;; Auto vars:     Size  Location     Type
 17529 ;;		None
 17530 ;; Return value:  Size  Location     Type
 17531 ;;		None               void
 17532 ;; Registers used:
 17533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17534 ;; Tracked objects:
 17535 ;;		On entry : 0/0
 17536 ;;		On exit  : 0/0
 17537 ;;		Unchanged: 0/0
 17538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17542 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17543 ;;Total ram usage:        1 bytes
 17544 ;; Hardware stack levels used:    1
 17545 ;; Hardware stack levels required when called:    6
 17546 ;; This function calls:
 17547 ;;		_CC2500_WriteByte
 17548 ;;		_DelayTime_1us
 17549 ;;		_Timeout_Counter
 17550 ;;		_set_TimeoutCleared
 17551 ;; This function is called by:
 17552 ;;		_CC2500_PowerOnInitial
 17553 ;; This function uses a non-reentrant model
 17554 ;;
 17555                           
 17556                           
 17557                           ;psect for function _CC2500_PowerRST
 17558  12BD                     _CC2500_PowerRST:	
 17559                           
 17560                           ;CC2500_B1.c: 136: RC1 = 0;
 17561                           
 17562                           ;incstack = 0
 17563                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17564  12BD  0020               	movlb	0	; select bank0
 17565  12BE  108E               	bcf	14,1	;volatile
 17566                           
 17567                           ;CC2500_B1.c: 137: RC0 = 0;
 17568  12BF  100E               	bcf	14,0	;volatile
 17569                           
 17570                           ;CC2500_B1.c: 138: RC4 = 1;
 17571  12C0  160E               	bsf	14,4	;volatile
 17572                           
 17573                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 17574  12C1  300A               	movlw	10
 17575  12C2  00A0               	movwf	DelayTime_1us@count
 17576  12C3  3000               	movlw	0
 17577  12C4  00A1               	movwf	DelayTime_1us@count+1
 17578  12C5  319F  2733  3192   	fcall	_DelayTime_1us
 17579                           
 17580                           ;CC2500_B1.c: 140: RC4 = 0;
 17581  12C8  0020               	movlb	0	; select bank0
 17582  12C9  120E               	bcf	14,4	;volatile
 17583                           
 17584                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 17585  12CA  300A               	movlw	10
 17586  12CB  00A0               	movwf	DelayTime_1us@count
 17587  12CC  3000               	movlw	0
 17588  12CD  00A1               	movwf	DelayTime_1us@count+1
 17589  12CE  319F  2733  3192   	fcall	_DelayTime_1us
 17590                           
 17591                           ;CC2500_B1.c: 142: RC4 = 1;
 17592  12D1  0020               	movlb	0	; select bank0
 17593  12D2  160E               	bsf	14,4	;volatile
 17594                           
 17595                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 17596  12D3  3028               	movlw	40
 17597  12D4  00A0               	movwf	DelayTime_1us@count
 17598  12D5  3000               	movlw	0
 17599  12D6  00A1               	movwf	DelayTime_1us@count+1
 17600  12D7  319F  2733  3192   	fcall	_DelayTime_1us
 17601                           
 17602                           ;CC2500_B1.c: 144: RC4 = 0;
 17603  12DA  0020               	movlb	0	; select bank0
 17604  12DB  120E               	bcf	14,4	;volatile
 17605                           
 17606                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 17607  12DC  3030               	movlw	48
 17608  12DD  00A6               	movwf	??_CC2500_PowerRST
 17609  12DE  0826               	movf	??_CC2500_PowerRST,w
 17610  12DF  00FA               	movwf	_SPI0Buffer
 17611                           
 17612                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 17613  12E0  2AE4               	goto	l9566
 17614  12E1                     l9564:	
 17615                           
 17616                           ;CC2500_B1.c: 147: Timeout_Counter();
 17617  12E1  319C  248F  3192   	fcall	_Timeout_Counter
 17618  12E4                     l9566:	
 17619  12E4  0020               	movlb	0	; select bank0
 17620  12E5  1D0E               	btfss	14,2	;volatile
 17621  12E6  2AEA               	goto	l9570
 17622  12E7  0021               	movlb	1	; select bank1
 17623  12E8  1D30               	btfss	(_myMain^(0+128)+16),2
 17624  12E9  2AE1               	goto	l9564
 17625  12EA                     l9570:	
 17626                           
 17627                           ;CC2500_B1.c: 148: };
 17628                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 17629  12EA  3199  21FB  3192   	fcall	_set_TimeoutCleared
 17630                           
 17631                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 17632  12ED  319C  2453  3192   	fcall	_CC2500_WriteByte
 17633                           
 17634                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 17635  12F0  2AF4               	goto	l9576
 17636  12F1                     l9574:	
 17637                           
 17638                           ;CC2500_B1.c: 152: Timeout_Counter();
 17639  12F1  319C  248F  3192   	fcall	_Timeout_Counter
 17640  12F4                     l9576:	
 17641  12F4  0020               	movlb	0	; select bank0
 17642  12F5  1D0E               	btfss	14,2	;volatile
 17643  12F6  2AFA               	goto	l9580
 17644  12F7  0021               	movlb	1	; select bank1
 17645  12F8  1D30               	btfss	(_myMain^(0+128)+16),2
 17646  12F9  2AF1               	goto	l9574
 17647  12FA                     l9580:	
 17648                           
 17649                           ;CC2500_B1.c: 153: };
 17650                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 17651  12FA  3199  21FB         	fcall	_set_TimeoutCleared
 17652                           
 17653                           ;CC2500_B1.c: 155: RC0 = 0;
 17654  12FC  0020               	movlb	0	; select bank0
 17655  12FD  100E               	bcf	14,0	;volatile
 17656                           
 17657                           ;CC2500_B1.c: 156: RC4 = 1;
 17658  12FE  160E               	bsf	14,4	;volatile
 17659  12FF  0008               	return
 17660  1300                     __end_of_CC2500_PowerRST:	
 17661                           
 17662                           	psect	text120
 17663  1F81                     __ptext120:	
 17664 ;; *************** function _CC2500_InitSetREG *****************
 17665 ;; Defined at:
 17666 ;;		line 162 in file "../src/CC2500_B1.c"
 17667 ;; Parameters:    Size  Location     Type
 17668 ;;		None
 17669 ;; Auto vars:     Size  Location     Type
 17670 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17671 ;;  temp2           1    7[BANK0 ] unsigned char 
 17672 ;;  temp1           1    6[BANK0 ] unsigned char 
 17673 ;; Return value:  Size  Location     Type
 17674 ;;		None               void
 17675 ;; Registers used:
 17676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17677 ;; Tracked objects:
 17678 ;;		On entry : 0/0
 17679 ;;		On exit  : 0/0
 17680 ;;		Unchanged: 0/0
 17681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17685 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17686 ;;Total ram usage:        4 bytes
 17687 ;; Hardware stack levels used:    1
 17688 ;; Hardware stack levels required when called:    7
 17689 ;; This function calls:
 17690 ;;		_CC2500_WriteREG
 17691 ;; This function is called by:
 17692 ;;		_CC2500_PowerOnInitial
 17693 ;; This function uses a non-reentrant model
 17694 ;;
 17695                           
 17696                           
 17697                           ;psect for function _CC2500_InitSetREG
 17698  1F81                     _CC2500_InitSetREG:	
 17699                           
 17700                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17701                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17702                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17703                           
 17704                           ;incstack = 0
 17705                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17706  1F81  0020               	movlb	0	; select bank0
 17707  1F82  01A8               	clrf	CC2500_InitSetREG@loop_c
 17708  1F83                     L10:	
 17709  1F83  302F               	movlw	47
 17710  1F84  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17711  1F85  1803               	btfsc	3,0
 17712  1F86  0008               	return
 17713                           
 17714                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17715  1F87  0828               	movf	CC2500_InitSetREG@loop_c,w
 17716  1F88  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17717  1F89  0084               	movwf	4
 17718  1F8A  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17719  1F8B  1803               	skipnc
 17720  1F8C  3E01               	addlw	1
 17721  1F8D  0085               	movwf	5
 17722  1F8E  0800               	movf	0,w	;code access
 17723  1F8F  00A5               	movwf	??_CC2500_InitSetREG
 17724  1F90  0825               	movf	??_CC2500_InitSetREG,w
 17725  1F91  00A6               	movwf	CC2500_InitSetREG@temp1
 17726                           
 17727                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17728  1F92  0828               	movf	CC2500_InitSetREG@loop_c,w
 17729  1F93  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17730  1F94  0084               	movwf	4
 17731  1F95  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17732  1F96  1803               	skipnc
 17733  1F97  3E01               	addlw	1
 17734  1F98  0085               	movwf	5
 17735  1F99  0800               	movf	0,w	;code access
 17736  1F9A  00A5               	movwf	??_CC2500_InitSetREG
 17737  1F9B  0825               	movf	??_CC2500_InitSetREG,w
 17738  1F9C  00A7               	movwf	CC2500_InitSetREG@temp2
 17739                           
 17740                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17741  1F9D  0827               	movf	CC2500_InitSetREG@temp2,w
 17742  1F9E  00A5               	movwf	??_CC2500_InitSetREG
 17743  1F9F  0825               	movf	??_CC2500_InitSetREG,w
 17744  1FA0  00A2               	movwf	CC2500_WriteREG@value
 17745  1FA1  0826               	movf	CC2500_InitSetREG@temp1,w
 17746  1FA2  319E  2688  319F   	fcall	_CC2500_WriteREG
 17747  1FA5  3001               	movlw	1
 17748  1FA6  0020               	movlb	0	; select bank0
 17749  1FA7  00A5               	movwf	??_CC2500_InitSetREG
 17750  1FA8  0825               	movf	??_CC2500_InitSetREG,w
 17751  1FA9  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17752  1FAA  2F83               	goto	L10
 17753  1FAB                     __end_of_CC2500_InitSetREG:	
 17754                           
 17755                           	psect	text121
 17756  1DEB                     __ptext121:	
 17757 ;; *************** function _CC2500_InitPATable *****************
 17758 ;; Defined at:
 17759 ;;		line 177 in file "../src/CC2500_B1.c"
 17760 ;; Parameters:    Size  Location     Type
 17761 ;;		None
 17762 ;; Auto vars:     Size  Location     Type
 17763 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17764 ;;  temp            1    6[BANK0 ] unsigned char 
 17765 ;; Return value:  Size  Location     Type
 17766 ;;		None               void
 17767 ;; Registers used:
 17768 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17769 ;; Tracked objects:
 17770 ;;		On entry : 0/0
 17771 ;;		On exit  : 0/0
 17772 ;;		Unchanged: 0/0
 17773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17777 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17778 ;;Total ram usage:        3 bytes
 17779 ;; Hardware stack levels used:    1
 17780 ;; Hardware stack levels required when called:    7
 17781 ;; This function calls:
 17782 ;;		_CC2500_WriteREG
 17783 ;; This function is called by:
 17784 ;;		_CC2500_PowerOnInitial
 17785 ;; This function uses a non-reentrant model
 17786 ;;
 17787                           
 17788                           
 17789                           ;psect for function _CC2500_InitPATable
 17790  1DEB                     _CC2500_InitPATable:	
 17791                           
 17792                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17793                           ;CC2500_B1.c: 179: unsigned char temp;
 17794                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17795                           
 17796                           ;incstack = 0
 17797                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17798  1DEB  0020               	movlb	0	; select bank0
 17799  1DEC  01A7               	clrf	CC2500_InitPATable@loop_d
 17800  1DED                     L11:	
 17801  1DED  3008               	movlw	8
 17802  1DEE  0227               	subwf	CC2500_InitPATable@loop_d,w
 17803  1DEF  1803               	btfsc	3,0
 17804  1DF0  0008               	return
 17805                           
 17806                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17807  1DF1  0827               	movf	CC2500_InitPATable@loop_d,w
 17808  1DF2  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17809  1DF3  0084               	movwf	4
 17810  1DF4  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17811  1DF5  1803               	skipnc
 17812  1DF6  3E01               	addlw	1
 17813  1DF7  0085               	movwf	5
 17814  1DF8  0800               	movf	0,w	;code access
 17815  1DF9  00A5               	movwf	??_CC2500_InitPATable
 17816  1DFA  0825               	movf	??_CC2500_InitPATable,w
 17817  1DFB  00A6               	movwf	CC2500_InitPATable@temp
 17818                           
 17819                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17820  1DFC  0826               	movf	CC2500_InitPATable@temp,w
 17821  1DFD  00A5               	movwf	??_CC2500_InitPATable
 17822  1DFE  0825               	movf	??_CC2500_InitPATable,w
 17823  1DFF  00A2               	movwf	CC2500_WriteREG@value
 17824  1E00  303E               	movlw	62
 17825  1E01  319E  2688  319D   	fcall	_CC2500_WriteREG
 17826  1E04  3001               	movlw	1
 17827  1E05  0020               	movlb	0	; select bank0
 17828  1E06  00A5               	movwf	??_CC2500_InitPATable
 17829  1E07  0825               	movf	??_CC2500_InitPATable,w
 17830  1E08  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17831  1E09  2DED               	goto	L11
 17832  1E0A                     __end_of_CC2500_InitPATable:	
 17833                           
 17834                           	psect	text122
 17835  1E88                     __ptext122:	
 17836 ;; *************** function _CC2500_WriteREG *****************
 17837 ;; Defined at:
 17838 ;;		line 254 in file "../src/CC2500_B1.c"
 17839 ;; Parameters:    Size  Location     Type
 17840 ;;  w_addr          1    wreg     unsigned char 
 17841 ;;  value           1    2[BANK0 ] unsigned char 
 17842 ;; Auto vars:     Size  Location     Type
 17843 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17844 ;; Return value:  Size  Location     Type
 17845 ;;		None               void
 17846 ;; Registers used:
 17847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17848 ;; Tracked objects:
 17849 ;;		On entry : 0/0
 17850 ;;		On exit  : 0/0
 17851 ;;		Unchanged: 0/0
 17852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17853 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17855 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17856 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17857 ;;Total ram usage:        3 bytes
 17858 ;; Hardware stack levels used:    1
 17859 ;; Hardware stack levels required when called:    6
 17860 ;; This function calls:
 17861 ;;		_CC2500_WriteByte
 17862 ;;		_Timeout_Counter
 17863 ;;		_set_TimeoutCleared
 17864 ;; This function is called by:
 17865 ;;		_CC2500_InitSetREG
 17866 ;;		_CC2500_InitPATable
 17867 ;; This function uses a non-reentrant model
 17868 ;;
 17869                           
 17870                           
 17871                           ;psect for function _CC2500_WriteREG
 17872  1E88                     _CC2500_WriteREG:	
 17873                           
 17874                           ;incstack = 0
 17875                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17876                           ;CC2500_WriteREG@w_addr stored from wreg
 17877  1E88  0020               	movlb	0	; select bank0
 17878  1E89  00A4               	movwf	CC2500_WriteREG@w_addr
 17879                           
 17880                           ;CC2500_B1.c: 255: RC4 = 0;
 17881  1E8A  120E               	bcf	14,4	;volatile
 17882                           
 17883                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17884  1E8B  0824               	movf	CC2500_WriteREG@w_addr,w
 17885  1E8C  00A3               	movwf	??_CC2500_WriteREG
 17886  1E8D  0823               	movf	??_CC2500_WriteREG,w
 17887  1E8E  00FA               	movwf	_SPI0Buffer
 17888                           
 17889                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17890  1E8F  2E93               	goto	l9314
 17891  1E90                     l9312:	
 17892                           
 17893                           ;CC2500_B1.c: 258: Timeout_Counter();
 17894  1E90  319C  248F  319E   	fcall	_Timeout_Counter
 17895  1E93                     l9314:	
 17896  1E93  0020               	movlb	0	; select bank0
 17897  1E94  1D0E               	btfss	14,2	;volatile
 17898  1E95  2E99               	goto	l9318
 17899  1E96  0021               	movlb	1	; select bank1
 17900  1E97  1D30               	btfss	(_myMain^(0+128)+16),2
 17901  1E98  2E90               	goto	l9312
 17902  1E99                     l9318:	
 17903                           
 17904                           ;CC2500_B1.c: 259: };
 17905                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17906  1E99  3199  21FB  319E   	fcall	_set_TimeoutCleared
 17907                           
 17908                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17909  1E9C  319C  2453  319E   	fcall	_CC2500_WriteByte
 17910                           
 17911                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17912  1E9F  0020               	movlb	0	; select bank0
 17913  1EA0  0822               	movf	CC2500_WriteREG@value,w
 17914  1EA1  00A3               	movwf	??_CC2500_WriteREG
 17915  1EA2  0823               	movf	??_CC2500_WriteREG,w
 17916  1EA3  00FA               	movwf	_SPI0Buffer
 17917                           
 17918                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17919  1EA4  319C  2453         	fcall	_CC2500_WriteByte
 17920                           
 17921                           ;CC2500_B1.c: 265: RC4 = 1;
 17922  1EA6  0020               	movlb	0	; select bank0
 17923  1EA7  160E               	bsf	14,4	;volatile
 17924  1EA8  0008               	return
 17925  1EA9                     __end_of_CC2500_WriteREG:	
 17926                           
 17927                           	psect	text123
 17928  1AA7                     __ptext123:	
 17929 ;; *************** function _CC2500_FrequencyCabr *****************
 17930 ;; Defined at:
 17931 ;;		line 204 in file "../src/CC2500_B1.c"
 17932 ;; Parameters:    Size  Location     Type
 17933 ;;		None
 17934 ;; Auto vars:     Size  Location     Type
 17935 ;;		None
 17936 ;; Return value:  Size  Location     Type
 17937 ;;		None               void
 17938 ;; Registers used:
 17939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17940 ;; Tracked objects:
 17941 ;;		On entry : 0/0
 17942 ;;		On exit  : 0/0
 17943 ;;		Unchanged: 0/0
 17944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17949 ;;Total ram usage:        0 bytes
 17950 ;; Hardware stack levels used:    1
 17951 ;; Hardware stack levels required when called:    7
 17952 ;; This function calls:
 17953 ;;		_CC2500_WriteCommand
 17954 ;;		_DelayTime_1us
 17955 ;; This function is called by:
 17956 ;;		_CC2500_PowerOnInitial
 17957 ;; This function uses a non-reentrant model
 17958 ;;
 17959                           
 17960                           
 17961                           ;psect for function _CC2500_FrequencyCabr
 17962  1AA7                     _CC2500_FrequencyCabr:	
 17963                           
 17964                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17965                           
 17966                           ;incstack = 0
 17967                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17968  1AA7  3033               	movlw	51
 17969  1AA8  319D  2513  319A   	fcall	_CC2500_WriteCommand
 17970                           
 17971                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17972  1AAB  30E8               	movlw	232
 17973  1AAC  0020               	movlb	0	; select bank0
 17974  1AAD  00A0               	movwf	DelayTime_1us@count
 17975  1AAE  3003               	movlw	3
 17976  1AAF  00A1               	movwf	DelayTime_1us@count+1
 17977  1AB0  319F  2733         	fcall	_DelayTime_1us
 17978  1AB2  0008               	return
 17979  1AB3                     __end_of_CC2500_FrequencyCabr:	
 17980                           
 17981                           	psect	text124
 17982  1F33                     __ptext124:	
 17983 ;; *************** function _DelayTime_1us *****************
 17984 ;; Defined at:
 17985 ;;		line 323 in file "../src/CC2500_B1.c"
 17986 ;; Parameters:    Size  Location     Type
 17987 ;;  count           2    0[BANK0 ] int 
 17988 ;; Auto vars:     Size  Location     Type
 17989 ;;  j               2    4[BANK0 ] unsigned int 
 17990 ;;  i               2    2[BANK0 ] unsigned int 
 17991 ;; Return value:  Size  Location     Type
 17992 ;;		None               void
 17993 ;; Registers used:
 17994 ;;		wreg, status,2
 17995 ;; Tracked objects:
 17996 ;;		On entry : 0/0
 17997 ;;		On exit  : 0/0
 17998 ;;		Unchanged: 0/0
 17999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18000 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18001 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18003 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18004 ;;Total ram usage:        6 bytes
 18005 ;; Hardware stack levels used:    1
 18006 ;; Hardware stack levels required when called:    5
 18007 ;; This function calls:
 18008 ;;		Nothing
 18009 ;; This function is called by:
 18010 ;;		_CC2500_PowerRST
 18011 ;;		_CC2500_FrequencyCabr
 18012 ;; This function uses a non-reentrant model
 18013 ;;
 18014                           
 18015                           
 18016                           ;psect for function _DelayTime_1us
 18017  1F33                     _DelayTime_1us:	
 18018                           
 18019                           ;CC2500_B1.c: 324: unsigned int i, j;
 18020                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 18021                           
 18022                           ;incstack = 0
 18023                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 18024  1F33  3001               	movlw	1
 18025  1F34  0020               	movlb	0	; select bank0
 18026  1F35  00A2               	movwf	DelayTime_1us@i
 18027  1F36  3000               	movlw	0
 18028  1F37  00A3               	movwf	DelayTime_1us@i+1
 18029  1F38                     l386:	
 18030  1F38  0821               	movf	DelayTime_1us@count+1,w
 18031  1F39  0223               	subwf	DelayTime_1us@i+1,w
 18032  1F3A  1D03               	skipz
 18033  1F3B  2F3E               	goto	u9595
 18034  1F3C  0820               	movf	DelayTime_1us@count,w
 18035  1F3D  0222               	subwf	DelayTime_1us@i,w
 18036  1F3E                     u9595:	
 18037  1F3E  1803               	btfsc	3,0
 18038  1F3F  0008               	return
 18039                           
 18040                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 18041  1F40  01A4               	clrf	DelayTime_1us@j
 18042  1F41  01A5               	clrf	DelayTime_1us@j+1
 18043  1F42  3000               	movlw	0
 18044  1F43  0225               	subwf	DelayTime_1us@j+1,w
 18045  1F44  3002               	movlw	2
 18046  1F45  1903               	skipnz
 18047  1F46  0224               	subwf	DelayTime_1us@j,w
 18048  1F47  1803               	btfsc	3,0
 18049  1F48  2F54               	goto	l9306
 18050  1F49                     l9304:	
 18051  1F49  3001               	movlw	1
 18052  1F4A  07A4               	addwf	DelayTime_1us@j,f
 18053  1F4B  3000               	movlw	0
 18054  1F4C  3DA5               	addwfc	DelayTime_1us@j+1,f
 18055  1F4D  3000               	movlw	0
 18056  1F4E  0225               	subwf	DelayTime_1us@j+1,w
 18057  1F4F  3002               	movlw	2
 18058  1F50  1903               	skipnz
 18059  1F51  0224               	subwf	DelayTime_1us@j,w
 18060  1F52  1C03               	skipc
 18061  1F53  2F49               	goto	l9304
 18062  1F54                     l9306:	
 18063  1F54  3001               	movlw	1
 18064  1F55  07A2               	addwf	DelayTime_1us@i,f
 18065  1F56  3000               	movlw	0
 18066  1F57  3DA3               	addwfc	DelayTime_1us@i+1,f
 18067  1F58  2F38               	goto	l386
 18068  1F59                     __end_of_DelayTime_1us:	
 18069                           
 18070                           	psect	text125
 18071  19EF                     __ptext125:	
 18072 ;; *************** function _CC2500_ClearTXFIFO *****************
 18073 ;; Defined at:
 18074 ;;		line 190 in file "../src/CC2500_B1.c"
 18075 ;; Parameters:    Size  Location     Type
 18076 ;;		None
 18077 ;; Auto vars:     Size  Location     Type
 18078 ;;		None
 18079 ;; Return value:  Size  Location     Type
 18080 ;;		None               void
 18081 ;; Registers used:
 18082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18083 ;; Tracked objects:
 18084 ;;		On entry : 0/0
 18085 ;;		On exit  : 0/0
 18086 ;;		Unchanged: 0/0
 18087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18092 ;;Total ram usage:        0 bytes
 18093 ;; Hardware stack levels used:    1
 18094 ;; Hardware stack levels required when called:    7
 18095 ;; This function calls:
 18096 ;;		_CC2500_WriteCommand
 18097 ;; This function is called by:
 18098 ;;		_CC2500_PowerOnInitial
 18099 ;; This function uses a non-reentrant model
 18100 ;;
 18101                           
 18102                           
 18103                           ;psect for function _CC2500_ClearTXFIFO
 18104  19EF                     _CC2500_ClearTXFIFO:	
 18105                           
 18106                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 18107                           
 18108                           ;incstack = 0
 18109                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18110  19EF  303B               	movlw	59
 18111  19F0  319D  2513         	fcall	_CC2500_WriteCommand
 18112  19F2  0008               	return
 18113  19F3                     __end_of_CC2500_ClearTXFIFO:	
 18114                           
 18115                           	psect	text126
 18116  19EB                     __ptext126:	
 18117 ;; *************** function _CC2500_ClearRXFIFO *****************
 18118 ;; Defined at:
 18119 ;;		line 197 in file "../src/CC2500_B1.c"
 18120 ;; Parameters:    Size  Location     Type
 18121 ;;		None
 18122 ;; Auto vars:     Size  Location     Type
 18123 ;;		None
 18124 ;; Return value:  Size  Location     Type
 18125 ;;		None               void
 18126 ;; Registers used:
 18127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18128 ;; Tracked objects:
 18129 ;;		On entry : 0/0
 18130 ;;		On exit  : 0/0
 18131 ;;		Unchanged: 0/0
 18132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18137 ;;Total ram usage:        0 bytes
 18138 ;; Hardware stack levels used:    1
 18139 ;; Hardware stack levels required when called:    7
 18140 ;; This function calls:
 18141 ;;		_CC2500_WriteCommand
 18142 ;; This function is called by:
 18143 ;;		_CC2500_PowerOnInitial
 18144 ;; This function uses a non-reentrant model
 18145 ;;
 18146                           
 18147                           
 18148                           ;psect for function _CC2500_ClearRXFIFO
 18149  19EB                     _CC2500_ClearRXFIFO:	
 18150                           
 18151                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 18152                           
 18153                           ;incstack = 0
 18154                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18155  19EB  303A               	movlw	58
 18156  19EC  319D  2513         	fcall	_CC2500_WriteCommand
 18157  19EE  0008               	return
 18158  19EF                     __end_of_CC2500_ClearRXFIFO:	
 18159                           
 18160                           	psect	text127
 18161  1D13                     __ptext127:	
 18162 ;; *************** function _CC2500_WriteCommand *****************
 18163 ;; Defined at:
 18164 ;;		line 288 in file "../src/CC2500_B1.c"
 18165 ;; Parameters:    Size  Location     Type
 18166 ;;  command         1    wreg     unsigned char 
 18167 ;; Auto vars:     Size  Location     Type
 18168 ;;  command         1    3[BANK0 ] unsigned char 
 18169 ;; Return value:  Size  Location     Type
 18170 ;;		None               void
 18171 ;; Registers used:
 18172 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18173 ;; Tracked objects:
 18174 ;;		On entry : 0/0
 18175 ;;		On exit  : 0/0
 18176 ;;		Unchanged: 0/0
 18177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18179 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18181 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18182 ;;Total ram usage:        2 bytes
 18183 ;; Hardware stack levels used:    1
 18184 ;; Hardware stack levels required when called:    6
 18185 ;; This function calls:
 18186 ;;		_CC2500_WriteByte
 18187 ;;		_Timeout_Counter
 18188 ;;		_set_TimeoutCleared
 18189 ;; This function is called by:
 18190 ;;		_CC2500_TxData
 18191 ;;		_CC2500_ClearTXFIFO
 18192 ;;		_CC2500_ClearRXFIFO
 18193 ;;		_CC2500_FrequencyCabr
 18194 ;;		_CC2500_SIDLEMode
 18195 ;;		_setRF_Main
 18196 ;;		_RF_RxDisable
 18197 ;; This function uses a non-reentrant model
 18198 ;;
 18199                           
 18200                           
 18201                           ;psect for function _CC2500_WriteCommand
 18202  1D13                     _CC2500_WriteCommand:	
 18203                           
 18204                           ;incstack = 0
 18205                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18206                           ;CC2500_WriteCommand@command stored from wreg
 18207  1D13  0020               	movlb	0	; select bank0
 18208  1D14  00A3               	movwf	CC2500_WriteCommand@command
 18209                           
 18210                           ;CC2500_B1.c: 289: RC4 = 0;
 18211  1D15  120E               	bcf	14,4	;volatile
 18212                           
 18213                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 18214  1D16  0823               	movf	CC2500_WriteCommand@command,w
 18215  1D17  00A2               	movwf	??_CC2500_WriteCommand
 18216  1D18  0822               	movf	??_CC2500_WriteCommand,w
 18217  1D19  00FA               	movwf	_SPI0Buffer
 18218                           
 18219                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 18220  1D1A  2D1E               	goto	l9046
 18221  1D1B                     l9044:	
 18222                           
 18223                           ;CC2500_B1.c: 293: Timeout_Counter();
 18224  1D1B  319C  248F  319D   	fcall	_Timeout_Counter
 18225  1D1E                     l9046:	
 18226  1D1E  0020               	movlb	0	; select bank0
 18227  1D1F  1D0E               	btfss	14,2	;volatile
 18228  1D20  2D24               	goto	l9050
 18229  1D21  0021               	movlb	1	; select bank1
 18230  1D22  1D30               	btfss	(_myMain^(0+128)+16),2
 18231  1D23  2D1B               	goto	l9044
 18232  1D24                     l9050:	
 18233                           
 18234                           ;CC2500_B1.c: 294: };
 18235                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 18236  1D24  3199  21FB  319D   	fcall	_set_TimeoutCleared
 18237                           
 18238                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 18239  1D27  319C  2453         	fcall	_CC2500_WriteByte
 18240                           
 18241                           ;CC2500_B1.c: 298: RC4 = 1;
 18242  1D29  0020               	movlb	0	; select bank0
 18243  1D2A  160E               	bsf	14,4	;volatile
 18244  1D2B  0008               	return
 18245  1D2C                     __end_of_CC2500_WriteCommand:	
 18246                           
 18247                           	psect	text128
 18248  19FB                     __ptext128:	
 18249 ;; *************** function _set_TimeoutCleared *****************
 18250 ;; Defined at:
 18251 ;;		line 279 in file "../src/Main_B1.c"
 18252 ;; Parameters:    Size  Location     Type
 18253 ;;		None
 18254 ;; Auto vars:     Size  Location     Type
 18255 ;;		None
 18256 ;; Return value:  Size  Location     Type
 18257 ;;		None               void
 18258 ;; Registers used:
 18259 ;;		status,2
 18260 ;; Tracked objects:
 18261 ;;		On entry : 0/0
 18262 ;;		On exit  : 0/0
 18263 ;;		Unchanged: 0/0
 18264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18269 ;;Total ram usage:        0 bytes
 18270 ;; Hardware stack levels used:    1
 18271 ;; Hardware stack levels required when called:    5
 18272 ;; This function calls:
 18273 ;;		Nothing
 18274 ;; This function is called by:
 18275 ;;		_CC2500_TxData
 18276 ;;		_CC2500_RxData
 18277 ;;		_CC2500_PowerRST
 18278 ;;		_CC2500_WriteREG
 18279 ;;		_CC2500_WriteCommand
 18280 ;;		_CC2500_ReadStatus
 18281 ;;		_getAD
 18282 ;;		_TouchPower
 18283 ;;		_CC2500_ReadREG
 18284 ;; This function uses a non-reentrant model
 18285 ;;
 18286                           
 18287                           
 18288                           ;psect for function _set_TimeoutCleared
 18289  19FB                     _set_TimeoutCleared:	
 18290                           
 18291                           ;Main_B1.c: 280: myMain.Timeout = 0;
 18292                           
 18293                           ;incstack = 0
 18294                           ; Regs used in _set_TimeoutCleared: [status,2]
 18295  19FB  0021               	movlb	1	; select bank1
 18296  19FC  1130               	bcf	(_myMain^(0+128)+16),2
 18297                           
 18298                           ;Main_B1.c: 281: myMain.Timeout_Counter = 0;
 18299  19FD  01B1               	clrf	(_myMain^(0+128)+17)
 18300  19FE  01B2               	clrf	((_myMain+1)^(0+128)+17)
 18301  19FF  0008               	return
 18302  1A00                     __end_of_set_TimeoutCleared:	
 18303                           
 18304                           	psect	text129
 18305  1C8F                     __ptext129:	
 18306 ;; *************** function _Timeout_Counter *****************
 18307 ;; Defined at:
 18308 ;;		line 270 in file "../src/Main_B1.c"
 18309 ;; Parameters:    Size  Location     Type
 18310 ;;		None
 18311 ;; Auto vars:     Size  Location     Type
 18312 ;;		None
 18313 ;; Return value:  Size  Location     Type
 18314 ;;		None               void
 18315 ;; Registers used:
 18316 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18317 ;; Tracked objects:
 18318 ;;		On entry : 0/0
 18319 ;;		On exit  : 0/0
 18320 ;;		Unchanged: 0/0
 18321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18326 ;;Total ram usage:        0 bytes
 18327 ;; Hardware stack levels used:    1
 18328 ;; Hardware stack levels required when called:    5
 18329 ;; This function calls:
 18330 ;;		Nothing
 18331 ;; This function is called by:
 18332 ;;		_CC2500_TxData
 18333 ;;		_CC2500_RxData
 18334 ;;		_CC2500_PowerRST
 18335 ;;		_CC2500_WriteREG
 18336 ;;		_CC2500_WriteCommand
 18337 ;;		_CC2500_ReadStatus
 18338 ;;		_getAD
 18339 ;;		_TouchPower
 18340 ;;		_CC2500_ReadREG
 18341 ;; This function uses a non-reentrant model
 18342 ;;
 18343                           
 18344                           
 18345                           ;psect for function _Timeout_Counter
 18346  1C8F                     _Timeout_Counter:	
 18347                           
 18348                           ;Main_B1.c: 271: myMain.Timeout_Counter++;
 18349                           
 18350                           ;incstack = 0
 18351                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18352  1C8F  3001               	movlw	1
 18353  1C90  0021               	movlb	1	; select bank1
 18354  1C91  07B1               	addwf	(_myMain^(0+128)+17),f
 18355  1C92  3000               	movlw	0
 18356  1C93  3DB2               	addwfc	((_myMain+1)^(0+128)+17),f
 18357                           
 18358                           ;Main_B1.c: 272: if (myMain.Timeout_Counter == 10000) {
 18359  1C94  3011               	movlw	17
 18360  1C95  3EA0               	addlw	_myMain& (0+255)
 18361  1C96  0086               	movwf	6
 18362  1C97  0187               	clrf	7
 18363  1C98  3F40               	moviw [0]fsr1
 18364  1C99  3A10               	xorlw	16
 18365  1C9A  1D03               	skipz
 18366  1C9B  2C9E               	goto	u9095
 18367  1C9C  3F41               	moviw [1]fsr1
 18368  1C9D  3A27               	xorlw	39
 18369  1C9E                     u9095:	
 18370  1C9E  1D03               	skipz
 18371  1C9F  0008               	return
 18372                           
 18373                           ;Main_B1.c: 273: myMain.Timeout_Counter = 0;
 18374  1CA0  01B1               	clrf	(_myMain^(0+128)+17)
 18375  1CA1  01B2               	clrf	((_myMain+1)^(0+128)+17)
 18376                           
 18377                           ;Main_B1.c: 274: myMain.Timeout = 1;
 18378  1CA2  1530               	bsf	(_myMain^(0+128)+16),2
 18379  1CA3  0008               	return
 18380  1CA4                     __end_of_Timeout_Counter:	
 18381                           
 18382                           	psect	text130
 18383  1C53                     __ptext130:	
 18384 ;; *************** function _CC2500_WriteByte *****************
 18385 ;; Defined at:
 18386 ;;		line 222 in file "../src/CC2500_B1.c"
 18387 ;; Parameters:    Size  Location     Type
 18388 ;;		None
 18389 ;; Auto vars:     Size  Location     Type
 18390 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18391 ;; Return value:  Size  Location     Type
 18392 ;;		None               void
 18393 ;; Registers used:
 18394 ;;		wreg, status,2, status,0
 18395 ;; Tracked objects:
 18396 ;;		On entry : 0/0
 18397 ;;		On exit  : 0/0
 18398 ;;		Unchanged: 0/0
 18399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18401 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18402 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18404 ;;Total ram usage:        2 bytes
 18405 ;; Hardware stack levels used:    1
 18406 ;; Hardware stack levels required when called:    5
 18407 ;; This function calls:
 18408 ;;		Nothing
 18409 ;; This function is called by:
 18410 ;;		_CC2500_TxData
 18411 ;;		_CC2500_RxData
 18412 ;;		_CC2500_PowerRST
 18413 ;;		_CC2500_WriteREG
 18414 ;;		_CC2500_WriteCommand
 18415 ;;		_CC2500_ReadStatus
 18416 ;;		_CC2500_ReadREG
 18417 ;; This function uses a non-reentrant model
 18418 ;;
 18419                           
 18420                           
 18421                           ;psect for function _CC2500_WriteByte
 18422  1C53                     _CC2500_WriteByte:	
 18423                           
 18424                           ;CC2500_B1.c: 223: unsigned char loop_a;
 18425                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 18426                           
 18427                           ;incstack = 0
 18428                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18429  1C53  0020               	movlb	0	; select bank0
 18430  1C54  01A1               	clrf	CC2500_WriteByte@loop_a
 18431  1C55                     L12:	
 18432  1C55  3008               	movlw	8
 18433  1C56  0221               	subwf	CC2500_WriteByte@loop_a,w
 18434  1C57  1803               	btfsc	3,0
 18435  1C58  0008               	return
 18436                           
 18437                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 18438  1C59  1FFA               	btfss	_SPI0Buffer,7
 18439  1C5A  2C5D               	goto	l342
 18440                           
 18441                           ;CC2500_B1.c: 226: RC0 = 1;
 18442  1C5B  140E               	bsf	14,0	;volatile
 18443  1C5C  2C5E               	goto	l343
 18444  1C5D                     l342:	
 18445                           
 18446                           ;CC2500_B1.c: 227: else
 18447                           ;CC2500_B1.c: 228: RC0 = 0;
 18448  1C5D  100E               	bcf	14,0	;volatile
 18449  1C5E                     l343:	
 18450                           
 18451                           ;CC2500_B1.c: 229: RC1 = 1;
 18452  1C5E  148E               	bsf	14,1	;volatile
 18453                           
 18454                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 18455  1C5F  1003               	clrc
 18456  1C60  0DFA               	rlf	_SPI0Buffer,f
 18457                           
 18458                           ;CC2500_B1.c: 231: RC1 = 0;
 18459  1C61  108E               	bcf	14,1	;volatile
 18460  1C62  3001               	movlw	1
 18461  1C63  00A0               	movwf	??_CC2500_WriteByte
 18462  1C64  0820               	movf	??_CC2500_WriteByte,w
 18463  1C65  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18464  1C66  2C55               	goto	L12
 18465  1C67                     __end_of_CC2500_WriteByte:	
 18466                           
 18467                           	psect	text131
 18468  1388                     __ptext131:	
 18469 ;; *************** function _Buzzer_Main *****************
 18470 ;; Defined at:
 18471 ;;		line 46 in file "../src/Buzzer_B1.c"
 18472 ;; Parameters:    Size  Location     Type
 18473 ;;		None
 18474 ;; Auto vars:     Size  Location     Type
 18475 ;;		None
 18476 ;; Return value:  Size  Location     Type
 18477 ;;		None               void
 18478 ;; Registers used:
 18479 ;;		wreg, status,2, status,0
 18480 ;; Tracked objects:
 18481 ;;		On entry : 0/0
 18482 ;;		On exit  : 0/0
 18483 ;;		Unchanged: 0/0
 18484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18487 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18488 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18489 ;;Total ram usage:        1 bytes
 18490 ;; Hardware stack levels used:    1
 18491 ;; Hardware stack levels required when called:    5
 18492 ;; This function calls:
 18493 ;;		Nothing
 18494 ;; This function is called by:
 18495 ;;		_main
 18496 ;; This function uses a non-reentrant model
 18497 ;;
 18498                           
 18499                           
 18500                           ;psect for function _Buzzer_Main
 18501  1388                     _Buzzer_Main:	
 18502                           
 18503                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18504                           
 18505                           ;incstack = 0
 18506                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18507  1388  0021               	movlb	1	; select bank1
 18508  1389  1CB3               	btfss	_Buz1^(0+128),1
 18509  138A  0008               	return
 18510                           
 18511                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18512  138B  3001               	movlw	1
 18513  138C  07B4               	addwf	(_Buz1^(0+128)+1),f
 18514  138D  3000               	movlw	0
 18515  138E  3DB5               	addwfc	((_Buz1+1)^(0+128)+1),f
 18516                           
 18517                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18518  138F  083A               	movf	((_Buz1+1)^(0+128)+6),w
 18519  1390  0235               	subwf	((_Buz1+1)^(0+128)+1),w
 18520  1391  1D03               	skipz
 18521  1392  2B95               	goto	u10995
 18522  1393  0839               	movf	(_Buz1^(0+128)+6),w
 18523  1394  0234               	subwf	(_Buz1^(0+128)+1),w
 18524  1395                     u10995:	
 18525  1395  1C03               	skipc
 18526  1396  0008               	return
 18527                           
 18528                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18529  1397  01B4               	clrf	(_Buz1^(0+128)+1)
 18530  1398  01B5               	clrf	((_Buz1+1)^(0+128)+1)
 18531                           
 18532                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18533  1399  12B3               	bcf	_Buz1^(0+128),5
 18534  139A  0020               	movlb	0	; select bank0
 18535  139B  1D8D               	btfss	13,3	;volatile
 18536  139C  2B9F               	goto	l10200
 18537  139D  0021               	movlb	1	; select bank1
 18538  139E  16B3               	bsf	_Buz1^(0+128),5
 18539  139F                     l10200:	
 18540                           
 18541                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18542  139F  0021               	movlb	1	; select bank1
 18543  13A0  1AB3               	btfsc	_Buz1^(0+128),5
 18544  13A1  2BCB               	goto	l112
 18545                           
 18546                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18547  13A2  08B6               	movf	(_Buz1^(0+128)+3),f
 18548  13A3  1D03               	skipz
 18549  13A4  2BC7               	goto	l113
 18550                           
 18551                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18552  13A5  1DB3               	btfss	_Buz1^(0+128),3
 18553  13A6  2BB5               	goto	l114
 18554                           
 18555                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18556  13A7  11B3               	bcf	_Buz1^(0+128),3
 18557                           
 18558                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18559  13A8  0837               	movf	(_Buz1^(0+128)+4),w
 18560  13A9  0020               	movlb	0	; select bank0
 18561  13AA  00A0               	movwf	??_Buzzer_Main
 18562  13AB  0820               	movf	??_Buzzer_Main,w
 18563  13AC  0021               	movlb	1	; select bank1
 18564  13AD  00B6               	movwf	(_Buz1^(0+128)+3)
 18565                           
 18566                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18567  13AE  083C               	movf	((_Buz1+1)^(0+128)+8),w
 18568  13AF  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 18569  13B0  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 18570  13B1  083B               	movf	(_Buz1^(0+128)+8),w
 18571  13B2  01B9               	clrf	(_Buz1^(0+128)+6)
 18572  13B3  07B9               	addwf	(_Buz1^(0+128)+6),f
 18573                           
 18574                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18575  13B4  0008               	return
 18576  13B5                     l114:	
 18577  13B5  1E33               	btfss	_Buz1^(0+128),4
 18578  13B6  2BC5               	goto	l116
 18579                           
 18580                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18581  13B7  1233               	bcf	_Buz1^(0+128),4
 18582                           
 18583                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18584  13B8  0838               	movf	(_Buz1^(0+128)+5),w
 18585  13B9  0020               	movlb	0	; select bank0
 18586  13BA  00A0               	movwf	??_Buzzer_Main
 18587  13BB  0820               	movf	??_Buzzer_Main,w
 18588  13BC  0021               	movlb	1	; select bank1
 18589  13BD  00B6               	movwf	(_Buz1^(0+128)+3)
 18590                           
 18591                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18592  13BE  083E               	movf	((_Buz1+1)^(0+128)+10),w
 18593  13BF  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 18594  13C0  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 18595  13C1  083D               	movf	(_Buz1^(0+128)+10),w
 18596  13C2  01B9               	clrf	(_Buz1^(0+128)+6)
 18597  13C3  07B9               	addwf	(_Buz1^(0+128)+6),f
 18598                           
 18599                           ;Buzzer_B1.c: 62: } else {
 18600  13C4  0008               	return
 18601  13C5                     l116:	
 18602                           
 18603                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18604  13C5  10B3               	bcf	_Buz1^(0+128),1
 18605                           
 18606                           ;Buzzer_B1.c: 64: }
 18607                           ;Buzzer_B1.c: 65: } else {
 18608  13C6  0008               	return
 18609  13C7                     l113:	
 18610                           
 18611                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18612  13C7  16B3               	bsf	_Buz1^(0+128),5
 18613                           
 18614                           ;Buzzer_B1.c: 68: RB3 = 1;
 18615  13C8  0020               	movlb	0	; select bank0
 18616  13C9  158D               	bsf	13,3	;volatile
 18617                           
 18618                           ;Buzzer_B1.c: 69: }
 18619                           ;Buzzer_B1.c: 70: } else {
 18620  13CA  0008               	return
 18621  13CB                     l112:	
 18622                           
 18623                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18624  13CB  12B3               	bcf	_Buz1^(0+128),5
 18625                           
 18626                           ;Buzzer_B1.c: 73: RB3 = 0;
 18627  13CC  0020               	movlb	0	; select bank0
 18628  13CD  118D               	bcf	13,3	;volatile
 18629                           
 18630                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18631  13CE  3001               	movlw	1
 18632  13CF  0021               	movlb	1	; select bank1
 18633  13D0  02B6               	subwf	(_Buz1^(0+128)+3),f
 18634  13D1  0008               	return
 18635  13D2                     __end_of_Buzzer_Main:	
 18636                           
 18637                           	psect	text132
 18638  19D9                     __ptext132:	
 18639 ;; *************** function _Buzzer_Initialization *****************
 18640 ;; Defined at:
 18641 ;;		line 11 in file "../src/Buzzer_B1.c"
 18642 ;; Parameters:    Size  Location     Type
 18643 ;;		None
 18644 ;; Auto vars:     Size  Location     Type
 18645 ;;		None
 18646 ;; Return value:  Size  Location     Type
 18647 ;;		None               void
 18648 ;; Registers used:
 18649 ;;		None
 18650 ;; Tracked objects:
 18651 ;;		On entry : 0/0
 18652 ;;		On exit  : 0/0
 18653 ;;		Unchanged: 0/0
 18654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18659 ;;Total ram usage:        0 bytes
 18660 ;; Hardware stack levels used:    1
 18661 ;; Hardware stack levels required when called:    5
 18662 ;; This function calls:
 18663 ;;		Nothing
 18664 ;; This function is called by:
 18665 ;;		_main
 18666 ;; This function uses a non-reentrant model
 18667 ;;
 18668                           
 18669                           
 18670                           ;psect for function _Buzzer_Initialization
 18671  19D9                     _Buzzer_Initialization:	
 18672                           
 18673                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18674                           
 18675                           ;incstack = 0
 18676                           ; Regs used in _Buzzer_Initialization: []
 18677  19D9  0021               	movlb	1	; select bank1
 18678  19DA  1433               	bsf	_Buz1^(0+128),0
 18679  19DB  0008               	return
 18680  19DC                     __end_of_Buzzer_Initialization:	
 18681                           
 18682                           	psect	intentry
 18683  0004                     __pintentry:	
 18684 ;; *************** function _ISR *****************
 18685 ;; Defined at:
 18686 ;;		line 107 in file "../src/MCU_B1.c"
 18687 ;; Parameters:    Size  Location     Type
 18688 ;;		None
 18689 ;; Auto vars:     Size  Location     Type
 18690 ;;		None
 18691 ;; Return value:  Size  Location     Type
 18692 ;;		None               void
 18693 ;; Registers used:
 18694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18695 ;; Tracked objects:
 18696 ;;		On entry : 0/0
 18697 ;;		On exit  : 0/0
 18698 ;;		Unchanged: 0/0
 18699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18702 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18703 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18704 ;;Total ram usage:        1 bytes
 18705 ;; Hardware stack levels used:    1
 18706 ;; Hardware stack levels required when called:    4
 18707 ;; This function calls:
 18708 ;;		_IOC_ISR
 18709 ;;		_TMR1_ISR
 18710 ;; This function is called by:
 18711 ;;		Interrupt level 1
 18712 ;; This function uses a non-reentrant model
 18713 ;;
 18714                           
 18715  0004                     _ISR:	
 18716                           
 18717                           ;incstack = 0
 18718                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18719  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18720  0005  3180               	pagesel	$
 18721  0006  0020               	movlb	0	; select bank0
 18722  0007  087F               	movf	127,w
 18723  0008  00F5               	movwf	??_ISR
 18724                           
 18725                           ;MCU_B1.c: 109: IOC_ISR();
 18726  0009  319A  22E3  3180   	fcall	_IOC_ISR
 18727                           
 18728                           ;MCU_B1.c: 111: ;;
 18729                           ;MCU_B1.c: 113: TMR1_ISR();
 18730  000C  319F  2759         	fcall	_TMR1_ISR
 18731  000E  0875               	movf	??_ISR,w
 18732  000F  0020               	movlb	0	; select bank0
 18733  0010  00FF               	movwf	127
 18734  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18735  0012  0009               	retfie
 18736  0013                     __end_of_ISR:	
 18737                           
 18738                           	psect	text134
 18739  1F59                     __ptext134:	
 18740 ;; *************** function _TMR1_ISR *****************
 18741 ;; Defined at:
 18742 ;;		line 209 in file "../src/MCU_B1.c"
 18743 ;; Parameters:    Size  Location     Type
 18744 ;;		None
 18745 ;; Auto vars:     Size  Location     Type
 18746 ;;		None
 18747 ;; Return value:  Size  Location     Type
 18748 ;;		None               void
 18749 ;; Registers used:
 18750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18751 ;; Tracked objects:
 18752 ;;		On entry : 0/0
 18753 ;;		On exit  : 0/0
 18754 ;;		Unchanged: 0/0
 18755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18760 ;;Total ram usage:        0 bytes
 18761 ;; Hardware stack levels used:    1
 18762 ;; Hardware stack levels required when called:    2
 18763 ;; This function calls:
 18764 ;;		_setDimmerLights_IntrControl
 18765 ;; This function is called by:
 18766 ;;		_ISR
 18767 ;; This function uses a non-reentrant model
 18768 ;;
 18769                           
 18770                           
 18771                           ;psect for function _TMR1_ISR
 18772  1F59                     _TMR1_ISR:	
 18773                           
 18774                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18775                           
 18776                           ;incstack = 0
 18777                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18778  1F59  0021               	movlb	1	; select bank1
 18779  1F5A  1C11               	btfss	17,0	;volatile
 18780  1F5B  0008               	return
 18781  1F5C  0020               	movlb	0	; select bank0
 18782  1F5D  1C11               	btfss	17,0	;volatile
 18783  1F5E  0008               	return
 18784                           
 18785                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18786  1F5F  30FA               	movlw	250
 18787  1F60  0097               	movwf	23	;volatile
 18788                           
 18789                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18790  1F61  3038               	movlw	56
 18791  1F62  0096               	movwf	22	;volatile
 18792                           
 18793                           ;MCU_B1.c: 214: TMR1IF = 0;
 18794  1F63  1011               	bcf	17,0	;volatile
 18795                           
 18796                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18797  1F64  3001               	movlw	1
 18798  1F65  3180  204D  319F   	fcall	_setDimmerLights_IntrControl
 18799                           
 18800                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18801  1F68  3002               	movlw	2
 18802  1F69  3180  204D  319F   	fcall	_setDimmerLights_IntrControl
 18803                           
 18804                           ;MCU_B1.c: 234: Timer1.Count++;
 18805  1F6C  3001               	movlw	1
 18806  1F6D  0021               	movlb	1	; select bank1
 18807  1F6E  07CC               	addwf	(_Timer1^(0+128)+1),f
 18808  1F6F  3000               	movlw	0
 18809  1F70  3DCD               	addwfc	((_Timer1+1)^(0+128)+1),f
 18810                           
 18811                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18812  1F71  3001               	movlw	1
 18813  1F72  3ECB               	addlw	_Timer1& (0+255)
 18814  1F73  0086               	movwf	6
 18815  1F74  0187               	clrf	7
 18816  1F75  3F40               	moviw [0]fsr1
 18817  1F76  3A64               	xorlw	100
 18818  1F77  1D03               	skipz
 18819  1F78  2F7B               	goto	u787_25
 18820  1F79  3F41               	moviw [1]fsr1
 18821  1F7A  3A00               	xorlw	0
 18822  1F7B                     u787_25:	
 18823  1F7B  1D03               	skipz
 18824  1F7C  0008               	return
 18825                           
 18826                           ;MCU_B1.c: 236: {
 18827                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18828  1F7D  01CC               	clrf	(_Timer1^(0+128)+1)
 18829  1F7E  01CD               	clrf	((_Timer1+1)^(0+128)+1)
 18830                           
 18831                           ;MCU_B1.c: 238: myMain.T1_Timerout = 1;
 18832  1F7F  1520               	bsf	_myMain^(0+128),2
 18833  1F80  0008               	return
 18834  1F81                     __end_of_TMR1_ISR:	
 18835                           
 18836                           	psect	text135
 18837  004D                     __ptext135:	
 18838 ;; *************** function _setDimmerLights_IntrControl *****************
 18839 ;; Defined at:
 18840 ;;		line 94 in file "../src/Dimmer_B1.c"
 18841 ;; Parameters:    Size  Location     Type
 18842 ;;  lights          1    wreg     unsigned char 
 18843 ;; Auto vars:     Size  Location     Type
 18844 ;;  lights          1    4[COMMON] unsigned char 
 18845 ;; Return value:  Size  Location     Type
 18846 ;;		None               void
 18847 ;; Registers used:
 18848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18849 ;; Tracked objects:
 18850 ;;		On entry : 0/0
 18851 ;;		On exit  : 0/0
 18852 ;;		Unchanged: 0/0
 18853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18855 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18856 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18857 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18858 ;;Total ram usage:        3 bytes
 18859 ;; Hardware stack levels used:    1
 18860 ;; Hardware stack levels required when called:    1
 18861 ;; This function calls:
 18862 ;;		_DimmerIntrPointSelect
 18863 ;;		i1_setLoad_StatusOff
 18864 ;; This function is called by:
 18865 ;;		_TMR1_ISR
 18866 ;; This function uses a non-reentrant model
 18867 ;;
 18868                           
 18869                           
 18870                           ;psect for function _setDimmerLights_IntrControl
 18871  004D                     _setDimmerLights_IntrControl:	
 18872                           
 18873                           ;incstack = 0
 18874                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18875                           ;setDimmerLights_IntrControl@lights stored from wreg
 18876  004D  00F4               	movwf	setDimmerLights_IntrControl@lights
 18877                           
 18878                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 18879  004E  0874               	movf	setDimmerLights_IntrControl@lights,w
 18880  004F  319B  23E4  3180   	fcall	_DimmerIntrPointSelect
 18881                           
 18882                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 18883  0052  0877               	movf	_DimmerLightsIntr,w
 18884  0053  0086               	movwf	6
 18885  0054  3001               	movlw	1	; select bank2/3
 18886  0055  0087               	movwf	7
 18887  0056  1C01               	btfss	1,0
 18888  0057  28A8               	goto	i1l7344
 18889                           
 18890                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 18891  0058  3001               	movlw	1
 18892  0059  00F2               	movwf	??_setDimmerLights_IntrControl
 18893  005A  0877               	movf	_DimmerLightsIntr,w
 18894  005B  3E03               	addlw	3
 18895  005C  0086               	movwf	6
 18896  005D  3001               	movlw	1	; select bank2/3
 18897  005E  0087               	movwf	7
 18898  005F  0872               	movf	??_setDimmerLights_IntrControl,w
 18899  0060  0781               	addwf	1,f
 18900                           
 18901                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r->Correction)) {
 18902  0061  0876               	movf	_Dimmer,w
 18903  0062  3E02               	addlw	2
 18904  0063  0086               	movwf	6
 18905  0064  3001               	movlw	1	; select bank2/3
 18906  0065  0087               	movwf	7
 18907  0066  0877               	movf	_DimmerLightsIntr,w
 18908  0067  3E04               	addlw	4
 18909  0068  0084               	movwf	4
 18910  0069  3001               	movlw	1	; select bank2/3
 18911  006A  0085               	movwf	5
 18912  006B  0800               	movf	0,w
 18913  006C  0701               	addwf	1,w
 18914  006D  00F2               	movwf	??_setDimmerLights_IntrControl
 18915  006E  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18916  006F  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 18917  0070  0877               	movf	_DimmerLightsIntr,w
 18918  0071  3E03               	addlw	3
 18919  0072  0086               	movwf	6
 18920  0073  3001               	movlw	1	; select bank2/3
 18921  0074  0087               	movwf	7
 18922  0075  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18923  0076  3A80               	xorlw	128
 18924  0077  3C80               	sublw	128
 18925  0078  1D03               	skipz
 18926  0079  287C               	goto	u656_25
 18927  007A  0872               	movf	??_setDimmerLights_IntrControl,w
 18928  007B  0201               	subwf	1,w
 18929  007C                     u656_25:	
 18930  007C  1C03               	skipc
 18931  007D  29B7               	goto	i1l7408
 18932                           
 18933                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 18934  007E  0877               	movf	_DimmerLightsIntr,w
 18935  007F  3E03               	addlw	3
 18936  0080  0086               	movwf	6
 18937  0081  3001               	movlw	1	; select bank2/3
 18938  0082  0087               	movwf	7
 18939  0083  0181               	clrf	1
 18940                           
 18941                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 18942  0084  0877               	movf	_DimmerLightsIntr,w
 18943  0085  0086               	movwf	6
 18944  0086  3001               	movlw	1	; select bank2/3
 18945  0087  0087               	movwf	7
 18946  0088  1001               	bcf	1,0
 18947                           
 18948                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 18949  0089  0877               	movf	_DimmerLightsIntr,w
 18950  008A  0086               	movwf	6
 18951  008B  3001               	movlw	1	; select bank2/3
 18952  008C  0087               	movwf	7
 18953  008D  1F01               	btfss	1,6
 18954  008E  29B7               	goto	i1l7408
 18955                           
 18956                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 18957  008F  0877               	movf	_DimmerLightsIntr,w
 18958  0090  3E08               	addlw	8
 18959  0091  0086               	movwf	6
 18960  0092  3001               	movlw	1	; select bank2/3
 18961  0093  0087               	movwf	7
 18962  0094  1401               	bsf	1,0
 18963                           
 18964                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 18965  0095  0877               	movf	_DimmerLightsIntr,w
 18966  0096  3E08               	addlw	8
 18967  0097  0086               	movwf	6
 18968  0098  3001               	movlw	1	; select bank2/3
 18969  0099  0087               	movwf	7
 18970  009A  1681               	bsf	1,5
 18971                           
 18972                           ;Dimmer_B1.c: 107: if (lights == 1) {
 18973  009B  0874               	movf	setDimmerLights_IntrControl@lights,w
 18974  009C  3A01               	xorlw	1
 18975  009D  1D03               	skipz
 18976  009E  28A1               	goto	i1l7340
 18977                           
 18978                           ;Dimmer_B1.c: 108: RA7 = 1;
 18979  009F  0020               	movlb	0	; select bank0
 18980  00A0  178C               	bsf	12,7	;volatile
 18981  00A1                     i1l7340:	
 18982                           ;Dimmer_B1.c: 109: ;;
 18983                           
 18984                           
 18985                           ;Dimmer_B1.c: 110: }
 18986                           ;Dimmer_B1.c: 113: if (lights == 2) {
 18987  00A1  0874               	movf	setDimmerLights_IntrControl@lights,w
 18988  00A2  3A02               	xorlw	2
 18989  00A3  1D03               	skipz
 18990  00A4  29B7               	goto	i1l7408
 18991                           
 18992                           ;Dimmer_B1.c: 114: RB4 = 1;
 18993  00A5  0020               	movlb	0	; select bank0
 18994  00A6  160D               	bsf	13,4	;volatile
 18995                           
 18996                           ;Dimmer_B1.c: 115: }
 18997                           ;Dimmer_B1.c: 122: }
 18998                           ;Dimmer_B1.c: 123: }
 18999                           ;Dimmer_B1.c: 124: } else {
 19000  00A7  29B7               	goto	i1l7408
 19001  00A8                     i1l7344:	
 19002                           
 19003                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 19004  00A8  0877               	movf	_DimmerLightsIntr,w
 19005  00A9  3E08               	addlw	8
 19006  00AA  0086               	movwf	6
 19007  00AB  3001               	movlw	1	; select bank2/3
 19008  00AC  0087               	movwf	7
 19009  00AD  1C01               	btfss	1,0
 19010  00AE  29B7               	goto	i1l7408
 19011                           
 19012                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 19013  00AF  0877               	movf	_DimmerLightsIntr,w
 19014  00B0  3E08               	addlw	8
 19015  00B1  0086               	movwf	6
 19016  00B2  3001               	movlw	1	; select bank2/3
 19017  00B3  0087               	movwf	7
 19018  00B4  1001               	bcf	1,0
 19019                           
 19020                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 19021  00B5  0877               	movf	_DimmerLightsIntr,w
 19022  00B6  0086               	movwf	6
 19023  00B7  3001               	movlw	1	; select bank2/3
 19024  00B8  0087               	movwf	7
 19025  00B9  1C81               	btfss	1,1
 19026  00BA  29B7               	goto	i1l7408
 19027                           
 19028                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 19029  00BB  3001               	movlw	1
 19030  00BC  00F2               	movwf	??_setDimmerLights_IntrControl
 19031  00BD  0A77               	incf	_DimmerLightsIntr,w
 19032  00BE  0086               	movwf	6
 19033  00BF  3001               	movlw	1	; select bank2/3
 19034  00C0  0087               	movwf	7
 19035  00C1  0872               	movf	??_setDimmerLights_IntrControl,w
 19036  00C2  0781               	addwf	1,f
 19037                           
 19038                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 19039  00C3  0A77               	incf	_DimmerLightsIntr,w
 19040  00C4  0086               	movwf	6
 19041  00C5  3001               	movlw	1	; select bank2/3
 19042  00C6  0087               	movwf	7
 19043  00C7  0877               	movf	_DimmerLightsIntr,w
 19044  00C8  3E02               	addlw	2
 19045  00C9  0084               	movwf	4
 19046  00CA  3001               	movlw	1	; select bank2/3
 19047  00CB  0085               	movwf	5
 19048  00CC  0800               	movf	0,w
 19049  00CD  0201               	subwf	1,w
 19050  00CE  1C03               	skipc
 19051  00CF  29B7               	goto	i1l7408
 19052                           
 19053                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 19054  00D0  0A77               	incf	_DimmerLightsIntr,w
 19055  00D1  0086               	movwf	6
 19056  00D2  3001               	movlw	1	; select bank2/3
 19057  00D3  0087               	movwf	7
 19058  00D4  0181               	clrf	1
 19059                           
 19060                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 19061  00D5  0877               	movf	_DimmerLightsIntr,w
 19062  00D6  0086               	movwf	6
 19063  00D7  3001               	movlw	1	; select bank2/3
 19064  00D8  0087               	movwf	7
 19065  00D9  1D81               	btfss	1,3
 19066  00DA  2911               	goto	i1l7370
 19067                           
 19068                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 19069  00DB  0877               	movf	_DimmerLightsIntr,w
 19070  00DC  0086               	movwf	6
 19071  00DD  3001               	movlw	1	; select bank2/3
 19072  00DE  0087               	movwf	7
 19073  00DF  1A01               	btfsc	1,4
 19074  00E0  28F8               	goto	i1l7364
 19075                           
 19076                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 19077  00E1  0877               	movf	_DimmerLightsIntr,w
 19078  00E2  3E04               	addlw	4
 19079  00E3  0086               	movwf	6
 19080  00E4  3001               	movlw	1	; select bank2/3
 19081  00E5  0087               	movwf	7
 19082  00E6  3021               	movlw	33
 19083  00E7  0201               	subwf	1,w
 19084  00E8  1C03               	skipc
 19085  00E9  28F2               	goto	i1l7362
 19086                           
 19087                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 19088  00EA  0877               	movf	_DimmerLightsIntr,w
 19089  00EB  3E04               	addlw	4
 19090  00EC  0086               	movwf	6
 19091  00ED  3001               	movlw	1	; select bank2/3
 19092  00EE  0087               	movwf	7
 19093  00EF  3001               	movlw	1
 19094  00F0  0281               	subwf	1,f
 19095                           
 19096                           ;Dimmer_B1.c: 135: } else {
 19097  00F1  29B7               	goto	i1l7408
 19098  00F2                     i1l7362:	
 19099                           
 19100                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 19101  00F2  0877               	movf	_DimmerLightsIntr,w
 19102  00F3  0086               	movwf	6
 19103  00F4  3001               	movlw	1	; select bank2/3
 19104  00F5  0087               	movwf	7
 19105  00F6  1601               	bsf	1,4
 19106                           
 19107                           ;Dimmer_B1.c: 137: }
 19108                           ;Dimmer_B1.c: 138: } else {
 19109  00F7  29B7               	goto	i1l7408
 19110  00F8                     i1l7364:	
 19111                           
 19112                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 19113  00F8  0877               	movf	_DimmerLightsIntr,w
 19114  00F9  3E04               	addlw	4
 19115  00FA  0086               	movwf	6
 19116  00FB  3001               	movlw	1	; select bank2/3
 19117  00FC  0087               	movwf	7
 19118  00FD  303C               	movlw	60
 19119  00FE  0201               	subwf	1,w
 19120  00FF  1803               	skipnc
 19121  0100  290B               	goto	i1l7368
 19122                           
 19123                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 19124  0101  3001               	movlw	1
 19125  0102  00F2               	movwf	??_setDimmerLights_IntrControl
 19126  0103  0877               	movf	_DimmerLightsIntr,w
 19127  0104  3E04               	addlw	4
 19128  0105  0086               	movwf	6
 19129  0106  3001               	movlw	1	; select bank2/3
 19130  0107  0087               	movwf	7
 19131  0108  0872               	movf	??_setDimmerLights_IntrControl,w
 19132  0109  0781               	addwf	1,f
 19133                           
 19134                           ;Dimmer_B1.c: 141: } else {
 19135  010A  29B7               	goto	i1l7408
 19136  010B                     i1l7368:	
 19137                           
 19138                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 19139  010B  0877               	movf	_DimmerLightsIntr,w
 19140  010C  0086               	movwf	6
 19141  010D  3001               	movlw	1	; select bank2/3
 19142  010E  0087               	movwf	7
 19143  010F  1201               	bcf	1,4
 19144                           
 19145                           ;Dimmer_B1.c: 143: }
 19146                           ;Dimmer_B1.c: 144: }
 19147                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 19148  0110  29B7               	goto	i1l7408
 19149  0111                     i1l7370:	
 19150  0111  0877               	movf	_DimmerLightsIntr,w
 19151  0112  0086               	movwf	6
 19152  0113  3001               	movlw	1	; select bank2/3
 19153  0114  0087               	movwf	7
 19154  0115  1D01               	btfss	1,2
 19155  0116  2958               	goto	i1l7384
 19156                           
 19157                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 19158  0117  0877               	movf	_DimmerLightsIntr,w
 19159  0118  3E05               	addlw	5
 19160  0119  0086               	movwf	6
 19161  011A  3001               	movlw	1	; select bank2/3
 19162  011B  0087               	movwf	7
 19163  011C  0877               	movf	_DimmerLightsIntr,w
 19164  011D  3E04               	addlw	4
 19165  011E  0084               	movwf	4
 19166  011F  3001               	movlw	1	; select bank2/3
 19167  0120  0085               	movwf	5
 19168  0121  0800               	movf	0,w
 19169  0122  0201               	subwf	1,w
 19170  0123  1803               	skipnc
 19171  0124  292D               	goto	i1l7376
 19172                           
 19173                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 19174  0125  0877               	movf	_DimmerLightsIntr,w
 19175  0126  3E04               	addlw	4
 19176  0127  0086               	movwf	6
 19177  0128  3001               	movlw	1	; select bank2/3
 19178  0129  0087               	movwf	7
 19179  012A  3001               	movlw	1
 19180  012B  0281               	subwf	1,f
 19181                           
 19182                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 19183  012C  2944               	goto	i1l7380
 19184  012D                     i1l7376:	
 19185  012D  0877               	movf	_DimmerLightsIntr,w
 19186  012E  3E04               	addlw	4
 19187  012F  0086               	movwf	6
 19188  0130  3001               	movlw	1	; select bank2/3
 19189  0131  0087               	movwf	7
 19190  0132  0877               	movf	_DimmerLightsIntr,w
 19191  0133  3E05               	addlw	5
 19192  0134  0084               	movwf	4
 19193  0135  3001               	movlw	1	; select bank2/3
 19194  0136  0085               	movwf	5
 19195  0137  0800               	movf	0,w
 19196  0138  0201               	subwf	1,w
 19197  0139  1803               	skipnc
 19198  013A  2944               	goto	i1l7380
 19199                           
 19200                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 19201  013B  3001               	movlw	1
 19202  013C  00F2               	movwf	??_setDimmerLights_IntrControl
 19203  013D  0877               	movf	_DimmerLightsIntr,w
 19204  013E  3E04               	addlw	4
 19205  013F  0086               	movwf	6
 19206  0140  3001               	movlw	1	; select bank2/3
 19207  0141  0087               	movwf	7
 19208  0142  0872               	movf	??_setDimmerLights_IntrControl,w
 19209  0143  0781               	addwf	1,f
 19210  0144                     i1l7380:	
 19211                           
 19212                           ;Dimmer_B1.c: 150: }
 19213                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 19214  0144  0877               	movf	_DimmerLightsIntr,w
 19215  0145  3E05               	addlw	5
 19216  0146  0086               	movwf	6
 19217  0147  3001               	movlw	1	; select bank2/3
 19218  0148  0087               	movwf	7
 19219  0149  0877               	movf	_DimmerLightsIntr,w
 19220  014A  3E04               	addlw	4
 19221  014B  0084               	movwf	4
 19222  014C  3001               	movlw	1	; select bank2/3
 19223  014D  0085               	movwf	5
 19224  014E  0800               	movf	0,w
 19225  014F  0601               	xorwf	1,w
 19226  0150  1D03               	skipz
 19227  0151  29B7               	goto	i1l7408
 19228                           
 19229                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 19230  0152  0877               	movf	_DimmerLightsIntr,w
 19231  0153  0086               	movwf	6
 19232  0154  3001               	movlw	1	; select bank2/3
 19233  0155  0087               	movwf	7
 19234  0156  1101               	bcf	1,2
 19235  0157  2973               	goto	i1l7390
 19236  0158                     i1l7384:	
 19237                           ;Dimmer_B1.c: 154: }
 19238                           ;Dimmer_B1.c: 155: } else {
 19239                           
 19240                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 19241                           
 19242                           
 19243                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 19244  0158  0877               	movf	_DimmerLightsIntr,w
 19245  0159  0086               	movwf	6
 19246  015A  3001               	movlw	1	; select bank2/3
 19247  015B  0087               	movwf	7
 19248  015C  1E81               	btfss	1,5
 19249  015D  2979               	goto	i1l7392
 19250                           
 19251                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 19252  015E  0877               	movf	_DimmerLightsIntr,w
 19253  015F  3E04               	addlw	4
 19254  0160  0086               	movwf	6
 19255  0161  3001               	movlw	1	; select bank2/3
 19256  0162  0087               	movwf	7
 19257  0163  3001               	movlw	1
 19258  0164  0281               	subwf	1,f
 19259                           
 19260                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 19261  0165  0877               	movf	_DimmerLightsIntr,w
 19262  0166  3E05               	addlw	5
 19263  0167  0086               	movwf	6
 19264  0168  3001               	movlw	1	; select bank2/3
 19265  0169  0087               	movwf	7
 19266  016A  0877               	movf	_DimmerLightsIntr,w
 19267  016B  3E04               	addlw	4
 19268  016C  0084               	movwf	4
 19269  016D  3001               	movlw	1	; select bank2/3
 19270  016E  0085               	movwf	5
 19271  016F  0800               	movf	0,w
 19272  0170  0201               	subwf	1,w
 19273  0171  1C03               	skipc
 19274  0172  29B7               	goto	i1l7408
 19275  0173                     i1l7390:	
 19276                           
 19277                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 19278  0173  0877               	movf	_DimmerLightsIntr,w
 19279  0174  0086               	movwf	6
 19280  0175  3001               	movlw	1	; select bank2/3
 19281  0176  0087               	movwf	7
 19282  0177  1081               	bcf	1,1
 19283                           
 19284                           ;Dimmer_B1.c: 160: }
 19285                           ;Dimmer_B1.c: 161: } else {
 19286  0178  29B7               	goto	i1l7408
 19287  0179                     i1l7392:	
 19288                           
 19289                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 19290  0179  3001               	movlw	1
 19291  017A  00F2               	movwf	??_setDimmerLights_IntrControl
 19292  017B  0877               	movf	_DimmerLightsIntr,w
 19293  017C  3E04               	addlw	4
 19294  017D  0086               	movwf	6
 19295  017E  3001               	movlw	1	; select bank2/3
 19296  017F  0087               	movwf	7
 19297  0180  0872               	movf	??_setDimmerLights_IntrControl,w
 19298  0181  0781               	addwf	1,f
 19299                           
 19300                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 19301  0182  0877               	movf	_DimmerLightsIntr,w
 19302  0183  3E04               	addlw	4
 19303  0184  0086               	movwf	6
 19304  0185  3001               	movlw	1	; select bank2/3
 19305  0186  0087               	movwf	7
 19306  0187  0877               	movf	_DimmerLightsIntr,w
 19307  0188  3E06               	addlw	6
 19308  0189  0084               	movwf	4
 19309  018A  3001               	movlw	1	; select bank2/3
 19310  018B  0085               	movwf	5
 19311  018C  0800               	movf	0,w
 19312  018D  0201               	subwf	1,w
 19313  018E  1C03               	skipc
 19314  018F  29B7               	goto	i1l7408
 19315                           
 19316                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 19317  0190  0877               	movf	_DimmerLightsIntr,w
 19318  0191  0086               	movwf	6
 19319  0192  3001               	movlw	1	; select bank2/3
 19320  0193  0087               	movwf	7
 19321  0194  1081               	bcf	1,1
 19322                           
 19323                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 19324  0195  0877               	movf	_DimmerLightsIntr,w
 19325  0196  0086               	movwf	6
 19326  0197  3001               	movlw	1	; select bank2/3
 19327  0198  0087               	movwf	7
 19328  0199  1301               	bcf	1,6
 19329                           
 19330                           ;Dimmer_B1.c: 166: DimmerLightsIntr->Clear = 1;
 19331  019A  0877               	movf	_DimmerLightsIntr,w
 19332  019B  3E09               	addlw	9
 19333  019C  0086               	movwf	6
 19334  019D  3001               	movlw	1	; select bank2/3
 19335  019E  0087               	movwf	7
 19336  019F  1501               	bsf	1,2
 19337                           
 19338                           ;Dimmer_B1.c: 167: Dimmer->Detect = 1;
 19339  01A0  0876               	movf	_Dimmer,w
 19340  01A1  0086               	movwf	6
 19341  01A2  3001               	movlw	1	; select bank2/3
 19342  01A3  0087               	movwf	7
 19343  01A4  1401               	bsf	1,0
 19344                           
 19345                           ;Dimmer_B1.c: 169: if (lights == 1) {
 19346  01A5  0874               	movf	setDimmerLights_IntrControl@lights,w
 19347  01A6  3A01               	xorlw	1
 19348  01A7  1D03               	skipz
 19349  01A8  29AB               	goto	i1l7402
 19350                           
 19351                           ;Dimmer_B1.c: 170: RA3 = 0;
 19352  01A9  0020               	movlb	0	; select bank0
 19353  01AA  118C               	bcf	12,3	;volatile
 19354  01AB                     i1l7402:	
 19355                           
 19356                           ;Dimmer_B1.c: 172: }
 19357                           ;Dimmer_B1.c: 175: if (lights == 2) {
 19358  01AB  0874               	movf	setDimmerLights_IntrControl@lights,w
 19359  01AC  3A02               	xorlw	2
 19360  01AD  1D03               	skipz
 19361  01AE  29B1               	goto	i1l7406
 19362                           
 19363                           ;Dimmer_B1.c: 176: RC7 = 0;
 19364  01AF  0020               	movlb	0	; select bank0
 19365  01B0  138E               	bcf	14,7	;volatile
 19366  01B1                     i1l7406:	
 19367                           
 19368                           ;Dimmer_B1.c: 177: }
 19369                           ;Dimmer_B1.c: 184: setLoad_StatusOff(lights, 1);
 19370  01B1  01F0               	clrf	i1setLoad_StatusOff@command
 19371  01B2  0AF0               	incf	i1setLoad_StatusOff@command,f
 19372  01B3  0874               	movf	setDimmerLights_IntrControl@lights,w
 19373  01B4  319C  24B9  3180   	fcall	i1_setLoad_StatusOff
 19374  01B7                     i1l7408:	
 19375                           
 19376                           ;Dimmer_B1.c: 185: }
 19377                           ;Dimmer_B1.c: 186: }
 19378                           ;Dimmer_B1.c: 187: }
 19379                           ;Dimmer_B1.c: 188: }
 19380                           ;Dimmer_B1.c: 189: }
 19381                           ;Dimmer_B1.c: 190: }
 19382                           ;Dimmer_B1.c: 191: }
 19383                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->Triac == 1) {
 19384  01B7  0877               	movf	_DimmerLightsIntr,w
 19385  01B8  3E08               	addlw	8
 19386  01B9  0086               	movwf	6
 19387  01BA  3001               	movlw	1	; select bank2/3
 19388  01BB  0087               	movwf	7
 19389  01BC  1E81               	btfss	1,5
 19390  01BD  29E8               	goto	i1l7426
 19391                           
 19392                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime++;
 19393  01BE  3001               	movlw	1
 19394  01BF  00F2               	movwf	??_setDimmerLights_IntrControl
 19395  01C0  0877               	movf	_DimmerLightsIntr,w
 19396  01C1  3E07               	addlw	7
 19397  01C2  0086               	movwf	6
 19398  01C3  3001               	movlw	1	; select bank2/3
 19399  01C4  0087               	movwf	7
 19400  01C5  0872               	movf	??_setDimmerLights_IntrControl,w
 19401  01C6  0781               	addwf	1,f
 19402                           
 19403                           ;Dimmer_B1.c: 194: if (DimmerLightsIntr->TriacTime >= 5) {
 19404  01C7  0877               	movf	_DimmerLightsIntr,w
 19405  01C8  3E07               	addlw	7
 19406  01C9  0086               	movwf	6
 19407  01CA  3001               	movlw	1	; select bank2/3
 19408  01CB  0087               	movwf	7
 19409  01CC  3005               	movlw	5
 19410  01CD  0201               	subwf	1,w
 19411  01CE  1C03               	skipc
 19412  01CF  29E8               	goto	i1l7426
 19413                           
 19414                           ;Dimmer_B1.c: 195: DimmerLightsIntr->TriacTime = 0;
 19415  01D0  0877               	movf	_DimmerLightsIntr,w
 19416  01D1  3E07               	addlw	7
 19417  01D2  0086               	movwf	6
 19418  01D3  3001               	movlw	1	; select bank2/3
 19419  01D4  0087               	movwf	7
 19420  01D5  0181               	clrf	1
 19421                           
 19422                           ;Dimmer_B1.c: 196: DimmerLightsIntr->Triac = 0;
 19423  01D6  0877               	movf	_DimmerLightsIntr,w
 19424  01D7  3E08               	addlw	8
 19425  01D8  0086               	movwf	6
 19426  01D9  3001               	movlw	1	; select bank2/3
 19427  01DA  0087               	movwf	7
 19428  01DB  1281               	bcf	1,5
 19429                           
 19430                           ;Dimmer_B1.c: 199: if (lights == 1) {
 19431  01DC  0874               	movf	setDimmerLights_IntrControl@lights,w
 19432  01DD  3A01               	xorlw	1
 19433  01DE  1D03               	skipz
 19434  01DF  29E2               	goto	i1l7422
 19435                           
 19436                           ;Dimmer_B1.c: 200: RA7 = 0;
 19437  01E0  0020               	movlb	0	; select bank0
 19438  01E1  138C               	bcf	12,7	;volatile
 19439  01E2                     i1l7422:	
 19440                           ;Dimmer_B1.c: 201: ;;
 19441                           
 19442                           
 19443                           ;Dimmer_B1.c: 202: }
 19444                           ;Dimmer_B1.c: 205: if (lights == 2) {
 19445  01E2  0874               	movf	setDimmerLights_IntrControl@lights,w
 19446  01E3  3A02               	xorlw	2
 19447  01E4  1D03               	skipz
 19448  01E5  29E8               	goto	i1l7426
 19449                           
 19450                           ;Dimmer_B1.c: 206: RB4 = 0;
 19451  01E6  0020               	movlb	0	; select bank0
 19452  01E7  120D               	bcf	13,4	;volatile
 19453  01E8                     i1l7426:	
 19454                           
 19455                           ;Dimmer_B1.c: 207: }
 19456                           ;Dimmer_B1.c: 214: }
 19457                           ;Dimmer_B1.c: 215: }
 19458                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacFlag == 1) {
 19459  01E8  0877               	movf	_DimmerLightsIntr,w
 19460  01E9  3E09               	addlw	9
 19461  01EA  0086               	movwf	6
 19462  01EB  3001               	movlw	1	; select bank2/3
 19463  01EC  0087               	movwf	7
 19464  01ED  1E81               	btfss	1,5
 19465  01EE  0008               	return
 19466                           
 19467                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount++;
 19468  01EF  3001               	movlw	1
 19469  01F0  00F2               	movwf	??_setDimmerLights_IntrControl
 19470  01F1  0877               	movf	_DimmerLightsIntr,w
 19471  01F2  3E0A               	addlw	10
 19472  01F3  0086               	movwf	6
 19473  01F4  3001               	movlw	1	; select bank2/3
 19474  01F5  0087               	movwf	7
 19475  01F6  0872               	movf	??_setDimmerLights_IntrControl,w
 19476  01F7  0781               	addwf	1,f
 19477                           
 19478                           ;Dimmer_B1.c: 218: if (DimmerLightsIntr->TriacCount == 70) {
 19479  01F8  0877               	movf	_DimmerLightsIntr,w
 19480  01F9  3E0A               	addlw	10
 19481  01FA  0086               	movwf	6
 19482  01FB  3001               	movlw	1	; select bank2/3
 19483  01FC  0087               	movwf	7
 19484  01FD  0801               	movf	1,w
 19485  01FE  3A46               	xorlw	70
 19486  01FF  1D03               	skipz
 19487  0200  0008               	return
 19488                           
 19489                           ;Dimmer_B1.c: 219: DimmerLightsIntr->TriacCount = 0;
 19490  0201  0877               	movf	_DimmerLightsIntr,w
 19491  0202  3E0A               	addlw	10
 19492  0203  0086               	movwf	6
 19493  0204  3001               	movlw	1	; select bank2/3
 19494  0205  0087               	movwf	7
 19495  0206  0181               	clrf	1
 19496                           
 19497                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacFlag = 0;
 19498  0207  0877               	movf	_DimmerLightsIntr,w
 19499  0208  3E09               	addlw	9
 19500  0209  0086               	movwf	6
 19501  020A  3001               	movlw	1	; select bank2/3
 19502  020B  0087               	movwf	7
 19503  020C  1281               	bcf	1,5
 19504  020D  0008               	return
 19505  020E                     __end_of_setDimmerLights_IntrControl:	
 19506                           
 19507                           	psect	text136
 19508  1CB9                     __ptext136:	
 19509 ;; *************** function i1_setLoad_StatusOff *****************
 19510 ;; Defined at:
 19511 ;;		line 282 in file "../src/OverLoad_B1.c"
 19512 ;; Parameters:    Size  Location     Type
 19513 ;;  lights          1    wreg     unsigned char 
 19514 ;;  command         1    0[COMMON] unsigned char 
 19515 ;; Auto vars:     Size  Location     Type
 19516 ;;  lights          1    1[COMMON] unsigned char 
 19517 ;; Return value:  Size  Location     Type
 19518 ;;		None               void
 19519 ;; Registers used:
 19520 ;;		wreg, status,2, status,0
 19521 ;; Tracked objects:
 19522 ;;		On entry : 0/0
 19523 ;;		On exit  : 0/0
 19524 ;;		Unchanged: 0/0
 19525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19526 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19527 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19529 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19530 ;;Total ram usage:        2 bytes
 19531 ;; Hardware stack levels used:    1
 19532 ;; This function calls:
 19533 ;;		Nothing
 19534 ;; This function is called by:
 19535 ;;		_setDimmerLights_IntrControl
 19536 ;; This function uses a non-reentrant model
 19537 ;;
 19538                           
 19539                           
 19540                           ;psect for function i1_setLoad_StatusOff
 19541  1CB9                     i1_setLoad_StatusOff:	
 19542                           
 19543                           ;incstack = 0
 19544                           ; Regs used in i1_setLoad_StatusOff: [wreg+status,2+status,0]
 19545                           ;i1setLoad_StatusOff@lights stored from wreg
 19546  1CB9  00F1               	movwf	i1setLoad_StatusOff@lights
 19547                           
 19548                           ;OverLoad_B1.c: 283: Load1.StatusOff = command;
 19549  1CBA  0870               	movf	i1setLoad_StatusOff@command,w
 19550  1CBB  0023               	movlb	3	; select bank3
 19551  1CBC  13A0               	bcf	_Load1^(0+384),7
 19552  1CBD  1D03               	skipz
 19553  1CBE  17A0               	bsf	_Load1^(0+384),7
 19554                           
 19555                           ;OverLoad_B1.c: 284: Load1.SafeCount -= 2;
 19556  1CBF  3002               	movlw	2
 19557  1CC0  02E2               	subwf	(_Load1^(0+384)+66),f
 19558                           
 19559                           ;OverLoad_B1.c: 285: if (lights == 1) {
 19560  1CC1  0871               	movf	i1setLoad_StatusOff@lights,w
 19561  1CC2  3A01               	xorlw	1
 19562  1CC3  1903               	btfsc	3,2
 19563                           
 19564                           ;OverLoad_B1.c: 286: Load1.Lights1Status = 0;
 19565  1CC4  01E3               	clrf	(_Load1^(0+384)+67)
 19566                           
 19567                           ;OverLoad_B1.c: 287: }
 19568                           ;OverLoad_B1.c: 288: if (lights == 2) {
 19569  1CC5  0871               	movf	i1setLoad_StatusOff@lights,w
 19570  1CC6  3A02               	xorlw	2
 19571  1CC7  1903               	btfsc	3,2
 19572                           
 19573                           ;OverLoad_B1.c: 289: Load1.Lights2Status = 0;
 19574  1CC8  01E4               	clrf	(_Load1^(0+384)+68)
 19575                           
 19576                           ;OverLoad_B1.c: 290: }
 19577                           ;OverLoad_B1.c: 291: if (lights == 3) {
 19578  1CC9  0871               	movf	i1setLoad_StatusOff@lights,w
 19579  1CCA  3A03               	xorlw	3
 19580  1CCB  1D03               	skipz
 19581  1CCC  0008               	return
 19582                           
 19583                           ;OverLoad_B1.c: 292: Load1.Lights3Status = 0;
 19584  1CCD  01E5               	clrf	(_Load1^(0+384)+69)
 19585  1CCE  0008               	return
 19586  1CCF                     __end_ofi1_setLoad_StatusOff:	
 19587                           
 19588                           	psect	text137
 19589  1BE4                     __ptext137:	
 19590 ;; *************** function _DimmerIntrPointSelect *****************
 19591 ;; Defined at:
 19592 ;;		line 72 in file "../src/Dimmer_B1.c"
 19593 ;; Parameters:    Size  Location     Type
 19594 ;;  lights          1    wreg     unsigned char 
 19595 ;; Auto vars:     Size  Location     Type
 19596 ;;  lights          1    1[COMMON] unsigned char 
 19597 ;; Return value:  Size  Location     Type
 19598 ;;		None               void
 19599 ;; Registers used:
 19600 ;;		wreg
 19601 ;; Tracked objects:
 19602 ;;		On entry : 0/0
 19603 ;;		On exit  : 0/0
 19604 ;;		Unchanged: 0/0
 19605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19607 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19608 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19609 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19610 ;;Total ram usage:        2 bytes
 19611 ;; Hardware stack levels used:    1
 19612 ;; This function calls:
 19613 ;;		Nothing
 19614 ;; This function is called by:
 19615 ;;		_setDimmerLights_IntrControl
 19616 ;; This function uses a non-reentrant model
 19617 ;;
 19618                           
 19619                           
 19620                           ;psect for function _DimmerIntrPointSelect
 19621  1BE4                     _DimmerIntrPointSelect:	
 19622                           
 19623                           ;incstack = 0
 19624                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19625                           ;DimmerIntrPointSelect@lights stored from wreg
 19626  1BE4  00F1               	movwf	DimmerIntrPointSelect@lights
 19627                           
 19628                           ;Dimmer_B1.c: 74: if (lights == 1) {
 19629  1BE5  0871               	movf	DimmerIntrPointSelect@lights,w
 19630  1BE6  3A01               	xorlw	1
 19631  1BE7  1D03               	skipz
 19632  1BE8  2BED               	goto	i1l781
 19633                           
 19634                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 19635  1BE9  3035               	movlw	_DimmerLights1& (0+255)
 19636  1BEA  00F0               	movwf	??_DimmerIntrPointSelect
 19637  1BEB  0870               	movf	??_DimmerIntrPointSelect,w
 19638  1BEC  00F7               	movwf	_DimmerLightsIntr
 19639  1BED                     i1l781:	
 19640                           
 19641                           ;Dimmer_B1.c: 76: }
 19642                           ;Dimmer_B1.c: 79: if (lights == 2) {
 19643  1BED  0871               	movf	DimmerIntrPointSelect@lights,w
 19644  1BEE  3A02               	xorlw	2
 19645  1BEF  1D03               	skipz
 19646  1BF0  0008               	return
 19647                           
 19648                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 19649  1BF1  3044               	movlw	_DimmerLights2& (0+255)
 19650  1BF2  00F0               	movwf	??_DimmerIntrPointSelect
 19651  1BF3  0870               	movf	??_DimmerIntrPointSelect,w
 19652  1BF4  00F7               	movwf	_DimmerLightsIntr
 19653  1BF5  0008               	return
 19654  1BF6                     __end_of_DimmerIntrPointSelect:	
 19655                           
 19656                           	psect	text138
 19657  1AE3                     __ptext138:	
 19658 ;; *************** function _IOC_ISR *****************
 19659 ;; Defined at:
 19660 ;;		line 401 in file "../src/MCU_B1.c"
 19661 ;; Parameters:    Size  Location     Type
 19662 ;;		None
 19663 ;; Auto vars:     Size  Location     Type
 19664 ;;		None
 19665 ;; Return value:  Size  Location     Type
 19666 ;;		None               void
 19667 ;; Registers used:
 19668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19669 ;; Tracked objects:
 19670 ;;		On entry : 0/0
 19671 ;;		On exit  : 0/0
 19672 ;;		Unchanged: 0/0
 19673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19678 ;;Total ram usage:        0 bytes
 19679 ;; Hardware stack levels used:    1
 19680 ;; Hardware stack levels required when called:    3
 19681 ;; This function calls:
 19682 ;;		_setDimmerReClock
 19683 ;; This function is called by:
 19684 ;;		_ISR
 19685 ;; This function uses a non-reentrant model
 19686 ;;
 19687                           
 19688                           
 19689                           ;psect for function _IOC_ISR
 19690  1AE3                     _IOC_ISR:	
 19691                           
 19692                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCBF2 == 1) {
 19693                           
 19694                           ;incstack = 0
 19695                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19696  1AE3  1D8B               	btfss	11,3	;volatile
 19697  1AE4  0008               	return
 19698  1AE5  0027               	movlb	7	; select bank7
 19699  1AE6  1D16               	btfss	22,2	;volatile
 19700  1AE7  0008               	return
 19701                           
 19702                           ;MCU_B1.c: 403: IOCBF2 = 0;
 19703  1AE8  1116               	bcf	22,2	;volatile
 19704                           
 19705                           ;MCU_B1.c: 404: IOCIF = 0;
 19706  1AE9  100B               	bcf	11,0	;volatile
 19707                           
 19708                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 19709  1AEA  0021               	movlb	1	; select bank1
 19710  1AEB  1C20               	btfss	_myMain^(0+128),0
 19711  1AEC  0008               	return
 19712                           
 19713                           ;MCU_B1.c: 407: setDimmerReClock();
 19714  1AED  319A  2219         	fcall	_setDimmerReClock
 19715  1AEF  0008               	return
 19716  1AF0                     __end_of_IOC_ISR:	
 19717                           
 19718                           	psect	text139
 19719  1A19                     __ptext139:	
 19720 ;; *************** function _setDimmerReClock *****************
 19721 ;; Defined at:
 19722 ;;		line 244 in file "../src/MCU_B1.c"
 19723 ;; Parameters:    Size  Location     Type
 19724 ;;		None
 19725 ;; Auto vars:     Size  Location     Type
 19726 ;;		None
 19727 ;; Return value:  Size  Location     Type
 19728 ;;		None               void
 19729 ;; Registers used:
 19730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19731 ;; Tracked objects:
 19732 ;;		On entry : 0/0
 19733 ;;		On exit  : 0/0
 19734 ;;		Unchanged: 0/0
 19735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19740 ;;Total ram usage:        0 bytes
 19741 ;; Hardware stack levels used:    1
 19742 ;; Hardware stack levels required when called:    2
 19743 ;; This function calls:
 19744 ;;		_setDimmerLights_IntrIOC_GO
 19745 ;; This function is called by:
 19746 ;;		_IOC_ISR
 19747 ;; This function uses a non-reentrant model
 19748 ;;
 19749                           
 19750                           
 19751                           ;psect for function _setDimmerReClock
 19752  1A19                     _setDimmerReClock:	
 19753                           
 19754                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 19755                           
 19756                           ;incstack = 0
 19757                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19758  1A19  3001               	movlw	1
 19759  1A1A  3190  20C7  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19760                           
 19761                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 19762  1A1D  3002               	movlw	2
 19763  1A1E  3190  20C7         	fcall	_setDimmerLights_IntrIOC_GO
 19764  1A20  0008               	return
 19765  1A21                     __end_of_setDimmerReClock:	
 19766                           
 19767                           	psect	text140
 19768  10C7                     __ptext140:	
 19769 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19770 ;; Defined at:
 19771 ;;		line 28 in file "../src/Dimmer_B1.c"
 19772 ;; Parameters:    Size  Location     Type
 19773 ;;  lights          1    wreg     unsigned char 
 19774 ;; Auto vars:     Size  Location     Type
 19775 ;;  lights          1    2[COMMON] unsigned char 
 19776 ;; Return value:  Size  Location     Type
 19777 ;;		None               void
 19778 ;; Registers used:
 19779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19780 ;; Tracked objects:
 19781 ;;		On entry : 0/0
 19782 ;;		On exit  : 0/0
 19783 ;;		Unchanged: 0/0
 19784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19786 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19788 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19789 ;;Total ram usage:        1 bytes
 19790 ;; Hardware stack levels used:    1
 19791 ;; Hardware stack levels required when called:    1
 19792 ;; This function calls:
 19793 ;;		_DimmerIntrIOCPointSelect
 19794 ;; This function is called by:
 19795 ;;		_setDimmerReClock
 19796 ;; This function uses a non-reentrant model
 19797 ;;
 19798                           
 19799                           
 19800                           ;psect for function _setDimmerLights_IntrIOC_GO
 19801  10C7                     _setDimmerLights_IntrIOC_GO:	
 19802                           
 19803                           ;incstack = 0
 19804                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19805                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19806  10C7  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19807                           
 19808                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 19809  10C8  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19810  10C9  319C  243F  3190   	fcall	_DimmerIntrIOCPointSelect
 19811                           
 19812                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 19813  10CC  0021               	movlb	1	; select bank1
 19814  10CD  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 19815  10CE  0086               	movwf	6
 19816  10CF  3001               	movlw	1	; select bank2/3
 19817  10D0  0087               	movwf	7
 19818  10D1  1801               	btfsc	1,0
 19819  10D2  0008               	return
 19820  10D3  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 19821  10D4  3E09               	addlw	9
 19822  10D5  0086               	movwf	6
 19823  10D6  3001               	movlw	1	; select bank2/3
 19824  10D7  0087               	movwf	7
 19825  10D8  1A81               	btfsc	1,5
 19826  10D9  0008               	return
 19827                           
 19828                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 19829  10DA  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 19830  10DB  0086               	movwf	6
 19831  10DC  3001               	movlw	1	; select bank2/3
 19832  10DD  0087               	movwf	7
 19833  10DE  1401               	bsf	1,0
 19834                           
 19835                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 19836  10DF  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 19837  10E0  3E09               	addlw	9
 19838  10E1  0086               	movwf	6
 19839  10E2  3001               	movlw	1	; select bank2/3
 19840  10E3  0087               	movwf	7
 19841  10E4  1681               	bsf	1,5
 19842                           
 19843                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 19844  10E5  0020               	movlb	0	; select bank0
 19845  10E6  1D0D               	btfss	13,2	;volatile
 19846  10E7  28F0               	goto	i1l6962
 19847                           
 19848                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 19849  10E8  0876               	movf	_Dimmer,w
 19850  10E9  3E02               	addlw	2
 19851  10EA  0086               	movwf	6
 19852  10EB  3001               	movlw	1	; select bank2/3
 19853  10EC  0087               	movwf	7
 19854  10ED  0181               	clrf	1
 19855  10EE  0A81               	incf	1,f
 19856                           
 19857                           ;Dimmer_B1.c: 37: } else {
 19858  10EF  0008               	return
 19859  10F0                     i1l6962:	
 19860                           
 19861                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 19862  10F0  0876               	movf	_Dimmer,w
 19863  10F1  3E02               	addlw	2
 19864  10F2  0086               	movwf	6
 19865  10F3  3001               	movlw	1	; select bank2/3
 19866  10F4  0087               	movwf	7
 19867  10F5  0181               	clrf	1
 19868  10F6  0008               	return
 19869  10F7                     __end_of_setDimmerLights_IntrIOC_GO:	
 19870                           
 19871                           	psect	text141
 19872  1C3F                     __ptext141:	
 19873 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19874 ;; Defined at:
 19875 ;;		line 8 in file "../src/Dimmer_B1.c"
 19876 ;; Parameters:    Size  Location     Type
 19877 ;;  lights          1    wreg     unsigned char 
 19878 ;; Auto vars:     Size  Location     Type
 19879 ;;  lights          1    1[COMMON] unsigned char 
 19880 ;; Return value:  Size  Location     Type
 19881 ;;		None               void
 19882 ;; Registers used:
 19883 ;;		wreg
 19884 ;; Tracked objects:
 19885 ;;		On entry : 0/0
 19886 ;;		On exit  : 0/0
 19887 ;;		Unchanged: 0/0
 19888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19892 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19893 ;;Total ram usage:        2 bytes
 19894 ;; Hardware stack levels used:    1
 19895 ;; This function calls:
 19896 ;;		Nothing
 19897 ;; This function is called by:
 19898 ;;		_setDimmerLights_IntrIOC_GO
 19899 ;; This function uses a non-reentrant model
 19900 ;;
 19901                           
 19902                           
 19903                           ;psect for function _DimmerIntrIOCPointSelect
 19904  1C3F                     _DimmerIntrIOCPointSelect:	
 19905                           
 19906                           ;incstack = 0
 19907                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19908                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19909  1C3F  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19910                           
 19911                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19912  1C40  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19913  1C41  3A01               	xorlw	1
 19914  1C42  1D03               	skipz
 19915  1C43  2C49               	goto	i1l770
 19916                           
 19917                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19918  1C44  3035               	movlw	_DimmerLights1& (0+255)
 19919  1C45  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19920  1C46  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19921  1C47  0021               	movlb	1	; select bank1
 19922  1C48  00D5               	movwf	_DimmerLightsIntrIOC^(0+128)
 19923  1C49                     i1l770:	
 19924                           
 19925                           ;Dimmer_B1.c: 12: }
 19926                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19927  1C49  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19928  1C4A  3A02               	xorlw	2
 19929  1C4B  1D03               	skipz
 19930  1C4C  0008               	return
 19931                           
 19932                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19933  1C4D  3044               	movlw	_DimmerLights2& (0+255)
 19934  1C4E  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19935  1C4F  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19936  1C50  0021               	movlb	1	; select bank1
 19937  1C51  00D5               	movwf	_DimmerLightsIntrIOC^(0+128)
 19938  1C52  0008               	return
 19939  1C53                     __end_of_DimmerIntrIOCPointSelect:	
 19940  007E                     btemp	set	126	;btemp
 19941  007E                     pic14e$flags	set	126
 19942  007E                     wtemp	set	126
 19943  007E                     wtemp0	set	126
 19944  0080                     wtemp1	set	128
 19945  0082                     wtemp2	set	130
 19946  0084                     wtemp3	set	132
 19947  0086                     wtemp4	set	134
 19948  0088                     wtemp5	set	136
 19949  007F                     wtemp6	set	127
 19950  007E                     ttemp	set	126
 19951  007E                     ttemp0	set	126
 19952  0081                     ttemp1	set	129
 19953  0084                     ttemp2	set	132
 19954  0087                     ttemp3	set	135
 19955  007F                     ttemp4	set	127
 19956  007E                     ltemp	set	126
 19957  007E                     ltemp0	set	126
 19958  0082                     ltemp1	set	130
 19959  0086                     ltemp2	set	134
 19960  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         279
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     74      78
    BANK1            80      0      80
    BANK2            80      4      79
    BANK3            80      0      79
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK2[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerLights_IntrControl->i1_setLoad_StatusOff
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  131691
                                              0 BANK2      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    2234
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           5     5      0     601
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    9586
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    9586
                                             17 BANK0      1     1      0
                       _getLoad_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    9552
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   29437
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   29437
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0   12930
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12426
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1711
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     332
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     332
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1182
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1182
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   38710
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   38710
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37767
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    2017
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35750
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14744
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1710
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15222
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15036
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14943
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            3     3      0    9373
                                             17 BANK0      3     3      0
                            ___lwdiv
                             ___wmul
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   3     3      0    7535
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     124
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    5978
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     425
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    3369
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     540
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getTemp_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     344
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     657
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1306
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1306
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   14012
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   13814
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    9280
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     401
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2167
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     228
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1151
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     198
         _getDimmerLights_StatusFlag
                         _setLoad_GO
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13669
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13669
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     748
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     852
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     644
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     644
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    2017
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     400
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     334
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     334
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (14) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___awdiv
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setLoad_Enable
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect
       i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4A      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      4      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     18D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     18D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Oct 28 14:04:29 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1EA9                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006C  
     __end_of_getDimmerLights_StatusFlag 1BC2               _getDimmerLights_StatusFlag 1BB1  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 173A  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1E29  
                   _setDimmerLights_Main 0AD9                             ___ftadd@sign 0048  
                                    l102 159C                                      l112 13CB  
                                    l104 15B0                                      l113 13C7  
                                    l114 13B5                                      l116 13C5  
                                    l342 1C5D                                      l343 1C5E  
                                    l267 17D4                                      l292 0A1E  
                                    l293 0A61                                      l386 1F38  
                                    l824 1C36                                      l870 1408  
                                    _GIE 005F                                      _CRC 00D2  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 0078                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BF  
                                    _ISR 0004                                      _WDT 00D0  
                                    _Sw1 0153                                      _Sw2 01E6  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1C67  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 19D9  
                        __end_of_ADC_Set 1A19                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0CD2                    _setDimmerLights_ERROR 14BD  
                  _setDimmerLights_AdjRF 1F10                    _setDimmerLights_AdjGo 1B91  
                __size_of_setTemp_Enable 0008                    _setDimmerLights_Clear 1B81  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1AF0                               Load_Main@i 0033  
                           ___ftdiv@sign 003D                                     l3030 176D  
                                   l1362 10C0                                     l2322 1126  
               ?_DimmerLightsPointSelect 0070                                     l1371 1380  
                                   l2307 0857                                     l2340 07F7  
                                   l3036 1784                                     l1349 1E46  
                                   l2317 08AD                                     l1721 11EF  
                                   l1713 035E                                     l2273 0617  
                                   l2354 1228                                     l2274 0613  
                                   l3059 0567                                     l2276 0653  
                                   l2268 05DF                                     l1556 16C6  
                        __end_of_IOC_Set 1AFD                                     l6000 0E13  
                                   l1691 0224                                     l6022 0E6D  
                                   l6014 0E54                                     l1694 034F  
                                   l6120 0CC9                                     l6112 0CAF  
                                   l6104 0C94                                     l6114 0CB8  
                                   l6106 0CA2                                     l6042 0EBC  
                                   l6116 0CBB                                     l6036 0EA6  
                                   l2693 1B44                                     l6070 0F1B  
                                   l6054 0EF7                                     l6066 0F13  
                                   l6058 0EFF                                     l2869 1DD6  
                                   l6086 0C64                                     l9012 0DB0  
                                   l9200 17AB                                     l9008 0D9A  
                                   l9050 1D24                                     l9044 1D1B  
                                   l9060 1ED4                                     l9220 17DD  
                                   l5924 04F0                                     l9036 1216  
                                   l9046 1D1E                                     l8502 1EB4  
                                   l9062 1ED7                                     l9214 17BC  
                                   l5934 0506                                     l9304 1F49  
                                   l9312 1E90                                     l9232 17F0  
                                   l9224 17E3                                     l5952 0533  
                                   l5928 04F7                                     l9306 1F54  
                                   l9314 1E93                                     l8610 1474  
                                   l5882 174A                                     l9066 1EDD  
                                   l9226 17E7                                     l9218 17DA  
                                   l5970 0579                                     l5954 053D  
                                   l5946 0520                                     l8522 1C0B  
                                   l9170 07C9                                     l8540 1C72  
                                   l5892 1772                                     l5884 1754  
                                   l9092 13FB                                     l9252 0A03  
                                   l9228 17EA                                     l5964 0559  
                                   l5956 0542                                     l9164 07AE  
                                   l9318 1E99                                     l5894 177A  
                                   l5886 1759                                     l5878 1743  
                                   l9334 1316                                     l9094 1400  
                                   l9086 13E8                                     l9246 09FA  
                                   l9254 0A06                                     l5974 058B  
                                   l5966 0563                                     l5958 0546  
                                   l8526 1C11                                     l9182 07E4  
                                   l9174 07D2                                     l9422 125C  
                                   l8616 147F                                     l9280 0A2F  
                                   l9264 0A1B                                     l9248 09FD  
                                   l5984 05A6                                     l9520 143C  
                                   l8642 14B6                                     l8634 14A5  
                                   l8626 1487                                     l5994 0DFD  
                                   l9282 0A47                                     l9266 0A15  
                                   l9194 17A2                                     l9178 07DB  
                                   l9442 085A                                     l9506 0AC7  
                                   l9426 1268                                     l8628 1493  
                                   l8580 1DBB                                     l8812 1635  
                                   l9700 0B12                                     l9196 17A5  
                                   l8556 1FD3                                     l9516 142F  
                  _myMain_Initialization 1B52                                     l8638 14AE  
                                   l8822 1645                                     l8830 1651  
                                   l9294 0A63                                     l9470 08A3  
                                   l9454 0872                                     l9550 09D2  
                                   l8584 1DC4                                     l8808 162F  
                                   l8816 163B                                     l9704 0B1F  
                                   l9384 10A8                                     l8920 1D0D  
                                   l9464 0898                                     l9800 1E53  
                                   l9570 12EA                                     l8842 166D  
                                   l8826 164B                                     l9714 0B46  
                                   l8770 1723                                     l9482 0A79  
                                   l9802 1E56                                     l9580 12FA  
                                   l9564 12E1                                     l9740 12AF  
                                   l8764 1710                                     l9574 12F1  
                                   l9566 12E4                                     l8598 1C86  
                                   l8934 1BBB                                     l8838 1667  
                                   l8846 1673                                     l8862 1F07  
                                   l8790 1E21                                     l8918 1D09  
                                   l8870 1136                                     l8774 172F  
                                   l9486 0A86                                     l9806 1E5B  
                                   l9576 12F4                                     l9824 1360  
                                   l9744 12B6                                     l8768 1716  
                                   l9920 0C2D                                     _CFGS 0CAE  
                                   l8698 0977                                     l8858 1EFF  
                                   l8786 1E1A                                     l9818 134B  
                                   l8964 0D2F                                     l9692 0AF7  
                                   l9908 0C14                                     l9918 0C2B  
                                   l9688 0AED                                     l9944 05D2  
                           __CFG_WDTE$ON 0000                                     l9884 0BE1  
                                   l8998 0D78                                     l9966 05F6  
                                   l9886 0BE7                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4315 1775  
                                   u4345 178B                                     u4275 174F  
                                   _PEIE 005E                                     u4525 0547  
                                   u4295 1768                                     u4625 0E25  
                                   u4465 0521                                     u4705 0EC8  
                                   u4635 0E35                                     u4555 055A  
                                   u4715 0ED8                                     u4645 0E55  
                                   u4655 0E64                                     u4815 0C6B  
                                   u4495 0534                                     u4735 0F00  
                                   u4665 0E6E                                     u4745 0F06  
                                   u4845 0C95                                     u4775 0F1C  
                                   u4785 0F22                                     u4875 0CB0  
                                   u9095 1C9E                                     u8705 1494  
                                   u8715 149E                                     u8725 14A6  
                                   u8575 1FBF                                     u8685 148A  
                                   u8790 0925                                     u9595 1F3E  
                                   u8795 0923                                     _LWLO 0CAD  
                                   _RFSW 0079                                     _RSSI 00D6  
                                   _WREN 0CAA                                     _Buz1 00B3  
                                   _main 1513                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 091B                          __end_of_RF_Main 19E2  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1A9C  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1A19                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 123D  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                                  ??_ISR 0075                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1AD7            __end_of_DimmerIntrPointSelect 1BF6  
                                  l10002 0638                                    l10004 063A  
                                  l10020 0668                                    l10102 0405  
                                  l10200 139F                                    l10032 0689  
                                  l10050 1B4F                                    l10116 0443  
                                  l10046 1B49                                    l10126 0475  
                                  l10154 1DD0                                    l10066 0393  
                                  l10410 16AF                                    l10092 03D8  
                                  l10076 03A3                                    l10068 0399  
                                  l10420 16C7                                    l10182 11BB  
                                  l10174 119D                                    l10078 03AB  
                                  l10350 0B6C                                    l10176 11A9  
                                  l10360 0B97                                    l10600 1542  
                                  l10186 11C4                                    l10522 0355  
                                  l10268 070D                                    l10508 032A  
                                  l10516 034C                                    l10452 0243  
                                  l10372 0BBF                                    l10356 0B8F  
                                  l10472 02D6                                    l10480 02E9  
                                  l10384 1185                                    l10490 0301  
                                  l10458 026D                                    l10478 02E3  
                  ?_setDimmerLights_Main 0070                                    l10496 030D  
                                  l10596 1537                          ?_setDelayOff_GO 002A  
                  __end_of_setLoad_Count 1B26                                    ?_main 016B  
                        __end_of___awdiv 14BD                          __end_of___ftadd 05BE  
                        __end_of___ftdiv 0E8F                                    u11115 1E3D  
                        __end_of___ftmul 0F43                                    u11205 0BB1  
                                  u11235 117C                          ___awdiv@divisor 0020  
                                  u11165 0B7F                                    u11245 118B  
                                  u11415 02EF                                    _T1CON 0018  
                                  u10625 0679                                    u11265 168E  
                                  u11275 16BE                          __end_of___fttol 0CD2  
                                  u11365 02AA                                    u10495 05F0  
                                  u11295 16D6                                    u10925 11A0  
           setDimmerLights_AdjGo@command 0022                                    u10945 11AA  
                                  u10955 11B4                                    u10965 11BC  
                                  u10885 1DD7                                    u10895 1DDC  
                                  u10995 1395                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 11CB                                    i1l770 1C49  
                                  i1l781 1BED                   _setDimmerLights_Switch 1B61  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EE                                    _RFSW2 00EF  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0016                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _Load1 01A0  
                __end_of_Timeout_Counter 1CA4                            __CFG_WRT$HALF 0000  
                                  _Temp1 00DC       __end_of_setDimmerLights_IntrIOC_GO 10F7  
             _setDimmerLights_IntrIOC_GO 10C7                         __end_of_TMR1_ISR 1F81  
           __size_of_CC2500_WriteCommand 0019                         __end_of_TMR1_Set 1AE3  
                                  _getAD 1E48                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 141D            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                         _setLoad_Enable 1A72              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1C2C  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03D8                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1BD3                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 091B  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                             ?_my_MainTime 0070  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 15C4  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                   __end_of_getLoad_Safe 1A61                        ??_setPercentValue 0059  
                           __end_of_main 156B                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 19FB                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D5B  
                   _setSw_Initialization 1A41                  setOverTemp_Exceptions@i 002F  
             __size_of_setLoad_StatusOff 001F                                   ??_main 006A  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0762                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03D8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C3F  
                 ?_setDimmerLights_AdjRF 0070                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 008B                         ??_setRFSW_Status 0023  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 1A7B                     __end_of_getTemp_Safe 1A41  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 08B0                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 0069                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0070  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1ECB                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 179B                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1B71                                   i1l7402 01AB  
                                 i1l7340 00A1                                   i1l7422 01E2  
                                 i1l7406 01B1                                   i1l7408 01B7  
                                 i1l7344 00A8                                   i1l7426 01E8  
                                 i1l7362 00F2                                   i1l7370 0111  
                                 i1l7380 0144                                   i1l7364 00F8  
                                 i1l7390 0173                                   i1l7392 0179  
                                 i1l7376 012D                                   i1l7384 0158  
                                 i1l7368 010B                                   i1l6962 10F0  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                       __size_of_Load_Main 016E  
                                 u656_25 007C                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1D45  
                                 u787_25 1F7B                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1A00  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1CB9  
                                 _Dimmer 0076                                   _DlySw1 00EA  
                                 _DlySw2 00EC              __size_of_setLoad_Exceptions 0038  
             __end_of_Mcu_Initialization 1C08                      __end_of_Buzzer_Main 13D2  
                                 _Memory 0220                                   _Timer1 00CB  
     __end_of_setDimmerLights_TriggerAdj 1BB1               _setDimmerLights_TriggerAdj 1BA1  
                                 ___bmul 1C08            setDimmerLights_Switch@command 0022  
                                 ___wmul 1DCD                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                                ??___lwdiv 0024  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00DA                                   _s_data 00DB  
                                 _setLED 161F                                   _myMain 00A0  
                       _DimmerLightsIntr 0077                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 156B                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 106B         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020      __end_of_setDimmerLights_IntrControl 020E  
            _setDimmerLights_IntrControl 004D                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0070  
                  __end_of_SwPointSelect 1C8F                          ?_setLoad_Enable 0070  
                          ?_setRF_Enable 0070                           _setTemp_Enable 1A61  
                        _RfSWPointSelect 07ED             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 0074              __size_of_DimmerLights_Close 0019  
                __size_of_LedPointSelect 001D                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1B43  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 161F  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0049  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                       getLoad_Safe@result 0020  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK4 1E68                            __end_of_getAD 1E68  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0044  
                     _LED_Initialization 1ABF                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 004B                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0070                __size_of_setLoad_StatusOn 0023  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0070                        __end_of_Load_Main 037C  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 1A00  
               __end_of_setDimmerReClock 1A21                       __size_of_getRxData 0069  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1A69  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00D3                           _DimmerLights22 00D4  
                   __size_of_setLED_Main 0041                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 19E5  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006A                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 1388                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 19EB                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1A21                    __size_of_getLoad_Safe 0008  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006B                        LedPointSelect@led 0021  
                    i1_setLoad_StatusOff 1CB9                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0008                       getTemp_Safe@result 0020  
                            setBuz@count 002C                               __pmaintext 1513  
                    _CC2500_WriteCommand 1D13                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C                     __size_of_my_MainTime 005E  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR1_ISR 0075                            ?_setTemp_Main 0070  
                             _getLoad_AD 0B4C                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00BD  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1A12                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 115E                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1AA7                    __size_of_getTemp_Safe 0008  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1203  
                __end_of_RfSWPointSelect 0800                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0070                                  _IOC_ISR 1AE3  
                        ?_setTemp_Enable 0070                                  _IOC_Set 1AF0  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1E29                        _Flash_Memory_Read 1D5E  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0071  
                 __size_of_CC2500_TxData 0065                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                             _getLoad_Safe 1A59  
                                _RF_Data 0120                                  _RF_Main 19DF  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1A91          __end_of_setControl_Lights_Table 07ED  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 0A67                          _setPercentValue 0801  
                ??_setLoad_AH_AL_Restore 0020                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 0168  
           __end_of_CC2500_FrequencyCabr 1AB3                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1BE4                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0160  
                                _VarLED2 0164                        __end_of_getRxData 08B0  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C53  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1B81  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 1A39  
                         ??_setTemp_Main 0031                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1B71                                  ___awdiv 1469  
                                ___ftadd 04C8                           ??_setSw_Enable 0022  
                                ___ftdiv 0DE6                          __size_of___wmul 001E  
                                ___ftmul 0E8F                                  ___fttol 0C4B  
                    __end_of_Switch_Main 1A59                                  ___lwdiv 1194  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0023                                  __ptext1 167D  
                                __ptext2 1A61                                  __ptext3 1A72  
                                __ptext4 1B52                                  __ptext5 115E  
                                __ptext6 0B4C                                  __ptext7 1E48  
                                __ptext8 1C1A                                  __ptext9 0002  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0071  
                  _DimmerIntrPointSelect 1BE4                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 1E48                __end_of_Flash_Memory_Read 1D78  
                             _setRF_Main 05BE                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1A29                        _DimmerLights_Main 1A86  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1A86               __end_of_CC2500_ClearRXFIFO 19EF  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 19F3  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006D  
                         _LedPointSelect 1DB0                      _DelayOffPointSelect 1C67  
                                clrloop0 1A0D           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1B0A                     end_of_initialization 0049  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 1A31  
                      _CC2500_InitSetREG 1F81                            _DelayTime_1us 1F33  
                      __end_of_setTxData 1000               __end_of_Flash_Memory_Write 10C7  
                                init_ram 1A06                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1A07                               _setSw_Main 037C  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1ECB  
                 __size_of_setLoad_Count 000E                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1BC2                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 09F6  
                          _CC2500_TxData 179B                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1B34              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 1344                  _DimmerLights_Exceptions 13D2  
                            ?_getLoad_AD 0070                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1A69                      ??_CC2500_ReadStatus 0022  
                       _setLoad_StatusOn 1EED         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
              setLoad_Exceptions@command 0030                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1A91                       _Mcu_Initialization 1BF6  
                       ??_setLoad_Enable 0020                 __size_of_CC2500_PowerRST 0043  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$6944 0067                          _setSw_Main$6945 0068  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1DCD  
                __end_of_Sw_DimmerOnFunc 0AD9                  __end_of_setPercentValue 0847  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 1FAB  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1300                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1EED               __end_of_setLoad_Exceptions 1203  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1D5E  
                   _setRF_Initialization 1A9C                              _Switch_Main 1A51  
            setDimmerLights_Clear@lights 0023                      setLoad_Exceptions@i 002F  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C2C  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1CA4  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1C1A                __size_of_Sw_DimmerAdjFunc 004C  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1C3F  
                         __end_of___wmul 1DEB          __size_of_setOverTemp_Exceptions 003F  
                      __size_of_TMR1_ISR 0028                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C                     __end_of_setMemory_GO 1CE5  
          __size_of_setDimmerLights_Main 0073                           __end_of_setLED 167D  
                         __end_of_setBuz 15C4                            _setLoad_Count 1B18  
        _getDimmerLights_StatusFlag$2618 0022                     _CC2500_FrequencyCabr 1AA7  
                setLoad_StatusOn@command 0020                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0D5B  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 1129  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1D45  
                              _Load_Main 020E                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0013                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1E0A  
        __size_of_setTemp_Initialization 0003                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0C4B  
                            ?_setLoad_GO 0070                     __end_of_setSw_Enable 1DB0  
                    __size_of_getLoad_AD 0079                             ?_Buzzer_Main 0070  
                     _set_TimeoutCleared 19FB                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 015C  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0036                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1B43                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              i1setLoad_StatusOff@lights 0071                  __size_of_setRFSW_Status 000E  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 19E8  
              ??_DimmerLights_Exceptions 002D            setOverTemp_Exceptions@command 0030  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D7                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                               ??___wmul 0024                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D8                              __pdataBANK4 0245  
                               ??_setLED 0023                         ??_setTemp_Enable 0020  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                         ?_setLoad_Count 0070                         _CC2500_SIDLEMode 19F3  
             __size_of_DimmerLights_Main 000B                __end_of_setRF_DimmerValue 115E  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$5836 0068  
                            __pbssCOMMON 0076                                 ?_IOC_Set 0070  
                              ___latbits 0003                               ?_Load_Main 0070  
                  setTemp_Enable@command 0020                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                          __pcstackBANK2 016B                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0089  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
           setDimmerLights_Clear@command 0022                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 006B               __size_of_CC2500_ReadStatus 0022  
                 _setOverTemp_Exceptions 123D                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 0135  
                          _DimmerLights2 0144                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                    __size_of_setRF_Enable 000E  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1D94  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006D  
                          ??_my_MainTime 002D              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00DD                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 19E2                                _getBuz_GO 1BD3  
    __end_of_Flash_Memory_Initialization 0762              _Flash_Memory_Initialization 069B  
                               ?___awdiv 0020                                __ptext100 1C7B  
                              __ptext101 091B                                __ptext110 1B61  
                              __ptext102 0801                                __ptext111 1C2C  
                              __ptext103 0C4B                                __ptext120 1F81  
                              __ptext112 156B                                __ptext104 0DE6  
                              __ptext121 1DEB                                __ptext113 1469  
                              __ptext105 1EA9                                __ptext130 1C53  
                              __ptext122 1E88                                __ptext114 1A21  
                              __ptext106 173A                                __ptext131 1388  
                              __ptext123 1AA7                                __ptext115 1A7B  
                              __ptext107 1B0A                                __ptext140 10C7  
                              __ptext132 19D9                                __ptext124 1F33  
                              __ptext116 1C67                                __ptext108 07ED  
                              __ptext141 1C3F                                __ptext125 19EF  
                              __ptext117 1CA4                                __ptext109 1B71  
                               ?___ftadd 003E                                __ptext134 1F59  
                              __ptext126 19EB                                __ptext118 19F3  
                              __ptext135 004D                                __ptext127 1D13  
                              __ptext119 12BD                                __ptext136 1CB9  
                              __ptext128 19FB                                __ptext137 1BE4  
                              __ptext129 1C8F                                __ptext138 1AE3  
                              __ptext139 1A19                                _getRxData 0847  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 0DE6                      __size_of_setLoad_GO 0008  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 19DC                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1B52       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0056                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 014C  
          __end_of_setDimmerLights_ERROR 1513             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 1F33            __end_of_setDimmerLights_AdjGo 1BA1  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
          __end_of_setDimmerLights_Clear 1B91                                _r_address 00D9  
         __size_of_myMain_Initialization 000F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1B61                           __size_of_getAD 0020  
                           _setRF_Enable 1B26                         ___lwdiv@quotient 0026  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1C7B  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 12BD  
                    _DimmerLightsIntrIOC 00D5                 __end_of_setLoad_StatusOn 1F10  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 19E8  
                      _CC2500_rfSettings 102F                           ___wmul@product 0024  
                               _LED_Main 1ACB                          SwPointSelect@sw 0021  
                              clear_ram0 1A0C                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0F43      __end_of_DimmerLights_Initialization 1CFC  
            _DimmerLights_Initialization 1CE5                       _CC2500_ClearRXFIFO 19EB  
                     _CC2500_ClearTXFIFO 19EF           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1A51                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003A  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 1098  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 1F59                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1CCF  
                               _TMR1_Set 1AD7                         _Sw_DimmerAdjFunc 141D  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                    __end_of_my_MainTime 16DB                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00CE  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1D2C  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1C1A  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0987  
                  __size_of_setTemp_Main 0086                  __size_of_setDelayOff_GO 005F  
                  __size_of_setSw_Enable 001C                                 _DelayOff 006A  
                           setSw_Main@sw 0069         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0031                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1ABF                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 1129                    _DlyOff_Initialization 1A7B  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 19F7  
                       __size_of_WDT_Set 000B                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 0BC5                    _Switch_Initialization 1AFD  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1B0A                             _setMemory_GO 1CCF  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 1194  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1C53  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 005E  
                            ??_Temp_Main 0032                        setRFSW_Control@sw 0063  
                    _Load_Initialization 1066                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 2000    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1FD5                  ??_DimmerIntrPointSelect 0070  
                           _setTemp_Main 0BC5                       _setLoad_Exceptions 11CB  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1D94                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
                               ___awtoft 1EA9                         ??_LedPointSelect 0020  
                               ___ftpack 173A                             _setSw_Status 1B34  
                      getTemp_AD@channel 0025                             ??_setRF_Main 0067  
                   CC2500_WriteREG@value 0022                              _setLED_Main 127C  
                    ?_setLoad_Exceptions 0070                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0987                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E                          ___lwdiv@divisor 0020  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0025  
                               __ptext10 19E8                                 __ptext11 0BC5  
                               __ptext20 0987                                 __ptext12 123D  
                               __ptext21 141D                                 __ptext13 1A59  
                               __ptext30 10F7                                 __ptext22 1BA1  
                               __ptext14 19E5                                 __ptext31 0762  
                               __ptext23 1B91                                 __ptext15 19E2  
                               __ptext40 0E8F                                 __ptext32 0D5B  
                               __ptext24 1AFD                                 __ptext16 1A51  
                               __ptext41 04C8                                 __ptext33 16DB  
                               __ptext25 1A41                                 __ptext17 037C  
                               __ptext50 1A91                                 __ptext42 1BD3  
                               __ptext34 1FAB                                 __ptext26 1B43  
                               __ptext18 1A49                                 __ptext51 1AD7  
                               __ptext43 179B                                 __ptext35 1C08  
                               __ptext27 19DF                                 __ptext19 0A67  
                               __ptext60 13D2                                 __ptext52 1D45  
                               __ptext44 09F6                                 __ptext36 1203  
                               __ptext28 05BE                                 __ptext61 1FD5  
                               __ptext53 1AF0                                 __ptext45 1ECB  
                               __ptext37 1129                                 __ptext29 0847  
                               __ptext70 127C                                 __ptext62 14BD  
                               __ptext54 19F7                                 __ptext46 1CFC  
                               __ptext38 1F10                                 __ptext71 1ABF  
                               __ptext63 1B81                                 __ptext55 1A12  
                               __ptext47 19DC                                 __ptext39 15C4  
                               __ptext80 1A86                                 __ptext72 1BC2  
                               __ptext64 1A39                                 __ptext56 020E  
                               __ptext48 1A9C                                 __ptext81 0AD9  
                               __ptext73 1E29                                 __ptext65 1DCD  
                               __ptext57 11CB                                 __ptext49 1BF6  
                               __ptext90 1CCF                                 __ptext82 1300  
                               __ptext74 1344                                 __ptext66 1194  
                               __ptext58 1D94                                 __ptext91 1A31  
                               __ptext83 1E0A                                 __ptext75 1AB3  
                               __ptext67 1066                                 __ptext59 1B26  
                               __ptext92 1BB1                                 __ptext84 0CD2  
                               __ptext76 069B                                 __ptext68 1D78  
                               __ptext93 1CE5                                 __ptext85 1EED  
                               __ptext77 1098                                 __ptext69 1ACB  
                               __ptext94 106B                                 __ptext86 1B18  
                               __ptext78 1A69                                 __ptext95 1A00  
                               __ptext87 161F                                 __ptext79 1D5E  
                               __ptext96 1A29                                 __ptext88 1DB0  
                               __ptext97 08B0                                 __ptext89 1D2C  
                               __ptext98 0F43                                 __ptext99 1B34  
                               __product 0245            ??_setDimmerLights_IntrControl 0072  
                           ??_setLoad_GO 0020                  ??_setLED_Initialization 0024  
               __size_of_RfSWPointSelect 0013           __size_of_Dimmer_Initialization 0006  
                 __end_of_setRFSW_Status 1B18            __end_of_Dimmer_Initialization 1A06  
           __end_of_setDimmerLights_Main 0B4C              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1A49  
               __end_of_CC2500_SIDLEMode 19F7               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1C7B               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1D2C                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 0008                     ??_setLoad_Exceptions 002E  
                        _CC2500_ReadByte 1CFC                              _my_MainTime 167D  
                     _CC2500_InitPATable 1DEB      __size_of_getDimmerLights_StatusFlag 0011  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 069B  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 016B            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 016D                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 12BD                       __end_of_setLoad_GO 1A39  
            __end_of_Flash_Memory_Modify 1388                        ??_getPercentValue 0059  
                            _setLog_Code 10F7              __end_of_Flash_Memory_Unlock 1A72  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1E88  
                     __end_of_setSw_Main 04C8                        setLoad_GO@command 0020  
                  ??_Load_Initialization 0022                            _Transceive_OK 03D9  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0070  
                ?_setOverTemp_Exceptions 0070                           _DelayTimejudge 1FAB  
                          ?_getLoad_Safe 0070                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0009                   ?_Switch_Initialization 0070  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1098  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 106B              __end_of_setDimmerLights_Adj 1344  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 19DC  
   __size_of_setDimmerLights_IntrControl 01C1                              getLoad_AD@i 0028  
                            getLoad_AD@j 0027                            ?_getTemp_Safe 0070  
                   _Flash_Memory_Erasing 1AB3                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007A          __end_of_DelayOff_Initialization 1A29  
    __size_of_setDimmerLights_IntrIOC_GO 0030                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1A31                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 16DB         __size_of_setControl_Lights_Table 008B  
                      _setLoad_StatusOff 1E0A                   __end_of_DelayTimejudge 1FD5  
         __end_of_setOverTemp_Exceptions 127C                           ??_getLoad_Safe 0020  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 1F59                 __end_of_Sw_DimmerAdjFunc 1469  
                __end_of_CC2500_ReadByte 1D13             __end_of_setSw_Initialization 1A49  
                        _Timeout_Counter 1C8F                     getPercentValue@value 005B  
             __end_of_LED_Initialization 1ACB         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 19E5  
               __size_of_Sw_DimmerOnFunc 0072                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0070                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 19DF  
               __end_of_Sw_DimmerOffFunc 09F6                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0A67                    __end_of_CC2500_TxData 1800  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 1D78  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1300  
