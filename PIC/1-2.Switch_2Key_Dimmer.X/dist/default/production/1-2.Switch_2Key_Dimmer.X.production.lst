

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Oct 23 16:44:44 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	intentry,global,class=CODE,delta=2
   155                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text136,local,class=CODE,merge=1,delta=2
   158                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   163                           	dabs	1,0x7E,2
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  011D                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  018E                     	;# 
   216  0191                     	;# 
   217  0191                     	;# 
   218  0192                     	;# 
   219  0193                     	;# 
   220  0193                     	;# 
   221  0194                     	;# 
   222  0195                     	;# 
   223  0196                     	;# 
   224  0197                     	;# 
   225  0199                     	;# 
   226  019A                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019C                     	;# 
   232  019C                     	;# 
   233  019D                     	;# 
   234  019E                     	;# 
   235  019F                     	;# 
   236  020D                     	;# 
   237  0210                     	;# 
   238  0211                     	;# 
   239  0211                     	;# 
   240  0212                     	;# 
   241  0212                     	;# 
   242  0213                     	;# 
   243  0213                     	;# 
   244  0214                     	;# 
   245  0214                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0216                     	;# 
   250  0216                     	;# 
   251  0217                     	;# 
   252  0217                     	;# 
   253  0291                     	;# 
   254  0291                     	;# 
   255  0292                     	;# 
   256  0293                     	;# 
   257  0298                     	;# 
   258  0298                     	;# 
   259  0299                     	;# 
   260  029A                     	;# 
   261  0394                     	;# 
   262  0395                     	;# 
   263  0396                     	;# 
   264  0FE4                     	;# 
   265  0FE5                     	;# 
   266  0FE6                     	;# 
   267  0FE7                     	;# 
   268  0FE8                     	;# 
   269  0FE9                     	;# 
   270  0FEA                     	;# 
   271  0FEB                     	;# 
   272  0FED                     	;# 
   273  0FEE                     	;# 
   274  0FEF                     	;# 
   275  0000                     	;# 
   276  0001                     	;# 
   277  0002                     	;# 
   278  0003                     	;# 
   279  0004                     	;# 
   280  0005                     	;# 
   281  0006                     	;# 
   282  0007                     	;# 
   283  0008                     	;# 
   284  0009                     	;# 
   285  000A                     	;# 
   286  000B                     	;# 
   287  000C                     	;# 
   288  000D                     	;# 
   289  000E                     	;# 
   290  0010                     	;# 
   291  0011                     	;# 
   292  0012                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0016                     	;# 
   296  0017                     	;# 
   297  0018                     	;# 
   298  0019                     	;# 
   299  001A                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  008C                     	;# 
   303  008D                     	;# 
   304  008E                     	;# 
   305  0090                     	;# 
   306  0091                     	;# 
   307  0092                     	;# 
   308  0095                     	;# 
   309  0096                     	;# 
   310  0097                     	;# 
   311  0099                     	;# 
   312  009A                     	;# 
   313  009B                     	;# 
   314  009B                     	;# 
   315  009C                     	;# 
   316  009D                     	;# 
   317  009E                     	;# 
   318  010C                     	;# 
   319  010D                     	;# 
   320  010E                     	;# 
   321  0116                     	;# 
   322  0117                     	;# 
   323  011D                     	;# 
   324  018C                     	;# 
   325  018D                     	;# 
   326  018E                     	;# 
   327  0191                     	;# 
   328  0191                     	;# 
   329  0192                     	;# 
   330  0193                     	;# 
   331  0193                     	;# 
   332  0194                     	;# 
   333  0195                     	;# 
   334  0196                     	;# 
   335  0197                     	;# 
   336  0199                     	;# 
   337  019A                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019C                     	;# 
   343  019C                     	;# 
   344  019D                     	;# 
   345  019E                     	;# 
   346  019F                     	;# 
   347  020D                     	;# 
   348  0210                     	;# 
   349  0211                     	;# 
   350  0211                     	;# 
   351  0212                     	;# 
   352  0212                     	;# 
   353  0213                     	;# 
   354  0213                     	;# 
   355  0214                     	;# 
   356  0214                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0216                     	;# 
   361  0216                     	;# 
   362  0217                     	;# 
   363  0217                     	;# 
   364  0291                     	;# 
   365  0291                     	;# 
   366  0292                     	;# 
   367  0293                     	;# 
   368  0298                     	;# 
   369  0298                     	;# 
   370  0299                     	;# 
   371  029A                     	;# 
   372  0394                     	;# 
   373  0395                     	;# 
   374  0396                     	;# 
   375  0FE4                     	;# 
   376  0FE5                     	;# 
   377  0FE6                     	;# 
   378  0FE7                     	;# 
   379  0FE8                     	;# 
   380  0FE9                     	;# 
   381  0FEA                     	;# 
   382  0FEB                     	;# 
   383  0FED                     	;# 
   384  0FEE                     	;# 
   385  0FEF                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  0010                     	;# 
   402  0011                     	;# 
   403  0012                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  0090                     	;# 
   417  0091                     	;# 
   418  0092                     	;# 
   419  0095                     	;# 
   420  0096                     	;# 
   421  0097                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009B                     	;# 
   426  009C                     	;# 
   427  009D                     	;# 
   428  009E                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0116                     	;# 
   433  0117                     	;# 
   434  011D                     	;# 
   435  018C                     	;# 
   436  018D                     	;# 
   437  018E                     	;# 
   438  0191                     	;# 
   439  0191                     	;# 
   440  0192                     	;# 
   441  0193                     	;# 
   442  0193                     	;# 
   443  0194                     	;# 
   444  0195                     	;# 
   445  0196                     	;# 
   446  0197                     	;# 
   447  0199                     	;# 
   448  019A                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019C                     	;# 
   454  019C                     	;# 
   455  019D                     	;# 
   456  019E                     	;# 
   457  019F                     	;# 
   458  020D                     	;# 
   459  0210                     	;# 
   460  0211                     	;# 
   461  0211                     	;# 
   462  0212                     	;# 
   463  0212                     	;# 
   464  0213                     	;# 
   465  0213                     	;# 
   466  0214                     	;# 
   467  0214                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0216                     	;# 
   472  0216                     	;# 
   473  0217                     	;# 
   474  0217                     	;# 
   475  0291                     	;# 
   476  0291                     	;# 
   477  0292                     	;# 
   478  0293                     	;# 
   479  0298                     	;# 
   480  0298                     	;# 
   481  0299                     	;# 
   482  029A                     	;# 
   483  0394                     	;# 
   484  0395                     	;# 
   485  0396                     	;# 
   486  0FE4                     	;# 
   487  0FE5                     	;# 
   488  0FE6                     	;# 
   489  0FE7                     	;# 
   490  0FE8                     	;# 
   491  0FE9                     	;# 
   492  0FEA                     	;# 
   493  0FEB                     	;# 
   494  0FED                     	;# 
   495  0FEE                     	;# 
   496  0FEF                     	;# 
   497  0000                     	;# 
   498  0001                     	;# 
   499  0002                     	;# 
   500  0003                     	;# 
   501  0004                     	;# 
   502  0005                     	;# 
   503  0006                     	;# 
   504  0007                     	;# 
   505  0008                     	;# 
   506  0009                     	;# 
   507  000A                     	;# 
   508  000B                     	;# 
   509  000C                     	;# 
   510  000D                     	;# 
   511  000E                     	;# 
   512  0010                     	;# 
   513  0011                     	;# 
   514  0012                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  008C                     	;# 
   525  008D                     	;# 
   526  008E                     	;# 
   527  0090                     	;# 
   528  0091                     	;# 
   529  0092                     	;# 
   530  0095                     	;# 
   531  0096                     	;# 
   532  0097                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  010C                     	;# 
   541  010D                     	;# 
   542  010E                     	;# 
   543  0116                     	;# 
   544  0117                     	;# 
   545  011D                     	;# 
   546  018C                     	;# 
   547  018D                     	;# 
   548  018E                     	;# 
   549  0191                     	;# 
   550  0191                     	;# 
   551  0192                     	;# 
   552  0193                     	;# 
   553  0193                     	;# 
   554  0194                     	;# 
   555  0195                     	;# 
   556  0196                     	;# 
   557  0197                     	;# 
   558  0199                     	;# 
   559  019A                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019C                     	;# 
   565  019C                     	;# 
   566  019D                     	;# 
   567  019E                     	;# 
   568  019F                     	;# 
   569  020D                     	;# 
   570  0210                     	;# 
   571  0211                     	;# 
   572  0211                     	;# 
   573  0212                     	;# 
   574  0212                     	;# 
   575  0213                     	;# 
   576  0213                     	;# 
   577  0214                     	;# 
   578  0214                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0216                     	;# 
   583  0216                     	;# 
   584  0217                     	;# 
   585  0217                     	;# 
   586  0291                     	;# 
   587  0291                     	;# 
   588  0292                     	;# 
   589  0293                     	;# 
   590  0298                     	;# 
   591  0298                     	;# 
   592  0299                     	;# 
   593  029A                     	;# 
   594  0394                     	;# 
   595  0395                     	;# 
   596  0396                     	;# 
   597  0FE4                     	;# 
   598  0FE5                     	;# 
   599  0FE6                     	;# 
   600  0FE7                     	;# 
   601  0FE8                     	;# 
   602  0FE9                     	;# 
   603  0FEA                     	;# 
   604  0FEB                     	;# 
   605  0FED                     	;# 
   606  0FEE                     	;# 
   607  0FEF                     	;# 
   608  0000                     	;# 
   609  0001                     	;# 
   610  0002                     	;# 
   611  0003                     	;# 
   612  0004                     	;# 
   613  0005                     	;# 
   614  0006                     	;# 
   615  0007                     	;# 
   616  0008                     	;# 
   617  0009                     	;# 
   618  000A                     	;# 
   619  000B                     	;# 
   620  000C                     	;# 
   621  000D                     	;# 
   622  000E                     	;# 
   623  0010                     	;# 
   624  0011                     	;# 
   625  0012                     	;# 
   626  0015                     	;# 
   627  0016                     	;# 
   628  0016                     	;# 
   629  0017                     	;# 
   630  0018                     	;# 
   631  0019                     	;# 
   632  001A                     	;# 
   633  001B                     	;# 
   634  001C                     	;# 
   635  008C                     	;# 
   636  008D                     	;# 
   637  008E                     	;# 
   638  0090                     	;# 
   639  0091                     	;# 
   640  0092                     	;# 
   641  0095                     	;# 
   642  0096                     	;# 
   643  0097                     	;# 
   644  0099                     	;# 
   645  009A                     	;# 
   646  009B                     	;# 
   647  009B                     	;# 
   648  009C                     	;# 
   649  009D                     	;# 
   650  009E                     	;# 
   651  010C                     	;# 
   652  010D                     	;# 
   653  010E                     	;# 
   654  0116                     	;# 
   655  0117                     	;# 
   656  011D                     	;# 
   657  018C                     	;# 
   658  018D                     	;# 
   659  018E                     	;# 
   660  0191                     	;# 
   661  0191                     	;# 
   662  0192                     	;# 
   663  0193                     	;# 
   664  0193                     	;# 
   665  0194                     	;# 
   666  0195                     	;# 
   667  0196                     	;# 
   668  0197                     	;# 
   669  0199                     	;# 
   670  019A                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019C                     	;# 
   676  019C                     	;# 
   677  019D                     	;# 
   678  019E                     	;# 
   679  019F                     	;# 
   680  020D                     	;# 
   681  0210                     	;# 
   682  0211                     	;# 
   683  0211                     	;# 
   684  0212                     	;# 
   685  0212                     	;# 
   686  0213                     	;# 
   687  0213                     	;# 
   688  0214                     	;# 
   689  0214                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0216                     	;# 
   694  0216                     	;# 
   695  0217                     	;# 
   696  0217                     	;# 
   697  0291                     	;# 
   698  0291                     	;# 
   699  0292                     	;# 
   700  0293                     	;# 
   701  0298                     	;# 
   702  0298                     	;# 
   703  0299                     	;# 
   704  029A                     	;# 
   705  0394                     	;# 
   706  0395                     	;# 
   707  0396                     	;# 
   708  0FE4                     	;# 
   709  0FE5                     	;# 
   710  0FE6                     	;# 
   711  0FE7                     	;# 
   712  0FE8                     	;# 
   713  0FE9                     	;# 
   714  0FEA                     	;# 
   715  0FEB                     	;# 
   716  0FED                     	;# 
   717  0FEE                     	;# 
   718  0FEF                     	;# 
   719  0000                     	;# 
   720  0001                     	;# 
   721  0002                     	;# 
   722  0003                     	;# 
   723  0004                     	;# 
   724  0005                     	;# 
   725  0006                     	;# 
   726  0007                     	;# 
   727  0008                     	;# 
   728  0009                     	;# 
   729  000A                     	;# 
   730  000B                     	;# 
   731  000C                     	;# 
   732  000D                     	;# 
   733  000E                     	;# 
   734  0010                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0015                     	;# 
   738  0016                     	;# 
   739  0016                     	;# 
   740  0017                     	;# 
   741  0018                     	;# 
   742  0019                     	;# 
   743  001A                     	;# 
   744  001B                     	;# 
   745  001C                     	;# 
   746  008C                     	;# 
   747  008D                     	;# 
   748  008E                     	;# 
   749  0090                     	;# 
   750  0091                     	;# 
   751  0092                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0097                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010E                     	;# 
   765  0116                     	;# 
   766  0117                     	;# 
   767  011D                     	;# 
   768  018C                     	;# 
   769  018D                     	;# 
   770  018E                     	;# 
   771  0191                     	;# 
   772  0191                     	;# 
   773  0192                     	;# 
   774  0193                     	;# 
   775  0193                     	;# 
   776  0194                     	;# 
   777  0195                     	;# 
   778  0196                     	;# 
   779  0197                     	;# 
   780  0199                     	;# 
   781  019A                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019C                     	;# 
   787  019C                     	;# 
   788  019D                     	;# 
   789  019E                     	;# 
   790  019F                     	;# 
   791  020D                     	;# 
   792  0210                     	;# 
   793  0211                     	;# 
   794  0211                     	;# 
   795  0212                     	;# 
   796  0212                     	;# 
   797  0213                     	;# 
   798  0213                     	;# 
   799  0214                     	;# 
   800  0214                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0216                     	;# 
   805  0216                     	;# 
   806  0217                     	;# 
   807  0217                     	;# 
   808  0291                     	;# 
   809  0291                     	;# 
   810  0292                     	;# 
   811  0293                     	;# 
   812  0298                     	;# 
   813  0298                     	;# 
   814  0299                     	;# 
   815  029A                     	;# 
   816  0394                     	;# 
   817  0395                     	;# 
   818  0396                     	;# 
   819  0FE4                     	;# 
   820  0FE5                     	;# 
   821  0FE6                     	;# 
   822  0FE7                     	;# 
   823  0FE8                     	;# 
   824  0FE9                     	;# 
   825  0FEA                     	;# 
   826  0FEB                     	;# 
   827  0FED                     	;# 
   828  0FEE                     	;# 
   829  0FEF                     	;# 
   830  0000                     	;# 
   831  0001                     	;# 
   832  0002                     	;# 
   833  0003                     	;# 
   834  0004                     	;# 
   835  0005                     	;# 
   836  0006                     	;# 
   837  0007                     	;# 
   838  0008                     	;# 
   839  0009                     	;# 
   840  000A                     	;# 
   841  000B                     	;# 
   842  000C                     	;# 
   843  000D                     	;# 
   844  000E                     	;# 
   845  0010                     	;# 
   846  0011                     	;# 
   847  0012                     	;# 
   848  0015                     	;# 
   849  0016                     	;# 
   850  0016                     	;# 
   851  0017                     	;# 
   852  0018                     	;# 
   853  0019                     	;# 
   854  001A                     	;# 
   855  001B                     	;# 
   856  001C                     	;# 
   857  008C                     	;# 
   858  008D                     	;# 
   859  008E                     	;# 
   860  0090                     	;# 
   861  0091                     	;# 
   862  0092                     	;# 
   863  0095                     	;# 
   864  0096                     	;# 
   865  0097                     	;# 
   866  0099                     	;# 
   867  009A                     	;# 
   868  009B                     	;# 
   869  009B                     	;# 
   870  009C                     	;# 
   871  009D                     	;# 
   872  009E                     	;# 
   873  010C                     	;# 
   874  010D                     	;# 
   875  010E                     	;# 
   876  0116                     	;# 
   877  0117                     	;# 
   878  011D                     	;# 
   879  018C                     	;# 
   880  018D                     	;# 
   881  018E                     	;# 
   882  0191                     	;# 
   883  0191                     	;# 
   884  0192                     	;# 
   885  0193                     	;# 
   886  0193                     	;# 
   887  0194                     	;# 
   888  0195                     	;# 
   889  0196                     	;# 
   890  0197                     	;# 
   891  0199                     	;# 
   892  019A                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019C                     	;# 
   898  019C                     	;# 
   899  019D                     	;# 
   900  019E                     	;# 
   901  019F                     	;# 
   902  020D                     	;# 
   903  0210                     	;# 
   904  0211                     	;# 
   905  0211                     	;# 
   906  0212                     	;# 
   907  0212                     	;# 
   908  0213                     	;# 
   909  0213                     	;# 
   910  0214                     	;# 
   911  0214                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0216                     	;# 
   916  0216                     	;# 
   917  0217                     	;# 
   918  0217                     	;# 
   919  0291                     	;# 
   920  0291                     	;# 
   921  0292                     	;# 
   922  0293                     	;# 
   923  0298                     	;# 
   924  0298                     	;# 
   925  0299                     	;# 
   926  029A                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0FE4                     	;# 
   931  0FE5                     	;# 
   932  0FE6                     	;# 
   933  0FE7                     	;# 
   934  0FE8                     	;# 
   935  0FE9                     	;# 
   936  0FEA                     	;# 
   937  0FEB                     	;# 
   938  0FED                     	;# 
   939  0FEE                     	;# 
   940  0FEF                     	;# 
   941  0000                     	;# 
   942  0001                     	;# 
   943  0002                     	;# 
   944  0003                     	;# 
   945  0004                     	;# 
   946  0005                     	;# 
   947  0006                     	;# 
   948  0007                     	;# 
   949  0008                     	;# 
   950  0009                     	;# 
   951  000A                     	;# 
   952  000B                     	;# 
   953  000C                     	;# 
   954  000D                     	;# 
   955  000E                     	;# 
   956  0010                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0015                     	;# 
   960  0016                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001C                     	;# 
   968  008C                     	;# 
   969  008D                     	;# 
   970  008E                     	;# 
   971  0090                     	;# 
   972  0091                     	;# 
   973  0092                     	;# 
   974  0095                     	;# 
   975  0096                     	;# 
   976  0097                     	;# 
   977  0099                     	;# 
   978  009A                     	;# 
   979  009B                     	;# 
   980  009B                     	;# 
   981  009C                     	;# 
   982  009D                     	;# 
   983  009E                     	;# 
   984  010C                     	;# 
   985  010D                     	;# 
   986  010E                     	;# 
   987  0116                     	;# 
   988  0117                     	;# 
   989  011D                     	;# 
   990  018C                     	;# 
   991  018D                     	;# 
   992  018E                     	;# 
   993  0191                     	;# 
   994  0191                     	;# 
   995  0192                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0197                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019C                     	;# 
  1009  019C                     	;# 
  1010  019D                     	;# 
  1011  019E                     	;# 
  1012  019F                     	;# 
  1013  020D                     	;# 
  1014  0210                     	;# 
  1015  0211                     	;# 
  1016  0211                     	;# 
  1017  0212                     	;# 
  1018  0212                     	;# 
  1019  0213                     	;# 
  1020  0213                     	;# 
  1021  0214                     	;# 
  1022  0214                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0216                     	;# 
  1027  0216                     	;# 
  1028  0217                     	;# 
  1029  0217                     	;# 
  1030  0291                     	;# 
  1031  0291                     	;# 
  1032  0292                     	;# 
  1033  0293                     	;# 
  1034  0298                     	;# 
  1035  0298                     	;# 
  1036  0299                     	;# 
  1037  029A                     	;# 
  1038  0394                     	;# 
  1039  0395                     	;# 
  1040  0396                     	;# 
  1041  0FE4                     	;# 
  1042  0FE5                     	;# 
  1043  0FE6                     	;# 
  1044  0FE7                     	;# 
  1045  0FE8                     	;# 
  1046  0FE9                     	;# 
  1047  0FEA                     	;# 
  1048  0FEB                     	;# 
  1049  0FED                     	;# 
  1050  0FEE                     	;# 
  1051  0FEF                     	;# 
  1052  0000                     	;# 
  1053  0001                     	;# 
  1054  0002                     	;# 
  1055  0003                     	;# 
  1056  0004                     	;# 
  1057  0005                     	;# 
  1058  0006                     	;# 
  1059  0007                     	;# 
  1060  0008                     	;# 
  1061  0009                     	;# 
  1062  000A                     	;# 
  1063  000B                     	;# 
  1064  000C                     	;# 
  1065  000D                     	;# 
  1066  000E                     	;# 
  1067  0010                     	;# 
  1068  0011                     	;# 
  1069  0012                     	;# 
  1070  0015                     	;# 
  1071  0016                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001C                     	;# 
  1079  008C                     	;# 
  1080  008D                     	;# 
  1081  008E                     	;# 
  1082  0090                     	;# 
  1083  0091                     	;# 
  1084  0092                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0097                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  010C                     	;# 
  1096  010D                     	;# 
  1097  010E                     	;# 
  1098  0116                     	;# 
  1099  0117                     	;# 
  1100  011D                     	;# 
  1101  018C                     	;# 
  1102  018D                     	;# 
  1103  018E                     	;# 
  1104  0191                     	;# 
  1105  0191                     	;# 
  1106  0192                     	;# 
  1107  0193                     	;# 
  1108  0193                     	;# 
  1109  0194                     	;# 
  1110  0195                     	;# 
  1111  0196                     	;# 
  1112  0197                     	;# 
  1113  0199                     	;# 
  1114  019A                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019C                     	;# 
  1120  019C                     	;# 
  1121  019D                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  020D                     	;# 
  1125  0210                     	;# 
  1126  0211                     	;# 
  1127  0211                     	;# 
  1128  0212                     	;# 
  1129  0212                     	;# 
  1130  0213                     	;# 
  1131  0213                     	;# 
  1132  0214                     	;# 
  1133  0214                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0216                     	;# 
  1138  0216                     	;# 
  1139  0217                     	;# 
  1140  0217                     	;# 
  1141  0291                     	;# 
  1142  0291                     	;# 
  1143  0292                     	;# 
  1144  0293                     	;# 
  1145  0298                     	;# 
  1146  0298                     	;# 
  1147  0299                     	;# 
  1148  029A                     	;# 
  1149  0394                     	;# 
  1150  0395                     	;# 
  1151  0396                     	;# 
  1152  0FE4                     	;# 
  1153  0FE5                     	;# 
  1154  0FE6                     	;# 
  1155  0FE7                     	;# 
  1156  0FE8                     	;# 
  1157  0FE9                     	;# 
  1158  0FEA                     	;# 
  1159  0FEB                     	;# 
  1160  0FED                     	;# 
  1161  0FEE                     	;# 
  1162  0FEF                     	;# 
  1163  0000                     	;# 
  1164  0001                     	;# 
  1165  0002                     	;# 
  1166  0003                     	;# 
  1167  0004                     	;# 
  1168  0005                     	;# 
  1169  0006                     	;# 
  1170  0007                     	;# 
  1171  0008                     	;# 
  1172  0009                     	;# 
  1173  000A                     	;# 
  1174  000B                     	;# 
  1175  000C                     	;# 
  1176  000D                     	;# 
  1177  000E                     	;# 
  1178  0010                     	;# 
  1179  0011                     	;# 
  1180  0012                     	;# 
  1181  0015                     	;# 
  1182  0016                     	;# 
  1183  0016                     	;# 
  1184  0017                     	;# 
  1185  0018                     	;# 
  1186  0019                     	;# 
  1187  001A                     	;# 
  1188  001B                     	;# 
  1189  001C                     	;# 
  1190  008C                     	;# 
  1191  008D                     	;# 
  1192  008E                     	;# 
  1193  0090                     	;# 
  1194  0091                     	;# 
  1195  0092                     	;# 
  1196  0095                     	;# 
  1197  0096                     	;# 
  1198  0097                     	;# 
  1199  0099                     	;# 
  1200  009A                     	;# 
  1201  009B                     	;# 
  1202  009B                     	;# 
  1203  009C                     	;# 
  1204  009D                     	;# 
  1205  009E                     	;# 
  1206  010C                     	;# 
  1207  010D                     	;# 
  1208  010E                     	;# 
  1209  0116                     	;# 
  1210  0117                     	;# 
  1211  011D                     	;# 
  1212  018C                     	;# 
  1213  018D                     	;# 
  1214  018E                     	;# 
  1215  0191                     	;# 
  1216  0191                     	;# 
  1217  0192                     	;# 
  1218  0193                     	;# 
  1219  0193                     	;# 
  1220  0194                     	;# 
  1221  0195                     	;# 
  1222  0196                     	;# 
  1223  0197                     	;# 
  1224  0199                     	;# 
  1225  019A                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019C                     	;# 
  1231  019C                     	;# 
  1232  019D                     	;# 
  1233  019E                     	;# 
  1234  019F                     	;# 
  1235  020D                     	;# 
  1236  0210                     	;# 
  1237  0211                     	;# 
  1238  0211                     	;# 
  1239  0212                     	;# 
  1240  0212                     	;# 
  1241  0213                     	;# 
  1242  0213                     	;# 
  1243  0214                     	;# 
  1244  0214                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0216                     	;# 
  1249  0216                     	;# 
  1250  0217                     	;# 
  1251  0217                     	;# 
  1252  0291                     	;# 
  1253  0291                     	;# 
  1254  0292                     	;# 
  1255  0293                     	;# 
  1256  0298                     	;# 
  1257  0298                     	;# 
  1258  0299                     	;# 
  1259  029A                     	;# 
  1260  0394                     	;# 
  1261  0395                     	;# 
  1262  0396                     	;# 
  1263  0FE4                     	;# 
  1264  0FE5                     	;# 
  1265  0FE6                     	;# 
  1266  0FE7                     	;# 
  1267  0FE8                     	;# 
  1268  0FE9                     	;# 
  1269  0FEA                     	;# 
  1270  0FEB                     	;# 
  1271  0FED                     	;# 
  1272  0FEE                     	;# 
  1273  0FEF                     	;# 
  1274  0000                     	;# 
  1275  0001                     	;# 
  1276  0002                     	;# 
  1277  0003                     	;# 
  1278  0004                     	;# 
  1279  0005                     	;# 
  1280  0006                     	;# 
  1281  0007                     	;# 
  1282  0008                     	;# 
  1283  0009                     	;# 
  1284  000A                     	;# 
  1285  000B                     	;# 
  1286  000C                     	;# 
  1287  000D                     	;# 
  1288  000E                     	;# 
  1289  0010                     	;# 
  1290  0011                     	;# 
  1291  0012                     	;# 
  1292  0015                     	;# 
  1293  0016                     	;# 
  1294  0016                     	;# 
  1295  0017                     	;# 
  1296  0018                     	;# 
  1297  0019                     	;# 
  1298  001A                     	;# 
  1299  001B                     	;# 
  1300  001C                     	;# 
  1301  008C                     	;# 
  1302  008D                     	;# 
  1303  008E                     	;# 
  1304  0090                     	;# 
  1305  0091                     	;# 
  1306  0092                     	;# 
  1307  0095                     	;# 
  1308  0096                     	;# 
  1309  0097                     	;# 
  1310  0099                     	;# 
  1311  009A                     	;# 
  1312  009B                     	;# 
  1313  009B                     	;# 
  1314  009C                     	;# 
  1315  009D                     	;# 
  1316  009E                     	;# 
  1317  010C                     	;# 
  1318  010D                     	;# 
  1319  010E                     	;# 
  1320  0116                     	;# 
  1321  0117                     	;# 
  1322  011D                     	;# 
  1323  018C                     	;# 
  1324  018D                     	;# 
  1325  018E                     	;# 
  1326  0191                     	;# 
  1327  0191                     	;# 
  1328  0192                     	;# 
  1329  0193                     	;# 
  1330  0193                     	;# 
  1331  0194                     	;# 
  1332  0195                     	;# 
  1333  0196                     	;# 
  1334  0197                     	;# 
  1335  0199                     	;# 
  1336  019A                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019C                     	;# 
  1342  019C                     	;# 
  1343  019D                     	;# 
  1344  019E                     	;# 
  1345  019F                     	;# 
  1346  020D                     	;# 
  1347  0210                     	;# 
  1348  0211                     	;# 
  1349  0211                     	;# 
  1350  0212                     	;# 
  1351  0212                     	;# 
  1352  0213                     	;# 
  1353  0213                     	;# 
  1354  0214                     	;# 
  1355  0214                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0216                     	;# 
  1360  0216                     	;# 
  1361  0217                     	;# 
  1362  0217                     	;# 
  1363  0291                     	;# 
  1364  0291                     	;# 
  1365  0292                     	;# 
  1366  0293                     	;# 
  1367  0298                     	;# 
  1368  0298                     	;# 
  1369  0299                     	;# 
  1370  029A                     	;# 
  1371  0394                     	;# 
  1372  0395                     	;# 
  1373  0396                     	;# 
  1374  0FE4                     	;# 
  1375  0FE5                     	;# 
  1376  0FE6                     	;# 
  1377  0FE7                     	;# 
  1378  0FE8                     	;# 
  1379  0FE9                     	;# 
  1380  0FEA                     	;# 
  1381  0FEB                     	;# 
  1382  0FED                     	;# 
  1383  0FEE                     	;# 
  1384  0FEF                     	;# 
  1385  0000                     	;# 
  1386  0001                     	;# 
  1387  0002                     	;# 
  1388  0003                     	;# 
  1389  0004                     	;# 
  1390  0005                     	;# 
  1391  0006                     	;# 
  1392  0007                     	;# 
  1393  0008                     	;# 
  1394  0009                     	;# 
  1395  000A                     	;# 
  1396  000B                     	;# 
  1397  000C                     	;# 
  1398  000D                     	;# 
  1399  000E                     	;# 
  1400  0010                     	;# 
  1401  0011                     	;# 
  1402  0012                     	;# 
  1403  0015                     	;# 
  1404  0016                     	;# 
  1405  0016                     	;# 
  1406  0017                     	;# 
  1407  0018                     	;# 
  1408  0019                     	;# 
  1409  001A                     	;# 
  1410  001B                     	;# 
  1411  001C                     	;# 
  1412  008C                     	;# 
  1413  008D                     	;# 
  1414  008E                     	;# 
  1415  0090                     	;# 
  1416  0091                     	;# 
  1417  0092                     	;# 
  1418  0095                     	;# 
  1419  0096                     	;# 
  1420  0097                     	;# 
  1421  0099                     	;# 
  1422  009A                     	;# 
  1423  009B                     	;# 
  1424  009B                     	;# 
  1425  009C                     	;# 
  1426  009D                     	;# 
  1427  009E                     	;# 
  1428  010C                     	;# 
  1429  010D                     	;# 
  1430  010E                     	;# 
  1431  0116                     	;# 
  1432  0117                     	;# 
  1433  011D                     	;# 
  1434  018C                     	;# 
  1435  018D                     	;# 
  1436  018E                     	;# 
  1437  0191                     	;# 
  1438  0191                     	;# 
  1439  0192                     	;# 
  1440  0193                     	;# 
  1441  0193                     	;# 
  1442  0194                     	;# 
  1443  0195                     	;# 
  1444  0196                     	;# 
  1445  0197                     	;# 
  1446  0199                     	;# 
  1447  019A                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019C                     	;# 
  1453  019C                     	;# 
  1454  019D                     	;# 
  1455  019E                     	;# 
  1456  019F                     	;# 
  1457  020D                     	;# 
  1458  0210                     	;# 
  1459  0211                     	;# 
  1460  0211                     	;# 
  1461  0212                     	;# 
  1462  0212                     	;# 
  1463  0213                     	;# 
  1464  0213                     	;# 
  1465  0214                     	;# 
  1466  0214                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0216                     	;# 
  1471  0216                     	;# 
  1472  0217                     	;# 
  1473  0217                     	;# 
  1474  0291                     	;# 
  1475  0291                     	;# 
  1476  0292                     	;# 
  1477  0293                     	;# 
  1478  0298                     	;# 
  1479  0298                     	;# 
  1480  0299                     	;# 
  1481  029A                     	;# 
  1482  0394                     	;# 
  1483  0395                     	;# 
  1484  0396                     	;# 
  1485  0FE4                     	;# 
  1486  0FE5                     	;# 
  1487  0FE6                     	;# 
  1488  0FE7                     	;# 
  1489  0FE8                     	;# 
  1490  0FE9                     	;# 
  1491  0FEA                     	;# 
  1492  0FEB                     	;# 
  1493  0FED                     	;# 
  1494  0FEE                     	;# 
  1495  0FEF                     	;# 
  1496  0000                     	;# 
  1497  0001                     	;# 
  1498  0002                     	;# 
  1499  0003                     	;# 
  1500  0004                     	;# 
  1501  0005                     	;# 
  1502  0006                     	;# 
  1503  0007                     	;# 
  1504  0008                     	;# 
  1505  0009                     	;# 
  1506  000A                     	;# 
  1507  000B                     	;# 
  1508  000C                     	;# 
  1509  000D                     	;# 
  1510  000E                     	;# 
  1511  0010                     	;# 
  1512  0011                     	;# 
  1513  0012                     	;# 
  1514  0015                     	;# 
  1515  0016                     	;# 
  1516  0016                     	;# 
  1517  0017                     	;# 
  1518  0018                     	;# 
  1519  0019                     	;# 
  1520  001A                     	;# 
  1521  001B                     	;# 
  1522  001C                     	;# 
  1523  008C                     	;# 
  1524  008D                     	;# 
  1525  008E                     	;# 
  1526  0090                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0095                     	;# 
  1530  0096                     	;# 
  1531  0097                     	;# 
  1532  0099                     	;# 
  1533  009A                     	;# 
  1534  009B                     	;# 
  1535  009B                     	;# 
  1536  009C                     	;# 
  1537  009D                     	;# 
  1538  009E                     	;# 
  1539  010C                     	;# 
  1540  010D                     	;# 
  1541  010E                     	;# 
  1542  0116                     	;# 
  1543  0117                     	;# 
  1544  011D                     	;# 
  1545  018C                     	;# 
  1546  018D                     	;# 
  1547  018E                     	;# 
  1548  0191                     	;# 
  1549  0191                     	;# 
  1550  0192                     	;# 
  1551  0193                     	;# 
  1552  0193                     	;# 
  1553  0194                     	;# 
  1554  0195                     	;# 
  1555  0196                     	;# 
  1556  0197                     	;# 
  1557  0199                     	;# 
  1558  019A                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  020D                     	;# 
  1569  0210                     	;# 
  1570  0211                     	;# 
  1571  0211                     	;# 
  1572  0212                     	;# 
  1573  0212                     	;# 
  1574  0213                     	;# 
  1575  0213                     	;# 
  1576  0214                     	;# 
  1577  0214                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0216                     	;# 
  1582  0216                     	;# 
  1583  0217                     	;# 
  1584  0217                     	;# 
  1585  0291                     	;# 
  1586  0291                     	;# 
  1587  0292                     	;# 
  1588  0293                     	;# 
  1589  0298                     	;# 
  1590  0298                     	;# 
  1591  0299                     	;# 
  1592  029A                     	;# 
  1593  0394                     	;# 
  1594  0395                     	;# 
  1595  0396                     	;# 
  1596  0FE4                     	;# 
  1597  0FE5                     	;# 
  1598  0FE6                     	;# 
  1599  0FE7                     	;# 
  1600  0FE8                     	;# 
  1601  0FE9                     	;# 
  1602  0FEA                     	;# 
  1603  0FEB                     	;# 
  1604  0FED                     	;# 
  1605  0FEE                     	;# 
  1606  0FEF                     	;# 
  1607  0000                     	;# 
  1608  0001                     	;# 
  1609  0002                     	;# 
  1610  0003                     	;# 
  1611  0004                     	;# 
  1612  0005                     	;# 
  1613  0006                     	;# 
  1614  0007                     	;# 
  1615  0008                     	;# 
  1616  0009                     	;# 
  1617  000A                     	;# 
  1618  000B                     	;# 
  1619  000C                     	;# 
  1620  000D                     	;# 
  1621  000E                     	;# 
  1622  0010                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0015                     	;# 
  1626  0016                     	;# 
  1627  0016                     	;# 
  1628  0017                     	;# 
  1629  0018                     	;# 
  1630  0019                     	;# 
  1631  001A                     	;# 
  1632  001B                     	;# 
  1633  001C                     	;# 
  1634  008C                     	;# 
  1635  008D                     	;# 
  1636  008E                     	;# 
  1637  0090                     	;# 
  1638  0091                     	;# 
  1639  0092                     	;# 
  1640  0095                     	;# 
  1641  0096                     	;# 
  1642  0097                     	;# 
  1643  0099                     	;# 
  1644  009A                     	;# 
  1645  009B                     	;# 
  1646  009B                     	;# 
  1647  009C                     	;# 
  1648  009D                     	;# 
  1649  009E                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  0116                     	;# 
  1654  0117                     	;# 
  1655  011D                     	;# 
  1656  018C                     	;# 
  1657  018D                     	;# 
  1658  018E                     	;# 
  1659  0191                     	;# 
  1660  0191                     	;# 
  1661  0192                     	;# 
  1662  0193                     	;# 
  1663  0193                     	;# 
  1664  0194                     	;# 
  1665  0195                     	;# 
  1666  0196                     	;# 
  1667  0197                     	;# 
  1668  0199                     	;# 
  1669  019A                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019C                     	;# 
  1675  019C                     	;# 
  1676  019D                     	;# 
  1677  019E                     	;# 
  1678  019F                     	;# 
  1679  020D                     	;# 
  1680  0210                     	;# 
  1681  0211                     	;# 
  1682  0211                     	;# 
  1683  0212                     	;# 
  1684  0212                     	;# 
  1685  0213                     	;# 
  1686  0213                     	;# 
  1687  0214                     	;# 
  1688  0214                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0216                     	;# 
  1693  0216                     	;# 
  1694  0217                     	;# 
  1695  0217                     	;# 
  1696  0291                     	;# 
  1697  0291                     	;# 
  1698  0292                     	;# 
  1699  0293                     	;# 
  1700  0298                     	;# 
  1701  0298                     	;# 
  1702  0299                     	;# 
  1703  029A                     	;# 
  1704  0394                     	;# 
  1705  0395                     	;# 
  1706  0396                     	;# 
  1707  0FE4                     	;# 
  1708  0FE5                     	;# 
  1709  0FE6                     	;# 
  1710  0FE7                     	;# 
  1711  0FE8                     	;# 
  1712  0FE9                     	;# 
  1713  0FEA                     	;# 
  1714  0FEB                     	;# 
  1715  0FED                     	;# 
  1716  0FEE                     	;# 
  1717  0FEF                     	;# 
  1718  0000                     	;# 
  1719  0001                     	;# 
  1720  0002                     	;# 
  1721  0003                     	;# 
  1722  0004                     	;# 
  1723  0005                     	;# 
  1724  0006                     	;# 
  1725  0007                     	;# 
  1726  0008                     	;# 
  1727  0009                     	;# 
  1728  000A                     	;# 
  1729  000B                     	;# 
  1730  000C                     	;# 
  1731  000D                     	;# 
  1732  000E                     	;# 
  1733  0010                     	;# 
  1734  0011                     	;# 
  1735  0012                     	;# 
  1736  0015                     	;# 
  1737  0016                     	;# 
  1738  0016                     	;# 
  1739  0017                     	;# 
  1740  0018                     	;# 
  1741  0019                     	;# 
  1742  001A                     	;# 
  1743  001B                     	;# 
  1744  001C                     	;# 
  1745  008C                     	;# 
  1746  008D                     	;# 
  1747  008E                     	;# 
  1748  0090                     	;# 
  1749  0091                     	;# 
  1750  0092                     	;# 
  1751  0095                     	;# 
  1752  0096                     	;# 
  1753  0097                     	;# 
  1754  0099                     	;# 
  1755  009A                     	;# 
  1756  009B                     	;# 
  1757  009B                     	;# 
  1758  009C                     	;# 
  1759  009D                     	;# 
  1760  009E                     	;# 
  1761  010C                     	;# 
  1762  010D                     	;# 
  1763  010E                     	;# 
  1764  0116                     	;# 
  1765  0117                     	;# 
  1766  011D                     	;# 
  1767  018C                     	;# 
  1768  018D                     	;# 
  1769  018E                     	;# 
  1770  0191                     	;# 
  1771  0191                     	;# 
  1772  0192                     	;# 
  1773  0193                     	;# 
  1774  0193                     	;# 
  1775  0194                     	;# 
  1776  0195                     	;# 
  1777  0196                     	;# 
  1778  0197                     	;# 
  1779  0199                     	;# 
  1780  019A                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019C                     	;# 
  1786  019C                     	;# 
  1787  019D                     	;# 
  1788  019E                     	;# 
  1789  019F                     	;# 
  1790  020D                     	;# 
  1791  0210                     	;# 
  1792  0211                     	;# 
  1793  0211                     	;# 
  1794  0212                     	;# 
  1795  0212                     	;# 
  1796  0213                     	;# 
  1797  0213                     	;# 
  1798  0214                     	;# 
  1799  0214                     	;# 
  1800  0215                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0216                     	;# 
  1804  0216                     	;# 
  1805  0217                     	;# 
  1806  0217                     	;# 
  1807  0291                     	;# 
  1808  0291                     	;# 
  1809  0292                     	;# 
  1810  0293                     	;# 
  1811  0298                     	;# 
  1812  0298                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  0394                     	;# 
  1816  0395                     	;# 
  1817  0396                     	;# 
  1818  0FE4                     	;# 
  1819  0FE5                     	;# 
  1820  0FE6                     	;# 
  1821  0FE7                     	;# 
  1822  0FE8                     	;# 
  1823  0FE9                     	;# 
  1824  0FEA                     	;# 
  1825  0FEB                     	;# 
  1826  0FED                     	;# 
  1827  0FEE                     	;# 
  1828  0FEF                     	;# 
  1829  0000                     	;# 
  1830  0001                     	;# 
  1831  0002                     	;# 
  1832  0003                     	;# 
  1833  0004                     	;# 
  1834  0005                     	;# 
  1835  0006                     	;# 
  1836  0007                     	;# 
  1837  0008                     	;# 
  1838  0009                     	;# 
  1839  000A                     	;# 
  1840  000B                     	;# 
  1841  000C                     	;# 
  1842  000D                     	;# 
  1843  000E                     	;# 
  1844  0010                     	;# 
  1845  0011                     	;# 
  1846  0012                     	;# 
  1847  0015                     	;# 
  1848  0016                     	;# 
  1849  0016                     	;# 
  1850  0017                     	;# 
  1851  0018                     	;# 
  1852  0019                     	;# 
  1853  001A                     	;# 
  1854  001B                     	;# 
  1855  001C                     	;# 
  1856  008C                     	;# 
  1857  008D                     	;# 
  1858  008E                     	;# 
  1859  0090                     	;# 
  1860  0091                     	;# 
  1861  0092                     	;# 
  1862  0095                     	;# 
  1863  0096                     	;# 
  1864  0097                     	;# 
  1865  0099                     	;# 
  1866  009A                     	;# 
  1867  009B                     	;# 
  1868  009B                     	;# 
  1869  009C                     	;# 
  1870  009D                     	;# 
  1871  009E                     	;# 
  1872  010C                     	;# 
  1873  010D                     	;# 
  1874  010E                     	;# 
  1875  0116                     	;# 
  1876  0117                     	;# 
  1877  011D                     	;# 
  1878  018C                     	;# 
  1879  018D                     	;# 
  1880  018E                     	;# 
  1881  0191                     	;# 
  1882  0191                     	;# 
  1883  0192                     	;# 
  1884  0193                     	;# 
  1885  0193                     	;# 
  1886  0194                     	;# 
  1887  0195                     	;# 
  1888  0196                     	;# 
  1889  0197                     	;# 
  1890  0199                     	;# 
  1891  019A                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019C                     	;# 
  1897  019C                     	;# 
  1898  019D                     	;# 
  1899  019E                     	;# 
  1900  019F                     	;# 
  1901  020D                     	;# 
  1902  0210                     	;# 
  1903  0211                     	;# 
  1904  0211                     	;# 
  1905  0212                     	;# 
  1906  0212                     	;# 
  1907  0213                     	;# 
  1908  0213                     	;# 
  1909  0214                     	;# 
  1910  0214                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0216                     	;# 
  1915  0216                     	;# 
  1916  0217                     	;# 
  1917  0217                     	;# 
  1918  0291                     	;# 
  1919  0291                     	;# 
  1920  0292                     	;# 
  1921  0293                     	;# 
  1922  0298                     	;# 
  1923  0298                     	;# 
  1924  0299                     	;# 
  1925  029A                     	;# 
  1926  0394                     	;# 
  1927  0395                     	;# 
  1928  0396                     	;# 
  1929  0FE4                     	;# 
  1930  0FE5                     	;# 
  1931  0FE6                     	;# 
  1932  0FE7                     	;# 
  1933  0FE8                     	;# 
  1934  0FE9                     	;# 
  1935  0FEA                     	;# 
  1936  0FEB                     	;# 
  1937  0FED                     	;# 
  1938  0FEE                     	;# 
  1939  0FEF                     	;# 
  1940  0000                     	;# 
  1941  0001                     	;# 
  1942  0002                     	;# 
  1943  0003                     	;# 
  1944  0004                     	;# 
  1945  0005                     	;# 
  1946  0006                     	;# 
  1947  0007                     	;# 
  1948  0008                     	;# 
  1949  0009                     	;# 
  1950  000A                     	;# 
  1951  000B                     	;# 
  1952  000C                     	;# 
  1953  000D                     	;# 
  1954  000E                     	;# 
  1955  0010                     	;# 
  1956  0011                     	;# 
  1957  0012                     	;# 
  1958  0015                     	;# 
  1959  0016                     	;# 
  1960  0016                     	;# 
  1961  0017                     	;# 
  1962  0018                     	;# 
  1963  0019                     	;# 
  1964  001A                     	;# 
  1965  001B                     	;# 
  1966  001C                     	;# 
  1967  008C                     	;# 
  1968  008D                     	;# 
  1969  008E                     	;# 
  1970  0090                     	;# 
  1971  0091                     	;# 
  1972  0092                     	;# 
  1973  0095                     	;# 
  1974  0096                     	;# 
  1975  0097                     	;# 
  1976  0099                     	;# 
  1977  009A                     	;# 
  1978  009B                     	;# 
  1979  009B                     	;# 
  1980  009C                     	;# 
  1981  009D                     	;# 
  1982  009E                     	;# 
  1983  010C                     	;# 
  1984  010D                     	;# 
  1985  010E                     	;# 
  1986  0116                     	;# 
  1987  0117                     	;# 
  1988  011D                     	;# 
  1989  018C                     	;# 
  1990  018D                     	;# 
  1991  018E                     	;# 
  1992  0191                     	;# 
  1993  0191                     	;# 
  1994  0192                     	;# 
  1995  0193                     	;# 
  1996  0193                     	;# 
  1997  0194                     	;# 
  1998  0195                     	;# 
  1999  0196                     	;# 
  2000  0197                     	;# 
  2001  0199                     	;# 
  2002  019A                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019C                     	;# 
  2008  019C                     	;# 
  2009  019D                     	;# 
  2010  019E                     	;# 
  2011  019F                     	;# 
  2012  020D                     	;# 
  2013  0210                     	;# 
  2014  0211                     	;# 
  2015  0211                     	;# 
  2016  0212                     	;# 
  2017  0212                     	;# 
  2018  0213                     	;# 
  2019  0213                     	;# 
  2020  0214                     	;# 
  2021  0214                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0216                     	;# 
  2026  0216                     	;# 
  2027  0217                     	;# 
  2028  0217                     	;# 
  2029  0291                     	;# 
  2030  0291                     	;# 
  2031  0292                     	;# 
  2032  0293                     	;# 
  2033  0298                     	;# 
  2034  0298                     	;# 
  2035  0299                     	;# 
  2036  029A                     	;# 
  2037  0394                     	;# 
  2038  0395                     	;# 
  2039  0396                     	;# 
  2040  0FE4                     	;# 
  2041  0FE5                     	;# 
  2042  0FE6                     	;# 
  2043  0FE7                     	;# 
  2044  0FE8                     	;# 
  2045  0FE9                     	;# 
  2046  0FEA                     	;# 
  2047  0FEB                     	;# 
  2048  0FED                     	;# 
  2049  0FEE                     	;# 
  2050  0FEF                     	;# 
  2051                           
  2052                           	psect	idataBANK4
  2053  1E64                     __pidataBANK4:	
  2054                           
  2055                           ;initializer for __product
  2056  1E64  3463               	retlw	99
  2057  1E65  3402               	retlw	2
  2058  1E66  3400               	retlw	0
  2059  1E67  3400               	retlw	0
  2060  1E68  3400               	retlw	0
  2061  1E69  3400               	retlw	0
  2062  1E6A  3400               	retlw	0
  2063  1E6B  3400               	retlw	0
  2064  1E6C  3400               	retlw	0
  2065  1E6D  3400               	retlw	0
  2066  1E6E  3400               	retlw	0
  2067  1E6F  3400               	retlw	0
  2068  1E70  34FF               	retlw	255
  2069  1E71  34FF               	retlw	255
  2070  1E72  34FF               	retlw	255
  2071  1E73  3400               	retlw	0
  2072  1E74  3400               	retlw	0
  2073  1E75  3400               	retlw	0
  2074  1E76  3400               	retlw	0
  2075  1E77  3400               	retlw	0
  2076  1E78  3400               	retlw	0
  2077  1E79  3400               	retlw	0
  2078  1E7A  3400               	retlw	0
  2079  1E7B  3400               	retlw	0
  2080  1E7C  3400               	retlw	0
  2081  1E7D  3400               	retlw	0
  2082  1E7E  3400               	retlw	0
  2083  1E7F  3400               	retlw	0
  2084  1E80  3400               	retlw	0
  2085  1E81  3400               	retlw	0
  2086  1E82  3400               	retlw	0
  2087  1E83  3400               	retlw	0
  2088                           
  2089                           	psect	stringtext
  2090  1000                     __pstringtext:	
  2091  1000                     _CC2500_registers_address:	
  2092  1000  3403               	retlw	3
  2093  1001  3416               	retlw	22
  2094  1002  3417               	retlw	23
  2095  1003  341E               	retlw	30
  2096  1004  341F               	retlw	31
  2097  1005  3420               	retlw	32
  2098  1006  342A               	retlw	42
  2099  1007  342B               	retlw	43
  2100  1008  340B               	retlw	11
  2101  1009  340C               	retlw	12
  2102  100A  340D               	retlw	13
  2103  100B  340E               	retlw	14
  2104  100C  340F               	retlw	15
  2105  100D  3410               	retlw	16
  2106  100E  3411               	retlw	17
  2107  100F  3412               	retlw	18
  2108  1010  3413               	retlw	19
  2109  1011  3414               	retlw	20
  2110  1012  340A               	retlw	10
  2111  1013  3415               	retlw	21
  2112  1014  3421               	retlw	33
  2113  1015  3422               	retlw	34
  2114  1016  3418               	retlw	24
  2115  1017  3419               	retlw	25
  2116  1018  341A               	retlw	26
  2117  1019  341B               	retlw	27
  2118  101A  341C               	retlw	28
  2119  101B  341D               	retlw	29
  2120  101C  3423               	retlw	35
  2121  101D  3424               	retlw	36
  2122  101E  3425               	retlw	37
  2123  101F  3426               	retlw	38
  2124  1020  3429               	retlw	41
  2125  1021  342C               	retlw	44
  2126  1022  342D               	retlw	45
  2127  1023  342E               	retlw	46
  2128  1024  3400               	retlw	0
  2129  1025  3401               	retlw	1
  2130  1026  3402               	retlw	2
  2131  1027  3407               	retlw	7
  2132  1028  3408               	retlw	8
  2133  1029  3409               	retlw	9
  2134  102A  3406               	retlw	6
  2135  102B  3404               	retlw	4
  2136  102C  3405               	retlw	5
  2137  102D  3427               	retlw	39
  2138  102E  3428               	retlw	40
  2139  102F                     __end_of_CC2500_registers_address:	
  2140  102F                     _CC2500_rfSettings:	
  2141  102F  3407               	retlw	7
  2142  1030  3407               	retlw	7
  2143  1031  3430               	retlw	48
  2144  1032  3487               	retlw	135
  2145  1033  346B               	retlw	107
  2146  1034  34F8               	retlw	248
  2147  1035  347F               	retlw	127
  2148  1036  343F               	retlw	63
  2149  1037  3409               	retlw	9
  2150  1038  3400               	retlw	0
  2151  1039  345C               	retlw	92
  2152  103A  34A7               	retlw	167
  2153  103B  3462               	retlw	98
  2154  103C  3486               	retlw	134
  2155  103D  3483               	retlw	131
  2156  103E  3403               	retlw	3
  2157  103F  3422               	retlw	34
  2158  1040  34F8               	retlw	248
  2159  1041  3400               	retlw	0
  2160  1042  3444               	retlw	68
  2161  1043  34B6               	retlw	182
  2162  1044  3410               	retlw	16
  2163  1045  3418               	retlw	24
  2164  1046  341D               	retlw	29
  2165  1047  341C               	retlw	28
  2166  1048  34C7               	retlw	199
  2167  1049  3400               	retlw	0
  2168  104A  34B2               	retlw	178
  2169  104B  34EA               	retlw	234
  2170  104C  340A               	retlw	10
  2171  104D  3400               	retlw	0
  2172  104E  3411               	retlw	17
  2173  104F  3459               	retlw	89
  2174  1050  3488               	retlw	136
  2175  1051  3431               	retlw	49
  2176  1052  340B               	retlw	11
  2177  1053  342F               	retlw	47
  2178  1054  342E               	retlw	46
  2179  1055  3406               	retlw	6
  2180  1056  3404               	retlw	4
  2181  1057  3405               	retlw	5
  2182  1058  3400               	retlw	0
  2183  1059  3430               	retlw	48
  2184  105A  34D3               	retlw	211
  2185  105B  3491               	retlw	145
  2186  105C  3441               	retlw	65
  2187  105D  3400               	retlw	0
  2188  105E                     __end_of_CC2500_rfSettings:	
  2189  105E                     _CC2500_patable_vaule:	
  2190  105E  34FE               	retlw	254
  2191  105F  34FE               	retlw	254
  2192  1060  34FE               	retlw	254
  2193  1061  34FE               	retlw	254
  2194  1062  34FE               	retlw	254
  2195  1063  34FE               	retlw	254
  2196  1064  34FE               	retlw	254
  2197  1065  34FE               	retlw	254
  2198  1066                     __end_of_CC2500_patable_vaule:	
  2199                           
  2200                           	psect	nvBANK0
  2201  006C                     __pnvBANK0:	
  2202  006C                     _product:	
  2203  006C                     	ds	1
  2204  000C                     _PORTA	set	12
  2205  000D                     _PORTB	set	13
  2206  000E                     _PORTC	set	14
  2207  0015                     _TMR0	set	21
  2208  005F                     _GIE	set	95
  2209  005B                     _IOCIE	set	91
  2210  0058                     _IOCIF	set	88
  2211  005E                     _PEIE	set	94
  2212  0060                     _RA0	set	96
  2213  0063                     _RA3	set	99
  2214  0064                     _RA4	set	100
  2215  0066                     _RA6	set	102
  2216  0067                     _RA7	set	103
  2217  0068                     _RB0	set	104
  2218  0069                     _RB1	set	105
  2219  006A                     _RB2	set	106
  2220  006B                     _RB3	set	107
  2221  006C                     _RB4	set	108
  2222  006D                     _RB5	set	109
  2223  0070                     _RC0	set	112
  2224  0071                     _RC1	set	113
  2225  0072                     _RC2	set	114
  2226  0074                     _RC4	set	116
  2227  0075                     _RC5	set	117
  2228  0077                     _RC7	set	119
  2229  005D                     _TMR0IE	set	93
  2230  005A                     _TMR0IF	set	90
  2231  009D                     _ADCON0	set	157
  2232  009E                     _ADCON1	set	158
  2233  009C                     _ADRESH	set	156
  2234  009B                     _ADRESL	set	155
  2235  0095                     _OPTION_REG	set	149
  2236  0099                     _OSCCON	set	153
  2237  008C                     _TRISA	set	140
  2238  008D                     _TRISB	set	141
  2239  008E                     _TRISC	set	142
  2240  0097                     _WDTCON	set	151
  2241  04E9                     _GO_nDONE	set	1257
  2242  0117                     _FVRCON	set	279
  2243  010C                     _LATA	set	268
  2244  010D                     _LATB	set	269
  2245  010E                     _LATC	set	270
  2246  018C                     _ANSELA	set	396
  2247  018D                     _ANSELB	set	397
  2248  018E                     _ANSELC	set	398
  2249  0192                     _PMADRH	set	402
  2250  0191                     _PMADRL	set	401
  2251  0196                     _PMCON2	set	406
  2252  0194                     _PMDATH	set	404
  2253  0193                     _PMDATL	set	403
  2254  0CAE                     _CFGS	set	3246
  2255  0CAC                     _FREE	set	3244
  2256  0CAD                     _LWLO	set	3245
  2257  0CA8                     _RD	set	3240
  2258  0CA9                     _WR	set	3241
  2259  0CAA                     _WREN	set	3242
  2260  1069                     _WPUB1	set	4201
  2261  106A                     _WPUB2	set	4202
  2262  0396                     _IOCBF	set	918
  2263  0395                     _IOCBN	set	917
  2264  0394                     _IOCBP	set	916
  2265  1CB2                     _IOCBF2	set	7346
  2266                           
  2267                           ; #config settings
  2268  0000                     
  2269                           	psect	cinit
  2270  0015                     start_initialization:	
  2271  0015                     __initialization:	
  2272                           
  2273                           ; Clear objects allocated to BITCOMMON
  2274  0015  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2275                           
  2276                           ; Clear objects allocated to COMMON
  2277  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2278  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2279  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2280  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2281  001A  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2282                           
  2283                           ; Clear objects allocated to BANK0
  2284  001B  01ED               	clrf	__pbssBANK0& (0+127)
  2285                           
  2286                           ; Clear objects allocated to BANK1
  2287  001C  30A0               	movlw	low __pbssBANK1
  2288  001D  0084               	movwf	4
  2289  001E  3000               	movlw	high __pbssBANK1
  2290  001F  0085               	movwf	5
  2291  0020  304E               	movlw	78
  2292  0021  3199  21F8  3180   	fcall	clear_ram0
  2293                           
  2294                           ; Clear objects allocated to BANK2
  2295  0024  3020               	movlw	low __pbssBANK2
  2296  0025  0084               	movwf	4
  2297  0026  3001               	movlw	high __pbssBANK2
  2298  0027  0085               	movwf	5
  2299  0028  3050               	movlw	80
  2300  0029  3199  21F8  3180   	fcall	clear_ram0
  2301                           
  2302                           ; Clear objects allocated to BANK3
  2303  002C  30A0               	movlw	low __pbssBANK3
  2304  002D  0084               	movwf	4
  2305  002E  3001               	movlw	high __pbssBANK3
  2306  002F  0085               	movwf	5
  2307  0030  304F               	movlw	79
  2308  0031  3199  21F8  3180   	fcall	clear_ram0
  2309                           
  2310                           ; Clear objects allocated to BANK4
  2311  0034  3020               	movlw	low __pbssBANK4
  2312  0035  0084               	movwf	4
  2313  0036  3002               	movlw	high __pbssBANK4
  2314  0037  0085               	movwf	5
  2315  0038  3025               	movlw	37
  2316  0039  3199  21F8  3180   	fcall	clear_ram0
  2317                           
  2318                           ; Initialize objects allocated to BANK4
  2319  003C  3064               	movlw	low __pidataBANK4
  2320  003D  0084               	movwf	4
  2321  003E  309E               	movlw	(high __pidataBANK4)| (0+128)
  2322  003F  0085               	movwf	5
  2323  0040  3045               	movlw	low __pdataBANK4
  2324  0041  0086               	movwf	6
  2325  0042  3002               	movlw	high __pdataBANK4
  2326  0043  0087               	movwf	7
  2327  0044  3020               	movlw	32
  2328  0045  3199  21F2         	fcall	init_ram
  2329  0047                     end_of_initialization:	
  2330                           ;End of C runtime variable initialization code
  2331                           
  2332  0047                     __end_of__initialization:	
  2333  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2334  0048  0020               	movlb	0
  2335  0049  3195  2D72         	ljmp	_main	;jump to C main() function
  2336                           
  2337                           	psect	bitbssCOMMON
  2338  03D8                     __pbitbssCOMMON:	
  2339  03D8                     _Receive_OK:	
  2340  03D8                     	ds	1
  2341  03D9                     _Transceive_OK:	
  2342  03D9                     	ds	1
  2343                           
  2344                           	psect	bssCOMMON
  2345  0076                     __pbssCOMMON:	
  2346  0076                     _DelayOff:	
  2347  0076                     	ds	1
  2348  0077                     _Dimmer:	
  2349  0077                     	ds	1
  2350  0078                     _DimmerLights:	
  2351  0078                     	ds	1
  2352  0079                     _DimmerLightsIntr:	
  2353  0079                     	ds	1
  2354  007A                     _LED:	
  2355  007A                     	ds	1
  2356                           
  2357                           	psect	bssBANK0
  2358  006D                     __pbssBANK0:	
  2359  006D                     _Sw:	
  2360  006D                     	ds	1
  2361                           
  2362                           	psect	bssBANK1
  2363  00A0                     __pbssBANK1:	
  2364  00A0                     _myMain:	
  2365  00A0                     	ds	18
  2366  00B2                     _Buz1:	
  2367  00B2                     	ds	12
  2368  00BE                     _RF1:	
  2369  00BE                     	ds	9
  2370  00C7                     _RF_Count:	
  2371  00C7                     	ds	2
  2372  00C9                     _WDT:	
  2373  00C9                     	ds	2
  2374  00CB                     _CRC:	
  2375  00CB                     	ds	1
  2376  00CC                     _DimmerLights11:	
  2377  00CC                     	ds	1
  2378  00CD                     _DimmerLights22:	
  2379  00CD                     	ds	1
  2380  00CE                     _DimmerLightsIntrIOC:	
  2381  00CE                     	ds	1
  2382  00CF                     _RFSW:	
  2383  00CF                     	ds	1
  2384  00D0                     _RSSI:	
  2385  00D0                     	ds	1
  2386  00D1                     _Rx_Length:	
  2387  00D1                     	ds	1
  2388  00D2                     _SPI0Buffer:	
  2389  00D2                     	ds	1
  2390  00D3                     _Tx_Length:	
  2391  00D3                     	ds	1
  2392  00D4                     _r_address:	
  2393  00D4                     	ds	1
  2394  00D5                     _r_data:	
  2395  00D5                     	ds	1
  2396  00D6                     _s_data:	
  2397  00D6                     	ds	1
  2398  00D7                     _Temp1:	
  2399  00D7                     	ds	14
  2400  00E5                     _Dimmer1:	
  2401  00E5                     	ds	3
  2402  00E8                     _DlySw1:	
  2403  00E8                     	ds	2
  2404  00EA                     _DlySw2:	
  2405  00EA                     	ds	2
  2406  00EC                     _RFSW1:	
  2407  00EC                     	ds	1
  2408  00ED                     _RFSW2:	
  2409  00ED                     	ds	1
  2410                           
  2411                           	psect	bssBANK2
  2412  0120                     __pbssBANK2:	
  2413  0120                     _RF_Data:	
  2414  0120                     	ds	21
  2415  0135                     _Timer0:	
  2416  0135                     	ds	8
  2417  013D                     _DimmerLights1:	
  2418  013D                     	ds	15
  2419  014C                     _DimmerLights2:	
  2420  014C                     	ds	15
  2421  015B                     _Sw1:	
  2422  015B                     	ds	9
  2423  0164                     _VarErrLED:	
  2424  0164                     	ds	4
  2425  0168                     _VarLED1:	
  2426  0168                     	ds	4
  2427  016C                     _VarLED2:	
  2428  016C                     	ds	4
  2429                           
  2430                           	psect	bssBANK3
  2431  01A0                     __pbssBANK3:	
  2432  01A0                     _Load1:	
  2433  01A0                     	ds	70
  2434  01E6                     _Sw2:	
  2435  01E6                     	ds	9
  2436                           
  2437                           	psect	bssBANK4
  2438  0220                     __pbssBANK4:	
  2439  0220                     _Memory:	
  2440  0220                     	ds	37
  2441                           
  2442                           	psect	dataBANK4
  2443  0245                     __pdataBANK4:	
  2444  0245                     __product:	
  2445  0245                     	ds	32
  2446                           
  2447                           	psect	clrtext
  2448  19F8                     clear_ram0:	
  2449                           ;	Called with FSR0 containing the base address, and
  2450                           ;	WREG with the size to clear
  2451                           
  2452  19F8  0064               	clrwdt	;clear the watchdog before getting into this loop
  2453  19F9                     clrloop0:	
  2454  19F9  0180               	clrf	0	;clear RAM location pointed to by FSR
  2455  19FA  3101               	addfsr 0,1
  2456  19FB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2457  19FC  29F9               	goto	clrloop0	;have we reached the end yet?
  2458  19FD  3400               	retlw	0	;all done for this memory range, return
  2459                           
  2460                           	psect	inittext
  2461  19F2                     init_ram:	
  2462  19F2  00FE               	movwf	126
  2463  19F3                     initloop:	
  2464  19F3  0012               	moviw fsr0++
  2465  19F4  001E               	movwi fsr1++
  2466  19F5  0BFE               	decfsz	126,f
  2467  19F6  29F3               	goto	initloop
  2468  19F7  3400               	retlw	0
  2469                           
  2470                           	psect	cstackBANK4
  2471  0265                     __pcstackBANK4:	
  2472  0265                     ?_main:	
  2473  0265                     main@argc:	
  2474                           ; 2 bytes @ 0x0
  2475                           
  2476                           
  2477                           ; 2 bytes @ 0x0
  2478  0265                     	ds	2
  2479  0267                     main@argv:	
  2480                           
  2481                           ; 2 bytes @ 0x2
  2482  0267                     	ds	2
  2483                           
  2484                           	psect	cstackCOMMON
  2485  0070                     __pcstackCOMMON:	
  2486  0070                     ?_Timeout_Counter:	
  2487  0070                     ?_set_TimeoutCleared:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_CC2500_WriteByte:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_CC2500_WriteCommand:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_CC2500_ReadStatus:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_CC2500_ReadByte:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_CC2500_PowerRST:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_CC2500_InitSetREG:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_CC2500_InitPATable:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_CC2500_ClearTXFIFO:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_CC2500_ClearRXFIFO:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_CC2500_FrequencyCabr:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_CC2500_SIDLEMode:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_DlyOff_Initialization:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_DlyOff_Main:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_setTxData:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_setDimmerLights_Initialization:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_Dimmer_Initialization:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_setLoad_GO:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_setMemory_GO:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_setDimmerLights_Main:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_setDimmerLights_ERROR:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_setLoad_Count:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_setLED_Initialization:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_setLED_Main:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_Fosc_Set:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_IO_Set:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_TMR0_Set:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_ADC_Set:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_IOC_Set:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_WDT_Set:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_IOC_ISR:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_TMR0_ISR:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_Flash_Memory_Write:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_Flash_Memory_Modify:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_WDT_Clearing:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_myMain_Initialization:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_Temp_Initialization:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_Load_Initialization:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_Switch_Initialization:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_RF_Initialization:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_getLoad_AD:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_getTemp_AD:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_my_MainTime:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_Temp_Main:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_Load_Main:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_Switch_Main:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_RF_Main:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_setTemp_Enable:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setLoad_Enable:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setSw_Enable:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_setRF_Enable:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setLoad_AH_AL_Restore:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setLoad_Exceptions:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setTemp_Initialization:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setTemp_Main:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setOverTemp_Exceptions:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setRF_Initialization:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setRF_Main:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_getRxData:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_setLog_Code:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setControl_Lights_Table:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setRFSW_Control:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_setRFSW_AdjControl:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_setRF_DimmerValue:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_setSw_Initialization:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setSw_Main:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_Sw_DimmerOnFunc:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_Sw_DimmerAdjFunc:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_Sw_DimmerOffFunc:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_Buzzer_Initialization:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_Buzzer_Main:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_CC2500_TxData:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_CC2500_RxData:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_CC2500_PowerOnInitial:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_DelayOffPointSelect:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_DelayOff_Initialization:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_DelayOff_Main:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_DimmerIntrIOCPointSelect:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ??_DimmerIntrIOCPointSelect:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_DimmerIntrPointSelect:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ??_DimmerIntrPointSelect:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_setDimmerLights_IntrControl:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_DimmerLightsPointSelect:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_DimmerLights_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_DimmerLights_Close:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_DimmerLights_Main:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_DimmerLights_Exceptions:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_setDimmerLights_AdjRF:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_LedPointSelect:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_LED_Initialization:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_LED_Main:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_Mcu_Initialization:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_ISR:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_setDimmerReClock:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_Flash_Memory_Initialization:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_Flash_Memory_Main:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_Flash_Memory_Unlock:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_Flash_Memory_Erasing:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_WDT_Main:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_setRF_Learn:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_RfSWPointSelect:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_TouchPower:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_SwPointSelect:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?i1_setLoad_StatusOff:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_DelayTimejudge:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_getDimmerLights_StatusFlag:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808  0070                     ?_getPercentValue:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ?_Flash_Memory_Read:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ?_getTemp_Safe:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0070                     ?_setPercentValue:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0070                     ?_getLoad_Safe:	
  2821                           ; 1 bytes @ 0x0
  2822                           
  2823  0070                     i1setLoad_StatusOff@command:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826                           
  2827                           ; 1 bytes @ 0x0
  2828  0070                     	ds	1
  2829  0071                     ??i1_setLoad_StatusOff:	
  2830  0071                     DimmerIntrIOCPointSelect@lights:	
  2831                           ; 0 bytes @ 0x1
  2832                           
  2833  0071                     DimmerIntrPointSelect@lights:	
  2834                           ; 1 bytes @ 0x1
  2835                           
  2836  0071                     i1setLoad_StatusOff@lights:	
  2837                           ; 1 bytes @ 0x1
  2838                           
  2839                           
  2840                           ; 1 bytes @ 0x1
  2841  0071                     	ds	1
  2842  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2843  0072                     ??_setDimmerLights_IntrControl:	
  2844                           ; 0 bytes @ 0x2
  2845                           
  2846  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2847                           ; 0 bytes @ 0x2
  2848                           
  2849                           
  2850                           ; 1 bytes @ 0x2
  2851  0072                     	ds	1
  2852  0073                     ??_IOC_ISR:	
  2853  0073                     ??_setDimmerReClock:	
  2854                           ; 0 bytes @ 0x3
  2855                           
  2856                           
  2857                           ; 0 bytes @ 0x3
  2858  0073                     	ds	1
  2859  0074                     setDimmerLights_IntrControl@lights:	
  2860                           
  2861                           ; 1 bytes @ 0x4
  2862  0074                     	ds	1
  2863  0075                     ??_TMR0_ISR:	
  2864  0075                     ??_ISR:	
  2865                           ; 0 bytes @ 0x5
  2866                           
  2867                           
  2868                           ; 0 bytes @ 0x5
  2869  0075                     	ds	1
  2870                           
  2871                           	psect	cstackBANK0
  2872  0020                     __pcstackBANK0:	
  2873  0020                     ??_Timeout_Counter:	
  2874  0020                     ??_set_TimeoutCleared:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_CC2500_WriteByte:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_CC2500_ReadByte:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ?_DelayTime_1us:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_setTxData:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ?_setLoad_StatusOff:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_Dimmer_Initialization:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_getDimmerLights_StatusFlag:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_setLoad_GO:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_setMemory_GO:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_setLoad_Count:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ?_setLoad_StatusOn:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ??_Fosc_Set:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_IO_Set:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_TMR0_Set:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ??_ADC_Set:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ??_IOC_Set:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_WDT_Set:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ??_Flash_Memory_Read:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ??_Flash_Memory_Write:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0020                     ??_WDT_Clearing:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0020                     ??_myMain_Initialization:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0020                     ??_Temp_Initialization:	
  2941                           ; 0 bytes @ 0x0
  2942                           
  2943  0020                     ??_setTemp_Enable:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0020                     ??_setLoad_Enable:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0020                     ??_setRF_Enable:	
  2950                           ; 0 bytes @ 0x0
  2951                           
  2952  0020                     ??_setLoad_AH_AL_Restore:	
  2953                           ; 0 bytes @ 0x0
  2954                           
  2955  0020                     ??_getTemp_Safe:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0020                     ??_setTemp_Initialization:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0020                     ??_setRF_Initialization:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0020                     ??_Buzzer_Initialization:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0020                     ??_Buzzer_Main:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_DelayOffPointSelect:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_DimmerLightsPointSelect:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_LedPointSelect:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_Flash_Memory_Unlock:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_Flash_Memory_Erasing:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_WDT_Main:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ??_getLoad_Safe:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ??_setRF_Learn:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_RfSWPointSelect:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ??_TouchPower:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_SwPointSelect:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ?___bmul:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ?_getBuz_GO:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009  0020                     ?_getAD:	
  3010                           ; 2 bytes @ 0x0
  3011                           
  3012  0020                     ?___wmul:	
  3013                           ; 2 bytes @ 0x0
  3014                           
  3015  0020                     ?___awdiv:	
  3016                           ; 2 bytes @ 0x0
  3017                           
  3018  0020                     ?___lwdiv:	
  3019                           ; 2 bytes @ 0x0
  3020                           
  3021  0020                     ?___ftpack:	
  3022                           ; 2 bytes @ 0x0
  3023                           
  3024  0020                     getAD@adcon1:	
  3025                           ; 3 bytes @ 0x0
  3026                           
  3027  0020                     setLoad_Enable@command:	
  3028                           ; 1 bytes @ 0x0
  3029                           
  3030  0020                     setLoad_GO@command:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033  0020                     setLoad_StatusOn@command:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036  0020                     setLoad_StatusOff@command:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039  0020                     getLoad_Safe@result:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042  0020                     setTemp_Enable@command:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045  0020                     getTemp_Safe@result:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048  0020                     setRF_Learn@command:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051  0020                     setRF_Enable@command:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054  0020                     ___bmul@multiplicand:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057  0020                     DelayTime_1us@count:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060  0020                     ___wmul@multiplier:	
  3061                           ; 2 bytes @ 0x0
  3062                           
  3063  0020                     ___awdiv@divisor:	
  3064                           ; 2 bytes @ 0x0
  3065                           
  3066  0020                     ___lwdiv@divisor:	
  3067                           ; 2 bytes @ 0x0
  3068                           
  3069  0020                     ___ftpack@arg:	
  3070                           ; 2 bytes @ 0x0
  3071                           
  3072                           
  3073                           ; 3 bytes @ 0x0
  3074  0020                     	ds	1
  3075  0021                     ??_setLoad_StatusOff:	
  3076  0021                     ??_setLoad_StatusOn:	
  3077                           ; 0 bytes @ 0x1
  3078                           
  3079  0021                     ??_RF_Initialization:	
  3080                           ; 0 bytes @ 0x1
  3081                           
  3082  0021                     ??_Mcu_Initialization:	
  3083                           ; 0 bytes @ 0x1
  3084                           
  3085  0021                     ??___bmul:	
  3086                           ; 0 bytes @ 0x1
  3087                           
  3088  0021                     CC2500_WriteByte@loop_a:	
  3089                           ; 0 bytes @ 0x1
  3090                           
  3091  0021                     CC2500_ReadByte@loop_b:	
  3092                           ; 1 bytes @ 0x1
  3093                           
  3094  0021                     DelayOffPointSelect@sw:	
  3095                           ; 1 bytes @ 0x1
  3096                           
  3097  0021                     DimmerLightsPointSelect@lights:	
  3098                           ; 1 bytes @ 0x1
  3099                           
  3100  0021                     getDimmerLights_StatusFlag@Status:	
  3101                           ; 1 bytes @ 0x1
  3102                           
  3103  0021                     LedPointSelect@led:	
  3104                           ; 1 bytes @ 0x1
  3105                           
  3106  0021                     Flash_Memory_Read@i:	
  3107                           ; 1 bytes @ 0x1
  3108                           
  3109  0021                     Flash_Memory_Write@i:	
  3110                           ; 1 bytes @ 0x1
  3111                           
  3112  0021                     setLoad_Count@command:	
  3113                           ; 1 bytes @ 0x1
  3114                           
  3115  0021                     setLoad_StatusOn@lights:	
  3116                           ; 1 bytes @ 0x1
  3117                           
  3118  0021                     setLoad_StatusOff@lights:	
  3119                           ; 1 bytes @ 0x1
  3120                           
  3121  0021                     setLoad_AH_AL_Restore@i:	
  3122                           ; 1 bytes @ 0x1
  3123                           
  3124  0021                     RfSWPointSelect@sw:	
  3125                           ; 1 bytes @ 0x1
  3126                           
  3127  0021                     SwPointSelect@sw:	
  3128                           ; 1 bytes @ 0x1
  3129                           
  3130                           
  3131                           ; 1 bytes @ 0x1
  3132  0021                     	ds	1
  3133  0022                     ??_CC2500_WriteCommand:	
  3134  0022                     ??_CC2500_ReadStatus:	
  3135                           ; 0 bytes @ 0x2
  3136                           
  3137  0022                     ??_DelayTime_1us:	
  3138                           ; 0 bytes @ 0x2
  3139                           
  3140  0022                     ?_CC2500_WriteREG:	
  3141                           ; 0 bytes @ 0x2
  3142                           
  3143  0022                     ??_DlyOff_Initialization:	
  3144                           ; 0 bytes @ 0x2
  3145                           
  3146  0022                     ?_setSw_Status:	
  3147                           ; 0 bytes @ 0x2
  3148                           
  3149  0022                     ?_setRFSW_Status:	
  3150                           ; 0 bytes @ 0x2
  3151                           
  3152  0022                     ?_setDimmerLights_Trigger:	
  3153                           ; 0 bytes @ 0x2
  3154                           
  3155  0022                     ?_setDimmerLights_Switch:	
  3156                           ; 0 bytes @ 0x2
  3157                           
  3158  0022                     ??_setDimmerLights_Initialization:	
  3159                           ; 0 bytes @ 0x2
  3160                           
  3161  0022                     ?_setDimmerLights_TriggerERROR:	
  3162                           ; 0 bytes @ 0x2
  3163                           
  3164  0022                     ?_setLED:	
  3165                           ; 0 bytes @ 0x2
  3166                           
  3167  0022                     ??_setLED_Main:	
  3168                           ; 0 bytes @ 0x2
  3169                           
  3170  0022                     ??_Load_Initialization:	
  3171                           ; 0 bytes @ 0x2
  3172                           
  3173  0022                     ??_setSw_Enable:	
  3174                           ; 0 bytes @ 0x2
  3175                           
  3176  0022                     ??_getBuz_GO:	
  3177                           ; 0 bytes @ 0x2
  3178                           
  3179  0022                     ?_setDimmerLights_AdjGo:	
  3180                           ; 0 bytes @ 0x2
  3181                           
  3182  0022                     ?_setDimmerLights_TriggerAdj:	
  3183                           ; 0 bytes @ 0x2
  3184                           
  3185  0022                     ?_setDimmerLights_Clear:	
  3186                           ; 0 bytes @ 0x2
  3187                           
  3188  0022                     CC2500_WriteREG@value:	
  3189                           ; 0 bytes @ 0x2
  3190                           
  3191  0022                     DlyOff_Initialization@sw:	
  3192                           ; 1 bytes @ 0x2
  3193                           
  3194  0022                     _getDimmerLights_StatusFlag$2647:	
  3195                           ; 1 bytes @ 0x2
  3196                           
  3197  0022                     setDimmerLights_TriggerERROR@command:	
  3198                           ; 1 bytes @ 0x2
  3199                           
  3200  0022                     setDimmerLights_Switch@command:	
  3201                           ; 1 bytes @ 0x2
  3202                           
  3203  0022                     setDimmerLights_AdjGo@command:	
  3204                           ; 1 bytes @ 0x2
  3205                           
  3206  0022                     setDimmerLights_Trigger@command:	
  3207                           ; 1 bytes @ 0x2
  3208                           
  3209  0022                     setDimmerLights_TriggerAdj@command:	
  3210                           ; 1 bytes @ 0x2
  3211                           
  3212  0022                     setDimmerLights_Clear@command:	
  3213                           ; 1 bytes @ 0x2
  3214                           
  3215  0022                     setLED@command:	
  3216                           ; 1 bytes @ 0x2
  3217                           
  3218  0022                     Flash_Memory_Read@address:	
  3219                           ; 1 bytes @ 0x2
  3220                           
  3221  0022                     setMemory_GO@command:	
  3222                           ; 1 bytes @ 0x2
  3223                           
  3224  0022                     setRFSW_Status@command:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227  0022                     setSw_Enable@command:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230  0022                     setSw_Status@command:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233  0022                     ___bmul@product:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236  0022                     DelayTime_1us@i:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239  0022                     ___wmul@multiplicand:	
  3240                           ; 2 bytes @ 0x2
  3241                           
  3242  0022                     ___awdiv@dividend:	
  3243                           ; 2 bytes @ 0x2
  3244                           
  3245  0022                     ___lwdiv@dividend:	
  3246                           ; 2 bytes @ 0x2
  3247                           
  3248                           
  3249                           ; 2 bytes @ 0x2
  3250  0022                     	ds	1
  3251  0023                     ??_CC2500_WriteREG:	
  3252  0023                     ??_setSw_Status:	
  3253                           ; 0 bytes @ 0x3
  3254                           
  3255  0023                     ??_setRFSW_Status:	
  3256                           ; 0 bytes @ 0x3
  3257                           
  3258  0023                     ??_setDimmerLights_Trigger:	
  3259                           ; 0 bytes @ 0x3
  3260                           
  3261  0023                     ??_setDimmerLights_Switch:	
  3262                           ; 0 bytes @ 0x3
  3263                           
  3264  0023                     ??_setDimmerLights_TriggerERROR:	
  3265                           ; 0 bytes @ 0x3
  3266                           
  3267  0023                     ??_setLED:	
  3268                           ; 0 bytes @ 0x3
  3269                           
  3270  0023                     ??_DelayOff_Initialization:	
  3271                           ; 0 bytes @ 0x3
  3272                           
  3273  0023                     ??_DimmerLights_Close:	
  3274                           ; 0 bytes @ 0x3
  3275                           
  3276  0023                     ??_setDimmerLights_AdjGo:	
  3277                           ; 0 bytes @ 0x3
  3278                           
  3279  0023                     ??_setDimmerLights_TriggerAdj:	
  3280                           ; 0 bytes @ 0x3
  3281                           
  3282  0023                     ??_setDimmerLights_Clear:	
  3283                           ; 0 bytes @ 0x3
  3284                           
  3285  0023                     ??_getAD:	
  3286                           ; 0 bytes @ 0x3
  3287                           
  3288  0023                     CC2500_WriteCommand@command:	
  3289                           ; 0 bytes @ 0x3
  3290                           
  3291  0023                     CC2500_ReadStatus@status_addr:	
  3292                           ; 1 bytes @ 0x3
  3293                           
  3294  0023                     setDimmerLights_Initialization@lights:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297  0023                     setDimmerLights_TriggerERROR@lights:	
  3298                           ; 1 bytes @ 0x3
  3299                           
  3300  0023                     setDimmerLights_Switch@lights:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303  0023                     setDimmerLights_AdjGo@lights:	
  3304                           ; 1 bytes @ 0x3
  3305                           
  3306  0023                     setDimmerLights_Trigger@lights:	
  3307                           ; 1 bytes @ 0x3
  3308                           
  3309  0023                     setDimmerLights_TriggerAdj@lights:	
  3310                           ; 1 bytes @ 0x3
  3311                           
  3312  0023                     setDimmerLights_Clear@lights:	
  3313                           ; 1 bytes @ 0x3
  3314                           
  3315  0023                     setLED@led:	
  3316                           ; 1 bytes @ 0x3
  3317                           
  3318  0023                     getAD@adcon0:	
  3319                           ; 1 bytes @ 0x3
  3320                           
  3321  0023                     Flash_Memory_Read@ret:	
  3322                           ; 1 bytes @ 0x3
  3323                           
  3324  0023                     setRFSW_Status@sw:	
  3325                           ; 1 bytes @ 0x3
  3326                           
  3327  0023                     setSw_Status@sw:	
  3328                           ; 1 bytes @ 0x3
  3329                           
  3330  0023                     ___bmul@multiplier:	
  3331                           ; 1 bytes @ 0x3
  3332                           
  3333  0023                     ___ftpack@exp:	
  3334                           ; 1 bytes @ 0x3
  3335                           
  3336                           
  3337                           ; 1 bytes @ 0x3
  3338  0023                     	ds	1
  3339  0024                     ??_CC2500_ClearTXFIFO:	
  3340  0024                     ??_CC2500_ClearRXFIFO:	
  3341                           ; 0 bytes @ 0x4
  3342                           
  3343  0024                     ??_CC2500_SIDLEMode:	
  3344                           ; 0 bytes @ 0x4
  3345                           
  3346  0024                     ??_DelayTimejudge:	
  3347                           ; 0 bytes @ 0x4
  3348                           
  3349  0024                     ?_setDimmerLights:	
  3350                           ; 0 bytes @ 0x4
  3351                           
  3352  0024                     ??_setDimmerLights_ERROR:	
  3353                           ; 0 bytes @ 0x4
  3354                           
  3355  0024                     ??_setLED_Initialization:	
  3356                           ; 0 bytes @ 0x4
  3357                           
  3358  0024                     ??_Flash_Memory_Modify:	
  3359                           ; 0 bytes @ 0x4
  3360                           
  3361  0024                     ??_getLoad_AD:	
  3362                           ; 0 bytes @ 0x4
  3363                           
  3364  0024                     ??_getTemp_AD:	
  3365                           ; 0 bytes @ 0x4
  3366                           
  3367  0024                     ??_setSw_Initialization:	
  3368                           ; 0 bytes @ 0x4
  3369                           
  3370  0024                     ??_Sw_DimmerAdjFunc:	
  3371                           ; 0 bytes @ 0x4
  3372                           
  3373  0024                     ??_CC2500_TxData:	
  3374                           ; 0 bytes @ 0x4
  3375                           
  3376  0024                     ??_CC2500_RxData:	
  3377                           ; 0 bytes @ 0x4
  3378                           
  3379  0024                     ??_DimmerLights_Initialization:	
  3380                           ; 0 bytes @ 0x4
  3381                           
  3382  0024                     ??___wmul:	
  3383                           ; 0 bytes @ 0x4
  3384                           
  3385  0024                     ??___awdiv:	
  3386                           ; 0 bytes @ 0x4
  3387                           
  3388  0024                     ??___lwdiv:	
  3389                           ; 0 bytes @ 0x4
  3390                           
  3391  0024                     CC2500_WriteREG@w_addr:	
  3392                           ; 0 bytes @ 0x4
  3393                           
  3394  0024                     setDimmerLights@status:	
  3395                           ; 1 bytes @ 0x4
  3396                           
  3397  0024                     setLED_Initialization@led:	
  3398                           ; 1 bytes @ 0x4
  3399                           
  3400  0024                     setLED_Main@led:	
  3401                           ; 1 bytes @ 0x4
  3402                           
  3403  0024                     setSw_Initialization@sw:	
  3404                           ; 1 bytes @ 0x4
  3405                           
  3406  0024                     Sw_DimmerAdjFunc@Idle:	
  3407                           ; 1 bytes @ 0x4
  3408                           
  3409  0024                     ___ftpack@sign:	
  3410                           ; 1 bytes @ 0x4
  3411                           
  3412  0024                     getBuz_GO@i:	
  3413                           ; 1 bytes @ 0x4
  3414                           
  3415  0024                     DelayTime_1us@j:	
  3416                           ; 2 bytes @ 0x4
  3417                           
  3418  0024                     ___wmul@product:	
  3419                           ; 2 bytes @ 0x4
  3420                           
  3421                           
  3422                           ; 2 bytes @ 0x4
  3423  0024                     	ds	1
  3424  0025                     ??_CC2500_InitSetREG:	
  3425  0025                     ??_CC2500_InitPATable:	
  3426                           ; 0 bytes @ 0x5
  3427                           
  3428  0025                     ??_setDimmerLights:	
  3429                           ; 0 bytes @ 0x5
  3430                           
  3431  0025                     ??_Switch_Initialization:	
  3432                           ; 0 bytes @ 0x5
  3433                           
  3434  0025                     ??___ftpack:	
  3435                           ; 0 bytes @ 0x5
  3436                           
  3437  0025                     ??_LED_Initialization:	
  3438                           ; 0 bytes @ 0x5
  3439                           
  3440  0025                     ??_LED_Main:	
  3441                           ; 0 bytes @ 0x5
  3442                           
  3443  0025                     CC2500_TxData@loop_e:	
  3444                           ; 0 bytes @ 0x5
  3445                           
  3446  0025                     CC2500_RxData@loop_f:	
  3447                           ; 1 bytes @ 0x5
  3448                           
  3449  0025                     setDimmerLights_ERROR@lights:	
  3450                           ; 1 bytes @ 0x5
  3451                           
  3452  0025                     Flash_Memory_Modify@i:	
  3453                           ; 1 bytes @ 0x5
  3454                           
  3455  0025                     getTemp_AD@channel:	
  3456                           ; 1 bytes @ 0x5
  3457                           
  3458  0025                     Sw_DimmerAdjFunc@sw:	
  3459                           ; 1 bytes @ 0x5
  3460                           
  3461  0025                     ___awdiv@counter:	
  3462                           ; 1 bytes @ 0x5
  3463                           
  3464  0025                     ___lwdiv@counter:	
  3465                           ; 1 bytes @ 0x5
  3466                           
  3467                           
  3468                           ; 1 bytes @ 0x5
  3469  0025                     	ds	1
  3470  0026                     ??_CC2500_PowerRST:	
  3471  0026                     ??_CC2500_FrequencyCabr:	
  3472                           ; 0 bytes @ 0x6
  3473                           
  3474  0026                     ??_Flash_Memory_Main:	
  3475                           ; 0 bytes @ 0x6
  3476                           
  3477  0026                     CC2500_InitSetREG@temp1:	
  3478                           ; 0 bytes @ 0x6
  3479                           
  3480  0026                     CC2500_InitPATable@temp:	
  3481                           ; 1 bytes @ 0x6
  3482                           
  3483  0026                     DelayTimejudge@i:	
  3484                           ; 1 bytes @ 0x6
  3485                           
  3486  0026                     setDimmerLights@lights:	
  3487                           ; 1 bytes @ 0x6
  3488                           
  3489  0026                     getLoad_AD@channel:	
  3490                           ; 1 bytes @ 0x6
  3491                           
  3492  0026                     ___awdiv@sign:	
  3493                           ; 1 bytes @ 0x6
  3494                           
  3495  0026                     ___lwdiv@quotient:	
  3496                           ; 1 bytes @ 0x6
  3497                           
  3498                           
  3499                           ; 2 bytes @ 0x6
  3500  0026                     	ds	1
  3501  0027                     CC2500_InitSetREG@temp2:	
  3502  0027                     CC2500_InitPATable@loop_d:	
  3503                           ; 1 bytes @ 0x7
  3504                           
  3505  0027                     DelayTimejudge@j:	
  3506                           ; 1 bytes @ 0x7
  3507                           
  3508  0027                     getLoad_AD@j:	
  3509                           ; 1 bytes @ 0x7
  3510                           
  3511  0027                     ___awdiv@quotient:	
  3512                           ; 1 bytes @ 0x7
  3513                           
  3514                           
  3515                           ; 2 bytes @ 0x7
  3516  0027                     	ds	1
  3517  0028                     ?___awtoft:	
  3518  0028                     CC2500_InitSetREG@loop_c:	
  3519                           ; 3 bytes @ 0x8
  3520                           
  3521  0028                     DelayTimejudge@k:	
  3522                           ; 1 bytes @ 0x8
  3523                           
  3524  0028                     getLoad_AD@i:	
  3525                           ; 1 bytes @ 0x8
  3526                           
  3527  0028                     ___awtoft@c:	
  3528                           ; 1 bytes @ 0x8
  3529                           
  3530                           
  3531                           ; 2 bytes @ 0x8
  3532  0028                     	ds	1
  3533  0029                     ?_setBuz:	
  3534  0029                     ??_CC2500_PowerOnInitial:	
  3535                           ; 0 bytes @ 0x9
  3536                           
  3537  0029                     DelayTimejudge@value:	
  3538                           ; 0 bytes @ 0x9
  3539                           
  3540  0029                     setBuz@time:	
  3541                           ; 1 bytes @ 0x9
  3542                           
  3543                           
  3544                           ; 2 bytes @ 0x9
  3545  0029                     	ds	1
  3546  002A                     ?_setDelayOff_GO:	
  3547  002A                     setDelayOff_GO@command:	
  3548                           ; 0 bytes @ 0xA
  3549                           
  3550                           
  3551                           ; 1 bytes @ 0xA
  3552  002A                     	ds	1
  3553  002B                     ??_setBuz:	
  3554  002B                     ??___awtoft:	
  3555                           ; 0 bytes @ 0xB
  3556                           
  3557  002B                     setDelayOff_GO@value:	
  3558                           ; 0 bytes @ 0xB
  3559                           
  3560                           
  3561                           ; 1 bytes @ 0xB
  3562  002B                     	ds	1
  3563  002C                     ??_setDelayOff_GO:	
  3564  002C                     setBuz@count:	
  3565                           ; 0 bytes @ 0xC
  3566                           
  3567                           
  3568                           ; 1 bytes @ 0xC
  3569  002C                     	ds	1
  3570  002D                     ??_my_MainTime:	
  3571  002D                     ??_setLog_Code:	
  3572                           ; 0 bytes @ 0xD
  3573                           
  3574  002D                     ??_DimmerLights_Exceptions:	
  3575                           ; 0 bytes @ 0xD
  3576                           
  3577  002D                     DimmerLights_Exceptions@status:	
  3578                           ; 0 bytes @ 0xD
  3579                           
  3580  002D                     ___awtoft@sign:	
  3581                           ; 1 bytes @ 0xD
  3582                           
  3583                           
  3584                           ; 1 bytes @ 0xD
  3585  002D                     	ds	1
  3586  002E                     ??_setLoad_Exceptions:	
  3587  002E                     ??_setOverTemp_Exceptions:	
  3588                           ; 0 bytes @ 0xE
  3589                           
  3590  002E                     ?___ftdiv:	
  3591                           ; 0 bytes @ 0xE
  3592                           
  3593  002E                     ?___ftmul:	
  3594                           ; 3 bytes @ 0xE
  3595                           
  3596  002E                     setDelayOff_GO@sw:	
  3597                           ; 3 bytes @ 0xE
  3598                           
  3599  002E                     ___ftdiv@f2:	
  3600                           ; 1 bytes @ 0xE
  3601                           
  3602  002E                     ___ftmul@f1:	
  3603                           ; 3 bytes @ 0xE
  3604                           
  3605                           
  3606                           ; 3 bytes @ 0xE
  3607  002E                     	ds	1
  3608  002F                     setLoad_Exceptions@i:	
  3609  002F                     setOverTemp_Exceptions@i:	
  3610                           ; 1 bytes @ 0xF
  3611                           
  3612                           
  3613                           ; 1 bytes @ 0xF
  3614  002F                     	ds	1
  3615  0030                     setLoad_Exceptions@command:	
  3616  0030                     setOverTemp_Exceptions@command:	
  3617                           ; 1 bytes @ 0x10
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0x10
  3621  0030                     	ds	1
  3622  0031                     ??_Load_Main:	
  3623  0031                     ??_setTemp_Main:	
  3624                           ; 0 bytes @ 0x11
  3625                           
  3626  0031                     ___ftdiv@f1:	
  3627                           ; 0 bytes @ 0x11
  3628                           
  3629  0031                     ___ftmul@f2:	
  3630                           ; 3 bytes @ 0x11
  3631                           
  3632                           
  3633                           ; 3 bytes @ 0x11
  3634  0031                     	ds	1
  3635  0032                     ??_Temp_Main:	
  3636                           
  3637                           ; 0 bytes @ 0x12
  3638  0032                     	ds	1
  3639  0033                     Load_Main@i:	
  3640                           
  3641                           ; 1 bytes @ 0x13
  3642  0033                     	ds	1
  3643  0034                     ??___ftdiv:	
  3644  0034                     ??___ftmul:	
  3645                           ; 0 bytes @ 0x14
  3646                           
  3647                           
  3648                           ; 0 bytes @ 0x14
  3649  0034                     	ds	4
  3650  0038                     ___ftdiv@cntr:	
  3651  0038                     ___ftmul@exp:	
  3652                           ; 1 bytes @ 0x18
  3653                           
  3654                           
  3655                           ; 1 bytes @ 0x18
  3656  0038                     	ds	1
  3657  0039                     ___ftdiv@f3:	
  3658  0039                     ___ftmul@f3_as_product:	
  3659                           ; 3 bytes @ 0x19
  3660                           
  3661                           
  3662                           ; 3 bytes @ 0x19
  3663  0039                     	ds	3
  3664  003C                     ___ftdiv@exp:	
  3665  003C                     ___ftmul@cntr:	
  3666                           ; 1 bytes @ 0x1C
  3667                           
  3668                           
  3669                           ; 1 bytes @ 0x1C
  3670  003C                     	ds	1
  3671  003D                     ___ftdiv@sign:	
  3672  003D                     ___ftmul@sign:	
  3673                           ; 1 bytes @ 0x1D
  3674                           
  3675                           
  3676                           ; 1 bytes @ 0x1D
  3677  003D                     	ds	1
  3678  003E                     ?___ftadd:	
  3679  003E                     ___ftadd@f1:	
  3680                           ; 3 bytes @ 0x1E
  3681                           
  3682                           
  3683                           ; 3 bytes @ 0x1E
  3684  003E                     	ds	3
  3685  0041                     ___ftadd@f2:	
  3686                           
  3687                           ; 3 bytes @ 0x21
  3688  0041                     	ds	3
  3689  0044                     ??___ftadd:	
  3690                           
  3691                           ; 0 bytes @ 0x24
  3692  0044                     	ds	4
  3693  0048                     ___ftadd@sign:	
  3694                           
  3695                           ; 1 bytes @ 0x28
  3696  0048                     	ds	1
  3697  0049                     ___ftadd@exp2:	
  3698                           
  3699                           ; 1 bytes @ 0x29
  3700  0049                     	ds	1
  3701  004A                     ___ftadd@exp1:	
  3702                           
  3703                           ; 1 bytes @ 0x2A
  3704  004A                     	ds	1
  3705  004B                     ?___fttol:	
  3706  004B                     ___fttol@f1:	
  3707                           ; 4 bytes @ 0x2B
  3708                           
  3709                           
  3710                           ; 3 bytes @ 0x2B
  3711  004B                     	ds	4
  3712  004F                     ??___fttol:	
  3713                           
  3714                           ; 0 bytes @ 0x2F
  3715  004F                     	ds	4
  3716  0053                     ___fttol@sign1:	
  3717                           
  3718                           ; 1 bytes @ 0x33
  3719  0053                     	ds	1
  3720  0054                     ___fttol@lval:	
  3721                           
  3722                           ; 4 bytes @ 0x34
  3723  0054                     	ds	4
  3724  0058                     ___fttol@exp1:	
  3725                           
  3726                           ; 1 bytes @ 0x38
  3727  0058                     	ds	1
  3728  0059                     ??_getPercentValue:	
  3729  0059                     ??_setPercentValue:	
  3730                           ; 0 bytes @ 0x39
  3731                           
  3732  0059                     setPercentValue@value:	
  3733                           ; 0 bytes @ 0x39
  3734                           
  3735                           
  3736                           ; 1 bytes @ 0x39
  3737  0059                     	ds	1
  3738  005A                     setPercentValue@i:	
  3739                           
  3740                           ; 3 bytes @ 0x3A
  3741  005A                     	ds	1
  3742  005B                     getPercentValue@value:	
  3743                           
  3744                           ; 1 bytes @ 0x3B
  3745  005B                     	ds	1
  3746  005C                     getPercentValue@i:	
  3747                           
  3748                           ; 3 bytes @ 0x3C
  3749  005C                     	ds	1
  3750  005D                     ?_setRF_DimmerLights:	
  3751  005D                     ??_Flash_Memory_Initialization:	
  3752                           ; 0 bytes @ 0x3D
  3753                           
  3754  005D                     setRF_DimmerLights@on:	
  3755                           ; 0 bytes @ 0x3D
  3756                           
  3757                           
  3758                           ; 1 bytes @ 0x3D
  3759  005D                     	ds	1
  3760  005E                     ??_setRF_DimmerLights:	
  3761  005E                     Flash_Memory_Initialization@i:	
  3762                           ; 0 bytes @ 0x3E
  3763                           
  3764                           
  3765                           ; 1 bytes @ 0x3E
  3766  005E                     	ds	1
  3767  005F                     ??_setDimmerLights_AdjRF:	
  3768                           
  3769                           ; 0 bytes @ 0x3F
  3770  005F                     	ds	1
  3771  0060                     setDimmerLights_AdjRF@lights:	
  3772  0060                     setRF_DimmerLights@status:	
  3773                           ; 1 bytes @ 0x40
  3774                           
  3775                           
  3776                           ; 1 bytes @ 0x40
  3777  0060                     	ds	1
  3778  0061                     ??_setRF_DimmerValue:	
  3779  0061                     setRF_DimmerLights@lights:	
  3780                           ; 0 bytes @ 0x41
  3781                           
  3782                           
  3783                           ; 1 bytes @ 0x41
  3784  0061                     	ds	1
  3785  0062                     ??_DlyOff_Main:	
  3786  0062                     ?_setDimmerLights_Adj:	
  3787                           ; 0 bytes @ 0x42
  3788                           
  3789  0062                     ??_setRFSW_Control:	
  3790                           ; 0 bytes @ 0x42
  3791                           
  3792  0062                     ??_Sw_DimmerOnFunc:	
  3793                           ; 0 bytes @ 0x42
  3794                           
  3795  0062                     ??_Sw_DimmerOffFunc:	
  3796                           ; 0 bytes @ 0x42
  3797                           
  3798  0062                     setDimmerLights_Adj@status:	
  3799                           ; 0 bytes @ 0x42
  3800                           
  3801  0062                     Sw_DimmerOnFunc@Idle:	
  3802                           ; 1 bytes @ 0x42
  3803                           
  3804                           
  3805                           ; 1 bytes @ 0x42
  3806  0062                     	ds	1
  3807  0063                     ??_setDimmerLights_Adj:	
  3808  0063                     setRFSW_Control@sw:	
  3809                           ; 0 bytes @ 0x43
  3810                           
  3811  0063                     setRF_DimmerValue@lights:	
  3812                           ; 1 bytes @ 0x43
  3813                           
  3814  0063                     Sw_DimmerOnFunc@sw:	
  3815                           ; 1 bytes @ 0x43
  3816                           
  3817                           
  3818                           ; 1 bytes @ 0x43
  3819  0063                     	ds	1
  3820  0064                     ??_setRFSW_AdjControl:	
  3821  0064                     DlyOff_Main@sw:	
  3822                           ; 0 bytes @ 0x44
  3823                           
  3824  0064                     setDimmerLights_Adj@lights:	
  3825                           ; 1 bytes @ 0x44
  3826                           
  3827  0064                     Sw_DimmerOffFunc@sw:	
  3828                           ; 1 bytes @ 0x44
  3829                           
  3830                           
  3831                           ; 1 bytes @ 0x44
  3832  0064                     	ds	1
  3833  0065                     ??_setDimmerLights_Main:	
  3834  0065                     ??_setSw_Main:	
  3835                           ; 0 bytes @ 0x45
  3836                           
  3837  0065                     ??_DelayOff_Main:	
  3838                           ; 0 bytes @ 0x45
  3839                           
  3840  0065                     setDimmerLights_Main@clear:	
  3841                           ; 0 bytes @ 0x45
  3842                           
  3843                           
  3844                           ; 1 bytes @ 0x45
  3845  0065                     	ds	1
  3846  0066                     setDimmerLights_Main@lights:	
  3847  0066                     setRFSW_AdjControl@sw:	
  3848                           ; 1 bytes @ 0x46
  3849                           
  3850                           
  3851                           ; 1 bytes @ 0x46
  3852  0066                     	ds	1
  3853  0067                     ??_setRF_Main:	
  3854  0067                     ??_getRxData:	
  3855                           ; 0 bytes @ 0x47
  3856                           
  3857  0067                     ??_setControl_Lights_Table:	
  3858                           ; 0 bytes @ 0x47
  3859                           
  3860  0067                     ??_DimmerLights_Main:	
  3861                           ; 0 bytes @ 0x47
  3862                           
  3863  0067                     _setSw_Main$7023:	
  3864                           ; 0 bytes @ 0x47
  3865                           
  3866                           
  3867                           ; 1 bytes @ 0x47
  3868  0067                     	ds	1
  3869  0068                     _setSw_Main$7024:	
  3870                           
  3871                           ; 1 bytes @ 0x48
  3872  0068                     	ds	1
  3873  0069                     setSw_Main@sw:	
  3874                           
  3875                           ; 1 bytes @ 0x49
  3876  0069                     	ds	1
  3877  006A                     ??_Switch_Main:	
  3878                           
  3879                           ; 0 bytes @ 0x4A
  3880  006A                     	ds	1
  3881  006B                     _setRF_Main$5900:	
  3882                           
  3883                           ; 1 bytes @ 0x4B
  3884  006B                     	ds	1
  3885  006C                     ??_RF_Main:	
  3886  006C                     ??_main:	
  3887                           ; 0 bytes @ 0x4C
  3888                           
  3889                           
  3890                           	psect	maintext
  3891  1572                     __pmaintext:	
  3892                           ; 0 bytes @ 0x4C
  3893 ;;
  3894 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3895 ;;
  3896 ;; *************** function _main *****************
  3897 ;; Defined at:
  3898 ;;		line 7 in file "../src/Main_B1.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;  argc            2    0[BANK4 ] int 
  3901 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;		None
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  2    0[BANK4 ] int 
  3906 ;; Registers used:
  3907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3908 ;; Tracked objects:
  3909 ;;		On entry : 17F/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3913 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  3914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3916 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  3917 ;;Total ram usage:        4 bytes
  3918 ;; Hardware stack levels required when called:   15
  3919 ;; This function calls:
  3920 ;;		_Buzzer_Initialization
  3921 ;;		_Buzzer_Main
  3922 ;;		_CC2500_PowerOnInitial
  3923 ;;		_DelayOff_Initialization
  3924 ;;		_DelayOff_Main
  3925 ;;		_DimmerLights_Initialization
  3926 ;;		_DimmerLights_Main
  3927 ;;		_Flash_Memory_Initialization
  3928 ;;		_Flash_Memory_Main
  3929 ;;		_LED_Initialization
  3930 ;;		_LED_Main
  3931 ;;		_Load_Initialization
  3932 ;;		_Load_Main
  3933 ;;		_Mcu_Initialization
  3934 ;;		_RF_Initialization
  3935 ;;		_RF_Main
  3936 ;;		_Switch_Initialization
  3937 ;;		_Switch_Main
  3938 ;;		_Temp_Initialization
  3939 ;;		_Temp_Main
  3940 ;;		_WDT_Main
  3941 ;;		_getLoad_AD
  3942 ;;		_getTemp_AD
  3943 ;;		_myMain_Initialization
  3944 ;;		_my_MainTime
  3945 ;; This function is called by:
  3946 ;;		Startup code after reset
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _main
  3952  1572                     _main:	
  3953                           
  3954                           ;Main_B1.c: 8: myMain_Initialization();
  3955                           
  3956                           ;incstack = 0
  3957                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3958  1572  319B  232F  3195   	fcall	_myMain_Initialization
  3959                           
  3960                           ;Main_B1.c: 9: Mcu_Initialization();
  3961  1575  319B  23D2  3195   	fcall	_Mcu_Initialization
  3962                           
  3963                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3964  1578  3186  26AB  3195   	fcall	_Flash_Memory_Initialization
  3965                           
  3966                           ;Main_B1.c: 11: LED_Initialization();
  3967  157B  319A  22A7  3195   	fcall	_LED_Initialization
  3968                           
  3969                           ;Main_B1.c: 12: Buzzer_Initialization();
  3970  157E  3199  21C3  3195   	fcall	_Buzzer_Initialization
  3971                           
  3972                           ;Main_B1.c: 14: ;;
  3973                           ;Main_B1.c: 15: Temp_Initialization();
  3974  1581  3199  21CF  3195   	fcall	_Temp_Initialization
  3975                           
  3976                           ;Main_B1.c: 16: Load_Initialization();
  3977  1584  3199  21E7  3195   	fcall	_Load_Initialization
  3978                           
  3979                           ;Main_B1.c: 17: ;;
  3980                           ;Main_B1.c: 18: DelayOff_Initialization();
  3981  1587  319A  220D  3195   	fcall	_DelayOff_Initialization
  3982                           
  3983                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3984  158A  319C  24C3  3195   	fcall	_DimmerLights_Initialization
  3985                           
  3986                           ;Main_B1.c: 21: ;;
  3987                           ;Main_B1.c: 22: ;;
  3988                           ;Main_B1.c: 23: ;;
  3989                           ;Main_B1.c: 24: Switch_Initialization();
  3990  158D  319A  22D9  3195   	fcall	_Switch_Initialization
  3991                           
  3992                           ;Main_B1.c: 25: RF_Initialization();
  3993  1590  3199  21C6  3195   	fcall	_RF_Initialization
  3994                           
  3995                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3996  1593  319C  246C  3195   	fcall	_CC2500_PowerOnInitial
  3997  1596                     l10600:	
  3998                           ;Main_B1.c: 27: ;;
  3999                           ;Main_B1.c: 30: while (1) {
  4000                           
  4001                           
  4002                           ;Main_B1.c: 32: if (myMain.PowerON) {
  4003  1596  0021               	movlb	1	; select bank1
  4004  1597  1C20               	btfss	_myMain^(0+128),0
  4005  1598  2DA1               	goto	l10604
  4006                           
  4007                           ;Main_B1.c: 34: ;;
  4008                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4009  1599  3005               	movlw	5
  4010  159A  318B  2346  3195   	fcall	_getLoad_AD
  4011                           
  4012                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4013  159D  3009               	movlw	9
  4014  159E  3191  2168  3195   	fcall	_getTemp_AD
  4015  15A1                     l10604:	
  4016                           ;Main_B1.c: 46: ;;
  4017                           
  4018                           
  4019                           ;Main_B1.c: 61: }
  4020                           ;Main_B1.c: 64: if (myMain.T0_Timerout) {
  4021  15A1  0021               	movlb	1	; select bank1
  4022  15A2  1CA0               	btfss	_myMain^(0+128),1
  4023  15A3  2D96               	goto	l10600
  4024                           
  4025                           ;Main_B1.c: 65: myMain.T0_Timerout = 0;
  4026  15A4  10A0               	bcf	_myMain^(0+128),1
  4027                           
  4028                           ;Main_B1.c: 66: my_MainTime();
  4029  15A5  3194  2433  3195   	fcall	_my_MainTime
  4030                           
  4031                           ;Main_B1.c: 67: WDT_Main();
  4032  15A8  319B  23F6  3195   	fcall	_WDT_Main
  4033                           
  4034                           ;Main_B1.c: 68: ;;
  4035                           ;Main_B1.c: 69: ;;
  4036                           ;Main_B1.c: 70: if (myMain.PowerON) {
  4037  15AB  0021               	movlb	1	; select bank1
  4038  15AC  1C20               	btfss	_myMain^(0+128),0
  4039  15AD  2D96               	goto	l10600
  4040                           
  4041                           ;Main_B1.c: 71: Flash_Memory_Main();
  4042  15AE  319E  2625  3195   	fcall	_Flash_Memory_Main
  4043                           
  4044                           ;Main_B1.c: 73: LED_Main();
  4045  15B1  319A  22B3  3195   	fcall	_LED_Main
  4046                           
  4047                           ;Main_B1.c: 74: Buzzer_Main();
  4048  15B4  3193  239F  3195   	fcall	_Buzzer_Main
  4049                           
  4050                           ;Main_B1.c: 76: ;;
  4051                           ;Main_B1.c: 77: Temp_Main();
  4052  15B7  3187  27FD  3195   	fcall	_Temp_Main
  4053                           
  4054                           ;Main_B1.c: 78: Load_Main();
  4055  15BA  3182  220A  3195   	fcall	_Load_Main
  4056                           
  4057                           ;Main_B1.c: 79: ;;
  4058                           ;Main_B1.c: 81: ;;
  4059                           ;Main_B1.c: 82: DimmerLights_Main();
  4060  15BD  319A  2279  3195   	fcall	_DimmerLights_Main
  4061                           
  4062                           ;Main_B1.c: 83: Switch_Main();
  4063  15C0  319A  2245  3195   	fcall	_Switch_Main
  4064                           
  4065                           ;Main_B1.c: 84: ;;
  4066                           ;Main_B1.c: 85: ;;
  4067                           ;Main_B1.c: 87: RF_Main();
  4068  15C3  3199  21C9  3195   	fcall	_RF_Main
  4069                           
  4070                           ;Main_B1.c: 88: DelayOff_Main();
  4071  15C6  319A  2215  3195   	fcall	_DelayOff_Main
  4072                           
  4073                           ;Main_B1.c: 89: ;;
  4074  15C9  2D96               	goto	l10600
  4075  15CA                     __end_of_main:	
  4076                           ;Main_B1.c: 90: }
  4077                           ;Main_B1.c: 91: }
  4078                           ;Main_B1.c: 109: }
  4079                           ;Main_B1.c: 110: return (0);
  4080                           ;	Return value of _main is never used
  4081                           
  4082                           
  4083                           	psect	text1
  4084  1433                     __ptext1:	
  4085 ;; *************** function _my_MainTime *****************
  4086 ;; Defined at:
  4087 ;;		line 127 in file "../src/Main_B1.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;		None
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;		None
  4092 ;; Return value:  Size  Location     Type
  4093 ;;		None               void
  4094 ;; Registers used:
  4095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4096 ;; Tracked objects:
  4097 ;;		On entry : 0/0
  4098 ;;		On exit  : 0/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4105 ;;Total ram usage:        0 bytes
  4106 ;; Hardware stack levels used:    1
  4107 ;; Hardware stack levels required when called:    7
  4108 ;; This function calls:
  4109 ;;		_setBuz
  4110 ;;		_setLoad_Enable
  4111 ;;		_setRF_Enable
  4112 ;;		_setSw_Enable
  4113 ;;		_setTemp_Enable
  4114 ;; This function is called by:
  4115 ;;		_main
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           
  4120                           ;psect for function _my_MainTime
  4121  1433                     _my_MainTime:	
  4122                           
  4123                           ;Main_B1.c: 129: if (myMain.PowerON == 0) {
  4124                           
  4125                           ;incstack = 0
  4126                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4127  1433  0021               	movlb	1	; select bank1
  4128  1434  1820               	btfsc	_myMain^(0+128),0
  4129  1435  2C64               	goto	l10420
  4130                           
  4131                           ;Main_B1.c: 130: myMain.PowerCount++;
  4132  1436  3001               	movlw	1
  4133  1437  07A1               	addwf	(_myMain^(0+128)+1),f
  4134  1438  3000               	movlw	0
  4135  1439  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4136                           
  4137                           ;Main_B1.c: 131: if (myMain.PowerCount == 150)
  4138  143A  3001               	movlw	1
  4139  143B  3EA0               	addlw	_myMain& (0+255)
  4140  143C  0086               	movwf	6
  4141  143D  0187               	clrf	7
  4142  143E  3F40               	moviw [0]fsr1
  4143  143F  3A96               	xorlw	150
  4144  1440  1D03               	skipz
  4145  1441  2C44               	goto	u11275
  4146  1442  3F41               	moviw [1]fsr1
  4147  1443  3A00               	xorlw	0
  4148  1444                     u11275:	
  4149  1444  1D03               	skipz
  4150  1445  0008               	return
  4151                           
  4152                           ;Main_B1.c: 132: {
  4153                           ;Main_B1.c: 133: myMain.PowerCount = 0;
  4154  1446  01A1               	clrf	(_myMain^(0+128)+1)
  4155  1447  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4156                           
  4157                           ;Main_B1.c: 134: myMain.PowerON = 1;
  4158  1448  1420               	bsf	_myMain^(0+128),0
  4159                           
  4160                           ;Main_B1.c: 137: setTemp_Enable(1);
  4161  1449  3001               	movlw	1
  4162  144A  319A  2255  3194   	fcall	_setTemp_Enable
  4163                           
  4164                           ;Main_B1.c: 141: setLoad_Enable(1);
  4165  144D  3001               	movlw	1
  4166  144E  319A  2266  3194   	fcall	_setLoad_Enable
  4167                           
  4168                           ;Main_B1.c: 147: setBuz(3, 50);
  4169  1451  3032               	movlw	50
  4170  1452  0020               	movlb	0	; select bank0
  4171  1453  00A9               	movwf	setBuz@time
  4172  1454  3000               	movlw	0
  4173  1455  00AA               	movwf	setBuz@time+1
  4174  1456  3003               	movlw	3
  4175  1457  3195  25CA  3194   	fcall	_setBuz
  4176                           
  4177                           ;Main_B1.c: 148: myMain.SelfTest = 1;
  4178  145A  0021               	movlb	1	; select bank1
  4179  145B  1720               	bsf	_myMain^(0+128),6
  4180                           
  4181                           ;Main_B1.c: 150: setSw_Enable(1);
  4182  145C  3001               	movlw	1
  4183  145D  319D  2573  3194   	fcall	_setSw_Enable
  4184                           
  4185                           ;Main_B1.c: 153: setRF_Enable(1);
  4186  1460  3001               	movlw	1
  4187  1461  319A  22F4         	fcall	_setRF_Enable
  4188                           
  4189                           ;Main_B1.c: 157: }
  4190                           ;Main_B1.c: 158: } else {
  4191  1463  0008               	return
  4192  1464                     l10420:	
  4193                           
  4194                           ;Main_B1.c: 166: myMain.Count1++;
  4195  1464  3001               	movlw	1
  4196  1465  0021               	movlb	1	; select bank1
  4197  1466  07A5               	addwf	(_myMain^(0+128)+5),f
  4198  1467  3000               	movlw	0
  4199  1468  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4200                           
  4201                           ;Main_B1.c: 167: if (myMain.Count1 == 100)
  4202  1469  3005               	movlw	5
  4203  146A  3EA0               	addlw	_myMain& (0+255)
  4204  146B  0086               	movwf	6
  4205  146C  0187               	clrf	7
  4206  146D  3F40               	moviw [0]fsr1
  4207  146E  3A64               	xorlw	100
  4208  146F  1D03               	skipz
  4209  1470  2C73               	goto	u11285
  4210  1471  3F41               	moviw [1]fsr1
  4211  1472  3A00               	xorlw	0
  4212  1473                     u11285:	
  4213  1473  1D03               	skipz
  4214  1474  0008               	return
  4215                           
  4216                           ;Main_B1.c: 168: {
  4217                           ;Main_B1.c: 169: myMain.Count1 = 0;
  4218  1475  01A5               	clrf	(_myMain^(0+128)+5)
  4219  1476  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4220                           
  4221                           ;Main_B1.c: 182: if (myMain.Flag) {
  4222  1477  1DA0               	btfss	_myMain^(0+128),3
  4223  1478  2C7B               	goto	l1554
  4224                           
  4225                           ;Main_B1.c: 183: myMain.Flag = 0;
  4226  1479  11A0               	bcf	_myMain^(0+128),3
  4227                           
  4228                           ;Main_B1.c: 192: } else {
  4229  147A  0008               	return
  4230  147B                     l1554:	
  4231                           
  4232                           ;Main_B1.c: 193: myMain.Flag = 1;
  4233  147B  15A0               	bsf	_myMain^(0+128),3
  4234  147C  0008               	return
  4235  147D                     __end_of_my_MainTime:	
  4236                           
  4237                           	psect	text2
  4238  1A55                     __ptext2:	
  4239 ;; *************** function _setTemp_Enable *****************
  4240 ;; Defined at:
  4241 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;  command         1    wreg     unsigned char 
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;  command         1    0[BANK0 ] unsigned char 
  4246 ;; Return value:  Size  Location     Type
  4247 ;;		None               void
  4248 ;; Registers used:
  4249 ;;		wreg
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4258 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;Total ram usage:        1 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; Hardware stack levels required when called:    5
  4262 ;; This function calls:
  4263 ;;		Nothing
  4264 ;; This function is called by:
  4265 ;;		_my_MainTime
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           
  4270                           ;psect for function _setTemp_Enable
  4271  1A55                     _setTemp_Enable:	
  4272                           
  4273                           ;incstack = 0
  4274                           ; Regs used in _setTemp_Enable: [wreg]
  4275                           ;setTemp_Enable@command stored from wreg
  4276  1A55  0020               	movlb	0	; select bank0
  4277  1A56  00A0               	movwf	setTemp_Enable@command
  4278                           
  4279                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4280  1A57  0820               	movf	setTemp_Enable@command,w
  4281  1A58  0021               	movlb	1	; select bank1
  4282  1A59  1057               	bcf	_Temp1^(0+128),0
  4283  1A5A  1D03               	skipz
  4284  1A5B  1457               	bsf	_Temp1^(0+128),0
  4285  1A5C  0008               	return
  4286  1A5D                     __end_of_setTemp_Enable:	
  4287                           
  4288                           	psect	text3
  4289  1A66                     __ptext3:	
  4290 ;; *************** function _setLoad_Enable *****************
  4291 ;; Defined at:
  4292 ;;		line 258 in file "../src/OverLoad_B1.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;  command         1    wreg     unsigned char 
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;  command         1    0[BANK0 ] unsigned char 
  4297 ;; Return value:  Size  Location     Type
  4298 ;;		None               void
  4299 ;; Registers used:
  4300 ;;		wreg
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;Total ram usage:        1 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    5
  4313 ;; This function calls:
  4314 ;;		Nothing
  4315 ;; This function is called by:
  4316 ;;		_my_MainTime
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           
  4321                           ;psect for function _setLoad_Enable
  4322  1A66                     _setLoad_Enable:	
  4323                           
  4324                           ;incstack = 0
  4325                           ; Regs used in _setLoad_Enable: [wreg]
  4326                           ;setLoad_Enable@command stored from wreg
  4327  1A66  0020               	movlb	0	; select bank0
  4328  1A67  00A0               	movwf	setLoad_Enable@command
  4329                           
  4330                           ;OverLoad_B1.c: 259: Load1.Enable = command;
  4331  1A68  0820               	movf	setLoad_Enable@command,w
  4332  1A69  0023               	movlb	3	; select bank3
  4333  1A6A  1020               	bcf	_Load1^(0+384),0
  4334  1A6B  1D03               	skipz
  4335  1A6C  1420               	bsf	_Load1^(0+384),0
  4336                           
  4337                           ;OverLoad_B1.c: 260: Load1.GO = 0;
  4338  1A6D  10A0               	bcf	_Load1^(0+384),1
  4339  1A6E  0008               	return
  4340  1A6F                     __end_of_setLoad_Enable:	
  4341                           
  4342                           	psect	text4
  4343  1B2F                     __ptext4:	
  4344 ;; *************** function _myMain_Initialization *****************
  4345 ;; Defined at:
  4346 ;;		line 115 in file "../src/Main_B1.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;		None
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;		None
  4351 ;; Return value:  Size  Location     Type
  4352 ;;		None               void
  4353 ;; Registers used:
  4354 ;;		wreg, fsr1l, fsr1h
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4362 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4363 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4364 ;;Total ram usage:        1 bytes
  4365 ;; Hardware stack levels used:    1
  4366 ;; Hardware stack levels required when called:    5
  4367 ;; This function calls:
  4368 ;;		Nothing
  4369 ;; This function is called by:
  4370 ;;		_main
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           
  4375                           ;psect for function _myMain_Initialization
  4376  1B2F                     _myMain_Initialization:	
  4377                           
  4378                           ;Main_B1.c: 117: product = &_product;
  4379                           
  4380                           ;incstack = 0
  4381                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4382  1B2F  3045               	movlw	__product& (0+255)
  4383  1B30  0020               	movlb	0	; select bank0
  4384  1B31  00A0               	movwf	??_myMain_Initialization
  4385  1B32  0820               	movf	??_myMain_Initialization,w
  4386  1B33  00EC               	movwf	_product
  4387                           
  4388                           ;Main_B1.c: 118: product->Data[20] = 210;
  4389  1B34  30D2               	movlw	210
  4390  1B35  00A0               	movwf	??_myMain_Initialization
  4391  1B36  086C               	movf	_product,w
  4392  1B37  3E14               	addlw	20
  4393  1B38  0086               	movwf	6
  4394  1B39  3002               	movlw	2	; select bank4/5
  4395  1B3A  0087               	movwf	7
  4396  1B3B  0820               	movf	??_myMain_Initialization,w
  4397  1B3C  0081               	movwf	1
  4398  1B3D  0008               	return
  4399  1B3E                     __end_of_myMain_Initialization:	
  4400                           
  4401                           	psect	text5
  4402  1168                     __ptext5:	
  4403 ;; *************** function _getTemp_AD *****************
  4404 ;; Defined at:
  4405 ;;		line 33 in file "../src/OverTemperature_B1.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;  channel         1    wreg     unsigned char 
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;  channel         1    5[BANK0 ] unsigned char 
  4410 ;; Return value:  Size  Location     Type
  4411 ;;		None               void
  4412 ;; Registers used:
  4413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4422 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4423 ;;Total ram usage:        2 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:    7
  4426 ;; This function calls:
  4427 ;;		_getAD
  4428 ;; This function is called by:
  4429 ;;		_main
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           
  4434                           ;psect for function _getTemp_AD
  4435  1168                     _getTemp_AD:	
  4436                           
  4437                           ;incstack = 0
  4438                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4439                           ;getTemp_AD@channel stored from wreg
  4440  1168  0020               	movlb	0	; select bank0
  4441  1169  00A5               	movwf	getTemp_AD@channel
  4442                           
  4443                           ;OverTemperature_B1.c: 34: if (Temp1.ADtoGO == 1) {
  4444  116A  0021               	movlb	1	; select bank1
  4445  116B  1D57               	btfss	_Temp1^(0+128),2
  4446  116C  0008               	return
  4447                           
  4448                           ;OverTemperature_B1.c: 35: Temp1.ADRES = getAD(channel, 0xf0);
  4449  116D  30F0               	movlw	240
  4450  116E  0020               	movlb	0	; select bank0
  4451  116F  00A4               	movwf	??_getTemp_AD
  4452  1170  0824               	movf	??_getTemp_AD,w
  4453  1171  00A0               	movwf	getAD@adcon1
  4454  1172  0825               	movf	getTemp_AD@channel,w
  4455  1173  319E  2644  3191   	fcall	_getAD
  4456  1176  0020               	movlb	0	; select bank0
  4457  1177  0821               	movf	?_getAD+1,w
  4458  1178  0021               	movlb	1	; select bank1
  4459  1179  01E4               	clrf	((_Temp1+1)^(0+128)+12)
  4460  117A  07E4               	addwf	((_Temp1+1)^(0+128)+12),f
  4461  117B  0020               	movlb	0	; select bank0
  4462  117C  0820               	movf	?_getAD,w
  4463  117D  0021               	movlb	1	; select bank1
  4464  117E  01E3               	clrf	(_Temp1^(0+128)+12)
  4465  117F  07E3               	addwf	(_Temp1^(0+128)+12),f
  4466                           
  4467                           ;OverTemperature_B1.c: 36: if (Temp1.ADH[0] < Temp1.ADRES) {
  4468  1180  0864               	movf	((_Temp1+1)^(0+128)+12),w
  4469  1181  0260               	subwf	((_Temp1+1)^(0+128)+8),w
  4470  1182  1D03               	skipz
  4471  1183  2986               	goto	u11245
  4472  1184  0863               	movf	(_Temp1^(0+128)+12),w
  4473  1185  025F               	subwf	(_Temp1^(0+128)+8),w
  4474  1186                     u11245:	
  4475  1186  1803               	skipnc
  4476  1187  298F               	goto	l10394
  4477                           
  4478                           ;OverTemperature_B1.c: 37: Temp1.ADH[0] = Temp1.ADRES;
  4479  1188  0864               	movf	((_Temp1+1)^(0+128)+12),w
  4480  1189  01E0               	clrf	((_Temp1+1)^(0+128)+8)
  4481  118A  07E0               	addwf	((_Temp1+1)^(0+128)+8),f
  4482  118B  0863               	movf	(_Temp1^(0+128)+12),w
  4483  118C  01DF               	clrf	(_Temp1^(0+128)+8)
  4484  118D  07DF               	addwf	(_Temp1^(0+128)+8),f
  4485                           
  4486                           ;OverTemperature_B1.c: 38: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4487  118E  0008               	return
  4488  118F                     l10394:	
  4489  118F  0864               	movf	((_Temp1+1)^(0+128)+12),w
  4490  1190  0262               	subwf	((_Temp1+1)^(0+128)+10),w
  4491  1191  1D03               	skipz
  4492  1192  2995               	goto	u11255
  4493  1193  0863               	movf	(_Temp1^(0+128)+12),w
  4494  1194  0261               	subwf	(_Temp1^(0+128)+10),w
  4495  1195                     u11255:	
  4496  1195  1803               	skipnc
  4497  1196  0008               	return
  4498                           
  4499                           ;OverTemperature_B1.c: 39: Temp1.ADH[1] = Temp1.ADRES;
  4500  1197  0864               	movf	((_Temp1+1)^(0+128)+12),w
  4501  1198  01E2               	clrf	((_Temp1+1)^(0+128)+10)
  4502  1199  07E2               	addwf	((_Temp1+1)^(0+128)+10),f
  4503  119A  0863               	movf	(_Temp1^(0+128)+12),w
  4504  119B  01E1               	clrf	(_Temp1^(0+128)+10)
  4505  119C  07E1               	addwf	(_Temp1^(0+128)+10),f
  4506  119D  0008               	return
  4507  119E                     __end_of_getTemp_AD:	
  4508                           
  4509                           	psect	text6
  4510  0B46                     __ptext6:	
  4511 ;; *************** function _getLoad_AD *****************
  4512 ;; Defined at:
  4513 ;;		line 15 in file "../src/OverLoad_B1.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  channel         1    wreg     unsigned char 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;  channel         1    6[BANK0 ] unsigned char 
  4518 ;;  i               1    8[BANK0 ] unsigned char 
  4519 ;;  j               1    7[BANK0 ] unsigned char 
  4520 ;; Return value:  Size  Location     Type
  4521 ;;		None               void
  4522 ;; Registers used:
  4523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4524 ;; Tracked objects:
  4525 ;;		On entry : 0/0
  4526 ;;		On exit  : 0/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4530 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4531 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;Total ram usage:        5 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:    7
  4536 ;; This function calls:
  4537 ;;		_getAD
  4538 ;; This function is called by:
  4539 ;;		_main
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           
  4544                           ;psect for function _getLoad_AD
  4545  0B46                     _getLoad_AD:	
  4546                           
  4547                           ;incstack = 0
  4548                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4549                           ;getLoad_AD@channel stored from wreg
  4550  0B46  0020               	movlb	0	; select bank0
  4551  0B47  00A6               	movwf	getLoad_AD@channel
  4552                           
  4553                           ;OverLoad_B1.c: 16: char i = 0, j = 0;
  4554  0B48  01A8               	clrf	getLoad_AD@i
  4555  0B49  01A7               	clrf	getLoad_AD@j
  4556                           
  4557                           ;OverLoad_B1.c: 18: if (Load1.ADtoGO == 1) {
  4558  0B4A  0023               	movlb	3	; select bank3
  4559  0B4B  1E20               	btfss	_Load1^(0+384),4
  4560  0B4C  0008               	return
  4561                           
  4562                           ;OverLoad_B1.c: 19: Load1.ADRES = getAD(channel, 0xc0);
  4563  0B4D  30C0               	movlw	192
  4564  0B4E  0020               	movlb	0	; select bank0
  4565  0B4F  00A4               	movwf	??_getLoad_AD
  4566  0B50  0824               	movf	??_getLoad_AD,w
  4567  0B51  00A0               	movwf	getAD@adcon1
  4568  0B52  0826               	movf	getLoad_AD@channel,w
  4569  0B53  319E  2644  318B   	fcall	_getAD
  4570  0B56  0020               	movlb	0	; select bank0
  4571  0B57  0821               	movf	?_getAD+1,w
  4572  0B58  0023               	movlb	3	; select bank3
  4573  0B59  01D3               	clrf	((_Load1+1)^(0+384)+50)
  4574  0B5A  07D3               	addwf	((_Load1+1)^(0+384)+50),f
  4575  0B5B  0020               	movlb	0	; select bank0
  4576  0B5C  0820               	movf	?_getAD,w
  4577  0B5D  0023               	movlb	3	; select bank3
  4578  0B5E  01D2               	clrf	(_Load1^(0+384)+50)
  4579  0B5F  07D2               	addwf	(_Load1^(0+384)+50),f
  4580                           
  4581                           ;OverLoad_B1.c: 20: for (i = 0; i < 5; i++) {
  4582  0B60  0020               	movlb	0	; select bank0
  4583  0B61  01A8               	clrf	getLoad_AD@i
  4584  0B62  3005               	movlw	5
  4585  0B63  0228               	subwf	getLoad_AD@i,w
  4586  0B64  1803               	btfsc	3,0
  4587  0B65  2B91               	goto	l10370
  4588  0B66                     l10360:	
  4589                           
  4590                           ;OverLoad_B1.c: 21: if (Load1.AH[i] < Load1.ADRES) {
  4591  0B66  3528               	lslf	getLoad_AD@i,w
  4592  0B67  3EA8               	addlw	(_Load1+8)& (0+255)
  4593  0B68  0086               	movwf	6
  4594  0B69  3001               	movlw	1	; select bank3/4
  4595  0B6A  0087               	movwf	7
  4596  0B6B  3F40               	moviw [0]fsr1
  4597  0B6C  00A4               	movwf	??_getLoad_AD
  4598  0B6D  3F41               	moviw [1]fsr1
  4599  0B6E  00A5               	movwf	??_getLoad_AD+1
  4600  0B6F  0023               	movlb	3	; select bank3
  4601  0B70  0853               	movf	((_Load1+1)^(0+384)+50),w
  4602  0B71  0020               	movlb	0	; select bank0
  4603  0B72  0225               	subwf	??_getLoad_AD+1,w
  4604  0B73  1D03               	skipz
  4605  0B74  2B79               	goto	u11175
  4606  0B75  0023               	movlb	3	; select bank3
  4607  0B76  0852               	movf	(_Load1^(0+384)+50),w
  4608  0B77  0020               	movlb	0	; select bank0
  4609  0B78  0224               	subwf	??_getLoad_AD,w
  4610  0B79                     u11175:	
  4611  0B79  1803               	skipnc
  4612  0B7A  2B89               	goto	l10366
  4613                           
  4614                           ;OverLoad_B1.c: 22: Load1.AH[i] = Load1.ADRES;
  4615  0B7B  3528               	lslf	getLoad_AD@i,w
  4616  0B7C  3EA8               	addlw	(_Load1+8)& (0+255)
  4617  0B7D  0086               	movwf	6
  4618  0B7E  3001               	movlw	1	; select bank3/4
  4619  0B7F  0087               	movwf	7
  4620  0B80  0023               	movlb	3	; select bank3
  4621  0B81  0852               	movf	(_Load1^(0+384)+50),w
  4622  0B82  3FC0               	movwi [0]fsr1
  4623  0B83  0853               	movf	((_Load1+1)^(0+384)+50),w
  4624  0B84  3FC1               	movwi [1]fsr1
  4625                           
  4626                           ;OverLoad_B1.c: 23: j = 1;
  4627  0B85  0020               	movlb	0	; select bank0
  4628  0B86  01A7               	clrf	getLoad_AD@j
  4629  0B87  0AA7               	incf	getLoad_AD@j,f
  4630                           
  4631                           ;OverLoad_B1.c: 24: break;
  4632  0B88  2B91               	goto	l10370
  4633  0B89                     l10366:	
  4634  0B89  3001               	movlw	1
  4635  0B8A  00A4               	movwf	??_getLoad_AD
  4636  0B8B  0824               	movf	??_getLoad_AD,w
  4637  0B8C  07A8               	addwf	getLoad_AD@i,f
  4638  0B8D  3005               	movlw	5
  4639  0B8E  0228               	subwf	getLoad_AD@i,w
  4640  0B8F  1C03               	skipc
  4641  0B90  2B66               	goto	l10360
  4642  0B91                     l10370:	
  4643                           
  4644                           ;OverLoad_B1.c: 25: }
  4645                           ;OverLoad_B1.c: 26: }
  4646                           ;OverLoad_B1.c: 27: if (j == 0) {
  4647  0B91  08A7               	movf	getLoad_AD@j,f
  4648  0B92  1D03               	skipz
  4649  0B93  0008               	return
  4650                           
  4651                           ;OverLoad_B1.c: 28: for (i = 0; i < 5; i++) {
  4652  0B94  01A8               	clrf	getLoad_AD@i
  4653  0B95                     L1:	
  4654  0B95  3005               	movlw	5
  4655  0B96  0228               	subwf	getLoad_AD@i,w
  4656  0B97  1803               	btfsc	3,0
  4657  0B98  0008               	return
  4658                           
  4659                           ;OverLoad_B1.c: 29: if (Load1.AL[i] > Load1.ADRES) {
  4660  0B99  3528               	lslf	getLoad_AD@i,w
  4661  0B9A  3EBA               	addlw	(_Load1+26)& (0+255)
  4662  0B9B  0086               	movwf	6
  4663  0B9C  3001               	movlw	1	; select bank3/4
  4664  0B9D  0087               	movwf	7
  4665  0B9E  3F40               	moviw [0]fsr1
  4666  0B9F  00A4               	movwf	??_getLoad_AD
  4667  0BA0  3F41               	moviw [1]fsr1
  4668  0BA1  00A5               	movwf	??_getLoad_AD+1
  4669  0BA2  0825               	movf	??_getLoad_AD+1,w
  4670  0BA3  0023               	movlb	3	; select bank3
  4671  0BA4  0253               	subwf	((_Load1+1)^(0+384)+50),w
  4672  0BA5  1D03               	skipz
  4673  0BA6  2BAB               	goto	u11215
  4674  0BA7  0020               	movlb	0	; select bank0
  4675  0BA8  0824               	movf	??_getLoad_AD,w
  4676  0BA9  0023               	movlb	3	; select bank3
  4677  0BAA  0252               	subwf	(_Load1^(0+384)+50),w
  4678  0BAB                     u11215:	
  4679  0BAB  1803               	skipnc
  4680  0BAC  2BB9               	goto	l10382
  4681                           
  4682                           ;OverLoad_B1.c: 30: Load1.AL[i] = Load1.ADRES;
  4683  0BAD  0020               	movlb	0	; select bank0
  4684  0BAE  3528               	lslf	getLoad_AD@i,w
  4685  0BAF  3EBA               	addlw	(_Load1+26)& (0+255)
  4686  0BB0  0086               	movwf	6
  4687  0BB1  3001               	movlw	1	; select bank3/4
  4688  0BB2  0087               	movwf	7
  4689  0BB3  0023               	movlb	3	; select bank3
  4690  0BB4  0852               	movf	(_Load1^(0+384)+50),w
  4691  0BB5  3FC0               	movwi [0]fsr1
  4692  0BB6  0853               	movf	((_Load1+1)^(0+384)+50),w
  4693  0BB7  3FC1               	movwi [1]fsr1
  4694                           
  4695                           ;OverLoad_B1.c: 31: break;
  4696  0BB8  0008               	return
  4697  0BB9                     l10382:	
  4698  0BB9  3001               	movlw	1
  4699  0BBA  0020               	movlb	0	; select bank0
  4700  0BBB  00A4               	movwf	??_getLoad_AD
  4701  0BBC  0824               	movf	??_getLoad_AD,w
  4702  0BBD  07A8               	addwf	getLoad_AD@i,f
  4703  0BBE  2B95               	goto	L1
  4704  0BBF                     __end_of_getLoad_AD:	
  4705                           
  4706                           	psect	text7
  4707  1E44                     __ptext7:	
  4708 ;; *************** function _getAD *****************
  4709 ;; Defined at:
  4710 ;;		line 349 in file "../src/MCU_B1.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  adcon0          1    wreg     unsigned char 
  4713 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  2    0[BANK0 ] int 
  4718 ;; Registers used:
  4719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4725 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;Total ram usage:        4 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:    6
  4732 ;; This function calls:
  4733 ;;		_Timeout_Counter
  4734 ;;		_set_TimeoutCleared
  4735 ;; This function is called by:
  4736 ;;		_getLoad_AD
  4737 ;;		_getTemp_AD
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           
  4742                           ;psect for function _getAD
  4743  1E44                     _getAD:	
  4744                           
  4745                           ;incstack = 0
  4746                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4747                           ;getAD@adcon0 stored from wreg
  4748  1E44  0020               	movlb	0	; select bank0
  4749  1E45  00A3               	movwf	getAD@adcon0
  4750                           
  4751                           ;MCU_B1.c: 350: ADCON0 = adcon0;
  4752  1E46  0823               	movf	getAD@adcon0,w
  4753  1E47  0021               	movlb	1	; select bank1
  4754  1E48  009D               	movwf	29	;volatile
  4755                           
  4756                           ;MCU_B1.c: 351: ADCON1 = adcon1;
  4757  1E49  0020               	movlb	0	; select bank0
  4758  1E4A  0820               	movf	getAD@adcon1,w
  4759  1E4B  0021               	movlb	1	; select bank1
  4760  1E4C  009E               	movwf	30	;volatile
  4761                           
  4762                           ;MCU_B1.c: 352: GO_nDONE = 1;
  4763  1E4D  149D               	bsf	29,1	;volatile
  4764                           
  4765                           ;MCU_B1.c: 353: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4766  1E4E  2E52               	goto	l9816
  4767  1E4F                     l9814:	
  4768                           
  4769                           ;MCU_B1.c: 354: Timeout_Counter();
  4770  1E4F  319C  2457  319E   	fcall	_Timeout_Counter
  4771  1E52                     l9816:	
  4772  1E52  0021               	movlb	1	; select bank1
  4773  1E53  1C9D               	btfss	29,1	;volatile
  4774  1E54  2E57               	goto	l9820
  4775  1E55  1D2F               	btfss	(_myMain^(0+128)+15),2
  4776  1E56  2E4F               	goto	l9814
  4777  1E57                     l9820:	
  4778                           
  4779                           ;MCU_B1.c: 355: };
  4780                           ;MCU_B1.c: 356: set_TimeoutCleared();
  4781  1E57  3199  21E2         	fcall	_set_TimeoutCleared
  4782                           
  4783                           ;MCU_B1.c: 357: return ((ADRESH*256)+ADRESL);
  4784  1E59  0021               	movlb	1	; select bank1
  4785  1E5A  081C               	movf	28,w	;volatile
  4786  1E5B  0020               	movlb	0	; select bank0
  4787  1E5C  01A1               	clrf	?_getAD+1
  4788  1E5D  07A1               	addwf	?_getAD+1,f
  4789  1E5E  0021               	movlb	1	; select bank1
  4790  1E5F  081B               	movf	27,w	;volatile
  4791  1E60  0020               	movlb	0	; select bank0
  4792  1E61  01A0               	clrf	?_getAD
  4793  1E62  07A0               	addwf	?_getAD,f
  4794  1E63  0008               	return
  4795  1E64                     __end_of_getAD:	
  4796                           
  4797                           	psect	text8
  4798  1BF6                     __ptext8:	
  4799 ;; *************** function _WDT_Main *****************
  4800 ;; Defined at:
  4801 ;;		line 908 in file "../src/MCU_B1.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;		None
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;		None
  4806 ;; Return value:  Size  Location     Type
  4807 ;;		None               void
  4808 ;; Registers used:
  4809 ;;		wreg, status,2, status,0, pclath, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4817 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4819 ;;Total ram usage:        1 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    6
  4822 ;; This function calls:
  4823 ;;		_WDT_Clearing
  4824 ;; This function is called by:
  4825 ;;		_main
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           
  4830                           ;psect for function _WDT_Main
  4831  1BF6                     _WDT_Main:	
  4832                           
  4833                           ;MCU_B1.c: 909: if (WDT.Enable == 1) {
  4834                           
  4835                           ;incstack = 0
  4836                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4837  1BF6  0021               	movlb	1	; select bank1
  4838  1BF7  1C49               	btfss	_WDT^(0+128),0
  4839  1BF8  0008               	return
  4840                           
  4841                           ;MCU_B1.c: 910: if (WDT.Count-- > 0) {
  4842  1BF9  3001               	movlw	1
  4843  1BFA  02CA               	subwf	(_WDT^(0+128)+1),f
  4844  1BFB  084A               	movf	(_WDT^(0+128)+1),w
  4845  1BFC  3AFF               	xorlw	255
  4846  1BFD  1903               	skipnz
  4847  1BFE  0008               	return
  4848                           
  4849                           ;MCU_B1.c: 911: WDT.Count = 10;
  4850  1BFF  300A               	movlw	10
  4851  1C00  0020               	movlb	0	; select bank0
  4852  1C01  00A0               	movwf	??_WDT_Main
  4853  1C02  0820               	movf	??_WDT_Main,w
  4854  1C03  0021               	movlb	1	; select bank1
  4855  1C04  00CA               	movwf	(_WDT^(0+128)+1)
  4856                           
  4857                           ;MCU_B1.c: 912: WDT_Clearing();
  4858  1C05  3180  2002         	fcall	_WDT_Clearing
  4859  1C07  0008               	return
  4860  1C08                     __end_of_WDT_Main:	
  4861                           
  4862                           	psect	text9
  4863  0002                     __ptext9:	
  4864 ;; *************** function _WDT_Clearing *****************
  4865 ;; Defined at:
  4866 ;;		line 918 in file "../src/MCU_B1.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;		None
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;		None
  4871 ;; Return value:  Size  Location     Type
  4872 ;;		None               void
  4873 ;; Registers used:
  4874 ;;		None
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;Total ram usage:        0 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    5
  4887 ;; This function calls:
  4888 ;;		Nothing
  4889 ;; This function is called by:
  4890 ;;		_WDT_Main
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           
  4895                           ;psect for function _WDT_Clearing
  4896  0002                     _WDT_Clearing:	
  4897                           
  4898                           ;incstack = 0
  4899                           ; Regs used in _WDT_Clearing: []
  4900  0002  0064               	clrwdt	;# 
  4901  0003  0008               	return
  4902  0004                     __end_of_WDT_Clearing:	
  4903                           
  4904                           	psect	text10
  4905  07FD                     __ptext10:	
  4906 ;; *************** function _Temp_Main *****************
  4907 ;; Defined at:
  4908 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;		None
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;		None
  4913 ;; Return value:  Size  Location     Type
  4914 ;;		None               void
  4915 ;; Registers used:
  4916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;Total ram usage:        0 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:   11
  4929 ;; This function calls:
  4930 ;;		_setTemp_Main
  4931 ;; This function is called by:
  4932 ;;		_main
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           
  4937                           ;psect for function _Temp_Main
  4938  07FD                     _Temp_Main:	
  4939                           
  4940                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4941                           
  4942                           ;incstack = 0
  4943                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4944  07FD  318B  23BF         	fcall	_setTemp_Main
  4945  07FF  0008               	return
  4946  0800                     __end_of_Temp_Main:	
  4947                           
  4948                           	psect	text11
  4949  0BBF                     __ptext11:	
  4950 ;; *************** function _setTemp_Main *****************
  4951 ;; Defined at:
  4952 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;		None
  4955 ;; Auto vars:     Size  Location     Type
  4956 ;;		None
  4957 ;; Return value:  Size  Location     Type
  4958 ;;		None               void
  4959 ;; Registers used:
  4960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4969 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4970 ;;Total ram usage:        1 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; Hardware stack levels required when called:   10
  4973 ;; This function calls:
  4974 ;;		_getLoad_Safe
  4975 ;;		_setOverTemp_Exceptions
  4976 ;; This function is called by:
  4977 ;;		_Temp_Main
  4978 ;; This function uses a non-reentrant model
  4979 ;;
  4980                           
  4981                           
  4982                           ;psect for function _setTemp_Main
  4983  0BBF                     _setTemp_Main:	
  4984                           
  4985                           ;OverTemperature_B1.c: 58: if (Temp1.Enable == 1) {
  4986                           
  4987                           ;incstack = 0
  4988                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4989  0BBF  0021               	movlb	1	; select bank1
  4990  0BC0  1C57               	btfss	_Temp1^(0+128),0
  4991  0BC1  0008               	return
  4992                           
  4993                           ;OverTemperature_B1.c: 59: if (Temp1.ADtoGO == 0) {
  4994  0BC2  1957               	btfsc	_Temp1^(0+128),2
  4995  0BC3  2BE1               	goto	l9900
  4996                           
  4997                           ;OverTemperature_B1.c: 60: Temp1.Time++;
  4998  0BC4  3001               	movlw	1
  4999  0BC5  07D8               	addwf	(_Temp1^(0+128)+1),f
  5000  0BC6  3000               	movlw	0
  5001  0BC7  3DD9               	addwfc	((_Temp1+1)^(0+128)+1),f
  5002                           
  5003                           ;OverTemperature_B1.c: 61: if (Temp1.Time >= 500)
  5004  0BC8  3001               	movlw	1
  5005  0BC9  0259               	subwf	((_Temp1+1)^(0+128)+1),w
  5006  0BCA  30F4               	movlw	244
  5007  0BCB  1903               	skipnz
  5008  0BCC  0258               	subwf	(_Temp1^(0+128)+1),w
  5009  0BCD  1C03               	skipc
  5010  0BCE  0008               	return
  5011                           
  5012                           ;OverTemperature_B1.c: 62: {
  5013                           ;OverTemperature_B1.c: 63: if (getLoad_Safe() == 1 && 1 == 1) {
  5014  0BCF  319A  224D  318B   	fcall	_getLoad_Safe
  5015  0BD2  3A01               	xorlw	1
  5016  0BD3  1D03               	skipz
  5017  0BD4  2BDB               	goto	l9898
  5018                           
  5019                           ;OverTemperature_B1.c: 64: Temp1.Time = 0;
  5020  0BD5  0021               	movlb	1	; select bank1
  5021  0BD6  01D8               	clrf	(_Temp1^(0+128)+1)
  5022  0BD7  01D9               	clrf	((_Temp1+1)^(0+128)+1)
  5023                           
  5024                           ;OverTemperature_B1.c: 65: Temp1.ADtoGO = 1;
  5025  0BD8  1557               	bsf	_Temp1^(0+128),2
  5026                           
  5027                           ;OverTemperature_B1.c: 66: Temp1.Safe = 0;
  5028  0BD9  1257               	bcf	_Temp1^(0+128),4
  5029                           
  5030                           ;OverTemperature_B1.c: 68: } else {
  5031  0BDA  0008               	return
  5032  0BDB                     l9898:	
  5033                           
  5034                           ;OverTemperature_B1.c: 69: Temp1.Time = 1000;
  5035  0BDB  30E8               	movlw	232
  5036  0BDC  0021               	movlb	1	; select bank1
  5037  0BDD  00D8               	movwf	(_Temp1^(0+128)+1)
  5038  0BDE  3003               	movlw	3
  5039  0BDF  00D9               	movwf	(_Temp1^(0+128)+2)
  5040                           
  5041                           ;OverTemperature_B1.c: 70: }
  5042                           ;OverTemperature_B1.c: 71: }
  5043                           ;OverTemperature_B1.c: 72: } else {
  5044  0BE0  0008               	return
  5045  0BE1                     l9900:	
  5046                           
  5047                           ;OverTemperature_B1.c: 73: Temp1.Time++;
  5048  0BE1  3001               	movlw	1
  5049  0BE2  07D8               	addwf	(_Temp1^(0+128)+1),f
  5050  0BE3  3000               	movlw	0
  5051  0BE4  3DD9               	addwfc	((_Temp1+1)^(0+128)+1),f
  5052                           
  5053                           ;OverTemperature_B1.c: 74: if (Temp1.Time >= 4) {
  5054  0BE5  3000               	movlw	0
  5055  0BE6  0259               	subwf	((_Temp1+1)^(0+128)+1),w
  5056  0BE7  3004               	movlw	4
  5057  0BE8  1903               	skipnz
  5058  0BE9  0258               	subwf	(_Temp1^(0+128)+1),w
  5059  0BEA  1C03               	skipc
  5060  0BEB  0008               	return
  5061                           
  5062                           ;OverTemperature_B1.c: 75: Temp1.Time = 0;
  5063  0BEC  01D8               	clrf	(_Temp1^(0+128)+1)
  5064  0BED  01D9               	clrf	((_Temp1+1)^(0+128)+1)
  5065                           
  5066                           ;OverTemperature_B1.c: 76: Temp1.ADtoGO = 0;
  5067  0BEE  1157               	bcf	_Temp1^(0+128),2
  5068                           
  5069                           ;OverTemperature_B1.c: 77: Temp1.AD = Temp1.ADH[1];
  5070  0BEF  0862               	movf	((_Temp1+1)^(0+128)+10),w
  5071  0BF0  01DE               	clrf	((_Temp1+1)^(0+128)+6)
  5072  0BF1  07DE               	addwf	((_Temp1+1)^(0+128)+6),f
  5073  0BF2  0861               	movf	(_Temp1^(0+128)+10),w
  5074  0BF3  01DD               	clrf	(_Temp1^(0+128)+6)
  5075  0BF4  07DD               	addwf	(_Temp1^(0+128)+6),f
  5076                           
  5077                           ;OverTemperature_B1.c: 78: if (Temp1.ERROR == 1) {
  5078  0BF5  1CD7               	btfss	_Temp1^(0+128),1
  5079  0BF6  2C0E               	goto	l9922
  5080                           
  5081                           ;OverTemperature_B1.c: 79: if (Temp1.AD >= 600) {
  5082  0BF7  3002               	movlw	2
  5083  0BF8  025E               	subwf	((_Temp1+1)^(0+128)+6),w
  5084  0BF9  3058               	movlw	88
  5085  0BFA  1903               	skipnz
  5086  0BFB  025D               	subwf	(_Temp1^(0+128)+6),w
  5087  0BFC  1C03               	skipc
  5088  0BFD  2C25               	goto	l9932
  5089                           
  5090                           ;OverTemperature_B1.c: 80: Temp1.Count++;
  5091  0BFE  3001               	movlw	1
  5092  0BFF  0020               	movlb	0	; select bank0
  5093  0C00  00B1               	movwf	??_setTemp_Main
  5094  0C01  0831               	movf	??_setTemp_Main,w
  5095  0C02  0021               	movlb	1	; select bank1
  5096  0C03  07DA               	addwf	(_Temp1^(0+128)+3),f
  5097                           
  5098                           ;OverTemperature_B1.c: 81: if (Temp1.Count >= 3) {
  5099  0C04  3003               	movlw	3
  5100  0C05  025A               	subwf	(_Temp1^(0+128)+3),w
  5101  0C06  1C03               	skipc
  5102  0C07  2C27               	goto	l9934
  5103                           
  5104                           ;OverTemperature_B1.c: 82: Temp1.Count = 0;
  5105  0C08  01DA               	clrf	(_Temp1^(0+128)+3)
  5106                           
  5107                           ;OverTemperature_B1.c: 83: setOverTemp_Exceptions(0);
  5108  0C09  3000               	movlw	0
  5109  0C0A  3192  220D  318B   	fcall	_setOverTemp_Exceptions
  5110                           
  5111                           ;OverTemperature_B1.c: 84: }
  5112                           ;OverTemperature_B1.c: 85: } else {
  5113  0C0D  2C27               	goto	l9934
  5114  0C0E                     l9922:	
  5115                           ;OverTemperature_B1.c: 87: }
  5116                           ;OverTemperature_B1.c: 88: } else {
  5117                           
  5118                           ;OverTemperature_B1.c: 86: Temp1.Count = 0;
  5119                           
  5120                           
  5121                           ;OverTemperature_B1.c: 89: if (Temp1.AD <= 550) {
  5122  0C0E  3002               	movlw	2
  5123  0C0F  025E               	subwf	((_Temp1+1)^(0+128)+6),w
  5124  0C10  3027               	movlw	39
  5125  0C11  1903               	skipnz
  5126  0C12  025D               	subwf	(_Temp1^(0+128)+6),w
  5127  0C13  1803               	skipnc
  5128  0C14  2C25               	goto	l9932
  5129                           
  5130                           ;OverTemperature_B1.c: 90: Temp1.Count++;
  5131  0C15  3001               	movlw	1
  5132  0C16  0020               	movlb	0	; select bank0
  5133  0C17  00B1               	movwf	??_setTemp_Main
  5134  0C18  0831               	movf	??_setTemp_Main,w
  5135  0C19  0021               	movlb	1	; select bank1
  5136  0C1A  07DA               	addwf	(_Temp1^(0+128)+3),f
  5137                           
  5138                           ;OverTemperature_B1.c: 91: if (Temp1.Count >= 3) {
  5139  0C1B  3003               	movlw	3
  5140  0C1C  025A               	subwf	(_Temp1^(0+128)+3),w
  5141  0C1D  1C03               	skipc
  5142  0C1E  2C27               	goto	l9934
  5143                           
  5144                           ;OverTemperature_B1.c: 92: Temp1.Count = 0;
  5145  0C1F  01DA               	clrf	(_Temp1^(0+128)+3)
  5146                           
  5147                           ;OverTemperature_B1.c: 93: setOverTemp_Exceptions(1);
  5148  0C20  3001               	movlw	1
  5149  0C21  3192  220D  318B   	fcall	_setOverTemp_Exceptions
  5150                           
  5151                           ;OverTemperature_B1.c: 94: }
  5152                           ;OverTemperature_B1.c: 95: } else {
  5153  0C24  2C27               	goto	l9934
  5154  0C25                     l9932:	
  5155                           
  5156                           ;OverTemperature_B1.c: 96: Temp1.Count = 0;
  5157  0C25  0021               	movlb	1	; select bank1
  5158  0C26  01DA               	clrf	(_Temp1^(0+128)+3)
  5159  0C27                     l9934:	
  5160                           
  5161                           ;OverTemperature_B1.c: 97: }
  5162                           ;OverTemperature_B1.c: 98: }
  5163                           ;OverTemperature_B1.c: 99: if (Temp1.ERROR == 0) {
  5164  0C27  0021               	movlb	1	; select bank1
  5165  0C28  1CD7               	btfss	_Temp1^(0+128),1
  5166                           
  5167                           ;OverTemperature_B1.c: 100: Temp1.Safe = 1;
  5168  0C29  1657               	bsf	_Temp1^(0+128),4
  5169                           
  5170                           ;OverTemperature_B1.c: 101: }
  5171                           ;OverTemperature_B1.c: 102: product->Data[24]=Temp1.AD >> 8;
  5172  0C2A  085E               	movf	((_Temp1+1)^(0+128)+6),w
  5173  0C2B  0020               	movlb	0	; select bank0
  5174  0C2C  00B1               	movwf	??_setTemp_Main
  5175  0C2D  086C               	movf	_product,w
  5176  0C2E  3E18               	addlw	24
  5177  0C2F  0086               	movwf	6
  5178  0C30  3002               	movlw	2	; select bank4/5
  5179  0C31  0087               	movwf	7
  5180  0C32  0831               	movf	??_setTemp_Main,w
  5181  0C33  0081               	movwf	1
  5182                           
  5183                           ;OverTemperature_B1.c: 103: product->Data[25]=Temp1.AD;
  5184  0C34  0021               	movlb	1	; select bank1
  5185  0C35  085D               	movf	(_Temp1^(0+128)+6),w
  5186  0C36  0020               	movlb	0	; select bank0
  5187  0C37  00B1               	movwf	??_setTemp_Main
  5188  0C38  086C               	movf	_product,w
  5189  0C39  3E19               	addlw	25
  5190  0C3A  0086               	movwf	6
  5191  0C3B  3002               	movlw	2	; select bank4/5
  5192  0C3C  0087               	movwf	7
  5193  0C3D  0831               	movf	??_setTemp_Main,w
  5194  0C3E  0081               	movwf	1
  5195                           
  5196                           ;OverTemperature_B1.c: 106: Temp1.ADH[0] = 0;
  5197  0C3F  0021               	movlb	1	; select bank1
  5198  0C40  01DF               	clrf	(_Temp1^(0+128)+8)
  5199  0C41  01E0               	clrf	((_Temp1+1)^(0+128)+8)
  5200                           
  5201                           ;OverTemperature_B1.c: 107: Temp1.ADH[1] = 0;
  5202  0C42  01E1               	clrf	(_Temp1^(0+128)+10)
  5203  0C43  01E2               	clrf	((_Temp1+1)^(0+128)+10)
  5204  0C44  0008               	return
  5205  0C45                     __end_of_setTemp_Main:	
  5206                           
  5207                           	psect	text12
  5208  120D                     __ptext12:	
  5209 ;; *************** function _setOverTemp_Exceptions *****************
  5210 ;; Defined at:
  5211 ;;		line 114 in file "../src/OverTemperature_B1.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  command         1    wreg     unsigned char 
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;  command         1   16[BANK0 ] unsigned char 
  5216 ;;  i               1   15[BANK0 ] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;		None               void
  5219 ;; Registers used:
  5220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;Total ram usage:        3 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    9
  5233 ;; This function calls:
  5234 ;;		_DimmerLights_Exceptions
  5235 ;;		_setBuz
  5236 ;;		_setLED
  5237 ;;		_setRF_Enable
  5238 ;;		_setSw_Enable
  5239 ;; This function is called by:
  5240 ;;		_setTemp_Main
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           
  5245                           ;psect for function _setOverTemp_Exceptions
  5246  120D                     _setOverTemp_Exceptions:	
  5247                           
  5248                           ;incstack = 0
  5249                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5250                           ;setOverTemp_Exceptions@command stored from wreg
  5251  120D  0020               	movlb	0	; select bank0
  5252  120E  00B0               	movwf	setOverTemp_Exceptions@command
  5253                           
  5254                           ;OverTemperature_B1.c: 115: char i = command == 1 ? 0 : 1;
  5255  120F  0830               	movf	setOverTemp_Exceptions@command,w
  5256  1210  3A01               	xorlw	1
  5257  1211  3000               	movlw	0
  5258  1212  1D03               	skipz
  5259  1213  3001               	movlw	1
  5260  1214  00AE               	movwf	??_setOverTemp_Exceptions
  5261  1215  082E               	movf	??_setOverTemp_Exceptions,w
  5262  1216  00AF               	movwf	setOverTemp_Exceptions@i
  5263                           
  5264                           ;OverTemperature_B1.c: 116: Temp1.ERROR = command;
  5265  1217  0830               	movf	setOverTemp_Exceptions@command,w
  5266  1218  0021               	movlb	1	; select bank1
  5267  1219  10D7               	bcf	_Temp1^(0+128),1
  5268  121A  1D03               	skipz
  5269  121B  14D7               	bsf	_Temp1^(0+128),1
  5270                           
  5271                           ;OverTemperature_B1.c: 117: Temp1.Safe = i;
  5272  121C  0020               	movlb	0	; select bank0
  5273  121D  082F               	movf	setOverTemp_Exceptions@i,w
  5274  121E  0021               	movlb	1	; select bank1
  5275  121F  1257               	bcf	_Temp1^(0+128),4
  5276  1220  1D03               	skipz
  5277  1221  1657               	bsf	_Temp1^(0+128),4
  5278                           
  5279                           ;OverTemperature_B1.c: 118: if (command == 1) {
  5280  1222  0020               	movlb	0	; select bank0
  5281  1223  0830               	movf	setOverTemp_Exceptions@command,w
  5282  1224  3A01               	xorlw	1
  5283  1225  1D03               	skipz
  5284  1226  2A2C               	goto	l9422
  5285                           
  5286                           ;OverTemperature_B1.c: 119: DimmerLights_Exceptions(1);
  5287  1227  3001               	movlw	1
  5288  1228  3193  23E9  3192   	fcall	_DimmerLights_Exceptions
  5289                           
  5290                           ;OverTemperature_B1.c: 123: } else if (command == 0) {
  5291  122B  2A38               	goto	l9426
  5292  122C                     l9422:	
  5293  122C  0020               	movlb	0	; select bank0
  5294  122D  08B0               	movf	setOverTemp_Exceptions@command,f
  5295  122E  1D03               	skipz
  5296  122F  2A38               	goto	l9426
  5297                           
  5298                           ;OverTemperature_B1.c: 124: setBuz(2, 100);
  5299  1230  3064               	movlw	100
  5300  1231  00A9               	movwf	setBuz@time
  5301  1232  3000               	movlw	0
  5302  1233  00AA               	movwf	setBuz@time+1
  5303  1234  3002               	movlw	2
  5304  1235  3195  25CA  3192   	fcall	_setBuz
  5305  1238                     l9426:	
  5306                           
  5307                           ;OverTemperature_B1.c: 125: }
  5308                           ;OverTemperature_B1.c: 128: setLED(99, command + 10);
  5309  1238  0020               	movlb	0	; select bank0
  5310  1239  0830               	movf	setOverTemp_Exceptions@command,w
  5311  123A  3E0A               	addlw	10
  5312  123B  00AE               	movwf	??_setOverTemp_Exceptions
  5313  123C  082E               	movf	??_setOverTemp_Exceptions,w
  5314  123D  00A2               	movwf	setLED@command
  5315  123E  3063               	movlw	99
  5316  123F  3196  267E  3192   	fcall	_setLED
  5317                           
  5318                           ;OverTemperature_B1.c: 130: setSw_Enable(i);
  5319  1242  0020               	movlb	0	; select bank0
  5320  1243  082F               	movf	setOverTemp_Exceptions@i,w
  5321  1244  319D  2573  3192   	fcall	_setSw_Enable
  5322                           
  5323                           ;OverTemperature_B1.c: 132: setRF_Enable(i);
  5324  1247  0020               	movlb	0	; select bank0
  5325  1248  082F               	movf	setOverTemp_Exceptions@i,w
  5326  1249  319A  22F4         	fcall	_setRF_Enable
  5327  124B  0008               	return
  5328  124C                     __end_of_setOverTemp_Exceptions:	
  5329                           
  5330                           	psect	text13
  5331  1A4D                     __ptext13:	
  5332 ;; *************** function _getLoad_Safe *****************
  5333 ;; Defined at:
  5334 ;;		line 296 in file "../src/OverLoad_B1.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;		None
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;  result          1    0[BANK0 ] unsigned char 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  1    wreg      unsigned char 
  5341 ;; Registers used:
  5342 ;;		wreg, status,2
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;Total ram usage:        1 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    5
  5355 ;; This function calls:
  5356 ;;		Nothing
  5357 ;; This function is called by:
  5358 ;;		_setTemp_Main
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           
  5363                           ;psect for function _getLoad_Safe
  5364  1A4D                     _getLoad_Safe:	
  5365                           
  5366                           ;OverLoad_B1.c: 297: char result = Load1.Safe;
  5367                           
  5368                           ;incstack = 0
  5369                           ; Regs used in _getLoad_Safe: [wreg+status,2]
  5370  1A4D  3000               	movlw	0
  5371  1A4E  0023               	movlb	3	; select bank3
  5372  1A4F  19A0               	btfsc	_Load1^(0+384),3
  5373  1A50  3001               	movlw	1
  5374  1A51  0020               	movlb	0	; select bank0
  5375  1A52  00A0               	movwf	getLoad_Safe@result
  5376                           
  5377                           ;OverLoad_B1.c: 298: return result;
  5378  1A53  0820               	movf	getLoad_Safe@result,w
  5379  1A54  0008               	return
  5380  1A55                     __end_of_getLoad_Safe:	
  5381                           
  5382                           	psect	text14
  5383  19CF                     __ptext14:	
  5384 ;; *************** function _Temp_Initialization *****************
  5385 ;; Defined at:
  5386 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;		None
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;		None
  5391 ;; Return value:  Size  Location     Type
  5392 ;;		None               void
  5393 ;; Registers used:
  5394 ;;		status,2, status,0, pclath, cstack
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;Total ram usage:        0 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    6
  5407 ;; This function calls:
  5408 ;;		_setTemp_Initialization
  5409 ;; This function is called by:
  5410 ;;		_main
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           
  5415                           ;psect for function _Temp_Initialization
  5416  19CF                     _Temp_Initialization:	
  5417                           
  5418                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5419                           
  5420                           ;incstack = 0
  5421                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5422  19CF  3199  21CC         	fcall	_setTemp_Initialization
  5423  19D1  0008               	return
  5424  19D2                     __end_of_Temp_Initialization:	
  5425                           
  5426                           	psect	text15
  5427  19CC                     __ptext15:	
  5428 ;; *************** function _setTemp_Initialization *****************
  5429 ;; Defined at:
  5430 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5431 ;; Parameters:    Size  Location     Type
  5432 ;;		None
  5433 ;; Auto vars:     Size  Location     Type
  5434 ;;		None
  5435 ;; Return value:  Size  Location     Type
  5436 ;;		None               void
  5437 ;; Registers used:
  5438 ;;		None
  5439 ;; Tracked objects:
  5440 ;;		On entry : 0/0
  5441 ;;		On exit  : 0/0
  5442 ;;		Unchanged: 0/0
  5443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;Total ram usage:        0 bytes
  5449 ;; Hardware stack levels used:    1
  5450 ;; Hardware stack levels required when called:    5
  5451 ;; This function calls:
  5452 ;;		Nothing
  5453 ;; This function is called by:
  5454 ;;		_Temp_Initialization
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           
  5459                           ;psect for function _setTemp_Initialization
  5460  19CC                     _setTemp_Initialization:	
  5461                           
  5462                           ;OverTemperature_B1.c: 46: Temp1.Safe = 1;
  5463                           
  5464                           ;incstack = 0
  5465                           ; Regs used in _setTemp_Initialization: []
  5466  19CC  0021               	movlb	1	; select bank1
  5467  19CD  1657               	bsf	_Temp1^(0+128),4
  5468  19CE  0008               	return
  5469  19CF                     __end_of_setTemp_Initialization:	
  5470                           
  5471                           	psect	text16
  5472  1A45                     __ptext16:	
  5473 ;; *************** function _Switch_Main *****************
  5474 ;; Defined at:
  5475 ;;		line 67 in file "../src/Switch_B1.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;		None
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;		None
  5480 ;; Return value:  Size  Location     Type
  5481 ;;		None               void
  5482 ;; Registers used:
  5483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;Total ram usage:        0 bytes
  5494 ;; Hardware stack levels used:    1
  5495 ;; Hardware stack levels required when called:   11
  5496 ;; This function calls:
  5497 ;;		_setSw_Main
  5498 ;; This function is called by:
  5499 ;;		_main
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           
  5504                           ;psect for function _Switch_Main
  5505  1A45                     _Switch_Main:	
  5506                           
  5507                           ;Switch_B1.c: 69: setSw_Main(1);
  5508                           
  5509                           ;incstack = 0
  5510                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5511  1A45  3001               	movlw	1
  5512  1A46  3183  2378  319A   	fcall	_setSw_Main
  5513                           
  5514                           ;Switch_B1.c: 73: setSw_Main(2);
  5515  1A49  3002               	movlw	2
  5516  1A4A  3183  2378         	fcall	_setSw_Main
  5517  1A4C  0008               	return
  5518  1A4D                     __end_of_Switch_Main:	
  5519                           
  5520                           	psect	text17
  5521  0378                     __ptext17:	
  5522 ;; *************** function _setSw_Main *****************
  5523 ;; Defined at:
  5524 ;;		line 117 in file "../src/Switch_B1.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  sw              1    wreg     unsigned char 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  sw              1   73[BANK0 ] unsigned char 
  5529 ;; Return value:  Size  Location     Type
  5530 ;;		None               void
  5531 ;; Registers used:
  5532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;Total ram usage:        5 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:   10
  5545 ;; This function calls:
  5546 ;;		_SwPointSelect
  5547 ;;		_Sw_DimmerAdjFunc
  5548 ;;		_Sw_DimmerOffFunc
  5549 ;;		_Sw_DimmerOnFunc
  5550 ;;		_setBuz
  5551 ;;		_setRF_Learn
  5552 ;; This function is called by:
  5553 ;;		_Switch_Main
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           
  5558                           ;psect for function _setSw_Main
  5559  0378                     _setSw_Main:	
  5560                           
  5561                           ;incstack = 0
  5562                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5563                           ;setSw_Main@sw stored from wreg
  5564  0378  0020               	movlb	0	; select bank0
  5565  0379  00E9               	movwf	setSw_Main@sw
  5566                           
  5567                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5568  037A  0869               	movf	setSw_Main@sw,w
  5569  037B  319C  2443  3183   	fcall	_SwPointSelect
  5570                           
  5571                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5572  037E  0020               	movlb	0	; select bank0
  5573  037F  086D               	movf	_Sw,w
  5574  0380  0086               	movwf	6
  5575  0381  3001               	movlw	1	; select bank2/3
  5576  0382  0087               	movwf	7
  5577  0383  1C01               	btfss	1,0
  5578  0384  0008               	return
  5579                           
  5580                           ;Switch_B1.c: 131: if (sw == 1) {
  5581  0385  0869               	movf	setSw_Main@sw,w
  5582  0386  3A01               	xorlw	1
  5583  0387  1D03               	skipz
  5584  0388  2B95               	goto	l10090
  5585                           
  5586                           ;Switch_B1.c: 132: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  5587  0389  01E7               	clrf	_setSw_Main$7023
  5588  038A  0AE7               	incf	_setSw_Main$7023,f
  5589  038B  1F0C               	btfss	12,6	;volatile
  5590  038C  1A0C               	btfsc	12,4	;volatile
  5591  038D  2B8F               	goto	l10088
  5592  038E  01E7               	clrf	_setSw_Main$7023
  5593  038F                     l10088:	
  5594  038F  086D               	movf	_Sw,w
  5595  0390  0086               	movwf	6
  5596  0391  3001               	movlw	1	; select bank2/3
  5597  0392  0087               	movwf	7
  5598  0393  0867               	movf	_setSw_Main$7023,w
  5599  0394  2BA4               	goto	L2
  5600  0395                     l10090:	
  5601                           ;Switch_B1.c: 133: } else if (sw == 2) {
  5602                           
  5603  0395  0869               	movf	setSw_Main@sw,w
  5604  0396  3A02               	xorlw	2
  5605  0397  1D03               	skipz
  5606  0398  2BA7               	goto	l10100
  5607                           
  5608                           ;Switch_B1.c: 134: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  5609  0399  01E8               	clrf	_setSw_Main$7024
  5610  039A  0AE8               	incf	_setSw_Main$7024,f
  5611  039B  1C0C               	btfss	12,0	;volatile
  5612  039C  188D               	btfsc	13,1	;volatile
  5613  039D  2B9F               	goto	l10098
  5614  039E  01E8               	clrf	_setSw_Main$7024
  5615  039F                     l10098:	
  5616  039F  086D               	movf	_Sw,w
  5617  03A0  0086               	movwf	6
  5618  03A1  3001               	movlw	1	; select bank2/3
  5619  03A2  0087               	movwf	7
  5620  03A3  0868               	movf	_setSw_Main$7024,w
  5621  03A4                     L2:	
  5622  03A4  1081               	bcf	1,1
  5623  03A5  1D03               	skipz
  5624  03A6  1481               	bsf	1,1
  5625  03A7                     l10100:	
  5626                           
  5627                           ;Switch_B1.c: 135: }
  5628                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  5629  03A7  086D               	movf	_Sw,w
  5630  03A8  0086               	movwf	6
  5631  03A9  3001               	movlw	1	; select bank2/3
  5632  03AA  0087               	movwf	7
  5633  03AB  1C81               	btfss	1,1
  5634  03AC  2C71               	goto	l10148
  5635                           
  5636                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  5637  03AD  086D               	movf	_Sw,w
  5638  03AE  0086               	movwf	6
  5639  03AF  3001               	movlw	1	; select bank2/3
  5640  03B0  0087               	movwf	7
  5641  03B1  1901               	btfsc	1,2
  5642  03B2  2BD4               	goto	l10114
  5643                           
  5644                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  5645  03B3  3001               	movlw	1
  5646  03B4  00E5               	movwf	??_setSw_Main
  5647  03B5  086D               	movf	_Sw,w
  5648  03B6  3E02               	addlw	2
  5649  03B7  0086               	movwf	6
  5650  03B8  3001               	movlw	1	; select bank2/3
  5651  03B9  0087               	movwf	7
  5652  03BA  0865               	movf	??_setSw_Main,w
  5653  03BB  0781               	addwf	1,f
  5654                           
  5655                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  5656  03BC  086D               	movf	_Sw,w
  5657  03BD  3E02               	addlw	2
  5658  03BE  0086               	movwf	6
  5659  03BF  3001               	movlw	1	; select bank2/3
  5660  03C0  0087               	movwf	7
  5661  03C1  3005               	movlw	5
  5662  03C2  0201               	subwf	1,w
  5663  03C3  1C03               	skipc
  5664  03C4  0008               	return
  5665                           
  5666                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  5667  03C5  086D               	movf	_Sw,w
  5668  03C6  3E02               	addlw	2
  5669  03C7  0086               	movwf	6
  5670  03C8  3001               	movlw	1	; select bank2/3
  5671  03C9  0087               	movwf	7
  5672  03CA  0181               	clrf	1
  5673                           
  5674                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  5675  03CB  086D               	movf	_Sw,w
  5676  03CC  0086               	movwf	6
  5677  03CD  3001               	movlw	1	; select bank2/3
  5678  03CE  0087               	movwf	7
  5679  03CF  1501               	bsf	1,2
  5680                           
  5681                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  5682  03D0  0869               	movf	setSw_Main@sw,w
  5683  03D1  3189  21EB         	fcall	_Sw_DimmerOnFunc
  5684                           
  5685                           ;Switch_B1.c: 173: }
  5686                           ;Switch_B1.c: 174: } else {
  5687  03D3  0008               	return
  5688  03D4                     l10114:	
  5689                           
  5690                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  5691  03D4  0020               	movlb	0	; select bank0
  5692  03D5  086D               	movf	_Sw,w
  5693  03D6  0086               	movwf	6
  5694  03D7  3001               	movlw	1	; select bank2/3
  5695  03D8  0087               	movwf	7
  5696  03D9  1981               	btfsc	1,3
  5697  03DA  2C01               	goto	l10124
  5698                           
  5699                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  5700  03DB  086D               	movf	_Sw,w
  5701  03DC  3E03               	addlw	3
  5702  03DD  0086               	movwf	6
  5703  03DE  3001               	movlw	1	; select bank2/3
  5704  03DF  0087               	movwf	7
  5705  03E0  3001               	movlw	1
  5706  03E1  0781               	addwf	1,f
  5707  03E2  3141               	addfsr 1,1
  5708  03E3  1803               	skipnc
  5709  03E4  0A81               	incf	1,f
  5710                           
  5711                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  5712  03E5  086D               	movf	_Sw,w
  5713  03E6  3E03               	addlw	3
  5714  03E7  0086               	movwf	6
  5715  03E8  3001               	movlw	1	; select bank2/3
  5716  03E9  0087               	movwf	7
  5717  03EA  3F40               	moviw [0]fsr1
  5718  03EB  00E5               	movwf	??_setSw_Main
  5719  03EC  3F41               	moviw [1]fsr1
  5720  03ED  00E6               	movwf	??_setSw_Main+1
  5721  03EE  3000               	movlw	0
  5722  03EF  0266               	subwf	??_setSw_Main+1,w
  5723  03F0  3096               	movlw	150
  5724  03F1  1903               	skipnz
  5725  03F2  0265               	subwf	??_setSw_Main,w
  5726  03F3  1C03               	skipc
  5727  03F4  0008               	return
  5728                           
  5729                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  5730  03F5  086D               	movf	_Sw,w
  5731  03F6  3E03               	addlw	3
  5732  03F7  0086               	movwf	6
  5733  03F8  3001               	movlw	1	; select bank2/3
  5734  03F9  0087               	movwf	7
  5735  03FA  3000               	movlw	0
  5736  03FB  3FC0               	movwi [0]fsr1
  5737  03FC  3FC1               	movwi [1]fsr1
  5738                           
  5739                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  5740  03FD  0869               	movf	setSw_Main@sw,w
  5741  03FE  3194  247D         	fcall	_Sw_DimmerAdjFunc
  5742                           
  5743                           ;Switch_B1.c: 184: }
  5744                           ;Switch_B1.c: 185: } else {
  5745  0400  0008               	return
  5746  0401                     l10124:	
  5747                           
  5748                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  5749  0401  0020               	movlb	0	; select bank0
  5750  0402  086D               	movf	_Sw,w
  5751  0403  0086               	movwf	6
  5752  0404  3001               	movlw	1	; select bank2/3
  5753  0405  0087               	movwf	7
  5754  0406  1A01               	btfsc	1,4
  5755  0407  2C3F               	goto	l10138
  5756                           
  5757                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  5758  0408  086D               	movf	_Sw,w
  5759  0409  3E05               	addlw	5
  5760  040A  0086               	movwf	6
  5761  040B  3001               	movlw	1	; select bank2/3
  5762  040C  0087               	movwf	7
  5763  040D  3001               	movlw	1
  5764  040E  0781               	addwf	1,f
  5765  040F  3141               	addfsr 1,1
  5766  0410  1803               	skipnc
  5767  0411  0A81               	incf	1,f
  5768                           
  5769                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  5770  0412  086D               	movf	_Sw,w
  5771  0413  3E05               	addlw	5
  5772  0414  0086               	movwf	6
  5773  0415  3001               	movlw	1	; select bank2/3
  5774  0416  0087               	movwf	7
  5775  0417  3F40               	moviw [0]fsr1
  5776  0418  00E5               	movwf	??_setSw_Main
  5777  0419  3F41               	moviw [1]fsr1
  5778  041A  00E6               	movwf	??_setSw_Main+1
  5779  041B  3000               	movlw	0
  5780  041C  0266               	subwf	??_setSw_Main+1,w
  5781  041D  3096               	movlw	150
  5782  041E  1903               	skipnz
  5783  041F  0265               	subwf	??_setSw_Main,w
  5784  0420  1C03               	skipc
  5785  0421  0008               	return
  5786                           
  5787                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  5788  0422  086D               	movf	_Sw,w
  5789  0423  3E05               	addlw	5
  5790  0424  0086               	movwf	6
  5791  0425  3001               	movlw	1	; select bank2/3
  5792  0426  0087               	movwf	7
  5793  0427  3000               	movlw	0
  5794  0428  3FC0               	movwi [0]fsr1
  5795  0429  3FC1               	movwi [1]fsr1
  5796                           
  5797                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  5798  042A  086D               	movf	_Sw,w
  5799  042B  0086               	movwf	6
  5800  042C  3001               	movlw	1	; select bank2/3
  5801  042D  0087               	movwf	7
  5802  042E  1601               	bsf	1,4
  5803                           
  5804                           ;Switch_B1.c: 193: setRF_Learn(1);
  5805  042F  3001               	movlw	1
  5806  0430  319A  223D  3183   	fcall	_setRF_Learn
  5807                           
  5808                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  5809  0433  0021               	movlb	1	; select bank1
  5810  0434  1FA0               	btfss	_myMain^(0+128),7
  5811  0435  0008               	return
  5812                           
  5813                           ;Switch_B1.c: 196: setBuz(2, 100);
  5814  0436  3064               	movlw	100
  5815  0437  0020               	movlb	0	; select bank0
  5816  0438  00A9               	movwf	setBuz@time
  5817  0439  3000               	movlw	0
  5818  043A  00AA               	movwf	setBuz@time+1
  5819  043B  3002               	movlw	2
  5820  043C  3195  25CA         	fcall	_setBuz
  5821                           
  5822                           ;Switch_B1.c: 197: }
  5823                           ;Switch_B1.c: 199: }
  5824                           ;Switch_B1.c: 200: } else {
  5825  043E  0008               	return
  5826  043F                     l10138:	
  5827                           
  5828                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  5829  043F  0020               	movlb	0	; select bank0
  5830  0440  086D               	movf	_Sw,w
  5831  0441  0086               	movwf	6
  5832  0442  3001               	movlw	1	; select bank2/3
  5833  0443  0087               	movwf	7
  5834  0444  1A81               	btfsc	1,5
  5835  0445  0008               	return
  5836                           
  5837                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  5838  0446  086D               	movf	_Sw,w
  5839  0447  3E07               	addlw	7
  5840  0448  0086               	movwf	6
  5841  0449  3001               	movlw	1	; select bank2/3
  5842  044A  0087               	movwf	7
  5843  044B  3001               	movlw	1
  5844  044C  0781               	addwf	1,f
  5845  044D  3141               	addfsr 1,1
  5846  044E  1803               	skipnc
  5847  044F  0A81               	incf	1,f
  5848                           
  5849                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  5850  0450  086D               	movf	_Sw,w
  5851  0451  3E07               	addlw	7
  5852  0452  0086               	movwf	6
  5853  0453  3001               	movlw	1	; select bank2/3
  5854  0454  0087               	movwf	7
  5855  0455  3F40               	moviw [0]fsr1
  5856  0456  00E5               	movwf	??_setSw_Main
  5857  0457  3F41               	moviw [1]fsr1
  5858  0458  00E6               	movwf	??_setSw_Main+1
  5859  0459  3001               	movlw	1
  5860  045A  0266               	subwf	??_setSw_Main+1,w
  5861  045B  302C               	movlw	44
  5862  045C  1903               	skipnz
  5863  045D  0265               	subwf	??_setSw_Main,w
  5864  045E  1C03               	skipc
  5865  045F  0008               	return
  5866                           
  5867                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5868  0460  086D               	movf	_Sw,w
  5869  0461  3E07               	addlw	7
  5870  0462  0086               	movwf	6
  5871  0463  3001               	movlw	1	; select bank2/3
  5872  0464  0087               	movwf	7
  5873  0465  3000               	movlw	0
  5874  0466  3FC0               	movwi [0]fsr1
  5875  0467  3FC1               	movwi [1]fsr1
  5876                           
  5877                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  5878  0468  086D               	movf	_Sw,w
  5879  0469  0086               	movwf	6
  5880  046A  3001               	movlw	1	; select bank2/3
  5881  046B  0087               	movwf	7
  5882  046C  1681               	bsf	1,5
  5883                           
  5884                           ;Switch_B1.c: 208: setRF_Learn(0);
  5885  046D  3000               	movlw	0
  5886  046E  319A  223D         	fcall	_setRF_Learn
  5887                           
  5888                           ;Switch_B1.c: 211: }
  5889                           ;Switch_B1.c: 212: }
  5890                           ;Switch_B1.c: 213: }
  5891                           ;Switch_B1.c: 214: }
  5892                           ;Switch_B1.c: 215: }
  5893                           ;Switch_B1.c: 216: } else {
  5894  0470  0008               	return
  5895  0471                     l10148:	
  5896                           
  5897                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  5898  0471  0020               	movlb	0	; select bank0
  5899  0472  086D               	movf	_Sw,w
  5900  0473  0086               	movwf	6
  5901  0474  3001               	movlw	1	; select bank2/3
  5902  0475  0087               	movwf	7
  5903  0476  1D01               	btfss	1,2
  5904  0477  0008               	return
  5905                           
  5906                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  5907  0478  3001               	movlw	1
  5908  0479  00E5               	movwf	??_setSw_Main
  5909  047A  086D               	movf	_Sw,w
  5910  047B  3E02               	addlw	2
  5911  047C  0086               	movwf	6
  5912  047D  3001               	movlw	1	; select bank2/3
  5913  047E  0087               	movwf	7
  5914  047F  0865               	movf	??_setSw_Main,w
  5915  0480  0781               	addwf	1,f
  5916                           
  5917                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  5918  0481  086D               	movf	_Sw,w
  5919  0482  3E02               	addlw	2
  5920  0483  0086               	movwf	6
  5921  0484  3001               	movlw	1	; select bank2/3
  5922  0485  0087               	movwf	7
  5923  0486  3005               	movlw	5
  5924  0487  0201               	subwf	1,w
  5925  0488  1C03               	skipc
  5926  0489  0008               	return
  5927                           
  5928                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  5929  048A  086D               	movf	_Sw,w
  5930  048B  3E02               	addlw	2
  5931  048C  0086               	movwf	6
  5932  048D  3001               	movlw	1	; select bank2/3
  5933  048E  0087               	movwf	7
  5934  048F  0181               	clrf	1
  5935                           
  5936                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  5937  0490  086D               	movf	_Sw,w
  5938  0491  0086               	movwf	6
  5939  0492  3001               	movlw	1	; select bank2/3
  5940  0493  0087               	movwf	7
  5941  0494  1101               	bcf	1,2
  5942                           
  5943                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  5944  0495  086D               	movf	_Sw,w
  5945  0496  3E03               	addlw	3
  5946  0497  0086               	movwf	6
  5947  0498  3001               	movlw	1	; select bank2/3
  5948  0499  0087               	movwf	7
  5949  049A  3000               	movlw	0
  5950  049B  3FC0               	movwi [0]fsr1
  5951  049C  3FC1               	movwi [1]fsr1
  5952                           
  5953                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  5954  049D  086D               	movf	_Sw,w
  5955  049E  0086               	movwf	6
  5956  049F  3001               	movlw	1	; select bank2/3
  5957  04A0  0087               	movwf	7
  5958  04A1  1181               	bcf	1,3
  5959                           
  5960                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  5961  04A2  086D               	movf	_Sw,w
  5962  04A3  3E05               	addlw	5
  5963  04A4  0086               	movwf	6
  5964  04A5  3001               	movlw	1	; select bank2/3
  5965  04A6  0087               	movwf	7
  5966  04A7  3000               	movlw	0
  5967  04A8  3FC0               	movwi [0]fsr1
  5968  04A9  3FC1               	movwi [1]fsr1
  5969                           
  5970                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  5971  04AA  086D               	movf	_Sw,w
  5972  04AB  0086               	movwf	6
  5973  04AC  3001               	movlw	1	; select bank2/3
  5974  04AD  0087               	movwf	7
  5975  04AE  1201               	bcf	1,4
  5976                           
  5977                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  5978  04AF  086D               	movf	_Sw,w
  5979  04B0  3E07               	addlw	7
  5980  04B1  0086               	movwf	6
  5981  04B2  3001               	movlw	1	; select bank2/3
  5982  04B3  0087               	movwf	7
  5983  04B4  3000               	movlw	0
  5984  04B5  3FC0               	movwi [0]fsr1
  5985  04B6  3FC1               	movwi [1]fsr1
  5986                           
  5987                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  5988  04B7  086D               	movf	_Sw,w
  5989  04B8  0086               	movwf	6
  5990  04B9  3001               	movlw	1	; select bank2/3
  5991  04BA  0087               	movwf	7
  5992  04BB  1281               	bcf	1,5
  5993                           
  5994                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  5995  04BC  0869               	movf	setSw_Main@sw,w
  5996  04BD  3189  217C  3183   	fcall	_Sw_DimmerOffFunc
  5997                           
  5998                           ;Switch_B1.c: 232: setRF_Learn(0);
  5999  04C0  3000               	movlw	0
  6000  04C1  319A  223D         	fcall	_setRF_Learn
  6001  04C3  0008               	return
  6002  04C4                     __end_of_setSw_Main:	
  6003                           
  6004                           	psect	text18
  6005  1A3D                     __ptext18:	
  6006 ;; *************** function _setRF_Learn *****************
  6007 ;; Defined at:
  6008 ;;		line 23 in file "../src/RF_Control_B1.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  command         1    wreg     unsigned char 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  command         1    0[BANK0 ] unsigned char 
  6013 ;; Return value:  Size  Location     Type
  6014 ;;		None               void
  6015 ;; Registers used:
  6016 ;;		wreg
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;Total ram usage:        1 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; Hardware stack levels required when called:    5
  6029 ;; This function calls:
  6030 ;;		Nothing
  6031 ;; This function is called by:
  6032 ;;		_setSw_Main
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           
  6037                           ;psect for function _setRF_Learn
  6038  1A3D                     _setRF_Learn:	
  6039                           
  6040                           ;incstack = 0
  6041                           ; Regs used in _setRF_Learn: [wreg]
  6042                           ;setRF_Learn@command stored from wreg
  6043  1A3D  0020               	movlb	0	; select bank0
  6044  1A3E  00A0               	movwf	setRF_Learn@command
  6045                           
  6046                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  6047  1A3F  0820               	movf	setRF_Learn@command,w
  6048  1A40  0021               	movlb	1	; select bank1
  6049  1A41  133E               	bcf	_RF1^(0+128),6
  6050  1A42  1D03               	skipz
  6051  1A43  173E               	bsf	_RF1^(0+128),6
  6052  1A44  0008               	return
  6053  1A45                     __end_of_setRF_Learn:	
  6054                           
  6055                           	psect	text19
  6056  09EB                     __ptext19:	
  6057 ;; *************** function _Sw_DimmerOnFunc *****************
  6058 ;; Defined at:
  6059 ;;		line 241 in file "../src/Switch_B1.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;  sw              1    wreg     unsigned char 
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;  sw              1   67[BANK0 ] unsigned char 
  6064 ;;  Idle            1   66[BANK0 ] unsigned char 
  6065 ;; Return value:  Size  Location     Type
  6066 ;;		None               void
  6067 ;; Registers used:
  6068 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;Total ram usage:        2 bytes
  6079 ;; Hardware stack levels used:    1
  6080 ;; Hardware stack levels required when called:    9
  6081 ;; This function calls:
  6082 ;;		_setBuz
  6083 ;;		_setDimmerLights_Switch
  6084 ;;		_setDimmerLights_Trigger
  6085 ;;		_setRFSW_Status
  6086 ;;		_setRF_DimmerLights
  6087 ;;		_setTxData
  6088 ;; This function is called by:
  6089 ;;		_setSw_Main
  6090 ;; This function uses a non-reentrant model
  6091 ;;
  6092                           
  6093                           
  6094                           ;psect for function _Sw_DimmerOnFunc
  6095  09EB                     _Sw_DimmerOnFunc:	
  6096                           
  6097                           ;incstack = 0
  6098                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6099                           ;Sw_DimmerOnFunc@sw stored from wreg
  6100  09EB  0020               	movlb	0	; select bank0
  6101  09EC  00E3               	movwf	Sw_DimmerOnFunc@sw
  6102                           
  6103                           ;Switch_B1.c: 242: char Idle = 1;
  6104  09ED  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6105  09EE  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6106                           
  6107                           ;Switch_B1.c: 256: if (sw == 1) {
  6108  09EF  0863               	movf	Sw_DimmerOnFunc@sw,w
  6109  09F0  3A01               	xorlw	1
  6110  09F1  1D03               	skipz
  6111  09F2  29FD               	goto	l9482
  6112                           
  6113                           ;Switch_B1.c: 257: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6114  09F3  1003               	clrc
  6115  09F4  0022               	movlb	2	; select bank2
  6116  09F5  1DD4               	btfss	(_DimmerLights2^(0+256)+8),3
  6117  09F6  1403               	setc
  6118  09F7  3000               	movlw	0
  6119  09F8  1803               	btfsc	3,0
  6120  09F9  3001               	movlw	1
  6121  09FA  0020               	movlb	0	; select bank0
  6122  09FB  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6123                           
  6124                           ;Switch_B1.c: 258: } else if (sw == 2) {
  6125  09FC  2A0A               	goto	l9486
  6126  09FD                     l9482:	
  6127  09FD  0863               	movf	Sw_DimmerOnFunc@sw,w
  6128  09FE  3A02               	xorlw	2
  6129  09FF  1D03               	skipz
  6130  0A00  2A0A               	goto	l9486
  6131                           
  6132                           ;Switch_B1.c: 259: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6133  0A01  1003               	clrc
  6134  0A02  0022               	movlb	2	; select bank2
  6135  0A03  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  6136  0A04  1403               	setc
  6137  0A05  3000               	movlw	0
  6138  0A06  1803               	btfsc	3,0
  6139  0A07  3001               	movlw	1
  6140  0A08  0020               	movlb	0	; select bank0
  6141  0A09  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6142  0A0A                     l9486:	
  6143                           
  6144                           ;Switch_B1.c: 260: }
  6145                           ;Switch_B1.c: 263: if (Idle == 1) {
  6146  0A0A  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6147  0A0B  3A01               	xorlw	1
  6148  0A0C  1D03               	skipz
  6149  0A0D  0008               	return
  6150                           
  6151                           ;Switch_B1.c: 264: Sw->Flag = 1;
  6152  0A0E  086D               	movf	_Sw,w
  6153  0A0F  0086               	movwf	6
  6154  0A10  3001               	movlw	1	; select bank2/3
  6155  0A11  0087               	movwf	7
  6156  0A12  1781               	bsf	1,7
  6157                           
  6158                           ;Switch_B1.c: 265: setBuz(1, 100);
  6159  0A13  3064               	movlw	100
  6160  0A14  00A9               	movwf	setBuz@time
  6161  0A15  3000               	movlw	0
  6162  0A16  00AA               	movwf	setBuz@time+1
  6163  0A17  3001               	movlw	1
  6164  0A18  3195  25CA  3189   	fcall	_setBuz
  6165                           
  6166                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  6167  0A1B  0020               	movlb	0	; select bank0
  6168  0A1C  086D               	movf	_Sw,w
  6169  0A1D  0086               	movwf	6
  6170  0A1E  3001               	movlw	1	; select bank2/3
  6171  0A1F  0087               	movwf	7
  6172  0A20  1B01               	btfsc	1,6
  6173  0A21  2A4B               	goto	l9506
  6174                           
  6175                           ;Switch_B1.c: 267: Sw->Status = 1;
  6176  0A22  086D               	movf	_Sw,w
  6177  0A23  0086               	movwf	6
  6178  0A24  3001               	movlw	1	; select bank2/3
  6179  0A25  0087               	movwf	7
  6180  0A26  1701               	bsf	1,6
  6181                           
  6182                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  6183  0A27  01A2               	clrf	setRFSW_Status@command
  6184  0A28  0AA2               	incf	setRFSW_Status@command,f
  6185  0A29  0863               	movf	Sw_DimmerOnFunc@sw,w
  6186  0A2A  319B  2302  3189   	fcall	_setRFSW_Status
  6187                           
  6188                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  6189  0A2D  0020               	movlb	0	; select bank0
  6190  0A2E  01A2               	clrf	setDimmerLights_Trigger@command
  6191  0A2F  0AA2               	incf	setDimmerLights_Trigger@command,f
  6192  0A30  0863               	movf	Sw_DimmerOnFunc@sw,w
  6193  0A31  319B  234E  3189   	fcall	_setDimmerLights_Trigger
  6194                           
  6195                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  6196  0A34  0020               	movlb	0	; select bank0
  6197  0A35  01A2               	clrf	setDimmerLights_Switch@command
  6198  0A36  0AA2               	incf	setDimmerLights_Switch@command,f
  6199  0A37  0863               	movf	Sw_DimmerOnFunc@sw,w
  6200  0A38  319B  233E  3189   	fcall	_setDimmerLights_Switch
  6201                           
  6202                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  6203  0A3B  0020               	movlb	0	; select bank0
  6204  0A3C  086D               	movf	_Sw,w
  6205  0A3D  0086               	movwf	6
  6206  0A3E  3001               	movlw	1	; select bank2/3
  6207  0A3F  0087               	movwf	7
  6208  0A40  3000               	movlw	0
  6209  0A41  1B01               	btfsc	1,6
  6210  0A42  3001               	movlw	1
  6211  0A43  00DD               	movwf	setRF_DimmerLights@on
  6212  0A44  0863               	movf	Sw_DimmerOnFunc@sw,w
  6213  0A45  3189  2110  3189   	fcall	_setRF_DimmerLights
  6214                           
  6215                           ;Switch_B1.c: 274: setTxData();
  6216  0A48  318F  2741         	fcall	_setTxData
  6217                           
  6218                           ;Switch_B1.c: 276: } else {
  6219  0A4A  0008               	return
  6220  0A4B                     l9506:	
  6221                           
  6222                           ;Switch_B1.c: 277: Sw->Status = 0;
  6223  0A4B  0020               	movlb	0	; select bank0
  6224  0A4C  086D               	movf	_Sw,w
  6225  0A4D  0086               	movwf	6
  6226  0A4E  3001               	movlw	1	; select bank2/3
  6227  0A4F  0087               	movwf	7
  6228  0A50  1301               	bcf	1,6
  6229                           
  6230                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  6231  0A51  086D               	movf	_Sw,w
  6232  0A52  0086               	movwf	6
  6233  0A53  3001               	movlw	1	; select bank2/3
  6234  0A54  0087               	movwf	7
  6235  0A55  3000               	movlw	0
  6236  0A56  1B01               	btfsc	1,6
  6237  0A57  3001               	movlw	1
  6238  0A58  00A2               	movwf	setRFSW_Status@command
  6239  0A59  0863               	movf	Sw_DimmerOnFunc@sw,w
  6240  0A5A  319B  2302         	fcall	_setRFSW_Status
  6241  0A5C  0008               	return
  6242  0A5D                     __end_of_Sw_DimmerOnFunc:	
  6243                           
  6244                           	psect	text20
  6245  097C                     __ptext20:	
  6246 ;; *************** function _Sw_DimmerOffFunc *****************
  6247 ;; Defined at:
  6248 ;;		line 284 in file "../src/Switch_B1.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  sw              1    wreg     unsigned char 
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;  sw              1   68[BANK0 ] unsigned char 
  6253 ;; Return value:  Size  Location     Type
  6254 ;;		None               void
  6255 ;; Registers used:
  6256 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;Total ram usage:        3 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    9
  6269 ;; This function calls:
  6270 ;;		_setDelayOff_GO
  6271 ;;		_setDimmerLights_AdjGo
  6272 ;;		_setDimmerLights_Switch
  6273 ;;		_setDimmerLights_Trigger
  6274 ;;		_setDimmerLights_TriggerAdj
  6275 ;;		_setRF_DimmerLights
  6276 ;;		_setTxData
  6277 ;; This function is called by:
  6278 ;;		_setSw_Main
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           
  6283                           ;psect for function _Sw_DimmerOffFunc
  6284  097C                     _Sw_DimmerOffFunc:	
  6285                           
  6286                           ;incstack = 0
  6287                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6288                           ;Sw_DimmerOffFunc@sw stored from wreg
  6289  097C  0020               	movlb	0	; select bank0
  6290  097D  00E4               	movwf	Sw_DimmerOffFunc@sw
  6291                           
  6292                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  6293  097E  086D               	movf	_Sw,w
  6294  097F  0086               	movwf	6
  6295  0980  3001               	movlw	1	; select bank2/3
  6296  0981  0087               	movwf	7
  6297  0982  1F81               	btfss	1,7
  6298  0983  0008               	return
  6299                           
  6300                           ;Switch_B1.c: 286: Sw->Flag = 0;
  6301  0984  086D               	movf	_Sw,w
  6302  0985  0086               	movwf	6
  6303  0986  3001               	movlw	1	; select bank2/3
  6304  0987  0087               	movwf	7
  6305  0988  1381               	bcf	1,7
  6306                           
  6307                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  6308  0989  086D               	movf	_Sw,w
  6309  098A  0086               	movwf	6
  6310  098B  3001               	movlw	1	; select bank2/3
  6311  098C  0087               	movwf	7
  6312  098D  1F01               	btfss	1,6
  6313  098E  29C7               	goto	l9550
  6314                           
  6315                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  6316  098F  0A6D               	incf	_Sw,w
  6317  0990  0086               	movwf	6
  6318  0991  3001               	movlw	1	; select bank2/3
  6319  0992  0087               	movwf	7
  6320  0993  1C01               	btfss	1,0
  6321  0994  0008               	return
  6322                           
  6323                           ;Switch_B1.c: 289: Sw->Adj = 0;
  6324  0995  0A6D               	incf	_Sw,w
  6325  0996  0086               	movwf	6
  6326  0997  3001               	movlw	1	; select bank2/3
  6327  0998  0087               	movwf	7
  6328  0999  1001               	bcf	1,0
  6329                           
  6330                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  6331  099A  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6332  099B  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6333  099C  0864               	movf	Sw_DimmerOffFunc@sw,w
  6334  099D  319B  238E  3189   	fcall	_setDimmerLights_TriggerAdj
  6335                           
  6336                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  6337  09A0  0020               	movlb	0	; select bank0
  6338  09A1  01A2               	clrf	setDimmerLights_AdjGo@command
  6339  09A2  0864               	movf	Sw_DimmerOffFunc@sw,w
  6340  09A3  319B  237E  3189   	fcall	_setDimmerLights_AdjGo
  6341                           
  6342                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  6343  09A6  0020               	movlb	0	; select bank0
  6344  09A7  0864               	movf	Sw_DimmerOffFunc@sw,w
  6345  09A8  3E1A               	addlw	26
  6346  09A9  076C               	addwf	_product,w
  6347  09AA  00E2               	movwf	??_Sw_DimmerOffFunc
  6348  09AB  0862               	movf	??_Sw_DimmerOffFunc,w
  6349  09AC  0086               	movwf	6
  6350  09AD  3002               	movlw	2	; select bank4/5
  6351  09AE  0087               	movwf	7
  6352  09AF  0801               	movf	1,w
  6353  09B0  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6354  09B1  086C               	movf	_product,w
  6355  09B2  3E11               	addlw	17
  6356  09B3  0086               	movwf	6
  6357  09B4  3002               	movlw	2	; select bank4/5
  6358  09B5  0087               	movwf	7
  6359  09B6  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6360  09B7  0081               	movwf	1
  6361                           
  6362                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  6363  09B8  086D               	movf	_Sw,w
  6364  09B9  0086               	movwf	6
  6365  09BA  3001               	movlw	1	; select bank2/3
  6366  09BB  0087               	movwf	7
  6367  09BC  3000               	movlw	0
  6368  09BD  1B01               	btfsc	1,6
  6369  09BE  3001               	movlw	1
  6370  09BF  00DD               	movwf	setRF_DimmerLights@on
  6371  09C0  0864               	movf	Sw_DimmerOffFunc@sw,w
  6372  09C1  3189  2110  3189   	fcall	_setRF_DimmerLights
  6373                           
  6374                           ;Switch_B1.c: 295: setTxData();
  6375  09C4  318F  2741         	fcall	_setTxData
  6376                           
  6377                           ;Switch_B1.c: 297: }
  6378                           ;Switch_B1.c: 298: } else {
  6379  09C6  0008               	return
  6380  09C7                     l9550:	
  6381                           
  6382                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  6383  09C7  0020               	movlb	0	; select bank0
  6384  09C8  01A2               	clrf	setDimmerLights_Trigger@command
  6385  09C9  0AA2               	incf	setDimmerLights_Trigger@command,f
  6386  09CA  0864               	movf	Sw_DimmerOffFunc@sw,w
  6387  09CB  319B  234E  3189   	fcall	_setDimmerLights_Trigger
  6388                           
  6389                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  6390  09CE  0020               	movlb	0	; select bank0
  6391  09CF  01A2               	clrf	setDimmerLights_Switch@command
  6392  09D0  0864               	movf	Sw_DimmerOffFunc@sw,w
  6393  09D1  319B  233E  3189   	fcall	_setDimmerLights_Switch
  6394                           
  6395                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  6396  09D4  0020               	movlb	0	; select bank0
  6397  09D5  01AA               	clrf	setDelayOff_GO@command
  6398  09D6  01AB               	clrf	setDelayOff_GO@value
  6399  09D7  0864               	movf	Sw_DimmerOffFunc@sw,w
  6400  09D8  3196  26DC  3189   	fcall	_setDelayOff_GO
  6401                           
  6402                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  6403  09DB  0020               	movlb	0	; select bank0
  6404  09DC  086D               	movf	_Sw,w
  6405  09DD  0086               	movwf	6
  6406  09DE  3001               	movlw	1	; select bank2/3
  6407  09DF  0087               	movwf	7
  6408  09E0  3000               	movlw	0
  6409  09E1  1B01               	btfsc	1,6
  6410  09E2  3001               	movlw	1
  6411  09E3  00DD               	movwf	setRF_DimmerLights@on
  6412  09E4  0864               	movf	Sw_DimmerOffFunc@sw,w
  6413  09E5  3189  2110  3189   	fcall	_setRF_DimmerLights
  6414                           
  6415                           ;Switch_B1.c: 304: setTxData();
  6416  09E8  318F  2741         	fcall	_setTxData
  6417  09EA  0008               	return
  6418  09EB                     __end_of_Sw_DimmerOffFunc:	
  6419                           
  6420                           	psect	text21
  6421  147D                     __ptext21:	
  6422 ;; *************** function _Sw_DimmerAdjFunc *****************
  6423 ;; Defined at:
  6424 ;;		line 311 in file "../src/Switch_B1.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  sw              1    wreg     unsigned char 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  sw              1    5[BANK0 ] unsigned char 
  6429 ;;  Idle            1    4[BANK0 ] unsigned char 
  6430 ;; Return value:  Size  Location     Type
  6431 ;;		None               void
  6432 ;; Registers used:
  6433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;Total ram usage:        2 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    7
  6446 ;; This function calls:
  6447 ;;		_setDimmerLights_AdjGo
  6448 ;;		_setDimmerLights_TriggerAdj
  6449 ;;		_setRFSW_Status
  6450 ;; This function is called by:
  6451 ;;		_setSw_Main
  6452 ;; This function uses a non-reentrant model
  6453 ;;
  6454                           
  6455                           
  6456                           ;psect for function _Sw_DimmerAdjFunc
  6457  147D                     _Sw_DimmerAdjFunc:	
  6458                           
  6459                           ;incstack = 0
  6460                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6461                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6462  147D  0020               	movlb	0	; select bank0
  6463  147E  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6464                           
  6465                           ;Switch_B1.c: 312: char Idle = 1;
  6466  147F  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6467  1480  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6468                           
  6469                           ;Switch_B1.c: 325: if (sw == 1) {
  6470  1481  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6471  1482  3A01               	xorlw	1
  6472  1483  1D03               	skipz
  6473  1484  2C8F               	goto	l9516
  6474                           
  6475                           ;Switch_B1.c: 326: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6476  1485  1003               	clrc
  6477  1486  0022               	movlb	2	; select bank2
  6478  1487  1DD4               	btfss	(_DimmerLights2^(0+256)+8),3
  6479  1488  1403               	setc
  6480  1489  3000               	movlw	0
  6481  148A  1803               	btfsc	3,0
  6482  148B  3001               	movlw	1
  6483  148C  0020               	movlb	0	; select bank0
  6484  148D  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6485                           
  6486                           ;Switch_B1.c: 327: } else if (sw == 2) {
  6487  148E  2C9C               	goto	l9520
  6488  148F                     l9516:	
  6489  148F  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6490  1490  3A02               	xorlw	2
  6491  1491  1D03               	skipz
  6492  1492  2C9C               	goto	l9520
  6493                           
  6494                           ;Switch_B1.c: 328: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6495  1493  1003               	clrc
  6496  1494  0022               	movlb	2	; select bank2
  6497  1495  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  6498  1496  1403               	setc
  6499  1497  3000               	movlw	0
  6500  1498  1803               	btfsc	3,0
  6501  1499  3001               	movlw	1
  6502  149A  0020               	movlb	0	; select bank0
  6503  149B  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6504  149C                     l9520:	
  6505                           
  6506                           ;Switch_B1.c: 329: }
  6507                           ;Switch_B1.c: 332: if (Idle == 1) {
  6508  149C  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6509  149D  3A01               	xorlw	1
  6510  149E  1D03               	skipz
  6511  149F  0008               	return
  6512                           
  6513                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  6514  14A0  086D               	movf	_Sw,w
  6515  14A1  0086               	movwf	6
  6516  14A2  3001               	movlw	1	; select bank2/3
  6517  14A3  0087               	movwf	7
  6518  14A4  1F81               	btfss	1,7
  6519  14A5  0008               	return
  6520                           
  6521                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  6522  14A6  086D               	movf	_Sw,w
  6523  14A7  0086               	movwf	6
  6524  14A8  3001               	movlw	1	; select bank2/3
  6525  14A9  0087               	movwf	7
  6526  14AA  1581               	bsf	1,3
  6527                           
  6528                           ;Switch_B1.c: 335: Sw->Adj = 1;
  6529  14AB  0A6D               	incf	_Sw,w
  6530  14AC  0086               	movwf	6
  6531  14AD  3001               	movlw	1	; select bank2/3
  6532  14AE  0087               	movwf	7
  6533  14AF  1401               	bsf	1,0
  6534                           
  6535                           ;Switch_B1.c: 336: Sw->Status = 1;
  6536  14B0  086D               	movf	_Sw,w
  6537  14B1  0086               	movwf	6
  6538  14B2  3001               	movlw	1	; select bank2/3
  6539  14B3  0087               	movwf	7
  6540  14B4  1701               	bsf	1,6
  6541                           
  6542                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  6543  14B5  01A2               	clrf	setRFSW_Status@command
  6544  14B6  0AA2               	incf	setRFSW_Status@command,f
  6545  14B7  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6546  14B8  319B  2302  3194   	fcall	_setRFSW_Status
  6547                           
  6548                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  6549  14BB  0020               	movlb	0	; select bank0
  6550  14BC  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6551  14BD  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6552  14BE  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6553  14BF  319B  238E  3194   	fcall	_setDimmerLights_TriggerAdj
  6554                           
  6555                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  6556  14C2  0020               	movlb	0	; select bank0
  6557  14C3  01A2               	clrf	setDimmerLights_AdjGo@command
  6558  14C4  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6559  14C5  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6560  14C6  319B  237E         	fcall	_setDimmerLights_AdjGo
  6561  14C8  0008               	return
  6562  14C9                     __end_of_Sw_DimmerAdjFunc:	
  6563                           
  6564                           	psect	text22
  6565  1B8E                     __ptext22:	
  6566 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6567 ;; Defined at:
  6568 ;;		line 720 in file "../src/Dimmer_B1.c"
  6569 ;; Parameters:    Size  Location     Type
  6570 ;;  lights          1    wreg     unsigned char 
  6571 ;;  command         1    2[BANK0 ] unsigned char 
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;  lights          1    3[BANK0 ] unsigned char 
  6574 ;; Return value:  Size  Location     Type
  6575 ;;		None               void
  6576 ;; Registers used:
  6577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6583 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;Total ram usage:        2 bytes
  6588 ;; Hardware stack levels used:    1
  6589 ;; Hardware stack levels required when called:    6
  6590 ;; This function calls:
  6591 ;;		_DimmerLightsPointSelect
  6592 ;; This function is called by:
  6593 ;;		_Sw_DimmerOffFunc
  6594 ;;		_Sw_DimmerAdjFunc
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           
  6599                           ;psect for function _setDimmerLights_TriggerAdj
  6600  1B8E                     _setDimmerLights_TriggerAdj:	
  6601                           
  6602                           ;incstack = 0
  6603                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6604                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6605  1B8E  0020               	movlb	0	; select bank0
  6606  1B8F  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6607                           
  6608                           ;Dimmer_B1.c: 722: DimmerLightsPointSelect(lights);
  6609  1B90  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6610  1B91  319C  2408         	fcall	_DimmerLightsPointSelect
  6611                           
  6612                           ;Dimmer_B1.c: 723: DimmerLights->TriggerAdj = command;
  6613  1B93  0878               	movf	_DimmerLights,w
  6614  1B94  3E08               	addlw	8
  6615  1B95  0086               	movwf	6
  6616  1B96  3001               	movlw	1	; select bank2/3
  6617  1B97  0087               	movwf	7
  6618  1B98  0020               	movlb	0	; select bank0
  6619  1B99  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6620  1B9A  1201               	bcf	1,4
  6621  1B9B  1D03               	skipz
  6622  1B9C  1601               	bsf	1,4
  6623  1B9D  0008               	return
  6624  1B9E                     __end_of_setDimmerLights_TriggerAdj:	
  6625                           
  6626                           	psect	text23
  6627  1B7E                     __ptext23:	
  6628 ;; *************** function _setDimmerLights_AdjGo *****************
  6629 ;; Defined at:
  6630 ;;		line 708 in file "../src/Dimmer_B1.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;  lights          1    wreg     unsigned char 
  6633 ;;  command         1    2[BANK0 ] unsigned char 
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;  lights          1    3[BANK0 ] unsigned char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;		None               void
  6638 ;; Registers used:
  6639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6645 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;Total ram usage:        2 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    6
  6652 ;; This function calls:
  6653 ;;		_DimmerLightsPointSelect
  6654 ;; This function is called by:
  6655 ;;		_Sw_DimmerOffFunc
  6656 ;;		_Sw_DimmerAdjFunc
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           
  6661                           ;psect for function _setDimmerLights_AdjGo
  6662  1B7E                     _setDimmerLights_AdjGo:	
  6663                           
  6664                           ;incstack = 0
  6665                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6666                           ;setDimmerLights_AdjGo@lights stored from wreg
  6667  1B7E  0020               	movlb	0	; select bank0
  6668  1B7F  00A3               	movwf	setDimmerLights_AdjGo@lights
  6669                           
  6670                           ;Dimmer_B1.c: 710: DimmerLightsPointSelect(lights);
  6671  1B80  0823               	movf	setDimmerLights_AdjGo@lights,w
  6672  1B81  319C  2408         	fcall	_DimmerLightsPointSelect
  6673                           
  6674                           ;Dimmer_B1.c: 711: DimmerLights->AdjGo = command;
  6675  1B83  0878               	movf	_DimmerLights,w
  6676  1B84  3E08               	addlw	8
  6677  1B85  0086               	movwf	6
  6678  1B86  3001               	movlw	1	; select bank2/3
  6679  1B87  0087               	movwf	7
  6680  1B88  0020               	movlb	0	; select bank0
  6681  1B89  0822               	movf	setDimmerLights_AdjGo@command,w
  6682  1B8A  1181               	bcf	1,3
  6683  1B8B  1D03               	skipz
  6684  1B8C  1581               	bsf	1,3
  6685  1B8D  0008               	return
  6686  1B8E                     __end_of_setDimmerLights_AdjGo:	
  6687                           
  6688                           	psect	text24
  6689  1AD9                     __ptext24:	
  6690 ;; *************** function _Switch_Initialization *****************
  6691 ;; Defined at:
  6692 ;;		line 41 in file "../src/Switch_B1.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;		None
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;		None               void
  6699 ;; Registers used:
  6700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;Total ram usage:        0 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:    8
  6713 ;; This function calls:
  6714 ;;		_TouchPower
  6715 ;;		_setSw_Initialization
  6716 ;; This function is called by:
  6717 ;;		_main
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           
  6722                           ;psect for function _Switch_Initialization
  6723  1AD9                     _Switch_Initialization:	
  6724                           
  6725                           ;Switch_B1.c: 42: TouchPower();
  6726                           
  6727                           ;incstack = 0
  6728                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6729  1AD9  319B  2320  319A   	fcall	_TouchPower
  6730                           
  6731                           ;Switch_B1.c: 44: WPUB1 = 0;
  6732  1ADC  0024               	movlb	4	; select bank4
  6733  1ADD  108D               	bcf	13,1	;volatile
  6734                           
  6735                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6736  1ADE  3001               	movlw	1
  6737  1ADF  319A  2235  319A   	fcall	_setSw_Initialization
  6738                           
  6739                           ;Switch_B1.c: 57: setSw_Initialization(2);
  6740  1AE2  3002               	movlw	2
  6741  1AE3  319A  2235         	fcall	_setSw_Initialization
  6742  1AE5  0008               	return
  6743  1AE6                     __end_of_Switch_Initialization:	
  6744                           
  6745                           	psect	text25
  6746  1A35                     __ptext25:	
  6747 ;; *************** function _setSw_Initialization *****************
  6748 ;; Defined at:
  6749 ;;		line 83 in file "../src/Switch_B1.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;  sw              1    wreg     unsigned char 
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;  sw              1    4[BANK0 ] unsigned char 
  6754 ;; Return value:  Size  Location     Type
  6755 ;;		None               void
  6756 ;; Registers used:
  6757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;Total ram usage:        1 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    7
  6770 ;; This function calls:
  6771 ;;		_setLED
  6772 ;; This function is called by:
  6773 ;;		_Switch_Initialization
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           
  6778                           ;psect for function _setSw_Initialization
  6779  1A35                     _setSw_Initialization:	
  6780                           
  6781                           ;incstack = 0
  6782                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6783                           ;setSw_Initialization@sw stored from wreg
  6784  1A35  0020               	movlb	0	; select bank0
  6785  1A36  00A4               	movwf	setSw_Initialization@sw
  6786                           
  6787                           ;Switch_B1.c: 84: setLED(sw, 1);
  6788  1A37  01A2               	clrf	setLED@command
  6789  1A38  0AA2               	incf	setLED@command,f
  6790  1A39  0824               	movf	setSw_Initialization@sw,w
  6791  1A3A  3196  267E         	fcall	_setLED
  6792  1A3C  0008               	return
  6793  1A3D                     __end_of_setSw_Initialization:	
  6794                           
  6795                           	psect	text26
  6796  1B20                     __ptext26:	
  6797 ;; *************** function _TouchPower *****************
  6798 ;; Defined at:
  6799 ;;		line 10 in file "../src/Switch_B1.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;		None
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;		None
  6804 ;; Return value:  Size  Location     Type
  6805 ;;		None               void
  6806 ;; Registers used:
  6807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6817 ;;Total ram usage:        0 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    6
  6820 ;; This function calls:
  6821 ;;		_Timeout_Counter
  6822 ;;		_set_TimeoutCleared
  6823 ;; This function is called by:
  6824 ;;		_Switch_Initialization
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           
  6829                           ;psect for function _TouchPower
  6830  1B20                     _TouchPower:	
  6831                           
  6832                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6833                           
  6834                           ;incstack = 0
  6835                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6836  1B20  2B26               	goto	l10068
  6837  1B21                     l2691:	
  6838                           
  6839                           ;Switch_B1.c: 12: RC5 = 1;
  6840  1B21  0020               	movlb	0	; select bank0
  6841  1B22  168E               	bsf	14,5	;volatile
  6842                           
  6843                           ;Switch_B1.c: 13: Timeout_Counter();
  6844  1B23  319C  2457  319B   	fcall	_Timeout_Counter
  6845  1B26                     l10068:	
  6846  1B26  0020               	movlb	0	; select bank0
  6847  1B27  1A8E               	btfsc	14,5	;volatile
  6848  1B28  2B2C               	goto	l10072
  6849  1B29  0021               	movlb	1	; select bank1
  6850  1B2A  1D2F               	btfss	(_myMain^(0+128)+15),2
  6851  1B2B  2B21               	goto	l2691
  6852  1B2C                     l10072:	
  6853                           
  6854                           ;Switch_B1.c: 14: }
  6855                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6856  1B2C  3199  21E2         	fcall	_set_TimeoutCleared
  6857  1B2E  0008               	return
  6858  1B2F                     __end_of_TouchPower:	
  6859                           
  6860                           	psect	text27
  6861  19C9                     __ptext27:	
  6862 ;; *************** function _RF_Main *****************
  6863 ;; Defined at:
  6864 ;;		line 16 in file "../src/RF_Control_B1.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;		None
  6867 ;; Auto vars:     Size  Location     Type
  6868 ;;		None
  6869 ;; Return value:  Size  Location     Type
  6870 ;;		None               void
  6871 ;; Registers used:
  6872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6873 ;; Tracked objects:
  6874 ;;		On entry : 0/0
  6875 ;;		On exit  : 0/0
  6876 ;;		Unchanged: 0/0
  6877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6882 ;;Total ram usage:        0 bytes
  6883 ;; Hardware stack levels used:    1
  6884 ;; Hardware stack levels required when called:   14
  6885 ;; This function calls:
  6886 ;;		_setRF_Main
  6887 ;; This function is called by:
  6888 ;;		_main
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           
  6893                           ;psect for function _RF_Main
  6894  19C9                     _RF_Main:	
  6895                           
  6896                           ;RF_Control_B1.c: 18: setRF_Main();
  6897                           
  6898                           ;incstack = 0
  6899                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6900  19C9  3185  25BA         	fcall	_setRF_Main
  6901  19CB  0008               	return
  6902  19CC                     __end_of_RF_Main:	
  6903                           
  6904                           	psect	text28
  6905  05BA                     __ptext28:	
  6906 ;; *************** function _setRF_Main *****************
  6907 ;; Defined at:
  6908 ;;		line 52 in file "../src/RF_Control_B1.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;		None
  6911 ;; Auto vars:     Size  Location     Type
  6912 ;;  Receive_OK      1    0        unsigned char 
  6913 ;;  loop_f          1    0        unsigned char 
  6914 ;; Return value:  Size  Location     Type
  6915 ;;		None               void
  6916 ;; Registers used:
  6917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6918 ;; Tracked objects:
  6919 ;;		On entry : 0/0
  6920 ;;		On exit  : 0/0
  6921 ;;		Unchanged: 0/0
  6922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6925 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;Total ram usage:        5 bytes
  6928 ;; Hardware stack levels used:    1
  6929 ;; Hardware stack levels required when called:   13
  6930 ;; This function calls:
  6931 ;;		_CC2500_RxData
  6932 ;;		_CC2500_TxData
  6933 ;;		_CC2500_WriteCommand
  6934 ;;		___wmul
  6935 ;;		_getBuz_GO
  6936 ;;		_getRxData
  6937 ;; This function is called by:
  6938 ;;		_RF_Main
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           
  6943                           ;psect for function _setRF_Main
  6944  05BA                     _setRF_Main:	
  6945                           
  6946                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  6947                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6948                           
  6949                           ;incstack = 0
  6950                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6951  05BA  0021               	movlb	1	; select bank1
  6952  05BB  1C3E               	btfss	_RF1^(0+128),0
  6953  05BC  0008               	return
  6954                           
  6955                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6956  05BD  3190  2066  3185   	fcall	_getBuz_GO
  6957  05C0  0020               	movlb	0	; select bank0
  6958  05C1  0821               	movf	?_getBuz_GO+1,w
  6959  05C2  0420               	iorwf	?_getBuz_GO,w
  6960  05C3  1D03               	skipz
  6961  05C4  0008               	return
  6962                           
  6963                           ;RF_Control_B1.c: 64: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6964  05C5  01EB               	clrf	_setRF_Main$5900
  6965  05C6  0AEB               	incf	_setRF_Main$5900,f
  6966  05C7  1F0C               	btfss	12,6	;volatile
  6967  05C8  1A0C               	btfsc	12,4	;volatile
  6968  05C9  2DCE               	goto	l9958
  6969  05CA  1C0C               	btfss	12,0	;volatile
  6970  05CB  188D               	btfsc	13,1	;volatile
  6971  05CC  2DCE               	goto	l9958
  6972  05CD  01EB               	clrf	_setRF_Main$5900
  6973  05CE                     l9958:	
  6974  05CE  086B               	movf	_setRF_Main$5900,w
  6975  05CF  0021               	movlb	1	; select bank1
  6976  05D0  13BE               	bcf	_RF1^(0+128),7
  6977  05D1  1D03               	skipz
  6978  05D2  17BE               	bsf	_RF1^(0+128),7
  6979                           
  6980                           ;RF_Control_B1.c: 70: if (RF1.Key == 1 && RF1.Learn == 0) {
  6981  05D3  1BBE               	btfsc	_RF1^(0+128),7
  6982  05D4  1B3E               	btfsc	_RF1^(0+128),6
  6983  05D5  2DDA               	goto	l2263
  6984                           
  6985                           ;RF_Control_B1.c: 71: RF1.Count = 0;
  6986  05D6  01C0               	clrf	(_RF1^(0+128)+2)
  6987                           
  6988                           ;RF_Control_B1.c: 72: RF1.Run = 1;
  6989  05D7  14BF               	bsf	(_RF1^(0+128)+1),1
  6990                           
  6991                           ;RF_Control_B1.c: 73: RF1.RxStatus = 0;
  6992  05D8  11BE               	bcf	_RF1^(0+128),3
  6993                           
  6994                           ;RF_Control_B1.c: 75: } else {
  6995  05D9  0008               	return
  6996  05DA                     l2263:	
  6997                           
  6998                           ;RF_Control_B1.c: 76: if (RF1.Run == 1 && RF1.Learn == 0) {
  6999  05DA  18BF               	btfsc	(_RF1^(0+128)+1),1
  7000  05DB  1B3E               	btfsc	_RF1^(0+128),6
  7001  05DC  2DEA               	goto	l9980
  7002                           
  7003                           ;RF_Control_B1.c: 77: RF1.Count++;
  7004  05DD  3001               	movlw	1
  7005  05DE  0020               	movlb	0	; select bank0
  7006  05DF  00E7               	movwf	??_setRF_Main
  7007  05E0  0867               	movf	??_setRF_Main,w
  7008  05E1  0021               	movlb	1	; select bank1
  7009  05E2  07C0               	addwf	(_RF1^(0+128)+2),f
  7010                           
  7011                           ;RF_Control_B1.c: 78: if (RF1.Count == RF1.RunTime) {
  7012  05E3  0840               	movf	(_RF1^(0+128)+2),w
  7013  05E4  0643               	xorwf	(_RF1^(0+128)+5),w
  7014  05E5  1D03               	skipz
  7015  05E6  2E45               	goto	l10034
  7016                           
  7017                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7018  05E7  01C0               	clrf	(_RF1^(0+128)+2)
  7019                           
  7020                           ;RF_Control_B1.c: 80: RF1.Run = 0;
  7021  05E8  10BF               	bcf	(_RF1^(0+128)+1),1
  7022                           
  7023                           ;RF_Control_B1.c: 81: }
  7024                           ;RF_Control_B1.c: 82: } else {
  7025  05E9  2E45               	goto	l10034
  7026  05EA                     l9980:	
  7027                           
  7028                           ;RF_Control_B1.c: 83: RF1.Count = 0;
  7029  05EA  01C0               	clrf	(_RF1^(0+128)+2)
  7030                           
  7031                           ;RF_Control_B1.c: 84: RF1.Run = 0;
  7032  05EB  10BF               	bcf	(_RF1^(0+128)+1),1
  7033                           
  7034                           ;RF_Control_B1.c: 86: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  7035  05EC  193E               	btfsc	_RF1^(0+128),2
  7036  05ED  1B3E               	btfsc	_RF1^(0+128),6
  7037  05EE  2DF6               	goto	l2268
  7038                           
  7039                           ;RF_Control_B1.c: 87: RF1.TransceiveGO = 0;
  7040  05EF  113E               	bcf	_RF1^(0+128),2
  7041                           
  7042                           ;RF_Control_B1.c: 88: RF1.RxStatus = 0;
  7043  05F0  11BE               	bcf	_RF1^(0+128),3
  7044                           
  7045                           ;RF_Control_B1.c: 89: RF1.ReceiveGO = 0;
  7046  05F1  10BE               	bcf	_RF1^(0+128),1
  7047                           
  7048                           ;RF_Control_B1.c: 94: CC2500_TxData();
  7049  05F2  3197  279C  3185   	fcall	_CC2500_TxData
  7050                           
  7051                           ;RF_Control_B1.c: 96: } else {
  7052  05F5  2E45               	goto	l10034
  7053  05F6                     l2268:	
  7054                           
  7055                           ;RF_Control_B1.c: 98: if (RF1.RxStatus == 1) {
  7056  05F6  1DBE               	btfss	_RF1^(0+128),3
  7057  05F7  2E34               	goto	l2270
  7058                           
  7059                           ;RF_Control_B1.c: 99: CC2500_RxData();
  7060  05F8  318A  22D0  3185   	fcall	_CC2500_RxData
  7061                           
  7062                           ;RF_Control_B1.c: 100: if (RF1.ReceiveGO == 1) {
  7063  05FB  0021               	movlb	1	; select bank1
  7064  05FC  1CBE               	btfss	_RF1^(0+128),1
  7065  05FD  2E45               	goto	l10034
  7066                           
  7067                           ;RF_Control_B1.c: 101: RF1.ReceiveGO = 0;
  7068  05FE  10BE               	bcf	_RF1^(0+128),1
  7069                           
  7070                           ;RF_Control_B1.c: 102: RF1.Correction = 0;
  7071  05FF  12BF               	bcf	(_RF1^(0+128)+1),5
  7072                           
  7073                           ;RF_Control_B1.c: 103: RF1.CorrectionCounter = 0;
  7074  0600  01C5               	clrf	(_RF1^(0+128)+7)
  7075  0601  01C6               	clrf	((_RF1+1)^(0+128)+7)
  7076                           
  7077                           ;RF_Control_B1.c: 111: getRxData();
  7078  0602  3188  203C  3185   	fcall	_getRxData
  7079                           
  7080                           ;RF_Control_B1.c: 114: RF1.Run = 1;
  7081  0605  0021               	movlb	1	; select bank1
  7082  0606  14BF               	bsf	(_RF1^(0+128)+1),1
  7083                           
  7084                           ;RF_Control_B1.c: 115: RB5 = RB5 == 1 ? 0 : 1;
  7085  0607  3020               	movlw	32
  7086  0608  0020               	movlb	0	; select bank0
  7087  0609  068D               	xorwf	13,f
  7088                           
  7089                           ;RF_Control_B1.c: 116: if (RF1.Checked == 1) {
  7090  060A  0021               	movlb	1	; select bank1
  7091  060B  1DBF               	btfss	(_RF1^(0+128)+1),3
  7092  060C  2E19               	goto	l10014
  7093                           
  7094                           ;RF_Control_B1.c: 117: if (RF1.RunTime > 20) {
  7095  060D  3015               	movlw	21
  7096  060E  0243               	subwf	(_RF1^(0+128)+5),w
  7097  060F  1C03               	skipc
  7098  0610  2E17               	goto	l10012
  7099                           
  7100                           ;RF_Control_B1.c: 118: RF1.RunTime = 20;
  7101  0611  3014               	movlw	20
  7102  0612  0020               	movlb	0	; select bank0
  7103  0613  00E7               	movwf	??_setRF_Main
  7104  0614  0867               	movf	??_setRF_Main,w
  7105  0615  0021               	movlb	1	; select bank1
  7106  0616  00C3               	movwf	(_RF1^(0+128)+5)
  7107  0617                     l10012:	
  7108                           
  7109                           ;RF_Control_B1.c: 119: }
  7110                           ;RF_Control_B1.c: 120: RF1.CheckCount = 0;
  7111  0617  01C1               	clrf	(_RF1^(0+128)+3)
  7112                           
  7113                           ;RF_Control_B1.c: 121: } else {
  7114  0618  2E45               	goto	l10034
  7115  0619                     l10014:	
  7116                           
  7117                           ;RF_Control_B1.c: 123: RF1.CheckCount++;
  7118  0619  3001               	movlw	1
  7119  061A  0020               	movlb	0	; select bank0
  7120  061B  00E7               	movwf	??_setRF_Main
  7121  061C  0867               	movf	??_setRF_Main,w
  7122  061D  0021               	movlb	1	; select bank1
  7123  061E  07C1               	addwf	(_RF1^(0+128)+3),f
  7124                           
  7125                           ;RF_Control_B1.c: 124: if (RF1.CheckCount == 2) {
  7126  061F  0841               	movf	(_RF1^(0+128)+3),w
  7127  0620  3A02               	xorlw	2
  7128  0621  1D03               	skipz
  7129  0622  2E45               	goto	l10034
  7130                           
  7131                           ;RF_Control_B1.c: 125: RF1.CheckCount = 0;
  7132  0623  01C1               	clrf	(_RF1^(0+128)+3)
  7133                           
  7134                           ;RF_Control_B1.c: 126: RF1.CheckedCounter = 0;
  7135  0624  01C2               	clrf	(_RF1^(0+128)+4)
  7136                           
  7137                           ;RF_Control_B1.c: 127: if (RF1.RxChecked == 0) {
  7138  0625  1A3F               	btfsc	(_RF1^(0+128)+1),4
  7139  0626  2E29               	goto	l10024
  7140                           
  7141                           ;RF_Control_B1.c: 128: RF1.RxChecked = 1;
  7142  0627  163F               	bsf	(_RF1^(0+128)+1),4
  7143                           
  7144                           ;RF_Control_B1.c: 129: } else {
  7145  0628  2E45               	goto	l10034
  7146  0629                     l10024:	
  7147                           
  7148                           ;RF_Control_B1.c: 130: if (RF1.RunTime < 100) {
  7149  0629  3064               	movlw	100
  7150  062A  0243               	subwf	(_RF1^(0+128)+5),w
  7151  062B  1803               	skipnc
  7152  062C  2E45               	goto	l10034
  7153                           
  7154                           ;RF_Control_B1.c: 131: RF1.RunTime += 10;
  7155  062D  300A               	movlw	10
  7156  062E  0020               	movlb	0	; select bank0
  7157  062F  00E7               	movwf	??_setRF_Main
  7158  0630  0867               	movf	??_setRF_Main,w
  7159  0631  0021               	movlb	1	; select bank1
  7160  0632  07C3               	addwf	(_RF1^(0+128)+5),f
  7161                           
  7162                           ;RF_Control_B1.c: 132: }
  7163                           ;RF_Control_B1.c: 133: }
  7164                           ;RF_Control_B1.c: 134: }
  7165                           ;RF_Control_B1.c: 135: }
  7166                           ;RF_Control_B1.c: 136: }
  7167                           ;RF_Control_B1.c: 137: } else {
  7168  0633  2E45               	goto	l10034
  7169  0634                     l2270:	
  7170                           
  7171                           ;RF_Control_B1.c: 139: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7172  0634  1DBE               	btfss	_RF1^(0+128),3
  7173  0635  18BE               	btfsc	_RF1^(0+128),1
  7174  0636  2E45               	goto	l10034
  7175                           
  7176                           ;RF_Control_B1.c: 140: RF1.RxStatus = 1;
  7177  0637  15BE               	bsf	_RF1^(0+128),3
  7178                           
  7179                           ;RF_Control_B1.c: 141: RF1.Correction = 1;
  7180  0638  16BF               	bsf	(_RF1^(0+128)+1),5
  7181                           
  7182                           ;RF_Control_B1.c: 143: CC2500_WriteCommand(0x36);
  7183  0639  3036               	movlw	54
  7184  063A  319D  2523  3185   	fcall	_CC2500_WriteCommand
  7185                           
  7186                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3A);
  7187  063D  303A               	movlw	58
  7188  063E  319D  2523  3185   	fcall	_CC2500_WriteCommand
  7189                           
  7190                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x34);
  7191  0641  3034               	movlw	52
  7192  0642  319D  2523  3185   	fcall	_CC2500_WriteCommand
  7193  0645                     l10034:	
  7194                           
  7195                           ;RF_Control_B1.c: 148: }
  7196                           ;RF_Control_B1.c: 150: }
  7197                           ;RF_Control_B1.c: 151: }
  7198                           ;RF_Control_B1.c: 152: }
  7199                           ;RF_Control_B1.c: 153: if (RF1.RxChecked == 1) {
  7200  0645  0021               	movlb	1	; select bank1
  7201  0646  1E3F               	btfss	(_RF1^(0+128)+1),4
  7202  0647  2E6E               	goto	l10044
  7203                           
  7204                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  7205  0648  3001               	movlw	1
  7206  0649  0020               	movlb	0	; select bank0
  7207  064A  00E7               	movwf	??_setRF_Main
  7208  064B  0867               	movf	??_setRF_Main,w
  7209  064C  0021               	movlb	1	; select bank1
  7210  064D  07C2               	addwf	(_RF1^(0+128)+4),f
  7211                           
  7212                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == (10 * RF1.RunTime)) {
  7213  064E  0843               	movf	(_RF1^(0+128)+5),w
  7214  064F  0020               	movlb	0	; select bank0
  7215  0650  00E7               	movwf	??_setRF_Main
  7216  0651  01E8               	clrf	??_setRF_Main+1
  7217  0652  0867               	movf	??_setRF_Main,w
  7218  0653  00A0               	movwf	___wmul@multiplier
  7219  0654  0868               	movf	??_setRF_Main+1,w
  7220  0655  00A1               	movwf	___wmul@multiplier+1
  7221  0656  300A               	movlw	10
  7222  0657  00A2               	movwf	___wmul@multiplicand
  7223  0658  3000               	movlw	0
  7224  0659  00A3               	movwf	___wmul@multiplicand+1
  7225  065A  319D  25C9  3185   	fcall	___wmul
  7226  065D  0021               	movlb	1	; select bank1
  7227  065E  0842               	movf	(_RF1^(0+128)+4),w
  7228  065F  0020               	movlb	0	; select bank0
  7229  0660  00E9               	movwf	??_setRF_Main+2
  7230  0661  01EA               	clrf	??_setRF_Main+3
  7231  0662  0821               	movf	?___wmul+1,w
  7232  0663  066A               	xorwf	??_setRF_Main+3,w
  7233  0664  1D03               	skipz
  7234  0665  2E68               	goto	u10665
  7235  0666  0820               	movf	?___wmul,w
  7236  0667  0669               	xorwf	??_setRF_Main+2,w
  7237  0668                     u10665:	
  7238  0668  1D03               	skipz
  7239  0669  2E98               	goto	l10054
  7240                           
  7241                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  7242  066A  0021               	movlb	1	; select bank1
  7243  066B  01C2               	clrf	(_RF1^(0+128)+4)
  7244                           
  7245                           ;RF_Control_B1.c: 157: RF1.RxChecked = 0;
  7246  066C  123F               	bcf	(_RF1^(0+128)+1),4
  7247                           
  7248                           ;RF_Control_B1.c: 158: }
  7249                           ;RF_Control_B1.c: 159: } else {
  7250  066D  2E98               	goto	l10054
  7251  066E                     l10044:	
  7252                           
  7253                           ;RF_Control_B1.c: 160: if (RF1.RunTime > 20) {
  7254  066E  3015               	movlw	21
  7255  066F  0243               	subwf	(_RF1^(0+128)+5),w
  7256  0670  1C03               	skipc
  7257  0671  2E98               	goto	l10054
  7258                           
  7259                           ;RF_Control_B1.c: 161: RF1.CheckedCounter++;
  7260  0672  3001               	movlw	1
  7261  0673  0020               	movlb	0	; select bank0
  7262  0674  00E7               	movwf	??_setRF_Main
  7263  0675  0867               	movf	??_setRF_Main,w
  7264  0676  0021               	movlb	1	; select bank1
  7265  0677  07C2               	addwf	(_RF1^(0+128)+4),f
  7266                           
  7267                           ;RF_Control_B1.c: 162: if (RF1.CheckedCounter == (10 * RF1.RunTime)) {
  7268  0678  0843               	movf	(_RF1^(0+128)+5),w
  7269  0679  0020               	movlb	0	; select bank0
  7270  067A  00E7               	movwf	??_setRF_Main
  7271  067B  01E8               	clrf	??_setRF_Main+1
  7272  067C  0867               	movf	??_setRF_Main,w
  7273  067D  00A0               	movwf	___wmul@multiplier
  7274  067E  0868               	movf	??_setRF_Main+1,w
  7275  067F  00A1               	movwf	___wmul@multiplier+1
  7276  0680  300A               	movlw	10
  7277  0681  00A2               	movwf	___wmul@multiplicand
  7278  0682  3000               	movlw	0
  7279  0683  00A3               	movwf	___wmul@multiplicand+1
  7280  0684  319D  25C9  3185   	fcall	___wmul
  7281  0687  0021               	movlb	1	; select bank1
  7282  0688  0842               	movf	(_RF1^(0+128)+4),w
  7283  0689  0020               	movlb	0	; select bank0
  7284  068A  00E9               	movwf	??_setRF_Main+2
  7285  068B  01EA               	clrf	??_setRF_Main+3
  7286  068C  0821               	movf	?___wmul+1,w
  7287  068D  066A               	xorwf	??_setRF_Main+3,w
  7288  068E  1D03               	skipz
  7289  068F  2E92               	goto	u10685
  7290  0690  0820               	movf	?___wmul,w
  7291  0691  0669               	xorwf	??_setRF_Main+2,w
  7292  0692                     u10685:	
  7293  0692  1D03               	skipz
  7294  0693  2E98               	goto	l10054
  7295                           
  7296                           ;RF_Control_B1.c: 163: RF1.CheckedCounter = 0;
  7297  0694  0021               	movlb	1	; select bank1
  7298  0695  01C2               	clrf	(_RF1^(0+128)+4)
  7299                           
  7300                           ;RF_Control_B1.c: 164: RF1.RunTime -= 10;
  7301  0696  300A               	movlw	10
  7302  0697  02C3               	subwf	(_RF1^(0+128)+5),f
  7303  0698                     l10054:	
  7304                           
  7305                           ;RF_Control_B1.c: 165: }
  7306                           ;RF_Control_B1.c: 166: }
  7307                           ;RF_Control_B1.c: 167: }
  7308                           ;RF_Control_B1.c: 168: if (RF1.Correction == 1) {
  7309  0698  0021               	movlb	1	; select bank1
  7310  0699  1EBF               	btfss	(_RF1^(0+128)+1),5
  7311  069A  0008               	return
  7312                           
  7313                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter++;
  7314  069B  3001               	movlw	1
  7315  069C  07C5               	addwf	(_RF1^(0+128)+7),f
  7316  069D  3000               	movlw	0
  7317  069E  3DC6               	addwfc	((_RF1+1)^(0+128)+7),f
  7318                           
  7319                           ;RF_Control_B1.c: 170: if (RF1.CorrectionCounter >= 60000) {
  7320  069F  30EA               	movlw	234
  7321  06A0  0246               	subwf	((_RF1+1)^(0+128)+7),w
  7322  06A1  3060               	movlw	96
  7323  06A2  1903               	skipnz
  7324  06A3  0245               	subwf	(_RF1^(0+128)+7),w
  7325  06A4  1C03               	skipc
  7326  06A5  0008               	return
  7327                           
  7328                           ;RF_Control_B1.c: 171: RF1.CorrectionCounter = 0;
  7329  06A6  01C5               	clrf	(_RF1^(0+128)+7)
  7330  06A7  01C6               	clrf	((_RF1+1)^(0+128)+7)
  7331                           
  7332                           ;RF_Control_B1.c: 173: RF1.RxStatus = 0;
  7333  06A8  11BE               	bcf	_RF1^(0+128),3
  7334                           
  7335                           ;RF_Control_B1.c: 174: RF1.ReceiveGO = 0;
  7336  06A9  10BE               	bcf	_RF1^(0+128),1
  7337  06AA  0008               	return
  7338  06AB                     __end_of_setRF_Main:	
  7339                           
  7340                           	psect	text29
  7341  083C                     __ptext29:	
  7342 ;; *************** function _getRxData *****************
  7343 ;; Defined at:
  7344 ;;		line 257 in file "../src/RF_Control_B1.c"
  7345 ;; Parameters:    Size  Location     Type
  7346 ;;		None
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;		None
  7349 ;; Return value:  Size  Location     Type
  7350 ;;		None               void
  7351 ;; Registers used:
  7352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;Total ram usage:        0 bytes
  7363 ;; Hardware stack levels used:    1
  7364 ;; Hardware stack levels required when called:   12
  7365 ;; This function calls:
  7366 ;;		_setControl_Lights_Table
  7367 ;;		_setLog_Code
  7368 ;; This function is called by:
  7369 ;;		_setRF_Main
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           
  7374                           ;psect for function _getRxData
  7375  083C                     _getRxData:	
  7376                           
  7377                           ;RF_Control_B1.c: 258: if (RF1.Learn == 1) {
  7378                           
  7379                           ;incstack = 0
  7380                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7381  083C  0021               	movlb	1	; select bank1
  7382  083D  1F3E               	btfss	_RF1^(0+128),6
  7383  083E  284F               	goto	l9442
  7384                           
  7385                           ;RF_Control_B1.c: 259: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7386  083F  0022               	movlb	2	; select bank2
  7387  0840  08A0               	movf	_RF_Data^(0+256),f
  7388  0841  1D03               	skipz
  7389  0842  284C               	goto	l2305
  7390  0843  0821               	movf	(_RF_Data^(0+256)+1),w
  7391  0844  3A64               	xorlw	100
  7392  0845  1D03               	skipz
  7393  0846  284C               	goto	l2305
  7394                           
  7395                           ;RF_Control_B1.c: 260: setLog_Code();
  7396  0847  3191  2101         	fcall	_setLog_Code
  7397                           
  7398                           ;RF_Control_B1.c: 261: RF1.Checked = 1;
  7399  0849  0021               	movlb	1	; select bank1
  7400  084A  15BF               	bsf	(_RF1^(0+128)+1),3
  7401                           
  7402                           ;RF_Control_B1.c: 262: } else {
  7403  084B  0008               	return
  7404  084C                     l2305:	
  7405                           
  7406                           ;RF_Control_B1.c: 263: RF1.Checked = 0;
  7407  084C  0021               	movlb	1	; select bank1
  7408  084D  11BF               	bcf	(_RF1^(0+128)+1),3
  7409                           
  7410                           ;RF_Control_B1.c: 264: }
  7411                           ;RF_Control_B1.c: 265: } else {
  7412  084E  0008               	return
  7413  084F                     l9442:	
  7414                           
  7415                           ;RF_Control_B1.c: 266: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7416  084F  0022               	movlb	2	; select bank2
  7417  0850  08A0               	movf	_RF_Data^(0+256),f
  7418  0851  1D03               	skipz
  7419  0852  288D               	goto	l9464
  7420  0853  0821               	movf	(_RF_Data^(0+256)+1),w
  7421  0854  3A02               	xorlw	2
  7422  0855  1D03               	skipz
  7423  0856  288D               	goto	l9464
  7424                           
  7425                           ;RF_Control_B1.c: 268: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7426  0857  082C               	movf	(_RF_Data^(0+256)+12),w
  7427  0858  3AFF               	xorlw	255
  7428  0859  1D03               	skipz
  7429  085A  2867               	goto	l9454
  7430  085B  082D               	movf	(_RF_Data^(0+256)+13),w
  7431  085C  3AFF               	xorlw	255
  7432  085D  1D03               	skipz
  7433  085E  2867               	goto	l9454
  7434  085F  082E               	movf	(_RF_Data^(0+256)+14),w
  7435  0860  3AFF               	xorlw	255
  7436  0861  1D03               	skipz
  7437  0862  2867               	goto	l9454
  7438                           
  7439                           ;RF_Control_B1.c: 269: __nop();
  7440  0863  0000               	nop
  7441                           
  7442                           ;RF_Control_B1.c: 270: RF1.Checked = 0;
  7443  0864  0021               	movlb	1	; select bank1
  7444  0865  11BF               	bcf	(_RF1^(0+128)+1),3
  7445                           
  7446                           ;RF_Control_B1.c: 271: } else {
  7447  0866  0008               	return
  7448  0867                     l9454:	
  7449                           
  7450                           ;RF_Control_B1.c: 272: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7451  0867  0020               	movlb	0	; select bank0
  7452  0868  086C               	movf	_product,w
  7453  0869  3E0C               	addlw	12
  7454  086A  0086               	movwf	6
  7455  086B  3002               	movlw	2	; select bank4/5
  7456  086C  0087               	movwf	7
  7457  086D  0022               	movlb	2	; select bank2
  7458  086E  082C               	movf	(_RF_Data^(0+256)+12),w
  7459  086F  0601               	xorwf	1,w
  7460  0870  1D03               	skipz
  7461  0871  0008               	return
  7462  0872  0020               	movlb	0	; select bank0
  7463  0873  086C               	movf	_product,w
  7464  0874  3E0D               	addlw	13
  7465  0875  0086               	movwf	6
  7466  0876  3002               	movlw	2	; select bank4/5
  7467  0877  0087               	movwf	7
  7468  0878  0022               	movlb	2	; select bank2
  7469  0879  082D               	movf	(_RF_Data^(0+256)+13),w
  7470  087A  0601               	xorwf	1,w
  7471  087B  1D03               	skipz
  7472  087C  0008               	return
  7473  087D  0020               	movlb	0	; select bank0
  7474  087E  086C               	movf	_product,w
  7475  087F  3E0E               	addlw	14
  7476  0880  0086               	movwf	6
  7477  0881  3002               	movlw	2	; select bank4/5
  7478  0882  0087               	movwf	7
  7479  0883  0022               	movlb	2	; select bank2
  7480  0884  082E               	movf	(_RF_Data^(0+256)+14),w
  7481  0885  0601               	xorwf	1,w
  7482  0886  1D03               	skipz
  7483  0887  0008               	return
  7484                           
  7485                           ;RF_Control_B1.c: 273: setControl_Lights_Table();
  7486  0888  3187  2772         	fcall	_setControl_Lights_Table
  7487                           
  7488                           ;RF_Control_B1.c: 274: RF1.Checked = 1;
  7489  088A  0021               	movlb	1	; select bank1
  7490  088B  15BF               	bsf	(_RF1^(0+128)+1),3
  7491                           
  7492                           ;RF_Control_B1.c: 275: }
  7493                           ;RF_Control_B1.c: 276: }
  7494                           ;RF_Control_B1.c: 277: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7495  088C  0008               	return
  7496  088D                     l9464:	
  7497  088D  0022               	movlb	2	; select bank2
  7498  088E  0820               	movf	_RF_Data^(0+256),w
  7499  088F  3AFF               	xorlw	255
  7500  0890  1D03               	skipz
  7501  0891  2898               	goto	l9470
  7502  0892  0821               	movf	(_RF_Data^(0+256)+1),w
  7503  0893  3A02               	xorlw	2
  7504  0894  1D03               	skipz
  7505  0895  2898               	goto	l9470
  7506                           
  7507                           ;RF_Control_B1.c: 278: __nop();
  7508  0896  0000               	nop
  7509                           
  7510                           ;RF_Control_B1.c: 279: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7511  0897  0008               	return
  7512  0898                     l9470:	
  7513  0898  0022               	movlb	2	; select bank2
  7514  0899  08A0               	movf	_RF_Data^(0+256),f
  7515  089A  1D03               	skipz
  7516  089B  28A2               	goto	l2315
  7517  089C  0821               	movf	(_RF_Data^(0+256)+1),w
  7518  089D  3A65               	xorlw	101
  7519  089E  1D03               	skipz
  7520  089F  28A2               	goto	l2315
  7521                           
  7522                           ;RF_Control_B1.c: 280: __nop();
  7523  08A0  0000               	nop
  7524                           
  7525                           ;RF_Control_B1.c: 281: } else {
  7526  08A1  0008               	return
  7527  08A2                     l2315:	
  7528                           
  7529                           ;RF_Control_B1.c: 282: RF1.Checked = 0;
  7530  08A2  0021               	movlb	1	; select bank1
  7531  08A3  11BF               	bcf	(_RF1^(0+128)+1),3
  7532  08A4  0008               	return
  7533  08A5                     __end_of_getRxData:	
  7534                           
  7535                           	psect	text30
  7536  1101                     __ptext30:	
  7537 ;; *************** function _setLog_Code *****************
  7538 ;; Defined at:
  7539 ;;		line 292 in file "../src/RF_Control_B1.c"
  7540 ;; Parameters:    Size  Location     Type
  7541 ;;		None
  7542 ;; Auto vars:     Size  Location     Type
  7543 ;;		None
  7544 ;; Return value:  Size  Location     Type
  7545 ;;		None               void
  7546 ;; Registers used:
  7547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7548 ;; Tracked objects:
  7549 ;;		On entry : 0/0
  7550 ;;		On exit  : 0/0
  7551 ;;		Unchanged: 0/0
  7552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7557 ;;Total ram usage:        1 bytes
  7558 ;; Hardware stack levels used:    1
  7559 ;; Hardware stack levels required when called:    7
  7560 ;; This function calls:
  7561 ;;		_setBuz
  7562 ;; This function is called by:
  7563 ;;		_getRxData
  7564 ;; This function uses a non-reentrant model
  7565 ;;
  7566                           
  7567                           
  7568                           ;psect for function _setLog_Code
  7569  1101                     _setLog_Code:	
  7570                           
  7571                           ;RF_Control_B1.c: 293: product->Data[12]=RF_Data[12];
  7572                           
  7573                           ;incstack = 0
  7574                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7575  1101  0022               	movlb	2	; select bank2
  7576  1102  082C               	movf	(_RF_Data^(0+256)+12),w
  7577  1103  0020               	movlb	0	; select bank0
  7578  1104  00AD               	movwf	??_setLog_Code
  7579  1105  086C               	movf	_product,w
  7580  1106  3E0C               	addlw	12
  7581  1107  0086               	movwf	6
  7582  1108  3002               	movlw	2	; select bank4/5
  7583  1109  0087               	movwf	7
  7584  110A  082D               	movf	??_setLog_Code,w
  7585  110B  0081               	movwf	1
  7586                           
  7587                           ;RF_Control_B1.c: 294: product->Data[13]=RF_Data[13];
  7588  110C  0022               	movlb	2	; select bank2
  7589  110D  082D               	movf	(_RF_Data^(0+256)+13),w
  7590  110E  0020               	movlb	0	; select bank0
  7591  110F  00AD               	movwf	??_setLog_Code
  7592  1110  086C               	movf	_product,w
  7593  1111  3E0D               	addlw	13
  7594  1112  0086               	movwf	6
  7595  1113  3002               	movlw	2	; select bank4/5
  7596  1114  0087               	movwf	7
  7597  1115  082D               	movf	??_setLog_Code,w
  7598  1116  0081               	movwf	1
  7599                           
  7600                           ;RF_Control_B1.c: 295: product->Data[14]=RF_Data[14];
  7601  1117  0022               	movlb	2	; select bank2
  7602  1118  082E               	movf	(_RF_Data^(0+256)+14),w
  7603  1119  0020               	movlb	0	; select bank0
  7604  111A  00AD               	movwf	??_setLog_Code
  7605  111B  086C               	movf	_product,w
  7606  111C  3E0E               	addlw	14
  7607  111D  0086               	movwf	6
  7608  111E  3002               	movlw	2	; select bank4/5
  7609  111F  0087               	movwf	7
  7610  1120  082D               	movf	??_setLog_Code,w
  7611  1121  0081               	movwf	1
  7612                           
  7613                           ;RF_Control_B1.c: 296: setBuz(1, 100);
  7614  1122  3064               	movlw	100
  7615  1123  00A9               	movwf	setBuz@time
  7616  1124  3000               	movlw	0
  7617  1125  00AA               	movwf	setBuz@time+1
  7618  1126  3001               	movlw	1
  7619  1127  3195  25CA  3191   	fcall	_setBuz
  7620                           
  7621                           ;RF_Control_B1.c: 297: RF1.Learn = 0;
  7622  112A  0021               	movlb	1	; select bank1
  7623  112B  133E               	bcf	_RF1^(0+128),6
  7624                           
  7625                           ;RF_Control_B1.c: 298: if (myMain.First) {
  7626  112C  1FA0               	btfss	_myMain^(0+128),7
  7627  112D  2930               	goto	l2320
  7628                           
  7629                           ;RF_Control_B1.c: 299: Memory.LoopSave=1;
  7630  112E  0024               	movlb	4	; select bank4
  7631  112F  1544               	bsf	(_Memory^(0+512)+36),2
  7632  1130                     l2320:	
  7633                           
  7634                           ;RF_Control_B1.c: 300: }
  7635                           ;RF_Control_B1.c: 301: Memory.Modify=1;
  7636  1130  0024               	movlb	4	; select bank4
  7637  1131  1444               	bsf	(_Memory^(0+512)+36),0
  7638  1132  0008               	return
  7639  1133                     __end_of_setLog_Code:	
  7640                           
  7641                           	psect	text31
  7642  0772                     __ptext31:	
  7643 ;; *************** function _setControl_Lights_Table *****************
  7644 ;; Defined at:
  7645 ;;		line 305 in file "../src/RF_Control_B1.c"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;		None
  7648 ;; Auto vars:     Size  Location     Type
  7649 ;;		None
  7650 ;; Return value:  Size  Location     Type
  7651 ;;		None               void
  7652 ;; Registers used:
  7653 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7654 ;; Tracked objects:
  7655 ;;		On entry : 0/0
  7656 ;;		On exit  : 0/0
  7657 ;;		Unchanged: 0/0
  7658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7663 ;;Total ram usage:        0 bytes
  7664 ;; Hardware stack levels used:    1
  7665 ;; Hardware stack levels required when called:   11
  7666 ;; This function calls:
  7667 ;;		_setBuz
  7668 ;;		_setDimmerLights
  7669 ;;		_setRFSW_AdjControl
  7670 ;;		_setRFSW_Control
  7671 ;;		_setRFSW_Status
  7672 ;;		_setSw_Status
  7673 ;;		_setTxData
  7674 ;; This function is called by:
  7675 ;;		_getRxData
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           
  7680                           ;psect for function _setControl_Lights_Table
  7681  0772                     _setControl_Lights_Table:	
  7682                           
  7683                           ;RF_Control_B1.c: 306: if (RF_Data[15] == 0x00) {
  7684                           
  7685                           ;incstack = 0
  7686                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7687  0772  0022               	movlb	2	; select bank2
  7688  0773  08AF               	movf	(_RF_Data^(0+256)+15),f
  7689  0774  1D03               	skipz
  7690  0775  2FBE               	goto	l9166
  7691                           
  7692                           ;RF_Control_B1.c: 308: setDimmerLights(1, 0);
  7693  0776  0020               	movlb	0	; select bank0
  7694  0777  01A4               	clrf	setDimmerLights@status
  7695  0778  3001               	movlw	1
  7696  0779  318C  24CC  3187   	fcall	_setDimmerLights
  7697                           
  7698                           ;RF_Control_B1.c: 309: setRFSW_Status(1, 0);
  7699  077C  0020               	movlb	0	; select bank0
  7700  077D  01A2               	clrf	setRFSW_Status@command
  7701  077E  3001               	movlw	1
  7702  077F  319B  2302  3187   	fcall	_setRFSW_Status
  7703                           
  7704                           ;RF_Control_B1.c: 310: setSw_Status(1, 0);
  7705  0782  0020               	movlb	0	; select bank0
  7706  0783  01A2               	clrf	setSw_Status@command
  7707  0784  3001               	movlw	1
  7708  0785  319B  2311  3187   	fcall	_setSw_Status
  7709                           
  7710                           ;RF_Control_B1.c: 313: setDimmerLights(2, 0);
  7711  0788  0020               	movlb	0	; select bank0
  7712  0789  01A4               	clrf	setDimmerLights@status
  7713  078A  3002               	movlw	2
  7714  078B  318C  24CC  3187   	fcall	_setDimmerLights
  7715                           
  7716                           ;RF_Control_B1.c: 314: setRFSW_Status(2, 0);
  7717  078E  0020               	movlb	0	; select bank0
  7718  078F  01A2               	clrf	setRFSW_Status@command
  7719  0790  3002               	movlw	2
  7720  0791  319B  2302  3187   	fcall	_setRFSW_Status
  7721                           
  7722                           ;RF_Control_B1.c: 315: setSw_Status(2, 0);
  7723  0794  0020               	movlb	0	; select bank0
  7724  0795  01A2               	clrf	setSw_Status@command
  7725  0796  3002               	movlw	2
  7726  0797  319B  2311  3187   	fcall	_setSw_Status
  7727                           
  7728                           ;RF_Control_B1.c: 323: product->Data[9]=0;
  7729  079A  0020               	movlb	0	; select bank0
  7730  079B  086C               	movf	_product,w
  7731  079C  3E09               	addlw	9
  7732  079D  0086               	movwf	6
  7733  079E  3002               	movlw	2	; select bank4/5
  7734  079F  0087               	movwf	7
  7735  07A0  0181               	clrf	1
  7736                           
  7737                           ;RF_Control_B1.c: 324: product->Data[11]=0;
  7738  07A1  086C               	movf	_product,w
  7739  07A2  3E0B               	addlw	11
  7740  07A3  0086               	movwf	6
  7741  07A4  3002               	movlw	2	; select bank4/5
  7742  07A5  0087               	movwf	7
  7743  07A6  0181               	clrf	1
  7744                           
  7745                           ;RF_Control_B1.c: 325: product->Data[15]=0;
  7746  07A7  086C               	movf	_product,w
  7747  07A8  3E0F               	addlw	15
  7748  07A9  0086               	movwf	6
  7749  07AA  3002               	movlw	2	; select bank4/5
  7750  07AB  0087               	movwf	7
  7751  07AC  0181               	clrf	1
  7752                           
  7753                           ;RF_Control_B1.c: 326: product->Data[17]=0;
  7754  07AD  086C               	movf	_product,w
  7755  07AE  3E11               	addlw	17
  7756  07AF  0086               	movwf	6
  7757  07B0  3002               	movlw	2	; select bank4/5
  7758  07B1  0087               	movwf	7
  7759  07B2  0181               	clrf	1
  7760                           
  7761                           ;RF_Control_B1.c: 327: setBuz(1, 100);
  7762  07B3  3064               	movlw	100
  7763  07B4  00A9               	movwf	setBuz@time
  7764  07B5  3000               	movlw	0
  7765  07B6  00AA               	movwf	setBuz@time+1
  7766  07B7  3001               	movlw	1
  7767  07B8  3195  25CA  3187   	fcall	_setBuz
  7768                           
  7769                           ;RF_Control_B1.c: 328: setTxData();
  7770  07BB  318F  2741         	fcall	_setTxData
  7771                           
  7772                           ;RF_Control_B1.c: 329: } else if (RF_Data[15] == 0x20) {
  7773  07BD  0008               	return
  7774  07BE                     l9166:	
  7775  07BE  0022               	movlb	2	; select bank2
  7776  07BF  082F               	movf	(_RF_Data^(0+256)+15),w
  7777  07C0  3A20               	xorlw	32
  7778  07C1  1D03               	skipz
  7779  07C2  2FD9               	goto	l9172
  7780                           
  7781                           ;RF_Control_B1.c: 330: product->Data[9]=0;
  7782  07C3  0020               	movlb	0	; select bank0
  7783  07C4  086C               	movf	_product,w
  7784  07C5  3E09               	addlw	9
  7785  07C6  0086               	movwf	6
  7786  07C7  3002               	movlw	2	; select bank4/5
  7787  07C8  0087               	movwf	7
  7788  07C9  0181               	clrf	1
  7789                           
  7790                           ;RF_Control_B1.c: 331: product->Data[11]=0;
  7791  07CA  086C               	movf	_product,w
  7792  07CB  3E0B               	addlw	11
  7793  07CC  0086               	movwf	6
  7794  07CD  3002               	movlw	2	; select bank4/5
  7795  07CE  0087               	movwf	7
  7796  07CF  0181               	clrf	1
  7797                           
  7798                           ;RF_Control_B1.c: 332: product->Data[17]=0;
  7799  07D0  086C               	movf	_product,w
  7800  07D1  3E11               	addlw	17
  7801  07D2  0086               	movwf	6
  7802  07D3  3002               	movlw	2	; select bank4/5
  7803  07D4  0087               	movwf	7
  7804  07D5  0181               	clrf	1
  7805                           
  7806                           ;RF_Control_B1.c: 333: setTxData();
  7807  07D6  318F  2741         	fcall	_setTxData
  7808                           
  7809                           ;RF_Control_B1.c: 334: }
  7810  07D8  0008               	return
  7811  07D9                     l9172:	
  7812                           
  7813                           ;RF_Control_B1.c: 336: else if (RF_Data[15] == 0x01) {
  7814  07D9  0022               	movlb	2	; select bank2
  7815  07DA  082F               	movf	(_RF_Data^(0+256)+15),w
  7816  07DB  3A01               	xorlw	1
  7817  07DC  1D03               	skipz
  7818  07DD  2FE2               	goto	l9176
  7819                           
  7820                           ;RF_Control_B1.c: 337: setRFSW_Control(1);
  7821  07DE  3001               	movlw	1
  7822  07DF  318D  2554         	fcall	_setRFSW_Control
  7823                           
  7824                           ;RF_Control_B1.c: 338: }
  7825  07E1  0008               	return
  7826  07E2                     l9176:	
  7827                           
  7828                           ;RF_Control_B1.c: 340: else if (RF_Data[15] == 0x11) {
  7829  07E2  0022               	movlb	2	; select bank2
  7830  07E3  082F               	movf	(_RF_Data^(0+256)+15),w
  7831  07E4  3A11               	xorlw	17
  7832  07E5  1D03               	skipz
  7833  07E6  2FEB               	goto	l9180
  7834                           
  7835                           ;RF_Control_B1.c: 341: setRFSW_AdjControl(1);
  7836  07E7  3001               	movlw	1
  7837  07E8  3188  2001         	fcall	_setRFSW_AdjControl
  7838                           
  7839                           ;RF_Control_B1.c: 342: }
  7840  07EA  0008               	return
  7841  07EB                     l9180:	
  7842                           
  7843                           ;RF_Control_B1.c: 347: else if (RF_Data[15] == 0x02) {
  7844  07EB  0022               	movlb	2	; select bank2
  7845  07EC  082F               	movf	(_RF_Data^(0+256)+15),w
  7846  07ED  3A02               	xorlw	2
  7847  07EE  1D03               	skipz
  7848  07EF  2FF4               	goto	l9184
  7849                           
  7850                           ;RF_Control_B1.c: 348: setRFSW_Control(2);
  7851  07F0  3002               	movlw	2
  7852  07F1  318D  2554         	fcall	_setRFSW_Control
  7853                           
  7854                           ;RF_Control_B1.c: 349: }
  7855  07F3  0008               	return
  7856  07F4                     l9184:	
  7857                           
  7858                           ;RF_Control_B1.c: 351: else if (RF_Data[15] == 0x21) {
  7859  07F4  0022               	movlb	2	; select bank2
  7860  07F5  082F               	movf	(_RF_Data^(0+256)+15),w
  7861  07F6  3A21               	xorlw	33
  7862  07F7  1D03               	skipz
  7863  07F8  0008               	return
  7864                           
  7865                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  7866  07F9  3002               	movlw	2
  7867  07FA  3188  2001         	fcall	_setRFSW_AdjControl
  7868  07FC  0008               	return
  7869  07FD                     __end_of_setControl_Lights_Table:	
  7870                           
  7871                           	psect	text32
  7872  0D54                     __ptext32:	
  7873 ;; *************** function _setRFSW_Control *****************
  7874 ;; Defined at:
  7875 ;;		line 393 in file "../src/RF_Control_B1.c"
  7876 ;; Parameters:    Size  Location     Type
  7877 ;;  sw              1    wreg     unsigned char 
  7878 ;; Auto vars:     Size  Location     Type
  7879 ;;  sw              1   67[BANK0 ] unsigned char 
  7880 ;; Return value:  Size  Location     Type
  7881 ;;		None               void
  7882 ;; Registers used:
  7883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7884 ;; Tracked objects:
  7885 ;;		On entry : 0/0
  7886 ;;		On exit  : 0/0
  7887 ;;		Unchanged: 0/0
  7888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;Total ram usage:        2 bytes
  7894 ;; Hardware stack levels used:    1
  7895 ;; Hardware stack levels required when called:    9
  7896 ;; This function calls:
  7897 ;;		_RfSWPointSelect
  7898 ;;		_setBuz
  7899 ;;		_setDelayOff_GO
  7900 ;;		_setDimmerLights_Switch
  7901 ;;		_setDimmerLights_Trigger
  7902 ;;		_setRF_DimmerLights
  7903 ;;		_setSw_Status
  7904 ;;		_setTxData
  7905 ;; This function is called by:
  7906 ;;		_setControl_Lights_Table
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910                           
  7911                           ;psect for function _setRFSW_Control
  7912  0D54                     _setRFSW_Control:	
  7913                           
  7914                           ;incstack = 0
  7915                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7916                           ;setRFSW_Control@sw stored from wreg
  7917  0D54  0020               	movlb	0	; select bank0
  7918  0D55  00E3               	movwf	setRFSW_Control@sw
  7919                           
  7920                           ;RF_Control_B1.c: 394: RfSWPointSelect(sw);
  7921  0D56  0863               	movf	setRFSW_Control@sw,w
  7922  0D57  319C  2497  318D   	fcall	_RfSWPointSelect
  7923                           
  7924                           ;RF_Control_B1.c: 395: if (RFSW->Status == 0) {
  7925  0D5A  0021               	movlb	1	; select bank1
  7926  0D5B  084F               	movf	_RFSW^(0+128),w
  7927  0D5C  0086               	movwf	6
  7928  0D5D  0187               	clrf	7
  7929  0D5E  1801               	btfsc	1,0
  7930  0D5F  2D96               	goto	l9010
  7931                           
  7932                           ;RF_Control_B1.c: 396: if (RF_Data[16] == 0x80) {
  7933  0D60  0022               	movlb	2	; select bank2
  7934  0D61  0830               	movf	(_RF_Data^(0+256)+16),w
  7935  0D62  3A80               	xorlw	128
  7936  0D63  1D03               	skipz
  7937  0D64  2D72               	goto	l9000
  7938                           
  7939                           ;RF_Control_B1.c: 397: setDelayOff_GO(sw, 1, RF_Data[17]);
  7940  0D65  0020               	movlb	0	; select bank0
  7941  0D66  01AA               	clrf	setDelayOff_GO@command
  7942  0D67  0AAA               	incf	setDelayOff_GO@command,f
  7943  0D68  0022               	movlb	2	; select bank2
  7944  0D69  0831               	movf	(_RF_Data^(0+256)+17),w
  7945  0D6A  0020               	movlb	0	; select bank0
  7946  0D6B  00E2               	movwf	??_setRFSW_Control
  7947  0D6C  0862               	movf	??_setRFSW_Control,w
  7948  0D6D  00AB               	movwf	setDelayOff_GO@value
  7949  0D6E  0863               	movf	setRFSW_Control@sw,w
  7950  0D6F  3196  26DC  318D   	fcall	_setDelayOff_GO
  7951  0D72                     l9000:	
  7952                           
  7953                           ;RF_Control_B1.c: 398: }
  7954                           ;RF_Control_B1.c: 399: RFSW->Status = 1;
  7955  0D72  0021               	movlb	1	; select bank1
  7956  0D73  084F               	movf	_RFSW^(0+128),w
  7957  0D74  0086               	movwf	6
  7958  0D75  0187               	clrf	7
  7959  0D76  1401               	bsf	1,0
  7960                           
  7961                           ;RF_Control_B1.c: 400: setSw_Status(sw, 1);
  7962  0D77  0020               	movlb	0	; select bank0
  7963  0D78  01A2               	clrf	setSw_Status@command
  7964  0D79  0AA2               	incf	setSw_Status@command,f
  7965  0D7A  0863               	movf	setRFSW_Control@sw,w
  7966  0D7B  319B  2311  318D   	fcall	_setSw_Status
  7967                           
  7968                           ;RF_Control_B1.c: 402: setDimmerLights_Trigger(sw, 1);
  7969  0D7E  0020               	movlb	0	; select bank0
  7970  0D7F  01A2               	clrf	setDimmerLights_Trigger@command
  7971  0D80  0AA2               	incf	setDimmerLights_Trigger@command,f
  7972  0D81  0863               	movf	setRFSW_Control@sw,w
  7973  0D82  319B  234E  318D   	fcall	_setDimmerLights_Trigger
  7974                           
  7975                           ;RF_Control_B1.c: 403: setDimmerLights_Switch(sw, 1);
  7976  0D85  0020               	movlb	0	; select bank0
  7977  0D86  01A2               	clrf	setDimmerLights_Switch@command
  7978  0D87  0AA2               	incf	setDimmerLights_Switch@command,f
  7979  0D88  0863               	movf	setRFSW_Control@sw,w
  7980  0D89  319B  233E  318D   	fcall	_setDimmerLights_Switch
  7981                           
  7982                           ;RF_Control_B1.c: 405: setRF_DimmerLights(sw, RFSW->Status);
  7983  0D8C  0021               	movlb	1	; select bank1
  7984  0D8D  084F               	movf	_RFSW^(0+128),w
  7985  0D8E  0086               	movwf	6
  7986  0D8F  0187               	clrf	7
  7987  0D90  3000               	movlw	0
  7988  0D91  1801               	btfsc	1,0
  7989  0D92  3001               	movlw	1
  7990  0D93  0020               	movlb	0	; select bank0
  7991  0D94  00DD               	movwf	setRF_DimmerLights@on
  7992  0D95  2DD4               	goto	L3
  7993  0D96                     l9010:	
  7994                           ;RF_Control_B1.c: 406: } else {
  7995                           
  7996                           
  7997                           ;RF_Control_B1.c: 407: if (RF_Data[16] == 0x80) {
  7998  0D96  0022               	movlb	2	; select bank2
  7999  0D97  0830               	movf	(_RF_Data^(0+256)+16),w
  8000  0D98  3A80               	xorlw	128
  8001  0D99  1D03               	skipz
  8002  0D9A  2DAC               	goto	l9014
  8003                           
  8004                           ;RF_Control_B1.c: 408: setDelayOff_GO(sw, 1, RF_Data[17]);
  8005  0D9B  0020               	movlb	0	; select bank0
  8006  0D9C  01AA               	clrf	setDelayOff_GO@command
  8007  0D9D  0AAA               	incf	setDelayOff_GO@command,f
  8008  0D9E  0022               	movlb	2	; select bank2
  8009  0D9F  0831               	movf	(_RF_Data^(0+256)+17),w
  8010  0DA0  0020               	movlb	0	; select bank0
  8011  0DA1  00E2               	movwf	??_setRFSW_Control
  8012  0DA2  0862               	movf	??_setRFSW_Control,w
  8013  0DA3  00AB               	movwf	setDelayOff_GO@value
  8014  0DA4  0863               	movf	setRFSW_Control@sw,w
  8015  0DA5  3196  26DC  318D   	fcall	_setDelayOff_GO
  8016                           
  8017                           ;RF_Control_B1.c: 409: setRF_DimmerLights(sw, 1);
  8018  0DA8  0020               	movlb	0	; select bank0
  8019  0DA9  01DD               	clrf	setRF_DimmerLights@on
  8020  0DAA  0ADD               	incf	setRF_DimmerLights@on,f
  8021  0DAB  2DD4               	goto	L3
  8022  0DAC                     l9014:	
  8023                           ;RF_Control_B1.c: 410: } else {
  8024                           
  8025                           
  8026                           ;RF_Control_B1.c: 411: RFSW->Status = 0;
  8027  0DAC  0021               	movlb	1	; select bank1
  8028  0DAD  084F               	movf	_RFSW^(0+128),w
  8029  0DAE  0086               	movwf	6
  8030  0DAF  0187               	clrf	7
  8031  0DB0  1001               	bcf	1,0
  8032                           
  8033                           ;RF_Control_B1.c: 412: setSw_Status(sw, 0);
  8034  0DB1  0020               	movlb	0	; select bank0
  8035  0DB2  01A2               	clrf	setSw_Status@command
  8036  0DB3  0863               	movf	setRFSW_Control@sw,w
  8037  0DB4  319B  2311  318D   	fcall	_setSw_Status
  8038                           
  8039                           ;RF_Control_B1.c: 414: setDimmerLights_Trigger(sw, 1);
  8040  0DB7  0020               	movlb	0	; select bank0
  8041  0DB8  01A2               	clrf	setDimmerLights_Trigger@command
  8042  0DB9  0AA2               	incf	setDimmerLights_Trigger@command,f
  8043  0DBA  0863               	movf	setRFSW_Control@sw,w
  8044  0DBB  319B  234E  318D   	fcall	_setDimmerLights_Trigger
  8045                           
  8046                           ;RF_Control_B1.c: 415: setDimmerLights_Switch(sw, RFSW->Status);
  8047  0DBE  0021               	movlb	1	; select bank1
  8048  0DBF  084F               	movf	_RFSW^(0+128),w
  8049  0DC0  0086               	movwf	6
  8050  0DC1  0187               	clrf	7
  8051  0DC2  3000               	movlw	0
  8052  0DC3  1801               	btfsc	1,0
  8053  0DC4  3001               	movlw	1
  8054  0DC5  0020               	movlb	0	; select bank0
  8055  0DC6  00A2               	movwf	setDimmerLights_Switch@command
  8056  0DC7  0863               	movf	setRFSW_Control@sw,w
  8057  0DC8  319B  233E  318D   	fcall	_setDimmerLights_Switch
  8058                           
  8059                           ;RF_Control_B1.c: 417: setDelayOff_GO(sw, 0, 0);
  8060  0DCB  0020               	movlb	0	; select bank0
  8061  0DCC  01AA               	clrf	setDelayOff_GO@command
  8062  0DCD  01AB               	clrf	setDelayOff_GO@value
  8063  0DCE  0863               	movf	setRFSW_Control@sw,w
  8064  0DCF  3196  26DC  318D   	fcall	_setDelayOff_GO
  8065                           
  8066                           ;RF_Control_B1.c: 418: setRF_DimmerLights(sw, 0);
  8067  0DD2  0020               	movlb	0	; select bank0
  8068  0DD3  01DD               	clrf	setRF_DimmerLights@on
  8069  0DD4                     L3:	
  8070  0DD4  0863               	movf	setRFSW_Control@sw,w
  8071  0DD5  3189  2110  318D   	fcall	_setRF_DimmerLights
  8072                           
  8073                           ;RF_Control_B1.c: 419: }
  8074                           ;RF_Control_B1.c: 420: }
  8075                           ;RF_Control_B1.c: 421: setBuz(1, 100);
  8076  0DD8  3064               	movlw	100
  8077  0DD9  0020               	movlb	0	; select bank0
  8078  0DDA  00A9               	movwf	setBuz@time
  8079  0DDB  3000               	movlw	0
  8080  0DDC  00AA               	movwf	setBuz@time+1
  8081  0DDD  3001               	movlw	1
  8082  0DDE  3195  25CA  318D   	fcall	_setBuz
  8083                           
  8084                           ;RF_Control_B1.c: 422: setTxData();
  8085  0DE1  318F  2741         	fcall	_setTxData
  8086  0DE3  0008               	return
  8087  0DE4                     __end_of_setRFSW_Control:	
  8088                           
  8089                           	psect	text33
  8090  16DC                     __ptext33:	
  8091 ;; *************** function _setDelayOff_GO *****************
  8092 ;; Defined at:
  8093 ;;		line 86 in file "../src/DelayOff_B1.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;  sw              1    wreg     unsigned char 
  8096 ;;  command         1   10[BANK0 ] unsigned char 
  8097 ;;  value           1   11[BANK0 ] unsigned char 
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  sw              1   14[BANK0 ] unsigned char 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;		None               void
  8102 ;; Registers used:
  8103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8109 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;Total ram usage:        5 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    7
  8116 ;; This function calls:
  8117 ;;		_DelayOffPointSelect
  8118 ;;		_DelayTimejudge
  8119 ;; This function is called by:
  8120 ;;		_setRFSW_Control
  8121 ;;		_Sw_DimmerOffFunc
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           
  8126                           ;psect for function _setDelayOff_GO
  8127  16DC                     _setDelayOff_GO:	
  8128                           
  8129                           ;incstack = 0
  8130                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8131                           ;setDelayOff_GO@sw stored from wreg
  8132  16DC  0020               	movlb	0	; select bank0
  8133  16DD  00AE               	movwf	setDelayOff_GO@sw
  8134                           
  8135                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  8136  16DE  082E               	movf	setDelayOff_GO@sw,w
  8137  16DF  319C  242F  3196   	fcall	_DelayOffPointSelect
  8138                           
  8139                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  8140  16E2  0876               	movf	_DelayOff,w
  8141  16E3  0086               	movwf	6
  8142  16E4  0187               	clrf	7
  8143  16E5  1C01               	btfss	1,0
  8144  16E6  0008               	return
  8145                           
  8146                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  8147  16E7  0020               	movlb	0	; select bank0
  8148  16E8  082A               	movf	setDelayOff_GO@command,w
  8149  16E9  3A01               	xorlw	1
  8150  16EA  3000               	movlw	0
  8151  16EB  1903               	skipnz
  8152  16EC  3001               	movlw	1
  8153  16ED  00AC               	movwf	??_setDelayOff_GO
  8154  16EE  0876               	movf	_DelayOff,w
  8155  16EF  0086               	movwf	6
  8156  16F0  0187               	clrf	7
  8157  16F1  0DAC               	rlf	??_setDelayOff_GO,f
  8158  16F2  0801               	movf	1,w
  8159  16F3  062C               	xorwf	??_setDelayOff_GO,w
  8160  16F4  39FD               	andlw	-3
  8161  16F5  062C               	xorwf	??_setDelayOff_GO,w
  8162  16F6  0081               	movwf	1
  8163                           
  8164                           ;DelayOff_B1.c: 90: if (command == 1) {
  8165  16F7  082A               	movf	setDelayOff_GO@command,w
  8166  16F8  3A01               	xorlw	1
  8167  16F9  1D03               	skipz
  8168  16FA  2F24               	goto	l8772
  8169                           
  8170                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  8171  16FB  082B               	movf	setDelayOff_GO@value,w
  8172  16FC  319F  27AB  3196   	fcall	_DelayTimejudge
  8173  16FF  0020               	movlb	0	; select bank0
  8174  1700  00AC               	movwf	??_setDelayOff_GO
  8175  1701  0876               	movf	_DelayOff,w
  8176  1702  0086               	movwf	6
  8177  1703  0187               	clrf	7
  8178  1704  082C               	movf	??_setDelayOff_GO,w
  8179  1705  0081               	movwf	1
  8180                           
  8181                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  8182  1706  300F               	movlw	15
  8183  1707  052B               	andwf	setDelayOff_GO@value,w
  8184  1708  00AC               	movwf	??_setDelayOff_GO
  8185  1709  082C               	movf	??_setDelayOff_GO,w
  8186  170A  3A05               	xorlw	5
  8187  170B  1903               	skipnz
  8188  170C  2F11               	goto	l8766
  8189  170D  082B               	movf	setDelayOff_GO@value,w
  8190  170E  390F               	andlw	15
  8191  170F  1D03               	btfss	3,2
  8192  1710  2F17               	goto	l8770
  8193  1711                     l8766:	
  8194  1711  3026               	movlw	38
  8195  1712  022B               	subwf	setDelayOff_GO@value,w
  8196  1713  1803               	skipnc
  8197  1714  2F17               	goto	l8770
  8198                           
  8199                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  8200  1715  082B               	movf	setDelayOff_GO@value,w
  8201  1716  2F18               	goto	L4
  8202  1717                     l8770:	
  8203                           ;DelayOff_B1.c: 94: } else {
  8204                           
  8205                           
  8206                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  8207  1717  3005               	movlw	5
  8208  1718                     L4:	
  8209  1718  00AC               	movwf	??_setDelayOff_GO
  8210  1719  082E               	movf	setDelayOff_GO@sw,w
  8211  171A  3E1A               	addlw	26
  8212  171B  076C               	addwf	_product,w
  8213  171C  00AD               	movwf	??_setDelayOff_GO+1
  8214  171D  082D               	movf	??_setDelayOff_GO+1,w
  8215  171E  0086               	movwf	6
  8216  171F  3002               	movlw	2	; select bank4/5
  8217  1720  0087               	movwf	7
  8218  1721  082C               	movf	??_setDelayOff_GO,w
  8219  1722  0081               	movwf	1
  8220                           
  8221                           ;DelayOff_B1.c: 96: }
  8222                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  8223  1723  2F30               	goto	l8776
  8224  1724                     l8772:	
  8225  1724  08AA               	movf	setDelayOff_GO@command,f
  8226  1725  1D03               	skipz
  8227  1726  2F30               	goto	l8776
  8228                           
  8229                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  8230  1727  082E               	movf	setDelayOff_GO@sw,w
  8231  1728  3E1A               	addlw	26
  8232  1729  076C               	addwf	_product,w
  8233  172A  00AC               	movwf	??_setDelayOff_GO
  8234  172B  082C               	movf	??_setDelayOff_GO,w
  8235  172C  0086               	movwf	6
  8236  172D  3002               	movlw	2	; select bank4/5
  8237  172E  0087               	movwf	7
  8238  172F  0181               	clrf	1
  8239  1730                     l8776:	
  8240                           
  8241                           ;DelayOff_B1.c: 99: }
  8242                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  8243  1730  0876               	movf	_DelayOff,w
  8244  1731  0086               	movwf	6
  8245  1732  0187               	clrf	7
  8246  1733  3000               	movlw	0
  8247  1734  3FC0               	movwi [0]fsr1
  8248  1735  3FC1               	movwi [1]fsr1
  8249                           
  8250                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  8251  1736  0876               	movf	_DelayOff,w
  8252  1737  0086               	movwf	6
  8253  1738  0187               	clrf	7
  8254  1739  0181               	clrf	1
  8255  173A  0008               	return
  8256  173B                     __end_of_setDelayOff_GO:	
  8257                           
  8258                           	psect	text34
  8259  1FAB                     __ptext34:	
  8260 ;; *************** function _DelayTimejudge *****************
  8261 ;; Defined at:
  8262 ;;		line 106 in file "../src/DelayOff_B1.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;  value           1    wreg     unsigned char 
  8265 ;; Auto vars:     Size  Location     Type
  8266 ;;  value           1    9[BANK0 ] unsigned char 
  8267 ;;  k               1    8[BANK0 ] unsigned char 
  8268 ;;  j               1    7[BANK0 ] unsigned char 
  8269 ;;  i               1    6[BANK0 ] unsigned char 
  8270 ;; Return value:  Size  Location     Type
  8271 ;;                  1    wreg      unsigned char 
  8272 ;; Registers used:
  8273 ;;		wreg, status,2, status,0, pclath, cstack
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;Total ram usage:        6 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; Hardware stack levels required when called:    6
  8286 ;; This function calls:
  8287 ;;		___bmul
  8288 ;; This function is called by:
  8289 ;;		_setDelayOff_GO
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           
  8294                           ;psect for function _DelayTimejudge
  8295  1FAB                     _DelayTimejudge:	
  8296                           
  8297                           ;incstack = 0
  8298                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  8299                           ;DelayTimejudge@value stored from wreg
  8300  1FAB  0020               	movlb	0	; select bank0
  8301  1FAC  00A9               	movwf	DelayTimejudge@value
  8302                           
  8303                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  8304  1FAD  3005               	movlw	5
  8305  1FAE  00A4               	movwf	??_DelayTimejudge
  8306  1FAF  0824               	movf	??_DelayTimejudge,w
  8307  1FB0  00A6               	movwf	DelayTimejudge@i
  8308  1FB1  01A7               	clrf	DelayTimejudge@j
  8309  1FB2  01A8               	clrf	DelayTimejudge@k
  8310                           
  8311                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  8312  1FB3  3031               	movlw	49
  8313  1FB4  0229               	subwf	DelayTimejudge@value,w
  8314  1FB5  1803               	skipnc
  8315  1FB6  2FD3               	goto	l8558
  8316                           
  8317                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  8318  1FB7  0829               	movf	DelayTimejudge@value,w
  8319  1FB8  390F               	andlw	15
  8320  1FB9  00A4               	movwf	??_DelayTimejudge
  8321  1FBA  0824               	movf	??_DelayTimejudge,w
  8322  1FBB  00A7               	movwf	DelayTimejudge@j
  8323                           
  8324                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  8325  1FBC  0829               	movf	DelayTimejudge@value,w
  8326  1FBD  00A4               	movwf	??_DelayTimejudge
  8327  1FBE  3004               	movlw	4
  8328  1FBF                     u8575:	
  8329  1FBF  36A4               	lsrf	??_DelayTimejudge,f
  8330  1FC0  0B89               	decfsz	9,f
  8331  1FC1  2FBF               	goto	u8575
  8332  1FC2  0824               	movf	??_DelayTimejudge,w
  8333  1FC3  390F               	andlw	15
  8334  1FC4  00A5               	movwf	??_DelayTimejudge+1
  8335  1FC5  0825               	movf	??_DelayTimejudge+1,w
  8336  1FC6  00A8               	movwf	DelayTimejudge@k
  8337                           
  8338                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  8339  1FC7  300A               	movlw	10
  8340  1FC8  00A4               	movwf	??_DelayTimejudge
  8341  1FC9  0824               	movf	??_DelayTimejudge,w
  8342  1FCA  00A0               	movwf	___bmul@multiplicand
  8343  1FCB  0828               	movf	DelayTimejudge@k,w
  8344  1FCC  319B  23E4         	fcall	___bmul
  8345  1FCE  0020               	movlb	0	; select bank0
  8346  1FCF  0727               	addwf	DelayTimejudge@j,w
  8347  1FD0  00A5               	movwf	??_DelayTimejudge+1
  8348  1FD1  0825               	movf	??_DelayTimejudge+1,w
  8349  1FD2  00A6               	movwf	DelayTimejudge@i
  8350  1FD3                     l8558:	
  8351                           
  8352                           ;DelayOff_B1.c: 112: }
  8353                           ;DelayOff_B1.c: 133: return i;
  8354  1FD3  0826               	movf	DelayTimejudge@i,w
  8355  1FD4  0008               	return
  8356  1FD5                     __end_of_DelayTimejudge:	
  8357                           
  8358                           	psect	text35
  8359  1BE4                     __ptext35:	
  8360 ;; *************** function ___bmul *****************
  8361 ;; Defined at:
  8362 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  8363 ;; Parameters:    Size  Location     Type
  8364 ;;  multiplier      1    wreg     unsigned char 
  8365 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8366 ;; Auto vars:     Size  Location     Type
  8367 ;;  multiplier      1    3[BANK0 ] unsigned char 
  8368 ;;  product         1    2[BANK0 ] unsigned char 
  8369 ;; Return value:  Size  Location     Type
  8370 ;;                  1    wreg      unsigned char 
  8371 ;; Registers used:
  8372 ;;		wreg, status,2, status,0
  8373 ;; Tracked objects:
  8374 ;;		On entry : 0/0
  8375 ;;		On exit  : 0/0
  8376 ;;		Unchanged: 0/0
  8377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8378 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8379 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8381 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8382 ;;Total ram usage:        4 bytes
  8383 ;; Hardware stack levels used:    1
  8384 ;; Hardware stack levels required when called:    5
  8385 ;; This function calls:
  8386 ;;		Nothing
  8387 ;; This function is called by:
  8388 ;;		_DelayTimejudge
  8389 ;; This function uses a non-reentrant model
  8390 ;;
  8391                           
  8392                           
  8393                           ;psect for function ___bmul
  8394  1BE4                     ___bmul:	
  8395                           
  8396                           ;incstack = 0
  8397                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8398                           ;___bmul@multiplier stored from wreg
  8399  1BE4  0020               	movlb	0	; select bank0
  8400  1BE5  00A3               	movwf	___bmul@multiplier
  8401  1BE6  01A2               	clrf	___bmul@product
  8402  1BE7                     l8524:	
  8403  1BE7  1C23               	btfss	___bmul@multiplier,0
  8404  1BE8  2BED               	goto	l8528
  8405  1BE9  0820               	movf	___bmul@multiplicand,w
  8406  1BEA  00A1               	movwf	??___bmul
  8407  1BEB  0821               	movf	??___bmul,w
  8408  1BEC  07A2               	addwf	___bmul@product,f
  8409  1BED                     l8528:	
  8410  1BED  1003               	clrc
  8411  1BEE  0DA0               	rlf	___bmul@multiplicand,f
  8412  1BEF  1003               	clrc
  8413  1BF0  0CA3               	rrf	___bmul@multiplier,f
  8414  1BF1  08A3               	movf	___bmul@multiplier,f
  8415  1BF2  1D03               	skipz
  8416  1BF3  2BE7               	goto	l8524
  8417  1BF4  0822               	movf	___bmul@product,w
  8418  1BF5  0008               	return
  8419  1BF6                     __end_of___bmul:	
  8420                           
  8421                           	psect	text36
  8422  0801                     __ptext36:	
  8423 ;; *************** function _setRFSW_AdjControl *****************
  8424 ;; Defined at:
  8425 ;;		line 426 in file "../src/RF_Control_B1.c"
  8426 ;; Parameters:    Size  Location     Type
  8427 ;;  sw              1    wreg     unsigned char 
  8428 ;; Auto vars:     Size  Location     Type
  8429 ;;  sw              1   70[BANK0 ] unsigned char 
  8430 ;; Return value:  Size  Location     Type
  8431 ;;		None               void
  8432 ;; Registers used:
  8433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8434 ;; Tracked objects:
  8435 ;;		On entry : 0/0
  8436 ;;		On exit  : 0/0
  8437 ;;		Unchanged: 0/0
  8438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8442 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8443 ;;Total ram usage:        3 bytes
  8444 ;; Hardware stack levels used:    1
  8445 ;; Hardware stack levels required when called:   10
  8446 ;; This function calls:
  8447 ;;		_RfSWPointSelect
  8448 ;;		_setRF_DimmerValue
  8449 ;;		_setTxData
  8450 ;; This function is called by:
  8451 ;;		_setControl_Lights_Table
  8452 ;; This function uses a non-reentrant model
  8453 ;;
  8454                           
  8455                           
  8456                           ;psect for function _setRFSW_AdjControl
  8457  0801                     _setRFSW_AdjControl:	
  8458                           
  8459                           ;incstack = 0
  8460                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8461                           ;setRFSW_AdjControl@sw stored from wreg
  8462  0801  0020               	movlb	0	; select bank0
  8463  0802  00E6               	movwf	setRFSW_AdjControl@sw
  8464                           
  8465                           ;RF_Control_B1.c: 427: RfSWPointSelect(sw);
  8466  0803  0866               	movf	setRFSW_AdjControl@sw,w
  8467  0804  319C  2497  3188   	fcall	_RfSWPointSelect
  8468                           
  8469                           ;RF_Control_B1.c: 428: if (RFSW->Status == 1) {
  8470  0807  0021               	movlb	1	; select bank1
  8471  0808  084F               	movf	_RFSW^(0+128),w
  8472  0809  0086               	movwf	6
  8473  080A  0187               	clrf	7
  8474  080B  1C01               	btfss	1,0
  8475  080C  2815               	goto	l9038
  8476                           
  8477                           ;RF_Control_B1.c: 429: Memory.Modify=1;
  8478  080D  0024               	movlb	4	; select bank4
  8479  080E  1444               	bsf	(_Memory^(0+512)+36),0
  8480                           
  8481                           ;RF_Control_B1.c: 430: setRF_DimmerValue(sw);
  8482  080F  0020               	movlb	0	; select bank0
  8483  0810  0866               	movf	setRFSW_AdjControl@sw,w
  8484  0811  3191  2133  3188   	fcall	_setRF_DimmerValue
  8485                           
  8486                           ;RF_Control_B1.c: 431: } else {
  8487  0814  2827               	goto	l2352
  8488  0815                     l9038:	
  8489                           
  8490                           ;RF_Control_B1.c: 432: product->Data[9]=product->Data[20 + sw];
  8491  0815  0020               	movlb	0	; select bank0
  8492  0816  0866               	movf	setRFSW_AdjControl@sw,w
  8493  0817  3E14               	addlw	20
  8494  0818  076C               	addwf	_product,w
  8495  0819  00E4               	movwf	??_setRFSW_AdjControl
  8496  081A  0864               	movf	??_setRFSW_AdjControl,w
  8497  081B  0086               	movwf	6
  8498  081C  3002               	movlw	2	; select bank4/5
  8499  081D  0087               	movwf	7
  8500  081E  0801               	movf	1,w
  8501  081F  00E5               	movwf	??_setRFSW_AdjControl+1
  8502  0820  086C               	movf	_product,w
  8503  0821  3E09               	addlw	9
  8504  0822  0086               	movwf	6
  8505  0823  3002               	movlw	2	; select bank4/5
  8506  0824  0087               	movwf	7
  8507  0825  0865               	movf	??_setRFSW_AdjControl+1,w
  8508  0826  0081               	movwf	1
  8509  0827                     l2352:	
  8510                           
  8511                           ;RF_Control_B1.c: 433: }
  8512                           ;RF_Control_B1.c: 434: product->Data[17]=product->Data[26 + sw];
  8513  0827  0020               	movlb	0	; select bank0
  8514  0828  0866               	movf	setRFSW_AdjControl@sw,w
  8515  0829  3E1A               	addlw	26
  8516  082A  076C               	addwf	_product,w
  8517  082B  00E4               	movwf	??_setRFSW_AdjControl
  8518  082C  0864               	movf	??_setRFSW_AdjControl,w
  8519  082D  0086               	movwf	6
  8520  082E  3002               	movlw	2	; select bank4/5
  8521  082F  0087               	movwf	7
  8522  0830  0801               	movf	1,w
  8523  0831  00E5               	movwf	??_setRFSW_AdjControl+1
  8524  0832  086C               	movf	_product,w
  8525  0833  3E11               	addlw	17
  8526  0834  0086               	movwf	6
  8527  0835  3002               	movlw	2	; select bank4/5
  8528  0836  0087               	movwf	7
  8529  0837  0865               	movf	??_setRFSW_AdjControl+1,w
  8530  0838  0081               	movwf	1
  8531                           
  8532                           ;RF_Control_B1.c: 435: setTxData();
  8533  0839  318F  2741         	fcall	_setTxData
  8534  083B  0008               	return
  8535  083C                     __end_of_setRFSW_AdjControl:	
  8536                           
  8537                           	psect	text37
  8538  1133                     __ptext37:	
  8539 ;; *************** function _setRF_DimmerValue *****************
  8540 ;; Defined at:
  8541 ;;		line 446 in file "../src/RF_Control_B1.c"
  8542 ;; Parameters:    Size  Location     Type
  8543 ;;  lights          1    wreg     unsigned char 
  8544 ;; Auto vars:     Size  Location     Type
  8545 ;;  lights          1   67[BANK0 ] unsigned char 
  8546 ;; Return value:  Size  Location     Type
  8547 ;;		None               void
  8548 ;; Registers used:
  8549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8550 ;; Tracked objects:
  8551 ;;		On entry : 0/0
  8552 ;;		On exit  : 0/0
  8553 ;;		Unchanged: 0/0
  8554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8559 ;;Total ram usage:        3 bytes
  8560 ;; Hardware stack levels used:    1
  8561 ;; Hardware stack levels required when called:    9
  8562 ;; This function calls:
  8563 ;;		_setDimmerLights_AdjRF
  8564 ;; This function is called by:
  8565 ;;		_setRFSW_AdjControl
  8566 ;; This function uses a non-reentrant model
  8567 ;;
  8568                           
  8569                           
  8570                           ;psect for function _setRF_DimmerValue
  8571  1133                     _setRF_DimmerValue:	
  8572                           
  8573                           ;incstack = 0
  8574                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8575                           ;setRF_DimmerValue@lights stored from wreg
  8576  1133  0020               	movlb	0	; select bank0
  8577  1134  00E3               	movwf	setRF_DimmerValue@lights
  8578                           
  8579                           ;RF_Control_B1.c: 447: if (RF_Data[9] > 0x64) {
  8580  1135  3065               	movlw	101
  8581  1136  0022               	movlb	2	; select bank2
  8582  1137  0229               	subwf	(_RF_Data^(0+256)+9),w
  8583  1138  1C03               	skipc
  8584  1139  2940               	goto	l8872
  8585                           
  8586                           ;RF_Control_B1.c: 448: RF_Data[9] = 0x64;
  8587  113A  3064               	movlw	100
  8588  113B  0020               	movlb	0	; select bank0
  8589  113C  00E1               	movwf	??_setRF_DimmerValue
  8590  113D  0861               	movf	??_setRF_DimmerValue,w
  8591  113E  0022               	movlb	2	; select bank2
  8592  113F  00A9               	movwf	(_RF_Data^(0+256)+9)
  8593  1140                     l8872:	
  8594                           
  8595                           ;RF_Control_B1.c: 449: }
  8596                           ;RF_Control_B1.c: 450: product->Data[9]=RF_Data[9];
  8597  1140  0829               	movf	(_RF_Data^(0+256)+9),w
  8598  1141  0020               	movlb	0	; select bank0
  8599  1142  00E1               	movwf	??_setRF_DimmerValue
  8600  1143  086C               	movf	_product,w
  8601  1144  3E09               	addlw	9
  8602  1145  0086               	movwf	6
  8603  1146  3002               	movlw	2	; select bank4/5
  8604  1147  0087               	movwf	7
  8605  1148  0861               	movf	??_setRF_DimmerValue,w
  8606  1149  0081               	movwf	1
  8607                           
  8608                           ;RF_Control_B1.c: 451: product->Data[11]=lights;
  8609  114A  0863               	movf	setRF_DimmerValue@lights,w
  8610  114B  00E1               	movwf	??_setRF_DimmerValue
  8611  114C  086C               	movf	_product,w
  8612  114D  3E0B               	addlw	11
  8613  114E  0086               	movwf	6
  8614  114F  3002               	movlw	2	; select bank4/5
  8615  1150  0087               	movwf	7
  8616  1151  0861               	movf	??_setRF_DimmerValue,w
  8617  1152  0081               	movwf	1
  8618                           
  8619                           ;RF_Control_B1.c: 452: product->Data[(20 + lights)]=product->Data[9];
  8620  1153  086C               	movf	_product,w
  8621  1154  3E09               	addlw	9
  8622  1155  0086               	movwf	6
  8623  1156  3002               	movlw	2	; select bank4/5
  8624  1157  0087               	movwf	7
  8625  1158  0801               	movf	1,w
  8626  1159  00E1               	movwf	??_setRF_DimmerValue
  8627  115A  0863               	movf	setRF_DimmerValue@lights,w
  8628  115B  3E14               	addlw	20
  8629  115C  076C               	addwf	_product,w
  8630  115D  00E2               	movwf	??_setRF_DimmerValue+1
  8631  115E  0862               	movf	??_setRF_DimmerValue+1,w
  8632  115F  0086               	movwf	6
  8633  1160  3002               	movlw	2	; select bank4/5
  8634  1161  0087               	movwf	7
  8635  1162  0861               	movf	??_setRF_DimmerValue,w
  8636  1163  0081               	movwf	1
  8637                           
  8638                           ;RF_Control_B1.c: 453: setDimmerLights_AdjRF(lights);
  8639  1164  0863               	movf	setRF_DimmerValue@lights,w
  8640  1165  319E  26EC         	fcall	_setDimmerLights_AdjRF
  8641  1167  0008               	return
  8642  1168                     __end_of_setRF_DimmerValue:	
  8643                           
  8644                           	psect	text38
  8645  1EEC                     __ptext38:	
  8646 ;; *************** function _setDimmerLights_AdjRF *****************
  8647 ;; Defined at:
  8648 ;;		line 688 in file "../src/Dimmer_B1.c"
  8649 ;; Parameters:    Size  Location     Type
  8650 ;;  lights          1    wreg     unsigned char 
  8651 ;; Auto vars:     Size  Location     Type
  8652 ;;  lights          1   64[BANK0 ] unsigned char 
  8653 ;; Return value:  Size  Location     Type
  8654 ;;		None               void
  8655 ;; Registers used:
  8656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8657 ;; Tracked objects:
  8658 ;;		On entry : 0/0
  8659 ;;		On exit  : 0/0
  8660 ;;		Unchanged: 0/0
  8661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8663 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8664 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;Total ram usage:        2 bytes
  8667 ;; Hardware stack levels used:    1
  8668 ;; Hardware stack levels required when called:    8
  8669 ;; This function calls:
  8670 ;;		_DimmerLightsPointSelect
  8671 ;;		_getPercentValue
  8672 ;; This function is called by:
  8673 ;;		_setRF_DimmerValue
  8674 ;; This function uses a non-reentrant model
  8675 ;;
  8676                           
  8677                           
  8678                           ;psect for function _setDimmerLights_AdjRF
  8679  1EEC                     _setDimmerLights_AdjRF:	
  8680                           
  8681                           ;incstack = 0
  8682                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8683                           ;setDimmerLights_AdjRF@lights stored from wreg
  8684  1EEC  0020               	movlb	0	; select bank0
  8685  1EED  00E0               	movwf	setDimmerLights_AdjRF@lights
  8686                           
  8687                           ;Dimmer_B1.c: 690: DimmerLightsPointSelect(lights);
  8688  1EEE  0860               	movf	setDimmerLights_AdjRF@lights,w
  8689  1EEF  319C  2408  319E   	fcall	_DimmerLightsPointSelect
  8690                           
  8691                           ;Dimmer_B1.c: 691: DimmerLights->AdjRF = 1;
  8692  1EF2  0878               	movf	_DimmerLights,w
  8693  1EF3  0086               	movwf	6
  8694  1EF4  3001               	movlw	1	; select bank2/3
  8695  1EF5  0087               	movwf	7
  8696  1EF6  1501               	bsf	1,2
  8697                           
  8698                           ;Dimmer_B1.c: 692: DimmerLights->Signal = 1;
  8699  1EF7  0878               	movf	_DimmerLights,w
  8700  1EF8  0086               	movwf	6
  8701  1EF9  3001               	movlw	1	; select bank2/3
  8702  1EFA  0087               	movwf	7
  8703  1EFB  1481               	bsf	1,1
  8704                           
  8705                           ;Dimmer_B1.c: 693: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8706  1EFC  0020               	movlb	0	; select bank0
  8707  1EFD  086C               	movf	_product,w
  8708  1EFE  3E09               	addlw	9
  8709  1EFF  0086               	movwf	6
  8710  1F00  3002               	movlw	2	; select bank4/5
  8711  1F01  0087               	movwf	7
  8712  1F02  0801               	movf	1,w
  8713  1F03  3196  2623         	fcall	_getPercentValue
  8714  1F05  0020               	movlb	0	; select bank0
  8715  1F06  00DF               	movwf	??_setDimmerLights_AdjRF
  8716  1F07  0878               	movf	_DimmerLights,w
  8717  1F08  3E05               	addlw	5
  8718  1F09  0086               	movwf	6
  8719  1F0A  3001               	movlw	1	; select bank2/3
  8720  1F0B  0087               	movwf	7
  8721  1F0C  085F               	movf	??_setDimmerLights_AdjRF,w
  8722  1F0D  0081               	movwf	1
  8723  1F0E  0008               	return
  8724  1F0F                     __end_of_setDimmerLights_AdjRF:	
  8725                           
  8726                           	psect	text39
  8727  1623                     __ptext39:	
  8728 ;; *************** function _getPercentValue *****************
  8729 ;; Defined at:
  8730 ;;		line 761 in file "../src/Dimmer_B1.c"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;  value           1    wreg     unsigned char 
  8733 ;; Auto vars:     Size  Location     Type
  8734 ;;  value           1   59[BANK0 ] unsigned char 
  8735 ;;  i               3   60[BANK0 ] float 
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  1    wreg      unsigned char 
  8738 ;; Registers used:
  8739 ;;		wreg, status,2, status,0, pclath, cstack
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8749 ;;Total ram usage:        6 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    7
  8752 ;; This function calls:
  8753 ;;		___awtoft
  8754 ;;		___ftadd
  8755 ;;		___ftdiv
  8756 ;;		___ftmul
  8757 ;;		___fttol
  8758 ;; This function is called by:
  8759 ;;		_setDimmerLights_AdjRF
  8760 ;; This function uses a non-reentrant model
  8761 ;;
  8762                           
  8763                           
  8764                           ;psect for function _getPercentValue
  8765  1623                     _getPercentValue:	
  8766                           
  8767                           ;incstack = 0
  8768                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8769                           ;getPercentValue@value stored from wreg
  8770  1623  0020               	movlb	0	; select bank0
  8771  1624  00DB               	movwf	getPercentValue@value
  8772                           
  8773                           ;Dimmer_B1.c: 763: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8774  1625  3000               	movlw	0
  8775  1626  00DC               	movwf	getPercentValue@i
  8776  1627  30E0               	movlw	224
  8777  1628  00DD               	movwf	getPercentValue@i+1
  8778  1629  3041               	movlw	65
  8779  162A  00DE               	movwf	getPercentValue@i+2
  8780                           
  8781                           ;Dimmer_B1.c: 764: i /= 100;
  8782  162B  3000               	movlw	0
  8783  162C  00AE               	movwf	___ftdiv@f2
  8784  162D  30C8               	movlw	200
  8785  162E  00AF               	movwf	___ftdiv@f2+1
  8786  162F  3042               	movlw	66
  8787  1630  00B0               	movwf	___ftdiv@f2+2
  8788  1631  085C               	movf	getPercentValue@i,w
  8789  1632  00B1               	movwf	___ftdiv@f1
  8790  1633  085D               	movf	getPercentValue@i+1,w
  8791  1634  00B2               	movwf	___ftdiv@f1+1
  8792  1635  085E               	movf	getPercentValue@i+2,w
  8793  1636  00B3               	movwf	___ftdiv@f1+2
  8794  1637  318D  25E4  3196   	fcall	___ftdiv
  8795  163A  0020               	movlb	0	; select bank0
  8796  163B  082E               	movf	?___ftdiv,w
  8797  163C  00DC               	movwf	getPercentValue@i
  8798  163D  082F               	movf	?___ftdiv+1,w
  8799  163E  00DD               	movwf	getPercentValue@i+1
  8800  163F  0830               	movf	?___ftdiv+2,w
  8801  1640  00DE               	movwf	getPercentValue@i+2
  8802                           
  8803                           ;Dimmer_B1.c: 765: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8804  1641  085B               	movf	getPercentValue@value,w
  8805  1642  00D9               	movwf	??_getPercentValue
  8806  1643  01DA               	clrf	??_getPercentValue+1
  8807  1644  09D9               	comf	??_getPercentValue,f
  8808  1645  09DA               	comf	??_getPercentValue+1,f
  8809  1646  0AD9               	incf	??_getPercentValue,f
  8810  1647  1903               	skipnz
  8811  1648  0ADA               	incf	??_getPercentValue+1,f
  8812  1649  0859               	movf	??_getPercentValue,w
  8813  164A  3E64               	addlw	100
  8814  164B  00A8               	movwf	___awtoft@c
  8815  164C  3000               	movlw	0
  8816  164D  3D5A               	addwfc	??_getPercentValue+1,w
  8817  164E  00A9               	movwf	___awtoft@c+1
  8818  164F  319E  2684  3196   	fcall	___awtoft
  8819  1652  0020               	movlb	0	; select bank0
  8820  1653  0828               	movf	?___awtoft,w
  8821  1654  00B1               	movwf	___ftmul@f2
  8822  1655  0829               	movf	?___awtoft+1,w
  8823  1656  00B2               	movwf	___ftmul@f2+1
  8824  1657  082A               	movf	?___awtoft+2,w
  8825  1658  00B3               	movwf	___ftmul@f2+2
  8826  1659  085C               	movf	getPercentValue@i,w
  8827  165A  00AE               	movwf	___ftmul@f1
  8828  165B  085D               	movf	getPercentValue@i+1,w
  8829  165C  00AF               	movwf	___ftmul@f1+1
  8830  165D  085E               	movf	getPercentValue@i+2,w
  8831  165E  00B0               	movwf	___ftmul@f1+2
  8832  165F  318E  268D  3196   	fcall	___ftmul
  8833  1662  0020               	movlb	0	; select bank0
  8834  1663  082E               	movf	?___ftmul,w
  8835  1664  00C1               	movwf	___ftadd@f2
  8836  1665  082F               	movf	?___ftmul+1,w
  8837  1666  00C2               	movwf	___ftadd@f2+1
  8838  1667  0830               	movf	?___ftmul+2,w
  8839  1668  00C3               	movwf	___ftadd@f2+2
  8840  1669  3000               	movlw	0
  8841  166A  00BE               	movwf	___ftadd@f1
  8842  166B  3000               	movlw	0
  8843  166C  00BF               	movwf	___ftadd@f1+1
  8844  166D  3042               	movlw	66
  8845  166E  00C0               	movwf	___ftadd@f1+2
  8846  166F  3184  24C4  3196   	fcall	___ftadd
  8847  1672  0020               	movlb	0	; select bank0
  8848  1673  083E               	movf	?___ftadd,w
  8849  1674  00CB               	movwf	___fttol@f1
  8850  1675  083F               	movf	?___ftadd+1,w
  8851  1676  00CC               	movwf	___fttol@f1+1
  8852  1677  0840               	movf	?___ftadd+2,w
  8853  1678  00CD               	movwf	___fttol@f1+2
  8854  1679  318C  2445         	fcall	___fttol
  8855  167B  0020               	movlb	0	; select bank0
  8856  167C  084B               	movf	?___fttol,w
  8857  167D  0008               	return
  8858  167E                     __end_of_getPercentValue:	
  8859                           
  8860                           	psect	text40
  8861  0E8D                     __ptext40:	
  8862 ;; *************** function ___ftmul *****************
  8863 ;; Defined at:
  8864 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8865 ;; Parameters:    Size  Location     Type
  8866 ;;  f1              3   14[BANK0 ] float 
  8867 ;;  f2              3   17[BANK0 ] float 
  8868 ;; Auto vars:     Size  Location     Type
  8869 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8870 ;;  sign            1   29[BANK0 ] unsigned char 
  8871 ;;  cntr            1   28[BANK0 ] unsigned char 
  8872 ;;  exp             1   24[BANK0 ] unsigned char 
  8873 ;; Return value:  Size  Location     Type
  8874 ;;                  3   14[BANK0 ] float 
  8875 ;; Registers used:
  8876 ;;		wreg, status,2, status,0, pclath, cstack
  8877 ;; Tracked objects:
  8878 ;;		On entry : 0/0
  8879 ;;		On exit  : 0/0
  8880 ;;		Unchanged: 0/0
  8881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8882 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8883 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8884 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8885 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8886 ;;Total ram usage:       16 bytes
  8887 ;; Hardware stack levels used:    1
  8888 ;; Hardware stack levels required when called:    6
  8889 ;; This function calls:
  8890 ;;		___ftpack
  8891 ;; This function is called by:
  8892 ;;		_getPercentValue
  8893 ;; This function uses a non-reentrant model
  8894 ;;
  8895                           
  8896                           
  8897                           ;psect for function ___ftmul
  8898  0E8D                     ___ftmul:	
  8899                           
  8900                           ;incstack = 0
  8901                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8902  0E8D  0020               	movlb	0	; select bank0
  8903  0E8E  082E               	movf	___ftmul@f1,w
  8904  0E8F  00B4               	movwf	??___ftmul
  8905  0E90  082F               	movf	___ftmul@f1+1,w
  8906  0E91  00B5               	movwf	??___ftmul+1
  8907  0E92  0830               	movf	___ftmul@f1+2,w
  8908  0E93  00B6               	movwf	??___ftmul+2
  8909  0E94  1003               	clrc
  8910  0E95  0D35               	rlf	??___ftmul+1,w
  8911  0E96  0D36               	rlf	??___ftmul+2,w
  8912  0E97  00B7               	movwf	??___ftmul+3
  8913  0E98  0837               	movf	??___ftmul+3,w
  8914  0E99  00B8               	movwf	___ftmul@exp
  8915  0E9A  08B8               	movf	___ftmul@exp,f
  8916  0E9B  1D03               	skipz
  8917  0E9C  2EA4               	goto	l6036
  8918  0E9D  3000               	movlw	0
  8919  0E9E  00AE               	movwf	?___ftmul
  8920  0E9F  3000               	movlw	0
  8921  0EA0  00AF               	movwf	?___ftmul+1
  8922  0EA1  3000               	movlw	0
  8923  0EA2  00B0               	movwf	?___ftmul+2
  8924  0EA3  0008               	return
  8925  0EA4                     l6036:	
  8926  0EA4  0831               	movf	___ftmul@f2,w
  8927  0EA5  00B4               	movwf	??___ftmul
  8928  0EA6  0832               	movf	___ftmul@f2+1,w
  8929  0EA7  00B5               	movwf	??___ftmul+1
  8930  0EA8  0833               	movf	___ftmul@f2+2,w
  8931  0EA9  00B6               	movwf	??___ftmul+2
  8932  0EAA  1003               	clrc
  8933  0EAB  0D35               	rlf	??___ftmul+1,w
  8934  0EAC  0D36               	rlf	??___ftmul+2,w
  8935  0EAD  00B7               	movwf	??___ftmul+3
  8936  0EAE  0837               	movf	??___ftmul+3,w
  8937  0EAF  00BD               	movwf	___ftmul@sign
  8938  0EB0  08BD               	movf	___ftmul@sign,f
  8939  0EB1  1D03               	skipz
  8940  0EB2  2EBA               	goto	l6042
  8941  0EB3  3000               	movlw	0
  8942  0EB4  00AE               	movwf	?___ftmul
  8943  0EB5  3000               	movlw	0
  8944  0EB6  00AF               	movwf	?___ftmul+1
  8945  0EB7  3000               	movlw	0
  8946  0EB8  00B0               	movwf	?___ftmul+2
  8947  0EB9  0008               	return
  8948  0EBA                     l6042:	
  8949  0EBA  083D               	movf	___ftmul@sign,w
  8950  0EBB  3E7B               	addlw	123
  8951  0EBC  00B4               	movwf	??___ftmul
  8952  0EBD  0834               	movf	??___ftmul,w
  8953  0EBE  07B8               	addwf	___ftmul@exp,f
  8954  0EBF  082E               	movf	___ftmul@f1,w
  8955  0EC0  00B4               	movwf	??___ftmul
  8956  0EC1  082F               	movf	___ftmul@f1+1,w
  8957  0EC2  00B5               	movwf	??___ftmul+1
  8958  0EC3  0830               	movf	___ftmul@f1+2,w
  8959  0EC4  00B6               	movwf	??___ftmul+2
  8960  0EC5  3010               	movlw	16
  8961  0EC6                     u4705:	
  8962  0EC6  36B6               	lsrf	??___ftmul+2,f
  8963  0EC7  0CB5               	rrf	??___ftmul+1,f
  8964  0EC8  0CB4               	rrf	??___ftmul,f
  8965  0EC9  0B89               	decfsz	9,f
  8966  0ECA  2EC6               	goto	u4705
  8967  0ECB  0834               	movf	??___ftmul,w
  8968  0ECC  00B7               	movwf	??___ftmul+3
  8969  0ECD  0837               	movf	??___ftmul+3,w
  8970  0ECE  00BD               	movwf	___ftmul@sign
  8971  0ECF  0831               	movf	___ftmul@f2,w
  8972  0ED0  00B4               	movwf	??___ftmul
  8973  0ED1  0832               	movf	___ftmul@f2+1,w
  8974  0ED2  00B5               	movwf	??___ftmul+1
  8975  0ED3  0833               	movf	___ftmul@f2+2,w
  8976  0ED4  00B6               	movwf	??___ftmul+2
  8977  0ED5  3010               	movlw	16
  8978  0ED6                     u4715:	
  8979  0ED6  36B6               	lsrf	??___ftmul+2,f
  8980  0ED7  0CB5               	rrf	??___ftmul+1,f
  8981  0ED8  0CB4               	rrf	??___ftmul,f
  8982  0ED9  0B89               	decfsz	9,f
  8983  0EDA  2ED6               	goto	u4715
  8984  0EDB  0834               	movf	??___ftmul,w
  8985  0EDC  00B7               	movwf	??___ftmul+3
  8986  0EDD  0837               	movf	??___ftmul+3,w
  8987  0EDE  06BD               	xorwf	___ftmul@sign,f
  8988  0EDF  3080               	movlw	128
  8989  0EE0  00B4               	movwf	??___ftmul
  8990  0EE1  0834               	movf	??___ftmul,w
  8991  0EE2  05BD               	andwf	___ftmul@sign,f
  8992  0EE3  17AF               	bsf	___ftmul@f1+1,7
  8993  0EE4  17B2               	bsf	___ftmul@f2+1,7
  8994  0EE5  30FF               	movlw	255
  8995  0EE6  05B1               	andwf	___ftmul@f2,f
  8996  0EE7  30FF               	movlw	255
  8997  0EE8  05B2               	andwf	___ftmul@f2+1,f
  8998  0EE9  3000               	movlw	0
  8999  0EEA  05B3               	andwf	___ftmul@f2+2,f
  9000  0EEB  3000               	movlw	0
  9001  0EEC  00B9               	movwf	___ftmul@f3_as_product
  9002  0EED  3000               	movlw	0
  9003  0EEE  00BA               	movwf	___ftmul@f3_as_product+1
  9004  0EEF  3000               	movlw	0
  9005  0EF0  00BB               	movwf	___ftmul@f3_as_product+2
  9006  0EF1  3007               	movlw	7
  9007  0EF2  00B4               	movwf	??___ftmul
  9008  0EF3  0834               	movf	??___ftmul,w
  9009  0EF4  00BC               	movwf	___ftmul@cntr
  9010  0EF5                     l6054:	
  9011  0EF5  1C2E               	btfss	___ftmul@f1,0
  9012  0EF6  2EFD               	goto	l6058
  9013  0EF7  0831               	movf	___ftmul@f2,w
  9014  0EF8  07B9               	addwf	___ftmul@f3_as_product,f
  9015  0EF9  0832               	movf	___ftmul@f2+1,w
  9016  0EFA  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9017  0EFB  0833               	movf	___ftmul@f2+2,w
  9018  0EFC  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9019  0EFD                     l6058:	
  9020  0EFD  3001               	movlw	1
  9021  0EFE                     u4735:	
  9022  0EFE  36B0               	lsrf	___ftmul@f1+2,f
  9023  0EFF  0CAF               	rrf	___ftmul@f1+1,f
  9024  0F00  0CAE               	rrf	___ftmul@f1,f
  9025  0F01  0B89               	decfsz	9,f
  9026  0F02  2EFE               	goto	u4735
  9027  0F03  3001               	movlw	1
  9028  0F04                     u4745:	
  9029  0F04  35B1               	lslf	___ftmul@f2,f
  9030  0F05  0DB2               	rlf	___ftmul@f2+1,f
  9031  0F06  0DB3               	rlf	___ftmul@f2+2,f
  9032  0F07  0B89               	decfsz	9,f
  9033  0F08  2F04               	goto	u4745
  9034  0F09  3001               	movlw	1
  9035  0F0A  02BC               	subwf	___ftmul@cntr,f
  9036  0F0B  1D03               	btfss	3,2
  9037  0F0C  2EF5               	goto	l6054
  9038  0F0D  3009               	movlw	9
  9039  0F0E  00B4               	movwf	??___ftmul
  9040  0F0F  0834               	movf	??___ftmul,w
  9041  0F10  00BC               	movwf	___ftmul@cntr
  9042  0F11                     l6066:	
  9043  0F11  1C2E               	btfss	___ftmul@f1,0
  9044  0F12  2F19               	goto	l6070
  9045  0F13  0831               	movf	___ftmul@f2,w
  9046  0F14  07B9               	addwf	___ftmul@f3_as_product,f
  9047  0F15  0832               	movf	___ftmul@f2+1,w
  9048  0F16  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9049  0F17  0833               	movf	___ftmul@f2+2,w
  9050  0F18  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9051  0F19                     l6070:	
  9052  0F19  3001               	movlw	1
  9053  0F1A                     u4775:	
  9054  0F1A  36B0               	lsrf	___ftmul@f1+2,f
  9055  0F1B  0CAF               	rrf	___ftmul@f1+1,f
  9056  0F1C  0CAE               	rrf	___ftmul@f1,f
  9057  0F1D  0B89               	decfsz	9,f
  9058  0F1E  2F1A               	goto	u4775
  9059  0F1F  3001               	movlw	1
  9060  0F20                     u4785:	
  9061  0F20  36BB               	lsrf	___ftmul@f3_as_product+2,f
  9062  0F21  0CBA               	rrf	___ftmul@f3_as_product+1,f
  9063  0F22  0CB9               	rrf	___ftmul@f3_as_product,f
  9064  0F23  0B89               	decfsz	9,f
  9065  0F24  2F20               	goto	u4785
  9066  0F25  3001               	movlw	1
  9067  0F26  02BC               	subwf	___ftmul@cntr,f
  9068  0F27  1D03               	btfss	3,2
  9069  0F28  2F11               	goto	l6066
  9070  0F29  0839               	movf	___ftmul@f3_as_product,w
  9071  0F2A  00A0               	movwf	___ftpack@arg
  9072  0F2B  083A               	movf	___ftmul@f3_as_product+1,w
  9073  0F2C  00A1               	movwf	___ftpack@arg+1
  9074  0F2D  083B               	movf	___ftmul@f3_as_product+2,w
  9075  0F2E  00A2               	movwf	___ftpack@arg+2
  9076  0F2F  0838               	movf	___ftmul@exp,w
  9077  0F30  00B4               	movwf	??___ftmul
  9078  0F31  0834               	movf	??___ftmul,w
  9079  0F32  00A3               	movwf	___ftpack@exp
  9080  0F33  083D               	movf	___ftmul@sign,w
  9081  0F34  00B5               	movwf	??___ftmul+1
  9082  0F35  0835               	movf	??___ftmul+1,w
  9083  0F36  00A4               	movwf	___ftpack@sign
  9084  0F37  3197  273B         	fcall	___ftpack
  9085  0F39  0020               	movlb	0	; select bank0
  9086  0F3A  0820               	movf	?___ftpack,w
  9087  0F3B  00AE               	movwf	?___ftmul
  9088  0F3C  0821               	movf	?___ftpack+1,w
  9089  0F3D  00AF               	movwf	?___ftmul+1
  9090  0F3E  0822               	movf	?___ftpack+2,w
  9091  0F3F  00B0               	movwf	?___ftmul+2
  9092  0F40  0008               	return
  9093  0F41                     __end_of___ftmul:	
  9094                           
  9095                           	psect	text41
  9096  04C4                     __ptext41:	
  9097 ;; *************** function ___ftadd *****************
  9098 ;; Defined at:
  9099 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  9100 ;; Parameters:    Size  Location     Type
  9101 ;;  f1              3   30[BANK0 ] float 
  9102 ;;  f2              3   33[BANK0 ] float 
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;  exp1            1   42[BANK0 ] unsigned char 
  9105 ;;  exp2            1   41[BANK0 ] unsigned char 
  9106 ;;  sign            1   40[BANK0 ] unsigned char 
  9107 ;; Return value:  Size  Location     Type
  9108 ;;                  3   30[BANK0 ] float 
  9109 ;; Registers used:
  9110 ;;		wreg, status,2, status,0, pclath, cstack
  9111 ;; Tracked objects:
  9112 ;;		On entry : 0/0
  9113 ;;		On exit  : 0/0
  9114 ;;		Unchanged: 0/0
  9115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9116 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9117 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9118 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9119 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9120 ;;Total ram usage:       13 bytes
  9121 ;; Hardware stack levels used:    1
  9122 ;; Hardware stack levels required when called:    6
  9123 ;; This function calls:
  9124 ;;		___ftpack
  9125 ;; This function is called by:
  9126 ;;		_getPercentValue
  9127 ;; This function uses a non-reentrant model
  9128 ;;
  9129                           
  9130                           
  9131                           ;psect for function ___ftadd
  9132  04C4                     ___ftadd:	
  9133                           
  9134                           ;incstack = 0
  9135                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9136  04C4  0020               	movlb	0	; select bank0
  9137  04C5  083E               	movf	___ftadd@f1,w
  9138  04C6  00C4               	movwf	??___ftadd
  9139  04C7  083F               	movf	___ftadd@f1+1,w
  9140  04C8  00C5               	movwf	??___ftadd+1
  9141  04C9  0840               	movf	___ftadd@f1+2,w
  9142  04CA  00C6               	movwf	??___ftadd+2
  9143  04CB  1003               	clrc
  9144  04CC  0D45               	rlf	??___ftadd+1,w
  9145  04CD  0D46               	rlf	??___ftadd+2,w
  9146  04CE  00C7               	movwf	??___ftadd+3
  9147  04CF  0847               	movf	??___ftadd+3,w
  9148  04D0  00CA               	movwf	___ftadd@exp1
  9149  04D1  0841               	movf	___ftadd@f2,w
  9150  04D2  00C4               	movwf	??___ftadd
  9151  04D3  0842               	movf	___ftadd@f2+1,w
  9152  04D4  00C5               	movwf	??___ftadd+1
  9153  04D5  0843               	movf	___ftadd@f2+2,w
  9154  04D6  00C6               	movwf	??___ftadd+2
  9155  04D7  1003               	clrc
  9156  04D8  0D45               	rlf	??___ftadd+1,w
  9157  04D9  0D46               	rlf	??___ftadd+2,w
  9158  04DA  00C7               	movwf	??___ftadd+3
  9159  04DB  0847               	movf	??___ftadd+3,w
  9160  04DC  00C9               	movwf	___ftadd@exp2
  9161  04DD  084A               	movf	___ftadd@exp1,w
  9162  04DE  1903               	btfsc	3,2
  9163  04DF  2CEC               	goto	l5924
  9164  04E0  0849               	movf	___ftadd@exp2,w
  9165  04E1  024A               	subwf	___ftadd@exp1,w
  9166  04E2  1803               	skipnc
  9167  04E3  2CF3               	goto	l5928
  9168  04E4  034A               	decf	___ftadd@exp1,w
  9169  04E5  3AFF               	xorlw	255
  9170  04E6  0749               	addwf	___ftadd@exp2,w
  9171  04E7  00C4               	movwf	??___ftadd
  9172  04E8  3019               	movlw	25
  9173  04E9  0244               	subwf	??___ftadd,w
  9174  04EA  1C03               	skipc
  9175  04EB  2CF3               	goto	l5928
  9176  04EC                     l5924:	
  9177  04EC  0841               	movf	___ftadd@f2,w
  9178  04ED  00BE               	movwf	?___ftadd
  9179  04EE  0842               	movf	___ftadd@f2+1,w
  9180  04EF  00BF               	movwf	?___ftadd+1
  9181  04F0  0843               	movf	___ftadd@f2+2,w
  9182  04F1  00C0               	movwf	?___ftadd+2
  9183  04F2  0008               	return
  9184  04F3                     l5928:	
  9185  04F3  0849               	movf	___ftadd@exp2,w
  9186  04F4  1903               	btfsc	3,2
  9187  04F5  0008               	return
  9188  04F6  084A               	movf	___ftadd@exp1,w
  9189  04F7  0249               	subwf	___ftadd@exp2,w
  9190  04F8  1803               	skipnc
  9191  04F9  2D02               	goto	l5934
  9192  04FA  0349               	decf	___ftadd@exp2,w
  9193  04FB  3AFF               	xorlw	255
  9194  04FC  074A               	addwf	___ftadd@exp1,w
  9195  04FD  00C4               	movwf	??___ftadd
  9196  04FE  3019               	movlw	25
  9197  04FF  0244               	subwf	??___ftadd,w
  9198  0500  1803               	btfsc	3,0
  9199  0501  0008               	return
  9200  0502                     l5934:	
  9201  0502  3006               	movlw	6
  9202  0503  00C4               	movwf	??___ftadd
  9203  0504  0844               	movf	??___ftadd,w
  9204  0505  00C8               	movwf	___ftadd@sign
  9205  0506  1BC0               	btfsc	___ftadd@f1+2,7
  9206  0507  17C8               	bsf	___ftadd@sign,7
  9207  0508  1BC3               	btfsc	___ftadd@f2+2,7
  9208  0509  1748               	bsf	___ftadd@sign,6
  9209  050A  17BF               	bsf	___ftadd@f1+1,7
  9210  050B  30FF               	movlw	255
  9211  050C  05BE               	andwf	___ftadd@f1,f
  9212  050D  30FF               	movlw	255
  9213  050E  05BF               	andwf	___ftadd@f1+1,f
  9214  050F  3000               	movlw	0
  9215  0510  05C0               	andwf	___ftadd@f1+2,f
  9216  0511  17C2               	bsf	___ftadd@f2+1,7
  9217  0512  30FF               	movlw	255
  9218  0513  05C1               	andwf	___ftadd@f2,f
  9219  0514  30FF               	movlw	255
  9220  0515  05C2               	andwf	___ftadd@f2+1,f
  9221  0516  3000               	movlw	0
  9222  0517  05C3               	andwf	___ftadd@f2+2,f
  9223  0518  0849               	movf	___ftadd@exp2,w
  9224  0519  024A               	subwf	___ftadd@exp1,w
  9225  051A  1803               	skipnc
  9226  051B  2D3E               	goto	l5956
  9227  051C                     l5946:	
  9228  051C  3001               	movlw	1
  9229  051D                     u4465:	
  9230  051D  35C1               	lslf	___ftadd@f2,f
  9231  051E  0DC2               	rlf	___ftadd@f2+1,f
  9232  051F  0DC3               	rlf	___ftadd@f2+2,f
  9233  0520  0B89               	decfsz	9,f
  9234  0521  2D1D               	goto	u4465
  9235  0522  3001               	movlw	1
  9236  0523  02C9               	subwf	___ftadd@exp2,f
  9237  0524  0849               	movf	___ftadd@exp2,w
  9238  0525  064A               	xorwf	___ftadd@exp1,w
  9239  0526  1903               	skipnz
  9240  0527  2D39               	goto	l5954
  9241  0528  3001               	movlw	1
  9242  0529  02C8               	subwf	___ftadd@sign,f
  9243  052A  0848               	movf	___ftadd@sign,w
  9244  052B  3907               	andlw	7
  9245  052C  1903               	btfsc	3,2
  9246  052D  2D39               	goto	l5954
  9247  052E  2D1C               	goto	l5946
  9248  052F                     l5952:	
  9249  052F  3001               	movlw	1
  9250  0530                     u4495:	
  9251  0530  36C0               	lsrf	___ftadd@f1+2,f
  9252  0531  0CBF               	rrf	___ftadd@f1+1,f
  9253  0532  0CBE               	rrf	___ftadd@f1,f
  9254  0533  0B89               	decfsz	9,f
  9255  0534  2D30               	goto	u4495
  9256  0535  3001               	movlw	1
  9257  0536  00C4               	movwf	??___ftadd
  9258  0537  0844               	movf	??___ftadd,w
  9259  0538  07CA               	addwf	___ftadd@exp1,f
  9260  0539                     l5954:	
  9261  0539  084A               	movf	___ftadd@exp1,w
  9262  053A  0649               	xorwf	___ftadd@exp2,w
  9263  053B  1903               	btfsc	3,2
  9264  053C  2D63               	goto	l3057
  9265  053D  2D2F               	goto	l5952
  9266  053E                     l5956:	
  9267  053E  084A               	movf	___ftadd@exp1,w
  9268  053F  0249               	subwf	___ftadd@exp2,w
  9269  0540  1803               	skipnc
  9270  0541  2D63               	goto	l3057
  9271  0542                     l5958:	
  9272  0542  3001               	movlw	1
  9273  0543                     u4525:	
  9274  0543  35BE               	lslf	___ftadd@f1,f
  9275  0544  0DBF               	rlf	___ftadd@f1+1,f
  9276  0545  0DC0               	rlf	___ftadd@f1+2,f
  9277  0546  0B89               	decfsz	9,f
  9278  0547  2D43               	goto	u4525
  9279  0548  3001               	movlw	1
  9280  0549  02CA               	subwf	___ftadd@exp1,f
  9281  054A  0849               	movf	___ftadd@exp2,w
  9282  054B  064A               	xorwf	___ftadd@exp1,w
  9283  054C  1903               	skipnz
  9284  054D  2D5F               	goto	l5966
  9285  054E  3001               	movlw	1
  9286  054F  02C8               	subwf	___ftadd@sign,f
  9287  0550  0848               	movf	___ftadd@sign,w
  9288  0551  3907               	andlw	7
  9289  0552  1903               	btfsc	3,2
  9290  0553  2D5F               	goto	l5966
  9291  0554  2D42               	goto	l5958
  9292  0555                     l5964:	
  9293  0555  3001               	movlw	1
  9294  0556                     u4555:	
  9295  0556  36C3               	lsrf	___ftadd@f2+2,f
  9296  0557  0CC2               	rrf	___ftadd@f2+1,f
  9297  0558  0CC1               	rrf	___ftadd@f2,f
  9298  0559  0B89               	decfsz	9,f
  9299  055A  2D56               	goto	u4555
  9300  055B  3001               	movlw	1
  9301  055C  00C4               	movwf	??___ftadd
  9302  055D  0844               	movf	??___ftadd,w
  9303  055E  07C9               	addwf	___ftadd@exp2,f
  9304  055F                     l5966:	
  9305  055F  084A               	movf	___ftadd@exp1,w
  9306  0560  0649               	xorwf	___ftadd@exp2,w
  9307  0561  1D03               	skipz
  9308  0562  2D55               	goto	l5964
  9309  0563                     l3057:	
  9310  0563  1FC8               	btfss	___ftadd@sign,7
  9311  0564  2D75               	goto	l5970
  9312  0565  30FF               	movlw	255
  9313  0566  06BE               	xorwf	___ftadd@f1,f
  9314  0567  30FF               	movlw	255
  9315  0568  06BF               	xorwf	___ftadd@f1+1,f
  9316  0569  30FF               	movlw	255
  9317  056A  06C0               	xorwf	___ftadd@f1+2,f
  9318  056B  3001               	movlw	1
  9319  056C  07BE               	addwf	___ftadd@f1,f
  9320  056D  3000               	movlw	0
  9321  056E  1803               	skipnc
  9322  056F  3001               	movlw	1
  9323  0570  07BF               	addwf	___ftadd@f1+1,f
  9324  0571  3000               	movlw	0
  9325  0572  1803               	skipnc
  9326  0573  3001               	movlw	1
  9327  0574  07C0               	addwf	___ftadd@f1+2,f
  9328  0575                     l5970:	
  9329  0575  1F48               	btfss	___ftadd@sign,6
  9330  0576  2D87               	goto	l5974
  9331  0577  30FF               	movlw	255
  9332  0578  06C1               	xorwf	___ftadd@f2,f
  9333  0579  30FF               	movlw	255
  9334  057A  06C2               	xorwf	___ftadd@f2+1,f
  9335  057B  30FF               	movlw	255
  9336  057C  06C3               	xorwf	___ftadd@f2+2,f
  9337  057D  3001               	movlw	1
  9338  057E  07C1               	addwf	___ftadd@f2,f
  9339  057F  3000               	movlw	0
  9340  0580  1803               	skipnc
  9341  0581  3001               	movlw	1
  9342  0582  07C2               	addwf	___ftadd@f2+1,f
  9343  0583  3000               	movlw	0
  9344  0584  1803               	skipnc
  9345  0585  3001               	movlw	1
  9346  0586  07C3               	addwf	___ftadd@f2+2,f
  9347  0587                     l5974:	
  9348  0587  01C8               	clrf	___ftadd@sign
  9349  0588  083E               	movf	___ftadd@f1,w
  9350  0589  07C1               	addwf	___ftadd@f2,f
  9351  058A  083F               	movf	___ftadd@f1+1,w
  9352  058B  3DC2               	addwfc	___ftadd@f2+1,f
  9353  058C  0840               	movf	___ftadd@f1+2,w
  9354  058D  3DC3               	addwfc	___ftadd@f2+2,f
  9355  058E  1FC3               	btfss	___ftadd@f2+2,7
  9356  058F  2DA2               	goto	l5984
  9357  0590  30FF               	movlw	255
  9358  0591  06C1               	xorwf	___ftadd@f2,f
  9359  0592  30FF               	movlw	255
  9360  0593  06C2               	xorwf	___ftadd@f2+1,f
  9361  0594  30FF               	movlw	255
  9362  0595  06C3               	xorwf	___ftadd@f2+2,f
  9363  0596  3001               	movlw	1
  9364  0597  07C1               	addwf	___ftadd@f2,f
  9365  0598  3000               	movlw	0
  9366  0599  1803               	skipnc
  9367  059A  3001               	movlw	1
  9368  059B  07C2               	addwf	___ftadd@f2+1,f
  9369  059C  3000               	movlw	0
  9370  059D  1803               	skipnc
  9371  059E  3001               	movlw	1
  9372  059F  07C3               	addwf	___ftadd@f2+2,f
  9373  05A0  01C8               	clrf	___ftadd@sign
  9374  05A1  0AC8               	incf	___ftadd@sign,f
  9375  05A2                     l5984:	
  9376  05A2  0841               	movf	___ftadd@f2,w
  9377  05A3  00A0               	movwf	___ftpack@arg
  9378  05A4  0842               	movf	___ftadd@f2+1,w
  9379  05A5  00A1               	movwf	___ftpack@arg+1
  9380  05A6  0843               	movf	___ftadd@f2+2,w
  9381  05A7  00A2               	movwf	___ftpack@arg+2
  9382  05A8  084A               	movf	___ftadd@exp1,w
  9383  05A9  00C4               	movwf	??___ftadd
  9384  05AA  0844               	movf	??___ftadd,w
  9385  05AB  00A3               	movwf	___ftpack@exp
  9386  05AC  0848               	movf	___ftadd@sign,w
  9387  05AD  00C5               	movwf	??___ftadd+1
  9388  05AE  0845               	movf	??___ftadd+1,w
  9389  05AF  00A4               	movwf	___ftpack@sign
  9390  05B0  3197  273B         	fcall	___ftpack
  9391  05B2  0020               	movlb	0	; select bank0
  9392  05B3  0820               	movf	?___ftpack,w
  9393  05B4  00BE               	movwf	?___ftadd
  9394  05B5  0821               	movf	?___ftpack+1,w
  9395  05B6  00BF               	movwf	?___ftadd+1
  9396  05B7  0822               	movf	?___ftpack+2,w
  9397  05B8  00C0               	movwf	?___ftadd+2
  9398  05B9  0008               	return
  9399  05BA                     __end_of___ftadd:	
  9400                           
  9401                           	psect	text42
  9402  1066                     __ptext42:	
  9403 ;; *************** function _getBuz_GO *****************
  9404 ;; Defined at:
  9405 ;;		line 82 in file "../src/Buzzer_B1.c"
  9406 ;; Parameters:    Size  Location     Type
  9407 ;;		None
  9408 ;; Auto vars:     Size  Location     Type
  9409 ;;  i               2    4[BANK0 ] int 
  9410 ;; Return value:  Size  Location     Type
  9411 ;;                  2    0[BANK0 ] int 
  9412 ;; Registers used:
  9413 ;;		wreg, status,2, status,0
  9414 ;; Tracked objects:
  9415 ;;		On entry : 0/0
  9416 ;;		On exit  : 0/0
  9417 ;;		Unchanged: 0/0
  9418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9419 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;Total ram usage:        6 bytes
  9424 ;; Hardware stack levels used:    1
  9425 ;; Hardware stack levels required when called:    5
  9426 ;; This function calls:
  9427 ;;		Nothing
  9428 ;; This function is called by:
  9429 ;;		_setRF_Main
  9430 ;; This function uses a non-reentrant model
  9431 ;;
  9432                           
  9433                           
  9434                           ;psect for function _getBuz_GO
  9435  1066                     _getBuz_GO:	
  9436                           
  9437                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9438                           
  9439                           ;incstack = 0
  9440                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9441  1066  0021               	movlb	1	; select bank1
  9442  1067  0C32               	rrf	_Buz1^(0+128),w
  9443  1068  3901               	andlw	1
  9444  1069  0020               	movlb	0	; select bank0
  9445  106A  00A2               	movwf	??_getBuz_GO
  9446  106B  01A3               	clrf	??_getBuz_GO+1
  9447  106C  0822               	movf	??_getBuz_GO,w
  9448  106D  00A4               	movwf	getBuz_GO@i
  9449  106E  0823               	movf	??_getBuz_GO+1,w
  9450  106F  00A5               	movwf	getBuz_GO@i+1
  9451                           
  9452                           ;Buzzer_B1.c: 84: return i;
  9453  1070  0825               	movf	getBuz_GO@i+1,w
  9454  1071  01A1               	clrf	?_getBuz_GO+1
  9455  1072  07A1               	addwf	?_getBuz_GO+1,f
  9456  1073  0824               	movf	getBuz_GO@i,w
  9457  1074  01A0               	clrf	?_getBuz_GO
  9458  1075  07A0               	addwf	?_getBuz_GO,f
  9459  1076  0008               	return
  9460  1077                     __end_of_getBuz_GO:	
  9461                           
  9462                           	psect	text43
  9463  179C                     __ptext43:	
  9464 ;; *************** function _CC2500_TxData *****************
  9465 ;; Defined at:
  9466 ;;		line 32 in file "../src/CC2500_B1.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;		None
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9471 ;; Return value:  Size  Location     Type
  9472 ;;		None               void
  9473 ;; Registers used:
  9474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9475 ;; Tracked objects:
  9476 ;;		On entry : 0/0
  9477 ;;		On exit  : 0/0
  9478 ;;		Unchanged: 0/0
  9479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;Total ram usage:        2 bytes
  9485 ;; Hardware stack levels used:    1
  9486 ;; Hardware stack levels required when called:    7
  9487 ;; This function calls:
  9488 ;;		_CC2500_WriteByte
  9489 ;;		_CC2500_WriteCommand
  9490 ;;		_Timeout_Counter
  9491 ;;		_set_TimeoutCleared
  9492 ;; This function is called by:
  9493 ;;		_setRF_Main
  9494 ;; This function uses a non-reentrant model
  9495 ;;
  9496                           
  9497                           
  9498                           ;psect for function _CC2500_TxData
  9499  179C                     _CC2500_TxData:	
  9500                           
  9501                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9502                           ;CC2500_B1.c: 35: RC4 = 0;
  9503                           
  9504                           ;incstack = 0
  9505                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9506  179C  0020               	movlb	0	; select bank0
  9507  179D  120E               	bcf	14,4	;volatile
  9508                           
  9509                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9510  179E  307F               	movlw	127
  9511  179F  00A4               	movwf	??_CC2500_TxData
  9512  17A0  0824               	movf	??_CC2500_TxData,w
  9513  17A1  0021               	movlb	1	; select bank1
  9514  17A2  00D2               	movwf	_SPI0Buffer^(0+128)
  9515                           
  9516                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9517  17A3  2FA7               	goto	l9198
  9518  17A4                     l9196:	
  9519                           
  9520                           ;CC2500_B1.c: 38: Timeout_Counter();
  9521  17A4  319C  2457  3197   	fcall	_Timeout_Counter
  9522  17A7                     l9198:	
  9523  17A7  0020               	movlb	0	; select bank0
  9524  17A8  1D0E               	btfss	14,2	;volatile
  9525  17A9  2FAD               	goto	l9202
  9526  17AA  0021               	movlb	1	; select bank1
  9527  17AB  1D2F               	btfss	(_myMain^(0+128)+15),2
  9528  17AC  2FA4               	goto	l9196
  9529  17AD                     l9202:	
  9530                           
  9531                           ;CC2500_B1.c: 39: };
  9532                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9533  17AD  3199  21E2  3197   	fcall	_set_TimeoutCleared
  9534                           
  9535                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9536  17B0  319C  24F1  3197   	fcall	_CC2500_WriteByte
  9537                           
  9538                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9539  17B3  0021               	movlb	1	; select bank1
  9540  17B4  0853               	movf	_Tx_Length^(0+128),w
  9541  17B5  0020               	movlb	0	; select bank0
  9542  17B6  00A4               	movwf	??_CC2500_TxData
  9543  17B7  0824               	movf	??_CC2500_TxData,w
  9544  17B8  0021               	movlb	1	; select bank1
  9545  17B9  00D2               	movwf	_SPI0Buffer^(0+128)
  9546                           
  9547                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9548  17BA  319C  24F1  3197   	fcall	_CC2500_WriteByte
  9549                           
  9550                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9551  17BD  0020               	movlb	0	; select bank0
  9552  17BE  01A5               	clrf	CC2500_TxData@loop_e
  9553  17BF                     l9216:	
  9554  17BF  0021               	movlb	1	; select bank1
  9555  17C0  0853               	movf	_Tx_Length^(0+128),w
  9556  17C1  0020               	movlb	0	; select bank0
  9557  17C2  0225               	subwf	CC2500_TxData@loop_e,w
  9558  17C3  1803               	btfsc	3,0
  9559  17C4  2FD8               	goto	l267
  9560                           
  9561                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9562  17C5  0825               	movf	CC2500_TxData@loop_e,w
  9563  17C6  3E20               	addlw	_RF_Data& (0+255)
  9564  17C7  0086               	movwf	6
  9565  17C8  3001               	movlw	1	; select bank2/3
  9566  17C9  0087               	movwf	7
  9567  17CA  0801               	movf	1,w
  9568  17CB  00A4               	movwf	??_CC2500_TxData
  9569  17CC  0824               	movf	??_CC2500_TxData,w
  9570  17CD  0021               	movlb	1	; select bank1
  9571  17CE  00D2               	movwf	_SPI0Buffer^(0+128)
  9572                           
  9573                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9574  17CF  319C  24F1  3197   	fcall	_CC2500_WriteByte
  9575  17D2  3001               	movlw	1
  9576  17D3  0020               	movlb	0	; select bank0
  9577  17D4  00A4               	movwf	??_CC2500_TxData
  9578  17D5  0824               	movf	??_CC2500_TxData,w
  9579  17D6  07A5               	addwf	CC2500_TxData@loop_e,f
  9580  17D7  2FBF               	goto	l9216
  9581  17D8                     l267:	
  9582                           
  9583                           ;CC2500_B1.c: 48: }
  9584                           ;CC2500_B1.c: 49: RC4 = 1;
  9585  17D8  160E               	bsf	14,4	;volatile
  9586                           
  9587                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9588  17D9  3035               	movlw	53
  9589  17DA  319D  2523  3197   	fcall	_CC2500_WriteCommand
  9590                           
  9591                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9592  17DD  2FE1               	goto	l9222
  9593  17DE                     l9220:	
  9594                           
  9595                           ;CC2500_B1.c: 52: Timeout_Counter();
  9596  17DE  319C  2457  3197   	fcall	_Timeout_Counter
  9597  17E1                     l9222:	
  9598  17E1  0020               	movlb	0	; select bank0
  9599  17E2  180D               	btfsc	13,0	;volatile
  9600  17E3  2FE7               	goto	l9226
  9601  17E4  0021               	movlb	1	; select bank1
  9602  17E5  1D2F               	btfss	(_myMain^(0+128)+15),2
  9603  17E6  2FDE               	goto	l9220
  9604  17E7                     l9226:	
  9605                           
  9606                           ;CC2500_B1.c: 53: };
  9607                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9608  17E7  3199  21E2  3197   	fcall	_set_TimeoutCleared
  9609                           
  9610                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9611  17EA  2FEE               	goto	l9230
  9612  17EB                     l9228:	
  9613                           
  9614                           ;CC2500_B1.c: 57: Timeout_Counter();
  9615  17EB  319C  2457  3197   	fcall	_Timeout_Counter
  9616  17EE                     l9230:	
  9617  17EE  0020               	movlb	0	; select bank0
  9618  17EF  1C0D               	btfss	13,0	;volatile
  9619  17F0  2FF4               	goto	l9234
  9620  17F1  0021               	movlb	1	; select bank1
  9621  17F2  1D2F               	btfss	(_myMain^(0+128)+15),2
  9622  17F3  2FEB               	goto	l9228
  9623  17F4                     l9234:	
  9624                           
  9625                           ;CC2500_B1.c: 58: };
  9626                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9627  17F4  3199  21E2  3197   	fcall	_set_TimeoutCleared
  9628                           
  9629                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x36);
  9630  17F7  3036               	movlw	54
  9631  17F8  319D  2523  3197   	fcall	_CC2500_WriteCommand
  9632                           
  9633                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3B);
  9634  17FB  303B               	movlw	59
  9635  17FC  319D  2523         	fcall	_CC2500_WriteCommand
  9636                           
  9637                           ;CC2500_B1.c: 65: Transceive_OK = 1;
  9638  17FE  14FB               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9639  17FF  0008               	return
  9640  1800                     __end_of_CC2500_TxData:	
  9641                           
  9642                           	psect	text44
  9643  0AD0                     __ptext44:	
  9644 ;; *************** function _CC2500_RxData *****************
  9645 ;; Defined at:
  9646 ;;		line 71 in file "../src/CC2500_B1.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;		None
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9651 ;; Return value:  Size  Location     Type
  9652 ;;		None               void
  9653 ;; Registers used:
  9654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9655 ;; Tracked objects:
  9656 ;;		On entry : 0/0
  9657 ;;		On exit  : 0/0
  9658 ;;		Unchanged: 0/0
  9659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;Total ram usage:        2 bytes
  9665 ;; Hardware stack levels used:    1
  9666 ;; Hardware stack levels required when called:    7
  9667 ;; This function calls:
  9668 ;;		_CC2500_ReadByte
  9669 ;;		_CC2500_ReadStatus
  9670 ;;		_CC2500_WriteByte
  9671 ;;		_Timeout_Counter
  9672 ;;		_set_TimeoutCleared
  9673 ;; This function is called by:
  9674 ;;		_setRF_Main
  9675 ;; This function uses a non-reentrant model
  9676 ;;
  9677                           
  9678                           
  9679                           ;psect for function _CC2500_RxData
  9680  0AD0                     _CC2500_RxData:	
  9681                           
  9682                           ;CC2500_B1.c: 72: unsigned char loop_f;
  9683                           ;CC2500_B1.c: 76: if (RB0 == 1)
  9684                           
  9685                           ;incstack = 0
  9686                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9687  0AD0  0020               	movlb	0	; select bank0
  9688  0AD1  180D               	btfsc	13,0	;volatile
  9689  0AD2  2AD7               	goto	l9248
  9690  0AD3  2AE0               	goto	l9254
  9691  0AD4                     l9246:	
  9692                           ;CC2500_B1.c: 77: {
  9693                           ;CC2500_B1.c: 78: while (RB0 == 1 && myMain.Timeout == 0) {
  9694                           
  9695                           
  9696                           ;CC2500_B1.c: 79: Timeout_Counter();
  9697  0AD4  319C  2457  318A   	fcall	_Timeout_Counter
  9698  0AD7                     l9248:	
  9699  0AD7  0020               	movlb	0	; select bank0
  9700  0AD8  1C0D               	btfss	13,0	;volatile
  9701  0AD9  2ADD               	goto	l9252
  9702  0ADA  0021               	movlb	1	; select bank1
  9703  0ADB  1D2F               	btfss	(_myMain^(0+128)+15),2
  9704  0ADC  2AD4               	goto	l9246
  9705  0ADD                     l9252:	
  9706                           
  9707                           ;CC2500_B1.c: 80: };
  9708                           ;CC2500_B1.c: 81: set_TimeoutCleared();
  9709  0ADD  3199  21E2  318A   	fcall	_set_TimeoutCleared
  9710  0AE0                     l9254:	
  9711                           
  9712                           ;CC2500_B1.c: 82: }
  9713                           ;CC2500_B1.c: 84: CC2500_ReadStatus(0x3B);
  9714  0AE0  303B               	movlw	59
  9715  0AE1  319F  270F  318A   	fcall	_CC2500_ReadStatus
  9716                           
  9717                           ;CC2500_B1.c: 86: if (s_data != 0) {
  9718  0AE4  0021               	movlb	1	; select bank1
  9719  0AE5  0856               	movf	_s_data^(0+128),w
  9720  0AE6  1903               	btfsc	3,2
  9721  0AE7  0008               	return
  9722                           
  9723                           ;CC2500_B1.c: 87: RC4 = 0;
  9724  0AE8  0020               	movlb	0	; select bank0
  9725  0AE9  120E               	bcf	14,4	;volatile
  9726                           
  9727                           ;CC2500_B1.c: 88: SPI0Buffer = 0x3F + 0xC0;
  9728  0AEA  30FF               	movlw	255
  9729  0AEB  00A4               	movwf	??_CC2500_RxData
  9730  0AEC  0824               	movf	??_CC2500_RxData,w
  9731  0AED  0021               	movlb	1	; select bank1
  9732  0AEE  00D2               	movwf	_SPI0Buffer^(0+128)
  9733                           
  9734                           ;CC2500_B1.c: 89: while (RC2 == 1 && myMain.Timeout == 0) {
  9735  0AEF  2AF6               	goto	l9264
  9736  0AF0                     l9266:	
  9737  0AF0  0021               	movlb	1	; select bank1
  9738  0AF1  192F               	btfsc	(_myMain^(0+128)+15),2
  9739  0AF2  2AF9               	goto	l292
  9740                           
  9741                           ;CC2500_B1.c: 90: Timeout_Counter();
  9742  0AF3  319C  2457  318A   	fcall	_Timeout_Counter
  9743  0AF6                     l9264:	
  9744  0AF6  0020               	movlb	0	; select bank0
  9745  0AF7  190E               	btfsc	14,2	;volatile
  9746  0AF8  2AF0               	goto	l9266
  9747  0AF9                     l292:	
  9748                           
  9749                           ;CC2500_B1.c: 91: };
  9750                           ;CC2500_B1.c: 92: if (myMain.Timeout == 0) {
  9751  0AF9  0021               	movlb	1	; select bank1
  9752  0AFA  192F               	btfsc	(_myMain^(0+128)+15),2
  9753  0AFB  2B40               	goto	l293
  9754                           
  9755                           ;CC2500_B1.c: 93: CC2500_WriteByte();
  9756  0AFC  319C  24F1  318A   	fcall	_CC2500_WriteByte
  9757                           
  9758                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  9759  0AFF  319D  25AC  318A   	fcall	_CC2500_ReadByte
  9760                           
  9761                           ;CC2500_B1.c: 96: Rx_Length = SPI0Buffer;
  9762  0B02  0021               	movlb	1	; select bank1
  9763  0B03  0852               	movf	_SPI0Buffer^(0+128),w
  9764  0B04  0020               	movlb	0	; select bank0
  9765  0B05  00A4               	movwf	??_CC2500_RxData
  9766  0B06  0824               	movf	??_CC2500_RxData,w
  9767  0B07  0021               	movlb	1	; select bank1
  9768  0B08  00D1               	movwf	_Rx_Length^(0+128)
  9769                           
  9770                           ;CC2500_B1.c: 97: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9771  0B09  0020               	movlb	0	; select bank0
  9772  0B0A  01A5               	clrf	CC2500_RxData@loop_f
  9773  0B0B                     l9280:	
  9774  0B0B  0021               	movlb	1	; select bank1
  9775  0B0C  0851               	movf	_Rx_Length^(0+128),w
  9776  0B0D  0020               	movlb	0	; select bank0
  9777  0B0E  0225               	subwf	CC2500_RxData@loop_f,w
  9778  0B0F  1803               	btfsc	3,0
  9779  0B10  2B24               	goto	l9282
  9780                           
  9781                           ;CC2500_B1.c: 98: CC2500_ReadByte();
  9782  0B11  319D  25AC  318A   	fcall	_CC2500_ReadByte
  9783                           
  9784                           ;CC2500_B1.c: 99: RF_Data[loop_f] = SPI0Buffer;
  9785  0B14  0021               	movlb	1	; select bank1
  9786  0B15  0852               	movf	_SPI0Buffer^(0+128),w
  9787  0B16  0020               	movlb	0	; select bank0
  9788  0B17  00A4               	movwf	??_CC2500_RxData
  9789  0B18  0825               	movf	CC2500_RxData@loop_f,w
  9790  0B19  3E20               	addlw	_RF_Data& (0+255)
  9791  0B1A  0086               	movwf	6
  9792  0B1B  3001               	movlw	1	; select bank2/3
  9793  0B1C  0087               	movwf	7
  9794  0B1D  0824               	movf	??_CC2500_RxData,w
  9795  0B1E  0081               	movwf	1
  9796  0B1F  3001               	movlw	1
  9797  0B20  00A4               	movwf	??_CC2500_RxData
  9798  0B21  0824               	movf	??_CC2500_RxData,w
  9799  0B22  07A5               	addwf	CC2500_RxData@loop_f,f
  9800  0B23  2B0B               	goto	l9280
  9801  0B24                     l9282:	
  9802                           
  9803                           ;CC2500_B1.c: 100: }
  9804                           ;CC2500_B1.c: 101: CC2500_ReadByte();
  9805  0B24  319D  25AC  318A   	fcall	_CC2500_ReadByte
  9806                           
  9807                           ;CC2500_B1.c: 102: RSSI = SPI0Buffer;
  9808  0B27  0021               	movlb	1	; select bank1
  9809  0B28  0852               	movf	_SPI0Buffer^(0+128),w
  9810  0B29  0020               	movlb	0	; select bank0
  9811  0B2A  00A4               	movwf	??_CC2500_RxData
  9812  0B2B  0824               	movf	??_CC2500_RxData,w
  9813  0B2C  0021               	movlb	1	; select bank1
  9814  0B2D  00D0               	movwf	_RSSI^(0+128)
  9815                           
  9816                           ;CC2500_B1.c: 103: CC2500_ReadByte();
  9817  0B2E  319D  25AC  318A   	fcall	_CC2500_ReadByte
  9818                           
  9819                           ;CC2500_B1.c: 104: CRC = SPI0Buffer;
  9820  0B31  0021               	movlb	1	; select bank1
  9821  0B32  0852               	movf	_SPI0Buffer^(0+128),w
  9822  0B33  0020               	movlb	0	; select bank0
  9823  0B34  00A4               	movwf	??_CC2500_RxData
  9824  0B35  0824               	movf	??_CC2500_RxData,w
  9825  0B36  0021               	movlb	1	; select bank1
  9826  0B37  00CB               	movwf	_CRC^(0+128)
  9827                           
  9828                           ;CC2500_B1.c: 105: RC4 = 1;
  9829  0B38  0020               	movlb	0	; select bank0
  9830  0B39  160E               	bsf	14,4	;volatile
  9831                           
  9832                           ;CC2500_B1.c: 106: if (CRC & 0x80)
  9833  0B3A  0021               	movlb	1	; select bank1
  9834  0B3B  1BCB               	btfsc	_CRC^(0+128),7
  9835                           
  9836                           ;CC2500_B1.c: 107: Receive_OK = 1;
  9837  0B3C  147B               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9838                           
  9839                           ;CC2500_B1.c: 114: RF1.RxStatus = 0;
  9840  0B3D  11BE               	bcf	_RF1^(0+128),3
  9841                           
  9842                           ;CC2500_B1.c: 115: RF1.ReceiveGO = 1;
  9843  0B3E  14BE               	bsf	_RF1^(0+128),1
  9844                           
  9845                           ;CC2500_B1.c: 116: } else {
  9846  0B3F  2B42               	goto	l9294
  9847  0B40                     l293:	
  9848                           
  9849                           ;CC2500_B1.c: 117: RC4 = 1;
  9850  0B40  0020               	movlb	0	; select bank0
  9851  0B41  160E               	bsf	14,4	;volatile
  9852  0B42                     l9294:	
  9853                           
  9854                           ;CC2500_B1.c: 118: }
  9855                           ;CC2500_B1.c: 119: set_TimeoutCleared();
  9856  0B42  3199  21E2         	fcall	_set_TimeoutCleared
  9857  0B44  0021               	movlb	1	; select bank1
  9858  0B45  0008               	return
  9859  0B46                     __end_of_CC2500_RxData:	
  9860                           
  9861                           	psect	text45
  9862  1F0F                     __ptext45:	
  9863 ;; *************** function _CC2500_ReadStatus *****************
  9864 ;; Defined at:
  9865 ;;		line 310 in file "../src/CC2500_B1.c"
  9866 ;; Parameters:    Size  Location     Type
  9867 ;;  status_addr     1    wreg     unsigned char 
  9868 ;; Auto vars:     Size  Location     Type
  9869 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9870 ;; Return value:  Size  Location     Type
  9871 ;;		None               void
  9872 ;; Registers used:
  9873 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9874 ;; Tracked objects:
  9875 ;;		On entry : 0/0
  9876 ;;		On exit  : 0/0
  9877 ;;		Unchanged: 0/0
  9878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;Total ram usage:        2 bytes
  9884 ;; Hardware stack levels used:    1
  9885 ;; Hardware stack levels required when called:    6
  9886 ;; This function calls:
  9887 ;;		_CC2500_ReadByte
  9888 ;;		_CC2500_WriteByte
  9889 ;;		_Timeout_Counter
  9890 ;;		_set_TimeoutCleared
  9891 ;; This function is called by:
  9892 ;;		_CC2500_RxData
  9893 ;; This function uses a non-reentrant model
  9894 ;;
  9895                           
  9896                           
  9897                           ;psect for function _CC2500_ReadStatus
  9898  1F0F                     _CC2500_ReadStatus:	
  9899                           
  9900                           ;incstack = 0
  9901                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9902                           ;CC2500_ReadStatus@status_addr stored from wreg
  9903  1F0F  0020               	movlb	0	; select bank0
  9904  1F10  00A3               	movwf	CC2500_ReadStatus@status_addr
  9905                           
  9906                           ;CC2500_B1.c: 311: RC4 = 0;
  9907  1F11  120E               	bcf	14,4	;volatile
  9908                           
  9909                           ;CC2500_B1.c: 312: SPI0Buffer = status_addr + 0xC0;
  9910  1F12  0823               	movf	CC2500_ReadStatus@status_addr,w
  9911  1F13  3EC0               	addlw	192
  9912  1F14  00A2               	movwf	??_CC2500_ReadStatus
  9913  1F15  0822               	movf	??_CC2500_ReadStatus,w
  9914  1F16  0021               	movlb	1	; select bank1
  9915  1F17  00D2               	movwf	_SPI0Buffer^(0+128)
  9916                           
  9917                           ;CC2500_B1.c: 314: while (RC2 == 1 && myMain.Timeout == 0) {
  9918  1F18  2F1C               	goto	l9064
  9919  1F19                     l9062:	
  9920                           
  9921                           ;CC2500_B1.c: 315: Timeout_Counter();
  9922  1F19  319C  2457  319F   	fcall	_Timeout_Counter
  9923  1F1C                     l9064:	
  9924  1F1C  0020               	movlb	0	; select bank0
  9925  1F1D  1D0E               	btfss	14,2	;volatile
  9926  1F1E  2F22               	goto	l9068
  9927  1F1F  0021               	movlb	1	; select bank1
  9928  1F20  1D2F               	btfss	(_myMain^(0+128)+15),2
  9929  1F21  2F19               	goto	l9062
  9930  1F22                     l9068:	
  9931                           
  9932                           ;CC2500_B1.c: 316: };
  9933                           ;CC2500_B1.c: 317: set_TimeoutCleared();
  9934  1F22  3199  21E2  319F   	fcall	_set_TimeoutCleared
  9935                           
  9936                           ;CC2500_B1.c: 319: CC2500_WriteByte();
  9937  1F25  319C  24F1  319F   	fcall	_CC2500_WriteByte
  9938                           
  9939                           ;CC2500_B1.c: 320: CC2500_ReadByte();
  9940  1F28  319D  25AC         	fcall	_CC2500_ReadByte
  9941                           
  9942                           ;CC2500_B1.c: 321: RC4 = 1;
  9943  1F2A  0020               	movlb	0	; select bank0
  9944  1F2B  160E               	bsf	14,4	;volatile
  9945                           
  9946                           ;CC2500_B1.c: 323: s_data = SPI0Buffer;
  9947  1F2C  0021               	movlb	1	; select bank1
  9948  1F2D  0852               	movf	_SPI0Buffer^(0+128),w
  9949  1F2E  0020               	movlb	0	; select bank0
  9950  1F2F  00A2               	movwf	??_CC2500_ReadStatus
  9951  1F30  0822               	movf	??_CC2500_ReadStatus,w
  9952  1F31  0021               	movlb	1	; select bank1
  9953  1F32  00D6               	movwf	_s_data^(0+128)
  9954  1F33  0008               	return
  9955  1F34                     __end_of_CC2500_ReadStatus:	
  9956                           
  9957                           	psect	text46
  9958  1DAC                     __ptext46:	
  9959 ;; *************** function _CC2500_ReadByte *****************
  9960 ;; Defined at:
  9961 ;;		line 244 in file "../src/CC2500_B1.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;		None
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9966 ;; Return value:  Size  Location     Type
  9967 ;;		None               void
  9968 ;; Registers used:
  9969 ;;		wreg, status,2, status,0
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;Total ram usage:        2 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; Hardware stack levels required when called:    5
  9982 ;; This function calls:
  9983 ;;		Nothing
  9984 ;; This function is called by:
  9985 ;;		_CC2500_RxData
  9986 ;;		_CC2500_ReadStatus
  9987 ;;		_CC2500_ReadREG
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           
  9992                           ;psect for function _CC2500_ReadByte
  9993  1DAC                     _CC2500_ReadByte:	
  9994                           
  9995                           ;CC2500_B1.c: 245: unsigned char loop_b;
  9996                           ;CC2500_B1.c: 246: for (loop_b = 0; loop_b < 8; loop_b++) {
  9997                           
  9998                           ;incstack = 0
  9999                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
 10000  1DAC  0020               	movlb	0	; select bank0
 10001  1DAD  01A1               	clrf	CC2500_ReadByte@loop_b
 10002  1DAE                     L5:	
 10003  1DAE  3008               	movlw	8
 10004  1DAF  0221               	subwf	CC2500_ReadByte@loop_b,w
 10005  1DB0  1803               	btfsc	3,0
 10006  1DB1  0008               	return
 10007                           
 10008                           ;CC2500_B1.c: 247: RC1 = 1;
 10009  1DB2  148E               	bsf	14,1	;volatile
 10010                           
 10011                           ;CC2500_B1.c: 248: SPI0Buffer <<= 1;
 10012  1DB3  1003               	clrc
 10013  1DB4  0021               	movlb	1	; select bank1
 10014  1DB5  0DD2               	rlf	_SPI0Buffer^(0+128),f
 10015                           
 10016                           ;CC2500_B1.c: 249: if (RC2 == 1)
 10017  1DB6  0020               	movlb	0	; select bank0
 10018  1DB7  1D0E               	btfss	14,2	;volatile
 10019  1DB8  2DBC               	goto	l8920
 10020                           
 10021                           ;CC2500_B1.c: 250: SPI0Buffer |= 0x01;
 10022  1DB9  0021               	movlb	1	; select bank1
 10023  1DBA  1452               	bsf	_SPI0Buffer^(0+128),0
 10024  1DBB  2DC2               	goto	l8922
 10025  1DBC                     l8920:	
 10026                           
 10027                           ;CC2500_B1.c: 251: else
 10028                           ;CC2500_B1.c: 252: SPI0Buffer &= 0xFE;
 10029  1DBC  30FE               	movlw	254
 10030  1DBD  0020               	movlb	0	; select bank0
 10031  1DBE  00A0               	movwf	??_CC2500_ReadByte
 10032  1DBF  0820               	movf	??_CC2500_ReadByte,w
 10033  1DC0  0021               	movlb	1	; select bank1
 10034  1DC1  05D2               	andwf	_SPI0Buffer^(0+128),f
 10035  1DC2                     l8922:	
 10036                           
 10037                           ;CC2500_B1.c: 253: RC1 = 0;
 10038  1DC2  0020               	movlb	0	; select bank0
 10039  1DC3  108E               	bcf	14,1	;volatile
 10040  1DC4  3001               	movlw	1
 10041  1DC5  00A0               	movwf	??_CC2500_ReadByte
 10042  1DC6  0820               	movf	??_CC2500_ReadByte,w
 10043  1DC7  07A1               	addwf	CC2500_ReadByte@loop_b,f
 10044  1DC8  2DAE               	goto	L5
 10045  1DC9                     __end_of_CC2500_ReadByte:	
 10046                           
 10047                           	psect	text47
 10048  19C6                     __ptext47:	
 10049 ;; *************** function _RF_Initialization *****************
 10050 ;; Defined at:
 10051 ;;		line 9 in file "../src/RF_Control_B1.c"
 10052 ;; Parameters:    Size  Location     Type
 10053 ;;		None
 10054 ;; Auto vars:     Size  Location     Type
 10055 ;;		None
 10056 ;; Return value:  Size  Location     Type
 10057 ;;		None               void
 10058 ;; Registers used:
 10059 ;;		wreg, status,2, status,0, pclath, cstack
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;Total ram usage:        0 bytes
 10070 ;; Hardware stack levels used:    1
 10071 ;; Hardware stack levels required when called:    6
 10072 ;; This function calls:
 10073 ;;		_setRF_Initialization
 10074 ;; This function is called by:
 10075 ;;		_main
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           
 10080                           ;psect for function _RF_Initialization
 10081  19C6                     _RF_Initialization:	
 10082                           
 10083                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10084                           
 10085                           ;incstack = 0
 10086                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10087  19C6  319A  22CC         	fcall	_setRF_Initialization
 10088  19C8  0008               	return
 10089  19C9                     __end_of_RF_Initialization:	
 10090                           
 10091                           	psect	text48
 10092  1ACC                     __ptext48:	
 10093 ;; *************** function _setRF_Initialization *****************
 10094 ;; Defined at:
 10095 ;;		line 43 in file "../src/RF_Control_B1.c"
 10096 ;; Parameters:    Size  Location     Type
 10097 ;;		None
 10098 ;; Auto vars:     Size  Location     Type
 10099 ;;		None
 10100 ;; Return value:  Size  Location     Type
 10101 ;;		None               void
 10102 ;; Registers used:
 10103 ;;		wreg
 10104 ;; Tracked objects:
 10105 ;;		On entry : 0/0
 10106 ;;		On exit  : 0/0
 10107 ;;		Unchanged: 0/0
 10108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;Total ram usage:        1 bytes
 10114 ;; Hardware stack levels used:    1
 10115 ;; Hardware stack levels required when called:    5
 10116 ;; This function calls:
 10117 ;;		Nothing
 10118 ;; This function is called by:
 10119 ;;		_RF_Initialization
 10120 ;; This function uses a non-reentrant model
 10121 ;;
 10122                           
 10123                           
 10124                           ;psect for function _setRF_Initialization
 10125  1ACC                     _setRF_Initialization:	
 10126                           
 10127                           ;RF_Control_B1.c: 45: Tx_Length = 21;
 10128                           
 10129                           ;incstack = 0
 10130                           ; Regs used in _setRF_Initialization: [wreg]
 10131  1ACC  3015               	movlw	21
 10132  1ACD  0020               	movlb	0	; select bank0
 10133  1ACE  00A0               	movwf	??_setRF_Initialization
 10134  1ACF  0820               	movf	??_setRF_Initialization,w
 10135  1AD0  0021               	movlb	1	; select bank1
 10136  1AD1  00D3               	movwf	_Tx_Length^(0+128)
 10137                           
 10138                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
 10139  1AD2  3014               	movlw	20
 10140  1AD3  0020               	movlb	0	; select bank0
 10141  1AD4  00A0               	movwf	??_setRF_Initialization
 10142  1AD5  0820               	movf	??_setRF_Initialization,w
 10143  1AD6  0021               	movlb	1	; select bank1
 10144  1AD7  00C3               	movwf	(_RF1^(0+128)+5)
 10145  1AD8  0008               	return
 10146  1AD9                     __end_of_setRF_Initialization:	
 10147                           
 10148                           	psect	text49
 10149  1BD2                     __ptext49:	
 10150 ;; *************** function _Mcu_Initialization *****************
 10151 ;; Defined at:
 10152 ;;		line 30 in file "../src/MCU_B1.c"
 10153 ;; Parameters:    Size  Location     Type
 10154 ;;		None
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;		None
 10157 ;; Return value:  Size  Location     Type
 10158 ;;		None               void
 10159 ;; Registers used:
 10160 ;;		wreg, status,2, status,0, pclath, cstack
 10161 ;; Tracked objects:
 10162 ;;		On entry : 0/0
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;Total ram usage:        0 bytes
 10171 ;; Hardware stack levels used:    1
 10172 ;; Hardware stack levels required when called:    6
 10173 ;; This function calls:
 10174 ;;		_ADC_Set
 10175 ;;		_Fosc_Set
 10176 ;;		_IOC_Set
 10177 ;;		_IO_Set
 10178 ;;		_TMR0_Set
 10179 ;;		_WDT_Set
 10180 ;; This function is called by:
 10181 ;;		_main
 10182 ;; This function uses a non-reentrant model
 10183 ;;
 10184                           
 10185                           
 10186                           ;psect for function _Mcu_Initialization
 10187  1BD2                     _Mcu_Initialization:	
 10188                           
 10189                           ;MCU_B1.c: 32: Fosc_Set();
 10190                           
 10191                           ;incstack = 0
 10192                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10193  1BD2  3199  21DE  319B   	fcall	_Fosc_Set
 10194                           
 10195                           ;MCU_B1.c: 34: IO_Set();
 10196  1BD5  319D  250A  319B   	fcall	_IO_Set
 10197                           
 10198                           ;MCU_B1.c: 36: TMR0_Set();
 10199  1BD8  319A  222D  319B   	fcall	_TMR0_Set
 10200                           
 10201                           ;MCU_B1.c: 38: ;;
 10202                           ;MCU_B1.c: 40: ADC_Set();
 10203  1BDB  3199  21FE  319B   	fcall	_ADC_Set
 10204                           
 10205                           ;MCU_B1.c: 44: ;;
 10206                           ;MCU_B1.c: 46: IOC_Set();
 10207  1BDE  319B  236E  319B   	fcall	_IOC_Set
 10208                           
 10209                           ;MCU_B1.c: 48: ;;
 10210                           ;MCU_B1.c: 50: ;;
 10211                           ;MCU_B1.c: 52: WDT_Set();
 10212  1BE1  319A  2284         	fcall	_WDT_Set
 10213  1BE3  0008               	return
 10214  1BE4                     __end_of_Mcu_Initialization:	
 10215                           
 10216                           	psect	text50
 10217  1A84                     __ptext50:	
 10218 ;; *************** function _WDT_Set *****************
 10219 ;; Defined at:
 10220 ;;		line 901 in file "../src/MCU_B1.c"
 10221 ;; Parameters:    Size  Location     Type
 10222 ;;		None
 10223 ;; Auto vars:     Size  Location     Type
 10224 ;;		None
 10225 ;; Return value:  Size  Location     Type
 10226 ;;		None               void
 10227 ;; Registers used:
 10228 ;;		wreg
 10229 ;; Tracked objects:
 10230 ;;		On entry : 0/0
 10231 ;;		On exit  : 0/0
 10232 ;;		Unchanged: 0/0
 10233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10236 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10237 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10238 ;;Total ram usage:        1 bytes
 10239 ;; Hardware stack levels used:    1
 10240 ;; Hardware stack levels required when called:    5
 10241 ;; This function calls:
 10242 ;;		Nothing
 10243 ;; This function is called by:
 10244 ;;		_Mcu_Initialization
 10245 ;; This function uses a non-reentrant model
 10246 ;;
 10247                           
 10248                           
 10249                           ;psect for function _WDT_Set
 10250  1A84                     _WDT_Set:	
 10251                           
 10252                           ;MCU_B1.c: 902: WDTCON = 0b00010111;;
 10253                           
 10254                           ;incstack = 0
 10255                           ; Regs used in _WDT_Set: [wreg]
 10256  1A84  3017               	movlw	23
 10257  1A85  0021               	movlb	1	; select bank1
 10258  1A86  0097               	movwf	23	;volatile
 10259                           
 10260                           ;MCU_B1.c: 903: WDT.Enable = 1;
 10261  1A87  1449               	bsf	_WDT^(0+128),0
 10262                           
 10263                           ;MCU_B1.c: 904: WDT.Count = 10;
 10264  1A88  300A               	movlw	10
 10265  1A89  0020               	movlb	0	; select bank0
 10266  1A8A  00A0               	movwf	??_WDT_Set
 10267  1A8B  0820               	movf	??_WDT_Set,w
 10268  1A8C  0021               	movlb	1	; select bank1
 10269  1A8D  00CA               	movwf	(_WDT^(0+128)+1)
 10270  1A8E  0008               	return
 10271  1A8F                     __end_of_WDT_Set:	
 10272                           
 10273                           	psect	text51
 10274  1A2D                     __ptext51:	
 10275 ;; *************** function _TMR0_Set *****************
 10276 ;; Defined at:
 10277 ;;		line 126 in file "../src/MCU_B1.c"
 10278 ;; Parameters:    Size  Location     Type
 10279 ;;		None
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;		None
 10282 ;; Return value:  Size  Location     Type
 10283 ;;		None               void
 10284 ;; Registers used:
 10285 ;;		wreg, status,2
 10286 ;; Tracked objects:
 10287 ;;		On entry : 0/0
 10288 ;;		On exit  : 0/0
 10289 ;;		Unchanged: 0/0
 10290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;Total ram usage:        0 bytes
 10296 ;; Hardware stack levels used:    1
 10297 ;; Hardware stack levels required when called:    5
 10298 ;; This function calls:
 10299 ;;		Nothing
 10300 ;; This function is called by:
 10301 ;;		_Mcu_Initialization
 10302 ;; This function uses a non-reentrant model
 10303 ;;
 10304                           
 10305                           
 10306                           ;psect for function _TMR0_Set
 10307  1A2D                     _TMR0_Set:	
 10308                           
 10309                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 10310                           
 10311                           ;incstack = 0
 10312                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10313  1A2D  0021               	movlb	1	; select bank1
 10314  1A2E  0195               	clrf	21	;volatile
 10315                           
 10316                           ;MCU_B1.c: 129: TMR0 = (256-190);
 10317  1A2F  3042               	movlw	66
 10318  1A30  0020               	movlb	0	; select bank0
 10319  1A31  0095               	movwf	21	;volatile
 10320                           
 10321                           ;MCU_B1.c: 130: TMR0IE = 1;
 10322  1A32  168B               	bsf	11,5	;volatile
 10323                           
 10324                           ;MCU_B1.c: 131: GIE = 1;
 10325  1A33  178B               	bsf	11,7	;volatile
 10326  1A34  0008               	return
 10327  1A35                     __end_of_TMR0_Set:	
 10328                           
 10329                           	psect	text52
 10330  1D0A                     __ptext52:	
 10331 ;; *************** function _IO_Set *****************
 10332 ;; Defined at:
 10333 ;;		line 60 in file "../src/MCU_B1.c"
 10334 ;; Parameters:    Size  Location     Type
 10335 ;;		None
 10336 ;; Auto vars:     Size  Location     Type
 10337 ;;		None
 10338 ;; Return value:  Size  Location     Type
 10339 ;;		None               void
 10340 ;; Registers used:
 10341 ;;		wreg, status,2
 10342 ;; Tracked objects:
 10343 ;;		On entry : 0/0
 10344 ;;		On exit  : 0/0
 10345 ;;		Unchanged: 0/0
 10346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;Total ram usage:        0 bytes
 10352 ;; Hardware stack levels used:    1
 10353 ;; Hardware stack levels required when called:    5
 10354 ;; This function calls:
 10355 ;;		Nothing
 10356 ;; This function is called by:
 10357 ;;		_Mcu_Initialization
 10358 ;; This function uses a non-reentrant model
 10359 ;;
 10360                           
 10361                           
 10362                           ;psect for function _IO_Set
 10363  1D0A                     _IO_Set:	
 10364                           
 10365                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10366                           
 10367                           ;incstack = 0
 10368                           ; Regs used in _IO_Set: [wreg+status,2]
 10369  1D0A  3077               	movlw	119
 10370  1D0B  0021               	movlb	1	; select bank1
 10371  1D0C  008C               	movwf	12	;volatile
 10372                           
 10373                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10374  1D0D  3007               	movlw	7
 10375  1D0E  008D               	movwf	13	;volatile
 10376                           
 10377                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10378  1D0F  300C               	movlw	12
 10379  1D10  008E               	movwf	14	;volatile
 10380                           
 10381                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10382  1D11  0022               	movlb	2	; select bank2
 10383  1D12  018C               	clrf	12	;volatile
 10384                           
 10385                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10386  1D13  3002               	movlw	2
 10387  1D14  008D               	movwf	13	;volatile
 10388                           
 10389                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10390  1D15  018E               	clrf	14	;volatile
 10391                           
 10392                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10393  1D16  3022               	movlw	34
 10394  1D17  0023               	movlb	3	; select bank3
 10395  1D18  008C               	movwf	12	;volatile
 10396                           
 10397                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10398  1D19  018D               	clrf	13	;volatile
 10399                           
 10400                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10401  1D1A  018E               	clrf	14	;volatile
 10402                           
 10403                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10404  1D1B  3077               	movlw	119
 10405  1D1C  0020               	movlb	0	; select bank0
 10406  1D1D  008C               	movwf	12	;volatile
 10407                           
 10408                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10409  1D1E  3007               	movlw	7
 10410  1D1F  008D               	movwf	13	;volatile
 10411                           
 10412                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10413  1D20  300C               	movlw	12
 10414  1D21  008E               	movwf	14	;volatile
 10415  1D22  0008               	return
 10416  1D23                     __end_of_IO_Set:	
 10417                           
 10418                           	psect	text53
 10419  1B6E                     __ptext53:	
 10420 ;; *************** function _IOC_Set *****************
 10421 ;; Defined at:
 10422 ;;		line 263 in file "../src/MCU_B1.c"
 10423 ;; Parameters:    Size  Location     Type
 10424 ;;		None
 10425 ;; Auto vars:     Size  Location     Type
 10426 ;;		None
 10427 ;; Return value:  Size  Location     Type
 10428 ;;		None               void
 10429 ;; Registers used:
 10430 ;;		wreg, status,2
 10431 ;; Tracked objects:
 10432 ;;		On entry : 0/0
 10433 ;;		On exit  : 0/0
 10434 ;;		Unchanged: 0/0
 10435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;Total ram usage:        0 bytes
 10441 ;; Hardware stack levels used:    1
 10442 ;; Hardware stack levels required when called:    5
 10443 ;; This function calls:
 10444 ;;		Nothing
 10445 ;; This function is called by:
 10446 ;;		_Mcu_Initialization
 10447 ;; This function uses a non-reentrant model
 10448 ;;
 10449                           
 10450                           
 10451                           ;psect for function _IOC_Set
 10452  1B6E                     _IOC_Set:	
 10453                           
 10454                           ;MCU_B1.c: 264: WPUB2 = 0;
 10455                           
 10456                           ;incstack = 0
 10457                           ; Regs used in _IOC_Set: [wreg+status,2]
 10458  1B6E  0024               	movlb	4	; select bank4
 10459  1B6F  110D               	bcf	13,2	;volatile
 10460                           
 10461                           ;MCU_B1.c: 267: IOCBP = 0b00000100;
 10462  1B70  3004               	movlw	4
 10463  1B71  0027               	movlb	7	; select bank7
 10464  1B72  0094               	movwf	20	;volatile
 10465                           
 10466                           ;MCU_B1.c: 268: IOCBN = 0b00000100;
 10467  1B73  3004               	movlw	4
 10468  1B74  0095               	movwf	21	;volatile
 10469                           
 10470                           ;MCU_B1.c: 271: IOCBP = 0b00000000;
 10471  1B75  0194               	clrf	20	;volatile
 10472                           
 10473                           ;MCU_B1.c: 272: IOCBN = 0b00000100;
 10474  1B76  3004               	movlw	4
 10475  1B77  0095               	movwf	21	;volatile
 10476                           
 10477                           ;MCU_B1.c: 288: IOCBF = 0b00000000;
 10478  1B78  0196               	clrf	22	;volatile
 10479                           
 10480                           ;MCU_B1.c: 290: IOCIE = 1;
 10481  1B79  158B               	bsf	11,3	;volatile
 10482                           
 10483                           ;MCU_B1.c: 291: IOCIF = 0;
 10484  1B7A  100B               	bcf	11,0	;volatile
 10485                           
 10486                           ;MCU_B1.c: 292: PEIE = 1;
 10487  1B7B  170B               	bsf	11,6	;volatile
 10488                           
 10489                           ;MCU_B1.c: 293: GIE = 1;
 10490  1B7C  178B               	bsf	11,7	;volatile
 10491  1B7D  0008               	return
 10492  1B7E                     __end_of_IOC_Set:	
 10493                           
 10494                           	psect	text54
 10495  19DE                     __ptext54:	
 10496 ;; *************** function _Fosc_Set *****************
 10497 ;; Defined at:
 10498 ;;		line 56 in file "../src/MCU_B1.c"
 10499 ;; Parameters:    Size  Location     Type
 10500 ;;		None
 10501 ;; Auto vars:     Size  Location     Type
 10502 ;;		None
 10503 ;; Return value:  Size  Location     Type
 10504 ;;		None               void
 10505 ;; Registers used:
 10506 ;;		wreg
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10516 ;;Total ram usage:        0 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:    5
 10519 ;; This function calls:
 10520 ;;		Nothing
 10521 ;; This function is called by:
 10522 ;;		_Mcu_Initialization
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           
 10527                           ;psect for function _Fosc_Set
 10528  19DE                     _Fosc_Set:	
 10529                           
 10530                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10531                           
 10532                           ;incstack = 0
 10533                           ; Regs used in _Fosc_Set: [wreg]
 10534  19DE  3078               	movlw	120
 10535  19DF  0021               	movlb	1	; select bank1
 10536  19E0  0099               	movwf	25	;volatile
 10537  19E1  0008               	return
 10538  19E2                     __end_of_Fosc_Set:	
 10539                           
 10540                           	psect	text55
 10541  19FE                     __ptext55:	
 10542 ;; *************** function _ADC_Set *****************
 10543 ;; Defined at:
 10544 ;;		line 315 in file "../src/MCU_B1.c"
 10545 ;; Parameters:    Size  Location     Type
 10546 ;;		None
 10547 ;; Auto vars:     Size  Location     Type
 10548 ;;		None
 10549 ;; Return value:  Size  Location     Type
 10550 ;;		None               void
 10551 ;; Registers used:
 10552 ;;		wreg
 10553 ;; Tracked objects:
 10554 ;;		On entry : 0/0
 10555 ;;		On exit  : 0/0
 10556 ;;		Unchanged: 0/0
 10557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10562 ;;Total ram usage:        0 bytes
 10563 ;; Hardware stack levels used:    1
 10564 ;; Hardware stack levels required when called:    5
 10565 ;; This function calls:
 10566 ;;		Nothing
 10567 ;; This function is called by:
 10568 ;;		_Mcu_Initialization
 10569 ;; This function uses a non-reentrant model
 10570 ;;
 10571                           
 10572                           
 10573                           ;psect for function _ADC_Set
 10574  19FE                     _ADC_Set:	
 10575                           
 10576                           ;MCU_B1.c: 316: ADCON1 = 0xf2;
 10577                           
 10578                           ;incstack = 0
 10579                           ; Regs used in _ADC_Set: [wreg]
 10580  19FE  30F2               	movlw	242
 10581  19FF  0021               	movlb	1	; select bank1
 10582  1A00  009E               	movwf	30	;volatile
 10583                           
 10584                           ;MCU_B1.c: 317: FVRCON = 0xc0;
 10585  1A01  30C0               	movlw	192
 10586  1A02  0022               	movlb	2	; select bank2
 10587  1A03  0097               	movwf	23	;volatile
 10588  1A04  0008               	return
 10589  1A05                     __end_of_ADC_Set:	
 10590                           
 10591                           	psect	text56
 10592  020A                     __ptext56:	
 10593 ;; *************** function _Load_Main *****************
 10594 ;; Defined at:
 10595 ;;		line 39 in file "../src/OverLoad_B1.c"
 10596 ;; Parameters:    Size  Location     Type
 10597 ;;		None
 10598 ;; Auto vars:     Size  Location     Type
 10599 ;;  i               1   19[BANK0 ] unsigned char 
 10600 ;; Return value:  Size  Location     Type
 10601 ;;		None               void
 10602 ;; Registers used:
 10603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10604 ;; Tracked objects:
 10605 ;;		On entry : 0/0
 10606 ;;		On exit  : 0/0
 10607 ;;		Unchanged: 0/0
 10608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;Total ram usage:        3 bytes
 10614 ;; Hardware stack levels used:    1
 10615 ;; Hardware stack levels required when called:   10
 10616 ;; This function calls:
 10617 ;;		___lwdiv
 10618 ;;		___wmul
 10619 ;;		_getTemp_Safe
 10620 ;;		_setDimmerLights_Clear
 10621 ;;		_setLoad_AH_AL_Restore
 10622 ;;		_setLoad_Exceptions
 10623 ;; This function is called by:
 10624 ;;		_main
 10625 ;; This function uses a non-reentrant model
 10626 ;;
 10627                           
 10628                           
 10629                           ;psect for function _Load_Main
 10630  020A                     _Load_Main:	
 10631                           
 10632                           ;OverLoad_B1.c: 40: char i = 0;
 10633                           
 10634                           ;incstack = 0
 10635                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10636  020A  0020               	movlb	0	; select bank0
 10637  020B  01B3               	clrf	Load_Main@i
 10638                           
 10639                           ;OverLoad_B1.c: 41: if (Load1.ERROR == 1) {
 10640  020C  0023               	movlb	3	; select bank3
 10641  020D  1EA0               	btfss	_Load1^(0+384),5
 10642  020E  2A20               	goto	l1688
 10643                           
 10644                           ;OverLoad_B1.c: 42: Load1.ErrorTime++;
 10645  020F  3001               	movlw	1
 10646  0210  07A3               	addwf	(_Load1^(0+384)+3),f
 10647  0211  3000               	movlw	0
 10648  0212  3DA4               	addwfc	((_Load1+1)^(0+384)+3),f
 10649                           
 10650                           ;OverLoad_B1.c: 43: if (Load1.ErrorTime >= 1000)
 10651  0213  3003               	movlw	3
 10652  0214  0224               	subwf	((_Load1+1)^(0+384)+3),w
 10653  0215  30E8               	movlw	232
 10654  0216  1903               	skipnz
 10655  0217  0223               	subwf	(_Load1^(0+384)+3),w
 10656  0218  1C03               	skipc
 10657  0219  0008               	return
 10658                           
 10659                           ;OverLoad_B1.c: 44: {
 10660                           ;OverLoad_B1.c: 45: Load1.ErrorTime = 0;
 10661  021A  01A3               	clrf	(_Load1^(0+384)+3)
 10662  021B  01A4               	clrf	((_Load1+1)^(0+384)+3)
 10663                           
 10664                           ;OverLoad_B1.c: 46: setLoad_Exceptions(0);
 10665  021C  3000               	movlw	0
 10666  021D  3191  21D5         	fcall	_setLoad_Exceptions
 10667                           
 10668                           ;OverLoad_B1.c: 47: }
 10669                           ;OverLoad_B1.c: 48: } else {
 10670  021F  0008               	return
 10671  0220                     l1688:	
 10672                           
 10673                           ;OverLoad_B1.c: 49: if (Load1.ADtoGO == 1) {
 10674  0220  1E20               	btfss	_Load1^(0+384),4
 10675  0221  2B4B               	goto	l1691
 10676                           
 10677                           ;OverLoad_B1.c: 50: Load1.Time++;
 10678  0222  3001               	movlw	1
 10679  0223  07A1               	addwf	(_Load1^(0+384)+1),f
 10680  0224  3000               	movlw	0
 10681  0225  3DA2               	addwfc	((_Load1+1)^(0+384)+1),f
 10682                           
 10683                           ;OverLoad_B1.c: 51: if (Load1.Time >= 5)
 10684  0226  3000               	movlw	0
 10685  0227  0222               	subwf	((_Load1+1)^(0+384)+1),w
 10686  0228  3005               	movlw	5
 10687  0229  1903               	skipnz
 10688  022A  0221               	subwf	(_Load1^(0+384)+1),w
 10689  022B  1C03               	skipc
 10690  022C  0008               	return
 10691                           
 10692                           ;OverLoad_B1.c: 52: {
 10693                           ;OverLoad_B1.c: 53: Load1.Time = 0;
 10694  022D  01A1               	clrf	(_Load1^(0+384)+1)
 10695  022E  01A2               	clrf	((_Load1+1)^(0+384)+1)
 10696                           
 10697                           ;OverLoad_B1.c: 54: Load1.ADtoGO = 0;
 10698  022F  1220               	bcf	_Load1^(0+384),4
 10699                           
 10700                           ;OverLoad_B1.c: 55: Load1.LightsCount = Load1.Lights1Status + Load1.Lights2Status + Load
      +                          1.Lights3Status;
 10701  0230  0863               	movf	(_Load1^(0+384)+67),w
 10702  0231  0764               	addwf	(_Load1^(0+384)+68),w
 10703  0232  0765               	addwf	(_Load1^(0+384)+69),w
 10704  0233  0020               	movlb	0	; select bank0
 10705  0234  00B1               	movwf	??_Load_Main
 10706  0235  0831               	movf	??_Load_Main,w
 10707  0236  0023               	movlb	3	; select bank3
 10708  0237  00DE               	movwf	(_Load1^(0+384)+62)
 10709                           
 10710                           ;OverLoad_B1.c: 56: for (i = 1; i < 4; i++) {
 10711  0238  0020               	movlb	0	; select bank0
 10712  0239  01B3               	clrf	Load_Main@i
 10713  023A  0AB3               	incf	Load_Main@i,f
 10714  023B  3004               	movlw	4
 10715  023C  0233               	subwf	Load_Main@i,w
 10716  023D  1803               	btfsc	3,0
 10717  023E  2A69               	goto	l10462
 10718  023F                     l10456:	
 10719                           
 10720                           ;OverLoad_B1.c: 57: Load1.ADH += Load1.AH[i];
 10721  023F  3533               	lslf	Load_Main@i,w
 10722  0240  3EA8               	addlw	(_Load1+8)& (0+255)
 10723  0241  0086               	movwf	6
 10724  0242  3001               	movlw	1	; select bank3/4
 10725  0243  0087               	movwf	7
 10726  0244  3F40               	moviw [0]fsr1
 10727  0245  00B1               	movwf	??_Load_Main
 10728  0246  3F41               	moviw [1]fsr1
 10729  0247  00B2               	movwf	??_Load_Main+1
 10730  0248  0831               	movf	??_Load_Main,w
 10731  0249  0023               	movlb	3	; select bank3
 10732  024A  07CE               	addwf	(_Load1^(0+384)+46),f
 10733  024B  0020               	movlb	0	; select bank0
 10734  024C  0832               	movf	??_Load_Main+1,w
 10735  024D  0023               	movlb	3	; select bank3
 10736  024E  3DCF               	addwfc	((_Load1+1)^(0+384)+46),f
 10737                           
 10738                           ;OverLoad_B1.c: 58: Load1.ADL += Load1.AL[i];
 10739  024F  0020               	movlb	0	; select bank0
 10740  0250  3533               	lslf	Load_Main@i,w
 10741  0251  3EBA               	addlw	(_Load1+26)& (0+255)
 10742  0252  0086               	movwf	6
 10743  0253  3001               	movlw	1	; select bank3/4
 10744  0254  0087               	movwf	7
 10745  0255  3F40               	moviw [0]fsr1
 10746  0256  00B1               	movwf	??_Load_Main
 10747  0257  3F41               	moviw [1]fsr1
 10748  0258  00B2               	movwf	??_Load_Main+1
 10749  0259  0831               	movf	??_Load_Main,w
 10750  025A  0023               	movlb	3	; select bank3
 10751  025B  07D0               	addwf	(_Load1^(0+384)+48),f
 10752  025C  0020               	movlb	0	; select bank0
 10753  025D  0832               	movf	??_Load_Main+1,w
 10754  025E  0023               	movlb	3	; select bank3
 10755  025F  3DD1               	addwfc	((_Load1+1)^(0+384)+48),f
 10756  0260  3001               	movlw	1
 10757  0261  0020               	movlb	0	; select bank0
 10758  0262  00B1               	movwf	??_Load_Main
 10759  0263  0831               	movf	??_Load_Main,w
 10760  0264  07B3               	addwf	Load_Main@i,f
 10761  0265  3004               	movlw	4
 10762  0266  0233               	subwf	Load_Main@i,w
 10763  0267  1C03               	skipc
 10764  0268  2A3F               	goto	l10456
 10765  0269                     l10462:	
 10766                           
 10767                           ;OverLoad_B1.c: 59: }
 10768                           ;OverLoad_B1.c: 60: Load1.ADH /= 3;
 10769  0269  3003               	movlw	3
 10770  026A  00A0               	movwf	___lwdiv@divisor
 10771  026B  3000               	movlw	0
 10772  026C  00A1               	movwf	___lwdiv@divisor+1
 10773  026D  0023               	movlb	3	; select bank3
 10774  026E  084F               	movf	((_Load1+1)^(0+384)+46),w
 10775  026F  0020               	movlb	0	; select bank0
 10776  0270  01A3               	clrf	___lwdiv@dividend+1
 10777  0271  07A3               	addwf	___lwdiv@dividend+1,f
 10778  0272  0023               	movlb	3	; select bank3
 10779  0273  084E               	movf	(_Load1^(0+384)+46),w
 10780  0274  0020               	movlb	0	; select bank0
 10781  0275  01A2               	clrf	___lwdiv@dividend
 10782  0276  07A2               	addwf	___lwdiv@dividend,f
 10783  0277  3191  219E  3182   	fcall	___lwdiv
 10784  027A  0020               	movlb	0	; select bank0
 10785  027B  0821               	movf	?___lwdiv+1,w
 10786  027C  0023               	movlb	3	; select bank3
 10787  027D  01CF               	clrf	((_Load1+1)^(0+384)+46)
 10788  027E  07CF               	addwf	((_Load1+1)^(0+384)+46),f
 10789  027F  0020               	movlb	0	; select bank0
 10790  0280  0820               	movf	?___lwdiv,w
 10791  0281  0023               	movlb	3	; select bank3
 10792  0282  01CE               	clrf	(_Load1^(0+384)+46)
 10793  0283  07CE               	addwf	(_Load1^(0+384)+46),f
 10794                           
 10795                           ;OverLoad_B1.c: 61: Load1.ADL /= 3;
 10796  0284  3003               	movlw	3
 10797  0285  0020               	movlb	0	; select bank0
 10798  0286  00A0               	movwf	___lwdiv@divisor
 10799  0287  3000               	movlw	0
 10800  0288  00A1               	movwf	___lwdiv@divisor+1
 10801  0289  0023               	movlb	3	; select bank3
 10802  028A  0851               	movf	((_Load1+1)^(0+384)+48),w
 10803  028B  0020               	movlb	0	; select bank0
 10804  028C  01A3               	clrf	___lwdiv@dividend+1
 10805  028D  07A3               	addwf	___lwdiv@dividend+1,f
 10806  028E  0023               	movlb	3	; select bank3
 10807  028F  0850               	movf	(_Load1^(0+384)+48),w
 10808  0290  0020               	movlb	0	; select bank0
 10809  0291  01A2               	clrf	___lwdiv@dividend
 10810  0292  07A2               	addwf	___lwdiv@dividend,f
 10811  0293  3191  219E  3182   	fcall	___lwdiv
 10812  0296  0020               	movlb	0	; select bank0
 10813  0297  0821               	movf	?___lwdiv+1,w
 10814  0298  0023               	movlb	3	; select bank3
 10815  0299  01D1               	clrf	((_Load1+1)^(0+384)+48)
 10816  029A  07D1               	addwf	((_Load1+1)^(0+384)+48),f
 10817  029B  0020               	movlb	0	; select bank0
 10818  029C  0820               	movf	?___lwdiv,w
 10819  029D  0023               	movlb	3	; select bank3
 10820  029E  01D0               	clrf	(_Load1^(0+384)+48)
 10821  029F  07D0               	addwf	(_Load1^(0+384)+48),f
 10822                           
 10823                           ;OverLoad_B1.c: 62: if (Load1.ADH > Load1.ADL) {
 10824  02A0  084F               	movf	((_Load1+1)^(0+384)+46),w
 10825  02A1  0251               	subwf	((_Load1+1)^(0+384)+48),w
 10826  02A2  1D03               	skipz
 10827  02A3  2AA6               	goto	u11365
 10828  02A4  084E               	movf	(_Load1^(0+384)+46),w
 10829  02A5  0250               	subwf	(_Load1^(0+384)+48),w
 10830  02A6                     u11365:	
 10831  02A6  1803               	skipnc
 10832  02A7  2B48               	goto	l10520
 10833                           
 10834                           ;OverLoad_B1.c: 63: Load1.AD = (Load1.ADH - Load1.ADL);
 10835  02A8  302E               	movlw	46
 10836  02A9  3EA0               	addlw	_Load1& (0+255)
 10837  02AA  0086               	movwf	6
 10838  02AB  3001               	movlw	1	; select bank3/4
 10839  02AC  0087               	movwf	7
 10840  02AD  0950               	comf	(_Load1^(0+384)+48),w
 10841  02AE  0020               	movlb	0	; select bank0
 10842  02AF  00B1               	movwf	??_Load_Main
 10843  02B0  0023               	movlb	3	; select bank3
 10844  02B1  0951               	comf	((_Load1+1)^(0+384)+48),w
 10845  02B2  0020               	movlb	0	; select bank0
 10846  02B3  00B2               	movwf	??_Load_Main+1
 10847  02B4  0AB1               	incf	??_Load_Main,f
 10848  02B5  1903               	skipnz
 10849  02B6  0AB2               	incf	??_Load_Main+1,f
 10850  02B7  3F40               	moviw [0]fsr1
 10851  02B8  0731               	addwf	??_Load_Main,w
 10852  02B9  0023               	movlb	3	; select bank3
 10853  02BA  00CC               	movwf	(_Load1^(0+384)+44)
 10854  02BB  3F41               	moviw [1]fsr1
 10855  02BC  0020               	movlb	0	; select bank0
 10856  02BD  3D32               	addwfc	??_Load_Main+1,w
 10857  02BE  0023               	movlb	3	; select bank3
 10858  02BF  00CD               	movwf	(_Load1^(0+384)+45)
 10859                           
 10860                           ;OverLoad_B1.c: 65: if (Load1.Count < 2) {
 10861  02C0  3002               	movlw	2
 10862  02C1  025A               	subwf	(_Load1^(0+384)+58),w
 10863  02C2  1803               	skipnc
 10864  02C3  2AE5               	goto	l10484
 10865                           
 10866                           ;OverLoad_B1.c: 66: Load1.Count++;
 10867  02C4  3001               	movlw	1
 10868  02C5  0020               	movlb	0	; select bank0
 10869  02C6  00B1               	movwf	??_Load_Main
 10870  02C7  0831               	movf	??_Load_Main,w
 10871  02C8  0023               	movlb	3	; select bank3
 10872  02C9  07DA               	addwf	(_Load1^(0+384)+58),f
 10873                           
 10874                           ;OverLoad_B1.c: 67: if (Load1.Count == 1) {
 10875  02CA  085A               	movf	(_Load1^(0+384)+58),w
 10876  02CB  3A01               	xorlw	1
 10877  02CC  1D03               	skipz
 10878  02CD  2AD2               	goto	l10476
 10879                           
 10880                           ;OverLoad_B1.c: 68: Load1.JudgeValue = 500;
 10881  02CE  30F4               	movlw	244
 10882  02CF  00D6               	movwf	(_Load1^(0+384)+54)
 10883  02D0  3001               	movlw	1
 10884  02D1  2ADD               	goto	L6
 10885  02D2                     l10476:	
 10886                           ;OverLoad_B1.c: 69: } else if (Load1.Count == 2) {
 10887                           
 10888  02D2  085A               	movf	(_Load1^(0+384)+58),w
 10889  02D3  3A02               	xorlw	2
 10890  02D4  1D03               	skipz
 10891  02D5  2AE5               	goto	l10484
 10892                           
 10893                           ;OverLoad_B1.c: 70: if (Load1.LightsCount == 1) {
 10894  02D6  085E               	movf	(_Load1^(0+384)+62),w
 10895  02D7  3A01               	xorlw	1
 10896  02D8  1D03               	skipz
 10897  02D9  2ADF               	goto	l10482
 10898                           
 10899                           ;OverLoad_B1.c: 71: Load1.JudgeValue = 0x32;
 10900  02DA  3032               	movlw	50
 10901  02DB  00D6               	movwf	(_Load1^(0+384)+54)
 10902  02DC  3000               	movlw	0
 10903  02DD                     L6:	
 10904  02DD  00D7               	movwf	(_Load1^(0+384)+55)
 10905                           
 10906                           ;OverLoad_B1.c: 72: } else {
 10907  02DE  2AE5               	goto	l10484
 10908  02DF                     l10482:	
 10909                           
 10910                           ;OverLoad_B1.c: 73: Load1.JudgeValue = (0x32 + Load1.TotalLoad) - 0x08;
 10911  02DF  0826               	movf	(_Load1^(0+384)+6),w
 10912  02E0  3E2A               	addlw	42
 10913  02E1  00D6               	movwf	(_Load1^(0+384)+54)
 10914  02E2  3000               	movlw	0
 10915  02E3  3D27               	addwfc	((_Load1+1)^(0+384)+6),w
 10916  02E4  00D7               	movwf	((_Load1+1)^(0+384)+54)
 10917  02E5                     l10484:	
 10918                           
 10919                           ;OverLoad_B1.c: 74: }
 10920                           ;OverLoad_B1.c: 75: }
 10921                           ;OverLoad_B1.c: 76: }
 10922                           ;OverLoad_B1.c: 78: if (Load1.AD >= Load1.JudgeValue) {
 10923  02E5  0857               	movf	((_Load1+1)^(0+384)+54),w
 10924  02E6  024D               	subwf	((_Load1+1)^(0+384)+44),w
 10925  02E7  1D03               	skipz
 10926  02E8  2AEB               	goto	u11415
 10927  02E9  0856               	movf	(_Load1^(0+384)+54),w
 10928  02EA  024C               	subwf	(_Load1^(0+384)+44),w
 10929  02EB                     u11415:	
 10930  02EB  1C03               	skipc
 10931  02EC  2AFD               	goto	l10494
 10932                           
 10933                           ;OverLoad_B1.c: 79: Load1.ErrorCount++;
 10934  02ED  3001               	movlw	1
 10935  02EE  0020               	movlb	0	; select bank0
 10936  02EF  00B1               	movwf	??_Load_Main
 10937  02F0  0831               	movf	??_Load_Main,w
 10938  02F1  0023               	movlb	3	; select bank3
 10939  02F2  07DC               	addwf	(_Load1^(0+384)+60),f
 10940                           
 10941                           ;OverLoad_B1.c: 80: if (Load1.ErrorCount > 2) {
 10942  02F3  3003               	movlw	3
 10943  02F4  025C               	subwf	(_Load1^(0+384)+60),w
 10944  02F5  1C03               	skipc
 10945  02F6  2B48               	goto	l10520
 10946                           
 10947                           ;OverLoad_B1.c: 81: Load1.ErrorCount = 0;
 10948  02F7  01DC               	clrf	(_Load1^(0+384)+60)
 10949                           
 10950                           ;OverLoad_B1.c: 82: setLoad_Exceptions(1);
 10951  02F8  3001               	movlw	1
 10952  02F9  3191  21D5  3182   	fcall	_setLoad_Exceptions
 10953                           
 10954                           ;OverLoad_B1.c: 90: }
 10955                           ;OverLoad_B1.c: 91: } else {
 10956  02FC  2B48               	goto	l10520
 10957  02FD                     l10494:	
 10958                           
 10959                           ;OverLoad_B1.c: 92: Load1.ErrorCount = 0;
 10960  02FD  0023               	movlb	3	; select bank3
 10961  02FE  01DC               	clrf	(_Load1^(0+384)+60)
 10962                           
 10963                           ;OverLoad_B1.c: 93: if (Load1.SafeCount < 10) {
 10964  02FF  300A               	movlw	10
 10965  0300  0262               	subwf	(_Load1^(0+384)+66),w
 10966  0301  1803               	skipnc
 10967  0302  2B09               	goto	l10500
 10968                           
 10969                           ;OverLoad_B1.c: 94: Load1.SafeCount++;
 10970  0303  3001               	movlw	1
 10971  0304  0020               	movlb	0	; select bank0
 10972  0305  00B1               	movwf	??_Load_Main
 10973  0306  0831               	movf	??_Load_Main,w
 10974  0307  0023               	movlb	3	; select bank3
 10975  0308  07E2               	addwf	(_Load1^(0+384)+66),f
 10976  0309                     l10500:	
 10977                           
 10978                           ;OverLoad_B1.c: 95: }
 10979                           ;OverLoad_B1.c: 96: if (Load1.SafeCount >= 10) {
 10980  0309  300A               	movlw	10
 10981  030A  0262               	subwf	(_Load1^(0+384)+66),w
 10982  030B  1C03               	skipc
 10983  030C  2B48               	goto	l10520
 10984                           
 10985                           ;OverLoad_B1.c: 97: Load1.Safe = 1;
 10986  030D  15A0               	bsf	_Load1^(0+384),3
 10987                           
 10988                           ;OverLoad_B1.c: 101: setDimmerLights_Clear(1, 1);
 10989  030E  0020               	movlb	0	; select bank0
 10990  030F  01A2               	clrf	setDimmerLights_Clear@command
 10991  0310  0AA2               	incf	setDimmerLights_Clear@command,f
 10992  0311  3001               	movlw	1
 10993  0312  319B  235E  3182   	fcall	_setDimmerLights_Clear
 10994                           
 10995                           ;OverLoad_B1.c: 105: ;;
 10996                           ;OverLoad_B1.c: 111: setDimmerLights_Clear(2, 1);
 10997  0315  0020               	movlb	0	; select bank0
 10998  0316  01A2               	clrf	setDimmerLights_Clear@command
 10999  0317  0AA2               	incf	setDimmerLights_Clear@command,f
 11000  0318  3002               	movlw	2
 11001  0319  319B  235E  3182   	fcall	_setDimmerLights_Clear
 11002                           
 11003                           ;OverLoad_B1.c: 115: ;;
 11004                           ;OverLoad_B1.c: 129: if (Load1.StatusOn == 1) {
 11005  031C  0023               	movlb	3	; select bank3
 11006  031D  1F20               	btfss	_Load1^(0+384),6
 11007  031E  2B26               	goto	l10512
 11008                           
 11009                           ;OverLoad_B1.c: 130: Load1.StatusOn = 0;
 11010  031F  1320               	bcf	_Load1^(0+384),6
 11011                           
 11012                           ;OverLoad_B1.c: 131: Load1.TotalLoad = Load1.AD;
 11013  0320  084D               	movf	((_Load1+1)^(0+384)+44),w
 11014  0321  01A7               	clrf	((_Load1+1)^(0+384)+6)
 11015  0322  07A7               	addwf	((_Load1+1)^(0+384)+6),f
 11016  0323  084C               	movf	(_Load1^(0+384)+44),w
 11017  0324  01A6               	clrf	(_Load1^(0+384)+6)
 11018  0325  07A6               	addwf	(_Load1^(0+384)+6),f
 11019  0326                     l10512:	
 11020                           
 11021                           ;OverLoad_B1.c: 133: }
 11022                           ;OverLoad_B1.c: 135: if (Load1.StatusOff == 1) {
 11023  0326  1FA0               	btfss	_Load1^(0+384),7
 11024  0327  2B48               	goto	l10520
 11025                           
 11026                           ;OverLoad_B1.c: 136: Load1.StatusOff = 0;
 11027  0328  13A0               	bcf	_Load1^(0+384),7
 11028                           
 11029                           ;OverLoad_B1.c: 137: Load1.TotalLoad = Load1.AD;
 11030  0329  084D               	movf	((_Load1+1)^(0+384)+44),w
 11031  032A  01A7               	clrf	((_Load1+1)^(0+384)+6)
 11032  032B  07A7               	addwf	((_Load1+1)^(0+384)+6),f
 11033  032C  084C               	movf	(_Load1^(0+384)+44),w
 11034  032D  01A6               	clrf	(_Load1^(0+384)+6)
 11035  032E  07A6               	addwf	(_Load1^(0+384)+6),f
 11036                           
 11037                           ;OverLoad_B1.c: 138: Load1.JudgeValue = 0x32 * Load1.LightsCount;
 11038  032F  085E               	movf	(_Load1^(0+384)+62),w
 11039  0330  0020               	movlb	0	; select bank0
 11040  0331  00B1               	movwf	??_Load_Main
 11041  0332  01B2               	clrf	??_Load_Main+1
 11042  0333  0831               	movf	??_Load_Main,w
 11043  0334  00A0               	movwf	___wmul@multiplier
 11044  0335  0832               	movf	??_Load_Main+1,w
 11045  0336  00A1               	movwf	___wmul@multiplier+1
 11046  0337  3032               	movlw	50
 11047  0338  00A2               	movwf	___wmul@multiplicand
 11048  0339  3000               	movlw	0
 11049  033A  00A3               	movwf	___wmul@multiplicand+1
 11050  033B  319D  25C9  3182   	fcall	___wmul
 11051  033E  0020               	movlb	0	; select bank0
 11052  033F  0821               	movf	?___wmul+1,w
 11053  0340  0023               	movlb	3	; select bank3
 11054  0341  01D7               	clrf	((_Load1+1)^(0+384)+54)
 11055  0342  07D7               	addwf	((_Load1+1)^(0+384)+54),f
 11056  0343  0020               	movlb	0	; select bank0
 11057  0344  0820               	movf	?___wmul,w
 11058  0345  0023               	movlb	3	; select bank3
 11059  0346  01D6               	clrf	(_Load1^(0+384)+54)
 11060  0347  07D6               	addwf	(_Load1^(0+384)+54),f
 11061  0348                     l10520:	
 11062                           
 11063                           ;OverLoad_B1.c: 139: }
 11064                           ;OverLoad_B1.c: 140: }
 11065                           ;OverLoad_B1.c: 141: }
 11066                           ;OverLoad_B1.c: 142: }
 11067                           ;OverLoad_B1.c: 143: setLoad_AH_AL_Restore();
 11068  0348  319D  2557         	fcall	_setLoad_AH_AL_Restore
 11069                           
 11070                           ;OverLoad_B1.c: 155: }
 11071                           ;OverLoad_B1.c: 156: } else {
 11072  034A  0008               	return
 11073  034B                     l1691:	
 11074                           
 11075                           ;OverLoad_B1.c: 157: if (Load1.GO == 1) {
 11076  034B  1CA0               	btfss	_Load1^(0+384),1
 11077  034C  2B5A               	goto	l1710
 11078                           
 11079                           ;OverLoad_B1.c: 158: if (Load1.LightsON == 0) {
 11080  034D  1920               	btfsc	_Load1^(0+384),2
 11081  034E  2B51               	goto	l10526
 11082                           
 11083                           ;OverLoad_B1.c: 159: Load1.LightsON = 1;
 11084  034F  1520               	bsf	_Load1^(0+384),2
 11085                           
 11086                           ;OverLoad_B1.c: 160: Load1.Safe = 0;
 11087  0350  11A0               	bcf	_Load1^(0+384),3
 11088  0351                     l10526:	
 11089                           
 11090                           ;OverLoad_B1.c: 161: }
 11091                           ;OverLoad_B1.c: 162: if (getTemp_Safe() == 1 && 1 == 1) {
 11092  0351  319A  2225  3182   	fcall	_getTemp_Safe
 11093  0354  3A01               	xorlw	1
 11094  0355  1D03               	skipz
 11095  0356  0008               	return
 11096                           
 11097                           ;OverLoad_B1.c: 163: Load1.ADtoGO = 1;
 11098  0357  0023               	movlb	3	; select bank3
 11099  0358  1620               	bsf	_Load1^(0+384),4
 11100                           
 11101                           ;OverLoad_B1.c: 164: }
 11102                           ;OverLoad_B1.c: 165: } else {
 11103  0359  0008               	return
 11104  035A                     l1710:	
 11105                           
 11106                           ;OverLoad_B1.c: 166: if (Load1.LightsON == 1) {
 11107  035A  1D20               	btfss	_Load1^(0+384),2
 11108  035B  0008               	return
 11109                           
 11110                           ;OverLoad_B1.c: 167: Load1.LightsON = 0;
 11111  035C  1120               	bcf	_Load1^(0+384),2
 11112                           
 11113                           ;OverLoad_B1.c: 168: Load1.Safe = 1;
 11114  035D  15A0               	bsf	_Load1^(0+384),3
 11115                           
 11116                           ;OverLoad_B1.c: 169: Load1.ErrorCount = 0;
 11117  035E  01DC               	clrf	(_Load1^(0+384)+60)
 11118                           
 11119                           ;OverLoad_B1.c: 170: Load1.Count = 0;
 11120  035F  01DA               	clrf	(_Load1^(0+384)+58)
 11121                           
 11122                           ;OverLoad_B1.c: 171: Load1.TotalLoad = 0;
 11123  0360  01A6               	clrf	(_Load1^(0+384)+6)
 11124  0361  01A7               	clrf	((_Load1+1)^(0+384)+6)
 11125                           
 11126                           ;OverLoad_B1.c: 172: Load1.NumberCount = 0;
 11127  0362  01DF               	clrf	(_Load1^(0+384)+63)
 11128                           
 11129                           ;OverLoad_B1.c: 173: Load1.StatusOn = 0;
 11130  0363  1320               	bcf	_Load1^(0+384),6
 11131                           
 11132                           ;OverLoad_B1.c: 174: Load1.StatusOff = 0;
 11133  0364  13A0               	bcf	_Load1^(0+384),7
 11134                           
 11135                           ;OverLoad_B1.c: 175: Load1.AD = 0;
 11136  0365  01CC               	clrf	(_Load1^(0+384)+44)
 11137  0366  01CD               	clrf	((_Load1+1)^(0+384)+44)
 11138                           
 11139                           ;OverLoad_B1.c: 176: setLoad_AH_AL_Restore();
 11140  0367  319D  2557  3182   	fcall	_setLoad_AH_AL_Restore
 11141                           
 11142                           ;OverLoad_B1.c: 180: setDimmerLights_Clear(1, 1);
 11143  036A  0020               	movlb	0	; select bank0
 11144  036B  01A2               	clrf	setDimmerLights_Clear@command
 11145  036C  0AA2               	incf	setDimmerLights_Clear@command,f
 11146  036D  3001               	movlw	1
 11147  036E  319B  235E  3182   	fcall	_setDimmerLights_Clear
 11148                           
 11149                           ;OverLoad_B1.c: 184: ;;
 11150                           ;OverLoad_B1.c: 190: setDimmerLights_Clear(2, 1);
 11151  0371  0020               	movlb	0	; select bank0
 11152  0372  01A2               	clrf	setDimmerLights_Clear@command
 11153  0373  0AA2               	incf	setDimmerLights_Clear@command,f
 11154  0374  3002               	movlw	2
 11155  0375  319B  235E         	fcall	_setDimmerLights_Clear
 11156                           
 11157                           ;OverLoad_B1.c: 194: ;;
 11158  0377  0008               	return
 11159  0378                     __end_of_Load_Main:	
 11160                           
 11161                           	psect	text57
 11162  11D5                     __ptext57:	
 11163 ;; *************** function _setLoad_Exceptions *****************
 11164 ;; Defined at:
 11165 ;;		line 231 in file "../src/OverLoad_B1.c"
 11166 ;; Parameters:    Size  Location     Type
 11167 ;;  command         1    wreg     unsigned char 
 11168 ;; Auto vars:     Size  Location     Type
 11169 ;;  command         1   16[BANK0 ] unsigned char 
 11170 ;;  i               1   15[BANK0 ] unsigned char 
 11171 ;; Return value:  Size  Location     Type
 11172 ;;		None               void
 11173 ;; Registers used:
 11174 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11175 ;; Tracked objects:
 11176 ;;		On entry : 0/0
 11177 ;;		On exit  : 0/0
 11178 ;;		Unchanged: 0/0
 11179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11183 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11184 ;;Total ram usage:        3 bytes
 11185 ;; Hardware stack levels used:    1
 11186 ;; Hardware stack levels required when called:    9
 11187 ;; This function calls:
 11188 ;;		_DimmerLights_Exceptions
 11189 ;;		_setLED
 11190 ;;		_setRF_Enable
 11191 ;;		_setSw_Enable
 11192 ;; This function is called by:
 11193 ;;		_Load_Main
 11194 ;; This function uses a non-reentrant model
 11195 ;;
 11196                           
 11197                           
 11198                           ;psect for function _setLoad_Exceptions
 11199  11D5                     _setLoad_Exceptions:	
 11200                           
 11201                           ;incstack = 0
 11202                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11203                           ;setLoad_Exceptions@command stored from wreg
 11204  11D5  0020               	movlb	0	; select bank0
 11205  11D6  00B0               	movwf	setLoad_Exceptions@command
 11206                           
 11207                           ;OverLoad_B1.c: 232: char i = command == 1 ? 0 : 1;
 11208  11D7  0830               	movf	setLoad_Exceptions@command,w
 11209  11D8  3A01               	xorlw	1
 11210  11D9  3000               	movlw	0
 11211  11DA  1D03               	skipz
 11212  11DB  3001               	movlw	1
 11213  11DC  00AE               	movwf	??_setLoad_Exceptions
 11214  11DD  082E               	movf	??_setLoad_Exceptions,w
 11215  11DE  00AF               	movwf	setLoad_Exceptions@i
 11216                           
 11217                           ;OverLoad_B1.c: 233: Load1.ERROR = command;
 11218  11DF  0830               	movf	setLoad_Exceptions@command,w
 11219  11E0  0023               	movlb	3	; select bank3
 11220  11E1  12A0               	bcf	_Load1^(0+384),5
 11221  11E2  1D03               	skipz
 11222  11E3  16A0               	bsf	_Load1^(0+384),5
 11223                           
 11224                           ;OverLoad_B1.c: 234: Load1.Safe = i;
 11225  11E4  0020               	movlb	0	; select bank0
 11226  11E5  082F               	movf	setLoad_Exceptions@i,w
 11227  11E6  0023               	movlb	3	; select bank3
 11228  11E7  11A0               	bcf	_Load1^(0+384),3
 11229  11E8  1D03               	skipz
 11230  11E9  15A0               	bsf	_Load1^(0+384),3
 11231                           
 11232                           ;OverLoad_B1.c: 235: Load1.ErrorStatus = command;
 11233  11EA  0020               	movlb	0	; select bank0
 11234  11EB  0830               	movf	setLoad_Exceptions@command,w
 11235  11EC  00AE               	movwf	??_setLoad_Exceptions
 11236  11ED  082E               	movf	??_setLoad_Exceptions,w
 11237  11EE  0023               	movlb	3	; select bank3
 11238  11EF  00A5               	movwf	(_Load1^(0+384)+5)
 11239                           
 11240                           ;OverLoad_B1.c: 237: if (command == 1) {
 11241  11F0  0020               	movlb	0	; select bank0
 11242  11F1  0830               	movf	setLoad_Exceptions@command,w
 11243  11F2  3A01               	xorlw	1
 11244  11F3  1D03               	skipz
 11245  11F4  29F9               	goto	l1718
 11246                           
 11247                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 11248  11F5  3002               	movlw	2
 11249  11F6  3193  23E9  3191   	fcall	_DimmerLights_Exceptions
 11250  11F9                     l1718:	
 11251                           
 11252                           ;OverLoad_B1.c: 242: }
 11253                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 11254  11F9  0020               	movlb	0	; select bank0
 11255  11FA  0830               	movf	setLoad_Exceptions@command,w
 11256  11FB  3E0A               	addlw	10
 11257  11FC  00AE               	movwf	??_setLoad_Exceptions
 11258  11FD  082E               	movf	??_setLoad_Exceptions,w
 11259  11FE  00A2               	movwf	setLED@command
 11260  11FF  3063               	movlw	99
 11261  1200  3196  267E  3191   	fcall	_setLED
 11262                           
 11263                           ;OverLoad_B1.c: 245: setSw_Enable(i);
 11264  1203  0020               	movlb	0	; select bank0
 11265  1204  082F               	movf	setLoad_Exceptions@i,w
 11266  1205  319D  2573  3191   	fcall	_setSw_Enable
 11267                           
 11268                           ;OverLoad_B1.c: 247: setRF_Enable(i);
 11269  1208  0020               	movlb	0	; select bank0
 11270  1209  082F               	movf	setLoad_Exceptions@i,w
 11271  120A  319A  22F4         	fcall	_setRF_Enable
 11272  120C  0008               	return
 11273  120D                     __end_of_setLoad_Exceptions:	
 11274                           
 11275                           	psect	text58
 11276  1D73                     __ptext58:	
 11277 ;; *************** function _setSw_Enable *****************
 11278 ;; Defined at:
 11279 ;;		line 91 in file "../src/Switch_B1.c"
 11280 ;; Parameters:    Size  Location     Type
 11281 ;;  command         1    wreg     unsigned char 
 11282 ;; Auto vars:     Size  Location     Type
 11283 ;;  command         1    2[BANK0 ] unsigned char 
 11284 ;; Return value:  Size  Location     Type
 11285 ;;		None               void
 11286 ;; Registers used:
 11287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11288 ;; Tracked objects:
 11289 ;;		On entry : 0/0
 11290 ;;		On exit  : 0/0
 11291 ;;		Unchanged: 0/0
 11292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;Total ram usage:        1 bytes
 11298 ;; Hardware stack levels used:    1
 11299 ;; Hardware stack levels required when called:    6
 11300 ;; This function calls:
 11301 ;;		_SwPointSelect
 11302 ;; This function is called by:
 11303 ;;		_my_MainTime
 11304 ;;		_setLoad_Exceptions
 11305 ;;		_setOverTemp_Exceptions
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           
 11310                           ;psect for function _setSw_Enable
 11311  1D73                     _setSw_Enable:	
 11312                           
 11313                           ;incstack = 0
 11314                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11315                           ;setSw_Enable@command stored from wreg
 11316  1D73  0020               	movlb	0	; select bank0
 11317  1D74  00A2               	movwf	setSw_Enable@command
 11318                           
 11319                           ;Switch_B1.c: 94: SwPointSelect(1);
 11320  1D75  3001               	movlw	1
 11321  1D76  319C  2443  319D   	fcall	_SwPointSelect
 11322                           
 11323                           ;Switch_B1.c: 95: Sw->Enable = command;
 11324  1D79  0020               	movlb	0	; select bank0
 11325  1D7A  086D               	movf	_Sw,w
 11326  1D7B  0086               	movwf	6
 11327  1D7C  3001               	movlw	1	; select bank2/3
 11328  1D7D  0087               	movwf	7
 11329  1D7E  0822               	movf	setSw_Enable@command,w
 11330  1D7F  1001               	bcf	1,0
 11331  1D80  1D03               	skipz
 11332  1D81  1401               	bsf	1,0
 11333                           
 11334                           ;Switch_B1.c: 99: SwPointSelect(2);
 11335  1D82  3002               	movlw	2
 11336  1D83  319C  2443         	fcall	_SwPointSelect
 11337                           
 11338                           ;Switch_B1.c: 100: Sw->Enable = command;
 11339  1D85  0020               	movlb	0	; select bank0
 11340  1D86  086D               	movf	_Sw,w
 11341  1D87  0086               	movwf	6
 11342  1D88  3001               	movlw	1	; select bank2/3
 11343  1D89  0087               	movwf	7
 11344  1D8A  0822               	movf	setSw_Enable@command,w
 11345  1D8B  1001               	bcf	1,0
 11346  1D8C  1D03               	skipz
 11347  1D8D  1401               	bsf	1,0
 11348  1D8E  0008               	return
 11349  1D8F                     __end_of_setSw_Enable:	
 11350                           
 11351                           	psect	text59
 11352  1AF4                     __ptext59:	
 11353 ;; *************** function _setRF_Enable *****************
 11354 ;; Defined at:
 11355 ;;		line 232 in file "../src/RF_Control_B1.c"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;  command         1    wreg     unsigned char 
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;  command         1    0[BANK0 ] unsigned char 
 11360 ;; Return value:  Size  Location     Type
 11361 ;;		None               void
 11362 ;; Registers used:
 11363 ;;		wreg, status,2
 11364 ;; Tracked objects:
 11365 ;;		On entry : 0/0
 11366 ;;		On exit  : 0/0
 11367 ;;		Unchanged: 0/0
 11368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;Total ram usage:        1 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    5
 11376 ;; This function calls:
 11377 ;;		Nothing
 11378 ;; This function is called by:
 11379 ;;		_my_MainTime
 11380 ;;		_setLoad_Exceptions
 11381 ;;		_setOverTemp_Exceptions
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           
 11386                           ;psect for function _setRF_Enable
 11387  1AF4                     _setRF_Enable:	
 11388                           
 11389                           ;incstack = 0
 11390                           ; Regs used in _setRF_Enable: [wreg+status,2]
 11391                           ;setRF_Enable@command stored from wreg
 11392  1AF4  0020               	movlb	0	; select bank0
 11393  1AF5  00A0               	movwf	setRF_Enable@command
 11394                           
 11395                           ;RF_Control_B1.c: 233: RF1.Enable = command;
 11396  1AF6  0820               	movf	setRF_Enable@command,w
 11397  1AF7  0021               	movlb	1	; select bank1
 11398  1AF8  103E               	bcf	_RF1^(0+128),0
 11399  1AF9  1D03               	skipz
 11400  1AFA  143E               	bsf	_RF1^(0+128),0
 11401                           
 11402                           ;RF_Control_B1.c: 234: RF1.Learn = 0;
 11403  1AFB  133E               	bcf	_RF1^(0+128),6
 11404                           
 11405                           ;RF_Control_B1.c: 235: RF1.TransceiveGO = 0;
 11406  1AFC  113E               	bcf	_RF1^(0+128),2
 11407                           
 11408                           ;RF_Control_B1.c: 236: RF1.RxStatus = 0;
 11409  1AFD  11BE               	bcf	_RF1^(0+128),3
 11410                           
 11411                           ;RF_Control_B1.c: 237: RF1.ReceiveGO = 0;
 11412  1AFE  10BE               	bcf	_RF1^(0+128),1
 11413                           
 11414                           ;RF_Control_B1.c: 238: RF1.DebounceTime = 0;
 11415  1AFF  01C4               	clrf	(_RF1^(0+128)+6)
 11416                           
 11417                           ;RF_Control_B1.c: 239: RF1.Debounce = 0;
 11418  1B00  12BE               	bcf	_RF1^(0+128),5
 11419  1B01  0008               	return
 11420  1B02                     __end_of_setRF_Enable:	
 11421                           
 11422                           	psect	text60
 11423  13E9                     __ptext60:	
 11424 ;; *************** function _DimmerLights_Exceptions *****************
 11425 ;; Defined at:
 11426 ;;		line 522 in file "../src/Dimmer_B1.c"
 11427 ;; Parameters:    Size  Location     Type
 11428 ;;  status          1    wreg     unsigned char 
 11429 ;; Auto vars:     Size  Location     Type
 11430 ;;  status          1   13[BANK0 ] unsigned char 
 11431 ;; Return value:  Size  Location     Type
 11432 ;;		None               void
 11433 ;; Registers used:
 11434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11435 ;; Tracked objects:
 11436 ;;		On entry : 0/0
 11437 ;;		On exit  : 0/0
 11438 ;;		Unchanged: 0/0
 11439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11441 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;Total ram usage:        1 bytes
 11445 ;; Hardware stack levels used:    1
 11446 ;; Hardware stack levels required when called:    8
 11447 ;; This function calls:
 11448 ;;		_getDimmerLights_StatusFlag
 11449 ;;		_setBuz
 11450 ;;		_setDimmerLights_ERROR
 11451 ;;		_setDimmerLights_TriggerERROR
 11452 ;; This function is called by:
 11453 ;;		_setLoad_Exceptions
 11454 ;;		_setOverTemp_Exceptions
 11455 ;; This function uses a non-reentrant model
 11456 ;;
 11457                           
 11458                           
 11459                           ;psect for function _DimmerLights_Exceptions
 11460  13E9                     _DimmerLights_Exceptions:	
 11461                           
 11462                           ;incstack = 0
 11463                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11464                           ;DimmerLights_Exceptions@status stored from wreg
 11465  13E9  0020               	movlb	0	; select bank0
 11466  13EA  00AD               	movwf	DimmerLights_Exceptions@status
 11467                           
 11468                           ;Dimmer_B1.c: 523: if (status == 1) {
 11469  13EB  082D               	movf	DimmerLights_Exceptions@status,w
 11470  13EC  3A01               	xorlw	1
 11471  13ED  1D03               	skipz
 11472  13EE  2BFF               	goto	l9088
 11473                           
 11474                           ;Dimmer_B1.c: 524: if (getDimmerLights_StatusFlag() == 1) {
 11475  13EF  319B  239E  3193   	fcall	_getDimmerLights_StatusFlag
 11476  13F2  3A01               	xorlw	1
 11477  13F3  1D03               	skipz
 11478  13F4  2C16               	goto	l9096
 11479                           
 11480                           ;Dimmer_B1.c: 525: setBuz(10, 300);
 11481  13F5  302C               	movlw	44
 11482  13F6  0020               	movlb	0	; select bank0
 11483  13F7  00A9               	movwf	setBuz@time
 11484  13F8  3001               	movlw	1
 11485  13F9  00AA               	movwf	setBuz@time+1
 11486  13FA  300A               	movlw	10
 11487  13FB  3195  25CA  3193   	fcall	_setBuz
 11488  13FE  2C16               	goto	l9096
 11489  13FF                     l9088:	
 11490                           ;Dimmer_B1.c: 537: } else if (status == 2)
 11491                           
 11492                           ;Dimmer_B1.c: 532: setDimmerLights_ERROR(2);
 11493                           
 11494                           ;Dimmer_B1.c: 526: }
 11495                           ;Dimmer_B1.c: 529: setDimmerLights_ERROR(1);
 11496                           
 11497  13FF  0020               	movlb	0	; select bank0
 11498  1400  082D               	movf	DimmerLights_Exceptions@status,w
 11499  1401  3A02               	xorlw	2
 11500  1402  1D03               	skipz
 11501  1403  2C11               	goto	l9094
 11502                           
 11503                           ;Dimmer_B1.c: 538: {
 11504                           ;Dimmer_B1.c: 539: setBuz(5, 300);
 11505  1404  302C               	movlw	44
 11506  1405  00A9               	movwf	setBuz@time
 11507  1406  3001               	movlw	1
 11508  1407  00AA               	movwf	setBuz@time+1
 11509  1408  3005               	movlw	5
 11510  1409  3195  25CA  3193   	fcall	_setBuz
 11511                           
 11512                           ;Dimmer_B1.c: 540: setDimmerLights_ERROR(Dimmer->Load);
 11513  140C  0A77               	incf	_Dimmer,w
 11514  140D  0086               	movwf	6
 11515  140E  0187               	clrf	7
 11516  140F  0801               	movf	1,w
 11517  1410  2C1B               	goto	L7
 11518  1411                     l9094:	
 11519                           ;Dimmer_B1.c: 541: } else if (status == 3)
 11520                           
 11521  1411  0020               	movlb	0	; select bank0
 11522  1412  082D               	movf	DimmerLights_Exceptions@status,w
 11523  1413  3A03               	xorlw	3
 11524  1414  1D03               	skipz
 11525  1415  2C1E               	goto	l870
 11526  1416                     l9096:	
 11527                           
 11528                           ;Dimmer_B1.c: 542: {
 11529                           ;Dimmer_B1.c: 544: setDimmerLights_ERROR(1);
 11530  1416  3001               	movlw	1
 11531  1417  3195  251D  3193   	fcall	_setDimmerLights_ERROR
 11532                           
 11533                           ;Dimmer_B1.c: 547: setDimmerLights_ERROR(2);
 11534  141A  3002               	movlw	2
 11535  141B                     L7:	
 11536  141B  3195  251D  3193   	fcall	_setDimmerLights_ERROR
 11537  141E                     l870:	
 11538                           
 11539                           ;Dimmer_B1.c: 552: }
 11540                           ;Dimmer_B1.c: 555: setDimmerLights_TriggerERROR(1, 0);
 11541  141E  0020               	movlb	0	; select bank0
 11542  141F  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11543  1420  3001               	movlw	1
 11544  1421  319F  27D5  3193   	fcall	_setDimmerLights_TriggerERROR
 11545                           
 11546                           ;Dimmer_B1.c: 558: setDimmerLights_TriggerERROR(2, 0);
 11547  1424  0020               	movlb	0	; select bank0
 11548  1425  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11549  1426  3002               	movlw	2
 11550  1427  319F  27D5  3193   	fcall	_setDimmerLights_TriggerERROR
 11551                           
 11552                           ;Dimmer_B1.c: 564: if (myMain.SelfTest == 0) {
 11553  142A  0021               	movlb	1	; select bank1
 11554  142B  1B20               	btfsc	_myMain^(0+128),6
 11555  142C  0008               	return
 11556                           
 11557                           ;Dimmer_B1.c: 565: myMain.i = 0;
 11558  142D  102E               	bcf	(_myMain^(0+128)+14),0
 11559                           
 11560                           ;Dimmer_B1.c: 566: myMain.j = 0;
 11561  142E  10AE               	bcf	(_myMain^(0+128)+14),1
 11562                           
 11563                           ;Dimmer_B1.c: 567: myMain.k = 1;
 11564  142F  152E               	bsf	(_myMain^(0+128)+14),2
 11565                           
 11566                           ;Dimmer_B1.c: 568: myMain.Count2 = 0;
 11567  1430  01A7               	clrf	(_myMain^(0+128)+7)
 11568  1431  01A8               	clrf	((_myMain+1)^(0+128)+7)
 11569  1432  0008               	return
 11570  1433                     __end_of_DimmerLights_Exceptions:	
 11571                           
 11572                           	psect	text61
 11573  1FD5                     __ptext61:	
 11574 ;; *************** function _setDimmerLights_TriggerERROR *****************
 11575 ;; Defined at:
 11576 ;;		line 591 in file "../src/Dimmer_B1.c"
 11577 ;; Parameters:    Size  Location     Type
 11578 ;;  lights          1    wreg     unsigned char 
 11579 ;;  command         1    2[BANK0 ] unsigned char 
 11580 ;; Auto vars:     Size  Location     Type
 11581 ;;  lights          1    3[BANK0 ] unsigned char 
 11582 ;; Return value:  Size  Location     Type
 11583 ;;		None               void
 11584 ;; Registers used:
 11585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11586 ;; Tracked objects:
 11587 ;;		On entry : 0/0
 11588 ;;		On exit  : 0/0
 11589 ;;		Unchanged: 0/0
 11590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11591 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11594 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;Total ram usage:        2 bytes
 11596 ;; Hardware stack levels used:    1
 11597 ;; Hardware stack levels required when called:    6
 11598 ;; This function calls:
 11599 ;;		_DimmerLightsPointSelect
 11600 ;; This function is called by:
 11601 ;;		_DimmerLights_Exceptions
 11602 ;; This function uses a non-reentrant model
 11603 ;;
 11604                           
 11605                           
 11606                           ;psect for function _setDimmerLights_TriggerERROR
 11607  1FD5                     _setDimmerLights_TriggerERROR:	
 11608                           
 11609                           ;incstack = 0
 11610                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11611                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 11612  1FD5  0020               	movlb	0	; select bank0
 11613  1FD6  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 11614                           
 11615                           ;Dimmer_B1.c: 593: DimmerLightsPointSelect(lights);
 11616  1FD7  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 11617  1FD8  319C  2408         	fcall	_DimmerLightsPointSelect
 11618                           
 11619                           ;Dimmer_B1.c: 594: DimmerLights->Trigger = command;
 11620  1FDA  0878               	movf	_DimmerLights,w
 11621  1FDB  3E08               	addlw	8
 11622  1FDC  0086               	movwf	6
 11623  1FDD  3001               	movlw	1	; select bank2/3
 11624  1FDE  0087               	movwf	7
 11625  1FDF  0020               	movlb	0	; select bank0
 11626  1FE0  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11627  1FE1  1101               	bcf	1,2
 11628  1FE2  1D03               	skipz
 11629  1FE3  1501               	bsf	1,2
 11630                           
 11631                           ;Dimmer_B1.c: 595: DimmerLights->Switch = command;
 11632  1FE4  0878               	movf	_DimmerLights,w
 11633  1FE5  3E08               	addlw	8
 11634  1FE6  0086               	movwf	6
 11635  1FE7  3001               	movlw	1	; select bank2/3
 11636  1FE8  0087               	movwf	7
 11637  1FE9  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11638  1FEA  1081               	bcf	1,1
 11639  1FEB  1D03               	skipz
 11640  1FEC  1481               	bsf	1,1
 11641                           
 11642                           ;Dimmer_B1.c: 596: DimmerLights->TriggerAdj = command;
 11643  1FED  0878               	movf	_DimmerLights,w
 11644  1FEE  3E08               	addlw	8
 11645  1FEF  0086               	movwf	6
 11646  1FF0  3001               	movlw	1	; select bank2/3
 11647  1FF1  0087               	movwf	7
 11648  1FF2  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11649  1FF3  1201               	bcf	1,4
 11650  1FF4  1D03               	skipz
 11651  1FF5  1601               	bsf	1,4
 11652                           
 11653                           ;Dimmer_B1.c: 597: DimmerLights->AdjGo = command;
 11654  1FF6  0878               	movf	_DimmerLights,w
 11655  1FF7  3E08               	addlw	8
 11656  1FF8  0086               	movwf	6
 11657  1FF9  3001               	movlw	1	; select bank2/3
 11658  1FFA  0087               	movwf	7
 11659  1FFB  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11660  1FFC  1181               	bcf	1,3
 11661  1FFD  1D03               	skipz
 11662  1FFE  1581               	bsf	1,3
 11663  1FFF  0008               	return
 11664  2000                     __end_of_setDimmerLights_TriggerERROR:	
 11665                           
 11666                           	psect	text62
 11667  151D                     __ptext62:	
 11668 ;; *************** function _setDimmerLights_ERROR *****************
 11669 ;; Defined at:
 11670 ;;		line 573 in file "../src/Dimmer_B1.c"
 11671 ;; Parameters:    Size  Location     Type
 11672 ;;  lights          1    wreg     unsigned char 
 11673 ;; Auto vars:     Size  Location     Type
 11674 ;;  lights          1    5[BANK0 ] unsigned char 
 11675 ;; Return value:  Size  Location     Type
 11676 ;;		None               void
 11677 ;; Registers used:
 11678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11679 ;; Tracked objects:
 11680 ;;		On entry : 0/0
 11681 ;;		On exit  : 0/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11685 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11686 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11687 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11688 ;;Total ram usage:        2 bytes
 11689 ;; Hardware stack levels used:    1
 11690 ;; Hardware stack levels required when called:    7
 11691 ;; This function calls:
 11692 ;;		_DimmerLightsPointSelect
 11693 ;;		_setLED
 11694 ;;		_setLoad_StatusOff
 11695 ;;		_setRFSW_Status
 11696 ;;		_setSw_Status
 11697 ;; This function is called by:
 11698 ;;		_DimmerLights_Exceptions
 11699 ;; This function uses a non-reentrant model
 11700 ;;
 11701                           
 11702                           
 11703                           ;psect for function _setDimmerLights_ERROR
 11704  151D                     _setDimmerLights_ERROR:	
 11705                           
 11706                           ;incstack = 0
 11707                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11708                           ;setDimmerLights_ERROR@lights stored from wreg
 11709  151D  0020               	movlb	0	; select bank0
 11710  151E  00A5               	movwf	setDimmerLights_ERROR@lights
 11711                           
 11712                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(lights);
 11713  151F  0825               	movf	setDimmerLights_ERROR@lights,w
 11714  1520  319C  2408  3195   	fcall	_DimmerLightsPointSelect
 11715                           
 11716                           ;Dimmer_B1.c: 575: if (DimmerLights->Status == 1) {
 11717  1523  0878               	movf	_DimmerLights,w
 11718  1524  0086               	movwf	6
 11719  1525  3001               	movlw	1	; select bank2/3
 11720  1526  0087               	movwf	7
 11721  1527  1E81               	btfss	1,5
 11722  1528  0008               	return
 11723                           
 11724                           ;Dimmer_B1.c: 577: DimmerLights->Signal = 0;
 11725  1529  0878               	movf	_DimmerLights,w
 11726  152A  0086               	movwf	6
 11727  152B  3001               	movlw	1	; select bank2/3
 11728  152C  0087               	movwf	7
 11729  152D  1081               	bcf	1,1
 11730                           
 11731                           ;Dimmer_B1.c: 578: DimmerLights->AdjFlag = 0;
 11732  152E  0878               	movf	_DimmerLights,w
 11733  152F  0086               	movwf	6
 11734  1530  3001               	movlw	1	; select bank2/3
 11735  1531  0087               	movwf	7
 11736  1532  1181               	bcf	1,3
 11737                           
 11738                           ;Dimmer_B1.c: 579: DimmerLights->AdjStatus = 0;
 11739  1533  0878               	movf	_DimmerLights,w
 11740  1534  0086               	movwf	6
 11741  1535  3001               	movlw	1	; select bank2/3
 11742  1536  0087               	movwf	7
 11743  1537  1201               	bcf	1,4
 11744                           
 11745                           ;Dimmer_B1.c: 580: DimmerLights->StatusFlag = 0;
 11746  1538  0878               	movf	_DimmerLights,w
 11747  1539  0086               	movwf	6
 11748  153A  3001               	movlw	1	; select bank2/3
 11749  153B  0087               	movwf	7
 11750  153C  1301               	bcf	1,6
 11751                           
 11752                           ;Dimmer_B1.c: 581: DimmerLights->DimmingTimeValue = 7;
 11753  153D  3007               	movlw	7
 11754  153E  0020               	movlb	0	; select bank0
 11755  153F  00A4               	movwf	??_setDimmerLights_ERROR
 11756  1540  0878               	movf	_DimmerLights,w
 11757  1541  3E02               	addlw	2
 11758  1542  0086               	movwf	6
 11759  1543  3001               	movlw	1	; select bank2/3
 11760  1544  0087               	movwf	7
 11761  1545  0824               	movf	??_setDimmerLights_ERROR,w
 11762  1546  0081               	movwf	1
 11763                           
 11764                           ;Dimmer_B1.c: 582: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11765  1547  0878               	movf	_DimmerLights,w
 11766  1548  3E06               	addlw	6
 11767  1549  0086               	movwf	6
 11768  154A  3001               	movlw	1	; select bank2/3
 11769  154B  0087               	movwf	7
 11770  154C  0801               	movf	1,w
 11771  154D  00A4               	movwf	??_setDimmerLights_ERROR
 11772  154E  0878               	movf	_DimmerLights,w
 11773  154F  3E04               	addlw	4
 11774  1550  0086               	movwf	6
 11775  1551  3001               	movlw	1	; select bank2/3
 11776  1552  0087               	movwf	7
 11777  1553  0824               	movf	??_setDimmerLights_ERROR,w
 11778  1554  0081               	movwf	1
 11779                           
 11780                           ;Dimmer_B1.c: 583: Dimmer->Detect = 1;
 11781  1555  0877               	movf	_Dimmer,w
 11782  1556  0086               	movwf	6
 11783  1557  0187               	clrf	7
 11784  1558  1401               	bsf	1,0
 11785                           
 11786                           ;Dimmer_B1.c: 584: setLoad_StatusOff(lights, 1);
 11787  1559  01A0               	clrf	setLoad_StatusOff@command
 11788  155A  0AA0               	incf	setLoad_StatusOff@command,f
 11789  155B  0825               	movf	setDimmerLights_ERROR@lights,w
 11790  155C  319E  2606  3195   	fcall	_setLoad_StatusOff
 11791                           
 11792                           ;Dimmer_B1.c: 585: setLED(lights, 1);
 11793  155F  0020               	movlb	0	; select bank0
 11794  1560  01A2               	clrf	setLED@command
 11795  1561  0AA2               	incf	setLED@command,f
 11796  1562  0825               	movf	setDimmerLights_ERROR@lights,w
 11797  1563  3196  267E  3195   	fcall	_setLED
 11798                           
 11799                           ;Dimmer_B1.c: 586: setSw_Status(lights, 0);
 11800  1566  0020               	movlb	0	; select bank0
 11801  1567  01A2               	clrf	setSw_Status@command
 11802  1568  0825               	movf	setDimmerLights_ERROR@lights,w
 11803  1569  319B  2311  3195   	fcall	_setSw_Status
 11804                           
 11805                           ;Dimmer_B1.c: 587: setRFSW_Status(lights, 0);
 11806  156C  0020               	movlb	0	; select bank0
 11807  156D  01A2               	clrf	setRFSW_Status@command
 11808  156E  0825               	movf	setDimmerLights_ERROR@lights,w
 11809  156F  319B  2302         	fcall	_setRFSW_Status
 11810  1571  0008               	return
 11811  1572                     __end_of_setDimmerLights_ERROR:	
 11812                           
 11813                           	psect	text63
 11814  1B5E                     __ptext63:	
 11815 ;; *************** function _setDimmerLights_Clear *****************
 11816 ;; Defined at:
 11817 ;;		line 726 in file "../src/Dimmer_B1.c"
 11818 ;; Parameters:    Size  Location     Type
 11819 ;;  lights          1    wreg     unsigned char 
 11820 ;;  command         1    2[BANK0 ] unsigned char 
 11821 ;; Auto vars:     Size  Location     Type
 11822 ;;  lights          1    3[BANK0 ] unsigned char 
 11823 ;; Return value:  Size  Location     Type
 11824 ;;		None               void
 11825 ;; Registers used:
 11826 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11827 ;; Tracked objects:
 11828 ;;		On entry : 0/0
 11829 ;;		On exit  : 0/0
 11830 ;;		Unchanged: 0/0
 11831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11832 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11835 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11836 ;;Total ram usage:        2 bytes
 11837 ;; Hardware stack levels used:    1
 11838 ;; Hardware stack levels required when called:    6
 11839 ;; This function calls:
 11840 ;;		_DimmerLightsPointSelect
 11841 ;; This function is called by:
 11842 ;;		_Load_Main
 11843 ;; This function uses a non-reentrant model
 11844 ;;
 11845                           
 11846                           
 11847                           ;psect for function _setDimmerLights_Clear
 11848  1B5E                     _setDimmerLights_Clear:	
 11849                           
 11850                           ;incstack = 0
 11851                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11852                           ;setDimmerLights_Clear@lights stored from wreg
 11853  1B5E  0020               	movlb	0	; select bank0
 11854  1B5F  00A3               	movwf	setDimmerLights_Clear@lights
 11855                           
 11856                           ;Dimmer_B1.c: 728: DimmerLightsPointSelect(lights);
 11857  1B60  0823               	movf	setDimmerLights_Clear@lights,w
 11858  1B61  319C  2408         	fcall	_DimmerLightsPointSelect
 11859                           
 11860                           ;Dimmer_B1.c: 729: DimmerLights->Clear = command;
 11861  1B63  0878               	movf	_DimmerLights,w
 11862  1B64  3E09               	addlw	9
 11863  1B65  0086               	movwf	6
 11864  1B66  3001               	movlw	1	; select bank2/3
 11865  1B67  0087               	movwf	7
 11866  1B68  0020               	movlb	0	; select bank0
 11867  1B69  0822               	movf	setDimmerLights_Clear@command,w
 11868  1B6A  1101               	bcf	1,2
 11869  1B6B  1D03               	skipz
 11870  1B6C  1501               	bsf	1,2
 11871  1B6D  0008               	return
 11872  1B6E                     __end_of_setDimmerLights_Clear:	
 11873                           
 11874                           	psect	text64
 11875  1A25                     __ptext64:	
 11876 ;; *************** function _getTemp_Safe *****************
 11877 ;; Defined at:
 11878 ;;		line 21 in file "../src/OverTemperature_B1.c"
 11879 ;; Parameters:    Size  Location     Type
 11880 ;;		None
 11881 ;; Auto vars:     Size  Location     Type
 11882 ;;  result          1    0[BANK0 ] unsigned char 
 11883 ;; Return value:  Size  Location     Type
 11884 ;;                  1    wreg      unsigned char 
 11885 ;; Registers used:
 11886 ;;		wreg, status,2
 11887 ;; Tracked objects:
 11888 ;;		On entry : 0/0
 11889 ;;		On exit  : 0/0
 11890 ;;		Unchanged: 0/0
 11891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11895 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11896 ;;Total ram usage:        1 bytes
 11897 ;; Hardware stack levels used:    1
 11898 ;; Hardware stack levels required when called:    5
 11899 ;; This function calls:
 11900 ;;		Nothing
 11901 ;; This function is called by:
 11902 ;;		_Load_Main
 11903 ;; This function uses a non-reentrant model
 11904 ;;
 11905                           
 11906                           
 11907                           ;psect for function _getTemp_Safe
 11908  1A25                     _getTemp_Safe:	
 11909                           
 11910                           ;OverTemperature_B1.c: 22: char result = Temp1.Safe;
 11911                           
 11912                           ;incstack = 0
 11913                           ; Regs used in _getTemp_Safe: [wreg+status,2]
 11914  1A25  3000               	movlw	0
 11915  1A26  0021               	movlb	1	; select bank1
 11916  1A27  1A57               	btfsc	_Temp1^(0+128),4
 11917  1A28  3001               	movlw	1
 11918  1A29  0020               	movlb	0	; select bank0
 11919  1A2A  00A0               	movwf	getTemp_Safe@result
 11920                           
 11921                           ;OverTemperature_B1.c: 23: return result;
 11922  1A2B  0820               	movf	getTemp_Safe@result,w
 11923  1A2C  0008               	return
 11924  1A2D                     __end_of_getTemp_Safe:	
 11925                           
 11926                           	psect	text65
 11927  1DC9                     __ptext65:	
 11928 ;; *************** function ___wmul *****************
 11929 ;; Defined at:
 11930 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11931 ;; Parameters:    Size  Location     Type
 11932 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11933 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11934 ;; Auto vars:     Size  Location     Type
 11935 ;;  product         2    4[BANK0 ] unsigned int 
 11936 ;; Return value:  Size  Location     Type
 11937 ;;                  2    0[BANK0 ] unsigned int 
 11938 ;; Registers used:
 11939 ;;		wreg, status,2, status,0
 11940 ;; Tracked objects:
 11941 ;;		On entry : 0/0
 11942 ;;		On exit  : 0/0
 11943 ;;		Unchanged: 0/0
 11944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11945 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11948 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11949 ;;Total ram usage:        6 bytes
 11950 ;; Hardware stack levels used:    1
 11951 ;; Hardware stack levels required when called:    5
 11952 ;; This function calls:
 11953 ;;		Nothing
 11954 ;; This function is called by:
 11955 ;;		_Load_Main
 11956 ;;		_setRF_Main
 11957 ;; This function uses a non-reentrant model
 11958 ;;
 11959                           
 11960                           
 11961                           ;psect for function ___wmul
 11962  1DC9                     ___wmul:	
 11963                           
 11964                           ;incstack = 0
 11965                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11966  1DC9  0020               	movlb	0	; select bank0
 11967  1DCA  01A4               	clrf	___wmul@product
 11968  1DCB  01A5               	clrf	___wmul@product+1
 11969  1DCC                     l9554:	
 11970  1DCC  1C20               	btfss	___wmul@multiplier,0
 11971  1DCD  2DD2               	goto	l2867
 11972  1DCE  0822               	movf	___wmul@multiplicand,w
 11973  1DCF  07A4               	addwf	___wmul@product,f
 11974  1DD0  0823               	movf	___wmul@multiplicand+1,w
 11975  1DD1  3DA5               	addwfc	___wmul@product+1,f
 11976  1DD2                     l2867:	
 11977  1DD2  3001               	movlw	1
 11978  1DD3                     u9955:	
 11979  1DD3  35A2               	lslf	___wmul@multiplicand,f
 11980  1DD4  0DA3               	rlf	___wmul@multiplicand+1,f
 11981  1DD5  0B89               	decfsz	9,f
 11982  1DD6  2DD3               	goto	u9955
 11983  1DD7  3001               	movlw	1
 11984  1DD8                     u9965:	
 11985  1DD8  36A1               	lsrf	___wmul@multiplier+1,f
 11986  1DD9  0CA0               	rrf	___wmul@multiplier,f
 11987  1DDA  0B89               	decfsz	9,f
 11988  1DDB  2DD8               	goto	u9965
 11989  1DDC  0821               	movf	___wmul@multiplier+1,w
 11990  1DDD  0420               	iorwf	___wmul@multiplier,w
 11991  1DDE  1D03               	skipz
 11992  1DDF  2DCC               	goto	l9554
 11993  1DE0  0825               	movf	___wmul@product+1,w
 11994  1DE1  01A1               	clrf	?___wmul+1
 11995  1DE2  07A1               	addwf	?___wmul+1,f
 11996  1DE3  0824               	movf	___wmul@product,w
 11997  1DE4  01A0               	clrf	?___wmul
 11998  1DE5  07A0               	addwf	?___wmul,f
 11999  1DE6  0008               	return
 12000  1DE7                     __end_of___wmul:	
 12001                           
 12002                           	psect	text66
 12003  119E                     __ptext66:	
 12004 ;; *************** function ___lwdiv *****************
 12005 ;; Defined at:
 12006 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 12007 ;; Parameters:    Size  Location     Type
 12008 ;;  divisor         2    0[BANK0 ] unsigned int 
 12009 ;;  dividend        2    2[BANK0 ] unsigned int 
 12010 ;; Auto vars:     Size  Location     Type
 12011 ;;  quotient        2    6[BANK0 ] unsigned int 
 12012 ;;  counter         1    5[BANK0 ] unsigned char 
 12013 ;; Return value:  Size  Location     Type
 12014 ;;                  2    0[BANK0 ] unsigned int 
 12015 ;; Registers used:
 12016 ;;		wreg, status,2, status,0
 12017 ;; Tracked objects:
 12018 ;;		On entry : 0/0
 12019 ;;		On exit  : 0/0
 12020 ;;		Unchanged: 0/0
 12021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12022 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;Total ram usage:        8 bytes
 12027 ;; Hardware stack levels used:    1
 12028 ;; Hardware stack levels required when called:    5
 12029 ;; This function calls:
 12030 ;;		Nothing
 12031 ;; This function is called by:
 12032 ;;		_Load_Main
 12033 ;; This function uses a non-reentrant model
 12034 ;;
 12035                           
 12036                           
 12037                           ;psect for function ___lwdiv
 12038  119E                     ___lwdiv:	
 12039                           
 12040                           ;incstack = 0
 12041                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12042  119E  0020               	movlb	0	; select bank0
 12043  119F  01A6               	clrf	___lwdiv@quotient
 12044  11A0  01A7               	clrf	___lwdiv@quotient+1
 12045  11A1  0821               	movf	___lwdiv@divisor+1,w
 12046  11A2  0420               	iorwf	___lwdiv@divisor,w
 12047  11A3  1903               	skipnz
 12048  11A4  29CE               	goto	l10196
 12049  11A5  01A5               	clrf	___lwdiv@counter
 12050  11A6  0AA5               	incf	___lwdiv@counter,f
 12051  11A7                     l10184:	
 12052  11A7  1BA1               	btfsc	___lwdiv@divisor+1,7
 12053  11A8  29B3               	goto	l10186
 12054  11A9  3001               	movlw	1
 12055  11AA                     u10935:	
 12056  11AA  35A0               	lslf	___lwdiv@divisor,f
 12057  11AB  0DA1               	rlf	___lwdiv@divisor+1,f
 12058  11AC  0B89               	decfsz	9,f
 12059  11AD  29AA               	goto	u10935
 12060  11AE  3001               	movlw	1
 12061  11AF  00A4               	movwf	??___lwdiv
 12062  11B0  0824               	movf	??___lwdiv,w
 12063  11B1  07A5               	addwf	___lwdiv@counter,f
 12064  11B2  29A7               	goto	l10184
 12065  11B3                     l10186:	
 12066  11B3  3001               	movlw	1
 12067  11B4                     u10955:	
 12068  11B4  35A6               	lslf	___lwdiv@quotient,f
 12069  11B5  0DA7               	rlf	___lwdiv@quotient+1,f
 12070  11B6  0B89               	decfsz	9,f
 12071  11B7  29B4               	goto	u10955
 12072  11B8  0821               	movf	___lwdiv@divisor+1,w
 12073  11B9  0223               	subwf	___lwdiv@dividend+1,w
 12074  11BA  1D03               	skipz
 12075  11BB  29BE               	goto	u10965
 12076  11BC  0820               	movf	___lwdiv@divisor,w
 12077  11BD  0222               	subwf	___lwdiv@dividend,w
 12078  11BE                     u10965:	
 12079  11BE  1C03               	skipc
 12080  11BF  29C5               	goto	l10192
 12081  11C0  0820               	movf	___lwdiv@divisor,w
 12082  11C1  02A2               	subwf	___lwdiv@dividend,f
 12083  11C2  0821               	movf	___lwdiv@divisor+1,w
 12084  11C3  3BA3               	subwfb	___lwdiv@dividend+1,f
 12085  11C4  1426               	bsf	___lwdiv@quotient,0
 12086  11C5                     l10192:	
 12087  11C5  3001               	movlw	1
 12088  11C6                     u10975:	
 12089  11C6  36A1               	lsrf	___lwdiv@divisor+1,f
 12090  11C7  0CA0               	rrf	___lwdiv@divisor,f
 12091  11C8  0B89               	decfsz	9,f
 12092  11C9  29C6               	goto	u10975
 12093  11CA  3001               	movlw	1
 12094  11CB  02A5               	subwf	___lwdiv@counter,f
 12095  11CC  1D03               	btfss	3,2
 12096  11CD  29B3               	goto	l10186
 12097  11CE                     l10196:	
 12098  11CE  0827               	movf	___lwdiv@quotient+1,w
 12099  11CF  01A1               	clrf	?___lwdiv+1
 12100  11D0  07A1               	addwf	?___lwdiv+1,f
 12101  11D1  0826               	movf	___lwdiv@quotient,w
 12102  11D2  01A0               	clrf	?___lwdiv
 12103  11D3  07A0               	addwf	?___lwdiv,f
 12104  11D4  0008               	return
 12105  11D5                     __end_of___lwdiv:	
 12106                           
 12107                           	psect	text67
 12108  19E7                     __ptext67:	
 12109 ;; *************** function _Load_Initialization *****************
 12110 ;; Defined at:
 12111 ;;		line 9 in file "../src/OverLoad_B1.c"
 12112 ;; Parameters:    Size  Location     Type
 12113 ;;		None
 12114 ;; Auto vars:     Size  Location     Type
 12115 ;;		None
 12116 ;; Return value:  Size  Location     Type
 12117 ;;		None               void
 12118 ;; Registers used:
 12119 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12120 ;; Tracked objects:
 12121 ;;		On entry : 0/0
 12122 ;;		On exit  : 0/0
 12123 ;;		Unchanged: 0/0
 12124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12129 ;;Total ram usage:        0 bytes
 12130 ;; Hardware stack levels used:    1
 12131 ;; Hardware stack levels required when called:    6
 12132 ;; This function calls:
 12133 ;;		_setLoad_AH_AL_Restore
 12134 ;; This function is called by:
 12135 ;;		_main
 12136 ;; This function uses a non-reentrant model
 12137 ;;
 12138                           
 12139                           
 12140                           ;psect for function _Load_Initialization
 12141  19E7                     _Load_Initialization:	
 12142                           
 12143                           ;OverLoad_B1.c: 10: Load1.Safe = 1;
 12144                           
 12145                           ;incstack = 0
 12146                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12147  19E7  0023               	movlb	3	; select bank3
 12148  19E8  15A0               	bsf	_Load1^(0+384),3
 12149                           
 12150                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12151  19E9  319D  2557         	fcall	_setLoad_AH_AL_Restore
 12152  19EB  0008               	return
 12153  19EC                     __end_of_Load_Initialization:	
 12154                           
 12155                           	psect	text68
 12156  1D57                     __ptext68:	
 12157 ;; *************** function _setLoad_AH_AL_Restore *****************
 12158 ;; Defined at:
 12159 ;;		line 307 in file "../src/OverLoad_B1.c"
 12160 ;; Parameters:    Size  Location     Type
 12161 ;;		None
 12162 ;; Auto vars:     Size  Location     Type
 12163 ;;  i               1    1[BANK0 ] unsigned char 
 12164 ;; Return value:  Size  Location     Type
 12165 ;;		None               void
 12166 ;; Registers used:
 12167 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12168 ;; Tracked objects:
 12169 ;;		On entry : 0/0
 12170 ;;		On exit  : 0/0
 12171 ;;		Unchanged: 0/0
 12172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;Total ram usage:        2 bytes
 12178 ;; Hardware stack levels used:    1
 12179 ;; Hardware stack levels required when called:    5
 12180 ;; This function calls:
 12181 ;;		Nothing
 12182 ;; This function is called by:
 12183 ;;		_Load_Initialization
 12184 ;;		_Load_Main
 12185 ;; This function uses a non-reentrant model
 12186 ;;
 12187                           
 12188                           
 12189                           ;psect for function _setLoad_AH_AL_Restore
 12190  1D57                     _setLoad_AH_AL_Restore:	
 12191                           
 12192                           ;OverLoad_B1.c: 308: char i;
 12193                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 12194                           
 12195                           ;incstack = 0
 12196                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12197  1D57  0020               	movlb	0	; select bank0
 12198  1D58  01A1               	clrf	setLoad_AH_AL_Restore@i
 12199  1D59                     L8:	
 12200  1D59  3005               	movlw	5
 12201  1D5A  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12202  1D5B  1803               	btfsc	3,0
 12203  1D5C  0008               	return
 12204                           
 12205                           ;OverLoad_B1.c: 310: Load1.AH[i] = 0;
 12206  1D5D  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12207  1D5E  3EA8               	addlw	(_Load1+8)& (0+255)
 12208  1D5F  0086               	movwf	6
 12209  1D60  3001               	movlw	1	; select bank3/4
 12210  1D61  0087               	movwf	7
 12211  1D62  3000               	movlw	0
 12212  1D63  3FC0               	movwi [0]fsr1
 12213  1D64  3FC1               	movwi [1]fsr1
 12214                           
 12215                           ;OverLoad_B1.c: 311: Load1.AL[i] = 0xffff;
 12216  1D65  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12217  1D66  3EBA               	addlw	(_Load1+26)& (0+255)
 12218  1D67  0086               	movwf	6
 12219  1D68  3001               	movlw	1	; select bank3/4
 12220  1D69  0087               	movwf	7
 12221  1D6A  30FF               	movlw	255
 12222  1D6B  3FC0               	movwi [0]fsr1
 12223  1D6C  30FF               	movlw	255
 12224  1D6D  3FC1               	movwi [1]fsr1
 12225  1D6E  3001               	movlw	1
 12226  1D6F  00A0               	movwf	??_setLoad_AH_AL_Restore
 12227  1D70  0820               	movf	??_setLoad_AH_AL_Restore,w
 12228  1D71  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12229  1D72  2D59               	goto	L8
 12230  1D73                     __end_of_setLoad_AH_AL_Restore:	
 12231                           
 12232                           	psect	text69
 12233  1AB3                     __ptext69:	
 12234 ;; *************** function _LED_Main *****************
 12235 ;; Defined at:
 12236 ;;		line 47 in file "../src/LED_B1.c"
 12237 ;; Parameters:    Size  Location     Type
 12238 ;;		None
 12239 ;; Auto vars:     Size  Location     Type
 12240 ;;		None
 12241 ;; Return value:  Size  Location     Type
 12242 ;;		None               void
 12243 ;; Registers used:
 12244 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12245 ;; Tracked objects:
 12246 ;;		On entry : 0/0
 12247 ;;		On exit  : 0/0
 12248 ;;		Unchanged: 0/0
 12249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;Total ram usage:        0 bytes
 12255 ;; Hardware stack levels used:    1
 12256 ;; Hardware stack levels required when called:    7
 12257 ;; This function calls:
 12258 ;;		_setLED_Main
 12259 ;; This function is called by:
 12260 ;;		_main
 12261 ;; This function uses a non-reentrant model
 12262 ;;
 12263                           
 12264                           
 12265                           ;psect for function _LED_Main
 12266  1AB3                     _LED_Main:	
 12267                           
 12268                           ;LED_B1.c: 49: setLED_Main(1);
 12269                           
 12270                           ;incstack = 0
 12271                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12272  1AB3  3001               	movlw	1
 12273  1AB4  3192  224C  319A   	fcall	_setLED_Main
 12274                           
 12275                           ;LED_B1.c: 52: setLED_Main(2);
 12276  1AB7  3002               	movlw	2
 12277  1AB8  3192  224C  319A   	fcall	_setLED_Main
 12278                           
 12279                           ;LED_B1.c: 58: setLED_Main(99);
 12280  1ABB  3063               	movlw	99
 12281  1ABC  3192  224C         	fcall	_setLED_Main
 12282  1ABE  0008               	return
 12283  1ABF                     __end_of_LED_Main:	
 12284                           
 12285                           	psect	text70
 12286  124C                     __ptext70:	
 12287 ;; *************** function _setLED_Main *****************
 12288 ;; Defined at:
 12289 ;;		line 192 in file "../src/LED_B1.c"
 12290 ;; Parameters:    Size  Location     Type
 12291 ;;  led             1    wreg     unsigned char 
 12292 ;; Auto vars:     Size  Location     Type
 12293 ;;  led             1    4[BANK0 ] unsigned char 
 12294 ;; Return value:  Size  Location     Type
 12295 ;;		None               void
 12296 ;; Registers used:
 12297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12298 ;; Tracked objects:
 12299 ;;		On entry : 0/0
 12300 ;;		On exit  : 0/0
 12301 ;;		Unchanged: 0/0
 12302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12305 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12306 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12307 ;;Total ram usage:        3 bytes
 12308 ;; Hardware stack levels used:    1
 12309 ;; Hardware stack levels required when called:    6
 12310 ;; This function calls:
 12311 ;;		_LedPointSelect
 12312 ;; This function is called by:
 12313 ;;		_LED_Main
 12314 ;; This function uses a non-reentrant model
 12315 ;;
 12316                           
 12317                           
 12318                           ;psect for function _setLED_Main
 12319  124C                     _setLED_Main:	
 12320                           
 12321                           ;incstack = 0
 12322                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12323                           ;setLED_Main@led stored from wreg
 12324  124C  0020               	movlb	0	; select bank0
 12325  124D  00A4               	movwf	setLED_Main@led
 12326                           
 12327                           ;LED_B1.c: 193: LedPointSelect(led);
 12328  124E  0824               	movf	setLED_Main@led,w
 12329  124F  319D  258F  3192   	fcall	_LedPointSelect
 12330                           
 12331                           ;LED_B1.c: 194: if (LED->GO == 1) {
 12332  1252  087A               	movf	_LED,w
 12333  1253  0086               	movwf	6
 12334  1254  3001               	movlw	1	; select bank2/3
 12335  1255  0087               	movwf	7
 12336  1256  1C81               	btfss	1,1
 12337  1257  0008               	return
 12338                           
 12339                           ;LED_B1.c: 195: LED->Time++;
 12340  1258  0A7A               	incf	_LED,w
 12341  1259  0086               	movwf	6
 12342  125A  3001               	movlw	1	; select bank2/3
 12343  125B  0087               	movwf	7
 12344  125C  3001               	movlw	1
 12345  125D  0781               	addwf	1,f
 12346  125E  3141               	addfsr 1,1
 12347  125F  1803               	skipnc
 12348  1260  0A81               	incf	1,f
 12349                           
 12350                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 12351  1261  0A7A               	incf	_LED,w
 12352  1262  0086               	movwf	6
 12353  1263  3001               	movlw	1	; select bank2/3
 12354  1264  0087               	movwf	7
 12355  1265  3F40               	moviw [0]fsr1
 12356  1266  0020               	movlb	0	; select bank0
 12357  1267  00A2               	movwf	??_setLED_Main
 12358  1268  3F41               	moviw [1]fsr1
 12359  1269  00A3               	movwf	??_setLED_Main+1
 12360  126A  3000               	movlw	0
 12361  126B  0223               	subwf	??_setLED_Main+1,w
 12362  126C  3032               	movlw	50
 12363  126D  1903               	skipnz
 12364  126E  0222               	subwf	??_setLED_Main,w
 12365  126F  1C03               	skipc
 12366  1270  0008               	return
 12367                           
 12368                           ;LED_B1.c: 197: LED->Time = 0;
 12369  1271  0A7A               	incf	_LED,w
 12370  1272  0086               	movwf	6
 12371  1273  3001               	movlw	1	; select bank2/3
 12372  1274  0087               	movwf	7
 12373  1275  3000               	movlw	0
 12374  1276  3FC0               	movwi [0]fsr1
 12375  1277  3FC1               	movwi [1]fsr1
 12376                           
 12377                           ;LED_B1.c: 199: if (led == 1) {
 12378  1278  0824               	movf	setLED_Main@led,w
 12379  1279  3A01               	xorlw	1
 12380  127A  1D03               	skipz
 12381  127B  2A7F               	goto	l9752
 12382                           
 12383                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 12384  127C  3008               	movlw	8
 12385  127D  068C               	xorwf	12,f
 12386                           
 12387                           ;LED_B1.c: 201: }
 12388  127E  0008               	return
 12389  127F                     l9752:	
 12390                           
 12391                           ;LED_B1.c: 204: else if (led == 2) {
 12392  127F  0824               	movf	setLED_Main@led,w
 12393  1280  3A02               	xorlw	2
 12394  1281  1D03               	skipz
 12395  1282  2A86               	goto	l9756
 12396                           
 12397                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 12398  1283  3080               	movlw	128
 12399  1284  068E               	xorwf	14,f
 12400                           
 12401                           ;LED_B1.c: 206: }
 12402  1285  0008               	return
 12403  1286                     l9756:	
 12404                           
 12405                           ;LED_B1.c: 214: else if (led == 99) {
 12406  1286  0824               	movf	setLED_Main@led,w
 12407  1287  3A63               	xorlw	99
 12408  1288  1D03               	skipz
 12409  1289  0008               	return
 12410                           
 12411                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 12412  128A  3020               	movlw	32
 12413  128B  068D               	xorwf	13,f
 12414  128C  0008               	return
 12415  128D                     __end_of_setLED_Main:	
 12416                           
 12417                           	psect	text71
 12418  1AA7                     __ptext71:	
 12419 ;; *************** function _LED_Initialization *****************
 12420 ;; Defined at:
 12421 ;;		line 31 in file "../src/LED_B1.c"
 12422 ;; Parameters:    Size  Location     Type
 12423 ;;		None
 12424 ;; Auto vars:     Size  Location     Type
 12425 ;;		None
 12426 ;; Return value:  Size  Location     Type
 12427 ;;		None               void
 12428 ;; Registers used:
 12429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12430 ;; Tracked objects:
 12431 ;;		On entry : 0/0
 12432 ;;		On exit  : 0/0
 12433 ;;		Unchanged: 0/0
 12434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;Total ram usage:        0 bytes
 12440 ;; Hardware stack levels used:    1
 12441 ;; Hardware stack levels required when called:    8
 12442 ;; This function calls:
 12443 ;;		_setLED_Initialization
 12444 ;; This function is called by:
 12445 ;;		_main
 12446 ;; This function uses a non-reentrant model
 12447 ;;
 12448                           
 12449                           
 12450                           ;psect for function _LED_Initialization
 12451  1AA7                     _LED_Initialization:	
 12452                           
 12453                           ;LED_B1.c: 33: setLED_Initialization(1);
 12454                           
 12455                           ;incstack = 0
 12456                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12457  1AA7  3001               	movlw	1
 12458  1AA8  319B  23AF  319A   	fcall	_setLED_Initialization
 12459                           
 12460                           ;LED_B1.c: 36: setLED_Initialization(2);
 12461  1AAB  3002               	movlw	2
 12462  1AAC  319B  23AF  319A   	fcall	_setLED_Initialization
 12463                           
 12464                           ;LED_B1.c: 42: setLED_Initialization(99);
 12465  1AAF  3063               	movlw	99
 12466  1AB0  319B  23AF         	fcall	_setLED_Initialization
 12467  1AB2  0008               	return
 12468  1AB3                     __end_of_LED_Initialization:	
 12469                           
 12470                           	psect	text72
 12471  1BAF                     __ptext72:	
 12472 ;; *************** function _setLED_Initialization *****************
 12473 ;; Defined at:
 12474 ;;		line 63 in file "../src/LED_B1.c"
 12475 ;; Parameters:    Size  Location     Type
 12476 ;;  led             1    wreg     unsigned char 
 12477 ;; Auto vars:     Size  Location     Type
 12478 ;;  led             1    4[BANK0 ] unsigned char 
 12479 ;; Return value:  Size  Location     Type
 12480 ;;		None               void
 12481 ;; Registers used:
 12482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12483 ;; Tracked objects:
 12484 ;;		On entry : 0/0
 12485 ;;		On exit  : 0/0
 12486 ;;		Unchanged: 0/0
 12487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12489 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12491 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12492 ;;Total ram usage:        1 bytes
 12493 ;; Hardware stack levels used:    1
 12494 ;; Hardware stack levels required when called:    7
 12495 ;; This function calls:
 12496 ;;		_LedPointSelect
 12497 ;;		_setLED
 12498 ;; This function is called by:
 12499 ;;		_LED_Initialization
 12500 ;; This function uses a non-reentrant model
 12501 ;;
 12502                           
 12503                           
 12504                           ;psect for function _setLED_Initialization
 12505  1BAF                     _setLED_Initialization:	
 12506                           
 12507                           ;incstack = 0
 12508                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12509                           ;setLED_Initialization@led stored from wreg
 12510  1BAF  0020               	movlb	0	; select bank0
 12511  1BB0  00A4               	movwf	setLED_Initialization@led
 12512                           
 12513                           ;LED_B1.c: 64: LedPointSelect(led);
 12514  1BB1  0824               	movf	setLED_Initialization@led,w
 12515  1BB2  319D  258F  319B   	fcall	_LedPointSelect
 12516                           
 12517                           ;LED_B1.c: 65: LED->Enable = 1;
 12518  1BB5  087A               	movf	_LED,w
 12519  1BB6  0086               	movwf	6
 12520  1BB7  3001               	movlw	1	; select bank2/3
 12521  1BB8  0087               	movwf	7
 12522  1BB9  1401               	bsf	1,0
 12523                           
 12524                           ;LED_B1.c: 66: setLED(led, 0);
 12525  1BBA  0020               	movlb	0	; select bank0
 12526  1BBB  01A2               	clrf	setLED@command
 12527  1BBC  0824               	movf	setLED_Initialization@led,w
 12528  1BBD  3196  267E         	fcall	_setLED
 12529  1BBF  0008               	return
 12530  1BC0                     __end_of_setLED_Initialization:	
 12531                           
 12532                           	psect	text73
 12533  1E25                     __ptext73:	
 12534 ;; *************** function _Flash_Memory_Main *****************
 12535 ;; Defined at:
 12536 ;;		line 796 in file "../src/MCU_B1.c"
 12537 ;; Parameters:    Size  Location     Type
 12538 ;;		None
 12539 ;; Auto vars:     Size  Location     Type
 12540 ;;		None
 12541 ;; Return value:  Size  Location     Type
 12542 ;;		None               void
 12543 ;; Registers used:
 12544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12545 ;; Tracked objects:
 12546 ;;		On entry : 0/0
 12547 ;;		On exit  : 0/0
 12548 ;;		Unchanged: 0/0
 12549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12554 ;;Total ram usage:        0 bytes
 12555 ;; Hardware stack levels used:    1
 12556 ;; Hardware stack levels required when called:    8
 12557 ;; This function calls:
 12558 ;;		_Flash_Memory_Modify
 12559 ;; This function is called by:
 12560 ;;		_main
 12561 ;; This function uses a non-reentrant model
 12562 ;;
 12563                           
 12564                           
 12565                           ;psect for function _Flash_Memory_Main
 12566  1E25                     _Flash_Memory_Main:	
 12567                           
 12568                           ;MCU_B1.c: 797: if (Memory.GO == 1) {
 12569                           
 12570                           ;incstack = 0
 12571                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12572  1E25  0024               	movlb	4	; select bank4
 12573  1E26  1CC4               	btfss	(_Memory^(0+512)+36),1
 12574  1E27  0008               	return
 12575                           
 12576                           ;MCU_B1.c: 798: if (Memory.Modify == 1) {
 12577  1E28  1C44               	btfss	(_Memory^(0+512)+36),0
 12578  1E29  2E42               	goto	l1347
 12579                           
 12580                           ;MCU_B1.c: 799: Memory.Time++;
 12581  1E2A  3001               	movlw	1
 12582  1E2B  07C2               	addwf	(_Memory^(0+512)+34),f
 12583  1E2C  3000               	movlw	0
 12584  1E2D  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12585                           
 12586                           ;MCU_B1.c: 800: if (Memory.Time == 25)
 12587  1E2E  3022               	movlw	34
 12588  1E2F  3E20               	addlw	_Memory& (0+255)
 12589  1E30  0086               	movwf	6
 12590  1E31  3002               	movlw	2	; select bank4/5
 12591  1E32  0087               	movwf	7
 12592  1E33  3F40               	moviw [0]fsr1
 12593  1E34  3A19               	xorlw	25
 12594  1E35  1D03               	skipz
 12595  1E36  2E39               	goto	u11125
 12596  1E37  3F41               	moviw [1]fsr1
 12597  1E38  3A00               	xorlw	0
 12598  1E39                     u11125:	
 12599  1E39  1D03               	skipz
 12600  1E3A  0008               	return
 12601                           
 12602                           ;MCU_B1.c: 801: {
 12603                           ;MCU_B1.c: 802: Memory.Time = 0;
 12604  1E3B  01C2               	clrf	(_Memory^(0+512)+34)
 12605  1E3C  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12606                           
 12607                           ;MCU_B1.c: 803: Memory.Modify = 0;
 12608  1E3D  1044               	bcf	(_Memory^(0+512)+36),0
 12609                           
 12610                           ;MCU_B1.c: 804: Memory.GO = 0;
 12611  1E3E  10C4               	bcf	(_Memory^(0+512)+36),1
 12612                           
 12613                           ;MCU_B1.c: 805: Flash_Memory_Modify();
 12614  1E3F  3193  2315         	fcall	_Flash_Memory_Modify
 12615                           
 12616                           ;MCU_B1.c: 806: }
 12617                           ;MCU_B1.c: 807: } else {
 12618  1E41  0008               	return
 12619  1E42                     l1347:	
 12620                           
 12621                           ;MCU_B1.c: 808: Memory.GO = 0;
 12622  1E42  10C4               	bcf	(_Memory^(0+512)+36),1
 12623  1E43  0008               	return
 12624  1E44                     __end_of_Flash_Memory_Main:	
 12625                           
 12626                           	psect	text74
 12627  1315                     __ptext74:	
 12628 ;; *************** function _Flash_Memory_Modify *****************
 12629 ;; Defined at:
 12630 ;;		line 865 in file "../src/MCU_B1.c"
 12631 ;; Parameters:    Size  Location     Type
 12632 ;;		None
 12633 ;; Auto vars:     Size  Location     Type
 12634 ;;  i               1    5[BANK0 ] unsigned char 
 12635 ;; Return value:  Size  Location     Type
 12636 ;;		None               void
 12637 ;; Registers used:
 12638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12639 ;; Tracked objects:
 12640 ;;		On entry : 0/0
 12641 ;;		On exit  : 0/0
 12642 ;;		Unchanged: 0/0
 12643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12647 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12648 ;;Total ram usage:        2 bytes
 12649 ;; Hardware stack levels used:    1
 12650 ;; Hardware stack levels required when called:    7
 12651 ;; This function calls:
 12652 ;;		_Flash_Memory_Erasing
 12653 ;;		_Flash_Memory_Read
 12654 ;;		_Flash_Memory_Write
 12655 ;; This function is called by:
 12656 ;;		_Flash_Memory_Main
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           
 12661                           ;psect for function _Flash_Memory_Modify
 12662  1315                     _Flash_Memory_Modify:	
 12663                           
 12664                           ;MCU_B1.c: 866: char i = 0;
 12665                           
 12666                           ;incstack = 0
 12667                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12668  1315  0020               	movlb	0	; select bank0
 12669  1316  01A5               	clrf	Flash_Memory_Modify@i
 12670                           
 12671                           ;MCU_B1.c: 867: for (i = 0; i < 32; i++) {
 12672  1317  01A5               	clrf	Flash_Memory_Modify@i
 12673  1318  3020               	movlw	32
 12674  1319  0225               	subwf	Flash_Memory_Modify@i,w
 12675  131A  1803               	btfsc	3,0
 12676  131B  2B31               	goto	l9838
 12677  131C                     l9832:	
 12678                           
 12679                           ;MCU_B1.c: 868: Memory.Data[i] = Flash_Memory_Read(i);
 12680  131C  0825               	movf	Flash_Memory_Modify@i,w
 12681  131D  319D  253D  3193   	fcall	_Flash_Memory_Read
 12682  1320  0020               	movlb	0	; select bank0
 12683  1321  00A4               	movwf	??_Flash_Memory_Modify
 12684  1322  0825               	movf	Flash_Memory_Modify@i,w
 12685  1323  3E20               	addlw	_Memory& (0+255)
 12686  1324  0086               	movwf	6
 12687  1325  3002               	movlw	2	; select bank4/5
 12688  1326  0087               	movwf	7
 12689  1327  0824               	movf	??_Flash_Memory_Modify,w
 12690  1328  0081               	movwf	1
 12691  1329  3001               	movlw	1
 12692  132A  00A4               	movwf	??_Flash_Memory_Modify
 12693  132B  0824               	movf	??_Flash_Memory_Modify,w
 12694  132C  07A5               	addwf	Flash_Memory_Modify@i,f
 12695  132D  3020               	movlw	32
 12696  132E  0225               	subwf	Flash_Memory_Modify@i,w
 12697  132F  1C03               	skipc
 12698  1330  2B1C               	goto	l9832
 12699  1331                     l9838:	
 12700                           
 12701                           ;MCU_B1.c: 869: }
 12702                           ;MCU_B1.c: 870: Memory.Data[0]=product->Data[12];
 12703  1331  086C               	movf	_product,w
 12704  1332  0086               	movwf	6
 12705  1333  3002               	movlw	2	; select bank4/5
 12706  1334  0087               	movwf	7
 12707  1335  3002               	movlw	2	; select bank4/5
 12708  1336  3F4C               	moviw [12]fsr1
 12709  1337  0024               	movlb	4	; select bank4
 12710  1338  00A0               	movwf	_Memory^(0+512)
 12711                           
 12712                           ;MCU_B1.c: 871: Memory.Data[1]=product->Data[13];
 12713  1339  0020               	movlb	0	; select bank0
 12714  133A  086C               	movf	_product,w
 12715  133B  0086               	movwf	6
 12716  133C  3002               	movlw	2	; select bank4/5
 12717  133D  0087               	movwf	7
 12718  133E  3002               	movlw	2	; select bank4/5
 12719  133F  3F4D               	moviw [13]fsr1
 12720  1340  0024               	movlb	4	; select bank4
 12721  1341  00A1               	movwf	(_Memory^(0+512)+1)
 12722                           
 12723                           ;MCU_B1.c: 872: Memory.Data[2]=product->Data[14];
 12724  1342  0020               	movlb	0	; select bank0
 12725  1343  086C               	movf	_product,w
 12726  1344  0086               	movwf	6
 12727  1345  3002               	movlw	2	; select bank4/5
 12728  1346  0087               	movwf	7
 12729  1347  3002               	movlw	2	; select bank4/5
 12730  1348  3F4E               	moviw [14]fsr1
 12731  1349  0024               	movlb	4	; select bank4
 12732  134A  00A2               	movwf	(_Memory^(0+512)+2)
 12733                           
 12734                           ;MCU_B1.c: 878: if (Memory.LoopSave == 1) {
 12735  134B  1D44               	btfss	(_Memory^(0+512)+36),2
 12736  134C  2B51               	goto	l1369
 12737                           
 12738                           ;MCU_B1.c: 879: Memory.LoopSave = 0;
 12739  134D  1144               	bcf	(_Memory^(0+512)+36),2
 12740                           
 12741                           ;MCU_B1.c: 880: myMain.FirstOpen = 0;
 12742  134E  0021               	movlb	1	; select bank1
 12743  134F  12A0               	bcf	_myMain^(0+128),5
 12744                           
 12745                           ;MCU_B1.c: 881: myMain.First = 0;
 12746  1350  13A0               	bcf	_myMain^(0+128),7
 12747  1351                     l1369:	
 12748                           
 12749                           ;MCU_B1.c: 883: }
 12750                           ;MCU_B1.c: 884: GIE = 0;
 12751  1351  138B               	bcf	11,7	;volatile
 12752                           
 12753                           ;MCU_B1.c: 885: Flash_Memory_Erasing();
 12754  1352  319A  229B  3193   	fcall	_Flash_Memory_Erasing
 12755                           
 12756                           ;MCU_B1.c: 886: Flash_Memory_Write();
 12757  1355  3190  20D2         	fcall	_Flash_Memory_Write
 12758                           
 12759                           ;MCU_B1.c: 887: GIE = 1;
 12760  1357  178B               	bsf	11,7	;volatile
 12761  1358  0008               	return
 12762  1359                     __end_of_Flash_Memory_Modify:	
 12763                           
 12764                           	psect	text75
 12765  1A9B                     __ptext75:	
 12766 ;; *************** function _Flash_Memory_Erasing *****************
 12767 ;; Defined at:
 12768 ;;		line 854 in file "../src/MCU_B1.c"
 12769 ;; Parameters:    Size  Location     Type
 12770 ;;		None
 12771 ;; Auto vars:     Size  Location     Type
 12772 ;;		None
 12773 ;; Return value:  Size  Location     Type
 12774 ;;		None               void
 12775 ;; Registers used:
 12776 ;;		wreg, status,2, status,0, pclath, cstack
 12777 ;; Tracked objects:
 12778 ;;		On entry : 0/0
 12779 ;;		On exit  : 0/0
 12780 ;;		Unchanged: 0/0
 12781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12786 ;;Total ram usage:        0 bytes
 12787 ;; Hardware stack levels used:    1
 12788 ;; Hardware stack levels required when called:    6
 12789 ;; This function calls:
 12790 ;;		_Flash_Memory_Unlock
 12791 ;; This function is called by:
 12792 ;;		_Flash_Memory_Modify
 12793 ;; This function uses a non-reentrant model
 12794 ;;
 12795                           
 12796                           
 12797                           ;psect for function _Flash_Memory_Erasing
 12798  1A9B                     _Flash_Memory_Erasing:	
 12799                           
 12800                           ;MCU_B1.c: 855: CFGS = 0;
 12801                           
 12802                           ;incstack = 0
 12803                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12804  1A9B  0023               	movlb	3	; select bank3
 12805  1A9C  1315               	bcf	21,6	;volatile
 12806                           
 12807                           ;MCU_B1.c: 856: PMADRH = 0x30;
 12808  1A9D  3030               	movlw	48
 12809  1A9E  0092               	movwf	18	;volatile
 12810                           
 12811                           ;MCU_B1.c: 857: PMADRL = 0x00;
 12812  1A9F  0191               	clrf	17	;volatile
 12813                           
 12814                           ;MCU_B1.c: 858: FREE = 1;
 12815  1AA0  1615               	bsf	21,4	;volatile
 12816                           
 12817                           ;MCU_B1.c: 859: WREN = 1;
 12818  1AA1  1515               	bsf	21,2	;volatile
 12819                           
 12820                           ;MCU_B1.c: 860: Flash_Memory_Unlock();
 12821  1AA2  319A  225D         	fcall	_Flash_Memory_Unlock
 12822                           
 12823                           ;MCU_B1.c: 861: WREN = 0;
 12824  1AA4  0023               	movlb	3	; select bank3
 12825  1AA5  1115               	bcf	21,2	;volatile
 12826  1AA6  0008               	return
 12827  1AA7                     __end_of_Flash_Memory_Erasing:	
 12828                           
 12829                           	psect	text76
 12830  06AB                     __ptext76:	
 12831 ;; *************** function _Flash_Memory_Initialization *****************
 12832 ;; Defined at:
 12833 ;;		line 755 in file "../src/MCU_B1.c"
 12834 ;; Parameters:    Size  Location     Type
 12835 ;;		None
 12836 ;; Auto vars:     Size  Location     Type
 12837 ;;  i               1   62[BANK0 ] unsigned char 
 12838 ;; Return value:  Size  Location     Type
 12839 ;;		None               void
 12840 ;; Registers used:
 12841 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12842 ;; Tracked objects:
 12843 ;;		On entry : 0/0
 12844 ;;		On exit  : 0/0
 12845 ;;		Unchanged: 0/0
 12846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12848 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12850 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12851 ;;Total ram usage:        2 bytes
 12852 ;; Hardware stack levels used:    1
 12853 ;; Hardware stack levels required when called:    8
 12854 ;; This function calls:
 12855 ;;		_Flash_Memory_Read
 12856 ;;		_Flash_Memory_Write
 12857 ;;		_setPercentValue
 12858 ;; This function is called by:
 12859 ;;		_main
 12860 ;; This function uses a non-reentrant model
 12861 ;;
 12862                           
 12863                           
 12864                           ;psect for function _Flash_Memory_Initialization
 12865  06AB                     _Flash_Memory_Initialization:	
 12866                           
 12867                           ;MCU_B1.c: 756: char i = 0;
 12868                           
 12869                           ;incstack = 0
 12870                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12871  06AB  0020               	movlb	0	; select bank0
 12872  06AC  01DE               	clrf	Flash_Memory_Initialization@i
 12873                           
 12874                           ;MCU_B1.c: 757: if (Flash_Memory_Read(31) == 0xaa) {
 12875  06AD  301F               	movlw	31
 12876  06AE  319D  253D  3186   	fcall	_Flash_Memory_Read
 12877  06B1  3AAA               	xorlw	170
 12878  06B2  1D03               	skipz
 12879  06B3  2F1D               	goto	l10278
 12880                           
 12881                           ;MCU_B1.c: 758: product->Data[12] = Flash_Memory_Read(0);
 12882  06B4  3000               	movlw	0
 12883  06B5  319D  253D  3186   	fcall	_Flash_Memory_Read
 12884  06B8  0020               	movlb	0	; select bank0
 12885  06B9  00DD               	movwf	??_Flash_Memory_Initialization
 12886  06BA  086C               	movf	_product,w
 12887  06BB  3E0C               	addlw	12
 12888  06BC  0086               	movwf	6
 12889  06BD  3002               	movlw	2	; select bank4/5
 12890  06BE  0087               	movwf	7
 12891  06BF  085D               	movf	??_Flash_Memory_Initialization,w
 12892  06C0  0081               	movwf	1
 12893                           
 12894                           ;MCU_B1.c: 759: product->Data[13] = Flash_Memory_Read(1);
 12895  06C1  3001               	movlw	1
 12896  06C2  319D  253D  3186   	fcall	_Flash_Memory_Read
 12897  06C5  0020               	movlb	0	; select bank0
 12898  06C6  00DD               	movwf	??_Flash_Memory_Initialization
 12899  06C7  086C               	movf	_product,w
 12900  06C8  3E0D               	addlw	13
 12901  06C9  0086               	movwf	6
 12902  06CA  3002               	movlw	2	; select bank4/5
 12903  06CB  0087               	movwf	7
 12904  06CC  085D               	movf	??_Flash_Memory_Initialization,w
 12905  06CD  0081               	movwf	1
 12906                           
 12907                           ;MCU_B1.c: 760: product->Data[14] = Flash_Memory_Read(2);
 12908  06CE  3002               	movlw	2
 12909  06CF  319D  253D  3186   	fcall	_Flash_Memory_Read
 12910  06D2  0020               	movlb	0	; select bank0
 12911  06D3  00DD               	movwf	??_Flash_Memory_Initialization
 12912  06D4  086C               	movf	_product,w
 12913  06D5  3E0E               	addlw	14
 12914  06D6  0086               	movwf	6
 12915  06D7  3002               	movlw	2	; select bank4/5
 12916  06D8  0087               	movwf	7
 12917  06D9  085D               	movf	??_Flash_Memory_Initialization,w
 12918  06DA  0081               	movwf	1
 12919                           
 12920                           ;MCU_B1.c: 766: i = setPercentValue(((char)((100-60)*0.8)));
 12921  06DB  3020               	movlw	32
 12922  06DC  3193  2359  3186   	fcall	_setPercentValue
 12923  06DF  0020               	movlb	0	; select bank0
 12924  06E0  00DD               	movwf	??_Flash_Memory_Initialization
 12925  06E1  085D               	movf	??_Flash_Memory_Initialization,w
 12926  06E2  00DE               	movwf	Flash_Memory_Initialization@i
 12927                           
 12928                           ;MCU_B1.c: 767: product->Data[21] = i;
 12929  06E3  085E               	movf	Flash_Memory_Initialization@i,w
 12930  06E4  00DD               	movwf	??_Flash_Memory_Initialization
 12931  06E5  086C               	movf	_product,w
 12932  06E6  3E15               	addlw	21
 12933  06E7  0086               	movwf	6
 12934  06E8  3002               	movlw	2	; select bank4/5
 12935  06E9  0087               	movwf	7
 12936  06EA  085D               	movf	??_Flash_Memory_Initialization,w
 12937  06EB  0081               	movwf	1
 12938                           
 12939                           ;MCU_B1.c: 768: product->Data[22] = i;
 12940  06EC  085E               	movf	Flash_Memory_Initialization@i,w
 12941  06ED  00DD               	movwf	??_Flash_Memory_Initialization
 12942  06EE  086C               	movf	_product,w
 12943  06EF  3E16               	addlw	22
 12944  06F0  0086               	movwf	6
 12945  06F1  3002               	movlw	2	; select bank4/5
 12946  06F2  0087               	movwf	7
 12947  06F3  085D               	movf	??_Flash_Memory_Initialization,w
 12948  06F4  0081               	movwf	1
 12949                           
 12950                           ;MCU_B1.c: 769: product->Data[23] = i;
 12951  06F5  085E               	movf	Flash_Memory_Initialization@i,w
 12952  06F6  00DD               	movwf	??_Flash_Memory_Initialization
 12953  06F7  086C               	movf	_product,w
 12954  06F8  3E17               	addlw	23
 12955  06F9  0086               	movwf	6
 12956  06FA  3002               	movlw	2	; select bank4/5
 12957  06FB  0087               	movwf	7
 12958  06FC  085D               	movf	??_Flash_Memory_Initialization,w
 12959  06FD  0081               	movwf	1
 12960                           
 12961                           ;MCU_B1.c: 771: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12962  06FE  086C               	movf	_product,w
 12963  06FF  3E0C               	addlw	12
 12964  0700  0086               	movwf	6
 12965  0701  3002               	movlw	2	; select bank4/5
 12966  0702  0087               	movwf	7
 12967  0703  0801               	movf	1,w
 12968  0704  3AFF               	xorlw	255
 12969  0705  1D03               	skipz
 12970  0706  0008               	return
 12971  0707  086C               	movf	_product,w
 12972  0708  3E0D               	addlw	13
 12973  0709  0086               	movwf	6
 12974  070A  3002               	movlw	2	; select bank4/5
 12975  070B  0087               	movwf	7
 12976  070C  0801               	movf	1,w
 12977  070D  3AFF               	xorlw	255
 12978  070E  1D03               	skipz
 12979  070F  0008               	return
 12980  0710  086C               	movf	_product,w
 12981  0711  3E0E               	addlw	14
 12982  0712  0086               	movwf	6
 12983  0713  3002               	movlw	2	; select bank4/5
 12984  0714  0087               	movwf	7
 12985  0715  0801               	movf	1,w
 12986  0716  3AFF               	xorlw	255
 12987  0717  1D03               	skipz
 12988  0718  0008               	return
 12989                           
 12990                           ;MCU_B1.c: 772: myMain.FirstOpen = 1;
 12991  0719  0021               	movlb	1	; select bank1
 12992  071A  16A0               	bsf	_myMain^(0+128),5
 12993                           
 12994                           ;MCU_B1.c: 773: myMain.First = 1;
 12995  071B  17A0               	bsf	_myMain^(0+128),7
 12996                           
 12997                           ;MCU_B1.c: 774: }
 12998                           ;MCU_B1.c: 775: } else {
 12999  071C  0008               	return
 13000  071D                     l10278:	
 13001                           
 13002                           ;MCU_B1.c: 776: i = setPercentValue(((char)((100-60)*0.8)));
 13003  071D  3020               	movlw	32
 13004  071E  3193  2359  3186   	fcall	_setPercentValue
 13005  0721  0020               	movlb	0	; select bank0
 13006  0722  00DD               	movwf	??_Flash_Memory_Initialization
 13007  0723  085D               	movf	??_Flash_Memory_Initialization,w
 13008  0724  00DE               	movwf	Flash_Memory_Initialization@i
 13009                           
 13010                           ;MCU_B1.c: 777: Memory.Data[0]=0xff;
 13011  0725  30FF               	movlw	255
 13012  0726  00DD               	movwf	??_Flash_Memory_Initialization
 13013  0727  085D               	movf	??_Flash_Memory_Initialization,w
 13014  0728  0024               	movlb	4	; select bank4
 13015  0729  00A0               	movwf	_Memory^(0+512)
 13016                           
 13017                           ;MCU_B1.c: 778: Memory.Data[1]=0xff;
 13018  072A  30FF               	movlw	255
 13019  072B  0020               	movlb	0	; select bank0
 13020  072C  00DD               	movwf	??_Flash_Memory_Initialization
 13021  072D  085D               	movf	??_Flash_Memory_Initialization,w
 13022  072E  0024               	movlb	4	; select bank4
 13023  072F  00A1               	movwf	(_Memory^(0+512)+1)
 13024                           
 13025                           ;MCU_B1.c: 779: Memory.Data[2]=0xff;
 13026  0730  30FF               	movlw	255
 13027  0731  0020               	movlb	0	; select bank0
 13028  0732  00DD               	movwf	??_Flash_Memory_Initialization
 13029  0733  085D               	movf	??_Flash_Memory_Initialization,w
 13030  0734  0024               	movlb	4	; select bank4
 13031  0735  00A2               	movwf	(_Memory^(0+512)+2)
 13032                           
 13033                           ;MCU_B1.c: 780: Memory.Data[3]=0xff;
 13034  0736  30FF               	movlw	255
 13035  0737  0020               	movlb	0	; select bank0
 13036  0738  00DD               	movwf	??_Flash_Memory_Initialization
 13037  0739  085D               	movf	??_Flash_Memory_Initialization,w
 13038  073A  0024               	movlb	4	; select bank4
 13039  073B  00A3               	movwf	(_Memory^(0+512)+3)
 13040                           
 13041                           ;MCU_B1.c: 781: Memory.Data[4]=0xff;
 13042  073C  30FF               	movlw	255
 13043  073D  0020               	movlb	0	; select bank0
 13044  073E  00DD               	movwf	??_Flash_Memory_Initialization
 13045  073F  085D               	movf	??_Flash_Memory_Initialization,w
 13046  0740  0024               	movlb	4	; select bank4
 13047  0741  00A4               	movwf	(_Memory^(0+512)+4)
 13048                           
 13049                           ;MCU_B1.c: 782: Memory.Data[5]=0xff;
 13050  0742  30FF               	movlw	255
 13051  0743  0020               	movlb	0	; select bank0
 13052  0744  00DD               	movwf	??_Flash_Memory_Initialization
 13053  0745  085D               	movf	??_Flash_Memory_Initialization,w
 13054  0746  0024               	movlb	4	; select bank4
 13055  0747  00A5               	movwf	(_Memory^(0+512)+5)
 13056                           
 13057                           ;MCU_B1.c: 783: Memory.Data[31]=0xaa;
 13058  0748  30AA               	movlw	170
 13059  0749  0020               	movlb	0	; select bank0
 13060  074A  00DD               	movwf	??_Flash_Memory_Initialization
 13061  074B  085D               	movf	??_Flash_Memory_Initialization,w
 13062  074C  0024               	movlb	4	; select bank4
 13063  074D  00BF               	movwf	(_Memory^(0+512)+31)
 13064                           
 13065                           ;MCU_B1.c: 784: product->Data[21] = i;
 13066  074E  0020               	movlb	0	; select bank0
 13067  074F  085E               	movf	Flash_Memory_Initialization@i,w
 13068  0750  00DD               	movwf	??_Flash_Memory_Initialization
 13069  0751  086C               	movf	_product,w
 13070  0752  3E15               	addlw	21
 13071  0753  0086               	movwf	6
 13072  0754  3002               	movlw	2	; select bank4/5
 13073  0755  0087               	movwf	7
 13074  0756  085D               	movf	??_Flash_Memory_Initialization,w
 13075  0757  0081               	movwf	1
 13076                           
 13077                           ;MCU_B1.c: 785: product->Data[22] = i;
 13078  0758  085E               	movf	Flash_Memory_Initialization@i,w
 13079  0759  00DD               	movwf	??_Flash_Memory_Initialization
 13080  075A  086C               	movf	_product,w
 13081  075B  3E16               	addlw	22
 13082  075C  0086               	movwf	6
 13083  075D  3002               	movlw	2	; select bank4/5
 13084  075E  0087               	movwf	7
 13085  075F  085D               	movf	??_Flash_Memory_Initialization,w
 13086  0760  0081               	movwf	1
 13087                           
 13088                           ;MCU_B1.c: 786: product->Data[23] = i;
 13089  0761  085E               	movf	Flash_Memory_Initialization@i,w
 13090  0762  00DD               	movwf	??_Flash_Memory_Initialization
 13091  0763  086C               	movf	_product,w
 13092  0764  3E17               	addlw	23
 13093  0765  0086               	movwf	6
 13094  0766  3002               	movlw	2	; select bank4/5
 13095  0767  0087               	movwf	7
 13096  0768  085D               	movf	??_Flash_Memory_Initialization,w
 13097  0769  0081               	movwf	1
 13098                           
 13099                           ;MCU_B1.c: 787: GIE = 0;
 13100  076A  138B               	bcf	11,7	;volatile
 13101                           
 13102                           ;MCU_B1.c: 788: Flash_Memory_Write();
 13103  076B  3190  20D2         	fcall	_Flash_Memory_Write
 13104                           
 13105                           ;MCU_B1.c: 789: GIE = 1;
 13106  076D  178B               	bsf	11,7	;volatile
 13107                           
 13108                           ;MCU_B1.c: 790: myMain.FirstOpen = 1;
 13109  076E  0021               	movlb	1	; select bank1
 13110  076F  16A0               	bsf	_myMain^(0+128),5
 13111                           
 13112                           ;MCU_B1.c: 791: myMain.First = 1;
 13113  0770  17A0               	bsf	_myMain^(0+128),7
 13114  0771  0008               	return
 13115  0772                     __end_of_Flash_Memory_Initialization:	
 13116                           
 13117                           	psect	text77
 13118  10D2                     __ptext77:	
 13119 ;; *************** function _Flash_Memory_Write *****************
 13120 ;; Defined at:
 13121 ;;		line 835 in file "../src/MCU_B1.c"
 13122 ;; Parameters:    Size  Location     Type
 13123 ;;		None
 13124 ;; Auto vars:     Size  Location     Type
 13125 ;;  i               1    1[BANK0 ] unsigned char 
 13126 ;; Return value:  Size  Location     Type
 13127 ;;		None               void
 13128 ;; Registers used:
 13129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13130 ;; Tracked objects:
 13131 ;;		On entry : 0/0
 13132 ;;		On exit  : 0/0
 13133 ;;		Unchanged: 0/0
 13134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13139 ;;Total ram usage:        2 bytes
 13140 ;; Hardware stack levels used:    1
 13141 ;; Hardware stack levels required when called:    6
 13142 ;; This function calls:
 13143 ;;		_Flash_Memory_Unlock
 13144 ;; This function is called by:
 13145 ;;		_Flash_Memory_Initialization
 13146 ;;		_Flash_Memory_Modify
 13147 ;; This function uses a non-reentrant model
 13148 ;;
 13149                           
 13150                           
 13151                           ;psect for function _Flash_Memory_Write
 13152  10D2                     _Flash_Memory_Write:	
 13153                           
 13154                           ;MCU_B1.c: 836: char i = 0;
 13155                           
 13156                           ;incstack = 0
 13157                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13158  10D2  0020               	movlb	0	; select bank0
 13159  10D3  01A1               	clrf	Flash_Memory_Write@i
 13160                           
 13161                           ;MCU_B1.c: 837: CFGS = 0;
 13162  10D4  0023               	movlb	3	; select bank3
 13163  10D5  1315               	bcf	21,6	;volatile
 13164                           
 13165                           ;MCU_B1.c: 838: PMADRH = 0x30;
 13166  10D6  3030               	movlw	48
 13167  10D7  0092               	movwf	18	;volatile
 13168                           
 13169                           ;MCU_B1.c: 839: PMDATH = 0;
 13170  10D8  0194               	clrf	20	;volatile
 13171                           
 13172                           ;MCU_B1.c: 840: FREE = 0;
 13173  10D9  1215               	bcf	21,4	;volatile
 13174                           
 13175                           ;MCU_B1.c: 841: LWLO = 1;
 13176  10DA  1695               	bsf	21,5	;volatile
 13177                           
 13178                           ;MCU_B1.c: 842: WREN = 1;
 13179  10DB  1515               	bsf	21,2	;volatile
 13180                           
 13181                           ;MCU_B1.c: 843: for (i = 0; i < 32; i++) {
 13182  10DC  0020               	movlb	0	; select bank0
 13183  10DD  01A1               	clrf	Flash_Memory_Write@i
 13184  10DE  3020               	movlw	32
 13185  10DF  0221               	subwf	Flash_Memory_Write@i,w
 13186  10E0  1803               	btfsc	3,0
 13187  10E1  28FA               	goto	l1360
 13188  10E2                     l9384:	
 13189                           
 13190                           ;MCU_B1.c: 844: PMADRL = i;
 13191  10E2  0821               	movf	Flash_Memory_Write@i,w
 13192  10E3  0023               	movlb	3	; select bank3
 13193  10E4  0091               	movwf	17	;volatile
 13194                           
 13195                           ;MCU_B1.c: 845: PMDATL = Memory.Data[i];
 13196  10E5  0020               	movlb	0	; select bank0
 13197  10E6  0821               	movf	Flash_Memory_Write@i,w
 13198  10E7  3E20               	addlw	_Memory& (0+255)
 13199  10E8  0086               	movwf	6
 13200  10E9  3002               	movlw	2	; select bank4/5
 13201  10EA  0087               	movwf	7
 13202  10EB  0801               	movf	1,w
 13203  10EC  0023               	movlb	3	; select bank3
 13204  10ED  0093               	movwf	19	;volatile
 13205                           
 13206                           ;MCU_B1.c: 846: Flash_Memory_Unlock();
 13207  10EE  319A  225D  3190   	fcall	_Flash_Memory_Unlock
 13208  10F1  3001               	movlw	1
 13209  10F2  0020               	movlb	0	; select bank0
 13210  10F3  00A0               	movwf	??_Flash_Memory_Write
 13211  10F4  0820               	movf	??_Flash_Memory_Write,w
 13212  10F5  07A1               	addwf	Flash_Memory_Write@i,f
 13213  10F6  3020               	movlw	32
 13214  10F7  0221               	subwf	Flash_Memory_Write@i,w
 13215  10F8  1C03               	skipc
 13216  10F9  28E2               	goto	l9384
 13217  10FA                     l1360:	
 13218                           
 13219                           ;MCU_B1.c: 847: }
 13220                           ;MCU_B1.c: 848: LWLO = 0;
 13221  10FA  0023               	movlb	3	; select bank3
 13222  10FB  1295               	bcf	21,5	;volatile
 13223                           
 13224                           ;MCU_B1.c: 849: Flash_Memory_Unlock();
 13225  10FC  319A  225D         	fcall	_Flash_Memory_Unlock
 13226                           
 13227                           ;MCU_B1.c: 850: WREN = 0;
 13228  10FE  0023               	movlb	3	; select bank3
 13229  10FF  1115               	bcf	21,2	;volatile
 13230  1100  0008               	return
 13231  1101                     __end_of_Flash_Memory_Write:	
 13232                           
 13233                           	psect	text78
 13234  1A5D                     __ptext78:	
 13235 ;; *************** function _Flash_Memory_Unlock *****************
 13236 ;; Defined at:
 13237 ;;		line 814 in file "../src/MCU_B1.c"
 13238 ;; Parameters:    Size  Location     Type
 13239 ;;		None
 13240 ;; Auto vars:     Size  Location     Type
 13241 ;;		None
 13242 ;; Return value:  Size  Location     Type
 13243 ;;		None               void
 13244 ;; Registers used:
 13245 ;;		wreg
 13246 ;; Tracked objects:
 13247 ;;		On entry : 0/0
 13248 ;;		On exit  : 0/0
 13249 ;;		Unchanged: 0/0
 13250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13255 ;;Total ram usage:        0 bytes
 13256 ;; Hardware stack levels used:    1
 13257 ;; Hardware stack levels required when called:    5
 13258 ;; This function calls:
 13259 ;;		Nothing
 13260 ;; This function is called by:
 13261 ;;		_Flash_Memory_Write
 13262 ;;		_Flash_Memory_Erasing
 13263 ;; This function uses a non-reentrant model
 13264 ;;
 13265                           
 13266                           
 13267                           ;psect for function _Flash_Memory_Unlock
 13268  1A5D                     _Flash_Memory_Unlock:	
 13269                           
 13270                           ;MCU_B1.c: 815: PMCON2 = 0x55;
 13271                           
 13272                           ;incstack = 0
 13273                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13274  1A5D  3055               	movlw	85
 13275  1A5E  0023               	movlb	3	; select bank3
 13276  1A5F  0096               	movwf	22	;volatile
 13277                           
 13278                           ;MCU_B1.c: 816: PMCON2 = 0xaa;
 13279  1A60  30AA               	movlw	170
 13280  1A61  0096               	movwf	22	;volatile
 13281                           
 13282                           ;MCU_B1.c: 817: WR = 1;
 13283  1A62  1495               	bsf	21,1	;volatile
 13284                           
 13285                           ;MCU_B1.c: 818: __nop();
 13286  1A63  0000               	nop
 13287                           
 13288                           ;MCU_B1.c: 819: __nop();
 13289  1A64  0000               	nop
 13290  1A65  0008               	return
 13291  1A66                     __end_of_Flash_Memory_Unlock:	
 13292                           
 13293                           	psect	text79
 13294  1D3D                     __ptext79:	
 13295 ;; *************** function _Flash_Memory_Read *****************
 13296 ;; Defined at:
 13297 ;;		line 823 in file "../src/MCU_B1.c"
 13298 ;; Parameters:    Size  Location     Type
 13299 ;;  address         1    wreg     unsigned char 
 13300 ;; Auto vars:     Size  Location     Type
 13301 ;;  address         1    2[BANK0 ] unsigned char 
 13302 ;;  ret             1    3[BANK0 ] unsigned char 
 13303 ;;  i               1    1[BANK0 ] unsigned char 
 13304 ;; Return value:  Size  Location     Type
 13305 ;;                  1    wreg      unsigned char 
 13306 ;; Registers used:
 13307 ;;		wreg, status,2
 13308 ;; Tracked objects:
 13309 ;;		On entry : 0/0
 13310 ;;		On exit  : 0/0
 13311 ;;		Unchanged: 0/0
 13312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13316 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13317 ;;Total ram usage:        4 bytes
 13318 ;; Hardware stack levels used:    1
 13319 ;; Hardware stack levels required when called:    5
 13320 ;; This function calls:
 13321 ;;		Nothing
 13322 ;; This function is called by:
 13323 ;;		_Flash_Memory_Initialization
 13324 ;;		_Flash_Memory_Modify
 13325 ;; This function uses a non-reentrant model
 13326 ;;
 13327                           
 13328                           
 13329                           ;psect for function _Flash_Memory_Read
 13330  1D3D                     _Flash_Memory_Read:	
 13331                           
 13332                           ;incstack = 0
 13333                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13334                           ;Flash_Memory_Read@address stored from wreg
 13335  1D3D  0020               	movlb	0	; select bank0
 13336  1D3E  00A2               	movwf	Flash_Memory_Read@address
 13337                           
 13338                           ;MCU_B1.c: 824: char i = 0, ret = 0;
 13339  1D3F  01A1               	clrf	Flash_Memory_Read@i
 13340  1D40  01A3               	clrf	Flash_Memory_Read@ret
 13341                           
 13342                           ;MCU_B1.c: 825: PMADRH = 0x30;
 13343  1D41  3030               	movlw	48
 13344  1D42  0023               	movlb	3	; select bank3
 13345  1D43  0092               	movwf	18	;volatile
 13346                           
 13347                           ;MCU_B1.c: 826: PMADRL = address;
 13348  1D44  0020               	movlb	0	; select bank0
 13349  1D45  0822               	movf	Flash_Memory_Read@address,w
 13350  1D46  0023               	movlb	3	; select bank3
 13351  1D47  0091               	movwf	17	;volatile
 13352                           
 13353                           ;MCU_B1.c: 827: CFGS = 0;
 13354  1D48  1315               	bcf	21,6	;volatile
 13355                           
 13356                           ;MCU_B1.c: 828: RD = 1;
 13357  1D49  1415               	bsf	21,0	;volatile
 13358                           
 13359                           ;MCU_B1.c: 829: i = PMDATH;
 13360  1D4A  0814               	movf	20,w	;volatile
 13361  1D4B  0020               	movlb	0	; select bank0
 13362  1D4C  00A0               	movwf	??_Flash_Memory_Read
 13363  1D4D  0820               	movf	??_Flash_Memory_Read,w
 13364  1D4E  00A1               	movwf	Flash_Memory_Read@i
 13365                           
 13366                           ;MCU_B1.c: 830: ret = PMDATL;
 13367  1D4F  0023               	movlb	3	; select bank3
 13368  1D50  0813               	movf	19,w	;volatile
 13369  1D51  0020               	movlb	0	; select bank0
 13370  1D52  00A0               	movwf	??_Flash_Memory_Read
 13371  1D53  0820               	movf	??_Flash_Memory_Read,w
 13372  1D54  00A3               	movwf	Flash_Memory_Read@ret
 13373                           
 13374                           ;MCU_B1.c: 831: return ret;
 13375  1D55  0823               	movf	Flash_Memory_Read@ret,w
 13376  1D56  0008               	return
 13377  1D57                     __end_of_Flash_Memory_Read:	
 13378                           
 13379                           	psect	text80
 13380  1A79                     __ptext80:	
 13381 ;; *************** function _DimmerLights_Main *****************
 13382 ;; Defined at:
 13383 ;;		line 416 in file "../src/Dimmer_B1.c"
 13384 ;; Parameters:    Size  Location     Type
 13385 ;;		None
 13386 ;; Auto vars:     Size  Location     Type
 13387 ;;		None
 13388 ;; Return value:  Size  Location     Type
 13389 ;;		None               void
 13390 ;; Registers used:
 13391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13392 ;; Tracked objects:
 13393 ;;		On entry : 0/0
 13394 ;;		On exit  : 0/0
 13395 ;;		Unchanged: 0/0
 13396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13401 ;;Total ram usage:        0 bytes
 13402 ;; Hardware stack levels used:    1
 13403 ;; Hardware stack levels required when called:   11
 13404 ;; This function calls:
 13405 ;;		_DimmerLights_Close
 13406 ;;		_setDimmerLights_Main
 13407 ;; This function is called by:
 13408 ;;		_main
 13409 ;; This function uses a non-reentrant model
 13410 ;;
 13411                           
 13412                           
 13413                           ;psect for function _DimmerLights_Main
 13414  1A79                     _DimmerLights_Main:	
 13415                           
 13416                           ;Dimmer_B1.c: 419: setDimmerLights_Main(1);
 13417                           
 13418                           ;incstack = 0
 13419                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13420  1A79  3001               	movlw	1
 13421  1A7A  318A  225D  319A   	fcall	_setDimmerLights_Main
 13422                           
 13423                           ;Dimmer_B1.c: 423: setDimmerLights_Main(2);
 13424  1A7D  3002               	movlw	2
 13425  1A7E  318A  225D  319A   	fcall	_setDimmerLights_Main
 13426                           
 13427                           ;Dimmer_B1.c: 430: DimmerLights_Close();
 13428  1A81  319C  24DA         	fcall	_DimmerLights_Close
 13429  1A83  0008               	return
 13430  1A84                     __end_of_DimmerLights_Main:	
 13431                           
 13432                           	psect	text81
 13433  0A5D                     __ptext81:	
 13434 ;; *************** function _setDimmerLights_Main *****************
 13435 ;; Defined at:
 13436 ;;		line 434 in file "../src/Dimmer_B1.c"
 13437 ;; Parameters:    Size  Location     Type
 13438 ;;  lights          1    wreg     unsigned char 
 13439 ;; Auto vars:     Size  Location     Type
 13440 ;;  lights          1   70[BANK0 ] unsigned char 
 13441 ;;  clear           1   69[BANK0 ] unsigned char 
 13442 ;; Return value:  Size  Location     Type
 13443 ;;		None               void
 13444 ;; Registers used:
 13445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13446 ;; Tracked objects:
 13447 ;;		On entry : 0/0
 13448 ;;		On exit  : 0/0
 13449 ;;		Unchanged: 0/0
 13450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13452 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13454 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13455 ;;Total ram usage:        2 bytes
 13456 ;; Hardware stack levels used:    1
 13457 ;; Hardware stack levels required when called:   10
 13458 ;; This function calls:
 13459 ;;		_DimmerLightsPointSelect
 13460 ;;		_setBuz
 13461 ;;		_setDimmerLights
 13462 ;;		_setDimmerLights_Adj
 13463 ;; This function is called by:
 13464 ;;		_DimmerLights_Main
 13465 ;; This function uses a non-reentrant model
 13466 ;;
 13467                           
 13468                           
 13469                           ;psect for function _setDimmerLights_Main
 13470  0A5D                     _setDimmerLights_Main:	
 13471                           
 13472                           ;incstack = 0
 13473                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13474                           ;setDimmerLights_Main@lights stored from wreg
 13475  0A5D  0020               	movlb	0	; select bank0
 13476  0A5E  00E6               	movwf	setDimmerLights_Main@lights
 13477                           
 13478                           ;Dimmer_B1.c: 435: char clear = 1;
 13479  0A5F  01E5               	clrf	setDimmerLights_Main@clear
 13480  0A60  0AE5               	incf	setDimmerLights_Main@clear,f
 13481                           
 13482                           ;Dimmer_B1.c: 436: DimmerLightsPointSelect(lights);
 13483  0A61  0866               	movf	setDimmerLights_Main@lights,w
 13484  0A62  319C  2408  318A   	fcall	_DimmerLightsPointSelect
 13485                           
 13486                           ;Dimmer_B1.c: 449: if (lights == 1) {
 13487  0A65  0020               	movlb	0	; select bank0
 13488  0A66  0866               	movf	setDimmerLights_Main@lights,w
 13489  0A67  3A01               	xorlw	1
 13490  0A68  1D03               	skipz
 13491  0A69  2A71               	goto	l9700
 13492                           
 13493                           ;Dimmer_B1.c: 450: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 13494  0A6A  3000               	movlw	0
 13495  0A6B  0022               	movlb	2	; select bank2
 13496  0A6C  1955               	btfsc	(_DimmerLights2^(0+256)+9),2
 13497  0A6D  3001               	movlw	1
 13498  0A6E  0020               	movlb	0	; select bank0
 13499  0A6F  00E5               	movwf	setDimmerLights_Main@clear
 13500                           
 13501                           ;Dimmer_B1.c: 451: } else if (lights == 2) {
 13502  0A70  2A7B               	goto	l9704
 13503  0A71                     l9700:	
 13504  0A71  0866               	movf	setDimmerLights_Main@lights,w
 13505  0A72  3A02               	xorlw	2
 13506  0A73  1D03               	skipz
 13507  0A74  2A7B               	goto	l9704
 13508                           
 13509                           ;Dimmer_B1.c: 452: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 13510  0A75  3000               	movlw	0
 13511  0A76  0022               	movlb	2	; select bank2
 13512  0A77  1946               	btfsc	(_DimmerLights1^(0+256)+9),2
 13513  0A78  3001               	movlw	1
 13514  0A79  0020               	movlb	0	; select bank0
 13515  0A7A  00E5               	movwf	setDimmerLights_Main@clear
 13516  0A7B                     l9704:	
 13517                           
 13518                           ;Dimmer_B1.c: 453: }
 13519                           ;Dimmer_B1.c: 456: if (DimmerLights->Trigger == 1) {
 13520  0A7B  0878               	movf	_DimmerLights,w
 13521  0A7C  3E08               	addlw	8
 13522  0A7D  0086               	movwf	6
 13523  0A7E  3001               	movlw	1	; select bank2/3
 13524  0A7F  0087               	movwf	7
 13525  0A80  1D01               	btfss	1,2
 13526  0A81  2AA2               	goto	l9716
 13527                           
 13528                           ;Dimmer_B1.c: 457: if (clear == 1) {
 13529  0A82  0865               	movf	setDimmerLights_Main@clear,w
 13530  0A83  3A01               	xorlw	1
 13531  0A84  1D03               	skipz
 13532  0A85  0008               	return
 13533                           
 13534                           ;Dimmer_B1.c: 458: DimmerLights->Trigger = 0;
 13535  0A86  0878               	movf	_DimmerLights,w
 13536  0A87  3E08               	addlw	8
 13537  0A88  0086               	movwf	6
 13538  0A89  3001               	movlw	1	; select bank2/3
 13539  0A8A  0087               	movwf	7
 13540  0A8B  1101               	bcf	1,2
 13541                           
 13542                           ;Dimmer_B1.c: 459: if (DimmerLights->Switch == 1) {
 13543  0A8C  0878               	movf	_DimmerLights,w
 13544  0A8D  3E08               	addlw	8
 13545  0A8E  0086               	movwf	6
 13546  0A8F  3001               	movlw	1	; select bank2/3
 13547  0A90  0087               	movwf	7
 13548  0A91  1C81               	btfss	1,1
 13549  0A92  2A96               	goto	l9712
 13550                           
 13551                           ;Dimmer_B1.c: 460: setDimmerLights(lights, 1);
 13552  0A93  01A4               	clrf	setDimmerLights@status
 13553  0A94  0AA4               	incf	setDimmerLights@status,f
 13554  0A95  2A98               	goto	L9
 13555  0A96                     l9712:	
 13556                           ;Dimmer_B1.c: 461: } else {
 13557                           
 13558                           
 13559                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 0);
 13560  0A96  0020               	movlb	0	; select bank0
 13561  0A97  01A4               	clrf	setDimmerLights@status
 13562  0A98                     L9:	
 13563  0A98  0866               	movf	setDimmerLights_Main@lights,w
 13564  0A99  318C  24CC         	fcall	_setDimmerLights
 13565                           
 13566                           ;Dimmer_B1.c: 463: }
 13567                           ;Dimmer_B1.c: 465: DimmerLights->Clear = 0;
 13568  0A9B  0878               	movf	_DimmerLights,w
 13569  0A9C  3E09               	addlw	9
 13570  0A9D  0086               	movwf	6
 13571  0A9E  3001               	movlw	1	; select bank2/3
 13572  0A9F  0087               	movwf	7
 13573  0AA0  1101               	bcf	1,2
 13574                           
 13575                           ;Dimmer_B1.c: 467: }
 13576                           ;Dimmer_B1.c: 468: } else {
 13577  0AA1  0008               	return
 13578  0AA2                     l9716:	
 13579                           
 13580                           ;Dimmer_B1.c: 469: if (DimmerLights->TriggerAdj == 1) {
 13581  0AA2  0878               	movf	_DimmerLights,w
 13582  0AA3  3E08               	addlw	8
 13583  0AA4  0086               	movwf	6
 13584  0AA5  3001               	movlw	1	; select bank2/3
 13585  0AA6  0087               	movwf	7
 13586  0AA7  1E01               	btfss	1,4
 13587  0AA8  0008               	return
 13588                           
 13589                           ;Dimmer_B1.c: 470: if (clear == 1) {
 13590  0AA9  0020               	movlb	0	; select bank0
 13591  0AAA  0865               	movf	setDimmerLights_Main@clear,w
 13592  0AAB  3A01               	xorlw	1
 13593  0AAC  1D03               	skipz
 13594  0AAD  0008               	return
 13595                           
 13596                           ;Dimmer_B1.c: 471: DimmerLights->TriggerAdj = 0;
 13597  0AAE  0878               	movf	_DimmerLights,w
 13598  0AAF  3E08               	addlw	8
 13599  0AB0  0086               	movwf	6
 13600  0AB1  3001               	movlw	1	; select bank2/3
 13601  0AB2  0087               	movwf	7
 13602  0AB3  1201               	bcf	1,4
 13603                           
 13604                           ;Dimmer_B1.c: 472: if (DimmerLights->AdjGo == 1) {
 13605  0AB4  0878               	movf	_DimmerLights,w
 13606  0AB5  3E08               	addlw	8
 13607  0AB6  0086               	movwf	6
 13608  0AB7  3001               	movlw	1	; select bank2/3
 13609  0AB8  0087               	movwf	7
 13610  0AB9  1D81               	btfss	1,3
 13611  0ABA  2ACA               	goto	l9726
 13612                           
 13613                           ;Dimmer_B1.c: 473: setDimmerLights_Adj(lights, 1);
 13614  0ABB  01E2               	clrf	setDimmerLights_Adj@status
 13615  0ABC  0AE2               	incf	setDimmerLights_Adj@status,f
 13616  0ABD  0866               	movf	setDimmerLights_Main@lights,w
 13617  0ABE  3192  22D1  318A   	fcall	_setDimmerLights_Adj
 13618                           
 13619                           ;Dimmer_B1.c: 474: setBuz(1, 100);
 13620  0AC1  3064               	movlw	100
 13621  0AC2  0020               	movlb	0	; select bank0
 13622  0AC3  00A9               	movwf	setBuz@time
 13623  0AC4  3000               	movlw	0
 13624  0AC5  00AA               	movwf	setBuz@time+1
 13625  0AC6  3001               	movlw	1
 13626  0AC7  3195  25CA         	fcall	_setBuz
 13627                           
 13628                           ;Dimmer_B1.c: 475: } else {
 13629  0AC9  0008               	return
 13630  0ACA                     l9726:	
 13631                           
 13632                           ;Dimmer_B1.c: 476: setDimmerLights_Adj(lights, 0);
 13633  0ACA  0020               	movlb	0	; select bank0
 13634  0ACB  01E2               	clrf	setDimmerLights_Adj@status
 13635  0ACC  0866               	movf	setDimmerLights_Main@lights,w
 13636  0ACD  3192  22D1         	fcall	_setDimmerLights_Adj
 13637  0ACF  0008               	return
 13638  0AD0                     __end_of_setDimmerLights_Main:	
 13639                           
 13640                           	psect	text82
 13641  12D1                     __ptext82:	
 13642 ;; *************** function _setDimmerLights_Adj *****************
 13643 ;; Defined at:
 13644 ;;		line 655 in file "../src/Dimmer_B1.c"
 13645 ;; Parameters:    Size  Location     Type
 13646 ;;  lights          1    wreg     unsigned char 
 13647 ;;  status          1   66[BANK0 ] unsigned char 
 13648 ;; Auto vars:     Size  Location     Type
 13649 ;;  lights          1   68[BANK0 ] unsigned char 
 13650 ;; Return value:  Size  Location     Type
 13651 ;;		None               void
 13652 ;; Registers used:
 13653 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13654 ;; Tracked objects:
 13655 ;;		On entry : 0/0
 13656 ;;		On exit  : 0/0
 13657 ;;		Unchanged: 0/0
 13658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13659 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13660 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13661 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13662 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13663 ;;Total ram usage:        3 bytes
 13664 ;; Hardware stack levels used:    1
 13665 ;; Hardware stack levels required when called:    9
 13666 ;; This function calls:
 13667 ;;		_DimmerLightsPointSelect
 13668 ;;		_setLoad_StatusOff
 13669 ;;		_setRF_DimmerLights
 13670 ;;		_setTxData
 13671 ;; This function is called by:
 13672 ;;		_setDimmerLights_Main
 13673 ;; This function uses a non-reentrant model
 13674 ;;
 13675                           
 13676                           
 13677                           ;psect for function _setDimmerLights_Adj
 13678  12D1                     _setDimmerLights_Adj:	
 13679                           
 13680                           ;incstack = 0
 13681                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13682                           ;setDimmerLights_Adj@lights stored from wreg
 13683  12D1  0020               	movlb	0	; select bank0
 13684  12D2  00E4               	movwf	setDimmerLights_Adj@lights
 13685                           
 13686                           ;Dimmer_B1.c: 656: DimmerLightsPointSelect(lights);
 13687  12D3  0864               	movf	setDimmerLights_Adj@lights,w
 13688  12D4  319C  2408  3192   	fcall	_DimmerLightsPointSelect
 13689                           
 13690                           ;Dimmer_B1.c: 657: if (status == 1) {
 13691  12D7  0020               	movlb	0	; select bank0
 13692  12D8  0862               	movf	setDimmerLights_Adj@status,w
 13693  12D9  3A01               	xorlw	1
 13694  12DA  1D03               	skipz
 13695  12DB  2AE7               	goto	l9334
 13696                           
 13697                           ;Dimmer_B1.c: 658: DimmerLights->AdjFlag = 1;
 13698  12DC  0878               	movf	_DimmerLights,w
 13699  12DD  0086               	movwf	6
 13700  12DE  3001               	movlw	1	; select bank2/3
 13701  12DF  0087               	movwf	7
 13702  12E0  1581               	bsf	1,3
 13703                           
 13704                           ;Dimmer_B1.c: 659: DimmerLights->Signal = 1;
 13705  12E1  0878               	movf	_DimmerLights,w
 13706  12E2  0086               	movwf	6
 13707  12E3  3001               	movlw	1	; select bank2/3
 13708  12E4  0087               	movwf	7
 13709  12E5  1481               	bsf	1,1
 13710                           
 13711                           ;Dimmer_B1.c: 660: } else {
 13712  12E6  0008               	return
 13713  12E7                     l9334:	
 13714                           
 13715                           ;Dimmer_B1.c: 661: if (DimmerLights->AdjFlag == 1) {
 13716  12E7  0878               	movf	_DimmerLights,w
 13717  12E8  0086               	movwf	6
 13718  12E9  3001               	movlw	1	; select bank2/3
 13719  12EA  0087               	movwf	7
 13720  12EB  1D81               	btfss	1,3
 13721  12EC  0008               	return
 13722                           
 13723                           ;Dimmer_B1.c: 663: DimmerLights->Signal = 0;
 13724  12ED  0878               	movf	_DimmerLights,w
 13725  12EE  0086               	movwf	6
 13726  12EF  3001               	movlw	1	; select bank2/3
 13727  12F0  0087               	movwf	7
 13728  12F1  1081               	bcf	1,1
 13729                           
 13730                           ;Dimmer_B1.c: 664: DimmerLights->AdjFlag = 0;
 13731  12F2  0878               	movf	_DimmerLights,w
 13732  12F3  0086               	movwf	6
 13733  12F4  3001               	movlw	1	; select bank2/3
 13734  12F5  0087               	movwf	7
 13735  12F6  1181               	bcf	1,3
 13736                           
 13737                           ;Dimmer_B1.c: 665: setLoad_StatusOff(0, 1);
 13738  12F7  01A0               	clrf	setLoad_StatusOff@command
 13739  12F8  0AA0               	incf	setLoad_StatusOff@command,f
 13740  12F9  3000               	movlw	0
 13741  12FA  319E  2606  3192   	fcall	_setLoad_StatusOff
 13742                           
 13743                           ;Dimmer_B1.c: 666: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13744  12FD  0878               	movf	_DimmerLights,w
 13745  12FE  3E04               	addlw	4
 13746  12FF  0086               	movwf	6
 13747  1300  3001               	movlw	1	; select bank2/3
 13748  1301  0087               	movwf	7
 13749  1302  0801               	movf	1,w
 13750  1303  0020               	movlb	0	; select bank0
 13751  1304  00E3               	movwf	??_setDimmerLights_Adj
 13752  1305  0878               	movf	_DimmerLights,w
 13753  1306  3E05               	addlw	5
 13754  1307  0086               	movwf	6
 13755  1308  3001               	movlw	1	; select bank2/3
 13756  1309  0087               	movwf	7
 13757  130A  0863               	movf	??_setDimmerLights_Adj,w
 13758  130B  0081               	movwf	1
 13759                           
 13760                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, 1);
 13761  130C  01DD               	clrf	setRF_DimmerLights@on
 13762  130D  0ADD               	incf	setRF_DimmerLights@on,f
 13763  130E  0864               	movf	setDimmerLights_Adj@lights,w
 13764  130F  3189  2110  3192   	fcall	_setRF_DimmerLights
 13765                           
 13766                           ;Dimmer_B1.c: 675: setTxData();
 13767  1312  318F  2741         	fcall	_setTxData
 13768  1314  0008               	return
 13769  1315                     __end_of_setDimmerLights_Adj:	
 13770                           
 13771                           	psect	text83
 13772  1E06                     __ptext83:	
 13773 ;; *************** function _setLoad_StatusOff *****************
 13774 ;; Defined at:
 13775 ;;		line 282 in file "../src/OverLoad_B1.c"
 13776 ;; Parameters:    Size  Location     Type
 13777 ;;  lights          1    wreg     unsigned char 
 13778 ;;  command         1    0[BANK0 ] unsigned char 
 13779 ;; Auto vars:     Size  Location     Type
 13780 ;;  lights          1    1[BANK0 ] unsigned char 
 13781 ;; Return value:  Size  Location     Type
 13782 ;;		None               void
 13783 ;; Registers used:
 13784 ;;		wreg, status,2, status,0
 13785 ;; Tracked objects:
 13786 ;;		On entry : 0/0
 13787 ;;		On exit  : 0/0
 13788 ;;		Unchanged: 0/0
 13789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13790 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13794 ;;Total ram usage:        2 bytes
 13795 ;; Hardware stack levels used:    1
 13796 ;; Hardware stack levels required when called:    5
 13797 ;; This function calls:
 13798 ;;		Nothing
 13799 ;; This function is called by:
 13800 ;;		_setDimmerLights_ERROR
 13801 ;;		_setDimmerLights_Adj
 13802 ;; This function uses a non-reentrant model
 13803 ;;
 13804                           
 13805                           
 13806                           ;psect for function _setLoad_StatusOff
 13807  1E06                     _setLoad_StatusOff:	
 13808                           
 13809                           ;incstack = 0
 13810                           ; Regs used in _setLoad_StatusOff: [wreg+status,2+status,0]
 13811                           ;setLoad_StatusOff@lights stored from wreg
 13812  1E06  0020               	movlb	0	; select bank0
 13813  1E07  00A1               	movwf	setLoad_StatusOff@lights
 13814                           
 13815                           ;OverLoad_B1.c: 283: Load1.StatusOff = command;
 13816  1E08  0820               	movf	setLoad_StatusOff@command,w
 13817  1E09  0023               	movlb	3	; select bank3
 13818  1E0A  13A0               	bcf	_Load1^(0+384),7
 13819  1E0B  1D03               	skipz
 13820  1E0C  17A0               	bsf	_Load1^(0+384),7
 13821                           
 13822                           ;OverLoad_B1.c: 284: Load1.SafeCount -= 2;
 13823  1E0D  3002               	movlw	2
 13824  1E0E  02E2               	subwf	(_Load1^(0+384)+66),f
 13825                           
 13826                           ;OverLoad_B1.c: 285: if (lights == 1) {
 13827  1E0F  0020               	movlb	0	; select bank0
 13828  1E10  0821               	movf	setLoad_StatusOff@lights,w
 13829  1E11  3A01               	xorlw	1
 13830  1E12  1D03               	skipz
 13831  1E13  2E16               	goto	l8788
 13832                           
 13833                           ;OverLoad_B1.c: 286: Load1.Lights1Status = 0;
 13834  1E14  0023               	movlb	3	; select bank3
 13835  1E15  01E3               	clrf	(_Load1^(0+384)+67)
 13836  1E16                     l8788:	
 13837                           
 13838                           ;OverLoad_B1.c: 287: }
 13839                           ;OverLoad_B1.c: 288: if (lights == 2) {
 13840  1E16  0020               	movlb	0	; select bank0
 13841  1E17  0821               	movf	setLoad_StatusOff@lights,w
 13842  1E18  3A02               	xorlw	2
 13843  1E19  1D03               	skipz
 13844  1E1A  2E1D               	goto	l8792
 13845                           
 13846                           ;OverLoad_B1.c: 289: Load1.Lights2Status = 0;
 13847  1E1B  0023               	movlb	3	; select bank3
 13848  1E1C  01E4               	clrf	(_Load1^(0+384)+68)
 13849  1E1D                     l8792:	
 13850                           
 13851                           ;OverLoad_B1.c: 290: }
 13852                           ;OverLoad_B1.c: 291: if (lights == 3) {
 13853  1E1D  0020               	movlb	0	; select bank0
 13854  1E1E  0821               	movf	setLoad_StatusOff@lights,w
 13855  1E1F  3A03               	xorlw	3
 13856  1E20  1D03               	skipz
 13857  1E21  0008               	return
 13858                           
 13859                           ;OverLoad_B1.c: 292: Load1.Lights3Status = 0;
 13860  1E22  0023               	movlb	3	; select bank3
 13861  1E23  01E5               	clrf	(_Load1^(0+384)+69)
 13862  1E24  0008               	return
 13863  1E25                     __end_of_setLoad_StatusOff:	
 13864                           
 13865                           	psect	text84
 13866  0CCC                     __ptext84:	
 13867 ;; *************** function _setDimmerLights *****************
 13868 ;; Defined at:
 13869 ;;		line 602 in file "../src/Dimmer_B1.c"
 13870 ;; Parameters:    Size  Location     Type
 13871 ;;  lights          1    wreg     unsigned char 
 13872 ;;  status          1    4[BANK0 ] unsigned char 
 13873 ;; Auto vars:     Size  Location     Type
 13874 ;;  lights          1    6[BANK0 ] unsigned char 
 13875 ;; Return value:  Size  Location     Type
 13876 ;;		None               void
 13877 ;; Registers used:
 13878 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13879 ;; Tracked objects:
 13880 ;;		On entry : 0/0
 13881 ;;		On exit  : 0/0
 13882 ;;		Unchanged: 0/0
 13883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13884 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;Total ram usage:        3 bytes
 13889 ;; Hardware stack levels used:    1
 13890 ;; Hardware stack levels required when called:    7
 13891 ;; This function calls:
 13892 ;;		_DimmerLightsPointSelect
 13893 ;;		_setLED
 13894 ;;		_setLoad_Count
 13895 ;;		_setLoad_StatusOn
 13896 ;;		_setMemory_GO
 13897 ;; This function is called by:
 13898 ;;		_setDimmerLights_Main
 13899 ;;		_setControl_Lights_Table
 13900 ;; This function uses a non-reentrant model
 13901 ;;
 13902                           
 13903                           
 13904                           ;psect for function _setDimmerLights
 13905  0CCC                     _setDimmerLights:	
 13906                           
 13907                           ;incstack = 0
 13908                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13909                           ;setDimmerLights@lights stored from wreg
 13910  0CCC  0020               	movlb	0	; select bank0
 13911  0CCD  00A6               	movwf	setDimmerLights@lights
 13912                           
 13913                           ;Dimmer_B1.c: 603: DimmerLightsPointSelect(lights);
 13914  0CCE  0826               	movf	setDimmerLights@lights,w
 13915  0CCF  319C  2408  318C   	fcall	_DimmerLightsPointSelect
 13916                           
 13917                           ;Dimmer_B1.c: 604: Dimmer->Load = lights;
 13918  0CD2  0020               	movlb	0	; select bank0
 13919  0CD3  0826               	movf	setDimmerLights@lights,w
 13920  0CD4  00A5               	movwf	??_setDimmerLights
 13921  0CD5  0A77               	incf	_Dimmer,w
 13922  0CD6  0086               	movwf	6
 13923  0CD7  0187               	clrf	7
 13924  0CD8  0825               	movf	??_setDimmerLights,w
 13925  0CD9  0081               	movwf	1
 13926                           
 13927                           ;Dimmer_B1.c: 605: if (status == 1) {
 13928  0CDA  0824               	movf	setDimmerLights@status,w
 13929  0CDB  3A01               	xorlw	1
 13930  0CDC  1D03               	skipz
 13931  0CDD  2D28               	goto	l8966
 13932                           
 13933                           ;Dimmer_B1.c: 606: DimmerLights->Status = 1;
 13934  0CDE  0878               	movf	_DimmerLights,w
 13935  0CDF  0086               	movwf	6
 13936  0CE0  3001               	movlw	1	; select bank2/3
 13937  0CE1  0087               	movwf	7
 13938  0CE2  1681               	bsf	1,5
 13939                           
 13940                           ;Dimmer_B1.c: 607: setLED(lights, 0);
 13941  0CE3  01A2               	clrf	setLED@command
 13942  0CE4  0826               	movf	setDimmerLights@lights,w
 13943  0CE5  3196  267E  318C   	fcall	_setLED
 13944                           
 13945                           ;Dimmer_B1.c: 609: setLoad_Count(0);
 13946  0CE8  3000               	movlw	0
 13947  0CE9  319A  22E6  318C   	fcall	_setLoad_Count
 13948                           
 13949                           ;Dimmer_B1.c: 611: DimmerLights->Signal = 1;
 13950  0CEC  0878               	movf	_DimmerLights,w
 13951  0CED  0086               	movwf	6
 13952  0CEE  3001               	movlw	1	; select bank2/3
 13953  0CEF  0087               	movwf	7
 13954  0CF0  1481               	bsf	1,1
 13955                           
 13956                           ;Dimmer_B1.c: 612: DimmerLights->DimmingTimeValue = 7;
 13957  0CF1  3007               	movlw	7
 13958  0CF2  0020               	movlb	0	; select bank0
 13959  0CF3  00A5               	movwf	??_setDimmerLights
 13960  0CF4  0878               	movf	_DimmerLights,w
 13961  0CF5  3E02               	addlw	2
 13962  0CF6  0086               	movwf	6
 13963  0CF7  3001               	movlw	1	; select bank2/3
 13964  0CF8  0087               	movwf	7
 13965  0CF9  0825               	movf	??_setDimmerLights,w
 13966  0CFA  0081               	movwf	1
 13967                           
 13968                           ;Dimmer_B1.c: 614: if (DimmerLights->StatusFlag == 0) {
 13969  0CFB  0878               	movf	_DimmerLights,w
 13970  0CFC  0086               	movwf	6
 13971  0CFD  3001               	movlw	1	; select bank2/3
 13972  0CFE  0087               	movwf	7
 13973  0CFF  1B01               	btfsc	1,6
 13974  0D00  0008               	return
 13975                           
 13976                           ;Dimmer_B1.c: 615: DimmerLights->StatusFlag = 1;
 13977  0D01  0878               	movf	_DimmerLights,w
 13978  0D02  0086               	movwf	6
 13979  0D03  3001               	movlw	1	; select bank2/3
 13980  0D04  0087               	movwf	7
 13981  0D05  1701               	bsf	1,6
 13982                           
 13983                           ;Dimmer_B1.c: 616: setLoad_StatusOn(lights, 1);
 13984  0D06  01A0               	clrf	setLoad_StatusOn@command
 13985  0D07  0AA0               	incf	setLoad_StatusOn@command,f
 13986  0D08  0826               	movf	setDimmerLights@lights,w
 13987  0D09  319E  26C9  318C   	fcall	_setLoad_StatusOn
 13988                           
 13989                           ;Dimmer_B1.c: 617: setMemory_GO(0);
 13990  0D0C  3000               	movlw	0
 13991  0D0D  319C  24AD         	fcall	_setMemory_GO
 13992                           
 13993                           ;Dimmer_B1.c: 620: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13994  0D0F  0878               	movf	_DimmerLights,w
 13995  0D10  3E05               	addlw	5
 13996  0D11  0086               	movwf	6
 13997  0D12  3001               	movlw	1	; select bank2/3
 13998  0D13  0087               	movwf	7
 13999  0D14  0801               	movf	1,w
 14000  0D15  0020               	movlb	0	; select bank0
 14001  0D16  00A5               	movwf	??_setDimmerLights
 14002  0D17  0878               	movf	_DimmerLights,w
 14003  0D18  3E04               	addlw	4
 14004  0D19  0086               	movwf	6
 14005  0D1A  3001               	movlw	1	; select bank2/3
 14006  0D1B  0087               	movwf	7
 14007  0D1C  0825               	movf	??_setDimmerLights,w
 14008  0D1D  0081               	movwf	1
 14009                           
 14010                           ;Dimmer_B1.c: 624: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 14011  0D1E  3020               	movlw	32
 14012  0D1F  00A5               	movwf	??_setDimmerLights
 14013  0D20  0878               	movf	_DimmerLights,w
 14014  0D21  3E04               	addlw	4
 14015  0D22  0086               	movwf	6
 14016  0D23  3001               	movlw	1	; select bank2/3
 14017  0D24  0087               	movwf	7
 14018  0D25  0825               	movf	??_setDimmerLights,w
 14019  0D26  0081               	movwf	1
 14020                           
 14021                           ;Dimmer_B1.c: 626: }
 14022                           ;Dimmer_B1.c: 627: } else {
 14023  0D27  0008               	return
 14024  0D28                     l8966:	
 14025                           
 14026                           ;Dimmer_B1.c: 628: DimmerLights->Status = 0;
 14027  0D28  0878               	movf	_DimmerLights,w
 14028  0D29  0086               	movwf	6
 14029  0D2A  3001               	movlw	1	; select bank2/3
 14030  0D2B  0087               	movwf	7
 14031  0D2C  1281               	bcf	1,5
 14032                           
 14033                           ;Dimmer_B1.c: 630: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14034  0D2D  0878               	movf	_DimmerLights,w
 14035  0D2E  3E06               	addlw	6
 14036  0D2F  0086               	movwf	6
 14037  0D30  3001               	movlw	1	; select bank2/3
 14038  0D31  0087               	movwf	7
 14039  0D32  0801               	movf	1,w
 14040  0D33  00A5               	movwf	??_setDimmerLights
 14041  0D34  0878               	movf	_DimmerLights,w
 14042  0D35  3E04               	addlw	4
 14043  0D36  0086               	movwf	6
 14044  0D37  3001               	movlw	1	; select bank2/3
 14045  0D38  0087               	movwf	7
 14046  0D39  0825               	movf	??_setDimmerLights,w
 14047  0D3A  0081               	movwf	1
 14048                           
 14049                           ;Dimmer_B1.c: 637: DimmerLights->Signal = 1;
 14050  0D3B  0878               	movf	_DimmerLights,w
 14051  0D3C  0086               	movwf	6
 14052  0D3D  3001               	movlw	1	; select bank2/3
 14053  0D3E  0087               	movwf	7
 14054  0D3F  1481               	bsf	1,1
 14055                           
 14056                           ;Dimmer_B1.c: 638: DimmerLights->AdjFlag = 0;
 14057  0D40  0878               	movf	_DimmerLights,w
 14058  0D41  0086               	movwf	6
 14059  0D42  3001               	movlw	1	; select bank2/3
 14060  0D43  0087               	movwf	7
 14061  0D44  1181               	bcf	1,3
 14062                           
 14063                           ;Dimmer_B1.c: 639: DimmerLights->AdjStatus = 0;
 14064  0D45  0878               	movf	_DimmerLights,w
 14065  0D46  0086               	movwf	6
 14066  0D47  3001               	movlw	1	; select bank2/3
 14067  0D48  0087               	movwf	7
 14068  0D49  1201               	bcf	1,4
 14069                           
 14070                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 14071  0D4A  3007               	movlw	7
 14072  0D4B  00A5               	movwf	??_setDimmerLights
 14073  0D4C  0878               	movf	_DimmerLights,w
 14074  0D4D  3E02               	addlw	2
 14075  0D4E  0086               	movwf	6
 14076  0D4F  3001               	movlw	1	; select bank2/3
 14077  0D50  0087               	movwf	7
 14078  0D51  0825               	movf	??_setDimmerLights,w
 14079  0D52  0081               	movwf	1
 14080  0D53  0008               	return
 14081  0D54                     __end_of_setDimmerLights:	
 14082                           
 14083                           	psect	text85
 14084  1EC9                     __ptext85:	
 14085 ;; *************** function _setLoad_StatusOn *****************
 14086 ;; Defined at:
 14087 ;;		line 267 in file "../src/OverLoad_B1.c"
 14088 ;; Parameters:    Size  Location     Type
 14089 ;;  lights          1    wreg     unsigned char 
 14090 ;;  command         1    0[BANK0 ] unsigned char 
 14091 ;; Auto vars:     Size  Location     Type
 14092 ;;  lights          1    1[BANK0 ] unsigned char 
 14093 ;; Return value:  Size  Location     Type
 14094 ;;		None               void
 14095 ;; Registers used:
 14096 ;;		wreg
 14097 ;; Tracked objects:
 14098 ;;		On entry : 0/0
 14099 ;;		On exit  : 0/0
 14100 ;;		Unchanged: 0/0
 14101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14102 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14105 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14106 ;;Total ram usage:        2 bytes
 14107 ;; Hardware stack levels used:    1
 14108 ;; Hardware stack levels required when called:    5
 14109 ;; This function calls:
 14110 ;;		Nothing
 14111 ;; This function is called by:
 14112 ;;		_setDimmerLights
 14113 ;; This function uses a non-reentrant model
 14114 ;;
 14115                           
 14116                           
 14117                           ;psect for function _setLoad_StatusOn
 14118  1EC9                     _setLoad_StatusOn:	
 14119                           
 14120                           ;incstack = 0
 14121                           ; Regs used in _setLoad_StatusOn: [wreg]
 14122                           ;setLoad_StatusOn@lights stored from wreg
 14123  1EC9  0020               	movlb	0	; select bank0
 14124  1ECA  00A1               	movwf	setLoad_StatusOn@lights
 14125                           
 14126                           ;OverLoad_B1.c: 268: Load1.GO = 1;
 14127  1ECB  0023               	movlb	3	; select bank3
 14128  1ECC  14A0               	bsf	_Load1^(0+384),1
 14129                           
 14130                           ;OverLoad_B1.c: 269: Load1.StatusOn = command;
 14131  1ECD  0020               	movlb	0	; select bank0
 14132  1ECE  0820               	movf	setLoad_StatusOn@command,w
 14133  1ECF  0023               	movlb	3	; select bank3
 14134  1ED0  1320               	bcf	_Load1^(0+384),6
 14135  1ED1  1D03               	skipz
 14136  1ED2  1720               	bsf	_Load1^(0+384),6
 14137                           
 14138                           ;OverLoad_B1.c: 271: if (lights == 1) {
 14139  1ED3  0020               	movlb	0	; select bank0
 14140  1ED4  0821               	movf	setLoad_StatusOn@lights,w
 14141  1ED5  3A01               	xorlw	1
 14142  1ED6  1D03               	skipz
 14143  1ED7  2EDB               	goto	l8860
 14144                           
 14145                           ;OverLoad_B1.c: 272: Load1.Lights1Status = 1;
 14146  1ED8  0023               	movlb	3	; select bank3
 14147  1ED9  01E3               	clrf	(_Load1^(0+384)+67)
 14148  1EDA  0AE3               	incf	(_Load1^(0+384)+67),f
 14149  1EDB                     l8860:	
 14150                           
 14151                           ;OverLoad_B1.c: 273: }
 14152                           ;OverLoad_B1.c: 274: if (lights == 2) {
 14153  1EDB  0020               	movlb	0	; select bank0
 14154  1EDC  0821               	movf	setLoad_StatusOn@lights,w
 14155  1EDD  3A02               	xorlw	2
 14156  1EDE  1D03               	skipz
 14157  1EDF  2EE3               	goto	l8864
 14158                           
 14159                           ;OverLoad_B1.c: 275: Load1.Lights2Status = 1;
 14160  1EE0  0023               	movlb	3	; select bank3
 14161  1EE1  01E4               	clrf	(_Load1^(0+384)+68)
 14162  1EE2  0AE4               	incf	(_Load1^(0+384)+68),f
 14163  1EE3                     l8864:	
 14164                           
 14165                           ;OverLoad_B1.c: 276: }
 14166                           ;OverLoad_B1.c: 277: if (lights == 3) {
 14167  1EE3  0020               	movlb	0	; select bank0
 14168  1EE4  0821               	movf	setLoad_StatusOn@lights,w
 14169  1EE5  3A03               	xorlw	3
 14170  1EE6  1D03               	skipz
 14171  1EE7  0008               	return
 14172                           
 14173                           ;OverLoad_B1.c: 278: Load1.Lights3Status = 1;
 14174  1EE8  0023               	movlb	3	; select bank3
 14175  1EE9  01E5               	clrf	(_Load1^(0+384)+69)
 14176  1EEA  0AE5               	incf	(_Load1^(0+384)+69),f
 14177  1EEB  0008               	return
 14178  1EEC                     __end_of_setLoad_StatusOn:	
 14179                           
 14180                           	psect	text86
 14181  1AE6                     __ptext86:	
 14182 ;; *************** function _setLoad_Count *****************
 14183 ;; Defined at:
 14184 ;;		line 252 in file "../src/OverLoad_B1.c"
 14185 ;; Parameters:    Size  Location     Type
 14186 ;;  command         1    wreg     unsigned char 
 14187 ;; Auto vars:     Size  Location     Type
 14188 ;;  command         1    1[BANK0 ] unsigned char 
 14189 ;; Return value:  Size  Location     Type
 14190 ;;		None               void
 14191 ;; Registers used:
 14192 ;;		wreg
 14193 ;; Tracked objects:
 14194 ;;		On entry : 0/0
 14195 ;;		On exit  : 0/0
 14196 ;;		Unchanged: 0/0
 14197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14201 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14202 ;;Total ram usage:        2 bytes
 14203 ;; Hardware stack levels used:    1
 14204 ;; Hardware stack levels required when called:    5
 14205 ;; This function calls:
 14206 ;;		Nothing
 14207 ;; This function is called by:
 14208 ;;		_setDimmerLights
 14209 ;; This function uses a non-reentrant model
 14210 ;;
 14211                           
 14212                           
 14213                           ;psect for function _setLoad_Count
 14214  1AE6                     _setLoad_Count:	
 14215                           
 14216                           ;incstack = 0
 14217                           ; Regs used in _setLoad_Count: [wreg]
 14218                           ;setLoad_Count@command stored from wreg
 14219  1AE6  0020               	movlb	0	; select bank0
 14220  1AE7  00A1               	movwf	setLoad_Count@command
 14221                           
 14222                           ;OverLoad_B1.c: 253: Load1.Count = command;
 14223  1AE8  0821               	movf	setLoad_Count@command,w
 14224  1AE9  00A0               	movwf	??_setLoad_Count
 14225  1AEA  0820               	movf	??_setLoad_Count,w
 14226  1AEB  0023               	movlb	3	; select bank3
 14227  1AEC  00DA               	movwf	(_Load1^(0+384)+58)
 14228                           
 14229                           ;OverLoad_B1.c: 254: Load1.SafeCount = command;
 14230  1AED  0020               	movlb	0	; select bank0
 14231  1AEE  0821               	movf	setLoad_Count@command,w
 14232  1AEF  00A0               	movwf	??_setLoad_Count
 14233  1AF0  0820               	movf	??_setLoad_Count,w
 14234  1AF1  0023               	movlb	3	; select bank3
 14235  1AF2  00E2               	movwf	(_Load1^(0+384)+66)
 14236  1AF3  0008               	return
 14237  1AF4                     __end_of_setLoad_Count:	
 14238                           
 14239                           	psect	text87
 14240  167E                     __ptext87:	
 14241 ;; *************** function _setLED *****************
 14242 ;; Defined at:
 14243 ;;		line 70 in file "../src/LED_B1.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;  led             1    wreg     unsigned char 
 14246 ;;  command         1    2[BANK0 ] unsigned char 
 14247 ;; Auto vars:     Size  Location     Type
 14248 ;;  led             1    3[BANK0 ] unsigned char 
 14249 ;; Return value:  Size  Location     Type
 14250 ;;		None               void
 14251 ;; Registers used:
 14252 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14253 ;; Tracked objects:
 14254 ;;		On entry : 0/0
 14255 ;;		On exit  : 0/0
 14256 ;;		Unchanged: 0/0
 14257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14258 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14261 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14262 ;;Total ram usage:        2 bytes
 14263 ;; Hardware stack levels used:    1
 14264 ;; Hardware stack levels required when called:    6
 14265 ;; This function calls:
 14266 ;;		_LedPointSelect
 14267 ;; This function is called by:
 14268 ;;		_setDimmerLights_ERROR
 14269 ;;		_setDimmerLights
 14270 ;;		_setLED_Initialization
 14271 ;;		_setLoad_Exceptions
 14272 ;;		_setOverTemp_Exceptions
 14273 ;;		_setSw_Initialization
 14274 ;; This function uses a non-reentrant model
 14275 ;;
 14276                           
 14277                           
 14278                           ;psect for function _setLED
 14279  167E                     _setLED:	
 14280                           
 14281                           ;incstack = 0
 14282                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14283                           ;setLED@led stored from wreg
 14284  167E  0020               	movlb	0	; select bank0
 14285  167F  00A3               	movwf	setLED@led
 14286                           
 14287                           ;LED_B1.c: 71: LedPointSelect(led);
 14288  1680  0823               	movf	setLED@led,w
 14289  1681  319D  258F  3196   	fcall	_LedPointSelect
 14290                           
 14291                           ;LED_B1.c: 72: if (command == 0) {
 14292  1684  0020               	movlb	0	; select bank0
 14293  1685  08A2               	movf	setLED@command,f
 14294  1686  1D03               	skipz
 14295  1687  2E9A               	goto	l8818
 14296                           
 14297                           ;LED_B1.c: 74: if (led == 1) {
 14298  1688  0823               	movf	setLED@led,w
 14299  1689  3A01               	xorlw	1
 14300  168A  1D03               	skipz
 14301  168B  2E8E               	goto	l8810
 14302                           
 14303                           ;LED_B1.c: 78: RA3 = 1;
 14304  168C  158C               	bsf	12,3	;volatile
 14305                           
 14306                           ;LED_B1.c: 80: }
 14307  168D  0008               	return
 14308  168E                     l8810:	
 14309                           
 14310                           ;LED_B1.c: 83: else if (led == 2) {
 14311  168E  0823               	movf	setLED@led,w
 14312  168F  3A02               	xorlw	2
 14313  1690  1D03               	skipz
 14314  1691  2E94               	goto	l8814
 14315                           
 14316                           ;LED_B1.c: 87: RC7 = 1;
 14317  1692  178E               	bsf	14,7	;volatile
 14318                           
 14319                           ;LED_B1.c: 89: }
 14320  1693  0008               	return
 14321  1694                     l8814:	
 14322                           
 14323                           ;LED_B1.c: 101: else if (led == 99) {
 14324  1694  0823               	movf	setLED@led,w
 14325  1695  3A63               	xorlw	99
 14326  1696  1D03               	skipz
 14327  1697  0008               	return
 14328                           
 14329                           ;LED_B1.c: 105: RB5 = 1;
 14330  1698  168D               	bsf	13,5	;volatile
 14331                           
 14332                           ;LED_B1.c: 107: }
 14333                           ;LED_B1.c: 109: } else if (command == 1) {
 14334  1699  0008               	return
 14335  169A                     l8818:	
 14336  169A  0822               	movf	setLED@command,w
 14337  169B  3A01               	xorlw	1
 14338  169C  1D03               	skipz
 14339  169D  2EB0               	goto	l8832
 14340                           
 14341                           ;LED_B1.c: 111: if (led == 1) {
 14342  169E  0823               	movf	setLED@led,w
 14343  169F  3A01               	xorlw	1
 14344  16A0  1D03               	skipz
 14345  16A1  2EA4               	goto	l8824
 14346                           
 14347                           ;LED_B1.c: 115: RA3 = 0;
 14348  16A2  118C               	bcf	12,3	;volatile
 14349                           
 14350                           ;LED_B1.c: 117: }
 14351  16A3  0008               	return
 14352  16A4                     l8824:	
 14353                           
 14354                           ;LED_B1.c: 120: else if (led == 2) {
 14355  16A4  0823               	movf	setLED@led,w
 14356  16A5  3A02               	xorlw	2
 14357  16A6  1D03               	skipz
 14358  16A7  2EAA               	goto	l8828
 14359                           
 14360                           ;LED_B1.c: 124: RC7 = 0;
 14361  16A8  138E               	bcf	14,7	;volatile
 14362                           
 14363                           ;LED_B1.c: 126: }
 14364  16A9  0008               	return
 14365  16AA                     l8828:	
 14366                           
 14367                           ;LED_B1.c: 138: else if (led == 99) {
 14368  16AA  0823               	movf	setLED@led,w
 14369  16AB  3A63               	xorlw	99
 14370  16AC  1D03               	skipz
 14371  16AD  0008               	return
 14372                           
 14373                           ;LED_B1.c: 142: RB5 = 0;
 14374  16AE  128D               	bcf	13,5	;volatile
 14375                           
 14376                           ;LED_B1.c: 144: }
 14377                           ;LED_B1.c: 146: } else if (command == 10) {
 14378  16AF  0008               	return
 14379  16B0                     l8832:	
 14380  16B0  0822               	movf	setLED@command,w
 14381  16B1  3A0A               	xorlw	10
 14382  16B2  1D03               	skipz
 14383  16B3  2ED2               	goto	l8848
 14384                           
 14385                           ;LED_B1.c: 147: LED->GO = 0;
 14386  16B4  087A               	movf	_LED,w
 14387  16B5  0086               	movwf	6
 14388  16B6  3001               	movlw	1	; select bank2/3
 14389  16B7  0087               	movwf	7
 14390  16B8  1081               	bcf	1,1
 14391                           
 14392                           ;LED_B1.c: 148: LED->Time = 0;
 14393  16B9  0A7A               	incf	_LED,w
 14394  16BA  0086               	movwf	6
 14395  16BB  3001               	movlw	1	; select bank2/3
 14396  16BC  0087               	movwf	7
 14397  16BD  3000               	movlw	0
 14398  16BE  3FC0               	movwi [0]fsr1
 14399  16BF  3FC1               	movwi [1]fsr1
 14400                           
 14401                           ;LED_B1.c: 150: if (led == 1) {
 14402  16C0  0823               	movf	setLED@led,w
 14403  16C1  3A01               	xorlw	1
 14404  16C2  1D03               	skipz
 14405  16C3  2EC6               	goto	l8840
 14406                           
 14407                           ;LED_B1.c: 154: RA3 = 1;
 14408  16C4  158C               	bsf	12,3	;volatile
 14409                           
 14410                           ;LED_B1.c: 156: }
 14411  16C5  0008               	return
 14412  16C6                     l8840:	
 14413                           
 14414                           ;LED_B1.c: 159: else if (led == 2) {
 14415  16C6  0823               	movf	setLED@led,w
 14416  16C7  3A02               	xorlw	2
 14417  16C8  1D03               	skipz
 14418  16C9  2ECC               	goto	l8844
 14419                           
 14420                           ;LED_B1.c: 163: RC7 = 1;
 14421  16CA  178E               	bsf	14,7	;volatile
 14422                           
 14423                           ;LED_B1.c: 165: }
 14424  16CB  0008               	return
 14425  16CC                     l8844:	
 14426                           
 14427                           ;LED_B1.c: 177: else if (led == 99) {
 14428  16CC  0823               	movf	setLED@led,w
 14429  16CD  3A63               	xorlw	99
 14430  16CE  1D03               	skipz
 14431  16CF  0008               	return
 14432                           
 14433                           ;LED_B1.c: 181: RB5 = 1;
 14434  16D0  168D               	bsf	13,5	;volatile
 14435                           
 14436                           ;LED_B1.c: 183: }
 14437                           ;LED_B1.c: 185: } else if (command == 11) {
 14438  16D1  0008               	return
 14439  16D2                     l8848:	
 14440  16D2  0822               	movf	setLED@command,w
 14441  16D3  3A0B               	xorlw	11
 14442  16D4  1D03               	skipz
 14443  16D5  0008               	return
 14444                           
 14445                           ;LED_B1.c: 186: LED->GO = 1;
 14446  16D6  087A               	movf	_LED,w
 14447  16D7  0086               	movwf	6
 14448  16D8  3001               	movlw	1	; select bank2/3
 14449  16D9  0087               	movwf	7
 14450  16DA  1481               	bsf	1,1
 14451  16DB  0008               	return
 14452  16DC                     __end_of_setLED:	
 14453                           
 14454                           	psect	text88
 14455  1D8F                     __ptext88:	
 14456 ;; *************** function _LedPointSelect *****************
 14457 ;; Defined at:
 14458 ;;		line 7 in file "../src/LED_B1.c"
 14459 ;; Parameters:    Size  Location     Type
 14460 ;;  led             1    wreg     unsigned char 
 14461 ;; Auto vars:     Size  Location     Type
 14462 ;;  led             1    1[BANK0 ] unsigned char 
 14463 ;; Return value:  Size  Location     Type
 14464 ;;		None               void
 14465 ;; Registers used:
 14466 ;;		wreg
 14467 ;; Tracked objects:
 14468 ;;		On entry : 0/0
 14469 ;;		On exit  : 0/0
 14470 ;;		Unchanged: 0/0
 14471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14475 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14476 ;;Total ram usage:        2 bytes
 14477 ;; Hardware stack levels used:    1
 14478 ;; Hardware stack levels required when called:    5
 14479 ;; This function calls:
 14480 ;;		Nothing
 14481 ;; This function is called by:
 14482 ;;		_setLED_Initialization
 14483 ;;		_setLED
 14484 ;;		_setLED_Main
 14485 ;; This function uses a non-reentrant model
 14486 ;;
 14487                           
 14488                           
 14489                           ;psect for function _LedPointSelect
 14490  1D8F                     _LedPointSelect:	
 14491                           
 14492                           ;incstack = 0
 14493                           ; Regs used in _LedPointSelect: [wreg]
 14494                           ;LedPointSelect@led stored from wreg
 14495  1D8F  0020               	movlb	0	; select bank0
 14496  1D90  00A1               	movwf	LedPointSelect@led
 14497                           
 14498                           ;LED_B1.c: 9: if (led == 1) {
 14499  1D91  0821               	movf	LedPointSelect@led,w
 14500  1D92  3A01               	xorlw	1
 14501  1D93  1D03               	skipz
 14502  1D94  2D9A               	goto	l8582
 14503                           
 14504                           ;LED_B1.c: 10: LED = &VarLED1;
 14505  1D95  3068               	movlw	_VarLED1& (0+255)
 14506  1D96  00A0               	movwf	??_LedPointSelect
 14507  1D97  0820               	movf	??_LedPointSelect,w
 14508  1D98  00FA               	movwf	_LED
 14509                           
 14510                           ;LED_B1.c: 11: }
 14511  1D99  0008               	return
 14512  1D9A                     l8582:	
 14513                           
 14514                           ;LED_B1.c: 14: else if (led == 2) {
 14515  1D9A  0821               	movf	LedPointSelect@led,w
 14516  1D9B  3A02               	xorlw	2
 14517  1D9C  1D03               	skipz
 14518  1D9D  2DA3               	goto	l8586
 14519                           
 14520                           ;LED_B1.c: 15: LED = &VarLED2;
 14521  1D9E  306C               	movlw	_VarLED2& (0+255)
 14522  1D9F  00A0               	movwf	??_LedPointSelect
 14523  1DA0  0820               	movf	??_LedPointSelect,w
 14524  1DA1  00FA               	movwf	_LED
 14525                           
 14526                           ;LED_B1.c: 16: }
 14527  1DA2  0008               	return
 14528  1DA3                     l8586:	
 14529                           
 14530                           ;LED_B1.c: 24: else if (led == 99) {
 14531  1DA3  0821               	movf	LedPointSelect@led,w
 14532  1DA4  3A63               	xorlw	99
 14533  1DA5  1D03               	skipz
 14534  1DA6  0008               	return
 14535                           
 14536                           ;LED_B1.c: 25: LED = &VarErrLED;
 14537  1DA7  3064               	movlw	_VarErrLED& (0+255)
 14538  1DA8  00A0               	movwf	??_LedPointSelect
 14539  1DA9  0820               	movf	??_LedPointSelect,w
 14540  1DAA  00FA               	movwf	_LED
 14541  1DAB  0008               	return
 14542  1DAC                     __end_of_LedPointSelect:	
 14543                           
 14544                           	psect	text89
 14545  1CDA                     __ptext89:	
 14546 ;; *************** function _DimmerLights_Close *****************
 14547 ;; Defined at:
 14548 ;;		line 405 in file "../src/Dimmer_B1.c"
 14549 ;; Parameters:    Size  Location     Type
 14550 ;;		None
 14551 ;; Auto vars:     Size  Location     Type
 14552 ;;		None
 14553 ;; Return value:  Size  Location     Type
 14554 ;;		None               void
 14555 ;; Registers used:
 14556 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14557 ;; Tracked objects:
 14558 ;;		On entry : 0/0
 14559 ;;		On exit  : 0/0
 14560 ;;		Unchanged: 0/0
 14561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14566 ;;Total ram usage:        0 bytes
 14567 ;; Hardware stack levels used:    1
 14568 ;; Hardware stack levels required when called:    6
 14569 ;; This function calls:
 14570 ;;		_getDimmerLights_StatusFlag
 14571 ;;		_setLoad_GO
 14572 ;;		_setMemory_GO
 14573 ;; This function is called by:
 14574 ;;		_DimmerLights_Main
 14575 ;; This function uses a non-reentrant model
 14576 ;;
 14577                           
 14578                           
 14579                           ;psect for function _DimmerLights_Close
 14580  1CDA                     _DimmerLights_Close:	
 14581                           
 14582                           ;Dimmer_B1.c: 406: if (Dimmer->Detect == 1) {
 14583                           
 14584                           ;incstack = 0
 14585                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14586  1CDA  0877               	movf	_Dimmer,w
 14587  1CDB  0086               	movwf	6
 14588  1CDC  0187               	clrf	7
 14589  1CDD  1C01               	btfss	1,0
 14590  1CDE  0008               	return
 14591                           
 14592                           ;Dimmer_B1.c: 407: Dimmer->Detect = 0;
 14593  1CDF  0877               	movf	_Dimmer,w
 14594  1CE0  0086               	movwf	6
 14595  1CE1  0187               	clrf	7
 14596  1CE2  1001               	bcf	1,0
 14597                           
 14598                           ;Dimmer_B1.c: 408: if (getDimmerLights_StatusFlag() == 0) {
 14599  1CE3  319B  239E  319C   	fcall	_getDimmerLights_StatusFlag
 14600  1CE6  3800               	iorlw	0
 14601  1CE7  1D03               	skipz
 14602  1CE8  0008               	return
 14603                           
 14604                           ;Dimmer_B1.c: 409: setLoad_GO(0);
 14605  1CE9  3000               	movlw	0
 14606  1CEA  319A  221D  319C   	fcall	_setLoad_GO
 14607                           
 14608                           ;Dimmer_B1.c: 410: setMemory_GO(1);
 14609  1CED  3001               	movlw	1
 14610  1CEE  319C  24AD         	fcall	_setMemory_GO
 14611  1CF0  0008               	return
 14612  1CF1                     __end_of_DimmerLights_Close:	
 14613                           
 14614                           	psect	text90
 14615  1CAD                     __ptext90:	
 14616 ;; *************** function _setMemory_GO *****************
 14617 ;; Defined at:
 14618 ;;		line 891 in file "../src/MCU_B1.c"
 14619 ;; Parameters:    Size  Location     Type
 14620 ;;  command         1    wreg     unsigned char 
 14621 ;; Auto vars:     Size  Location     Type
 14622 ;;  command         1    2[BANK0 ] unsigned char 
 14623 ;; Return value:  Size  Location     Type
 14624 ;;		None               void
 14625 ;; Registers used:
 14626 ;;		wreg, status,2, status,0
 14627 ;; Tracked objects:
 14628 ;;		On entry : 0/0
 14629 ;;		On exit  : 0/0
 14630 ;;		Unchanged: 0/0
 14631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14635 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;Total ram usage:        3 bytes
 14637 ;; Hardware stack levels used:    1
 14638 ;; Hardware stack levels required when called:    5
 14639 ;; This function calls:
 14640 ;;		Nothing
 14641 ;; This function is called by:
 14642 ;;		_DimmerLights_Close
 14643 ;;		_setDimmerLights
 14644 ;; This function uses a non-reentrant model
 14645 ;;
 14646                           
 14647                           
 14648                           ;psect for function _setMemory_GO
 14649  1CAD                     _setMemory_GO:	
 14650                           
 14651                           ;incstack = 0
 14652                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 14653                           ;setMemory_GO@command stored from wreg
 14654  1CAD  0020               	movlb	0	; select bank0
 14655  1CAE  00A2               	movwf	setMemory_GO@command
 14656                           
 14657                           ;MCU_B1.c: 892: Memory.GO = command;
 14658  1CAF  0822               	movf	setMemory_GO@command,w
 14659  1CB0  0024               	movlb	4	; select bank4
 14660  1CB1  10C4               	bcf	(_Memory^(0+512)+36),1
 14661  1CB2  1D03               	skipz
 14662  1CB3  14C4               	bsf	(_Memory^(0+512)+36),1
 14663                           
 14664                           ;MCU_B1.c: 893: if (command == 0) {
 14665  1CB4  0020               	movlb	0	; select bank0
 14666  1CB5  08A2               	movf	setMemory_GO@command,f
 14667  1CB6  1D03               	skipz
 14668  1CB7  0008               	return
 14669                           
 14670                           ;MCU_B1.c: 894: Memory.Time = command;
 14671  1CB8  0822               	movf	setMemory_GO@command,w
 14672  1CB9  00A0               	movwf	??_setMemory_GO
 14673  1CBA  01A1               	clrf	??_setMemory_GO+1
 14674  1CBB  0820               	movf	??_setMemory_GO,w
 14675  1CBC  0024               	movlb	4	; select bank4
 14676  1CBD  00C2               	movwf	(_Memory^(0+512)+34)
 14677  1CBE  0020               	movlb	0	; select bank0
 14678  1CBF  0821               	movf	??_setMemory_GO+1,w
 14679  1CC0  0024               	movlb	4	; select bank4
 14680  1CC1  00C3               	movwf	((_Memory+1)^(0+512)+34)
 14681  1CC2  0008               	return
 14682  1CC3                     __end_of_setMemory_GO:	
 14683                           
 14684                           	psect	text91
 14685  1A1D                     __ptext91:	
 14686 ;; *************** function _setLoad_GO *****************
 14687 ;; Defined at:
 14688 ;;		line 263 in file "../src/OverLoad_B1.c"
 14689 ;; Parameters:    Size  Location     Type
 14690 ;;  command         1    wreg     unsigned char 
 14691 ;; Auto vars:     Size  Location     Type
 14692 ;;  command         1    0[BANK0 ] unsigned char 
 14693 ;; Return value:  Size  Location     Type
 14694 ;;		None               void
 14695 ;; Registers used:
 14696 ;;		wreg
 14697 ;; Tracked objects:
 14698 ;;		On entry : 0/0
 14699 ;;		On exit  : 0/0
 14700 ;;		Unchanged: 0/0
 14701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;Total ram usage:        1 bytes
 14707 ;; Hardware stack levels used:    1
 14708 ;; Hardware stack levels required when called:    5
 14709 ;; This function calls:
 14710 ;;		Nothing
 14711 ;; This function is called by:
 14712 ;;		_DimmerLights_Close
 14713 ;; This function uses a non-reentrant model
 14714 ;;
 14715                           
 14716                           
 14717                           ;psect for function _setLoad_GO
 14718  1A1D                     _setLoad_GO:	
 14719                           
 14720                           ;incstack = 0
 14721                           ; Regs used in _setLoad_GO: [wreg]
 14722                           ;setLoad_GO@command stored from wreg
 14723  1A1D  0020               	movlb	0	; select bank0
 14724  1A1E  00A0               	movwf	setLoad_GO@command
 14725                           
 14726                           ;OverLoad_B1.c: 264: Load1.GO = command;
 14727  1A1F  0820               	movf	setLoad_GO@command,w
 14728  1A20  0023               	movlb	3	; select bank3
 14729  1A21  10A0               	bcf	_Load1^(0+384),1
 14730  1A22  1D03               	skipz
 14731  1A23  14A0               	bsf	_Load1^(0+384),1
 14732  1A24  0008               	return
 14733  1A25                     __end_of_setLoad_GO:	
 14734                           
 14735                           	psect	text92
 14736  1B9E                     __ptext92:	
 14737 ;; *************** function _getDimmerLights_StatusFlag *****************
 14738 ;; Defined at:
 14739 ;;		line 484 in file "../src/Dimmer_B1.c"
 14740 ;; Parameters:    Size  Location     Type
 14741 ;;		None
 14742 ;; Auto vars:     Size  Location     Type
 14743 ;;  Status          1    1[BANK0 ] unsigned char 
 14744 ;; Return value:  Size  Location     Type
 14745 ;;                  1    wreg      unsigned char 
 14746 ;; Registers used:
 14747 ;;		wreg, status,2
 14748 ;; Tracked objects:
 14749 ;;		On entry : 0/0
 14750 ;;		On exit  : 0/0
 14751 ;;		Unchanged: 0/0
 14752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14754 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14755 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;Total ram usage:        3 bytes
 14758 ;; Hardware stack levels used:    1
 14759 ;; Hardware stack levels required when called:    5
 14760 ;; This function calls:
 14761 ;;		Nothing
 14762 ;; This function is called by:
 14763 ;;		_DimmerLights_Close
 14764 ;;		_DimmerLights_Exceptions
 14765 ;; This function uses a non-reentrant model
 14766 ;;
 14767                           
 14768                           
 14769                           ;psect for function _getDimmerLights_StatusFlag
 14770  1B9E                     _getDimmerLights_StatusFlag:	
 14771                           
 14772                           ;Dimmer_B1.c: 485: char Status = 0;
 14773                           
 14774                           ;incstack = 0
 14775                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 14776  1B9E  0020               	movlb	0	; select bank0
 14777  1B9F  01A1               	clrf	getDimmerLights_StatusFlag@Status
 14778                           
 14779                           ;Dimmer_B1.c: 492: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 14780  1BA0  01A2               	clrf	_getDimmerLights_StatusFlag$2647
 14781  1BA1  0AA2               	incf	_getDimmerLights_StatusFlag$2647,f
 14782  1BA2  0022               	movlb	2	; select bank2
 14783  1BA3  1F3D               	btfss	_DimmerLights1^(0+256),6
 14784  1BA4  1B4C               	btfsc	_DimmerLights2^(0+256),6
 14785  1BA5  2BA8               	goto	l8936
 14786  1BA6  0020               	movlb	0	; select bank0
 14787  1BA7  01A2               	clrf	_getDimmerLights_StatusFlag$2647
 14788  1BA8                     l8936:	
 14789  1BA8  0020               	movlb	0	; select bank0
 14790  1BA9  0822               	movf	_getDimmerLights_StatusFlag$2647,w
 14791  1BAA  00A0               	movwf	??_getDimmerLights_StatusFlag
 14792  1BAB  0820               	movf	??_getDimmerLights_StatusFlag,w
 14793  1BAC  00A1               	movwf	getDimmerLights_StatusFlag@Status
 14794                           
 14795                           ;Dimmer_B1.c: 499: return Status;
 14796  1BAD  0821               	movf	getDimmerLights_StatusFlag@Status,w
 14797  1BAE  0008               	return
 14798  1BAF                     __end_of_getDimmerLights_StatusFlag:	
 14799                           
 14800                           	psect	text93
 14801  1CC3                     __ptext93:	
 14802 ;; *************** function _DimmerLights_Initialization *****************
 14803 ;; Defined at:
 14804 ;;		line 343 in file "../src/Dimmer_B1.c"
 14805 ;; Parameters:    Size  Location     Type
 14806 ;;		None
 14807 ;; Auto vars:     Size  Location     Type
 14808 ;;		None
 14809 ;; Return value:  Size  Location     Type
 14810 ;;		None               void
 14811 ;; Registers used:
 14812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14813 ;; Tracked objects:
 14814 ;;		On entry : 0/0
 14815 ;;		On exit  : 0/0
 14816 ;;		Unchanged: 0/0
 14817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14820 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14821 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14822 ;;Total ram usage:        1 bytes
 14823 ;; Hardware stack levels used:    1
 14824 ;; Hardware stack levels required when called:    7
 14825 ;; This function calls:
 14826 ;;		_Dimmer_Initialization
 14827 ;;		_setDimmerLights_Initialization
 14828 ;; This function is called by:
 14829 ;;		_main
 14830 ;; This function uses a non-reentrant model
 14831 ;;
 14832                           
 14833                           
 14834                           ;psect for function _DimmerLights_Initialization
 14835  1CC3                     _DimmerLights_Initialization:	
 14836                           
 14837                           ;Dimmer_B1.c: 346: DimmerLights11 = &DimmerLights1;
 14838                           
 14839                           ;incstack = 0
 14840                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14841  1CC3  303D               	movlw	_DimmerLights1& (0+255)
 14842  1CC4  0020               	movlb	0	; select bank0
 14843  1CC5  00A4               	movwf	??_DimmerLights_Initialization
 14844  1CC6  0824               	movf	??_DimmerLights_Initialization,w
 14845  1CC7  0021               	movlb	1	; select bank1
 14846  1CC8  00CC               	movwf	_DimmerLights11^(0+128)
 14847                           
 14848                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(1);
 14849  1CC9  3001               	movlw	1
 14850  1CCA  3190  2077  319C   	fcall	_setDimmerLights_Initialization
 14851                           
 14852                           ;Dimmer_B1.c: 351: DimmerLights22 = &DimmerLights2;
 14853  1CCD  304C               	movlw	_DimmerLights2& (0+255)
 14854  1CCE  0020               	movlb	0	; select bank0
 14855  1CCF  00A4               	movwf	??_DimmerLights_Initialization
 14856  1CD0  0824               	movf	??_DimmerLights_Initialization,w
 14857  1CD1  0021               	movlb	1	; select bank1
 14858  1CD2  00CD               	movwf	_DimmerLights22^(0+128)
 14859                           
 14860                           ;Dimmer_B1.c: 352: setDimmerLights_Initialization(2);
 14861  1CD3  3002               	movlw	2
 14862  1CD4  3190  2077  319C   	fcall	_setDimmerLights_Initialization
 14863                           
 14864                           ;Dimmer_B1.c: 361: Dimmer_Initialization();
 14865  1CD7  3199  21EC         	fcall	_Dimmer_Initialization
 14866  1CD9  0008               	return
 14867  1CDA                     __end_of_DimmerLights_Initialization:	
 14868                           
 14869                           	psect	text94
 14870  1077                     __ptext94:	
 14871 ;; *************** function _setDimmerLights_Initialization *****************
 14872 ;; Defined at:
 14873 ;;		line 366 in file "../src/Dimmer_B1.c"
 14874 ;; Parameters:    Size  Location     Type
 14875 ;;  lights          1    wreg     unsigned char 
 14876 ;; Auto vars:     Size  Location     Type
 14877 ;;  lights          1    3[BANK0 ] unsigned char 
 14878 ;; Return value:  Size  Location     Type
 14879 ;;		None               void
 14880 ;; Registers used:
 14881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14882 ;; Tracked objects:
 14883 ;;		On entry : 0/0
 14884 ;;		On exit  : 0/0
 14885 ;;		Unchanged: 0/0
 14886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14890 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;Total ram usage:        2 bytes
 14892 ;; Hardware stack levels used:    1
 14893 ;; Hardware stack levels required when called:    6
 14894 ;; This function calls:
 14895 ;;		_DimmerLightsPointSelect
 14896 ;; This function is called by:
 14897 ;;		_DimmerLights_Initialization
 14898 ;; This function uses a non-reentrant model
 14899 ;;
 14900                           
 14901                           
 14902                           ;psect for function _setDimmerLights_Initialization
 14903  1077                     _setDimmerLights_Initialization:	
 14904                           
 14905                           ;incstack = 0
 14906                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14907                           ;setDimmerLights_Initialization@lights stored from wreg
 14908  1077  0020               	movlb	0	; select bank0
 14909  1078  00A3               	movwf	setDimmerLights_Initialization@lights
 14910                           
 14911                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 14912  1079  0823               	movf	setDimmerLights_Initialization@lights,w
 14913  107A  319C  2408         	fcall	_DimmerLightsPointSelect
 14914                           
 14915                           ;Dimmer_B1.c: 369: DimmerLights->Clear = 1;
 14916  107C  0878               	movf	_DimmerLights,w
 14917  107D  3E09               	addlw	9
 14918  107E  0086               	movwf	6
 14919  107F  3001               	movlw	1	; select bank2/3
 14920  1080  0087               	movwf	7
 14921  1081  1501               	bsf	1,2
 14922                           
 14923                           ;Dimmer_B1.c: 375: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 14924  1082  3020               	movlw	32
 14925  1083  0020               	movlb	0	; select bank0
 14926  1084  00A2               	movwf	??_setDimmerLights_Initialization
 14927  1085  0878               	movf	_DimmerLights,w
 14928  1086  3E05               	addlw	5
 14929  1087  0086               	movwf	6
 14930  1088  3001               	movlw	1	; select bank2/3
 14931  1089  0087               	movwf	7
 14932  108A  0822               	movf	??_setDimmerLights_Initialization,w
 14933  108B  0081               	movwf	1
 14934                           
 14935                           ;Dimmer_B1.c: 376: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 14936  108C  303C               	movlw	60
 14937  108D  00A2               	movwf	??_setDimmerLights_Initialization
 14938  108E  0878               	movf	_DimmerLights,w
 14939  108F  3E06               	addlw	6
 14940  1090  0086               	movwf	6
 14941  1091  3001               	movlw	1	; select bank2/3
 14942  1092  0087               	movwf	7
 14943  1093  0822               	movf	??_setDimmerLights_Initialization,w
 14944  1094  0081               	movwf	1
 14945                           
 14946                           ;Dimmer_B1.c: 386: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14947  1095  0878               	movf	_DimmerLights,w
 14948  1096  3E06               	addlw	6
 14949  1097  0086               	movwf	6
 14950  1098  3001               	movlw	1	; select bank2/3
 14951  1099  0087               	movwf	7
 14952  109A  0801               	movf	1,w
 14953  109B  00A2               	movwf	??_setDimmerLights_Initialization
 14954  109C  0878               	movf	_DimmerLights,w
 14955  109D  3E04               	addlw	4
 14956  109E  0086               	movwf	6
 14957  109F  3001               	movlw	1	; select bank2/3
 14958  10A0  0087               	movwf	7
 14959  10A1  0822               	movf	??_setDimmerLights_Initialization,w
 14960  10A2  0081               	movwf	1
 14961  10A3  0008               	return
 14962  10A4                     __end_of_setDimmerLights_Initialization:	
 14963                           
 14964                           	psect	text95
 14965  19EC                     __ptext95:	
 14966 ;; *************** function _Dimmer_Initialization *****************
 14967 ;; Defined at:
 14968 ;;		line 795 in file "../src/Dimmer_B1.c"
 14969 ;; Parameters:    Size  Location     Type
 14970 ;;		None
 14971 ;; Auto vars:     Size  Location     Type
 14972 ;;		None
 14973 ;; Return value:  Size  Location     Type
 14974 ;;		None               void
 14975 ;; Registers used:
 14976 ;;		wreg
 14977 ;; Tracked objects:
 14978 ;;		On entry : 0/0
 14979 ;;		On exit  : 0/0
 14980 ;;		Unchanged: 0/0
 14981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14984 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14985 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;Total ram usage:        1 bytes
 14987 ;; Hardware stack levels used:    1
 14988 ;; Hardware stack levels required when called:    5
 14989 ;; This function calls:
 14990 ;;		Nothing
 14991 ;; This function is called by:
 14992 ;;		_DimmerLights_Initialization
 14993 ;; This function uses a non-reentrant model
 14994 ;;
 14995                           
 14996                           
 14997                           ;psect for function _Dimmer_Initialization
 14998  19EC                     _Dimmer_Initialization:	
 14999                           
 15000                           ;Dimmer_B1.c: 797: Dimmer = &Dimmer1;
 15001                           
 15002                           ;incstack = 0
 15003                           ; Regs used in _Dimmer_Initialization: [wreg]
 15004  19EC  30E5               	movlw	_Dimmer1& (0+255)
 15005  19ED  0020               	movlb	0	; select bank0
 15006  19EE  00A0               	movwf	??_Dimmer_Initialization
 15007  19EF  0820               	movf	??_Dimmer_Initialization,w
 15008  19F0  00F7               	movwf	_Dimmer
 15009  19F1  0008               	return
 15010  19F2                     __end_of_Dimmer_Initialization:	
 15011                           
 15012                           	psect	text96
 15013  1A15                     __ptext96:	
 15014 ;; *************** function _DelayOff_Main *****************
 15015 ;; Defined at:
 15016 ;;		line 41 in file "../src/DelayOff_B1.c"
 15017 ;; Parameters:    Size  Location     Type
 15018 ;;		None
 15019 ;; Auto vars:     Size  Location     Type
 15020 ;;		None
 15021 ;; Return value:  Size  Location     Type
 15022 ;;		None               void
 15023 ;; Registers used:
 15024 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15025 ;; Tracked objects:
 15026 ;;		On entry : 0/0
 15027 ;;		On exit  : 0/0
 15028 ;;		Unchanged: 0/0
 15029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15034 ;;Total ram usage:        0 bytes
 15035 ;; Hardware stack levels used:    1
 15036 ;; Hardware stack levels required when called:   10
 15037 ;; This function calls:
 15038 ;;		_DlyOff_Main
 15039 ;; This function is called by:
 15040 ;;		_main
 15041 ;; This function uses a non-reentrant model
 15042 ;;
 15043                           
 15044                           
 15045                           ;psect for function _DelayOff_Main
 15046  1A15                     _DelayOff_Main:	
 15047                           
 15048                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15049                           
 15050                           ;incstack = 0
 15051                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15052  1A15  3001               	movlw	1
 15053  1A16  3188  20A5  319A   	fcall	_DlyOff_Main
 15054                           
 15055                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15056  1A19  3002               	movlw	2
 15057  1A1A  3188  20A5         	fcall	_DlyOff_Main
 15058  1A1C  0008               	return
 15059  1A1D                     __end_of_DelayOff_Main:	
 15060                           
 15061                           	psect	text97
 15062  08A5                     __ptext97:	
 15063 ;; *************** function _DlyOff_Main *****************
 15064 ;; Defined at:
 15065 ;;		line 62 in file "../src/DelayOff_B1.c"
 15066 ;; Parameters:    Size  Location     Type
 15067 ;;  sw              1    wreg     unsigned char 
 15068 ;; Auto vars:     Size  Location     Type
 15069 ;;  sw              1   68[BANK0 ] unsigned char 
 15070 ;; Return value:  Size  Location     Type
 15071 ;;		None               void
 15072 ;; Registers used:
 15073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15074 ;; Tracked objects:
 15075 ;;		On entry : 0/0
 15076 ;;		On exit  : 0/0
 15077 ;;		Unchanged: 0/0
 15078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15082 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;Total ram usage:        3 bytes
 15084 ;; Hardware stack levels used:    1
 15085 ;; Hardware stack levels required when called:    9
 15086 ;; This function calls:
 15087 ;;		_DelayOffPointSelect
 15088 ;;		_setBuz
 15089 ;;		_setDimmerLights_Switch
 15090 ;;		_setDimmerLights_Trigger
 15091 ;;		_setRFSW_Status
 15092 ;;		_setRF_DimmerLights
 15093 ;;		_setSw_Status
 15094 ;;		_setTxData
 15095 ;; This function is called by:
 15096 ;;		_DelayOff_Main
 15097 ;; This function uses a non-reentrant model
 15098 ;;
 15099                           
 15100                           
 15101                           ;psect for function _DlyOff_Main
 15102  08A5                     _DlyOff_Main:	
 15103                           
 15104                           ;incstack = 0
 15105                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15106                           ;DlyOff_Main@sw stored from wreg
 15107  08A5  0020               	movlb	0	; select bank0
 15108  08A6  00E4               	movwf	DlyOff_Main@sw
 15109                           
 15110                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15111  08A7  0864               	movf	DlyOff_Main@sw,w
 15112  08A8  319C  242F  3188   	fcall	_DelayOffPointSelect
 15113                           
 15114                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15115  08AB  0876               	movf	_DelayOff,w
 15116  08AC  0086               	movwf	6
 15117  08AD  0187               	clrf	7
 15118  08AE  1C81               	btfss	1,1
 15119  08AF  0008               	return
 15120                           
 15121                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15122  08B0  0876               	movf	_DelayOff,w
 15123  08B1  0086               	movwf	6
 15124  08B2  0187               	clrf	7
 15125  08B3  3001               	movlw	1
 15126  08B4  0781               	addwf	1,f
 15127  08B5  3141               	addfsr 1,1
 15128  08B6  1803               	skipnc
 15129  08B7  0A81               	incf	1,f
 15130                           
 15131                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 15132  08B8  0876               	movf	_DelayOff,w
 15133  08B9  0086               	movwf	6
 15134  08BA  0187               	clrf	7
 15135  08BB  3F40               	moviw [0]fsr1
 15136  08BC  0020               	movlb	0	; select bank0
 15137  08BD  00E2               	movwf	??_DlyOff_Main
 15138  08BE  3F41               	moviw [1]fsr1
 15139  08BF  00E3               	movwf	??_DlyOff_Main+1
 15140  08C0  3016               	movlw	22
 15141  08C1  0263               	subwf	??_DlyOff_Main+1,w
 15142  08C2  3012               	movlw	18
 15143  08C3  1903               	skipnz
 15144  08C4  0262               	subwf	??_DlyOff_Main,w
 15145  08C5  1C03               	skipc
 15146  08C6  0008               	return
 15147                           
 15148                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15149  08C7  0876               	movf	_DelayOff,w
 15150  08C8  0086               	movwf	6
 15151  08C9  0187               	clrf	7
 15152  08CA  3000               	movlw	0
 15153  08CB  3FC0               	movwi [0]fsr1
 15154  08CC  3FC1               	movwi [1]fsr1
 15155                           
 15156                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15157  08CD  3001               	movlw	1
 15158  08CE  00E2               	movwf	??_DlyOff_Main
 15159  08CF  0876               	movf	_DelayOff,w
 15160  08D0  0086               	movwf	6
 15161  08D1  0187               	clrf	7
 15162  08D2  0862               	movf	??_DlyOff_Main,w
 15163  08D3  0781               	addwf	1,f
 15164                           
 15165                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15166  08D4  0876               	movf	_DelayOff,w
 15167  08D5  0086               	movwf	6
 15168  08D6  0187               	clrf	7
 15169  08D7  0876               	movf	_DelayOff,w
 15170  08D8  0084               	movwf	4
 15171  08D9  0185               	clrf	5
 15172  08DA  0800               	movf	0,w
 15173  08DB  0201               	subwf	1,w
 15174  08DC  1C03               	skipc
 15175  08DD  0008               	return
 15176                           
 15177                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15178  08DE  0876               	movf	_DelayOff,w
 15179  08DF  0086               	movwf	6
 15180  08E0  0187               	clrf	7
 15181  08E1  0181               	clrf	1
 15182                           
 15183                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15184  08E2  0876               	movf	_DelayOff,w
 15185  08E3  0086               	movwf	6
 15186  08E4  0187               	clrf	7
 15187  08E5  1081               	bcf	1,1
 15188                           
 15189                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 15190  08E6  01A2               	clrf	setSw_Status@command
 15191  08E7  0864               	movf	DlyOff_Main@sw,w
 15192  08E8  319B  2311  3188   	fcall	_setSw_Status
 15193                           
 15194                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 15195  08EB  0020               	movlb	0	; select bank0
 15196  08EC  01A2               	clrf	setRFSW_Status@command
 15197  08ED  0864               	movf	DlyOff_Main@sw,w
 15198  08EE  319B  2302  3188   	fcall	_setRFSW_Status
 15199                           
 15200                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 15201  08F1  0020               	movlb	0	; select bank0
 15202  08F2  01DD               	clrf	setRF_DimmerLights@on
 15203  08F3  0864               	movf	DlyOff_Main@sw,w
 15204  08F4  3189  2110  3188   	fcall	_setRF_DimmerLights
 15205                           
 15206                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 15207  08F7  0020               	movlb	0	; select bank0
 15208  08F8  01A2               	clrf	setDimmerLights_Trigger@command
 15209  08F9  0AA2               	incf	setDimmerLights_Trigger@command,f
 15210  08FA  0864               	movf	DlyOff_Main@sw,w
 15211  08FB  319B  234E  3188   	fcall	_setDimmerLights_Trigger
 15212                           
 15213                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 15214  08FE  0020               	movlb	0	; select bank0
 15215  08FF  01A2               	clrf	setDimmerLights_Switch@command
 15216  0900  0864               	movf	DlyOff_Main@sw,w
 15217  0901  319B  233E  3188   	fcall	_setDimmerLights_Switch
 15218                           
 15219                           ;DelayOff_B1.c: 78: setTxData();
 15220  0904  318F  2741  3188   	fcall	_setTxData
 15221                           
 15222                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 15223  0907  3064               	movlw	100
 15224  0908  0020               	movlb	0	; select bank0
 15225  0909  00A9               	movwf	setBuz@time
 15226  090A  3000               	movlw	0
 15227  090B  00AA               	movwf	setBuz@time+1
 15228  090C  3001               	movlw	1
 15229  090D  3195  25CA         	fcall	_setBuz
 15230  090F  0008               	return
 15231  0910                     __end_of_DlyOff_Main:	
 15232                           
 15233                           	psect	text98
 15234  0F41                     __ptext98:	
 15235 ;; *************** function _setTxData *****************
 15236 ;; Defined at:
 15237 ;;		line 191 in file "../src/RF_Control_B1.c"
 15238 ;; Parameters:    Size  Location     Type
 15239 ;;		None
 15240 ;; Auto vars:     Size  Location     Type
 15241 ;;  i               1    0        unsigned char 
 15242 ;; Return value:  Size  Location     Type
 15243 ;;		None               void
 15244 ;; Registers used:
 15245 ;;		wreg, fsr1l, fsr1h
 15246 ;; Tracked objects:
 15247 ;;		On entry : 0/0
 15248 ;;		On exit  : 0/0
 15249 ;;		Unchanged: 0/0
 15250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15254 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15255 ;;Total ram usage:        1 bytes
 15256 ;; Hardware stack levels used:    1
 15257 ;; Hardware stack levels required when called:    5
 15258 ;; This function calls:
 15259 ;;		Nothing
 15260 ;; This function is called by:
 15261 ;;		_DlyOff_Main
 15262 ;;		_setDimmerLights_Adj
 15263 ;;		_setControl_Lights_Table
 15264 ;;		_setRFSW_Control
 15265 ;;		_setRFSW_AdjControl
 15266 ;;		_Sw_DimmerOnFunc
 15267 ;;		_Sw_DimmerOffFunc
 15268 ;; This function uses a non-reentrant model
 15269 ;;
 15270                           
 15271                           
 15272                           ;psect for function _setTxData
 15273  0F41                     _setTxData:	
 15274                           
 15275                           ;RF_Control_B1.c: 192: char i;
 15276                           ;RF_Control_B1.c: 193: if (RF1.Enable == 1) {
 15277                           
 15278                           ;incstack = 0
 15279                           ; Regs used in _setTxData: [wregfsr1]
 15280  0F41  0021               	movlb	1	; select bank1
 15281  0F42  1C3E               	btfss	_RF1^(0+128),0
 15282  0F43  0008               	return
 15283                           
 15284                           ;RF_Control_B1.c: 195: RF1.TransceiveGO = 1;
 15285  0F44  153E               	bsf	_RF1^(0+128),2
 15286                           
 15287                           ;RF_Control_B1.c: 196: RF1.RunTime = 20;
 15288  0F45  3014               	movlw	20
 15289  0F46  0020               	movlb	0	; select bank0
 15290  0F47  00A0               	movwf	??_setTxData
 15291  0F48  0820               	movf	??_setTxData,w
 15292  0F49  0021               	movlb	1	; select bank1
 15293  0F4A  00C3               	movwf	(_RF1^(0+128)+5)
 15294                           
 15295                           ;RF_Control_B1.c: 206: RF_Data[0] = 0x63;
 15296  0F4B  3063               	movlw	99
 15297  0F4C  0020               	movlb	0	; select bank0
 15298  0F4D  00A0               	movwf	??_setTxData
 15299  0F4E  0820               	movf	??_setTxData,w
 15300  0F4F  0022               	movlb	2	; select bank2
 15301  0F50  00A0               	movwf	_RF_Data^(0+256)
 15302                           
 15303                           ;RF_Control_B1.c: 207: RF_Data[1] = 0x02;
 15304  0F51  3002               	movlw	2
 15305  0F52  0020               	movlb	0	; select bank0
 15306  0F53  00A0               	movwf	??_setTxData
 15307  0F54  0820               	movf	??_setTxData,w
 15308  0F55  0022               	movlb	2	; select bank2
 15309  0F56  00A1               	movwf	(_RF_Data^(0+256)+1)
 15310                           
 15311                           ;RF_Control_B1.c: 208: RF_Data[2] = product->Data[2];
 15312  0F57  0020               	movlb	0	; select bank0
 15313  0F58  086C               	movf	_product,w
 15314  0F59  0086               	movwf	6
 15315  0F5A  3002               	movlw	2	; select bank4/5
 15316  0F5B  0087               	movwf	7
 15317  0F5C  3002               	movlw	2	; select bank4/5
 15318  0F5D  3F42               	moviw [2]fsr1
 15319  0F5E  0022               	movlb	2	; select bank2
 15320  0F5F  00A2               	movwf	(_RF_Data^(0+256)+2)
 15321                           
 15322                           ;RF_Control_B1.c: 209: RF_Data[3] = product->Data[3];
 15323  0F60  0020               	movlb	0	; select bank0
 15324  0F61  086C               	movf	_product,w
 15325  0F62  0086               	movwf	6
 15326  0F63  3002               	movlw	2	; select bank4/5
 15327  0F64  0087               	movwf	7
 15328  0F65  3002               	movlw	2	; select bank4/5
 15329  0F66  3F43               	moviw [3]fsr1
 15330  0F67  0022               	movlb	2	; select bank2
 15331  0F68  00A3               	movwf	(_RF_Data^(0+256)+3)
 15332                           
 15333                           ;RF_Control_B1.c: 210: RF_Data[4] = product->Data[4];
 15334  0F69  0020               	movlb	0	; select bank0
 15335  0F6A  086C               	movf	_product,w
 15336  0F6B  0086               	movwf	6
 15337  0F6C  3002               	movlw	2	; select bank4/5
 15338  0F6D  0087               	movwf	7
 15339  0F6E  3002               	movlw	2	; select bank4/5
 15340  0F6F  3F44               	moviw [4]fsr1
 15341  0F70  0022               	movlb	2	; select bank2
 15342  0F71  00A4               	movwf	(_RF_Data^(0+256)+4)
 15343                           
 15344                           ;RF_Control_B1.c: 211: RF_Data[5] = product->Data[5];
 15345  0F72  0020               	movlb	0	; select bank0
 15346  0F73  086C               	movf	_product,w
 15347  0F74  0086               	movwf	6
 15348  0F75  3002               	movlw	2	; select bank4/5
 15349  0F76  0087               	movwf	7
 15350  0F77  3002               	movlw	2	; select bank4/5
 15351  0F78  3F45               	moviw [5]fsr1
 15352  0F79  0022               	movlb	2	; select bank2
 15353  0F7A  00A5               	movwf	(_RF_Data^(0+256)+5)
 15354                           
 15355                           ;RF_Control_B1.c: 212: RF_Data[6] = product->Data[6];
 15356  0F7B  0020               	movlb	0	; select bank0
 15357  0F7C  086C               	movf	_product,w
 15358  0F7D  0086               	movwf	6
 15359  0F7E  3002               	movlw	2	; select bank4/5
 15360  0F7F  0087               	movwf	7
 15361  0F80  3002               	movlw	2	; select bank4/5
 15362  0F81  3F46               	moviw [6]fsr1
 15363  0F82  0022               	movlb	2	; select bank2
 15364  0F83  00A6               	movwf	(_RF_Data^(0+256)+6)
 15365                           
 15366                           ;RF_Control_B1.c: 213: RF_Data[7] = product->Data[7];
 15367  0F84  0020               	movlb	0	; select bank0
 15368  0F85  086C               	movf	_product,w
 15369  0F86  0086               	movwf	6
 15370  0F87  3002               	movlw	2	; select bank4/5
 15371  0F88  0087               	movwf	7
 15372  0F89  3002               	movlw	2	; select bank4/5
 15373  0F8A  3F47               	moviw [7]fsr1
 15374  0F8B  0022               	movlb	2	; select bank2
 15375  0F8C  00A7               	movwf	(_RF_Data^(0+256)+7)
 15376                           
 15377                           ;RF_Control_B1.c: 214: RF_Data[8] = product->Data[8];
 15378  0F8D  0020               	movlb	0	; select bank0
 15379  0F8E  086C               	movf	_product,w
 15380  0F8F  0086               	movwf	6
 15381  0F90  3002               	movlw	2	; select bank4/5
 15382  0F91  0087               	movwf	7
 15383  0F92  3002               	movlw	2	; select bank4/5
 15384  0F93  3F48               	moviw [8]fsr1
 15385  0F94  0022               	movlb	2	; select bank2
 15386  0F95  00A8               	movwf	(_RF_Data^(0+256)+8)
 15387                           
 15388                           ;RF_Control_B1.c: 215: RF_Data[9] = product->Data[9];
 15389  0F96  0020               	movlb	0	; select bank0
 15390  0F97  086C               	movf	_product,w
 15391  0F98  0086               	movwf	6
 15392  0F99  3002               	movlw	2	; select bank4/5
 15393  0F9A  0087               	movwf	7
 15394  0F9B  3002               	movlw	2	; select bank4/5
 15395  0F9C  3F49               	moviw [9]fsr1
 15396  0F9D  0022               	movlb	2	; select bank2
 15397  0F9E  00A9               	movwf	(_RF_Data^(0+256)+9)
 15398                           
 15399                           ;RF_Control_B1.c: 216: RF_Data[10] = product->Data[10];
 15400  0F9F  0020               	movlb	0	; select bank0
 15401  0FA0  086C               	movf	_product,w
 15402  0FA1  0086               	movwf	6
 15403  0FA2  3002               	movlw	2	; select bank4/5
 15404  0FA3  0087               	movwf	7
 15405  0FA4  3002               	movlw	2	; select bank4/5
 15406  0FA5  3F4A               	moviw [10]fsr1
 15407  0FA6  0022               	movlb	2	; select bank2
 15408  0FA7  00AA               	movwf	(_RF_Data^(0+256)+10)
 15409                           
 15410                           ;RF_Control_B1.c: 217: RF_Data[11] = product->Data[11];
 15411  0FA8  0020               	movlb	0	; select bank0
 15412  0FA9  086C               	movf	_product,w
 15413  0FAA  0086               	movwf	6
 15414  0FAB  3002               	movlw	2	; select bank4/5
 15415  0FAC  0087               	movwf	7
 15416  0FAD  3002               	movlw	2	; select bank4/5
 15417  0FAE  3F4B               	moviw [11]fsr1
 15418  0FAF  0022               	movlb	2	; select bank2
 15419  0FB0  00AB               	movwf	(_RF_Data^(0+256)+11)
 15420                           
 15421                           ;RF_Control_B1.c: 218: RF_Data[12] = product->Data[12];
 15422  0FB1  0020               	movlb	0	; select bank0
 15423  0FB2  086C               	movf	_product,w
 15424  0FB3  0086               	movwf	6
 15425  0FB4  3002               	movlw	2	; select bank4/5
 15426  0FB5  0087               	movwf	7
 15427  0FB6  3002               	movlw	2	; select bank4/5
 15428  0FB7  3F4C               	moviw [12]fsr1
 15429  0FB8  0022               	movlb	2	; select bank2
 15430  0FB9  00AC               	movwf	(_RF_Data^(0+256)+12)
 15431                           
 15432                           ;RF_Control_B1.c: 219: RF_Data[13] = product->Data[13];
 15433  0FBA  0020               	movlb	0	; select bank0
 15434  0FBB  086C               	movf	_product,w
 15435  0FBC  0086               	movwf	6
 15436  0FBD  3002               	movlw	2	; select bank4/5
 15437  0FBE  0087               	movwf	7
 15438  0FBF  3002               	movlw	2	; select bank4/5
 15439  0FC0  3F4D               	moviw [13]fsr1
 15440  0FC1  0022               	movlb	2	; select bank2
 15441  0FC2  00AD               	movwf	(_RF_Data^(0+256)+13)
 15442                           
 15443                           ;RF_Control_B1.c: 220: RF_Data[14] = product->Data[14];
 15444  0FC3  0020               	movlb	0	; select bank0
 15445  0FC4  086C               	movf	_product,w
 15446  0FC5  0086               	movwf	6
 15447  0FC6  3002               	movlw	2	; select bank4/5
 15448  0FC7  0087               	movwf	7
 15449  0FC8  3002               	movlw	2	; select bank4/5
 15450  0FC9  3F4E               	moviw [14]fsr1
 15451  0FCA  0022               	movlb	2	; select bank2
 15452  0FCB  00AE               	movwf	(_RF_Data^(0+256)+14)
 15453                           
 15454                           ;RF_Control_B1.c: 221: RF_Data[15] = product->Data[15];
 15455  0FCC  0020               	movlb	0	; select bank0
 15456  0FCD  086C               	movf	_product,w
 15457  0FCE  0086               	movwf	6
 15458  0FCF  3002               	movlw	2	; select bank4/5
 15459  0FD0  0087               	movwf	7
 15460  0FD1  3002               	movlw	2	; select bank4/5
 15461  0FD2  3F4F               	moviw [15]fsr1
 15462  0FD3  0022               	movlb	2	; select bank2
 15463  0FD4  00AF               	movwf	(_RF_Data^(0+256)+15)
 15464                           
 15465                           ;RF_Control_B1.c: 222: RF_Data[16] = product->Data[16];
 15466  0FD5  0020               	movlb	0	; select bank0
 15467  0FD6  086C               	movf	_product,w
 15468  0FD7  0086               	movwf	6
 15469  0FD8  3002               	movlw	2	; select bank4/5
 15470  0FD9  0087               	movwf	7
 15471  0FDA  3002               	movlw	2	; select bank4/5
 15472  0FDB  3F50               	moviw [16]fsr1
 15473  0FDC  0022               	movlb	2	; select bank2
 15474  0FDD  00B0               	movwf	(_RF_Data^(0+256)+16)
 15475                           
 15476                           ;RF_Control_B1.c: 223: RF_Data[17] = product->Data[17];
 15477  0FDE  0020               	movlb	0	; select bank0
 15478  0FDF  086C               	movf	_product,w
 15479  0FE0  0086               	movwf	6
 15480  0FE1  3002               	movlw	2	; select bank4/5
 15481  0FE2  0087               	movwf	7
 15482  0FE3  3002               	movlw	2	; select bank4/5
 15483  0FE4  3F51               	moviw [17]fsr1
 15484  0FE5  0022               	movlb	2	; select bank2
 15485  0FE6  00B1               	movwf	(_RF_Data^(0+256)+17)
 15486                           
 15487                           ;RF_Control_B1.c: 224: RF_Data[18] = product->Data[18];
 15488  0FE7  0020               	movlb	0	; select bank0
 15489  0FE8  086C               	movf	_product,w
 15490  0FE9  0086               	movwf	6
 15491  0FEA  3002               	movlw	2	; select bank4/5
 15492  0FEB  0087               	movwf	7
 15493  0FEC  3002               	movlw	2	; select bank4/5
 15494  0FED  3F52               	moviw [18]fsr1
 15495  0FEE  0022               	movlb	2	; select bank2
 15496  0FEF  00B2               	movwf	(_RF_Data^(0+256)+18)
 15497                           
 15498                           ;RF_Control_B1.c: 225: RF_Data[19] = product->Data[19];
 15499  0FF0  0020               	movlb	0	; select bank0
 15500  0FF1  086C               	movf	_product,w
 15501  0FF2  0086               	movwf	6
 15502  0FF3  3002               	movlw	2	; select bank4/5
 15503  0FF4  0087               	movwf	7
 15504  0FF5  3002               	movlw	2	; select bank4/5
 15505  0FF6  3F53               	moviw [19]fsr1
 15506  0FF7  0022               	movlb	2	; select bank2
 15507  0FF8  00B3               	movwf	(_RF_Data^(0+256)+19)
 15508                           
 15509                           ;RF_Control_B1.c: 226: RF_Data[20] = 210;
 15510  0FF9  30D2               	movlw	210
 15511  0FFA  0020               	movlb	0	; select bank0
 15512  0FFB  00A0               	movwf	??_setTxData
 15513  0FFC  0820               	movf	??_setTxData,w
 15514  0FFD  0022               	movlb	2	; select bank2
 15515  0FFE  00B4               	movwf	(_RF_Data^(0+256)+20)
 15516  0FFF  0008               	return
 15517  1000                     __end_of_setTxData:	
 15518                           
 15519                           	psect	text99
 15520  1B11                     __ptext99:	
 15521 ;; *************** function _setSw_Status *****************
 15522 ;; Defined at:
 15523 ;;		line 111 in file "../src/Switch_B1.c"
 15524 ;; Parameters:    Size  Location     Type
 15525 ;;  sw              1    wreg     unsigned char 
 15526 ;;  command         1    2[BANK0 ] unsigned char 
 15527 ;; Auto vars:     Size  Location     Type
 15528 ;;  sw              1    3[BANK0 ] unsigned char 
 15529 ;; Return value:  Size  Location     Type
 15530 ;;		None               void
 15531 ;; Registers used:
 15532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15533 ;; Tracked objects:
 15534 ;;		On entry : 0/0
 15535 ;;		On exit  : 0/0
 15536 ;;		Unchanged: 0/0
 15537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15538 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15541 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15542 ;;Total ram usage:        2 bytes
 15543 ;; Hardware stack levels used:    1
 15544 ;; Hardware stack levels required when called:    6
 15545 ;; This function calls:
 15546 ;;		_SwPointSelect
 15547 ;; This function is called by:
 15548 ;;		_DlyOff_Main
 15549 ;;		_setDimmerLights_ERROR
 15550 ;;		_setControl_Lights_Table
 15551 ;;		_setRFSW_Control
 15552 ;; This function uses a non-reentrant model
 15553 ;;
 15554                           
 15555                           
 15556                           ;psect for function _setSw_Status
 15557  1B11                     _setSw_Status:	
 15558                           
 15559                           ;incstack = 0
 15560                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15561                           ;setSw_Status@sw stored from wreg
 15562  1B11  0020               	movlb	0	; select bank0
 15563  1B12  00A3               	movwf	setSw_Status@sw
 15564                           
 15565                           ;Switch_B1.c: 112: SwPointSelect(sw);
 15566  1B13  0823               	movf	setSw_Status@sw,w
 15567  1B14  319C  2443         	fcall	_SwPointSelect
 15568                           
 15569                           ;Switch_B1.c: 113: Sw->Status = command;
 15570  1B16  0020               	movlb	0	; select bank0
 15571  1B17  086D               	movf	_Sw,w
 15572  1B18  0086               	movwf	6
 15573  1B19  3001               	movlw	1	; select bank2/3
 15574  1B1A  0087               	movwf	7
 15575  1B1B  0822               	movf	setSw_Status@command,w
 15576  1B1C  1301               	bcf	1,6
 15577  1B1D  1D03               	skipz
 15578  1B1E  1701               	bsf	1,6
 15579  1B1F  0008               	return
 15580  1B20                     __end_of_setSw_Status:	
 15581                           
 15582                           	psect	text100
 15583  1C43                     __ptext100:	
 15584 ;; *************** function _SwPointSelect *****************
 15585 ;; Defined at:
 15586 ;;		line 21 in file "../src/Switch_B1.c"
 15587 ;; Parameters:    Size  Location     Type
 15588 ;;  sw              1    wreg     unsigned char 
 15589 ;; Auto vars:     Size  Location     Type
 15590 ;;  sw              1    1[BANK0 ] unsigned char 
 15591 ;; Return value:  Size  Location     Type
 15592 ;;		None               void
 15593 ;; Registers used:
 15594 ;;		wreg
 15595 ;; Tracked objects:
 15596 ;;		On entry : 0/0
 15597 ;;		On exit  : 0/0
 15598 ;;		Unchanged: 0/0
 15599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15603 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15604 ;;Total ram usage:        2 bytes
 15605 ;; Hardware stack levels used:    1
 15606 ;; Hardware stack levels required when called:    5
 15607 ;; This function calls:
 15608 ;;		Nothing
 15609 ;; This function is called by:
 15610 ;;		_setSw_Enable
 15611 ;;		_setSw_Status
 15612 ;;		_setSw_Main
 15613 ;;		_Sw_Detect
 15614 ;; This function uses a non-reentrant model
 15615 ;;
 15616                           
 15617                           
 15618                           ;psect for function _SwPointSelect
 15619  1C43                     _SwPointSelect:	
 15620                           
 15621                           ;incstack = 0
 15622                           ; Regs used in _SwPointSelect: [wreg]
 15623                           ;SwPointSelect@sw stored from wreg
 15624  1C43  0020               	movlb	0	; select bank0
 15625  1C44  00A1               	movwf	SwPointSelect@sw
 15626                           
 15627                           ;Switch_B1.c: 24: if (sw == 1) {
 15628  1C45  0821               	movf	SwPointSelect@sw,w
 15629  1C46  3A01               	xorlw	1
 15630  1C47  1D03               	skipz
 15631  1C48  2C4E               	goto	l8600
 15632                           
 15633                           ;Switch_B1.c: 25: Sw = &Sw1;
 15634  1C49  305B               	movlw	_Sw1& (0+255)
 15635  1C4A  00A0               	movwf	??_SwPointSelect
 15636  1C4B  0820               	movf	??_SwPointSelect,w
 15637  1C4C  00ED               	movwf	_Sw
 15638                           
 15639                           ;Switch_B1.c: 26: }
 15640  1C4D  0008               	return
 15641  1C4E                     l8600:	
 15642                           
 15643                           ;Switch_B1.c: 29: else if (sw == 2) {
 15644  1C4E  0821               	movf	SwPointSelect@sw,w
 15645  1C4F  3A02               	xorlw	2
 15646  1C50  1D03               	skipz
 15647  1C51  0008               	return
 15648                           
 15649                           ;Switch_B1.c: 30: Sw = &Sw2;
 15650  1C52  30E6               	movlw	_Sw2& (0+255)
 15651  1C53  00A0               	movwf	??_SwPointSelect
 15652  1C54  0820               	movf	??_SwPointSelect,w
 15653  1C55  00ED               	movwf	_Sw
 15654  1C56  0008               	return
 15655  1C57                     __end_of_SwPointSelect:	
 15656                           
 15657                           	psect	text101
 15658  0910                     __ptext101:	
 15659 ;; *************** function _setRF_DimmerLights *****************
 15660 ;; Defined at:
 15661 ;;		line 457 in file "../src/RF_Control_B1.c"
 15662 ;; Parameters:    Size  Location     Type
 15663 ;;  lights          1    wreg     unsigned char 
 15664 ;;  on              1   61[BANK0 ] unsigned char 
 15665 ;; Auto vars:     Size  Location     Type
 15666 ;;  lights          1   65[BANK0 ] unsigned char 
 15667 ;;  status          1   64[BANK0 ] unsigned char 
 15668 ;; Return value:  Size  Location     Type
 15669 ;;		None               void
 15670 ;; Registers used:
 15671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15672 ;; Tracked objects:
 15673 ;;		On entry : 0/0
 15674 ;;		On exit  : 0/0
 15675 ;;		Unchanged: 0/0
 15676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15677 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15678 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15679 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15680 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15681 ;;Total ram usage:        5 bytes
 15682 ;; Hardware stack levels used:    1
 15683 ;; Hardware stack levels required when called:    8
 15684 ;; This function calls:
 15685 ;;		_setPercentValue
 15686 ;; This function is called by:
 15687 ;;		_DlyOff_Main
 15688 ;;		_setDimmerLights_Adj
 15689 ;;		_setRFSW_Control
 15690 ;;		_Sw_DimmerOnFunc
 15691 ;;		_Sw_DimmerOffFunc
 15692 ;; This function uses a non-reentrant model
 15693 ;;
 15694                           
 15695                           
 15696                           ;psect for function _setRF_DimmerLights
 15697  0910                     _setRF_DimmerLights:	
 15698                           
 15699                           ;incstack = 0
 15700                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15701                           ;setRF_DimmerLights@lights stored from wreg
 15702  0910  0020               	movlb	0	; select bank0
 15703  0911  00E1               	movwf	setRF_DimmerLights@lights
 15704                           
 15705                           ;RF_Control_B1.c: 458: char status;
 15706                           ;RF_Control_B1.c: 459: status = 1;
 15707  0912  01E0               	clrf	setRF_DimmerLights@status
 15708  0913  0AE0               	incf	setRF_DimmerLights@status,f
 15709                           
 15710                           ;RF_Control_B1.c: 460: status <<= (lights - 1);
 15711  0914  0861               	movf	setRF_DimmerLights@lights,w
 15712  0915  3EFF               	addlw	-1
 15713  0916  0A89               	incf	9,f
 15714  0917  291A               	goto	u8790
 15715  0918                     u8795:	
 15716  0918  1003               	clrc
 15717  0919  0DE0               	rlf	setRF_DimmerLights@status,f
 15718  091A                     u8790:	
 15719  091A  3EFF               	addlw	-1
 15720  091B  1D03               	skipz
 15721  091C  2918               	goto	u8795
 15722                           
 15723                           ;RF_Control_B1.c: 461: product->Data[11]=lights;
 15724  091D  0861               	movf	setRF_DimmerLights@lights,w
 15725  091E  00DE               	movwf	??_setRF_DimmerLights
 15726  091F  086C               	movf	_product,w
 15727  0920  3E0B               	addlw	11
 15728  0921  0086               	movwf	6
 15729  0922  3002               	movlw	2	; select bank4/5
 15730  0923  0087               	movwf	7
 15731  0924  085E               	movf	??_setRF_DimmerLights,w
 15732  0925  0081               	movwf	1
 15733                           
 15734                           ;RF_Control_B1.c: 464: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 15735  0926  3020               	movlw	32
 15736  0927  3193  2359  3189   	fcall	_setPercentValue
 15737  092A  0020               	movlb	0	; select bank0
 15738  092B  00DE               	movwf	??_setRF_DimmerLights
 15739  092C  0861               	movf	setRF_DimmerLights@lights,w
 15740  092D  3E14               	addlw	20
 15741  092E  076C               	addwf	_product,w
 15742  092F  00DF               	movwf	??_setRF_DimmerLights+1
 15743  0930  085F               	movf	??_setRF_DimmerLights+1,w
 15744  0931  0086               	movwf	6
 15745  0932  3002               	movlw	2	; select bank4/5
 15746  0933  0087               	movwf	7
 15747  0934  085E               	movf	??_setRF_DimmerLights,w
 15748  0935  0081               	movwf	1
 15749                           
 15750                           ;RF_Control_B1.c: 467: product->Data[9]=product->Data[20 + lights];
 15751  0936  0861               	movf	setRF_DimmerLights@lights,w
 15752  0937  3E14               	addlw	20
 15753  0938  076C               	addwf	_product,w
 15754  0939  00DE               	movwf	??_setRF_DimmerLights
 15755  093A  085E               	movf	??_setRF_DimmerLights,w
 15756  093B  0086               	movwf	6
 15757  093C  3002               	movlw	2	; select bank4/5
 15758  093D  0087               	movwf	7
 15759  093E  0801               	movf	1,w
 15760  093F  00DF               	movwf	??_setRF_DimmerLights+1
 15761  0940  086C               	movf	_product,w
 15762  0941  3E09               	addlw	9
 15763  0942  0086               	movwf	6
 15764  0943  3002               	movlw	2	; select bank4/5
 15765  0944  0087               	movwf	7
 15766  0945  085F               	movf	??_setRF_DimmerLights+1,w
 15767  0946  0081               	movwf	1
 15768                           
 15769                           ;RF_Control_B1.c: 468: product->Data[17]=product->Data[26 + lights];
 15770  0947  0861               	movf	setRF_DimmerLights@lights,w
 15771  0948  3E1A               	addlw	26
 15772  0949  076C               	addwf	_product,w
 15773  094A  00DE               	movwf	??_setRF_DimmerLights
 15774  094B  085E               	movf	??_setRF_DimmerLights,w
 15775  094C  0086               	movwf	6
 15776  094D  3002               	movlw	2	; select bank4/5
 15777  094E  0087               	movwf	7
 15778  094F  0801               	movf	1,w
 15779  0950  00DF               	movwf	??_setRF_DimmerLights+1
 15780  0951  086C               	movf	_product,w
 15781  0952  3E11               	addlw	17
 15782  0953  0086               	movwf	6
 15783  0954  3002               	movlw	2	; select bank4/5
 15784  0955  0087               	movwf	7
 15785  0956  085F               	movf	??_setRF_DimmerLights+1,w
 15786  0957  0081               	movwf	1
 15787                           
 15788                           ;RF_Control_B1.c: 469: if (on == 1) {
 15789  0958  085D               	movf	setRF_DimmerLights@on,w
 15790  0959  3A01               	xorlw	1
 15791  095A  1D03               	skipz
 15792  095B  296C               	goto	l8700
 15793                           
 15794                           ;RF_Control_B1.c: 470: product->Data[15]=(product->Data[15] | status);
 15795  095C  086C               	movf	_product,w
 15796  095D  3E0F               	addlw	15
 15797  095E  0086               	movwf	6
 15798  095F  3002               	movlw	2	; select bank4/5
 15799  0960  0087               	movwf	7
 15800  0961  0801               	movf	1,w
 15801  0962  0460               	iorwf	setRF_DimmerLights@status,w
 15802  0963  00DE               	movwf	??_setRF_DimmerLights
 15803  0964  086C               	movf	_product,w
 15804  0965  3E0F               	addlw	15
 15805  0966  0086               	movwf	6
 15806  0967  3002               	movlw	2	; select bank4/5
 15807  0968  0087               	movwf	7
 15808  0969  085E               	movf	??_setRF_DimmerLights,w
 15809  096A  0081               	movwf	1
 15810                           
 15811                           ;RF_Control_B1.c: 471: } else {
 15812  096B  0008               	return
 15813  096C                     l8700:	
 15814                           
 15815                           ;RF_Control_B1.c: 472: product->Data[15]=(product->Data[15]&(~status));
 15816  096C  086C               	movf	_product,w
 15817  096D  3E0F               	addlw	15
 15818  096E  0086               	movwf	6
 15819  096F  3002               	movlw	2	; select bank4/5
 15820  0970  0087               	movwf	7
 15821  0971  0960               	comf	setRF_DimmerLights@status,w
 15822  0972  0501               	andwf	1,w
 15823  0973  00DE               	movwf	??_setRF_DimmerLights
 15824  0974  086C               	movf	_product,w
 15825  0975  3E0F               	addlw	15
 15826  0976  0086               	movwf	6
 15827  0977  3002               	movlw	2	; select bank4/5
 15828  0978  0087               	movwf	7
 15829  0979  085E               	movf	??_setRF_DimmerLights,w
 15830  097A  0081               	movwf	1
 15831  097B  0008               	return
 15832  097C                     __end_of_setRF_DimmerLights:	
 15833                           
 15834                           	psect	text102
 15835  1359                     __ptext102:	
 15836 ;; *************** function _setPercentValue *****************
 15837 ;; Defined at:
 15838 ;;		line 777 in file "../src/Dimmer_B1.c"
 15839 ;; Parameters:    Size  Location     Type
 15840 ;;  value           1    wreg     unsigned char 
 15841 ;; Auto vars:     Size  Location     Type
 15842 ;;  value           1   57[BANK0 ] unsigned char 
 15843 ;;  i               3   58[BANK0 ] float 
 15844 ;; Return value:  Size  Location     Type
 15845 ;;                  1    wreg      unsigned char 
 15846 ;; Registers used:
 15847 ;;		wreg, status,2, status,0, pclath, cstack
 15848 ;; Tracked objects:
 15849 ;;		On entry : 0/0
 15850 ;;		On exit  : 0/0
 15851 ;;		Unchanged: 0/0
 15852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15854 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15856 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15857 ;;Total ram usage:        4 bytes
 15858 ;; Hardware stack levels used:    1
 15859 ;; Hardware stack levels required when called:    7
 15860 ;; This function calls:
 15861 ;;		___awtoft
 15862 ;;		___ftdiv
 15863 ;;		___fttol
 15864 ;; This function is called by:
 15865 ;;		_Flash_Memory_Initialization
 15866 ;;		_setRF_DimmerLights
 15867 ;; This function uses a non-reentrant model
 15868 ;;
 15869                           
 15870                           
 15871                           ;psect for function _setPercentValue
 15872  1359                     _setPercentValue:	
 15873                           
 15874                           ;incstack = 0
 15875                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15876                           ;setPercentValue@value stored from wreg
 15877  1359  0020               	movlb	0	; select bank0
 15878  135A  00D9               	movwf	setPercentValue@value
 15879                           
 15880                           ;Dimmer_B1.c: 779: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 15881  135B  3000               	movlw	0
 15882  135C  00DA               	movwf	setPercentValue@i
 15883  135D  30E0               	movlw	224
 15884  135E  00DB               	movwf	setPercentValue@i+1
 15885  135F  3041               	movlw	65
 15886  1360  00DC               	movwf	setPercentValue@i+2
 15887                           
 15888                           ;Dimmer_B1.c: 780: i /= 100;
 15889  1361  3000               	movlw	0
 15890  1362  00AE               	movwf	___ftdiv@f2
 15891  1363  30C8               	movlw	200
 15892  1364  00AF               	movwf	___ftdiv@f2+1
 15893  1365  3042               	movlw	66
 15894  1366  00B0               	movwf	___ftdiv@f2+2
 15895  1367  085A               	movf	setPercentValue@i,w
 15896  1368  00B1               	movwf	___ftdiv@f1
 15897  1369  085B               	movf	setPercentValue@i+1,w
 15898  136A  00B2               	movwf	___ftdiv@f1+1
 15899  136B  085C               	movf	setPercentValue@i+2,w
 15900  136C  00B3               	movwf	___ftdiv@f1+2
 15901  136D  318D  25E4  3193   	fcall	___ftdiv
 15902  1370  0020               	movlb	0	; select bank0
 15903  1371  082E               	movf	?___ftdiv,w
 15904  1372  00DA               	movwf	setPercentValue@i
 15905  1373  082F               	movf	?___ftdiv+1,w
 15906  1374  00DB               	movwf	setPercentValue@i+1
 15907  1375  0830               	movf	?___ftdiv+2,w
 15908  1376  00DC               	movwf	setPercentValue@i+2
 15909                           
 15910                           ;Dimmer_B1.c: 781: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 15911  1377  0859               	movf	setPercentValue@value,w
 15912  1378  3EE0               	addlw	224
 15913  1379  00A8               	movwf	___awtoft@c
 15914  137A  30FF               	movlw	255
 15915  137B  1803               	skipnc
 15916  137C  3000               	movlw	0
 15917  137D  00A9               	movwf	___awtoft@c+1
 15918  137E  319E  2684  3193   	fcall	___awtoft
 15919  1381  0020               	movlb	0	; select bank0
 15920  1382  0828               	movf	?___awtoft,w
 15921  1383  00B1               	movwf	___ftdiv@f1
 15922  1384  0829               	movf	?___awtoft+1,w
 15923  1385  00B2               	movwf	___ftdiv@f1+1
 15924  1386  082A               	movf	?___awtoft+2,w
 15925  1387  00B3               	movwf	___ftdiv@f1+2
 15926  1388  085A               	movf	setPercentValue@i,w
 15927  1389  00AE               	movwf	___ftdiv@f2
 15928  138A  085B               	movf	setPercentValue@i+1,w
 15929  138B  00AF               	movwf	___ftdiv@f2+1
 15930  138C  085C               	movf	setPercentValue@i+2,w
 15931  138D  00B0               	movwf	___ftdiv@f2+2
 15932  138E  318D  25E4  3193   	fcall	___ftdiv
 15933  1391  0020               	movlb	0	; select bank0
 15934  1392  082E               	movf	?___ftdiv,w
 15935  1393  00CB               	movwf	___fttol@f1
 15936  1394  082F               	movf	?___ftdiv+1,w
 15937  1395  00CC               	movwf	___fttol@f1+1
 15938  1396  0830               	movf	?___ftdiv+2,w
 15939  1397  00CD               	movwf	___fttol@f1+2
 15940  1398  318C  2445         	fcall	___fttol
 15941  139A  0020               	movlb	0	; select bank0
 15942  139B  034B               	decf	?___fttol,w
 15943  139C  3AFF               	xorlw	255
 15944  139D  3E64               	addlw	100
 15945  139E  0008               	return
 15946  139F                     __end_of_setPercentValue:	
 15947                           
 15948                           	psect	text103
 15949  0C45                     __ptext103:	
 15950 ;; *************** function ___fttol *****************
 15951 ;; Defined at:
 15952 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15953 ;; Parameters:    Size  Location     Type
 15954 ;;  f1              3   43[BANK0 ] float 
 15955 ;; Auto vars:     Size  Location     Type
 15956 ;;  lval            4   52[BANK0 ] unsigned long 
 15957 ;;  exp1            1   56[BANK0 ] unsigned char 
 15958 ;;  sign1           1   51[BANK0 ] unsigned char 
 15959 ;; Return value:  Size  Location     Type
 15960 ;;                  4   43[BANK0 ] long 
 15961 ;; Registers used:
 15962 ;;		wreg, status,2, status,0
 15963 ;; Tracked objects:
 15964 ;;		On entry : 0/0
 15965 ;;		On exit  : 0/0
 15966 ;;		Unchanged: 0/0
 15967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15968 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15969 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15970 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15971 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15972 ;;Total ram usage:       14 bytes
 15973 ;; Hardware stack levels used:    1
 15974 ;; Hardware stack levels required when called:    5
 15975 ;; This function calls:
 15976 ;;		Nothing
 15977 ;; This function is called by:
 15978 ;;		_getPercentValue
 15979 ;;		_setPercentValue
 15980 ;; This function uses a non-reentrant model
 15981 ;;
 15982                           
 15983                           
 15984                           ;psect for function ___fttol
 15985  0C45                     ___fttol:	
 15986                           
 15987                           ;incstack = 0
 15988                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15989  0C45  0020               	movlb	0	; select bank0
 15990  0C46  084B               	movf	___fttol@f1,w
 15991  0C47  00CF               	movwf	??___fttol
 15992  0C48  084C               	movf	___fttol@f1+1,w
 15993  0C49  00D0               	movwf	??___fttol+1
 15994  0C4A  084D               	movf	___fttol@f1+2,w
 15995  0C4B  00D1               	movwf	??___fttol+2
 15996  0C4C  1003               	clrc
 15997  0C4D  0D50               	rlf	??___fttol+1,w
 15998  0C4E  0D51               	rlf	??___fttol+2,w
 15999  0C4F  00D2               	movwf	??___fttol+3
 16000  0C50  0852               	movf	??___fttol+3,w
 16001  0C51  00D8               	movwf	___fttol@exp1
 16002  0C52  08D8               	movf	___fttol@exp1,f
 16003  0C53  1D03               	skipz
 16004  0C54  2C5E               	goto	l6086
 16005  0C55  3000               	movlw	0
 16006  0C56  00CE               	movwf	?___fttol+3
 16007  0C57  3000               	movlw	0
 16008  0C58  00CD               	movwf	?___fttol+2
 16009  0C59  3000               	movlw	0
 16010  0C5A  00CC               	movwf	?___fttol+1
 16011  0C5B  3000               	movlw	0
 16012  0C5C  00CB               	movwf	?___fttol
 16013  0C5D  0008               	return
 16014  0C5E                     l6086:	
 16015  0C5E  084B               	movf	___fttol@f1,w
 16016  0C5F  00CF               	movwf	??___fttol
 16017  0C60  084C               	movf	___fttol@f1+1,w
 16018  0C61  00D0               	movwf	??___fttol+1
 16019  0C62  084D               	movf	___fttol@f1+2,w
 16020  0C63  00D1               	movwf	??___fttol+2
 16021  0C64  3017               	movlw	23
 16022  0C65                     u4815:	
 16023  0C65  36D1               	lsrf	??___fttol+2,f
 16024  0C66  0CD0               	rrf	??___fttol+1,f
 16025  0C67  0CCF               	rrf	??___fttol,f
 16026  0C68  0B89               	decfsz	9,f
 16027  0C69  2C65               	goto	u4815
 16028  0C6A  084F               	movf	??___fttol,w
 16029  0C6B  00D2               	movwf	??___fttol+3
 16030  0C6C  0852               	movf	??___fttol+3,w
 16031  0C6D  00D3               	movwf	___fttol@sign1
 16032  0C6E  17CC               	bsf	___fttol@f1+1,7
 16033  0C6F  30FF               	movlw	255
 16034  0C70  05CB               	andwf	___fttol@f1,f
 16035  0C71  30FF               	movlw	255
 16036  0C72  05CC               	andwf	___fttol@f1+1,f
 16037  0C73  3000               	movlw	0
 16038  0C74  05CD               	andwf	___fttol@f1+2,f
 16039  0C75  084B               	movf	___fttol@f1,w
 16040  0C76  00D4               	movwf	___fttol@lval
 16041  0C77  084C               	movf	___fttol@f1+1,w
 16042  0C78  00D5               	movwf	___fttol@lval+1
 16043  0C79  084D               	movf	___fttol@f1+2,w
 16044  0C7A  00D6               	movwf	___fttol@lval+2
 16045  0C7B  01D7               	clrf	___fttol@lval+3
 16046  0C7C  308E               	movlw	142
 16047  0C7D  02D8               	subwf	___fttol@exp1,f
 16048  0C7E  1FD8               	btfss	___fttol@exp1,7
 16049  0C7F  2C9C               	goto	l6106
 16050  0C80  0858               	movf	___fttol@exp1,w
 16051  0C81  3A80               	xorlw	128
 16052  0C82  3E8F               	addlw	143
 16053  0C83  1803               	skipnc
 16054  0C84  2C8E               	goto	l6104
 16055  0C85  3000               	movlw	0
 16056  0C86  00CE               	movwf	?___fttol+3
 16057  0C87  3000               	movlw	0
 16058  0C88  00CD               	movwf	?___fttol+2
 16059  0C89  3000               	movlw	0
 16060  0C8A  00CC               	movwf	?___fttol+1
 16061  0C8B  3000               	movlw	0
 16062  0C8C  00CB               	movwf	?___fttol
 16063  0C8D  0008               	return
 16064  0C8E                     l6104:	
 16065  0C8E  3001               	movlw	1
 16066  0C8F                     u4845:	
 16067  0C8F  36D7               	lsrf	___fttol@lval+3,f
 16068  0C90  0CD6               	rrf	___fttol@lval+2,f
 16069  0C91  0CD5               	rrf	___fttol@lval+1,f
 16070  0C92  0CD4               	rrf	___fttol@lval,f
 16071  0C93  0B89               	decfsz	9,f
 16072  0C94  2C8F               	goto	u4845
 16073  0C95  3001               	movlw	1
 16074  0C96  00CF               	movwf	??___fttol
 16075  0C97  084F               	movf	??___fttol,w
 16076  0C98  07D8               	addwf	___fttol@exp1,f
 16077  0C99  1903               	btfsc	3,2
 16078  0C9A  2CB5               	goto	l6116
 16079  0C9B  2C8E               	goto	l6104
 16080  0C9C                     l6106:	
 16081  0C9C  3018               	movlw	24
 16082  0C9D  0258               	subwf	___fttol@exp1,w
 16083  0C9E  1C03               	skipc
 16084  0C9F  2CB2               	goto	l6114
 16085  0CA0  3000               	movlw	0
 16086  0CA1  00CE               	movwf	?___fttol+3
 16087  0CA2  3000               	movlw	0
 16088  0CA3  00CD               	movwf	?___fttol+2
 16089  0CA4  3000               	movlw	0
 16090  0CA5  00CC               	movwf	?___fttol+1
 16091  0CA6  3000               	movlw	0
 16092  0CA7  00CB               	movwf	?___fttol
 16093  0CA8  0008               	return
 16094  0CA9                     l6112:	
 16095  0CA9  3001               	movlw	1
 16096  0CAA                     u4875:	
 16097  0CAA  35D4               	lslf	___fttol@lval,f
 16098  0CAB  0DD5               	rlf	___fttol@lval+1,f
 16099  0CAC  0DD6               	rlf	___fttol@lval+2,f
 16100  0CAD  0DD7               	rlf	___fttol@lval+3,f
 16101  0CAE  0B89               	decfsz	9,f
 16102  0CAF  2CAA               	goto	u4875
 16103  0CB0  3001               	movlw	1
 16104  0CB1  02D8               	subwf	___fttol@exp1,f
 16105  0CB2                     l6114:	
 16106  0CB2  08D8               	movf	___fttol@exp1,f
 16107  0CB3  1D03               	skipz
 16108  0CB4  2CA9               	goto	l6112
 16109  0CB5                     l6116:	
 16110  0CB5  0853               	movf	___fttol@sign1,w
 16111  0CB6  1903               	btfsc	3,2
 16112  0CB7  2CC3               	goto	l6120
 16113  0CB8  09D4               	comf	___fttol@lval,f
 16114  0CB9  09D5               	comf	___fttol@lval+1,f
 16115  0CBA  09D6               	comf	___fttol@lval+2,f
 16116  0CBB  09D7               	comf	___fttol@lval+3,f
 16117  0CBC  0AD4               	incf	___fttol@lval,f
 16118  0CBD  1903               	skipnz
 16119  0CBE  0AD5               	incf	___fttol@lval+1,f
 16120  0CBF  1903               	skipnz
 16121  0CC0  0AD6               	incf	___fttol@lval+2,f
 16122  0CC1  1903               	skipnz
 16123  0CC2  0AD7               	incf	___fttol@lval+3,f
 16124  0CC3                     l6120:	
 16125  0CC3  0857               	movf	___fttol@lval+3,w
 16126  0CC4  00CE               	movwf	?___fttol+3
 16127  0CC5  0856               	movf	___fttol@lval+2,w
 16128  0CC6  00CD               	movwf	?___fttol+2
 16129  0CC7  0855               	movf	___fttol@lval+1,w
 16130  0CC8  00CC               	movwf	?___fttol+1
 16131  0CC9  0854               	movf	___fttol@lval,w
 16132  0CCA  00CB               	movwf	?___fttol
 16133  0CCB  0008               	return
 16134  0CCC                     __end_of___fttol:	
 16135                           
 16136                           	psect	text104
 16137  0DE4                     __ptext104:	
 16138 ;; *************** function ___ftdiv *****************
 16139 ;; Defined at:
 16140 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16141 ;; Parameters:    Size  Location     Type
 16142 ;;  f2              3   14[BANK0 ] float 
 16143 ;;  f1              3   17[BANK0 ] float 
 16144 ;; Auto vars:     Size  Location     Type
 16145 ;;  f3              3   25[BANK0 ] float 
 16146 ;;  sign            1   29[BANK0 ] unsigned char 
 16147 ;;  exp             1   28[BANK0 ] unsigned char 
 16148 ;;  cntr            1   24[BANK0 ] unsigned char 
 16149 ;; Return value:  Size  Location     Type
 16150 ;;                  3   14[BANK0 ] float 
 16151 ;; Registers used:
 16152 ;;		wreg, status,2, status,0, pclath, cstack
 16153 ;; Tracked objects:
 16154 ;;		On entry : 0/0
 16155 ;;		On exit  : 0/0
 16156 ;;		Unchanged: 0/0
 16157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16158 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16159 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16160 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16161 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16162 ;;Total ram usage:       16 bytes
 16163 ;; Hardware stack levels used:    1
 16164 ;; Hardware stack levels required when called:    6
 16165 ;; This function calls:
 16166 ;;		___ftpack
 16167 ;; This function is called by:
 16168 ;;		_getPercentValue
 16169 ;;		_setPercentValue
 16170 ;; This function uses a non-reentrant model
 16171 ;;
 16172                           
 16173                           
 16174                           ;psect for function ___ftdiv
 16175  0DE4                     ___ftdiv:	
 16176                           
 16177                           ;incstack = 0
 16178                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16179  0DE4  0020               	movlb	0	; select bank0
 16180  0DE5  0831               	movf	___ftdiv@f1,w
 16181  0DE6  00B4               	movwf	??___ftdiv
 16182  0DE7  0832               	movf	___ftdiv@f1+1,w
 16183  0DE8  00B5               	movwf	??___ftdiv+1
 16184  0DE9  0833               	movf	___ftdiv@f1+2,w
 16185  0DEA  00B6               	movwf	??___ftdiv+2
 16186  0DEB  1003               	clrc
 16187  0DEC  0D35               	rlf	??___ftdiv+1,w
 16188  0DED  0D36               	rlf	??___ftdiv+2,w
 16189  0DEE  00B7               	movwf	??___ftdiv+3
 16190  0DEF  0837               	movf	??___ftdiv+3,w
 16191  0DF0  00BC               	movwf	___ftdiv@exp
 16192  0DF1  08BC               	movf	___ftdiv@exp,f
 16193  0DF2  1D03               	skipz
 16194  0DF3  2DFB               	goto	l5994
 16195  0DF4  3000               	movlw	0
 16196  0DF5  00AE               	movwf	?___ftdiv
 16197  0DF6  3000               	movlw	0
 16198  0DF7  00AF               	movwf	?___ftdiv+1
 16199  0DF8  3000               	movlw	0
 16200  0DF9  00B0               	movwf	?___ftdiv+2
 16201  0DFA  0008               	return
 16202  0DFB                     l5994:	
 16203  0DFB  082E               	movf	___ftdiv@f2,w
 16204  0DFC  00B4               	movwf	??___ftdiv
 16205  0DFD  082F               	movf	___ftdiv@f2+1,w
 16206  0DFE  00B5               	movwf	??___ftdiv+1
 16207  0DFF  0830               	movf	___ftdiv@f2+2,w
 16208  0E00  00B6               	movwf	??___ftdiv+2
 16209  0E01  1003               	clrc
 16210  0E02  0D35               	rlf	??___ftdiv+1,w
 16211  0E03  0D36               	rlf	??___ftdiv+2,w
 16212  0E04  00B7               	movwf	??___ftdiv+3
 16213  0E05  0837               	movf	??___ftdiv+3,w
 16214  0E06  00BD               	movwf	___ftdiv@sign
 16215  0E07  08BD               	movf	___ftdiv@sign,f
 16216  0E08  1D03               	skipz
 16217  0E09  2E11               	goto	l6000
 16218  0E0A  3000               	movlw	0
 16219  0E0B  00AE               	movwf	?___ftdiv
 16220  0E0C  3000               	movlw	0
 16221  0E0D  00AF               	movwf	?___ftdiv+1
 16222  0E0E  3000               	movlw	0
 16223  0E0F  00B0               	movwf	?___ftdiv+2
 16224  0E10  0008               	return
 16225  0E11                     l6000:	
 16226  0E11  3000               	movlw	0
 16227  0E12  00B9               	movwf	___ftdiv@f3
 16228  0E13  3000               	movlw	0
 16229  0E14  00BA               	movwf	___ftdiv@f3+1
 16230  0E15  3000               	movlw	0
 16231  0E16  00BB               	movwf	___ftdiv@f3+2
 16232  0E17  3089               	movlw	137
 16233  0E18  073D               	addwf	___ftdiv@sign,w
 16234  0E19  00B4               	movwf	??___ftdiv
 16235  0E1A  0834               	movf	??___ftdiv,w
 16236  0E1B  02BC               	subwf	___ftdiv@exp,f
 16237  0E1C  0831               	movf	___ftdiv@f1,w
 16238  0E1D  00B4               	movwf	??___ftdiv
 16239  0E1E  0832               	movf	___ftdiv@f1+1,w
 16240  0E1F  00B5               	movwf	??___ftdiv+1
 16241  0E20  0833               	movf	___ftdiv@f1+2,w
 16242  0E21  00B6               	movwf	??___ftdiv+2
 16243  0E22  3010               	movlw	16
 16244  0E23                     u4625:	
 16245  0E23  36B6               	lsrf	??___ftdiv+2,f
 16246  0E24  0CB5               	rrf	??___ftdiv+1,f
 16247  0E25  0CB4               	rrf	??___ftdiv,f
 16248  0E26  0B89               	decfsz	9,f
 16249  0E27  2E23               	goto	u4625
 16250  0E28  0834               	movf	??___ftdiv,w
 16251  0E29  00B7               	movwf	??___ftdiv+3
 16252  0E2A  0837               	movf	??___ftdiv+3,w
 16253  0E2B  00BD               	movwf	___ftdiv@sign
 16254  0E2C  082E               	movf	___ftdiv@f2,w
 16255  0E2D  00B4               	movwf	??___ftdiv
 16256  0E2E  082F               	movf	___ftdiv@f2+1,w
 16257  0E2F  00B5               	movwf	??___ftdiv+1
 16258  0E30  0830               	movf	___ftdiv@f2+2,w
 16259  0E31  00B6               	movwf	??___ftdiv+2
 16260  0E32  3010               	movlw	16
 16261  0E33                     u4635:	
 16262  0E33  36B6               	lsrf	??___ftdiv+2,f
 16263  0E34  0CB5               	rrf	??___ftdiv+1,f
 16264  0E35  0CB4               	rrf	??___ftdiv,f
 16265  0E36  0B89               	decfsz	9,f
 16266  0E37  2E33               	goto	u4635
 16267  0E38  0834               	movf	??___ftdiv,w
 16268  0E39  00B7               	movwf	??___ftdiv+3
 16269  0E3A  0837               	movf	??___ftdiv+3,w
 16270  0E3B  06BD               	xorwf	___ftdiv@sign,f
 16271  0E3C  3080               	movlw	128
 16272  0E3D  00B4               	movwf	??___ftdiv
 16273  0E3E  0834               	movf	??___ftdiv,w
 16274  0E3F  05BD               	andwf	___ftdiv@sign,f
 16275  0E40  17B2               	bsf	___ftdiv@f1+1,7
 16276  0E41  30FF               	movlw	255
 16277  0E42  05B1               	andwf	___ftdiv@f1,f
 16278  0E43  30FF               	movlw	255
 16279  0E44  05B2               	andwf	___ftdiv@f1+1,f
 16280  0E45  3000               	movlw	0
 16281  0E46  05B3               	andwf	___ftdiv@f1+2,f
 16282  0E47  17AF               	bsf	___ftdiv@f2+1,7
 16283  0E48  30FF               	movlw	255
 16284  0E49  05AE               	andwf	___ftdiv@f2,f
 16285  0E4A  30FF               	movlw	255
 16286  0E4B  05AF               	andwf	___ftdiv@f2+1,f
 16287  0E4C  3000               	movlw	0
 16288  0E4D  05B0               	andwf	___ftdiv@f2+2,f
 16289  0E4E  3018               	movlw	24
 16290  0E4F  00B4               	movwf	??___ftdiv
 16291  0E50  0834               	movf	??___ftdiv,w
 16292  0E51  00B8               	movwf	___ftdiv@cntr
 16293  0E52                     l6014:	
 16294  0E52  3001               	movlw	1
 16295  0E53                     u4645:	
 16296  0E53  35B9               	lslf	___ftdiv@f3,f
 16297  0E54  0DBA               	rlf	___ftdiv@f3+1,f
 16298  0E55  0DBB               	rlf	___ftdiv@f3+2,f
 16299  0E56  0B89               	decfsz	9,f
 16300  0E57  2E53               	goto	u4645
 16301  0E58  0830               	movf	___ftdiv@f2+2,w
 16302  0E59  0233               	subwf	___ftdiv@f1+2,w
 16303  0E5A  1D03               	skipz
 16304  0E5B  2E62               	goto	u4655
 16305  0E5C  082F               	movf	___ftdiv@f2+1,w
 16306  0E5D  0232               	subwf	___ftdiv@f1+1,w
 16307  0E5E  1D03               	skipz
 16308  0E5F  2E62               	goto	u4655
 16309  0E60  082E               	movf	___ftdiv@f2,w
 16310  0E61  0231               	subwf	___ftdiv@f1,w
 16311  0E62                     u4655:	
 16312  0E62  1C03               	skipc
 16313  0E63  2E6B               	goto	l6022
 16314  0E64  082E               	movf	___ftdiv@f2,w
 16315  0E65  02B1               	subwf	___ftdiv@f1,f
 16316  0E66  082F               	movf	___ftdiv@f2+1,w
 16317  0E67  3BB2               	subwfb	___ftdiv@f1+1,f
 16318  0E68  0830               	movf	___ftdiv@f2+2,w
 16319  0E69  3BB3               	subwfb	___ftdiv@f1+2,f
 16320  0E6A  1439               	bsf	___ftdiv@f3,0
 16321  0E6B                     l6022:	
 16322  0E6B  3001               	movlw	1
 16323  0E6C                     u4665:	
 16324  0E6C  35B1               	lslf	___ftdiv@f1,f
 16325  0E6D  0DB2               	rlf	___ftdiv@f1+1,f
 16326  0E6E  0DB3               	rlf	___ftdiv@f1+2,f
 16327  0E6F  0B89               	decfsz	9,f
 16328  0E70  2E6C               	goto	u4665
 16329  0E71  3001               	movlw	1
 16330  0E72  02B8               	subwf	___ftdiv@cntr,f
 16331  0E73  1D03               	btfss	3,2
 16332  0E74  2E52               	goto	l6014
 16333  0E75  0839               	movf	___ftdiv@f3,w
 16334  0E76  00A0               	movwf	___ftpack@arg
 16335  0E77  083A               	movf	___ftdiv@f3+1,w
 16336  0E78  00A1               	movwf	___ftpack@arg+1
 16337  0E79  083B               	movf	___ftdiv@f3+2,w
 16338  0E7A  00A2               	movwf	___ftpack@arg+2
 16339  0E7B  083C               	movf	___ftdiv@exp,w
 16340  0E7C  00B4               	movwf	??___ftdiv
 16341  0E7D  0834               	movf	??___ftdiv,w
 16342  0E7E  00A3               	movwf	___ftpack@exp
 16343  0E7F  083D               	movf	___ftdiv@sign,w
 16344  0E80  00B5               	movwf	??___ftdiv+1
 16345  0E81  0835               	movf	??___ftdiv+1,w
 16346  0E82  00A4               	movwf	___ftpack@sign
 16347  0E83  3197  273B         	fcall	___ftpack
 16348  0E85  0020               	movlb	0	; select bank0
 16349  0E86  0820               	movf	?___ftpack,w
 16350  0E87  00AE               	movwf	?___ftdiv
 16351  0E88  0821               	movf	?___ftpack+1,w
 16352  0E89  00AF               	movwf	?___ftdiv+1
 16353  0E8A  0822               	movf	?___ftpack+2,w
 16354  0E8B  00B0               	movwf	?___ftdiv+2
 16355  0E8C  0008               	return
 16356  0E8D                     __end_of___ftdiv:	
 16357                           
 16358                           	psect	text105
 16359  1E84                     __ptext105:	
 16360 ;; *************** function ___awtoft *****************
 16361 ;; Defined at:
 16362 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16363 ;; Parameters:    Size  Location     Type
 16364 ;;  c               2    8[BANK0 ] int 
 16365 ;; Auto vars:     Size  Location     Type
 16366 ;;  sign            1   13[BANK0 ] unsigned char 
 16367 ;; Return value:  Size  Location     Type
 16368 ;;                  3    8[BANK0 ] float 
 16369 ;; Registers used:
 16370 ;;		wreg, status,2, status,0, pclath, cstack
 16371 ;; Tracked objects:
 16372 ;;		On entry : 0/0
 16373 ;;		On exit  : 0/0
 16374 ;;		Unchanged: 0/0
 16375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16376 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16378 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16379 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16380 ;;Total ram usage:        6 bytes
 16381 ;; Hardware stack levels used:    1
 16382 ;; Hardware stack levels required when called:    6
 16383 ;; This function calls:
 16384 ;;		___ftpack
 16385 ;; This function is called by:
 16386 ;;		_getPercentValue
 16387 ;;		_setPercentValue
 16388 ;; This function uses a non-reentrant model
 16389 ;;
 16390                           
 16391                           
 16392                           ;psect for function ___awtoft
 16393  1E84                     ___awtoft:	
 16394                           
 16395                           ;incstack = 0
 16396                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16397  1E84  0020               	movlb	0	; select bank0
 16398  1E85  01AD               	clrf	___awtoft@sign
 16399  1E86  1FA9               	btfss	___awtoft@c+1,7
 16400  1E87  2E8F               	goto	l8504
 16401  1E88  09A8               	comf	___awtoft@c,f
 16402  1E89  09A9               	comf	___awtoft@c+1,f
 16403  1E8A  0AA8               	incf	___awtoft@c,f
 16404  1E8B  1903               	skipnz
 16405  1E8C  0AA9               	incf	___awtoft@c+1,f
 16406  1E8D  01AD               	clrf	___awtoft@sign
 16407  1E8E  0AAD               	incf	___awtoft@sign,f
 16408  1E8F                     l8504:	
 16409  1E8F  0828               	movf	___awtoft@c,w
 16410  1E90  00A0               	movwf	___ftpack@arg
 16411  1E91  0829               	movf	___awtoft@c+1,w
 16412  1E92  00A1               	movwf	___ftpack@arg+1
 16413  1E93  01A2               	clrf	___ftpack@arg+2
 16414  1E94  308E               	movlw	142
 16415  1E95  00AB               	movwf	??___awtoft
 16416  1E96  082B               	movf	??___awtoft,w
 16417  1E97  00A3               	movwf	___ftpack@exp
 16418  1E98  082D               	movf	___awtoft@sign,w
 16419  1E99  00AC               	movwf	??___awtoft+1
 16420  1E9A  082C               	movf	??___awtoft+1,w
 16421  1E9B  00A4               	movwf	___ftpack@sign
 16422  1E9C  3197  273B         	fcall	___ftpack
 16423  1E9E  0020               	movlb	0	; select bank0
 16424  1E9F  0820               	movf	?___ftpack,w
 16425  1EA0  00A8               	movwf	?___awtoft
 16426  1EA1  0821               	movf	?___ftpack+1,w
 16427  1EA2  00A9               	movwf	?___awtoft+1
 16428  1EA3  0822               	movf	?___ftpack+2,w
 16429  1EA4  00AA               	movwf	?___awtoft+2
 16430  1EA5  0008               	return
 16431  1EA6                     __end_of___awtoft:	
 16432                           
 16433                           	psect	text106
 16434  173B                     __ptext106:	
 16435 ;; *************** function ___ftpack *****************
 16436 ;; Defined at:
 16437 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16438 ;; Parameters:    Size  Location     Type
 16439 ;;  arg             3    0[BANK0 ] unsigned um
 16440 ;;  exp             1    3[BANK0 ] unsigned char 
 16441 ;;  sign            1    4[BANK0 ] unsigned char 
 16442 ;; Auto vars:     Size  Location     Type
 16443 ;;		None
 16444 ;; Return value:  Size  Location     Type
 16445 ;;                  3    0[BANK0 ] float 
 16446 ;; Registers used:
 16447 ;;		wreg, status,2, status,0
 16448 ;; Tracked objects:
 16449 ;;		On entry : 0/0
 16450 ;;		On exit  : 0/0
 16451 ;;		Unchanged: 0/0
 16452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16453 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16455 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16456 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16457 ;;Total ram usage:        8 bytes
 16458 ;; Hardware stack levels used:    1
 16459 ;; Hardware stack levels required when called:    5
 16460 ;; This function calls:
 16461 ;;		Nothing
 16462 ;; This function is called by:
 16463 ;;		___awtoft
 16464 ;;		___ftadd
 16465 ;;		___ftdiv
 16466 ;;		___ftmul
 16467 ;; This function uses a non-reentrant model
 16468 ;;
 16469                           
 16470                           
 16471                           ;psect for function ___ftpack
 16472  173B                     ___ftpack:	
 16473                           
 16474                           ;incstack = 0
 16475                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16476  173B  0020               	movlb	0	; select bank0
 16477  173C  0823               	movf	___ftpack@exp,w
 16478  173D  1903               	btfsc	3,2
 16479  173E  2F44               	goto	l5878
 16480  173F  0822               	movf	___ftpack@arg+2,w
 16481  1740  0421               	iorwf	___ftpack@arg+1,w
 16482  1741  0420               	iorwf	___ftpack@arg,w
 16483  1742  1D03               	skipz
 16484  1743  2F55               	goto	l5884
 16485  1744                     l5878:	
 16486  1744  3000               	movlw	0
 16487  1745  00A0               	movwf	?___ftpack
 16488  1746  3000               	movlw	0
 16489  1747  00A1               	movwf	?___ftpack+1
 16490  1748  3000               	movlw	0
 16491  1749  00A2               	movwf	?___ftpack+2
 16492  174A  0008               	return
 16493  174B                     l5882:	
 16494  174B  3001               	movlw	1
 16495  174C  00A5               	movwf	??___ftpack
 16496  174D  0825               	movf	??___ftpack,w
 16497  174E  07A3               	addwf	___ftpack@exp,f
 16498  174F  3001               	movlw	1
 16499  1750                     u4275:	
 16500  1750  36A2               	lsrf	___ftpack@arg+2,f
 16501  1751  0CA1               	rrf	___ftpack@arg+1,f
 16502  1752  0CA0               	rrf	___ftpack@arg,f
 16503  1753  0B89               	decfsz	9,f
 16504  1754  2F50               	goto	u4275
 16505  1755                     l5884:	
 16506  1755  30FE               	movlw	254
 16507  1756  0522               	andwf	___ftpack@arg+2,w
 16508  1757  1903               	btfsc	3,2
 16509  1758  2F6E               	goto	l3028
 16510  1759  2F4B               	goto	l5882
 16511  175A                     l5886:	
 16512  175A  3001               	movlw	1
 16513  175B  00A5               	movwf	??___ftpack
 16514  175C  0825               	movf	??___ftpack,w
 16515  175D  07A3               	addwf	___ftpack@exp,f
 16516  175E  3001               	movlw	1
 16517  175F  07A0               	addwf	___ftpack@arg,f
 16518  1760  3000               	movlw	0
 16519  1761  1803               	skipnc
 16520  1762  3001               	movlw	1
 16521  1763  07A1               	addwf	___ftpack@arg+1,f
 16522  1764  3000               	movlw	0
 16523  1765  1803               	skipnc
 16524  1766  3001               	movlw	1
 16525  1767  07A2               	addwf	___ftpack@arg+2,f
 16526  1768  3001               	movlw	1
 16527  1769                     u4295:	
 16528  1769  36A2               	lsrf	___ftpack@arg+2,f
 16529  176A  0CA1               	rrf	___ftpack@arg+1,f
 16530  176B  0CA0               	rrf	___ftpack@arg,f
 16531  176C  0B89               	decfsz	9,f
 16532  176D  2F69               	goto	u4295
 16533  176E                     l3028:	
 16534  176E  30FF               	movlw	255
 16535  176F  0522               	andwf	___ftpack@arg+2,w
 16536  1770  1903               	btfsc	3,2
 16537  1771  2F7B               	goto	l5894
 16538  1772  2F5A               	goto	l5886
 16539  1773                     l5892:	
 16540  1773  3001               	movlw	1
 16541  1774  02A3               	subwf	___ftpack@exp,f
 16542  1775  3001               	movlw	1
 16543  1776                     u4315:	
 16544  1776  35A0               	lslf	___ftpack@arg,f
 16545  1777  0DA1               	rlf	___ftpack@arg+1,f
 16546  1778  0DA2               	rlf	___ftpack@arg+2,f
 16547  1779  0B89               	decfsz	9,f
 16548  177A  2F76               	goto	u4315
 16549  177B                     l5894:	
 16550  177B  1FA1               	btfss	___ftpack@arg+1,7
 16551  177C  2F73               	goto	l5892
 16552  177D  1823               	btfsc	___ftpack@exp,0
 16553  177E  2F85               	goto	l3034
 16554  177F  30FF               	movlw	255
 16555  1780  05A0               	andwf	___ftpack@arg,f
 16556  1781  307F               	movlw	127
 16557  1782  05A1               	andwf	___ftpack@arg+1,f
 16558  1783  30FF               	movlw	255
 16559  1784  05A2               	andwf	___ftpack@arg+2,f
 16560  1785                     l3034:	
 16561  1785  1003               	clrc
 16562  1786  0CA3               	rrf	___ftpack@exp,f
 16563  1787  0823               	movf	___ftpack@exp,w
 16564  1788  00A5               	movwf	??___ftpack
 16565  1789  01A6               	clrf	??___ftpack+1
 16566  178A  01A7               	clrf	??___ftpack+2
 16567  178B  3010               	movlw	16
 16568  178C                     u4345:	
 16569  178C  35A5               	lslf	??___ftpack,f
 16570  178D  0DA6               	rlf	??___ftpack+1,f
 16571  178E  0DA7               	rlf	??___ftpack+2,f
 16572  178F  0B89               	decfsz	9,f
 16573  1790  2F8C               	goto	u4345
 16574  1791  0825               	movf	??___ftpack,w
 16575  1792  04A0               	iorwf	___ftpack@arg,f
 16576  1793  0826               	movf	??___ftpack+1,w
 16577  1794  04A1               	iorwf	___ftpack@arg+1,f
 16578  1795  0827               	movf	??___ftpack+2,w
 16579  1796  04A2               	iorwf	___ftpack@arg+2,f
 16580  1797  0824               	movf	___ftpack@sign,w
 16581  1798  1903               	btfsc	3,2
 16582  1799  0008               	return
 16583  179A  17A2               	bsf	___ftpack@arg+2,7
 16584  179B  0008               	return
 16585  179C                     __end_of___ftpack:	
 16586                           
 16587                           	psect	text107
 16588  1B02                     __ptext107:	
 16589 ;; *************** function _setRFSW_Status *****************
 16590 ;; Defined at:
 16591 ;;		line 439 in file "../src/RF_Control_B1.c"
 16592 ;; Parameters:    Size  Location     Type
 16593 ;;  sw              1    wreg     unsigned char 
 16594 ;;  command         1    2[BANK0 ] unsigned char 
 16595 ;; Auto vars:     Size  Location     Type
 16596 ;;  sw              1    3[BANK0 ] unsigned char 
 16597 ;; Return value:  Size  Location     Type
 16598 ;;		None               void
 16599 ;; Registers used:
 16600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16601 ;; Tracked objects:
 16602 ;;		On entry : 0/0
 16603 ;;		On exit  : 0/0
 16604 ;;		Unchanged: 0/0
 16605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16606 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;Total ram usage:        2 bytes
 16611 ;; Hardware stack levels used:    1
 16612 ;; Hardware stack levels required when called:    6
 16613 ;; This function calls:
 16614 ;;		_RfSWPointSelect
 16615 ;; This function is called by:
 16616 ;;		_DlyOff_Main
 16617 ;;		_setDimmerLights_ERROR
 16618 ;;		_setControl_Lights_Table
 16619 ;;		_Sw_DimmerOnFunc
 16620 ;;		_Sw_DimmerAdjFunc
 16621 ;; This function uses a non-reentrant model
 16622 ;;
 16623                           
 16624                           
 16625                           ;psect for function _setRFSW_Status
 16626  1B02                     _setRFSW_Status:	
 16627                           
 16628                           ;incstack = 0
 16629                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16630                           ;setRFSW_Status@sw stored from wreg
 16631  1B02  0020               	movlb	0	; select bank0
 16632  1B03  00A3               	movwf	setRFSW_Status@sw
 16633                           
 16634                           ;RF_Control_B1.c: 440: RfSWPointSelect(sw);
 16635  1B04  0823               	movf	setRFSW_Status@sw,w
 16636  1B05  319C  2497         	fcall	_RfSWPointSelect
 16637                           
 16638                           ;RF_Control_B1.c: 441: RFSW->Status = command;
 16639  1B07  0021               	movlb	1	; select bank1
 16640  1B08  084F               	movf	_RFSW^(0+128),w
 16641  1B09  0086               	movwf	6
 16642  1B0A  0187               	clrf	7
 16643  1B0B  0020               	movlb	0	; select bank0
 16644  1B0C  0822               	movf	setRFSW_Status@command,w
 16645  1B0D  1001               	bcf	1,0
 16646  1B0E  1D03               	skipz
 16647  1B0F  1401               	bsf	1,0
 16648  1B10  0008               	return
 16649  1B11                     __end_of_setRFSW_Status:	
 16650                           
 16651                           	psect	text108
 16652  1C97                     __ptext108:	
 16653 ;; *************** function _RfSWPointSelect *****************
 16654 ;; Defined at:
 16655 ;;		line 374 in file "../src/RF_Control_B1.c"
 16656 ;; Parameters:    Size  Location     Type
 16657 ;;  sw              1    wreg     unsigned char 
 16658 ;; Auto vars:     Size  Location     Type
 16659 ;;  sw              1    1[BANK0 ] unsigned char 
 16660 ;; Return value:  Size  Location     Type
 16661 ;;		None               void
 16662 ;; Registers used:
 16663 ;;		wreg
 16664 ;; Tracked objects:
 16665 ;;		On entry : 0/0
 16666 ;;		On exit  : 0/0
 16667 ;;		Unchanged: 0/0
 16668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16671 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16672 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16673 ;;Total ram usage:        2 bytes
 16674 ;; Hardware stack levels used:    1
 16675 ;; Hardware stack levels required when called:    5
 16676 ;; This function calls:
 16677 ;;		Nothing
 16678 ;; This function is called by:
 16679 ;;		_setRFSW_Control
 16680 ;;		_setRFSW_AdjControl
 16681 ;;		_setRFSW_Status
 16682 ;; This function uses a non-reentrant model
 16683 ;;
 16684                           
 16685                           
 16686                           ;psect for function _RfSWPointSelect
 16687  1C97                     _RfSWPointSelect:	
 16688                           
 16689                           ;incstack = 0
 16690                           ; Regs used in _RfSWPointSelect: [wreg]
 16691                           ;RfSWPointSelect@sw stored from wreg
 16692  1C97  0020               	movlb	0	; select bank0
 16693  1C98  00A1               	movwf	RfSWPointSelect@sw
 16694                           
 16695                           ;RF_Control_B1.c: 376: if (sw == 1) {
 16696  1C99  0821               	movf	RfSWPointSelect@sw,w
 16697  1C9A  3A01               	xorlw	1
 16698  1C9B  1D03               	skipz
 16699  1C9C  2CA2               	goto	l2338
 16700                           
 16701                           ;RF_Control_B1.c: 377: RFSW = &RFSW1;
 16702  1C9D  30EC               	movlw	_RFSW1& (0+255)
 16703  1C9E  00A0               	movwf	??_RfSWPointSelect
 16704  1C9F  0820               	movf	??_RfSWPointSelect,w
 16705  1CA0  0021               	movlb	1	; select bank1
 16706  1CA1  00CF               	movwf	_RFSW^(0+128)
 16707  1CA2                     l2338:	
 16708                           
 16709                           ;RF_Control_B1.c: 378: }
 16710                           ;RF_Control_B1.c: 381: if (sw == 2) {
 16711  1CA2  0020               	movlb	0	; select bank0
 16712  1CA3  0821               	movf	RfSWPointSelect@sw,w
 16713  1CA4  3A02               	xorlw	2
 16714  1CA5  1D03               	skipz
 16715  1CA6  0008               	return
 16716                           
 16717                           ;RF_Control_B1.c: 382: RFSW = &RFSW2;
 16718  1CA7  30ED               	movlw	_RFSW2& (0+255)
 16719  1CA8  00A0               	movwf	??_RfSWPointSelect
 16720  1CA9  0820               	movf	??_RfSWPointSelect,w
 16721  1CAA  0021               	movlb	1	; select bank1
 16722  1CAB  00CF               	movwf	_RFSW^(0+128)
 16723  1CAC  0008               	return
 16724  1CAD                     __end_of_RfSWPointSelect:	
 16725                           
 16726                           	psect	text109
 16727  1B4E                     __ptext109:	
 16728 ;; *************** function _setDimmerLights_Trigger *****************
 16729 ;; Defined at:
 16730 ;;		line 714 in file "../src/Dimmer_B1.c"
 16731 ;; Parameters:    Size  Location     Type
 16732 ;;  lights          1    wreg     unsigned char 
 16733 ;;  command         1    2[BANK0 ] unsigned char 
 16734 ;; Auto vars:     Size  Location     Type
 16735 ;;  lights          1    3[BANK0 ] unsigned char 
 16736 ;; Return value:  Size  Location     Type
 16737 ;;		None               void
 16738 ;; Registers used:
 16739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16740 ;; Tracked objects:
 16741 ;;		On entry : 0/0
 16742 ;;		On exit  : 0/0
 16743 ;;		Unchanged: 0/0
 16744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16745 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16748 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16749 ;;Total ram usage:        2 bytes
 16750 ;; Hardware stack levels used:    1
 16751 ;; Hardware stack levels required when called:    6
 16752 ;; This function calls:
 16753 ;;		_DimmerLightsPointSelect
 16754 ;; This function is called by:
 16755 ;;		_DlyOff_Main
 16756 ;;		_setRFSW_Control
 16757 ;;		_Sw_DimmerOnFunc
 16758 ;;		_Sw_DimmerOffFunc
 16759 ;; This function uses a non-reentrant model
 16760 ;;
 16761                           
 16762                           
 16763                           ;psect for function _setDimmerLights_Trigger
 16764  1B4E                     _setDimmerLights_Trigger:	
 16765                           
 16766                           ;incstack = 0
 16767                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16768                           ;setDimmerLights_Trigger@lights stored from wreg
 16769  1B4E  0020               	movlb	0	; select bank0
 16770  1B4F  00A3               	movwf	setDimmerLights_Trigger@lights
 16771                           
 16772                           ;Dimmer_B1.c: 716: DimmerLightsPointSelect(lights);
 16773  1B50  0823               	movf	setDimmerLights_Trigger@lights,w
 16774  1B51  319C  2408         	fcall	_DimmerLightsPointSelect
 16775                           
 16776                           ;Dimmer_B1.c: 717: DimmerLights->Trigger = command;
 16777  1B53  0878               	movf	_DimmerLights,w
 16778  1B54  3E08               	addlw	8
 16779  1B55  0086               	movwf	6
 16780  1B56  3001               	movlw	1	; select bank2/3
 16781  1B57  0087               	movwf	7
 16782  1B58  0020               	movlb	0	; select bank0
 16783  1B59  0822               	movf	setDimmerLights_Trigger@command,w
 16784  1B5A  1101               	bcf	1,2
 16785  1B5B  1D03               	skipz
 16786  1B5C  1501               	bsf	1,2
 16787  1B5D  0008               	return
 16788  1B5E                     __end_of_setDimmerLights_Trigger:	
 16789                           
 16790                           	psect	text110
 16791  1B3E                     __ptext110:	
 16792 ;; *************** function _setDimmerLights_Switch *****************
 16793 ;; Defined at:
 16794 ;;		line 702 in file "../src/Dimmer_B1.c"
 16795 ;; Parameters:    Size  Location     Type
 16796 ;;  lights          1    wreg     unsigned char 
 16797 ;;  command         1    2[BANK0 ] unsigned char 
 16798 ;; Auto vars:     Size  Location     Type
 16799 ;;  lights          1    3[BANK0 ] unsigned char 
 16800 ;; Return value:  Size  Location     Type
 16801 ;;		None               void
 16802 ;; Registers used:
 16803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16804 ;; Tracked objects:
 16805 ;;		On entry : 0/0
 16806 ;;		On exit  : 0/0
 16807 ;;		Unchanged: 0/0
 16808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16809 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;Total ram usage:        2 bytes
 16814 ;; Hardware stack levels used:    1
 16815 ;; Hardware stack levels required when called:    6
 16816 ;; This function calls:
 16817 ;;		_DimmerLightsPointSelect
 16818 ;; This function is called by:
 16819 ;;		_DlyOff_Main
 16820 ;;		_setRFSW_Control
 16821 ;;		_Sw_DimmerOnFunc
 16822 ;;		_Sw_DimmerOffFunc
 16823 ;; This function uses a non-reentrant model
 16824 ;;
 16825                           
 16826                           
 16827                           ;psect for function _setDimmerLights_Switch
 16828  1B3E                     _setDimmerLights_Switch:	
 16829                           
 16830                           ;incstack = 0
 16831                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16832                           ;setDimmerLights_Switch@lights stored from wreg
 16833  1B3E  0020               	movlb	0	; select bank0
 16834  1B3F  00A3               	movwf	setDimmerLights_Switch@lights
 16835                           
 16836                           ;Dimmer_B1.c: 704: DimmerLightsPointSelect(lights);
 16837  1B40  0823               	movf	setDimmerLights_Switch@lights,w
 16838  1B41  319C  2408         	fcall	_DimmerLightsPointSelect
 16839                           
 16840                           ;Dimmer_B1.c: 705: DimmerLights->Switch = command;
 16841  1B43  0878               	movf	_DimmerLights,w
 16842  1B44  3E08               	addlw	8
 16843  1B45  0086               	movwf	6
 16844  1B46  3001               	movlw	1	; select bank2/3
 16845  1B47  0087               	movwf	7
 16846  1B48  0020               	movlb	0	; select bank0
 16847  1B49  0822               	movf	setDimmerLights_Switch@command,w
 16848  1B4A  1081               	bcf	1,1
 16849  1B4B  1D03               	skipz
 16850  1B4C  1481               	bsf	1,1
 16851  1B4D  0008               	return
 16852  1B4E                     __end_of_setDimmerLights_Switch:	
 16853                           
 16854                           	psect	text111
 16855  1C08                     __ptext111:	
 16856 ;; *************** function _DimmerLightsPointSelect *****************
 16857 ;; Defined at:
 16858 ;;		line 324 in file "../src/Dimmer_B1.c"
 16859 ;; Parameters:    Size  Location     Type
 16860 ;;  lights          1    wreg     unsigned char 
 16861 ;; Auto vars:     Size  Location     Type
 16862 ;;  lights          1    1[BANK0 ] unsigned char 
 16863 ;; Return value:  Size  Location     Type
 16864 ;;		None               void
 16865 ;; Registers used:
 16866 ;;		wreg
 16867 ;; Tracked objects:
 16868 ;;		On entry : 0/0
 16869 ;;		On exit  : 0/0
 16870 ;;		Unchanged: 0/0
 16871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16874 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16875 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16876 ;;Total ram usage:        2 bytes
 16877 ;; Hardware stack levels used:    1
 16878 ;; Hardware stack levels required when called:    5
 16879 ;; This function calls:
 16880 ;;		Nothing
 16881 ;; This function is called by:
 16882 ;;		_setDimmerLights_Initialization
 16883 ;;		_setDimmerLights_Main
 16884 ;;		_setDimmerLights_ERROR
 16885 ;;		_setDimmerLights_TriggerERROR
 16886 ;;		_setDimmerLights
 16887 ;;		_setDimmerLights_Adj
 16888 ;;		_setDimmerLights_AdjRF
 16889 ;;		_setDimmerLights_Switch
 16890 ;;		_setDimmerLights_AdjGo
 16891 ;;		_setDimmerLights_Trigger
 16892 ;;		_setDimmerLights_TriggerAdj
 16893 ;;		_setDimmerLights_Clear
 16894 ;;		_setDimmerLights_GO
 16895 ;;		_setDimmerLights_MaxmumValue
 16896 ;; This function uses a non-reentrant model
 16897 ;;
 16898                           
 16899                           
 16900                           ;psect for function _DimmerLightsPointSelect
 16901  1C08                     _DimmerLightsPointSelect:	
 16902                           
 16903                           ;incstack = 0
 16904                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16905                           ;DimmerLightsPointSelect@lights stored from wreg
 16906  1C08  0020               	movlb	0	; select bank0
 16907  1C09  00A1               	movwf	DimmerLightsPointSelect@lights
 16908                           
 16909                           ;Dimmer_B1.c: 326: if (lights == 1) {
 16910  1C0A  0821               	movf	DimmerLightsPointSelect@lights,w
 16911  1C0B  3A01               	xorlw	1
 16912  1C0C  1D03               	skipz
 16913  1C0D  2C12               	goto	l824
 16914                           
 16915                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 16916  1C0E  303D               	movlw	_DimmerLights1& (0+255)
 16917  1C0F  00A0               	movwf	??_DimmerLightsPointSelect
 16918  1C10  0820               	movf	??_DimmerLightsPointSelect,w
 16919  1C11  00F8               	movwf	_DimmerLights
 16920  1C12                     l824:	
 16921                           
 16922                           ;Dimmer_B1.c: 328: }
 16923                           ;Dimmer_B1.c: 331: if (lights == 2) {
 16924  1C12  0821               	movf	DimmerLightsPointSelect@lights,w
 16925  1C13  3A02               	xorlw	2
 16926  1C14  1D03               	skipz
 16927  1C15  0008               	return
 16928                           
 16929                           ;Dimmer_B1.c: 332: DimmerLights = &DimmerLights2;
 16930  1C16  304C               	movlw	_DimmerLights2& (0+255)
 16931  1C17  00A0               	movwf	??_DimmerLightsPointSelect
 16932  1C18  0820               	movf	??_DimmerLightsPointSelect,w
 16933  1C19  00F8               	movwf	_DimmerLights
 16934  1C1A  0008               	return
 16935  1C1B                     __end_of_DimmerLightsPointSelect:	
 16936                           
 16937                           	psect	text112
 16938  15CA                     __ptext112:	
 16939 ;; *************** function _setBuz *****************
 16940 ;; Defined at:
 16941 ;;		line 22 in file "../src/Buzzer_B1.c"
 16942 ;; Parameters:    Size  Location     Type
 16943 ;;  count           1    wreg     unsigned char 
 16944 ;;  time            2    9[BANK0 ] int 
 16945 ;; Auto vars:     Size  Location     Type
 16946 ;;  count           1   12[BANK0 ] unsigned char 
 16947 ;; Return value:  Size  Location     Type
 16948 ;;		None               void
 16949 ;; Registers used:
 16950 ;;		wreg, status,2, status,0, pclath, cstack
 16951 ;; Tracked objects:
 16952 ;;		On entry : 0/0
 16953 ;;		On exit  : 0/0
 16954 ;;		Unchanged: 0/0
 16955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16956 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16959 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16960 ;;Total ram usage:        4 bytes
 16961 ;; Hardware stack levels used:    1
 16962 ;; Hardware stack levels required when called:    6
 16963 ;; This function calls:
 16964 ;;		___awdiv
 16965 ;; This function is called by:
 16966 ;;		_DlyOff_Main
 16967 ;;		_setDimmerLights_Main
 16968 ;;		_DimmerLights_Exceptions
 16969 ;;		_my_MainTime
 16970 ;;		_setOverTemp_Exceptions
 16971 ;;		_setLog_Code
 16972 ;;		_setControl_Lights_Table
 16973 ;;		_setRFSW_Control
 16974 ;;		_setSw_Main
 16975 ;;		_Sw_DimmerOnFunc
 16976 ;; This function uses a non-reentrant model
 16977 ;;
 16978                           
 16979                           
 16980                           ;psect for function _setBuz
 16981  15CA                     _setBuz:	
 16982                           
 16983                           ;incstack = 0
 16984                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16985                           ;setBuz@count stored from wreg
 16986  15CA  0020               	movlb	0	; select bank0
 16987  15CB  00AC               	movwf	setBuz@count
 16988                           
 16989                           ;Buzzer_B1.c: 23: time /= 10;
 16990  15CC  300A               	movlw	10
 16991  15CD  00A0               	movwf	___awdiv@divisor
 16992  15CE  3000               	movlw	0
 16993  15CF  00A1               	movwf	___awdiv@divisor+1
 16994  15D0  082A               	movf	setBuz@time+1,w
 16995  15D1  01A3               	clrf	___awdiv@dividend+1
 16996  15D2  07A3               	addwf	___awdiv@dividend+1,f
 16997  15D3  0829               	movf	setBuz@time,w
 16998  15D4  01A2               	clrf	___awdiv@dividend
 16999  15D5  07A2               	addwf	___awdiv@dividend,f
 17000  15D6  3194  24C9  3195   	fcall	___awdiv
 17001  15D9  0020               	movlb	0	; select bank0
 17002  15DA  0821               	movf	?___awdiv+1,w
 17003  15DB  01AA               	clrf	setBuz@time+1
 17004  15DC  07AA               	addwf	setBuz@time+1,f
 17005  15DD  0820               	movf	?___awdiv,w
 17006  15DE  01A9               	clrf	setBuz@time
 17007  15DF  07A9               	addwf	setBuz@time,f
 17008                           
 17009                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 17010  15E0  0021               	movlb	1	; select bank1
 17011  15E1  1C32               	btfss	_Buz1^(0+128),0
 17012  15E2  0008               	return
 17013                           
 17014                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 17015  15E3  18B2               	btfsc	_Buz1^(0+128),1
 17016  15E4  2DFB               	goto	l102
 17017                           
 17018                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 17019  15E5  14B2               	bsf	_Buz1^(0+128),1
 17020                           
 17021                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 17022  15E6  01B3               	clrf	(_Buz1^(0+128)+1)
 17023  15E7  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 17024                           
 17025                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 17026  15E8  0020               	movlb	0	; select bank0
 17027  15E9  082C               	movf	setBuz@count,w
 17028  15EA  00AB               	movwf	??_setBuz
 17029  15EB  082B               	movf	??_setBuz,w
 17030  15EC  0021               	movlb	1	; select bank1
 17031  15ED  00B5               	movwf	(_Buz1^(0+128)+3)
 17032                           
 17033                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 17034  15EE  0020               	movlb	0	; select bank0
 17035  15EF  082A               	movf	setBuz@time+1,w
 17036  15F0  0021               	movlb	1	; select bank1
 17037  15F1  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 17038  15F2  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 17039  15F3  0020               	movlb	0	; select bank0
 17040  15F4  0829               	movf	setBuz@time,w
 17041  15F5  0021               	movlb	1	; select bank1
 17042  15F6  01B8               	clrf	(_Buz1^(0+128)+6)
 17043  15F7  07B8               	addwf	(_Buz1^(0+128)+6),f
 17044                           
 17045                           ;Buzzer_B1.c: 30: RB3 = 1;
 17046  15F8  0020               	movlb	0	; select bank0
 17047  15F9  158D               	bsf	13,3	;volatile
 17048                           
 17049                           ;Buzzer_B1.c: 31: } else {
 17050  15FA  0008               	return
 17051  15FB                     l102:	
 17052                           
 17053                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 17054  15FB  19B2               	btfsc	_Buz1^(0+128),3
 17055  15FC  2E0F               	goto	l104
 17056                           
 17057                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 17058  15FD  15B2               	bsf	_Buz1^(0+128),3
 17059                           
 17060                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 17061  15FE  0020               	movlb	0	; select bank0
 17062  15FF  082C               	movf	setBuz@count,w
 17063  1600  00AB               	movwf	??_setBuz
 17064  1601  082B               	movf	??_setBuz,w
 17065  1602  0021               	movlb	1	; select bank1
 17066  1603  00B6               	movwf	(_Buz1^(0+128)+4)
 17067                           
 17068                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17069  1604  0020               	movlb	0	; select bank0
 17070  1605  082A               	movf	setBuz@time+1,w
 17071  1606  0021               	movlb	1	; select bank1
 17072  1607  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 17073  1608  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 17074  1609  0020               	movlb	0	; select bank0
 17075  160A  0829               	movf	setBuz@time,w
 17076  160B  0021               	movlb	1	; select bank1
 17077  160C  01BA               	clrf	(_Buz1^(0+128)+8)
 17078  160D  07BA               	addwf	(_Buz1^(0+128)+8),f
 17079                           
 17080                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17081  160E  0008               	return
 17082  160F                     l104:	
 17083  160F  1A32               	btfsc	_Buz1^(0+128),4
 17084  1610  0008               	return
 17085                           
 17086                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17087  1611  1632               	bsf	_Buz1^(0+128),4
 17088                           
 17089                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17090  1612  0020               	movlb	0	; select bank0
 17091  1613  082C               	movf	setBuz@count,w
 17092  1614  00AB               	movwf	??_setBuz
 17093  1615  082B               	movf	??_setBuz,w
 17094  1616  0021               	movlb	1	; select bank1
 17095  1617  00B7               	movwf	(_Buz1^(0+128)+5)
 17096                           
 17097                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17098  1618  0020               	movlb	0	; select bank0
 17099  1619  082A               	movf	setBuz@time+1,w
 17100  161A  0021               	movlb	1	; select bank1
 17101  161B  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 17102  161C  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 17103  161D  0020               	movlb	0	; select bank0
 17104  161E  0829               	movf	setBuz@time,w
 17105  161F  0021               	movlb	1	; select bank1
 17106  1620  01BC               	clrf	(_Buz1^(0+128)+10)
 17107  1621  07BC               	addwf	(_Buz1^(0+128)+10),f
 17108  1622  0008               	return
 17109  1623                     __end_of_setBuz:	
 17110                           
 17111                           	psect	text113
 17112  14C9                     __ptext113:	
 17113 ;; *************** function ___awdiv *****************
 17114 ;; Defined at:
 17115 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17116 ;; Parameters:    Size  Location     Type
 17117 ;;  divisor         2    0[BANK0 ] int 
 17118 ;;  dividend        2    2[BANK0 ] int 
 17119 ;; Auto vars:     Size  Location     Type
 17120 ;;  quotient        2    7[BANK0 ] int 
 17121 ;;  sign            1    6[BANK0 ] unsigned char 
 17122 ;;  counter         1    5[BANK0 ] unsigned char 
 17123 ;; Return value:  Size  Location     Type
 17124 ;;                  2    0[BANK0 ] int 
 17125 ;; Registers used:
 17126 ;;		wreg, status,2, status,0
 17127 ;; Tracked objects:
 17128 ;;		On entry : 0/0
 17129 ;;		On exit  : 0/0
 17130 ;;		Unchanged: 0/0
 17131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17132 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17133 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17134 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17135 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17136 ;;Total ram usage:        9 bytes
 17137 ;; Hardware stack levels used:    1
 17138 ;; Hardware stack levels required when called:    5
 17139 ;; This function calls:
 17140 ;;		Nothing
 17141 ;; This function is called by:
 17142 ;;		_setBuz
 17143 ;; This function uses a non-reentrant model
 17144 ;;
 17145                           
 17146                           
 17147                           ;psect for function ___awdiv
 17148  14C9                     ___awdiv:	
 17149                           
 17150                           ;incstack = 0
 17151                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17152  14C9  0020               	movlb	0	; select bank0
 17153  14CA  01A6               	clrf	___awdiv@sign
 17154  14CB  1FA1               	btfss	___awdiv@divisor+1,7
 17155  14CC  2CD4               	goto	l8612
 17156  14CD  09A0               	comf	___awdiv@divisor,f
 17157  14CE  09A1               	comf	___awdiv@divisor+1,f
 17158  14CF  0AA0               	incf	___awdiv@divisor,f
 17159  14D0  1903               	skipnz
 17160  14D1  0AA1               	incf	___awdiv@divisor+1,f
 17161  14D2  01A6               	clrf	___awdiv@sign
 17162  14D3  0AA6               	incf	___awdiv@sign,f
 17163  14D4                     l8612:	
 17164  14D4  1FA3               	btfss	___awdiv@dividend+1,7
 17165  14D5  2CDF               	goto	l8618
 17166  14D6  09A2               	comf	___awdiv@dividend,f
 17167  14D7  09A3               	comf	___awdiv@dividend+1,f
 17168  14D8  0AA2               	incf	___awdiv@dividend,f
 17169  14D9  1903               	skipnz
 17170  14DA  0AA3               	incf	___awdiv@dividend+1,f
 17171  14DB  3001               	movlw	1
 17172  14DC  00A4               	movwf	??___awdiv
 17173  14DD  0824               	movf	??___awdiv,w
 17174  14DE  06A6               	xorwf	___awdiv@sign,f
 17175  14DF                     l8618:	
 17176  14DF  01A7               	clrf	___awdiv@quotient
 17177  14E0  01A8               	clrf	___awdiv@quotient+1
 17178  14E1  0821               	movf	___awdiv@divisor+1,w
 17179  14E2  0420               	iorwf	___awdiv@divisor,w
 17180  14E3  1903               	skipnz
 17181  14E4  2D0E               	goto	l8640
 17182  14E5  01A5               	clrf	___awdiv@counter
 17183  14E6  0AA5               	incf	___awdiv@counter,f
 17184  14E7                     l8628:	
 17185  14E7  1BA1               	btfsc	___awdiv@divisor+1,7
 17186  14E8  2CF3               	goto	l8630
 17187  14E9  3001               	movlw	1
 17188  14EA                     u8685:	
 17189  14EA  35A0               	lslf	___awdiv@divisor,f
 17190  14EB  0DA1               	rlf	___awdiv@divisor+1,f
 17191  14EC  0B89               	decfsz	9,f
 17192  14ED  2CEA               	goto	u8685
 17193  14EE  3001               	movlw	1
 17194  14EF  00A4               	movwf	??___awdiv
 17195  14F0  0824               	movf	??___awdiv,w
 17196  14F1  07A5               	addwf	___awdiv@counter,f
 17197  14F2  2CE7               	goto	l8628
 17198  14F3                     l8630:	
 17199  14F3  3001               	movlw	1
 17200  14F4                     u8705:	
 17201  14F4  35A7               	lslf	___awdiv@quotient,f
 17202  14F5  0DA8               	rlf	___awdiv@quotient+1,f
 17203  14F6  0B89               	decfsz	9,f
 17204  14F7  2CF4               	goto	u8705
 17205  14F8  0821               	movf	___awdiv@divisor+1,w
 17206  14F9  0223               	subwf	___awdiv@dividend+1,w
 17207  14FA  1D03               	skipz
 17208  14FB  2CFE               	goto	u8715
 17209  14FC  0820               	movf	___awdiv@divisor,w
 17210  14FD  0222               	subwf	___awdiv@dividend,w
 17211  14FE                     u8715:	
 17212  14FE  1C03               	skipc
 17213  14FF  2D05               	goto	l8636
 17214  1500  0820               	movf	___awdiv@divisor,w
 17215  1501  02A2               	subwf	___awdiv@dividend,f
 17216  1502  0821               	movf	___awdiv@divisor+1,w
 17217  1503  3BA3               	subwfb	___awdiv@dividend+1,f
 17218  1504  1427               	bsf	___awdiv@quotient,0
 17219  1505                     l8636:	
 17220  1505  3001               	movlw	1
 17221  1506                     u8725:	
 17222  1506  36A1               	lsrf	___awdiv@divisor+1,f
 17223  1507  0CA0               	rrf	___awdiv@divisor,f
 17224  1508  0B89               	decfsz	9,f
 17225  1509  2D06               	goto	u8725
 17226  150A  3001               	movlw	1
 17227  150B  02A5               	subwf	___awdiv@counter,f
 17228  150C  1D03               	btfss	3,2
 17229  150D  2CF3               	goto	l8630
 17230  150E                     l8640:	
 17231  150E  0826               	movf	___awdiv@sign,w
 17232  150F  1903               	btfsc	3,2
 17233  1510  2D16               	goto	l8644
 17234  1511  09A7               	comf	___awdiv@quotient,f
 17235  1512  09A8               	comf	___awdiv@quotient+1,f
 17236  1513  0AA7               	incf	___awdiv@quotient,f
 17237  1514  1903               	skipnz
 17238  1515  0AA8               	incf	___awdiv@quotient+1,f
 17239  1516                     l8644:	
 17240  1516  0828               	movf	___awdiv@quotient+1,w
 17241  1517  01A1               	clrf	?___awdiv+1
 17242  1518  07A1               	addwf	?___awdiv+1,f
 17243  1519  0827               	movf	___awdiv@quotient,w
 17244  151A  01A0               	clrf	?___awdiv
 17245  151B  07A0               	addwf	?___awdiv,f
 17246  151C  0008               	return
 17247  151D                     __end_of___awdiv:	
 17248                           
 17249                           	psect	text114
 17250  1A0D                     __ptext114:	
 17251 ;; *************** function _DelayOff_Initialization *****************
 17252 ;; Defined at:
 17253 ;;		line 26 in file "../src/DelayOff_B1.c"
 17254 ;; Parameters:    Size  Location     Type
 17255 ;;		None
 17256 ;; Auto vars:     Size  Location     Type
 17257 ;;		None
 17258 ;; Return value:  Size  Location     Type
 17259 ;;		None               void
 17260 ;; Registers used:
 17261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17262 ;; Tracked objects:
 17263 ;;		On entry : 0/0
 17264 ;;		On exit  : 0/0
 17265 ;;		Unchanged: 0/0
 17266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17271 ;;Total ram usage:        0 bytes
 17272 ;; Hardware stack levels used:    1
 17273 ;; Hardware stack levels required when called:    7
 17274 ;; This function calls:
 17275 ;;		_DlyOff_Initialization
 17276 ;; This function is called by:
 17277 ;;		_main
 17278 ;; This function uses a non-reentrant model
 17279 ;;
 17280                           
 17281                           
 17282                           ;psect for function _DelayOff_Initialization
 17283  1A0D                     _DelayOff_Initialization:	
 17284                           
 17285                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17286                           
 17287                           ;incstack = 0
 17288                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17289  1A0D  3001               	movlw	1
 17290  1A0E  319A  226F  319A   	fcall	_DlyOff_Initialization
 17291                           
 17292                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17293  1A11  3002               	movlw	2
 17294  1A12  319A  226F         	fcall	_DlyOff_Initialization
 17295  1A14  0008               	return
 17296  1A15                     __end_of_DelayOff_Initialization:	
 17297                           
 17298                           	psect	text115
 17299  1A6F                     __ptext115:	
 17300 ;; *************** function _DlyOff_Initialization *****************
 17301 ;; Defined at:
 17302 ;;		line 56 in file "../src/DelayOff_B1.c"
 17303 ;; Parameters:    Size  Location     Type
 17304 ;;  sw              1    wreg     unsigned char 
 17305 ;; Auto vars:     Size  Location     Type
 17306 ;;  sw              1    2[BANK0 ] unsigned char 
 17307 ;; Return value:  Size  Location     Type
 17308 ;;		None               void
 17309 ;; Registers used:
 17310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17311 ;; Tracked objects:
 17312 ;;		On entry : 0/0
 17313 ;;		On exit  : 0/0
 17314 ;;		Unchanged: 0/0
 17315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17317 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17319 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17320 ;;Total ram usage:        1 bytes
 17321 ;; Hardware stack levels used:    1
 17322 ;; Hardware stack levels required when called:    6
 17323 ;; This function calls:
 17324 ;;		_DelayOffPointSelect
 17325 ;; This function is called by:
 17326 ;;		_DelayOff_Initialization
 17327 ;; This function uses a non-reentrant model
 17328 ;;
 17329                           
 17330                           
 17331                           ;psect for function _DlyOff_Initialization
 17332  1A6F                     _DlyOff_Initialization:	
 17333                           
 17334                           ;incstack = 0
 17335                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17336                           ;DlyOff_Initialization@sw stored from wreg
 17337  1A6F  0020               	movlb	0	; select bank0
 17338  1A70  00A2               	movwf	DlyOff_Initialization@sw
 17339                           
 17340                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17341  1A71  0822               	movf	DlyOff_Initialization@sw,w
 17342  1A72  319C  242F         	fcall	_DelayOffPointSelect
 17343                           
 17344                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 17345  1A74  0876               	movf	_DelayOff,w
 17346  1A75  0086               	movwf	6
 17347  1A76  0187               	clrf	7
 17348  1A77  1401               	bsf	1,0
 17349  1A78  0008               	return
 17350  1A79                     __end_of_DlyOff_Initialization:	
 17351                           
 17352                           	psect	text116
 17353  1C2F                     __ptext116:	
 17354 ;; *************** function _DelayOffPointSelect *****************
 17355 ;; Defined at:
 17356 ;;		line 7 in file "../src/DelayOff_B1.c"
 17357 ;; Parameters:    Size  Location     Type
 17358 ;;  sw              1    wreg     unsigned char 
 17359 ;; Auto vars:     Size  Location     Type
 17360 ;;  sw              1    1[BANK0 ] unsigned char 
 17361 ;; Return value:  Size  Location     Type
 17362 ;;		None               void
 17363 ;; Registers used:
 17364 ;;		wreg
 17365 ;; Tracked objects:
 17366 ;;		On entry : 0/0
 17367 ;;		On exit  : 0/0
 17368 ;;		Unchanged: 0/0
 17369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17371 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17373 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17374 ;;Total ram usage:        2 bytes
 17375 ;; Hardware stack levels used:    1
 17376 ;; Hardware stack levels required when called:    5
 17377 ;; This function calls:
 17378 ;;		Nothing
 17379 ;; This function is called by:
 17380 ;;		_DlyOff_Initialization
 17381 ;;		_DlyOff_Main
 17382 ;;		_setDelayOff_GO
 17383 ;; This function uses a non-reentrant model
 17384 ;;
 17385                           
 17386                           
 17387                           ;psect for function _DelayOffPointSelect
 17388  1C2F                     _DelayOffPointSelect:	
 17389                           
 17390                           ;incstack = 0
 17391                           ; Regs used in _DelayOffPointSelect: [wreg]
 17392                           ;DelayOffPointSelect@sw stored from wreg
 17393  1C2F  0020               	movlb	0	; select bank0
 17394  1C30  00A1               	movwf	DelayOffPointSelect@sw
 17395                           
 17396                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17397  1C31  0821               	movf	DelayOffPointSelect@sw,w
 17398  1C32  3A01               	xorlw	1
 17399  1C33  1D03               	skipz
 17400  1C34  2C3A               	goto	l8542
 17401                           
 17402                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17403  1C35  30E8               	movlw	_DlySw1& (0+255)
 17404  1C36  00A0               	movwf	??_DelayOffPointSelect
 17405  1C37  0820               	movf	??_DelayOffPointSelect,w
 17406  1C38  00F6               	movwf	_DelayOff
 17407                           
 17408                           ;DelayOff_B1.c: 11: }
 17409  1C39  0008               	return
 17410  1C3A                     l8542:	
 17411                           
 17412                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17413  1C3A  0821               	movf	DelayOffPointSelect@sw,w
 17414  1C3B  3A02               	xorlw	2
 17415  1C3C  1D03               	skipz
 17416  1C3D  0008               	return
 17417                           
 17418                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17419  1C3E  30EA               	movlw	_DlySw2& (0+255)
 17420  1C3F  00A0               	movwf	??_DelayOffPointSelect
 17421  1C40  0820               	movf	??_DelayOffPointSelect,w
 17422  1C41  00F6               	movwf	_DelayOff
 17423  1C42  0008               	return
 17424  1C43                     __end_of_DelayOffPointSelect:	
 17425                           
 17426                           	psect	text117
 17427  1C6C                     __ptext117:	
 17428 ;; *************** function _CC2500_PowerOnInitial *****************
 17429 ;; Defined at:
 17430 ;;		line 128 in file "../src/CC2500_B1.c"
 17431 ;; Parameters:    Size  Location     Type
 17432 ;;		None
 17433 ;; Auto vars:     Size  Location     Type
 17434 ;;		None
 17435 ;; Return value:  Size  Location     Type
 17436 ;;		None               void
 17437 ;; Registers used:
 17438 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17439 ;; Tracked objects:
 17440 ;;		On entry : 0/0
 17441 ;;		On exit  : 0/0
 17442 ;;		Unchanged: 0/0
 17443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17448 ;;Total ram usage:        0 bytes
 17449 ;; Hardware stack levels used:    1
 17450 ;; Hardware stack levels required when called:    8
 17451 ;; This function calls:
 17452 ;;		_CC2500_ClearRXFIFO
 17453 ;;		_CC2500_ClearTXFIFO
 17454 ;;		_CC2500_FrequencyCabr
 17455 ;;		_CC2500_InitPATable
 17456 ;;		_CC2500_InitSetREG
 17457 ;;		_CC2500_PowerRST
 17458 ;;		_CC2500_SIDLEMode
 17459 ;; This function is called by:
 17460 ;;		_main
 17461 ;; This function uses a non-reentrant model
 17462 ;;
 17463                           
 17464                           
 17465                           ;psect for function _CC2500_PowerOnInitial
 17466  1C6C                     _CC2500_PowerOnInitial:	
 17467                           
 17468                           ;CC2500_B1.c: 129: CC2500_PowerRST();
 17469                           
 17470                           ;incstack = 0
 17471                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17472  1C6C  3192  228D  319C   	fcall	_CC2500_PowerRST
 17473                           
 17474                           ;CC2500_B1.c: 130: CC2500_InitSetREG();
 17475  1C6F  319F  2781  319C   	fcall	_CC2500_InitSetREG
 17476                           
 17477                           ;CC2500_B1.c: 131: CC2500_InitPATable();
 17478  1C72  319D  25E7  319C   	fcall	_CC2500_InitPATable
 17479                           
 17480                           ;CC2500_B1.c: 132: CC2500_ClearTXFIFO();
 17481  1C75  3199  21D6  319C   	fcall	_CC2500_ClearTXFIFO
 17482                           
 17483                           ;CC2500_B1.c: 133: CC2500_ClearRXFIFO();
 17484  1C78  3199  21D2  319C   	fcall	_CC2500_ClearRXFIFO
 17485                           
 17486                           ;CC2500_B1.c: 134: CC2500_FrequencyCabr();
 17487  1C7B  319A  228F  319C   	fcall	_CC2500_FrequencyCabr
 17488                           
 17489                           ;CC2500_B1.c: 135: CC2500_SIDLEMode();
 17490  1C7E  3199  21DA         	fcall	_CC2500_SIDLEMode
 17491  1C80  0008               	return
 17492  1C81                     __end_of_CC2500_PowerOnInitial:	
 17493                           
 17494                           	psect	text118
 17495  19DA                     __ptext118:	
 17496 ;; *************** function _CC2500_SIDLEMode *****************
 17497 ;; Defined at:
 17498 ;;		line 218 in file "../src/CC2500_B1.c"
 17499 ;; Parameters:    Size  Location     Type
 17500 ;;		None
 17501 ;; Auto vars:     Size  Location     Type
 17502 ;;		None
 17503 ;; Return value:  Size  Location     Type
 17504 ;;		None               void
 17505 ;; Registers used:
 17506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17507 ;; Tracked objects:
 17508 ;;		On entry : 0/0
 17509 ;;		On exit  : 0/0
 17510 ;;		Unchanged: 0/0
 17511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17516 ;;Total ram usage:        0 bytes
 17517 ;; Hardware stack levels used:    1
 17518 ;; Hardware stack levels required when called:    7
 17519 ;; This function calls:
 17520 ;;		_CC2500_WriteCommand
 17521 ;; This function is called by:
 17522 ;;		_CC2500_PowerOnInitial
 17523 ;; This function uses a non-reentrant model
 17524 ;;
 17525                           
 17526                           
 17527                           ;psect for function _CC2500_SIDLEMode
 17528  19DA                     _CC2500_SIDLEMode:	
 17529                           
 17530                           ;CC2500_B1.c: 219: CC2500_WriteCommand(0x36);
 17531                           
 17532                           ;incstack = 0
 17533                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17534  19DA  3036               	movlw	54
 17535  19DB  319D  2523         	fcall	_CC2500_WriteCommand
 17536  19DD  0008               	return
 17537  19DE                     __end_of_CC2500_SIDLEMode:	
 17538                           
 17539                           	psect	text119
 17540  128D                     __ptext119:	
 17541 ;; *************** function _CC2500_PowerRST *****************
 17542 ;; Defined at:
 17543 ;;		line 141 in file "../src/CC2500_B1.c"
 17544 ;; Parameters:    Size  Location     Type
 17545 ;;		None
 17546 ;; Auto vars:     Size  Location     Type
 17547 ;;		None
 17548 ;; Return value:  Size  Location     Type
 17549 ;;		None               void
 17550 ;; Registers used:
 17551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17552 ;; Tracked objects:
 17553 ;;		On entry : 0/0
 17554 ;;		On exit  : 0/0
 17555 ;;		Unchanged: 0/0
 17556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17560 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17561 ;;Total ram usage:        1 bytes
 17562 ;; Hardware stack levels used:    1
 17563 ;; Hardware stack levels required when called:    6
 17564 ;; This function calls:
 17565 ;;		_CC2500_WriteByte
 17566 ;;		_DelayTime_1us
 17567 ;;		_Timeout_Counter
 17568 ;;		_set_TimeoutCleared
 17569 ;; This function is called by:
 17570 ;;		_CC2500_PowerOnInitial
 17571 ;; This function uses a non-reentrant model
 17572 ;;
 17573                           
 17574                           
 17575                           ;psect for function _CC2500_PowerRST
 17576  128D                     _CC2500_PowerRST:	
 17577                           
 17578                           ;CC2500_B1.c: 142: RC1 = 0;
 17579                           
 17580                           ;incstack = 0
 17581                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17582  128D  0020               	movlb	0	; select bank0
 17583  128E  108E               	bcf	14,1	;volatile
 17584                           
 17585                           ;CC2500_B1.c: 143: RC0 = 0;
 17586  128F  100E               	bcf	14,0	;volatile
 17587                           
 17588                           ;CC2500_B1.c: 144: RC4 = 1;
 17589  1290  160E               	bsf	14,4	;volatile
 17590                           
 17591                           ;CC2500_B1.c: 145: DelayTime_1us(10);
 17592  1291  300A               	movlw	10
 17593  1292  00A0               	movwf	DelayTime_1us@count
 17594  1293  3000               	movlw	0
 17595  1294  00A1               	movwf	DelayTime_1us@count+1
 17596  1295  319F  2734  3192   	fcall	_DelayTime_1us
 17597                           
 17598                           ;CC2500_B1.c: 146: RC4 = 0;
 17599  1298  0020               	movlb	0	; select bank0
 17600  1299  120E               	bcf	14,4	;volatile
 17601                           
 17602                           ;CC2500_B1.c: 147: DelayTime_1us(10);
 17603  129A  300A               	movlw	10
 17604  129B  00A0               	movwf	DelayTime_1us@count
 17605  129C  3000               	movlw	0
 17606  129D  00A1               	movwf	DelayTime_1us@count+1
 17607  129E  319F  2734  3192   	fcall	_DelayTime_1us
 17608                           
 17609                           ;CC2500_B1.c: 148: RC4 = 1;
 17610  12A1  0020               	movlb	0	; select bank0
 17611  12A2  160E               	bsf	14,4	;volatile
 17612                           
 17613                           ;CC2500_B1.c: 149: DelayTime_1us(40);
 17614  12A3  3028               	movlw	40
 17615  12A4  00A0               	movwf	DelayTime_1us@count
 17616  12A5  3000               	movlw	0
 17617  12A6  00A1               	movwf	DelayTime_1us@count+1
 17618  12A7  319F  2734  3192   	fcall	_DelayTime_1us
 17619                           
 17620                           ;CC2500_B1.c: 150: RC4 = 0;
 17621  12AA  0020               	movlb	0	; select bank0
 17622  12AB  120E               	bcf	14,4	;volatile
 17623                           
 17624                           ;CC2500_B1.c: 151: SPI0Buffer = 0x30;
 17625  12AC  3030               	movlw	48
 17626  12AD  00A6               	movwf	??_CC2500_PowerRST
 17627  12AE  0826               	movf	??_CC2500_PowerRST,w
 17628  12AF  0021               	movlb	1	; select bank1
 17629  12B0  00D2               	movwf	_SPI0Buffer^(0+128)
 17630                           
 17631                           ;CC2500_B1.c: 152: while (RC2 == 1 && myMain.Timeout == 0) {
 17632  12B1  2AB5               	goto	l9578
 17633  12B2                     l9576:	
 17634                           
 17635                           ;CC2500_B1.c: 153: Timeout_Counter();
 17636  12B2  319C  2457  3192   	fcall	_Timeout_Counter
 17637  12B5                     l9578:	
 17638  12B5  0020               	movlb	0	; select bank0
 17639  12B6  1D0E               	btfss	14,2	;volatile
 17640  12B7  2ABB               	goto	l9582
 17641  12B8  0021               	movlb	1	; select bank1
 17642  12B9  1D2F               	btfss	(_myMain^(0+128)+15),2
 17643  12BA  2AB2               	goto	l9576
 17644  12BB                     l9582:	
 17645                           
 17646                           ;CC2500_B1.c: 154: };
 17647                           ;CC2500_B1.c: 155: set_TimeoutCleared();
 17648  12BB  3199  21E2  3192   	fcall	_set_TimeoutCleared
 17649                           
 17650                           ;CC2500_B1.c: 156: CC2500_WriteByte();
 17651  12BE  319C  24F1  3192   	fcall	_CC2500_WriteByte
 17652                           
 17653                           ;CC2500_B1.c: 157: while (RC2 == 1 && myMain.Timeout == 0) {
 17654  12C1  2AC5               	goto	l9588
 17655  12C2                     l9586:	
 17656                           
 17657                           ;CC2500_B1.c: 158: Timeout_Counter();
 17658  12C2  319C  2457  3192   	fcall	_Timeout_Counter
 17659  12C5                     l9588:	
 17660  12C5  0020               	movlb	0	; select bank0
 17661  12C6  1D0E               	btfss	14,2	;volatile
 17662  12C7  2ACB               	goto	l9592
 17663  12C8  0021               	movlb	1	; select bank1
 17664  12C9  1D2F               	btfss	(_myMain^(0+128)+15),2
 17665  12CA  2AC2               	goto	l9586
 17666  12CB                     l9592:	
 17667                           
 17668                           ;CC2500_B1.c: 159: };
 17669                           ;CC2500_B1.c: 160: set_TimeoutCleared();
 17670  12CB  3199  21E2         	fcall	_set_TimeoutCleared
 17671                           
 17672                           ;CC2500_B1.c: 161: RC0 = 0;
 17673  12CD  0020               	movlb	0	; select bank0
 17674  12CE  100E               	bcf	14,0	;volatile
 17675                           
 17676                           ;CC2500_B1.c: 162: RC4 = 1;
 17677  12CF  160E               	bsf	14,4	;volatile
 17678  12D0  0008               	return
 17679  12D1                     __end_of_CC2500_PowerRST:	
 17680                           
 17681                           	psect	text120
 17682  1F81                     __ptext120:	
 17683 ;; *************** function _CC2500_InitSetREG *****************
 17684 ;; Defined at:
 17685 ;;		line 168 in file "../src/CC2500_B1.c"
 17686 ;; Parameters:    Size  Location     Type
 17687 ;;		None
 17688 ;; Auto vars:     Size  Location     Type
 17689 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17690 ;;  temp2           1    7[BANK0 ] unsigned char 
 17691 ;;  temp1           1    6[BANK0 ] unsigned char 
 17692 ;; Return value:  Size  Location     Type
 17693 ;;		None               void
 17694 ;; Registers used:
 17695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17696 ;; Tracked objects:
 17697 ;;		On entry : 0/0
 17698 ;;		On exit  : 0/0
 17699 ;;		Unchanged: 0/0
 17700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17702 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17703 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17704 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17705 ;;Total ram usage:        4 bytes
 17706 ;; Hardware stack levels used:    1
 17707 ;; Hardware stack levels required when called:    7
 17708 ;; This function calls:
 17709 ;;		_CC2500_WriteREG
 17710 ;; This function is called by:
 17711 ;;		_CC2500_PowerOnInitial
 17712 ;; This function uses a non-reentrant model
 17713 ;;
 17714                           
 17715                           
 17716                           ;psect for function _CC2500_InitSetREG
 17717  1F81                     _CC2500_InitSetREG:	
 17718                           
 17719                           ;CC2500_B1.c: 169: unsigned char loop_c;
 17720                           ;CC2500_B1.c: 170: unsigned char temp1, temp2;
 17721                           ;CC2500_B1.c: 172: for (loop_c = 0; loop_c < 47; loop_c++) {
 17722                           
 17723                           ;incstack = 0
 17724                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17725  1F81  0020               	movlb	0	; select bank0
 17726  1F82  01A8               	clrf	CC2500_InitSetREG@loop_c
 17727  1F83                     L10:	
 17728  1F83  302F               	movlw	47
 17729  1F84  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17730  1F85  1803               	btfsc	3,0
 17731  1F86  0008               	return
 17732                           
 17733                           ;CC2500_B1.c: 173: temp1 = CC2500_registers_address[loop_c];
 17734  1F87  0828               	movf	CC2500_InitSetREG@loop_c,w
 17735  1F88  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17736  1F89  0084               	movwf	4
 17737  1F8A  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17738  1F8B  1803               	skipnc
 17739  1F8C  3E01               	addlw	1
 17740  1F8D  0085               	movwf	5
 17741  1F8E  0800               	movf	0,w	;code access
 17742  1F8F  00A5               	movwf	??_CC2500_InitSetREG
 17743  1F90  0825               	movf	??_CC2500_InitSetREG,w
 17744  1F91  00A6               	movwf	CC2500_InitSetREG@temp1
 17745                           
 17746                           ;CC2500_B1.c: 174: temp2 = CC2500_rfSettings[loop_c];
 17747  1F92  0828               	movf	CC2500_InitSetREG@loop_c,w
 17748  1F93  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17749  1F94  0084               	movwf	4
 17750  1F95  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17751  1F96  1803               	skipnc
 17752  1F97  3E01               	addlw	1
 17753  1F98  0085               	movwf	5
 17754  1F99  0800               	movf	0,w	;code access
 17755  1F9A  00A5               	movwf	??_CC2500_InitSetREG
 17756  1F9B  0825               	movf	??_CC2500_InitSetREG,w
 17757  1F9C  00A7               	movwf	CC2500_InitSetREG@temp2
 17758                           
 17759                           ;CC2500_B1.c: 176: CC2500_WriteREG(temp1, temp2);
 17760  1F9D  0827               	movf	CC2500_InitSetREG@temp2,w
 17761  1F9E  00A5               	movwf	??_CC2500_InitSetREG
 17762  1F9F  0825               	movf	??_CC2500_InitSetREG,w
 17763  1FA0  00A2               	movwf	CC2500_WriteREG@value
 17764  1FA1  0826               	movf	CC2500_InitSetREG@temp1,w
 17765  1FA2  319E  26A6  319F   	fcall	_CC2500_WriteREG
 17766  1FA5  3001               	movlw	1
 17767  1FA6  0020               	movlb	0	; select bank0
 17768  1FA7  00A5               	movwf	??_CC2500_InitSetREG
 17769  1FA8  0825               	movf	??_CC2500_InitSetREG,w
 17770  1FA9  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17771  1FAA  2F83               	goto	L10
 17772  1FAB                     __end_of_CC2500_InitSetREG:	
 17773                           
 17774                           	psect	text121
 17775  1DE7                     __ptext121:	
 17776 ;; *************** function _CC2500_InitPATable *****************
 17777 ;; Defined at:
 17778 ;;		line 183 in file "../src/CC2500_B1.c"
 17779 ;; Parameters:    Size  Location     Type
 17780 ;;		None
 17781 ;; Auto vars:     Size  Location     Type
 17782 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17783 ;;  temp            1    6[BANK0 ] unsigned char 
 17784 ;; Return value:  Size  Location     Type
 17785 ;;		None               void
 17786 ;; Registers used:
 17787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17788 ;; Tracked objects:
 17789 ;;		On entry : 0/0
 17790 ;;		On exit  : 0/0
 17791 ;;		Unchanged: 0/0
 17792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17794 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17795 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17796 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17797 ;;Total ram usage:        3 bytes
 17798 ;; Hardware stack levels used:    1
 17799 ;; Hardware stack levels required when called:    7
 17800 ;; This function calls:
 17801 ;;		_CC2500_WriteREG
 17802 ;; This function is called by:
 17803 ;;		_CC2500_PowerOnInitial
 17804 ;; This function uses a non-reentrant model
 17805 ;;
 17806                           
 17807                           
 17808                           ;psect for function _CC2500_InitPATable
 17809  1DE7                     _CC2500_InitPATable:	
 17810                           
 17811                           ;CC2500_B1.c: 184: unsigned char loop_d;
 17812                           ;CC2500_B1.c: 185: unsigned char temp;
 17813                           ;CC2500_B1.c: 187: for (loop_d = 0; loop_d < 8; loop_d++) {
 17814                           
 17815                           ;incstack = 0
 17816                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17817  1DE7  0020               	movlb	0	; select bank0
 17818  1DE8  01A7               	clrf	CC2500_InitPATable@loop_d
 17819  1DE9                     L11:	
 17820  1DE9  3008               	movlw	8
 17821  1DEA  0227               	subwf	CC2500_InitPATable@loop_d,w
 17822  1DEB  1803               	btfsc	3,0
 17823  1DEC  0008               	return
 17824                           
 17825                           ;CC2500_B1.c: 188: temp = CC2500_patable_vaule[loop_d];
 17826  1DED  0827               	movf	CC2500_InitPATable@loop_d,w
 17827  1DEE  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17828  1DEF  0084               	movwf	4
 17829  1DF0  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17830  1DF1  1803               	skipnc
 17831  1DF2  3E01               	addlw	1
 17832  1DF3  0085               	movwf	5
 17833  1DF4  0800               	movf	0,w	;code access
 17834  1DF5  00A5               	movwf	??_CC2500_InitPATable
 17835  1DF6  0825               	movf	??_CC2500_InitPATable,w
 17836  1DF7  00A6               	movwf	CC2500_InitPATable@temp
 17837                           
 17838                           ;CC2500_B1.c: 189: CC2500_WriteREG(0x3E, temp);
 17839  1DF8  0826               	movf	CC2500_InitPATable@temp,w
 17840  1DF9  00A5               	movwf	??_CC2500_InitPATable
 17841  1DFA  0825               	movf	??_CC2500_InitPATable,w
 17842  1DFB  00A2               	movwf	CC2500_WriteREG@value
 17843  1DFC  303E               	movlw	62
 17844  1DFD  319E  26A6  319D   	fcall	_CC2500_WriteREG
 17845  1E00  3001               	movlw	1
 17846  1E01  0020               	movlb	0	; select bank0
 17847  1E02  00A5               	movwf	??_CC2500_InitPATable
 17848  1E03  0825               	movf	??_CC2500_InitPATable,w
 17849  1E04  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17850  1E05  2DE9               	goto	L11
 17851  1E06                     __end_of_CC2500_InitPATable:	
 17852                           
 17853                           	psect	text122
 17854  1EA6                     __ptext122:	
 17855 ;; *************** function _CC2500_WriteREG *****************
 17856 ;; Defined at:
 17857 ;;		line 260 in file "../src/CC2500_B1.c"
 17858 ;; Parameters:    Size  Location     Type
 17859 ;;  w_addr          1    wreg     unsigned char 
 17860 ;;  value           1    2[BANK0 ] unsigned char 
 17861 ;; Auto vars:     Size  Location     Type
 17862 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17863 ;; Return value:  Size  Location     Type
 17864 ;;		None               void
 17865 ;; Registers used:
 17866 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17867 ;; Tracked objects:
 17868 ;;		On entry : 0/0
 17869 ;;		On exit  : 0/0
 17870 ;;		Unchanged: 0/0
 17871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17872 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17874 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17875 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17876 ;;Total ram usage:        3 bytes
 17877 ;; Hardware stack levels used:    1
 17878 ;; Hardware stack levels required when called:    6
 17879 ;; This function calls:
 17880 ;;		_CC2500_WriteByte
 17881 ;;		_Timeout_Counter
 17882 ;;		_set_TimeoutCleared
 17883 ;; This function is called by:
 17884 ;;		_CC2500_InitSetREG
 17885 ;;		_CC2500_InitPATable
 17886 ;; This function uses a non-reentrant model
 17887 ;;
 17888                           
 17889                           
 17890                           ;psect for function _CC2500_WriteREG
 17891  1EA6                     _CC2500_WriteREG:	
 17892                           
 17893                           ;incstack = 0
 17894                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17895                           ;CC2500_WriteREG@w_addr stored from wreg
 17896  1EA6  0020               	movlb	0	; select bank0
 17897  1EA7  00A4               	movwf	CC2500_WriteREG@w_addr
 17898                           
 17899                           ;CC2500_B1.c: 261: RC4 = 0;
 17900  1EA8  120E               	bcf	14,4	;volatile
 17901                           
 17902                           ;CC2500_B1.c: 262: SPI0Buffer = w_addr;
 17903  1EA9  0824               	movf	CC2500_WriteREG@w_addr,w
 17904  1EAA  00A3               	movwf	??_CC2500_WriteREG
 17905  1EAB  0823               	movf	??_CC2500_WriteREG,w
 17906  1EAC  0021               	movlb	1	; select bank1
 17907  1EAD  00D2               	movwf	_SPI0Buffer^(0+128)
 17908                           
 17909                           ;CC2500_B1.c: 263: while (RC2 == 1 && myMain.Timeout == 0) {
 17910  1EAE  2EB2               	goto	l9314
 17911  1EAF                     l9312:	
 17912                           
 17913                           ;CC2500_B1.c: 264: Timeout_Counter();
 17914  1EAF  319C  2457  319E   	fcall	_Timeout_Counter
 17915  1EB2                     l9314:	
 17916  1EB2  0020               	movlb	0	; select bank0
 17917  1EB3  1D0E               	btfss	14,2	;volatile
 17918  1EB4  2EB8               	goto	l9318
 17919  1EB5  0021               	movlb	1	; select bank1
 17920  1EB6  1D2F               	btfss	(_myMain^(0+128)+15),2
 17921  1EB7  2EAF               	goto	l9312
 17922  1EB8                     l9318:	
 17923                           
 17924                           ;CC2500_B1.c: 265: };
 17925                           ;CC2500_B1.c: 266: set_TimeoutCleared();
 17926  1EB8  3199  21E2  319E   	fcall	_set_TimeoutCleared
 17927                           
 17928                           ;CC2500_B1.c: 268: CC2500_WriteByte();
 17929  1EBB  319C  24F1  319E   	fcall	_CC2500_WriteByte
 17930                           
 17931                           ;CC2500_B1.c: 269: SPI0Buffer = value;
 17932  1EBE  0020               	movlb	0	; select bank0
 17933  1EBF  0822               	movf	CC2500_WriteREG@value,w
 17934  1EC0  00A3               	movwf	??_CC2500_WriteREG
 17935  1EC1  0823               	movf	??_CC2500_WriteREG,w
 17936  1EC2  0021               	movlb	1	; select bank1
 17937  1EC3  00D2               	movwf	_SPI0Buffer^(0+128)
 17938                           
 17939                           ;CC2500_B1.c: 270: CC2500_WriteByte();
 17940  1EC4  319C  24F1         	fcall	_CC2500_WriteByte
 17941                           
 17942                           ;CC2500_B1.c: 271: RC4 = 1;
 17943  1EC6  0020               	movlb	0	; select bank0
 17944  1EC7  160E               	bsf	14,4	;volatile
 17945  1EC8  0008               	return
 17946  1EC9                     __end_of_CC2500_WriteREG:	
 17947                           
 17948                           	psect	text123
 17949  1A8F                     __ptext123:	
 17950 ;; *************** function _CC2500_FrequencyCabr *****************
 17951 ;; Defined at:
 17952 ;;		line 210 in file "../src/CC2500_B1.c"
 17953 ;; Parameters:    Size  Location     Type
 17954 ;;		None
 17955 ;; Auto vars:     Size  Location     Type
 17956 ;;		None
 17957 ;; Return value:  Size  Location     Type
 17958 ;;		None               void
 17959 ;; Registers used:
 17960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17961 ;; Tracked objects:
 17962 ;;		On entry : 0/0
 17963 ;;		On exit  : 0/0
 17964 ;;		Unchanged: 0/0
 17965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17970 ;;Total ram usage:        0 bytes
 17971 ;; Hardware stack levels used:    1
 17972 ;; Hardware stack levels required when called:    7
 17973 ;; This function calls:
 17974 ;;		_CC2500_WriteCommand
 17975 ;;		_DelayTime_1us
 17976 ;; This function is called by:
 17977 ;;		_CC2500_PowerOnInitial
 17978 ;; This function uses a non-reentrant model
 17979 ;;
 17980                           
 17981                           
 17982                           ;psect for function _CC2500_FrequencyCabr
 17983  1A8F                     _CC2500_FrequencyCabr:	
 17984                           
 17985                           ;CC2500_B1.c: 211: CC2500_WriteCommand(0x33);
 17986                           
 17987                           ;incstack = 0
 17988                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17989  1A8F  3033               	movlw	51
 17990  1A90  319D  2523  319A   	fcall	_CC2500_WriteCommand
 17991                           
 17992                           ;CC2500_B1.c: 212: DelayTime_1us(1000);
 17993  1A93  30E8               	movlw	232
 17994  1A94  0020               	movlb	0	; select bank0
 17995  1A95  00A0               	movwf	DelayTime_1us@count
 17996  1A96  3003               	movlw	3
 17997  1A97  00A1               	movwf	DelayTime_1us@count+1
 17998  1A98  319F  2734         	fcall	_DelayTime_1us
 17999  1A9A  0008               	return
 18000  1A9B                     __end_of_CC2500_FrequencyCabr:	
 18001                           
 18002                           	psect	text124
 18003  1F34                     __ptext124:	
 18004 ;; *************** function _DelayTime_1us *****************
 18005 ;; Defined at:
 18006 ;;		line 329 in file "../src/CC2500_B1.c"
 18007 ;; Parameters:    Size  Location     Type
 18008 ;;  count           2    0[BANK0 ] int 
 18009 ;; Auto vars:     Size  Location     Type
 18010 ;;  j               2    4[BANK0 ] unsigned int 
 18011 ;;  i               2    2[BANK0 ] unsigned int 
 18012 ;; Return value:  Size  Location     Type
 18013 ;;		None               void
 18014 ;; Registers used:
 18015 ;;		wreg, status,2
 18016 ;; Tracked objects:
 18017 ;;		On entry : 0/0
 18018 ;;		On exit  : 0/0
 18019 ;;		Unchanged: 0/0
 18020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18021 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18024 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18025 ;;Total ram usage:        6 bytes
 18026 ;; Hardware stack levels used:    1
 18027 ;; Hardware stack levels required when called:    5
 18028 ;; This function calls:
 18029 ;;		Nothing
 18030 ;; This function is called by:
 18031 ;;		_CC2500_PowerRST
 18032 ;;		_CC2500_FrequencyCabr
 18033 ;; This function uses a non-reentrant model
 18034 ;;
 18035                           
 18036                           
 18037                           ;psect for function _DelayTime_1us
 18038  1F34                     _DelayTime_1us:	
 18039                           
 18040                           ;CC2500_B1.c: 330: unsigned int i, j;
 18041                           ;CC2500_B1.c: 331: for (i = 1; i < count; i++)
 18042                           
 18043                           ;incstack = 0
 18044                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 18045  1F34  3001               	movlw	1
 18046  1F35  0020               	movlb	0	; select bank0
 18047  1F36  00A2               	movwf	DelayTime_1us@i
 18048  1F37  3000               	movlw	0
 18049  1F38  00A3               	movwf	DelayTime_1us@i+1
 18050  1F39                     l386:	
 18051  1F39  0821               	movf	DelayTime_1us@count+1,w
 18052  1F3A  0223               	subwf	DelayTime_1us@i+1,w
 18053  1F3B  1D03               	skipz
 18054  1F3C  2F3F               	goto	u9595
 18055  1F3D  0820               	movf	DelayTime_1us@count,w
 18056  1F3E  0222               	subwf	DelayTime_1us@i,w
 18057  1F3F                     u9595:	
 18058  1F3F  1803               	btfsc	3,0
 18059  1F40  0008               	return
 18060                           
 18061                           ;CC2500_B1.c: 332: for (j = 0; j <= 1; j++);
 18062  1F41  01A4               	clrf	DelayTime_1us@j
 18063  1F42  01A5               	clrf	DelayTime_1us@j+1
 18064  1F43  3000               	movlw	0
 18065  1F44  0225               	subwf	DelayTime_1us@j+1,w
 18066  1F45  3002               	movlw	2
 18067  1F46  1903               	skipnz
 18068  1F47  0224               	subwf	DelayTime_1us@j,w
 18069  1F48  1803               	btfsc	3,0
 18070  1F49  2F55               	goto	l9306
 18071  1F4A                     l9304:	
 18072  1F4A  3001               	movlw	1
 18073  1F4B  07A4               	addwf	DelayTime_1us@j,f
 18074  1F4C  3000               	movlw	0
 18075  1F4D  3DA5               	addwfc	DelayTime_1us@j+1,f
 18076  1F4E  3000               	movlw	0
 18077  1F4F  0225               	subwf	DelayTime_1us@j+1,w
 18078  1F50  3002               	movlw	2
 18079  1F51  1903               	skipnz
 18080  1F52  0224               	subwf	DelayTime_1us@j,w
 18081  1F53  1C03               	skipc
 18082  1F54  2F4A               	goto	l9304
 18083  1F55                     l9306:	
 18084  1F55  3001               	movlw	1
 18085  1F56  07A2               	addwf	DelayTime_1us@i,f
 18086  1F57  3000               	movlw	0
 18087  1F58  3DA3               	addwfc	DelayTime_1us@i+1,f
 18088  1F59  2F39               	goto	l386
 18089  1F5A                     __end_of_DelayTime_1us:	
 18090                           
 18091                           	psect	text125
 18092  19D6                     __ptext125:	
 18093 ;; *************** function _CC2500_ClearTXFIFO *****************
 18094 ;; Defined at:
 18095 ;;		line 196 in file "../src/CC2500_B1.c"
 18096 ;; Parameters:    Size  Location     Type
 18097 ;;		None
 18098 ;; Auto vars:     Size  Location     Type
 18099 ;;		None
 18100 ;; Return value:  Size  Location     Type
 18101 ;;		None               void
 18102 ;; Registers used:
 18103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18104 ;; Tracked objects:
 18105 ;;		On entry : 0/0
 18106 ;;		On exit  : 0/0
 18107 ;;		Unchanged: 0/0
 18108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18113 ;;Total ram usage:        0 bytes
 18114 ;; Hardware stack levels used:    1
 18115 ;; Hardware stack levels required when called:    7
 18116 ;; This function calls:
 18117 ;;		_CC2500_WriteCommand
 18118 ;; This function is called by:
 18119 ;;		_CC2500_PowerOnInitial
 18120 ;; This function uses a non-reentrant model
 18121 ;;
 18122                           
 18123                           
 18124                           ;psect for function _CC2500_ClearTXFIFO
 18125  19D6                     _CC2500_ClearTXFIFO:	
 18126                           
 18127                           ;CC2500_B1.c: 197: CC2500_WriteCommand(0x3B);
 18128                           
 18129                           ;incstack = 0
 18130                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18131  19D6  303B               	movlw	59
 18132  19D7  319D  2523         	fcall	_CC2500_WriteCommand
 18133  19D9  0008               	return
 18134  19DA                     __end_of_CC2500_ClearTXFIFO:	
 18135                           
 18136                           	psect	text126
 18137  19D2                     __ptext126:	
 18138 ;; *************** function _CC2500_ClearRXFIFO *****************
 18139 ;; Defined at:
 18140 ;;		line 203 in file "../src/CC2500_B1.c"
 18141 ;; Parameters:    Size  Location     Type
 18142 ;;		None
 18143 ;; Auto vars:     Size  Location     Type
 18144 ;;		None
 18145 ;; Return value:  Size  Location     Type
 18146 ;;		None               void
 18147 ;; Registers used:
 18148 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18149 ;; Tracked objects:
 18150 ;;		On entry : 0/0
 18151 ;;		On exit  : 0/0
 18152 ;;		Unchanged: 0/0
 18153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18158 ;;Total ram usage:        0 bytes
 18159 ;; Hardware stack levels used:    1
 18160 ;; Hardware stack levels required when called:    7
 18161 ;; This function calls:
 18162 ;;		_CC2500_WriteCommand
 18163 ;; This function is called by:
 18164 ;;		_CC2500_PowerOnInitial
 18165 ;; This function uses a non-reentrant model
 18166 ;;
 18167                           
 18168                           
 18169                           ;psect for function _CC2500_ClearRXFIFO
 18170  19D2                     _CC2500_ClearRXFIFO:	
 18171                           
 18172                           ;CC2500_B1.c: 204: CC2500_WriteCommand(0x3A);
 18173                           
 18174                           ;incstack = 0
 18175                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18176  19D2  303A               	movlw	58
 18177  19D3  319D  2523         	fcall	_CC2500_WriteCommand
 18178  19D5  0008               	return
 18179  19D6                     __end_of_CC2500_ClearRXFIFO:	
 18180                           
 18181                           	psect	text127
 18182  1D23                     __ptext127:	
 18183 ;; *************** function _CC2500_WriteCommand *****************
 18184 ;; Defined at:
 18185 ;;		line 294 in file "../src/CC2500_B1.c"
 18186 ;; Parameters:    Size  Location     Type
 18187 ;;  command         1    wreg     unsigned char 
 18188 ;; Auto vars:     Size  Location     Type
 18189 ;;  command         1    3[BANK0 ] unsigned char 
 18190 ;; Return value:  Size  Location     Type
 18191 ;;		None               void
 18192 ;; Registers used:
 18193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18194 ;; Tracked objects:
 18195 ;;		On entry : 0/0
 18196 ;;		On exit  : 0/0
 18197 ;;		Unchanged: 0/0
 18198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18201 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18202 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18203 ;;Total ram usage:        2 bytes
 18204 ;; Hardware stack levels used:    1
 18205 ;; Hardware stack levels required when called:    6
 18206 ;; This function calls:
 18207 ;;		_CC2500_WriteByte
 18208 ;;		_Timeout_Counter
 18209 ;;		_set_TimeoutCleared
 18210 ;; This function is called by:
 18211 ;;		_CC2500_TxData
 18212 ;;		_CC2500_ClearTXFIFO
 18213 ;;		_CC2500_ClearRXFIFO
 18214 ;;		_CC2500_FrequencyCabr
 18215 ;;		_CC2500_SIDLEMode
 18216 ;;		_setRF_Main
 18217 ;;		_RF_RxDisable
 18218 ;; This function uses a non-reentrant model
 18219 ;;
 18220                           
 18221                           
 18222                           ;psect for function _CC2500_WriteCommand
 18223  1D23                     _CC2500_WriteCommand:	
 18224                           
 18225                           ;incstack = 0
 18226                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18227                           ;CC2500_WriteCommand@command stored from wreg
 18228  1D23  0020               	movlb	0	; select bank0
 18229  1D24  00A3               	movwf	CC2500_WriteCommand@command
 18230                           
 18231                           ;CC2500_B1.c: 295: RC4 = 0;
 18232  1D25  120E               	bcf	14,4	;volatile
 18233                           
 18234                           ;CC2500_B1.c: 296: SPI0Buffer = command;
 18235  1D26  0823               	movf	CC2500_WriteCommand@command,w
 18236  1D27  00A2               	movwf	??_CC2500_WriteCommand
 18237  1D28  0822               	movf	??_CC2500_WriteCommand,w
 18238  1D29  0021               	movlb	1	; select bank1
 18239  1D2A  00D2               	movwf	_SPI0Buffer^(0+128)
 18240                           
 18241                           ;CC2500_B1.c: 298: while (RC2 == 1 && myMain.Timeout == 0) {
 18242  1D2B  2D2F               	goto	l9048
 18243  1D2C                     l9046:	
 18244                           
 18245                           ;CC2500_B1.c: 299: Timeout_Counter();
 18246  1D2C  319C  2457  319D   	fcall	_Timeout_Counter
 18247  1D2F                     l9048:	
 18248  1D2F  0020               	movlb	0	; select bank0
 18249  1D30  1D0E               	btfss	14,2	;volatile
 18250  1D31  2D35               	goto	l9052
 18251  1D32  0021               	movlb	1	; select bank1
 18252  1D33  1D2F               	btfss	(_myMain^(0+128)+15),2
 18253  1D34  2D2C               	goto	l9046
 18254  1D35                     l9052:	
 18255                           
 18256                           ;CC2500_B1.c: 300: };
 18257                           ;CC2500_B1.c: 301: set_TimeoutCleared();
 18258  1D35  3199  21E2  319D   	fcall	_set_TimeoutCleared
 18259                           
 18260                           ;CC2500_B1.c: 303: CC2500_WriteByte();
 18261  1D38  319C  24F1         	fcall	_CC2500_WriteByte
 18262                           
 18263                           ;CC2500_B1.c: 304: RC4 = 1;
 18264  1D3A  0020               	movlb	0	; select bank0
 18265  1D3B  160E               	bsf	14,4	;volatile
 18266  1D3C  0008               	return
 18267  1D3D                     __end_of_CC2500_WriteCommand:	
 18268                           
 18269                           	psect	text128
 18270  19E2                     __ptext128:	
 18271 ;; *************** function _set_TimeoutCleared *****************
 18272 ;; Defined at:
 18273 ;;		line 217 in file "../src/Main_B1.c"
 18274 ;; Parameters:    Size  Location     Type
 18275 ;;		None
 18276 ;; Auto vars:     Size  Location     Type
 18277 ;;		None
 18278 ;; Return value:  Size  Location     Type
 18279 ;;		None               void
 18280 ;; Registers used:
 18281 ;;		status,2
 18282 ;; Tracked objects:
 18283 ;;		On entry : 0/0
 18284 ;;		On exit  : 0/0
 18285 ;;		Unchanged: 0/0
 18286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18291 ;;Total ram usage:        0 bytes
 18292 ;; Hardware stack levels used:    1
 18293 ;; Hardware stack levels required when called:    5
 18294 ;; This function calls:
 18295 ;;		Nothing
 18296 ;; This function is called by:
 18297 ;;		_CC2500_TxData
 18298 ;;		_CC2500_RxData
 18299 ;;		_CC2500_PowerRST
 18300 ;;		_CC2500_WriteREG
 18301 ;;		_CC2500_WriteCommand
 18302 ;;		_CC2500_ReadStatus
 18303 ;;		_getAD
 18304 ;;		_TouchPower
 18305 ;;		_CC2500_ReadREG
 18306 ;; This function uses a non-reentrant model
 18307 ;;
 18308                           
 18309                           
 18310                           ;psect for function _set_TimeoutCleared
 18311  19E2                     _set_TimeoutCleared:	
 18312                           
 18313                           ;Main_B1.c: 218: myMain.Timeout = 0;
 18314                           
 18315                           ;incstack = 0
 18316                           ; Regs used in _set_TimeoutCleared: [status,2]
 18317  19E2  0021               	movlb	1	; select bank1
 18318  19E3  112F               	bcf	(_myMain^(0+128)+15),2
 18319                           
 18320                           ;Main_B1.c: 219: myMain.Timeout_Counter = 0;
 18321  19E4  01B0               	clrf	(_myMain^(0+128)+16)
 18322  19E5  01B1               	clrf	((_myMain+1)^(0+128)+16)
 18323  19E6  0008               	return
 18324  19E7                     __end_of_set_TimeoutCleared:	
 18325                           
 18326                           	psect	text129
 18327  1C57                     __ptext129:	
 18328 ;; *************** function _Timeout_Counter *****************
 18329 ;; Defined at:
 18330 ;;		line 208 in file "../src/Main_B1.c"
 18331 ;; Parameters:    Size  Location     Type
 18332 ;;		None
 18333 ;; Auto vars:     Size  Location     Type
 18334 ;;		None
 18335 ;; Return value:  Size  Location     Type
 18336 ;;		None               void
 18337 ;; Registers used:
 18338 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18339 ;; Tracked objects:
 18340 ;;		On entry : 0/0
 18341 ;;		On exit  : 0/0
 18342 ;;		Unchanged: 0/0
 18343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18348 ;;Total ram usage:        0 bytes
 18349 ;; Hardware stack levels used:    1
 18350 ;; Hardware stack levels required when called:    5
 18351 ;; This function calls:
 18352 ;;		Nothing
 18353 ;; This function is called by:
 18354 ;;		_CC2500_TxData
 18355 ;;		_CC2500_RxData
 18356 ;;		_CC2500_PowerRST
 18357 ;;		_CC2500_WriteREG
 18358 ;;		_CC2500_WriteCommand
 18359 ;;		_CC2500_ReadStatus
 18360 ;;		_getAD
 18361 ;;		_TouchPower
 18362 ;;		_CC2500_ReadREG
 18363 ;; This function uses a non-reentrant model
 18364 ;;
 18365                           
 18366                           
 18367                           ;psect for function _Timeout_Counter
 18368  1C57                     _Timeout_Counter:	
 18369                           
 18370                           ;Main_B1.c: 209: myMain.Timeout_Counter++;
 18371                           
 18372                           ;incstack = 0
 18373                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18374  1C57  3001               	movlw	1
 18375  1C58  0021               	movlb	1	; select bank1
 18376  1C59  07B0               	addwf	(_myMain^(0+128)+16),f
 18377  1C5A  3000               	movlw	0
 18378  1C5B  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 18379                           
 18380                           ;Main_B1.c: 210: if (myMain.Timeout_Counter == 10000) {
 18381  1C5C  3010               	movlw	16
 18382  1C5D  3EA0               	addlw	_myMain& (0+255)
 18383  1C5E  0086               	movwf	6
 18384  1C5F  0187               	clrf	7
 18385  1C60  3F40               	moviw [0]fsr1
 18386  1C61  3A10               	xorlw	16
 18387  1C62  1D03               	skipz
 18388  1C63  2C66               	goto	u9095
 18389  1C64  3F41               	moviw [1]fsr1
 18390  1C65  3A27               	xorlw	39
 18391  1C66                     u9095:	
 18392  1C66  1D03               	skipz
 18393  1C67  0008               	return
 18394                           
 18395                           ;Main_B1.c: 211: myMain.Timeout_Counter = 0;
 18396  1C68  01B0               	clrf	(_myMain^(0+128)+16)
 18397  1C69  01B1               	clrf	((_myMain+1)^(0+128)+16)
 18398                           
 18399                           ;Main_B1.c: 212: myMain.Timeout = 1;
 18400  1C6A  152F               	bsf	(_myMain^(0+128)+15),2
 18401  1C6B  0008               	return
 18402  1C6C                     __end_of_Timeout_Counter:	
 18403                           
 18404                           	psect	text130
 18405  1CF1                     __ptext130:	
 18406 ;; *************** function _CC2500_WriteByte *****************
 18407 ;; Defined at:
 18408 ;;		line 228 in file "../src/CC2500_B1.c"
 18409 ;; Parameters:    Size  Location     Type
 18410 ;;		None
 18411 ;; Auto vars:     Size  Location     Type
 18412 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18413 ;; Return value:  Size  Location     Type
 18414 ;;		None               void
 18415 ;; Registers used:
 18416 ;;		wreg, status,2, status,0
 18417 ;; Tracked objects:
 18418 ;;		On entry : 0/0
 18419 ;;		On exit  : 0/0
 18420 ;;		Unchanged: 0/0
 18421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18424 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18425 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18426 ;;Total ram usage:        2 bytes
 18427 ;; Hardware stack levels used:    1
 18428 ;; Hardware stack levels required when called:    5
 18429 ;; This function calls:
 18430 ;;		Nothing
 18431 ;; This function is called by:
 18432 ;;		_CC2500_TxData
 18433 ;;		_CC2500_RxData
 18434 ;;		_CC2500_PowerRST
 18435 ;;		_CC2500_WriteREG
 18436 ;;		_CC2500_WriteCommand
 18437 ;;		_CC2500_ReadStatus
 18438 ;;		_CC2500_ReadREG
 18439 ;; This function uses a non-reentrant model
 18440 ;;
 18441                           
 18442                           
 18443                           ;psect for function _CC2500_WriteByte
 18444  1CF1                     _CC2500_WriteByte:	
 18445                           
 18446                           ;CC2500_B1.c: 229: unsigned char loop_a;
 18447                           ;CC2500_B1.c: 230: for (loop_a = 0; loop_a < 8; loop_a++) {
 18448                           
 18449                           ;incstack = 0
 18450                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18451  1CF1  0020               	movlb	0	; select bank0
 18452  1CF2  01A1               	clrf	CC2500_WriteByte@loop_a
 18453  1CF3                     L12:	
 18454  1CF3  3008               	movlw	8
 18455  1CF4  0221               	subwf	CC2500_WriteByte@loop_a,w
 18456  1CF5  1803               	btfsc	3,0
 18457  1CF6  0008               	return
 18458                           
 18459                           ;CC2500_B1.c: 231: if (SPI0Buffer & 0x80)
 18460  1CF7  0021               	movlb	1	; select bank1
 18461  1CF8  1FD2               	btfss	_SPI0Buffer^(0+128),7
 18462  1CF9  2CFD               	goto	l342
 18463                           
 18464                           ;CC2500_B1.c: 232: RC0 = 1;
 18465  1CFA  0020               	movlb	0	; select bank0
 18466  1CFB  140E               	bsf	14,0	;volatile
 18467  1CFC  2CFF               	goto	l343
 18468  1CFD                     l342:	
 18469                           
 18470                           ;CC2500_B1.c: 233: else
 18471                           ;CC2500_B1.c: 234: RC0 = 0;
 18472  1CFD  0020               	movlb	0	; select bank0
 18473  1CFE  100E               	bcf	14,0	;volatile
 18474  1CFF                     l343:	
 18475                           
 18476                           ;CC2500_B1.c: 235: RC1 = 1;
 18477  1CFF  148E               	bsf	14,1	;volatile
 18478                           
 18479                           ;CC2500_B1.c: 236: SPI0Buffer <<= 1;
 18480  1D00  1003               	clrc
 18481  1D01  0021               	movlb	1	; select bank1
 18482  1D02  0DD2               	rlf	_SPI0Buffer^(0+128),f
 18483                           
 18484                           ;CC2500_B1.c: 237: RC1 = 0;
 18485  1D03  0020               	movlb	0	; select bank0
 18486  1D04  108E               	bcf	14,1	;volatile
 18487  1D05  3001               	movlw	1
 18488  1D06  00A0               	movwf	??_CC2500_WriteByte
 18489  1D07  0820               	movf	??_CC2500_WriteByte,w
 18490  1D08  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18491  1D09  2CF3               	goto	L12
 18492  1D0A                     __end_of_CC2500_WriteByte:	
 18493                           
 18494                           	psect	text131
 18495  139F                     __ptext131:	
 18496 ;; *************** function _Buzzer_Main *****************
 18497 ;; Defined at:
 18498 ;;		line 46 in file "../src/Buzzer_B1.c"
 18499 ;; Parameters:    Size  Location     Type
 18500 ;;		None
 18501 ;; Auto vars:     Size  Location     Type
 18502 ;;		None
 18503 ;; Return value:  Size  Location     Type
 18504 ;;		None               void
 18505 ;; Registers used:
 18506 ;;		wreg, status,2, status,0
 18507 ;; Tracked objects:
 18508 ;;		On entry : 0/0
 18509 ;;		On exit  : 0/0
 18510 ;;		Unchanged: 0/0
 18511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18514 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18515 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18516 ;;Total ram usage:        1 bytes
 18517 ;; Hardware stack levels used:    1
 18518 ;; Hardware stack levels required when called:    5
 18519 ;; This function calls:
 18520 ;;		Nothing
 18521 ;; This function is called by:
 18522 ;;		_main
 18523 ;; This function uses a non-reentrant model
 18524 ;;
 18525                           
 18526                           
 18527                           ;psect for function _Buzzer_Main
 18528  139F                     _Buzzer_Main:	
 18529                           
 18530                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18531                           
 18532                           ;incstack = 0
 18533                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18534  139F  0021               	movlb	1	; select bank1
 18535  13A0  1CB2               	btfss	_Buz1^(0+128),1
 18536  13A1  0008               	return
 18537                           
 18538                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18539  13A2  3001               	movlw	1
 18540  13A3  07B3               	addwf	(_Buz1^(0+128)+1),f
 18541  13A4  3000               	movlw	0
 18542  13A5  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 18543                           
 18544                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18545  13A6  0839               	movf	((_Buz1+1)^(0+128)+6),w
 18546  13A7  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 18547  13A8  1D03               	skipz
 18548  13A9  2BAC               	goto	u11005
 18549  13AA  0838               	movf	(_Buz1^(0+128)+6),w
 18550  13AB  0233               	subwf	(_Buz1^(0+128)+1),w
 18551  13AC                     u11005:	
 18552  13AC  1C03               	skipc
 18553  13AD  0008               	return
 18554                           
 18555                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18556  13AE  01B3               	clrf	(_Buz1^(0+128)+1)
 18557  13AF  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 18558                           
 18559                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18560  13B0  12B2               	bcf	_Buz1^(0+128),5
 18561  13B1  0020               	movlb	0	; select bank0
 18562  13B2  1D8D               	btfss	13,3	;volatile
 18563  13B3  2BB6               	goto	l10210
 18564  13B4  0021               	movlb	1	; select bank1
 18565  13B5  16B2               	bsf	_Buz1^(0+128),5
 18566  13B6                     l10210:	
 18567                           
 18568                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18569  13B6  0021               	movlb	1	; select bank1
 18570  13B7  1AB2               	btfsc	_Buz1^(0+128),5
 18571  13B8  2BE2               	goto	l112
 18572                           
 18573                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18574  13B9  08B5               	movf	(_Buz1^(0+128)+3),f
 18575  13BA  1D03               	skipz
 18576  13BB  2BDE               	goto	l113
 18577                           
 18578                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18579  13BC  1DB2               	btfss	_Buz1^(0+128),3
 18580  13BD  2BCC               	goto	l114
 18581                           
 18582                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18583  13BE  11B2               	bcf	_Buz1^(0+128),3
 18584                           
 18585                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18586  13BF  0836               	movf	(_Buz1^(0+128)+4),w
 18587  13C0  0020               	movlb	0	; select bank0
 18588  13C1  00A0               	movwf	??_Buzzer_Main
 18589  13C2  0820               	movf	??_Buzzer_Main,w
 18590  13C3  0021               	movlb	1	; select bank1
 18591  13C4  00B5               	movwf	(_Buz1^(0+128)+3)
 18592                           
 18593                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18594  13C5  083B               	movf	((_Buz1+1)^(0+128)+8),w
 18595  13C6  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 18596  13C7  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 18597  13C8  083A               	movf	(_Buz1^(0+128)+8),w
 18598  13C9  01B8               	clrf	(_Buz1^(0+128)+6)
 18599  13CA  07B8               	addwf	(_Buz1^(0+128)+6),f
 18600                           
 18601                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18602  13CB  0008               	return
 18603  13CC                     l114:	
 18604  13CC  1E32               	btfss	_Buz1^(0+128),4
 18605  13CD  2BDC               	goto	l116
 18606                           
 18607                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18608  13CE  1232               	bcf	_Buz1^(0+128),4
 18609                           
 18610                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18611  13CF  0837               	movf	(_Buz1^(0+128)+5),w
 18612  13D0  0020               	movlb	0	; select bank0
 18613  13D1  00A0               	movwf	??_Buzzer_Main
 18614  13D2  0820               	movf	??_Buzzer_Main,w
 18615  13D3  0021               	movlb	1	; select bank1
 18616  13D4  00B5               	movwf	(_Buz1^(0+128)+3)
 18617                           
 18618                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18619  13D5  083D               	movf	((_Buz1+1)^(0+128)+10),w
 18620  13D6  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 18621  13D7  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 18622  13D8  083C               	movf	(_Buz1^(0+128)+10),w
 18623  13D9  01B8               	clrf	(_Buz1^(0+128)+6)
 18624  13DA  07B8               	addwf	(_Buz1^(0+128)+6),f
 18625                           
 18626                           ;Buzzer_B1.c: 62: } else {
 18627  13DB  0008               	return
 18628  13DC                     l116:	
 18629                           
 18630                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18631  13DC  10B2               	bcf	_Buz1^(0+128),1
 18632                           
 18633                           ;Buzzer_B1.c: 64: }
 18634                           ;Buzzer_B1.c: 65: } else {
 18635  13DD  0008               	return
 18636  13DE                     l113:	
 18637                           
 18638                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18639  13DE  16B2               	bsf	_Buz1^(0+128),5
 18640                           
 18641                           ;Buzzer_B1.c: 68: RB3 = 1;
 18642  13DF  0020               	movlb	0	; select bank0
 18643  13E0  158D               	bsf	13,3	;volatile
 18644                           
 18645                           ;Buzzer_B1.c: 69: }
 18646                           ;Buzzer_B1.c: 70: } else {
 18647  13E1  0008               	return
 18648  13E2                     l112:	
 18649                           
 18650                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18651  13E2  12B2               	bcf	_Buz1^(0+128),5
 18652                           
 18653                           ;Buzzer_B1.c: 73: RB3 = 0;
 18654  13E3  0020               	movlb	0	; select bank0
 18655  13E4  118D               	bcf	13,3	;volatile
 18656                           
 18657                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18658  13E5  3001               	movlw	1
 18659  13E6  0021               	movlb	1	; select bank1
 18660  13E7  02B5               	subwf	(_Buz1^(0+128)+3),f
 18661  13E8  0008               	return
 18662  13E9                     __end_of_Buzzer_Main:	
 18663                           
 18664                           	psect	text132
 18665  19C3                     __ptext132:	
 18666 ;; *************** function _Buzzer_Initialization *****************
 18667 ;; Defined at:
 18668 ;;		line 11 in file "../src/Buzzer_B1.c"
 18669 ;; Parameters:    Size  Location     Type
 18670 ;;		None
 18671 ;; Auto vars:     Size  Location     Type
 18672 ;;		None
 18673 ;; Return value:  Size  Location     Type
 18674 ;;		None               void
 18675 ;; Registers used:
 18676 ;;		None
 18677 ;; Tracked objects:
 18678 ;;		On entry : 0/0
 18679 ;;		On exit  : 0/0
 18680 ;;		Unchanged: 0/0
 18681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18686 ;;Total ram usage:        0 bytes
 18687 ;; Hardware stack levels used:    1
 18688 ;; Hardware stack levels required when called:    5
 18689 ;; This function calls:
 18690 ;;		Nothing
 18691 ;; This function is called by:
 18692 ;;		_main
 18693 ;; This function uses a non-reentrant model
 18694 ;;
 18695                           
 18696                           
 18697                           ;psect for function _Buzzer_Initialization
 18698  19C3                     _Buzzer_Initialization:	
 18699                           
 18700                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18701                           
 18702                           ;incstack = 0
 18703                           ; Regs used in _Buzzer_Initialization: []
 18704  19C3  0021               	movlb	1	; select bank1
 18705  19C4  1432               	bsf	_Buz1^(0+128),0
 18706  19C5  0008               	return
 18707  19C6                     __end_of_Buzzer_Initialization:	
 18708                           
 18709                           	psect	intentry
 18710  0004                     __pintentry:	
 18711 ;; *************** function _ISR *****************
 18712 ;; Defined at:
 18713 ;;		line 107 in file "../src/MCU_B1.c"
 18714 ;; Parameters:    Size  Location     Type
 18715 ;;		None
 18716 ;; Auto vars:     Size  Location     Type
 18717 ;;		None
 18718 ;; Return value:  Size  Location     Type
 18719 ;;		None               void
 18720 ;; Registers used:
 18721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18722 ;; Tracked objects:
 18723 ;;		On entry : 0/0
 18724 ;;		On exit  : 0/0
 18725 ;;		Unchanged: 0/0
 18726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18729 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18730 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18731 ;;Total ram usage:        1 bytes
 18732 ;; Hardware stack levels used:    1
 18733 ;; Hardware stack levels required when called:    4
 18734 ;; This function calls:
 18735 ;;		_IOC_ISR
 18736 ;;		_TMR0_ISR
 18737 ;; This function is called by:
 18738 ;;		Interrupt level 1
 18739 ;; This function uses a non-reentrant model
 18740 ;;
 18741                           
 18742  0004                     _ISR:	
 18743                           
 18744                           ;incstack = 0
 18745                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18746  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18747  0005  3180               	pagesel	$
 18748  0006  0020               	movlb	0	; select bank0
 18749  0007  087F               	movf	127,w
 18750  0008  00F5               	movwf	??_ISR
 18751                           
 18752                           ;MCU_B1.c: 109: IOC_ISR();
 18753  0009  319A  22BF  3180   	fcall	_IOC_ISR
 18754                           
 18755                           ;MCU_B1.c: 111: TMR0_ISR();
 18756  000C  319F  275A         	fcall	_TMR0_ISR
 18757  000E  0875               	movf	??_ISR,w
 18758  000F  0020               	movlb	0	; select bank0
 18759  0010  00FF               	movwf	127
 18760  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18761  0012  0009               	retfie
 18762  0013                     __end_of_ISR:	
 18763                           
 18764                           	psect	text134
 18765  1F5A                     __ptext134:	
 18766 ;; *************** function _TMR0_ISR *****************
 18767 ;; Defined at:
 18768 ;;		line 135 in file "../src/MCU_B1.c"
 18769 ;; Parameters:    Size  Location     Type
 18770 ;;		None
 18771 ;; Auto vars:     Size  Location     Type
 18772 ;;		None
 18773 ;; Return value:  Size  Location     Type
 18774 ;;		None               void
 18775 ;; Registers used:
 18776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18777 ;; Tracked objects:
 18778 ;;		On entry : 0/0
 18779 ;;		On exit  : 0/0
 18780 ;;		Unchanged: 0/0
 18781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18786 ;;Total ram usage:        0 bytes
 18787 ;; Hardware stack levels used:    1
 18788 ;; Hardware stack levels required when called:    2
 18789 ;; This function calls:
 18790 ;;		_setDimmerLights_IntrControl
 18791 ;; This function is called by:
 18792 ;;		_ISR
 18793 ;; This function uses a non-reentrant model
 18794 ;;
 18795                           
 18796                           
 18797                           ;psect for function _TMR0_ISR
 18798  1F5A                     _TMR0_ISR:	
 18799                           
 18800                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 18801                           
 18802                           ;incstack = 0
 18803                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18804  1F5A  1E8B               	btfss	11,5	;volatile
 18805  1F5B  0008               	return
 18806  1F5C  1D0B               	btfss	11,2	;volatile
 18807  1F5D  0008               	return
 18808                           
 18809                           ;MCU_B1.c: 138: TMR0 = (256-190);
 18810  1F5E  3042               	movlw	66
 18811  1F5F  0020               	movlb	0	; select bank0
 18812  1F60  0095               	movwf	21	;volatile
 18813                           
 18814                           ;MCU_B1.c: 139: TMR0IF = 0;
 18815  1F61  110B               	bcf	11,2	;volatile
 18816                           
 18817                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 18818  1F62  3001               	movlw	1
 18819  1F63  3180  204B  319F   	fcall	_setDimmerLights_IntrControl
 18820                           
 18821                           ;MCU_B1.c: 149: setDimmerLights_IntrControl(2);
 18822  1F66  3002               	movlw	2
 18823  1F67  3180  204B  319F   	fcall	_setDimmerLights_IntrControl
 18824                           
 18825                           ;MCU_B1.c: 160: Timer0.Count++;
 18826  1F6A  3001               	movlw	1
 18827  1F6B  0022               	movlb	2	; select bank2
 18828  1F6C  07B6               	addwf	(_Timer0^(0+256)+1),f
 18829  1F6D  3000               	movlw	0
 18830  1F6E  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 18831                           
 18832                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 18833  1F6F  3001               	movlw	1
 18834  1F70  3E35               	addlw	_Timer0& (0+255)
 18835  1F71  0086               	movwf	6
 18836  1F72  3001               	movlw	1	; select bank2/3
 18837  1F73  0087               	movwf	7
 18838  1F74  3F40               	moviw [0]fsr1
 18839  1F75  3A64               	xorlw	100
 18840  1F76  1D03               	skipz
 18841  1F77  2F7A               	goto	u788_25
 18842  1F78  3F41               	moviw [1]fsr1
 18843  1F79  3A00               	xorlw	0
 18844  1F7A                     u788_25:	
 18845  1F7A  1D03               	skipz
 18846  1F7B  0008               	return
 18847                           
 18848                           ;MCU_B1.c: 162: Timer0.Count = 0;
 18849  1F7C  01B6               	clrf	(_Timer0^(0+256)+1)
 18850  1F7D  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 18851                           
 18852                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 18853  1F7E  0021               	movlb	1	; select bank1
 18854  1F7F  14A0               	bsf	_myMain^(0+128),1
 18855  1F80  0008               	return
 18856  1F81                     __end_of_TMR0_ISR:	
 18857                           
 18858                           	psect	text135
 18859  004B                     __ptext135:	
 18860 ;; *************** function _setDimmerLights_IntrControl *****************
 18861 ;; Defined at:
 18862 ;;		line 94 in file "../src/Dimmer_B1.c"
 18863 ;; Parameters:    Size  Location     Type
 18864 ;;  lights          1    wreg     unsigned char 
 18865 ;; Auto vars:     Size  Location     Type
 18866 ;;  lights          1    4[COMMON] unsigned char 
 18867 ;; Return value:  Size  Location     Type
 18868 ;;		None               void
 18869 ;; Registers used:
 18870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18871 ;; Tracked objects:
 18872 ;;		On entry : 0/0
 18873 ;;		On exit  : 0/0
 18874 ;;		Unchanged: 0/0
 18875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18878 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18879 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18880 ;;Total ram usage:        3 bytes
 18881 ;; Hardware stack levels used:    1
 18882 ;; Hardware stack levels required when called:    1
 18883 ;; This function calls:
 18884 ;;		_DimmerIntrPointSelect
 18885 ;;		i1_setLoad_StatusOff
 18886 ;; This function is called by:
 18887 ;;		_TMR0_ISR
 18888 ;; This function uses a non-reentrant model
 18889 ;;
 18890                           
 18891                           
 18892                           ;psect for function _setDimmerLights_IntrControl
 18893  004B                     _setDimmerLights_IntrControl:	
 18894                           
 18895                           ;incstack = 0
 18896                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18897                           ;setDimmerLights_IntrControl@lights stored from wreg
 18898  004B  00F4               	movwf	setDimmerLights_IntrControl@lights
 18899                           
 18900                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 18901  004C  0874               	movf	setDimmerLights_IntrControl@lights,w
 18902  004D  319B  23C0  3180   	fcall	_DimmerIntrPointSelect
 18903                           
 18904                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 18905  0050  0879               	movf	_DimmerLightsIntr,w
 18906  0051  0086               	movwf	6
 18907  0052  3001               	movlw	1	; select bank2/3
 18908  0053  0087               	movwf	7
 18909  0054  1C01               	btfss	1,0
 18910  0055  28A5               	goto	i1l7354
 18911                           
 18912                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 18913  0056  3001               	movlw	1
 18914  0057  00F2               	movwf	??_setDimmerLights_IntrControl
 18915  0058  0879               	movf	_DimmerLightsIntr,w
 18916  0059  3E03               	addlw	3
 18917  005A  0086               	movwf	6
 18918  005B  3001               	movlw	1	; select bank2/3
 18919  005C  0087               	movwf	7
 18920  005D  0872               	movf	??_setDimmerLights_IntrControl,w
 18921  005E  0781               	addwf	1,f
 18922                           
 18923                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r->Correction)) {
 18924  005F  0877               	movf	_Dimmer,w
 18925  0060  3E02               	addlw	2
 18926  0061  0086               	movwf	6
 18927  0062  0187               	clrf	7
 18928  0063  0879               	movf	_DimmerLightsIntr,w
 18929  0064  3E04               	addlw	4
 18930  0065  0084               	movwf	4
 18931  0066  3001               	movlw	1	; select bank2/3
 18932  0067  0085               	movwf	5
 18933  0068  0800               	movf	0,w
 18934  0069  0701               	addwf	1,w
 18935  006A  00F2               	movwf	??_setDimmerLights_IntrControl
 18936  006B  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18937  006C  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 18938  006D  0879               	movf	_DimmerLightsIntr,w
 18939  006E  3E03               	addlw	3
 18940  006F  0086               	movwf	6
 18941  0070  3001               	movlw	1	; select bank2/3
 18942  0071  0087               	movwf	7
 18943  0072  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18944  0073  3A80               	xorlw	128
 18945  0074  3C80               	sublw	128
 18946  0075  1D03               	skipz
 18947  0076  2879               	goto	u660_25
 18948  0077  0872               	movf	??_setDimmerLights_IntrControl,w
 18949  0078  0201               	subwf	1,w
 18950  0079                     u660_25:	
 18951  0079  1C03               	skipc
 18952  007A  29B3               	goto	i1l7418
 18953                           
 18954                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 18955  007B  0879               	movf	_DimmerLightsIntr,w
 18956  007C  3E03               	addlw	3
 18957  007D  0086               	movwf	6
 18958  007E  3001               	movlw	1	; select bank2/3
 18959  007F  0087               	movwf	7
 18960  0080  0181               	clrf	1
 18961                           
 18962                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 18963  0081  0879               	movf	_DimmerLightsIntr,w
 18964  0082  0086               	movwf	6
 18965  0083  3001               	movlw	1	; select bank2/3
 18966  0084  0087               	movwf	7
 18967  0085  1001               	bcf	1,0
 18968                           
 18969                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 18970  0086  0879               	movf	_DimmerLightsIntr,w
 18971  0087  0086               	movwf	6
 18972  0088  3001               	movlw	1	; select bank2/3
 18973  0089  0087               	movwf	7
 18974  008A  1F01               	btfss	1,6
 18975  008B  29B3               	goto	i1l7418
 18976                           
 18977                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 18978  008C  0879               	movf	_DimmerLightsIntr,w
 18979  008D  3E08               	addlw	8
 18980  008E  0086               	movwf	6
 18981  008F  3001               	movlw	1	; select bank2/3
 18982  0090  0087               	movwf	7
 18983  0091  1401               	bsf	1,0
 18984                           
 18985                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 18986  0092  0879               	movf	_DimmerLightsIntr,w
 18987  0093  3E08               	addlw	8
 18988  0094  0086               	movwf	6
 18989  0095  3001               	movlw	1	; select bank2/3
 18990  0096  0087               	movwf	7
 18991  0097  1681               	bsf	1,5
 18992                           
 18993                           ;Dimmer_B1.c: 107: if (lights == 1) {
 18994  0098  0874               	movf	setDimmerLights_IntrControl@lights,w
 18995  0099  3A01               	xorlw	1
 18996  009A  1D03               	skipz
 18997  009B  289E               	goto	i1l7350
 18998                           
 18999                           ;Dimmer_B1.c: 108: RA7 = 1;
 19000  009C  0020               	movlb	0	; select bank0
 19001  009D  178C               	bsf	12,7	;volatile
 19002  009E                     i1l7350:	
 19003                           ;Dimmer_B1.c: 109: ;;
 19004                           
 19005                           
 19006                           ;Dimmer_B1.c: 110: }
 19007                           ;Dimmer_B1.c: 113: if (lights == 2) {
 19008  009E  0874               	movf	setDimmerLights_IntrControl@lights,w
 19009  009F  3A02               	xorlw	2
 19010  00A0  1D03               	skipz
 19011  00A1  29B3               	goto	i1l7418
 19012                           
 19013                           ;Dimmer_B1.c: 114: RB4 = 1;
 19014  00A2  0020               	movlb	0	; select bank0
 19015  00A3  160D               	bsf	13,4	;volatile
 19016                           
 19017                           ;Dimmer_B1.c: 115: }
 19018                           ;Dimmer_B1.c: 122: }
 19019                           ;Dimmer_B1.c: 123: }
 19020                           ;Dimmer_B1.c: 124: } else {
 19021  00A4  29B3               	goto	i1l7418
 19022  00A5                     i1l7354:	
 19023                           
 19024                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 19025  00A5  0879               	movf	_DimmerLightsIntr,w
 19026  00A6  3E08               	addlw	8
 19027  00A7  0086               	movwf	6
 19028  00A8  3001               	movlw	1	; select bank2/3
 19029  00A9  0087               	movwf	7
 19030  00AA  1C01               	btfss	1,0
 19031  00AB  29B3               	goto	i1l7418
 19032                           
 19033                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 19034  00AC  0879               	movf	_DimmerLightsIntr,w
 19035  00AD  3E08               	addlw	8
 19036  00AE  0086               	movwf	6
 19037  00AF  3001               	movlw	1	; select bank2/3
 19038  00B0  0087               	movwf	7
 19039  00B1  1001               	bcf	1,0
 19040                           
 19041                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 19042  00B2  0879               	movf	_DimmerLightsIntr,w
 19043  00B3  0086               	movwf	6
 19044  00B4  3001               	movlw	1	; select bank2/3
 19045  00B5  0087               	movwf	7
 19046  00B6  1C81               	btfss	1,1
 19047  00B7  29B3               	goto	i1l7418
 19048                           
 19049                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 19050  00B8  3001               	movlw	1
 19051  00B9  00F2               	movwf	??_setDimmerLights_IntrControl
 19052  00BA  0A79               	incf	_DimmerLightsIntr,w
 19053  00BB  0086               	movwf	6
 19054  00BC  3001               	movlw	1	; select bank2/3
 19055  00BD  0087               	movwf	7
 19056  00BE  0872               	movf	??_setDimmerLights_IntrControl,w
 19057  00BF  0781               	addwf	1,f
 19058                           
 19059                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 19060  00C0  0A79               	incf	_DimmerLightsIntr,w
 19061  00C1  0086               	movwf	6
 19062  00C2  3001               	movlw	1	; select bank2/3
 19063  00C3  0087               	movwf	7
 19064  00C4  0879               	movf	_DimmerLightsIntr,w
 19065  00C5  3E02               	addlw	2
 19066  00C6  0084               	movwf	4
 19067  00C7  3001               	movlw	1	; select bank2/3
 19068  00C8  0085               	movwf	5
 19069  00C9  0800               	movf	0,w
 19070  00CA  0201               	subwf	1,w
 19071  00CB  1C03               	skipc
 19072  00CC  29B3               	goto	i1l7418
 19073                           
 19074                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 19075  00CD  0A79               	incf	_DimmerLightsIntr,w
 19076  00CE  0086               	movwf	6
 19077  00CF  3001               	movlw	1	; select bank2/3
 19078  00D0  0087               	movwf	7
 19079  00D1  0181               	clrf	1
 19080                           
 19081                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 19082  00D2  0879               	movf	_DimmerLightsIntr,w
 19083  00D3  0086               	movwf	6
 19084  00D4  3001               	movlw	1	; select bank2/3
 19085  00D5  0087               	movwf	7
 19086  00D6  1D81               	btfss	1,3
 19087  00D7  290E               	goto	i1l7380
 19088                           
 19089                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 19090  00D8  0879               	movf	_DimmerLightsIntr,w
 19091  00D9  0086               	movwf	6
 19092  00DA  3001               	movlw	1	; select bank2/3
 19093  00DB  0087               	movwf	7
 19094  00DC  1A01               	btfsc	1,4
 19095  00DD  28F5               	goto	i1l7374
 19096                           
 19097                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 19098  00DE  0879               	movf	_DimmerLightsIntr,w
 19099  00DF  3E04               	addlw	4
 19100  00E0  0086               	movwf	6
 19101  00E1  3001               	movlw	1	; select bank2/3
 19102  00E2  0087               	movwf	7
 19103  00E3  3021               	movlw	33
 19104  00E4  0201               	subwf	1,w
 19105  00E5  1C03               	skipc
 19106  00E6  28EF               	goto	i1l7372
 19107                           
 19108                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 19109  00E7  0879               	movf	_DimmerLightsIntr,w
 19110  00E8  3E04               	addlw	4
 19111  00E9  0086               	movwf	6
 19112  00EA  3001               	movlw	1	; select bank2/3
 19113  00EB  0087               	movwf	7
 19114  00EC  3001               	movlw	1
 19115  00ED  0281               	subwf	1,f
 19116                           
 19117                           ;Dimmer_B1.c: 135: } else {
 19118  00EE  29B3               	goto	i1l7418
 19119  00EF                     i1l7372:	
 19120                           
 19121                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 19122  00EF  0879               	movf	_DimmerLightsIntr,w
 19123  00F0  0086               	movwf	6
 19124  00F1  3001               	movlw	1	; select bank2/3
 19125  00F2  0087               	movwf	7
 19126  00F3  1601               	bsf	1,4
 19127                           
 19128                           ;Dimmer_B1.c: 137: }
 19129                           ;Dimmer_B1.c: 138: } else {
 19130  00F4  29B3               	goto	i1l7418
 19131  00F5                     i1l7374:	
 19132                           
 19133                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 19134  00F5  0879               	movf	_DimmerLightsIntr,w
 19135  00F6  3E04               	addlw	4
 19136  00F7  0086               	movwf	6
 19137  00F8  3001               	movlw	1	; select bank2/3
 19138  00F9  0087               	movwf	7
 19139  00FA  303C               	movlw	60
 19140  00FB  0201               	subwf	1,w
 19141  00FC  1803               	skipnc
 19142  00FD  2908               	goto	i1l7378
 19143                           
 19144                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 19145  00FE  3001               	movlw	1
 19146  00FF  00F2               	movwf	??_setDimmerLights_IntrControl
 19147  0100  0879               	movf	_DimmerLightsIntr,w
 19148  0101  3E04               	addlw	4
 19149  0102  0086               	movwf	6
 19150  0103  3001               	movlw	1	; select bank2/3
 19151  0104  0087               	movwf	7
 19152  0105  0872               	movf	??_setDimmerLights_IntrControl,w
 19153  0106  0781               	addwf	1,f
 19154                           
 19155                           ;Dimmer_B1.c: 141: } else {
 19156  0107  29B3               	goto	i1l7418
 19157  0108                     i1l7378:	
 19158                           
 19159                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 19160  0108  0879               	movf	_DimmerLightsIntr,w
 19161  0109  0086               	movwf	6
 19162  010A  3001               	movlw	1	; select bank2/3
 19163  010B  0087               	movwf	7
 19164  010C  1201               	bcf	1,4
 19165                           
 19166                           ;Dimmer_B1.c: 143: }
 19167                           ;Dimmer_B1.c: 144: }
 19168                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 19169  010D  29B3               	goto	i1l7418
 19170  010E                     i1l7380:	
 19171  010E  0879               	movf	_DimmerLightsIntr,w
 19172  010F  0086               	movwf	6
 19173  0110  3001               	movlw	1	; select bank2/3
 19174  0111  0087               	movwf	7
 19175  0112  1D01               	btfss	1,2
 19176  0113  2955               	goto	i1l7394
 19177                           
 19178                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 19179  0114  0879               	movf	_DimmerLightsIntr,w
 19180  0115  3E05               	addlw	5
 19181  0116  0086               	movwf	6
 19182  0117  3001               	movlw	1	; select bank2/3
 19183  0118  0087               	movwf	7
 19184  0119  0879               	movf	_DimmerLightsIntr,w
 19185  011A  3E04               	addlw	4
 19186  011B  0084               	movwf	4
 19187  011C  3001               	movlw	1	; select bank2/3
 19188  011D  0085               	movwf	5
 19189  011E  0800               	movf	0,w
 19190  011F  0201               	subwf	1,w
 19191  0120  1803               	skipnc
 19192  0121  292A               	goto	i1l7386
 19193                           
 19194                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 19195  0122  0879               	movf	_DimmerLightsIntr,w
 19196  0123  3E04               	addlw	4
 19197  0124  0086               	movwf	6
 19198  0125  3001               	movlw	1	; select bank2/3
 19199  0126  0087               	movwf	7
 19200  0127  3001               	movlw	1
 19201  0128  0281               	subwf	1,f
 19202                           
 19203                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 19204  0129  2941               	goto	i1l7390
 19205  012A                     i1l7386:	
 19206  012A  0879               	movf	_DimmerLightsIntr,w
 19207  012B  3E04               	addlw	4
 19208  012C  0086               	movwf	6
 19209  012D  3001               	movlw	1	; select bank2/3
 19210  012E  0087               	movwf	7
 19211  012F  0879               	movf	_DimmerLightsIntr,w
 19212  0130  3E05               	addlw	5
 19213  0131  0084               	movwf	4
 19214  0132  3001               	movlw	1	; select bank2/3
 19215  0133  0085               	movwf	5
 19216  0134  0800               	movf	0,w
 19217  0135  0201               	subwf	1,w
 19218  0136  1803               	skipnc
 19219  0137  2941               	goto	i1l7390
 19220                           
 19221                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 19222  0138  3001               	movlw	1
 19223  0139  00F2               	movwf	??_setDimmerLights_IntrControl
 19224  013A  0879               	movf	_DimmerLightsIntr,w
 19225  013B  3E04               	addlw	4
 19226  013C  0086               	movwf	6
 19227  013D  3001               	movlw	1	; select bank2/3
 19228  013E  0087               	movwf	7
 19229  013F  0872               	movf	??_setDimmerLights_IntrControl,w
 19230  0140  0781               	addwf	1,f
 19231  0141                     i1l7390:	
 19232                           
 19233                           ;Dimmer_B1.c: 150: }
 19234                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 19235  0141  0879               	movf	_DimmerLightsIntr,w
 19236  0142  3E05               	addlw	5
 19237  0143  0086               	movwf	6
 19238  0144  3001               	movlw	1	; select bank2/3
 19239  0145  0087               	movwf	7
 19240  0146  0879               	movf	_DimmerLightsIntr,w
 19241  0147  3E04               	addlw	4
 19242  0148  0084               	movwf	4
 19243  0149  3001               	movlw	1	; select bank2/3
 19244  014A  0085               	movwf	5
 19245  014B  0800               	movf	0,w
 19246  014C  0601               	xorwf	1,w
 19247  014D  1D03               	skipz
 19248  014E  29B3               	goto	i1l7418
 19249                           
 19250                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 19251  014F  0879               	movf	_DimmerLightsIntr,w
 19252  0150  0086               	movwf	6
 19253  0151  3001               	movlw	1	; select bank2/3
 19254  0152  0087               	movwf	7
 19255  0153  1101               	bcf	1,2
 19256  0154  2970               	goto	i1l7400
 19257  0155                     i1l7394:	
 19258                           ;Dimmer_B1.c: 154: }
 19259                           ;Dimmer_B1.c: 155: } else {
 19260                           
 19261                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 19262                           
 19263                           
 19264                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 19265  0155  0879               	movf	_DimmerLightsIntr,w
 19266  0156  0086               	movwf	6
 19267  0157  3001               	movlw	1	; select bank2/3
 19268  0158  0087               	movwf	7
 19269  0159  1E81               	btfss	1,5
 19270  015A  2976               	goto	i1l7402
 19271                           
 19272                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 19273  015B  0879               	movf	_DimmerLightsIntr,w
 19274  015C  3E04               	addlw	4
 19275  015D  0086               	movwf	6
 19276  015E  3001               	movlw	1	; select bank2/3
 19277  015F  0087               	movwf	7
 19278  0160  3001               	movlw	1
 19279  0161  0281               	subwf	1,f
 19280                           
 19281                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 19282  0162  0879               	movf	_DimmerLightsIntr,w
 19283  0163  3E05               	addlw	5
 19284  0164  0086               	movwf	6
 19285  0165  3001               	movlw	1	; select bank2/3
 19286  0166  0087               	movwf	7
 19287  0167  0879               	movf	_DimmerLightsIntr,w
 19288  0168  3E04               	addlw	4
 19289  0169  0084               	movwf	4
 19290  016A  3001               	movlw	1	; select bank2/3
 19291  016B  0085               	movwf	5
 19292  016C  0800               	movf	0,w
 19293  016D  0201               	subwf	1,w
 19294  016E  1C03               	skipc
 19295  016F  29B3               	goto	i1l7418
 19296  0170                     i1l7400:	
 19297                           
 19298                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 19299  0170  0879               	movf	_DimmerLightsIntr,w
 19300  0171  0086               	movwf	6
 19301  0172  3001               	movlw	1	; select bank2/3
 19302  0173  0087               	movwf	7
 19303  0174  1081               	bcf	1,1
 19304                           
 19305                           ;Dimmer_B1.c: 160: }
 19306                           ;Dimmer_B1.c: 161: } else {
 19307  0175  29B3               	goto	i1l7418
 19308  0176                     i1l7402:	
 19309                           
 19310                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 19311  0176  3001               	movlw	1
 19312  0177  00F2               	movwf	??_setDimmerLights_IntrControl
 19313  0178  0879               	movf	_DimmerLightsIntr,w
 19314  0179  3E04               	addlw	4
 19315  017A  0086               	movwf	6
 19316  017B  3001               	movlw	1	; select bank2/3
 19317  017C  0087               	movwf	7
 19318  017D  0872               	movf	??_setDimmerLights_IntrControl,w
 19319  017E  0781               	addwf	1,f
 19320                           
 19321                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 19322  017F  0879               	movf	_DimmerLightsIntr,w
 19323  0180  3E04               	addlw	4
 19324  0181  0086               	movwf	6
 19325  0182  3001               	movlw	1	; select bank2/3
 19326  0183  0087               	movwf	7
 19327  0184  0879               	movf	_DimmerLightsIntr,w
 19328  0185  3E06               	addlw	6
 19329  0186  0084               	movwf	4
 19330  0187  3001               	movlw	1	; select bank2/3
 19331  0188  0085               	movwf	5
 19332  0189  0800               	movf	0,w
 19333  018A  0201               	subwf	1,w
 19334  018B  1C03               	skipc
 19335  018C  29B3               	goto	i1l7418
 19336                           
 19337                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 19338  018D  0879               	movf	_DimmerLightsIntr,w
 19339  018E  0086               	movwf	6
 19340  018F  3001               	movlw	1	; select bank2/3
 19341  0190  0087               	movwf	7
 19342  0191  1081               	bcf	1,1
 19343                           
 19344                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 19345  0192  0879               	movf	_DimmerLightsIntr,w
 19346  0193  0086               	movwf	6
 19347  0194  3001               	movlw	1	; select bank2/3
 19348  0195  0087               	movwf	7
 19349  0196  1301               	bcf	1,6
 19350                           
 19351                           ;Dimmer_B1.c: 166: DimmerLightsIntr->Clear = 1;
 19352  0197  0879               	movf	_DimmerLightsIntr,w
 19353  0198  3E09               	addlw	9
 19354  0199  0086               	movwf	6
 19355  019A  3001               	movlw	1	; select bank2/3
 19356  019B  0087               	movwf	7
 19357  019C  1501               	bsf	1,2
 19358                           
 19359                           ;Dimmer_B1.c: 167: Dimmer->Detect = 1;
 19360  019D  0877               	movf	_Dimmer,w
 19361  019E  0086               	movwf	6
 19362  019F  0187               	clrf	7
 19363  01A0  1401               	bsf	1,0
 19364                           
 19365                           ;Dimmer_B1.c: 169: if (lights == 1) {
 19366  01A1  0874               	movf	setDimmerLights_IntrControl@lights,w
 19367  01A2  3A01               	xorlw	1
 19368  01A3  1D03               	skipz
 19369  01A4  29A7               	goto	i1l7412
 19370                           
 19371                           ;Dimmer_B1.c: 170: RA3 = 0;
 19372  01A5  0020               	movlb	0	; select bank0
 19373  01A6  118C               	bcf	12,3	;volatile
 19374  01A7                     i1l7412:	
 19375                           
 19376                           ;Dimmer_B1.c: 172: }
 19377                           ;Dimmer_B1.c: 175: if (lights == 2) {
 19378  01A7  0874               	movf	setDimmerLights_IntrControl@lights,w
 19379  01A8  3A02               	xorlw	2
 19380  01A9  1D03               	skipz
 19381  01AA  29AD               	goto	i1l7416
 19382                           
 19383                           ;Dimmer_B1.c: 176: RC7 = 0;
 19384  01AB  0020               	movlb	0	; select bank0
 19385  01AC  138E               	bcf	14,7	;volatile
 19386  01AD                     i1l7416:	
 19387                           
 19388                           ;Dimmer_B1.c: 177: }
 19389                           ;Dimmer_B1.c: 184: setLoad_StatusOff(lights, 1);
 19390  01AD  01F0               	clrf	i1setLoad_StatusOff@command
 19391  01AE  0AF0               	incf	i1setLoad_StatusOff@command,f
 19392  01AF  0874               	movf	setDimmerLights_IntrControl@lights,w
 19393  01B0  319C  2481  3180   	fcall	i1_setLoad_StatusOff
 19394  01B3                     i1l7418:	
 19395                           
 19396                           ;Dimmer_B1.c: 185: }
 19397                           ;Dimmer_B1.c: 186: }
 19398                           ;Dimmer_B1.c: 187: }
 19399                           ;Dimmer_B1.c: 188: }
 19400                           ;Dimmer_B1.c: 189: }
 19401                           ;Dimmer_B1.c: 190: }
 19402                           ;Dimmer_B1.c: 191: }
 19403                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->Triac == 1) {
 19404  01B3  0879               	movf	_DimmerLightsIntr,w
 19405  01B4  3E08               	addlw	8
 19406  01B5  0086               	movwf	6
 19407  01B6  3001               	movlw	1	; select bank2/3
 19408  01B7  0087               	movwf	7
 19409  01B8  1E81               	btfss	1,5
 19410  01B9  29E4               	goto	i1l7436
 19411                           
 19412                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime++;
 19413  01BA  3001               	movlw	1
 19414  01BB  00F2               	movwf	??_setDimmerLights_IntrControl
 19415  01BC  0879               	movf	_DimmerLightsIntr,w
 19416  01BD  3E07               	addlw	7
 19417  01BE  0086               	movwf	6
 19418  01BF  3001               	movlw	1	; select bank2/3
 19419  01C0  0087               	movwf	7
 19420  01C1  0872               	movf	??_setDimmerLights_IntrControl,w
 19421  01C2  0781               	addwf	1,f
 19422                           
 19423                           ;Dimmer_B1.c: 194: if (DimmerLightsIntr->TriacTime >= 5) {
 19424  01C3  0879               	movf	_DimmerLightsIntr,w
 19425  01C4  3E07               	addlw	7
 19426  01C5  0086               	movwf	6
 19427  01C6  3001               	movlw	1	; select bank2/3
 19428  01C7  0087               	movwf	7
 19429  01C8  3005               	movlw	5
 19430  01C9  0201               	subwf	1,w
 19431  01CA  1C03               	skipc
 19432  01CB  29E4               	goto	i1l7436
 19433                           
 19434                           ;Dimmer_B1.c: 195: DimmerLightsIntr->TriacTime = 0;
 19435  01CC  0879               	movf	_DimmerLightsIntr,w
 19436  01CD  3E07               	addlw	7
 19437  01CE  0086               	movwf	6
 19438  01CF  3001               	movlw	1	; select bank2/3
 19439  01D0  0087               	movwf	7
 19440  01D1  0181               	clrf	1
 19441                           
 19442                           ;Dimmer_B1.c: 196: DimmerLightsIntr->Triac = 0;
 19443  01D2  0879               	movf	_DimmerLightsIntr,w
 19444  01D3  3E08               	addlw	8
 19445  01D4  0086               	movwf	6
 19446  01D5  3001               	movlw	1	; select bank2/3
 19447  01D6  0087               	movwf	7
 19448  01D7  1281               	bcf	1,5
 19449                           
 19450                           ;Dimmer_B1.c: 199: if (lights == 1) {
 19451  01D8  0874               	movf	setDimmerLights_IntrControl@lights,w
 19452  01D9  3A01               	xorlw	1
 19453  01DA  1D03               	skipz
 19454  01DB  29DE               	goto	i1l7432
 19455                           
 19456                           ;Dimmer_B1.c: 200: RA7 = 0;
 19457  01DC  0020               	movlb	0	; select bank0
 19458  01DD  138C               	bcf	12,7	;volatile
 19459  01DE                     i1l7432:	
 19460                           ;Dimmer_B1.c: 201: ;;
 19461                           
 19462                           
 19463                           ;Dimmer_B1.c: 202: }
 19464                           ;Dimmer_B1.c: 205: if (lights == 2) {
 19465  01DE  0874               	movf	setDimmerLights_IntrControl@lights,w
 19466  01DF  3A02               	xorlw	2
 19467  01E0  1D03               	skipz
 19468  01E1  29E4               	goto	i1l7436
 19469                           
 19470                           ;Dimmer_B1.c: 206: RB4 = 0;
 19471  01E2  0020               	movlb	0	; select bank0
 19472  01E3  120D               	bcf	13,4	;volatile
 19473  01E4                     i1l7436:	
 19474                           
 19475                           ;Dimmer_B1.c: 207: }
 19476                           ;Dimmer_B1.c: 214: }
 19477                           ;Dimmer_B1.c: 215: }
 19478                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacFlag == 1) {
 19479  01E4  0879               	movf	_DimmerLightsIntr,w
 19480  01E5  3E09               	addlw	9
 19481  01E6  0086               	movwf	6
 19482  01E7  3001               	movlw	1	; select bank2/3
 19483  01E8  0087               	movwf	7
 19484  01E9  1E81               	btfss	1,5
 19485  01EA  0008               	return
 19486                           
 19487                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount++;
 19488  01EB  3001               	movlw	1
 19489  01EC  00F2               	movwf	??_setDimmerLights_IntrControl
 19490  01ED  0879               	movf	_DimmerLightsIntr,w
 19491  01EE  3E0A               	addlw	10
 19492  01EF  0086               	movwf	6
 19493  01F0  3001               	movlw	1	; select bank2/3
 19494  01F1  0087               	movwf	7
 19495  01F2  0872               	movf	??_setDimmerLights_IntrControl,w
 19496  01F3  0781               	addwf	1,f
 19497                           
 19498                           ;Dimmer_B1.c: 218: if (DimmerLightsIntr->TriacCount == 70) {
 19499  01F4  0879               	movf	_DimmerLightsIntr,w
 19500  01F5  3E0A               	addlw	10
 19501  01F6  0086               	movwf	6
 19502  01F7  3001               	movlw	1	; select bank2/3
 19503  01F8  0087               	movwf	7
 19504  01F9  0801               	movf	1,w
 19505  01FA  3A46               	xorlw	70
 19506  01FB  1D03               	skipz
 19507  01FC  0008               	return
 19508                           
 19509                           ;Dimmer_B1.c: 219: DimmerLightsIntr->TriacCount = 0;
 19510  01FD  0879               	movf	_DimmerLightsIntr,w
 19511  01FE  3E0A               	addlw	10
 19512  01FF  0086               	movwf	6
 19513  0200  3001               	movlw	1	; select bank2/3
 19514  0201  0087               	movwf	7
 19515  0202  0181               	clrf	1
 19516                           
 19517                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacFlag = 0;
 19518  0203  0879               	movf	_DimmerLightsIntr,w
 19519  0204  3E09               	addlw	9
 19520  0205  0086               	movwf	6
 19521  0206  3001               	movlw	1	; select bank2/3
 19522  0207  0087               	movwf	7
 19523  0208  1281               	bcf	1,5
 19524  0209  0008               	return
 19525  020A                     __end_of_setDimmerLights_IntrControl:	
 19526                           
 19527                           	psect	text136
 19528  1C81                     __ptext136:	
 19529 ;; *************** function i1_setLoad_StatusOff *****************
 19530 ;; Defined at:
 19531 ;;		line 282 in file "../src/OverLoad_B1.c"
 19532 ;; Parameters:    Size  Location     Type
 19533 ;;  lights          1    wreg     unsigned char 
 19534 ;;  command         1    0[COMMON] unsigned char 
 19535 ;; Auto vars:     Size  Location     Type
 19536 ;;  lights          1    1[COMMON] unsigned char 
 19537 ;; Return value:  Size  Location     Type
 19538 ;;		None               void
 19539 ;; Registers used:
 19540 ;;		wreg, status,2, status,0
 19541 ;; Tracked objects:
 19542 ;;		On entry : 0/0
 19543 ;;		On exit  : 0/0
 19544 ;;		Unchanged: 0/0
 19545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19546 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19549 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19550 ;;Total ram usage:        2 bytes
 19551 ;; Hardware stack levels used:    1
 19552 ;; This function calls:
 19553 ;;		Nothing
 19554 ;; This function is called by:
 19555 ;;		_setDimmerLights_IntrControl
 19556 ;; This function uses a non-reentrant model
 19557 ;;
 19558                           
 19559                           
 19560                           ;psect for function i1_setLoad_StatusOff
 19561  1C81                     i1_setLoad_StatusOff:	
 19562                           
 19563                           ;incstack = 0
 19564                           ; Regs used in i1_setLoad_StatusOff: [wreg+status,2+status,0]
 19565                           ;i1setLoad_StatusOff@lights stored from wreg
 19566  1C81  00F1               	movwf	i1setLoad_StatusOff@lights
 19567                           
 19568                           ;OverLoad_B1.c: 283: Load1.StatusOff = command;
 19569  1C82  0870               	movf	i1setLoad_StatusOff@command,w
 19570  1C83  0023               	movlb	3	; select bank3
 19571  1C84  13A0               	bcf	_Load1^(0+384),7
 19572  1C85  1D03               	skipz
 19573  1C86  17A0               	bsf	_Load1^(0+384),7
 19574                           
 19575                           ;OverLoad_B1.c: 284: Load1.SafeCount -= 2;
 19576  1C87  3002               	movlw	2
 19577  1C88  02E2               	subwf	(_Load1^(0+384)+66),f
 19578                           
 19579                           ;OverLoad_B1.c: 285: if (lights == 1) {
 19580  1C89  0871               	movf	i1setLoad_StatusOff@lights,w
 19581  1C8A  3A01               	xorlw	1
 19582  1C8B  1903               	btfsc	3,2
 19583                           
 19584                           ;OverLoad_B1.c: 286: Load1.Lights1Status = 0;
 19585  1C8C  01E3               	clrf	(_Load1^(0+384)+67)
 19586                           
 19587                           ;OverLoad_B1.c: 287: }
 19588                           ;OverLoad_B1.c: 288: if (lights == 2) {
 19589  1C8D  0871               	movf	i1setLoad_StatusOff@lights,w
 19590  1C8E  3A02               	xorlw	2
 19591  1C8F  1903               	btfsc	3,2
 19592                           
 19593                           ;OverLoad_B1.c: 289: Load1.Lights2Status = 0;
 19594  1C90  01E4               	clrf	(_Load1^(0+384)+68)
 19595                           
 19596                           ;OverLoad_B1.c: 290: }
 19597                           ;OverLoad_B1.c: 291: if (lights == 3) {
 19598  1C91  0871               	movf	i1setLoad_StatusOff@lights,w
 19599  1C92  3A03               	xorlw	3
 19600  1C93  1D03               	skipz
 19601  1C94  0008               	return
 19602                           
 19603                           ;OverLoad_B1.c: 292: Load1.Lights3Status = 0;
 19604  1C95  01E5               	clrf	(_Load1^(0+384)+69)
 19605  1C96  0008               	return
 19606  1C97                     __end_ofi1_setLoad_StatusOff:	
 19607                           
 19608                           	psect	text137
 19609  1BC0                     __ptext137:	
 19610 ;; *************** function _DimmerIntrPointSelect *****************
 19611 ;; Defined at:
 19612 ;;		line 72 in file "../src/Dimmer_B1.c"
 19613 ;; Parameters:    Size  Location     Type
 19614 ;;  lights          1    wreg     unsigned char 
 19615 ;; Auto vars:     Size  Location     Type
 19616 ;;  lights          1    1[COMMON] unsigned char 
 19617 ;; Return value:  Size  Location     Type
 19618 ;;		None               void
 19619 ;; Registers used:
 19620 ;;		wreg
 19621 ;; Tracked objects:
 19622 ;;		On entry : 0/0
 19623 ;;		On exit  : 0/0
 19624 ;;		Unchanged: 0/0
 19625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19627 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19628 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19629 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19630 ;;Total ram usage:        2 bytes
 19631 ;; Hardware stack levels used:    1
 19632 ;; This function calls:
 19633 ;;		Nothing
 19634 ;; This function is called by:
 19635 ;;		_setDimmerLights_IntrControl
 19636 ;; This function uses a non-reentrant model
 19637 ;;
 19638                           
 19639                           
 19640                           ;psect for function _DimmerIntrPointSelect
 19641  1BC0                     _DimmerIntrPointSelect:	
 19642                           
 19643                           ;incstack = 0
 19644                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19645                           ;DimmerIntrPointSelect@lights stored from wreg
 19646  1BC0  00F1               	movwf	DimmerIntrPointSelect@lights
 19647                           
 19648                           ;Dimmer_B1.c: 74: if (lights == 1) {
 19649  1BC1  0871               	movf	DimmerIntrPointSelect@lights,w
 19650  1BC2  3A01               	xorlw	1
 19651  1BC3  1D03               	skipz
 19652  1BC4  2BC9               	goto	i1l781
 19653                           
 19654                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 19655  1BC5  303D               	movlw	_DimmerLights1& (0+255)
 19656  1BC6  00F0               	movwf	??_DimmerIntrPointSelect
 19657  1BC7  0870               	movf	??_DimmerIntrPointSelect,w
 19658  1BC8  00F9               	movwf	_DimmerLightsIntr
 19659  1BC9                     i1l781:	
 19660                           
 19661                           ;Dimmer_B1.c: 76: }
 19662                           ;Dimmer_B1.c: 79: if (lights == 2) {
 19663  1BC9  0871               	movf	DimmerIntrPointSelect@lights,w
 19664  1BCA  3A02               	xorlw	2
 19665  1BCB  1D03               	skipz
 19666  1BCC  0008               	return
 19667                           
 19668                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 19669  1BCD  304C               	movlw	_DimmerLights2& (0+255)
 19670  1BCE  00F0               	movwf	??_DimmerIntrPointSelect
 19671  1BCF  0870               	movf	??_DimmerIntrPointSelect,w
 19672  1BD0  00F9               	movwf	_DimmerLightsIntr
 19673  1BD1  0008               	return
 19674  1BD2                     __end_of_DimmerIntrPointSelect:	
 19675                           
 19676                           	psect	text138
 19677  1ABF                     __ptext138:	
 19678 ;; *************** function _IOC_ISR *****************
 19679 ;; Defined at:
 19680 ;;		line 297 in file "../src/MCU_B1.c"
 19681 ;; Parameters:    Size  Location     Type
 19682 ;;		None
 19683 ;; Auto vars:     Size  Location     Type
 19684 ;;		None
 19685 ;; Return value:  Size  Location     Type
 19686 ;;		None               void
 19687 ;; Registers used:
 19688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19689 ;; Tracked objects:
 19690 ;;		On entry : 0/0
 19691 ;;		On exit  : 0/0
 19692 ;;		Unchanged: 0/0
 19693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19698 ;;Total ram usage:        0 bytes
 19699 ;; Hardware stack levels used:    1
 19700 ;; Hardware stack levels required when called:    3
 19701 ;; This function calls:
 19702 ;;		_setDimmerReClock
 19703 ;; This function is called by:
 19704 ;;		_ISR
 19705 ;; This function uses a non-reentrant model
 19706 ;;
 19707                           
 19708                           
 19709                           ;psect for function _IOC_ISR
 19710  1ABF                     _IOC_ISR:	
 19711                           
 19712                           ;MCU_B1.c: 298: if (IOCIE == 1 && IOCBF2 == 1) {
 19713                           
 19714                           ;incstack = 0
 19715                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19716  1ABF  1D8B               	btfss	11,3	;volatile
 19717  1AC0  0008               	return
 19718  1AC1  0027               	movlb	7	; select bank7
 19719  1AC2  1D16               	btfss	22,2	;volatile
 19720  1AC3  0008               	return
 19721                           
 19722                           ;MCU_B1.c: 299: IOCBF2 = 0;
 19723  1AC4  1116               	bcf	22,2	;volatile
 19724                           
 19725                           ;MCU_B1.c: 300: IOCIF = 0;
 19726  1AC5  100B               	bcf	11,0	;volatile
 19727                           
 19728                           ;MCU_B1.c: 301: if (myMain.PowerON == 1) {
 19729  1AC6  0021               	movlb	1	; select bank1
 19730  1AC7  1C20               	btfss	_myMain^(0+128),0
 19731  1AC8  0008               	return
 19732                           
 19733                           ;MCU_B1.c: 303: setDimmerReClock();
 19734  1AC9  319A  2205         	fcall	_setDimmerReClock
 19735  1ACB  0008               	return
 19736  1ACC                     __end_of_IOC_ISR:	
 19737                           
 19738                           	psect	text139
 19739  1A05                     __ptext139:	
 19740 ;; *************** function _setDimmerReClock *****************
 19741 ;; Defined at:
 19742 ;;		line 169 in file "../src/MCU_B1.c"
 19743 ;; Parameters:    Size  Location     Type
 19744 ;;		None
 19745 ;; Auto vars:     Size  Location     Type
 19746 ;;		None
 19747 ;; Return value:  Size  Location     Type
 19748 ;;		None               void
 19749 ;; Registers used:
 19750 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19751 ;; Tracked objects:
 19752 ;;		On entry : 0/0
 19753 ;;		On exit  : 0/0
 19754 ;;		Unchanged: 0/0
 19755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19760 ;;Total ram usage:        0 bytes
 19761 ;; Hardware stack levels used:    1
 19762 ;; Hardware stack levels required when called:    2
 19763 ;; This function calls:
 19764 ;;		_setDimmerLights_IntrIOC_GO
 19765 ;; This function is called by:
 19766 ;;		_IOC_ISR
 19767 ;; This function uses a non-reentrant model
 19768 ;;
 19769                           
 19770                           
 19771                           ;psect for function _setDimmerReClock
 19772  1A05                     _setDimmerReClock:	
 19773                           
 19774                           ;MCU_B1.c: 174: setDimmerLights_IntrIOC_GO(1);
 19775                           
 19776                           ;incstack = 0
 19777                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19778  1A05  3001               	movlw	1
 19779  1A06  3190  20A4  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19780                           
 19781                           ;MCU_B1.c: 178: setDimmerLights_IntrIOC_GO(2);
 19782  1A09  3002               	movlw	2
 19783  1A0A  3190  20A4         	fcall	_setDimmerLights_IntrIOC_GO
 19784  1A0C  0008               	return
 19785  1A0D                     __end_of_setDimmerReClock:	
 19786                           
 19787                           	psect	text140
 19788  10A4                     __ptext140:	
 19789 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19790 ;; Defined at:
 19791 ;;		line 28 in file "../src/Dimmer_B1.c"
 19792 ;; Parameters:    Size  Location     Type
 19793 ;;  lights          1    wreg     unsigned char 
 19794 ;; Auto vars:     Size  Location     Type
 19795 ;;  lights          1    2[COMMON] unsigned char 
 19796 ;; Return value:  Size  Location     Type
 19797 ;;		None               void
 19798 ;; Registers used:
 19799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19800 ;; Tracked objects:
 19801 ;;		On entry : 0/0
 19802 ;;		On exit  : 0/0
 19803 ;;		Unchanged: 0/0
 19804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19806 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19808 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19809 ;;Total ram usage:        1 bytes
 19810 ;; Hardware stack levels used:    1
 19811 ;; Hardware stack levels required when called:    1
 19812 ;; This function calls:
 19813 ;;		_DimmerIntrIOCPointSelect
 19814 ;; This function is called by:
 19815 ;;		_setDimmerReClock
 19816 ;; This function uses a non-reentrant model
 19817 ;;
 19818                           
 19819                           
 19820                           ;psect for function _setDimmerLights_IntrIOC_GO
 19821  10A4                     _setDimmerLights_IntrIOC_GO:	
 19822                           
 19823                           ;incstack = 0
 19824                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19825                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19826  10A4  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19827                           
 19828                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 19829  10A5  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19830  10A6  319C  241B  3190   	fcall	_DimmerIntrIOCPointSelect
 19831                           
 19832                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 19833  10A9  0021               	movlb	1	; select bank1
 19834  10AA  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19835  10AB  0086               	movwf	6
 19836  10AC  3001               	movlw	1	; select bank2/3
 19837  10AD  0087               	movwf	7
 19838  10AE  1801               	btfsc	1,0
 19839  10AF  0008               	return
 19840  10B0  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19841  10B1  3E09               	addlw	9
 19842  10B2  0086               	movwf	6
 19843  10B3  3001               	movlw	1	; select bank2/3
 19844  10B4  0087               	movwf	7
 19845  10B5  1A81               	btfsc	1,5
 19846  10B6  0008               	return
 19847                           
 19848                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 19849  10B7  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19850  10B8  0086               	movwf	6
 19851  10B9  3001               	movlw	1	; select bank2/3
 19852  10BA  0087               	movwf	7
 19853  10BB  1401               	bsf	1,0
 19854                           
 19855                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 19856  10BC  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19857  10BD  3E09               	addlw	9
 19858  10BE  0086               	movwf	6
 19859  10BF  3001               	movlw	1	; select bank2/3
 19860  10C0  0087               	movwf	7
 19861  10C1  1681               	bsf	1,5
 19862                           
 19863                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 19864  10C2  0020               	movlb	0	; select bank0
 19865  10C3  1D0D               	btfss	13,2	;volatile
 19866  10C4  28CC               	goto	i1l6960
 19867                           
 19868                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 19869  10C5  0877               	movf	_Dimmer,w
 19870  10C6  3E02               	addlw	2
 19871  10C7  0086               	movwf	6
 19872  10C8  0187               	clrf	7
 19873  10C9  0181               	clrf	1
 19874  10CA  0A81               	incf	1,f
 19875                           
 19876                           ;Dimmer_B1.c: 37: } else {
 19877  10CB  0008               	return
 19878  10CC                     i1l6960:	
 19879                           
 19880                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 19881  10CC  0877               	movf	_Dimmer,w
 19882  10CD  3E02               	addlw	2
 19883  10CE  0086               	movwf	6
 19884  10CF  0187               	clrf	7
 19885  10D0  0181               	clrf	1
 19886  10D1  0008               	return
 19887  10D2                     __end_of_setDimmerLights_IntrIOC_GO:	
 19888                           
 19889                           	psect	text141
 19890  1C1B                     __ptext141:	
 19891 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19892 ;; Defined at:
 19893 ;;		line 8 in file "../src/Dimmer_B1.c"
 19894 ;; Parameters:    Size  Location     Type
 19895 ;;  lights          1    wreg     unsigned char 
 19896 ;; Auto vars:     Size  Location     Type
 19897 ;;  lights          1    1[COMMON] unsigned char 
 19898 ;; Return value:  Size  Location     Type
 19899 ;;		None               void
 19900 ;; Registers used:
 19901 ;;		wreg
 19902 ;; Tracked objects:
 19903 ;;		On entry : 0/0
 19904 ;;		On exit  : 0/0
 19905 ;;		Unchanged: 0/0
 19906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19908 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19909 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19910 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19911 ;;Total ram usage:        2 bytes
 19912 ;; Hardware stack levels used:    1
 19913 ;; This function calls:
 19914 ;;		Nothing
 19915 ;; This function is called by:
 19916 ;;		_setDimmerLights_IntrIOC_GO
 19917 ;; This function uses a non-reentrant model
 19918 ;;
 19919                           
 19920                           
 19921                           ;psect for function _DimmerIntrIOCPointSelect
 19922  1C1B                     _DimmerIntrIOCPointSelect:	
 19923                           
 19924                           ;incstack = 0
 19925                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19926                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19927  1C1B  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19928                           
 19929                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19930  1C1C  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19931  1C1D  3A01               	xorlw	1
 19932  1C1E  1D03               	skipz
 19933  1C1F  2C25               	goto	i1l770
 19934                           
 19935                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19936  1C20  303D               	movlw	_DimmerLights1& (0+255)
 19937  1C21  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19938  1C22  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19939  1C23  0021               	movlb	1	; select bank1
 19940  1C24  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19941  1C25                     i1l770:	
 19942                           
 19943                           ;Dimmer_B1.c: 12: }
 19944                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19945  1C25  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19946  1C26  3A02               	xorlw	2
 19947  1C27  1D03               	skipz
 19948  1C28  0008               	return
 19949                           
 19950                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19951  1C29  304C               	movlw	_DimmerLights2& (0+255)
 19952  1C2A  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19953  1C2B  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19954  1C2C  0021               	movlb	1	; select bank1
 19955  1C2D  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19956  1C2E  0008               	return
 19957  1C2F                     __end_of_DimmerIntrIOCPointSelect:	
 19958  007E                     btemp	set	126	;btemp
 19959  007E                     pic14e$flags	set	126
 19960  007E                     wtemp	set	126
 19961  007E                     wtemp0	set	126
 19962  0080                     wtemp1	set	128
 19963  0082                     wtemp2	set	130
 19964  0084                     wtemp3	set	132
 19965  0086                     wtemp4	set	134
 19966  0088                     wtemp5	set	136
 19967  007F                     wtemp6	set	127
 19968  007E                     ttemp	set	126
 19969  007E                     ttemp0	set	126
 19970  0081                     ttemp1	set	129
 19971  0084                     ttemp2	set	132
 19972  0087                     ttemp3	set	135
 19973  007F                     ttemp4	set	127
 19974  007E                     ltemp	set	126
 19975  007E                     ltemp0	set	126
 19976  0082                     ltemp1	set	130
 19977  0086                     ltemp2	set	134
 19978  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         280
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     76      78
    BANK1            80      0      78
    BANK2            80      0      80
    BANK3            80      0      79
    BANK4            80      4      73
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerLights_IntrControl->i1_setLoad_StatusOff
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  132700
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    2234
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           5     5      0     601
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    9586
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    9586
                                             17 BANK0      1     1      0
                       _getLoad_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    9552
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   29437
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   29437
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0   12930
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12426
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1711
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     332
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     332
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1182
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1182
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   39303
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           7     7      0   39303
                                             71 BANK0      5     5      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                             ___wmul
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37767
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    2017
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35750
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14744
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1710
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15222
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15036
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14943
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            3     3      0    9789
                                             17 BANK0      3     3      0
                            ___lwdiv
                             ___wmul
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   3     3      0    7535
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     124
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    5978
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     425
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    3369
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     540
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getTemp_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     760
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     657
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1306
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1306
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   14012
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   13814
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    9280
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     401
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2167
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     228
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1151
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     198
         _getDimmerLights_StatusFlag
                         _setLoad_GO
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13669
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13669
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     748
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     852
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     644
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     644
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    2017
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     400
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     334
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     334
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (14) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___awdiv
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       ___wmul
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setLoad_Enable
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect
       i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      49      13       91.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     190      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     190      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Oct 23 16:44:44 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1EC9                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006D  
     __end_of_getDimmerLights_StatusFlag 1BAF               _getDimmerLights_StatusFlag 1B9E  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 173B  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1E25  
                   _setDimmerLights_Main 0A5D                             ___ftadd@sign 0048  
                                    l102 15FB                                      l112 13E2  
                                    l104 160F                                      l113 13DE  
                                    l114 13CC                                      l116 13DC  
                                    l342 1CFD                                      l343 1CFF  
                                    l267 17D8                                      l292 0AF9  
                                    l293 0B40                                      l386 1F39  
                                    l824 1C12                                      l870 141E  
                                    _GIE 005F                                      _CRC 00CB  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 007A                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BE  
                                    _ISR 0004                                      _WDT 00C9  
                                    _Sw1 015B                                      _Sw2 01E6  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1D0A  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 19C3  
                        __end_of_ADC_Set 1A05                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0CCC                    _setDimmerLights_ERROR 151D  
                  _setDimmerLights_AdjRF 1EEC                    _setDimmerLights_AdjGo 1B7E  
                __size_of_setTemp_Enable 0008                    _setDimmerLights_Clear 1B5E  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1ACC                               Load_Main@i 0033  
                           ___ftdiv@sign 003D                                     l1360 10FA  
                                   l2320 1130                                     l2305 084C  
                                   l3034 1785                 ?_DimmerLightsPointSelect 0070  
                                   l1347 1E42                                     l2315 08A2  
                                   l3028 176E                                     l1710 035A  
                                   l2270 0634                                     l2263 05DA  
                                   l2352 0827                                     l1369 1351  
                                   l3057 0563                                     l2338 1CA2  
                                   l1554 147B                                     l2268 05F6  
                        __end_of_IOC_Set 1B7E                                     l1718 11F9  
                                   l6000 0E11                                     l1691 034B  
                                   l6022 0E6B                                     l6014 0E52  
                                   l6120 0CC3                                     l6112 0CA9  
                                   l6104 0C8E                                     l1688 0220  
                                   l6114 0CB2                                     l6106 0C9C  
                                   l6042 0EBA                                     l2691 1B21  
                                   l6116 0CB5                                     l6036 0EA4  
                                   l6070 0F19                                     l6054 0EF5  
                                   l6066 0F11                                     l6058 0EFD  
                                   l2867 1DD2                                     l6086 0C5E  
                                   l9000 0D72                                     l9010 0D96  
                                   l9014 0DAC                                     l9202 17AD  
                                   l9052 1D35                                     l9220 17DE  
                                   l5924 04EC                                     l9046 1D2C  
                                   l9062 1F19                                     l9230 17EE  
                                   l9222 17E1                                     l5934 0502  
                                   l9038 0815                                     l9048 1D2F  
                                   l9304 1F4A                                     l9312 1EAF  
                                   l8504 1E8F                                     l8600 1C4E  
                                   l9064 1F1C                                     l9216 17BF  
                                   l5952 052F                                     l5928 04F3  
                                   l9306 1F55                                     l9314 1EB2  
                                   l5882 174B                                     l9234 17F4  
                                   l9226 17E7                                     l5970 0575  
                                   l5954 0539                                     l5946 051C  
                                   l8612 14D4                                     l5892 1773  
                                   l5884 1755                                     l8700 096C  
                                   l9068 1F22                                     l9252 0ADD  
                                   l9228 17EB                                     l5964 0555  
                                   l5956 053E                                     l8524 1BE7  
                                   l9180 07EB                                     l9172 07D9  
                                   l9318 1EB8                                     l8542 1C3A  
                                   l8630 14F3                                     l5894 177B  
                                   l5886 175A                                     l5878 1744  
                                   l9334 12E7                                     l9094 1411  
                                   l9246 0AD4                                     l9254 0AE0  
                                   l5974 0587                                     l5966 055F  
                                   l5958 0542                                     l9166 07BE  
                                   l9422 122C                                     l8640 150E  
                                   l9096 1416                                     l9088 13FF  
                                   l9280 0B0B                                     l9264 0AF6  
                                   l9248 0AD7                                     l5984 05A2  
                                   l8528 1BED                                     l9184 07F4  
                                   l9176 07E2                                     l9520 149C  
                                   l8618 14DF                                     l5994 0DFB  
                                   l8810 168E                                     l9282 0B24  
                                   l9266 0AF0                                     l9442 084F  
                                   l9506 0A4B                                     l9426 1238  
                                   l8644 1516                                     l8636 1505  
                                   l8628 14E7                                     l9700 0A71  
                                   l9196 17A4                                     l9516 148F  
                  _myMain_Initialization 1B2F                                     l8582 1D9A  
                                   l8814 1694                                     l9294 0B42  
                                   l9198 17A7                                     l8558 1FD3  
                                   l9470 0898                                     l9454 0867  
                                   l9550 09C7                                     l8840 16C6  
                                   l8824 16A4                                     l8832 16B0  
                                   l9712 0A96                                     l9704 0A7B  
                                   l9384 10E2                                     l8920 1DBC  
                                   l9464 088D                                     l8586 1DA3  
                                   l8818 169A                                     l9554 1DCC  
                                   l8922 1DC2                                     l8770 1717  
                                   l9482 09FD                                     l8844 16CC  
                                   l8828 16AA                                     l8860 1EDB  
                                   l9716 0AA2                                     l8772 1724  
                                   l9900 0BE1                                     l9820 1E57  
                                   l9582 12BB                                     l9726 0ACA  
                                   l8766 1711                                     l9486 0A0A  
                                   l9814 1E4F                                     l9592 12CB  
                                   l9576 12B2                                     l8936 1BA8  
                                   l8848 16D2                                     l8864 1EE3  
                                   l8792 1E1D                                     l9832 131C  
                                   l9752 127F                                     l8872 1140  
                                   l8776 1730                                     l9816 1E52  
                                   _CFGS 0CAE                                     l9586 12C2  
                                   l9578 12B5                                     l9922 0C0E  
                                   l9588 12C5                                     l8788 1E16  
                                   l9756 1286                                     l9932 0C25  
                                   l8966 0D28                                     l9838 1331  
                                   l9934 0C27                                     l9980 05EA  
                                   l9958 05CE                                     l9898 0BDB  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4315 1776                                     u4345 178C  
                                   u4275 1750                                     _PEIE 005E  
                                   u4525 0543                                     u4295 1769  
                                   u4625 0E23                                     u4465 051D  
                                   u4705 0EC6                                     u4635 0E33  
                                   u4555 0556                                     u4715 0ED6  
                                   u4645 0E53                                     u4655 0E62  
                                   u4815 0C65                                     u4495 0530  
                                   u4735 0EFE                                     u4665 0E6C  
                                   u4745 0F04                                     u4845 0C8F  
                                   u4775 0F1A                                     u4785 0F20  
                                   u4875 0CAA                                     u9095 1C66  
                                   u8705 14F4                                     u8715 14FE  
                                   u8725 1506                                     u8575 1FBF  
                                   u8685 14EA                                     u8790 091A  
                                   u9595 1F3F                                     u8795 0918  
                                   _LWLO 0CAD                                     _RFSW 00CF  
                                   _TMR0 0015                                     u9955 1DD3  
                                   u9965 1DD8                                     _RSSI 00D0  
                                   _WREN 0CAA                                     _Buz1 00B2  
                                   _main 1572                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0910                          __end_of_RF_Main 19CC  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1A8F  
                                   ltemp 007E            __size_of_setRF_Initialization 000D  
                       _setDimmerReClock 1A05                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 083C  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                                  ??_ISR 0075                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1ABF            __end_of_DimmerIntrPointSelect 1BD2  
                                  l10012 0617                                    l10100 03A7  
                                  l10014 0619                                    l10024 0629  
                                  l10210 13B6                                    l10034 0645  
                                  l10114 03D4                                    l10044 066E  
                                  l10124 0401                                    l10054 0698  
                                  l10072 1B2C                                    l10138 043F  
                                  l10090 0395                                    l10500 0309  
                                  l10068 1B26                                    l10148 0471  
                                  l10420 1464                                    l10192 11C5  
                                  l10184 11A7                                    l10512 0326  
                                  l10520 0348                                    l10088 038F  
                                  l10360 0B66                                    l10600 1596  
                                  l10186 11B3                                    l10098 039F  
                                  l10370 0B91                                    l10196 11CE  
                                  l10604 15A1                                    l10278 071D  
                                  l10526 0351                                    l10462 0269  
                                  l10382 0BB9                                    l10366 0B89  
                                  l10456 023F                                    l10482 02DF  
                                  l10394 118F                                    l10476 02D2  
                                  l10484 02E5                                    l10494 02FD  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
                  __end_of_setLoad_Count 1AF4                                    ?_main 0265  
                        __end_of___awdiv 151D                          __end_of___ftadd 05BA  
                        __end_of___ftdiv 0E8D                                    u11005 13AC  
                                  u11125 1E39                          __end_of___ftmul 0F41  
                                  u11215 0BAB                          ___awdiv@divisor 0020  
                                  u11245 1186                                    u11415 02EB  
                                  u11175 0B79                                    u11255 1195  
                                  u11275 1444                          __end_of___fttol 0CCC  
                                  u11365 02A6                                    u11285 1473  
                                  u10665 0668                                    u10685 0692  
           setDimmerLights_AdjGo@command 0022                                    u10935 11AA  
                                  u10955 11B4                                    u10965 11BE  
                                  u10975 11C6                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 11D5                                    i1l770 1C25  
                                  i1l781 1BC9                   _setDimmerLights_Switch 1B3E  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EC                                    _RFSW2 00ED  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0016                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _Load1 01A0  
                __end_of_Timeout_Counter 1C6C                            __CFG_WRT$HALF 0000  
                                  _Temp1 00D7       __end_of_setDimmerLights_IntrIOC_GO 10D2  
             _setDimmerLights_IntrIOC_GO 10A4                         __end_of_TMR0_ISR 1F81  
           __size_of_CC2500_WriteCommand 001A                         __end_of_TMR0_Set 1A35  
                                  _getAD 1E44                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 1433            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                         _setLoad_Enable 1A66              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1C08  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03D8                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1BC0                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0910  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                             ?_my_MainTime 0070  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 1623  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                   __end_of_getLoad_Safe 1A55                        ??_setPercentValue 0059  
                           __end_of_main 15CA                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 19E2                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D54  
                   _setSw_Initialization 1A35                  setOverTemp_Exceptions@i 002F  
             __size_of_setLoad_StatusOff 001F                                   ??_main 006C  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0772                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03D8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C1B  
                 ?_setDimmerLights_AdjRF 0070                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 1A6F                     __end_of_getTemp_Safe 1A2D  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 08A5                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0070  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1EA6                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 179C                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1B4E                                   i1l7400 0170  
                                 i1l7402 0176                                   i1l7412 01A7  
                                 i1l7350 009E                                   i1l7432 01DE  
                                 i1l7416 01AD                                   i1l7418 01B3  
                                 i1l7354 00A5                                   i1l7436 01E4  
                                 i1l7372 00EF                                   i1l7380 010E  
                                 i1l7390 0141                                   i1l7374 00F5  
                                 i1l7386 012A                                   i1l7394 0155  
                                 i1l7378 0108                                   i1l6960 10CC  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u660_25 0079  
                     __size_of_Load_Main 016E                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1D0A  
                                 u788_25 1F7A                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 19EC  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1C81  
                                 _Dimmer 0077                                   _DlySw1 00E8  
                                 _DlySw2 00EA              __size_of_setLoad_Exceptions 0038  
             __end_of_Mcu_Initialization 1BE4                      __end_of_Buzzer_Main 13E9  
                                 _Memory 0220                                   _Timer0 0135  
     __end_of_setDimmerLights_TriggerAdj 1B9E               _setDimmerLights_TriggerAdj 1B8E  
                                 ___bmul 1BE4            setDimmerLights_Switch@command 0022  
                                 ___wmul 1DC9                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                                ??___lwdiv 0024  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00D5                                   _s_data 00D6  
                                 _setLED 167E                                   _myMain 00A0  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 15CA                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 19EC         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020      __end_of_setDimmerLights_IntrControl 020A  
            _setDimmerLights_IntrControl 004B                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0070  
                  __end_of_SwPointSelect 1C57                          ?_setLoad_Enable 0070  
                          ?_setRF_Enable 0070                           _setTemp_Enable 1A55  
                        _RfSWPointSelect 1C97             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 0074              __size_of_DimmerLights_Close 0017  
                __size_of_LedPointSelect 001D                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1B20  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 167E  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0047  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                       getLoad_Safe@result 0020  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK4 1E64                            __end_of_getAD 1E64  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0044  
                     _LED_Initialization 1AA7                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 004A                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0070                __size_of_setLoad_StatusOn 0023  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0070                        __end_of_Load_Main 0378  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 19E7  
               __end_of_setDimmerReClock 1A0D                       __size_of_getRxData 0069  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1A5D  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00CC                           _DimmerLights22 00CD  
                   __size_of_setLED_Main 0041                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 19CF  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006D                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 139F                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 0800                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1A0D                    __size_of_getLoad_Safe 0008  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0078                        LedPointSelect@led 0021  
                    i1_setLoad_StatusOff 1C81                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0008                       getTemp_Safe@result 0020  
                            setBuz@count 002C                               __pmaintext 1572  
                    _CC2500_WriteCommand 1D23                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C                     __size_of_my_MainTime 004A  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 0075                            ?_setTemp_Main 0070  
                             ??_TMR0_Set 0020                               _getLoad_AD 0B46  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00BF  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 19FE                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1168                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1AD9                    __size_of_getTemp_Safe 0008  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 0801  
                __end_of_RfSWPointSelect 1CAD                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0070                                  _IOC_ISR 1ABF  
                        ?_setTemp_Enable 0070                                  _IOC_Set 1B6E  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1E25                        _Flash_Memory_Read 1D3D  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0076  
                 __size_of_CC2500_TxData 0064                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                             _getLoad_Safe 1A4D  
                                _RF_Data 0120                                  _RF_Main 19C9  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1A84          __end_of_setControl_Lights_Table 07FD  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 09EB                          _setPercentValue 1359  
                ??_setLoad_AH_AL_Restore 0020                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E5  
           __end_of_CC2500_FrequencyCabr 1A9B                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1077                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0168  
                                _VarLED2 016C                        __end_of_getRxData 08A5  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C2F  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1B5E  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 1A25  
                         ??_setTemp_Main 0031                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1B4E                                  ___awdiv 14C9  
                                ___ftadd 04C4                           ??_setSw_Enable 0022  
                                ___ftdiv 0DE4                          __size_of___wmul 001E  
                                ___ftmul 0E8D                                  ___fttol 0C45  
                    __end_of_Switch_Main 1A4D                                  ___lwdiv 119E  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0023                                  __ptext1 1433  
                                __ptext2 1A55                                  __ptext3 1A66  
                                __ptext4 1B2F                                  __ptext5 1168  
                                __ptext6 0B46                                  __ptext7 1E44  
                                __ptext8 1BF6                                  __ptext9 0002  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0071  
                  _DimmerIntrPointSelect 1BC0                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 1E44                __end_of_Flash_Memory_Read 1D57  
                             _setRF_Main 05BA                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1A15                        _DimmerLights_Main 1A79  
         __size_of_DlyOff_Initialization 000A                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1A79               __end_of_CC2500_ClearRXFIFO 19D6  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 19DA  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006C  
                         _LedPointSelect 1D8F                      _DelayOffPointSelect 1C2F  
                                clrloop0 19F9           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1AE6                     end_of_initialization 0047  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 1A1D  
                      _CC2500_InitSetREG 1F81                            _DelayTime_1us 1F34  
                      __end_of_setTxData 1000               __end_of_Flash_Memory_Write 1101  
                                init_ram 19F2                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 19F3                               _setSw_Main 0378  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1F0F  
                 __size_of_setLoad_Count 000E                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1BAF                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0AD0  
                          _CC2500_TxData 179C                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1B02              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 1315                  _DimmerLights_Exceptions 13E9  
                            ?_getLoad_AD 0070                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1A5D                      ??_CC2500_ReadStatus 0022  
                       _setLoad_StatusOn 1EC9         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
              setLoad_Exceptions@command 0030                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1A84                       _Mcu_Initialization 1BD2  
                       ??_setLoad_Enable 0020                 __size_of_CC2500_PowerRST 0044  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$7023 0067                          _setSw_Main$7024 0068  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1DAC  
                __end_of_Sw_DimmerOnFunc 0A5D                  __end_of_setPercentValue 139F  
               __size_of_CC2500_WriteREG 0023                __end_of_CC2500_InitSetREG 1FAB  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 12D1                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1F34               __end_of_setLoad_Exceptions 120D  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1D23  
                   _setRF_Initialization 1ACC                              _Switch_Main 1A45  
            setDimmerLights_Clear@lights 0023                      setLoad_Exceptions@i 002F  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C08  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1C6C  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1BF6                __size_of_Sw_DimmerAdjFunc 004C  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1C1B  
                         __end_of___wmul 1DE7                        __size_of_TMR0_ISR 0027  
        __size_of_setOverTemp_Exceptions 003F                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 0008                     __end_of_setMemory_GO 1CC3  
          __size_of_setDimmerLights_Main 0073                           __end_of_setLED 16DC  
                         __end_of_setBuz 1623                            _setLoad_Count 1AE6  
        _getDimmerLights_StatusFlag$2647 0022                     _CC2500_FrequencyCabr 1A8F  
                setLoad_StatusOn@command 0020                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0D54  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 1133  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1CF1  
                              _Load_Main 020A                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0013                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1E06  
        __size_of_setTemp_Initialization 0003                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0C45  
                            ?_setLoad_GO 0070                     __end_of_setSw_Enable 1D8F  
                    __size_of_getLoad_AD 0079                             ?_Buzzer_Main 0070  
                     _set_TimeoutCleared 19E2                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 0164  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0036                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1B20                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              i1setLoad_StatusOff@lights 0071                  __size_of_setRFSW_Status 000F  
              __size_of_CC2500_WriteByte 0019                                _Temp_Main 07FD  
              ??_DimmerLights_Exceptions 002D            setOverTemp_Exceptions@command 0030  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D1                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                               ??___wmul 0024                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D3                              __pdataBANK4 0245  
                               ??_setLED 0023                         ??_setTemp_Enable 0020  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                         ?_setLoad_Count 0070                         _CC2500_SIDLEMode 19DA  
             __size_of_DimmerLights_Main 000B                __end_of_setRF_DimmerValue 1168  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$5900 006B  
                            __pbssCOMMON 0076                                 ?_IOC_Set 0070  
                              ___latbits 0003                               ?_Load_Main 0070  
                  setTemp_Enable@command 0020                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                          __pcstackBANK4 0265                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0088  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
           setDimmerLights_Clear@command 0022                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 006B               __size_of_CC2500_ReadStatus 0025  
                 _setOverTemp_Exceptions 120D                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 013D  
                          _DimmerLights2 014C                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                    __size_of_setRF_Enable 000E  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1D73  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006C  
                          ??_my_MainTime 002D              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00F1                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 19CC                                _getBuz_GO 1066  
    __end_of_Flash_Memory_Initialization 0772              _Flash_Memory_Initialization 06AB  
                               ?___awdiv 0020                                __ptext100 1C43  
                              __ptext101 0910                                __ptext110 1B3E  
                              __ptext102 1359                                __ptext111 1C08  
                              __ptext103 0C45                                __ptext120 1F81  
                              __ptext112 15CA                                __ptext104 0DE4  
                              __ptext121 1DE7                                __ptext113 14C9  
                              __ptext105 1E84                                __ptext130 1CF1  
                              __ptext122 1EA6                                __ptext114 1A0D  
                              __ptext106 173B                                __ptext131 139F  
                              __ptext123 1A8F                                __ptext115 1A6F  
                              __ptext107 1B02                                __ptext140 10A4  
                              __ptext132 19C3                                __ptext124 1F34  
                              __ptext116 1C2F                                __ptext108 1C97  
                              __ptext141 1C1B                                __ptext125 19D6  
                              __ptext117 1C6C                                __ptext109 1B4E  
                               ?___ftadd 003E                                __ptext134 1F5A  
                              __ptext126 19D2                                __ptext118 19DA  
                              __ptext135 004B                                __ptext127 1D23  
                              __ptext119 128D                                __ptext136 1C81  
                              __ptext128 19E2                                __ptext137 1BC0  
                              __ptext129 1C57                                __ptext138 1ABF  
                              __ptext139 1A05                                _getRxData 083C  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 0DE4                      __size_of_setLoad_GO 0008  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 19C6                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1B2F       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0055                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 014C  
          __end_of_setDimmerLights_ERROR 1572             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 1F0F            __end_of_setDimmerLights_AdjGo 1B8E  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
          __end_of_setDimmerLights_Clear 1B6E                                _r_address 00D4  
         __size_of_myMain_Initialization 000F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1B3E                         __CFG_WDTE$SWDTEN 0000  
                         __size_of_getAD 0020                             _setRF_Enable 1AF4  
                       ___lwdiv@quotient 0026                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1C43                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 128D                      _DimmerLightsIntrIOC 00CE  
               __end_of_setLoad_StatusOn 1EEC                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 19D2                        _CC2500_rfSettings 102F  
                         ___wmul@product 0024                                 _LED_Main 1AB3  
                        SwPointSelect@sw 0021                                clear_ram0 19F8  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0F41  
    __end_of_DimmerLights_Initialization 1CDA              _DimmerLights_Initialization 1CC3  
                     _CC2500_ClearRXFIFO 19D2                       _CC2500_ClearTXFIFO 19D6  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1A45  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
            __size_of_setRFSW_AdjControl 003B                    __size_of_setMemory_GO 0016  
                     _Flash_Memory_Write 10D2                               ?_getRxData 0070  
                               _TMR0_ISR 1F5A                             ??_getLoad_AD 0024  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
            __end_ofi1_setLoad_StatusOff 1C97                                 _TMR0_Set 1A2D  
                       _Sw_DimmerAdjFunc 147D                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070                      __end_of_my_MainTime 147D  
                        ??_setLoad_Count 0020        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00C7                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1D3D                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1BF6                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 097C                    __size_of_setTemp_Main 0086  
                __size_of_setDelayOff_GO 005F                    __size_of_setSw_Enable 001C  
                               _DelayOff 0076                             setSw_Main@sw 0069  
       setDimmerLights_IntrIOC_GO@lights 0072                              ??_Load_Main 0031  
                       __size_of_IOC_ISR 000D             ?_setDimmerLights_IntrControl 0070  
                       __size_of_IOC_Set 0010             __end_of_Flash_Memory_Erasing 1AA7  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 1133  
                  _DlyOff_Initialization 1A6F                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 19DE                         __size_of_WDT_Set 000B  
                 setLoad_StatusOn@lights 0021                       __end_of_getLoad_AD 0BBF  
                  _Switch_Initialization 1AD9                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 1B02  
                           _setMemory_GO 1CAD                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 119E                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1CF1                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 005E                              ??_Temp_Main 0032  
                      setRFSW_Control@sw 0063                      _Load_Initialization 19E7  
                              setLED@led 0023     __end_of_setDimmerLights_TriggerERROR 2000  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 1FD5  
                ??_DimmerIntrPointSelect 0070                             _setTemp_Main 0BBF  
                     _setLoad_Exceptions 11D5                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1D73  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                                 ___awtoft 1E84  
                       ??_LedPointSelect 0020                                 ___ftpack 173B  
                           _setSw_Status 1B11                        getTemp_AD@channel 0025  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 124C                      ?_setLoad_Exceptions 0070  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 097C  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
                        ___lwdiv@divisor 0020                     ?_Load_Initialization 0070  
                        ___lwdiv@counter 0025                                 __ptext10 07FD  
                               __ptext11 0BBF                                 __ptext20 097C  
                               __ptext12 120D                                 __ptext21 147D  
                               __ptext13 1A4D                                 __ptext30 1101  
                               __ptext22 1B8E                                 __ptext14 19CF  
                               __ptext31 0772                                 __ptext23 1B7E  
                               __ptext15 19CC                                 __ptext40 0E8D  
                               __ptext32 0D54                                 __ptext24 1AD9  
                               __ptext16 1A45                                 __ptext41 04C4  
                               __ptext33 16DC                                 __ptext25 1A35  
                               __ptext17 0378                                 __ptext50 1A84  
                               __ptext42 1066                                 __ptext34 1FAB  
                               __ptext26 1B20                                 __ptext18 1A3D  
                               __ptext51 1A2D                                 __ptext43 179C  
                               __ptext35 1BE4                                 __ptext27 19C9  
                               __ptext19 09EB                                 __ptext60 13E9  
                               __ptext52 1D0A                                 __ptext44 0AD0  
                               __ptext36 0801                                 __ptext28 05BA  
                               __ptext61 1FD5                                 __ptext53 1B6E  
                               __ptext45 1F0F                                 __ptext37 1133  
                               __ptext29 083C                                 __ptext70 124C  
                               __ptext62 151D                                 __ptext54 19DE  
                               __ptext46 1DAC                                 __ptext38 1EEC  
                               __ptext71 1AA7                                 __ptext63 1B5E  
                               __ptext55 19FE                                 __ptext47 19C6  
                               __ptext39 1623                                 __ptext80 1A79  
                               __ptext72 1BAF                                 __ptext64 1A25  
                               __ptext56 020A                                 __ptext48 1ACC  
                               __ptext81 0A5D                                 __ptext73 1E25  
                               __ptext65 1DC9                                 __ptext57 11D5  
                               __ptext49 1BD2                                 __ptext90 1CAD  
                               __ptext82 12D1                                 __ptext74 1315  
                               __ptext66 119E                                 __ptext58 1D73  
                               __ptext91 1A1D                                 __ptext83 1E06  
                               __ptext75 1A9B                                 __ptext67 19E7  
                               __ptext59 1AF4                                 __ptext92 1B9E  
                               __ptext84 0CCC                                 __ptext76 06AB  
                               __ptext68 1D57                                 __ptext93 1CC3  
                               __ptext85 1EC9                                 __ptext77 10D2  
                               __ptext69 1AB3                                 __ptext94 1077  
                               __ptext86 1AE6                                 __ptext78 1A5D  
                               __ptext95 19EC                                 __ptext87 167E  
                               __ptext79 1D3D                                 __ptext96 1A15  
                               __ptext88 1D8F                                 __ptext97 08A5  
                               __ptext89 1CDA                                 __ptext98 0F41  
                               __ptext99 1B11                                 __product 0245  
          ??_setDimmerLights_IntrControl 0072                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0006                   __end_of_setRFSW_Status 1B11  
          __end_of_Dimmer_Initialization 19F2             __end_of_setDimmerLights_Main 0AD0  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1A3D                 __end_of_CC2500_SIDLEMode 19DE  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1C43  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1CDA  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 0008  
                   ??_setLoad_Exceptions 002E                          _CC2500_ReadByte 1DAC  
                            _my_MainTime 1433                       _CC2500_InitPATable 1DE7  
    __size_of_getDimmerLights_StatusFlag 0011            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 06AB                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 0265  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 0267  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 128D  
                     __end_of_setLoad_GO 1A25              __end_of_Flash_Memory_Modify 1359  
                      ??_getPercentValue 0059                              _setLog_Code 1101  
            __end_of_Flash_Memory_Unlock 1A66                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1EA6                       __end_of_setSw_Main 04C4  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_OK 03D9                     setLoad_Count@command 0021  
                 ?_DlyOff_Initialization 0070                  ?_setOverTemp_Exceptions 0070  
                         _DelayTimejudge 1FAB                            ?_getLoad_Safe 0070  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0072                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                  __size_of_setLoad_Enable 0009  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 10A4  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1077  
            __end_of_setDimmerLights_Adj 1315                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 19C6     __size_of_setDimmerLights_IntrControl 01BF  
                            getLoad_AD@i 0028                              getLoad_AD@j 0027  
                          ?_getTemp_Safe 0070                     _Flash_Memory_Erasing 1A9B  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00D2  
        __end_of_DelayOff_Initialization 1A15      __size_of_setDimmerLights_IntrIOC_GO 002E  
                             _OPTION_REG 0095                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1A1D                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 16DC         __size_of_setControl_Lights_Table 008B  
                      _setLoad_StatusOff 1E06                   __end_of_DelayTimejudge 1FD5  
         __end_of_setOverTemp_Exceptions 124C                           ??_getLoad_Safe 0020  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 1F5A                 __end_of_Sw_DimmerAdjFunc 14C9  
                __end_of_CC2500_ReadByte 1DC9             __end_of_setSw_Initialization 1A3D  
                        _Timeout_Counter 1C57                     getPercentValue@value 005B  
             __end_of_LED_Initialization 1AB3         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 19CF  
               __size_of_Sw_DimmerOnFunc 0072                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0070                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 19C9  
               __end_of_Sw_DimmerOffFunc 09EB                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0B46                    __end_of_CC2500_TxData 1800  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 1D57  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 12D1  
