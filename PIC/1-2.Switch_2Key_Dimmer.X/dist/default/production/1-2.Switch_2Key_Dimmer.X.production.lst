

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Oct 22 17:02:20 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	intentry,global,class=CODE,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text137,local,class=CODE,merge=1,delta=2
   159                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   164                           	dabs	1,0x7E,2
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  0010                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  0090                     	;# 
   196  0091                     	;# 
   197  0092                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010E                     	;# 
   211  0116                     	;# 
   212  0117                     	;# 
   213  011D                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216  018E                     	;# 
   217  0191                     	;# 
   218  0191                     	;# 
   219  0192                     	;# 
   220  0193                     	;# 
   221  0193                     	;# 
   222  0194                     	;# 
   223  0195                     	;# 
   224  0196                     	;# 
   225  0197                     	;# 
   226  0199                     	;# 
   227  019A                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019C                     	;# 
   233  019C                     	;# 
   234  019D                     	;# 
   235  019E                     	;# 
   236  019F                     	;# 
   237  020D                     	;# 
   238  0210                     	;# 
   239  0211                     	;# 
   240  0211                     	;# 
   241  0212                     	;# 
   242  0212                     	;# 
   243  0213                     	;# 
   244  0213                     	;# 
   245  0214                     	;# 
   246  0214                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0216                     	;# 
   251  0216                     	;# 
   252  0217                     	;# 
   253  0217                     	;# 
   254  0291                     	;# 
   255  0291                     	;# 
   256  0292                     	;# 
   257  0293                     	;# 
   258  0298                     	;# 
   259  0298                     	;# 
   260  0299                     	;# 
   261  029A                     	;# 
   262  0394                     	;# 
   263  0395                     	;# 
   264  0396                     	;# 
   265  0FE4                     	;# 
   266  0FE5                     	;# 
   267  0FE6                     	;# 
   268  0FE7                     	;# 
   269  0FE8                     	;# 
   270  0FE9                     	;# 
   271  0FEA                     	;# 
   272  0FEB                     	;# 
   273  0FED                     	;# 
   274  0FEE                     	;# 
   275  0FEF                     	;# 
   276  0000                     	;# 
   277  0001                     	;# 
   278  0002                     	;# 
   279  0003                     	;# 
   280  0004                     	;# 
   281  0005                     	;# 
   282  0006                     	;# 
   283  0007                     	;# 
   284  0008                     	;# 
   285  0009                     	;# 
   286  000A                     	;# 
   287  000B                     	;# 
   288  000C                     	;# 
   289  000D                     	;# 
   290  000E                     	;# 
   291  0010                     	;# 
   292  0011                     	;# 
   293  0012                     	;# 
   294  0015                     	;# 
   295  0016                     	;# 
   296  0016                     	;# 
   297  0017                     	;# 
   298  0018                     	;# 
   299  0019                     	;# 
   300  001A                     	;# 
   301  001B                     	;# 
   302  001C                     	;# 
   303  008C                     	;# 
   304  008D                     	;# 
   305  008E                     	;# 
   306  0090                     	;# 
   307  0091                     	;# 
   308  0092                     	;# 
   309  0095                     	;# 
   310  0096                     	;# 
   311  0097                     	;# 
   312  0099                     	;# 
   313  009A                     	;# 
   314  009B                     	;# 
   315  009B                     	;# 
   316  009C                     	;# 
   317  009D                     	;# 
   318  009E                     	;# 
   319  010C                     	;# 
   320  010D                     	;# 
   321  010E                     	;# 
   322  0116                     	;# 
   323  0117                     	;# 
   324  011D                     	;# 
   325  018C                     	;# 
   326  018D                     	;# 
   327  018E                     	;# 
   328  0191                     	;# 
   329  0191                     	;# 
   330  0192                     	;# 
   331  0193                     	;# 
   332  0193                     	;# 
   333  0194                     	;# 
   334  0195                     	;# 
   335  0196                     	;# 
   336  0197                     	;# 
   337  0199                     	;# 
   338  019A                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019C                     	;# 
   344  019C                     	;# 
   345  019D                     	;# 
   346  019E                     	;# 
   347  019F                     	;# 
   348  020D                     	;# 
   349  0210                     	;# 
   350  0211                     	;# 
   351  0211                     	;# 
   352  0212                     	;# 
   353  0212                     	;# 
   354  0213                     	;# 
   355  0213                     	;# 
   356  0214                     	;# 
   357  0214                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0216                     	;# 
   362  0216                     	;# 
   363  0217                     	;# 
   364  0217                     	;# 
   365  0291                     	;# 
   366  0291                     	;# 
   367  0292                     	;# 
   368  0293                     	;# 
   369  0298                     	;# 
   370  0298                     	;# 
   371  0299                     	;# 
   372  029A                     	;# 
   373  0394                     	;# 
   374  0395                     	;# 
   375  0396                     	;# 
   376  0FE4                     	;# 
   377  0FE5                     	;# 
   378  0FE6                     	;# 
   379  0FE7                     	;# 
   380  0FE8                     	;# 
   381  0FE9                     	;# 
   382  0FEA                     	;# 
   383  0FEB                     	;# 
   384  0FED                     	;# 
   385  0FEE                     	;# 
   386  0FEF                     	;# 
   387  0000                     	;# 
   388  0001                     	;# 
   389  0002                     	;# 
   390  0003                     	;# 
   391  0004                     	;# 
   392  0005                     	;# 
   393  0006                     	;# 
   394  0007                     	;# 
   395  0008                     	;# 
   396  0009                     	;# 
   397  000A                     	;# 
   398  000B                     	;# 
   399  000C                     	;# 
   400  000D                     	;# 
   401  000E                     	;# 
   402  0010                     	;# 
   403  0011                     	;# 
   404  0012                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0016                     	;# 
   408  0017                     	;# 
   409  0018                     	;# 
   410  0019                     	;# 
   411  001A                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  0090                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0095                     	;# 
   421  0096                     	;# 
   422  0097                     	;# 
   423  0099                     	;# 
   424  009A                     	;# 
   425  009B                     	;# 
   426  009B                     	;# 
   427  009C                     	;# 
   428  009D                     	;# 
   429  009E                     	;# 
   430  010C                     	;# 
   431  010D                     	;# 
   432  010E                     	;# 
   433  0116                     	;# 
   434  0117                     	;# 
   435  011D                     	;# 
   436  018C                     	;# 
   437  018D                     	;# 
   438  018E                     	;# 
   439  0191                     	;# 
   440  0191                     	;# 
   441  0192                     	;# 
   442  0193                     	;# 
   443  0193                     	;# 
   444  0194                     	;# 
   445  0195                     	;# 
   446  0196                     	;# 
   447  0197                     	;# 
   448  0199                     	;# 
   449  019A                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019C                     	;# 
   455  019C                     	;# 
   456  019D                     	;# 
   457  019E                     	;# 
   458  019F                     	;# 
   459  020D                     	;# 
   460  0210                     	;# 
   461  0211                     	;# 
   462  0211                     	;# 
   463  0212                     	;# 
   464  0212                     	;# 
   465  0213                     	;# 
   466  0213                     	;# 
   467  0214                     	;# 
   468  0214                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0216                     	;# 
   473  0216                     	;# 
   474  0217                     	;# 
   475  0217                     	;# 
   476  0291                     	;# 
   477  0291                     	;# 
   478  0292                     	;# 
   479  0293                     	;# 
   480  0298                     	;# 
   481  0298                     	;# 
   482  0299                     	;# 
   483  029A                     	;# 
   484  0394                     	;# 
   485  0395                     	;# 
   486  0396                     	;# 
   487  0FE4                     	;# 
   488  0FE5                     	;# 
   489  0FE6                     	;# 
   490  0FE7                     	;# 
   491  0FE8                     	;# 
   492  0FE9                     	;# 
   493  0FEA                     	;# 
   494  0FEB                     	;# 
   495  0FED                     	;# 
   496  0FEE                     	;# 
   497  0FEF                     	;# 
   498  0000                     	;# 
   499  0001                     	;# 
   500  0002                     	;# 
   501  0003                     	;# 
   502  0004                     	;# 
   503  0005                     	;# 
   504  0006                     	;# 
   505  0007                     	;# 
   506  0008                     	;# 
   507  0009                     	;# 
   508  000A                     	;# 
   509  000B                     	;# 
   510  000C                     	;# 
   511  000D                     	;# 
   512  000E                     	;# 
   513  0010                     	;# 
   514  0011                     	;# 
   515  0012                     	;# 
   516  0015                     	;# 
   517  0016                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001C                     	;# 
   525  008C                     	;# 
   526  008D                     	;# 
   527  008E                     	;# 
   528  0090                     	;# 
   529  0091                     	;# 
   530  0092                     	;# 
   531  0095                     	;# 
   532  0096                     	;# 
   533  0097                     	;# 
   534  0099                     	;# 
   535  009A                     	;# 
   536  009B                     	;# 
   537  009B                     	;# 
   538  009C                     	;# 
   539  009D                     	;# 
   540  009E                     	;# 
   541  010C                     	;# 
   542  010D                     	;# 
   543  010E                     	;# 
   544  0116                     	;# 
   545  0117                     	;# 
   546  011D                     	;# 
   547  018C                     	;# 
   548  018D                     	;# 
   549  018E                     	;# 
   550  0191                     	;# 
   551  0191                     	;# 
   552  0192                     	;# 
   553  0193                     	;# 
   554  0193                     	;# 
   555  0194                     	;# 
   556  0195                     	;# 
   557  0196                     	;# 
   558  0197                     	;# 
   559  0199                     	;# 
   560  019A                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019C                     	;# 
   566  019C                     	;# 
   567  019D                     	;# 
   568  019E                     	;# 
   569  019F                     	;# 
   570  020D                     	;# 
   571  0210                     	;# 
   572  0211                     	;# 
   573  0211                     	;# 
   574  0212                     	;# 
   575  0212                     	;# 
   576  0213                     	;# 
   577  0213                     	;# 
   578  0214                     	;# 
   579  0214                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0216                     	;# 
   584  0216                     	;# 
   585  0217                     	;# 
   586  0217                     	;# 
   587  0291                     	;# 
   588  0291                     	;# 
   589  0292                     	;# 
   590  0293                     	;# 
   591  0298                     	;# 
   592  0298                     	;# 
   593  0299                     	;# 
   594  029A                     	;# 
   595  0394                     	;# 
   596  0395                     	;# 
   597  0396                     	;# 
   598  0FE4                     	;# 
   599  0FE5                     	;# 
   600  0FE6                     	;# 
   601  0FE7                     	;# 
   602  0FE8                     	;# 
   603  0FE9                     	;# 
   604  0FEA                     	;# 
   605  0FEB                     	;# 
   606  0FED                     	;# 
   607  0FEE                     	;# 
   608  0FEF                     	;# 
   609  0000                     	;# 
   610  0001                     	;# 
   611  0002                     	;# 
   612  0003                     	;# 
   613  0004                     	;# 
   614  0005                     	;# 
   615  0006                     	;# 
   616  0007                     	;# 
   617  0008                     	;# 
   618  0009                     	;# 
   619  000A                     	;# 
   620  000B                     	;# 
   621  000C                     	;# 
   622  000D                     	;# 
   623  000E                     	;# 
   624  0010                     	;# 
   625  0011                     	;# 
   626  0012                     	;# 
   627  0015                     	;# 
   628  0016                     	;# 
   629  0016                     	;# 
   630  0017                     	;# 
   631  0018                     	;# 
   632  0019                     	;# 
   633  001A                     	;# 
   634  001B                     	;# 
   635  001C                     	;# 
   636  008C                     	;# 
   637  008D                     	;# 
   638  008E                     	;# 
   639  0090                     	;# 
   640  0091                     	;# 
   641  0092                     	;# 
   642  0095                     	;# 
   643  0096                     	;# 
   644  0097                     	;# 
   645  0099                     	;# 
   646  009A                     	;# 
   647  009B                     	;# 
   648  009B                     	;# 
   649  009C                     	;# 
   650  009D                     	;# 
   651  009E                     	;# 
   652  010C                     	;# 
   653  010D                     	;# 
   654  010E                     	;# 
   655  0116                     	;# 
   656  0117                     	;# 
   657  011D                     	;# 
   658  018C                     	;# 
   659  018D                     	;# 
   660  018E                     	;# 
   661  0191                     	;# 
   662  0191                     	;# 
   663  0192                     	;# 
   664  0193                     	;# 
   665  0193                     	;# 
   666  0194                     	;# 
   667  0195                     	;# 
   668  0196                     	;# 
   669  0197                     	;# 
   670  0199                     	;# 
   671  019A                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019C                     	;# 
   677  019C                     	;# 
   678  019D                     	;# 
   679  019E                     	;# 
   680  019F                     	;# 
   681  020D                     	;# 
   682  0210                     	;# 
   683  0211                     	;# 
   684  0211                     	;# 
   685  0212                     	;# 
   686  0212                     	;# 
   687  0213                     	;# 
   688  0213                     	;# 
   689  0214                     	;# 
   690  0214                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0216                     	;# 
   695  0216                     	;# 
   696  0217                     	;# 
   697  0217                     	;# 
   698  0291                     	;# 
   699  0291                     	;# 
   700  0292                     	;# 
   701  0293                     	;# 
   702  0298                     	;# 
   703  0298                     	;# 
   704  0299                     	;# 
   705  029A                     	;# 
   706  0394                     	;# 
   707  0395                     	;# 
   708  0396                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000D                     	;# 
   734  000E                     	;# 
   735  0010                     	;# 
   736  0011                     	;# 
   737  0012                     	;# 
   738  0015                     	;# 
   739  0016                     	;# 
   740  0016                     	;# 
   741  0017                     	;# 
   742  0018                     	;# 
   743  0019                     	;# 
   744  001A                     	;# 
   745  001B                     	;# 
   746  001C                     	;# 
   747  008C                     	;# 
   748  008D                     	;# 
   749  008E                     	;# 
   750  0090                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0095                     	;# 
   754  0096                     	;# 
   755  0097                     	;# 
   756  0099                     	;# 
   757  009A                     	;# 
   758  009B                     	;# 
   759  009B                     	;# 
   760  009C                     	;# 
   761  009D                     	;# 
   762  009E                     	;# 
   763  010C                     	;# 
   764  010D                     	;# 
   765  010E                     	;# 
   766  0116                     	;# 
   767  0117                     	;# 
   768  011D                     	;# 
   769  018C                     	;# 
   770  018D                     	;# 
   771  018E                     	;# 
   772  0191                     	;# 
   773  0191                     	;# 
   774  0192                     	;# 
   775  0193                     	;# 
   776  0193                     	;# 
   777  0194                     	;# 
   778  0195                     	;# 
   779  0196                     	;# 
   780  0197                     	;# 
   781  0199                     	;# 
   782  019A                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019C                     	;# 
   788  019C                     	;# 
   789  019D                     	;# 
   790  019E                     	;# 
   791  019F                     	;# 
   792  020D                     	;# 
   793  0210                     	;# 
   794  0211                     	;# 
   795  0211                     	;# 
   796  0212                     	;# 
   797  0212                     	;# 
   798  0213                     	;# 
   799  0213                     	;# 
   800  0214                     	;# 
   801  0214                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0216                     	;# 
   806  0216                     	;# 
   807  0217                     	;# 
   808  0217                     	;# 
   809  0291                     	;# 
   810  0291                     	;# 
   811  0292                     	;# 
   812  0293                     	;# 
   813  0298                     	;# 
   814  0298                     	;# 
   815  0299                     	;# 
   816  029A                     	;# 
   817  0394                     	;# 
   818  0395                     	;# 
   819  0396                     	;# 
   820  0FE4                     	;# 
   821  0FE5                     	;# 
   822  0FE6                     	;# 
   823  0FE7                     	;# 
   824  0FE8                     	;# 
   825  0FE9                     	;# 
   826  0FEA                     	;# 
   827  0FEB                     	;# 
   828  0FED                     	;# 
   829  0FEE                     	;# 
   830  0FEF                     	;# 
   831  0000                     	;# 
   832  0001                     	;# 
   833  0002                     	;# 
   834  0003                     	;# 
   835  0004                     	;# 
   836  0005                     	;# 
   837  0006                     	;# 
   838  0007                     	;# 
   839  0008                     	;# 
   840  0009                     	;# 
   841  000A                     	;# 
   842  000B                     	;# 
   843  000C                     	;# 
   844  000D                     	;# 
   845  000E                     	;# 
   846  0010                     	;# 
   847  0011                     	;# 
   848  0012                     	;# 
   849  0015                     	;# 
   850  0016                     	;# 
   851  0016                     	;# 
   852  0017                     	;# 
   853  0018                     	;# 
   854  0019                     	;# 
   855  001A                     	;# 
   856  001B                     	;# 
   857  001C                     	;# 
   858  008C                     	;# 
   859  008D                     	;# 
   860  008E                     	;# 
   861  0090                     	;# 
   862  0091                     	;# 
   863  0092                     	;# 
   864  0095                     	;# 
   865  0096                     	;# 
   866  0097                     	;# 
   867  0099                     	;# 
   868  009A                     	;# 
   869  009B                     	;# 
   870  009B                     	;# 
   871  009C                     	;# 
   872  009D                     	;# 
   873  009E                     	;# 
   874  010C                     	;# 
   875  010D                     	;# 
   876  010E                     	;# 
   877  0116                     	;# 
   878  0117                     	;# 
   879  011D                     	;# 
   880  018C                     	;# 
   881  018D                     	;# 
   882  018E                     	;# 
   883  0191                     	;# 
   884  0191                     	;# 
   885  0192                     	;# 
   886  0193                     	;# 
   887  0193                     	;# 
   888  0194                     	;# 
   889  0195                     	;# 
   890  0196                     	;# 
   891  0197                     	;# 
   892  0199                     	;# 
   893  019A                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019C                     	;# 
   899  019C                     	;# 
   900  019D                     	;# 
   901  019E                     	;# 
   902  019F                     	;# 
   903  020D                     	;# 
   904  0210                     	;# 
   905  0211                     	;# 
   906  0211                     	;# 
   907  0212                     	;# 
   908  0212                     	;# 
   909  0213                     	;# 
   910  0213                     	;# 
   911  0214                     	;# 
   912  0214                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0216                     	;# 
   917  0216                     	;# 
   918  0217                     	;# 
   919  0217                     	;# 
   920  0291                     	;# 
   921  0291                     	;# 
   922  0292                     	;# 
   923  0293                     	;# 
   924  0298                     	;# 
   925  0298                     	;# 
   926  0299                     	;# 
   927  029A                     	;# 
   928  0394                     	;# 
   929  0395                     	;# 
   930  0396                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000D                     	;# 
   956  000E                     	;# 
   957  0010                     	;# 
   958  0011                     	;# 
   959  0012                     	;# 
   960  0015                     	;# 
   961  0016                     	;# 
   962  0016                     	;# 
   963  0017                     	;# 
   964  0018                     	;# 
   965  0019                     	;# 
   966  001A                     	;# 
   967  001B                     	;# 
   968  001C                     	;# 
   969  008C                     	;# 
   970  008D                     	;# 
   971  008E                     	;# 
   972  0090                     	;# 
   973  0091                     	;# 
   974  0092                     	;# 
   975  0095                     	;# 
   976  0096                     	;# 
   977  0097                     	;# 
   978  0099                     	;# 
   979  009A                     	;# 
   980  009B                     	;# 
   981  009B                     	;# 
   982  009C                     	;# 
   983  009D                     	;# 
   984  009E                     	;# 
   985  010C                     	;# 
   986  010D                     	;# 
   987  010E                     	;# 
   988  0116                     	;# 
   989  0117                     	;# 
   990  011D                     	;# 
   991  018C                     	;# 
   992  018D                     	;# 
   993  018E                     	;# 
   994  0191                     	;# 
   995  0191                     	;# 
   996  0192                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0194                     	;# 
  1000  0195                     	;# 
  1001  0196                     	;# 
  1002  0197                     	;# 
  1003  0199                     	;# 
  1004  019A                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019C                     	;# 
  1010  019C                     	;# 
  1011  019D                     	;# 
  1012  019E                     	;# 
  1013  019F                     	;# 
  1014  020D                     	;# 
  1015  0210                     	;# 
  1016  0211                     	;# 
  1017  0211                     	;# 
  1018  0212                     	;# 
  1019  0212                     	;# 
  1020  0213                     	;# 
  1021  0213                     	;# 
  1022  0214                     	;# 
  1023  0214                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0216                     	;# 
  1028  0216                     	;# 
  1029  0217                     	;# 
  1030  0217                     	;# 
  1031  0291                     	;# 
  1032  0291                     	;# 
  1033  0292                     	;# 
  1034  0293                     	;# 
  1035  0298                     	;# 
  1036  0298                     	;# 
  1037  0299                     	;# 
  1038  029A                     	;# 
  1039  0394                     	;# 
  1040  0395                     	;# 
  1041  0396                     	;# 
  1042  0FE4                     	;# 
  1043  0FE5                     	;# 
  1044  0FE6                     	;# 
  1045  0FE7                     	;# 
  1046  0FE8                     	;# 
  1047  0FE9                     	;# 
  1048  0FEA                     	;# 
  1049  0FEB                     	;# 
  1050  0FED                     	;# 
  1051  0FEE                     	;# 
  1052  0FEF                     	;# 
  1053  0000                     	;# 
  1054  0001                     	;# 
  1055  0002                     	;# 
  1056  0003                     	;# 
  1057  0004                     	;# 
  1058  0005                     	;# 
  1059  0006                     	;# 
  1060  0007                     	;# 
  1061  0008                     	;# 
  1062  0009                     	;# 
  1063  000A                     	;# 
  1064  000B                     	;# 
  1065  000C                     	;# 
  1066  000D                     	;# 
  1067  000E                     	;# 
  1068  0010                     	;# 
  1069  0011                     	;# 
  1070  0012                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0016                     	;# 
  1074  0017                     	;# 
  1075  0018                     	;# 
  1076  0019                     	;# 
  1077  001A                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  008C                     	;# 
  1081  008D                     	;# 
  1082  008E                     	;# 
  1083  0090                     	;# 
  1084  0091                     	;# 
  1085  0092                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0097                     	;# 
  1089  0099                     	;# 
  1090  009A                     	;# 
  1091  009B                     	;# 
  1092  009B                     	;# 
  1093  009C                     	;# 
  1094  009D                     	;# 
  1095  009E                     	;# 
  1096  010C                     	;# 
  1097  010D                     	;# 
  1098  010E                     	;# 
  1099  0116                     	;# 
  1100  0117                     	;# 
  1101  011D                     	;# 
  1102  018C                     	;# 
  1103  018D                     	;# 
  1104  018E                     	;# 
  1105  0191                     	;# 
  1106  0191                     	;# 
  1107  0192                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0194                     	;# 
  1111  0195                     	;# 
  1112  0196                     	;# 
  1113  0197                     	;# 
  1114  0199                     	;# 
  1115  019A                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019C                     	;# 
  1121  019C                     	;# 
  1122  019D                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  020D                     	;# 
  1126  0210                     	;# 
  1127  0211                     	;# 
  1128  0211                     	;# 
  1129  0212                     	;# 
  1130  0212                     	;# 
  1131  0213                     	;# 
  1132  0213                     	;# 
  1133  0214                     	;# 
  1134  0214                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0216                     	;# 
  1139  0216                     	;# 
  1140  0217                     	;# 
  1141  0217                     	;# 
  1142  0291                     	;# 
  1143  0291                     	;# 
  1144  0292                     	;# 
  1145  0293                     	;# 
  1146  0298                     	;# 
  1147  0298                     	;# 
  1148  0299                     	;# 
  1149  029A                     	;# 
  1150  0394                     	;# 
  1151  0395                     	;# 
  1152  0396                     	;# 
  1153  0FE4                     	;# 
  1154  0FE5                     	;# 
  1155  0FE6                     	;# 
  1156  0FE7                     	;# 
  1157  0FE8                     	;# 
  1158  0FE9                     	;# 
  1159  0FEA                     	;# 
  1160  0FEB                     	;# 
  1161  0FED                     	;# 
  1162  0FEE                     	;# 
  1163  0FEF                     	;# 
  1164  0000                     	;# 
  1165  0001                     	;# 
  1166  0002                     	;# 
  1167  0003                     	;# 
  1168  0004                     	;# 
  1169  0005                     	;# 
  1170  0006                     	;# 
  1171  0007                     	;# 
  1172  0008                     	;# 
  1173  0009                     	;# 
  1174  000A                     	;# 
  1175  000B                     	;# 
  1176  000C                     	;# 
  1177  000D                     	;# 
  1178  000E                     	;# 
  1179  0010                     	;# 
  1180  0011                     	;# 
  1181  0012                     	;# 
  1182  0015                     	;# 
  1183  0016                     	;# 
  1184  0016                     	;# 
  1185  0017                     	;# 
  1186  0018                     	;# 
  1187  0019                     	;# 
  1188  001A                     	;# 
  1189  001B                     	;# 
  1190  001C                     	;# 
  1191  008C                     	;# 
  1192  008D                     	;# 
  1193  008E                     	;# 
  1194  0090                     	;# 
  1195  0091                     	;# 
  1196  0092                     	;# 
  1197  0095                     	;# 
  1198  0096                     	;# 
  1199  0097                     	;# 
  1200  0099                     	;# 
  1201  009A                     	;# 
  1202  009B                     	;# 
  1203  009B                     	;# 
  1204  009C                     	;# 
  1205  009D                     	;# 
  1206  009E                     	;# 
  1207  010C                     	;# 
  1208  010D                     	;# 
  1209  010E                     	;# 
  1210  0116                     	;# 
  1211  0117                     	;# 
  1212  011D                     	;# 
  1213  018C                     	;# 
  1214  018D                     	;# 
  1215  018E                     	;# 
  1216  0191                     	;# 
  1217  0191                     	;# 
  1218  0192                     	;# 
  1219  0193                     	;# 
  1220  0193                     	;# 
  1221  0194                     	;# 
  1222  0195                     	;# 
  1223  0196                     	;# 
  1224  0197                     	;# 
  1225  0199                     	;# 
  1226  019A                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019C                     	;# 
  1232  019C                     	;# 
  1233  019D                     	;# 
  1234  019E                     	;# 
  1235  019F                     	;# 
  1236  020D                     	;# 
  1237  0210                     	;# 
  1238  0211                     	;# 
  1239  0211                     	;# 
  1240  0212                     	;# 
  1241  0212                     	;# 
  1242  0213                     	;# 
  1243  0213                     	;# 
  1244  0214                     	;# 
  1245  0214                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0216                     	;# 
  1250  0216                     	;# 
  1251  0217                     	;# 
  1252  0217                     	;# 
  1253  0291                     	;# 
  1254  0291                     	;# 
  1255  0292                     	;# 
  1256  0293                     	;# 
  1257  0298                     	;# 
  1258  0298                     	;# 
  1259  0299                     	;# 
  1260  029A                     	;# 
  1261  0394                     	;# 
  1262  0395                     	;# 
  1263  0396                     	;# 
  1264  0FE4                     	;# 
  1265  0FE5                     	;# 
  1266  0FE6                     	;# 
  1267  0FE7                     	;# 
  1268  0FE8                     	;# 
  1269  0FE9                     	;# 
  1270  0FEA                     	;# 
  1271  0FEB                     	;# 
  1272  0FED                     	;# 
  1273  0FEE                     	;# 
  1274  0FEF                     	;# 
  1275  0000                     	;# 
  1276  0001                     	;# 
  1277  0002                     	;# 
  1278  0003                     	;# 
  1279  0004                     	;# 
  1280  0005                     	;# 
  1281  0006                     	;# 
  1282  0007                     	;# 
  1283  0008                     	;# 
  1284  0009                     	;# 
  1285  000A                     	;# 
  1286  000B                     	;# 
  1287  000C                     	;# 
  1288  000D                     	;# 
  1289  000E                     	;# 
  1290  0010                     	;# 
  1291  0011                     	;# 
  1292  0012                     	;# 
  1293  0015                     	;# 
  1294  0016                     	;# 
  1295  0016                     	;# 
  1296  0017                     	;# 
  1297  0018                     	;# 
  1298  0019                     	;# 
  1299  001A                     	;# 
  1300  001B                     	;# 
  1301  001C                     	;# 
  1302  008C                     	;# 
  1303  008D                     	;# 
  1304  008E                     	;# 
  1305  0090                     	;# 
  1306  0091                     	;# 
  1307  0092                     	;# 
  1308  0095                     	;# 
  1309  0096                     	;# 
  1310  0097                     	;# 
  1311  0099                     	;# 
  1312  009A                     	;# 
  1313  009B                     	;# 
  1314  009B                     	;# 
  1315  009C                     	;# 
  1316  009D                     	;# 
  1317  009E                     	;# 
  1318  010C                     	;# 
  1319  010D                     	;# 
  1320  010E                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  011D                     	;# 
  1324  018C                     	;# 
  1325  018D                     	;# 
  1326  018E                     	;# 
  1327  0191                     	;# 
  1328  0191                     	;# 
  1329  0192                     	;# 
  1330  0193                     	;# 
  1331  0193                     	;# 
  1332  0194                     	;# 
  1333  0195                     	;# 
  1334  0196                     	;# 
  1335  0197                     	;# 
  1336  0199                     	;# 
  1337  019A                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019C                     	;# 
  1343  019C                     	;# 
  1344  019D                     	;# 
  1345  019E                     	;# 
  1346  019F                     	;# 
  1347  020D                     	;# 
  1348  0210                     	;# 
  1349  0211                     	;# 
  1350  0211                     	;# 
  1351  0212                     	;# 
  1352  0212                     	;# 
  1353  0213                     	;# 
  1354  0213                     	;# 
  1355  0214                     	;# 
  1356  0214                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0216                     	;# 
  1361  0216                     	;# 
  1362  0217                     	;# 
  1363  0217                     	;# 
  1364  0291                     	;# 
  1365  0291                     	;# 
  1366  0292                     	;# 
  1367  0293                     	;# 
  1368  0298                     	;# 
  1369  0298                     	;# 
  1370  0299                     	;# 
  1371  029A                     	;# 
  1372  0394                     	;# 
  1373  0395                     	;# 
  1374  0396                     	;# 
  1375  0FE4                     	;# 
  1376  0FE5                     	;# 
  1377  0FE6                     	;# 
  1378  0FE7                     	;# 
  1379  0FE8                     	;# 
  1380  0FE9                     	;# 
  1381  0FEA                     	;# 
  1382  0FEB                     	;# 
  1383  0FED                     	;# 
  1384  0FEE                     	;# 
  1385  0FEF                     	;# 
  1386  0000                     	;# 
  1387  0001                     	;# 
  1388  0002                     	;# 
  1389  0003                     	;# 
  1390  0004                     	;# 
  1391  0005                     	;# 
  1392  0006                     	;# 
  1393  0007                     	;# 
  1394  0008                     	;# 
  1395  0009                     	;# 
  1396  000A                     	;# 
  1397  000B                     	;# 
  1398  000C                     	;# 
  1399  000D                     	;# 
  1400  000E                     	;# 
  1401  0010                     	;# 
  1402  0011                     	;# 
  1403  0012                     	;# 
  1404  0015                     	;# 
  1405  0016                     	;# 
  1406  0016                     	;# 
  1407  0017                     	;# 
  1408  0018                     	;# 
  1409  0019                     	;# 
  1410  001A                     	;# 
  1411  001B                     	;# 
  1412  001C                     	;# 
  1413  008C                     	;# 
  1414  008D                     	;# 
  1415  008E                     	;# 
  1416  0090                     	;# 
  1417  0091                     	;# 
  1418  0092                     	;# 
  1419  0095                     	;# 
  1420  0096                     	;# 
  1421  0097                     	;# 
  1422  0099                     	;# 
  1423  009A                     	;# 
  1424  009B                     	;# 
  1425  009B                     	;# 
  1426  009C                     	;# 
  1427  009D                     	;# 
  1428  009E                     	;# 
  1429  010C                     	;# 
  1430  010D                     	;# 
  1431  010E                     	;# 
  1432  0116                     	;# 
  1433  0117                     	;# 
  1434  011D                     	;# 
  1435  018C                     	;# 
  1436  018D                     	;# 
  1437  018E                     	;# 
  1438  0191                     	;# 
  1439  0191                     	;# 
  1440  0192                     	;# 
  1441  0193                     	;# 
  1442  0193                     	;# 
  1443  0194                     	;# 
  1444  0195                     	;# 
  1445  0196                     	;# 
  1446  0197                     	;# 
  1447  0199                     	;# 
  1448  019A                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019C                     	;# 
  1454  019C                     	;# 
  1455  019D                     	;# 
  1456  019E                     	;# 
  1457  019F                     	;# 
  1458  020D                     	;# 
  1459  0210                     	;# 
  1460  0211                     	;# 
  1461  0211                     	;# 
  1462  0212                     	;# 
  1463  0212                     	;# 
  1464  0213                     	;# 
  1465  0213                     	;# 
  1466  0214                     	;# 
  1467  0214                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0216                     	;# 
  1472  0216                     	;# 
  1473  0217                     	;# 
  1474  0217                     	;# 
  1475  0291                     	;# 
  1476  0291                     	;# 
  1477  0292                     	;# 
  1478  0293                     	;# 
  1479  0298                     	;# 
  1480  0298                     	;# 
  1481  0299                     	;# 
  1482  029A                     	;# 
  1483  0394                     	;# 
  1484  0395                     	;# 
  1485  0396                     	;# 
  1486  0FE4                     	;# 
  1487  0FE5                     	;# 
  1488  0FE6                     	;# 
  1489  0FE7                     	;# 
  1490  0FE8                     	;# 
  1491  0FE9                     	;# 
  1492  0FEA                     	;# 
  1493  0FEB                     	;# 
  1494  0FED                     	;# 
  1495  0FEE                     	;# 
  1496  0FEF                     	;# 
  1497  0000                     	;# 
  1498  0001                     	;# 
  1499  0002                     	;# 
  1500  0003                     	;# 
  1501  0004                     	;# 
  1502  0005                     	;# 
  1503  0006                     	;# 
  1504  0007                     	;# 
  1505  0008                     	;# 
  1506  0009                     	;# 
  1507  000A                     	;# 
  1508  000B                     	;# 
  1509  000C                     	;# 
  1510  000D                     	;# 
  1511  000E                     	;# 
  1512  0010                     	;# 
  1513  0011                     	;# 
  1514  0012                     	;# 
  1515  0015                     	;# 
  1516  0016                     	;# 
  1517  0016                     	;# 
  1518  0017                     	;# 
  1519  0018                     	;# 
  1520  0019                     	;# 
  1521  001A                     	;# 
  1522  001B                     	;# 
  1523  001C                     	;# 
  1524  008C                     	;# 
  1525  008D                     	;# 
  1526  008E                     	;# 
  1527  0090                     	;# 
  1528  0091                     	;# 
  1529  0092                     	;# 
  1530  0095                     	;# 
  1531  0096                     	;# 
  1532  0097                     	;# 
  1533  0099                     	;# 
  1534  009A                     	;# 
  1535  009B                     	;# 
  1536  009B                     	;# 
  1537  009C                     	;# 
  1538  009D                     	;# 
  1539  009E                     	;# 
  1540  010C                     	;# 
  1541  010D                     	;# 
  1542  010E                     	;# 
  1543  0116                     	;# 
  1544  0117                     	;# 
  1545  011D                     	;# 
  1546  018C                     	;# 
  1547  018D                     	;# 
  1548  018E                     	;# 
  1549  0191                     	;# 
  1550  0191                     	;# 
  1551  0192                     	;# 
  1552  0193                     	;# 
  1553  0193                     	;# 
  1554  0194                     	;# 
  1555  0195                     	;# 
  1556  0196                     	;# 
  1557  0197                     	;# 
  1558  0199                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019C                     	;# 
  1565  019C                     	;# 
  1566  019D                     	;# 
  1567  019E                     	;# 
  1568  019F                     	;# 
  1569  020D                     	;# 
  1570  0210                     	;# 
  1571  0211                     	;# 
  1572  0211                     	;# 
  1573  0212                     	;# 
  1574  0212                     	;# 
  1575  0213                     	;# 
  1576  0213                     	;# 
  1577  0214                     	;# 
  1578  0214                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0216                     	;# 
  1583  0216                     	;# 
  1584  0217                     	;# 
  1585  0217                     	;# 
  1586  0291                     	;# 
  1587  0291                     	;# 
  1588  0292                     	;# 
  1589  0293                     	;# 
  1590  0298                     	;# 
  1591  0298                     	;# 
  1592  0299                     	;# 
  1593  029A                     	;# 
  1594  0394                     	;# 
  1595  0395                     	;# 
  1596  0396                     	;# 
  1597  0FE4                     	;# 
  1598  0FE5                     	;# 
  1599  0FE6                     	;# 
  1600  0FE7                     	;# 
  1601  0FE8                     	;# 
  1602  0FE9                     	;# 
  1603  0FEA                     	;# 
  1604  0FEB                     	;# 
  1605  0FED                     	;# 
  1606  0FEE                     	;# 
  1607  0FEF                     	;# 
  1608  0000                     	;# 
  1609  0001                     	;# 
  1610  0002                     	;# 
  1611  0003                     	;# 
  1612  0004                     	;# 
  1613  0005                     	;# 
  1614  0006                     	;# 
  1615  0007                     	;# 
  1616  0008                     	;# 
  1617  0009                     	;# 
  1618  000A                     	;# 
  1619  000B                     	;# 
  1620  000C                     	;# 
  1621  000D                     	;# 
  1622  000E                     	;# 
  1623  0010                     	;# 
  1624  0011                     	;# 
  1625  0012                     	;# 
  1626  0015                     	;# 
  1627  0016                     	;# 
  1628  0016                     	;# 
  1629  0017                     	;# 
  1630  0018                     	;# 
  1631  0019                     	;# 
  1632  001A                     	;# 
  1633  001B                     	;# 
  1634  001C                     	;# 
  1635  008C                     	;# 
  1636  008D                     	;# 
  1637  008E                     	;# 
  1638  0090                     	;# 
  1639  0091                     	;# 
  1640  0092                     	;# 
  1641  0095                     	;# 
  1642  0096                     	;# 
  1643  0097                     	;# 
  1644  0099                     	;# 
  1645  009A                     	;# 
  1646  009B                     	;# 
  1647  009B                     	;# 
  1648  009C                     	;# 
  1649  009D                     	;# 
  1650  009E                     	;# 
  1651  010C                     	;# 
  1652  010D                     	;# 
  1653  010E                     	;# 
  1654  0116                     	;# 
  1655  0117                     	;# 
  1656  011D                     	;# 
  1657  018C                     	;# 
  1658  018D                     	;# 
  1659  018E                     	;# 
  1660  0191                     	;# 
  1661  0191                     	;# 
  1662  0192                     	;# 
  1663  0193                     	;# 
  1664  0193                     	;# 
  1665  0194                     	;# 
  1666  0195                     	;# 
  1667  0196                     	;# 
  1668  0197                     	;# 
  1669  0199                     	;# 
  1670  019A                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019C                     	;# 
  1676  019C                     	;# 
  1677  019D                     	;# 
  1678  019E                     	;# 
  1679  019F                     	;# 
  1680  020D                     	;# 
  1681  0210                     	;# 
  1682  0211                     	;# 
  1683  0211                     	;# 
  1684  0212                     	;# 
  1685  0212                     	;# 
  1686  0213                     	;# 
  1687  0213                     	;# 
  1688  0214                     	;# 
  1689  0214                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0216                     	;# 
  1694  0216                     	;# 
  1695  0217                     	;# 
  1696  0217                     	;# 
  1697  0291                     	;# 
  1698  0291                     	;# 
  1699  0292                     	;# 
  1700  0293                     	;# 
  1701  0298                     	;# 
  1702  0298                     	;# 
  1703  0299                     	;# 
  1704  029A                     	;# 
  1705  0394                     	;# 
  1706  0395                     	;# 
  1707  0396                     	;# 
  1708  0FE4                     	;# 
  1709  0FE5                     	;# 
  1710  0FE6                     	;# 
  1711  0FE7                     	;# 
  1712  0FE8                     	;# 
  1713  0FE9                     	;# 
  1714  0FEA                     	;# 
  1715  0FEB                     	;# 
  1716  0FED                     	;# 
  1717  0FEE                     	;# 
  1718  0FEF                     	;# 
  1719  0000                     	;# 
  1720  0001                     	;# 
  1721  0002                     	;# 
  1722  0003                     	;# 
  1723  0004                     	;# 
  1724  0005                     	;# 
  1725  0006                     	;# 
  1726  0007                     	;# 
  1727  0008                     	;# 
  1728  0009                     	;# 
  1729  000A                     	;# 
  1730  000B                     	;# 
  1731  000C                     	;# 
  1732  000D                     	;# 
  1733  000E                     	;# 
  1734  0010                     	;# 
  1735  0011                     	;# 
  1736  0012                     	;# 
  1737  0015                     	;# 
  1738  0016                     	;# 
  1739  0016                     	;# 
  1740  0017                     	;# 
  1741  0018                     	;# 
  1742  0019                     	;# 
  1743  001A                     	;# 
  1744  001B                     	;# 
  1745  001C                     	;# 
  1746  008C                     	;# 
  1747  008D                     	;# 
  1748  008E                     	;# 
  1749  0090                     	;# 
  1750  0091                     	;# 
  1751  0092                     	;# 
  1752  0095                     	;# 
  1753  0096                     	;# 
  1754  0097                     	;# 
  1755  0099                     	;# 
  1756  009A                     	;# 
  1757  009B                     	;# 
  1758  009B                     	;# 
  1759  009C                     	;# 
  1760  009D                     	;# 
  1761  009E                     	;# 
  1762  010C                     	;# 
  1763  010D                     	;# 
  1764  010E                     	;# 
  1765  0116                     	;# 
  1766  0117                     	;# 
  1767  011D                     	;# 
  1768  018C                     	;# 
  1769  018D                     	;# 
  1770  018E                     	;# 
  1771  0191                     	;# 
  1772  0191                     	;# 
  1773  0192                     	;# 
  1774  0193                     	;# 
  1775  0193                     	;# 
  1776  0194                     	;# 
  1777  0195                     	;# 
  1778  0196                     	;# 
  1779  0197                     	;# 
  1780  0199                     	;# 
  1781  019A                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019C                     	;# 
  1787  019C                     	;# 
  1788  019D                     	;# 
  1789  019E                     	;# 
  1790  019F                     	;# 
  1791  020D                     	;# 
  1792  0210                     	;# 
  1793  0211                     	;# 
  1794  0211                     	;# 
  1795  0212                     	;# 
  1796  0212                     	;# 
  1797  0213                     	;# 
  1798  0213                     	;# 
  1799  0214                     	;# 
  1800  0214                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0216                     	;# 
  1805  0216                     	;# 
  1806  0217                     	;# 
  1807  0217                     	;# 
  1808  0291                     	;# 
  1809  0291                     	;# 
  1810  0292                     	;# 
  1811  0293                     	;# 
  1812  0298                     	;# 
  1813  0298                     	;# 
  1814  0299                     	;# 
  1815  029A                     	;# 
  1816  0394                     	;# 
  1817  0395                     	;# 
  1818  0396                     	;# 
  1819  0FE4                     	;# 
  1820  0FE5                     	;# 
  1821  0FE6                     	;# 
  1822  0FE7                     	;# 
  1823  0FE8                     	;# 
  1824  0FE9                     	;# 
  1825  0FEA                     	;# 
  1826  0FEB                     	;# 
  1827  0FED                     	;# 
  1828  0FEE                     	;# 
  1829  0FEF                     	;# 
  1830  0000                     	;# 
  1831  0001                     	;# 
  1832  0002                     	;# 
  1833  0003                     	;# 
  1834  0004                     	;# 
  1835  0005                     	;# 
  1836  0006                     	;# 
  1837  0007                     	;# 
  1838  0008                     	;# 
  1839  0009                     	;# 
  1840  000A                     	;# 
  1841  000B                     	;# 
  1842  000C                     	;# 
  1843  000D                     	;# 
  1844  000E                     	;# 
  1845  0010                     	;# 
  1846  0011                     	;# 
  1847  0012                     	;# 
  1848  0015                     	;# 
  1849  0016                     	;# 
  1850  0016                     	;# 
  1851  0017                     	;# 
  1852  0018                     	;# 
  1853  0019                     	;# 
  1854  001A                     	;# 
  1855  001B                     	;# 
  1856  001C                     	;# 
  1857  008C                     	;# 
  1858  008D                     	;# 
  1859  008E                     	;# 
  1860  0090                     	;# 
  1861  0091                     	;# 
  1862  0092                     	;# 
  1863  0095                     	;# 
  1864  0096                     	;# 
  1865  0097                     	;# 
  1866  0099                     	;# 
  1867  009A                     	;# 
  1868  009B                     	;# 
  1869  009B                     	;# 
  1870  009C                     	;# 
  1871  009D                     	;# 
  1872  009E                     	;# 
  1873  010C                     	;# 
  1874  010D                     	;# 
  1875  010E                     	;# 
  1876  0116                     	;# 
  1877  0117                     	;# 
  1878  011D                     	;# 
  1879  018C                     	;# 
  1880  018D                     	;# 
  1881  018E                     	;# 
  1882  0191                     	;# 
  1883  0191                     	;# 
  1884  0192                     	;# 
  1885  0193                     	;# 
  1886  0193                     	;# 
  1887  0194                     	;# 
  1888  0195                     	;# 
  1889  0196                     	;# 
  1890  0197                     	;# 
  1891  0199                     	;# 
  1892  019A                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019C                     	;# 
  1898  019C                     	;# 
  1899  019D                     	;# 
  1900  019E                     	;# 
  1901  019F                     	;# 
  1902  020D                     	;# 
  1903  0210                     	;# 
  1904  0211                     	;# 
  1905  0211                     	;# 
  1906  0212                     	;# 
  1907  0212                     	;# 
  1908  0213                     	;# 
  1909  0213                     	;# 
  1910  0214                     	;# 
  1911  0214                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0216                     	;# 
  1916  0216                     	;# 
  1917  0217                     	;# 
  1918  0217                     	;# 
  1919  0291                     	;# 
  1920  0291                     	;# 
  1921  0292                     	;# 
  1922  0293                     	;# 
  1923  0298                     	;# 
  1924  0298                     	;# 
  1925  0299                     	;# 
  1926  029A                     	;# 
  1927  0394                     	;# 
  1928  0395                     	;# 
  1929  0396                     	;# 
  1930  0FE4                     	;# 
  1931  0FE5                     	;# 
  1932  0FE6                     	;# 
  1933  0FE7                     	;# 
  1934  0FE8                     	;# 
  1935  0FE9                     	;# 
  1936  0FEA                     	;# 
  1937  0FEB                     	;# 
  1938  0FED                     	;# 
  1939  0FEE                     	;# 
  1940  0FEF                     	;# 
  1941  0000                     	;# 
  1942  0001                     	;# 
  1943  0002                     	;# 
  1944  0003                     	;# 
  1945  0004                     	;# 
  1946  0005                     	;# 
  1947  0006                     	;# 
  1948  0007                     	;# 
  1949  0008                     	;# 
  1950  0009                     	;# 
  1951  000A                     	;# 
  1952  000B                     	;# 
  1953  000C                     	;# 
  1954  000D                     	;# 
  1955  000E                     	;# 
  1956  0010                     	;# 
  1957  0011                     	;# 
  1958  0012                     	;# 
  1959  0015                     	;# 
  1960  0016                     	;# 
  1961  0016                     	;# 
  1962  0017                     	;# 
  1963  0018                     	;# 
  1964  0019                     	;# 
  1965  001A                     	;# 
  1966  001B                     	;# 
  1967  001C                     	;# 
  1968  008C                     	;# 
  1969  008D                     	;# 
  1970  008E                     	;# 
  1971  0090                     	;# 
  1972  0091                     	;# 
  1973  0092                     	;# 
  1974  0095                     	;# 
  1975  0096                     	;# 
  1976  0097                     	;# 
  1977  0099                     	;# 
  1978  009A                     	;# 
  1979  009B                     	;# 
  1980  009B                     	;# 
  1981  009C                     	;# 
  1982  009D                     	;# 
  1983  009E                     	;# 
  1984  010C                     	;# 
  1985  010D                     	;# 
  1986  010E                     	;# 
  1987  0116                     	;# 
  1988  0117                     	;# 
  1989  011D                     	;# 
  1990  018C                     	;# 
  1991  018D                     	;# 
  1992  018E                     	;# 
  1993  0191                     	;# 
  1994  0191                     	;# 
  1995  0192                     	;# 
  1996  0193                     	;# 
  1997  0193                     	;# 
  1998  0194                     	;# 
  1999  0195                     	;# 
  2000  0196                     	;# 
  2001  0197                     	;# 
  2002  0199                     	;# 
  2003  019A                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019C                     	;# 
  2009  019C                     	;# 
  2010  019D                     	;# 
  2011  019E                     	;# 
  2012  019F                     	;# 
  2013  020D                     	;# 
  2014  0210                     	;# 
  2015  0211                     	;# 
  2016  0211                     	;# 
  2017  0212                     	;# 
  2018  0212                     	;# 
  2019  0213                     	;# 
  2020  0213                     	;# 
  2021  0214                     	;# 
  2022  0214                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0216                     	;# 
  2027  0216                     	;# 
  2028  0217                     	;# 
  2029  0217                     	;# 
  2030  0291                     	;# 
  2031  0291                     	;# 
  2032  0292                     	;# 
  2033  0293                     	;# 
  2034  0298                     	;# 
  2035  0298                     	;# 
  2036  0299                     	;# 
  2037  029A                     	;# 
  2038  0394                     	;# 
  2039  0395                     	;# 
  2040  0396                     	;# 
  2041  0FE4                     	;# 
  2042  0FE5                     	;# 
  2043  0FE6                     	;# 
  2044  0FE7                     	;# 
  2045  0FE8                     	;# 
  2046  0FE9                     	;# 
  2047  0FEA                     	;# 
  2048  0FEB                     	;# 
  2049  0FED                     	;# 
  2050  0FEE                     	;# 
  2051  0FEF                     	;# 
  2052                           
  2053                           	psect	idataBANK4
  2054  1EB9                     __pidataBANK4:	
  2055                           
  2056                           ;initializer for __product
  2057  1EB9  3463               	retlw	99
  2058  1EBA  3402               	retlw	2
  2059  1EBB  3400               	retlw	0
  2060  1EBC  3400               	retlw	0
  2061  1EBD  3400               	retlw	0
  2062  1EBE  3400               	retlw	0
  2063  1EBF  3400               	retlw	0
  2064  1EC0  3400               	retlw	0
  2065  1EC1  3400               	retlw	0
  2066  1EC2  3400               	retlw	0
  2067  1EC3  3400               	retlw	0
  2068  1EC4  3400               	retlw	0
  2069  1EC5  34FF               	retlw	255
  2070  1EC6  34FF               	retlw	255
  2071  1EC7  34FF               	retlw	255
  2072  1EC8  3400               	retlw	0
  2073  1EC9  3400               	retlw	0
  2074  1ECA  3400               	retlw	0
  2075  1ECB  3400               	retlw	0
  2076  1ECC  3400               	retlw	0
  2077  1ECD  3400               	retlw	0
  2078  1ECE  3400               	retlw	0
  2079  1ECF  3400               	retlw	0
  2080  1ED0  3400               	retlw	0
  2081  1ED1  3400               	retlw	0
  2082  1ED2  3400               	retlw	0
  2083  1ED3  3400               	retlw	0
  2084  1ED4  3400               	retlw	0
  2085  1ED5  3400               	retlw	0
  2086  1ED6  3400               	retlw	0
  2087  1ED7  3400               	retlw	0
  2088  1ED8  3400               	retlw	0
  2089                           
  2090                           	psect	stringtext
  2091  1800                     __pstringtext:	
  2092  1800                     _CC2500_registers_address:	
  2093  1800  3403               	retlw	3
  2094  1801  3416               	retlw	22
  2095  1802  3417               	retlw	23
  2096  1803  341E               	retlw	30
  2097  1804  341F               	retlw	31
  2098  1805  3420               	retlw	32
  2099  1806  342A               	retlw	42
  2100  1807  342B               	retlw	43
  2101  1808  340B               	retlw	11
  2102  1809  340C               	retlw	12
  2103  180A  340D               	retlw	13
  2104  180B  340E               	retlw	14
  2105  180C  340F               	retlw	15
  2106  180D  3410               	retlw	16
  2107  180E  3411               	retlw	17
  2108  180F  3412               	retlw	18
  2109  1810  3413               	retlw	19
  2110  1811  3414               	retlw	20
  2111  1812  340A               	retlw	10
  2112  1813  3415               	retlw	21
  2113  1814  3421               	retlw	33
  2114  1815  3422               	retlw	34
  2115  1816  3418               	retlw	24
  2116  1817  3419               	retlw	25
  2117  1818  341A               	retlw	26
  2118  1819  341B               	retlw	27
  2119  181A  341C               	retlw	28
  2120  181B  341D               	retlw	29
  2121  181C  3423               	retlw	35
  2122  181D  3424               	retlw	36
  2123  181E  3425               	retlw	37
  2124  181F  3426               	retlw	38
  2125  1820  3429               	retlw	41
  2126  1821  342C               	retlw	44
  2127  1822  342D               	retlw	45
  2128  1823  342E               	retlw	46
  2129  1824  3400               	retlw	0
  2130  1825  3401               	retlw	1
  2131  1826  3402               	retlw	2
  2132  1827  3407               	retlw	7
  2133  1828  3408               	retlw	8
  2134  1829  3409               	retlw	9
  2135  182A  3406               	retlw	6
  2136  182B  3404               	retlw	4
  2137  182C  3405               	retlw	5
  2138  182D  3427               	retlw	39
  2139  182E  3428               	retlw	40
  2140  182F                     __end_of_CC2500_registers_address:	
  2141  182F                     _CC2500_rfSettings:	
  2142  182F  3407               	retlw	7
  2143  1830  3407               	retlw	7
  2144  1831  3430               	retlw	48
  2145  1832  3487               	retlw	135
  2146  1833  346B               	retlw	107
  2147  1834  34F8               	retlw	248
  2148  1835  347F               	retlw	127
  2149  1836  343F               	retlw	63
  2150  1837  3409               	retlw	9
  2151  1838  3400               	retlw	0
  2152  1839  345C               	retlw	92
  2153  183A  34A7               	retlw	167
  2154  183B  3462               	retlw	98
  2155  183C  3486               	retlw	134
  2156  183D  3483               	retlw	131
  2157  183E  3403               	retlw	3
  2158  183F  3422               	retlw	34
  2159  1840  34F8               	retlw	248
  2160  1841  3400               	retlw	0
  2161  1842  3444               	retlw	68
  2162  1843  34B6               	retlw	182
  2163  1844  3410               	retlw	16
  2164  1845  3418               	retlw	24
  2165  1846  341D               	retlw	29
  2166  1847  341C               	retlw	28
  2167  1848  34C7               	retlw	199
  2168  1849  3400               	retlw	0
  2169  184A  34B2               	retlw	178
  2170  184B  34EA               	retlw	234
  2171  184C  340A               	retlw	10
  2172  184D  3400               	retlw	0
  2173  184E  3411               	retlw	17
  2174  184F  3459               	retlw	89
  2175  1850  3488               	retlw	136
  2176  1851  3431               	retlw	49
  2177  1852  340B               	retlw	11
  2178  1853  342F               	retlw	47
  2179  1854  342E               	retlw	46
  2180  1855  3406               	retlw	6
  2181  1856  3404               	retlw	4
  2182  1857  3405               	retlw	5
  2183  1858  3400               	retlw	0
  2184  1859  3430               	retlw	48
  2185  185A  34D3               	retlw	211
  2186  185B  3491               	retlw	145
  2187  185C  3441               	retlw	65
  2188  185D  3400               	retlw	0
  2189  185E                     __end_of_CC2500_rfSettings:	
  2190  185E                     _CC2500_patable_vaule:	
  2191  185E  34FE               	retlw	254
  2192  185F  34FE               	retlw	254
  2193  1860  34FE               	retlw	254
  2194  1861  34FE               	retlw	254
  2195  1862  34FE               	retlw	254
  2196  1863  34FE               	retlw	254
  2197  1864  34FE               	retlw	254
  2198  1865  34FE               	retlw	254
  2199  1866                     __end_of_CC2500_patable_vaule:	
  2200                           
  2201                           	psect	nvBANK0
  2202  006E                     __pnvBANK0:	
  2203  006E                     _product:	
  2204  006E                     	ds	1
  2205  000C                     _PORTA	set	12
  2206  000D                     _PORTB	set	13
  2207  000E                     _PORTC	set	14
  2208  0015                     _TMR0	set	21
  2209  005F                     _GIE	set	95
  2210  005B                     _IOCIE	set	91
  2211  0058                     _IOCIF	set	88
  2212  005E                     _PEIE	set	94
  2213  0060                     _RA0	set	96
  2214  0063                     _RA3	set	99
  2215  0064                     _RA4	set	100
  2216  0066                     _RA6	set	102
  2217  0067                     _RA7	set	103
  2218  0068                     _RB0	set	104
  2219  0069                     _RB1	set	105
  2220  006A                     _RB2	set	106
  2221  006B                     _RB3	set	107
  2222  006C                     _RB4	set	108
  2223  006D                     _RB5	set	109
  2224  0070                     _RC0	set	112
  2225  0071                     _RC1	set	113
  2226  0072                     _RC2	set	114
  2227  0074                     _RC4	set	116
  2228  0075                     _RC5	set	117
  2229  0077                     _RC7	set	119
  2230  005D                     _TMR0IE	set	93
  2231  005A                     _TMR0IF	set	90
  2232  009D                     _ADCON0	set	157
  2233  009E                     _ADCON1	set	158
  2234  009C                     _ADRESH	set	156
  2235  009B                     _ADRESL	set	155
  2236  0095                     _OPTION_REG	set	149
  2237  0099                     _OSCCON	set	153
  2238  008C                     _TRISA	set	140
  2239  008D                     _TRISB	set	141
  2240  008E                     _TRISC	set	142
  2241  0097                     _WDTCON	set	151
  2242  04E9                     _GO_nDONE	set	1257
  2243  0117                     _FVRCON	set	279
  2244  010C                     _LATA	set	268
  2245  010D                     _LATB	set	269
  2246  010E                     _LATC	set	270
  2247  018C                     _ANSELA	set	396
  2248  018D                     _ANSELB	set	397
  2249  018E                     _ANSELC	set	398
  2250  0192                     _PMADRH	set	402
  2251  0191                     _PMADRL	set	401
  2252  0196                     _PMCON2	set	406
  2253  0194                     _PMDATH	set	404
  2254  0193                     _PMDATL	set	403
  2255  0CAE                     _CFGS	set	3246
  2256  0CAC                     _FREE	set	3244
  2257  0CAD                     _LWLO	set	3245
  2258  0CA8                     _RD	set	3240
  2259  0CA9                     _WR	set	3241
  2260  0CAA                     _WREN	set	3242
  2261  1069                     _WPUB1	set	4201
  2262  106A                     _WPUB2	set	4202
  2263  0396                     _IOCBF	set	918
  2264  0395                     _IOCBN	set	917
  2265  0394                     _IOCBP	set	916
  2266  1CB2                     _IOCBF2	set	7346
  2267                           
  2268                           ; #config settings
  2269  0000                     
  2270                           	psect	cinit
  2271  0015                     start_initialization:	
  2272  0015                     __initialization:	
  2273                           
  2274                           ; Clear objects allocated to BITCOMMON
  2275  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2276                           
  2277                           ; Clear objects allocated to COMMON
  2278  0016  01F0               	clrf	__pbssCOMMON& (0+127)
  2279  0017  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2280  0018  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2281  0019  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2282  001A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2283  001B  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2284                           
  2285                           ; Clear objects allocated to BANK0
  2286  001C  01EC               	clrf	__pbssBANK0& (0+127)
  2287  001D  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2288                           
  2289                           ; Clear objects allocated to BANK1
  2290  001E  30A0               	movlw	low __pbssBANK1
  2291  001F  0084               	movwf	4
  2292  0020  3000               	movlw	high __pbssBANK1
  2293  0021  0085               	movwf	5
  2294  0022  304D               	movlw	77
  2295  0023  319A  2241  3180   	fcall	clear_ram0
  2296                           
  2297                           ; Clear objects allocated to BANK2
  2298  0026  3020               	movlw	low __pbssBANK2
  2299  0027  0084               	movwf	4
  2300  0028  3001               	movlw	high __pbssBANK2
  2301  0029  0085               	movwf	5
  2302  002A  304D               	movlw	77
  2303  002B  319A  2241  3180   	fcall	clear_ram0
  2304                           
  2305                           ; Clear objects allocated to BANK3
  2306  002E  30A0               	movlw	low __pbssBANK3
  2307  002F  0084               	movwf	4
  2308  0030  3001               	movlw	high __pbssBANK3
  2309  0031  0085               	movwf	5
  2310  0032  304F               	movlw	79
  2311  0033  319A  2241  3180   	fcall	clear_ram0
  2312                           
  2313                           ; Clear objects allocated to BANK4
  2314  0036  3020               	movlw	low __pbssBANK4
  2315  0037  0084               	movwf	4
  2316  0038  3002               	movlw	high __pbssBANK4
  2317  0039  0085               	movwf	5
  2318  003A  302E               	movlw	46
  2319  003B  319A  2241  3180   	fcall	clear_ram0
  2320                           
  2321                           ; Initialize objects allocated to BANK4
  2322  003E  30B9               	movlw	low __pidataBANK4
  2323  003F  0084               	movwf	4
  2324  0040  309E               	movlw	(high __pidataBANK4)| (0+128)
  2325  0041  0085               	movwf	5
  2326  0042  304E               	movlw	low __pdataBANK4
  2327  0043  0086               	movwf	6
  2328  0044  3002               	movlw	high __pdataBANK4
  2329  0045  0087               	movwf	7
  2330  0046  3020               	movlw	32
  2331  0047  319A  223B         	fcall	init_ram
  2332  0049                     end_of_initialization:	
  2333                           ;End of C runtime variable initialization code
  2334                           
  2335  0049                     __end_of__initialization:	
  2336  0049  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2337  004A  0020               	movlb	0
  2338  004B  3195  2D66         	ljmp	_main	;jump to C main() function
  2339                           
  2340                           	psect	bitbssCOMMON
  2341  03E0                     __pbitbssCOMMON:	
  2342  03E0                     _Receive_OK:	
  2343  03E0                     	ds	1
  2344  03E1                     _Transceive_OK:	
  2345  03E1                     	ds	1
  2346                           
  2347                           	psect	bssCOMMON
  2348  0070                     __pbssCOMMON:	
  2349  0070                     _LED:	
  2350  0070                     	ds	2
  2351  0072                     _DelayOff:	
  2352  0072                     	ds	1
  2353  0073                     _Dimmer:	
  2354  0073                     	ds	1
  2355  0074                     _DimmerLights:	
  2356  0074                     	ds	1
  2357  0075                     _DimmerLightsIntr:	
  2358  0075                     	ds	1
  2359                           
  2360                           	psect	bssBANK0
  2361  006C                     __pbssBANK0:	
  2362  006C                     _Sw:	
  2363  006C                     	ds	2
  2364                           
  2365                           	psect	bssBANK1
  2366  00A0                     __pbssBANK1:	
  2367  00A0                     _myMain:	
  2368  00A0                     	ds	18
  2369  00B2                     _Buz1:	
  2370  00B2                     	ds	12
  2371  00BE                     _RF1:	
  2372  00BE                     	ds	8
  2373  00C6                     _RF_Count:	
  2374  00C6                     	ds	2
  2375  00C8                     _WDT:	
  2376  00C8                     	ds	2
  2377  00CA                     _CRC:	
  2378  00CA                     	ds	1
  2379  00CB                     _DimmerLights11:	
  2380  00CB                     	ds	1
  2381  00CC                     _DimmerLights22:	
  2382  00CC                     	ds	1
  2383  00CD                     _DimmerLightsIntrIOC:	
  2384  00CD                     	ds	1
  2385  00CE                     _RFSW:	
  2386  00CE                     	ds	1
  2387  00CF                     _RSSI:	
  2388  00CF                     	ds	1
  2389  00D0                     _Rx_Length:	
  2390  00D0                     	ds	1
  2391  00D1                     _SPI0Buffer:	
  2392  00D1                     	ds	1
  2393  00D2                     _Tx_Length:	
  2394  00D2                     	ds	1
  2395  00D3                     _r_address:	
  2396  00D3                     	ds	1
  2397  00D4                     _r_data:	
  2398  00D4                     	ds	1
  2399  00D5                     _s_data:	
  2400  00D5                     	ds	1
  2401  00D6                     _Temp1:	
  2402  00D6                     	ds	14
  2403  00E4                     _VarErrLED:	
  2404  00E4                     	ds	4
  2405  00E8                     _Dimmer1:	
  2406  00E8                     	ds	3
  2407  00EB                     _RFSW1:	
  2408  00EB                     	ds	1
  2409  00EC                     _RFSW2:	
  2410  00EC                     	ds	1
  2411                           
  2412                           	psect	bssBANK2
  2413  0120                     __pbssBANK2:	
  2414  0120                     _RF_Data:	
  2415  0120                     	ds	21
  2416  0135                     _Timer0:	
  2417  0135                     	ds	8
  2418  013D                     _DimmerLights1:	
  2419  013D                     	ds	15
  2420  014C                     _DimmerLights2:	
  2421  014C                     	ds	15
  2422  015B                     _DlySw1:	
  2423  015B                     	ds	5
  2424  0160                     _DlySw2:	
  2425  0160                     	ds	5
  2426  0165                     _VarLED1:	
  2427  0165                     	ds	4
  2428  0169                     _VarLED2:	
  2429  0169                     	ds	4
  2430                           
  2431                           	psect	bssBANK3
  2432  01A0                     __pbssBANK3:	
  2433  01A0                     _Load1:	
  2434  01A0                     	ds	70
  2435  01E6                     _Sw1:	
  2436  01E6                     	ds	9
  2437                           
  2438                           	psect	bssBANK4
  2439  0220                     __pbssBANK4:	
  2440  0220                     _Memory:	
  2441  0220                     	ds	37
  2442  0245                     _Sw2:	
  2443  0245                     	ds	9
  2444                           
  2445                           	psect	dataBANK4
  2446  024E                     __pdataBANK4:	
  2447  024E                     __product:	
  2448  024E                     	ds	32
  2449                           
  2450                           	psect	clrtext
  2451  1A41                     clear_ram0:	
  2452                           ;	Called with FSR0 containing the base address, and
  2453                           ;	WREG with the size to clear
  2454                           
  2455  1A41  0064               	clrwdt	;clear the watchdog before getting into this loop
  2456  1A42                     clrloop0:	
  2457  1A42  0180               	clrf	0	;clear RAM location pointed to by FSR
  2458  1A43  3101               	addfsr 0,1
  2459  1A44  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2460  1A45  2A42               	goto	clrloop0	;have we reached the end yet?
  2461  1A46  3400               	retlw	0	;all done for this memory range, return
  2462                           
  2463                           	psect	inittext
  2464  1A3B                     init_ram:	
  2465  1A3B  00FE               	movwf	126
  2466  1A3C                     initloop:	
  2467  1A3C  0012               	moviw fsr0++
  2468  1A3D  001E               	movwi fsr1++
  2469  1A3E  0BFE               	decfsz	126,f
  2470  1A3F  2A3C               	goto	initloop
  2471  1A40  3400               	retlw	0
  2472                           
  2473                           	psect	cstackBANK5
  2474  02A0                     __pcstackBANK5:	
  2475  02A0                     ?_main:	
  2476  02A0                     main@argc:	
  2477                           ; 2 bytes @ 0x0
  2478                           
  2479                           
  2480                           ; 2 bytes @ 0x0
  2481  02A0                     	ds	2
  2482  02A2                     main@argv:	
  2483                           
  2484                           ; 2 bytes @ 0x2
  2485  02A2                     	ds	2
  2486                           
  2487                           	psect	cstackCOMMON
  2488  0076                     __pcstackCOMMON:	
  2489  0076                     ?_Timeout_Counter:	
  2490  0076                     ?_set_TimeoutCleared:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0076                     ?_CC2500_WriteByte:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0076                     ?_CC2500_WriteCommand:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0076                     ?_CC2500_ReadStatus:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0076                     ?_CC2500_ReadByte:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0076                     ?_CC2500_PowerRST:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0076                     ?_CC2500_InitSetREG:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0076                     ?_CC2500_InitPATable:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0076                     ?_CC2500_ClearTXFIFO:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0076                     ?_CC2500_ClearRXFIFO:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0076                     ?_CC2500_FrequencyCabr:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0076                     ?_CC2500_SIDLEMode:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0076                     ?_DlyOff_Initialization:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0076                     ?_DlyOff_Main:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0076                     ?_setTxData:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0076                     ?_setDimmerLights_Initialization:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0076                     ?_Dimmer_Initialization:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0076                     ?_setLoad_GO:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0076                     ?_setMemory_GO:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0076                     ?_setDimmerLights_Main:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0076                     ?_setDimmerLights_ERROR:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0076                     ?_setLoad_Count:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0076                     ?_setLED_Initialization:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0076                     ?_setLED_Main:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0076                     ?_Fosc_Set:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0076                     ?_IO_Set:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0076                     ?_TMR0_Set:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0076                     ?_ADC_Set:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0076                     ?_IOC_Set:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0076                     ?_WDT_Set:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0076                     ?_IOC_ISR:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0076                     ?_TMR0_ISR:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0076                     ?_Flash_Memory_Write:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0076                     ?_Flash_Memory_Modify:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0076                     ?_WDT_Clearing:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0076                     ?_myMain_Initialization:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0076                     ?_Temp_Initialization:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0076                     ?_Load_Initialization:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0076                     ?_Switch_Initialization:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0076                     ?_RF_Initialization:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0076                     ?_getLoad_AD:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0076                     ?_getTemp_AD:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0076                     ?_my_MainTime:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0076                     ?_Temp_Main:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0076                     ?_Load_Main:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0076                     ?_Switch_Main:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0076                     ?_RF_Main:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0076                     ?_setTemp_Enable:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0076                     ?_setLoad_Enable:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0076                     ?_setSw_Enable:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0076                     ?_setRF_Enable:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0076                     ?_setLoad_AH_AL_Restore:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0076                     ?_setLoad_Exceptions:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0076                     ?_setTemp_Initialization:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0076                     ?_setTemp_Main:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0076                     ?_setOverTemp_Exceptions:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0076                     ?_setRF_Initialization:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0076                     ?_setRF_Main:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0076                     ?_RF_RxDisable:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0076                     ?_getRxData:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0076                     ?_setLog_Code:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0076                     ?_setControl_Lights_Table:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0076                     ?_setRFSW_Control:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0076                     ?_setRFSW_AdjControl:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0076                     ?_setRF_DimmerValue:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0076                     ?_setSw_Initialization:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0076                     ?_setSw_Main:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0076                     ?_Sw_DimmerOnFunc:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0076                     ?_Sw_DimmerAdjFunc:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0076                     ?_Sw_DimmerOffFunc:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0076                     ?_Buzzer_Initialization:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0076                     ?_Buzzer_Main:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0076                     ?_CC2500_TxData:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0076                     ?_CC2500_RxData:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0076                     ?_CC2500_PowerOnInitial:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0076                     ?_DelayOffPointSelect:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0076                     ?_DelayOff_Initialization:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0076                     ?_DelayOff_Main:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0076                     ?_DimmerIntrIOCPointSelect:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0076                     ??_DimmerIntrIOCPointSelect:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0076                     ?_setDimmerLights_IntrIOC_GO:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0076                     ?_DimmerIntrPointSelect:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0076                     ??_DimmerIntrPointSelect:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0076                     ?_setDimmerLights_IntrControl:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0076                     ?_DimmerLightsPointSelect:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0076                     ?_DimmerLights_Initialization:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0076                     ?_DimmerLights_Close:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0076                     ?_DimmerLights_Main:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0076                     ?_DimmerLights_Exceptions:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0076                     ?_setDimmerLights_AdjRF:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0076                     ?_LedPointSelect:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0076                     ?_LED_Initialization:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0076                     ?_LED_Main:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0076                     ?_Mcu_Initialization:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0076                     ?_ISR:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0076                     ?_setDimmerReClock:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0076                     ?_Flash_Memory_Initialization:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0076                     ?_Flash_Memory_Main:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0076                     ?_Flash_Memory_Unlock:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0076                     ?_Flash_Memory_Erasing:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0076                     ?_WDT_Main:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0076                     ?_setRF_Learn:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0076                     ?_RfSWPointSelect:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0076                     ?_TouchPower:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0076                     ?_SwPointSelect:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0076                     ?i1_setLoad_StatusOff:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0076                     ?_DelayTimejudge:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0076                     ?_getDimmerLights_StatusFlag:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0076                     ?_getPercentValue:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0076                     ?_Flash_Memory_Read:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0076                     ?_getTemp_Safe:	
  2821                           ; 1 bytes @ 0x0
  2822                           
  2823  0076                     ?_setPercentValue:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826  0076                     ?_getLoad_Safe:	
  2827                           ; 1 bytes @ 0x0
  2828                           
  2829  0076                     i1setLoad_StatusOff@command:	
  2830                           ; 1 bytes @ 0x0
  2831                           
  2832                           
  2833                           ; 1 bytes @ 0x0
  2834  0076                     	ds	1
  2835  0077                     ??i1_setLoad_StatusOff:	
  2836  0077                     DimmerIntrIOCPointSelect@lights:	
  2837                           ; 0 bytes @ 0x1
  2838                           
  2839  0077                     DimmerIntrPointSelect@lights:	
  2840                           ; 1 bytes @ 0x1
  2841                           
  2842  0077                     i1setLoad_StatusOff@lights:	
  2843                           ; 1 bytes @ 0x1
  2844                           
  2845                           
  2846                           ; 1 bytes @ 0x1
  2847  0077                     	ds	1
  2848  0078                     ??_setDimmerLights_IntrIOC_GO:	
  2849  0078                     ??_setDimmerLights_IntrControl:	
  2850                           ; 0 bytes @ 0x2
  2851                           
  2852  0078                     setDimmerLights_IntrIOC_GO@lights:	
  2853                           ; 0 bytes @ 0x2
  2854                           
  2855                           
  2856                           ; 1 bytes @ 0x2
  2857  0078                     	ds	1
  2858  0079                     ??_IOC_ISR:	
  2859  0079                     ??_setDimmerReClock:	
  2860                           ; 0 bytes @ 0x3
  2861                           
  2862                           
  2863                           ; 0 bytes @ 0x3
  2864  0079                     	ds	1
  2865  007A                     setDimmerLights_IntrControl@lights:	
  2866                           
  2867                           ; 1 bytes @ 0x4
  2868  007A                     	ds	1
  2869  007B                     ??_TMR0_ISR:	
  2870  007B                     ??_ISR:	
  2871                           ; 0 bytes @ 0x5
  2872                           
  2873                           
  2874                           ; 0 bytes @ 0x5
  2875  007B                     	ds	1
  2876                           
  2877                           	psect	cstackBANK0
  2878  0020                     __pcstackBANK0:	
  2879  0020                     ??_Timeout_Counter:	
  2880  0020                     ??_set_TimeoutCleared:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_CC2500_WriteByte:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_CC2500_ReadByte:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ?_DelayTime_1us:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_setTxData:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ?_setLoad_StatusOff:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_Dimmer_Initialization:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_getDimmerLights_StatusFlag:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_setLoad_GO:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_setMemory_GO:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ??_setLoad_Count:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ?_setLoad_StatusOn:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_Fosc_Set:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ??_IO_Set:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ??_TMR0_Set:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_ADC_Set:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ??_IOC_Set:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ??_WDT_Set:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0020                     ??_Flash_Memory_Read:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0020                     ??_Flash_Memory_Write:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0020                     ??_WDT_Clearing:	
  2941                           ; 0 bytes @ 0x0
  2942                           
  2943  0020                     ??_myMain_Initialization:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0020                     ??_Temp_Initialization:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0020                     ??_setTemp_Enable:	
  2950                           ; 0 bytes @ 0x0
  2951                           
  2952  0020                     ??_setLoad_Enable:	
  2953                           ; 0 bytes @ 0x0
  2954                           
  2955  0020                     ??_setRF_Enable:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0020                     ??_setLoad_AH_AL_Restore:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0020                     ??_getTemp_Safe:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0020                     ??_setTemp_Initialization:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0020                     ??_setRF_Initialization:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_Buzzer_Initialization:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_Buzzer_Main:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_DelayOffPointSelect:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_DimmerLightsPointSelect:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_LedPointSelect:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_Flash_Memory_Unlock:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ??_Flash_Memory_Erasing:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ??_WDT_Main:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_getLoad_Safe:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ??_setRF_Learn:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_RfSWPointSelect:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_TouchPower:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ??_SwPointSelect:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ?___bmul:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ?_getBuz_GO:	
  3013                           ; 1 bytes @ 0x0
  3014                           
  3015  0020                     ?_getAD:	
  3016                           ; 2 bytes @ 0x0
  3017                           
  3018  0020                     ?___wmul:	
  3019                           ; 2 bytes @ 0x0
  3020                           
  3021  0020                     ?___awdiv:	
  3022                           ; 2 bytes @ 0x0
  3023                           
  3024  0020                     ?___lwdiv:	
  3025                           ; 2 bytes @ 0x0
  3026                           
  3027  0020                     ?___ftpack:	
  3028                           ; 2 bytes @ 0x0
  3029                           
  3030  0020                     LedPointSelect@led:	
  3031                           ; 3 bytes @ 0x0
  3032                           
  3033  0020                     getAD@adcon1:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036  0020                     setLoad_Enable@command:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039  0020                     setLoad_GO@command:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042  0020                     setLoad_StatusOn@command:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045  0020                     setLoad_StatusOff@command:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048  0020                     getLoad_Safe@result:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051  0020                     setTemp_Enable@command:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054  0020                     getTemp_Safe@result:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057  0020                     setRF_Learn@command:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060  0020                     setRF_Enable@command:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063  0020                     SwPointSelect@sw:	
  3064                           ; 1 bytes @ 0x0
  3065                           
  3066  0020                     ___bmul@multiplicand:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069  0020                     DelayTime_1us@count:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072  0020                     ___wmul@multiplier:	
  3073                           ; 2 bytes @ 0x0
  3074                           
  3075  0020                     ___awdiv@divisor:	
  3076                           ; 2 bytes @ 0x0
  3077                           
  3078  0020                     ___lwdiv@divisor:	
  3079                           ; 2 bytes @ 0x0
  3080                           
  3081  0020                     ___ftpack@arg:	
  3082                           ; 2 bytes @ 0x0
  3083                           
  3084                           
  3085                           ; 3 bytes @ 0x0
  3086  0020                     	ds	1
  3087  0021                     ?_setSw_Status:	
  3088  0021                     ??_setLoad_StatusOff:	
  3089                           ; 0 bytes @ 0x1
  3090                           
  3091  0021                     ?_setLED:	
  3092                           ; 0 bytes @ 0x1
  3093                           
  3094  0021                     ??_setLoad_StatusOn:	
  3095                           ; 0 bytes @ 0x1
  3096                           
  3097  0021                     ??_setLED_Main:	
  3098                           ; 0 bytes @ 0x1
  3099                           
  3100  0021                     ??_RF_Initialization:	
  3101                           ; 0 bytes @ 0x1
  3102                           
  3103  0021                     ??_setSw_Enable:	
  3104                           ; 0 bytes @ 0x1
  3105                           
  3106  0021                     ??_Mcu_Initialization:	
  3107                           ; 0 bytes @ 0x1
  3108                           
  3109  0021                     ??___bmul:	
  3110                           ; 0 bytes @ 0x1
  3111                           
  3112  0021                     CC2500_WriteByte@loop_a:	
  3113                           ; 0 bytes @ 0x1
  3114                           
  3115  0021                     CC2500_ReadByte@loop_b:	
  3116                           ; 1 bytes @ 0x1
  3117                           
  3118  0021                     DelayOffPointSelect@sw:	
  3119                           ; 1 bytes @ 0x1
  3120                           
  3121  0021                     DimmerLightsPointSelect@lights:	
  3122                           ; 1 bytes @ 0x1
  3123                           
  3124  0021                     getDimmerLights_StatusFlag@Status:	
  3125                           ; 1 bytes @ 0x1
  3126                           
  3127  0021                     setLED@command:	
  3128                           ; 1 bytes @ 0x1
  3129                           
  3130  0021                     Flash_Memory_Read@i:	
  3131                           ; 1 bytes @ 0x1
  3132                           
  3133  0021                     Flash_Memory_Write@i:	
  3134                           ; 1 bytes @ 0x1
  3135                           
  3136  0021                     setLoad_Count@command:	
  3137                           ; 1 bytes @ 0x1
  3138                           
  3139  0021                     setLoad_StatusOn@lights:	
  3140                           ; 1 bytes @ 0x1
  3141                           
  3142  0021                     setLoad_StatusOff@lights:	
  3143                           ; 1 bytes @ 0x1
  3144                           
  3145  0021                     setLoad_AH_AL_Restore@i:	
  3146                           ; 1 bytes @ 0x1
  3147                           
  3148  0021                     RfSWPointSelect@sw:	
  3149                           ; 1 bytes @ 0x1
  3150                           
  3151  0021                     setSw_Enable@command:	
  3152                           ; 1 bytes @ 0x1
  3153                           
  3154  0021                     setSw_Status@command:	
  3155                           ; 1 bytes @ 0x1
  3156                           
  3157                           
  3158                           ; 1 bytes @ 0x1
  3159  0021                     	ds	1
  3160  0022                     ??_CC2500_WriteCommand:	
  3161  0022                     ??_CC2500_ReadStatus:	
  3162                           ; 0 bytes @ 0x2
  3163                           
  3164  0022                     ??_DelayTime_1us:	
  3165                           ; 0 bytes @ 0x2
  3166                           
  3167  0022                     ?_CC2500_WriteREG:	
  3168                           ; 0 bytes @ 0x2
  3169                           
  3170  0022                     ??_DlyOff_Initialization:	
  3171                           ; 0 bytes @ 0x2
  3172                           
  3173  0022                     ??_setSw_Status:	
  3174                           ; 0 bytes @ 0x2
  3175                           
  3176  0022                     ?_setRFSW_Status:	
  3177                           ; 0 bytes @ 0x2
  3178                           
  3179  0022                     ?_setDimmerLights_Trigger:	
  3180                           ; 0 bytes @ 0x2
  3181                           
  3182  0022                     ?_setDimmerLights_Switch:	
  3183                           ; 0 bytes @ 0x2
  3184                           
  3185  0022                     ??_setDimmerLights_Initialization:	
  3186                           ; 0 bytes @ 0x2
  3187                           
  3188  0022                     ?_setDimmerLights_TriggerERROR:	
  3189                           ; 0 bytes @ 0x2
  3190                           
  3191  0022                     ??_setLED:	
  3192                           ; 0 bytes @ 0x2
  3193                           
  3194  0022                     ??_Load_Initialization:	
  3195                           ; 0 bytes @ 0x2
  3196                           
  3197  0022                     ??_getBuz_GO:	
  3198                           ; 0 bytes @ 0x2
  3199                           
  3200  0022                     ?_setDimmerLights_AdjGo:	
  3201                           ; 0 bytes @ 0x2
  3202                           
  3203  0022                     ?_setDimmerLights_TriggerAdj:	
  3204                           ; 0 bytes @ 0x2
  3205                           
  3206  0022                     ?_setDimmerLights_Clear:	
  3207                           ; 0 bytes @ 0x2
  3208                           
  3209  0022                     CC2500_WriteREG@value:	
  3210                           ; 0 bytes @ 0x2
  3211                           
  3212  0022                     DlyOff_Initialization@sw:	
  3213                           ; 1 bytes @ 0x2
  3214                           
  3215  0022                     _getDimmerLights_StatusFlag$2295:	
  3216                           ; 1 bytes @ 0x2
  3217                           
  3218  0022                     setDimmerLights_TriggerERROR@command:	
  3219                           ; 1 bytes @ 0x2
  3220                           
  3221  0022                     setDimmerLights_Switch@command:	
  3222                           ; 1 bytes @ 0x2
  3223                           
  3224  0022                     setDimmerLights_AdjGo@command:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227  0022                     setDimmerLights_Trigger@command:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230  0022                     setDimmerLights_TriggerAdj@command:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233  0022                     setDimmerLights_Clear@command:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236  0022                     setLED@led:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239  0022                     Flash_Memory_Read@address:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242  0022                     setMemory_GO@command:	
  3243                           ; 1 bytes @ 0x2
  3244                           
  3245  0022                     setRFSW_Status@command:	
  3246                           ; 1 bytes @ 0x2
  3247                           
  3248  0022                     setSw_Status@sw:	
  3249                           ; 1 bytes @ 0x2
  3250                           
  3251  0022                     ___bmul@product:	
  3252                           ; 1 bytes @ 0x2
  3253                           
  3254  0022                     DelayTime_1us@i:	
  3255                           ; 1 bytes @ 0x2
  3256                           
  3257  0022                     ___wmul@multiplicand:	
  3258                           ; 2 bytes @ 0x2
  3259                           
  3260  0022                     ___awdiv@dividend:	
  3261                           ; 2 bytes @ 0x2
  3262                           
  3263  0022                     ___lwdiv@dividend:	
  3264                           ; 2 bytes @ 0x2
  3265                           
  3266                           
  3267                           ; 2 bytes @ 0x2
  3268  0022                     	ds	1
  3269  0023                     ??_CC2500_WriteREG:	
  3270  0023                     ??_setRFSW_Status:	
  3271                           ; 0 bytes @ 0x3
  3272                           
  3273  0023                     ??_setDimmerLights_Trigger:	
  3274                           ; 0 bytes @ 0x3
  3275                           
  3276  0023                     ??_setDimmerLights_Switch:	
  3277                           ; 0 bytes @ 0x3
  3278                           
  3279  0023                     ?_setDimmerLights:	
  3280                           ; 0 bytes @ 0x3
  3281                           
  3282  0023                     ??_setDimmerLights_TriggerERROR:	
  3283                           ; 0 bytes @ 0x3
  3284                           
  3285  0023                     ??_setLED_Initialization:	
  3286                           ; 0 bytes @ 0x3
  3287                           
  3288  0023                     ??_setSw_Initialization:	
  3289                           ; 0 bytes @ 0x3
  3290                           
  3291  0023                     ??_DelayOff_Initialization:	
  3292                           ; 0 bytes @ 0x3
  3293                           
  3294  0023                     ??_DimmerLights_Close:	
  3295                           ; 0 bytes @ 0x3
  3296                           
  3297  0023                     ??_setDimmerLights_AdjGo:	
  3298                           ; 0 bytes @ 0x3
  3299                           
  3300  0023                     ??_setDimmerLights_TriggerAdj:	
  3301                           ; 0 bytes @ 0x3
  3302                           
  3303  0023                     ??_setDimmerLights_Clear:	
  3304                           ; 0 bytes @ 0x3
  3305                           
  3306  0023                     ??_getAD:	
  3307                           ; 0 bytes @ 0x3
  3308                           
  3309  0023                     CC2500_WriteCommand@command:	
  3310                           ; 0 bytes @ 0x3
  3311                           
  3312  0023                     CC2500_ReadStatus@status_addr:	
  3313                           ; 1 bytes @ 0x3
  3314                           
  3315  0023                     setDimmerLights_Initialization@lights:	
  3316                           ; 1 bytes @ 0x3
  3317                           
  3318  0023                     setDimmerLights_TriggerERROR@lights:	
  3319                           ; 1 bytes @ 0x3
  3320                           
  3321  0023                     setDimmerLights@status:	
  3322                           ; 1 bytes @ 0x3
  3323                           
  3324  0023                     setDimmerLights_Switch@lights:	
  3325                           ; 1 bytes @ 0x3
  3326                           
  3327  0023                     setDimmerLights_AdjGo@lights:	
  3328                           ; 1 bytes @ 0x3
  3329                           
  3330  0023                     setDimmerLights_Trigger@lights:	
  3331                           ; 1 bytes @ 0x3
  3332                           
  3333  0023                     setDimmerLights_TriggerAdj@lights:	
  3334                           ; 1 bytes @ 0x3
  3335                           
  3336  0023                     setDimmerLights_Clear@lights:	
  3337                           ; 1 bytes @ 0x3
  3338                           
  3339  0023                     setLED_Initialization@led:	
  3340                           ; 1 bytes @ 0x3
  3341                           
  3342  0023                     setLED_Main@led:	
  3343                           ; 1 bytes @ 0x3
  3344                           
  3345  0023                     getAD@adcon0:	
  3346                           ; 1 bytes @ 0x3
  3347                           
  3348  0023                     Flash_Memory_Read@ret:	
  3349                           ; 1 bytes @ 0x3
  3350                           
  3351  0023                     setRFSW_Status@sw:	
  3352                           ; 1 bytes @ 0x3
  3353                           
  3354  0023                     setSw_Initialization@sw:	
  3355                           ; 1 bytes @ 0x3
  3356                           
  3357  0023                     ___bmul@multiplier:	
  3358                           ; 1 bytes @ 0x3
  3359                           
  3360  0023                     ___ftpack@exp:	
  3361                           ; 1 bytes @ 0x3
  3362                           
  3363                           
  3364                           ; 1 bytes @ 0x3
  3365  0023                     	ds	1
  3366  0024                     ??_CC2500_ClearTXFIFO:	
  3367  0024                     ??_CC2500_ClearRXFIFO:	
  3368                           ; 0 bytes @ 0x4
  3369                           
  3370  0024                     ??_CC2500_SIDLEMode:	
  3371                           ; 0 bytes @ 0x4
  3372                           
  3373  0024                     ??_DelayTimejudge:	
  3374                           ; 0 bytes @ 0x4
  3375                           
  3376  0024                     ??_setDimmerLights:	
  3377                           ; 0 bytes @ 0x4
  3378                           
  3379  0024                     ??_setDimmerLights_ERROR:	
  3380                           ; 0 bytes @ 0x4
  3381                           
  3382  0024                     ??_Flash_Memory_Modify:	
  3383                           ; 0 bytes @ 0x4
  3384                           
  3385  0024                     ??_Switch_Initialization:	
  3386                           ; 0 bytes @ 0x4
  3387                           
  3388  0024                     ??_getLoad_AD:	
  3389                           ; 0 bytes @ 0x4
  3390                           
  3391  0024                     ??_getTemp_AD:	
  3392                           ; 0 bytes @ 0x4
  3393                           
  3394  0024                     ??_RF_RxDisable:	
  3395                           ; 0 bytes @ 0x4
  3396                           
  3397  0024                     ??_Sw_DimmerAdjFunc:	
  3398                           ; 0 bytes @ 0x4
  3399                           
  3400  0024                     ??_CC2500_TxData:	
  3401                           ; 0 bytes @ 0x4
  3402                           
  3403  0024                     ??_CC2500_RxData:	
  3404                           ; 0 bytes @ 0x4
  3405                           
  3406  0024                     ??_DimmerLights_Initialization:	
  3407                           ; 0 bytes @ 0x4
  3408                           
  3409  0024                     ??_LED_Initialization:	
  3410                           ; 0 bytes @ 0x4
  3411                           
  3412  0024                     ??_LED_Main:	
  3413                           ; 0 bytes @ 0x4
  3414                           
  3415  0024                     ??___wmul:	
  3416                           ; 0 bytes @ 0x4
  3417                           
  3418  0024                     ??___awdiv:	
  3419                           ; 0 bytes @ 0x4
  3420                           
  3421  0024                     ??___lwdiv:	
  3422                           ; 0 bytes @ 0x4
  3423                           
  3424  0024                     CC2500_WriteREG@w_addr:	
  3425                           ; 0 bytes @ 0x4
  3426                           
  3427  0024                     Sw_DimmerAdjFunc@Idle:	
  3428                           ; 1 bytes @ 0x4
  3429                           
  3430  0024                     ___ftpack@sign:	
  3431                           ; 1 bytes @ 0x4
  3432                           
  3433  0024                     getBuz_GO@i:	
  3434                           ; 1 bytes @ 0x4
  3435                           
  3436  0024                     DelayTime_1us@j:	
  3437                           ; 2 bytes @ 0x4
  3438                           
  3439  0024                     ___wmul@product:	
  3440                           ; 2 bytes @ 0x4
  3441                           
  3442                           
  3443                           ; 2 bytes @ 0x4
  3444  0024                     	ds	1
  3445  0025                     ??_CC2500_InitSetREG:	
  3446  0025                     ??_CC2500_InitPATable:	
  3447                           ; 0 bytes @ 0x5
  3448                           
  3449  0025                     ??___ftpack:	
  3450                           ; 0 bytes @ 0x5
  3451                           
  3452  0025                     CC2500_TxData@loop_e:	
  3453                           ; 0 bytes @ 0x5
  3454                           
  3455  0025                     CC2500_RxData@loop_f:	
  3456                           ; 1 bytes @ 0x5
  3457                           
  3458  0025                     setDimmerLights_ERROR@lights:	
  3459                           ; 1 bytes @ 0x5
  3460                           
  3461  0025                     setDimmerLights@lights:	
  3462                           ; 1 bytes @ 0x5
  3463                           
  3464  0025                     Flash_Memory_Modify@i:	
  3465                           ; 1 bytes @ 0x5
  3466                           
  3467  0025                     getTemp_AD@channel:	
  3468                           ; 1 bytes @ 0x5
  3469                           
  3470  0025                     Sw_DimmerAdjFunc@sw:	
  3471                           ; 1 bytes @ 0x5
  3472                           
  3473  0025                     ___awdiv@counter:	
  3474                           ; 1 bytes @ 0x5
  3475                           
  3476  0025                     ___lwdiv@counter:	
  3477                           ; 1 bytes @ 0x5
  3478                           
  3479                           
  3480                           ; 1 bytes @ 0x5
  3481  0025                     	ds	1
  3482  0026                     ??_CC2500_PowerRST:	
  3483  0026                     ??_CC2500_FrequencyCabr:	
  3484                           ; 0 bytes @ 0x6
  3485                           
  3486  0026                     ??_Flash_Memory_Main:	
  3487                           ; 0 bytes @ 0x6
  3488                           
  3489  0026                     CC2500_InitSetREG@temp1:	
  3490                           ; 0 bytes @ 0x6
  3491                           
  3492  0026                     CC2500_InitPATable@temp:	
  3493                           ; 1 bytes @ 0x6
  3494                           
  3495  0026                     DelayTimejudge@i:	
  3496                           ; 1 bytes @ 0x6
  3497                           
  3498  0026                     getLoad_AD@channel:	
  3499                           ; 1 bytes @ 0x6
  3500                           
  3501  0026                     ___awdiv@sign:	
  3502                           ; 1 bytes @ 0x6
  3503                           
  3504  0026                     ___lwdiv@quotient:	
  3505                           ; 1 bytes @ 0x6
  3506                           
  3507                           
  3508                           ; 2 bytes @ 0x6
  3509  0026                     	ds	1
  3510  0027                     CC2500_InitSetREG@temp2:	
  3511  0027                     CC2500_InitPATable@loop_d:	
  3512                           ; 1 bytes @ 0x7
  3513                           
  3514  0027                     DelayTimejudge@j:	
  3515                           ; 1 bytes @ 0x7
  3516                           
  3517  0027                     getLoad_AD@j:	
  3518                           ; 1 bytes @ 0x7
  3519                           
  3520  0027                     ___awdiv@quotient:	
  3521                           ; 1 bytes @ 0x7
  3522                           
  3523                           
  3524                           ; 2 bytes @ 0x7
  3525  0027                     	ds	1
  3526  0028                     ?___awtoft:	
  3527  0028                     CC2500_InitSetREG@loop_c:	
  3528                           ; 3 bytes @ 0x8
  3529                           
  3530  0028                     DelayTimejudge@k:	
  3531                           ; 1 bytes @ 0x8
  3532                           
  3533  0028                     getLoad_AD@i:	
  3534                           ; 1 bytes @ 0x8
  3535                           
  3536  0028                     ___awtoft@c:	
  3537                           ; 1 bytes @ 0x8
  3538                           
  3539                           
  3540                           ; 2 bytes @ 0x8
  3541  0028                     	ds	1
  3542  0029                     ?_setBuz:	
  3543  0029                     ??_CC2500_PowerOnInitial:	
  3544                           ; 0 bytes @ 0x9
  3545                           
  3546  0029                     DelayTimejudge@value:	
  3547                           ; 0 bytes @ 0x9
  3548                           
  3549  0029                     setBuz@time:	
  3550                           ; 1 bytes @ 0x9
  3551                           
  3552                           
  3553                           ; 2 bytes @ 0x9
  3554  0029                     	ds	1
  3555  002A                     ?_setDelayOff_GO:	
  3556  002A                     setDelayOff_GO@command:	
  3557                           ; 0 bytes @ 0xA
  3558                           
  3559                           
  3560                           ; 1 bytes @ 0xA
  3561  002A                     	ds	1
  3562  002B                     ??_setBuz:	
  3563  002B                     ??___awtoft:	
  3564                           ; 0 bytes @ 0xB
  3565                           
  3566  002B                     setDelayOff_GO@value:	
  3567                           ; 0 bytes @ 0xB
  3568                           
  3569                           
  3570                           ; 1 bytes @ 0xB
  3571  002B                     	ds	1
  3572  002C                     ??_setDelayOff_GO:	
  3573  002C                     setBuz@count:	
  3574                           ; 0 bytes @ 0xC
  3575                           
  3576                           
  3577                           ; 1 bytes @ 0xC
  3578  002C                     	ds	1
  3579  002D                     ??_my_MainTime:	
  3580  002D                     ??_setLog_Code:	
  3581                           ; 0 bytes @ 0xD
  3582                           
  3583  002D                     ??_DimmerLights_Exceptions:	
  3584                           ; 0 bytes @ 0xD
  3585                           
  3586  002D                     DimmerLights_Exceptions@status:	
  3587                           ; 0 bytes @ 0xD
  3588                           
  3589  002D                     ___awtoft@sign:	
  3590                           ; 1 bytes @ 0xD
  3591                           
  3592                           
  3593                           ; 1 bytes @ 0xD
  3594  002D                     	ds	1
  3595  002E                     ??_setLoad_Exceptions:	
  3596  002E                     ??_setOverTemp_Exceptions:	
  3597                           ; 0 bytes @ 0xE
  3598                           
  3599  002E                     ?___ftdiv:	
  3600                           ; 0 bytes @ 0xE
  3601                           
  3602  002E                     ?___ftmul:	
  3603                           ; 3 bytes @ 0xE
  3604                           
  3605  002E                     setDelayOff_GO@sw:	
  3606                           ; 3 bytes @ 0xE
  3607                           
  3608  002E                     ___ftdiv@f2:	
  3609                           ; 1 bytes @ 0xE
  3610                           
  3611  002E                     ___ftmul@f1:	
  3612                           ; 3 bytes @ 0xE
  3613                           
  3614                           
  3615                           ; 3 bytes @ 0xE
  3616  002E                     	ds	1
  3617  002F                     setLoad_Exceptions@i:	
  3618  002F                     setOverTemp_Exceptions@i:	
  3619                           ; 1 bytes @ 0xF
  3620                           
  3621                           
  3622                           ; 1 bytes @ 0xF
  3623  002F                     	ds	1
  3624  0030                     setLoad_Exceptions@command:	
  3625  0030                     setOverTemp_Exceptions@command:	
  3626                           ; 1 bytes @ 0x10
  3627                           
  3628                           
  3629                           ; 1 bytes @ 0x10
  3630  0030                     	ds	1
  3631  0031                     ??_Load_Main:	
  3632  0031                     ??_setTemp_Main:	
  3633                           ; 0 bytes @ 0x11
  3634                           
  3635  0031                     ___ftdiv@f1:	
  3636                           ; 0 bytes @ 0x11
  3637                           
  3638  0031                     ___ftmul@f2:	
  3639                           ; 3 bytes @ 0x11
  3640                           
  3641                           
  3642                           ; 3 bytes @ 0x11
  3643  0031                     	ds	1
  3644  0032                     ??_Temp_Main:	
  3645                           
  3646                           ; 0 bytes @ 0x12
  3647  0032                     	ds	1
  3648  0033                     Load_Main@i:	
  3649                           
  3650                           ; 1 bytes @ 0x13
  3651  0033                     	ds	1
  3652  0034                     ??___ftdiv:	
  3653  0034                     ??___ftmul:	
  3654                           ; 0 bytes @ 0x14
  3655                           
  3656                           
  3657                           ; 0 bytes @ 0x14
  3658  0034                     	ds	4
  3659  0038                     ___ftdiv@cntr:	
  3660  0038                     ___ftmul@exp:	
  3661                           ; 1 bytes @ 0x18
  3662                           
  3663                           
  3664                           ; 1 bytes @ 0x18
  3665  0038                     	ds	1
  3666  0039                     ___ftdiv@f3:	
  3667  0039                     ___ftmul@f3_as_product:	
  3668                           ; 3 bytes @ 0x19
  3669                           
  3670                           
  3671                           ; 3 bytes @ 0x19
  3672  0039                     	ds	3
  3673  003C                     ___ftdiv@exp:	
  3674  003C                     ___ftmul@cntr:	
  3675                           ; 1 bytes @ 0x1C
  3676                           
  3677                           
  3678                           ; 1 bytes @ 0x1C
  3679  003C                     	ds	1
  3680  003D                     ___ftdiv@sign:	
  3681  003D                     ___ftmul@sign:	
  3682                           ; 1 bytes @ 0x1D
  3683                           
  3684                           
  3685                           ; 1 bytes @ 0x1D
  3686  003D                     	ds	1
  3687  003E                     ?___ftadd:	
  3688  003E                     ___ftadd@f1:	
  3689                           ; 3 bytes @ 0x1E
  3690                           
  3691                           
  3692                           ; 3 bytes @ 0x1E
  3693  003E                     	ds	3
  3694  0041                     ___ftadd@f2:	
  3695                           
  3696                           ; 3 bytes @ 0x21
  3697  0041                     	ds	3
  3698  0044                     ??___ftadd:	
  3699                           
  3700                           ; 0 bytes @ 0x24
  3701  0044                     	ds	4
  3702  0048                     ___ftadd@sign:	
  3703                           
  3704                           ; 1 bytes @ 0x28
  3705  0048                     	ds	1
  3706  0049                     ___ftadd@exp2:	
  3707                           
  3708                           ; 1 bytes @ 0x29
  3709  0049                     	ds	1
  3710  004A                     ___ftadd@exp1:	
  3711                           
  3712                           ; 1 bytes @ 0x2A
  3713  004A                     	ds	1
  3714  004B                     ?___fttol:	
  3715  004B                     ___fttol@f1:	
  3716                           ; 4 bytes @ 0x2B
  3717                           
  3718                           
  3719                           ; 3 bytes @ 0x2B
  3720  004B                     	ds	4
  3721  004F                     ??___fttol:	
  3722                           
  3723                           ; 0 bytes @ 0x2F
  3724  004F                     	ds	4
  3725  0053                     ___fttol@sign1:	
  3726                           
  3727                           ; 1 bytes @ 0x33
  3728  0053                     	ds	1
  3729  0054                     ___fttol@lval:	
  3730                           
  3731                           ; 4 bytes @ 0x34
  3732  0054                     	ds	4
  3733  0058                     ___fttol@exp1:	
  3734                           
  3735                           ; 1 bytes @ 0x38
  3736  0058                     	ds	1
  3737  0059                     ??_getPercentValue:	
  3738  0059                     ??_setPercentValue:	
  3739                           ; 0 bytes @ 0x39
  3740                           
  3741  0059                     setPercentValue@value:	
  3742                           ; 0 bytes @ 0x39
  3743                           
  3744                           
  3745                           ; 1 bytes @ 0x39
  3746  0059                     	ds	1
  3747  005A                     setPercentValue@i:	
  3748                           
  3749                           ; 3 bytes @ 0x3A
  3750  005A                     	ds	1
  3751  005B                     getPercentValue@value:	
  3752                           
  3753                           ; 1 bytes @ 0x3B
  3754  005B                     	ds	1
  3755  005C                     getPercentValue@i:	
  3756                           
  3757                           ; 3 bytes @ 0x3C
  3758  005C                     	ds	1
  3759  005D                     ?_setRF_DimmerLights:	
  3760  005D                     ??_Flash_Memory_Initialization:	
  3761                           ; 0 bytes @ 0x3D
  3762                           
  3763  005D                     setRF_DimmerLights@on:	
  3764                           ; 0 bytes @ 0x3D
  3765                           
  3766                           
  3767                           ; 1 bytes @ 0x3D
  3768  005D                     	ds	1
  3769  005E                     ??_setRF_DimmerLights:	
  3770  005E                     Flash_Memory_Initialization@i:	
  3771                           ; 0 bytes @ 0x3E
  3772                           
  3773                           
  3774                           ; 1 bytes @ 0x3E
  3775  005E                     	ds	1
  3776  005F                     ??_setDimmerLights_AdjRF:	
  3777                           
  3778                           ; 0 bytes @ 0x3F
  3779  005F                     	ds	1
  3780  0060                     setDimmerLights_AdjRF@lights:	
  3781  0060                     setRF_DimmerLights@status:	
  3782                           ; 1 bytes @ 0x40
  3783                           
  3784                           
  3785                           ; 1 bytes @ 0x40
  3786  0060                     	ds	1
  3787  0061                     ??_setRF_DimmerValue:	
  3788  0061                     setRF_DimmerLights@lights:	
  3789                           ; 0 bytes @ 0x41
  3790                           
  3791                           
  3792                           ; 1 bytes @ 0x41
  3793  0061                     	ds	1
  3794  0062                     ??_DlyOff_Main:	
  3795  0062                     ?_setDimmerLights_Adj:	
  3796                           ; 0 bytes @ 0x42
  3797                           
  3798  0062                     ??_setRFSW_Control:	
  3799                           ; 0 bytes @ 0x42
  3800                           
  3801  0062                     ??_Sw_DimmerOnFunc:	
  3802                           ; 0 bytes @ 0x42
  3803                           
  3804  0062                     ??_Sw_DimmerOffFunc:	
  3805                           ; 0 bytes @ 0x42
  3806                           
  3807  0062                     setDimmerLights_Adj@status:	
  3808                           ; 0 bytes @ 0x42
  3809                           
  3810  0062                     Sw_DimmerOnFunc@Idle:	
  3811                           ; 1 bytes @ 0x42
  3812                           
  3813                           
  3814                           ; 1 bytes @ 0x42
  3815  0062                     	ds	1
  3816  0063                     ??_setDimmerLights_Adj:	
  3817  0063                     setRFSW_Control@sw:	
  3818                           ; 0 bytes @ 0x43
  3819                           
  3820  0063                     setRF_DimmerValue@lights:	
  3821                           ; 1 bytes @ 0x43
  3822                           
  3823  0063                     Sw_DimmerOnFunc@sw:	
  3824                           ; 1 bytes @ 0x43
  3825                           
  3826                           
  3827                           ; 1 bytes @ 0x43
  3828  0063                     	ds	1
  3829  0064                     ??_setRFSW_AdjControl:	
  3830  0064                     DlyOff_Main@sw:	
  3831                           ; 0 bytes @ 0x44
  3832                           
  3833  0064                     setDimmerLights_Adj@lights:	
  3834                           ; 1 bytes @ 0x44
  3835                           
  3836  0064                     Sw_DimmerOffFunc@sw:	
  3837                           ; 1 bytes @ 0x44
  3838                           
  3839                           
  3840                           ; 1 bytes @ 0x44
  3841  0064                     	ds	1
  3842  0065                     ??_setDimmerLights_Main:	
  3843  0065                     ??_setSw_Main:	
  3844                           ; 0 bytes @ 0x45
  3845                           
  3846  0065                     ??_DelayOff_Main:	
  3847                           ; 0 bytes @ 0x45
  3848                           
  3849  0065                     setDimmerLights_Main@clear:	
  3850                           ; 0 bytes @ 0x45
  3851                           
  3852                           
  3853                           ; 1 bytes @ 0x45
  3854  0065                     	ds	1
  3855  0066                     setDimmerLights_Main@lights:	
  3856  0066                     setRFSW_AdjControl@sw:	
  3857                           ; 1 bytes @ 0x46
  3858                           
  3859                           
  3860                           ; 1 bytes @ 0x46
  3861  0066                     	ds	1
  3862  0067                     ??_setRF_Main:	
  3863  0067                     ??_getRxData:	
  3864                           ; 0 bytes @ 0x47
  3865                           
  3866  0067                     ??_setControl_Lights_Table:	
  3867                           ; 0 bytes @ 0x47
  3868                           
  3869  0067                     ??_DimmerLights_Main:	
  3870                           ; 0 bytes @ 0x47
  3871                           
  3872  0067                     _setSw_Main$6143:	
  3873                           ; 0 bytes @ 0x47
  3874                           
  3875                           
  3876                           ; 1 bytes @ 0x47
  3877  0067                     	ds	1
  3878  0068                     _setSw_Main$6144:	
  3879                           
  3880                           ; 1 bytes @ 0x48
  3881  0068                     	ds	1
  3882  0069                     setSw_Main@sw:	
  3883                           
  3884                           ; 1 bytes @ 0x49
  3885  0069                     	ds	1
  3886  006A                     ??_Switch_Main:	
  3887                           
  3888                           ; 0 bytes @ 0x4A
  3889  006A                     	ds	1
  3890  006B                     _setRF_Main$5153:	
  3891                           
  3892                           ; 1 bytes @ 0x4B
  3893  006B                     	ds	1
  3894  006C                     ??_RF_Main:	
  3895  006C                     ??_main:	
  3896                           ; 0 bytes @ 0x4C
  3897                           
  3898                           
  3899                           	psect	maintext
  3900  1566                     __pmaintext:	
  3901                           ; 0 bytes @ 0x4C
  3902 ;;
  3903 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3904 ;;
  3905 ;; *************** function _main *****************
  3906 ;; Defined at:
  3907 ;;		line 7 in file "../src/Main_B1.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;  argc            2    0[BANK5 ] int 
  3910 ;;  argv            2    2[BANK5 ] PTR PTR unsigned char 
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;		None
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  2    0[BANK5 ] int 
  3915 ;; Registers used:
  3916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : 17F/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3922 ;;      Params:         0       0       0       0       0       0       4       0       0       0       0       0       
      +0       0
  3923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3925 ;;      Totals:         0       0       0       0       0       0       4       0       0       0       0       0       
      +0       0
  3926 ;;Total ram usage:        4 bytes
  3927 ;; Hardware stack levels required when called:   15
  3928 ;; This function calls:
  3929 ;;		_Buzzer_Initialization
  3930 ;;		_Buzzer_Main
  3931 ;;		_CC2500_PowerOnInitial
  3932 ;;		_DelayOff_Initialization
  3933 ;;		_DelayOff_Main
  3934 ;;		_DimmerLights_Initialization
  3935 ;;		_DimmerLights_Main
  3936 ;;		_Flash_Memory_Initialization
  3937 ;;		_Flash_Memory_Main
  3938 ;;		_LED_Initialization
  3939 ;;		_LED_Main
  3940 ;;		_Load_Initialization
  3941 ;;		_Load_Main
  3942 ;;		_Mcu_Initialization
  3943 ;;		_RF_Initialization
  3944 ;;		_RF_Main
  3945 ;;		_Switch_Initialization
  3946 ;;		_Switch_Main
  3947 ;;		_Temp_Initialization
  3948 ;;		_Temp_Main
  3949 ;;		_WDT_Main
  3950 ;;		_getLoad_AD
  3951 ;;		_getTemp_AD
  3952 ;;		_myMain_Initialization
  3953 ;;		_my_MainTime
  3954 ;; This function is called by:
  3955 ;;		Startup code after reset
  3956 ;; This function uses a non-reentrant model
  3957 ;;
  3958                           
  3959                           
  3960                           ;psect for function _main
  3961  1566                     _main:	
  3962                           
  3963                           ;Main_B1.c: 8: myMain_Initialization();
  3964                           
  3965                           ;incstack = 0
  3966                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3967  1566  319B  2386  3195   	fcall	_myMain_Initialization
  3968                           
  3969                           ;Main_B1.c: 9: Mcu_Initialization();
  3970  1569  319C  242A  3195   	fcall	_Mcu_Initialization
  3971                           
  3972                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3973  156C  3186  268C  3195   	fcall	_Flash_Memory_Initialization
  3974                           
  3975                           ;Main_B1.c: 11: LED_Initialization();
  3976  156F  319A  22F1  3195   	fcall	_LED_Initialization
  3977                           
  3978                           ;Main_B1.c: 12: Buzzer_Initialization();
  3979  1572  319A  2210  3195   	fcall	_Buzzer_Initialization
  3980                           
  3981                           ;Main_B1.c: 14: ;;
  3982                           ;Main_B1.c: 15: Temp_Initialization();
  3983  1575  319A  221C  3195   	fcall	_Temp_Initialization
  3984                           
  3985                           ;Main_B1.c: 16: Load_Initialization();
  3986  1578  319A  2230  3195   	fcall	_Load_Initialization
  3987                           
  3988                           ;Main_B1.c: 17: ;;
  3989                           ;Main_B1.c: 18: DelayOff_Initialization();
  3990  157B  319A  2256  3195   	fcall	_DelayOff_Initialization
  3991                           
  3992                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3993  157E  319D  2518  3195   	fcall	_DimmerLights_Initialization
  3994                           
  3995                           ;Main_B1.c: 21: ;;
  3996                           ;Main_B1.c: 22: ;;
  3997                           ;Main_B1.c: 23: ;;
  3998                           ;Main_B1.c: 24: Switch_Initialization();
  3999  1581  319B  2330  3195   	fcall	_Switch_Initialization
  4000                           
  4001                           ;Main_B1.c: 25: RF_Initialization();
  4002  1584  319A  2213  3195   	fcall	_RF_Initialization
  4003                           
  4004                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4005  1587  319C  24D7  3195   	fcall	_CC2500_PowerOnInitial
  4006  158A                     l10580:	
  4007                           ;Main_B1.c: 27: ;;
  4008                           ;Main_B1.c: 30: while (1) {
  4009                           
  4010                           
  4011                           ;Main_B1.c: 32: if (myMain.PowerON) {
  4012  158A  0021               	movlb	1	; select bank1
  4013  158B  1C20               	btfss	_myMain^(0+128),0
  4014  158C  2D95               	goto	l10584
  4015                           
  4016                           ;Main_B1.c: 34: ;;
  4017                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4018  158D  3005               	movlw	5
  4019  158E  318A  226D  3195   	fcall	_getLoad_AD
  4020                           
  4021                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4022  1591  3009               	movlw	9
  4023  1592  3191  215C  3195   	fcall	_getTemp_AD
  4024  1595                     l10584:	
  4025                           ;Main_B1.c: 46: ;;
  4026                           
  4027                           
  4028                           ;Main_B1.c: 61: }
  4029                           ;Main_B1.c: 64: if (myMain.T0_Timerout) {
  4030  1595  0021               	movlb	1	; select bank1
  4031  1596  1CA0               	btfss	_myMain^(0+128),1
  4032  1597  2D8A               	goto	l10580
  4033                           
  4034                           ;Main_B1.c: 65: myMain.T0_Timerout = 0;
  4035  1598  10A0               	bcf	_myMain^(0+128),1
  4036                           
  4037                           ;Main_B1.c: 66: my_MainTime();
  4038  1599  3194  2426  3195   	fcall	_my_MainTime
  4039                           
  4040                           ;Main_B1.c: 67: WDT_Main();
  4041  159C  319C  244E  3195   	fcall	_WDT_Main
  4042                           
  4043                           ;Main_B1.c: 68: ;;
  4044                           ;Main_B1.c: 69: ;;
  4045                           ;Main_B1.c: 70: if (myMain.PowerON) {
  4046  159F  0021               	movlb	1	; select bank1
  4047  15A0  1C20               	btfss	_myMain^(0+128),0
  4048  15A1  2D8A               	goto	l10580
  4049                           
  4050                           ;Main_B1.c: 71: Flash_Memory_Main();
  4051  15A2  319E  267A  3195   	fcall	_Flash_Memory_Main
  4052                           
  4053                           ;Main_B1.c: 73: LED_Main();
  4054  15A5  319A  22FD  3195   	fcall	_LED_Main
  4055                           
  4056                           ;Main_B1.c: 74: Buzzer_Main();
  4057  15A8  3193  2392  3195   	fcall	_Buzzer_Main
  4058                           
  4059                           ;Main_B1.c: 76: ;;
  4060                           ;Main_B1.c: 77: Temp_Main();
  4061  15AB  3188  2000  3195   	fcall	_Temp_Main
  4062                           
  4063                           ;Main_B1.c: 78: Load_Main();
  4064  15AE  3182  220C  3195   	fcall	_Load_Main
  4065                           
  4066                           ;Main_B1.c: 79: ;;
  4067                           ;Main_B1.c: 81: ;;
  4068                           ;Main_B1.c: 82: DimmerLights_Main();
  4069  15B1  319A  22C3  3195   	fcall	_DimmerLights_Main
  4070                           
  4071                           ;Main_B1.c: 83: Switch_Main();
  4072  15B4  319A  228E  3195   	fcall	_Switch_Main
  4073                           
  4074                           ;Main_B1.c: 84: ;;
  4075                           ;Main_B1.c: 85: ;;
  4076                           ;Main_B1.c: 87: RF_Main();
  4077  15B7  319A  2216  3195   	fcall	_RF_Main
  4078                           
  4079                           ;Main_B1.c: 88: DelayOff_Main();
  4080  15BA  319A  225E  3195   	fcall	_DelayOff_Main
  4081                           
  4082                           ;Main_B1.c: 89: ;;
  4083  15BD  2D8A               	goto	l10580
  4084  15BE                     __end_of_main:	
  4085                           ;Main_B1.c: 90: }
  4086                           ;Main_B1.c: 91: }
  4087                           ;Main_B1.c: 109: }
  4088                           ;Main_B1.c: 110: return (0);
  4089                           ;	Return value of _main is never used
  4090                           
  4091                           
  4092                           	psect	text1
  4093  1426                     __ptext1:	
  4094 ;; *************** function _my_MainTime *****************
  4095 ;; Defined at:
  4096 ;;		line 127 in file "../src/Main_B1.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;		None
  4099 ;; Auto vars:     Size  Location     Type
  4100 ;;		None
  4101 ;; Return value:  Size  Location     Type
  4102 ;;		None               void
  4103 ;; Registers used:
  4104 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4105 ;; Tracked objects:
  4106 ;;		On entry : 0/0
  4107 ;;		On exit  : 0/0
  4108 ;;		Unchanged: 0/0
  4109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4114 ;;Total ram usage:        0 bytes
  4115 ;; Hardware stack levels used:    1
  4116 ;; Hardware stack levels required when called:    7
  4117 ;; This function calls:
  4118 ;;		_setBuz
  4119 ;;		_setLoad_Enable
  4120 ;;		_setRF_Enable
  4121 ;;		_setSw_Enable
  4122 ;;		_setTemp_Enable
  4123 ;; This function is called by:
  4124 ;;		_main
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           
  4129                           ;psect for function _my_MainTime
  4130  1426                     _my_MainTime:	
  4131                           
  4132                           ;Main_B1.c: 129: if (myMain.PowerON == 0) {
  4133                           
  4134                           ;incstack = 0
  4135                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4136  1426  0021               	movlb	1	; select bank1
  4137  1427  1820               	btfsc	_myMain^(0+128),0
  4138  1428  2C57               	goto	l10400
  4139                           
  4140                           ;Main_B1.c: 130: myMain.PowerCount++;
  4141  1429  3001               	movlw	1
  4142  142A  07A1               	addwf	(_myMain^(0+128)+1),f
  4143  142B  3000               	movlw	0
  4144  142C  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4145                           
  4146                           ;Main_B1.c: 131: if (myMain.PowerCount == 150)
  4147  142D  3001               	movlw	1
  4148  142E  3EA0               	addlw	_myMain& (0+255)
  4149  142F  0086               	movwf	6
  4150  1430  0187               	clrf	7
  4151  1431  3F40               	moviw [0]fsr1
  4152  1432  3A96               	xorlw	150
  4153  1433  1D03               	skipz
  4154  1434  2C37               	goto	u11235
  4155  1435  3F41               	moviw [1]fsr1
  4156  1436  3A00               	xorlw	0
  4157  1437                     u11235:	
  4158  1437  1D03               	skipz
  4159  1438  0008               	return
  4160                           
  4161                           ;Main_B1.c: 132: {
  4162                           ;Main_B1.c: 133: myMain.PowerCount = 0;
  4163  1439  01A1               	clrf	(_myMain^(0+128)+1)
  4164  143A  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4165                           
  4166                           ;Main_B1.c: 134: myMain.PowerON = 1;
  4167  143B  1420               	bsf	_myMain^(0+128),0
  4168                           
  4169                           ;Main_B1.c: 137: setTemp_Enable(1);
  4170  143C  3001               	movlw	1
  4171  143D  319A  229E  3194   	fcall	_setTemp_Enable
  4172                           
  4173                           ;Main_B1.c: 141: setLoad_Enable(1);
  4174  1440  3001               	movlw	1
  4175  1441  319A  22AF  3194   	fcall	_setLoad_Enable
  4176                           
  4177                           ;Main_B1.c: 147: setBuz(3, 50);
  4178  1444  3032               	movlw	50
  4179  1445  0020               	movlb	0	; select bank0
  4180  1446  00A9               	movwf	setBuz@time
  4181  1447  3000               	movlw	0
  4182  1448  00AA               	movwf	setBuz@time+1
  4183  1449  3003               	movlw	3
  4184  144A  3195  25BE  3194   	fcall	_setBuz
  4185                           
  4186                           ;Main_B1.c: 148: myMain.SelfTest = 1;
  4187  144D  0021               	movlb	1	; select bank1
  4188  144E  1720               	bsf	_myMain^(0+128),6
  4189                           
  4190                           ;Main_B1.c: 150: setSw_Enable(1);
  4191  144F  3001               	movlw	1
  4192  1450  319D  25C8  3194   	fcall	_setSw_Enable
  4193                           
  4194                           ;Main_B1.c: 153: setRF_Enable(1);
  4195  1453  3001               	movlw	1
  4196  1454  319B  234B         	fcall	_setRF_Enable
  4197                           
  4198                           ;Main_B1.c: 157: }
  4199                           ;Main_B1.c: 158: } else {
  4200  1456  0008               	return
  4201  1457                     l10400:	
  4202                           
  4203                           ;Main_B1.c: 166: myMain.Count1++;
  4204  1457  3001               	movlw	1
  4205  1458  0021               	movlb	1	; select bank1
  4206  1459  07A5               	addwf	(_myMain^(0+128)+5),f
  4207  145A  3000               	movlw	0
  4208  145B  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4209                           
  4210                           ;Main_B1.c: 167: if (myMain.Count1 == 100)
  4211  145C  3005               	movlw	5
  4212  145D  3EA0               	addlw	_myMain& (0+255)
  4213  145E  0086               	movwf	6
  4214  145F  0187               	clrf	7
  4215  1460  3F40               	moviw [0]fsr1
  4216  1461  3A64               	xorlw	100
  4217  1462  1D03               	skipz
  4218  1463  2C66               	goto	u11245
  4219  1464  3F41               	moviw [1]fsr1
  4220  1465  3A00               	xorlw	0
  4221  1466                     u11245:	
  4222  1466  1D03               	skipz
  4223  1467  0008               	return
  4224                           
  4225                           ;Main_B1.c: 168: {
  4226                           ;Main_B1.c: 169: myMain.Count1 = 0;
  4227  1468  01A5               	clrf	(_myMain^(0+128)+5)
  4228  1469  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4229                           
  4230                           ;Main_B1.c: 182: if (myMain.Flag) {
  4231  146A  1DA0               	btfss	_myMain^(0+128),3
  4232  146B  2C6E               	goto	l1554
  4233                           
  4234                           ;Main_B1.c: 183: myMain.Flag = 0;
  4235  146C  11A0               	bcf	_myMain^(0+128),3
  4236                           
  4237                           ;Main_B1.c: 192: } else {
  4238  146D  0008               	return
  4239  146E                     l1554:	
  4240                           
  4241                           ;Main_B1.c: 193: myMain.Flag = 1;
  4242  146E  15A0               	bsf	_myMain^(0+128),3
  4243  146F  0008               	return
  4244  1470                     __end_of_my_MainTime:	
  4245                           
  4246                           	psect	text2
  4247  1A9E                     __ptext2:	
  4248 ;; *************** function _setTemp_Enable *****************
  4249 ;; Defined at:
  4250 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;  command         1    wreg     unsigned char 
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;  command         1    0[BANK0 ] unsigned char 
  4255 ;; Return value:  Size  Location     Type
  4256 ;;		None               void
  4257 ;; Registers used:
  4258 ;;		wreg
  4259 ;; Tracked objects:
  4260 ;;		On entry : 0/0
  4261 ;;		On exit  : 0/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4267 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4268 ;;Total ram usage:        1 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    5
  4271 ;; This function calls:
  4272 ;;		Nothing
  4273 ;; This function is called by:
  4274 ;;		_my_MainTime
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           
  4279                           ;psect for function _setTemp_Enable
  4280  1A9E                     _setTemp_Enable:	
  4281                           
  4282                           ;incstack = 0
  4283                           ; Regs used in _setTemp_Enable: [wreg]
  4284                           ;setTemp_Enable@command stored from wreg
  4285  1A9E  0020               	movlb	0	; select bank0
  4286  1A9F  00A0               	movwf	setTemp_Enable@command
  4287                           
  4288                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4289  1AA0  0820               	movf	setTemp_Enable@command,w
  4290  1AA1  0021               	movlb	1	; select bank1
  4291  1AA2  1056               	bcf	_Temp1^(0+128),0
  4292  1AA3  1D03               	skipz
  4293  1AA4  1456               	bsf	_Temp1^(0+128),0
  4294  1AA5  0008               	return
  4295  1AA6                     __end_of_setTemp_Enable:	
  4296                           
  4297                           	psect	text3
  4298  1AAF                     __ptext3:	
  4299 ;; *************** function _setLoad_Enable *****************
  4300 ;; Defined at:
  4301 ;;		line 258 in file "../src/OverLoad_B1.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  command         1    wreg     unsigned char 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  command         1    0[BANK0 ] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;		None               void
  4308 ;; Registers used:
  4309 ;;		wreg
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;Total ram usage:        1 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    5
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_my_MainTime
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           
  4330                           ;psect for function _setLoad_Enable
  4331  1AAF                     _setLoad_Enable:	
  4332                           
  4333                           ;incstack = 0
  4334                           ; Regs used in _setLoad_Enable: [wreg]
  4335                           ;setLoad_Enable@command stored from wreg
  4336  1AAF  0020               	movlb	0	; select bank0
  4337  1AB0  00A0               	movwf	setLoad_Enable@command
  4338                           
  4339                           ;OverLoad_B1.c: 259: Load1.Enable = command;
  4340  1AB1  0820               	movf	setLoad_Enable@command,w
  4341  1AB2  0023               	movlb	3	; select bank3
  4342  1AB3  1020               	bcf	_Load1^(0+384),0
  4343  1AB4  1D03               	skipz
  4344  1AB5  1420               	bsf	_Load1^(0+384),0
  4345                           
  4346                           ;OverLoad_B1.c: 260: Load1.GO = 0;
  4347  1AB6  10A0               	bcf	_Load1^(0+384),1
  4348  1AB7  0008               	return
  4349  1AB8                     __end_of_setLoad_Enable:	
  4350                           
  4351                           	psect	text4
  4352  1B86                     __ptext4:	
  4353 ;; *************** function _myMain_Initialization *****************
  4354 ;; Defined at:
  4355 ;;		line 115 in file "../src/Main_B1.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;		None               void
  4362 ;; Registers used:
  4363 ;;		wreg, fsr1l, fsr1h
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;Total ram usage:        1 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    5
  4376 ;; This function calls:
  4377 ;;		Nothing
  4378 ;; This function is called by:
  4379 ;;		_main
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           
  4384                           ;psect for function _myMain_Initialization
  4385  1B86                     _myMain_Initialization:	
  4386                           
  4387                           ;Main_B1.c: 117: product = &_product;
  4388                           
  4389                           ;incstack = 0
  4390                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4391  1B86  304E               	movlw	__product& (0+255)
  4392  1B87  0020               	movlb	0	; select bank0
  4393  1B88  00A0               	movwf	??_myMain_Initialization
  4394  1B89  0820               	movf	??_myMain_Initialization,w
  4395  1B8A  00EE               	movwf	_product
  4396                           
  4397                           ;Main_B1.c: 118: product->Data[20] = 210;
  4398  1B8B  30D2               	movlw	210
  4399  1B8C  00A0               	movwf	??_myMain_Initialization
  4400  1B8D  086E               	movf	_product,w
  4401  1B8E  3E14               	addlw	20
  4402  1B8F  0086               	movwf	6
  4403  1B90  3002               	movlw	2	; select bank4/5
  4404  1B91  0087               	movwf	7
  4405  1B92  0820               	movf	??_myMain_Initialization,w
  4406  1B93  0081               	movwf	1
  4407  1B94  0008               	return
  4408  1B95                     __end_of_myMain_Initialization:	
  4409                           
  4410                           	psect	text5
  4411  115C                     __ptext5:	
  4412 ;; *************** function _getTemp_AD *****************
  4413 ;; Defined at:
  4414 ;;		line 33 in file "../src/OverTemperature_B1.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;  channel         1    wreg     unsigned char 
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;  channel         1    5[BANK0 ] unsigned char 
  4419 ;; Return value:  Size  Location     Type
  4420 ;;		None               void
  4421 ;; Registers used:
  4422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4431 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;Total ram usage:        2 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    7
  4435 ;; This function calls:
  4436 ;;		_getAD
  4437 ;; This function is called by:
  4438 ;;		_main
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           
  4443                           ;psect for function _getTemp_AD
  4444  115C                     _getTemp_AD:	
  4445                           
  4446                           ;incstack = 0
  4447                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4448                           ;getTemp_AD@channel stored from wreg
  4449  115C  0020               	movlb	0	; select bank0
  4450  115D  00A5               	movwf	getTemp_AD@channel
  4451                           
  4452                           ;OverTemperature_B1.c: 34: if (Temp1.ADtoGO == 1) {
  4453  115E  0021               	movlb	1	; select bank1
  4454  115F  1D56               	btfss	_Temp1^(0+128),2
  4455  1160  0008               	return
  4456                           
  4457                           ;OverTemperature_B1.c: 35: Temp1.ADRES = getAD(channel, 0xf0);
  4458  1161  30F0               	movlw	240
  4459  1162  0020               	movlb	0	; select bank0
  4460  1163  00A4               	movwf	??_getTemp_AD
  4461  1164  0824               	movf	??_getTemp_AD,w
  4462  1165  00A0               	movwf	getAD@adcon1
  4463  1166  0825               	movf	getTemp_AD@channel,w
  4464  1167  319E  2699  3191   	fcall	_getAD
  4465  116A  0020               	movlb	0	; select bank0
  4466  116B  0821               	movf	?_getAD+1,w
  4467  116C  0021               	movlb	1	; select bank1
  4468  116D  01E3               	clrf	((_Temp1+1)^(0+128)+12)
  4469  116E  07E3               	addwf	((_Temp1+1)^(0+128)+12),f
  4470  116F  0020               	movlb	0	; select bank0
  4471  1170  0820               	movf	?_getAD,w
  4472  1171  0021               	movlb	1	; select bank1
  4473  1172  01E2               	clrf	(_Temp1^(0+128)+12)
  4474  1173  07E2               	addwf	(_Temp1^(0+128)+12),f
  4475                           
  4476                           ;OverTemperature_B1.c: 36: if (Temp1.ADH[0] < Temp1.ADRES) {
  4477  1174  0863               	movf	((_Temp1+1)^(0+128)+12),w
  4478  1175  025F               	subwf	((_Temp1+1)^(0+128)+8),w
  4479  1176  1D03               	skipz
  4480  1177  297A               	goto	u11205
  4481  1178  0862               	movf	(_Temp1^(0+128)+12),w
  4482  1179  025E               	subwf	(_Temp1^(0+128)+8),w
  4483  117A                     u11205:	
  4484  117A  1803               	skipnc
  4485  117B  2983               	goto	l10374
  4486                           
  4487                           ;OverTemperature_B1.c: 37: Temp1.ADH[0] = Temp1.ADRES;
  4488  117C  0863               	movf	((_Temp1+1)^(0+128)+12),w
  4489  117D  01DF               	clrf	((_Temp1+1)^(0+128)+8)
  4490  117E  07DF               	addwf	((_Temp1+1)^(0+128)+8),f
  4491  117F  0862               	movf	(_Temp1^(0+128)+12),w
  4492  1180  01DE               	clrf	(_Temp1^(0+128)+8)
  4493  1181  07DE               	addwf	(_Temp1^(0+128)+8),f
  4494                           
  4495                           ;OverTemperature_B1.c: 38: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4496  1182  0008               	return
  4497  1183                     l10374:	
  4498  1183  0863               	movf	((_Temp1+1)^(0+128)+12),w
  4499  1184  0261               	subwf	((_Temp1+1)^(0+128)+10),w
  4500  1185  1D03               	skipz
  4501  1186  2989               	goto	u11215
  4502  1187  0862               	movf	(_Temp1^(0+128)+12),w
  4503  1188  0260               	subwf	(_Temp1^(0+128)+10),w
  4504  1189                     u11215:	
  4505  1189  1803               	skipnc
  4506  118A  0008               	return
  4507                           
  4508                           ;OverTemperature_B1.c: 39: Temp1.ADH[1] = Temp1.ADRES;
  4509  118B  0863               	movf	((_Temp1+1)^(0+128)+12),w
  4510  118C  01E1               	clrf	((_Temp1+1)^(0+128)+10)
  4511  118D  07E1               	addwf	((_Temp1+1)^(0+128)+10),f
  4512  118E  0862               	movf	(_Temp1^(0+128)+12),w
  4513  118F  01E0               	clrf	(_Temp1^(0+128)+10)
  4514  1190  07E0               	addwf	(_Temp1^(0+128)+10),f
  4515  1191  0008               	return
  4516  1192                     __end_of_getTemp_AD:	
  4517                           
  4518                           	psect	text6
  4519  0A6D                     __ptext6:	
  4520 ;; *************** function _getLoad_AD *****************
  4521 ;; Defined at:
  4522 ;;		line 15 in file "../src/OverLoad_B1.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  channel         1    wreg     unsigned char 
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;  channel         1    6[BANK0 ] unsigned char 
  4527 ;;  i               1    8[BANK0 ] unsigned char 
  4528 ;;  j               1    7[BANK0 ] unsigned char 
  4529 ;; Return value:  Size  Location     Type
  4530 ;;		None               void
  4531 ;; Registers used:
  4532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4539 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4540 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4541 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4542 ;;Total ram usage:        5 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:    7
  4545 ;; This function calls:
  4546 ;;		_getAD
  4547 ;; This function is called by:
  4548 ;;		_main
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           
  4553                           ;psect for function _getLoad_AD
  4554  0A6D                     _getLoad_AD:	
  4555                           
  4556                           ;incstack = 0
  4557                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4558                           ;getLoad_AD@channel stored from wreg
  4559  0A6D  0020               	movlb	0	; select bank0
  4560  0A6E  00A6               	movwf	getLoad_AD@channel
  4561                           
  4562                           ;OverLoad_B1.c: 16: char i = 0, j = 0;
  4563  0A6F  01A8               	clrf	getLoad_AD@i
  4564  0A70  01A7               	clrf	getLoad_AD@j
  4565                           
  4566                           ;OverLoad_B1.c: 18: if (Load1.ADtoGO == 1) {
  4567  0A71  0023               	movlb	3	; select bank3
  4568  0A72  1E20               	btfss	_Load1^(0+384),4
  4569  0A73  0008               	return
  4570                           
  4571                           ;OverLoad_B1.c: 19: Load1.ADRES = getAD(channel, 0xc0);
  4572  0A74  30C0               	movlw	192
  4573  0A75  0020               	movlb	0	; select bank0
  4574  0A76  00A4               	movwf	??_getLoad_AD
  4575  0A77  0824               	movf	??_getLoad_AD,w
  4576  0A78  00A0               	movwf	getAD@adcon1
  4577  0A79  0826               	movf	getLoad_AD@channel,w
  4578  0A7A  319E  2699  318A   	fcall	_getAD
  4579  0A7D  0020               	movlb	0	; select bank0
  4580  0A7E  0821               	movf	?_getAD+1,w
  4581  0A7F  0023               	movlb	3	; select bank3
  4582  0A80  01D3               	clrf	((_Load1+1)^(0+384)+50)
  4583  0A81  07D3               	addwf	((_Load1+1)^(0+384)+50),f
  4584  0A82  0020               	movlb	0	; select bank0
  4585  0A83  0820               	movf	?_getAD,w
  4586  0A84  0023               	movlb	3	; select bank3
  4587  0A85  01D2               	clrf	(_Load1^(0+384)+50)
  4588  0A86  07D2               	addwf	(_Load1^(0+384)+50),f
  4589                           
  4590                           ;OverLoad_B1.c: 20: for (i = 0; i < 5; i++) {
  4591  0A87  0020               	movlb	0	; select bank0
  4592  0A88  01A8               	clrf	getLoad_AD@i
  4593  0A89  3005               	movlw	5
  4594  0A8A  0228               	subwf	getLoad_AD@i,w
  4595  0A8B  1803               	btfsc	3,0
  4596  0A8C  2AB8               	goto	l10350
  4597  0A8D                     l10340:	
  4598                           
  4599                           ;OverLoad_B1.c: 21: if (Load1.AH[i] < Load1.ADRES) {
  4600  0A8D  3528               	lslf	getLoad_AD@i,w
  4601  0A8E  3EA8               	addlw	(_Load1+8)& (0+255)
  4602  0A8F  0086               	movwf	6
  4603  0A90  3001               	movlw	1	; select bank3/4
  4604  0A91  0087               	movwf	7
  4605  0A92  3F40               	moviw [0]fsr1
  4606  0A93  00A4               	movwf	??_getLoad_AD
  4607  0A94  3F41               	moviw [1]fsr1
  4608  0A95  00A5               	movwf	??_getLoad_AD+1
  4609  0A96  0023               	movlb	3	; select bank3
  4610  0A97  0853               	movf	((_Load1+1)^(0+384)+50),w
  4611  0A98  0020               	movlb	0	; select bank0
  4612  0A99  0225               	subwf	??_getLoad_AD+1,w
  4613  0A9A  1D03               	skipz
  4614  0A9B  2AA0               	goto	u11135
  4615  0A9C  0023               	movlb	3	; select bank3
  4616  0A9D  0852               	movf	(_Load1^(0+384)+50),w
  4617  0A9E  0020               	movlb	0	; select bank0
  4618  0A9F  0224               	subwf	??_getLoad_AD,w
  4619  0AA0                     u11135:	
  4620  0AA0  1803               	skipnc
  4621  0AA1  2AB0               	goto	l10346
  4622                           
  4623                           ;OverLoad_B1.c: 22: Load1.AH[i] = Load1.ADRES;
  4624  0AA2  3528               	lslf	getLoad_AD@i,w
  4625  0AA3  3EA8               	addlw	(_Load1+8)& (0+255)
  4626  0AA4  0086               	movwf	6
  4627  0AA5  3001               	movlw	1	; select bank3/4
  4628  0AA6  0087               	movwf	7
  4629  0AA7  0023               	movlb	3	; select bank3
  4630  0AA8  0852               	movf	(_Load1^(0+384)+50),w
  4631  0AA9  3FC0               	movwi [0]fsr1
  4632  0AAA  0853               	movf	((_Load1+1)^(0+384)+50),w
  4633  0AAB  3FC1               	movwi [1]fsr1
  4634                           
  4635                           ;OverLoad_B1.c: 23: j = 1;
  4636  0AAC  0020               	movlb	0	; select bank0
  4637  0AAD  01A7               	clrf	getLoad_AD@j
  4638  0AAE  0AA7               	incf	getLoad_AD@j,f
  4639                           
  4640                           ;OverLoad_B1.c: 24: break;
  4641  0AAF  2AB8               	goto	l10350
  4642  0AB0                     l10346:	
  4643  0AB0  3001               	movlw	1
  4644  0AB1  00A4               	movwf	??_getLoad_AD
  4645  0AB2  0824               	movf	??_getLoad_AD,w
  4646  0AB3  07A8               	addwf	getLoad_AD@i,f
  4647  0AB4  3005               	movlw	5
  4648  0AB5  0228               	subwf	getLoad_AD@i,w
  4649  0AB6  1C03               	skipc
  4650  0AB7  2A8D               	goto	l10340
  4651  0AB8                     l10350:	
  4652                           
  4653                           ;OverLoad_B1.c: 25: }
  4654                           ;OverLoad_B1.c: 26: }
  4655                           ;OverLoad_B1.c: 27: if (j == 0) {
  4656  0AB8  08A7               	movf	getLoad_AD@j,f
  4657  0AB9  1D03               	skipz
  4658  0ABA  0008               	return
  4659                           
  4660                           ;OverLoad_B1.c: 28: for (i = 0; i < 5; i++) {
  4661  0ABB  01A8               	clrf	getLoad_AD@i
  4662  0ABC                     L1:	
  4663  0ABC  3005               	movlw	5
  4664  0ABD  0228               	subwf	getLoad_AD@i,w
  4665  0ABE  1803               	btfsc	3,0
  4666  0ABF  0008               	return
  4667                           
  4668                           ;OverLoad_B1.c: 29: if (Load1.AL[i] > Load1.ADRES) {
  4669  0AC0  3528               	lslf	getLoad_AD@i,w
  4670  0AC1  3EBA               	addlw	(_Load1+26)& (0+255)
  4671  0AC2  0086               	movwf	6
  4672  0AC3  3001               	movlw	1	; select bank3/4
  4673  0AC4  0087               	movwf	7
  4674  0AC5  3F40               	moviw [0]fsr1
  4675  0AC6  00A4               	movwf	??_getLoad_AD
  4676  0AC7  3F41               	moviw [1]fsr1
  4677  0AC8  00A5               	movwf	??_getLoad_AD+1
  4678  0AC9  0825               	movf	??_getLoad_AD+1,w
  4679  0ACA  0023               	movlb	3	; select bank3
  4680  0ACB  0253               	subwf	((_Load1+1)^(0+384)+50),w
  4681  0ACC  1D03               	skipz
  4682  0ACD  2AD2               	goto	u11175
  4683  0ACE  0020               	movlb	0	; select bank0
  4684  0ACF  0824               	movf	??_getLoad_AD,w
  4685  0AD0  0023               	movlb	3	; select bank3
  4686  0AD1  0252               	subwf	(_Load1^(0+384)+50),w
  4687  0AD2                     u11175:	
  4688  0AD2  1803               	skipnc
  4689  0AD3  2AE0               	goto	l10362
  4690                           
  4691                           ;OverLoad_B1.c: 30: Load1.AL[i] = Load1.ADRES;
  4692  0AD4  0020               	movlb	0	; select bank0
  4693  0AD5  3528               	lslf	getLoad_AD@i,w
  4694  0AD6  3EBA               	addlw	(_Load1+26)& (0+255)
  4695  0AD7  0086               	movwf	6
  4696  0AD8  3001               	movlw	1	; select bank3/4
  4697  0AD9  0087               	movwf	7
  4698  0ADA  0023               	movlb	3	; select bank3
  4699  0ADB  0852               	movf	(_Load1^(0+384)+50),w
  4700  0ADC  3FC0               	movwi [0]fsr1
  4701  0ADD  0853               	movf	((_Load1+1)^(0+384)+50),w
  4702  0ADE  3FC1               	movwi [1]fsr1
  4703                           
  4704                           ;OverLoad_B1.c: 31: break;
  4705  0ADF  0008               	return
  4706  0AE0                     l10362:	
  4707  0AE0  3001               	movlw	1
  4708  0AE1  0020               	movlb	0	; select bank0
  4709  0AE2  00A4               	movwf	??_getLoad_AD
  4710  0AE3  0824               	movf	??_getLoad_AD,w
  4711  0AE4  07A8               	addwf	getLoad_AD@i,f
  4712  0AE5  2ABC               	goto	L1
  4713  0AE6                     __end_of_getLoad_AD:	
  4714                           
  4715                           	psect	text7
  4716  1E99                     __ptext7:	
  4717 ;; *************** function _getAD *****************
  4718 ;; Defined at:
  4719 ;;		line 343 in file "../src/MCU_B1.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  adcon0          1    wreg     unsigned char 
  4722 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  2    0[BANK0 ] int 
  4727 ;; Registers used:
  4728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4734 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;Total ram usage:        4 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    6
  4741 ;; This function calls:
  4742 ;;		_Timeout_Counter
  4743 ;;		_set_TimeoutCleared
  4744 ;; This function is called by:
  4745 ;;		_getLoad_AD
  4746 ;;		_getTemp_AD
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           
  4751                           ;psect for function _getAD
  4752  1E99                     _getAD:	
  4753                           
  4754                           ;incstack = 0
  4755                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4756                           ;getAD@adcon0 stored from wreg
  4757  1E99  0020               	movlb	0	; select bank0
  4758  1E9A  00A3               	movwf	getAD@adcon0
  4759                           
  4760                           ;MCU_B1.c: 344: ADCON0 = adcon0;
  4761  1E9B  0823               	movf	getAD@adcon0,w
  4762  1E9C  0021               	movlb	1	; select bank1
  4763  1E9D  009D               	movwf	29	;volatile
  4764                           
  4765                           ;MCU_B1.c: 345: ADCON1 = adcon1;
  4766  1E9E  0020               	movlb	0	; select bank0
  4767  1E9F  0820               	movf	getAD@adcon1,w
  4768  1EA0  0021               	movlb	1	; select bank1
  4769  1EA1  009E               	movwf	30	;volatile
  4770                           
  4771                           ;MCU_B1.c: 346: GO_nDONE = 1;
  4772  1EA2  149D               	bsf	29,1	;volatile
  4773                           
  4774                           ;MCU_B1.c: 347: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4775  1EA3  2EA7               	goto	l9808
  4776  1EA4                     l9806:	
  4777                           
  4778                           ;MCU_B1.c: 348: Timeout_Counter();
  4779  1EA4  319C  24C2  319E   	fcall	_Timeout_Counter
  4780  1EA7                     l9808:	
  4781  1EA7  0021               	movlb	1	; select bank1
  4782  1EA8  1C9D               	btfss	29,1	;volatile
  4783  1EA9  2EAC               	goto	l9812
  4784  1EAA  1D2F               	btfss	(_myMain^(0+128)+15),2
  4785  1EAB  2EA4               	goto	l9806
  4786  1EAC                     l9812:	
  4787                           
  4788                           ;MCU_B1.c: 349: };
  4789                           ;MCU_B1.c: 350: set_TimeoutCleared();
  4790  1EAC  319A  222B         	fcall	_set_TimeoutCleared
  4791                           
  4792                           ;MCU_B1.c: 351: return ((ADRESH*256)+ADRESL);
  4793  1EAE  0021               	movlb	1	; select bank1
  4794  1EAF  081C               	movf	28,w	;volatile
  4795  1EB0  0020               	movlb	0	; select bank0
  4796  1EB1  01A1               	clrf	?_getAD+1
  4797  1EB2  07A1               	addwf	?_getAD+1,f
  4798  1EB3  0021               	movlb	1	; select bank1
  4799  1EB4  081B               	movf	27,w	;volatile
  4800  1EB5  0020               	movlb	0	; select bank0
  4801  1EB6  01A0               	clrf	?_getAD
  4802  1EB7  07A0               	addwf	?_getAD,f
  4803  1EB8  0008               	return
  4804  1EB9                     __end_of_getAD:	
  4805                           
  4806                           	psect	text8
  4807  1C4E                     __ptext8:	
  4808 ;; *************** function _WDT_Main *****************
  4809 ;; Defined at:
  4810 ;;		line 902 in file "../src/MCU_B1.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;		None
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;		None
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, status,2, status,0, pclath, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;Total ram usage:        1 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    6
  4831 ;; This function calls:
  4832 ;;		_WDT_Clearing
  4833 ;; This function is called by:
  4834 ;;		_main
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           
  4839                           ;psect for function _WDT_Main
  4840  1C4E                     _WDT_Main:	
  4841                           
  4842                           ;MCU_B1.c: 903: if (WDT.Enable == 1) {
  4843                           
  4844                           ;incstack = 0
  4845                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4846  1C4E  0021               	movlb	1	; select bank1
  4847  1C4F  1C48               	btfss	_WDT^(0+128),0
  4848  1C50  0008               	return
  4849                           
  4850                           ;MCU_B1.c: 904: if (WDT.Count-- > 0) {
  4851  1C51  3001               	movlw	1
  4852  1C52  02C9               	subwf	(_WDT^(0+128)+1),f
  4853  1C53  0849               	movf	(_WDT^(0+128)+1),w
  4854  1C54  3AFF               	xorlw	255
  4855  1C55  1903               	skipnz
  4856  1C56  0008               	return
  4857                           
  4858                           ;MCU_B1.c: 905: WDT.Count = 10;
  4859  1C57  300A               	movlw	10
  4860  1C58  0020               	movlb	0	; select bank0
  4861  1C59  00A0               	movwf	??_WDT_Main
  4862  1C5A  0820               	movf	??_WDT_Main,w
  4863  1C5B  0021               	movlb	1	; select bank1
  4864  1C5C  00C9               	movwf	(_WDT^(0+128)+1)
  4865                           
  4866                           ;MCU_B1.c: 906: WDT_Clearing();
  4867  1C5D  3180  2002         	fcall	_WDT_Clearing
  4868  1C5F  0008               	return
  4869  1C60                     __end_of_WDT_Main:	
  4870                           
  4871                           	psect	text9
  4872  0002                     __ptext9:	
  4873 ;; *************** function _WDT_Clearing *****************
  4874 ;; Defined at:
  4875 ;;		line 912 in file "../src/MCU_B1.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;		None
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;		None               void
  4882 ;; Registers used:
  4883 ;;		None
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4893 ;;Total ram usage:        0 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    5
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_WDT_Main
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function _WDT_Clearing
  4905  0002                     _WDT_Clearing:	
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _WDT_Clearing: []
  4909  0002  0064               	clrwdt	;# 
  4910  0003  0008               	return
  4911  0004                     __end_of_WDT_Clearing:	
  4912                           
  4913                           	psect	text10
  4914  0800                     __ptext10:	
  4915 ;; *************** function _Temp_Main *****************
  4916 ;; Defined at:
  4917 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;		None
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;		None
  4922 ;; Return value:  Size  Location     Type
  4923 ;;		None               void
  4924 ;; Registers used:
  4925 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;Total ram usage:        0 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:   11
  4938 ;; This function calls:
  4939 ;;		_setTemp_Main
  4940 ;; This function is called by:
  4941 ;;		_main
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           
  4946                           ;psect for function _Temp_Main
  4947  0800                     _Temp_Main:	
  4948                           
  4949                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4950                           
  4951                           ;incstack = 0
  4952                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4953  0800  318B  23E3         	fcall	_setTemp_Main
  4954  0802  0008               	return
  4955  0803                     __end_of_Temp_Main:	
  4956                           
  4957                           	psect	text11
  4958  0BE3                     __ptext11:	
  4959 ;; *************** function _setTemp_Main *****************
  4960 ;; Defined at:
  4961 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;		None
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;		None
  4966 ;; Return value:  Size  Location     Type
  4967 ;;		None               void
  4968 ;; Registers used:
  4969 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;Total ram usage:        1 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; Hardware stack levels required when called:   10
  4982 ;; This function calls:
  4983 ;;		_getLoad_Safe
  4984 ;;		_setOverTemp_Exceptions
  4985 ;; This function is called by:
  4986 ;;		_Temp_Main
  4987 ;; This function uses a non-reentrant model
  4988 ;;
  4989                           
  4990                           
  4991                           ;psect for function _setTemp_Main
  4992  0BE3                     _setTemp_Main:	
  4993                           
  4994                           ;OverTemperature_B1.c: 58: if (Temp1.Enable == 1) {
  4995                           
  4996                           ;incstack = 0
  4997                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4998  0BE3  0021               	movlb	1	; select bank1
  4999  0BE4  1C56               	btfss	_Temp1^(0+128),0
  5000  0BE5  0008               	return
  5001                           
  5002                           ;OverTemperature_B1.c: 59: if (Temp1.ADtoGO == 0) {
  5003  0BE6  1956               	btfsc	_Temp1^(0+128),2
  5004  0BE7  2C05               	goto	l9892
  5005                           
  5006                           ;OverTemperature_B1.c: 60: Temp1.Time++;
  5007  0BE8  3001               	movlw	1
  5008  0BE9  07D7               	addwf	(_Temp1^(0+128)+1),f
  5009  0BEA  3000               	movlw	0
  5010  0BEB  3DD8               	addwfc	((_Temp1+1)^(0+128)+1),f
  5011                           
  5012                           ;OverTemperature_B1.c: 61: if (Temp1.Time >= 500)
  5013  0BEC  3001               	movlw	1
  5014  0BED  0258               	subwf	((_Temp1+1)^(0+128)+1),w
  5015  0BEE  30F4               	movlw	244
  5016  0BEF  1903               	skipnz
  5017  0BF0  0257               	subwf	(_Temp1^(0+128)+1),w
  5018  0BF1  1C03               	skipc
  5019  0BF2  0008               	return
  5020                           
  5021                           ;OverTemperature_B1.c: 62: {
  5022                           ;OverTemperature_B1.c: 63: if (getLoad_Safe() == 1 && 1 == 1) {
  5023  0BF3  319A  2296  318B   	fcall	_getLoad_Safe
  5024  0BF6  3A01               	xorlw	1
  5025  0BF7  1D03               	skipz
  5026  0BF8  2BFF               	goto	l9890
  5027                           
  5028                           ;OverTemperature_B1.c: 64: Temp1.Time = 0;
  5029  0BF9  0021               	movlb	1	; select bank1
  5030  0BFA  01D7               	clrf	(_Temp1^(0+128)+1)
  5031  0BFB  01D8               	clrf	((_Temp1+1)^(0+128)+1)
  5032                           
  5033                           ;OverTemperature_B1.c: 65: Temp1.ADtoGO = 1;
  5034  0BFC  1556               	bsf	_Temp1^(0+128),2
  5035                           
  5036                           ;OverTemperature_B1.c: 66: Temp1.Safe = 0;
  5037  0BFD  1256               	bcf	_Temp1^(0+128),4
  5038                           
  5039                           ;OverTemperature_B1.c: 68: } else {
  5040  0BFE  0008               	return
  5041  0BFF                     l9890:	
  5042                           
  5043                           ;OverTemperature_B1.c: 69: Temp1.Time = 1000;
  5044  0BFF  30E8               	movlw	232
  5045  0C00  0021               	movlb	1	; select bank1
  5046  0C01  00D7               	movwf	(_Temp1^(0+128)+1)
  5047  0C02  3003               	movlw	3
  5048  0C03  00D8               	movwf	(_Temp1^(0+128)+2)
  5049                           
  5050                           ;OverTemperature_B1.c: 70: }
  5051                           ;OverTemperature_B1.c: 71: }
  5052                           ;OverTemperature_B1.c: 72: } else {
  5053  0C04  0008               	return
  5054  0C05                     l9892:	
  5055                           
  5056                           ;OverTemperature_B1.c: 73: Temp1.Time++;
  5057  0C05  3001               	movlw	1
  5058  0C06  07D7               	addwf	(_Temp1^(0+128)+1),f
  5059  0C07  3000               	movlw	0
  5060  0C08  3DD8               	addwfc	((_Temp1+1)^(0+128)+1),f
  5061                           
  5062                           ;OverTemperature_B1.c: 74: if (Temp1.Time >= 4) {
  5063  0C09  3000               	movlw	0
  5064  0C0A  0258               	subwf	((_Temp1+1)^(0+128)+1),w
  5065  0C0B  3004               	movlw	4
  5066  0C0C  1903               	skipnz
  5067  0C0D  0257               	subwf	(_Temp1^(0+128)+1),w
  5068  0C0E  1C03               	skipc
  5069  0C0F  0008               	return
  5070                           
  5071                           ;OverTemperature_B1.c: 75: Temp1.Time = 0;
  5072  0C10  01D7               	clrf	(_Temp1^(0+128)+1)
  5073  0C11  01D8               	clrf	((_Temp1+1)^(0+128)+1)
  5074                           
  5075                           ;OverTemperature_B1.c: 76: Temp1.ADtoGO = 0;
  5076  0C12  1156               	bcf	_Temp1^(0+128),2
  5077                           
  5078                           ;OverTemperature_B1.c: 77: Temp1.AD = Temp1.ADH[1];
  5079  0C13  0861               	movf	((_Temp1+1)^(0+128)+10),w
  5080  0C14  01DD               	clrf	((_Temp1+1)^(0+128)+6)
  5081  0C15  07DD               	addwf	((_Temp1+1)^(0+128)+6),f
  5082  0C16  0860               	movf	(_Temp1^(0+128)+10),w
  5083  0C17  01DC               	clrf	(_Temp1^(0+128)+6)
  5084  0C18  07DC               	addwf	(_Temp1^(0+128)+6),f
  5085                           
  5086                           ;OverTemperature_B1.c: 78: if (Temp1.ERROR == 1) {
  5087  0C19  1CD6               	btfss	_Temp1^(0+128),1
  5088  0C1A  2C32               	goto	l9914
  5089                           
  5090                           ;OverTemperature_B1.c: 79: if (Temp1.AD >= 600) {
  5091  0C1B  3002               	movlw	2
  5092  0C1C  025D               	subwf	((_Temp1+1)^(0+128)+6),w
  5093  0C1D  3058               	movlw	88
  5094  0C1E  1903               	skipnz
  5095  0C1F  025C               	subwf	(_Temp1^(0+128)+6),w
  5096  0C20  1C03               	skipc
  5097  0C21  2C49               	goto	l9924
  5098                           
  5099                           ;OverTemperature_B1.c: 80: Temp1.Count++;
  5100  0C22  3001               	movlw	1
  5101  0C23  0020               	movlb	0	; select bank0
  5102  0C24  00B1               	movwf	??_setTemp_Main
  5103  0C25  0831               	movf	??_setTemp_Main,w
  5104  0C26  0021               	movlb	1	; select bank1
  5105  0C27  07D9               	addwf	(_Temp1^(0+128)+3),f
  5106                           
  5107                           ;OverTemperature_B1.c: 81: if (Temp1.Count >= 3) {
  5108  0C28  3003               	movlw	3
  5109  0C29  0259               	subwf	(_Temp1^(0+128)+3),w
  5110  0C2A  1C03               	skipc
  5111  0C2B  2C4B               	goto	l9926
  5112                           
  5113                           ;OverTemperature_B1.c: 82: Temp1.Count = 0;
  5114  0C2C  01D9               	clrf	(_Temp1^(0+128)+3)
  5115                           
  5116                           ;OverTemperature_B1.c: 83: setOverTemp_Exceptions(0);
  5117  0C2D  3000               	movlw	0
  5118  0C2E  3188  2003  318B   	fcall	_setOverTemp_Exceptions
  5119                           
  5120                           ;OverTemperature_B1.c: 84: }
  5121                           ;OverTemperature_B1.c: 85: } else {
  5122  0C31  2C4B               	goto	l9926
  5123  0C32                     l9914:	
  5124                           ;OverTemperature_B1.c: 87: }
  5125                           ;OverTemperature_B1.c: 88: } else {
  5126                           
  5127                           ;OverTemperature_B1.c: 86: Temp1.Count = 0;
  5128                           
  5129                           
  5130                           ;OverTemperature_B1.c: 89: if (Temp1.AD <= 550) {
  5131  0C32  3002               	movlw	2
  5132  0C33  025D               	subwf	((_Temp1+1)^(0+128)+6),w
  5133  0C34  3027               	movlw	39
  5134  0C35  1903               	skipnz
  5135  0C36  025C               	subwf	(_Temp1^(0+128)+6),w
  5136  0C37  1803               	skipnc
  5137  0C38  2C49               	goto	l9924
  5138                           
  5139                           ;OverTemperature_B1.c: 90: Temp1.Count++;
  5140  0C39  3001               	movlw	1
  5141  0C3A  0020               	movlb	0	; select bank0
  5142  0C3B  00B1               	movwf	??_setTemp_Main
  5143  0C3C  0831               	movf	??_setTemp_Main,w
  5144  0C3D  0021               	movlb	1	; select bank1
  5145  0C3E  07D9               	addwf	(_Temp1^(0+128)+3),f
  5146                           
  5147                           ;OverTemperature_B1.c: 91: if (Temp1.Count >= 3) {
  5148  0C3F  3003               	movlw	3
  5149  0C40  0259               	subwf	(_Temp1^(0+128)+3),w
  5150  0C41  1C03               	skipc
  5151  0C42  2C4B               	goto	l9926
  5152                           
  5153                           ;OverTemperature_B1.c: 92: Temp1.Count = 0;
  5154  0C43  01D9               	clrf	(_Temp1^(0+128)+3)
  5155                           
  5156                           ;OverTemperature_B1.c: 93: setOverTemp_Exceptions(1);
  5157  0C44  3001               	movlw	1
  5158  0C45  3188  2003  318B   	fcall	_setOverTemp_Exceptions
  5159                           
  5160                           ;OverTemperature_B1.c: 94: }
  5161                           ;OverTemperature_B1.c: 95: } else {
  5162  0C48  2C4B               	goto	l9926
  5163  0C49                     l9924:	
  5164                           
  5165                           ;OverTemperature_B1.c: 96: Temp1.Count = 0;
  5166  0C49  0021               	movlb	1	; select bank1
  5167  0C4A  01D9               	clrf	(_Temp1^(0+128)+3)
  5168  0C4B                     l9926:	
  5169                           
  5170                           ;OverTemperature_B1.c: 97: }
  5171                           ;OverTemperature_B1.c: 98: }
  5172                           ;OverTemperature_B1.c: 99: if (Temp1.ERROR == 0) {
  5173  0C4B  0021               	movlb	1	; select bank1
  5174  0C4C  1CD6               	btfss	_Temp1^(0+128),1
  5175                           
  5176                           ;OverTemperature_B1.c: 100: Temp1.Safe = 1;
  5177  0C4D  1656               	bsf	_Temp1^(0+128),4
  5178                           
  5179                           ;OverTemperature_B1.c: 101: }
  5180                           ;OverTemperature_B1.c: 102: product->Data[24]=Temp1.AD >> 8;
  5181  0C4E  085D               	movf	((_Temp1+1)^(0+128)+6),w
  5182  0C4F  0020               	movlb	0	; select bank0
  5183  0C50  00B1               	movwf	??_setTemp_Main
  5184  0C51  086E               	movf	_product,w
  5185  0C52  3E18               	addlw	24
  5186  0C53  0086               	movwf	6
  5187  0C54  3002               	movlw	2	; select bank4/5
  5188  0C55  0087               	movwf	7
  5189  0C56  0831               	movf	??_setTemp_Main,w
  5190  0C57  0081               	movwf	1
  5191                           
  5192                           ;OverTemperature_B1.c: 103: product->Data[25]=Temp1.AD;
  5193  0C58  0021               	movlb	1	; select bank1
  5194  0C59  085C               	movf	(_Temp1^(0+128)+6),w
  5195  0C5A  0020               	movlb	0	; select bank0
  5196  0C5B  00B1               	movwf	??_setTemp_Main
  5197  0C5C  086E               	movf	_product,w
  5198  0C5D  3E19               	addlw	25
  5199  0C5E  0086               	movwf	6
  5200  0C5F  3002               	movlw	2	; select bank4/5
  5201  0C60  0087               	movwf	7
  5202  0C61  0831               	movf	??_setTemp_Main,w
  5203  0C62  0081               	movwf	1
  5204                           
  5205                           ;OverTemperature_B1.c: 106: Temp1.ADH[0] = 0;
  5206  0C63  0021               	movlb	1	; select bank1
  5207  0C64  01DE               	clrf	(_Temp1^(0+128)+8)
  5208  0C65  01DF               	clrf	((_Temp1+1)^(0+128)+8)
  5209                           
  5210                           ;OverTemperature_B1.c: 107: Temp1.ADH[1] = 0;
  5211  0C66  01E0               	clrf	(_Temp1^(0+128)+10)
  5212  0C67  01E1               	clrf	((_Temp1+1)^(0+128)+10)
  5213  0C68  0008               	return
  5214  0C69                     __end_of_setTemp_Main:	
  5215                           
  5216                           	psect	text12
  5217  0803                     __ptext12:	
  5218 ;; *************** function _setOverTemp_Exceptions *****************
  5219 ;; Defined at:
  5220 ;;		line 114 in file "../src/OverTemperature_B1.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  command         1    wreg     unsigned char 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  command         1   16[BANK0 ] unsigned char 
  5225 ;;  i               1   15[BANK0 ] unsigned char 
  5226 ;; Return value:  Size  Location     Type
  5227 ;;		None               void
  5228 ;; Registers used:
  5229 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5230 ;; Tracked objects:
  5231 ;;		On entry : 0/0
  5232 ;;		On exit  : 0/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5236 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5238 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5239 ;;Total ram usage:        3 bytes
  5240 ;; Hardware stack levels used:    1
  5241 ;; Hardware stack levels required when called:    9
  5242 ;; This function calls:
  5243 ;;		_DimmerLights_Exceptions
  5244 ;;		_setBuz
  5245 ;;		_setLED
  5246 ;;		_setRF_Enable
  5247 ;;		_setSw_Enable
  5248 ;; This function is called by:
  5249 ;;		_setTemp_Main
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           
  5254                           ;psect for function _setOverTemp_Exceptions
  5255  0803                     _setOverTemp_Exceptions:	
  5256                           
  5257                           ;incstack = 0
  5258                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5259                           ;setOverTemp_Exceptions@command stored from wreg
  5260  0803  0020               	movlb	0	; select bank0
  5261  0804  00B0               	movwf	setOverTemp_Exceptions@command
  5262                           
  5263                           ;OverTemperature_B1.c: 115: char i = command == 1 ? 0 : 1;
  5264  0805  0830               	movf	setOverTemp_Exceptions@command,w
  5265  0806  3A01               	xorlw	1
  5266  0807  3000               	movlw	0
  5267  0808  1D03               	skipz
  5268  0809  3001               	movlw	1
  5269  080A  00AE               	movwf	??_setOverTemp_Exceptions
  5270  080B  082E               	movf	??_setOverTemp_Exceptions,w
  5271  080C  00AF               	movwf	setOverTemp_Exceptions@i
  5272                           
  5273                           ;OverTemperature_B1.c: 116: Temp1.ERROR = command;
  5274  080D  0830               	movf	setOverTemp_Exceptions@command,w
  5275  080E  0021               	movlb	1	; select bank1
  5276  080F  10D6               	bcf	_Temp1^(0+128),1
  5277  0810  1D03               	skipz
  5278  0811  14D6               	bsf	_Temp1^(0+128),1
  5279                           
  5280                           ;OverTemperature_B1.c: 117: Temp1.Safe = i;
  5281  0812  0020               	movlb	0	; select bank0
  5282  0813  082F               	movf	setOverTemp_Exceptions@i,w
  5283  0814  0021               	movlb	1	; select bank1
  5284  0815  1256               	bcf	_Temp1^(0+128),4
  5285  0816  1D03               	skipz
  5286  0817  1656               	bsf	_Temp1^(0+128),4
  5287                           
  5288                           ;OverTemperature_B1.c: 118: if (command == 1) {
  5289  0818  0020               	movlb	0	; select bank0
  5290  0819  0830               	movf	setOverTemp_Exceptions@command,w
  5291  081A  3A01               	xorlw	1
  5292  081B  1D03               	skipz
  5293  081C  2822               	goto	l9410
  5294                           
  5295                           ;OverTemperature_B1.c: 119: DimmerLights_Exceptions(1);
  5296  081D  3001               	movlw	1
  5297  081E  3193  23DC  3188   	fcall	_DimmerLights_Exceptions
  5298                           
  5299                           ;OverTemperature_B1.c: 123: } else if (command == 0) {
  5300  0821  282E               	goto	l9414
  5301  0822                     l9410:	
  5302  0822  0020               	movlb	0	; select bank0
  5303  0823  08B0               	movf	setOverTemp_Exceptions@command,f
  5304  0824  1D03               	skipz
  5305  0825  282E               	goto	l9414
  5306                           
  5307                           ;OverTemperature_B1.c: 124: setBuz(2, 100);
  5308  0826  3064               	movlw	100
  5309  0827  00A9               	movwf	setBuz@time
  5310  0828  3000               	movlw	0
  5311  0829  00AA               	movwf	setBuz@time+1
  5312  082A  3002               	movlw	2
  5313  082B  3195  25BE  3188   	fcall	_setBuz
  5314  082E                     l9414:	
  5315                           
  5316                           ;OverTemperature_B1.c: 125: }
  5317                           ;OverTemperature_B1.c: 128: setLED(99, command + 10);
  5318  082E  0020               	movlb	0	; select bank0
  5319  082F  0830               	movf	setOverTemp_Exceptions@command,w
  5320  0830  3E0A               	addlw	10
  5321  0831  00AE               	movwf	??_setOverTemp_Exceptions
  5322  0832  082E               	movf	??_setOverTemp_Exceptions,w
  5323  0833  00A1               	movwf	setLED@command
  5324  0834  3063               	movlw	99
  5325  0835  3196  2672  3188   	fcall	_setLED
  5326                           
  5327                           ;OverTemperature_B1.c: 130: setSw_Enable(i);
  5328  0838  0020               	movlb	0	; select bank0
  5329  0839  082F               	movf	setOverTemp_Exceptions@i,w
  5330  083A  319D  25C8  3188   	fcall	_setSw_Enable
  5331                           
  5332                           ;OverTemperature_B1.c: 132: setRF_Enable(i);
  5333  083D  0020               	movlb	0	; select bank0
  5334  083E  082F               	movf	setOverTemp_Exceptions@i,w
  5335  083F  319B  234B         	fcall	_setRF_Enable
  5336  0841  0008               	return
  5337  0842                     __end_of_setOverTemp_Exceptions:	
  5338                           
  5339                           	psect	text13
  5340  1A96                     __ptext13:	
  5341 ;; *************** function _getLoad_Safe *****************
  5342 ;; Defined at:
  5343 ;;		line 296 in file "../src/OverLoad_B1.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;		None
  5346 ;; Auto vars:     Size  Location     Type
  5347 ;;  result          1    0[BANK0 ] unsigned char 
  5348 ;; Return value:  Size  Location     Type
  5349 ;;                  1    wreg      unsigned char 
  5350 ;; Registers used:
  5351 ;;		wreg, status,2
  5352 ;; Tracked objects:
  5353 ;;		On entry : 0/0
  5354 ;;		On exit  : 0/0
  5355 ;;		Unchanged: 0/0
  5356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;Total ram usage:        1 bytes
  5362 ;; Hardware stack levels used:    1
  5363 ;; Hardware stack levels required when called:    5
  5364 ;; This function calls:
  5365 ;;		Nothing
  5366 ;; This function is called by:
  5367 ;;		_setTemp_Main
  5368 ;; This function uses a non-reentrant model
  5369 ;;
  5370                           
  5371                           
  5372                           ;psect for function _getLoad_Safe
  5373  1A96                     _getLoad_Safe:	
  5374                           
  5375                           ;OverLoad_B1.c: 297: char result = Load1.Safe;
  5376                           
  5377                           ;incstack = 0
  5378                           ; Regs used in _getLoad_Safe: [wreg+status,2]
  5379  1A96  3000               	movlw	0
  5380  1A97  0023               	movlb	3	; select bank3
  5381  1A98  19A0               	btfsc	_Load1^(0+384),3
  5382  1A99  3001               	movlw	1
  5383  1A9A  0020               	movlb	0	; select bank0
  5384  1A9B  00A0               	movwf	getLoad_Safe@result
  5385                           
  5386                           ;OverLoad_B1.c: 298: return result;
  5387  1A9C  0820               	movf	getLoad_Safe@result,w
  5388  1A9D  0008               	return
  5389  1A9E                     __end_of_getLoad_Safe:	
  5390                           
  5391                           	psect	text14
  5392  1A1C                     __ptext14:	
  5393 ;; *************** function _Temp_Initialization *****************
  5394 ;; Defined at:
  5395 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5396 ;; Parameters:    Size  Location     Type
  5397 ;;		None
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;		None
  5400 ;; Return value:  Size  Location     Type
  5401 ;;		None               void
  5402 ;; Registers used:
  5403 ;;		status,2, status,0, pclath, cstack
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;Total ram usage:        0 bytes
  5414 ;; Hardware stack levels used:    1
  5415 ;; Hardware stack levels required when called:    6
  5416 ;; This function calls:
  5417 ;;		_setTemp_Initialization
  5418 ;; This function is called by:
  5419 ;;		_main
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           
  5424                           ;psect for function _Temp_Initialization
  5425  1A1C                     _Temp_Initialization:	
  5426                           
  5427                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5428                           
  5429                           ;incstack = 0
  5430                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5431  1A1C  319A  2219         	fcall	_setTemp_Initialization
  5432  1A1E  0008               	return
  5433  1A1F                     __end_of_Temp_Initialization:	
  5434                           
  5435                           	psect	text15
  5436  1A19                     __ptext15:	
  5437 ;; *************** function _setTemp_Initialization *****************
  5438 ;; Defined at:
  5439 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5440 ;; Parameters:    Size  Location     Type
  5441 ;;		None
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;		None
  5444 ;; Return value:  Size  Location     Type
  5445 ;;		None               void
  5446 ;; Registers used:
  5447 ;;		None
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;Total ram usage:        0 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    5
  5460 ;; This function calls:
  5461 ;;		Nothing
  5462 ;; This function is called by:
  5463 ;;		_Temp_Initialization
  5464 ;; This function uses a non-reentrant model
  5465 ;;
  5466                           
  5467                           
  5468                           ;psect for function _setTemp_Initialization
  5469  1A19                     _setTemp_Initialization:	
  5470                           
  5471                           ;OverTemperature_B1.c: 46: Temp1.Safe = 1;
  5472                           
  5473                           ;incstack = 0
  5474                           ; Regs used in _setTemp_Initialization: []
  5475  1A19  0021               	movlb	1	; select bank1
  5476  1A1A  1656               	bsf	_Temp1^(0+128),4
  5477  1A1B  0008               	return
  5478  1A1C                     __end_of_setTemp_Initialization:	
  5479                           
  5480                           	psect	text16
  5481  1A8E                     __ptext16:	
  5482 ;; *************** function _Switch_Main *****************
  5483 ;; Defined at:
  5484 ;;		line 67 in file "../src/Switch_B1.c"
  5485 ;; Parameters:    Size  Location     Type
  5486 ;;		None
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;		None
  5489 ;; Return value:  Size  Location     Type
  5490 ;;		None               void
  5491 ;; Registers used:
  5492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;Total ram usage:        0 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:   11
  5505 ;; This function calls:
  5506 ;;		_setSw_Main
  5507 ;; This function is called by:
  5508 ;;		_main
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           
  5513                           ;psect for function _Switch_Main
  5514  1A8E                     _Switch_Main:	
  5515                           
  5516                           ;Switch_B1.c: 69: setSw_Main(1);
  5517                           
  5518                           ;incstack = 0
  5519                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5520  1A8E  3001               	movlw	1
  5521  1A8F  3183  237A  319A   	fcall	_setSw_Main
  5522                           
  5523                           ;Switch_B1.c: 73: setSw_Main(2);
  5524  1A92  3002               	movlw	2
  5525  1A93  3183  237A         	fcall	_setSw_Main
  5526  1A95  0008               	return
  5527  1A96                     __end_of_Switch_Main:	
  5528                           
  5529                           	psect	text17
  5530  037A                     __ptext17:	
  5531 ;; *************** function _setSw_Main *****************
  5532 ;; Defined at:
  5533 ;;		line 117 in file "../src/Switch_B1.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;  sw              1    wreg     unsigned char 
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  sw              1   73[BANK0 ] unsigned char 
  5538 ;; Return value:  Size  Location     Type
  5539 ;;		None               void
  5540 ;; Registers used:
  5541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5550 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5551 ;;Total ram usage:        5 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:   10
  5554 ;; This function calls:
  5555 ;;		_SwPointSelect
  5556 ;;		_Sw_DimmerAdjFunc
  5557 ;;		_Sw_DimmerOffFunc
  5558 ;;		_Sw_DimmerOnFunc
  5559 ;;		_setBuz
  5560 ;;		_setRF_Learn
  5561 ;; This function is called by:
  5562 ;;		_Switch_Main
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           
  5567                           ;psect for function _setSw_Main
  5568  037A                     _setSw_Main:	
  5569                           
  5570                           ;incstack = 0
  5571                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5572                           ;setSw_Main@sw stored from wreg
  5573  037A  0020               	movlb	0	; select bank0
  5574  037B  00E9               	movwf	setSw_Main@sw
  5575                           
  5576                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5577  037C  0869               	movf	setSw_Main@sw,w
  5578  037D  319C  24AE  3183   	fcall	_SwPointSelect
  5579                           
  5580                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5581  0380  0020               	movlb	0	; select bank0
  5582  0381  086C               	movf	_Sw,w
  5583  0382  0086               	movwf	6
  5584  0383  086D               	movf	_Sw+1,w
  5585  0384  0087               	movwf	7
  5586  0385  1C01               	btfss	1,0
  5587  0386  0008               	return
  5588                           
  5589                           ;Switch_B1.c: 131: if (sw == 1) {
  5590  0387  0869               	movf	setSw_Main@sw,w
  5591  0388  3A01               	xorlw	1
  5592  0389  1D03               	skipz
  5593  038A  2B97               	goto	l10070
  5594                           
  5595                           ;Switch_B1.c: 132: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  5596  038B  01E7               	clrf	_setSw_Main$6143
  5597  038C  0AE7               	incf	_setSw_Main$6143,f
  5598  038D  1F0C               	btfss	12,6	;volatile
  5599  038E  1A0C               	btfsc	12,4	;volatile
  5600  038F  2B91               	goto	l10068
  5601  0390  01E7               	clrf	_setSw_Main$6143
  5602  0391                     l10068:	
  5603  0391  086C               	movf	_Sw,w
  5604  0392  0086               	movwf	6
  5605  0393  086D               	movf	_Sw+1,w
  5606  0394  0087               	movwf	7
  5607  0395  0867               	movf	_setSw_Main$6143,w
  5608  0396  2BA6               	goto	L2
  5609  0397                     l10070:	
  5610                           ;Switch_B1.c: 133: } else if (sw == 2) {
  5611                           
  5612  0397  0869               	movf	setSw_Main@sw,w
  5613  0398  3A02               	xorlw	2
  5614  0399  1D03               	skipz
  5615  039A  2BA9               	goto	l10080
  5616                           
  5617                           ;Switch_B1.c: 134: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  5618  039B  01E8               	clrf	_setSw_Main$6144
  5619  039C  0AE8               	incf	_setSw_Main$6144,f
  5620  039D  1C0C               	btfss	12,0	;volatile
  5621  039E  188D               	btfsc	13,1	;volatile
  5622  039F  2BA1               	goto	l10078
  5623  03A0  01E8               	clrf	_setSw_Main$6144
  5624  03A1                     l10078:	
  5625  03A1  086C               	movf	_Sw,w
  5626  03A2  0086               	movwf	6
  5627  03A3  086D               	movf	_Sw+1,w
  5628  03A4  0087               	movwf	7
  5629  03A5  0868               	movf	_setSw_Main$6144,w
  5630  03A6                     L2:	
  5631  03A6  1081               	bcf	1,1
  5632  03A7  1D03               	skipz
  5633  03A8  1481               	bsf	1,1
  5634  03A9                     l10080:	
  5635                           
  5636                           ;Switch_B1.c: 135: }
  5637                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  5638  03A9  086C               	movf	_Sw,w
  5639  03AA  0086               	movwf	6
  5640  03AB  086D               	movf	_Sw+1,w
  5641  03AC  0087               	movwf	7
  5642  03AD  1C81               	btfss	1,1
  5643  03AE  2C73               	goto	l10128
  5644                           
  5645                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  5646  03AF  086C               	movf	_Sw,w
  5647  03B0  0086               	movwf	6
  5648  03B1  086D               	movf	_Sw+1,w
  5649  03B2  0087               	movwf	7
  5650  03B3  1901               	btfsc	1,2
  5651  03B4  2BD6               	goto	l10094
  5652                           
  5653                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  5654  03B5  3001               	movlw	1
  5655  03B6  00E5               	movwf	??_setSw_Main
  5656  03B7  086C               	movf	_Sw,w
  5657  03B8  0086               	movwf	6
  5658  03B9  086D               	movf	_Sw+1,w
  5659  03BA  0087               	movwf	7
  5660  03BB  3142               	addfsr 1,2
  5661  03BC  0865               	movf	??_setSw_Main,w
  5662  03BD  0781               	addwf	1,f
  5663                           
  5664                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  5665  03BE  086C               	movf	_Sw,w
  5666  03BF  0086               	movwf	6
  5667  03C0  086D               	movf	_Sw+1,w
  5668  03C1  0087               	movwf	7
  5669  03C2  3142               	addfsr 1,2
  5670  03C3  3005               	movlw	5
  5671  03C4  0201               	subwf	1,w
  5672  03C5  1C03               	skipc
  5673  03C6  0008               	return
  5674                           
  5675                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  5676  03C7  086C               	movf	_Sw,w
  5677  03C8  0086               	movwf	6
  5678  03C9  086D               	movf	_Sw+1,w
  5679  03CA  0087               	movwf	7
  5680  03CB  3142               	addfsr 1,2
  5681  03CC  0181               	clrf	1
  5682                           
  5683                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  5684  03CD  086C               	movf	_Sw,w
  5685  03CE  0086               	movwf	6
  5686  03CF  086D               	movf	_Sw+1,w
  5687  03D0  0087               	movwf	7
  5688  03D1  1501               	bsf	1,2
  5689                           
  5690                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  5691  03D2  0869               	movf	setSw_Main@sw,w
  5692  03D3  3189  2188         	fcall	_Sw_DimmerOnFunc
  5693                           
  5694                           ;Switch_B1.c: 173: }
  5695                           ;Switch_B1.c: 174: } else {
  5696  03D5  0008               	return
  5697  03D6                     l10094:	
  5698                           
  5699                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  5700  03D6  0020               	movlb	0	; select bank0
  5701  03D7  086C               	movf	_Sw,w
  5702  03D8  0086               	movwf	6
  5703  03D9  086D               	movf	_Sw+1,w
  5704  03DA  0087               	movwf	7
  5705  03DB  1981               	btfsc	1,3
  5706  03DC  2C03               	goto	l10104
  5707                           
  5708                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  5709  03DD  086C               	movf	_Sw,w
  5710  03DE  0086               	movwf	6
  5711  03DF  086D               	movf	_Sw+1,w
  5712  03E0  0087               	movwf	7
  5713  03E1  3143               	addfsr 1,3
  5714  03E2  3001               	movlw	1
  5715  03E3  0781               	addwf	1,f
  5716  03E4  3141               	addfsr 1,1
  5717  03E5  1803               	skipnc
  5718  03E6  0A81               	incf	1,f
  5719                           
  5720                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  5721  03E7  086C               	movf	_Sw,w
  5722  03E8  0086               	movwf	6
  5723  03E9  086D               	movf	_Sw+1,w
  5724  03EA  0087               	movwf	7
  5725  03EB  3143               	addfsr 1,3
  5726  03EC  3F40               	moviw [0]fsr1
  5727  03ED  00E5               	movwf	??_setSw_Main
  5728  03EE  3F41               	moviw [1]fsr1
  5729  03EF  00E6               	movwf	??_setSw_Main+1
  5730  03F0  3000               	movlw	0
  5731  03F1  0266               	subwf	??_setSw_Main+1,w
  5732  03F2  3096               	movlw	150
  5733  03F3  1903               	skipnz
  5734  03F4  0265               	subwf	??_setSw_Main,w
  5735  03F5  1C03               	skipc
  5736  03F6  0008               	return
  5737                           
  5738                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  5739  03F7  086C               	movf	_Sw,w
  5740  03F8  0086               	movwf	6
  5741  03F9  086D               	movf	_Sw+1,w
  5742  03FA  0087               	movwf	7
  5743  03FB  3143               	addfsr 1,3
  5744  03FC  3000               	movlw	0
  5745  03FD  3FC0               	movwi [0]fsr1
  5746  03FE  3FC1               	movwi [1]fsr1
  5747                           
  5748                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  5749  03FF  0869               	movf	setSw_Main@sw,w
  5750  0400  3194  2470         	fcall	_Sw_DimmerAdjFunc
  5751                           
  5752                           ;Switch_B1.c: 184: }
  5753                           ;Switch_B1.c: 185: } else {
  5754  0402  0008               	return
  5755  0403                     l10104:	
  5756                           
  5757                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  5758  0403  0020               	movlb	0	; select bank0
  5759  0404  086C               	movf	_Sw,w
  5760  0405  0086               	movwf	6
  5761  0406  086D               	movf	_Sw+1,w
  5762  0407  0087               	movwf	7
  5763  0408  1A01               	btfsc	1,4
  5764  0409  2C41               	goto	l10118
  5765                           
  5766                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  5767  040A  086C               	movf	_Sw,w
  5768  040B  0086               	movwf	6
  5769  040C  086D               	movf	_Sw+1,w
  5770  040D  0087               	movwf	7
  5771  040E  3145               	addfsr 1,5
  5772  040F  3001               	movlw	1
  5773  0410  0781               	addwf	1,f
  5774  0411  3141               	addfsr 1,1
  5775  0412  1803               	skipnc
  5776  0413  0A81               	incf	1,f
  5777                           
  5778                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  5779  0414  086C               	movf	_Sw,w
  5780  0415  0086               	movwf	6
  5781  0416  086D               	movf	_Sw+1,w
  5782  0417  0087               	movwf	7
  5783  0418  3145               	addfsr 1,5
  5784  0419  3F40               	moviw [0]fsr1
  5785  041A  00E5               	movwf	??_setSw_Main
  5786  041B  3F41               	moviw [1]fsr1
  5787  041C  00E6               	movwf	??_setSw_Main+1
  5788  041D  3000               	movlw	0
  5789  041E  0266               	subwf	??_setSw_Main+1,w
  5790  041F  3096               	movlw	150
  5791  0420  1903               	skipnz
  5792  0421  0265               	subwf	??_setSw_Main,w
  5793  0422  1C03               	skipc
  5794  0423  0008               	return
  5795                           
  5796                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  5797  0424  086C               	movf	_Sw,w
  5798  0425  0086               	movwf	6
  5799  0426  086D               	movf	_Sw+1,w
  5800  0427  0087               	movwf	7
  5801  0428  3145               	addfsr 1,5
  5802  0429  3000               	movlw	0
  5803  042A  3FC0               	movwi [0]fsr1
  5804  042B  3FC1               	movwi [1]fsr1
  5805                           
  5806                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  5807  042C  086C               	movf	_Sw,w
  5808  042D  0086               	movwf	6
  5809  042E  086D               	movf	_Sw+1,w
  5810  042F  0087               	movwf	7
  5811  0430  1601               	bsf	1,4
  5812                           
  5813                           ;Switch_B1.c: 193: setRF_Learn(1);
  5814  0431  3001               	movlw	1
  5815  0432  319A  2286  3183   	fcall	_setRF_Learn
  5816                           
  5817                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  5818  0435  0021               	movlb	1	; select bank1
  5819  0436  1FA0               	btfss	_myMain^(0+128),7
  5820  0437  0008               	return
  5821                           
  5822                           ;Switch_B1.c: 196: setBuz(2, 100);
  5823  0438  3064               	movlw	100
  5824  0439  0020               	movlb	0	; select bank0
  5825  043A  00A9               	movwf	setBuz@time
  5826  043B  3000               	movlw	0
  5827  043C  00AA               	movwf	setBuz@time+1
  5828  043D  3002               	movlw	2
  5829  043E  3195  25BE         	fcall	_setBuz
  5830                           
  5831                           ;Switch_B1.c: 197: }
  5832                           ;Switch_B1.c: 199: }
  5833                           ;Switch_B1.c: 200: } else {
  5834  0440  0008               	return
  5835  0441                     l10118:	
  5836                           
  5837                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  5838  0441  0020               	movlb	0	; select bank0
  5839  0442  086C               	movf	_Sw,w
  5840  0443  0086               	movwf	6
  5841  0444  086D               	movf	_Sw+1,w
  5842  0445  0087               	movwf	7
  5843  0446  1A81               	btfsc	1,5
  5844  0447  0008               	return
  5845                           
  5846                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  5847  0448  086C               	movf	_Sw,w
  5848  0449  0086               	movwf	6
  5849  044A  086D               	movf	_Sw+1,w
  5850  044B  0087               	movwf	7
  5851  044C  3147               	addfsr 1,7
  5852  044D  3001               	movlw	1
  5853  044E  0781               	addwf	1,f
  5854  044F  3141               	addfsr 1,1
  5855  0450  1803               	skipnc
  5856  0451  0A81               	incf	1,f
  5857                           
  5858                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  5859  0452  086C               	movf	_Sw,w
  5860  0453  0086               	movwf	6
  5861  0454  086D               	movf	_Sw+1,w
  5862  0455  0087               	movwf	7
  5863  0456  3147               	addfsr 1,7
  5864  0457  3F40               	moviw [0]fsr1
  5865  0458  00E5               	movwf	??_setSw_Main
  5866  0459  3F41               	moviw [1]fsr1
  5867  045A  00E6               	movwf	??_setSw_Main+1
  5868  045B  3001               	movlw	1
  5869  045C  0266               	subwf	??_setSw_Main+1,w
  5870  045D  302C               	movlw	44
  5871  045E  1903               	skipnz
  5872  045F  0265               	subwf	??_setSw_Main,w
  5873  0460  1C03               	skipc
  5874  0461  0008               	return
  5875                           
  5876                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5877  0462  086C               	movf	_Sw,w
  5878  0463  0086               	movwf	6
  5879  0464  086D               	movf	_Sw+1,w
  5880  0465  0087               	movwf	7
  5881  0466  3147               	addfsr 1,7
  5882  0467  3000               	movlw	0
  5883  0468  3FC0               	movwi [0]fsr1
  5884  0469  3FC1               	movwi [1]fsr1
  5885                           
  5886                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  5887  046A  086C               	movf	_Sw,w
  5888  046B  0086               	movwf	6
  5889  046C  086D               	movf	_Sw+1,w
  5890  046D  0087               	movwf	7
  5891  046E  1681               	bsf	1,5
  5892                           
  5893                           ;Switch_B1.c: 208: setRF_Learn(0);
  5894  046F  3000               	movlw	0
  5895  0470  319A  2286         	fcall	_setRF_Learn
  5896                           
  5897                           ;Switch_B1.c: 211: }
  5898                           ;Switch_B1.c: 212: }
  5899                           ;Switch_B1.c: 213: }
  5900                           ;Switch_B1.c: 214: }
  5901                           ;Switch_B1.c: 215: }
  5902                           ;Switch_B1.c: 216: } else {
  5903  0472  0008               	return
  5904  0473                     l10128:	
  5905                           
  5906                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  5907  0473  0020               	movlb	0	; select bank0
  5908  0474  086C               	movf	_Sw,w
  5909  0475  0086               	movwf	6
  5910  0476  086D               	movf	_Sw+1,w
  5911  0477  0087               	movwf	7
  5912  0478  1D01               	btfss	1,2
  5913  0479  0008               	return
  5914                           
  5915                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  5916  047A  3001               	movlw	1
  5917  047B  00E5               	movwf	??_setSw_Main
  5918  047C  086C               	movf	_Sw,w
  5919  047D  0086               	movwf	6
  5920  047E  086D               	movf	_Sw+1,w
  5921  047F  0087               	movwf	7
  5922  0480  3142               	addfsr 1,2
  5923  0481  0865               	movf	??_setSw_Main,w
  5924  0482  0781               	addwf	1,f
  5925                           
  5926                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  5927  0483  086C               	movf	_Sw,w
  5928  0484  0086               	movwf	6
  5929  0485  086D               	movf	_Sw+1,w
  5930  0486  0087               	movwf	7
  5931  0487  3142               	addfsr 1,2
  5932  0488  3005               	movlw	5
  5933  0489  0201               	subwf	1,w
  5934  048A  1C03               	skipc
  5935  048B  0008               	return
  5936                           
  5937                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  5938  048C  086C               	movf	_Sw,w
  5939  048D  0086               	movwf	6
  5940  048E  086D               	movf	_Sw+1,w
  5941  048F  0087               	movwf	7
  5942  0490  3142               	addfsr 1,2
  5943  0491  0181               	clrf	1
  5944                           
  5945                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  5946  0492  086C               	movf	_Sw,w
  5947  0493  0086               	movwf	6
  5948  0494  086D               	movf	_Sw+1,w
  5949  0495  0087               	movwf	7
  5950  0496  1101               	bcf	1,2
  5951                           
  5952                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  5953  0497  086C               	movf	_Sw,w
  5954  0498  0086               	movwf	6
  5955  0499  086D               	movf	_Sw+1,w
  5956  049A  0087               	movwf	7
  5957  049B  3143               	addfsr 1,3
  5958  049C  3000               	movlw	0
  5959  049D  3FC0               	movwi [0]fsr1
  5960  049E  3FC1               	movwi [1]fsr1
  5961                           
  5962                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  5963  049F  086C               	movf	_Sw,w
  5964  04A0  0086               	movwf	6
  5965  04A1  086D               	movf	_Sw+1,w
  5966  04A2  0087               	movwf	7
  5967  04A3  1181               	bcf	1,3
  5968                           
  5969                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  5970  04A4  086C               	movf	_Sw,w
  5971  04A5  0086               	movwf	6
  5972  04A6  086D               	movf	_Sw+1,w
  5973  04A7  0087               	movwf	7
  5974  04A8  3145               	addfsr 1,5
  5975  04A9  3000               	movlw	0
  5976  04AA  3FC0               	movwi [0]fsr1
  5977  04AB  3FC1               	movwi [1]fsr1
  5978                           
  5979                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  5980  04AC  086C               	movf	_Sw,w
  5981  04AD  0086               	movwf	6
  5982  04AE  086D               	movf	_Sw+1,w
  5983  04AF  0087               	movwf	7
  5984  04B0  1201               	bcf	1,4
  5985                           
  5986                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  5987  04B1  086C               	movf	_Sw,w
  5988  04B2  0086               	movwf	6
  5989  04B3  086D               	movf	_Sw+1,w
  5990  04B4  0087               	movwf	7
  5991  04B5  3147               	addfsr 1,7
  5992  04B6  3000               	movlw	0
  5993  04B7  3FC0               	movwi [0]fsr1
  5994  04B8  3FC1               	movwi [1]fsr1
  5995                           
  5996                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  5997  04B9  086C               	movf	_Sw,w
  5998  04BA  0086               	movwf	6
  5999  04BB  086D               	movf	_Sw+1,w
  6000  04BC  0087               	movwf	7
  6001  04BD  1281               	bcf	1,5
  6002                           
  6003                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  6004  04BE  0869               	movf	setSw_Main@sw,w
  6005  04BF  3189  2117  3183   	fcall	_Sw_DimmerOffFunc
  6006                           
  6007                           ;Switch_B1.c: 232: setRF_Learn(0);
  6008  04C2  3000               	movlw	0
  6009  04C3  319A  2286         	fcall	_setRF_Learn
  6010  04C5  0008               	return
  6011  04C6                     __end_of_setSw_Main:	
  6012                           
  6013                           	psect	text18
  6014  1A86                     __ptext18:	
  6015 ;; *************** function _setRF_Learn *****************
  6016 ;; Defined at:
  6017 ;;		line 23 in file "../src/RF_Control_B1.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;  command         1    wreg     unsigned char 
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  command         1    0[BANK0 ] unsigned char 
  6022 ;; Return value:  Size  Location     Type
  6023 ;;		None               void
  6024 ;; Registers used:
  6025 ;;		wreg
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6034 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6035 ;;Total ram usage:        1 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    5
  6038 ;; This function calls:
  6039 ;;		Nothing
  6040 ;; This function is called by:
  6041 ;;		_setSw_Main
  6042 ;; This function uses a non-reentrant model
  6043 ;;
  6044                           
  6045                           
  6046                           ;psect for function _setRF_Learn
  6047  1A86                     _setRF_Learn:	
  6048                           
  6049                           ;incstack = 0
  6050                           ; Regs used in _setRF_Learn: [wreg]
  6051                           ;setRF_Learn@command stored from wreg
  6052  1A86  0020               	movlb	0	; select bank0
  6053  1A87  00A0               	movwf	setRF_Learn@command
  6054                           
  6055                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  6056  1A88  0820               	movf	setRF_Learn@command,w
  6057  1A89  0021               	movlb	1	; select bank1
  6058  1A8A  133E               	bcf	_RF1^(0+128),6
  6059  1A8B  1D03               	skipz
  6060  1A8C  173E               	bsf	_RF1^(0+128),6
  6061  1A8D  0008               	return
  6062  1A8E                     __end_of_setRF_Learn:	
  6063                           
  6064                           	psect	text19
  6065  0988                     __ptext19:	
  6066 ;; *************** function _Sw_DimmerOnFunc *****************
  6067 ;; Defined at:
  6068 ;;		line 241 in file "../src/Switch_B1.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;  sw              1    wreg     unsigned char 
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;  sw              1   67[BANK0 ] unsigned char 
  6073 ;;  Idle            1   66[BANK0 ] unsigned char 
  6074 ;; Return value:  Size  Location     Type
  6075 ;;		None               void
  6076 ;; Registers used:
  6077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6078 ;; Tracked objects:
  6079 ;;		On entry : 0/0
  6080 ;;		On exit  : 0/0
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;Total ram usage:        2 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:    9
  6090 ;; This function calls:
  6091 ;;		_setBuz
  6092 ;;		_setDimmerLights_Switch
  6093 ;;		_setDimmerLights_Trigger
  6094 ;;		_setRFSW_Status
  6095 ;;		_setRF_DimmerLights
  6096 ;;		_setTxData
  6097 ;; This function is called by:
  6098 ;;		_setSw_Main
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           
  6103                           ;psect for function _Sw_DimmerOnFunc
  6104  0988                     _Sw_DimmerOnFunc:	
  6105                           
  6106                           ;incstack = 0
  6107                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6108                           ;Sw_DimmerOnFunc@sw stored from wreg
  6109  0988  0020               	movlb	0	; select bank0
  6110  0989  00E3               	movwf	Sw_DimmerOnFunc@sw
  6111                           
  6112                           ;Switch_B1.c: 242: char Idle = 1;
  6113  098A  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6114  098B  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6115                           
  6116                           ;Switch_B1.c: 256: if (sw == 1) {
  6117  098C  0863               	movf	Sw_DimmerOnFunc@sw,w
  6118  098D  3A01               	xorlw	1
  6119  098E  1D03               	skipz
  6120  098F  299A               	goto	l9476
  6121                           
  6122                           ;Switch_B1.c: 257: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6123  0990  1003               	clrc
  6124  0991  0022               	movlb	2	; select bank2
  6125  0992  1DD4               	btfss	(_DimmerLights2^(0+256)+8),3
  6126  0993  1403               	setc
  6127  0994  3000               	movlw	0
  6128  0995  1803               	btfsc	3,0
  6129  0996  3001               	movlw	1
  6130  0997  0020               	movlb	0	; select bank0
  6131  0998  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6132                           
  6133                           ;Switch_B1.c: 258: } else if (sw == 2) {
  6134  0999  29A7               	goto	l9480
  6135  099A                     l9476:	
  6136  099A  0863               	movf	Sw_DimmerOnFunc@sw,w
  6137  099B  3A02               	xorlw	2
  6138  099C  1D03               	skipz
  6139  099D  29A7               	goto	l9480
  6140                           
  6141                           ;Switch_B1.c: 259: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6142  099E  1003               	clrc
  6143  099F  0022               	movlb	2	; select bank2
  6144  09A0  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  6145  09A1  1403               	setc
  6146  09A2  3000               	movlw	0
  6147  09A3  1803               	btfsc	3,0
  6148  09A4  3001               	movlw	1
  6149  09A5  0020               	movlb	0	; select bank0
  6150  09A6  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6151  09A7                     l9480:	
  6152                           
  6153                           ;Switch_B1.c: 260: }
  6154                           ;Switch_B1.c: 263: if (Idle == 1) {
  6155  09A7  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6156  09A8  3A01               	xorlw	1
  6157  09A9  1D03               	skipz
  6158  09AA  0008               	return
  6159                           
  6160                           ;Switch_B1.c: 264: Sw->Flag = 1;
  6161  09AB  086C               	movf	_Sw,w
  6162  09AC  0086               	movwf	6
  6163  09AD  086D               	movf	_Sw+1,w
  6164  09AE  0087               	movwf	7
  6165  09AF  1781               	bsf	1,7
  6166                           
  6167                           ;Switch_B1.c: 265: setBuz(1, 100);
  6168  09B0  3064               	movlw	100
  6169  09B1  00A9               	movwf	setBuz@time
  6170  09B2  3000               	movlw	0
  6171  09B3  00AA               	movwf	setBuz@time+1
  6172  09B4  3001               	movlw	1
  6173  09B5  3195  25BE  3189   	fcall	_setBuz
  6174                           
  6175                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  6176  09B8  0020               	movlb	0	; select bank0
  6177  09B9  086C               	movf	_Sw,w
  6178  09BA  0086               	movwf	6
  6179  09BB  086D               	movf	_Sw+1,w
  6180  09BC  0087               	movwf	7
  6181  09BD  1B01               	btfsc	1,6
  6182  09BE  29E8               	goto	l9500
  6183                           
  6184                           ;Switch_B1.c: 267: Sw->Status = 1;
  6185  09BF  086C               	movf	_Sw,w
  6186  09C0  0086               	movwf	6
  6187  09C1  086D               	movf	_Sw+1,w
  6188  09C2  0087               	movwf	7
  6189  09C3  1701               	bsf	1,6
  6190                           
  6191                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  6192  09C4  01A2               	clrf	setRFSW_Status@command
  6193  09C5  0AA2               	incf	setRFSW_Status@command,f
  6194  09C6  0863               	movf	Sw_DimmerOnFunc@sw,w
  6195  09C7  319B  2359  3189   	fcall	_setRFSW_Status
  6196                           
  6197                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  6198  09CA  0020               	movlb	0	; select bank0
  6199  09CB  01A2               	clrf	setDimmerLights_Trigger@command
  6200  09CC  0AA2               	incf	setDimmerLights_Trigger@command,f
  6201  09CD  0863               	movf	Sw_DimmerOnFunc@sw,w
  6202  09CE  319B  23A5  3189   	fcall	_setDimmerLights_Trigger
  6203                           
  6204                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  6205  09D1  0020               	movlb	0	; select bank0
  6206  09D2  01A2               	clrf	setDimmerLights_Switch@command
  6207  09D3  0AA2               	incf	setDimmerLights_Switch@command,f
  6208  09D4  0863               	movf	Sw_DimmerOnFunc@sw,w
  6209  09D5  319B  2395  3189   	fcall	_setDimmerLights_Switch
  6210                           
  6211                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  6212  09D8  0020               	movlb	0	; select bank0
  6213  09D9  086C               	movf	_Sw,w
  6214  09DA  0086               	movwf	6
  6215  09DB  086D               	movf	_Sw+1,w
  6216  09DC  0087               	movwf	7
  6217  09DD  3000               	movlw	0
  6218  09DE  1B01               	btfsc	1,6
  6219  09DF  3001               	movlw	1
  6220  09E0  00DD               	movwf	setRF_DimmerLights@on
  6221  09E1  0863               	movf	Sw_DimmerOnFunc@sw,w
  6222  09E2  3188  20AB  3189   	fcall	_setRF_DimmerLights
  6223                           
  6224                           ;Switch_B1.c: 274: setTxData();
  6225  09E5  318F  2747         	fcall	_setTxData
  6226                           
  6227                           ;Switch_B1.c: 276: } else {
  6228  09E7  0008               	return
  6229  09E8                     l9500:	
  6230                           
  6231                           ;Switch_B1.c: 277: Sw->Status = 0;
  6232  09E8  0020               	movlb	0	; select bank0
  6233  09E9  086C               	movf	_Sw,w
  6234  09EA  0086               	movwf	6
  6235  09EB  086D               	movf	_Sw+1,w
  6236  09EC  0087               	movwf	7
  6237  09ED  1301               	bcf	1,6
  6238                           
  6239                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  6240  09EE  086C               	movf	_Sw,w
  6241  09EF  0086               	movwf	6
  6242  09F0  086D               	movf	_Sw+1,w
  6243  09F1  0087               	movwf	7
  6244  09F2  3000               	movlw	0
  6245  09F3  1B01               	btfsc	1,6
  6246  09F4  3001               	movlw	1
  6247  09F5  00A2               	movwf	setRFSW_Status@command
  6248  09F6  0863               	movf	Sw_DimmerOnFunc@sw,w
  6249  09F7  319B  2359         	fcall	_setRFSW_Status
  6250  09F9  0008               	return
  6251  09FA                     __end_of_Sw_DimmerOnFunc:	
  6252                           
  6253                           	psect	text20
  6254  0917                     __ptext20:	
  6255 ;; *************** function _Sw_DimmerOffFunc *****************
  6256 ;; Defined at:
  6257 ;;		line 284 in file "../src/Switch_B1.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;  sw              1    wreg     unsigned char 
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;  sw              1   68[BANK0 ] unsigned char 
  6262 ;; Return value:  Size  Location     Type
  6263 ;;		None               void
  6264 ;; Registers used:
  6265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/0
  6268 ;;		On exit  : 0/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6275 ;;Total ram usage:        3 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; Hardware stack levels required when called:    9
  6278 ;; This function calls:
  6279 ;;		_setDelayOff_GO
  6280 ;;		_setDimmerLights_AdjGo
  6281 ;;		_setDimmerLights_Switch
  6282 ;;		_setDimmerLights_Trigger
  6283 ;;		_setDimmerLights_TriggerAdj
  6284 ;;		_setRF_DimmerLights
  6285 ;;		_setTxData
  6286 ;; This function is called by:
  6287 ;;		_setSw_Main
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           
  6292                           ;psect for function _Sw_DimmerOffFunc
  6293  0917                     _Sw_DimmerOffFunc:	
  6294                           
  6295                           ;incstack = 0
  6296                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6297                           ;Sw_DimmerOffFunc@sw stored from wreg
  6298  0917  0020               	movlb	0	; select bank0
  6299  0918  00E4               	movwf	Sw_DimmerOffFunc@sw
  6300                           
  6301                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  6302  0919  086C               	movf	_Sw,w
  6303  091A  0086               	movwf	6
  6304  091B  086D               	movf	_Sw+1,w
  6305  091C  0087               	movwf	7
  6306  091D  1F81               	btfss	1,7
  6307  091E  0008               	return
  6308                           
  6309                           ;Switch_B1.c: 286: Sw->Flag = 0;
  6310  091F  086C               	movf	_Sw,w
  6311  0920  0086               	movwf	6
  6312  0921  086D               	movf	_Sw+1,w
  6313  0922  0087               	movwf	7
  6314  0923  1381               	bcf	1,7
  6315                           
  6316                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  6317  0924  086C               	movf	_Sw,w
  6318  0925  0086               	movwf	6
  6319  0926  086D               	movf	_Sw+1,w
  6320  0927  0087               	movwf	7
  6321  0928  1F01               	btfss	1,6
  6322  0929  2964               	goto	l9544
  6323                           
  6324                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  6325  092A  086C               	movf	_Sw,w
  6326  092B  0086               	movwf	6
  6327  092C  086D               	movf	_Sw+1,w
  6328  092D  0087               	movwf	7
  6329  092E  3141               	addfsr 1,1
  6330  092F  1C01               	btfss	1,0
  6331  0930  0008               	return
  6332                           
  6333                           ;Switch_B1.c: 289: Sw->Adj = 0;
  6334  0931  086C               	movf	_Sw,w
  6335  0932  0086               	movwf	6
  6336  0933  086D               	movf	_Sw+1,w
  6337  0934  0087               	movwf	7
  6338  0935  3141               	addfsr 1,1
  6339  0936  1001               	bcf	1,0
  6340                           
  6341                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  6342  0937  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6343  0938  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6344  0939  0864               	movf	Sw_DimmerOffFunc@sw,w
  6345  093A  319B  23D5  3189   	fcall	_setDimmerLights_TriggerAdj
  6346                           
  6347                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  6348  093D  0020               	movlb	0	; select bank0
  6349  093E  01A2               	clrf	setDimmerLights_AdjGo@command
  6350  093F  0864               	movf	Sw_DimmerOffFunc@sw,w
  6351  0940  319B  23C5  3189   	fcall	_setDimmerLights_AdjGo
  6352                           
  6353                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  6354  0943  0020               	movlb	0	; select bank0
  6355  0944  0864               	movf	Sw_DimmerOffFunc@sw,w
  6356  0945  3E1A               	addlw	26
  6357  0946  076E               	addwf	_product,w
  6358  0947  00E2               	movwf	??_Sw_DimmerOffFunc
  6359  0948  0862               	movf	??_Sw_DimmerOffFunc,w
  6360  0949  0086               	movwf	6
  6361  094A  3002               	movlw	2	; select bank4/5
  6362  094B  0087               	movwf	7
  6363  094C  0801               	movf	1,w
  6364  094D  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6365  094E  086E               	movf	_product,w
  6366  094F  3E11               	addlw	17
  6367  0950  0086               	movwf	6
  6368  0951  3002               	movlw	2	; select bank4/5
  6369  0952  0087               	movwf	7
  6370  0953  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6371  0954  0081               	movwf	1
  6372                           
  6373                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  6374  0955  086C               	movf	_Sw,w
  6375  0956  0086               	movwf	6
  6376  0957  086D               	movf	_Sw+1,w
  6377  0958  0087               	movwf	7
  6378  0959  3000               	movlw	0
  6379  095A  1B01               	btfsc	1,6
  6380  095B  3001               	movlw	1
  6381  095C  00DD               	movwf	setRF_DimmerLights@on
  6382  095D  0864               	movf	Sw_DimmerOffFunc@sw,w
  6383  095E  3188  20AB  3189   	fcall	_setRF_DimmerLights
  6384                           
  6385                           ;Switch_B1.c: 295: setTxData();
  6386  0961  318F  2747         	fcall	_setTxData
  6387                           
  6388                           ;Switch_B1.c: 297: }
  6389                           ;Switch_B1.c: 298: } else {
  6390  0963  0008               	return
  6391  0964                     l9544:	
  6392                           
  6393                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  6394  0964  0020               	movlb	0	; select bank0
  6395  0965  01A2               	clrf	setDimmerLights_Trigger@command
  6396  0966  0AA2               	incf	setDimmerLights_Trigger@command,f
  6397  0967  0864               	movf	Sw_DimmerOffFunc@sw,w
  6398  0968  319B  23A5  3189   	fcall	_setDimmerLights_Trigger
  6399                           
  6400                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  6401  096B  0020               	movlb	0	; select bank0
  6402  096C  01A2               	clrf	setDimmerLights_Switch@command
  6403  096D  0864               	movf	Sw_DimmerOffFunc@sw,w
  6404  096E  319B  2395  3189   	fcall	_setDimmerLights_Switch
  6405                           
  6406                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  6407  0971  0020               	movlb	0	; select bank0
  6408  0972  01AA               	clrf	setDelayOff_GO@command
  6409  0973  01AB               	clrf	setDelayOff_GO@value
  6410  0974  0864               	movf	Sw_DimmerOffFunc@sw,w
  6411  0975  3197  2732  3189   	fcall	_setDelayOff_GO
  6412                           
  6413                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  6414  0978  0020               	movlb	0	; select bank0
  6415  0979  086C               	movf	_Sw,w
  6416  097A  0086               	movwf	6
  6417  097B  086D               	movf	_Sw+1,w
  6418  097C  0087               	movwf	7
  6419  097D  3000               	movlw	0
  6420  097E  1B01               	btfsc	1,6
  6421  097F  3001               	movlw	1
  6422  0980  00DD               	movwf	setRF_DimmerLights@on
  6423  0981  0864               	movf	Sw_DimmerOffFunc@sw,w
  6424  0982  3188  20AB  3189   	fcall	_setRF_DimmerLights
  6425                           
  6426                           ;Switch_B1.c: 304: setTxData();
  6427  0985  318F  2747         	fcall	_setTxData
  6428  0987  0008               	return
  6429  0988                     __end_of_Sw_DimmerOffFunc:	
  6430                           
  6431                           	psect	text21
  6432  1470                     __ptext21:	
  6433 ;; *************** function _Sw_DimmerAdjFunc *****************
  6434 ;; Defined at:
  6435 ;;		line 311 in file "../src/Switch_B1.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;  sw              1    wreg     unsigned char 
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;  sw              1    5[BANK0 ] unsigned char 
  6440 ;;  Idle            1    4[BANK0 ] unsigned char 
  6441 ;; Return value:  Size  Location     Type
  6442 ;;		None               void
  6443 ;; Registers used:
  6444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;Total ram usage:        2 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    7
  6457 ;; This function calls:
  6458 ;;		_setDimmerLights_AdjGo
  6459 ;;		_setDimmerLights_TriggerAdj
  6460 ;;		_setRFSW_Status
  6461 ;; This function is called by:
  6462 ;;		_setSw_Main
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           
  6467                           ;psect for function _Sw_DimmerAdjFunc
  6468  1470                     _Sw_DimmerAdjFunc:	
  6469                           
  6470                           ;incstack = 0
  6471                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6472                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6473  1470  0020               	movlb	0	; select bank0
  6474  1471  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6475                           
  6476                           ;Switch_B1.c: 312: char Idle = 1;
  6477  1472  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6478  1473  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6479                           
  6480                           ;Switch_B1.c: 325: if (sw == 1) {
  6481  1474  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6482  1475  3A01               	xorlw	1
  6483  1476  1D03               	skipz
  6484  1477  2C82               	goto	l9510
  6485                           
  6486                           ;Switch_B1.c: 326: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6487  1478  1003               	clrc
  6488  1479  0022               	movlb	2	; select bank2
  6489  147A  1DD4               	btfss	(_DimmerLights2^(0+256)+8),3
  6490  147B  1403               	setc
  6491  147C  3000               	movlw	0
  6492  147D  1803               	btfsc	3,0
  6493  147E  3001               	movlw	1
  6494  147F  0020               	movlb	0	; select bank0
  6495  1480  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6496                           
  6497                           ;Switch_B1.c: 327: } else if (sw == 2) {
  6498  1481  2C8F               	goto	l9514
  6499  1482                     l9510:	
  6500  1482  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6501  1483  3A02               	xorlw	2
  6502  1484  1D03               	skipz
  6503  1485  2C8F               	goto	l9514
  6504                           
  6505                           ;Switch_B1.c: 328: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6506  1486  1003               	clrc
  6507  1487  0022               	movlb	2	; select bank2
  6508  1488  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  6509  1489  1403               	setc
  6510  148A  3000               	movlw	0
  6511  148B  1803               	btfsc	3,0
  6512  148C  3001               	movlw	1
  6513  148D  0020               	movlb	0	; select bank0
  6514  148E  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6515  148F                     l9514:	
  6516                           
  6517                           ;Switch_B1.c: 329: }
  6518                           ;Switch_B1.c: 332: if (Idle == 1) {
  6519  148F  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6520  1490  3A01               	xorlw	1
  6521  1491  1D03               	skipz
  6522  1492  0008               	return
  6523                           
  6524                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  6525  1493  086C               	movf	_Sw,w
  6526  1494  0086               	movwf	6
  6527  1495  086D               	movf	_Sw+1,w
  6528  1496  0087               	movwf	7
  6529  1497  1F81               	btfss	1,7
  6530  1498  0008               	return
  6531                           
  6532                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  6533  1499  086C               	movf	_Sw,w
  6534  149A  0086               	movwf	6
  6535  149B  086D               	movf	_Sw+1,w
  6536  149C  0087               	movwf	7
  6537  149D  1581               	bsf	1,3
  6538                           
  6539                           ;Switch_B1.c: 335: Sw->Adj = 1;
  6540  149E  086C               	movf	_Sw,w
  6541  149F  0086               	movwf	6
  6542  14A0  086D               	movf	_Sw+1,w
  6543  14A1  0087               	movwf	7
  6544  14A2  3141               	addfsr 1,1
  6545  14A3  1401               	bsf	1,0
  6546                           
  6547                           ;Switch_B1.c: 336: Sw->Status = 1;
  6548  14A4  086C               	movf	_Sw,w
  6549  14A5  0086               	movwf	6
  6550  14A6  086D               	movf	_Sw+1,w
  6551  14A7  0087               	movwf	7
  6552  14A8  1701               	bsf	1,6
  6553                           
  6554                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  6555  14A9  01A2               	clrf	setRFSW_Status@command
  6556  14AA  0AA2               	incf	setRFSW_Status@command,f
  6557  14AB  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6558  14AC  319B  2359  3194   	fcall	_setRFSW_Status
  6559                           
  6560                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  6561  14AF  0020               	movlb	0	; select bank0
  6562  14B0  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6563  14B1  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6564  14B2  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6565  14B3  319B  23D5  3194   	fcall	_setDimmerLights_TriggerAdj
  6566                           
  6567                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  6568  14B6  0020               	movlb	0	; select bank0
  6569  14B7  01A2               	clrf	setDimmerLights_AdjGo@command
  6570  14B8  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6571  14B9  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6572  14BA  319B  23C5         	fcall	_setDimmerLights_AdjGo
  6573  14BC  0008               	return
  6574  14BD                     __end_of_Sw_DimmerAdjFunc:	
  6575                           
  6576                           	psect	text22
  6577  1BD5                     __ptext22:	
  6578 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6579 ;; Defined at:
  6580 ;;		line 722 in file "../src/Dimmer_B1.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;  lights          1    wreg     unsigned char 
  6583 ;;  command         1    2[BANK0 ] unsigned char 
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;  lights          1    3[BANK0 ] unsigned char 
  6586 ;; Return value:  Size  Location     Type
  6587 ;;		None               void
  6588 ;; Registers used:
  6589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6595 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;Total ram usage:        2 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    6
  6602 ;; This function calls:
  6603 ;;		_DimmerLightsPointSelect
  6604 ;; This function is called by:
  6605 ;;		_Sw_DimmerOffFunc
  6606 ;;		_Sw_DimmerAdjFunc
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           
  6611                           ;psect for function _setDimmerLights_TriggerAdj
  6612  1BD5                     _setDimmerLights_TriggerAdj:	
  6613                           
  6614                           ;incstack = 0
  6615                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6616                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6617  1BD5  0020               	movlb	0	; select bank0
  6618  1BD6  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6619                           
  6620                           ;Dimmer_B1.c: 724: DimmerLightsPointSelect(lights);
  6621  1BD7  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6622  1BD8  319C  2460         	fcall	_DimmerLightsPointSelect
  6623                           
  6624                           ;Dimmer_B1.c: 725: DimmerLights->TriggerAdj = command;
  6625  1BDA  0874               	movf	_DimmerLights,w
  6626  1BDB  3E08               	addlw	8
  6627  1BDC  0086               	movwf	6
  6628  1BDD  3001               	movlw	1	; select bank2/3
  6629  1BDE  0087               	movwf	7
  6630  1BDF  0020               	movlb	0	; select bank0
  6631  1BE0  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6632  1BE1  1201               	bcf	1,4
  6633  1BE2  1D03               	skipz
  6634  1BE3  1601               	bsf	1,4
  6635  1BE4  0008               	return
  6636  1BE5                     __end_of_setDimmerLights_TriggerAdj:	
  6637                           
  6638                           	psect	text23
  6639  1BC5                     __ptext23:	
  6640 ;; *************** function _setDimmerLights_AdjGo *****************
  6641 ;; Defined at:
  6642 ;;		line 710 in file "../src/Dimmer_B1.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;  lights          1    wreg     unsigned char 
  6645 ;;  command         1    2[BANK0 ] unsigned char 
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  lights          1    3[BANK0 ] unsigned char 
  6648 ;; Return value:  Size  Location     Type
  6649 ;;		None               void
  6650 ;; Registers used:
  6651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6657 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;Total ram usage:        2 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    6
  6664 ;; This function calls:
  6665 ;;		_DimmerLightsPointSelect
  6666 ;; This function is called by:
  6667 ;;		_Sw_DimmerOffFunc
  6668 ;;		_Sw_DimmerAdjFunc
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           
  6673                           ;psect for function _setDimmerLights_AdjGo
  6674  1BC5                     _setDimmerLights_AdjGo:	
  6675                           
  6676                           ;incstack = 0
  6677                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6678                           ;setDimmerLights_AdjGo@lights stored from wreg
  6679  1BC5  0020               	movlb	0	; select bank0
  6680  1BC6  00A3               	movwf	setDimmerLights_AdjGo@lights
  6681                           
  6682                           ;Dimmer_B1.c: 712: DimmerLightsPointSelect(lights);
  6683  1BC7  0823               	movf	setDimmerLights_AdjGo@lights,w
  6684  1BC8  319C  2460         	fcall	_DimmerLightsPointSelect
  6685                           
  6686                           ;Dimmer_B1.c: 713: DimmerLights->AdjGo = command;
  6687  1BCA  0874               	movf	_DimmerLights,w
  6688  1BCB  3E08               	addlw	8
  6689  1BCC  0086               	movwf	6
  6690  1BCD  3001               	movlw	1	; select bank2/3
  6691  1BCE  0087               	movwf	7
  6692  1BCF  0020               	movlb	0	; select bank0
  6693  1BD0  0822               	movf	setDimmerLights_AdjGo@command,w
  6694  1BD1  1181               	bcf	1,3
  6695  1BD2  1D03               	skipz
  6696  1BD3  1581               	bsf	1,3
  6697  1BD4  0008               	return
  6698  1BD5                     __end_of_setDimmerLights_AdjGo:	
  6699                           
  6700                           	psect	text24
  6701  1B30                     __ptext24:	
  6702 ;; *************** function _Switch_Initialization *****************
  6703 ;; Defined at:
  6704 ;;		line 41 in file "../src/Switch_B1.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;		None
  6707 ;; Auto vars:     Size  Location     Type
  6708 ;;		None
  6709 ;; Return value:  Size  Location     Type
  6710 ;;		None               void
  6711 ;; Registers used:
  6712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6713 ;; Tracked objects:
  6714 ;;		On entry : 0/0
  6715 ;;		On exit  : 0/0
  6716 ;;		Unchanged: 0/0
  6717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6722 ;;Total ram usage:        0 bytes
  6723 ;; Hardware stack levels used:    1
  6724 ;; Hardware stack levels required when called:    8
  6725 ;; This function calls:
  6726 ;;		_TouchPower
  6727 ;;		_setSw_Initialization
  6728 ;; This function is called by:
  6729 ;;		_main
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733                           
  6734                           ;psect for function _Switch_Initialization
  6735  1B30                     _Switch_Initialization:	
  6736                           
  6737                           ;Switch_B1.c: 42: TouchPower();
  6738                           
  6739                           ;incstack = 0
  6740                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6741  1B30  319B  2377  319B   	fcall	_TouchPower
  6742                           
  6743                           ;Switch_B1.c: 44: WPUB1 = 0;
  6744  1B33  0024               	movlb	4	; select bank4
  6745  1B34  108D               	bcf	13,1	;volatile
  6746                           
  6747                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6748  1B35  3001               	movlw	1
  6749  1B36  319A  227E  319B   	fcall	_setSw_Initialization
  6750                           
  6751                           ;Switch_B1.c: 57: setSw_Initialization(2);
  6752  1B39  3002               	movlw	2
  6753  1B3A  319A  227E         	fcall	_setSw_Initialization
  6754  1B3C  0008               	return
  6755  1B3D                     __end_of_Switch_Initialization:	
  6756                           
  6757                           	psect	text25
  6758  1A7E                     __ptext25:	
  6759 ;; *************** function _setSw_Initialization *****************
  6760 ;; Defined at:
  6761 ;;		line 83 in file "../src/Switch_B1.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;  sw              1    wreg     unsigned char 
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;  sw              1    3[BANK0 ] unsigned char 
  6766 ;; Return value:  Size  Location     Type
  6767 ;;		None               void
  6768 ;; Registers used:
  6769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6778 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;Total ram usage:        1 bytes
  6780 ;; Hardware stack levels used:    1
  6781 ;; Hardware stack levels required when called:    7
  6782 ;; This function calls:
  6783 ;;		_setLED
  6784 ;; This function is called by:
  6785 ;;		_Switch_Initialization
  6786 ;; This function uses a non-reentrant model
  6787 ;;
  6788                           
  6789                           
  6790                           ;psect for function _setSw_Initialization
  6791  1A7E                     _setSw_Initialization:	
  6792                           
  6793                           ;incstack = 0
  6794                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6795                           ;setSw_Initialization@sw stored from wreg
  6796  1A7E  0020               	movlb	0	; select bank0
  6797  1A7F  00A3               	movwf	setSw_Initialization@sw
  6798                           
  6799                           ;Switch_B1.c: 84: setLED(sw, 1);
  6800  1A80  01A1               	clrf	setLED@command
  6801  1A81  0AA1               	incf	setLED@command,f
  6802  1A82  0823               	movf	setSw_Initialization@sw,w
  6803  1A83  3196  2672         	fcall	_setLED
  6804  1A85  0008               	return
  6805  1A86                     __end_of_setSw_Initialization:	
  6806                           
  6807                           	psect	text26
  6808  1B77                     __ptext26:	
  6809 ;; *************** function _TouchPower *****************
  6810 ;; Defined at:
  6811 ;;		line 10 in file "../src/Switch_B1.c"
  6812 ;; Parameters:    Size  Location     Type
  6813 ;;		None
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;		None
  6816 ;; Return value:  Size  Location     Type
  6817 ;;		None               void
  6818 ;; Registers used:
  6819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6829 ;;Total ram usage:        0 bytes
  6830 ;; Hardware stack levels used:    1
  6831 ;; Hardware stack levels required when called:    6
  6832 ;; This function calls:
  6833 ;;		_Timeout_Counter
  6834 ;;		_set_TimeoutCleared
  6835 ;; This function is called by:
  6836 ;;		_Switch_Initialization
  6837 ;; This function uses a non-reentrant model
  6838 ;;
  6839                           
  6840                           
  6841                           ;psect for function _TouchPower
  6842  1B77                     _TouchPower:	
  6843                           
  6844                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6845                           
  6846                           ;incstack = 0
  6847                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6848  1B77  2B7D               	goto	l10048
  6849  1B78                     l2691:	
  6850                           
  6851                           ;Switch_B1.c: 12: RC5 = 1;
  6852  1B78  0020               	movlb	0	; select bank0
  6853  1B79  168E               	bsf	14,5	;volatile
  6854                           
  6855                           ;Switch_B1.c: 13: Timeout_Counter();
  6856  1B7A  319C  24C2  319B   	fcall	_Timeout_Counter
  6857  1B7D                     l10048:	
  6858  1B7D  0020               	movlb	0	; select bank0
  6859  1B7E  1A8E               	btfsc	14,5	;volatile
  6860  1B7F  2B83               	goto	l10052
  6861  1B80  0021               	movlb	1	; select bank1
  6862  1B81  1D2F               	btfss	(_myMain^(0+128)+15),2
  6863  1B82  2B78               	goto	l2691
  6864  1B83                     l10052:	
  6865                           
  6866                           ;Switch_B1.c: 14: }
  6867                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6868  1B83  319A  222B         	fcall	_set_TimeoutCleared
  6869  1B85  0008               	return
  6870  1B86                     __end_of_TouchPower:	
  6871                           
  6872                           	psect	text27
  6873  1A16                     __ptext27:	
  6874 ;; *************** function _RF_Main *****************
  6875 ;; Defined at:
  6876 ;;		line 16 in file "../src/RF_Control_B1.c"
  6877 ;; Parameters:    Size  Location     Type
  6878 ;;		None
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;		None
  6881 ;; Return value:  Size  Location     Type
  6882 ;;		None               void
  6883 ;; Registers used:
  6884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6885 ;; Tracked objects:
  6886 ;;		On entry : 0/0
  6887 ;;		On exit  : 0/0
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;Total ram usage:        0 bytes
  6895 ;; Hardware stack levels used:    1
  6896 ;; Hardware stack levels required when called:   14
  6897 ;; This function calls:
  6898 ;;		_setRF_Main
  6899 ;; This function is called by:
  6900 ;;		_main
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           
  6905                           ;psect for function _RF_Main
  6906  1A16                     _RF_Main:	
  6907                           
  6908                           ;RF_Control_B1.c: 18: setRF_Main();
  6909                           
  6910                           ;incstack = 0
  6911                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6912  1A16  3185  25BC         	fcall	_setRF_Main
  6913  1A18  0008               	return
  6914  1A19                     __end_of_RF_Main:	
  6915                           
  6916                           	psect	text28
  6917  05BC                     __ptext28:	
  6918 ;; *************** function _setRF_Main *****************
  6919 ;; Defined at:
  6920 ;;		line 52 in file "../src/RF_Control_B1.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;		None
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;  Receive_OK      1    0        unsigned char 
  6925 ;;  loop_f          1    0        unsigned char 
  6926 ;; Return value:  Size  Location     Type
  6927 ;;		None               void
  6928 ;; Registers used:
  6929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6930 ;; Tracked objects:
  6931 ;;		On entry : 0/0
  6932 ;;		On exit  : 0/0
  6933 ;;		Unchanged: 0/0
  6934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6936 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;Total ram usage:        5 bytes
  6940 ;; Hardware stack levels used:    1
  6941 ;; Hardware stack levels required when called:   13
  6942 ;; This function calls:
  6943 ;;		_CC2500_RxData
  6944 ;;		_CC2500_TxData
  6945 ;;		_CC2500_WriteCommand
  6946 ;;		_RF_RxDisable
  6947 ;;		___wmul
  6948 ;;		_getBuz_GO
  6949 ;;		_getRxData
  6950 ;; This function is called by:
  6951 ;;		_RF_Main
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           
  6956                           ;psect for function _setRF_Main
  6957  05BC                     _setRF_Main:	
  6958                           
  6959                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  6960                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6961                           
  6962                           ;incstack = 0
  6963                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6964  05BC  0021               	movlb	1	; select bank1
  6965  05BD  1C3E               	btfss	_RF1^(0+128),0
  6966  05BE  0008               	return
  6967                           
  6968                           ;RF_Control_B1.c: 57: if (getBuz_GO() == 0) {
  6969  05BF  319C  2407  3185   	fcall	_getBuz_GO
  6970  05C2  0020               	movlb	0	; select bank0
  6971  05C3  0821               	movf	?_getBuz_GO+1,w
  6972  05C4  0420               	iorwf	?_getBuz_GO,w
  6973  05C5  1D03               	skipz
  6974  05C6  0008               	return
  6975                           
  6976                           ;RF_Control_B1.c: 63: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6977  05C7  01EB               	clrf	_setRF_Main$5153
  6978  05C8  0AEB               	incf	_setRF_Main$5153,f
  6979  05C9  1F0C               	btfss	12,6	;volatile
  6980  05CA  1A0C               	btfsc	12,4	;volatile
  6981  05CB  2DD0               	goto	l9950
  6982  05CC  1C0C               	btfss	12,0	;volatile
  6983  05CD  188D               	btfsc	13,1	;volatile
  6984  05CE  2DD0               	goto	l9950
  6985  05CF  01EB               	clrf	_setRF_Main$5153
  6986  05D0                     l9950:	
  6987  05D0  086B               	movf	_setRF_Main$5153,w
  6988  05D1  0021               	movlb	1	; select bank1
  6989  05D2  13BE               	bcf	_RF1^(0+128),7
  6990  05D3  1D03               	skipz
  6991  05D4  17BE               	bsf	_RF1^(0+128),7
  6992                           
  6993                           ;RF_Control_B1.c: 69: if (RF1.Key == 1 && RF1.Learn == 0) {
  6994  05D5  1BBE               	btfsc	_RF1^(0+128),7
  6995  05D6  1B3E               	btfsc	_RF1^(0+128),6
  6996  05D7  2DDD               	goto	l2265
  6997                           
  6998                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  6999  05D8  01C1               	clrf	(_RF1^(0+128)+3)
  7000                           
  7001                           ;RF_Control_B1.c: 71: RF1.Run = 1;
  7002  05D9  14BF               	bsf	(_RF1^(0+128)+1),1
  7003                           
  7004                           ;RF_Control_B1.c: 72: RF_RxDisable();
  7005  05DA  319C  2473         	fcall	_RF_RxDisable
  7006                           
  7007                           ;RF_Control_B1.c: 73: } else {
  7008  05DC  0008               	return
  7009  05DD                     l2265:	
  7010                           
  7011                           ;RF_Control_B1.c: 74: if (RF1.Run == 1 && RF1.Learn == 0) {
  7012  05DD  18BF               	btfsc	(_RF1^(0+128)+1),1
  7013  05DE  1B3E               	btfsc	_RF1^(0+128),6
  7014  05DF  2DED               	goto	l9972
  7015                           
  7016                           ;RF_Control_B1.c: 75: RF1.Count++;
  7017  05E0  3001               	movlw	1
  7018  05E1  0020               	movlb	0	; select bank0
  7019  05E2  00E7               	movwf	??_setRF_Main
  7020  05E3  0867               	movf	??_setRF_Main,w
  7021  05E4  0021               	movlb	1	; select bank1
  7022  05E5  07C1               	addwf	(_RF1^(0+128)+3),f
  7023                           
  7024                           ;RF_Control_B1.c: 76: if (RF1.Count == RF1.RunTime) {
  7025  05E6  0841               	movf	(_RF1^(0+128)+3),w
  7026  05E7  0644               	xorwf	(_RF1^(0+128)+6),w
  7027  05E8  1D03               	skipz
  7028  05E9  2E38               	goto	l10024
  7029                           
  7030                           ;RF_Control_B1.c: 77: RF1.Count = 0;
  7031  05EA  01C1               	clrf	(_RF1^(0+128)+3)
  7032                           
  7033                           ;RF_Control_B1.c: 78: RF1.Run = 0;
  7034  05EB  10BF               	bcf	(_RF1^(0+128)+1),1
  7035                           
  7036                           ;RF_Control_B1.c: 79: }
  7037                           ;RF_Control_B1.c: 80: } else {
  7038  05EC  2E38               	goto	l10024
  7039  05ED                     l9972:	
  7040                           
  7041                           ;RF_Control_B1.c: 81: RF1.Count = 0;
  7042  05ED  01C1               	clrf	(_RF1^(0+128)+3)
  7043                           
  7044                           ;RF_Control_B1.c: 82: RF1.Run = 0;
  7045  05EE  10BF               	bcf	(_RF1^(0+128)+1),1
  7046                           
  7047                           ;RF_Control_B1.c: 84: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  7048  05EF  193E               	btfsc	_RF1^(0+128),2
  7049  05F0  1B3E               	btfsc	_RF1^(0+128),6
  7050  05F1  2DF9               	goto	l2270
  7051                           
  7052                           ;RF_Control_B1.c: 85: RF1.TransceiveGO = 0;
  7053  05F2  113E               	bcf	_RF1^(0+128),2
  7054                           
  7055                           ;RF_Control_B1.c: 86: RF1.RxStatus = 0;
  7056  05F3  11BE               	bcf	_RF1^(0+128),3
  7057                           
  7058                           ;RF_Control_B1.c: 87: RF1.ReceiveGO = 0;
  7059  05F4  10BE               	bcf	_RF1^(0+128),1
  7060                           
  7061                           ;RF_Control_B1.c: 92: CC2500_TxData();
  7062  05F5  3197  2798  3185   	fcall	_CC2500_TxData
  7063                           
  7064                           ;RF_Control_B1.c: 94: } else {
  7065  05F8  2E38               	goto	l10024
  7066  05F9                     l2270:	
  7067                           
  7068                           ;RF_Control_B1.c: 96: if (RF1.RxStatus == 1) {
  7069  05F9  1DBE               	btfss	_RF1^(0+128),3
  7070  05FA  2E30               	goto	l2272
  7071                           
  7072                           ;RF_Control_B1.c: 97: CC2500_RxData();
  7073  05FB  318B  2360  3185   	fcall	_CC2500_RxData
  7074                           
  7075                           ;RF_Control_B1.c: 98: if (RF1.ReceiveGO == 1) {
  7076  05FE  0021               	movlb	1	; select bank1
  7077  05FF  1CBE               	btfss	_RF1^(0+128),1
  7078  0600  2E38               	goto	l10024
  7079                           
  7080                           ;RF_Control_B1.c: 99: RF1.ReceiveGO = 0;
  7081  0601  10BE               	bcf	_RF1^(0+128),1
  7082                           
  7083                           ;RF_Control_B1.c: 106: getRxData();
  7084  0602  3188  2042  3185   	fcall	_getRxData
  7085                           
  7086                           ;RF_Control_B1.c: 108: RF1.Run = 1;
  7087  0605  0021               	movlb	1	; select bank1
  7088  0606  14BF               	bsf	(_RF1^(0+128)+1),1
  7089                           
  7090                           ;RF_Control_B1.c: 109: RB5 = RB5 == 1 ? 0 : 1;
  7091  0607  3020               	movlw	32
  7092  0608  0020               	movlb	0	; select bank0
  7093  0609  068D               	xorwf	13,f
  7094                           
  7095                           ;RF_Control_B1.c: 110: if (RF1.Checked == 1) {
  7096  060A  0021               	movlb	1	; select bank1
  7097  060B  1DBF               	btfss	(_RF1^(0+128)+1),3
  7098  060C  2E15               	goto	l10004
  7099                           
  7100                           ;RF_Control_B1.c: 111: if (RF1.RunTime > 20) {
  7101  060D  3015               	movlw	21
  7102  060E  0244               	subwf	(_RF1^(0+128)+6),w
  7103  060F  1C03               	skipc
  7104  0610  2E13               	goto	l10002
  7105                           
  7106                           ;RF_Control_B1.c: 112: RF1.RunTime -= 10;
  7107  0611  300A               	movlw	10
  7108  0612  02C4               	subwf	(_RF1^(0+128)+6),f
  7109  0613                     l10002:	
  7110                           
  7111                           ;RF_Control_B1.c: 113: }
  7112                           ;RF_Control_B1.c: 114: RF1.CheckCount = 0;
  7113  0613  01C2               	clrf	(_RF1^(0+128)+4)
  7114                           
  7115                           ;RF_Control_B1.c: 115: } else {
  7116  0614  2E38               	goto	l10024
  7117  0615                     l10004:	
  7118                           
  7119                           ;RF_Control_B1.c: 117: RF1.CheckCount++;
  7120  0615  3001               	movlw	1
  7121  0616  0020               	movlb	0	; select bank0
  7122  0617  00E7               	movwf	??_setRF_Main
  7123  0618  0867               	movf	??_setRF_Main,w
  7124  0619  0021               	movlb	1	; select bank1
  7125  061A  07C2               	addwf	(_RF1^(0+128)+4),f
  7126                           
  7127                           ;RF_Control_B1.c: 118: if (RF1.CheckCount == 2) {
  7128  061B  0842               	movf	(_RF1^(0+128)+4),w
  7129  061C  3A02               	xorlw	2
  7130  061D  1D03               	skipz
  7131  061E  2E38               	goto	l10024
  7132                           
  7133                           ;RF_Control_B1.c: 119: RF1.CheckCount = 0;
  7134  061F  01C2               	clrf	(_RF1^(0+128)+4)
  7135                           
  7136                           ;RF_Control_B1.c: 120: RF1.CheckedCounter = 0;
  7137  0620  01C3               	clrf	(_RF1^(0+128)+5)
  7138                           
  7139                           ;RF_Control_B1.c: 121: if (RF1.RxChecked == 0) {
  7140  0621  1A3F               	btfsc	(_RF1^(0+128)+1),4
  7141  0622  2E25               	goto	l10014
  7142                           
  7143                           ;RF_Control_B1.c: 122: RF1.RxChecked = 1;
  7144  0623  163F               	bsf	(_RF1^(0+128)+1),4
  7145                           
  7146                           ;RF_Control_B1.c: 124: } else {
  7147  0624  2E38               	goto	l10024
  7148  0625                     l10014:	
  7149                           
  7150                           ;RF_Control_B1.c: 126: if (RF1.RunTime < 100) {
  7151  0625  3064               	movlw	100
  7152  0626  0244               	subwf	(_RF1^(0+128)+6),w
  7153  0627  1803               	skipnc
  7154  0628  2E38               	goto	l10024
  7155                           
  7156                           ;RF_Control_B1.c: 127: RF1.RunTime += 10;
  7157  0629  300A               	movlw	10
  7158  062A  0020               	movlb	0	; select bank0
  7159  062B  00E7               	movwf	??_setRF_Main
  7160  062C  0867               	movf	??_setRF_Main,w
  7161  062D  0021               	movlb	1	; select bank1
  7162  062E  07C4               	addwf	(_RF1^(0+128)+6),f
  7163                           
  7164                           ;RF_Control_B1.c: 128: }
  7165                           ;RF_Control_B1.c: 129: }
  7166                           ;RF_Control_B1.c: 130: }
  7167                           ;RF_Control_B1.c: 131: }
  7168                           ;RF_Control_B1.c: 132: }
  7169                           ;RF_Control_B1.c: 133: } else {
  7170  062F  2E38               	goto	l10024
  7171  0630                     l2272:	
  7172                           
  7173                           ;RF_Control_B1.c: 135: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7174  0630  1DBE               	btfss	_RF1^(0+128),3
  7175  0631  18BE               	btfsc	_RF1^(0+128),1
  7176  0632  2E38               	goto	l10024
  7177                           
  7178                           ;RF_Control_B1.c: 136: RF1.RxStatus = 1;
  7179  0633  15BE               	bsf	_RF1^(0+128),3
  7180                           
  7181                           ;RF_Control_B1.c: 140: CC2500_WriteCommand(0x34);
  7182  0634  3034               	movlw	52
  7183  0635  319D  2578  3185   	fcall	_CC2500_WriteCommand
  7184  0638                     l10024:	
  7185                           
  7186                           ;RF_Control_B1.c: 142: }
  7187                           ;RF_Control_B1.c: 144: }
  7188                           ;RF_Control_B1.c: 145: }
  7189                           ;RF_Control_B1.c: 146: }
  7190                           ;RF_Control_B1.c: 147: if (RF1.RxChecked == 1) {
  7191  0638  0021               	movlb	1	; select bank1
  7192  0639  1E3F               	btfss	(_RF1^(0+128)+1),4
  7193  063A  2E61               	goto	l10034
  7194                           
  7195                           ;RF_Control_B1.c: 148: RF1.CheckedCounter++;
  7196  063B  3001               	movlw	1
  7197  063C  0020               	movlb	0	; select bank0
  7198  063D  00E7               	movwf	??_setRF_Main
  7199  063E  0867               	movf	??_setRF_Main,w
  7200  063F  0021               	movlb	1	; select bank1
  7201  0640  07C3               	addwf	(_RF1^(0+128)+5),f
  7202                           
  7203                           ;RF_Control_B1.c: 149: if (RF1.CheckedCounter == (10 * RF1.RunTime)) {
  7204  0641  0844               	movf	(_RF1^(0+128)+6),w
  7205  0642  0020               	movlb	0	; select bank0
  7206  0643  00E7               	movwf	??_setRF_Main
  7207  0644  01E8               	clrf	??_setRF_Main+1
  7208  0645  0867               	movf	??_setRF_Main,w
  7209  0646  00A0               	movwf	___wmul@multiplier
  7210  0647  0868               	movf	??_setRF_Main+1,w
  7211  0648  00A1               	movwf	___wmul@multiplier+1
  7212  0649  300A               	movlw	10
  7213  064A  00A2               	movwf	___wmul@multiplicand
  7214  064B  3000               	movlw	0
  7215  064C  00A3               	movwf	___wmul@multiplicand+1
  7216  064D  319E  261E  3185   	fcall	___wmul
  7217  0650  0021               	movlb	1	; select bank1
  7218  0651  0843               	movf	(_RF1^(0+128)+5),w
  7219  0652  0020               	movlb	0	; select bank0
  7220  0653  00E9               	movwf	??_setRF_Main+2
  7221  0654  01EA               	clrf	??_setRF_Main+3
  7222  0655  0821               	movf	?___wmul+1,w
  7223  0656  066A               	xorwf	??_setRF_Main+3,w
  7224  0657  1D03               	skipz
  7225  0658  2E5B               	goto	u10645
  7226  0659  0820               	movf	?___wmul,w
  7227  065A  0669               	xorwf	??_setRF_Main+2,w
  7228  065B                     u10645:	
  7229  065B  1D03               	skipz
  7230  065C  0008               	return
  7231                           
  7232                           ;RF_Control_B1.c: 150: RF1.CheckedCounter = 0;
  7233  065D  0021               	movlb	1	; select bank1
  7234  065E  01C3               	clrf	(_RF1^(0+128)+5)
  7235                           
  7236                           ;RF_Control_B1.c: 151: RF1.RxChecked = 0;
  7237  065F  123F               	bcf	(_RF1^(0+128)+1),4
  7238                           
  7239                           ;RF_Control_B1.c: 152: }
  7240                           ;RF_Control_B1.c: 153: } else {
  7241  0660  0008               	return
  7242  0661                     l10034:	
  7243                           
  7244                           ;RF_Control_B1.c: 154: if (RF1.RunTime > 20) {
  7245  0661  3015               	movlw	21
  7246  0662  0244               	subwf	(_RF1^(0+128)+6),w
  7247  0663  1C03               	skipc
  7248  0664  0008               	return
  7249                           
  7250                           ;RF_Control_B1.c: 155: RF1.CheckedCounter++;
  7251  0665  3001               	movlw	1
  7252  0666  0020               	movlb	0	; select bank0
  7253  0667  00E7               	movwf	??_setRF_Main
  7254  0668  0867               	movf	??_setRF_Main,w
  7255  0669  0021               	movlb	1	; select bank1
  7256  066A  07C3               	addwf	(_RF1^(0+128)+5),f
  7257                           
  7258                           ;RF_Control_B1.c: 156: if (RF1.CheckedCounter == (10 * RF1.RunTime)) {
  7259  066B  0844               	movf	(_RF1^(0+128)+6),w
  7260  066C  0020               	movlb	0	; select bank0
  7261  066D  00E7               	movwf	??_setRF_Main
  7262  066E  01E8               	clrf	??_setRF_Main+1
  7263  066F  0867               	movf	??_setRF_Main,w
  7264  0670  00A0               	movwf	___wmul@multiplier
  7265  0671  0868               	movf	??_setRF_Main+1,w
  7266  0672  00A1               	movwf	___wmul@multiplier+1
  7267  0673  300A               	movlw	10
  7268  0674  00A2               	movwf	___wmul@multiplicand
  7269  0675  3000               	movlw	0
  7270  0676  00A3               	movwf	___wmul@multiplicand+1
  7271  0677  319E  261E  3185   	fcall	___wmul
  7272  067A  0021               	movlb	1	; select bank1
  7273  067B  0843               	movf	(_RF1^(0+128)+5),w
  7274  067C  0020               	movlb	0	; select bank0
  7275  067D  00E9               	movwf	??_setRF_Main+2
  7276  067E  01EA               	clrf	??_setRF_Main+3
  7277  067F  0821               	movf	?___wmul+1,w
  7278  0680  066A               	xorwf	??_setRF_Main+3,w
  7279  0681  1D03               	skipz
  7280  0682  2E85               	goto	u10665
  7281  0683  0820               	movf	?___wmul,w
  7282  0684  0669               	xorwf	??_setRF_Main+2,w
  7283  0685                     u10665:	
  7284  0685  1D03               	skipz
  7285  0686  0008               	return
  7286                           
  7287                           ;RF_Control_B1.c: 157: RF1.CheckedCounter = 0;
  7288  0687  0021               	movlb	1	; select bank1
  7289  0688  01C3               	clrf	(_RF1^(0+128)+5)
  7290                           
  7291                           ;RF_Control_B1.c: 158: RF1.RunTime -= 10;
  7292  0689  300A               	movlw	10
  7293  068A  02C4               	subwf	(_RF1^(0+128)+6),f
  7294  068B  0008               	return
  7295  068C                     __end_of_setRF_Main:	
  7296                           
  7297                           	psect	text29
  7298  0842                     __ptext29:	
  7299 ;; *************** function _getRxData *****************
  7300 ;; Defined at:
  7301 ;;		line 240 in file "../src/RF_Control_B1.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;		None
  7304 ;; Auto vars:     Size  Location     Type
  7305 ;;		None
  7306 ;; Return value:  Size  Location     Type
  7307 ;;		None               void
  7308 ;; Registers used:
  7309 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7310 ;; Tracked objects:
  7311 ;;		On entry : 0/0
  7312 ;;		On exit  : 0/0
  7313 ;;		Unchanged: 0/0
  7314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7319 ;;Total ram usage:        0 bytes
  7320 ;; Hardware stack levels used:    1
  7321 ;; Hardware stack levels required when called:   12
  7322 ;; This function calls:
  7323 ;;		_setControl_Lights_Table
  7324 ;;		_setLog_Code
  7325 ;; This function is called by:
  7326 ;;		_setRF_Main
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           
  7331                           ;psect for function _getRxData
  7332  0842                     _getRxData:	
  7333                           
  7334                           ;RF_Control_B1.c: 241: if (RF1.Learn == 1) {
  7335                           
  7336                           ;incstack = 0
  7337                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7338  0842  0021               	movlb	1	; select bank1
  7339  0843  1F3E               	btfss	_RF1^(0+128),6
  7340  0844  2855               	goto	l9436
  7341                           
  7342                           ;RF_Control_B1.c: 242: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7343  0845  0022               	movlb	2	; select bank2
  7344  0846  08A0               	movf	_RF_Data^(0+256),f
  7345  0847  1D03               	skipz
  7346  0848  2852               	goto	l2305
  7347  0849  0821               	movf	(_RF_Data^(0+256)+1),w
  7348  084A  3A64               	xorlw	100
  7349  084B  1D03               	skipz
  7350  084C  2852               	goto	l2305
  7351                           
  7352                           ;RF_Control_B1.c: 243: setLog_Code();
  7353  084D  3190  20F5         	fcall	_setLog_Code
  7354                           
  7355                           ;RF_Control_B1.c: 244: RF1.Checked = 1;
  7356  084F  0021               	movlb	1	; select bank1
  7357  0850  15BF               	bsf	(_RF1^(0+128)+1),3
  7358                           
  7359                           ;RF_Control_B1.c: 245: } else {
  7360  0851  0008               	return
  7361  0852                     l2305:	
  7362                           
  7363                           ;RF_Control_B1.c: 246: RF1.Checked = 0;
  7364  0852  0021               	movlb	1	; select bank1
  7365  0853  11BF               	bcf	(_RF1^(0+128)+1),3
  7366                           
  7367                           ;RF_Control_B1.c: 247: }
  7368                           ;RF_Control_B1.c: 248: } else {
  7369  0854  0008               	return
  7370  0855                     l9436:	
  7371                           
  7372                           ;RF_Control_B1.c: 249: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7373  0855  0022               	movlb	2	; select bank2
  7374  0856  08A0               	movf	_RF_Data^(0+256),f
  7375  0857  1D03               	skipz
  7376  0858  2893               	goto	l9458
  7377  0859  0821               	movf	(_RF_Data^(0+256)+1),w
  7378  085A  3A02               	xorlw	2
  7379  085B  1D03               	skipz
  7380  085C  2893               	goto	l9458
  7381                           
  7382                           ;RF_Control_B1.c: 251: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7383  085D  082C               	movf	(_RF_Data^(0+256)+12),w
  7384  085E  3AFF               	xorlw	255
  7385  085F  1D03               	skipz
  7386  0860  286D               	goto	l9448
  7387  0861  082D               	movf	(_RF_Data^(0+256)+13),w
  7388  0862  3AFF               	xorlw	255
  7389  0863  1D03               	skipz
  7390  0864  286D               	goto	l9448
  7391  0865  082E               	movf	(_RF_Data^(0+256)+14),w
  7392  0866  3AFF               	xorlw	255
  7393  0867  1D03               	skipz
  7394  0868  286D               	goto	l9448
  7395                           
  7396                           ;RF_Control_B1.c: 252: __nop();
  7397  0869  0000               	nop
  7398                           
  7399                           ;RF_Control_B1.c: 253: RF1.Checked = 0;
  7400  086A  0021               	movlb	1	; select bank1
  7401  086B  11BF               	bcf	(_RF1^(0+128)+1),3
  7402                           
  7403                           ;RF_Control_B1.c: 254: } else {
  7404  086C  0008               	return
  7405  086D                     l9448:	
  7406                           
  7407                           ;RF_Control_B1.c: 255: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7408  086D  0020               	movlb	0	; select bank0
  7409  086E  086E               	movf	_product,w
  7410  086F  3E0C               	addlw	12
  7411  0870  0086               	movwf	6
  7412  0871  3002               	movlw	2	; select bank4/5
  7413  0872  0087               	movwf	7
  7414  0873  0022               	movlb	2	; select bank2
  7415  0874  082C               	movf	(_RF_Data^(0+256)+12),w
  7416  0875  0601               	xorwf	1,w
  7417  0876  1D03               	skipz
  7418  0877  0008               	return
  7419  0878  0020               	movlb	0	; select bank0
  7420  0879  086E               	movf	_product,w
  7421  087A  3E0D               	addlw	13
  7422  087B  0086               	movwf	6
  7423  087C  3002               	movlw	2	; select bank4/5
  7424  087D  0087               	movwf	7
  7425  087E  0022               	movlb	2	; select bank2
  7426  087F  082D               	movf	(_RF_Data^(0+256)+13),w
  7427  0880  0601               	xorwf	1,w
  7428  0881  1D03               	skipz
  7429  0882  0008               	return
  7430  0883  0020               	movlb	0	; select bank0
  7431  0884  086E               	movf	_product,w
  7432  0885  3E0E               	addlw	14
  7433  0886  0086               	movwf	6
  7434  0887  3002               	movlw	2	; select bank4/5
  7435  0888  0087               	movwf	7
  7436  0889  0022               	movlb	2	; select bank2
  7437  088A  082E               	movf	(_RF_Data^(0+256)+14),w
  7438  088B  0601               	xorwf	1,w
  7439  088C  1D03               	skipz
  7440  088D  0008               	return
  7441                           
  7442                           ;RF_Control_B1.c: 256: setControl_Lights_Table();
  7443  088E  318D  2578         	fcall	_setControl_Lights_Table
  7444                           
  7445                           ;RF_Control_B1.c: 257: RF1.Checked = 1;
  7446  0890  0021               	movlb	1	; select bank1
  7447  0891  15BF               	bsf	(_RF1^(0+128)+1),3
  7448                           
  7449                           ;RF_Control_B1.c: 258: }
  7450                           ;RF_Control_B1.c: 259: }
  7451                           ;RF_Control_B1.c: 260: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7452  0892  0008               	return
  7453  0893                     l9458:	
  7454  0893  0022               	movlb	2	; select bank2
  7455  0894  0820               	movf	_RF_Data^(0+256),w
  7456  0895  3AFF               	xorlw	255
  7457  0896  1D03               	skipz
  7458  0897  289E               	goto	l9464
  7459  0898  0821               	movf	(_RF_Data^(0+256)+1),w
  7460  0899  3A02               	xorlw	2
  7461  089A  1D03               	skipz
  7462  089B  289E               	goto	l9464
  7463                           
  7464                           ;RF_Control_B1.c: 261: __nop();
  7465  089C  0000               	nop
  7466                           
  7467                           ;RF_Control_B1.c: 262: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7468  089D  0008               	return
  7469  089E                     l9464:	
  7470  089E  0022               	movlb	2	; select bank2
  7471  089F  08A0               	movf	_RF_Data^(0+256),f
  7472  08A0  1D03               	skipz
  7473  08A1  28A8               	goto	l2315
  7474  08A2  0821               	movf	(_RF_Data^(0+256)+1),w
  7475  08A3  3A65               	xorlw	101
  7476  08A4  1D03               	skipz
  7477  08A5  28A8               	goto	l2315
  7478                           
  7479                           ;RF_Control_B1.c: 263: __nop();
  7480  08A6  0000               	nop
  7481                           
  7482                           ;RF_Control_B1.c: 264: } else {
  7483  08A7  0008               	return
  7484  08A8                     l2315:	
  7485                           
  7486                           ;RF_Control_B1.c: 265: RF1.Checked = 0;
  7487  08A8  0021               	movlb	1	; select bank1
  7488  08A9  11BF               	bcf	(_RF1^(0+128)+1),3
  7489  08AA  0008               	return
  7490  08AB                     __end_of_getRxData:	
  7491                           
  7492                           	psect	text30
  7493  10F5                     __ptext30:	
  7494 ;; *************** function _setLog_Code *****************
  7495 ;; Defined at:
  7496 ;;		line 275 in file "../src/RF_Control_B1.c"
  7497 ;; Parameters:    Size  Location     Type
  7498 ;;		None
  7499 ;; Auto vars:     Size  Location     Type
  7500 ;;		None
  7501 ;; Return value:  Size  Location     Type
  7502 ;;		None               void
  7503 ;; Registers used:
  7504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7512 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7513 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;Total ram usage:        1 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; Hardware stack levels required when called:    7
  7517 ;; This function calls:
  7518 ;;		_setBuz
  7519 ;; This function is called by:
  7520 ;;		_getRxData
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           
  7525                           ;psect for function _setLog_Code
  7526  10F5                     _setLog_Code:	
  7527                           
  7528                           ;RF_Control_B1.c: 276: product->Data[12]=RF_Data[12];
  7529                           
  7530                           ;incstack = 0
  7531                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7532  10F5  0022               	movlb	2	; select bank2
  7533  10F6  082C               	movf	(_RF_Data^(0+256)+12),w
  7534  10F7  0020               	movlb	0	; select bank0
  7535  10F8  00AD               	movwf	??_setLog_Code
  7536  10F9  086E               	movf	_product,w
  7537  10FA  3E0C               	addlw	12
  7538  10FB  0086               	movwf	6
  7539  10FC  3002               	movlw	2	; select bank4/5
  7540  10FD  0087               	movwf	7
  7541  10FE  082D               	movf	??_setLog_Code,w
  7542  10FF  0081               	movwf	1
  7543                           
  7544                           ;RF_Control_B1.c: 277: product->Data[13]=RF_Data[13];
  7545  1100  0022               	movlb	2	; select bank2
  7546  1101  082D               	movf	(_RF_Data^(0+256)+13),w
  7547  1102  0020               	movlb	0	; select bank0
  7548  1103  00AD               	movwf	??_setLog_Code
  7549  1104  086E               	movf	_product,w
  7550  1105  3E0D               	addlw	13
  7551  1106  0086               	movwf	6
  7552  1107  3002               	movlw	2	; select bank4/5
  7553  1108  0087               	movwf	7
  7554  1109  082D               	movf	??_setLog_Code,w
  7555  110A  0081               	movwf	1
  7556                           
  7557                           ;RF_Control_B1.c: 278: product->Data[14]=RF_Data[14];
  7558  110B  0022               	movlb	2	; select bank2
  7559  110C  082E               	movf	(_RF_Data^(0+256)+14),w
  7560  110D  0020               	movlb	0	; select bank0
  7561  110E  00AD               	movwf	??_setLog_Code
  7562  110F  086E               	movf	_product,w
  7563  1110  3E0E               	addlw	14
  7564  1111  0086               	movwf	6
  7565  1112  3002               	movlw	2	; select bank4/5
  7566  1113  0087               	movwf	7
  7567  1114  082D               	movf	??_setLog_Code,w
  7568  1115  0081               	movwf	1
  7569                           
  7570                           ;RF_Control_B1.c: 279: setBuz(1, 100);
  7571  1116  3064               	movlw	100
  7572  1117  00A9               	movwf	setBuz@time
  7573  1118  3000               	movlw	0
  7574  1119  00AA               	movwf	setBuz@time+1
  7575  111A  3001               	movlw	1
  7576  111B  3195  25BE  3190   	fcall	_setBuz
  7577                           
  7578                           ;RF_Control_B1.c: 280: RF1.Learn = 0;
  7579  111E  0021               	movlb	1	; select bank1
  7580  111F  133E               	bcf	_RF1^(0+128),6
  7581                           
  7582                           ;RF_Control_B1.c: 281: if (myMain.First) {
  7583  1120  1FA0               	btfss	_myMain^(0+128),7
  7584  1121  2924               	goto	l2320
  7585                           
  7586                           ;RF_Control_B1.c: 282: Memory.LoopSave=1;
  7587  1122  0024               	movlb	4	; select bank4
  7588  1123  1544               	bsf	(_Memory^(0+512)+36),2
  7589  1124                     l2320:	
  7590                           
  7591                           ;RF_Control_B1.c: 283: }
  7592                           ;RF_Control_B1.c: 284: Memory.Modify=1;
  7593  1124  0024               	movlb	4	; select bank4
  7594  1125  1444               	bsf	(_Memory^(0+512)+36),0
  7595  1126  0008               	return
  7596  1127                     __end_of_setLog_Code:	
  7597                           
  7598                           	psect	text31
  7599  0D78                     __ptext31:	
  7600 ;; *************** function _setControl_Lights_Table *****************
  7601 ;; Defined at:
  7602 ;;		line 288 in file "../src/RF_Control_B1.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;		None
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;		None
  7607 ;; Return value:  Size  Location     Type
  7608 ;;		None               void
  7609 ;; Registers used:
  7610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;Total ram usage:        0 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; Hardware stack levels required when called:   11
  7623 ;; This function calls:
  7624 ;;		_setBuz
  7625 ;;		_setDimmerLights
  7626 ;;		_setRFSW_AdjControl
  7627 ;;		_setRFSW_Control
  7628 ;;		_setRFSW_Status
  7629 ;;		_setSw_Status
  7630 ;;		_setTxData
  7631 ;; This function is called by:
  7632 ;;		_getRxData
  7633 ;; This function uses a non-reentrant model
  7634 ;;
  7635                           
  7636                           
  7637                           ;psect for function _setControl_Lights_Table
  7638  0D78                     _setControl_Lights_Table:	
  7639                           
  7640                           ;RF_Control_B1.c: 289: if (RF_Data[15] == 0x00) {
  7641                           
  7642                           ;incstack = 0
  7643                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7644  0D78  0022               	movlb	2	; select bank2
  7645  0D79  08AF               	movf	(_RF_Data^(0+256)+15),f
  7646  0D7A  1D03               	skipz
  7647  0D7B  2DC4               	goto	l9146
  7648                           
  7649                           ;RF_Control_B1.c: 291: setDimmerLights(1, 0);
  7650  0D7C  0020               	movlb	0	; select bank0
  7651  0D7D  01A3               	clrf	setDimmerLights@status
  7652  0D7E  3001               	movlw	1
  7653  0D7F  318C  24F0  318D   	fcall	_setDimmerLights
  7654                           
  7655                           ;RF_Control_B1.c: 292: setRFSW_Status(1, 0);
  7656  0D82  0020               	movlb	0	; select bank0
  7657  0D83  01A2               	clrf	setRFSW_Status@command
  7658  0D84  3001               	movlw	1
  7659  0D85  319B  2359  318D   	fcall	_setRFSW_Status
  7660                           
  7661                           ;RF_Control_B1.c: 293: setSw_Status(1, 0);
  7662  0D88  0020               	movlb	0	; select bank0
  7663  0D89  01A1               	clrf	setSw_Status@command
  7664  0D8A  3001               	movlw	1
  7665  0D8B  319B  2368  318D   	fcall	_setSw_Status
  7666                           
  7667                           ;RF_Control_B1.c: 296: setDimmerLights(2, 0);
  7668  0D8E  0020               	movlb	0	; select bank0
  7669  0D8F  01A3               	clrf	setDimmerLights@status
  7670  0D90  3002               	movlw	2
  7671  0D91  318C  24F0  318D   	fcall	_setDimmerLights
  7672                           
  7673                           ;RF_Control_B1.c: 297: setRFSW_Status(2, 0);
  7674  0D94  0020               	movlb	0	; select bank0
  7675  0D95  01A2               	clrf	setRFSW_Status@command
  7676  0D96  3002               	movlw	2
  7677  0D97  319B  2359  318D   	fcall	_setRFSW_Status
  7678                           
  7679                           ;RF_Control_B1.c: 298: setSw_Status(2, 0);
  7680  0D9A  0020               	movlb	0	; select bank0
  7681  0D9B  01A1               	clrf	setSw_Status@command
  7682  0D9C  3002               	movlw	2
  7683  0D9D  319B  2368  318D   	fcall	_setSw_Status
  7684                           
  7685                           ;RF_Control_B1.c: 306: product->Data[9]=0;
  7686  0DA0  0020               	movlb	0	; select bank0
  7687  0DA1  086E               	movf	_product,w
  7688  0DA2  3E09               	addlw	9
  7689  0DA3  0086               	movwf	6
  7690  0DA4  3002               	movlw	2	; select bank4/5
  7691  0DA5  0087               	movwf	7
  7692  0DA6  0181               	clrf	1
  7693                           
  7694                           ;RF_Control_B1.c: 307: product->Data[11]=0;
  7695  0DA7  086E               	movf	_product,w
  7696  0DA8  3E0B               	addlw	11
  7697  0DA9  0086               	movwf	6
  7698  0DAA  3002               	movlw	2	; select bank4/5
  7699  0DAB  0087               	movwf	7
  7700  0DAC  0181               	clrf	1
  7701                           
  7702                           ;RF_Control_B1.c: 308: product->Data[15]=0;
  7703  0DAD  086E               	movf	_product,w
  7704  0DAE  3E0F               	addlw	15
  7705  0DAF  0086               	movwf	6
  7706  0DB0  3002               	movlw	2	; select bank4/5
  7707  0DB1  0087               	movwf	7
  7708  0DB2  0181               	clrf	1
  7709                           
  7710                           ;RF_Control_B1.c: 309: product->Data[17]=0;
  7711  0DB3  086E               	movf	_product,w
  7712  0DB4  3E11               	addlw	17
  7713  0DB5  0086               	movwf	6
  7714  0DB6  3002               	movlw	2	; select bank4/5
  7715  0DB7  0087               	movwf	7
  7716  0DB8  0181               	clrf	1
  7717                           
  7718                           ;RF_Control_B1.c: 310: setBuz(1, 100);
  7719  0DB9  3064               	movlw	100
  7720  0DBA  00A9               	movwf	setBuz@time
  7721  0DBB  3000               	movlw	0
  7722  0DBC  00AA               	movwf	setBuz@time+1
  7723  0DBD  3001               	movlw	1
  7724  0DBE  3195  25BE  318D   	fcall	_setBuz
  7725                           
  7726                           ;RF_Control_B1.c: 311: setTxData();
  7727  0DC1  318F  2747         	fcall	_setTxData
  7728                           
  7729                           ;RF_Control_B1.c: 312: } else if (RF_Data[15] == 0x20) {
  7730  0DC3  0008               	return
  7731  0DC4                     l9146:	
  7732  0DC4  0022               	movlb	2	; select bank2
  7733  0DC5  082F               	movf	(_RF_Data^(0+256)+15),w
  7734  0DC6  3A20               	xorlw	32
  7735  0DC7  1D03               	skipz
  7736  0DC8  2DDF               	goto	l9152
  7737                           
  7738                           ;RF_Control_B1.c: 313: product->Data[9]=0;
  7739  0DC9  0020               	movlb	0	; select bank0
  7740  0DCA  086E               	movf	_product,w
  7741  0DCB  3E09               	addlw	9
  7742  0DCC  0086               	movwf	6
  7743  0DCD  3002               	movlw	2	; select bank4/5
  7744  0DCE  0087               	movwf	7
  7745  0DCF  0181               	clrf	1
  7746                           
  7747                           ;RF_Control_B1.c: 314: product->Data[11]=0;
  7748  0DD0  086E               	movf	_product,w
  7749  0DD1  3E0B               	addlw	11
  7750  0DD2  0086               	movwf	6
  7751  0DD3  3002               	movlw	2	; select bank4/5
  7752  0DD4  0087               	movwf	7
  7753  0DD5  0181               	clrf	1
  7754                           
  7755                           ;RF_Control_B1.c: 315: product->Data[17]=0;
  7756  0DD6  086E               	movf	_product,w
  7757  0DD7  3E11               	addlw	17
  7758  0DD8  0086               	movwf	6
  7759  0DD9  3002               	movlw	2	; select bank4/5
  7760  0DDA  0087               	movwf	7
  7761  0DDB  0181               	clrf	1
  7762                           
  7763                           ;RF_Control_B1.c: 316: setTxData();
  7764  0DDC  318F  2747         	fcall	_setTxData
  7765                           
  7766                           ;RF_Control_B1.c: 317: }
  7767  0DDE  0008               	return
  7768  0DDF                     l9152:	
  7769                           
  7770                           ;RF_Control_B1.c: 319: else if (RF_Data[15] == 0x01) {
  7771  0DDF  0022               	movlb	2	; select bank2
  7772  0DE0  082F               	movf	(_RF_Data^(0+256)+15),w
  7773  0DE1  3A01               	xorlw	1
  7774  0DE2  1D03               	skipz
  7775  0DE3  2DE8               	goto	l9156
  7776                           
  7777                           ;RF_Control_B1.c: 320: setRFSW_Control(1);
  7778  0DE4  3001               	movlw	1
  7779  0DE5  318E  2603         	fcall	_setRFSW_Control
  7780                           
  7781                           ;RF_Control_B1.c: 321: }
  7782  0DE7  0008               	return
  7783  0DE8                     l9156:	
  7784                           
  7785                           ;RF_Control_B1.c: 323: else if (RF_Data[15] == 0x11) {
  7786  0DE8  0022               	movlb	2	; select bank2
  7787  0DE9  082F               	movf	(_RF_Data^(0+256)+15),w
  7788  0DEA  3A11               	xorlw	17
  7789  0DEB  1D03               	skipz
  7790  0DEC  2DF1               	goto	l9160
  7791                           
  7792                           ;RF_Control_B1.c: 324: setRFSW_AdjControl(1);
  7793  0DED  3001               	movlw	1
  7794  0DEE  3192  2201         	fcall	_setRFSW_AdjControl
  7795                           
  7796                           ;RF_Control_B1.c: 325: }
  7797  0DF0  0008               	return
  7798  0DF1                     l9160:	
  7799                           
  7800                           ;RF_Control_B1.c: 330: else if (RF_Data[15] == 0x02) {
  7801  0DF1  0022               	movlb	2	; select bank2
  7802  0DF2  082F               	movf	(_RF_Data^(0+256)+15),w
  7803  0DF3  3A02               	xorlw	2
  7804  0DF4  1D03               	skipz
  7805  0DF5  2DFA               	goto	l9164
  7806                           
  7807                           ;RF_Control_B1.c: 331: setRFSW_Control(2);
  7808  0DF6  3002               	movlw	2
  7809  0DF7  318E  2603         	fcall	_setRFSW_Control
  7810                           
  7811                           ;RF_Control_B1.c: 332: }
  7812  0DF9  0008               	return
  7813  0DFA                     l9164:	
  7814                           
  7815                           ;RF_Control_B1.c: 334: else if (RF_Data[15] == 0x21) {
  7816  0DFA  0022               	movlb	2	; select bank2
  7817  0DFB  082F               	movf	(_RF_Data^(0+256)+15),w
  7818  0DFC  3A21               	xorlw	33
  7819  0DFD  1D03               	skipz
  7820  0DFE  0008               	return
  7821                           
  7822                           ;RF_Control_B1.c: 335: setRFSW_AdjControl(2);
  7823  0DFF  3002               	movlw	2
  7824  0E00  3192  2201         	fcall	_setRFSW_AdjControl
  7825  0E02  0008               	return
  7826  0E03                     __end_of_setControl_Lights_Table:	
  7827                           
  7828                           	psect	text32
  7829  0E03                     __ptext32:	
  7830 ;; *************** function _setRFSW_Control *****************
  7831 ;; Defined at:
  7832 ;;		line 376 in file "../src/RF_Control_B1.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  sw              1    wreg     unsigned char 
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;  sw              1   67[BANK0 ] unsigned char 
  7837 ;; Return value:  Size  Location     Type
  7838 ;;		None               void
  7839 ;; Registers used:
  7840 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7841 ;; Tracked objects:
  7842 ;;		On entry : 0/0
  7843 ;;		On exit  : 0/0
  7844 ;;		Unchanged: 0/0
  7845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7847 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7848 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7849 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7850 ;;Total ram usage:        2 bytes
  7851 ;; Hardware stack levels used:    1
  7852 ;; Hardware stack levels required when called:    9
  7853 ;; This function calls:
  7854 ;;		_RfSWPointSelect
  7855 ;;		_setBuz
  7856 ;;		_setDelayOff_GO
  7857 ;;		_setDimmerLights_Switch
  7858 ;;		_setDimmerLights_Trigger
  7859 ;;		_setRF_DimmerLights
  7860 ;;		_setSw_Status
  7861 ;;		_setTxData
  7862 ;; This function is called by:
  7863 ;;		_setControl_Lights_Table
  7864 ;; This function uses a non-reentrant model
  7865 ;;
  7866                           
  7867                           
  7868                           ;psect for function _setRFSW_Control
  7869  0E03                     _setRFSW_Control:	
  7870                           
  7871                           ;incstack = 0
  7872                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7873                           ;setRFSW_Control@sw stored from wreg
  7874  0E03  0020               	movlb	0	; select bank0
  7875  0E04  00E3               	movwf	setRFSW_Control@sw
  7876                           
  7877                           ;RF_Control_B1.c: 377: RfSWPointSelect(sw);
  7878  0E05  0863               	movf	setRFSW_Control@sw,w
  7879  0E06  319D  2502  318E   	fcall	_RfSWPointSelect
  7880                           
  7881                           ;RF_Control_B1.c: 378: if (RFSW->Status == 0) {
  7882  0E09  0021               	movlb	1	; select bank1
  7883  0E0A  084E               	movf	_RFSW^(0+128),w
  7884  0E0B  0086               	movwf	6
  7885  0E0C  0187               	clrf	7
  7886  0E0D  1801               	btfsc	1,0
  7887  0E0E  2E45               	goto	l8990
  7888                           
  7889                           ;RF_Control_B1.c: 379: if (RF_Data[16] == 0x80) {
  7890  0E0F  0022               	movlb	2	; select bank2
  7891  0E10  0830               	movf	(_RF_Data^(0+256)+16),w
  7892  0E11  3A80               	xorlw	128
  7893  0E12  1D03               	skipz
  7894  0E13  2E21               	goto	l8980
  7895                           
  7896                           ;RF_Control_B1.c: 380: setDelayOff_GO(sw, 1, RF_Data[17]);
  7897  0E14  0020               	movlb	0	; select bank0
  7898  0E15  01AA               	clrf	setDelayOff_GO@command
  7899  0E16  0AAA               	incf	setDelayOff_GO@command,f
  7900  0E17  0022               	movlb	2	; select bank2
  7901  0E18  0831               	movf	(_RF_Data^(0+256)+17),w
  7902  0E19  0020               	movlb	0	; select bank0
  7903  0E1A  00E2               	movwf	??_setRFSW_Control
  7904  0E1B  0862               	movf	??_setRFSW_Control,w
  7905  0E1C  00AB               	movwf	setDelayOff_GO@value
  7906  0E1D  0863               	movf	setRFSW_Control@sw,w
  7907  0E1E  3197  2732  318E   	fcall	_setDelayOff_GO
  7908  0E21                     l8980:	
  7909                           
  7910                           ;RF_Control_B1.c: 381: }
  7911                           ;RF_Control_B1.c: 382: RFSW->Status = 1;
  7912  0E21  0021               	movlb	1	; select bank1
  7913  0E22  084E               	movf	_RFSW^(0+128),w
  7914  0E23  0086               	movwf	6
  7915  0E24  0187               	clrf	7
  7916  0E25  1401               	bsf	1,0
  7917                           
  7918                           ;RF_Control_B1.c: 383: setSw_Status(sw, 1);
  7919  0E26  0020               	movlb	0	; select bank0
  7920  0E27  01A1               	clrf	setSw_Status@command
  7921  0E28  0AA1               	incf	setSw_Status@command,f
  7922  0E29  0863               	movf	setRFSW_Control@sw,w
  7923  0E2A  319B  2368  318E   	fcall	_setSw_Status
  7924                           
  7925                           ;RF_Control_B1.c: 385: setDimmerLights_Trigger(sw, 1);
  7926  0E2D  0020               	movlb	0	; select bank0
  7927  0E2E  01A2               	clrf	setDimmerLights_Trigger@command
  7928  0E2F  0AA2               	incf	setDimmerLights_Trigger@command,f
  7929  0E30  0863               	movf	setRFSW_Control@sw,w
  7930  0E31  319B  23A5  318E   	fcall	_setDimmerLights_Trigger
  7931                           
  7932                           ;RF_Control_B1.c: 386: setDimmerLights_Switch(sw, 1);
  7933  0E34  0020               	movlb	0	; select bank0
  7934  0E35  01A2               	clrf	setDimmerLights_Switch@command
  7935  0E36  0AA2               	incf	setDimmerLights_Switch@command,f
  7936  0E37  0863               	movf	setRFSW_Control@sw,w
  7937  0E38  319B  2395  318E   	fcall	_setDimmerLights_Switch
  7938                           
  7939                           ;RF_Control_B1.c: 388: setRF_DimmerLights(sw, RFSW->Status);
  7940  0E3B  0021               	movlb	1	; select bank1
  7941  0E3C  084E               	movf	_RFSW^(0+128),w
  7942  0E3D  0086               	movwf	6
  7943  0E3E  0187               	clrf	7
  7944  0E3F  3000               	movlw	0
  7945  0E40  1801               	btfsc	1,0
  7946  0E41  3001               	movlw	1
  7947  0E42  0020               	movlb	0	; select bank0
  7948  0E43  00DD               	movwf	setRF_DimmerLights@on
  7949  0E44  2E83               	goto	L3
  7950  0E45                     l8990:	
  7951                           ;RF_Control_B1.c: 389: } else {
  7952                           
  7953                           
  7954                           ;RF_Control_B1.c: 390: if (RF_Data[16] == 0x80) {
  7955  0E45  0022               	movlb	2	; select bank2
  7956  0E46  0830               	movf	(_RF_Data^(0+256)+16),w
  7957  0E47  3A80               	xorlw	128
  7958  0E48  1D03               	skipz
  7959  0E49  2E5B               	goto	l8994
  7960                           
  7961                           ;RF_Control_B1.c: 391: setDelayOff_GO(sw, 1, RF_Data[17]);
  7962  0E4A  0020               	movlb	0	; select bank0
  7963  0E4B  01AA               	clrf	setDelayOff_GO@command
  7964  0E4C  0AAA               	incf	setDelayOff_GO@command,f
  7965  0E4D  0022               	movlb	2	; select bank2
  7966  0E4E  0831               	movf	(_RF_Data^(0+256)+17),w
  7967  0E4F  0020               	movlb	0	; select bank0
  7968  0E50  00E2               	movwf	??_setRFSW_Control
  7969  0E51  0862               	movf	??_setRFSW_Control,w
  7970  0E52  00AB               	movwf	setDelayOff_GO@value
  7971  0E53  0863               	movf	setRFSW_Control@sw,w
  7972  0E54  3197  2732  318E   	fcall	_setDelayOff_GO
  7973                           
  7974                           ;RF_Control_B1.c: 392: setRF_DimmerLights(sw, 1);
  7975  0E57  0020               	movlb	0	; select bank0
  7976  0E58  01DD               	clrf	setRF_DimmerLights@on
  7977  0E59  0ADD               	incf	setRF_DimmerLights@on,f
  7978  0E5A  2E83               	goto	L3
  7979  0E5B                     l8994:	
  7980                           ;RF_Control_B1.c: 393: } else {
  7981                           
  7982                           
  7983                           ;RF_Control_B1.c: 394: RFSW->Status = 0;
  7984  0E5B  0021               	movlb	1	; select bank1
  7985  0E5C  084E               	movf	_RFSW^(0+128),w
  7986  0E5D  0086               	movwf	6
  7987  0E5E  0187               	clrf	7
  7988  0E5F  1001               	bcf	1,0
  7989                           
  7990                           ;RF_Control_B1.c: 395: setSw_Status(sw, 0);
  7991  0E60  0020               	movlb	0	; select bank0
  7992  0E61  01A1               	clrf	setSw_Status@command
  7993  0E62  0863               	movf	setRFSW_Control@sw,w
  7994  0E63  319B  2368  318E   	fcall	_setSw_Status
  7995                           
  7996                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw, 1);
  7997  0E66  0020               	movlb	0	; select bank0
  7998  0E67  01A2               	clrf	setDimmerLights_Trigger@command
  7999  0E68  0AA2               	incf	setDimmerLights_Trigger@command,f
  8000  0E69  0863               	movf	setRFSW_Control@sw,w
  8001  0E6A  319B  23A5  318E   	fcall	_setDimmerLights_Trigger
  8002                           
  8003                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw, RFSW->Status);
  8004  0E6D  0021               	movlb	1	; select bank1
  8005  0E6E  084E               	movf	_RFSW^(0+128),w
  8006  0E6F  0086               	movwf	6
  8007  0E70  0187               	clrf	7
  8008  0E71  3000               	movlw	0
  8009  0E72  1801               	btfsc	1,0
  8010  0E73  3001               	movlw	1
  8011  0E74  0020               	movlb	0	; select bank0
  8012  0E75  00A2               	movwf	setDimmerLights_Switch@command
  8013  0E76  0863               	movf	setRFSW_Control@sw,w
  8014  0E77  319B  2395  318E   	fcall	_setDimmerLights_Switch
  8015                           
  8016                           ;RF_Control_B1.c: 400: setDelayOff_GO(sw, 0, 0);
  8017  0E7A  0020               	movlb	0	; select bank0
  8018  0E7B  01AA               	clrf	setDelayOff_GO@command
  8019  0E7C  01AB               	clrf	setDelayOff_GO@value
  8020  0E7D  0863               	movf	setRFSW_Control@sw,w
  8021  0E7E  3197  2732  318E   	fcall	_setDelayOff_GO
  8022                           
  8023                           ;RF_Control_B1.c: 401: setRF_DimmerLights(sw, 0);
  8024  0E81  0020               	movlb	0	; select bank0
  8025  0E82  01DD               	clrf	setRF_DimmerLights@on
  8026  0E83                     L3:	
  8027  0E83  0863               	movf	setRFSW_Control@sw,w
  8028  0E84  3188  20AB  318E   	fcall	_setRF_DimmerLights
  8029                           
  8030                           ;RF_Control_B1.c: 402: }
  8031                           ;RF_Control_B1.c: 403: }
  8032                           ;RF_Control_B1.c: 404: setBuz(1, 100);
  8033  0E87  3064               	movlw	100
  8034  0E88  0020               	movlb	0	; select bank0
  8035  0E89  00A9               	movwf	setBuz@time
  8036  0E8A  3000               	movlw	0
  8037  0E8B  00AA               	movwf	setBuz@time+1
  8038  0E8C  3001               	movlw	1
  8039  0E8D  3195  25BE  318E   	fcall	_setBuz
  8040                           
  8041                           ;RF_Control_B1.c: 405: setTxData();
  8042  0E90  318F  2747         	fcall	_setTxData
  8043  0E92  0008               	return
  8044  0E93                     __end_of_setRFSW_Control:	
  8045                           
  8046                           	psect	text33
  8047  1732                     __ptext33:	
  8048 ;; *************** function _setDelayOff_GO *****************
  8049 ;; Defined at:
  8050 ;;		line 86 in file "../src/DelayOff_B1.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;  sw              1    wreg     unsigned char 
  8053 ;;  command         1   10[BANK0 ] unsigned char 
  8054 ;;  value           1   11[BANK0 ] unsigned char 
  8055 ;; Auto vars:     Size  Location     Type
  8056 ;;  sw              1   14[BANK0 ] unsigned char 
  8057 ;; Return value:  Size  Location     Type
  8058 ;;		None               void
  8059 ;; Registers used:
  8060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8061 ;; Tracked objects:
  8062 ;;		On entry : 0/0
  8063 ;;		On exit  : 0/0
  8064 ;;		Unchanged: 0/0
  8065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8066 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;Total ram usage:        5 bytes
  8071 ;; Hardware stack levels used:    1
  8072 ;; Hardware stack levels required when called:    7
  8073 ;; This function calls:
  8074 ;;		_DelayOffPointSelect
  8075 ;;		_DelayTimejudge
  8076 ;; This function is called by:
  8077 ;;		_setRFSW_Control
  8078 ;;		_Sw_DimmerOffFunc
  8079 ;; This function uses a non-reentrant model
  8080 ;;
  8081                           
  8082                           
  8083                           ;psect for function _setDelayOff_GO
  8084  1732                     _setDelayOff_GO:	
  8085                           
  8086                           ;incstack = 0
  8087                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8088                           ;setDelayOff_GO@sw stored from wreg
  8089  1732  0020               	movlb	0	; select bank0
  8090  1733  00AE               	movwf	setDelayOff_GO@sw
  8091                           
  8092                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  8093  1734  082E               	movf	setDelayOff_GO@sw,w
  8094  1735  319C  249A  3197   	fcall	_DelayOffPointSelect
  8095                           
  8096                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  8097  1738  0872               	movf	_DelayOff,w
  8098  1739  0086               	movwf	6
  8099  173A  3001               	movlw	1	; select bank2/3
  8100  173B  0087               	movwf	7
  8101  173C  1C01               	btfss	1,0
  8102  173D  0008               	return
  8103                           
  8104                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  8105  173E  0020               	movlb	0	; select bank0
  8106  173F  082A               	movf	setDelayOff_GO@command,w
  8107  1740  3A01               	xorlw	1
  8108  1741  3000               	movlw	0
  8109  1742  1903               	skipnz
  8110  1743  3001               	movlw	1
  8111  1744  00AC               	movwf	??_setDelayOff_GO
  8112  1745  0872               	movf	_DelayOff,w
  8113  1746  0086               	movwf	6
  8114  1747  3001               	movlw	1	; select bank2/3
  8115  1748  0087               	movwf	7
  8116  1749  0DAC               	rlf	??_setDelayOff_GO,f
  8117  174A  0801               	movf	1,w
  8118  174B  062C               	xorwf	??_setDelayOff_GO,w
  8119  174C  39FD               	andlw	-3
  8120  174D  062C               	xorwf	??_setDelayOff_GO,w
  8121  174E  0081               	movwf	1
  8122                           
  8123                           ;DelayOff_B1.c: 90: if (command == 1) {
  8124  174F  082A               	movf	setDelayOff_GO@command,w
  8125  1750  3A01               	xorlw	1
  8126  1751  1D03               	skipz
  8127  1752  2F7D               	goto	l8752
  8128                           
  8129                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  8130  1753  082B               	movf	setDelayOff_GO@value,w
  8131  1754  3190  2016  3197   	fcall	_DelayTimejudge
  8132  1757  0020               	movlb	0	; select bank0
  8133  1758  00AC               	movwf	??_setDelayOff_GO
  8134  1759  0A72               	incf	_DelayOff,w
  8135  175A  0086               	movwf	6
  8136  175B  3001               	movlw	1	; select bank2/3
  8137  175C  0087               	movwf	7
  8138  175D  082C               	movf	??_setDelayOff_GO,w
  8139  175E  0081               	movwf	1
  8140                           
  8141                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  8142  175F  300F               	movlw	15
  8143  1760  052B               	andwf	setDelayOff_GO@value,w
  8144  1761  00AC               	movwf	??_setDelayOff_GO
  8145  1762  082C               	movf	??_setDelayOff_GO,w
  8146  1763  3A05               	xorlw	5
  8147  1764  1903               	skipnz
  8148  1765  2F6A               	goto	l8746
  8149  1766  082B               	movf	setDelayOff_GO@value,w
  8150  1767  390F               	andlw	15
  8151  1768  1D03               	btfss	3,2
  8152  1769  2F70               	goto	l8750
  8153  176A                     l8746:	
  8154  176A  3026               	movlw	38
  8155  176B  022B               	subwf	setDelayOff_GO@value,w
  8156  176C  1803               	skipnc
  8157  176D  2F70               	goto	l8750
  8158                           
  8159                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  8160  176E  082B               	movf	setDelayOff_GO@value,w
  8161  176F  2F71               	goto	L4
  8162  1770                     l8750:	
  8163                           ;DelayOff_B1.c: 94: } else {
  8164                           
  8165                           
  8166                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  8167  1770  3005               	movlw	5
  8168  1771                     L4:	
  8169  1771  00AC               	movwf	??_setDelayOff_GO
  8170  1772  082E               	movf	setDelayOff_GO@sw,w
  8171  1773  3E1A               	addlw	26
  8172  1774  076E               	addwf	_product,w
  8173  1775  00AD               	movwf	??_setDelayOff_GO+1
  8174  1776  082D               	movf	??_setDelayOff_GO+1,w
  8175  1777  0086               	movwf	6
  8176  1778  3002               	movlw	2	; select bank4/5
  8177  1779  0087               	movwf	7
  8178  177A  082C               	movf	??_setDelayOff_GO,w
  8179  177B  0081               	movwf	1
  8180                           
  8181                           ;DelayOff_B1.c: 96: }
  8182                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  8183  177C  2F89               	goto	l8756
  8184  177D                     l8752:	
  8185  177D  08AA               	movf	setDelayOff_GO@command,f
  8186  177E  1D03               	skipz
  8187  177F  2F89               	goto	l8756
  8188                           
  8189                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  8190  1780  082E               	movf	setDelayOff_GO@sw,w
  8191  1781  3E1A               	addlw	26
  8192  1782  076E               	addwf	_product,w
  8193  1783  00AC               	movwf	??_setDelayOff_GO
  8194  1784  082C               	movf	??_setDelayOff_GO,w
  8195  1785  0086               	movwf	6
  8196  1786  3002               	movlw	2	; select bank4/5
  8197  1787  0087               	movwf	7
  8198  1788  0181               	clrf	1
  8199  1789                     l8756:	
  8200                           
  8201                           ;DelayOff_B1.c: 99: }
  8202                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  8203  1789  0872               	movf	_DelayOff,w
  8204  178A  3E02               	addlw	2
  8205  178B  0086               	movwf	6
  8206  178C  3001               	movlw	1	; select bank2/3
  8207  178D  0087               	movwf	7
  8208  178E  3000               	movlw	0
  8209  178F  3FC0               	movwi [0]fsr1
  8210  1790  3FC1               	movwi [1]fsr1
  8211                           
  8212                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  8213  1791  0872               	movf	_DelayOff,w
  8214  1792  3E04               	addlw	4
  8215  1793  0086               	movwf	6
  8216  1794  3001               	movlw	1	; select bank2/3
  8217  1795  0087               	movwf	7
  8218  1796  0181               	clrf	1
  8219  1797  0008               	return
  8220  1798                     __end_of_setDelayOff_GO:	
  8221                           
  8222                           	psect	text34
  8223  1016                     __ptext34:	
  8224 ;; *************** function _DelayTimejudge *****************
  8225 ;; Defined at:
  8226 ;;		line 106 in file "../src/DelayOff_B1.c"
  8227 ;; Parameters:    Size  Location     Type
  8228 ;;  value           1    wreg     unsigned char 
  8229 ;; Auto vars:     Size  Location     Type
  8230 ;;  value           1    9[BANK0 ] unsigned char 
  8231 ;;  k               1    8[BANK0 ] unsigned char 
  8232 ;;  j               1    7[BANK0 ] unsigned char 
  8233 ;;  i               1    6[BANK0 ] unsigned char 
  8234 ;; Return value:  Size  Location     Type
  8235 ;;                  1    wreg      unsigned char 
  8236 ;; Registers used:
  8237 ;;		wreg, status,2, status,0, pclath, cstack
  8238 ;; Tracked objects:
  8239 ;;		On entry : 0/0
  8240 ;;		On exit  : 0/0
  8241 ;;		Unchanged: 0/0
  8242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8244 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;Total ram usage:        6 bytes
  8248 ;; Hardware stack levels used:    1
  8249 ;; Hardware stack levels required when called:    6
  8250 ;; This function calls:
  8251 ;;		___bmul
  8252 ;; This function is called by:
  8253 ;;		_setDelayOff_GO
  8254 ;; This function uses a non-reentrant model
  8255 ;;
  8256                           
  8257                           
  8258                           ;psect for function _DelayTimejudge
  8259  1016                     _DelayTimejudge:	
  8260                           
  8261                           ;incstack = 0
  8262                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  8263                           ;DelayTimejudge@value stored from wreg
  8264  1016  0020               	movlb	0	; select bank0
  8265  1017  00A9               	movwf	DelayTimejudge@value
  8266                           
  8267                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  8268  1018  3005               	movlw	5
  8269  1019  00A4               	movwf	??_DelayTimejudge
  8270  101A  0824               	movf	??_DelayTimejudge,w
  8271  101B  00A6               	movwf	DelayTimejudge@i
  8272  101C  01A7               	clrf	DelayTimejudge@j
  8273  101D  01A8               	clrf	DelayTimejudge@k
  8274                           
  8275                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  8276  101E  3031               	movlw	49
  8277  101F  0229               	subwf	DelayTimejudge@value,w
  8278  1020  1803               	skipnc
  8279  1021  283E               	goto	l8538
  8280                           
  8281                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  8282  1022  0829               	movf	DelayTimejudge@value,w
  8283  1023  390F               	andlw	15
  8284  1024  00A4               	movwf	??_DelayTimejudge
  8285  1025  0824               	movf	??_DelayTimejudge,w
  8286  1026  00A7               	movwf	DelayTimejudge@j
  8287                           
  8288                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  8289  1027  0829               	movf	DelayTimejudge@value,w
  8290  1028  00A4               	movwf	??_DelayTimejudge
  8291  1029  3004               	movlw	4
  8292  102A                     u8535:	
  8293  102A  36A4               	lsrf	??_DelayTimejudge,f
  8294  102B  0B89               	decfsz	9,f
  8295  102C  282A               	goto	u8535
  8296  102D  0824               	movf	??_DelayTimejudge,w
  8297  102E  390F               	andlw	15
  8298  102F  00A5               	movwf	??_DelayTimejudge+1
  8299  1030  0825               	movf	??_DelayTimejudge+1,w
  8300  1031  00A8               	movwf	DelayTimejudge@k
  8301                           
  8302                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  8303  1032  300A               	movlw	10
  8304  1033  00A4               	movwf	??_DelayTimejudge
  8305  1034  0824               	movf	??_DelayTimejudge,w
  8306  1035  00A0               	movwf	___bmul@multiplicand
  8307  1036  0828               	movf	DelayTimejudge@k,w
  8308  1037  319C  243C         	fcall	___bmul
  8309  1039  0020               	movlb	0	; select bank0
  8310  103A  0727               	addwf	DelayTimejudge@j,w
  8311  103B  00A5               	movwf	??_DelayTimejudge+1
  8312  103C  0825               	movf	??_DelayTimejudge+1,w
  8313  103D  00A6               	movwf	DelayTimejudge@i
  8314  103E                     l8538:	
  8315                           
  8316                           ;DelayOff_B1.c: 112: }
  8317                           ;DelayOff_B1.c: 133: return i;
  8318  103E  0826               	movf	DelayTimejudge@i,w
  8319  103F  0008               	return
  8320  1040                     __end_of_DelayTimejudge:	
  8321                           
  8322                           	psect	text35
  8323  1C3C                     __ptext35:	
  8324 ;; *************** function ___bmul *****************
  8325 ;; Defined at:
  8326 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;  multiplier      1    wreg     unsigned char 
  8329 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;  multiplier      1    3[BANK0 ] unsigned char 
  8332 ;;  product         1    2[BANK0 ] unsigned char 
  8333 ;; Return value:  Size  Location     Type
  8334 ;;                  1    wreg      unsigned char 
  8335 ;; Registers used:
  8336 ;;		wreg, status,2, status,0
  8337 ;; Tracked objects:
  8338 ;;		On entry : 0/0
  8339 ;;		On exit  : 0/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8342 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;Total ram usage:        4 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    5
  8349 ;; This function calls:
  8350 ;;		Nothing
  8351 ;; This function is called by:
  8352 ;;		_DelayTimejudge
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           
  8357                           ;psect for function ___bmul
  8358  1C3C                     ___bmul:	
  8359                           
  8360                           ;incstack = 0
  8361                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8362                           ;___bmul@multiplier stored from wreg
  8363  1C3C  0020               	movlb	0	; select bank0
  8364  1C3D  00A3               	movwf	___bmul@multiplier
  8365  1C3E  01A2               	clrf	___bmul@product
  8366  1C3F                     l8504:	
  8367  1C3F  1C23               	btfss	___bmul@multiplier,0
  8368  1C40  2C45               	goto	l8508
  8369  1C41  0820               	movf	___bmul@multiplicand,w
  8370  1C42  00A1               	movwf	??___bmul
  8371  1C43  0821               	movf	??___bmul,w
  8372  1C44  07A2               	addwf	___bmul@product,f
  8373  1C45                     l8508:	
  8374  1C45  1003               	clrc
  8375  1C46  0DA0               	rlf	___bmul@multiplicand,f
  8376  1C47  1003               	clrc
  8377  1C48  0CA3               	rrf	___bmul@multiplier,f
  8378  1C49  08A3               	movf	___bmul@multiplier,f
  8379  1C4A  1D03               	skipz
  8380  1C4B  2C3F               	goto	l8504
  8381  1C4C  0822               	movf	___bmul@product,w
  8382  1C4D  0008               	return
  8383  1C4E                     __end_of___bmul:	
  8384                           
  8385                           	psect	text36
  8386  1201                     __ptext36:	
  8387 ;; *************** function _setRFSW_AdjControl *****************
  8388 ;; Defined at:
  8389 ;;		line 409 in file "../src/RF_Control_B1.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;  sw              1    wreg     unsigned char 
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;  sw              1   70[BANK0 ] unsigned char 
  8394 ;; Return value:  Size  Location     Type
  8395 ;;		None               void
  8396 ;; Registers used:
  8397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8398 ;; Tracked objects:
  8399 ;;		On entry : 0/0
  8400 ;;		On exit  : 0/0
  8401 ;;		Unchanged: 0/0
  8402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;Total ram usage:        3 bytes
  8408 ;; Hardware stack levels used:    1
  8409 ;; Hardware stack levels required when called:   10
  8410 ;; This function calls:
  8411 ;;		_RfSWPointSelect
  8412 ;;		_setRF_DimmerValue
  8413 ;;		_setTxData
  8414 ;; This function is called by:
  8415 ;;		_setControl_Lights_Table
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           
  8420                           ;psect for function _setRFSW_AdjControl
  8421  1201                     _setRFSW_AdjControl:	
  8422                           
  8423                           ;incstack = 0
  8424                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8425                           ;setRFSW_AdjControl@sw stored from wreg
  8426  1201  0020               	movlb	0	; select bank0
  8427  1202  00E6               	movwf	setRFSW_AdjControl@sw
  8428                           
  8429                           ;RF_Control_B1.c: 410: RfSWPointSelect(sw);
  8430  1203  0866               	movf	setRFSW_AdjControl@sw,w
  8431  1204  319D  2502  3192   	fcall	_RfSWPointSelect
  8432                           
  8433                           ;RF_Control_B1.c: 411: if (RFSW->Status == 1) {
  8434  1207  0021               	movlb	1	; select bank1
  8435  1208  084E               	movf	_RFSW^(0+128),w
  8436  1209  0086               	movwf	6
  8437  120A  0187               	clrf	7
  8438  120B  1C01               	btfss	1,0
  8439  120C  2A15               	goto	l9018
  8440                           
  8441                           ;RF_Control_B1.c: 412: Memory.Modify=1;
  8442  120D  0024               	movlb	4	; select bank4
  8443  120E  1444               	bsf	(_Memory^(0+512)+36),0
  8444                           
  8445                           ;RF_Control_B1.c: 413: setRF_DimmerValue(sw);
  8446  120F  0020               	movlb	0	; select bank0
  8447  1210  0866               	movf	setRFSW_AdjControl@sw,w
  8448  1211  3191  2127  3192   	fcall	_setRF_DimmerValue
  8449                           
  8450                           ;RF_Control_B1.c: 414: } else {
  8451  1214  2A27               	goto	l2352
  8452  1215                     l9018:	
  8453                           
  8454                           ;RF_Control_B1.c: 415: product->Data[9]=product->Data[20 + sw];
  8455  1215  0020               	movlb	0	; select bank0
  8456  1216  0866               	movf	setRFSW_AdjControl@sw,w
  8457  1217  3E14               	addlw	20
  8458  1218  076E               	addwf	_product,w
  8459  1219  00E4               	movwf	??_setRFSW_AdjControl
  8460  121A  0864               	movf	??_setRFSW_AdjControl,w
  8461  121B  0086               	movwf	6
  8462  121C  3002               	movlw	2	; select bank4/5
  8463  121D  0087               	movwf	7
  8464  121E  0801               	movf	1,w
  8465  121F  00E5               	movwf	??_setRFSW_AdjControl+1
  8466  1220  086E               	movf	_product,w
  8467  1221  3E09               	addlw	9
  8468  1222  0086               	movwf	6
  8469  1223  3002               	movlw	2	; select bank4/5
  8470  1224  0087               	movwf	7
  8471  1225  0865               	movf	??_setRFSW_AdjControl+1,w
  8472  1226  0081               	movwf	1
  8473  1227                     l2352:	
  8474                           
  8475                           ;RF_Control_B1.c: 416: }
  8476                           ;RF_Control_B1.c: 417: product->Data[17]=product->Data[26 + sw];
  8477  1227  0020               	movlb	0	; select bank0
  8478  1228  0866               	movf	setRFSW_AdjControl@sw,w
  8479  1229  3E1A               	addlw	26
  8480  122A  076E               	addwf	_product,w
  8481  122B  00E4               	movwf	??_setRFSW_AdjControl
  8482  122C  0864               	movf	??_setRFSW_AdjControl,w
  8483  122D  0086               	movwf	6
  8484  122E  3002               	movlw	2	; select bank4/5
  8485  122F  0087               	movwf	7
  8486  1230  0801               	movf	1,w
  8487  1231  00E5               	movwf	??_setRFSW_AdjControl+1
  8488  1232  086E               	movf	_product,w
  8489  1233  3E11               	addlw	17
  8490  1234  0086               	movwf	6
  8491  1235  3002               	movlw	2	; select bank4/5
  8492  1236  0087               	movwf	7
  8493  1237  0865               	movf	??_setRFSW_AdjControl+1,w
  8494  1238  0081               	movwf	1
  8495                           
  8496                           ;RF_Control_B1.c: 418: setTxData();
  8497  1239  318F  2747         	fcall	_setTxData
  8498  123B  0008               	return
  8499  123C                     __end_of_setRFSW_AdjControl:	
  8500                           
  8501                           	psect	text37
  8502  1127                     __ptext37:	
  8503 ;; *************** function _setRF_DimmerValue *****************
  8504 ;; Defined at:
  8505 ;;		line 429 in file "../src/RF_Control_B1.c"
  8506 ;; Parameters:    Size  Location     Type
  8507 ;;  lights          1    wreg     unsigned char 
  8508 ;; Auto vars:     Size  Location     Type
  8509 ;;  lights          1   67[BANK0 ] unsigned char 
  8510 ;; Return value:  Size  Location     Type
  8511 ;;		None               void
  8512 ;; Registers used:
  8513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8514 ;; Tracked objects:
  8515 ;;		On entry : 0/0
  8516 ;;		On exit  : 0/0
  8517 ;;		Unchanged: 0/0
  8518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;Total ram usage:        3 bytes
  8524 ;; Hardware stack levels used:    1
  8525 ;; Hardware stack levels required when called:    9
  8526 ;; This function calls:
  8527 ;;		_setDimmerLights_AdjRF
  8528 ;; This function is called by:
  8529 ;;		_setRFSW_AdjControl
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           
  8534                           ;psect for function _setRF_DimmerValue
  8535  1127                     _setRF_DimmerValue:	
  8536                           
  8537                           ;incstack = 0
  8538                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8539                           ;setRF_DimmerValue@lights stored from wreg
  8540  1127  0020               	movlb	0	; select bank0
  8541  1128  00E3               	movwf	setRF_DimmerValue@lights
  8542                           
  8543                           ;RF_Control_B1.c: 430: if (RF_Data[9] > 0x64) {
  8544  1129  3065               	movlw	101
  8545  112A  0022               	movlb	2	; select bank2
  8546  112B  0229               	subwf	(_RF_Data^(0+256)+9),w
  8547  112C  1C03               	skipc
  8548  112D  2934               	goto	l8852
  8549                           
  8550                           ;RF_Control_B1.c: 431: RF_Data[9] = 0x64;
  8551  112E  3064               	movlw	100
  8552  112F  0020               	movlb	0	; select bank0
  8553  1130  00E1               	movwf	??_setRF_DimmerValue
  8554  1131  0861               	movf	??_setRF_DimmerValue,w
  8555  1132  0022               	movlb	2	; select bank2
  8556  1133  00A9               	movwf	(_RF_Data^(0+256)+9)
  8557  1134                     l8852:	
  8558                           
  8559                           ;RF_Control_B1.c: 432: }
  8560                           ;RF_Control_B1.c: 433: product->Data[9]=RF_Data[9];
  8561  1134  0829               	movf	(_RF_Data^(0+256)+9),w
  8562  1135  0020               	movlb	0	; select bank0
  8563  1136  00E1               	movwf	??_setRF_DimmerValue
  8564  1137  086E               	movf	_product,w
  8565  1138  3E09               	addlw	9
  8566  1139  0086               	movwf	6
  8567  113A  3002               	movlw	2	; select bank4/5
  8568  113B  0087               	movwf	7
  8569  113C  0861               	movf	??_setRF_DimmerValue,w
  8570  113D  0081               	movwf	1
  8571                           
  8572                           ;RF_Control_B1.c: 434: product->Data[11]=lights;
  8573  113E  0863               	movf	setRF_DimmerValue@lights,w
  8574  113F  00E1               	movwf	??_setRF_DimmerValue
  8575  1140  086E               	movf	_product,w
  8576  1141  3E0B               	addlw	11
  8577  1142  0086               	movwf	6
  8578  1143  3002               	movlw	2	; select bank4/5
  8579  1144  0087               	movwf	7
  8580  1145  0861               	movf	??_setRF_DimmerValue,w
  8581  1146  0081               	movwf	1
  8582                           
  8583                           ;RF_Control_B1.c: 435: product->Data[(20 + lights)]=product->Data[9];
  8584  1147  086E               	movf	_product,w
  8585  1148  3E09               	addlw	9
  8586  1149  0086               	movwf	6
  8587  114A  3002               	movlw	2	; select bank4/5
  8588  114B  0087               	movwf	7
  8589  114C  0801               	movf	1,w
  8590  114D  00E1               	movwf	??_setRF_DimmerValue
  8591  114E  0863               	movf	setRF_DimmerValue@lights,w
  8592  114F  3E14               	addlw	20
  8593  1150  076E               	addwf	_product,w
  8594  1151  00E2               	movwf	??_setRF_DimmerValue+1
  8595  1152  0862               	movf	??_setRF_DimmerValue+1,w
  8596  1153  0086               	movwf	6
  8597  1154  3002               	movlw	2	; select bank4/5
  8598  1155  0087               	movwf	7
  8599  1156  0861               	movf	??_setRF_DimmerValue,w
  8600  1157  0081               	movwf	1
  8601                           
  8602                           ;RF_Control_B1.c: 436: setDimmerLights_AdjRF(lights);
  8603  1158  0863               	movf	setRF_DimmerValue@lights,w
  8604  1159  319F  2741         	fcall	_setDimmerLights_AdjRF
  8605  115B  0008               	return
  8606  115C                     __end_of_setRF_DimmerValue:	
  8607                           
  8608                           	psect	text38
  8609  1F41                     __ptext38:	
  8610 ;; *************** function _setDimmerLights_AdjRF *****************
  8611 ;; Defined at:
  8612 ;;		line 690 in file "../src/Dimmer_B1.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;  lights          1    wreg     unsigned char 
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;  lights          1   64[BANK0 ] unsigned char 
  8617 ;; Return value:  Size  Location     Type
  8618 ;;		None               void
  8619 ;; Registers used:
  8620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8621 ;; Tracked objects:
  8622 ;;		On entry : 0/0
  8623 ;;		On exit  : 0/0
  8624 ;;		Unchanged: 0/0
  8625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8627 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;Total ram usage:        2 bytes
  8631 ;; Hardware stack levels used:    1
  8632 ;; Hardware stack levels required when called:    8
  8633 ;; This function calls:
  8634 ;;		_DimmerLightsPointSelect
  8635 ;;		_getPercentValue
  8636 ;; This function is called by:
  8637 ;;		_setRF_DimmerValue
  8638 ;; This function uses a non-reentrant model
  8639 ;;
  8640                           
  8641                           
  8642                           ;psect for function _setDimmerLights_AdjRF
  8643  1F41                     _setDimmerLights_AdjRF:	
  8644                           
  8645                           ;incstack = 0
  8646                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8647                           ;setDimmerLights_AdjRF@lights stored from wreg
  8648  1F41  0020               	movlb	0	; select bank0
  8649  1F42  00E0               	movwf	setDimmerLights_AdjRF@lights
  8650                           
  8651                           ;Dimmer_B1.c: 692: DimmerLightsPointSelect(lights);
  8652  1F43  0860               	movf	setDimmerLights_AdjRF@lights,w
  8653  1F44  319C  2460  319F   	fcall	_DimmerLightsPointSelect
  8654                           
  8655                           ;Dimmer_B1.c: 693: DimmerLights->AdjRF = 1;
  8656  1F47  0874               	movf	_DimmerLights,w
  8657  1F48  0086               	movwf	6
  8658  1F49  3001               	movlw	1	; select bank2/3
  8659  1F4A  0087               	movwf	7
  8660  1F4B  1501               	bsf	1,2
  8661                           
  8662                           ;Dimmer_B1.c: 694: DimmerLights->Signal = 1;
  8663  1F4C  0874               	movf	_DimmerLights,w
  8664  1F4D  0086               	movwf	6
  8665  1F4E  3001               	movlw	1	; select bank2/3
  8666  1F4F  0087               	movwf	7
  8667  1F50  1481               	bsf	1,1
  8668                           
  8669                           ;Dimmer_B1.c: 695: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8670  1F51  0020               	movlb	0	; select bank0
  8671  1F52  086E               	movf	_product,w
  8672  1F53  3E09               	addlw	9
  8673  1F54  0086               	movwf	6
  8674  1F55  3002               	movlw	2	; select bank4/5
  8675  1F56  0087               	movwf	7
  8676  1F57  0801               	movf	1,w
  8677  1F58  3196  2617         	fcall	_getPercentValue
  8678  1F5A  0020               	movlb	0	; select bank0
  8679  1F5B  00DF               	movwf	??_setDimmerLights_AdjRF
  8680  1F5C  0874               	movf	_DimmerLights,w
  8681  1F5D  3E05               	addlw	5
  8682  1F5E  0086               	movwf	6
  8683  1F5F  3001               	movlw	1	; select bank2/3
  8684  1F60  0087               	movwf	7
  8685  1F61  085F               	movf	??_setDimmerLights_AdjRF,w
  8686  1F62  0081               	movwf	1
  8687  1F63  0008               	return
  8688  1F64                     __end_of_setDimmerLights_AdjRF:	
  8689                           
  8690                           	psect	text39
  8691  1617                     __ptext39:	
  8692 ;; *************** function _getPercentValue *****************
  8693 ;; Defined at:
  8694 ;;		line 763 in file "../src/Dimmer_B1.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  value           1    wreg     unsigned char 
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;  value           1   59[BANK0 ] unsigned char 
  8699 ;;  i               3   60[BANK0 ] float 
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  1    wreg      unsigned char 
  8702 ;; Registers used:
  8703 ;;		wreg, status,2, status,0, pclath, cstack
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;Total ram usage:        6 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    7
  8716 ;; This function calls:
  8717 ;;		___awtoft
  8718 ;;		___ftadd
  8719 ;;		___ftdiv
  8720 ;;		___ftmul
  8721 ;;		___fttol
  8722 ;; This function is called by:
  8723 ;;		_setDimmerLights_AdjRF
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           
  8728                           ;psect for function _getPercentValue
  8729  1617                     _getPercentValue:	
  8730                           
  8731                           ;incstack = 0
  8732                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8733                           ;getPercentValue@value stored from wreg
  8734  1617  0020               	movlb	0	; select bank0
  8735  1618  00DB               	movwf	getPercentValue@value
  8736                           
  8737                           ;Dimmer_B1.c: 765: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8738  1619  3000               	movlw	0
  8739  161A  00DC               	movwf	getPercentValue@i
  8740  161B  30E0               	movlw	224
  8741  161C  00DD               	movwf	getPercentValue@i+1
  8742  161D  3041               	movlw	65
  8743  161E  00DE               	movwf	getPercentValue@i+2
  8744                           
  8745                           ;Dimmer_B1.c: 766: i /= 100;
  8746  161F  3000               	movlw	0
  8747  1620  00AE               	movwf	___ftdiv@f2
  8748  1621  30C8               	movlw	200
  8749  1622  00AF               	movwf	___ftdiv@f2+1
  8750  1623  3042               	movlw	66
  8751  1624  00B0               	movwf	___ftdiv@f2+2
  8752  1625  085C               	movf	getPercentValue@i,w
  8753  1626  00B1               	movwf	___ftdiv@f1
  8754  1627  085D               	movf	getPercentValue@i+1,w
  8755  1628  00B2               	movwf	___ftdiv@f1+1
  8756  1629  085E               	movf	getPercentValue@i+2,w
  8757  162A  00B3               	movwf	___ftdiv@f1+2
  8758  162B  3187  2753  3196   	fcall	___ftdiv
  8759  162E  0020               	movlb	0	; select bank0
  8760  162F  082E               	movf	?___ftdiv,w
  8761  1630  00DC               	movwf	getPercentValue@i
  8762  1631  082F               	movf	?___ftdiv+1,w
  8763  1632  00DD               	movwf	getPercentValue@i+1
  8764  1633  0830               	movf	?___ftdiv+2,w
  8765  1634  00DE               	movwf	getPercentValue@i+2
  8766                           
  8767                           ;Dimmer_B1.c: 767: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8768  1635  085B               	movf	getPercentValue@value,w
  8769  1636  00D9               	movwf	??_getPercentValue
  8770  1637  01DA               	clrf	??_getPercentValue+1
  8771  1638  09D9               	comf	??_getPercentValue,f
  8772  1639  09DA               	comf	??_getPercentValue+1,f
  8773  163A  0AD9               	incf	??_getPercentValue,f
  8774  163B  1903               	skipnz
  8775  163C  0ADA               	incf	??_getPercentValue+1,f
  8776  163D  0859               	movf	??_getPercentValue,w
  8777  163E  3E64               	addlw	100
  8778  163F  00A8               	movwf	___awtoft@c
  8779  1640  3000               	movlw	0
  8780  1641  3D5A               	addwfc	??_getPercentValue+1,w
  8781  1642  00A9               	movwf	___awtoft@c+1
  8782  1643  319E  26D9  3196   	fcall	___awtoft
  8783  1646  0020               	movlb	0	; select bank0
  8784  1647  0828               	movf	?___awtoft,w
  8785  1648  00B1               	movwf	___ftmul@f2
  8786  1649  0829               	movf	?___awtoft+1,w
  8787  164A  00B2               	movwf	___ftmul@f2+1
  8788  164B  082A               	movf	?___awtoft+2,w
  8789  164C  00B3               	movwf	___ftmul@f2+2
  8790  164D  085C               	movf	getPercentValue@i,w
  8791  164E  00AE               	movwf	___ftmul@f1
  8792  164F  085D               	movf	getPercentValue@i+1,w
  8793  1650  00AF               	movwf	___ftmul@f1+1
  8794  1651  085E               	movf	getPercentValue@i+2,w
  8795  1652  00B0               	movwf	___ftmul@f1+2
  8796  1653  318E  2693  3196   	fcall	___ftmul
  8797  1656  0020               	movlb	0	; select bank0
  8798  1657  082E               	movf	?___ftmul,w
  8799  1658  00C1               	movwf	___ftadd@f2
  8800  1659  082F               	movf	?___ftmul+1,w
  8801  165A  00C2               	movwf	___ftadd@f2+1
  8802  165B  0830               	movf	?___ftmul+2,w
  8803  165C  00C3               	movwf	___ftadd@f2+2
  8804  165D  3000               	movlw	0
  8805  165E  00BE               	movwf	___ftadd@f1
  8806  165F  3000               	movlw	0
  8807  1660  00BF               	movwf	___ftadd@f1+1
  8808  1661  3042               	movlw	66
  8809  1662  00C0               	movwf	___ftadd@f1+2
  8810  1663  3184  24C6  3196   	fcall	___ftadd
  8811  1666  0020               	movlb	0	; select bank0
  8812  1667  083E               	movf	?___ftadd,w
  8813  1668  00CB               	movwf	___fttol@f1
  8814  1669  083F               	movf	?___ftadd+1,w
  8815  166A  00CC               	movwf	___fttol@f1+1
  8816  166B  0840               	movf	?___ftadd+2,w
  8817  166C  00CD               	movwf	___fttol@f1+2
  8818  166D  318C  2469         	fcall	___fttol
  8819  166F  0020               	movlb	0	; select bank0
  8820  1670  084B               	movf	?___fttol,w
  8821  1671  0008               	return
  8822  1672                     __end_of_getPercentValue:	
  8823                           
  8824                           	psect	text40
  8825  0E93                     __ptext40:	
  8826 ;; *************** function ___ftmul *****************
  8827 ;; Defined at:
  8828 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8829 ;; Parameters:    Size  Location     Type
  8830 ;;  f1              3   14[BANK0 ] float 
  8831 ;;  f2              3   17[BANK0 ] float 
  8832 ;; Auto vars:     Size  Location     Type
  8833 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8834 ;;  sign            1   29[BANK0 ] unsigned char 
  8835 ;;  cntr            1   28[BANK0 ] unsigned char 
  8836 ;;  exp             1   24[BANK0 ] unsigned char 
  8837 ;; Return value:  Size  Location     Type
  8838 ;;                  3   14[BANK0 ] float 
  8839 ;; Registers used:
  8840 ;;		wreg, status,2, status,0, pclath, cstack
  8841 ;; Tracked objects:
  8842 ;;		On entry : 0/0
  8843 ;;		On exit  : 0/0
  8844 ;;		Unchanged: 0/0
  8845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8846 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;Total ram usage:       16 bytes
  8851 ;; Hardware stack levels used:    1
  8852 ;; Hardware stack levels required when called:    6
  8853 ;; This function calls:
  8854 ;;		___ftpack
  8855 ;; This function is called by:
  8856 ;;		_getPercentValue
  8857 ;; This function uses a non-reentrant model
  8858 ;;
  8859                           
  8860                           
  8861                           ;psect for function ___ftmul
  8862  0E93                     ___ftmul:	
  8863                           
  8864                           ;incstack = 0
  8865                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8866  0E93  0020               	movlb	0	; select bank0
  8867  0E94  082E               	movf	___ftmul@f1,w
  8868  0E95  00B4               	movwf	??___ftmul
  8869  0E96  082F               	movf	___ftmul@f1+1,w
  8870  0E97  00B5               	movwf	??___ftmul+1
  8871  0E98  0830               	movf	___ftmul@f1+2,w
  8872  0E99  00B6               	movwf	??___ftmul+2
  8873  0E9A  1003               	clrc
  8874  0E9B  0D35               	rlf	??___ftmul+1,w
  8875  0E9C  0D36               	rlf	??___ftmul+2,w
  8876  0E9D  00B7               	movwf	??___ftmul+3
  8877  0E9E  0837               	movf	??___ftmul+3,w
  8878  0E9F  00B8               	movwf	___ftmul@exp
  8879  0EA0  08B8               	movf	___ftmul@exp,f
  8880  0EA1  1D03               	skipz
  8881  0EA2  2EAA               	goto	l6022
  8882  0EA3  3000               	movlw	0
  8883  0EA4  00AE               	movwf	?___ftmul
  8884  0EA5  3000               	movlw	0
  8885  0EA6  00AF               	movwf	?___ftmul+1
  8886  0EA7  3000               	movlw	0
  8887  0EA8  00B0               	movwf	?___ftmul+2
  8888  0EA9  0008               	return
  8889  0EAA                     l6022:	
  8890  0EAA  0831               	movf	___ftmul@f2,w
  8891  0EAB  00B4               	movwf	??___ftmul
  8892  0EAC  0832               	movf	___ftmul@f2+1,w
  8893  0EAD  00B5               	movwf	??___ftmul+1
  8894  0EAE  0833               	movf	___ftmul@f2+2,w
  8895  0EAF  00B6               	movwf	??___ftmul+2
  8896  0EB0  1003               	clrc
  8897  0EB1  0D35               	rlf	??___ftmul+1,w
  8898  0EB2  0D36               	rlf	??___ftmul+2,w
  8899  0EB3  00B7               	movwf	??___ftmul+3
  8900  0EB4  0837               	movf	??___ftmul+3,w
  8901  0EB5  00BD               	movwf	___ftmul@sign
  8902  0EB6  08BD               	movf	___ftmul@sign,f
  8903  0EB7  1D03               	skipz
  8904  0EB8  2EC0               	goto	l6028
  8905  0EB9  3000               	movlw	0
  8906  0EBA  00AE               	movwf	?___ftmul
  8907  0EBB  3000               	movlw	0
  8908  0EBC  00AF               	movwf	?___ftmul+1
  8909  0EBD  3000               	movlw	0
  8910  0EBE  00B0               	movwf	?___ftmul+2
  8911  0EBF  0008               	return
  8912  0EC0                     l6028:	
  8913  0EC0  083D               	movf	___ftmul@sign,w
  8914  0EC1  3E7B               	addlw	123
  8915  0EC2  00B4               	movwf	??___ftmul
  8916  0EC3  0834               	movf	??___ftmul,w
  8917  0EC4  07B8               	addwf	___ftmul@exp,f
  8918  0EC5  082E               	movf	___ftmul@f1,w
  8919  0EC6  00B4               	movwf	??___ftmul
  8920  0EC7  082F               	movf	___ftmul@f1+1,w
  8921  0EC8  00B5               	movwf	??___ftmul+1
  8922  0EC9  0830               	movf	___ftmul@f1+2,w
  8923  0ECA  00B6               	movwf	??___ftmul+2
  8924  0ECB  3010               	movlw	16
  8925  0ECC                     u4685:	
  8926  0ECC  36B6               	lsrf	??___ftmul+2,f
  8927  0ECD  0CB5               	rrf	??___ftmul+1,f
  8928  0ECE  0CB4               	rrf	??___ftmul,f
  8929  0ECF  0B89               	decfsz	9,f
  8930  0ED0  2ECC               	goto	u4685
  8931  0ED1  0834               	movf	??___ftmul,w
  8932  0ED2  00B7               	movwf	??___ftmul+3
  8933  0ED3  0837               	movf	??___ftmul+3,w
  8934  0ED4  00BD               	movwf	___ftmul@sign
  8935  0ED5  0831               	movf	___ftmul@f2,w
  8936  0ED6  00B4               	movwf	??___ftmul
  8937  0ED7  0832               	movf	___ftmul@f2+1,w
  8938  0ED8  00B5               	movwf	??___ftmul+1
  8939  0ED9  0833               	movf	___ftmul@f2+2,w
  8940  0EDA  00B6               	movwf	??___ftmul+2
  8941  0EDB  3010               	movlw	16
  8942  0EDC                     u4695:	
  8943  0EDC  36B6               	lsrf	??___ftmul+2,f
  8944  0EDD  0CB5               	rrf	??___ftmul+1,f
  8945  0EDE  0CB4               	rrf	??___ftmul,f
  8946  0EDF  0B89               	decfsz	9,f
  8947  0EE0  2EDC               	goto	u4695
  8948  0EE1  0834               	movf	??___ftmul,w
  8949  0EE2  00B7               	movwf	??___ftmul+3
  8950  0EE3  0837               	movf	??___ftmul+3,w
  8951  0EE4  06BD               	xorwf	___ftmul@sign,f
  8952  0EE5  3080               	movlw	128
  8953  0EE6  00B4               	movwf	??___ftmul
  8954  0EE7  0834               	movf	??___ftmul,w
  8955  0EE8  05BD               	andwf	___ftmul@sign,f
  8956  0EE9  17AF               	bsf	___ftmul@f1+1,7
  8957  0EEA  17B2               	bsf	___ftmul@f2+1,7
  8958  0EEB  30FF               	movlw	255
  8959  0EEC  05B1               	andwf	___ftmul@f2,f
  8960  0EED  30FF               	movlw	255
  8961  0EEE  05B2               	andwf	___ftmul@f2+1,f
  8962  0EEF  3000               	movlw	0
  8963  0EF0  05B3               	andwf	___ftmul@f2+2,f
  8964  0EF1  3000               	movlw	0
  8965  0EF2  00B9               	movwf	___ftmul@f3_as_product
  8966  0EF3  3000               	movlw	0
  8967  0EF4  00BA               	movwf	___ftmul@f3_as_product+1
  8968  0EF5  3000               	movlw	0
  8969  0EF6  00BB               	movwf	___ftmul@f3_as_product+2
  8970  0EF7  3007               	movlw	7
  8971  0EF8  00B4               	movwf	??___ftmul
  8972  0EF9  0834               	movf	??___ftmul,w
  8973  0EFA  00BC               	movwf	___ftmul@cntr
  8974  0EFB                     l6040:	
  8975  0EFB  1C2E               	btfss	___ftmul@f1,0
  8976  0EFC  2F03               	goto	l6044
  8977  0EFD  0831               	movf	___ftmul@f2,w
  8978  0EFE  07B9               	addwf	___ftmul@f3_as_product,f
  8979  0EFF  0832               	movf	___ftmul@f2+1,w
  8980  0F00  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8981  0F01  0833               	movf	___ftmul@f2+2,w
  8982  0F02  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8983  0F03                     l6044:	
  8984  0F03  3001               	movlw	1
  8985  0F04                     u4715:	
  8986  0F04  36B0               	lsrf	___ftmul@f1+2,f
  8987  0F05  0CAF               	rrf	___ftmul@f1+1,f
  8988  0F06  0CAE               	rrf	___ftmul@f1,f
  8989  0F07  0B89               	decfsz	9,f
  8990  0F08  2F04               	goto	u4715
  8991  0F09  3001               	movlw	1
  8992  0F0A                     u4725:	
  8993  0F0A  35B1               	lslf	___ftmul@f2,f
  8994  0F0B  0DB2               	rlf	___ftmul@f2+1,f
  8995  0F0C  0DB3               	rlf	___ftmul@f2+2,f
  8996  0F0D  0B89               	decfsz	9,f
  8997  0F0E  2F0A               	goto	u4725
  8998  0F0F  3001               	movlw	1
  8999  0F10  02BC               	subwf	___ftmul@cntr,f
  9000  0F11  1D03               	btfss	3,2
  9001  0F12  2EFB               	goto	l6040
  9002  0F13  3009               	movlw	9
  9003  0F14  00B4               	movwf	??___ftmul
  9004  0F15  0834               	movf	??___ftmul,w
  9005  0F16  00BC               	movwf	___ftmul@cntr
  9006  0F17                     l6052:	
  9007  0F17  1C2E               	btfss	___ftmul@f1,0
  9008  0F18  2F1F               	goto	l6056
  9009  0F19  0831               	movf	___ftmul@f2,w
  9010  0F1A  07B9               	addwf	___ftmul@f3_as_product,f
  9011  0F1B  0832               	movf	___ftmul@f2+1,w
  9012  0F1C  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9013  0F1D  0833               	movf	___ftmul@f2+2,w
  9014  0F1E  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9015  0F1F                     l6056:	
  9016  0F1F  3001               	movlw	1
  9017  0F20                     u4755:	
  9018  0F20  36B0               	lsrf	___ftmul@f1+2,f
  9019  0F21  0CAF               	rrf	___ftmul@f1+1,f
  9020  0F22  0CAE               	rrf	___ftmul@f1,f
  9021  0F23  0B89               	decfsz	9,f
  9022  0F24  2F20               	goto	u4755
  9023  0F25  3001               	movlw	1
  9024  0F26                     u4765:	
  9025  0F26  36BB               	lsrf	___ftmul@f3_as_product+2,f
  9026  0F27  0CBA               	rrf	___ftmul@f3_as_product+1,f
  9027  0F28  0CB9               	rrf	___ftmul@f3_as_product,f
  9028  0F29  0B89               	decfsz	9,f
  9029  0F2A  2F26               	goto	u4765
  9030  0F2B  3001               	movlw	1
  9031  0F2C  02BC               	subwf	___ftmul@cntr,f
  9032  0F2D  1D03               	btfss	3,2
  9033  0F2E  2F17               	goto	l6052
  9034  0F2F  0839               	movf	___ftmul@f3_as_product,w
  9035  0F30  00A0               	movwf	___ftpack@arg
  9036  0F31  083A               	movf	___ftmul@f3_as_product+1,w
  9037  0F32  00A1               	movwf	___ftpack@arg+1
  9038  0F33  083B               	movf	___ftmul@f3_as_product+2,w
  9039  0F34  00A2               	movwf	___ftpack@arg+2
  9040  0F35  0838               	movf	___ftmul@exp,w
  9041  0F36  00B4               	movwf	??___ftmul
  9042  0F37  0834               	movf	??___ftmul,w
  9043  0F38  00A3               	movwf	___ftpack@exp
  9044  0F39  083D               	movf	___ftmul@sign,w
  9045  0F3A  00B5               	movwf	??___ftmul+1
  9046  0F3B  0835               	movf	??___ftmul+1,w
  9047  0F3C  00A4               	movwf	___ftpack@sign
  9048  0F3D  3196  26D1         	fcall	___ftpack
  9049  0F3F  0020               	movlb	0	; select bank0
  9050  0F40  0820               	movf	?___ftpack,w
  9051  0F41  00AE               	movwf	?___ftmul
  9052  0F42  0821               	movf	?___ftpack+1,w
  9053  0F43  00AF               	movwf	?___ftmul+1
  9054  0F44  0822               	movf	?___ftpack+2,w
  9055  0F45  00B0               	movwf	?___ftmul+2
  9056  0F46  0008               	return
  9057  0F47                     __end_of___ftmul:	
  9058                           
  9059                           	psect	text41
  9060  04C6                     __ptext41:	
  9061 ;; *************** function ___ftadd *****************
  9062 ;; Defined at:
  9063 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  9064 ;; Parameters:    Size  Location     Type
  9065 ;;  f1              3   30[BANK0 ] float 
  9066 ;;  f2              3   33[BANK0 ] float 
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;  exp1            1   42[BANK0 ] unsigned char 
  9069 ;;  exp2            1   41[BANK0 ] unsigned char 
  9070 ;;  sign            1   40[BANK0 ] unsigned char 
  9071 ;; Return value:  Size  Location     Type
  9072 ;;                  3   30[BANK0 ] float 
  9073 ;; Registers used:
  9074 ;;		wreg, status,2, status,0, pclath, cstack
  9075 ;; Tracked objects:
  9076 ;;		On entry : 0/0
  9077 ;;		On exit  : 0/0
  9078 ;;		Unchanged: 0/0
  9079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9080 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;Total ram usage:       13 bytes
  9085 ;; Hardware stack levels used:    1
  9086 ;; Hardware stack levels required when called:    6
  9087 ;; This function calls:
  9088 ;;		___ftpack
  9089 ;; This function is called by:
  9090 ;;		_getPercentValue
  9091 ;; This function uses a non-reentrant model
  9092 ;;
  9093                           
  9094                           
  9095                           ;psect for function ___ftadd
  9096  04C6                     ___ftadd:	
  9097                           
  9098                           ;incstack = 0
  9099                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9100  04C6  0020               	movlb	0	; select bank0
  9101  04C7  083E               	movf	___ftadd@f1,w
  9102  04C8  00C4               	movwf	??___ftadd
  9103  04C9  083F               	movf	___ftadd@f1+1,w
  9104  04CA  00C5               	movwf	??___ftadd+1
  9105  04CB  0840               	movf	___ftadd@f1+2,w
  9106  04CC  00C6               	movwf	??___ftadd+2
  9107  04CD  1003               	clrc
  9108  04CE  0D45               	rlf	??___ftadd+1,w
  9109  04CF  0D46               	rlf	??___ftadd+2,w
  9110  04D0  00C7               	movwf	??___ftadd+3
  9111  04D1  0847               	movf	??___ftadd+3,w
  9112  04D2  00CA               	movwf	___ftadd@exp1
  9113  04D3  0841               	movf	___ftadd@f2,w
  9114  04D4  00C4               	movwf	??___ftadd
  9115  04D5  0842               	movf	___ftadd@f2+1,w
  9116  04D6  00C5               	movwf	??___ftadd+1
  9117  04D7  0843               	movf	___ftadd@f2+2,w
  9118  04D8  00C6               	movwf	??___ftadd+2
  9119  04D9  1003               	clrc
  9120  04DA  0D45               	rlf	??___ftadd+1,w
  9121  04DB  0D46               	rlf	??___ftadd+2,w
  9122  04DC  00C7               	movwf	??___ftadd+3
  9123  04DD  0847               	movf	??___ftadd+3,w
  9124  04DE  00C9               	movwf	___ftadd@exp2
  9125  04DF  084A               	movf	___ftadd@exp1,w
  9126  04E0  1903               	btfsc	3,2
  9127  04E1  2CEE               	goto	l5910
  9128  04E2  0849               	movf	___ftadd@exp2,w
  9129  04E3  024A               	subwf	___ftadd@exp1,w
  9130  04E4  1803               	skipnc
  9131  04E5  2CF5               	goto	l5914
  9132  04E6  034A               	decf	___ftadd@exp1,w
  9133  04E7  3AFF               	xorlw	255
  9134  04E8  0749               	addwf	___ftadd@exp2,w
  9135  04E9  00C4               	movwf	??___ftadd
  9136  04EA  3019               	movlw	25
  9137  04EB  0244               	subwf	??___ftadd,w
  9138  04EC  1C03               	skipc
  9139  04ED  2CF5               	goto	l5914
  9140  04EE                     l5910:	
  9141  04EE  0841               	movf	___ftadd@f2,w
  9142  04EF  00BE               	movwf	?___ftadd
  9143  04F0  0842               	movf	___ftadd@f2+1,w
  9144  04F1  00BF               	movwf	?___ftadd+1
  9145  04F2  0843               	movf	___ftadd@f2+2,w
  9146  04F3  00C0               	movwf	?___ftadd+2
  9147  04F4  0008               	return
  9148  04F5                     l5914:	
  9149  04F5  0849               	movf	___ftadd@exp2,w
  9150  04F6  1903               	btfsc	3,2
  9151  04F7  0008               	return
  9152  04F8  084A               	movf	___ftadd@exp1,w
  9153  04F9  0249               	subwf	___ftadd@exp2,w
  9154  04FA  1803               	skipnc
  9155  04FB  2D04               	goto	l5920
  9156  04FC  0349               	decf	___ftadd@exp2,w
  9157  04FD  3AFF               	xorlw	255
  9158  04FE  074A               	addwf	___ftadd@exp1,w
  9159  04FF  00C4               	movwf	??___ftadd
  9160  0500  3019               	movlw	25
  9161  0501  0244               	subwf	??___ftadd,w
  9162  0502  1803               	btfsc	3,0
  9163  0503  0008               	return
  9164  0504                     l5920:	
  9165  0504  3006               	movlw	6
  9166  0505  00C4               	movwf	??___ftadd
  9167  0506  0844               	movf	??___ftadd,w
  9168  0507  00C8               	movwf	___ftadd@sign
  9169  0508  1BC0               	btfsc	___ftadd@f1+2,7
  9170  0509  17C8               	bsf	___ftadd@sign,7
  9171  050A  1BC3               	btfsc	___ftadd@f2+2,7
  9172  050B  1748               	bsf	___ftadd@sign,6
  9173  050C  17BF               	bsf	___ftadd@f1+1,7
  9174  050D  30FF               	movlw	255
  9175  050E  05BE               	andwf	___ftadd@f1,f
  9176  050F  30FF               	movlw	255
  9177  0510  05BF               	andwf	___ftadd@f1+1,f
  9178  0511  3000               	movlw	0
  9179  0512  05C0               	andwf	___ftadd@f1+2,f
  9180  0513  17C2               	bsf	___ftadd@f2+1,7
  9181  0514  30FF               	movlw	255
  9182  0515  05C1               	andwf	___ftadd@f2,f
  9183  0516  30FF               	movlw	255
  9184  0517  05C2               	andwf	___ftadd@f2+1,f
  9185  0518  3000               	movlw	0
  9186  0519  05C3               	andwf	___ftadd@f2+2,f
  9187  051A  0849               	movf	___ftadd@exp2,w
  9188  051B  024A               	subwf	___ftadd@exp1,w
  9189  051C  1803               	skipnc
  9190  051D  2D40               	goto	l5942
  9191  051E                     l5932:	
  9192  051E  3001               	movlw	1
  9193  051F                     u4445:	
  9194  051F  35C1               	lslf	___ftadd@f2,f
  9195  0520  0DC2               	rlf	___ftadd@f2+1,f
  9196  0521  0DC3               	rlf	___ftadd@f2+2,f
  9197  0522  0B89               	decfsz	9,f
  9198  0523  2D1F               	goto	u4445
  9199  0524  3001               	movlw	1
  9200  0525  02C9               	subwf	___ftadd@exp2,f
  9201  0526  0849               	movf	___ftadd@exp2,w
  9202  0527  064A               	xorwf	___ftadd@exp1,w
  9203  0528  1903               	skipnz
  9204  0529  2D3B               	goto	l5940
  9205  052A  3001               	movlw	1
  9206  052B  02C8               	subwf	___ftadd@sign,f
  9207  052C  0848               	movf	___ftadd@sign,w
  9208  052D  3907               	andlw	7
  9209  052E  1903               	btfsc	3,2
  9210  052F  2D3B               	goto	l5940
  9211  0530  2D1E               	goto	l5932
  9212  0531                     l5938:	
  9213  0531  3001               	movlw	1
  9214  0532                     u4475:	
  9215  0532  36C0               	lsrf	___ftadd@f1+2,f
  9216  0533  0CBF               	rrf	___ftadd@f1+1,f
  9217  0534  0CBE               	rrf	___ftadd@f1,f
  9218  0535  0B89               	decfsz	9,f
  9219  0536  2D32               	goto	u4475
  9220  0537  3001               	movlw	1
  9221  0538  00C4               	movwf	??___ftadd
  9222  0539  0844               	movf	??___ftadd,w
  9223  053A  07CA               	addwf	___ftadd@exp1,f
  9224  053B                     l5940:	
  9225  053B  084A               	movf	___ftadd@exp1,w
  9226  053C  0649               	xorwf	___ftadd@exp2,w
  9227  053D  1903               	btfsc	3,2
  9228  053E  2D65               	goto	l3057
  9229  053F  2D31               	goto	l5938
  9230  0540                     l5942:	
  9231  0540  084A               	movf	___ftadd@exp1,w
  9232  0541  0249               	subwf	___ftadd@exp2,w
  9233  0542  1803               	skipnc
  9234  0543  2D65               	goto	l3057
  9235  0544                     l5944:	
  9236  0544  3001               	movlw	1
  9237  0545                     u4505:	
  9238  0545  35BE               	lslf	___ftadd@f1,f
  9239  0546  0DBF               	rlf	___ftadd@f1+1,f
  9240  0547  0DC0               	rlf	___ftadd@f1+2,f
  9241  0548  0B89               	decfsz	9,f
  9242  0549  2D45               	goto	u4505
  9243  054A  3001               	movlw	1
  9244  054B  02CA               	subwf	___ftadd@exp1,f
  9245  054C  0849               	movf	___ftadd@exp2,w
  9246  054D  064A               	xorwf	___ftadd@exp1,w
  9247  054E  1903               	skipnz
  9248  054F  2D61               	goto	l5952
  9249  0550  3001               	movlw	1
  9250  0551  02C8               	subwf	___ftadd@sign,f
  9251  0552  0848               	movf	___ftadd@sign,w
  9252  0553  3907               	andlw	7
  9253  0554  1903               	btfsc	3,2
  9254  0555  2D61               	goto	l5952
  9255  0556  2D44               	goto	l5944
  9256  0557                     l5950:	
  9257  0557  3001               	movlw	1
  9258  0558                     u4535:	
  9259  0558  36C3               	lsrf	___ftadd@f2+2,f
  9260  0559  0CC2               	rrf	___ftadd@f2+1,f
  9261  055A  0CC1               	rrf	___ftadd@f2,f
  9262  055B  0B89               	decfsz	9,f
  9263  055C  2D58               	goto	u4535
  9264  055D  3001               	movlw	1
  9265  055E  00C4               	movwf	??___ftadd
  9266  055F  0844               	movf	??___ftadd,w
  9267  0560  07C9               	addwf	___ftadd@exp2,f
  9268  0561                     l5952:	
  9269  0561  084A               	movf	___ftadd@exp1,w
  9270  0562  0649               	xorwf	___ftadd@exp2,w
  9271  0563  1D03               	skipz
  9272  0564  2D57               	goto	l5950
  9273  0565                     l3057:	
  9274  0565  1FC8               	btfss	___ftadd@sign,7
  9275  0566  2D77               	goto	l5956
  9276  0567  30FF               	movlw	255
  9277  0568  06BE               	xorwf	___ftadd@f1,f
  9278  0569  30FF               	movlw	255
  9279  056A  06BF               	xorwf	___ftadd@f1+1,f
  9280  056B  30FF               	movlw	255
  9281  056C  06C0               	xorwf	___ftadd@f1+2,f
  9282  056D  3001               	movlw	1
  9283  056E  07BE               	addwf	___ftadd@f1,f
  9284  056F  3000               	movlw	0
  9285  0570  1803               	skipnc
  9286  0571  3001               	movlw	1
  9287  0572  07BF               	addwf	___ftadd@f1+1,f
  9288  0573  3000               	movlw	0
  9289  0574  1803               	skipnc
  9290  0575  3001               	movlw	1
  9291  0576  07C0               	addwf	___ftadd@f1+2,f
  9292  0577                     l5956:	
  9293  0577  1F48               	btfss	___ftadd@sign,6
  9294  0578  2D89               	goto	l5960
  9295  0579  30FF               	movlw	255
  9296  057A  06C1               	xorwf	___ftadd@f2,f
  9297  057B  30FF               	movlw	255
  9298  057C  06C2               	xorwf	___ftadd@f2+1,f
  9299  057D  30FF               	movlw	255
  9300  057E  06C3               	xorwf	___ftadd@f2+2,f
  9301  057F  3001               	movlw	1
  9302  0580  07C1               	addwf	___ftadd@f2,f
  9303  0581  3000               	movlw	0
  9304  0582  1803               	skipnc
  9305  0583  3001               	movlw	1
  9306  0584  07C2               	addwf	___ftadd@f2+1,f
  9307  0585  3000               	movlw	0
  9308  0586  1803               	skipnc
  9309  0587  3001               	movlw	1
  9310  0588  07C3               	addwf	___ftadd@f2+2,f
  9311  0589                     l5960:	
  9312  0589  01C8               	clrf	___ftadd@sign
  9313  058A  083E               	movf	___ftadd@f1,w
  9314  058B  07C1               	addwf	___ftadd@f2,f
  9315  058C  083F               	movf	___ftadd@f1+1,w
  9316  058D  3DC2               	addwfc	___ftadd@f2+1,f
  9317  058E  0840               	movf	___ftadd@f1+2,w
  9318  058F  3DC3               	addwfc	___ftadd@f2+2,f
  9319  0590  1FC3               	btfss	___ftadd@f2+2,7
  9320  0591  2DA4               	goto	l5970
  9321  0592  30FF               	movlw	255
  9322  0593  06C1               	xorwf	___ftadd@f2,f
  9323  0594  30FF               	movlw	255
  9324  0595  06C2               	xorwf	___ftadd@f2+1,f
  9325  0596  30FF               	movlw	255
  9326  0597  06C3               	xorwf	___ftadd@f2+2,f
  9327  0598  3001               	movlw	1
  9328  0599  07C1               	addwf	___ftadd@f2,f
  9329  059A  3000               	movlw	0
  9330  059B  1803               	skipnc
  9331  059C  3001               	movlw	1
  9332  059D  07C2               	addwf	___ftadd@f2+1,f
  9333  059E  3000               	movlw	0
  9334  059F  1803               	skipnc
  9335  05A0  3001               	movlw	1
  9336  05A1  07C3               	addwf	___ftadd@f2+2,f
  9337  05A2  01C8               	clrf	___ftadd@sign
  9338  05A3  0AC8               	incf	___ftadd@sign,f
  9339  05A4                     l5970:	
  9340  05A4  0841               	movf	___ftadd@f2,w
  9341  05A5  00A0               	movwf	___ftpack@arg
  9342  05A6  0842               	movf	___ftadd@f2+1,w
  9343  05A7  00A1               	movwf	___ftpack@arg+1
  9344  05A8  0843               	movf	___ftadd@f2+2,w
  9345  05A9  00A2               	movwf	___ftpack@arg+2
  9346  05AA  084A               	movf	___ftadd@exp1,w
  9347  05AB  00C4               	movwf	??___ftadd
  9348  05AC  0844               	movf	??___ftadd,w
  9349  05AD  00A3               	movwf	___ftpack@exp
  9350  05AE  0848               	movf	___ftadd@sign,w
  9351  05AF  00C5               	movwf	??___ftadd+1
  9352  05B0  0845               	movf	??___ftadd+1,w
  9353  05B1  00A4               	movwf	___ftpack@sign
  9354  05B2  3196  26D1         	fcall	___ftpack
  9355  05B4  0020               	movlb	0	; select bank0
  9356  05B5  0820               	movf	?___ftpack,w
  9357  05B6  00BE               	movwf	?___ftadd
  9358  05B7  0821               	movf	?___ftpack+1,w
  9359  05B8  00BF               	movwf	?___ftadd+1
  9360  05B9  0822               	movf	?___ftpack+2,w
  9361  05BA  00C0               	movwf	?___ftadd+2
  9362  05BB  0008               	return
  9363  05BC                     __end_of___ftadd:	
  9364                           
  9365                           	psect	text42
  9366  1C07                     __ptext42:	
  9367 ;; *************** function _getBuz_GO *****************
  9368 ;; Defined at:
  9369 ;;		line 82 in file "../src/Buzzer_B1.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;		None
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;  i               2    4[BANK0 ] int 
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  2    0[BANK0 ] int 
  9376 ;; Registers used:
  9377 ;;		wreg, status,2, status,0
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9383 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;Total ram usage:        6 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    5
  9390 ;; This function calls:
  9391 ;;		Nothing
  9392 ;; This function is called by:
  9393 ;;		_setRF_Main
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           
  9398                           ;psect for function _getBuz_GO
  9399  1C07                     _getBuz_GO:	
  9400                           
  9401                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9402                           
  9403                           ;incstack = 0
  9404                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9405  1C07  0021               	movlb	1	; select bank1
  9406  1C08  0C32               	rrf	_Buz1^(0+128),w
  9407  1C09  3901               	andlw	1
  9408  1C0A  0020               	movlb	0	; select bank0
  9409  1C0B  00A2               	movwf	??_getBuz_GO
  9410  1C0C  01A3               	clrf	??_getBuz_GO+1
  9411  1C0D  0822               	movf	??_getBuz_GO,w
  9412  1C0E  00A4               	movwf	getBuz_GO@i
  9413  1C0F  0823               	movf	??_getBuz_GO+1,w
  9414  1C10  00A5               	movwf	getBuz_GO@i+1
  9415                           
  9416                           ;Buzzer_B1.c: 84: return i;
  9417  1C11  0825               	movf	getBuz_GO@i+1,w
  9418  1C12  01A1               	clrf	?_getBuz_GO+1
  9419  1C13  07A1               	addwf	?_getBuz_GO+1,f
  9420  1C14  0824               	movf	getBuz_GO@i,w
  9421  1C15  01A0               	clrf	?_getBuz_GO
  9422  1C16  07A0               	addwf	?_getBuz_GO,f
  9423  1C17  0008               	return
  9424  1C18                     __end_of_getBuz_GO:	
  9425                           
  9426                           	psect	text43
  9427  1C73                     __ptext43:	
  9428 ;; *************** function _RF_RxDisable *****************
  9429 ;; Defined at:
  9430 ;;		line 228 in file "../src/RF_Control_B1.c"
  9431 ;; Parameters:    Size  Location     Type
  9432 ;;		None
  9433 ;; Auto vars:     Size  Location     Type
  9434 ;;		None
  9435 ;; Return value:  Size  Location     Type
  9436 ;;		None               void
  9437 ;; Registers used:
  9438 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9439 ;; Tracked objects:
  9440 ;;		On entry : 0/0
  9441 ;;		On exit  : 0/0
  9442 ;;		Unchanged: 0/0
  9443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;Total ram usage:        0 bytes
  9449 ;; Hardware stack levels used:    1
  9450 ;; Hardware stack levels required when called:    7
  9451 ;; This function calls:
  9452 ;;		_CC2500_WriteCommand
  9453 ;; This function is called by:
  9454 ;;		_setRF_Main
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           
  9459                           ;psect for function _RF_RxDisable
  9460  1C73                     _RF_RxDisable:	
  9461                           
  9462                           ;RF_Control_B1.c: 229: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  9463                           
  9464                           ;incstack = 0
  9465                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9466  1C73  0021               	movlb	1	; select bank1
  9467  1C74  18BE               	btfsc	_RF1^(0+128),1
  9468  1C75  2C78               	goto	l2300
  9469  1C76  1DBE               	btfss	_RF1^(0+128),3
  9470  1C77  0008               	return
  9471  1C78                     l2300:	
  9472                           
  9473                           ;RF_Control_B1.c: 230: RF1.RxStatus = 0;
  9474  1C78  11BE               	bcf	_RF1^(0+128),3
  9475                           
  9476                           ;RF_Control_B1.c: 231: RF1.ReceiveGO = 0;
  9477  1C79  10BE               	bcf	_RF1^(0+128),1
  9478                           
  9479                           ;RF_Control_B1.c: 232: CC2500_WriteCommand(0x36);
  9480  1C7A  3036               	movlw	54
  9481  1C7B  319D  2578  319C   	fcall	_CC2500_WriteCommand
  9482                           
  9483                           ;RF_Control_B1.c: 233: CC2500_WriteCommand(0x3A);
  9484  1C7E  303A               	movlw	58
  9485  1C7F  319D  2578  319C   	fcall	_CC2500_WriteCommand
  9486                           
  9487                           ;RF_Control_B1.c: 234: CC2500_WriteCommand(0x3B);
  9488  1C82  303B               	movlw	59
  9489  1C83  319D  2578         	fcall	_CC2500_WriteCommand
  9490  1C85  0008               	return
  9491  1C86                     __end_of_RF_RxDisable:	
  9492                           
  9493                           	psect	text44
  9494  1798                     __ptext44:	
  9495 ;; *************** function _CC2500_TxData *****************
  9496 ;; Defined at:
  9497 ;;		line 32 in file "../src/CC2500_B1.c"
  9498 ;; Parameters:    Size  Location     Type
  9499 ;;		None
  9500 ;; Auto vars:     Size  Location     Type
  9501 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9502 ;; Return value:  Size  Location     Type
  9503 ;;		None               void
  9504 ;; Registers used:
  9505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9506 ;; Tracked objects:
  9507 ;;		On entry : 0/0
  9508 ;;		On exit  : 0/0
  9509 ;;		Unchanged: 0/0
  9510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;Total ram usage:        2 bytes
  9516 ;; Hardware stack levels used:    1
  9517 ;; Hardware stack levels required when called:    7
  9518 ;; This function calls:
  9519 ;;		_CC2500_WriteByte
  9520 ;;		_CC2500_WriteCommand
  9521 ;;		_Timeout_Counter
  9522 ;;		_set_TimeoutCleared
  9523 ;; This function is called by:
  9524 ;;		_setRF_Main
  9525 ;; This function uses a non-reentrant model
  9526 ;;
  9527                           
  9528                           
  9529                           ;psect for function _CC2500_TxData
  9530  1798                     _CC2500_TxData:	
  9531                           
  9532                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9533                           ;CC2500_B1.c: 35: RC4 = 0;
  9534                           
  9535                           ;incstack = 0
  9536                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9537  1798  0020               	movlb	0	; select bank0
  9538  1799  120E               	bcf	14,4	;volatile
  9539                           
  9540                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9541  179A  307F               	movlw	127
  9542  179B  00A4               	movwf	??_CC2500_TxData
  9543  179C  0824               	movf	??_CC2500_TxData,w
  9544  179D  0021               	movlb	1	; select bank1
  9545  179E  00D1               	movwf	_SPI0Buffer^(0+128)
  9546                           
  9547                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9548  179F  2FA3               	goto	l9178
  9549  17A0                     l9176:	
  9550                           
  9551                           ;CC2500_B1.c: 38: Timeout_Counter();
  9552  17A0  319C  24C2  3197   	fcall	_Timeout_Counter
  9553  17A3                     l9178:	
  9554  17A3  0020               	movlb	0	; select bank0
  9555  17A4  1D0E               	btfss	14,2	;volatile
  9556  17A5  2FA9               	goto	l9182
  9557  17A6  0021               	movlb	1	; select bank1
  9558  17A7  1D2F               	btfss	(_myMain^(0+128)+15),2
  9559  17A8  2FA0               	goto	l9176
  9560  17A9                     l9182:	
  9561                           
  9562                           ;CC2500_B1.c: 39: };
  9563                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9564  17A9  319A  222B  3197   	fcall	_set_TimeoutCleared
  9565                           
  9566                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9567  17AC  319D  2546  3197   	fcall	_CC2500_WriteByte
  9568                           
  9569                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9570  17AF  0021               	movlb	1	; select bank1
  9571  17B0  0852               	movf	_Tx_Length^(0+128),w
  9572  17B1  0020               	movlb	0	; select bank0
  9573  17B2  00A4               	movwf	??_CC2500_TxData
  9574  17B3  0824               	movf	??_CC2500_TxData,w
  9575  17B4  0021               	movlb	1	; select bank1
  9576  17B5  00D1               	movwf	_SPI0Buffer^(0+128)
  9577                           
  9578                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9579  17B6  319D  2546  3197   	fcall	_CC2500_WriteByte
  9580                           
  9581                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9582  17B9  0020               	movlb	0	; select bank0
  9583  17BA  01A5               	clrf	CC2500_TxData@loop_e
  9584  17BB                     l9196:	
  9585  17BB  0021               	movlb	1	; select bank1
  9586  17BC  0852               	movf	_Tx_Length^(0+128),w
  9587  17BD  0020               	movlb	0	; select bank0
  9588  17BE  0225               	subwf	CC2500_TxData@loop_e,w
  9589  17BF  1803               	btfsc	3,0
  9590  17C0  2FD4               	goto	l267
  9591                           
  9592                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9593  17C1  0825               	movf	CC2500_TxData@loop_e,w
  9594  17C2  3E20               	addlw	_RF_Data& (0+255)
  9595  17C3  0086               	movwf	6
  9596  17C4  3001               	movlw	1	; select bank2/3
  9597  17C5  0087               	movwf	7
  9598  17C6  0801               	movf	1,w
  9599  17C7  00A4               	movwf	??_CC2500_TxData
  9600  17C8  0824               	movf	??_CC2500_TxData,w
  9601  17C9  0021               	movlb	1	; select bank1
  9602  17CA  00D1               	movwf	_SPI0Buffer^(0+128)
  9603                           
  9604                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9605  17CB  319D  2546  3197   	fcall	_CC2500_WriteByte
  9606  17CE  3001               	movlw	1
  9607  17CF  0020               	movlb	0	; select bank0
  9608  17D0  00A4               	movwf	??_CC2500_TxData
  9609  17D1  0824               	movf	??_CC2500_TxData,w
  9610  17D2  07A5               	addwf	CC2500_TxData@loop_e,f
  9611  17D3  2FBB               	goto	l9196
  9612  17D4                     l267:	
  9613                           
  9614                           ;CC2500_B1.c: 48: }
  9615                           ;CC2500_B1.c: 49: RC4 = 1;
  9616  17D4  160E               	bsf	14,4	;volatile
  9617                           
  9618                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9619  17D5  3035               	movlw	53
  9620  17D6  319D  2578  3197   	fcall	_CC2500_WriteCommand
  9621                           
  9622                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9623  17D9  2FDD               	goto	l9202
  9624  17DA                     l9200:	
  9625                           
  9626                           ;CC2500_B1.c: 52: Timeout_Counter();
  9627  17DA  319C  24C2  3197   	fcall	_Timeout_Counter
  9628  17DD                     l9202:	
  9629  17DD  0020               	movlb	0	; select bank0
  9630  17DE  180D               	btfsc	13,0	;volatile
  9631  17DF  2FE3               	goto	l9206
  9632  17E0  0021               	movlb	1	; select bank1
  9633  17E1  1D2F               	btfss	(_myMain^(0+128)+15),2
  9634  17E2  2FDA               	goto	l9200
  9635  17E3                     l9206:	
  9636                           
  9637                           ;CC2500_B1.c: 53: };
  9638                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9639  17E3  319A  222B  3197   	fcall	_set_TimeoutCleared
  9640                           
  9641                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9642  17E6  2FEA               	goto	l9210
  9643  17E7                     l9208:	
  9644                           
  9645                           ;CC2500_B1.c: 57: Timeout_Counter();
  9646  17E7  319C  24C2  3197   	fcall	_Timeout_Counter
  9647  17EA                     l9210:	
  9648  17EA  0020               	movlb	0	; select bank0
  9649  17EB  1C0D               	btfss	13,0	;volatile
  9650  17EC  2FF0               	goto	l9214
  9651  17ED  0021               	movlb	1	; select bank1
  9652  17EE  1D2F               	btfss	(_myMain^(0+128)+15),2
  9653  17EF  2FE7               	goto	l9208
  9654  17F0                     l9214:	
  9655                           
  9656                           ;CC2500_B1.c: 58: };
  9657                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9658  17F0  319A  222B  3197   	fcall	_set_TimeoutCleared
  9659                           
  9660                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9661  17F3  3036               	movlw	54
  9662  17F4  319D  2578  3197   	fcall	_CC2500_WriteCommand
  9663                           
  9664                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9665  17F7  303B               	movlw	59
  9666  17F8  319D  2578  3197   	fcall	_CC2500_WriteCommand
  9667                           
  9668                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9669  17FB  303A               	movlw	58
  9670  17FC  319D  2578         	fcall	_CC2500_WriteCommand
  9671                           
  9672                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9673  17FE  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9674  17FF  0008               	return
  9675  1800                     __end_of_CC2500_TxData:	
  9676                           
  9677                           	psect	text45
  9678  0B60                     __ptext45:	
  9679 ;; *************** function _CC2500_RxData *****************
  9680 ;; Defined at:
  9681 ;;		line 70 in file "../src/CC2500_B1.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;		None
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9686 ;; Return value:  Size  Location     Type
  9687 ;;		None               void
  9688 ;; Registers used:
  9689 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;Total ram usage:        2 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    7
  9702 ;; This function calls:
  9703 ;;		_CC2500_ReadByte
  9704 ;;		_CC2500_ReadStatus
  9705 ;;		_CC2500_WriteByte
  9706 ;;		_CC2500_WriteCommand
  9707 ;;		_Timeout_Counter
  9708 ;;		_set_TimeoutCleared
  9709 ;; This function is called by:
  9710 ;;		_setRF_Main
  9711 ;; This function uses a non-reentrant model
  9712 ;;
  9713                           
  9714                           
  9715                           ;psect for function _CC2500_RxData
  9716  0B60                     _CC2500_RxData:	
  9717                           
  9718                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9719                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9720                           
  9721                           ;incstack = 0
  9722                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9723  0B60  0020               	movlb	0	; select bank0
  9724  0B61  180D               	btfsc	13,0	;volatile
  9725  0B62  2B67               	goto	l9230
  9726  0B63  2B70               	goto	l9236
  9727  0B64                     l9228:	
  9728                           ;CC2500_B1.c: 76: {
  9729                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9730                           
  9731                           
  9732                           ;CC2500_B1.c: 78: Timeout_Counter();
  9733  0B64  319C  24C2  318B   	fcall	_Timeout_Counter
  9734  0B67                     l9230:	
  9735  0B67  0020               	movlb	0	; select bank0
  9736  0B68  1C0D               	btfss	13,0	;volatile
  9737  0B69  2B6D               	goto	l9234
  9738  0B6A  0021               	movlb	1	; select bank1
  9739  0B6B  1D2F               	btfss	(_myMain^(0+128)+15),2
  9740  0B6C  2B64               	goto	l9228
  9741  0B6D                     l9234:	
  9742                           
  9743                           ;CC2500_B1.c: 79: };
  9744                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9745  0B6D  319A  222B  318B   	fcall	_set_TimeoutCleared
  9746  0B70                     l9236:	
  9747                           
  9748                           ;CC2500_B1.c: 81: }
  9749                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9750  0B70  303B               	movlw	59
  9751  0B71  319F  2764  318B   	fcall	_CC2500_ReadStatus
  9752                           
  9753                           ;CC2500_B1.c: 84: if (s_data != 0) {
  9754  0B74  0021               	movlb	1	; select bank1
  9755  0B75  0855               	movf	_s_data^(0+128),w
  9756  0B76  1903               	btfsc	3,2
  9757  0B77  0008               	return
  9758                           
  9759                           ;CC2500_B1.c: 85: RC4 = 0;
  9760  0B78  0020               	movlb	0	; select bank0
  9761  0B79  120E               	bcf	14,4	;volatile
  9762                           
  9763                           ;CC2500_B1.c: 86: SPI0Buffer = 0x3F + 0xC0;
  9764  0B7A  30FF               	movlw	255
  9765  0B7B  00A4               	movwf	??_CC2500_RxData
  9766  0B7C  0824               	movf	??_CC2500_RxData,w
  9767  0B7D  0021               	movlb	1	; select bank1
  9768  0B7E  00D1               	movwf	_SPI0Buffer^(0+128)
  9769                           
  9770                           ;CC2500_B1.c: 87: while (RC2 == 1 && myMain.Timeout == 0) {
  9771  0B7F  2B86               	goto	l9246
  9772  0B80                     l9248:	
  9773  0B80  0021               	movlb	1	; select bank1
  9774  0B81  192F               	btfsc	(_myMain^(0+128)+15),2
  9775  0B82  2B89               	goto	l292
  9776                           
  9777                           ;CC2500_B1.c: 88: Timeout_Counter();
  9778  0B83  319C  24C2  318B   	fcall	_Timeout_Counter
  9779  0B86                     l9246:	
  9780  0B86  0020               	movlb	0	; select bank0
  9781  0B87  190E               	btfsc	14,2	;volatile
  9782  0B88  2B80               	goto	l9248
  9783  0B89                     l292:	
  9784                           
  9785                           ;CC2500_B1.c: 89: };
  9786                           ;CC2500_B1.c: 90: if (myMain.Timeout == 0) {
  9787  0B89  0021               	movlb	1	; select bank1
  9788  0B8A  192F               	btfsc	(_myMain^(0+128)+15),2
  9789  0B8B  2BDD               	goto	l293
  9790                           
  9791                           ;CC2500_B1.c: 91: CC2500_WriteByte();
  9792  0B8C  319D  2546  318B   	fcall	_CC2500_WriteByte
  9793                           
  9794                           ;CC2500_B1.c: 93: CC2500_ReadByte();
  9795  0B8F  319E  2601  318B   	fcall	_CC2500_ReadByte
  9796                           
  9797                           ;CC2500_B1.c: 94: Rx_Length = SPI0Buffer;
  9798  0B92  0021               	movlb	1	; select bank1
  9799  0B93  0851               	movf	_SPI0Buffer^(0+128),w
  9800  0B94  0020               	movlb	0	; select bank0
  9801  0B95  00A4               	movwf	??_CC2500_RxData
  9802  0B96  0824               	movf	??_CC2500_RxData,w
  9803  0B97  0021               	movlb	1	; select bank1
  9804  0B98  00D0               	movwf	_Rx_Length^(0+128)
  9805                           
  9806                           ;CC2500_B1.c: 95: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9807  0B99  0020               	movlb	0	; select bank0
  9808  0B9A  01A5               	clrf	CC2500_RxData@loop_f
  9809  0B9B                     l9262:	
  9810  0B9B  0021               	movlb	1	; select bank1
  9811  0B9C  0850               	movf	_Rx_Length^(0+128),w
  9812  0B9D  0020               	movlb	0	; select bank0
  9813  0B9E  0225               	subwf	CC2500_RxData@loop_f,w
  9814  0B9F  1803               	btfsc	3,0
  9815  0BA0  2BB4               	goto	l9264
  9816                           
  9817                           ;CC2500_B1.c: 96: CC2500_ReadByte();
  9818  0BA1  319E  2601  318B   	fcall	_CC2500_ReadByte
  9819                           
  9820                           ;CC2500_B1.c: 97: RF_Data[loop_f] = SPI0Buffer;
  9821  0BA4  0021               	movlb	1	; select bank1
  9822  0BA5  0851               	movf	_SPI0Buffer^(0+128),w
  9823  0BA6  0020               	movlb	0	; select bank0
  9824  0BA7  00A4               	movwf	??_CC2500_RxData
  9825  0BA8  0825               	movf	CC2500_RxData@loop_f,w
  9826  0BA9  3E20               	addlw	_RF_Data& (0+255)
  9827  0BAA  0086               	movwf	6
  9828  0BAB  3001               	movlw	1	; select bank2/3
  9829  0BAC  0087               	movwf	7
  9830  0BAD  0824               	movf	??_CC2500_RxData,w
  9831  0BAE  0081               	movwf	1
  9832  0BAF  3001               	movlw	1
  9833  0BB0  00A4               	movwf	??_CC2500_RxData
  9834  0BB1  0824               	movf	??_CC2500_RxData,w
  9835  0BB2  07A5               	addwf	CC2500_RxData@loop_f,f
  9836  0BB3  2B9B               	goto	l9262
  9837  0BB4                     l9264:	
  9838                           
  9839                           ;CC2500_B1.c: 98: }
  9840                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  9841  0BB4  319E  2601  318B   	fcall	_CC2500_ReadByte
  9842                           
  9843                           ;CC2500_B1.c: 100: RSSI = SPI0Buffer;
  9844  0BB7  0021               	movlb	1	; select bank1
  9845  0BB8  0851               	movf	_SPI0Buffer^(0+128),w
  9846  0BB9  0020               	movlb	0	; select bank0
  9847  0BBA  00A4               	movwf	??_CC2500_RxData
  9848  0BBB  0824               	movf	??_CC2500_RxData,w
  9849  0BBC  0021               	movlb	1	; select bank1
  9850  0BBD  00CF               	movwf	_RSSI^(0+128)
  9851                           
  9852                           ;CC2500_B1.c: 101: CC2500_ReadByte();
  9853  0BBE  319E  2601  318B   	fcall	_CC2500_ReadByte
  9854                           
  9855                           ;CC2500_B1.c: 102: CRC = SPI0Buffer;
  9856  0BC1  0021               	movlb	1	; select bank1
  9857  0BC2  0851               	movf	_SPI0Buffer^(0+128),w
  9858  0BC3  0020               	movlb	0	; select bank0
  9859  0BC4  00A4               	movwf	??_CC2500_RxData
  9860  0BC5  0824               	movf	??_CC2500_RxData,w
  9861  0BC6  0021               	movlb	1	; select bank1
  9862  0BC7  00CA               	movwf	_CRC^(0+128)
  9863                           
  9864                           ;CC2500_B1.c: 103: RC4 = 1;
  9865  0BC8  0020               	movlb	0	; select bank0
  9866  0BC9  160E               	bsf	14,4	;volatile
  9867                           
  9868                           ;CC2500_B1.c: 104: if (CRC & 0x80)
  9869  0BCA  0021               	movlb	1	; select bank1
  9870  0BCB  1BCA               	btfsc	_CRC^(0+128),7
  9871                           
  9872                           ;CC2500_B1.c: 105: Receive_OK = 1;
  9873  0BCC  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9874                           
  9875                           ;CC2500_B1.c: 107: CC2500_WriteCommand(0x36);
  9876  0BCD  3036               	movlw	54
  9877  0BCE  319D  2578  318B   	fcall	_CC2500_WriteCommand
  9878                           
  9879                           ;CC2500_B1.c: 108: CC2500_WriteCommand(0x3A);
  9880  0BD1  303A               	movlw	58
  9881  0BD2  319D  2578  318B   	fcall	_CC2500_WriteCommand
  9882                           
  9883                           ;CC2500_B1.c: 109: CC2500_WriteCommand(0x3B);
  9884  0BD5  303B               	movlw	59
  9885  0BD6  319D  2578  318B   	fcall	_CC2500_WriteCommand
  9886                           
  9887                           ;CC2500_B1.c: 110: RF1.RxStatus = 0;
  9888  0BD9  0021               	movlb	1	; select bank1
  9889  0BDA  11BE               	bcf	_RF1^(0+128),3
  9890                           
  9891                           ;CC2500_B1.c: 111: RF1.ReceiveGO = 1;
  9892  0BDB  14BE               	bsf	_RF1^(0+128),1
  9893                           
  9894                           ;CC2500_B1.c: 112: } else {
  9895  0BDC  2BDF               	goto	l9282
  9896  0BDD                     l293:	
  9897                           
  9898                           ;CC2500_B1.c: 113: RC4 = 1;
  9899  0BDD  0020               	movlb	0	; select bank0
  9900  0BDE  160E               	bsf	14,4	;volatile
  9901  0BDF                     l9282:	
  9902                           
  9903                           ;CC2500_B1.c: 114: }
  9904                           ;CC2500_B1.c: 115: set_TimeoutCleared();
  9905  0BDF  319A  222B         	fcall	_set_TimeoutCleared
  9906  0BE1  0021               	movlb	1	; select bank1
  9907  0BE2  0008               	return
  9908  0BE3                     __end_of_CC2500_RxData:	
  9909                           
  9910                           	psect	text46
  9911  1F64                     __ptext46:	
  9912 ;; *************** function _CC2500_ReadStatus *****************
  9913 ;; Defined at:
  9914 ;;		line 306 in file "../src/CC2500_B1.c"
  9915 ;; Parameters:    Size  Location     Type
  9916 ;;  status_addr     1    wreg     unsigned char 
  9917 ;; Auto vars:     Size  Location     Type
  9918 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9919 ;; Return value:  Size  Location     Type
  9920 ;;		None               void
  9921 ;; Registers used:
  9922 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9923 ;; Tracked objects:
  9924 ;;		On entry : 0/0
  9925 ;;		On exit  : 0/0
  9926 ;;		Unchanged: 0/0
  9927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9929 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9931 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;Total ram usage:        2 bytes
  9933 ;; Hardware stack levels used:    1
  9934 ;; Hardware stack levels required when called:    6
  9935 ;; This function calls:
  9936 ;;		_CC2500_ReadByte
  9937 ;;		_CC2500_WriteByte
  9938 ;;		_Timeout_Counter
  9939 ;;		_set_TimeoutCleared
  9940 ;; This function is called by:
  9941 ;;		_CC2500_RxData
  9942 ;; This function uses a non-reentrant model
  9943 ;;
  9944                           
  9945                           
  9946                           ;psect for function _CC2500_ReadStatus
  9947  1F64                     _CC2500_ReadStatus:	
  9948                           
  9949                           ;incstack = 0
  9950                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9951                           ;CC2500_ReadStatus@status_addr stored from wreg
  9952  1F64  0020               	movlb	0	; select bank0
  9953  1F65  00A3               	movwf	CC2500_ReadStatus@status_addr
  9954                           
  9955                           ;CC2500_B1.c: 307: RC4 = 0;
  9956  1F66  120E               	bcf	14,4	;volatile
  9957                           
  9958                           ;CC2500_B1.c: 308: SPI0Buffer = status_addr + 0xC0;
  9959  1F67  0823               	movf	CC2500_ReadStatus@status_addr,w
  9960  1F68  3EC0               	addlw	192
  9961  1F69  00A2               	movwf	??_CC2500_ReadStatus
  9962  1F6A  0822               	movf	??_CC2500_ReadStatus,w
  9963  1F6B  0021               	movlb	1	; select bank1
  9964  1F6C  00D1               	movwf	_SPI0Buffer^(0+128)
  9965                           
  9966                           ;CC2500_B1.c: 310: while (RC2 == 1 && myMain.Timeout == 0) {
  9967  1F6D  2F71               	goto	l9044
  9968  1F6E                     l9042:	
  9969                           
  9970                           ;CC2500_B1.c: 311: Timeout_Counter();
  9971  1F6E  319C  24C2  319F   	fcall	_Timeout_Counter
  9972  1F71                     l9044:	
  9973  1F71  0020               	movlb	0	; select bank0
  9974  1F72  1D0E               	btfss	14,2	;volatile
  9975  1F73  2F77               	goto	l9048
  9976  1F74  0021               	movlb	1	; select bank1
  9977  1F75  1D2F               	btfss	(_myMain^(0+128)+15),2
  9978  1F76  2F6E               	goto	l9042
  9979  1F77                     l9048:	
  9980                           
  9981                           ;CC2500_B1.c: 312: };
  9982                           ;CC2500_B1.c: 313: set_TimeoutCleared();
  9983  1F77  319A  222B  319F   	fcall	_set_TimeoutCleared
  9984                           
  9985                           ;CC2500_B1.c: 315: CC2500_WriteByte();
  9986  1F7A  319D  2546  319F   	fcall	_CC2500_WriteByte
  9987                           
  9988                           ;CC2500_B1.c: 316: CC2500_ReadByte();
  9989  1F7D  319E  2601         	fcall	_CC2500_ReadByte
  9990                           
  9991                           ;CC2500_B1.c: 317: RC4 = 1;
  9992  1F7F  0020               	movlb	0	; select bank0
  9993  1F80  160E               	bsf	14,4	;volatile
  9994                           
  9995                           ;CC2500_B1.c: 319: s_data = SPI0Buffer;
  9996  1F81  0021               	movlb	1	; select bank1
  9997  1F82  0851               	movf	_SPI0Buffer^(0+128),w
  9998  1F83  0020               	movlb	0	; select bank0
  9999  1F84  00A2               	movwf	??_CC2500_ReadStatus
 10000  1F85  0822               	movf	??_CC2500_ReadStatus,w
 10001  1F86  0021               	movlb	1	; select bank1
 10002  1F87  00D5               	movwf	_s_data^(0+128)
 10003  1F88  0008               	return
 10004  1F89                     __end_of_CC2500_ReadStatus:	
 10005                           
 10006                           	psect	text47
 10007  1E01                     __ptext47:	
 10008 ;; *************** function _CC2500_ReadByte *****************
 10009 ;; Defined at:
 10010 ;;		line 240 in file "../src/CC2500_B1.c"
 10011 ;; Parameters:    Size  Location     Type
 10012 ;;		None
 10013 ;; Auto vars:     Size  Location     Type
 10014 ;;  loop_b          1    1[BANK0 ] unsigned char 
 10015 ;; Return value:  Size  Location     Type
 10016 ;;		None               void
 10017 ;; Registers used:
 10018 ;;		wreg, status,2, status,0
 10019 ;; Tracked objects:
 10020 ;;		On entry : 0/0
 10021 ;;		On exit  : 0/0
 10022 ;;		Unchanged: 0/0
 10023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10028 ;;Total ram usage:        2 bytes
 10029 ;; Hardware stack levels used:    1
 10030 ;; Hardware stack levels required when called:    5
 10031 ;; This function calls:
 10032 ;;		Nothing
 10033 ;; This function is called by:
 10034 ;;		_CC2500_RxData
 10035 ;;		_CC2500_ReadStatus
 10036 ;;		_CC2500_ReadREG
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           
 10041                           ;psect for function _CC2500_ReadByte
 10042  1E01                     _CC2500_ReadByte:	
 10043                           
 10044                           ;CC2500_B1.c: 241: unsigned char loop_b;
 10045                           ;CC2500_B1.c: 242: for (loop_b = 0; loop_b < 8; loop_b++) {
 10046                           
 10047                           ;incstack = 0
 10048                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
 10049  1E01  0020               	movlb	0	; select bank0
 10050  1E02  01A1               	clrf	CC2500_ReadByte@loop_b
 10051  1E03                     L5:	
 10052  1E03  3008               	movlw	8
 10053  1E04  0221               	subwf	CC2500_ReadByte@loop_b,w
 10054  1E05  1803               	btfsc	3,0
 10055  1E06  0008               	return
 10056                           
 10057                           ;CC2500_B1.c: 243: RC1 = 1;
 10058  1E07  148E               	bsf	14,1	;volatile
 10059                           
 10060                           ;CC2500_B1.c: 244: SPI0Buffer <<= 1;
 10061  1E08  1003               	clrc
 10062  1E09  0021               	movlb	1	; select bank1
 10063  1E0A  0DD1               	rlf	_SPI0Buffer^(0+128),f
 10064                           
 10065                           ;CC2500_B1.c: 245: if (RC2 == 1)
 10066  1E0B  0020               	movlb	0	; select bank0
 10067  1E0C  1D0E               	btfss	14,2	;volatile
 10068  1E0D  2E11               	goto	l8900
 10069                           
 10070                           ;CC2500_B1.c: 246: SPI0Buffer |= 0x01;
 10071  1E0E  0021               	movlb	1	; select bank1
 10072  1E0F  1451               	bsf	_SPI0Buffer^(0+128),0
 10073  1E10  2E17               	goto	l8902
 10074  1E11                     l8900:	
 10075                           
 10076                           ;CC2500_B1.c: 247: else
 10077                           ;CC2500_B1.c: 248: SPI0Buffer &= 0xFE;
 10078  1E11  30FE               	movlw	254
 10079  1E12  0020               	movlb	0	; select bank0
 10080  1E13  00A0               	movwf	??_CC2500_ReadByte
 10081  1E14  0820               	movf	??_CC2500_ReadByte,w
 10082  1E15  0021               	movlb	1	; select bank1
 10083  1E16  05D1               	andwf	_SPI0Buffer^(0+128),f
 10084  1E17                     l8902:	
 10085                           
 10086                           ;CC2500_B1.c: 249: RC1 = 0;
 10087  1E17  0020               	movlb	0	; select bank0
 10088  1E18  108E               	bcf	14,1	;volatile
 10089  1E19  3001               	movlw	1
 10090  1E1A  00A0               	movwf	??_CC2500_ReadByte
 10091  1E1B  0820               	movf	??_CC2500_ReadByte,w
 10092  1E1C  07A1               	addwf	CC2500_ReadByte@loop_b,f
 10093  1E1D  2E03               	goto	L5
 10094  1E1E                     __end_of_CC2500_ReadByte:	
 10095                           
 10096                           	psect	text48
 10097  1A13                     __ptext48:	
 10098 ;; *************** function _RF_Initialization *****************
 10099 ;; Defined at:
 10100 ;;		line 9 in file "../src/RF_Control_B1.c"
 10101 ;; Parameters:    Size  Location     Type
 10102 ;;		None
 10103 ;; Auto vars:     Size  Location     Type
 10104 ;;		None
 10105 ;; Return value:  Size  Location     Type
 10106 ;;		None               void
 10107 ;; Registers used:
 10108 ;;		wreg, status,2, status,0, pclath, cstack
 10109 ;; Tracked objects:
 10110 ;;		On entry : 0/0
 10111 ;;		On exit  : 0/0
 10112 ;;		Unchanged: 0/0
 10113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10118 ;;Total ram usage:        0 bytes
 10119 ;; Hardware stack levels used:    1
 10120 ;; Hardware stack levels required when called:    6
 10121 ;; This function calls:
 10122 ;;		_setRF_Initialization
 10123 ;; This function is called by:
 10124 ;;		_main
 10125 ;; This function uses a non-reentrant model
 10126 ;;
 10127                           
 10128                           
 10129                           ;psect for function _RF_Initialization
 10130  1A13                     _RF_Initialization:	
 10131                           
 10132                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10133                           
 10134                           ;incstack = 0
 10135                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10136  1A13  319B  2323         	fcall	_setRF_Initialization
 10137  1A15  0008               	return
 10138  1A16                     __end_of_RF_Initialization:	
 10139                           
 10140                           	psect	text49
 10141  1B23                     __ptext49:	
 10142 ;; *************** function _setRF_Initialization *****************
 10143 ;; Defined at:
 10144 ;;		line 43 in file "../src/RF_Control_B1.c"
 10145 ;; Parameters:    Size  Location     Type
 10146 ;;		None
 10147 ;; Auto vars:     Size  Location     Type
 10148 ;;		None
 10149 ;; Return value:  Size  Location     Type
 10150 ;;		None               void
 10151 ;; Registers used:
 10152 ;;		wreg
 10153 ;; Tracked objects:
 10154 ;;		On entry : 0/0
 10155 ;;		On exit  : 0/0
 10156 ;;		Unchanged: 0/0
 10157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10161 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10162 ;;Total ram usage:        1 bytes
 10163 ;; Hardware stack levels used:    1
 10164 ;; Hardware stack levels required when called:    5
 10165 ;; This function calls:
 10166 ;;		Nothing
 10167 ;; This function is called by:
 10168 ;;		_RF_Initialization
 10169 ;; This function uses a non-reentrant model
 10170 ;;
 10171                           
 10172                           
 10173                           ;psect for function _setRF_Initialization
 10174  1B23                     _setRF_Initialization:	
 10175                           
 10176                           ;RF_Control_B1.c: 45: Tx_Length = 21;
 10177                           
 10178                           ;incstack = 0
 10179                           ; Regs used in _setRF_Initialization: [wreg]
 10180  1B23  3015               	movlw	21
 10181  1B24  0020               	movlb	0	; select bank0
 10182  1B25  00A0               	movwf	??_setRF_Initialization
 10183  1B26  0820               	movf	??_setRF_Initialization,w
 10184  1B27  0021               	movlb	1	; select bank1
 10185  1B28  00D2               	movwf	_Tx_Length^(0+128)
 10186                           
 10187                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
 10188  1B29  3014               	movlw	20
 10189  1B2A  0020               	movlb	0	; select bank0
 10190  1B2B  00A0               	movwf	??_setRF_Initialization
 10191  1B2C  0820               	movf	??_setRF_Initialization,w
 10192  1B2D  0021               	movlb	1	; select bank1
 10193  1B2E  00C4               	movwf	(_RF1^(0+128)+6)
 10194  1B2F  0008               	return
 10195  1B30                     __end_of_setRF_Initialization:	
 10196                           
 10197                           	psect	text50
 10198  1C2A                     __ptext50:	
 10199 ;; *************** function _Mcu_Initialization *****************
 10200 ;; Defined at:
 10201 ;;		line 30 in file "../src/MCU_B1.c"
 10202 ;; Parameters:    Size  Location     Type
 10203 ;;		None
 10204 ;; Auto vars:     Size  Location     Type
 10205 ;;		None
 10206 ;; Return value:  Size  Location     Type
 10207 ;;		None               void
 10208 ;; Registers used:
 10209 ;;		wreg, status,2, status,0, pclath, cstack
 10210 ;; Tracked objects:
 10211 ;;		On entry : 0/0
 10212 ;;		On exit  : 0/0
 10213 ;;		Unchanged: 0/0
 10214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;Total ram usage:        0 bytes
 10220 ;; Hardware stack levels used:    1
 10221 ;; Hardware stack levels required when called:    6
 10222 ;; This function calls:
 10223 ;;		_ADC_Set
 10224 ;;		_Fosc_Set
 10225 ;;		_IOC_Set
 10226 ;;		_IO_Set
 10227 ;;		_TMR0_Set
 10228 ;;		_WDT_Set
 10229 ;; This function is called by:
 10230 ;;		_main
 10231 ;; This function uses a non-reentrant model
 10232 ;;
 10233                           
 10234                           
 10235                           ;psect for function _Mcu_Initialization
 10236  1C2A                     _Mcu_Initialization:	
 10237                           
 10238                           ;MCU_B1.c: 32: Fosc_Set();
 10239                           
 10240                           ;incstack = 0
 10241                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10242  1C2A  3187  27FC  319C   	fcall	_Fosc_Set
 10243                           
 10244                           ;MCU_B1.c: 34: IO_Set();
 10245  1C2D  319D  255F  319C   	fcall	_IO_Set
 10246                           
 10247                           ;MCU_B1.c: 36: TMR0_Set();
 10248  1C30  319A  2276  319C   	fcall	_TMR0_Set
 10249                           
 10250                           ;MCU_B1.c: 38: ;;
 10251                           ;MCU_B1.c: 40: ADC_Set();
 10252  1C33  319A  2247  319C   	fcall	_ADC_Set
 10253                           
 10254                           ;MCU_B1.c: 44: ;;
 10255                           ;MCU_B1.c: 46: IOC_Set();
 10256  1C36  319B  2316  319C   	fcall	_IOC_Set
 10257                           
 10258                           ;MCU_B1.c: 48: ;;
 10259                           ;MCU_B1.c: 50: ;;
 10260                           ;MCU_B1.c: 52: WDT_Set();
 10261  1C39  319A  22CE         	fcall	_WDT_Set
 10262  1C3B  0008               	return
 10263  1C3C                     __end_of_Mcu_Initialization:	
 10264                           
 10265                           	psect	text51
 10266  1ACE                     __ptext51:	
 10267 ;; *************** function _WDT_Set *****************
 10268 ;; Defined at:
 10269 ;;		line 895 in file "../src/MCU_B1.c"
 10270 ;; Parameters:    Size  Location     Type
 10271 ;;		None
 10272 ;; Auto vars:     Size  Location     Type
 10273 ;;		None
 10274 ;; Return value:  Size  Location     Type
 10275 ;;		None               void
 10276 ;; Registers used:
 10277 ;;		wreg
 10278 ;; Tracked objects:
 10279 ;;		On entry : 0/0
 10280 ;;		On exit  : 0/0
 10281 ;;		Unchanged: 0/0
 10282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10285 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10287 ;;Total ram usage:        1 bytes
 10288 ;; Hardware stack levels used:    1
 10289 ;; Hardware stack levels required when called:    5
 10290 ;; This function calls:
 10291 ;;		Nothing
 10292 ;; This function is called by:
 10293 ;;		_Mcu_Initialization
 10294 ;; This function uses a non-reentrant model
 10295 ;;
 10296                           
 10297                           
 10298                           ;psect for function _WDT_Set
 10299  1ACE                     _WDT_Set:	
 10300                           
 10301                           ;MCU_B1.c: 896: WDTCON = 0b00010111;;
 10302                           
 10303                           ;incstack = 0
 10304                           ; Regs used in _WDT_Set: [wreg]
 10305  1ACE  3017               	movlw	23
 10306  1ACF  0021               	movlb	1	; select bank1
 10307  1AD0  0097               	movwf	23	;volatile
 10308                           
 10309                           ;MCU_B1.c: 897: WDT.Enable = 1;
 10310  1AD1  1448               	bsf	_WDT^(0+128),0
 10311                           
 10312                           ;MCU_B1.c: 898: WDT.Count = 10;
 10313  1AD2  300A               	movlw	10
 10314  1AD3  0020               	movlb	0	; select bank0
 10315  1AD4  00A0               	movwf	??_WDT_Set
 10316  1AD5  0820               	movf	??_WDT_Set,w
 10317  1AD6  0021               	movlb	1	; select bank1
 10318  1AD7  00C9               	movwf	(_WDT^(0+128)+1)
 10319  1AD8  0008               	return
 10320  1AD9                     __end_of_WDT_Set:	
 10321                           
 10322                           	psect	text52
 10323  1A76                     __ptext52:	
 10324 ;; *************** function _TMR0_Set *****************
 10325 ;; Defined at:
 10326 ;;		line 126 in file "../src/MCU_B1.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;		None
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;		None
 10331 ;; Return value:  Size  Location     Type
 10332 ;;		None               void
 10333 ;; Registers used:
 10334 ;;		wreg, status,2
 10335 ;; Tracked objects:
 10336 ;;		On entry : 0/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;Total ram usage:        0 bytes
 10345 ;; Hardware stack levels used:    1
 10346 ;; Hardware stack levels required when called:    5
 10347 ;; This function calls:
 10348 ;;		Nothing
 10349 ;; This function is called by:
 10350 ;;		_Mcu_Initialization
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           
 10355                           ;psect for function _TMR0_Set
 10356  1A76                     _TMR0_Set:	
 10357                           
 10358                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 10359                           
 10360                           ;incstack = 0
 10361                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10362  1A76  0021               	movlb	1	; select bank1
 10363  1A77  0195               	clrf	21	;volatile
 10364                           
 10365                           ;MCU_B1.c: 129: TMR0 = (256-190);
 10366  1A78  3042               	movlw	66
 10367  1A79  0020               	movlb	0	; select bank0
 10368  1A7A  0095               	movwf	21	;volatile
 10369                           
 10370                           ;MCU_B1.c: 130: TMR0IE = 1;
 10371  1A7B  168B               	bsf	11,5	;volatile
 10372                           
 10373                           ;MCU_B1.c: 131: GIE = 1;
 10374  1A7C  178B               	bsf	11,7	;volatile
 10375  1A7D  0008               	return
 10376  1A7E                     __end_of_TMR0_Set:	
 10377                           
 10378                           	psect	text53
 10379  1D5F                     __ptext53:	
 10380 ;; *************** function _IO_Set *****************
 10381 ;; Defined at:
 10382 ;;		line 60 in file "../src/MCU_B1.c"
 10383 ;; Parameters:    Size  Location     Type
 10384 ;;		None
 10385 ;; Auto vars:     Size  Location     Type
 10386 ;;		None
 10387 ;; Return value:  Size  Location     Type
 10388 ;;		None               void
 10389 ;; Registers used:
 10390 ;;		wreg, status,2
 10391 ;; Tracked objects:
 10392 ;;		On entry : 0/0
 10393 ;;		On exit  : 0/0
 10394 ;;		Unchanged: 0/0
 10395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;Total ram usage:        0 bytes
 10401 ;; Hardware stack levels used:    1
 10402 ;; Hardware stack levels required when called:    5
 10403 ;; This function calls:
 10404 ;;		Nothing
 10405 ;; This function is called by:
 10406 ;;		_Mcu_Initialization
 10407 ;; This function uses a non-reentrant model
 10408 ;;
 10409                           
 10410                           
 10411                           ;psect for function _IO_Set
 10412  1D5F                     _IO_Set:	
 10413                           
 10414                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10415                           
 10416                           ;incstack = 0
 10417                           ; Regs used in _IO_Set: [wreg+status,2]
 10418  1D5F  3077               	movlw	119
 10419  1D60  0021               	movlb	1	; select bank1
 10420  1D61  008C               	movwf	12	;volatile
 10421                           
 10422                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10423  1D62  3007               	movlw	7
 10424  1D63  008D               	movwf	13	;volatile
 10425                           
 10426                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10427  1D64  300C               	movlw	12
 10428  1D65  008E               	movwf	14	;volatile
 10429                           
 10430                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10431  1D66  0022               	movlb	2	; select bank2
 10432  1D67  018C               	clrf	12	;volatile
 10433                           
 10434                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10435  1D68  3002               	movlw	2
 10436  1D69  008D               	movwf	13	;volatile
 10437                           
 10438                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10439  1D6A  018E               	clrf	14	;volatile
 10440                           
 10441                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10442  1D6B  3022               	movlw	34
 10443  1D6C  0023               	movlb	3	; select bank3
 10444  1D6D  008C               	movwf	12	;volatile
 10445                           
 10446                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10447  1D6E  018D               	clrf	13	;volatile
 10448                           
 10449                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10450  1D6F  018E               	clrf	14	;volatile
 10451                           
 10452                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10453  1D70  3077               	movlw	119
 10454  1D71  0020               	movlb	0	; select bank0
 10455  1D72  008C               	movwf	12	;volatile
 10456                           
 10457                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10458  1D73  3007               	movlw	7
 10459  1D74  008D               	movwf	13	;volatile
 10460                           
 10461                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10462  1D75  300C               	movlw	12
 10463  1D76  008E               	movwf	14	;volatile
 10464  1D77  0008               	return
 10465  1D78                     __end_of_IO_Set:	
 10466                           
 10467                           	psect	text54
 10468  1B16                     __ptext54:	
 10469 ;; *************** function _IOC_Set *****************
 10470 ;; Defined at:
 10471 ;;		line 263 in file "../src/MCU_B1.c"
 10472 ;; Parameters:    Size  Location     Type
 10473 ;;		None
 10474 ;; Auto vars:     Size  Location     Type
 10475 ;;		None
 10476 ;; Return value:  Size  Location     Type
 10477 ;;		None               void
 10478 ;; Registers used:
 10479 ;;		wreg, status,2
 10480 ;; Tracked objects:
 10481 ;;		On entry : 0/0
 10482 ;;		On exit  : 0/0
 10483 ;;		Unchanged: 0/0
 10484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10489 ;;Total ram usage:        0 bytes
 10490 ;; Hardware stack levels used:    1
 10491 ;; Hardware stack levels required when called:    5
 10492 ;; This function calls:
 10493 ;;		Nothing
 10494 ;; This function is called by:
 10495 ;;		_Mcu_Initialization
 10496 ;; This function uses a non-reentrant model
 10497 ;;
 10498                           
 10499                           
 10500                           ;psect for function _IOC_Set
 10501  1B16                     _IOC_Set:	
 10502                           
 10503                           ;MCU_B1.c: 264: WPUB2 = 0;
 10504                           
 10505                           ;incstack = 0
 10506                           ; Regs used in _IOC_Set: [wreg+status,2]
 10507  1B16  0024               	movlb	4	; select bank4
 10508  1B17  110D               	bcf	13,2	;volatile
 10509                           
 10510                           ;MCU_B1.c: 266: IOCBP = 0b00000100;
 10511  1B18  3004               	movlw	4
 10512  1B19  0027               	movlb	7	; select bank7
 10513  1B1A  0094               	movwf	20	;volatile
 10514                           
 10515                           ;MCU_B1.c: 267: IOCBN = 0b00000100;
 10516  1B1B  3004               	movlw	4
 10517  1B1C  0095               	movwf	21	;volatile
 10518                           
 10519                           ;MCU_B1.c: 282: IOCBF = 0b00000000;
 10520  1B1D  0196               	clrf	22	;volatile
 10521                           
 10522                           ;MCU_B1.c: 284: IOCIE = 1;
 10523  1B1E  158B               	bsf	11,3	;volatile
 10524                           
 10525                           ;MCU_B1.c: 285: IOCIF = 0;
 10526  1B1F  100B               	bcf	11,0	;volatile
 10527                           
 10528                           ;MCU_B1.c: 286: PEIE = 1;
 10529  1B20  170B               	bsf	11,6	;volatile
 10530                           
 10531                           ;MCU_B1.c: 287: GIE = 1;
 10532  1B21  178B               	bsf	11,7	;volatile
 10533  1B22  0008               	return
 10534  1B23                     __end_of_IOC_Set:	
 10535                           
 10536                           	psect	text55
 10537  07FC                     __ptext55:	
 10538 ;; *************** function _Fosc_Set *****************
 10539 ;; Defined at:
 10540 ;;		line 56 in file "../src/MCU_B1.c"
 10541 ;; Parameters:    Size  Location     Type
 10542 ;;		None
 10543 ;; Auto vars:     Size  Location     Type
 10544 ;;		None
 10545 ;; Return value:  Size  Location     Type
 10546 ;;		None               void
 10547 ;; Registers used:
 10548 ;;		wreg
 10549 ;; Tracked objects:
 10550 ;;		On entry : 0/0
 10551 ;;		On exit  : 0/0
 10552 ;;		Unchanged: 0/0
 10553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;Total ram usage:        0 bytes
 10559 ;; Hardware stack levels used:    1
 10560 ;; Hardware stack levels required when called:    5
 10561 ;; This function calls:
 10562 ;;		Nothing
 10563 ;; This function is called by:
 10564 ;;		_Mcu_Initialization
 10565 ;; This function uses a non-reentrant model
 10566 ;;
 10567                           
 10568                           
 10569                           ;psect for function _Fosc_Set
 10570  07FC                     _Fosc_Set:	
 10571                           
 10572                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10573                           
 10574                           ;incstack = 0
 10575                           ; Regs used in _Fosc_Set: [wreg]
 10576  07FC  3078               	movlw	120
 10577  07FD  0021               	movlb	1	; select bank1
 10578  07FE  0099               	movwf	25	;volatile
 10579  07FF  0008               	return
 10580  0800                     __end_of_Fosc_Set:	
 10581                           
 10582                           	psect	text56
 10583  1A47                     __ptext56:	
 10584 ;; *************** function _ADC_Set *****************
 10585 ;; Defined at:
 10586 ;;		line 309 in file "../src/MCU_B1.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;		None
 10589 ;; Auto vars:     Size  Location     Type
 10590 ;;		None
 10591 ;; Return value:  Size  Location     Type
 10592 ;;		None               void
 10593 ;; Registers used:
 10594 ;;		wreg
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;Total ram usage:        0 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; Hardware stack levels required when called:    5
 10607 ;; This function calls:
 10608 ;;		Nothing
 10609 ;; This function is called by:
 10610 ;;		_Mcu_Initialization
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           
 10615                           ;psect for function _ADC_Set
 10616  1A47                     _ADC_Set:	
 10617                           
 10618                           ;MCU_B1.c: 310: ADCON1 = 0xf2;
 10619                           
 10620                           ;incstack = 0
 10621                           ; Regs used in _ADC_Set: [wreg]
 10622  1A47  30F2               	movlw	242
 10623  1A48  0021               	movlb	1	; select bank1
 10624  1A49  009E               	movwf	30	;volatile
 10625                           
 10626                           ;MCU_B1.c: 311: FVRCON = 0xc0;
 10627  1A4A  30C0               	movlw	192
 10628  1A4B  0022               	movlb	2	; select bank2
 10629  1A4C  0097               	movwf	23	;volatile
 10630  1A4D  0008               	return
 10631  1A4E                     __end_of_ADC_Set:	
 10632                           
 10633                           	psect	text57
 10634  020C                     __ptext57:	
 10635 ;; *************** function _Load_Main *****************
 10636 ;; Defined at:
 10637 ;;		line 39 in file "../src/OverLoad_B1.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;		None
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;  i               1   19[BANK0 ] unsigned char 
 10642 ;; Return value:  Size  Location     Type
 10643 ;;		None               void
 10644 ;; Registers used:
 10645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10646 ;; Tracked objects:
 10647 ;;		On entry : 0/0
 10648 ;;		On exit  : 0/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10652 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10654 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10655 ;;Total ram usage:        3 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; Hardware stack levels required when called:   10
 10658 ;; This function calls:
 10659 ;;		___lwdiv
 10660 ;;		___wmul
 10661 ;;		_getTemp_Safe
 10662 ;;		_setDimmerLights_Clear
 10663 ;;		_setLoad_AH_AL_Restore
 10664 ;;		_setLoad_Exceptions
 10665 ;; This function is called by:
 10666 ;;		_main
 10667 ;; This function uses a non-reentrant model
 10668 ;;
 10669                           
 10670                           
 10671                           ;psect for function _Load_Main
 10672  020C                     _Load_Main:	
 10673                           
 10674                           ;OverLoad_B1.c: 40: char i = 0;
 10675                           
 10676                           ;incstack = 0
 10677                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10678  020C  0020               	movlb	0	; select bank0
 10679  020D  01B3               	clrf	Load_Main@i
 10680                           
 10681                           ;OverLoad_B1.c: 41: if (Load1.ERROR == 1) {
 10682  020E  0023               	movlb	3	; select bank3
 10683  020F  1EA0               	btfss	_Load1^(0+384),5
 10684  0210  2A22               	goto	l1688
 10685                           
 10686                           ;OverLoad_B1.c: 42: Load1.ErrorTime++;
 10687  0211  3001               	movlw	1
 10688  0212  07A3               	addwf	(_Load1^(0+384)+3),f
 10689  0213  3000               	movlw	0
 10690  0214  3DA4               	addwfc	((_Load1+1)^(0+384)+3),f
 10691                           
 10692                           ;OverLoad_B1.c: 43: if (Load1.ErrorTime >= 1000)
 10693  0215  3003               	movlw	3
 10694  0216  0224               	subwf	((_Load1+1)^(0+384)+3),w
 10695  0217  30E8               	movlw	232
 10696  0218  1903               	skipnz
 10697  0219  0223               	subwf	(_Load1^(0+384)+3),w
 10698  021A  1C03               	skipc
 10699  021B  0008               	return
 10700                           
 10701                           ;OverLoad_B1.c: 44: {
 10702                           ;OverLoad_B1.c: 45: Load1.ErrorTime = 0;
 10703  021C  01A3               	clrf	(_Load1^(0+384)+3)
 10704  021D  01A4               	clrf	((_Load1+1)^(0+384)+3)
 10705                           
 10706                           ;OverLoad_B1.c: 46: setLoad_Exceptions(0);
 10707  021E  3000               	movlw	0
 10708  021F  3191  21C9         	fcall	_setLoad_Exceptions
 10709                           
 10710                           ;OverLoad_B1.c: 47: }
 10711                           ;OverLoad_B1.c: 48: } else {
 10712  0221  0008               	return
 10713  0222                     l1688:	
 10714                           
 10715                           ;OverLoad_B1.c: 49: if (Load1.ADtoGO == 1) {
 10716  0222  1E20               	btfss	_Load1^(0+384),4
 10717  0223  2B4D               	goto	l1691
 10718                           
 10719                           ;OverLoad_B1.c: 50: Load1.Time++;
 10720  0224  3001               	movlw	1
 10721  0225  07A1               	addwf	(_Load1^(0+384)+1),f
 10722  0226  3000               	movlw	0
 10723  0227  3DA2               	addwfc	((_Load1+1)^(0+384)+1),f
 10724                           
 10725                           ;OverLoad_B1.c: 51: if (Load1.Time >= 5)
 10726  0228  3000               	movlw	0
 10727  0229  0222               	subwf	((_Load1+1)^(0+384)+1),w
 10728  022A  3005               	movlw	5
 10729  022B  1903               	skipnz
 10730  022C  0221               	subwf	(_Load1^(0+384)+1),w
 10731  022D  1C03               	skipc
 10732  022E  0008               	return
 10733                           
 10734                           ;OverLoad_B1.c: 52: {
 10735                           ;OverLoad_B1.c: 53: Load1.Time = 0;
 10736  022F  01A1               	clrf	(_Load1^(0+384)+1)
 10737  0230  01A2               	clrf	((_Load1+1)^(0+384)+1)
 10738                           
 10739                           ;OverLoad_B1.c: 54: Load1.ADtoGO = 0;
 10740  0231  1220               	bcf	_Load1^(0+384),4
 10741                           
 10742                           ;OverLoad_B1.c: 55: Load1.LightsCount = Load1.Lights1Status + Load1.Lights2Status + Load
      +                          1.Lights3Status;
 10743  0232  0863               	movf	(_Load1^(0+384)+67),w
 10744  0233  0764               	addwf	(_Load1^(0+384)+68),w
 10745  0234  0765               	addwf	(_Load1^(0+384)+69),w
 10746  0235  0020               	movlb	0	; select bank0
 10747  0236  00B1               	movwf	??_Load_Main
 10748  0237  0831               	movf	??_Load_Main,w
 10749  0238  0023               	movlb	3	; select bank3
 10750  0239  00DE               	movwf	(_Load1^(0+384)+62)
 10751                           
 10752                           ;OverLoad_B1.c: 56: for (i = 1; i < 4; i++) {
 10753  023A  0020               	movlb	0	; select bank0
 10754  023B  01B3               	clrf	Load_Main@i
 10755  023C  0AB3               	incf	Load_Main@i,f
 10756  023D  3004               	movlw	4
 10757  023E  0233               	subwf	Load_Main@i,w
 10758  023F  1803               	btfsc	3,0
 10759  0240  2A6B               	goto	l10442
 10760  0241                     l10436:	
 10761                           
 10762                           ;OverLoad_B1.c: 57: Load1.ADH += Load1.AH[i];
 10763  0241  3533               	lslf	Load_Main@i,w
 10764  0242  3EA8               	addlw	(_Load1+8)& (0+255)
 10765  0243  0086               	movwf	6
 10766  0244  3001               	movlw	1	; select bank3/4
 10767  0245  0087               	movwf	7
 10768  0246  3F40               	moviw [0]fsr1
 10769  0247  00B1               	movwf	??_Load_Main
 10770  0248  3F41               	moviw [1]fsr1
 10771  0249  00B2               	movwf	??_Load_Main+1
 10772  024A  0831               	movf	??_Load_Main,w
 10773  024B  0023               	movlb	3	; select bank3
 10774  024C  07CE               	addwf	(_Load1^(0+384)+46),f
 10775  024D  0020               	movlb	0	; select bank0
 10776  024E  0832               	movf	??_Load_Main+1,w
 10777  024F  0023               	movlb	3	; select bank3
 10778  0250  3DCF               	addwfc	((_Load1+1)^(0+384)+46),f
 10779                           
 10780                           ;OverLoad_B1.c: 58: Load1.ADL += Load1.AL[i];
 10781  0251  0020               	movlb	0	; select bank0
 10782  0252  3533               	lslf	Load_Main@i,w
 10783  0253  3EBA               	addlw	(_Load1+26)& (0+255)
 10784  0254  0086               	movwf	6
 10785  0255  3001               	movlw	1	; select bank3/4
 10786  0256  0087               	movwf	7
 10787  0257  3F40               	moviw [0]fsr1
 10788  0258  00B1               	movwf	??_Load_Main
 10789  0259  3F41               	moviw [1]fsr1
 10790  025A  00B2               	movwf	??_Load_Main+1
 10791  025B  0831               	movf	??_Load_Main,w
 10792  025C  0023               	movlb	3	; select bank3
 10793  025D  07D0               	addwf	(_Load1^(0+384)+48),f
 10794  025E  0020               	movlb	0	; select bank0
 10795  025F  0832               	movf	??_Load_Main+1,w
 10796  0260  0023               	movlb	3	; select bank3
 10797  0261  3DD1               	addwfc	((_Load1+1)^(0+384)+48),f
 10798  0262  3001               	movlw	1
 10799  0263  0020               	movlb	0	; select bank0
 10800  0264  00B1               	movwf	??_Load_Main
 10801  0265  0831               	movf	??_Load_Main,w
 10802  0266  07B3               	addwf	Load_Main@i,f
 10803  0267  3004               	movlw	4
 10804  0268  0233               	subwf	Load_Main@i,w
 10805  0269  1C03               	skipc
 10806  026A  2A41               	goto	l10436
 10807  026B                     l10442:	
 10808                           
 10809                           ;OverLoad_B1.c: 59: }
 10810                           ;OverLoad_B1.c: 60: Load1.ADH /= 3;
 10811  026B  3003               	movlw	3
 10812  026C  00A0               	movwf	___lwdiv@divisor
 10813  026D  3000               	movlw	0
 10814  026E  00A1               	movwf	___lwdiv@divisor+1
 10815  026F  0023               	movlb	3	; select bank3
 10816  0270  084F               	movf	((_Load1+1)^(0+384)+46),w
 10817  0271  0020               	movlb	0	; select bank0
 10818  0272  01A3               	clrf	___lwdiv@dividend+1
 10819  0273  07A3               	addwf	___lwdiv@dividend+1,f
 10820  0274  0023               	movlb	3	; select bank3
 10821  0275  084E               	movf	(_Load1^(0+384)+46),w
 10822  0276  0020               	movlb	0	; select bank0
 10823  0277  01A2               	clrf	___lwdiv@dividend
 10824  0278  07A2               	addwf	___lwdiv@dividend,f
 10825  0279  3191  2192  3182   	fcall	___lwdiv
 10826  027C  0020               	movlb	0	; select bank0
 10827  027D  0821               	movf	?___lwdiv+1,w
 10828  027E  0023               	movlb	3	; select bank3
 10829  027F  01CF               	clrf	((_Load1+1)^(0+384)+46)
 10830  0280  07CF               	addwf	((_Load1+1)^(0+384)+46),f
 10831  0281  0020               	movlb	0	; select bank0
 10832  0282  0820               	movf	?___lwdiv,w
 10833  0283  0023               	movlb	3	; select bank3
 10834  0284  01CE               	clrf	(_Load1^(0+384)+46)
 10835  0285  07CE               	addwf	(_Load1^(0+384)+46),f
 10836                           
 10837                           ;OverLoad_B1.c: 61: Load1.ADL /= 3;
 10838  0286  3003               	movlw	3
 10839  0287  0020               	movlb	0	; select bank0
 10840  0288  00A0               	movwf	___lwdiv@divisor
 10841  0289  3000               	movlw	0
 10842  028A  00A1               	movwf	___lwdiv@divisor+1
 10843  028B  0023               	movlb	3	; select bank3
 10844  028C  0851               	movf	((_Load1+1)^(0+384)+48),w
 10845  028D  0020               	movlb	0	; select bank0
 10846  028E  01A3               	clrf	___lwdiv@dividend+1
 10847  028F  07A3               	addwf	___lwdiv@dividend+1,f
 10848  0290  0023               	movlb	3	; select bank3
 10849  0291  0850               	movf	(_Load1^(0+384)+48),w
 10850  0292  0020               	movlb	0	; select bank0
 10851  0293  01A2               	clrf	___lwdiv@dividend
 10852  0294  07A2               	addwf	___lwdiv@dividend,f
 10853  0295  3191  2192  3182   	fcall	___lwdiv
 10854  0298  0020               	movlb	0	; select bank0
 10855  0299  0821               	movf	?___lwdiv+1,w
 10856  029A  0023               	movlb	3	; select bank3
 10857  029B  01D1               	clrf	((_Load1+1)^(0+384)+48)
 10858  029C  07D1               	addwf	((_Load1+1)^(0+384)+48),f
 10859  029D  0020               	movlb	0	; select bank0
 10860  029E  0820               	movf	?___lwdiv,w
 10861  029F  0023               	movlb	3	; select bank3
 10862  02A0  01D0               	clrf	(_Load1^(0+384)+48)
 10863  02A1  07D0               	addwf	(_Load1^(0+384)+48),f
 10864                           
 10865                           ;OverLoad_B1.c: 62: if (Load1.ADH > Load1.ADL) {
 10866  02A2  084F               	movf	((_Load1+1)^(0+384)+46),w
 10867  02A3  0251               	subwf	((_Load1+1)^(0+384)+48),w
 10868  02A4  1D03               	skipz
 10869  02A5  2AA8               	goto	u11325
 10870  02A6  084E               	movf	(_Load1^(0+384)+46),w
 10871  02A7  0250               	subwf	(_Load1^(0+384)+48),w
 10872  02A8                     u11325:	
 10873  02A8  1803               	skipnc
 10874  02A9  2B4A               	goto	l10500
 10875                           
 10876                           ;OverLoad_B1.c: 63: Load1.AD = (Load1.ADH - Load1.ADL);
 10877  02AA  302E               	movlw	46
 10878  02AB  3EA0               	addlw	_Load1& (0+255)
 10879  02AC  0086               	movwf	6
 10880  02AD  3001               	movlw	1	; select bank3/4
 10881  02AE  0087               	movwf	7
 10882  02AF  0950               	comf	(_Load1^(0+384)+48),w
 10883  02B0  0020               	movlb	0	; select bank0
 10884  02B1  00B1               	movwf	??_Load_Main
 10885  02B2  0023               	movlb	3	; select bank3
 10886  02B3  0951               	comf	((_Load1+1)^(0+384)+48),w
 10887  02B4  0020               	movlb	0	; select bank0
 10888  02B5  00B2               	movwf	??_Load_Main+1
 10889  02B6  0AB1               	incf	??_Load_Main,f
 10890  02B7  1903               	skipnz
 10891  02B8  0AB2               	incf	??_Load_Main+1,f
 10892  02B9  3F40               	moviw [0]fsr1
 10893  02BA  0731               	addwf	??_Load_Main,w
 10894  02BB  0023               	movlb	3	; select bank3
 10895  02BC  00CC               	movwf	(_Load1^(0+384)+44)
 10896  02BD  3F41               	moviw [1]fsr1
 10897  02BE  0020               	movlb	0	; select bank0
 10898  02BF  3D32               	addwfc	??_Load_Main+1,w
 10899  02C0  0023               	movlb	3	; select bank3
 10900  02C1  00CD               	movwf	(_Load1^(0+384)+45)
 10901                           
 10902                           ;OverLoad_B1.c: 65: if (Load1.Count < 2) {
 10903  02C2  3002               	movlw	2
 10904  02C3  025A               	subwf	(_Load1^(0+384)+58),w
 10905  02C4  1803               	skipnc
 10906  02C5  2AE7               	goto	l10464
 10907                           
 10908                           ;OverLoad_B1.c: 66: Load1.Count++;
 10909  02C6  3001               	movlw	1
 10910  02C7  0020               	movlb	0	; select bank0
 10911  02C8  00B1               	movwf	??_Load_Main
 10912  02C9  0831               	movf	??_Load_Main,w
 10913  02CA  0023               	movlb	3	; select bank3
 10914  02CB  07DA               	addwf	(_Load1^(0+384)+58),f
 10915                           
 10916                           ;OverLoad_B1.c: 67: if (Load1.Count == 1) {
 10917  02CC  085A               	movf	(_Load1^(0+384)+58),w
 10918  02CD  3A01               	xorlw	1
 10919  02CE  1D03               	skipz
 10920  02CF  2AD4               	goto	l10456
 10921                           
 10922                           ;OverLoad_B1.c: 68: Load1.JudgeValue = 500;
 10923  02D0  30F4               	movlw	244
 10924  02D1  00D6               	movwf	(_Load1^(0+384)+54)
 10925  02D2  3001               	movlw	1
 10926  02D3  2ADF               	goto	L6
 10927  02D4                     l10456:	
 10928                           ;OverLoad_B1.c: 69: } else if (Load1.Count == 2) {
 10929                           
 10930  02D4  085A               	movf	(_Load1^(0+384)+58),w
 10931  02D5  3A02               	xorlw	2
 10932  02D6  1D03               	skipz
 10933  02D7  2AE7               	goto	l10464
 10934                           
 10935                           ;OverLoad_B1.c: 70: if (Load1.LightsCount == 1) {
 10936  02D8  085E               	movf	(_Load1^(0+384)+62),w
 10937  02D9  3A01               	xorlw	1
 10938  02DA  1D03               	skipz
 10939  02DB  2AE1               	goto	l10462
 10940                           
 10941                           ;OverLoad_B1.c: 71: Load1.JudgeValue = 0x32;
 10942  02DC  3032               	movlw	50
 10943  02DD  00D6               	movwf	(_Load1^(0+384)+54)
 10944  02DE  3000               	movlw	0
 10945  02DF                     L6:	
 10946  02DF  00D7               	movwf	(_Load1^(0+384)+55)
 10947                           
 10948                           ;OverLoad_B1.c: 72: } else {
 10949  02E0  2AE7               	goto	l10464
 10950  02E1                     l10462:	
 10951                           
 10952                           ;OverLoad_B1.c: 73: Load1.JudgeValue = (0x32 + Load1.TotalLoad) - 0x08;
 10953  02E1  0826               	movf	(_Load1^(0+384)+6),w
 10954  02E2  3E2A               	addlw	42
 10955  02E3  00D6               	movwf	(_Load1^(0+384)+54)
 10956  02E4  3000               	movlw	0
 10957  02E5  3D27               	addwfc	((_Load1+1)^(0+384)+6),w
 10958  02E6  00D7               	movwf	((_Load1+1)^(0+384)+54)
 10959  02E7                     l10464:	
 10960                           
 10961                           ;OverLoad_B1.c: 74: }
 10962                           ;OverLoad_B1.c: 75: }
 10963                           ;OverLoad_B1.c: 76: }
 10964                           ;OverLoad_B1.c: 78: if (Load1.AD >= Load1.JudgeValue) {
 10965  02E7  0857               	movf	((_Load1+1)^(0+384)+54),w
 10966  02E8  024D               	subwf	((_Load1+1)^(0+384)+44),w
 10967  02E9  1D03               	skipz
 10968  02EA  2AED               	goto	u11375
 10969  02EB  0856               	movf	(_Load1^(0+384)+54),w
 10970  02EC  024C               	subwf	(_Load1^(0+384)+44),w
 10971  02ED                     u11375:	
 10972  02ED  1C03               	skipc
 10973  02EE  2AFF               	goto	l10474
 10974                           
 10975                           ;OverLoad_B1.c: 79: Load1.ErrorCount++;
 10976  02EF  3001               	movlw	1
 10977  02F0  0020               	movlb	0	; select bank0
 10978  02F1  00B1               	movwf	??_Load_Main
 10979  02F2  0831               	movf	??_Load_Main,w
 10980  02F3  0023               	movlb	3	; select bank3
 10981  02F4  07DC               	addwf	(_Load1^(0+384)+60),f
 10982                           
 10983                           ;OverLoad_B1.c: 80: if (Load1.ErrorCount > 2) {
 10984  02F5  3003               	movlw	3
 10985  02F6  025C               	subwf	(_Load1^(0+384)+60),w
 10986  02F7  1C03               	skipc
 10987  02F8  2B4A               	goto	l10500
 10988                           
 10989                           ;OverLoad_B1.c: 81: Load1.ErrorCount = 0;
 10990  02F9  01DC               	clrf	(_Load1^(0+384)+60)
 10991                           
 10992                           ;OverLoad_B1.c: 82: setLoad_Exceptions(1);
 10993  02FA  3001               	movlw	1
 10994  02FB  3191  21C9  3182   	fcall	_setLoad_Exceptions
 10995                           
 10996                           ;OverLoad_B1.c: 90: }
 10997                           ;OverLoad_B1.c: 91: } else {
 10998  02FE  2B4A               	goto	l10500
 10999  02FF                     l10474:	
 11000                           
 11001                           ;OverLoad_B1.c: 92: Load1.ErrorCount = 0;
 11002  02FF  0023               	movlb	3	; select bank3
 11003  0300  01DC               	clrf	(_Load1^(0+384)+60)
 11004                           
 11005                           ;OverLoad_B1.c: 93: if (Load1.SafeCount < 10) {
 11006  0301  300A               	movlw	10
 11007  0302  0262               	subwf	(_Load1^(0+384)+66),w
 11008  0303  1803               	skipnc
 11009  0304  2B0B               	goto	l10480
 11010                           
 11011                           ;OverLoad_B1.c: 94: Load1.SafeCount++;
 11012  0305  3001               	movlw	1
 11013  0306  0020               	movlb	0	; select bank0
 11014  0307  00B1               	movwf	??_Load_Main
 11015  0308  0831               	movf	??_Load_Main,w
 11016  0309  0023               	movlb	3	; select bank3
 11017  030A  07E2               	addwf	(_Load1^(0+384)+66),f
 11018  030B                     l10480:	
 11019                           
 11020                           ;OverLoad_B1.c: 95: }
 11021                           ;OverLoad_B1.c: 96: if (Load1.SafeCount >= 10) {
 11022  030B  300A               	movlw	10
 11023  030C  0262               	subwf	(_Load1^(0+384)+66),w
 11024  030D  1C03               	skipc
 11025  030E  2B4A               	goto	l10500
 11026                           
 11027                           ;OverLoad_B1.c: 97: Load1.Safe = 1;
 11028  030F  15A0               	bsf	_Load1^(0+384),3
 11029                           
 11030                           ;OverLoad_B1.c: 101: setDimmerLights_Clear(1, 1);
 11031  0310  0020               	movlb	0	; select bank0
 11032  0311  01A2               	clrf	setDimmerLights_Clear@command
 11033  0312  0AA2               	incf	setDimmerLights_Clear@command,f
 11034  0313  3001               	movlw	1
 11035  0314  319B  23B5  3182   	fcall	_setDimmerLights_Clear
 11036                           
 11037                           ;OverLoad_B1.c: 105: ;;
 11038                           ;OverLoad_B1.c: 111: setDimmerLights_Clear(2, 1);
 11039  0317  0020               	movlb	0	; select bank0
 11040  0318  01A2               	clrf	setDimmerLights_Clear@command
 11041  0319  0AA2               	incf	setDimmerLights_Clear@command,f
 11042  031A  3002               	movlw	2
 11043  031B  319B  23B5  3182   	fcall	_setDimmerLights_Clear
 11044                           
 11045                           ;OverLoad_B1.c: 115: ;;
 11046                           ;OverLoad_B1.c: 129: if (Load1.StatusOn == 1) {
 11047  031E  0023               	movlb	3	; select bank3
 11048  031F  1F20               	btfss	_Load1^(0+384),6
 11049  0320  2B28               	goto	l10492
 11050                           
 11051                           ;OverLoad_B1.c: 130: Load1.StatusOn = 0;
 11052  0321  1320               	bcf	_Load1^(0+384),6
 11053                           
 11054                           ;OverLoad_B1.c: 131: Load1.TotalLoad = Load1.AD;
 11055  0322  084D               	movf	((_Load1+1)^(0+384)+44),w
 11056  0323  01A7               	clrf	((_Load1+1)^(0+384)+6)
 11057  0324  07A7               	addwf	((_Load1+1)^(0+384)+6),f
 11058  0325  084C               	movf	(_Load1^(0+384)+44),w
 11059  0326  01A6               	clrf	(_Load1^(0+384)+6)
 11060  0327  07A6               	addwf	(_Load1^(0+384)+6),f
 11061  0328                     l10492:	
 11062                           
 11063                           ;OverLoad_B1.c: 133: }
 11064                           ;OverLoad_B1.c: 135: if (Load1.StatusOff == 1) {
 11065  0328  1FA0               	btfss	_Load1^(0+384),7
 11066  0329  2B4A               	goto	l10500
 11067                           
 11068                           ;OverLoad_B1.c: 136: Load1.StatusOff = 0;
 11069  032A  13A0               	bcf	_Load1^(0+384),7
 11070                           
 11071                           ;OverLoad_B1.c: 137: Load1.TotalLoad = Load1.AD;
 11072  032B  084D               	movf	((_Load1+1)^(0+384)+44),w
 11073  032C  01A7               	clrf	((_Load1+1)^(0+384)+6)
 11074  032D  07A7               	addwf	((_Load1+1)^(0+384)+6),f
 11075  032E  084C               	movf	(_Load1^(0+384)+44),w
 11076  032F  01A6               	clrf	(_Load1^(0+384)+6)
 11077  0330  07A6               	addwf	(_Load1^(0+384)+6),f
 11078                           
 11079                           ;OverLoad_B1.c: 138: Load1.JudgeValue = 0x32 * Load1.LightsCount;
 11080  0331  085E               	movf	(_Load1^(0+384)+62),w
 11081  0332  0020               	movlb	0	; select bank0
 11082  0333  00B1               	movwf	??_Load_Main
 11083  0334  01B2               	clrf	??_Load_Main+1
 11084  0335  0831               	movf	??_Load_Main,w
 11085  0336  00A0               	movwf	___wmul@multiplier
 11086  0337  0832               	movf	??_Load_Main+1,w
 11087  0338  00A1               	movwf	___wmul@multiplier+1
 11088  0339  3032               	movlw	50
 11089  033A  00A2               	movwf	___wmul@multiplicand
 11090  033B  3000               	movlw	0
 11091  033C  00A3               	movwf	___wmul@multiplicand+1
 11092  033D  319E  261E  3182   	fcall	___wmul
 11093  0340  0020               	movlb	0	; select bank0
 11094  0341  0821               	movf	?___wmul+1,w
 11095  0342  0023               	movlb	3	; select bank3
 11096  0343  01D7               	clrf	((_Load1+1)^(0+384)+54)
 11097  0344  07D7               	addwf	((_Load1+1)^(0+384)+54),f
 11098  0345  0020               	movlb	0	; select bank0
 11099  0346  0820               	movf	?___wmul,w
 11100  0347  0023               	movlb	3	; select bank3
 11101  0348  01D6               	clrf	(_Load1^(0+384)+54)
 11102  0349  07D6               	addwf	(_Load1^(0+384)+54),f
 11103  034A                     l10500:	
 11104                           
 11105                           ;OverLoad_B1.c: 139: }
 11106                           ;OverLoad_B1.c: 140: }
 11107                           ;OverLoad_B1.c: 141: }
 11108                           ;OverLoad_B1.c: 142: }
 11109                           ;OverLoad_B1.c: 143: setLoad_AH_AL_Restore();
 11110  034A  319D  25AC         	fcall	_setLoad_AH_AL_Restore
 11111                           
 11112                           ;OverLoad_B1.c: 155: }
 11113                           ;OverLoad_B1.c: 156: } else {
 11114  034C  0008               	return
 11115  034D                     l1691:	
 11116                           
 11117                           ;OverLoad_B1.c: 157: if (Load1.GO == 1) {
 11118  034D  1CA0               	btfss	_Load1^(0+384),1
 11119  034E  2B5C               	goto	l1710
 11120                           
 11121                           ;OverLoad_B1.c: 158: if (Load1.LightsON == 0) {
 11122  034F  1920               	btfsc	_Load1^(0+384),2
 11123  0350  2B53               	goto	l10506
 11124                           
 11125                           ;OverLoad_B1.c: 159: Load1.LightsON = 1;
 11126  0351  1520               	bsf	_Load1^(0+384),2
 11127                           
 11128                           ;OverLoad_B1.c: 160: Load1.Safe = 0;
 11129  0352  11A0               	bcf	_Load1^(0+384),3
 11130  0353                     l10506:	
 11131                           
 11132                           ;OverLoad_B1.c: 161: }
 11133                           ;OverLoad_B1.c: 162: if (getTemp_Safe() == 1 && 1 == 1) {
 11134  0353  319A  226E  3182   	fcall	_getTemp_Safe
 11135  0356  3A01               	xorlw	1
 11136  0357  1D03               	skipz
 11137  0358  0008               	return
 11138                           
 11139                           ;OverLoad_B1.c: 163: Load1.ADtoGO = 1;
 11140  0359  0023               	movlb	3	; select bank3
 11141  035A  1620               	bsf	_Load1^(0+384),4
 11142                           
 11143                           ;OverLoad_B1.c: 164: }
 11144                           ;OverLoad_B1.c: 165: } else {
 11145  035B  0008               	return
 11146  035C                     l1710:	
 11147                           
 11148                           ;OverLoad_B1.c: 166: if (Load1.LightsON == 1) {
 11149  035C  1D20               	btfss	_Load1^(0+384),2
 11150  035D  0008               	return
 11151                           
 11152                           ;OverLoad_B1.c: 167: Load1.LightsON = 0;
 11153  035E  1120               	bcf	_Load1^(0+384),2
 11154                           
 11155                           ;OverLoad_B1.c: 168: Load1.Safe = 1;
 11156  035F  15A0               	bsf	_Load1^(0+384),3
 11157                           
 11158                           ;OverLoad_B1.c: 169: Load1.ErrorCount = 0;
 11159  0360  01DC               	clrf	(_Load1^(0+384)+60)
 11160                           
 11161                           ;OverLoad_B1.c: 170: Load1.Count = 0;
 11162  0361  01DA               	clrf	(_Load1^(0+384)+58)
 11163                           
 11164                           ;OverLoad_B1.c: 171: Load1.TotalLoad = 0;
 11165  0362  01A6               	clrf	(_Load1^(0+384)+6)
 11166  0363  01A7               	clrf	((_Load1+1)^(0+384)+6)
 11167                           
 11168                           ;OverLoad_B1.c: 172: Load1.NumberCount = 0;
 11169  0364  01DF               	clrf	(_Load1^(0+384)+63)
 11170                           
 11171                           ;OverLoad_B1.c: 173: Load1.StatusOn = 0;
 11172  0365  1320               	bcf	_Load1^(0+384),6
 11173                           
 11174                           ;OverLoad_B1.c: 174: Load1.StatusOff = 0;
 11175  0366  13A0               	bcf	_Load1^(0+384),7
 11176                           
 11177                           ;OverLoad_B1.c: 175: Load1.AD = 0;
 11178  0367  01CC               	clrf	(_Load1^(0+384)+44)
 11179  0368  01CD               	clrf	((_Load1+1)^(0+384)+44)
 11180                           
 11181                           ;OverLoad_B1.c: 176: setLoad_AH_AL_Restore();
 11182  0369  319D  25AC  3182   	fcall	_setLoad_AH_AL_Restore
 11183                           
 11184                           ;OverLoad_B1.c: 180: setDimmerLights_Clear(1, 1);
 11185  036C  0020               	movlb	0	; select bank0
 11186  036D  01A2               	clrf	setDimmerLights_Clear@command
 11187  036E  0AA2               	incf	setDimmerLights_Clear@command,f
 11188  036F  3001               	movlw	1
 11189  0370  319B  23B5  3182   	fcall	_setDimmerLights_Clear
 11190                           
 11191                           ;OverLoad_B1.c: 184: ;;
 11192                           ;OverLoad_B1.c: 190: setDimmerLights_Clear(2, 1);
 11193  0373  0020               	movlb	0	; select bank0
 11194  0374  01A2               	clrf	setDimmerLights_Clear@command
 11195  0375  0AA2               	incf	setDimmerLights_Clear@command,f
 11196  0376  3002               	movlw	2
 11197  0377  319B  23B5         	fcall	_setDimmerLights_Clear
 11198                           
 11199                           ;OverLoad_B1.c: 194: ;;
 11200  0379  0008               	return
 11201  037A                     __end_of_Load_Main:	
 11202                           
 11203                           	psect	text58
 11204  11C9                     __ptext58:	
 11205 ;; *************** function _setLoad_Exceptions *****************
 11206 ;; Defined at:
 11207 ;;		line 231 in file "../src/OverLoad_B1.c"
 11208 ;; Parameters:    Size  Location     Type
 11209 ;;  command         1    wreg     unsigned char 
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;  command         1   16[BANK0 ] unsigned char 
 11212 ;;  i               1   15[BANK0 ] unsigned char 
 11213 ;; Return value:  Size  Location     Type
 11214 ;;		None               void
 11215 ;; Registers used:
 11216 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11217 ;; Tracked objects:
 11218 ;;		On entry : 0/0
 11219 ;;		On exit  : 0/0
 11220 ;;		Unchanged: 0/0
 11221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11223 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;Total ram usage:        3 bytes
 11227 ;; Hardware stack levels used:    1
 11228 ;; Hardware stack levels required when called:    9
 11229 ;; This function calls:
 11230 ;;		_DimmerLights_Exceptions
 11231 ;;		_setLED
 11232 ;;		_setRF_Enable
 11233 ;;		_setSw_Enable
 11234 ;; This function is called by:
 11235 ;;		_Load_Main
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238                           
 11239                           
 11240                           ;psect for function _setLoad_Exceptions
 11241  11C9                     _setLoad_Exceptions:	
 11242                           
 11243                           ;incstack = 0
 11244                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11245                           ;setLoad_Exceptions@command stored from wreg
 11246  11C9  0020               	movlb	0	; select bank0
 11247  11CA  00B0               	movwf	setLoad_Exceptions@command
 11248                           
 11249                           ;OverLoad_B1.c: 232: char i = command == 1 ? 0 : 1;
 11250  11CB  0830               	movf	setLoad_Exceptions@command,w
 11251  11CC  3A01               	xorlw	1
 11252  11CD  3000               	movlw	0
 11253  11CE  1D03               	skipz
 11254  11CF  3001               	movlw	1
 11255  11D0  00AE               	movwf	??_setLoad_Exceptions
 11256  11D1  082E               	movf	??_setLoad_Exceptions,w
 11257  11D2  00AF               	movwf	setLoad_Exceptions@i
 11258                           
 11259                           ;OverLoad_B1.c: 233: Load1.ERROR = command;
 11260  11D3  0830               	movf	setLoad_Exceptions@command,w
 11261  11D4  0023               	movlb	3	; select bank3
 11262  11D5  12A0               	bcf	_Load1^(0+384),5
 11263  11D6  1D03               	skipz
 11264  11D7  16A0               	bsf	_Load1^(0+384),5
 11265                           
 11266                           ;OverLoad_B1.c: 234: Load1.Safe = i;
 11267  11D8  0020               	movlb	0	; select bank0
 11268  11D9  082F               	movf	setLoad_Exceptions@i,w
 11269  11DA  0023               	movlb	3	; select bank3
 11270  11DB  11A0               	bcf	_Load1^(0+384),3
 11271  11DC  1D03               	skipz
 11272  11DD  15A0               	bsf	_Load1^(0+384),3
 11273                           
 11274                           ;OverLoad_B1.c: 235: Load1.ErrorStatus = command;
 11275  11DE  0020               	movlb	0	; select bank0
 11276  11DF  0830               	movf	setLoad_Exceptions@command,w
 11277  11E0  00AE               	movwf	??_setLoad_Exceptions
 11278  11E1  082E               	movf	??_setLoad_Exceptions,w
 11279  11E2  0023               	movlb	3	; select bank3
 11280  11E3  00A5               	movwf	(_Load1^(0+384)+5)
 11281                           
 11282                           ;OverLoad_B1.c: 237: if (command == 1) {
 11283  11E4  0020               	movlb	0	; select bank0
 11284  11E5  0830               	movf	setLoad_Exceptions@command,w
 11285  11E6  3A01               	xorlw	1
 11286  11E7  1D03               	skipz
 11287  11E8  29ED               	goto	l1718
 11288                           
 11289                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 11290  11E9  3002               	movlw	2
 11291  11EA  3193  23DC  3191   	fcall	_DimmerLights_Exceptions
 11292  11ED                     l1718:	
 11293                           
 11294                           ;OverLoad_B1.c: 242: }
 11295                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 11296  11ED  0020               	movlb	0	; select bank0
 11297  11EE  0830               	movf	setLoad_Exceptions@command,w
 11298  11EF  3E0A               	addlw	10
 11299  11F0  00AE               	movwf	??_setLoad_Exceptions
 11300  11F1  082E               	movf	??_setLoad_Exceptions,w
 11301  11F2  00A1               	movwf	setLED@command
 11302  11F3  3063               	movlw	99
 11303  11F4  3196  2672  3191   	fcall	_setLED
 11304                           
 11305                           ;OverLoad_B1.c: 245: setSw_Enable(i);
 11306  11F7  0020               	movlb	0	; select bank0
 11307  11F8  082F               	movf	setLoad_Exceptions@i,w
 11308  11F9  319D  25C8  3191   	fcall	_setSw_Enable
 11309                           
 11310                           ;OverLoad_B1.c: 247: setRF_Enable(i);
 11311  11FC  0020               	movlb	0	; select bank0
 11312  11FD  082F               	movf	setLoad_Exceptions@i,w
 11313  11FE  319B  234B         	fcall	_setRF_Enable
 11314  1200  0008               	return
 11315  1201                     __end_of_setLoad_Exceptions:	
 11316                           
 11317                           	psect	text59
 11318  1DC8                     __ptext59:	
 11319 ;; *************** function _setSw_Enable *****************
 11320 ;; Defined at:
 11321 ;;		line 91 in file "../src/Switch_B1.c"
 11322 ;; Parameters:    Size  Location     Type
 11323 ;;  command         1    wreg     unsigned char 
 11324 ;; Auto vars:     Size  Location     Type
 11325 ;;  command         1    1[BANK0 ] unsigned char 
 11326 ;; Return value:  Size  Location     Type
 11327 ;;		None               void
 11328 ;; Registers used:
 11329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11330 ;; Tracked objects:
 11331 ;;		On entry : 0/0
 11332 ;;		On exit  : 0/0
 11333 ;;		Unchanged: 0/0
 11334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11336 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11338 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11339 ;;Total ram usage:        1 bytes
 11340 ;; Hardware stack levels used:    1
 11341 ;; Hardware stack levels required when called:    6
 11342 ;; This function calls:
 11343 ;;		_SwPointSelect
 11344 ;; This function is called by:
 11345 ;;		_my_MainTime
 11346 ;;		_setLoad_Exceptions
 11347 ;;		_setOverTemp_Exceptions
 11348 ;; This function uses a non-reentrant model
 11349 ;;
 11350                           
 11351                           
 11352                           ;psect for function _setSw_Enable
 11353  1DC8                     _setSw_Enable:	
 11354                           
 11355                           ;incstack = 0
 11356                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11357                           ;setSw_Enable@command stored from wreg
 11358  1DC8  0020               	movlb	0	; select bank0
 11359  1DC9  00A1               	movwf	setSw_Enable@command
 11360                           
 11361                           ;Switch_B1.c: 94: SwPointSelect(1);
 11362  1DCA  3001               	movlw	1
 11363  1DCB  319C  24AE  319D   	fcall	_SwPointSelect
 11364                           
 11365                           ;Switch_B1.c: 95: Sw->Enable = command;
 11366  1DCE  0020               	movlb	0	; select bank0
 11367  1DCF  086C               	movf	_Sw,w
 11368  1DD0  0086               	movwf	6
 11369  1DD1  086D               	movf	_Sw+1,w
 11370  1DD2  0087               	movwf	7
 11371  1DD3  0821               	movf	setSw_Enable@command,w
 11372  1DD4  1001               	bcf	1,0
 11373  1DD5  1D03               	skipz
 11374  1DD6  1401               	bsf	1,0
 11375                           
 11376                           ;Switch_B1.c: 99: SwPointSelect(2);
 11377  1DD7  3002               	movlw	2
 11378  1DD8  319C  24AE         	fcall	_SwPointSelect
 11379                           
 11380                           ;Switch_B1.c: 100: Sw->Enable = command;
 11381  1DDA  0020               	movlb	0	; select bank0
 11382  1DDB  086C               	movf	_Sw,w
 11383  1DDC  0086               	movwf	6
 11384  1DDD  086D               	movf	_Sw+1,w
 11385  1DDE  0087               	movwf	7
 11386  1DDF  0821               	movf	setSw_Enable@command,w
 11387  1DE0  1001               	bcf	1,0
 11388  1DE1  1D03               	skipz
 11389  1DE2  1401               	bsf	1,0
 11390  1DE3  0008               	return
 11391  1DE4                     __end_of_setSw_Enable:	
 11392                           
 11393                           	psect	text60
 11394  1B4B                     __ptext60:	
 11395 ;; *************** function _setRF_Enable *****************
 11396 ;; Defined at:
 11397 ;;		line 216 in file "../src/RF_Control_B1.c"
 11398 ;; Parameters:    Size  Location     Type
 11399 ;;  command         1    wreg     unsigned char 
 11400 ;; Auto vars:     Size  Location     Type
 11401 ;;  command         1    0[BANK0 ] unsigned char 
 11402 ;; Return value:  Size  Location     Type
 11403 ;;		None               void
 11404 ;; Registers used:
 11405 ;;		wreg, status,2
 11406 ;; Tracked objects:
 11407 ;;		On entry : 0/0
 11408 ;;		On exit  : 0/0
 11409 ;;		Unchanged: 0/0
 11410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;Total ram usage:        1 bytes
 11416 ;; Hardware stack levels used:    1
 11417 ;; Hardware stack levels required when called:    5
 11418 ;; This function calls:
 11419 ;;		Nothing
 11420 ;; This function is called by:
 11421 ;;		_my_MainTime
 11422 ;;		_setLoad_Exceptions
 11423 ;;		_setOverTemp_Exceptions
 11424 ;; This function uses a non-reentrant model
 11425 ;;
 11426                           
 11427                           
 11428                           ;psect for function _setRF_Enable
 11429  1B4B                     _setRF_Enable:	
 11430                           
 11431                           ;incstack = 0
 11432                           ; Regs used in _setRF_Enable: [wreg+status,2]
 11433                           ;setRF_Enable@command stored from wreg
 11434  1B4B  0020               	movlb	0	; select bank0
 11435  1B4C  00A0               	movwf	setRF_Enable@command
 11436                           
 11437                           ;RF_Control_B1.c: 217: RF1.Enable = command;
 11438  1B4D  0820               	movf	setRF_Enable@command,w
 11439  1B4E  0021               	movlb	1	; select bank1
 11440  1B4F  103E               	bcf	_RF1^(0+128),0
 11441  1B50  1D03               	skipz
 11442  1B51  143E               	bsf	_RF1^(0+128),0
 11443                           
 11444                           ;RF_Control_B1.c: 218: RF1.Learn = 0;
 11445  1B52  133E               	bcf	_RF1^(0+128),6
 11446                           
 11447                           ;RF_Control_B1.c: 219: RF1.TransceiveGO = 0;
 11448  1B53  113E               	bcf	_RF1^(0+128),2
 11449                           
 11450                           ;RF_Control_B1.c: 220: RF1.RxStatus = 0;
 11451  1B54  11BE               	bcf	_RF1^(0+128),3
 11452                           
 11453                           ;RF_Control_B1.c: 221: RF1.ReceiveGO = 0;
 11454  1B55  10BE               	bcf	_RF1^(0+128),1
 11455                           
 11456                           ;RF_Control_B1.c: 222: RF1.DebounceTime = 0;
 11457  1B56  01C5               	clrf	(_RF1^(0+128)+7)
 11458                           
 11459                           ;RF_Control_B1.c: 223: RF1.Debounce = 0;
 11460  1B57  12BE               	bcf	_RF1^(0+128),5
 11461  1B58  0008               	return
 11462  1B59                     __end_of_setRF_Enable:	
 11463                           
 11464                           	psect	text61
 11465  13DC                     __ptext61:	
 11466 ;; *************** function _DimmerLights_Exceptions *****************
 11467 ;; Defined at:
 11468 ;;		line 524 in file "../src/Dimmer_B1.c"
 11469 ;; Parameters:    Size  Location     Type
 11470 ;;  status          1    wreg     unsigned char 
 11471 ;; Auto vars:     Size  Location     Type
 11472 ;;  status          1   13[BANK0 ] unsigned char 
 11473 ;; Return value:  Size  Location     Type
 11474 ;;		None               void
 11475 ;; Registers used:
 11476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11477 ;; Tracked objects:
 11478 ;;		On entry : 0/0
 11479 ;;		On exit  : 0/0
 11480 ;;		Unchanged: 0/0
 11481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11483 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11485 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11486 ;;Total ram usage:        1 bytes
 11487 ;; Hardware stack levels used:    1
 11488 ;; Hardware stack levels required when called:    8
 11489 ;; This function calls:
 11490 ;;		_getDimmerLights_StatusFlag
 11491 ;;		_setBuz
 11492 ;;		_setDimmerLights_ERROR
 11493 ;;		_setDimmerLights_TriggerERROR
 11494 ;; This function is called by:
 11495 ;;		_setLoad_Exceptions
 11496 ;;		_setOverTemp_Exceptions
 11497 ;; This function uses a non-reentrant model
 11498 ;;
 11499                           
 11500                           
 11501                           ;psect for function _DimmerLights_Exceptions
 11502  13DC                     _DimmerLights_Exceptions:	
 11503                           
 11504                           ;incstack = 0
 11505                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11506                           ;DimmerLights_Exceptions@status stored from wreg
 11507  13DC  0020               	movlb	0	; select bank0
 11508  13DD  00AD               	movwf	DimmerLights_Exceptions@status
 11509                           
 11510                           ;Dimmer_B1.c: 525: if (status == 1) {
 11511  13DE  082D               	movf	DimmerLights_Exceptions@status,w
 11512  13DF  3A01               	xorlw	1
 11513  13E0  1D03               	skipz
 11514  13E1  2BF2               	goto	l9068
 11515                           
 11516                           ;Dimmer_B1.c: 526: if (getDimmerLights_StatusFlag() == 1) {
 11517  13E2  319B  23E5  3193   	fcall	_getDimmerLights_StatusFlag
 11518  13E5  3A01               	xorlw	1
 11519  13E6  1D03               	skipz
 11520  13E7  2C09               	goto	l9076
 11521                           
 11522                           ;Dimmer_B1.c: 527: setBuz(10, 300);
 11523  13E8  302C               	movlw	44
 11524  13E9  0020               	movlb	0	; select bank0
 11525  13EA  00A9               	movwf	setBuz@time
 11526  13EB  3001               	movlw	1
 11527  13EC  00AA               	movwf	setBuz@time+1
 11528  13ED  300A               	movlw	10
 11529  13EE  3195  25BE  3193   	fcall	_setBuz
 11530  13F1  2C09               	goto	l9076
 11531  13F2                     l9068:	
 11532                           ;Dimmer_B1.c: 539: } else if (status == 2)
 11533                           
 11534                           ;Dimmer_B1.c: 534: setDimmerLights_ERROR(2);
 11535                           
 11536                           ;Dimmer_B1.c: 528: }
 11537                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(1);
 11538                           
 11539  13F2  0020               	movlb	0	; select bank0
 11540  13F3  082D               	movf	DimmerLights_Exceptions@status,w
 11541  13F4  3A02               	xorlw	2
 11542  13F5  1D03               	skipz
 11543  13F6  2C04               	goto	l9074
 11544                           
 11545                           ;Dimmer_B1.c: 540: {
 11546                           ;Dimmer_B1.c: 541: setBuz(5, 300);
 11547  13F7  302C               	movlw	44
 11548  13F8  00A9               	movwf	setBuz@time
 11549  13F9  3001               	movlw	1
 11550  13FA  00AA               	movwf	setBuz@time+1
 11551  13FB  3005               	movlw	5
 11552  13FC  3195  25BE  3193   	fcall	_setBuz
 11553                           
 11554                           ;Dimmer_B1.c: 542: setDimmerLights_ERROR(Dimmer->Load);
 11555  13FF  0A73               	incf	_Dimmer,w
 11556  1400  0086               	movwf	6
 11557  1401  0187               	clrf	7
 11558  1402  0801               	movf	1,w
 11559  1403  2C0E               	goto	L7
 11560  1404                     l9074:	
 11561                           ;Dimmer_B1.c: 543: } else if (status == 3)
 11562                           
 11563  1404  0020               	movlb	0	; select bank0
 11564  1405  082D               	movf	DimmerLights_Exceptions@status,w
 11565  1406  3A03               	xorlw	3
 11566  1407  1D03               	skipz
 11567  1408  2C11               	goto	l870
 11568  1409                     l9076:	
 11569                           
 11570                           ;Dimmer_B1.c: 544: {
 11571                           ;Dimmer_B1.c: 546: setDimmerLights_ERROR(1);
 11572  1409  3001               	movlw	1
 11573  140A  3195  2511  3193   	fcall	_setDimmerLights_ERROR
 11574                           
 11575                           ;Dimmer_B1.c: 549: setDimmerLights_ERROR(2);
 11576  140D  3002               	movlw	2
 11577  140E                     L7:	
 11578  140E  3195  2511  3193   	fcall	_setDimmerLights_ERROR
 11579  1411                     l870:	
 11580                           
 11581                           ;Dimmer_B1.c: 554: }
 11582                           ;Dimmer_B1.c: 557: setDimmerLights_TriggerERROR(1, 0);
 11583  1411  0020               	movlb	0	; select bank0
 11584  1412  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11585  1413  3001               	movlw	1
 11586  1414  3190  2040  3193   	fcall	_setDimmerLights_TriggerERROR
 11587                           
 11588                           ;Dimmer_B1.c: 560: setDimmerLights_TriggerERROR(2, 0);
 11589  1417  0020               	movlb	0	; select bank0
 11590  1418  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11591  1419  3002               	movlw	2
 11592  141A  3190  2040  3193   	fcall	_setDimmerLights_TriggerERROR
 11593                           
 11594                           ;Dimmer_B1.c: 566: if (myMain.SelfTest == 0) {
 11595  141D  0021               	movlb	1	; select bank1
 11596  141E  1B20               	btfsc	_myMain^(0+128),6
 11597  141F  0008               	return
 11598                           
 11599                           ;Dimmer_B1.c: 567: myMain.i = 0;
 11600  1420  102E               	bcf	(_myMain^(0+128)+14),0
 11601                           
 11602                           ;Dimmer_B1.c: 568: myMain.j = 0;
 11603  1421  10AE               	bcf	(_myMain^(0+128)+14),1
 11604                           
 11605                           ;Dimmer_B1.c: 569: myMain.k = 1;
 11606  1422  152E               	bsf	(_myMain^(0+128)+14),2
 11607                           
 11608                           ;Dimmer_B1.c: 570: myMain.Count2 = 0;
 11609  1423  01A7               	clrf	(_myMain^(0+128)+7)
 11610  1424  01A8               	clrf	((_myMain+1)^(0+128)+7)
 11611  1425  0008               	return
 11612  1426                     __end_of_DimmerLights_Exceptions:	
 11613                           
 11614                           	psect	text62
 11615  1040                     __ptext62:	
 11616 ;; *************** function _setDimmerLights_TriggerERROR *****************
 11617 ;; Defined at:
 11618 ;;		line 593 in file "../src/Dimmer_B1.c"
 11619 ;; Parameters:    Size  Location     Type
 11620 ;;  lights          1    wreg     unsigned char 
 11621 ;;  command         1    2[BANK0 ] unsigned char 
 11622 ;; Auto vars:     Size  Location     Type
 11623 ;;  lights          1    3[BANK0 ] unsigned char 
 11624 ;; Return value:  Size  Location     Type
 11625 ;;		None               void
 11626 ;; Registers used:
 11627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11628 ;; Tracked objects:
 11629 ;;		On entry : 0/0
 11630 ;;		On exit  : 0/0
 11631 ;;		Unchanged: 0/0
 11632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11633 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11636 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11637 ;;Total ram usage:        2 bytes
 11638 ;; Hardware stack levels used:    1
 11639 ;; Hardware stack levels required when called:    6
 11640 ;; This function calls:
 11641 ;;		_DimmerLightsPointSelect
 11642 ;; This function is called by:
 11643 ;;		_DimmerLights_Exceptions
 11644 ;; This function uses a non-reentrant model
 11645 ;;
 11646                           
 11647                           
 11648                           ;psect for function _setDimmerLights_TriggerERROR
 11649  1040                     _setDimmerLights_TriggerERROR:	
 11650                           
 11651                           ;incstack = 0
 11652                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11653                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 11654  1040  0020               	movlb	0	; select bank0
 11655  1041  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 11656                           
 11657                           ;Dimmer_B1.c: 595: DimmerLightsPointSelect(lights);
 11658  1042  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 11659  1043  319C  2460         	fcall	_DimmerLightsPointSelect
 11660                           
 11661                           ;Dimmer_B1.c: 596: DimmerLights->Trigger = command;
 11662  1045  0874               	movf	_DimmerLights,w
 11663  1046  3E08               	addlw	8
 11664  1047  0086               	movwf	6
 11665  1048  3001               	movlw	1	; select bank2/3
 11666  1049  0087               	movwf	7
 11667  104A  0020               	movlb	0	; select bank0
 11668  104B  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11669  104C  1101               	bcf	1,2
 11670  104D  1D03               	skipz
 11671  104E  1501               	bsf	1,2
 11672                           
 11673                           ;Dimmer_B1.c: 597: DimmerLights->Switch = command;
 11674  104F  0874               	movf	_DimmerLights,w
 11675  1050  3E08               	addlw	8
 11676  1051  0086               	movwf	6
 11677  1052  3001               	movlw	1	; select bank2/3
 11678  1053  0087               	movwf	7
 11679  1054  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11680  1055  1081               	bcf	1,1
 11681  1056  1D03               	skipz
 11682  1057  1481               	bsf	1,1
 11683                           
 11684                           ;Dimmer_B1.c: 598: DimmerLights->TriggerAdj = command;
 11685  1058  0874               	movf	_DimmerLights,w
 11686  1059  3E08               	addlw	8
 11687  105A  0086               	movwf	6
 11688  105B  3001               	movlw	1	; select bank2/3
 11689  105C  0087               	movwf	7
 11690  105D  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11691  105E  1201               	bcf	1,4
 11692  105F  1D03               	skipz
 11693  1060  1601               	bsf	1,4
 11694                           
 11695                           ;Dimmer_B1.c: 599: DimmerLights->AdjGo = command;
 11696  1061  0874               	movf	_DimmerLights,w
 11697  1062  3E08               	addlw	8
 11698  1063  0086               	movwf	6
 11699  1064  3001               	movlw	1	; select bank2/3
 11700  1065  0087               	movwf	7
 11701  1066  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11702  1067  1181               	bcf	1,3
 11703  1068  1D03               	skipz
 11704  1069  1581               	bsf	1,3
 11705  106A  0008               	return
 11706  106B                     __end_of_setDimmerLights_TriggerERROR:	
 11707                           
 11708                           	psect	text63
 11709  1511                     __ptext63:	
 11710 ;; *************** function _setDimmerLights_ERROR *****************
 11711 ;; Defined at:
 11712 ;;		line 575 in file "../src/Dimmer_B1.c"
 11713 ;; Parameters:    Size  Location     Type
 11714 ;;  lights          1    wreg     unsigned char 
 11715 ;; Auto vars:     Size  Location     Type
 11716 ;;  lights          1    5[BANK0 ] unsigned char 
 11717 ;; Return value:  Size  Location     Type
 11718 ;;		None               void
 11719 ;; Registers used:
 11720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11721 ;; Tracked objects:
 11722 ;;		On entry : 0/0
 11723 ;;		On exit  : 0/0
 11724 ;;		Unchanged: 0/0
 11725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11727 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11728 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11729 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11730 ;;Total ram usage:        2 bytes
 11731 ;; Hardware stack levels used:    1
 11732 ;; Hardware stack levels required when called:    7
 11733 ;; This function calls:
 11734 ;;		_DimmerLightsPointSelect
 11735 ;;		_setLED
 11736 ;;		_setLoad_StatusOff
 11737 ;;		_setRFSW_Status
 11738 ;;		_setSw_Status
 11739 ;; This function is called by:
 11740 ;;		_DimmerLights_Exceptions
 11741 ;; This function uses a non-reentrant model
 11742 ;;
 11743                           
 11744                           
 11745                           ;psect for function _setDimmerLights_ERROR
 11746  1511                     _setDimmerLights_ERROR:	
 11747                           
 11748                           ;incstack = 0
 11749                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11750                           ;setDimmerLights_ERROR@lights stored from wreg
 11751  1511  0020               	movlb	0	; select bank0
 11752  1512  00A5               	movwf	setDimmerLights_ERROR@lights
 11753                           
 11754                           ;Dimmer_B1.c: 576: DimmerLightsPointSelect(lights);
 11755  1513  0825               	movf	setDimmerLights_ERROR@lights,w
 11756  1514  319C  2460  3195   	fcall	_DimmerLightsPointSelect
 11757                           
 11758                           ;Dimmer_B1.c: 577: if (DimmerLights->Status == 1) {
 11759  1517  0874               	movf	_DimmerLights,w
 11760  1518  0086               	movwf	6
 11761  1519  3001               	movlw	1	; select bank2/3
 11762  151A  0087               	movwf	7
 11763  151B  1E81               	btfss	1,5
 11764  151C  0008               	return
 11765                           
 11766                           ;Dimmer_B1.c: 579: DimmerLights->Signal = 0;
 11767  151D  0874               	movf	_DimmerLights,w
 11768  151E  0086               	movwf	6
 11769  151F  3001               	movlw	1	; select bank2/3
 11770  1520  0087               	movwf	7
 11771  1521  1081               	bcf	1,1
 11772                           
 11773                           ;Dimmer_B1.c: 580: DimmerLights->AdjFlag = 0;
 11774  1522  0874               	movf	_DimmerLights,w
 11775  1523  0086               	movwf	6
 11776  1524  3001               	movlw	1	; select bank2/3
 11777  1525  0087               	movwf	7
 11778  1526  1181               	bcf	1,3
 11779                           
 11780                           ;Dimmer_B1.c: 581: DimmerLights->AdjStatus = 0;
 11781  1527  0874               	movf	_DimmerLights,w
 11782  1528  0086               	movwf	6
 11783  1529  3001               	movlw	1	; select bank2/3
 11784  152A  0087               	movwf	7
 11785  152B  1201               	bcf	1,4
 11786                           
 11787                           ;Dimmer_B1.c: 582: DimmerLights->StatusFlag = 0;
 11788  152C  0874               	movf	_DimmerLights,w
 11789  152D  0086               	movwf	6
 11790  152E  3001               	movlw	1	; select bank2/3
 11791  152F  0087               	movwf	7
 11792  1530  1301               	bcf	1,6
 11793                           
 11794                           ;Dimmer_B1.c: 583: DimmerLights->DimmingTimeValue = 7;
 11795  1531  3007               	movlw	7
 11796  1532  0020               	movlb	0	; select bank0
 11797  1533  00A4               	movwf	??_setDimmerLights_ERROR
 11798  1534  0874               	movf	_DimmerLights,w
 11799  1535  3E02               	addlw	2
 11800  1536  0086               	movwf	6
 11801  1537  3001               	movlw	1	; select bank2/3
 11802  1538  0087               	movwf	7
 11803  1539  0824               	movf	??_setDimmerLights_ERROR,w
 11804  153A  0081               	movwf	1
 11805                           
 11806                           ;Dimmer_B1.c: 584: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11807  153B  0874               	movf	_DimmerLights,w
 11808  153C  3E06               	addlw	6
 11809  153D  0086               	movwf	6
 11810  153E  3001               	movlw	1	; select bank2/3
 11811  153F  0087               	movwf	7
 11812  1540  0801               	movf	1,w
 11813  1541  00A4               	movwf	??_setDimmerLights_ERROR
 11814  1542  0874               	movf	_DimmerLights,w
 11815  1543  3E04               	addlw	4
 11816  1544  0086               	movwf	6
 11817  1545  3001               	movlw	1	; select bank2/3
 11818  1546  0087               	movwf	7
 11819  1547  0824               	movf	??_setDimmerLights_ERROR,w
 11820  1548  0081               	movwf	1
 11821                           
 11822                           ;Dimmer_B1.c: 585: Dimmer->Detect = 1;
 11823  1549  0873               	movf	_Dimmer,w
 11824  154A  0086               	movwf	6
 11825  154B  0187               	clrf	7
 11826  154C  1401               	bsf	1,0
 11827                           
 11828                           ;Dimmer_B1.c: 586: setLoad_StatusOff(lights, 1);
 11829  154D  01A0               	clrf	setLoad_StatusOff@command
 11830  154E  0AA0               	incf	setLoad_StatusOff@command,f
 11831  154F  0825               	movf	setDimmerLights_ERROR@lights,w
 11832  1550  319E  265B  3195   	fcall	_setLoad_StatusOff
 11833                           
 11834                           ;Dimmer_B1.c: 587: setLED(lights, 1);
 11835  1553  0020               	movlb	0	; select bank0
 11836  1554  01A1               	clrf	setLED@command
 11837  1555  0AA1               	incf	setLED@command,f
 11838  1556  0825               	movf	setDimmerLights_ERROR@lights,w
 11839  1557  3196  2672  3195   	fcall	_setLED
 11840                           
 11841                           ;Dimmer_B1.c: 588: setSw_Status(lights, 0);
 11842  155A  0020               	movlb	0	; select bank0
 11843  155B  01A1               	clrf	setSw_Status@command
 11844  155C  0825               	movf	setDimmerLights_ERROR@lights,w
 11845  155D  319B  2368  3195   	fcall	_setSw_Status
 11846                           
 11847                           ;Dimmer_B1.c: 589: setRFSW_Status(lights, 0);
 11848  1560  0020               	movlb	0	; select bank0
 11849  1561  01A2               	clrf	setRFSW_Status@command
 11850  1562  0825               	movf	setDimmerLights_ERROR@lights,w
 11851  1563  319B  2359         	fcall	_setRFSW_Status
 11852  1565  0008               	return
 11853  1566                     __end_of_setDimmerLights_ERROR:	
 11854                           
 11855                           	psect	text64
 11856  1BB5                     __ptext64:	
 11857 ;; *************** function _setDimmerLights_Clear *****************
 11858 ;; Defined at:
 11859 ;;		line 728 in file "../src/Dimmer_B1.c"
 11860 ;; Parameters:    Size  Location     Type
 11861 ;;  lights          1    wreg     unsigned char 
 11862 ;;  command         1    2[BANK0 ] unsigned char 
 11863 ;; Auto vars:     Size  Location     Type
 11864 ;;  lights          1    3[BANK0 ] unsigned char 
 11865 ;; Return value:  Size  Location     Type
 11866 ;;		None               void
 11867 ;; Registers used:
 11868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11869 ;; Tracked objects:
 11870 ;;		On entry : 0/0
 11871 ;;		On exit  : 0/0
 11872 ;;		Unchanged: 0/0
 11873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11874 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11878 ;;Total ram usage:        2 bytes
 11879 ;; Hardware stack levels used:    1
 11880 ;; Hardware stack levels required when called:    6
 11881 ;; This function calls:
 11882 ;;		_DimmerLightsPointSelect
 11883 ;; This function is called by:
 11884 ;;		_Load_Main
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           
 11889                           ;psect for function _setDimmerLights_Clear
 11890  1BB5                     _setDimmerLights_Clear:	
 11891                           
 11892                           ;incstack = 0
 11893                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11894                           ;setDimmerLights_Clear@lights stored from wreg
 11895  1BB5  0020               	movlb	0	; select bank0
 11896  1BB6  00A3               	movwf	setDimmerLights_Clear@lights
 11897                           
 11898                           ;Dimmer_B1.c: 730: DimmerLightsPointSelect(lights);
 11899  1BB7  0823               	movf	setDimmerLights_Clear@lights,w
 11900  1BB8  319C  2460         	fcall	_DimmerLightsPointSelect
 11901                           
 11902                           ;Dimmer_B1.c: 731: DimmerLights->Clear = command;
 11903  1BBA  0874               	movf	_DimmerLights,w
 11904  1BBB  3E09               	addlw	9
 11905  1BBC  0086               	movwf	6
 11906  1BBD  3001               	movlw	1	; select bank2/3
 11907  1BBE  0087               	movwf	7
 11908  1BBF  0020               	movlb	0	; select bank0
 11909  1BC0  0822               	movf	setDimmerLights_Clear@command,w
 11910  1BC1  1101               	bcf	1,2
 11911  1BC2  1D03               	skipz
 11912  1BC3  1501               	bsf	1,2
 11913  1BC4  0008               	return
 11914  1BC5                     __end_of_setDimmerLights_Clear:	
 11915                           
 11916                           	psect	text65
 11917  1A6E                     __ptext65:	
 11918 ;; *************** function _getTemp_Safe *****************
 11919 ;; Defined at:
 11920 ;;		line 21 in file "../src/OverTemperature_B1.c"
 11921 ;; Parameters:    Size  Location     Type
 11922 ;;		None
 11923 ;; Auto vars:     Size  Location     Type
 11924 ;;  result          1    0[BANK0 ] unsigned char 
 11925 ;; Return value:  Size  Location     Type
 11926 ;;                  1    wreg      unsigned char 
 11927 ;; Registers used:
 11928 ;;		wreg, status,2
 11929 ;; Tracked objects:
 11930 ;;		On entry : 0/0
 11931 ;;		On exit  : 0/0
 11932 ;;		Unchanged: 0/0
 11933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11938 ;;Total ram usage:        1 bytes
 11939 ;; Hardware stack levels used:    1
 11940 ;; Hardware stack levels required when called:    5
 11941 ;; This function calls:
 11942 ;;		Nothing
 11943 ;; This function is called by:
 11944 ;;		_Load_Main
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948                           
 11949                           ;psect for function _getTemp_Safe
 11950  1A6E                     _getTemp_Safe:	
 11951                           
 11952                           ;OverTemperature_B1.c: 22: char result = Temp1.Safe;
 11953                           
 11954                           ;incstack = 0
 11955                           ; Regs used in _getTemp_Safe: [wreg+status,2]
 11956  1A6E  3000               	movlw	0
 11957  1A6F  0021               	movlb	1	; select bank1
 11958  1A70  1A56               	btfsc	_Temp1^(0+128),4
 11959  1A71  3001               	movlw	1
 11960  1A72  0020               	movlb	0	; select bank0
 11961  1A73  00A0               	movwf	getTemp_Safe@result
 11962                           
 11963                           ;OverTemperature_B1.c: 23: return result;
 11964  1A74  0820               	movf	getTemp_Safe@result,w
 11965  1A75  0008               	return
 11966  1A76                     __end_of_getTemp_Safe:	
 11967                           
 11968                           	psect	text66
 11969  1E1E                     __ptext66:	
 11970 ;; *************** function ___wmul *****************
 11971 ;; Defined at:
 11972 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11973 ;; Parameters:    Size  Location     Type
 11974 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11975 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11976 ;; Auto vars:     Size  Location     Type
 11977 ;;  product         2    4[BANK0 ] unsigned int 
 11978 ;; Return value:  Size  Location     Type
 11979 ;;                  2    0[BANK0 ] unsigned int 
 11980 ;; Registers used:
 11981 ;;		wreg, status,2, status,0
 11982 ;; Tracked objects:
 11983 ;;		On entry : 0/0
 11984 ;;		On exit  : 0/0
 11985 ;;		Unchanged: 0/0
 11986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11987 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11991 ;;Total ram usage:        6 bytes
 11992 ;; Hardware stack levels used:    1
 11993 ;; Hardware stack levels required when called:    5
 11994 ;; This function calls:
 11995 ;;		Nothing
 11996 ;; This function is called by:
 11997 ;;		_Load_Main
 11998 ;;		_setRF_Main
 11999 ;; This function uses a non-reentrant model
 12000 ;;
 12001                           
 12002                           
 12003                           ;psect for function ___wmul
 12004  1E1E                     ___wmul:	
 12005                           
 12006                           ;incstack = 0
 12007                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12008  1E1E  0020               	movlb	0	; select bank0
 12009  1E1F  01A4               	clrf	___wmul@product
 12010  1E20  01A5               	clrf	___wmul@product+1
 12011  1E21                     l9548:	
 12012  1E21  1C20               	btfss	___wmul@multiplier,0
 12013  1E22  2E27               	goto	l2867
 12014  1E23  0822               	movf	___wmul@multiplicand,w
 12015  1E24  07A4               	addwf	___wmul@product,f
 12016  1E25  0823               	movf	___wmul@multiplicand+1,w
 12017  1E26  3DA5               	addwfc	___wmul@product+1,f
 12018  1E27                     l2867:	
 12019  1E27  3001               	movlw	1
 12020  1E28                     u9935:	
 12021  1E28  35A2               	lslf	___wmul@multiplicand,f
 12022  1E29  0DA3               	rlf	___wmul@multiplicand+1,f
 12023  1E2A  0B89               	decfsz	9,f
 12024  1E2B  2E28               	goto	u9935
 12025  1E2C  3001               	movlw	1
 12026  1E2D                     u9945:	
 12027  1E2D  36A1               	lsrf	___wmul@multiplier+1,f
 12028  1E2E  0CA0               	rrf	___wmul@multiplier,f
 12029  1E2F  0B89               	decfsz	9,f
 12030  1E30  2E2D               	goto	u9945
 12031  1E31  0821               	movf	___wmul@multiplier+1,w
 12032  1E32  0420               	iorwf	___wmul@multiplier,w
 12033  1E33  1D03               	skipz
 12034  1E34  2E21               	goto	l9548
 12035  1E35  0825               	movf	___wmul@product+1,w
 12036  1E36  01A1               	clrf	?___wmul+1
 12037  1E37  07A1               	addwf	?___wmul+1,f
 12038  1E38  0824               	movf	___wmul@product,w
 12039  1E39  01A0               	clrf	?___wmul
 12040  1E3A  07A0               	addwf	?___wmul,f
 12041  1E3B  0008               	return
 12042  1E3C                     __end_of___wmul:	
 12043                           
 12044                           	psect	text67
 12045  1192                     __ptext67:	
 12046 ;; *************** function ___lwdiv *****************
 12047 ;; Defined at:
 12048 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 12049 ;; Parameters:    Size  Location     Type
 12050 ;;  divisor         2    0[BANK0 ] unsigned int 
 12051 ;;  dividend        2    2[BANK0 ] unsigned int 
 12052 ;; Auto vars:     Size  Location     Type
 12053 ;;  quotient        2    6[BANK0 ] unsigned int 
 12054 ;;  counter         1    5[BANK0 ] unsigned char 
 12055 ;; Return value:  Size  Location     Type
 12056 ;;                  2    0[BANK0 ] unsigned int 
 12057 ;; Registers used:
 12058 ;;		wreg, status,2, status,0
 12059 ;; Tracked objects:
 12060 ;;		On entry : 0/0
 12061 ;;		On exit  : 0/0
 12062 ;;		Unchanged: 0/0
 12063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12064 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12065 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12068 ;;Total ram usage:        8 bytes
 12069 ;; Hardware stack levels used:    1
 12070 ;; Hardware stack levels required when called:    5
 12071 ;; This function calls:
 12072 ;;		Nothing
 12073 ;; This function is called by:
 12074 ;;		_Load_Main
 12075 ;; This function uses a non-reentrant model
 12076 ;;
 12077                           
 12078                           
 12079                           ;psect for function ___lwdiv
 12080  1192                     ___lwdiv:	
 12081                           
 12082                           ;incstack = 0
 12083                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12084  1192  0020               	movlb	0	; select bank0
 12085  1193  01A6               	clrf	___lwdiv@quotient
 12086  1194  01A7               	clrf	___lwdiv@quotient+1
 12087  1195  0821               	movf	___lwdiv@divisor+1,w
 12088  1196  0420               	iorwf	___lwdiv@divisor,w
 12089  1197  1903               	skipnz
 12090  1198  29C2               	goto	l10176
 12091  1199  01A5               	clrf	___lwdiv@counter
 12092  119A  0AA5               	incf	___lwdiv@counter,f
 12093  119B                     l10164:	
 12094  119B  1BA1               	btfsc	___lwdiv@divisor+1,7
 12095  119C  29A7               	goto	l10166
 12096  119D  3001               	movlw	1
 12097  119E                     u10895:	
 12098  119E  35A0               	lslf	___lwdiv@divisor,f
 12099  119F  0DA1               	rlf	___lwdiv@divisor+1,f
 12100  11A0  0B89               	decfsz	9,f
 12101  11A1  299E               	goto	u10895
 12102  11A2  3001               	movlw	1
 12103  11A3  00A4               	movwf	??___lwdiv
 12104  11A4  0824               	movf	??___lwdiv,w
 12105  11A5  07A5               	addwf	___lwdiv@counter,f
 12106  11A6  299B               	goto	l10164
 12107  11A7                     l10166:	
 12108  11A7  3001               	movlw	1
 12109  11A8                     u10915:	
 12110  11A8  35A6               	lslf	___lwdiv@quotient,f
 12111  11A9  0DA7               	rlf	___lwdiv@quotient+1,f
 12112  11AA  0B89               	decfsz	9,f
 12113  11AB  29A8               	goto	u10915
 12114  11AC  0821               	movf	___lwdiv@divisor+1,w
 12115  11AD  0223               	subwf	___lwdiv@dividend+1,w
 12116  11AE  1D03               	skipz
 12117  11AF  29B2               	goto	u10925
 12118  11B0  0820               	movf	___lwdiv@divisor,w
 12119  11B1  0222               	subwf	___lwdiv@dividend,w
 12120  11B2                     u10925:	
 12121  11B2  1C03               	skipc
 12122  11B3  29B9               	goto	l10172
 12123  11B4  0820               	movf	___lwdiv@divisor,w
 12124  11B5  02A2               	subwf	___lwdiv@dividend,f
 12125  11B6  0821               	movf	___lwdiv@divisor+1,w
 12126  11B7  3BA3               	subwfb	___lwdiv@dividend+1,f
 12127  11B8  1426               	bsf	___lwdiv@quotient,0
 12128  11B9                     l10172:	
 12129  11B9  3001               	movlw	1
 12130  11BA                     u10935:	
 12131  11BA  36A1               	lsrf	___lwdiv@divisor+1,f
 12132  11BB  0CA0               	rrf	___lwdiv@divisor,f
 12133  11BC  0B89               	decfsz	9,f
 12134  11BD  29BA               	goto	u10935
 12135  11BE  3001               	movlw	1
 12136  11BF  02A5               	subwf	___lwdiv@counter,f
 12137  11C0  1D03               	btfss	3,2
 12138  11C1  29A7               	goto	l10166
 12139  11C2                     l10176:	
 12140  11C2  0827               	movf	___lwdiv@quotient+1,w
 12141  11C3  01A1               	clrf	?___lwdiv+1
 12142  11C4  07A1               	addwf	?___lwdiv+1,f
 12143  11C5  0826               	movf	___lwdiv@quotient,w
 12144  11C6  01A0               	clrf	?___lwdiv
 12145  11C7  07A0               	addwf	?___lwdiv,f
 12146  11C8  0008               	return
 12147  11C9                     __end_of___lwdiv:	
 12148                           
 12149                           	psect	text68
 12150  1A30                     __ptext68:	
 12151 ;; *************** function _Load_Initialization *****************
 12152 ;; Defined at:
 12153 ;;		line 9 in file "../src/OverLoad_B1.c"
 12154 ;; Parameters:    Size  Location     Type
 12155 ;;		None
 12156 ;; Auto vars:     Size  Location     Type
 12157 ;;		None
 12158 ;; Return value:  Size  Location     Type
 12159 ;;		None               void
 12160 ;; Registers used:
 12161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12162 ;; Tracked objects:
 12163 ;;		On entry : 0/0
 12164 ;;		On exit  : 0/0
 12165 ;;		Unchanged: 0/0
 12166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12171 ;;Total ram usage:        0 bytes
 12172 ;; Hardware stack levels used:    1
 12173 ;; Hardware stack levels required when called:    6
 12174 ;; This function calls:
 12175 ;;		_setLoad_AH_AL_Restore
 12176 ;; This function is called by:
 12177 ;;		_main
 12178 ;; This function uses a non-reentrant model
 12179 ;;
 12180                           
 12181                           
 12182                           ;psect for function _Load_Initialization
 12183  1A30                     _Load_Initialization:	
 12184                           
 12185                           ;OverLoad_B1.c: 10: Load1.Safe = 1;
 12186                           
 12187                           ;incstack = 0
 12188                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12189  1A30  0023               	movlb	3	; select bank3
 12190  1A31  15A0               	bsf	_Load1^(0+384),3
 12191                           
 12192                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12193  1A32  319D  25AC         	fcall	_setLoad_AH_AL_Restore
 12194  1A34  0008               	return
 12195  1A35                     __end_of_Load_Initialization:	
 12196                           
 12197                           	psect	text69
 12198  1DAC                     __ptext69:	
 12199 ;; *************** function _setLoad_AH_AL_Restore *****************
 12200 ;; Defined at:
 12201 ;;		line 307 in file "../src/OverLoad_B1.c"
 12202 ;; Parameters:    Size  Location     Type
 12203 ;;		None
 12204 ;; Auto vars:     Size  Location     Type
 12205 ;;  i               1    1[BANK0 ] unsigned char 
 12206 ;; Return value:  Size  Location     Type
 12207 ;;		None               void
 12208 ;; Registers used:
 12209 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12210 ;; Tracked objects:
 12211 ;;		On entry : 0/0
 12212 ;;		On exit  : 0/0
 12213 ;;		Unchanged: 0/0
 12214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12219 ;;Total ram usage:        2 bytes
 12220 ;; Hardware stack levels used:    1
 12221 ;; Hardware stack levels required when called:    5
 12222 ;; This function calls:
 12223 ;;		Nothing
 12224 ;; This function is called by:
 12225 ;;		_Load_Initialization
 12226 ;;		_Load_Main
 12227 ;; This function uses a non-reentrant model
 12228 ;;
 12229                           
 12230                           
 12231                           ;psect for function _setLoad_AH_AL_Restore
 12232  1DAC                     _setLoad_AH_AL_Restore:	
 12233                           
 12234                           ;OverLoad_B1.c: 308: char i;
 12235                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 12236                           
 12237                           ;incstack = 0
 12238                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12239  1DAC  0020               	movlb	0	; select bank0
 12240  1DAD  01A1               	clrf	setLoad_AH_AL_Restore@i
 12241  1DAE                     L8:	
 12242  1DAE  3005               	movlw	5
 12243  1DAF  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12244  1DB0  1803               	btfsc	3,0
 12245  1DB1  0008               	return
 12246                           
 12247                           ;OverLoad_B1.c: 310: Load1.AH[i] = 0;
 12248  1DB2  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12249  1DB3  3EA8               	addlw	(_Load1+8)& (0+255)
 12250  1DB4  0086               	movwf	6
 12251  1DB5  3001               	movlw	1	; select bank3/4
 12252  1DB6  0087               	movwf	7
 12253  1DB7  3000               	movlw	0
 12254  1DB8  3FC0               	movwi [0]fsr1
 12255  1DB9  3FC1               	movwi [1]fsr1
 12256                           
 12257                           ;OverLoad_B1.c: 311: Load1.AL[i] = 0xffff;
 12258  1DBA  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12259  1DBB  3EBA               	addlw	(_Load1+26)& (0+255)
 12260  1DBC  0086               	movwf	6
 12261  1DBD  3001               	movlw	1	; select bank3/4
 12262  1DBE  0087               	movwf	7
 12263  1DBF  30FF               	movlw	255
 12264  1DC0  3FC0               	movwi [0]fsr1
 12265  1DC1  30FF               	movlw	255
 12266  1DC2  3FC1               	movwi [1]fsr1
 12267  1DC3  3001               	movlw	1
 12268  1DC4  00A0               	movwf	??_setLoad_AH_AL_Restore
 12269  1DC5  0820               	movf	??_setLoad_AH_AL_Restore,w
 12270  1DC6  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12271  1DC7  2DAE               	goto	L8
 12272  1DC8                     __end_of_setLoad_AH_AL_Restore:	
 12273                           
 12274                           	psect	text70
 12275  1AFD                     __ptext70:	
 12276 ;; *************** function _LED_Main *****************
 12277 ;; Defined at:
 12278 ;;		line 47 in file "../src/LED_B1.c"
 12279 ;; Parameters:    Size  Location     Type
 12280 ;;		None
 12281 ;; Auto vars:     Size  Location     Type
 12282 ;;		None
 12283 ;; Return value:  Size  Location     Type
 12284 ;;		None               void
 12285 ;; Registers used:
 12286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12287 ;; Tracked objects:
 12288 ;;		On entry : 0/0
 12289 ;;		On exit  : 0/0
 12290 ;;		Unchanged: 0/0
 12291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12296 ;;Total ram usage:        0 bytes
 12297 ;; Hardware stack levels used:    1
 12298 ;; Hardware stack levels required when called:    7
 12299 ;; This function calls:
 12300 ;;		_setLED_Main
 12301 ;; This function is called by:
 12302 ;;		_main
 12303 ;; This function uses a non-reentrant model
 12304 ;;
 12305                           
 12306                           
 12307                           ;psect for function _LED_Main
 12308  1AFD                     _LED_Main:	
 12309                           
 12310                           ;LED_B1.c: 49: setLED_Main(1);
 12311                           
 12312                           ;incstack = 0
 12313                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12314  1AFD  3001               	movlw	1
 12315  1AFE  3193  2308  319A   	fcall	_setLED_Main
 12316                           
 12317                           ;LED_B1.c: 52: setLED_Main(2);
 12318  1B01  3002               	movlw	2
 12319  1B02  3193  2308  319A   	fcall	_setLED_Main
 12320                           
 12321                           ;LED_B1.c: 58: setLED_Main(99);
 12322  1B05  3063               	movlw	99
 12323  1B06  3193  2308         	fcall	_setLED_Main
 12324  1B08  0008               	return
 12325  1B09                     __end_of_LED_Main:	
 12326                           
 12327                           	psect	text71
 12328  1308                     __ptext71:	
 12329 ;; *************** function _setLED_Main *****************
 12330 ;; Defined at:
 12331 ;;		line 192 in file "../src/LED_B1.c"
 12332 ;; Parameters:    Size  Location     Type
 12333 ;;  led             1    wreg     unsigned char 
 12334 ;; Auto vars:     Size  Location     Type
 12335 ;;  led             1    3[BANK0 ] unsigned char 
 12336 ;; Return value:  Size  Location     Type
 12337 ;;		None               void
 12338 ;; Registers used:
 12339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12340 ;; Tracked objects:
 12341 ;;		On entry : 0/0
 12342 ;;		On exit  : 0/0
 12343 ;;		Unchanged: 0/0
 12344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12347 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12348 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12349 ;;Total ram usage:        3 bytes
 12350 ;; Hardware stack levels used:    1
 12351 ;; Hardware stack levels required when called:    6
 12352 ;; This function calls:
 12353 ;;		_LedPointSelect
 12354 ;; This function is called by:
 12355 ;;		_LED_Main
 12356 ;; This function uses a non-reentrant model
 12357 ;;
 12358                           
 12359                           
 12360                           ;psect for function _setLED_Main
 12361  1308                     _setLED_Main:	
 12362                           
 12363                           ;incstack = 0
 12364                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12365                           ;setLED_Main@led stored from wreg
 12366  1308  0020               	movlb	0	; select bank0
 12367  1309  00A3               	movwf	setLED_Main@led
 12368                           
 12369                           ;LED_B1.c: 193: LedPointSelect(led);
 12370  130A  0823               	movf	setLED_Main@led,w
 12371  130B  319D  25E4  3193   	fcall	_LedPointSelect
 12372                           
 12373                           ;LED_B1.c: 194: if (LED->GO == 1) {
 12374  130E  0870               	movf	_LED,w
 12375  130F  0086               	movwf	6
 12376  1310  0871               	movf	_LED+1,w
 12377  1311  0087               	movwf	7
 12378  1312  1C81               	btfss	1,1
 12379  1313  0008               	return
 12380                           
 12381                           ;LED_B1.c: 195: LED->Time++;
 12382  1314  0870               	movf	_LED,w
 12383  1315  0086               	movwf	6
 12384  1316  0871               	movf	_LED+1,w
 12385  1317  0087               	movwf	7
 12386  1318  3141               	addfsr 1,1
 12387  1319  3001               	movlw	1
 12388  131A  0781               	addwf	1,f
 12389  131B  3141               	addfsr 1,1
 12390  131C  1803               	skipnc
 12391  131D  0A81               	incf	1,f
 12392                           
 12393                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 12394  131E  0870               	movf	_LED,w
 12395  131F  0086               	movwf	6
 12396  1320  0871               	movf	_LED+1,w
 12397  1321  0087               	movwf	7
 12398  1322  3141               	addfsr 1,1
 12399  1323  3F40               	moviw [0]fsr1
 12400  1324  0020               	movlb	0	; select bank0
 12401  1325  00A1               	movwf	??_setLED_Main
 12402  1326  3F41               	moviw [1]fsr1
 12403  1327  00A2               	movwf	??_setLED_Main+1
 12404  1328  3000               	movlw	0
 12405  1329  0222               	subwf	??_setLED_Main+1,w
 12406  132A  3032               	movlw	50
 12407  132B  1903               	skipnz
 12408  132C  0221               	subwf	??_setLED_Main,w
 12409  132D  1C03               	skipc
 12410  132E  0008               	return
 12411                           
 12412                           ;LED_B1.c: 197: LED->Time = 0;
 12413  132F  0870               	movf	_LED,w
 12414  1330  0086               	movwf	6
 12415  1331  0871               	movf	_LED+1,w
 12416  1332  0087               	movwf	7
 12417  1333  3141               	addfsr 1,1
 12418  1334  3000               	movlw	0
 12419  1335  3FC0               	movwi [0]fsr1
 12420  1336  3FC1               	movwi [1]fsr1
 12421                           
 12422                           ;LED_B1.c: 199: if (led == 1) {
 12423  1337  0823               	movf	setLED_Main@led,w
 12424  1338  3A01               	xorlw	1
 12425  1339  1D03               	skipz
 12426  133A  2B3E               	goto	l9746
 12427                           
 12428                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 12429  133B  3008               	movlw	8
 12430  133C  068C               	xorwf	12,f
 12431                           
 12432                           ;LED_B1.c: 201: }
 12433  133D  0008               	return
 12434  133E                     l9746:	
 12435                           
 12436                           ;LED_B1.c: 204: else if (led == 2) {
 12437  133E  0823               	movf	setLED_Main@led,w
 12438  133F  3A02               	xorlw	2
 12439  1340  1D03               	skipz
 12440  1341  2B45               	goto	l9750
 12441                           
 12442                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 12443  1342  3080               	movlw	128
 12444  1343  068E               	xorwf	14,f
 12445                           
 12446                           ;LED_B1.c: 206: }
 12447  1344  0008               	return
 12448  1345                     l9750:	
 12449                           
 12450                           ;LED_B1.c: 214: else if (led == 99) {
 12451  1345  0823               	movf	setLED_Main@led,w
 12452  1346  3A63               	xorlw	99
 12453  1347  1D03               	skipz
 12454  1348  0008               	return
 12455                           
 12456                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 12457  1349  3020               	movlw	32
 12458  134A  068D               	xorwf	13,f
 12459  134B  0008               	return
 12460  134C                     __end_of_setLED_Main:	
 12461                           
 12462                           	psect	text72
 12463  1AF1                     __ptext72:	
 12464 ;; *************** function _LED_Initialization *****************
 12465 ;; Defined at:
 12466 ;;		line 31 in file "../src/LED_B1.c"
 12467 ;; Parameters:    Size  Location     Type
 12468 ;;		None
 12469 ;; Auto vars:     Size  Location     Type
 12470 ;;		None
 12471 ;; Return value:  Size  Location     Type
 12472 ;;		None               void
 12473 ;; Registers used:
 12474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12475 ;; Tracked objects:
 12476 ;;		On entry : 0/0
 12477 ;;		On exit  : 0/0
 12478 ;;		Unchanged: 0/0
 12479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12484 ;;Total ram usage:        0 bytes
 12485 ;; Hardware stack levels used:    1
 12486 ;; Hardware stack levels required when called:    8
 12487 ;; This function calls:
 12488 ;;		_setLED_Initialization
 12489 ;; This function is called by:
 12490 ;;		_main
 12491 ;; This function uses a non-reentrant model
 12492 ;;
 12493                           
 12494                           
 12495                           ;psect for function _LED_Initialization
 12496  1AF1                     _LED_Initialization:	
 12497                           
 12498                           ;LED_B1.c: 33: setLED_Initialization(1);
 12499                           
 12500                           ;incstack = 0
 12501                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12502  1AF1  3001               	movlw	1
 12503  1AF2  319B  23F6  319A   	fcall	_setLED_Initialization
 12504                           
 12505                           ;LED_B1.c: 36: setLED_Initialization(2);
 12506  1AF5  3002               	movlw	2
 12507  1AF6  319B  23F6  319A   	fcall	_setLED_Initialization
 12508                           
 12509                           ;LED_B1.c: 42: setLED_Initialization(99);
 12510  1AF9  3063               	movlw	99
 12511  1AFA  319B  23F6         	fcall	_setLED_Initialization
 12512  1AFC  0008               	return
 12513  1AFD                     __end_of_LED_Initialization:	
 12514                           
 12515                           	psect	text73
 12516  1BF6                     __ptext73:	
 12517 ;; *************** function _setLED_Initialization *****************
 12518 ;; Defined at:
 12519 ;;		line 63 in file "../src/LED_B1.c"
 12520 ;; Parameters:    Size  Location     Type
 12521 ;;  led             1    wreg     unsigned char 
 12522 ;; Auto vars:     Size  Location     Type
 12523 ;;  led             1    3[BANK0 ] unsigned char 
 12524 ;; Return value:  Size  Location     Type
 12525 ;;		None               void
 12526 ;; Registers used:
 12527 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12528 ;; Tracked objects:
 12529 ;;		On entry : 0/0
 12530 ;;		On exit  : 0/0
 12531 ;;		Unchanged: 0/0
 12532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12534 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12536 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12537 ;;Total ram usage:        1 bytes
 12538 ;; Hardware stack levels used:    1
 12539 ;; Hardware stack levels required when called:    7
 12540 ;; This function calls:
 12541 ;;		_LedPointSelect
 12542 ;;		_setLED
 12543 ;; This function is called by:
 12544 ;;		_LED_Initialization
 12545 ;; This function uses a non-reentrant model
 12546 ;;
 12547                           
 12548                           
 12549                           ;psect for function _setLED_Initialization
 12550  1BF6                     _setLED_Initialization:	
 12551                           
 12552                           ;incstack = 0
 12553                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12554                           ;setLED_Initialization@led stored from wreg
 12555  1BF6  0020               	movlb	0	; select bank0
 12556  1BF7  00A3               	movwf	setLED_Initialization@led
 12557                           
 12558                           ;LED_B1.c: 64: LedPointSelect(led);
 12559  1BF8  0823               	movf	setLED_Initialization@led,w
 12560  1BF9  319D  25E4  319B   	fcall	_LedPointSelect
 12561                           
 12562                           ;LED_B1.c: 65: LED->Enable = 1;
 12563  1BFC  0870               	movf	_LED,w
 12564  1BFD  0086               	movwf	6
 12565  1BFE  0871               	movf	_LED+1,w
 12566  1BFF  0087               	movwf	7
 12567  1C00  1401               	bsf	1,0
 12568                           
 12569                           ;LED_B1.c: 66: setLED(led, 0);
 12570  1C01  0020               	movlb	0	; select bank0
 12571  1C02  01A1               	clrf	setLED@command
 12572  1C03  0823               	movf	setLED_Initialization@led,w
 12573  1C04  3196  2672         	fcall	_setLED
 12574  1C06  0008               	return
 12575  1C07                     __end_of_setLED_Initialization:	
 12576                           
 12577                           	psect	text74
 12578  1E7A                     __ptext74:	
 12579 ;; *************** function _Flash_Memory_Main *****************
 12580 ;; Defined at:
 12581 ;;		line 790 in file "../src/MCU_B1.c"
 12582 ;; Parameters:    Size  Location     Type
 12583 ;;		None
 12584 ;; Auto vars:     Size  Location     Type
 12585 ;;		None
 12586 ;; Return value:  Size  Location     Type
 12587 ;;		None               void
 12588 ;; Registers used:
 12589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12590 ;; Tracked objects:
 12591 ;;		On entry : 0/0
 12592 ;;		On exit  : 0/0
 12593 ;;		Unchanged: 0/0
 12594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12599 ;;Total ram usage:        0 bytes
 12600 ;; Hardware stack levels used:    1
 12601 ;; Hardware stack levels required when called:    8
 12602 ;; This function calls:
 12603 ;;		_Flash_Memory_Modify
 12604 ;; This function is called by:
 12605 ;;		_main
 12606 ;; This function uses a non-reentrant model
 12607 ;;
 12608                           
 12609                           
 12610                           ;psect for function _Flash_Memory_Main
 12611  1E7A                     _Flash_Memory_Main:	
 12612                           
 12613                           ;MCU_B1.c: 791: if (Memory.GO == 1) {
 12614                           
 12615                           ;incstack = 0
 12616                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12617  1E7A  0024               	movlb	4	; select bank4
 12618  1E7B  1CC4               	btfss	(_Memory^(0+512)+36),1
 12619  1E7C  0008               	return
 12620                           
 12621                           ;MCU_B1.c: 792: if (Memory.Modify == 1) {
 12622  1E7D  1C44               	btfss	(_Memory^(0+512)+36),0
 12623  1E7E  2E97               	goto	l1347
 12624                           
 12625                           ;MCU_B1.c: 793: Memory.Time++;
 12626  1E7F  3001               	movlw	1
 12627  1E80  07C2               	addwf	(_Memory^(0+512)+34),f
 12628  1E81  3000               	movlw	0
 12629  1E82  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12630                           
 12631                           ;MCU_B1.c: 794: if (Memory.Time == 25)
 12632  1E83  3022               	movlw	34
 12633  1E84  3E20               	addlw	_Memory& (0+255)
 12634  1E85  0086               	movwf	6
 12635  1E86  3002               	movlw	2	; select bank4/5
 12636  1E87  0087               	movwf	7
 12637  1E88  3F40               	moviw [0]fsr1
 12638  1E89  3A19               	xorlw	25
 12639  1E8A  1D03               	skipz
 12640  1E8B  2E8E               	goto	u11085
 12641  1E8C  3F41               	moviw [1]fsr1
 12642  1E8D  3A00               	xorlw	0
 12643  1E8E                     u11085:	
 12644  1E8E  1D03               	skipz
 12645  1E8F  0008               	return
 12646                           
 12647                           ;MCU_B1.c: 795: {
 12648                           ;MCU_B1.c: 796: Memory.Time = 0;
 12649  1E90  01C2               	clrf	(_Memory^(0+512)+34)
 12650  1E91  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12651                           
 12652                           ;MCU_B1.c: 797: Memory.Modify = 0;
 12653  1E92  1044               	bcf	(_Memory^(0+512)+36),0
 12654                           
 12655                           ;MCU_B1.c: 798: Memory.GO = 0;
 12656  1E93  10C4               	bcf	(_Memory^(0+512)+36),1
 12657                           
 12658                           ;MCU_B1.c: 799: Flash_Memory_Modify();
 12659  1E94  3192  22C4         	fcall	_Flash_Memory_Modify
 12660                           
 12661                           ;MCU_B1.c: 800: }
 12662                           ;MCU_B1.c: 801: } else {
 12663  1E96  0008               	return
 12664  1E97                     l1347:	
 12665                           
 12666                           ;MCU_B1.c: 802: Memory.GO = 0;
 12667  1E97  10C4               	bcf	(_Memory^(0+512)+36),1
 12668  1E98  0008               	return
 12669  1E99                     __end_of_Flash_Memory_Main:	
 12670                           
 12671                           	psect	text75
 12672  12C4                     __ptext75:	
 12673 ;; *************** function _Flash_Memory_Modify *****************
 12674 ;; Defined at:
 12675 ;;		line 859 in file "../src/MCU_B1.c"
 12676 ;; Parameters:    Size  Location     Type
 12677 ;;		None
 12678 ;; Auto vars:     Size  Location     Type
 12679 ;;  i               1    5[BANK0 ] unsigned char 
 12680 ;; Return value:  Size  Location     Type
 12681 ;;		None               void
 12682 ;; Registers used:
 12683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12684 ;; Tracked objects:
 12685 ;;		On entry : 0/0
 12686 ;;		On exit  : 0/0
 12687 ;;		Unchanged: 0/0
 12688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12692 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12693 ;;Total ram usage:        2 bytes
 12694 ;; Hardware stack levels used:    1
 12695 ;; Hardware stack levels required when called:    7
 12696 ;; This function calls:
 12697 ;;		_Flash_Memory_Erasing
 12698 ;;		_Flash_Memory_Read
 12699 ;;		_Flash_Memory_Write
 12700 ;; This function is called by:
 12701 ;;		_Flash_Memory_Main
 12702 ;; This function uses a non-reentrant model
 12703 ;;
 12704                           
 12705                           
 12706                           ;psect for function _Flash_Memory_Modify
 12707  12C4                     _Flash_Memory_Modify:	
 12708                           
 12709                           ;MCU_B1.c: 860: char i = 0;
 12710                           
 12711                           ;incstack = 0
 12712                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12713  12C4  0020               	movlb	0	; select bank0
 12714  12C5  01A5               	clrf	Flash_Memory_Modify@i
 12715                           
 12716                           ;MCU_B1.c: 861: for (i = 0; i < 32; i++) {
 12717  12C6  01A5               	clrf	Flash_Memory_Modify@i
 12718  12C7  3020               	movlw	32
 12719  12C8  0225               	subwf	Flash_Memory_Modify@i,w
 12720  12C9  1803               	btfsc	3,0
 12721  12CA  2AE0               	goto	l9830
 12722  12CB                     l9824:	
 12723                           
 12724                           ;MCU_B1.c: 862: Memory.Data[i] = Flash_Memory_Read(i);
 12725  12CB  0825               	movf	Flash_Memory_Modify@i,w
 12726  12CC  319D  2592  3192   	fcall	_Flash_Memory_Read
 12727  12CF  0020               	movlb	0	; select bank0
 12728  12D0  00A4               	movwf	??_Flash_Memory_Modify
 12729  12D1  0825               	movf	Flash_Memory_Modify@i,w
 12730  12D2  3E20               	addlw	_Memory& (0+255)
 12731  12D3  0086               	movwf	6
 12732  12D4  3002               	movlw	2	; select bank4/5
 12733  12D5  0087               	movwf	7
 12734  12D6  0824               	movf	??_Flash_Memory_Modify,w
 12735  12D7  0081               	movwf	1
 12736  12D8  3001               	movlw	1
 12737  12D9  00A4               	movwf	??_Flash_Memory_Modify
 12738  12DA  0824               	movf	??_Flash_Memory_Modify,w
 12739  12DB  07A5               	addwf	Flash_Memory_Modify@i,f
 12740  12DC  3020               	movlw	32
 12741  12DD  0225               	subwf	Flash_Memory_Modify@i,w
 12742  12DE  1C03               	skipc
 12743  12DF  2ACB               	goto	l9824
 12744  12E0                     l9830:	
 12745                           
 12746                           ;MCU_B1.c: 863: }
 12747                           ;MCU_B1.c: 864: Memory.Data[0]=product->Data[12];
 12748  12E0  086E               	movf	_product,w
 12749  12E1  0086               	movwf	6
 12750  12E2  3002               	movlw	2	; select bank4/5
 12751  12E3  0087               	movwf	7
 12752  12E4  3002               	movlw	2	; select bank4/5
 12753  12E5  3F4C               	moviw [12]fsr1
 12754  12E6  0024               	movlb	4	; select bank4
 12755  12E7  00A0               	movwf	_Memory^(0+512)
 12756                           
 12757                           ;MCU_B1.c: 865: Memory.Data[1]=product->Data[13];
 12758  12E8  0020               	movlb	0	; select bank0
 12759  12E9  086E               	movf	_product,w
 12760  12EA  0086               	movwf	6
 12761  12EB  3002               	movlw	2	; select bank4/5
 12762  12EC  0087               	movwf	7
 12763  12ED  3002               	movlw	2	; select bank4/5
 12764  12EE  3F4D               	moviw [13]fsr1
 12765  12EF  0024               	movlb	4	; select bank4
 12766  12F0  00A1               	movwf	(_Memory^(0+512)+1)
 12767                           
 12768                           ;MCU_B1.c: 866: Memory.Data[2]=product->Data[14];
 12769  12F1  0020               	movlb	0	; select bank0
 12770  12F2  086E               	movf	_product,w
 12771  12F3  0086               	movwf	6
 12772  12F4  3002               	movlw	2	; select bank4/5
 12773  12F5  0087               	movwf	7
 12774  12F6  3002               	movlw	2	; select bank4/5
 12775  12F7  3F4E               	moviw [14]fsr1
 12776  12F8  0024               	movlb	4	; select bank4
 12777  12F9  00A2               	movwf	(_Memory^(0+512)+2)
 12778                           
 12779                           ;MCU_B1.c: 872: if (Memory.LoopSave == 1) {
 12780  12FA  1D44               	btfss	(_Memory^(0+512)+36),2
 12781  12FB  2B00               	goto	l1369
 12782                           
 12783                           ;MCU_B1.c: 873: Memory.LoopSave = 0;
 12784  12FC  1144               	bcf	(_Memory^(0+512)+36),2
 12785                           
 12786                           ;MCU_B1.c: 874: myMain.FirstOpen = 0;
 12787  12FD  0021               	movlb	1	; select bank1
 12788  12FE  12A0               	bcf	_myMain^(0+128),5
 12789                           
 12790                           ;MCU_B1.c: 875: myMain.First = 0;
 12791  12FF  13A0               	bcf	_myMain^(0+128),7
 12792  1300                     l1369:	
 12793                           
 12794                           ;MCU_B1.c: 877: }
 12795                           ;MCU_B1.c: 878: GIE = 0;
 12796  1300  138B               	bcf	11,7	;volatile
 12797                           
 12798                           ;MCU_B1.c: 879: Flash_Memory_Erasing();
 12799  1301  319A  22E5  3192   	fcall	_Flash_Memory_Erasing
 12800                           
 12801                           ;MCU_B1.c: 880: Flash_Memory_Write();
 12802  1304  3190  20C6         	fcall	_Flash_Memory_Write
 12803                           
 12804                           ;MCU_B1.c: 881: GIE = 1;
 12805  1306  178B               	bsf	11,7	;volatile
 12806  1307  0008               	return
 12807  1308                     __end_of_Flash_Memory_Modify:	
 12808                           
 12809                           	psect	text76
 12810  1AE5                     __ptext76:	
 12811 ;; *************** function _Flash_Memory_Erasing *****************
 12812 ;; Defined at:
 12813 ;;		line 848 in file "../src/MCU_B1.c"
 12814 ;; Parameters:    Size  Location     Type
 12815 ;;		None
 12816 ;; Auto vars:     Size  Location     Type
 12817 ;;		None
 12818 ;; Return value:  Size  Location     Type
 12819 ;;		None               void
 12820 ;; Registers used:
 12821 ;;		wreg, status,2, status,0, pclath, cstack
 12822 ;; Tracked objects:
 12823 ;;		On entry : 0/0
 12824 ;;		On exit  : 0/0
 12825 ;;		Unchanged: 0/0
 12826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12831 ;;Total ram usage:        0 bytes
 12832 ;; Hardware stack levels used:    1
 12833 ;; Hardware stack levels required when called:    6
 12834 ;; This function calls:
 12835 ;;		_Flash_Memory_Unlock
 12836 ;; This function is called by:
 12837 ;;		_Flash_Memory_Modify
 12838 ;; This function uses a non-reentrant model
 12839 ;;
 12840                           
 12841                           
 12842                           ;psect for function _Flash_Memory_Erasing
 12843  1AE5                     _Flash_Memory_Erasing:	
 12844                           
 12845                           ;MCU_B1.c: 849: CFGS = 0;
 12846                           
 12847                           ;incstack = 0
 12848                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12849  1AE5  0023               	movlb	3	; select bank3
 12850  1AE6  1315               	bcf	21,6	;volatile
 12851                           
 12852                           ;MCU_B1.c: 850: PMADRH = 0x30;
 12853  1AE7  3030               	movlw	48
 12854  1AE8  0092               	movwf	18	;volatile
 12855                           
 12856                           ;MCU_B1.c: 851: PMADRL = 0x00;
 12857  1AE9  0191               	clrf	17	;volatile
 12858                           
 12859                           ;MCU_B1.c: 852: FREE = 1;
 12860  1AEA  1615               	bsf	21,4	;volatile
 12861                           
 12862                           ;MCU_B1.c: 853: WREN = 1;
 12863  1AEB  1515               	bsf	21,2	;volatile
 12864                           
 12865                           ;MCU_B1.c: 854: Flash_Memory_Unlock();
 12866  1AEC  319A  22A6         	fcall	_Flash_Memory_Unlock
 12867                           
 12868                           ;MCU_B1.c: 855: WREN = 0;
 12869  1AEE  0023               	movlb	3	; select bank3
 12870  1AEF  1115               	bcf	21,2	;volatile
 12871  1AF0  0008               	return
 12872  1AF1                     __end_of_Flash_Memory_Erasing:	
 12873                           
 12874                           	psect	text77
 12875  068C                     __ptext77:	
 12876 ;; *************** function _Flash_Memory_Initialization *****************
 12877 ;; Defined at:
 12878 ;;		line 749 in file "../src/MCU_B1.c"
 12879 ;; Parameters:    Size  Location     Type
 12880 ;;		None
 12881 ;; Auto vars:     Size  Location     Type
 12882 ;;  i               1   62[BANK0 ] unsigned char 
 12883 ;; Return value:  Size  Location     Type
 12884 ;;		None               void
 12885 ;; Registers used:
 12886 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12887 ;; Tracked objects:
 12888 ;;		On entry : 0/0
 12889 ;;		On exit  : 0/0
 12890 ;;		Unchanged: 0/0
 12891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12894 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12895 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12896 ;;Total ram usage:        2 bytes
 12897 ;; Hardware stack levels used:    1
 12898 ;; Hardware stack levels required when called:    8
 12899 ;; This function calls:
 12900 ;;		_Flash_Memory_Read
 12901 ;;		_Flash_Memory_Write
 12902 ;;		_setPercentValue
 12903 ;; This function is called by:
 12904 ;;		_main
 12905 ;; This function uses a non-reentrant model
 12906 ;;
 12907                           
 12908                           
 12909                           ;psect for function _Flash_Memory_Initialization
 12910  068C                     _Flash_Memory_Initialization:	
 12911                           
 12912                           ;MCU_B1.c: 750: char i = 0;
 12913                           
 12914                           ;incstack = 0
 12915                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12916  068C  0020               	movlb	0	; select bank0
 12917  068D  01DE               	clrf	Flash_Memory_Initialization@i
 12918                           
 12919                           ;MCU_B1.c: 751: if (Flash_Memory_Read(31) == 0xaa) {
 12920  068E  301F               	movlw	31
 12921  068F  319D  2592  3186   	fcall	_Flash_Memory_Read
 12922  0692  3AAA               	xorlw	170
 12923  0693  1D03               	skipz
 12924  0694  2EFE               	goto	l10258
 12925                           
 12926                           ;MCU_B1.c: 752: product->Data[12] = Flash_Memory_Read(0);
 12927  0695  3000               	movlw	0
 12928  0696  319D  2592  3186   	fcall	_Flash_Memory_Read
 12929  0699  0020               	movlb	0	; select bank0
 12930  069A  00DD               	movwf	??_Flash_Memory_Initialization
 12931  069B  086E               	movf	_product,w
 12932  069C  3E0C               	addlw	12
 12933  069D  0086               	movwf	6
 12934  069E  3002               	movlw	2	; select bank4/5
 12935  069F  0087               	movwf	7
 12936  06A0  085D               	movf	??_Flash_Memory_Initialization,w
 12937  06A1  0081               	movwf	1
 12938                           
 12939                           ;MCU_B1.c: 753: product->Data[13] = Flash_Memory_Read(1);
 12940  06A2  3001               	movlw	1
 12941  06A3  319D  2592  3186   	fcall	_Flash_Memory_Read
 12942  06A6  0020               	movlb	0	; select bank0
 12943  06A7  00DD               	movwf	??_Flash_Memory_Initialization
 12944  06A8  086E               	movf	_product,w
 12945  06A9  3E0D               	addlw	13
 12946  06AA  0086               	movwf	6
 12947  06AB  3002               	movlw	2	; select bank4/5
 12948  06AC  0087               	movwf	7
 12949  06AD  085D               	movf	??_Flash_Memory_Initialization,w
 12950  06AE  0081               	movwf	1
 12951                           
 12952                           ;MCU_B1.c: 754: product->Data[14] = Flash_Memory_Read(2);
 12953  06AF  3002               	movlw	2
 12954  06B0  319D  2592  3186   	fcall	_Flash_Memory_Read
 12955  06B3  0020               	movlb	0	; select bank0
 12956  06B4  00DD               	movwf	??_Flash_Memory_Initialization
 12957  06B5  086E               	movf	_product,w
 12958  06B6  3E0E               	addlw	14
 12959  06B7  0086               	movwf	6
 12960  06B8  3002               	movlw	2	; select bank4/5
 12961  06B9  0087               	movwf	7
 12962  06BA  085D               	movf	??_Flash_Memory_Initialization,w
 12963  06BB  0081               	movwf	1
 12964                           
 12965                           ;MCU_B1.c: 760: i = setPercentValue(((char)((100-60)*0.8)));
 12966  06BC  3020               	movlw	32
 12967  06BD  3193  234C  3186   	fcall	_setPercentValue
 12968  06C0  0020               	movlb	0	; select bank0
 12969  06C1  00DD               	movwf	??_Flash_Memory_Initialization
 12970  06C2  085D               	movf	??_Flash_Memory_Initialization,w
 12971  06C3  00DE               	movwf	Flash_Memory_Initialization@i
 12972                           
 12973                           ;MCU_B1.c: 761: product->Data[21] = i;
 12974  06C4  085E               	movf	Flash_Memory_Initialization@i,w
 12975  06C5  00DD               	movwf	??_Flash_Memory_Initialization
 12976  06C6  086E               	movf	_product,w
 12977  06C7  3E15               	addlw	21
 12978  06C8  0086               	movwf	6
 12979  06C9  3002               	movlw	2	; select bank4/5
 12980  06CA  0087               	movwf	7
 12981  06CB  085D               	movf	??_Flash_Memory_Initialization,w
 12982  06CC  0081               	movwf	1
 12983                           
 12984                           ;MCU_B1.c: 762: product->Data[22] = i;
 12985  06CD  085E               	movf	Flash_Memory_Initialization@i,w
 12986  06CE  00DD               	movwf	??_Flash_Memory_Initialization
 12987  06CF  086E               	movf	_product,w
 12988  06D0  3E16               	addlw	22
 12989  06D1  0086               	movwf	6
 12990  06D2  3002               	movlw	2	; select bank4/5
 12991  06D3  0087               	movwf	7
 12992  06D4  085D               	movf	??_Flash_Memory_Initialization,w
 12993  06D5  0081               	movwf	1
 12994                           
 12995                           ;MCU_B1.c: 763: product->Data[23] = i;
 12996  06D6  085E               	movf	Flash_Memory_Initialization@i,w
 12997  06D7  00DD               	movwf	??_Flash_Memory_Initialization
 12998  06D8  086E               	movf	_product,w
 12999  06D9  3E17               	addlw	23
 13000  06DA  0086               	movwf	6
 13001  06DB  3002               	movlw	2	; select bank4/5
 13002  06DC  0087               	movwf	7
 13003  06DD  085D               	movf	??_Flash_Memory_Initialization,w
 13004  06DE  0081               	movwf	1
 13005                           
 13006                           ;MCU_B1.c: 765: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 13007  06DF  086E               	movf	_product,w
 13008  06E0  3E0C               	addlw	12
 13009  06E1  0086               	movwf	6
 13010  06E2  3002               	movlw	2	; select bank4/5
 13011  06E3  0087               	movwf	7
 13012  06E4  0801               	movf	1,w
 13013  06E5  3AFF               	xorlw	255
 13014  06E6  1D03               	skipz
 13015  06E7  0008               	return
 13016  06E8  086E               	movf	_product,w
 13017  06E9  3E0D               	addlw	13
 13018  06EA  0086               	movwf	6
 13019  06EB  3002               	movlw	2	; select bank4/5
 13020  06EC  0087               	movwf	7
 13021  06ED  0801               	movf	1,w
 13022  06EE  3AFF               	xorlw	255
 13023  06EF  1D03               	skipz
 13024  06F0  0008               	return
 13025  06F1  086E               	movf	_product,w
 13026  06F2  3E0E               	addlw	14
 13027  06F3  0086               	movwf	6
 13028  06F4  3002               	movlw	2	; select bank4/5
 13029  06F5  0087               	movwf	7
 13030  06F6  0801               	movf	1,w
 13031  06F7  3AFF               	xorlw	255
 13032  06F8  1D03               	skipz
 13033  06F9  0008               	return
 13034                           
 13035                           ;MCU_B1.c: 766: myMain.FirstOpen = 1;
 13036  06FA  0021               	movlb	1	; select bank1
 13037  06FB  16A0               	bsf	_myMain^(0+128),5
 13038                           
 13039                           ;MCU_B1.c: 767: myMain.First = 1;
 13040  06FC  17A0               	bsf	_myMain^(0+128),7
 13041                           
 13042                           ;MCU_B1.c: 768: }
 13043                           ;MCU_B1.c: 769: } else {
 13044  06FD  0008               	return
 13045  06FE                     l10258:	
 13046                           
 13047                           ;MCU_B1.c: 770: i = setPercentValue(((char)((100-60)*0.8)));
 13048  06FE  3020               	movlw	32
 13049  06FF  3193  234C  3186   	fcall	_setPercentValue
 13050  0702  0020               	movlb	0	; select bank0
 13051  0703  00DD               	movwf	??_Flash_Memory_Initialization
 13052  0704  085D               	movf	??_Flash_Memory_Initialization,w
 13053  0705  00DE               	movwf	Flash_Memory_Initialization@i
 13054                           
 13055                           ;MCU_B1.c: 771: Memory.Data[0]=0xff;
 13056  0706  30FF               	movlw	255
 13057  0707  00DD               	movwf	??_Flash_Memory_Initialization
 13058  0708  085D               	movf	??_Flash_Memory_Initialization,w
 13059  0709  0024               	movlb	4	; select bank4
 13060  070A  00A0               	movwf	_Memory^(0+512)
 13061                           
 13062                           ;MCU_B1.c: 772: Memory.Data[1]=0xff;
 13063  070B  30FF               	movlw	255
 13064  070C  0020               	movlb	0	; select bank0
 13065  070D  00DD               	movwf	??_Flash_Memory_Initialization
 13066  070E  085D               	movf	??_Flash_Memory_Initialization,w
 13067  070F  0024               	movlb	4	; select bank4
 13068  0710  00A1               	movwf	(_Memory^(0+512)+1)
 13069                           
 13070                           ;MCU_B1.c: 773: Memory.Data[2]=0xff;
 13071  0711  30FF               	movlw	255
 13072  0712  0020               	movlb	0	; select bank0
 13073  0713  00DD               	movwf	??_Flash_Memory_Initialization
 13074  0714  085D               	movf	??_Flash_Memory_Initialization,w
 13075  0715  0024               	movlb	4	; select bank4
 13076  0716  00A2               	movwf	(_Memory^(0+512)+2)
 13077                           
 13078                           ;MCU_B1.c: 774: Memory.Data[3]=0xff;
 13079  0717  30FF               	movlw	255
 13080  0718  0020               	movlb	0	; select bank0
 13081  0719  00DD               	movwf	??_Flash_Memory_Initialization
 13082  071A  085D               	movf	??_Flash_Memory_Initialization,w
 13083  071B  0024               	movlb	4	; select bank4
 13084  071C  00A3               	movwf	(_Memory^(0+512)+3)
 13085                           
 13086                           ;MCU_B1.c: 775: Memory.Data[4]=0xff;
 13087  071D  30FF               	movlw	255
 13088  071E  0020               	movlb	0	; select bank0
 13089  071F  00DD               	movwf	??_Flash_Memory_Initialization
 13090  0720  085D               	movf	??_Flash_Memory_Initialization,w
 13091  0721  0024               	movlb	4	; select bank4
 13092  0722  00A4               	movwf	(_Memory^(0+512)+4)
 13093                           
 13094                           ;MCU_B1.c: 776: Memory.Data[5]=0xff;
 13095  0723  30FF               	movlw	255
 13096  0724  0020               	movlb	0	; select bank0
 13097  0725  00DD               	movwf	??_Flash_Memory_Initialization
 13098  0726  085D               	movf	??_Flash_Memory_Initialization,w
 13099  0727  0024               	movlb	4	; select bank4
 13100  0728  00A5               	movwf	(_Memory^(0+512)+5)
 13101                           
 13102                           ;MCU_B1.c: 777: Memory.Data[31]=0xaa;
 13103  0729  30AA               	movlw	170
 13104  072A  0020               	movlb	0	; select bank0
 13105  072B  00DD               	movwf	??_Flash_Memory_Initialization
 13106  072C  085D               	movf	??_Flash_Memory_Initialization,w
 13107  072D  0024               	movlb	4	; select bank4
 13108  072E  00BF               	movwf	(_Memory^(0+512)+31)
 13109                           
 13110                           ;MCU_B1.c: 778: product->Data[21] = i;
 13111  072F  0020               	movlb	0	; select bank0
 13112  0730  085E               	movf	Flash_Memory_Initialization@i,w
 13113  0731  00DD               	movwf	??_Flash_Memory_Initialization
 13114  0732  086E               	movf	_product,w
 13115  0733  3E15               	addlw	21
 13116  0734  0086               	movwf	6
 13117  0735  3002               	movlw	2	; select bank4/5
 13118  0736  0087               	movwf	7
 13119  0737  085D               	movf	??_Flash_Memory_Initialization,w
 13120  0738  0081               	movwf	1
 13121                           
 13122                           ;MCU_B1.c: 779: product->Data[22] = i;
 13123  0739  085E               	movf	Flash_Memory_Initialization@i,w
 13124  073A  00DD               	movwf	??_Flash_Memory_Initialization
 13125  073B  086E               	movf	_product,w
 13126  073C  3E16               	addlw	22
 13127  073D  0086               	movwf	6
 13128  073E  3002               	movlw	2	; select bank4/5
 13129  073F  0087               	movwf	7
 13130  0740  085D               	movf	??_Flash_Memory_Initialization,w
 13131  0741  0081               	movwf	1
 13132                           
 13133                           ;MCU_B1.c: 780: product->Data[23] = i;
 13134  0742  085E               	movf	Flash_Memory_Initialization@i,w
 13135  0743  00DD               	movwf	??_Flash_Memory_Initialization
 13136  0744  086E               	movf	_product,w
 13137  0745  3E17               	addlw	23
 13138  0746  0086               	movwf	6
 13139  0747  3002               	movlw	2	; select bank4/5
 13140  0748  0087               	movwf	7
 13141  0749  085D               	movf	??_Flash_Memory_Initialization,w
 13142  074A  0081               	movwf	1
 13143                           
 13144                           ;MCU_B1.c: 781: GIE = 0;
 13145  074B  138B               	bcf	11,7	;volatile
 13146                           
 13147                           ;MCU_B1.c: 782: Flash_Memory_Write();
 13148  074C  3190  20C6         	fcall	_Flash_Memory_Write
 13149                           
 13150                           ;MCU_B1.c: 783: GIE = 1;
 13151  074E  178B               	bsf	11,7	;volatile
 13152                           
 13153                           ;MCU_B1.c: 784: myMain.FirstOpen = 1;
 13154  074F  0021               	movlb	1	; select bank1
 13155  0750  16A0               	bsf	_myMain^(0+128),5
 13156                           
 13157                           ;MCU_B1.c: 785: myMain.First = 1;
 13158  0751  17A0               	bsf	_myMain^(0+128),7
 13159  0752  0008               	return
 13160  0753                     __end_of_Flash_Memory_Initialization:	
 13161                           
 13162                           	psect	text78
 13163  10C6                     __ptext78:	
 13164 ;; *************** function _Flash_Memory_Write *****************
 13165 ;; Defined at:
 13166 ;;		line 829 in file "../src/MCU_B1.c"
 13167 ;; Parameters:    Size  Location     Type
 13168 ;;		None
 13169 ;; Auto vars:     Size  Location     Type
 13170 ;;  i               1    1[BANK0 ] unsigned char 
 13171 ;; Return value:  Size  Location     Type
 13172 ;;		None               void
 13173 ;; Registers used:
 13174 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13175 ;; Tracked objects:
 13176 ;;		On entry : 0/0
 13177 ;;		On exit  : 0/0
 13178 ;;		Unchanged: 0/0
 13179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13183 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13184 ;;Total ram usage:        2 bytes
 13185 ;; Hardware stack levels used:    1
 13186 ;; Hardware stack levels required when called:    6
 13187 ;; This function calls:
 13188 ;;		_Flash_Memory_Unlock
 13189 ;; This function is called by:
 13190 ;;		_Flash_Memory_Initialization
 13191 ;;		_Flash_Memory_Modify
 13192 ;; This function uses a non-reentrant model
 13193 ;;
 13194                           
 13195                           
 13196                           ;psect for function _Flash_Memory_Write
 13197  10C6                     _Flash_Memory_Write:	
 13198                           
 13199                           ;MCU_B1.c: 830: char i = 0;
 13200                           
 13201                           ;incstack = 0
 13202                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13203  10C6  0020               	movlb	0	; select bank0
 13204  10C7  01A1               	clrf	Flash_Memory_Write@i
 13205                           
 13206                           ;MCU_B1.c: 831: CFGS = 0;
 13207  10C8  0023               	movlb	3	; select bank3
 13208  10C9  1315               	bcf	21,6	;volatile
 13209                           
 13210                           ;MCU_B1.c: 832: PMADRH = 0x30;
 13211  10CA  3030               	movlw	48
 13212  10CB  0092               	movwf	18	;volatile
 13213                           
 13214                           ;MCU_B1.c: 833: PMDATH = 0;
 13215  10CC  0194               	clrf	20	;volatile
 13216                           
 13217                           ;MCU_B1.c: 834: FREE = 0;
 13218  10CD  1215               	bcf	21,4	;volatile
 13219                           
 13220                           ;MCU_B1.c: 835: LWLO = 1;
 13221  10CE  1695               	bsf	21,5	;volatile
 13222                           
 13223                           ;MCU_B1.c: 836: WREN = 1;
 13224  10CF  1515               	bsf	21,2	;volatile
 13225                           
 13226                           ;MCU_B1.c: 837: for (i = 0; i < 32; i++) {
 13227  10D0  0020               	movlb	0	; select bank0
 13228  10D1  01A1               	clrf	Flash_Memory_Write@i
 13229  10D2  3020               	movlw	32
 13230  10D3  0221               	subwf	Flash_Memory_Write@i,w
 13231  10D4  1803               	btfsc	3,0
 13232  10D5  28EE               	goto	l1360
 13233  10D6                     l9372:	
 13234                           
 13235                           ;MCU_B1.c: 838: PMADRL = i;
 13236  10D6  0821               	movf	Flash_Memory_Write@i,w
 13237  10D7  0023               	movlb	3	; select bank3
 13238  10D8  0091               	movwf	17	;volatile
 13239                           
 13240                           ;MCU_B1.c: 839: PMDATL = Memory.Data[i];
 13241  10D9  0020               	movlb	0	; select bank0
 13242  10DA  0821               	movf	Flash_Memory_Write@i,w
 13243  10DB  3E20               	addlw	_Memory& (0+255)
 13244  10DC  0086               	movwf	6
 13245  10DD  3002               	movlw	2	; select bank4/5
 13246  10DE  0087               	movwf	7
 13247  10DF  0801               	movf	1,w
 13248  10E0  0023               	movlb	3	; select bank3
 13249  10E1  0093               	movwf	19	;volatile
 13250                           
 13251                           ;MCU_B1.c: 840: Flash_Memory_Unlock();
 13252  10E2  319A  22A6  3190   	fcall	_Flash_Memory_Unlock
 13253  10E5  3001               	movlw	1
 13254  10E6  0020               	movlb	0	; select bank0
 13255  10E7  00A0               	movwf	??_Flash_Memory_Write
 13256  10E8  0820               	movf	??_Flash_Memory_Write,w
 13257  10E9  07A1               	addwf	Flash_Memory_Write@i,f
 13258  10EA  3020               	movlw	32
 13259  10EB  0221               	subwf	Flash_Memory_Write@i,w
 13260  10EC  1C03               	skipc
 13261  10ED  28D6               	goto	l9372
 13262  10EE                     l1360:	
 13263                           
 13264                           ;MCU_B1.c: 841: }
 13265                           ;MCU_B1.c: 842: LWLO = 0;
 13266  10EE  0023               	movlb	3	; select bank3
 13267  10EF  1295               	bcf	21,5	;volatile
 13268                           
 13269                           ;MCU_B1.c: 843: Flash_Memory_Unlock();
 13270  10F0  319A  22A6         	fcall	_Flash_Memory_Unlock
 13271                           
 13272                           ;MCU_B1.c: 844: WREN = 0;
 13273  10F2  0023               	movlb	3	; select bank3
 13274  10F3  1115               	bcf	21,2	;volatile
 13275  10F4  0008               	return
 13276  10F5                     __end_of_Flash_Memory_Write:	
 13277                           
 13278                           	psect	text79
 13279  1AA6                     __ptext79:	
 13280 ;; *************** function _Flash_Memory_Unlock *****************
 13281 ;; Defined at:
 13282 ;;		line 808 in file "../src/MCU_B1.c"
 13283 ;; Parameters:    Size  Location     Type
 13284 ;;		None
 13285 ;; Auto vars:     Size  Location     Type
 13286 ;;		None
 13287 ;; Return value:  Size  Location     Type
 13288 ;;		None               void
 13289 ;; Registers used:
 13290 ;;		wreg
 13291 ;; Tracked objects:
 13292 ;;		On entry : 0/0
 13293 ;;		On exit  : 0/0
 13294 ;;		Unchanged: 0/0
 13295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;Total ram usage:        0 bytes
 13301 ;; Hardware stack levels used:    1
 13302 ;; Hardware stack levels required when called:    5
 13303 ;; This function calls:
 13304 ;;		Nothing
 13305 ;; This function is called by:
 13306 ;;		_Flash_Memory_Write
 13307 ;;		_Flash_Memory_Erasing
 13308 ;; This function uses a non-reentrant model
 13309 ;;
 13310                           
 13311                           
 13312                           ;psect for function _Flash_Memory_Unlock
 13313  1AA6                     _Flash_Memory_Unlock:	
 13314                           
 13315                           ;MCU_B1.c: 809: PMCON2 = 0x55;
 13316                           
 13317                           ;incstack = 0
 13318                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13319  1AA6  3055               	movlw	85
 13320  1AA7  0023               	movlb	3	; select bank3
 13321  1AA8  0096               	movwf	22	;volatile
 13322                           
 13323                           ;MCU_B1.c: 810: PMCON2 = 0xaa;
 13324  1AA9  30AA               	movlw	170
 13325  1AAA  0096               	movwf	22	;volatile
 13326                           
 13327                           ;MCU_B1.c: 811: WR = 1;
 13328  1AAB  1495               	bsf	21,1	;volatile
 13329                           
 13330                           ;MCU_B1.c: 812: __nop();
 13331  1AAC  0000               	nop
 13332                           
 13333                           ;MCU_B1.c: 813: __nop();
 13334  1AAD  0000               	nop
 13335  1AAE  0008               	return
 13336  1AAF                     __end_of_Flash_Memory_Unlock:	
 13337                           
 13338                           	psect	text80
 13339  1D92                     __ptext80:	
 13340 ;; *************** function _Flash_Memory_Read *****************
 13341 ;; Defined at:
 13342 ;;		line 817 in file "../src/MCU_B1.c"
 13343 ;; Parameters:    Size  Location     Type
 13344 ;;  address         1    wreg     unsigned char 
 13345 ;; Auto vars:     Size  Location     Type
 13346 ;;  address         1    2[BANK0 ] unsigned char 
 13347 ;;  ret             1    3[BANK0 ] unsigned char 
 13348 ;;  i               1    1[BANK0 ] unsigned char 
 13349 ;; Return value:  Size  Location     Type
 13350 ;;                  1    wreg      unsigned char 
 13351 ;; Registers used:
 13352 ;;		wreg, status,2
 13353 ;; Tracked objects:
 13354 ;;		On entry : 0/0
 13355 ;;		On exit  : 0/0
 13356 ;;		Unchanged: 0/0
 13357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13359 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13360 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13361 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13362 ;;Total ram usage:        4 bytes
 13363 ;; Hardware stack levels used:    1
 13364 ;; Hardware stack levels required when called:    5
 13365 ;; This function calls:
 13366 ;;		Nothing
 13367 ;; This function is called by:
 13368 ;;		_Flash_Memory_Initialization
 13369 ;;		_Flash_Memory_Modify
 13370 ;; This function uses a non-reentrant model
 13371 ;;
 13372                           
 13373                           
 13374                           ;psect for function _Flash_Memory_Read
 13375  1D92                     _Flash_Memory_Read:	
 13376                           
 13377                           ;incstack = 0
 13378                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13379                           ;Flash_Memory_Read@address stored from wreg
 13380  1D92  0020               	movlb	0	; select bank0
 13381  1D93  00A2               	movwf	Flash_Memory_Read@address
 13382                           
 13383                           ;MCU_B1.c: 818: char i = 0, ret = 0;
 13384  1D94  01A1               	clrf	Flash_Memory_Read@i
 13385  1D95  01A3               	clrf	Flash_Memory_Read@ret
 13386                           
 13387                           ;MCU_B1.c: 819: PMADRH = 0x30;
 13388  1D96  3030               	movlw	48
 13389  1D97  0023               	movlb	3	; select bank3
 13390  1D98  0092               	movwf	18	;volatile
 13391                           
 13392                           ;MCU_B1.c: 820: PMADRL = address;
 13393  1D99  0020               	movlb	0	; select bank0
 13394  1D9A  0822               	movf	Flash_Memory_Read@address,w
 13395  1D9B  0023               	movlb	3	; select bank3
 13396  1D9C  0091               	movwf	17	;volatile
 13397                           
 13398                           ;MCU_B1.c: 821: CFGS = 0;
 13399  1D9D  1315               	bcf	21,6	;volatile
 13400                           
 13401                           ;MCU_B1.c: 822: RD = 1;
 13402  1D9E  1415               	bsf	21,0	;volatile
 13403                           
 13404                           ;MCU_B1.c: 823: i = PMDATH;
 13405  1D9F  0814               	movf	20,w	;volatile
 13406  1DA0  0020               	movlb	0	; select bank0
 13407  1DA1  00A0               	movwf	??_Flash_Memory_Read
 13408  1DA2  0820               	movf	??_Flash_Memory_Read,w
 13409  1DA3  00A1               	movwf	Flash_Memory_Read@i
 13410                           
 13411                           ;MCU_B1.c: 824: ret = PMDATL;
 13412  1DA4  0023               	movlb	3	; select bank3
 13413  1DA5  0813               	movf	19,w	;volatile
 13414  1DA6  0020               	movlb	0	; select bank0
 13415  1DA7  00A0               	movwf	??_Flash_Memory_Read
 13416  1DA8  0820               	movf	??_Flash_Memory_Read,w
 13417  1DA9  00A3               	movwf	Flash_Memory_Read@ret
 13418                           
 13419                           ;MCU_B1.c: 825: return ret;
 13420  1DAA  0823               	movf	Flash_Memory_Read@ret,w
 13421  1DAB  0008               	return
 13422  1DAC                     __end_of_Flash_Memory_Read:	
 13423                           
 13424                           	psect	text81
 13425  1AC3                     __ptext81:	
 13426 ;; *************** function _DimmerLights_Main *****************
 13427 ;; Defined at:
 13428 ;;		line 418 in file "../src/Dimmer_B1.c"
 13429 ;; Parameters:    Size  Location     Type
 13430 ;;		None
 13431 ;; Auto vars:     Size  Location     Type
 13432 ;;		None
 13433 ;; Return value:  Size  Location     Type
 13434 ;;		None               void
 13435 ;; Registers used:
 13436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13437 ;; Tracked objects:
 13438 ;;		On entry : 0/0
 13439 ;;		On exit  : 0/0
 13440 ;;		Unchanged: 0/0
 13441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13446 ;;Total ram usage:        0 bytes
 13447 ;; Hardware stack levels used:    1
 13448 ;; Hardware stack levels required when called:   11
 13449 ;; This function calls:
 13450 ;;		_DimmerLights_Close
 13451 ;;		_setDimmerLights_Main
 13452 ;; This function is called by:
 13453 ;;		_main
 13454 ;; This function uses a non-reentrant model
 13455 ;;
 13456                           
 13457                           
 13458                           ;psect for function _DimmerLights_Main
 13459  1AC3                     _DimmerLights_Main:	
 13460                           
 13461                           ;Dimmer_B1.c: 421: setDimmerLights_Main(1);
 13462                           
 13463                           ;incstack = 0
 13464                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13465  1AC3  3001               	movlw	1
 13466  1AC4  3189  21FA  319A   	fcall	_setDimmerLights_Main
 13467                           
 13468                           ;Dimmer_B1.c: 425: setDimmerLights_Main(2);
 13469  1AC7  3002               	movlw	2
 13470  1AC8  3189  21FA  319A   	fcall	_setDimmerLights_Main
 13471                           
 13472                           ;Dimmer_B1.c: 432: DimmerLights_Close();
 13473  1ACB  319D  252F         	fcall	_DimmerLights_Close
 13474  1ACD  0008               	return
 13475  1ACE                     __end_of_DimmerLights_Main:	
 13476                           
 13477                           	psect	text82
 13478  09FA                     __ptext82:	
 13479 ;; *************** function _setDimmerLights_Main *****************
 13480 ;; Defined at:
 13481 ;;		line 436 in file "../src/Dimmer_B1.c"
 13482 ;; Parameters:    Size  Location     Type
 13483 ;;  lights          1    wreg     unsigned char 
 13484 ;; Auto vars:     Size  Location     Type
 13485 ;;  lights          1   70[BANK0 ] unsigned char 
 13486 ;;  clear           1   69[BANK0 ] unsigned char 
 13487 ;; Return value:  Size  Location     Type
 13488 ;;		None               void
 13489 ;; Registers used:
 13490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13491 ;; Tracked objects:
 13492 ;;		On entry : 0/0
 13493 ;;		On exit  : 0/0
 13494 ;;		Unchanged: 0/0
 13495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13497 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13500 ;;Total ram usage:        2 bytes
 13501 ;; Hardware stack levels used:    1
 13502 ;; Hardware stack levels required when called:   10
 13503 ;; This function calls:
 13504 ;;		_DimmerLightsPointSelect
 13505 ;;		_setBuz
 13506 ;;		_setDimmerLights
 13507 ;;		_setDimmerLights_Adj
 13508 ;; This function is called by:
 13509 ;;		_DimmerLights_Main
 13510 ;; This function uses a non-reentrant model
 13511 ;;
 13512                           
 13513                           
 13514                           ;psect for function _setDimmerLights_Main
 13515  09FA                     _setDimmerLights_Main:	
 13516                           
 13517                           ;incstack = 0
 13518                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13519                           ;setDimmerLights_Main@lights stored from wreg
 13520  09FA  0020               	movlb	0	; select bank0
 13521  09FB  00E6               	movwf	setDimmerLights_Main@lights
 13522                           
 13523                           ;Dimmer_B1.c: 437: char clear = 1;
 13524  09FC  01E5               	clrf	setDimmerLights_Main@clear
 13525  09FD  0AE5               	incf	setDimmerLights_Main@clear,f
 13526                           
 13527                           ;Dimmer_B1.c: 438: DimmerLightsPointSelect(lights);
 13528  09FE  0866               	movf	setDimmerLights_Main@lights,w
 13529  09FF  319C  2460  3189   	fcall	_DimmerLightsPointSelect
 13530                           
 13531                           ;Dimmer_B1.c: 451: if (lights == 1) {
 13532  0A02  0020               	movlb	0	; select bank0
 13533  0A03  0866               	movf	setDimmerLights_Main@lights,w
 13534  0A04  3A01               	xorlw	1
 13535  0A05  1D03               	skipz
 13536  0A06  2A0E               	goto	l9694
 13537                           
 13538                           ;Dimmer_B1.c: 452: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 13539  0A07  3000               	movlw	0
 13540  0A08  0022               	movlb	2	; select bank2
 13541  0A09  1955               	btfsc	(_DimmerLights2^(0+256)+9),2
 13542  0A0A  3001               	movlw	1
 13543  0A0B  0020               	movlb	0	; select bank0
 13544  0A0C  00E5               	movwf	setDimmerLights_Main@clear
 13545                           
 13546                           ;Dimmer_B1.c: 453: } else if (lights == 2) {
 13547  0A0D  2A18               	goto	l9698
 13548  0A0E                     l9694:	
 13549  0A0E  0866               	movf	setDimmerLights_Main@lights,w
 13550  0A0F  3A02               	xorlw	2
 13551  0A10  1D03               	skipz
 13552  0A11  2A18               	goto	l9698
 13553                           
 13554                           ;Dimmer_B1.c: 454: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 13555  0A12  3000               	movlw	0
 13556  0A13  0022               	movlb	2	; select bank2
 13557  0A14  1946               	btfsc	(_DimmerLights1^(0+256)+9),2
 13558  0A15  3001               	movlw	1
 13559  0A16  0020               	movlb	0	; select bank0
 13560  0A17  00E5               	movwf	setDimmerLights_Main@clear
 13561  0A18                     l9698:	
 13562                           
 13563                           ;Dimmer_B1.c: 455: }
 13564                           ;Dimmer_B1.c: 458: if (DimmerLights->Trigger == 1) {
 13565  0A18  0874               	movf	_DimmerLights,w
 13566  0A19  3E08               	addlw	8
 13567  0A1A  0086               	movwf	6
 13568  0A1B  3001               	movlw	1	; select bank2/3
 13569  0A1C  0087               	movwf	7
 13570  0A1D  1D01               	btfss	1,2
 13571  0A1E  2A3F               	goto	l9710
 13572                           
 13573                           ;Dimmer_B1.c: 459: if (clear == 1) {
 13574  0A1F  0865               	movf	setDimmerLights_Main@clear,w
 13575  0A20  3A01               	xorlw	1
 13576  0A21  1D03               	skipz
 13577  0A22  0008               	return
 13578                           
 13579                           ;Dimmer_B1.c: 460: DimmerLights->Trigger = 0;
 13580  0A23  0874               	movf	_DimmerLights,w
 13581  0A24  3E08               	addlw	8
 13582  0A25  0086               	movwf	6
 13583  0A26  3001               	movlw	1	; select bank2/3
 13584  0A27  0087               	movwf	7
 13585  0A28  1101               	bcf	1,2
 13586                           
 13587                           ;Dimmer_B1.c: 461: if (DimmerLights->Switch == 1) {
 13588  0A29  0874               	movf	_DimmerLights,w
 13589  0A2A  3E08               	addlw	8
 13590  0A2B  0086               	movwf	6
 13591  0A2C  3001               	movlw	1	; select bank2/3
 13592  0A2D  0087               	movwf	7
 13593  0A2E  1C81               	btfss	1,1
 13594  0A2F  2A33               	goto	l9706
 13595                           
 13596                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 1);
 13597  0A30  01A3               	clrf	setDimmerLights@status
 13598  0A31  0AA3               	incf	setDimmerLights@status,f
 13599  0A32  2A35               	goto	L9
 13600  0A33                     l9706:	
 13601                           ;Dimmer_B1.c: 463: } else {
 13602                           
 13603                           
 13604                           ;Dimmer_B1.c: 464: setDimmerLights(lights, 0);
 13605  0A33  0020               	movlb	0	; select bank0
 13606  0A34  01A3               	clrf	setDimmerLights@status
 13607  0A35                     L9:	
 13608  0A35  0866               	movf	setDimmerLights_Main@lights,w
 13609  0A36  318C  24F0         	fcall	_setDimmerLights
 13610                           
 13611                           ;Dimmer_B1.c: 465: }
 13612                           ;Dimmer_B1.c: 467: DimmerLights->Clear = 0;
 13613  0A38  0874               	movf	_DimmerLights,w
 13614  0A39  3E09               	addlw	9
 13615  0A3A  0086               	movwf	6
 13616  0A3B  3001               	movlw	1	; select bank2/3
 13617  0A3C  0087               	movwf	7
 13618  0A3D  1101               	bcf	1,2
 13619                           
 13620                           ;Dimmer_B1.c: 469: }
 13621                           ;Dimmer_B1.c: 470: } else {
 13622  0A3E  0008               	return
 13623  0A3F                     l9710:	
 13624                           
 13625                           ;Dimmer_B1.c: 471: if (DimmerLights->TriggerAdj == 1) {
 13626  0A3F  0874               	movf	_DimmerLights,w
 13627  0A40  3E08               	addlw	8
 13628  0A41  0086               	movwf	6
 13629  0A42  3001               	movlw	1	; select bank2/3
 13630  0A43  0087               	movwf	7
 13631  0A44  1E01               	btfss	1,4
 13632  0A45  0008               	return
 13633                           
 13634                           ;Dimmer_B1.c: 472: if (clear == 1) {
 13635  0A46  0020               	movlb	0	; select bank0
 13636  0A47  0865               	movf	setDimmerLights_Main@clear,w
 13637  0A48  3A01               	xorlw	1
 13638  0A49  1D03               	skipz
 13639  0A4A  0008               	return
 13640                           
 13641                           ;Dimmer_B1.c: 473: DimmerLights->TriggerAdj = 0;
 13642  0A4B  0874               	movf	_DimmerLights,w
 13643  0A4C  3E08               	addlw	8
 13644  0A4D  0086               	movwf	6
 13645  0A4E  3001               	movlw	1	; select bank2/3
 13646  0A4F  0087               	movwf	7
 13647  0A50  1201               	bcf	1,4
 13648                           
 13649                           ;Dimmer_B1.c: 474: if (DimmerLights->AdjGo == 1) {
 13650  0A51  0874               	movf	_DimmerLights,w
 13651  0A52  3E08               	addlw	8
 13652  0A53  0086               	movwf	6
 13653  0A54  3001               	movlw	1	; select bank2/3
 13654  0A55  0087               	movwf	7
 13655  0A56  1D81               	btfss	1,3
 13656  0A57  2A67               	goto	l9720
 13657                           
 13658                           ;Dimmer_B1.c: 475: setDimmerLights_Adj(lights, 1);
 13659  0A58  01E2               	clrf	setDimmerLights_Adj@status
 13660  0A59  0AE2               	incf	setDimmerLights_Adj@status,f
 13661  0A5A  0866               	movf	setDimmerLights_Main@lights,w
 13662  0A5B  3192  2280  3189   	fcall	_setDimmerLights_Adj
 13663                           
 13664                           ;Dimmer_B1.c: 476: setBuz(1, 100);
 13665  0A5E  3064               	movlw	100
 13666  0A5F  0020               	movlb	0	; select bank0
 13667  0A60  00A9               	movwf	setBuz@time
 13668  0A61  3000               	movlw	0
 13669  0A62  00AA               	movwf	setBuz@time+1
 13670  0A63  3001               	movlw	1
 13671  0A64  3195  25BE         	fcall	_setBuz
 13672                           
 13673                           ;Dimmer_B1.c: 477: } else {
 13674  0A66  0008               	return
 13675  0A67                     l9720:	
 13676                           
 13677                           ;Dimmer_B1.c: 478: setDimmerLights_Adj(lights, 0);
 13678  0A67  0020               	movlb	0	; select bank0
 13679  0A68  01E2               	clrf	setDimmerLights_Adj@status
 13680  0A69  0866               	movf	setDimmerLights_Main@lights,w
 13681  0A6A  3192  2280         	fcall	_setDimmerLights_Adj
 13682  0A6C  0008               	return
 13683  0A6D                     __end_of_setDimmerLights_Main:	
 13684                           
 13685                           	psect	text83
 13686  1280                     __ptext83:	
 13687 ;; *************** function _setDimmerLights_Adj *****************
 13688 ;; Defined at:
 13689 ;;		line 657 in file "../src/Dimmer_B1.c"
 13690 ;; Parameters:    Size  Location     Type
 13691 ;;  lights          1    wreg     unsigned char 
 13692 ;;  status          1   66[BANK0 ] unsigned char 
 13693 ;; Auto vars:     Size  Location     Type
 13694 ;;  lights          1   68[BANK0 ] unsigned char 
 13695 ;; Return value:  Size  Location     Type
 13696 ;;		None               void
 13697 ;; Registers used:
 13698 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13699 ;; Tracked objects:
 13700 ;;		On entry : 0/0
 13701 ;;		On exit  : 0/0
 13702 ;;		Unchanged: 0/0
 13703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13704 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13706 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13707 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13708 ;;Total ram usage:        3 bytes
 13709 ;; Hardware stack levels used:    1
 13710 ;; Hardware stack levels required when called:    9
 13711 ;; This function calls:
 13712 ;;		_DimmerLightsPointSelect
 13713 ;;		_setLoad_StatusOff
 13714 ;;		_setRF_DimmerLights
 13715 ;;		_setTxData
 13716 ;; This function is called by:
 13717 ;;		_setDimmerLights_Main
 13718 ;; This function uses a non-reentrant model
 13719 ;;
 13720                           
 13721                           
 13722                           ;psect for function _setDimmerLights_Adj
 13723  1280                     _setDimmerLights_Adj:	
 13724                           
 13725                           ;incstack = 0
 13726                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13727                           ;setDimmerLights_Adj@lights stored from wreg
 13728  1280  0020               	movlb	0	; select bank0
 13729  1281  00E4               	movwf	setDimmerLights_Adj@lights
 13730                           
 13731                           ;Dimmer_B1.c: 658: DimmerLightsPointSelect(lights);
 13732  1282  0864               	movf	setDimmerLights_Adj@lights,w
 13733  1283  319C  2460  3192   	fcall	_DimmerLightsPointSelect
 13734                           
 13735                           ;Dimmer_B1.c: 659: if (status == 1) {
 13736  1286  0020               	movlb	0	; select bank0
 13737  1287  0862               	movf	setDimmerLights_Adj@status,w
 13738  1288  3A01               	xorlw	1
 13739  1289  1D03               	skipz
 13740  128A  2A96               	goto	l9322
 13741                           
 13742                           ;Dimmer_B1.c: 660: DimmerLights->AdjFlag = 1;
 13743  128B  0874               	movf	_DimmerLights,w
 13744  128C  0086               	movwf	6
 13745  128D  3001               	movlw	1	; select bank2/3
 13746  128E  0087               	movwf	7
 13747  128F  1581               	bsf	1,3
 13748                           
 13749                           ;Dimmer_B1.c: 661: DimmerLights->Signal = 1;
 13750  1290  0874               	movf	_DimmerLights,w
 13751  1291  0086               	movwf	6
 13752  1292  3001               	movlw	1	; select bank2/3
 13753  1293  0087               	movwf	7
 13754  1294  1481               	bsf	1,1
 13755                           
 13756                           ;Dimmer_B1.c: 662: } else {
 13757  1295  0008               	return
 13758  1296                     l9322:	
 13759                           
 13760                           ;Dimmer_B1.c: 663: if (DimmerLights->AdjFlag == 1) {
 13761  1296  0874               	movf	_DimmerLights,w
 13762  1297  0086               	movwf	6
 13763  1298  3001               	movlw	1	; select bank2/3
 13764  1299  0087               	movwf	7
 13765  129A  1D81               	btfss	1,3
 13766  129B  0008               	return
 13767                           
 13768                           ;Dimmer_B1.c: 665: DimmerLights->Signal = 0;
 13769  129C  0874               	movf	_DimmerLights,w
 13770  129D  0086               	movwf	6
 13771  129E  3001               	movlw	1	; select bank2/3
 13772  129F  0087               	movwf	7
 13773  12A0  1081               	bcf	1,1
 13774                           
 13775                           ;Dimmer_B1.c: 666: DimmerLights->AdjFlag = 0;
 13776  12A1  0874               	movf	_DimmerLights,w
 13777  12A2  0086               	movwf	6
 13778  12A3  3001               	movlw	1	; select bank2/3
 13779  12A4  0087               	movwf	7
 13780  12A5  1181               	bcf	1,3
 13781                           
 13782                           ;Dimmer_B1.c: 667: setLoad_StatusOff(0, 1);
 13783  12A6  01A0               	clrf	setLoad_StatusOff@command
 13784  12A7  0AA0               	incf	setLoad_StatusOff@command,f
 13785  12A8  3000               	movlw	0
 13786  12A9  319E  265B  3192   	fcall	_setLoad_StatusOff
 13787                           
 13788                           ;Dimmer_B1.c: 668: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13789  12AC  0874               	movf	_DimmerLights,w
 13790  12AD  3E04               	addlw	4
 13791  12AE  0086               	movwf	6
 13792  12AF  3001               	movlw	1	; select bank2/3
 13793  12B0  0087               	movwf	7
 13794  12B1  0801               	movf	1,w
 13795  12B2  0020               	movlb	0	; select bank0
 13796  12B3  00E3               	movwf	??_setDimmerLights_Adj
 13797  12B4  0874               	movf	_DimmerLights,w
 13798  12B5  3E05               	addlw	5
 13799  12B6  0086               	movwf	6
 13800  12B7  3001               	movlw	1	; select bank2/3
 13801  12B8  0087               	movwf	7
 13802  12B9  0863               	movf	??_setDimmerLights_Adj,w
 13803  12BA  0081               	movwf	1
 13804                           
 13805                           ;Dimmer_B1.c: 676: setRF_DimmerLights(lights, 1);
 13806  12BB  01DD               	clrf	setRF_DimmerLights@on
 13807  12BC  0ADD               	incf	setRF_DimmerLights@on,f
 13808  12BD  0864               	movf	setDimmerLights_Adj@lights,w
 13809  12BE  3188  20AB  3192   	fcall	_setRF_DimmerLights
 13810                           
 13811                           ;Dimmer_B1.c: 677: setTxData();
 13812  12C1  318F  2747         	fcall	_setTxData
 13813  12C3  0008               	return
 13814  12C4                     __end_of_setDimmerLights_Adj:	
 13815                           
 13816                           	psect	text84
 13817  1E5B                     __ptext84:	
 13818 ;; *************** function _setLoad_StatusOff *****************
 13819 ;; Defined at:
 13820 ;;		line 282 in file "../src/OverLoad_B1.c"
 13821 ;; Parameters:    Size  Location     Type
 13822 ;;  lights          1    wreg     unsigned char 
 13823 ;;  command         1    0[BANK0 ] unsigned char 
 13824 ;; Auto vars:     Size  Location     Type
 13825 ;;  lights          1    1[BANK0 ] unsigned char 
 13826 ;; Return value:  Size  Location     Type
 13827 ;;		None               void
 13828 ;; Registers used:
 13829 ;;		wreg, status,2, status,0
 13830 ;; Tracked objects:
 13831 ;;		On entry : 0/0
 13832 ;;		On exit  : 0/0
 13833 ;;		Unchanged: 0/0
 13834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13835 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13838 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13839 ;;Total ram usage:        2 bytes
 13840 ;; Hardware stack levels used:    1
 13841 ;; Hardware stack levels required when called:    5
 13842 ;; This function calls:
 13843 ;;		Nothing
 13844 ;; This function is called by:
 13845 ;;		_setDimmerLights_ERROR
 13846 ;;		_setDimmerLights_Adj
 13847 ;; This function uses a non-reentrant model
 13848 ;;
 13849                           
 13850                           
 13851                           ;psect for function _setLoad_StatusOff
 13852  1E5B                     _setLoad_StatusOff:	
 13853                           
 13854                           ;incstack = 0
 13855                           ; Regs used in _setLoad_StatusOff: [wreg+status,2+status,0]
 13856                           ;setLoad_StatusOff@lights stored from wreg
 13857  1E5B  0020               	movlb	0	; select bank0
 13858  1E5C  00A1               	movwf	setLoad_StatusOff@lights
 13859                           
 13860                           ;OverLoad_B1.c: 283: Load1.StatusOff = command;
 13861  1E5D  0820               	movf	setLoad_StatusOff@command,w
 13862  1E5E  0023               	movlb	3	; select bank3
 13863  1E5F  13A0               	bcf	_Load1^(0+384),7
 13864  1E60  1D03               	skipz
 13865  1E61  17A0               	bsf	_Load1^(0+384),7
 13866                           
 13867                           ;OverLoad_B1.c: 284: Load1.SafeCount -= 2;
 13868  1E62  3002               	movlw	2
 13869  1E63  02E2               	subwf	(_Load1^(0+384)+66),f
 13870                           
 13871                           ;OverLoad_B1.c: 285: if (lights == 1) {
 13872  1E64  0020               	movlb	0	; select bank0
 13873  1E65  0821               	movf	setLoad_StatusOff@lights,w
 13874  1E66  3A01               	xorlw	1
 13875  1E67  1D03               	skipz
 13876  1E68  2E6B               	goto	l8768
 13877                           
 13878                           ;OverLoad_B1.c: 286: Load1.Lights1Status = 0;
 13879  1E69  0023               	movlb	3	; select bank3
 13880  1E6A  01E3               	clrf	(_Load1^(0+384)+67)
 13881  1E6B                     l8768:	
 13882                           
 13883                           ;OverLoad_B1.c: 287: }
 13884                           ;OverLoad_B1.c: 288: if (lights == 2) {
 13885  1E6B  0020               	movlb	0	; select bank0
 13886  1E6C  0821               	movf	setLoad_StatusOff@lights,w
 13887  1E6D  3A02               	xorlw	2
 13888  1E6E  1D03               	skipz
 13889  1E6F  2E72               	goto	l8772
 13890                           
 13891                           ;OverLoad_B1.c: 289: Load1.Lights2Status = 0;
 13892  1E70  0023               	movlb	3	; select bank3
 13893  1E71  01E4               	clrf	(_Load1^(0+384)+68)
 13894  1E72                     l8772:	
 13895                           
 13896                           ;OverLoad_B1.c: 290: }
 13897                           ;OverLoad_B1.c: 291: if (lights == 3) {
 13898  1E72  0020               	movlb	0	; select bank0
 13899  1E73  0821               	movf	setLoad_StatusOff@lights,w
 13900  1E74  3A03               	xorlw	3
 13901  1E75  1D03               	skipz
 13902  1E76  0008               	return
 13903                           
 13904                           ;OverLoad_B1.c: 292: Load1.Lights3Status = 0;
 13905  1E77  0023               	movlb	3	; select bank3
 13906  1E78  01E5               	clrf	(_Load1^(0+384)+69)
 13907  1E79  0008               	return
 13908  1E7A                     __end_of_setLoad_StatusOff:	
 13909                           
 13910                           	psect	text85
 13911  0CF0                     __ptext85:	
 13912 ;; *************** function _setDimmerLights *****************
 13913 ;; Defined at:
 13914 ;;		line 604 in file "../src/Dimmer_B1.c"
 13915 ;; Parameters:    Size  Location     Type
 13916 ;;  lights          1    wreg     unsigned char 
 13917 ;;  status          1    3[BANK0 ] unsigned char 
 13918 ;; Auto vars:     Size  Location     Type
 13919 ;;  lights          1    5[BANK0 ] unsigned char 
 13920 ;; Return value:  Size  Location     Type
 13921 ;;		None               void
 13922 ;; Registers used:
 13923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13924 ;; Tracked objects:
 13925 ;;		On entry : 0/0
 13926 ;;		On exit  : 0/0
 13927 ;;		Unchanged: 0/0
 13928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13929 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13930 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13931 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13932 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13933 ;;Total ram usage:        3 bytes
 13934 ;; Hardware stack levels used:    1
 13935 ;; Hardware stack levels required when called:    7
 13936 ;; This function calls:
 13937 ;;		_DimmerLightsPointSelect
 13938 ;;		_setLED
 13939 ;;		_setLoad_Count
 13940 ;;		_setLoad_StatusOn
 13941 ;;		_setMemory_GO
 13942 ;; This function is called by:
 13943 ;;		_setDimmerLights_Main
 13944 ;;		_setControl_Lights_Table
 13945 ;; This function uses a non-reentrant model
 13946 ;;
 13947                           
 13948                           
 13949                           ;psect for function _setDimmerLights
 13950  0CF0                     _setDimmerLights:	
 13951                           
 13952                           ;incstack = 0
 13953                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13954                           ;setDimmerLights@lights stored from wreg
 13955  0CF0  0020               	movlb	0	; select bank0
 13956  0CF1  00A5               	movwf	setDimmerLights@lights
 13957                           
 13958                           ;Dimmer_B1.c: 605: DimmerLightsPointSelect(lights);
 13959  0CF2  0825               	movf	setDimmerLights@lights,w
 13960  0CF3  319C  2460  318C   	fcall	_DimmerLightsPointSelect
 13961                           
 13962                           ;Dimmer_B1.c: 606: Dimmer->Load = lights;
 13963  0CF6  0020               	movlb	0	; select bank0
 13964  0CF7  0825               	movf	setDimmerLights@lights,w
 13965  0CF8  00A4               	movwf	??_setDimmerLights
 13966  0CF9  0A73               	incf	_Dimmer,w
 13967  0CFA  0086               	movwf	6
 13968  0CFB  0187               	clrf	7
 13969  0CFC  0824               	movf	??_setDimmerLights,w
 13970  0CFD  0081               	movwf	1
 13971                           
 13972                           ;Dimmer_B1.c: 607: if (status == 1) {
 13973  0CFE  0823               	movf	setDimmerLights@status,w
 13974  0CFF  3A01               	xorlw	1
 13975  0D00  1D03               	skipz
 13976  0D01  2D4C               	goto	l8946
 13977                           
 13978                           ;Dimmer_B1.c: 608: DimmerLights->Status = 1;
 13979  0D02  0874               	movf	_DimmerLights,w
 13980  0D03  0086               	movwf	6
 13981  0D04  3001               	movlw	1	; select bank2/3
 13982  0D05  0087               	movwf	7
 13983  0D06  1681               	bsf	1,5
 13984                           
 13985                           ;Dimmer_B1.c: 609: setLED(lights, 0);
 13986  0D07  01A1               	clrf	setLED@command
 13987  0D08  0825               	movf	setDimmerLights@lights,w
 13988  0D09  3196  2672  318C   	fcall	_setLED
 13989                           
 13990                           ;Dimmer_B1.c: 611: setLoad_Count(0);
 13991  0D0C  3000               	movlw	0
 13992  0D0D  319B  233D  318C   	fcall	_setLoad_Count
 13993                           
 13994                           ;Dimmer_B1.c: 613: DimmerLights->Signal = 1;
 13995  0D10  0874               	movf	_DimmerLights,w
 13996  0D11  0086               	movwf	6
 13997  0D12  3001               	movlw	1	; select bank2/3
 13998  0D13  0087               	movwf	7
 13999  0D14  1481               	bsf	1,1
 14000                           
 14001                           ;Dimmer_B1.c: 614: DimmerLights->DimmingTimeValue = 7;
 14002  0D15  3007               	movlw	7
 14003  0D16  0020               	movlb	0	; select bank0
 14004  0D17  00A4               	movwf	??_setDimmerLights
 14005  0D18  0874               	movf	_DimmerLights,w
 14006  0D19  3E02               	addlw	2
 14007  0D1A  0086               	movwf	6
 14008  0D1B  3001               	movlw	1	; select bank2/3
 14009  0D1C  0087               	movwf	7
 14010  0D1D  0824               	movf	??_setDimmerLights,w
 14011  0D1E  0081               	movwf	1
 14012                           
 14013                           ;Dimmer_B1.c: 616: if (DimmerLights->StatusFlag == 0) {
 14014  0D1F  0874               	movf	_DimmerLights,w
 14015  0D20  0086               	movwf	6
 14016  0D21  3001               	movlw	1	; select bank2/3
 14017  0D22  0087               	movwf	7
 14018  0D23  1B01               	btfsc	1,6
 14019  0D24  0008               	return
 14020                           
 14021                           ;Dimmer_B1.c: 617: DimmerLights->StatusFlag = 1;
 14022  0D25  0874               	movf	_DimmerLights,w
 14023  0D26  0086               	movwf	6
 14024  0D27  3001               	movlw	1	; select bank2/3
 14025  0D28  0087               	movwf	7
 14026  0D29  1701               	bsf	1,6
 14027                           
 14028                           ;Dimmer_B1.c: 618: setLoad_StatusOn(lights, 1);
 14029  0D2A  01A0               	clrf	setLoad_StatusOn@command
 14030  0D2B  0AA0               	incf	setLoad_StatusOn@command,f
 14031  0D2C  0825               	movf	setDimmerLights@lights,w
 14032  0D2D  319F  271E  318C   	fcall	_setLoad_StatusOn
 14033                           
 14034                           ;Dimmer_B1.c: 619: setMemory_GO(0);
 14035  0D30  3000               	movlw	0
 14036  0D31  3190  2000         	fcall	_setMemory_GO
 14037                           
 14038                           ;Dimmer_B1.c: 622: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 14039  0D33  0874               	movf	_DimmerLights,w
 14040  0D34  3E05               	addlw	5
 14041  0D35  0086               	movwf	6
 14042  0D36  3001               	movlw	1	; select bank2/3
 14043  0D37  0087               	movwf	7
 14044  0D38  0801               	movf	1,w
 14045  0D39  0020               	movlb	0	; select bank0
 14046  0D3A  00A4               	movwf	??_setDimmerLights
 14047  0D3B  0874               	movf	_DimmerLights,w
 14048  0D3C  3E04               	addlw	4
 14049  0D3D  0086               	movwf	6
 14050  0D3E  3001               	movlw	1	; select bank2/3
 14051  0D3F  0087               	movwf	7
 14052  0D40  0824               	movf	??_setDimmerLights,w
 14053  0D41  0081               	movwf	1
 14054                           
 14055                           ;Dimmer_B1.c: 626: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 14056  0D42  3020               	movlw	32
 14057  0D43  00A4               	movwf	??_setDimmerLights
 14058  0D44  0874               	movf	_DimmerLights,w
 14059  0D45  3E04               	addlw	4
 14060  0D46  0086               	movwf	6
 14061  0D47  3001               	movlw	1	; select bank2/3
 14062  0D48  0087               	movwf	7
 14063  0D49  0824               	movf	??_setDimmerLights,w
 14064  0D4A  0081               	movwf	1
 14065                           
 14066                           ;Dimmer_B1.c: 628: }
 14067                           ;Dimmer_B1.c: 629: } else {
 14068  0D4B  0008               	return
 14069  0D4C                     l8946:	
 14070                           
 14071                           ;Dimmer_B1.c: 630: DimmerLights->Status = 0;
 14072  0D4C  0874               	movf	_DimmerLights,w
 14073  0D4D  0086               	movwf	6
 14074  0D4E  3001               	movlw	1	; select bank2/3
 14075  0D4F  0087               	movwf	7
 14076  0D50  1281               	bcf	1,5
 14077                           
 14078                           ;Dimmer_B1.c: 632: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14079  0D51  0874               	movf	_DimmerLights,w
 14080  0D52  3E06               	addlw	6
 14081  0D53  0086               	movwf	6
 14082  0D54  3001               	movlw	1	; select bank2/3
 14083  0D55  0087               	movwf	7
 14084  0D56  0801               	movf	1,w
 14085  0D57  00A4               	movwf	??_setDimmerLights
 14086  0D58  0874               	movf	_DimmerLights,w
 14087  0D59  3E04               	addlw	4
 14088  0D5A  0086               	movwf	6
 14089  0D5B  3001               	movlw	1	; select bank2/3
 14090  0D5C  0087               	movwf	7
 14091  0D5D  0824               	movf	??_setDimmerLights,w
 14092  0D5E  0081               	movwf	1
 14093                           
 14094                           ;Dimmer_B1.c: 639: DimmerLights->Signal = 1;
 14095  0D5F  0874               	movf	_DimmerLights,w
 14096  0D60  0086               	movwf	6
 14097  0D61  3001               	movlw	1	; select bank2/3
 14098  0D62  0087               	movwf	7
 14099  0D63  1481               	bsf	1,1
 14100                           
 14101                           ;Dimmer_B1.c: 640: DimmerLights->AdjFlag = 0;
 14102  0D64  0874               	movf	_DimmerLights,w
 14103  0D65  0086               	movwf	6
 14104  0D66  3001               	movlw	1	; select bank2/3
 14105  0D67  0087               	movwf	7
 14106  0D68  1181               	bcf	1,3
 14107                           
 14108                           ;Dimmer_B1.c: 641: DimmerLights->AdjStatus = 0;
 14109  0D69  0874               	movf	_DimmerLights,w
 14110  0D6A  0086               	movwf	6
 14111  0D6B  3001               	movlw	1	; select bank2/3
 14112  0D6C  0087               	movwf	7
 14113  0D6D  1201               	bcf	1,4
 14114                           
 14115                           ;Dimmer_B1.c: 642: DimmerLights->DimmingTimeValue = 7;
 14116  0D6E  3007               	movlw	7
 14117  0D6F  00A4               	movwf	??_setDimmerLights
 14118  0D70  0874               	movf	_DimmerLights,w
 14119  0D71  3E02               	addlw	2
 14120  0D72  0086               	movwf	6
 14121  0D73  3001               	movlw	1	; select bank2/3
 14122  0D74  0087               	movwf	7
 14123  0D75  0824               	movf	??_setDimmerLights,w
 14124  0D76  0081               	movwf	1
 14125  0D77  0008               	return
 14126  0D78                     __end_of_setDimmerLights:	
 14127                           
 14128                           	psect	text86
 14129  1F1E                     __ptext86:	
 14130 ;; *************** function _setLoad_StatusOn *****************
 14131 ;; Defined at:
 14132 ;;		line 267 in file "../src/OverLoad_B1.c"
 14133 ;; Parameters:    Size  Location     Type
 14134 ;;  lights          1    wreg     unsigned char 
 14135 ;;  command         1    0[BANK0 ] unsigned char 
 14136 ;; Auto vars:     Size  Location     Type
 14137 ;;  lights          1    1[BANK0 ] unsigned char 
 14138 ;; Return value:  Size  Location     Type
 14139 ;;		None               void
 14140 ;; Registers used:
 14141 ;;		wreg
 14142 ;; Tracked objects:
 14143 ;;		On entry : 0/0
 14144 ;;		On exit  : 0/0
 14145 ;;		Unchanged: 0/0
 14146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14147 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14150 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14151 ;;Total ram usage:        2 bytes
 14152 ;; Hardware stack levels used:    1
 14153 ;; Hardware stack levels required when called:    5
 14154 ;; This function calls:
 14155 ;;		Nothing
 14156 ;; This function is called by:
 14157 ;;		_setDimmerLights
 14158 ;; This function uses a non-reentrant model
 14159 ;;
 14160                           
 14161                           
 14162                           ;psect for function _setLoad_StatusOn
 14163  1F1E                     _setLoad_StatusOn:	
 14164                           
 14165                           ;incstack = 0
 14166                           ; Regs used in _setLoad_StatusOn: [wreg]
 14167                           ;setLoad_StatusOn@lights stored from wreg
 14168  1F1E  0020               	movlb	0	; select bank0
 14169  1F1F  00A1               	movwf	setLoad_StatusOn@lights
 14170                           
 14171                           ;OverLoad_B1.c: 268: Load1.GO = 1;
 14172  1F20  0023               	movlb	3	; select bank3
 14173  1F21  14A0               	bsf	_Load1^(0+384),1
 14174                           
 14175                           ;OverLoad_B1.c: 269: Load1.StatusOn = command;
 14176  1F22  0020               	movlb	0	; select bank0
 14177  1F23  0820               	movf	setLoad_StatusOn@command,w
 14178  1F24  0023               	movlb	3	; select bank3
 14179  1F25  1320               	bcf	_Load1^(0+384),6
 14180  1F26  1D03               	skipz
 14181  1F27  1720               	bsf	_Load1^(0+384),6
 14182                           
 14183                           ;OverLoad_B1.c: 271: if (lights == 1) {
 14184  1F28  0020               	movlb	0	; select bank0
 14185  1F29  0821               	movf	setLoad_StatusOn@lights,w
 14186  1F2A  3A01               	xorlw	1
 14187  1F2B  1D03               	skipz
 14188  1F2C  2F30               	goto	l8840
 14189                           
 14190                           ;OverLoad_B1.c: 272: Load1.Lights1Status = 1;
 14191  1F2D  0023               	movlb	3	; select bank3
 14192  1F2E  01E3               	clrf	(_Load1^(0+384)+67)
 14193  1F2F  0AE3               	incf	(_Load1^(0+384)+67),f
 14194  1F30                     l8840:	
 14195                           
 14196                           ;OverLoad_B1.c: 273: }
 14197                           ;OverLoad_B1.c: 274: if (lights == 2) {
 14198  1F30  0020               	movlb	0	; select bank0
 14199  1F31  0821               	movf	setLoad_StatusOn@lights,w
 14200  1F32  3A02               	xorlw	2
 14201  1F33  1D03               	skipz
 14202  1F34  2F38               	goto	l8844
 14203                           
 14204                           ;OverLoad_B1.c: 275: Load1.Lights2Status = 1;
 14205  1F35  0023               	movlb	3	; select bank3
 14206  1F36  01E4               	clrf	(_Load1^(0+384)+68)
 14207  1F37  0AE4               	incf	(_Load1^(0+384)+68),f
 14208  1F38                     l8844:	
 14209                           
 14210                           ;OverLoad_B1.c: 276: }
 14211                           ;OverLoad_B1.c: 277: if (lights == 3) {
 14212  1F38  0020               	movlb	0	; select bank0
 14213  1F39  0821               	movf	setLoad_StatusOn@lights,w
 14214  1F3A  3A03               	xorlw	3
 14215  1F3B  1D03               	skipz
 14216  1F3C  0008               	return
 14217                           
 14218                           ;OverLoad_B1.c: 278: Load1.Lights3Status = 1;
 14219  1F3D  0023               	movlb	3	; select bank3
 14220  1F3E  01E5               	clrf	(_Load1^(0+384)+69)
 14221  1F3F  0AE5               	incf	(_Load1^(0+384)+69),f
 14222  1F40  0008               	return
 14223  1F41                     __end_of_setLoad_StatusOn:	
 14224                           
 14225                           	psect	text87
 14226  1B3D                     __ptext87:	
 14227 ;; *************** function _setLoad_Count *****************
 14228 ;; Defined at:
 14229 ;;		line 252 in file "../src/OverLoad_B1.c"
 14230 ;; Parameters:    Size  Location     Type
 14231 ;;  command         1    wreg     unsigned char 
 14232 ;; Auto vars:     Size  Location     Type
 14233 ;;  command         1    1[BANK0 ] unsigned char 
 14234 ;; Return value:  Size  Location     Type
 14235 ;;		None               void
 14236 ;; Registers used:
 14237 ;;		wreg
 14238 ;; Tracked objects:
 14239 ;;		On entry : 0/0
 14240 ;;		On exit  : 0/0
 14241 ;;		Unchanged: 0/0
 14242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14244 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14245 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14246 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14247 ;;Total ram usage:        2 bytes
 14248 ;; Hardware stack levels used:    1
 14249 ;; Hardware stack levels required when called:    5
 14250 ;; This function calls:
 14251 ;;		Nothing
 14252 ;; This function is called by:
 14253 ;;		_setDimmerLights
 14254 ;; This function uses a non-reentrant model
 14255 ;;
 14256                           
 14257                           
 14258                           ;psect for function _setLoad_Count
 14259  1B3D                     _setLoad_Count:	
 14260                           
 14261                           ;incstack = 0
 14262                           ; Regs used in _setLoad_Count: [wreg]
 14263                           ;setLoad_Count@command stored from wreg
 14264  1B3D  0020               	movlb	0	; select bank0
 14265  1B3E  00A1               	movwf	setLoad_Count@command
 14266                           
 14267                           ;OverLoad_B1.c: 253: Load1.Count = command;
 14268  1B3F  0821               	movf	setLoad_Count@command,w
 14269  1B40  00A0               	movwf	??_setLoad_Count
 14270  1B41  0820               	movf	??_setLoad_Count,w
 14271  1B42  0023               	movlb	3	; select bank3
 14272  1B43  00DA               	movwf	(_Load1^(0+384)+58)
 14273                           
 14274                           ;OverLoad_B1.c: 254: Load1.SafeCount = command;
 14275  1B44  0020               	movlb	0	; select bank0
 14276  1B45  0821               	movf	setLoad_Count@command,w
 14277  1B46  00A0               	movwf	??_setLoad_Count
 14278  1B47  0820               	movf	??_setLoad_Count,w
 14279  1B48  0023               	movlb	3	; select bank3
 14280  1B49  00E2               	movwf	(_Load1^(0+384)+66)
 14281  1B4A  0008               	return
 14282  1B4B                     __end_of_setLoad_Count:	
 14283                           
 14284                           	psect	text88
 14285  1672                     __ptext88:	
 14286 ;; *************** function _setLED *****************
 14287 ;; Defined at:
 14288 ;;		line 70 in file "../src/LED_B1.c"
 14289 ;; Parameters:    Size  Location     Type
 14290 ;;  led             1    wreg     unsigned char 
 14291 ;;  command         1    1[BANK0 ] unsigned char 
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;  led             1    2[BANK0 ] unsigned char 
 14294 ;; Return value:  Size  Location     Type
 14295 ;;		None               void
 14296 ;; Registers used:
 14297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14298 ;; Tracked objects:
 14299 ;;		On entry : 0/0
 14300 ;;		On exit  : 0/0
 14301 ;;		Unchanged: 0/0
 14302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14303 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14307 ;;Total ram usage:        2 bytes
 14308 ;; Hardware stack levels used:    1
 14309 ;; Hardware stack levels required when called:    6
 14310 ;; This function calls:
 14311 ;;		_LedPointSelect
 14312 ;; This function is called by:
 14313 ;;		_setDimmerLights_ERROR
 14314 ;;		_setDimmerLights
 14315 ;;		_setLED_Initialization
 14316 ;;		_setLoad_Exceptions
 14317 ;;		_setOverTemp_Exceptions
 14318 ;;		_setSw_Initialization
 14319 ;; This function uses a non-reentrant model
 14320 ;;
 14321                           
 14322                           
 14323                           ;psect for function _setLED
 14324  1672                     _setLED:	
 14325                           
 14326                           ;incstack = 0
 14327                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14328                           ;setLED@led stored from wreg
 14329  1672  0020               	movlb	0	; select bank0
 14330  1673  00A2               	movwf	setLED@led
 14331                           
 14332                           ;LED_B1.c: 71: LedPointSelect(led);
 14333  1674  0822               	movf	setLED@led,w
 14334  1675  319D  25E4  3196   	fcall	_LedPointSelect
 14335                           
 14336                           ;LED_B1.c: 72: if (command == 0) {
 14337  1678  0020               	movlb	0	; select bank0
 14338  1679  08A1               	movf	setLED@command,f
 14339  167A  1D03               	skipz
 14340  167B  2E8E               	goto	l8798
 14341                           
 14342                           ;LED_B1.c: 74: if (led == 1) {
 14343  167C  0822               	movf	setLED@led,w
 14344  167D  3A01               	xorlw	1
 14345  167E  1D03               	skipz
 14346  167F  2E82               	goto	l8790
 14347                           
 14348                           ;LED_B1.c: 78: RA3 = 1;
 14349  1680  158C               	bsf	12,3	;volatile
 14350                           
 14351                           ;LED_B1.c: 80: }
 14352  1681  0008               	return
 14353  1682                     l8790:	
 14354                           
 14355                           ;LED_B1.c: 83: else if (led == 2) {
 14356  1682  0822               	movf	setLED@led,w
 14357  1683  3A02               	xorlw	2
 14358  1684  1D03               	skipz
 14359  1685  2E88               	goto	l8794
 14360                           
 14361                           ;LED_B1.c: 87: RC7 = 1;
 14362  1686  178E               	bsf	14,7	;volatile
 14363                           
 14364                           ;LED_B1.c: 89: }
 14365  1687  0008               	return
 14366  1688                     l8794:	
 14367                           
 14368                           ;LED_B1.c: 101: else if (led == 99) {
 14369  1688  0822               	movf	setLED@led,w
 14370  1689  3A63               	xorlw	99
 14371  168A  1D03               	skipz
 14372  168B  0008               	return
 14373                           
 14374                           ;LED_B1.c: 105: RB5 = 1;
 14375  168C  168D               	bsf	13,5	;volatile
 14376                           
 14377                           ;LED_B1.c: 107: }
 14378                           ;LED_B1.c: 109: } else if (command == 1) {
 14379  168D  0008               	return
 14380  168E                     l8798:	
 14381  168E  0821               	movf	setLED@command,w
 14382  168F  3A01               	xorlw	1
 14383  1690  1D03               	skipz
 14384  1691  2EA4               	goto	l8812
 14385                           
 14386                           ;LED_B1.c: 111: if (led == 1) {
 14387  1692  0822               	movf	setLED@led,w
 14388  1693  3A01               	xorlw	1
 14389  1694  1D03               	skipz
 14390  1695  2E98               	goto	l8804
 14391                           
 14392                           ;LED_B1.c: 115: RA3 = 0;
 14393  1696  118C               	bcf	12,3	;volatile
 14394                           
 14395                           ;LED_B1.c: 117: }
 14396  1697  0008               	return
 14397  1698                     l8804:	
 14398                           
 14399                           ;LED_B1.c: 120: else if (led == 2) {
 14400  1698  0822               	movf	setLED@led,w
 14401  1699  3A02               	xorlw	2
 14402  169A  1D03               	skipz
 14403  169B  2E9E               	goto	l8808
 14404                           
 14405                           ;LED_B1.c: 124: RC7 = 0;
 14406  169C  138E               	bcf	14,7	;volatile
 14407                           
 14408                           ;LED_B1.c: 126: }
 14409  169D  0008               	return
 14410  169E                     l8808:	
 14411                           
 14412                           ;LED_B1.c: 138: else if (led == 99) {
 14413  169E  0822               	movf	setLED@led,w
 14414  169F  3A63               	xorlw	99
 14415  16A0  1D03               	skipz
 14416  16A1  0008               	return
 14417                           
 14418                           ;LED_B1.c: 142: RB5 = 0;
 14419  16A2  128D               	bcf	13,5	;volatile
 14420                           
 14421                           ;LED_B1.c: 144: }
 14422                           ;LED_B1.c: 146: } else if (command == 10) {
 14423  16A3  0008               	return
 14424  16A4                     l8812:	
 14425  16A4  0821               	movf	setLED@command,w
 14426  16A5  3A0A               	xorlw	10
 14427  16A6  1D03               	skipz
 14428  16A7  2EC7               	goto	l8828
 14429                           
 14430                           ;LED_B1.c: 147: LED->GO = 0;
 14431  16A8  0870               	movf	_LED,w
 14432  16A9  0086               	movwf	6
 14433  16AA  0871               	movf	_LED+1,w
 14434  16AB  0087               	movwf	7
 14435  16AC  1081               	bcf	1,1
 14436                           
 14437                           ;LED_B1.c: 148: LED->Time = 0;
 14438  16AD  0870               	movf	_LED,w
 14439  16AE  0086               	movwf	6
 14440  16AF  0871               	movf	_LED+1,w
 14441  16B0  0087               	movwf	7
 14442  16B1  3141               	addfsr 1,1
 14443  16B2  3000               	movlw	0
 14444  16B3  3FC0               	movwi [0]fsr1
 14445  16B4  3FC1               	movwi [1]fsr1
 14446                           
 14447                           ;LED_B1.c: 150: if (led == 1) {
 14448  16B5  0822               	movf	setLED@led,w
 14449  16B6  3A01               	xorlw	1
 14450  16B7  1D03               	skipz
 14451  16B8  2EBB               	goto	l8820
 14452                           
 14453                           ;LED_B1.c: 154: RA3 = 1;
 14454  16B9  158C               	bsf	12,3	;volatile
 14455                           
 14456                           ;LED_B1.c: 156: }
 14457  16BA  0008               	return
 14458  16BB                     l8820:	
 14459                           
 14460                           ;LED_B1.c: 159: else if (led == 2) {
 14461  16BB  0822               	movf	setLED@led,w
 14462  16BC  3A02               	xorlw	2
 14463  16BD  1D03               	skipz
 14464  16BE  2EC1               	goto	l8824
 14465                           
 14466                           ;LED_B1.c: 163: RC7 = 1;
 14467  16BF  178E               	bsf	14,7	;volatile
 14468                           
 14469                           ;LED_B1.c: 165: }
 14470  16C0  0008               	return
 14471  16C1                     l8824:	
 14472                           
 14473                           ;LED_B1.c: 177: else if (led == 99) {
 14474  16C1  0822               	movf	setLED@led,w
 14475  16C2  3A63               	xorlw	99
 14476  16C3  1D03               	skipz
 14477  16C4  0008               	return
 14478                           
 14479                           ;LED_B1.c: 181: RB5 = 1;
 14480  16C5  168D               	bsf	13,5	;volatile
 14481                           
 14482                           ;LED_B1.c: 183: }
 14483                           ;LED_B1.c: 185: } else if (command == 11) {
 14484  16C6  0008               	return
 14485  16C7                     l8828:	
 14486  16C7  0821               	movf	setLED@command,w
 14487  16C8  3A0B               	xorlw	11
 14488  16C9  1D03               	skipz
 14489  16CA  0008               	return
 14490                           
 14491                           ;LED_B1.c: 186: LED->GO = 1;
 14492  16CB  0870               	movf	_LED,w
 14493  16CC  0086               	movwf	6
 14494  16CD  0871               	movf	_LED+1,w
 14495  16CE  0087               	movwf	7
 14496  16CF  1481               	bsf	1,1
 14497  16D0  0008               	return
 14498  16D1                     __end_of_setLED:	
 14499                           
 14500                           	psect	text89
 14501  1DE4                     __ptext89:	
 14502 ;; *************** function _LedPointSelect *****************
 14503 ;; Defined at:
 14504 ;;		line 7 in file "../src/LED_B1.c"
 14505 ;; Parameters:    Size  Location     Type
 14506 ;;  led             1    wreg     unsigned char 
 14507 ;; Auto vars:     Size  Location     Type
 14508 ;;  led             1    0[BANK0 ] unsigned char 
 14509 ;; Return value:  Size  Location     Type
 14510 ;;		None               void
 14511 ;; Registers used:
 14512 ;;		wreg, status,2, status,0
 14513 ;; Tracked objects:
 14514 ;;		On entry : 0/0
 14515 ;;		On exit  : 0/0
 14516 ;;		Unchanged: 0/0
 14517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14521 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14522 ;;Total ram usage:        1 bytes
 14523 ;; Hardware stack levels used:    1
 14524 ;; Hardware stack levels required when called:    5
 14525 ;; This function calls:
 14526 ;;		Nothing
 14527 ;; This function is called by:
 14528 ;;		_setLED_Initialization
 14529 ;;		_setLED
 14530 ;;		_setLED_Main
 14531 ;; This function uses a non-reentrant model
 14532 ;;
 14533                           
 14534                           
 14535                           ;psect for function _LedPointSelect
 14536  1DE4                     _LedPointSelect:	
 14537                           
 14538                           ;incstack = 0
 14539                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 14540                           ;LedPointSelect@led stored from wreg
 14541  1DE4  0020               	movlb	0	; select bank0
 14542  1DE5  00A0               	movwf	LedPointSelect@led
 14543                           
 14544                           ;LED_B1.c: 9: if (led == 1) {
 14545  1DE6  0820               	movf	LedPointSelect@led,w
 14546  1DE7  3A01               	xorlw	1
 14547  1DE8  1D03               	skipz
 14548  1DE9  2DEF               	goto	l8562
 14549                           
 14550                           ;LED_B1.c: 10: LED = &VarLED1;
 14551  1DEA  3065               	movlw	low _VarLED1
 14552  1DEB  00F0               	movwf	_LED
 14553  1DEC  3001               	movlw	high _VarLED1
 14554  1DED  00F1               	movwf	_LED+1
 14555                           
 14556                           ;LED_B1.c: 11: }
 14557  1DEE  0008               	return
 14558  1DEF                     l8562:	
 14559                           
 14560                           ;LED_B1.c: 14: else if (led == 2) {
 14561  1DEF  0820               	movf	LedPointSelect@led,w
 14562  1DF0  3A02               	xorlw	2
 14563  1DF1  1D03               	skipz
 14564  1DF2  2DF8               	goto	l8566
 14565                           
 14566                           ;LED_B1.c: 15: LED = &VarLED2;
 14567  1DF3  3069               	movlw	low _VarLED2
 14568  1DF4  00F0               	movwf	_LED
 14569  1DF5  3001               	movlw	high _VarLED2
 14570  1DF6  00F1               	movwf	_LED+1
 14571                           
 14572                           ;LED_B1.c: 16: }
 14573  1DF7  0008               	return
 14574  1DF8                     l8566:	
 14575                           
 14576                           ;LED_B1.c: 24: else if (led == 99) {
 14577  1DF8  0820               	movf	LedPointSelect@led,w
 14578  1DF9  3A63               	xorlw	99
 14579  1DFA  1D03               	skipz
 14580  1DFB  0008               	return
 14581                           
 14582                           ;LED_B1.c: 25: LED = &VarErrLED;
 14583  1DFC  30E4               	movlw	low _VarErrLED
 14584  1DFD  00F0               	movwf	_LED
 14585  1DFE  3000               	movlw	high _VarErrLED
 14586  1DFF  00F1               	movwf	_LED+1
 14587  1E00  0008               	return
 14588  1E01                     __end_of_LedPointSelect:	
 14589                           
 14590                           	psect	text90
 14591  1D2F                     __ptext90:	
 14592 ;; *************** function _DimmerLights_Close *****************
 14593 ;; Defined at:
 14594 ;;		line 407 in file "../src/Dimmer_B1.c"
 14595 ;; Parameters:    Size  Location     Type
 14596 ;;		None
 14597 ;; Auto vars:     Size  Location     Type
 14598 ;;		None
 14599 ;; Return value:  Size  Location     Type
 14600 ;;		None               void
 14601 ;; Registers used:
 14602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14603 ;; Tracked objects:
 14604 ;;		On entry : 0/0
 14605 ;;		On exit  : 0/0
 14606 ;;		Unchanged: 0/0
 14607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14612 ;;Total ram usage:        0 bytes
 14613 ;; Hardware stack levels used:    1
 14614 ;; Hardware stack levels required when called:    6
 14615 ;; This function calls:
 14616 ;;		_getDimmerLights_StatusFlag
 14617 ;;		_setLoad_GO
 14618 ;;		_setMemory_GO
 14619 ;; This function is called by:
 14620 ;;		_DimmerLights_Main
 14621 ;; This function uses a non-reentrant model
 14622 ;;
 14623                           
 14624                           
 14625                           ;psect for function _DimmerLights_Close
 14626  1D2F                     _DimmerLights_Close:	
 14627                           
 14628                           ;Dimmer_B1.c: 408: if (Dimmer->Detect == 1) {
 14629                           
 14630                           ;incstack = 0
 14631                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14632  1D2F  0873               	movf	_Dimmer,w
 14633  1D30  0086               	movwf	6
 14634  1D31  0187               	clrf	7
 14635  1D32  1C01               	btfss	1,0
 14636  1D33  0008               	return
 14637                           
 14638                           ;Dimmer_B1.c: 409: Dimmer->Detect = 0;
 14639  1D34  0873               	movf	_Dimmer,w
 14640  1D35  0086               	movwf	6
 14641  1D36  0187               	clrf	7
 14642  1D37  1001               	bcf	1,0
 14643                           
 14644                           ;Dimmer_B1.c: 410: if (getDimmerLights_StatusFlag() == 0) {
 14645  1D38  319B  23E5  319D   	fcall	_getDimmerLights_StatusFlag
 14646  1D3B  3800               	iorlw	0
 14647  1D3C  1D03               	skipz
 14648  1D3D  0008               	return
 14649                           
 14650                           ;Dimmer_B1.c: 411: setLoad_GO(0);
 14651  1D3E  3000               	movlw	0
 14652  1D3F  319A  2266  319D   	fcall	_setLoad_GO
 14653                           
 14654                           ;Dimmer_B1.c: 412: setMemory_GO(1);
 14655  1D42  3001               	movlw	1
 14656  1D43  3190  2000         	fcall	_setMemory_GO
 14657  1D45  0008               	return
 14658  1D46                     __end_of_DimmerLights_Close:	
 14659                           
 14660                           	psect	text91
 14661  1000                     __ptext91:	
 14662 ;; *************** function _setMemory_GO *****************
 14663 ;; Defined at:
 14664 ;;		line 885 in file "../src/MCU_B1.c"
 14665 ;; Parameters:    Size  Location     Type
 14666 ;;  command         1    wreg     unsigned char 
 14667 ;; Auto vars:     Size  Location     Type
 14668 ;;  command         1    2[BANK0 ] unsigned char 
 14669 ;; Return value:  Size  Location     Type
 14670 ;;		None               void
 14671 ;; Registers used:
 14672 ;;		wreg, status,2, status,0
 14673 ;; Tracked objects:
 14674 ;;		On entry : 0/0
 14675 ;;		On exit  : 0/0
 14676 ;;		Unchanged: 0/0
 14677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14680 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14681 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14682 ;;Total ram usage:        3 bytes
 14683 ;; Hardware stack levels used:    1
 14684 ;; Hardware stack levels required when called:    5
 14685 ;; This function calls:
 14686 ;;		Nothing
 14687 ;; This function is called by:
 14688 ;;		_DimmerLights_Close
 14689 ;;		_setDimmerLights
 14690 ;; This function uses a non-reentrant model
 14691 ;;
 14692                           
 14693                           
 14694                           ;psect for function _setMemory_GO
 14695  1000                     _setMemory_GO:	
 14696                           
 14697                           ;incstack = 0
 14698                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 14699                           ;setMemory_GO@command stored from wreg
 14700  1000  0020               	movlb	0	; select bank0
 14701  1001  00A2               	movwf	setMemory_GO@command
 14702                           
 14703                           ;MCU_B1.c: 886: Memory.GO = command;
 14704  1002  0822               	movf	setMemory_GO@command,w
 14705  1003  0024               	movlb	4	; select bank4
 14706  1004  10C4               	bcf	(_Memory^(0+512)+36),1
 14707  1005  1D03               	skipz
 14708  1006  14C4               	bsf	(_Memory^(0+512)+36),1
 14709                           
 14710                           ;MCU_B1.c: 887: if (command == 0) {
 14711  1007  0020               	movlb	0	; select bank0
 14712  1008  08A2               	movf	setMemory_GO@command,f
 14713  1009  1D03               	skipz
 14714  100A  0008               	return
 14715                           
 14716                           ;MCU_B1.c: 888: Memory.Time = command;
 14717  100B  0822               	movf	setMemory_GO@command,w
 14718  100C  00A0               	movwf	??_setMemory_GO
 14719  100D  01A1               	clrf	??_setMemory_GO+1
 14720  100E  0820               	movf	??_setMemory_GO,w
 14721  100F  0024               	movlb	4	; select bank4
 14722  1010  00C2               	movwf	(_Memory^(0+512)+34)
 14723  1011  0020               	movlb	0	; select bank0
 14724  1012  0821               	movf	??_setMemory_GO+1,w
 14725  1013  0024               	movlb	4	; select bank4
 14726  1014  00C3               	movwf	((_Memory+1)^(0+512)+34)
 14727  1015  0008               	return
 14728  1016                     __end_of_setMemory_GO:	
 14729                           
 14730                           	psect	text92
 14731  1A66                     __ptext92:	
 14732 ;; *************** function _setLoad_GO *****************
 14733 ;; Defined at:
 14734 ;;		line 263 in file "../src/OverLoad_B1.c"
 14735 ;; Parameters:    Size  Location     Type
 14736 ;;  command         1    wreg     unsigned char 
 14737 ;; Auto vars:     Size  Location     Type
 14738 ;;  command         1    0[BANK0 ] unsigned char 
 14739 ;; Return value:  Size  Location     Type
 14740 ;;		None               void
 14741 ;; Registers used:
 14742 ;;		wreg
 14743 ;; Tracked objects:
 14744 ;;		On entry : 0/0
 14745 ;;		On exit  : 0/0
 14746 ;;		Unchanged: 0/0
 14747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14749 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14751 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14752 ;;Total ram usage:        1 bytes
 14753 ;; Hardware stack levels used:    1
 14754 ;; Hardware stack levels required when called:    5
 14755 ;; This function calls:
 14756 ;;		Nothing
 14757 ;; This function is called by:
 14758 ;;		_DimmerLights_Close
 14759 ;; This function uses a non-reentrant model
 14760 ;;
 14761                           
 14762                           
 14763                           ;psect for function _setLoad_GO
 14764  1A66                     _setLoad_GO:	
 14765                           
 14766                           ;incstack = 0
 14767                           ; Regs used in _setLoad_GO: [wreg]
 14768                           ;setLoad_GO@command stored from wreg
 14769  1A66  0020               	movlb	0	; select bank0
 14770  1A67  00A0               	movwf	setLoad_GO@command
 14771                           
 14772                           ;OverLoad_B1.c: 264: Load1.GO = command;
 14773  1A68  0820               	movf	setLoad_GO@command,w
 14774  1A69  0023               	movlb	3	; select bank3
 14775  1A6A  10A0               	bcf	_Load1^(0+384),1
 14776  1A6B  1D03               	skipz
 14777  1A6C  14A0               	bsf	_Load1^(0+384),1
 14778  1A6D  0008               	return
 14779  1A6E                     __end_of_setLoad_GO:	
 14780                           
 14781                           	psect	text93
 14782  1BE5                     __ptext93:	
 14783 ;; *************** function _getDimmerLights_StatusFlag *****************
 14784 ;; Defined at:
 14785 ;;		line 486 in file "../src/Dimmer_B1.c"
 14786 ;; Parameters:    Size  Location     Type
 14787 ;;		None
 14788 ;; Auto vars:     Size  Location     Type
 14789 ;;  Status          1    1[BANK0 ] unsigned char 
 14790 ;; Return value:  Size  Location     Type
 14791 ;;                  1    wreg      unsigned char 
 14792 ;; Registers used:
 14793 ;;		wreg, status,2
 14794 ;; Tracked objects:
 14795 ;;		On entry : 0/0
 14796 ;;		On exit  : 0/0
 14797 ;;		Unchanged: 0/0
 14798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14800 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14802 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14803 ;;Total ram usage:        3 bytes
 14804 ;; Hardware stack levels used:    1
 14805 ;; Hardware stack levels required when called:    5
 14806 ;; This function calls:
 14807 ;;		Nothing
 14808 ;; This function is called by:
 14809 ;;		_DimmerLights_Close
 14810 ;;		_DimmerLights_Exceptions
 14811 ;; This function uses a non-reentrant model
 14812 ;;
 14813                           
 14814                           
 14815                           ;psect for function _getDimmerLights_StatusFlag
 14816  1BE5                     _getDimmerLights_StatusFlag:	
 14817                           
 14818                           ;Dimmer_B1.c: 487: char Status = 0;
 14819                           
 14820                           ;incstack = 0
 14821                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 14822  1BE5  0020               	movlb	0	; select bank0
 14823  1BE6  01A1               	clrf	getDimmerLights_StatusFlag@Status
 14824                           
 14825                           ;Dimmer_B1.c: 494: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 14826  1BE7  01A2               	clrf	_getDimmerLights_StatusFlag$2295
 14827  1BE8  0AA2               	incf	_getDimmerLights_StatusFlag$2295,f
 14828  1BE9  0022               	movlb	2	; select bank2
 14829  1BEA  1F3D               	btfss	_DimmerLights1^(0+256),6
 14830  1BEB  1B4C               	btfsc	_DimmerLights2^(0+256),6
 14831  1BEC  2BEF               	goto	l8916
 14832  1BED  0020               	movlb	0	; select bank0
 14833  1BEE  01A2               	clrf	_getDimmerLights_StatusFlag$2295
 14834  1BEF                     l8916:	
 14835  1BEF  0020               	movlb	0	; select bank0
 14836  1BF0  0822               	movf	_getDimmerLights_StatusFlag$2295,w
 14837  1BF1  00A0               	movwf	??_getDimmerLights_StatusFlag
 14838  1BF2  0820               	movf	??_getDimmerLights_StatusFlag,w
 14839  1BF3  00A1               	movwf	getDimmerLights_StatusFlag@Status
 14840                           
 14841                           ;Dimmer_B1.c: 501: return Status;
 14842  1BF4  0821               	movf	getDimmerLights_StatusFlag@Status,w
 14843  1BF5  0008               	return
 14844  1BF6                     __end_of_getDimmerLights_StatusFlag:	
 14845                           
 14846                           	psect	text94
 14847  1D18                     __ptext94:	
 14848 ;; *************** function _DimmerLights_Initialization *****************
 14849 ;; Defined at:
 14850 ;;		line 345 in file "../src/Dimmer_B1.c"
 14851 ;; Parameters:    Size  Location     Type
 14852 ;;		None
 14853 ;; Auto vars:     Size  Location     Type
 14854 ;;		None
 14855 ;; Return value:  Size  Location     Type
 14856 ;;		None               void
 14857 ;; Registers used:
 14858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14859 ;; Tracked objects:
 14860 ;;		On entry : 0/0
 14861 ;;		On exit  : 0/0
 14862 ;;		Unchanged: 0/0
 14863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14868 ;;Total ram usage:        1 bytes
 14869 ;; Hardware stack levels used:    1
 14870 ;; Hardware stack levels required when called:    7
 14871 ;; This function calls:
 14872 ;;		_Dimmer_Initialization
 14873 ;;		_setDimmerLights_Initialization
 14874 ;; This function is called by:
 14875 ;;		_main
 14876 ;; This function uses a non-reentrant model
 14877 ;;
 14878                           
 14879                           
 14880                           ;psect for function _DimmerLights_Initialization
 14881  1D18                     _DimmerLights_Initialization:	
 14882                           
 14883                           ;Dimmer_B1.c: 348: DimmerLights11 = &DimmerLights1;
 14884                           
 14885                           ;incstack = 0
 14886                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14887  1D18  303D               	movlw	_DimmerLights1& (0+255)
 14888  1D19  0020               	movlb	0	; select bank0
 14889  1D1A  00A4               	movwf	??_DimmerLights_Initialization
 14890  1D1B  0824               	movf	??_DimmerLights_Initialization,w
 14891  1D1C  0021               	movlb	1	; select bank1
 14892  1D1D  00CB               	movwf	_DimmerLights11^(0+128)
 14893                           
 14894                           ;Dimmer_B1.c: 349: setDimmerLights_Initialization(1);
 14895  1D1E  3001               	movlw	1
 14896  1D1F  3190  206B  319D   	fcall	_setDimmerLights_Initialization
 14897                           
 14898                           ;Dimmer_B1.c: 353: DimmerLights22 = &DimmerLights2;
 14899  1D22  304C               	movlw	_DimmerLights2& (0+255)
 14900  1D23  0020               	movlb	0	; select bank0
 14901  1D24  00A4               	movwf	??_DimmerLights_Initialization
 14902  1D25  0824               	movf	??_DimmerLights_Initialization,w
 14903  1D26  0021               	movlb	1	; select bank1
 14904  1D27  00CC               	movwf	_DimmerLights22^(0+128)
 14905                           
 14906                           ;Dimmer_B1.c: 354: setDimmerLights_Initialization(2);
 14907  1D28  3002               	movlw	2
 14908  1D29  3190  206B  319D   	fcall	_setDimmerLights_Initialization
 14909                           
 14910                           ;Dimmer_B1.c: 363: Dimmer_Initialization();
 14911  1D2C  319A  2235         	fcall	_Dimmer_Initialization
 14912  1D2E  0008               	return
 14913  1D2F                     __end_of_DimmerLights_Initialization:	
 14914                           
 14915                           	psect	text95
 14916  106B                     __ptext95:	
 14917 ;; *************** function _setDimmerLights_Initialization *****************
 14918 ;; Defined at:
 14919 ;;		line 368 in file "../src/Dimmer_B1.c"
 14920 ;; Parameters:    Size  Location     Type
 14921 ;;  lights          1    wreg     unsigned char 
 14922 ;; Auto vars:     Size  Location     Type
 14923 ;;  lights          1    3[BANK0 ] unsigned char 
 14924 ;; Return value:  Size  Location     Type
 14925 ;;		None               void
 14926 ;; Registers used:
 14927 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14928 ;; Tracked objects:
 14929 ;;		On entry : 0/0
 14930 ;;		On exit  : 0/0
 14931 ;;		Unchanged: 0/0
 14932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14937 ;;Total ram usage:        2 bytes
 14938 ;; Hardware stack levels used:    1
 14939 ;; Hardware stack levels required when called:    6
 14940 ;; This function calls:
 14941 ;;		_DimmerLightsPointSelect
 14942 ;; This function is called by:
 14943 ;;		_DimmerLights_Initialization
 14944 ;; This function uses a non-reentrant model
 14945 ;;
 14946                           
 14947                           
 14948                           ;psect for function _setDimmerLights_Initialization
 14949  106B                     _setDimmerLights_Initialization:	
 14950                           
 14951                           ;incstack = 0
 14952                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14953                           ;setDimmerLights_Initialization@lights stored from wreg
 14954  106B  0020               	movlb	0	; select bank0
 14955  106C  00A3               	movwf	setDimmerLights_Initialization@lights
 14956                           
 14957                           ;Dimmer_B1.c: 370: DimmerLightsPointSelect(lights);
 14958  106D  0823               	movf	setDimmerLights_Initialization@lights,w
 14959  106E  319C  2460         	fcall	_DimmerLightsPointSelect
 14960                           
 14961                           ;Dimmer_B1.c: 371: DimmerLights->Clear = 1;
 14962  1070  0874               	movf	_DimmerLights,w
 14963  1071  3E09               	addlw	9
 14964  1072  0086               	movwf	6
 14965  1073  3001               	movlw	1	; select bank2/3
 14966  1074  0087               	movwf	7
 14967  1075  1501               	bsf	1,2
 14968                           
 14969                           ;Dimmer_B1.c: 377: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 14970  1076  3020               	movlw	32
 14971  1077  0020               	movlb	0	; select bank0
 14972  1078  00A2               	movwf	??_setDimmerLights_Initialization
 14973  1079  0874               	movf	_DimmerLights,w
 14974  107A  3E05               	addlw	5
 14975  107B  0086               	movwf	6
 14976  107C  3001               	movlw	1	; select bank2/3
 14977  107D  0087               	movwf	7
 14978  107E  0822               	movf	??_setDimmerLights_Initialization,w
 14979  107F  0081               	movwf	1
 14980                           
 14981                           ;Dimmer_B1.c: 378: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 14982  1080  303C               	movlw	60
 14983  1081  00A2               	movwf	??_setDimmerLights_Initialization
 14984  1082  0874               	movf	_DimmerLights,w
 14985  1083  3E06               	addlw	6
 14986  1084  0086               	movwf	6
 14987  1085  3001               	movlw	1	; select bank2/3
 14988  1086  0087               	movwf	7
 14989  1087  0822               	movf	??_setDimmerLights_Initialization,w
 14990  1088  0081               	movwf	1
 14991                           
 14992                           ;Dimmer_B1.c: 388: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14993  1089  0874               	movf	_DimmerLights,w
 14994  108A  3E06               	addlw	6
 14995  108B  0086               	movwf	6
 14996  108C  3001               	movlw	1	; select bank2/3
 14997  108D  0087               	movwf	7
 14998  108E  0801               	movf	1,w
 14999  108F  00A2               	movwf	??_setDimmerLights_Initialization
 15000  1090  0874               	movf	_DimmerLights,w
 15001  1091  3E04               	addlw	4
 15002  1092  0086               	movwf	6
 15003  1093  3001               	movlw	1	; select bank2/3
 15004  1094  0087               	movwf	7
 15005  1095  0822               	movf	??_setDimmerLights_Initialization,w
 15006  1096  0081               	movwf	1
 15007  1097  0008               	return
 15008  1098                     __end_of_setDimmerLights_Initialization:	
 15009                           
 15010                           	psect	text96
 15011  1A35                     __ptext96:	
 15012 ;; *************** function _Dimmer_Initialization *****************
 15013 ;; Defined at:
 15014 ;;		line 797 in file "../src/Dimmer_B1.c"
 15015 ;; Parameters:    Size  Location     Type
 15016 ;;		None
 15017 ;; Auto vars:     Size  Location     Type
 15018 ;;		None
 15019 ;; Return value:  Size  Location     Type
 15020 ;;		None               void
 15021 ;; Registers used:
 15022 ;;		wreg
 15023 ;; Tracked objects:
 15024 ;;		On entry : 0/0
 15025 ;;		On exit  : 0/0
 15026 ;;		Unchanged: 0/0
 15027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15032 ;;Total ram usage:        1 bytes
 15033 ;; Hardware stack levels used:    1
 15034 ;; Hardware stack levels required when called:    5
 15035 ;; This function calls:
 15036 ;;		Nothing
 15037 ;; This function is called by:
 15038 ;;		_DimmerLights_Initialization
 15039 ;; This function uses a non-reentrant model
 15040 ;;
 15041                           
 15042                           
 15043                           ;psect for function _Dimmer_Initialization
 15044  1A35                     _Dimmer_Initialization:	
 15045                           
 15046                           ;Dimmer_B1.c: 799: Dimmer = &Dimmer1;
 15047                           
 15048                           ;incstack = 0
 15049                           ; Regs used in _Dimmer_Initialization: [wreg]
 15050  1A35  30E8               	movlw	_Dimmer1& (0+255)
 15051  1A36  0020               	movlb	0	; select bank0
 15052  1A37  00A0               	movwf	??_Dimmer_Initialization
 15053  1A38  0820               	movf	??_Dimmer_Initialization,w
 15054  1A39  00F3               	movwf	_Dimmer
 15055  1A3A  0008               	return
 15056  1A3B                     __end_of_Dimmer_Initialization:	
 15057                           
 15058                           	psect	text97
 15059  1A5E                     __ptext97:	
 15060 ;; *************** function _DelayOff_Main *****************
 15061 ;; Defined at:
 15062 ;;		line 41 in file "../src/DelayOff_B1.c"
 15063 ;; Parameters:    Size  Location     Type
 15064 ;;		None
 15065 ;; Auto vars:     Size  Location     Type
 15066 ;;		None
 15067 ;; Return value:  Size  Location     Type
 15068 ;;		None               void
 15069 ;; Registers used:
 15070 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15071 ;; Tracked objects:
 15072 ;;		On entry : 0/0
 15073 ;;		On exit  : 0/0
 15074 ;;		Unchanged: 0/0
 15075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;Total ram usage:        0 bytes
 15081 ;; Hardware stack levels used:    1
 15082 ;; Hardware stack levels required when called:   10
 15083 ;; This function calls:
 15084 ;;		_DlyOff_Main
 15085 ;; This function is called by:
 15086 ;;		_main
 15087 ;; This function uses a non-reentrant model
 15088 ;;
 15089                           
 15090                           
 15091                           ;psect for function _DelayOff_Main
 15092  1A5E                     _DelayOff_Main:	
 15093                           
 15094                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15095                           
 15096                           ;incstack = 0
 15097                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15098  1A5E  3001               	movlw	1
 15099  1A5F  318A  22E6  319A   	fcall	_DlyOff_Main
 15100                           
 15101                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15102  1A62  3002               	movlw	2
 15103  1A63  318A  22E6         	fcall	_DlyOff_Main
 15104  1A65  0008               	return
 15105  1A66                     __end_of_DelayOff_Main:	
 15106                           
 15107                           	psect	text98
 15108  0AE6                     __ptext98:	
 15109 ;; *************** function _DlyOff_Main *****************
 15110 ;; Defined at:
 15111 ;;		line 62 in file "../src/DelayOff_B1.c"
 15112 ;; Parameters:    Size  Location     Type
 15113 ;;  sw              1    wreg     unsigned char 
 15114 ;; Auto vars:     Size  Location     Type
 15115 ;;  sw              1   68[BANK0 ] unsigned char 
 15116 ;; Return value:  Size  Location     Type
 15117 ;;		None               void
 15118 ;; Registers used:
 15119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15120 ;; Tracked objects:
 15121 ;;		On entry : 0/0
 15122 ;;		On exit  : 0/0
 15123 ;;		Unchanged: 0/0
 15124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15127 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15129 ;;Total ram usage:        3 bytes
 15130 ;; Hardware stack levels used:    1
 15131 ;; Hardware stack levels required when called:    9
 15132 ;; This function calls:
 15133 ;;		_DelayOffPointSelect
 15134 ;;		_setBuz
 15135 ;;		_setDimmerLights_Switch
 15136 ;;		_setDimmerLights_Trigger
 15137 ;;		_setRFSW_Status
 15138 ;;		_setRF_DimmerLights
 15139 ;;		_setSw_Status
 15140 ;;		_setTxData
 15141 ;; This function is called by:
 15142 ;;		_DelayOff_Main
 15143 ;; This function uses a non-reentrant model
 15144 ;;
 15145                           
 15146                           
 15147                           ;psect for function _DlyOff_Main
 15148  0AE6                     _DlyOff_Main:	
 15149                           
 15150                           ;incstack = 0
 15151                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15152                           ;DlyOff_Main@sw stored from wreg
 15153  0AE6  0020               	movlb	0	; select bank0
 15154  0AE7  00E4               	movwf	DlyOff_Main@sw
 15155                           
 15156                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15157  0AE8  0864               	movf	DlyOff_Main@sw,w
 15158  0AE9  319C  249A  318A   	fcall	_DelayOffPointSelect
 15159                           
 15160                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15161  0AEC  0872               	movf	_DelayOff,w
 15162  0AED  0086               	movwf	6
 15163  0AEE  3001               	movlw	1	; select bank2/3
 15164  0AEF  0087               	movwf	7
 15165  0AF0  1C81               	btfss	1,1
 15166  0AF1  0008               	return
 15167                           
 15168                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15169  0AF2  0872               	movf	_DelayOff,w
 15170  0AF3  3E02               	addlw	2
 15171  0AF4  0086               	movwf	6
 15172  0AF5  3001               	movlw	1	; select bank2/3
 15173  0AF6  0087               	movwf	7
 15174  0AF7  3001               	movlw	1
 15175  0AF8  0781               	addwf	1,f
 15176  0AF9  3141               	addfsr 1,1
 15177  0AFA  1803               	skipnc
 15178  0AFB  0A81               	incf	1,f
 15179                           
 15180                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 15181  0AFC  0872               	movf	_DelayOff,w
 15182  0AFD  3E02               	addlw	2
 15183  0AFE  0086               	movwf	6
 15184  0AFF  3001               	movlw	1	; select bank2/3
 15185  0B00  0087               	movwf	7
 15186  0B01  3F40               	moviw [0]fsr1
 15187  0B02  0020               	movlb	0	; select bank0
 15188  0B03  00E2               	movwf	??_DlyOff_Main
 15189  0B04  3F41               	moviw [1]fsr1
 15190  0B05  00E3               	movwf	??_DlyOff_Main+1
 15191  0B06  3016               	movlw	22
 15192  0B07  0263               	subwf	??_DlyOff_Main+1,w
 15193  0B08  3012               	movlw	18
 15194  0B09  1903               	skipnz
 15195  0B0A  0262               	subwf	??_DlyOff_Main,w
 15196  0B0B  1C03               	skipc
 15197  0B0C  0008               	return
 15198                           
 15199                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15200  0B0D  0872               	movf	_DelayOff,w
 15201  0B0E  3E02               	addlw	2
 15202  0B0F  0086               	movwf	6
 15203  0B10  3001               	movlw	1	; select bank2/3
 15204  0B11  0087               	movwf	7
 15205  0B12  3000               	movlw	0
 15206  0B13  3FC0               	movwi [0]fsr1
 15207  0B14  3FC1               	movwi [1]fsr1
 15208                           
 15209                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15210  0B15  3001               	movlw	1
 15211  0B16  00E2               	movwf	??_DlyOff_Main
 15212  0B17  0872               	movf	_DelayOff,w
 15213  0B18  3E04               	addlw	4
 15214  0B19  0086               	movwf	6
 15215  0B1A  3001               	movlw	1	; select bank2/3
 15216  0B1B  0087               	movwf	7
 15217  0B1C  0862               	movf	??_DlyOff_Main,w
 15218  0B1D  0781               	addwf	1,f
 15219                           
 15220                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15221  0B1E  0872               	movf	_DelayOff,w
 15222  0B1F  3E04               	addlw	4
 15223  0B20  0086               	movwf	6
 15224  0B21  3001               	movlw	1	; select bank2/3
 15225  0B22  0087               	movwf	7
 15226  0B23  0A72               	incf	_DelayOff,w
 15227  0B24  0084               	movwf	4
 15228  0B25  3001               	movlw	1	; select bank2/3
 15229  0B26  0085               	movwf	5
 15230  0B27  0800               	movf	0,w
 15231  0B28  0201               	subwf	1,w
 15232  0B29  1C03               	skipc
 15233  0B2A  0008               	return
 15234                           
 15235                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15236  0B2B  0872               	movf	_DelayOff,w
 15237  0B2C  3E04               	addlw	4
 15238  0B2D  0086               	movwf	6
 15239  0B2E  3001               	movlw	1	; select bank2/3
 15240  0B2F  0087               	movwf	7
 15241  0B30  0181               	clrf	1
 15242                           
 15243                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15244  0B31  0872               	movf	_DelayOff,w
 15245  0B32  0086               	movwf	6
 15246  0B33  3001               	movlw	1	; select bank2/3
 15247  0B34  0087               	movwf	7
 15248  0B35  1081               	bcf	1,1
 15249                           
 15250                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 15251  0B36  01A1               	clrf	setSw_Status@command
 15252  0B37  0864               	movf	DlyOff_Main@sw,w
 15253  0B38  319B  2368  318A   	fcall	_setSw_Status
 15254                           
 15255                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 15256  0B3B  0020               	movlb	0	; select bank0
 15257  0B3C  01A2               	clrf	setRFSW_Status@command
 15258  0B3D  0864               	movf	DlyOff_Main@sw,w
 15259  0B3E  319B  2359  318A   	fcall	_setRFSW_Status
 15260                           
 15261                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 15262  0B41  0020               	movlb	0	; select bank0
 15263  0B42  01DD               	clrf	setRF_DimmerLights@on
 15264  0B43  0864               	movf	DlyOff_Main@sw,w
 15265  0B44  3188  20AB  318A   	fcall	_setRF_DimmerLights
 15266                           
 15267                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 15268  0B47  0020               	movlb	0	; select bank0
 15269  0B48  01A2               	clrf	setDimmerLights_Trigger@command
 15270  0B49  0AA2               	incf	setDimmerLights_Trigger@command,f
 15271  0B4A  0864               	movf	DlyOff_Main@sw,w
 15272  0B4B  319B  23A5  318A   	fcall	_setDimmerLights_Trigger
 15273                           
 15274                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 15275  0B4E  0020               	movlb	0	; select bank0
 15276  0B4F  01A2               	clrf	setDimmerLights_Switch@command
 15277  0B50  0864               	movf	DlyOff_Main@sw,w
 15278  0B51  319B  2395  318A   	fcall	_setDimmerLights_Switch
 15279                           
 15280                           ;DelayOff_B1.c: 78: setTxData();
 15281  0B54  318F  2747  318A   	fcall	_setTxData
 15282                           
 15283                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 15284  0B57  3064               	movlw	100
 15285  0B58  0020               	movlb	0	; select bank0
 15286  0B59  00A9               	movwf	setBuz@time
 15287  0B5A  3000               	movlw	0
 15288  0B5B  00AA               	movwf	setBuz@time+1
 15289  0B5C  3001               	movlw	1
 15290  0B5D  3195  25BE         	fcall	_setBuz
 15291  0B5F  0008               	return
 15292  0B60                     __end_of_DlyOff_Main:	
 15293                           
 15294                           	psect	text99
 15295  0F47                     __ptext99:	
 15296 ;; *************** function _setTxData *****************
 15297 ;; Defined at:
 15298 ;;		line 176 in file "../src/RF_Control_B1.c"
 15299 ;; Parameters:    Size  Location     Type
 15300 ;;		None
 15301 ;; Auto vars:     Size  Location     Type
 15302 ;;  i               1    0        unsigned char 
 15303 ;; Return value:  Size  Location     Type
 15304 ;;		None               void
 15305 ;; Registers used:
 15306 ;;		wreg, fsr1l, fsr1h
 15307 ;; Tracked objects:
 15308 ;;		On entry : 0/0
 15309 ;;		On exit  : 0/0
 15310 ;;		Unchanged: 0/0
 15311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15316 ;;Total ram usage:        1 bytes
 15317 ;; Hardware stack levels used:    1
 15318 ;; Hardware stack levels required when called:    5
 15319 ;; This function calls:
 15320 ;;		Nothing
 15321 ;; This function is called by:
 15322 ;;		_DlyOff_Main
 15323 ;;		_setDimmerLights_Adj
 15324 ;;		_setControl_Lights_Table
 15325 ;;		_setRFSW_Control
 15326 ;;		_setRFSW_AdjControl
 15327 ;;		_Sw_DimmerOnFunc
 15328 ;;		_Sw_DimmerOffFunc
 15329 ;; This function uses a non-reentrant model
 15330 ;;
 15331                           
 15332                           
 15333                           ;psect for function _setTxData
 15334  0F47                     _setTxData:	
 15335                           
 15336                           ;RF_Control_B1.c: 177: char i;
 15337                           ;RF_Control_B1.c: 178: if (RF1.Enable == 1) {
 15338                           
 15339                           ;incstack = 0
 15340                           ; Regs used in _setTxData: [wregfsr1]
 15341  0F47  0021               	movlb	1	; select bank1
 15342  0F48  1C3E               	btfss	_RF1^(0+128),0
 15343  0F49  0008               	return
 15344                           
 15345                           ;RF_Control_B1.c: 180: RF1.TransceiveGO = 1;
 15346  0F4A  153E               	bsf	_RF1^(0+128),2
 15347                           
 15348                           ;RF_Control_B1.c: 190: RF_Data[0] = 0x63;
 15349  0F4B  3063               	movlw	99
 15350  0F4C  0020               	movlb	0	; select bank0
 15351  0F4D  00A0               	movwf	??_setTxData
 15352  0F4E  0820               	movf	??_setTxData,w
 15353  0F4F  0022               	movlb	2	; select bank2
 15354  0F50  00A0               	movwf	_RF_Data^(0+256)
 15355                           
 15356                           ;RF_Control_B1.c: 191: RF_Data[1] = 0x02;
 15357  0F51  3002               	movlw	2
 15358  0F52  0020               	movlb	0	; select bank0
 15359  0F53  00A0               	movwf	??_setTxData
 15360  0F54  0820               	movf	??_setTxData,w
 15361  0F55  0022               	movlb	2	; select bank2
 15362  0F56  00A1               	movwf	(_RF_Data^(0+256)+1)
 15363                           
 15364                           ;RF_Control_B1.c: 192: RF_Data[2] = product->Data[2];
 15365  0F57  0020               	movlb	0	; select bank0
 15366  0F58  086E               	movf	_product,w
 15367  0F59  0086               	movwf	6
 15368  0F5A  3002               	movlw	2	; select bank4/5
 15369  0F5B  0087               	movwf	7
 15370  0F5C  3002               	movlw	2	; select bank4/5
 15371  0F5D  3F42               	moviw [2]fsr1
 15372  0F5E  0022               	movlb	2	; select bank2
 15373  0F5F  00A2               	movwf	(_RF_Data^(0+256)+2)
 15374                           
 15375                           ;RF_Control_B1.c: 193: RF_Data[3] = product->Data[3];
 15376  0F60  0020               	movlb	0	; select bank0
 15377  0F61  086E               	movf	_product,w
 15378  0F62  0086               	movwf	6
 15379  0F63  3002               	movlw	2	; select bank4/5
 15380  0F64  0087               	movwf	7
 15381  0F65  3002               	movlw	2	; select bank4/5
 15382  0F66  3F43               	moviw [3]fsr1
 15383  0F67  0022               	movlb	2	; select bank2
 15384  0F68  00A3               	movwf	(_RF_Data^(0+256)+3)
 15385                           
 15386                           ;RF_Control_B1.c: 194: RF_Data[4] = product->Data[4];
 15387  0F69  0020               	movlb	0	; select bank0
 15388  0F6A  086E               	movf	_product,w
 15389  0F6B  0086               	movwf	6
 15390  0F6C  3002               	movlw	2	; select bank4/5
 15391  0F6D  0087               	movwf	7
 15392  0F6E  3002               	movlw	2	; select bank4/5
 15393  0F6F  3F44               	moviw [4]fsr1
 15394  0F70  0022               	movlb	2	; select bank2
 15395  0F71  00A4               	movwf	(_RF_Data^(0+256)+4)
 15396                           
 15397                           ;RF_Control_B1.c: 195: RF_Data[5] = product->Data[5];
 15398  0F72  0020               	movlb	0	; select bank0
 15399  0F73  086E               	movf	_product,w
 15400  0F74  0086               	movwf	6
 15401  0F75  3002               	movlw	2	; select bank4/5
 15402  0F76  0087               	movwf	7
 15403  0F77  3002               	movlw	2	; select bank4/5
 15404  0F78  3F45               	moviw [5]fsr1
 15405  0F79  0022               	movlb	2	; select bank2
 15406  0F7A  00A5               	movwf	(_RF_Data^(0+256)+5)
 15407                           
 15408                           ;RF_Control_B1.c: 196: RF_Data[6] = product->Data[6];
 15409  0F7B  0020               	movlb	0	; select bank0
 15410  0F7C  086E               	movf	_product,w
 15411  0F7D  0086               	movwf	6
 15412  0F7E  3002               	movlw	2	; select bank4/5
 15413  0F7F  0087               	movwf	7
 15414  0F80  3002               	movlw	2	; select bank4/5
 15415  0F81  3F46               	moviw [6]fsr1
 15416  0F82  0022               	movlb	2	; select bank2
 15417  0F83  00A6               	movwf	(_RF_Data^(0+256)+6)
 15418                           
 15419                           ;RF_Control_B1.c: 197: RF_Data[7] = product->Data[7];
 15420  0F84  0020               	movlb	0	; select bank0
 15421  0F85  086E               	movf	_product,w
 15422  0F86  0086               	movwf	6
 15423  0F87  3002               	movlw	2	; select bank4/5
 15424  0F88  0087               	movwf	7
 15425  0F89  3002               	movlw	2	; select bank4/5
 15426  0F8A  3F47               	moviw [7]fsr1
 15427  0F8B  0022               	movlb	2	; select bank2
 15428  0F8C  00A7               	movwf	(_RF_Data^(0+256)+7)
 15429                           
 15430                           ;RF_Control_B1.c: 198: RF_Data[8] = product->Data[8];
 15431  0F8D  0020               	movlb	0	; select bank0
 15432  0F8E  086E               	movf	_product,w
 15433  0F8F  0086               	movwf	6
 15434  0F90  3002               	movlw	2	; select bank4/5
 15435  0F91  0087               	movwf	7
 15436  0F92  3002               	movlw	2	; select bank4/5
 15437  0F93  3F48               	moviw [8]fsr1
 15438  0F94  0022               	movlb	2	; select bank2
 15439  0F95  00A8               	movwf	(_RF_Data^(0+256)+8)
 15440                           
 15441                           ;RF_Control_B1.c: 199: RF_Data[9] = product->Data[9];
 15442  0F96  0020               	movlb	0	; select bank0
 15443  0F97  086E               	movf	_product,w
 15444  0F98  0086               	movwf	6
 15445  0F99  3002               	movlw	2	; select bank4/5
 15446  0F9A  0087               	movwf	7
 15447  0F9B  3002               	movlw	2	; select bank4/5
 15448  0F9C  3F49               	moviw [9]fsr1
 15449  0F9D  0022               	movlb	2	; select bank2
 15450  0F9E  00A9               	movwf	(_RF_Data^(0+256)+9)
 15451                           
 15452                           ;RF_Control_B1.c: 200: RF_Data[10] = product->Data[10];
 15453  0F9F  0020               	movlb	0	; select bank0
 15454  0FA0  086E               	movf	_product,w
 15455  0FA1  0086               	movwf	6
 15456  0FA2  3002               	movlw	2	; select bank4/5
 15457  0FA3  0087               	movwf	7
 15458  0FA4  3002               	movlw	2	; select bank4/5
 15459  0FA5  3F4A               	moviw [10]fsr1
 15460  0FA6  0022               	movlb	2	; select bank2
 15461  0FA7  00AA               	movwf	(_RF_Data^(0+256)+10)
 15462                           
 15463                           ;RF_Control_B1.c: 201: RF_Data[11] = product->Data[11];
 15464  0FA8  0020               	movlb	0	; select bank0
 15465  0FA9  086E               	movf	_product,w
 15466  0FAA  0086               	movwf	6
 15467  0FAB  3002               	movlw	2	; select bank4/5
 15468  0FAC  0087               	movwf	7
 15469  0FAD  3002               	movlw	2	; select bank4/5
 15470  0FAE  3F4B               	moviw [11]fsr1
 15471  0FAF  0022               	movlb	2	; select bank2
 15472  0FB0  00AB               	movwf	(_RF_Data^(0+256)+11)
 15473                           
 15474                           ;RF_Control_B1.c: 202: RF_Data[12] = product->Data[12];
 15475  0FB1  0020               	movlb	0	; select bank0
 15476  0FB2  086E               	movf	_product,w
 15477  0FB3  0086               	movwf	6
 15478  0FB4  3002               	movlw	2	; select bank4/5
 15479  0FB5  0087               	movwf	7
 15480  0FB6  3002               	movlw	2	; select bank4/5
 15481  0FB7  3F4C               	moviw [12]fsr1
 15482  0FB8  0022               	movlb	2	; select bank2
 15483  0FB9  00AC               	movwf	(_RF_Data^(0+256)+12)
 15484                           
 15485                           ;RF_Control_B1.c: 203: RF_Data[13] = product->Data[13];
 15486  0FBA  0020               	movlb	0	; select bank0
 15487  0FBB  086E               	movf	_product,w
 15488  0FBC  0086               	movwf	6
 15489  0FBD  3002               	movlw	2	; select bank4/5
 15490  0FBE  0087               	movwf	7
 15491  0FBF  3002               	movlw	2	; select bank4/5
 15492  0FC0  3F4D               	moviw [13]fsr1
 15493  0FC1  0022               	movlb	2	; select bank2
 15494  0FC2  00AD               	movwf	(_RF_Data^(0+256)+13)
 15495                           
 15496                           ;RF_Control_B1.c: 204: RF_Data[14] = product->Data[14];
 15497  0FC3  0020               	movlb	0	; select bank0
 15498  0FC4  086E               	movf	_product,w
 15499  0FC5  0086               	movwf	6
 15500  0FC6  3002               	movlw	2	; select bank4/5
 15501  0FC7  0087               	movwf	7
 15502  0FC8  3002               	movlw	2	; select bank4/5
 15503  0FC9  3F4E               	moviw [14]fsr1
 15504  0FCA  0022               	movlb	2	; select bank2
 15505  0FCB  00AE               	movwf	(_RF_Data^(0+256)+14)
 15506                           
 15507                           ;RF_Control_B1.c: 205: RF_Data[15] = product->Data[15];
 15508  0FCC  0020               	movlb	0	; select bank0
 15509  0FCD  086E               	movf	_product,w
 15510  0FCE  0086               	movwf	6
 15511  0FCF  3002               	movlw	2	; select bank4/5
 15512  0FD0  0087               	movwf	7
 15513  0FD1  3002               	movlw	2	; select bank4/5
 15514  0FD2  3F4F               	moviw [15]fsr1
 15515  0FD3  0022               	movlb	2	; select bank2
 15516  0FD4  00AF               	movwf	(_RF_Data^(0+256)+15)
 15517                           
 15518                           ;RF_Control_B1.c: 206: RF_Data[16] = product->Data[16];
 15519  0FD5  0020               	movlb	0	; select bank0
 15520  0FD6  086E               	movf	_product,w
 15521  0FD7  0086               	movwf	6
 15522  0FD8  3002               	movlw	2	; select bank4/5
 15523  0FD9  0087               	movwf	7
 15524  0FDA  3002               	movlw	2	; select bank4/5
 15525  0FDB  3F50               	moviw [16]fsr1
 15526  0FDC  0022               	movlb	2	; select bank2
 15527  0FDD  00B0               	movwf	(_RF_Data^(0+256)+16)
 15528                           
 15529                           ;RF_Control_B1.c: 207: RF_Data[17] = product->Data[17];
 15530  0FDE  0020               	movlb	0	; select bank0
 15531  0FDF  086E               	movf	_product,w
 15532  0FE0  0086               	movwf	6
 15533  0FE1  3002               	movlw	2	; select bank4/5
 15534  0FE2  0087               	movwf	7
 15535  0FE3  3002               	movlw	2	; select bank4/5
 15536  0FE4  3F51               	moviw [17]fsr1
 15537  0FE5  0022               	movlb	2	; select bank2
 15538  0FE6  00B1               	movwf	(_RF_Data^(0+256)+17)
 15539                           
 15540                           ;RF_Control_B1.c: 208: RF_Data[18] = product->Data[18];
 15541  0FE7  0020               	movlb	0	; select bank0
 15542  0FE8  086E               	movf	_product,w
 15543  0FE9  0086               	movwf	6
 15544  0FEA  3002               	movlw	2	; select bank4/5
 15545  0FEB  0087               	movwf	7
 15546  0FEC  3002               	movlw	2	; select bank4/5
 15547  0FED  3F52               	moviw [18]fsr1
 15548  0FEE  0022               	movlb	2	; select bank2
 15549  0FEF  00B2               	movwf	(_RF_Data^(0+256)+18)
 15550                           
 15551                           ;RF_Control_B1.c: 209: RF_Data[19] = product->Data[19];
 15552  0FF0  0020               	movlb	0	; select bank0
 15553  0FF1  086E               	movf	_product,w
 15554  0FF2  0086               	movwf	6
 15555  0FF3  3002               	movlw	2	; select bank4/5
 15556  0FF4  0087               	movwf	7
 15557  0FF5  3002               	movlw	2	; select bank4/5
 15558  0FF6  3F53               	moviw [19]fsr1
 15559  0FF7  0022               	movlb	2	; select bank2
 15560  0FF8  00B3               	movwf	(_RF_Data^(0+256)+19)
 15561                           
 15562                           ;RF_Control_B1.c: 210: RF_Data[20] = 210;
 15563  0FF9  30D2               	movlw	210
 15564  0FFA  0020               	movlb	0	; select bank0
 15565  0FFB  00A0               	movwf	??_setTxData
 15566  0FFC  0820               	movf	??_setTxData,w
 15567  0FFD  0022               	movlb	2	; select bank2
 15568  0FFE  00B4               	movwf	(_RF_Data^(0+256)+20)
 15569  0FFF  0008               	return
 15570  1000                     __end_of_setTxData:	
 15571                           
 15572                           	psect	text100
 15573  1B68                     __ptext100:	
 15574 ;; *************** function _setSw_Status *****************
 15575 ;; Defined at:
 15576 ;;		line 111 in file "../src/Switch_B1.c"
 15577 ;; Parameters:    Size  Location     Type
 15578 ;;  sw              1    wreg     unsigned char 
 15579 ;;  command         1    1[BANK0 ] unsigned char 
 15580 ;; Auto vars:     Size  Location     Type
 15581 ;;  sw              1    2[BANK0 ] unsigned char 
 15582 ;; Return value:  Size  Location     Type
 15583 ;;		None               void
 15584 ;; Registers used:
 15585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15586 ;; Tracked objects:
 15587 ;;		On entry : 0/0
 15588 ;;		On exit  : 0/0
 15589 ;;		Unchanged: 0/0
 15590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15591 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15594 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15595 ;;Total ram usage:        2 bytes
 15596 ;; Hardware stack levels used:    1
 15597 ;; Hardware stack levels required when called:    6
 15598 ;; This function calls:
 15599 ;;		_SwPointSelect
 15600 ;; This function is called by:
 15601 ;;		_DlyOff_Main
 15602 ;;		_setDimmerLights_ERROR
 15603 ;;		_setControl_Lights_Table
 15604 ;;		_setRFSW_Control
 15605 ;; This function uses a non-reentrant model
 15606 ;;
 15607                           
 15608                           
 15609                           ;psect for function _setSw_Status
 15610  1B68                     _setSw_Status:	
 15611                           
 15612                           ;incstack = 0
 15613                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15614                           ;setSw_Status@sw stored from wreg
 15615  1B68  0020               	movlb	0	; select bank0
 15616  1B69  00A2               	movwf	setSw_Status@sw
 15617                           
 15618                           ;Switch_B1.c: 112: SwPointSelect(sw);
 15619  1B6A  0822               	movf	setSw_Status@sw,w
 15620  1B6B  319C  24AE         	fcall	_SwPointSelect
 15621                           
 15622                           ;Switch_B1.c: 113: Sw->Status = command;
 15623  1B6D  0020               	movlb	0	; select bank0
 15624  1B6E  086C               	movf	_Sw,w
 15625  1B6F  0086               	movwf	6
 15626  1B70  086D               	movf	_Sw+1,w
 15627  1B71  0087               	movwf	7
 15628  1B72  0821               	movf	setSw_Status@command,w
 15629  1B73  1301               	bcf	1,6
 15630  1B74  1D03               	skipz
 15631  1B75  1701               	bsf	1,6
 15632  1B76  0008               	return
 15633  1B77                     __end_of_setSw_Status:	
 15634                           
 15635                           	psect	text101
 15636  1CAE                     __ptext101:	
 15637 ;; *************** function _SwPointSelect *****************
 15638 ;; Defined at:
 15639 ;;		line 21 in file "../src/Switch_B1.c"
 15640 ;; Parameters:    Size  Location     Type
 15641 ;;  sw              1    wreg     unsigned char 
 15642 ;; Auto vars:     Size  Location     Type
 15643 ;;  sw              1    0[BANK0 ] unsigned char 
 15644 ;; Return value:  Size  Location     Type
 15645 ;;		None               void
 15646 ;; Registers used:
 15647 ;;		wreg, status,2, status,0
 15648 ;; Tracked objects:
 15649 ;;		On entry : 0/0
 15650 ;;		On exit  : 0/0
 15651 ;;		Unchanged: 0/0
 15652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15656 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15657 ;;Total ram usage:        1 bytes
 15658 ;; Hardware stack levels used:    1
 15659 ;; Hardware stack levels required when called:    5
 15660 ;; This function calls:
 15661 ;;		Nothing
 15662 ;; This function is called by:
 15663 ;;		_setSw_Enable
 15664 ;;		_setSw_Status
 15665 ;;		_setSw_Main
 15666 ;;		_Sw_Detect
 15667 ;; This function uses a non-reentrant model
 15668 ;;
 15669                           
 15670                           
 15671                           ;psect for function _SwPointSelect
 15672  1CAE                     _SwPointSelect:	
 15673                           
 15674                           ;incstack = 0
 15675                           ; Regs used in _SwPointSelect: [wreg+status,2+status,0]
 15676                           ;SwPointSelect@sw stored from wreg
 15677  1CAE  0020               	movlb	0	; select bank0
 15678  1CAF  00A0               	movwf	SwPointSelect@sw
 15679                           
 15680                           ;Switch_B1.c: 24: if (sw == 1) {
 15681  1CB0  0820               	movf	SwPointSelect@sw,w
 15682  1CB1  3A01               	xorlw	1
 15683  1CB2  1D03               	skipz
 15684  1CB3  2CB9               	goto	l8580
 15685                           
 15686                           ;Switch_B1.c: 25: Sw = &Sw1;
 15687  1CB4  30E6               	movlw	low _Sw1
 15688  1CB5  00EC               	movwf	_Sw
 15689  1CB6  3001               	movlw	high _Sw1
 15690  1CB7  00ED               	movwf	_Sw+1
 15691                           
 15692                           ;Switch_B1.c: 26: }
 15693  1CB8  0008               	return
 15694  1CB9                     l8580:	
 15695                           
 15696                           ;Switch_B1.c: 29: else if (sw == 2) {
 15697  1CB9  0820               	movf	SwPointSelect@sw,w
 15698  1CBA  3A02               	xorlw	2
 15699  1CBB  1D03               	skipz
 15700  1CBC  0008               	return
 15701                           
 15702                           ;Switch_B1.c: 30: Sw = &Sw2;
 15703  1CBD  3045               	movlw	low _Sw2
 15704  1CBE  00EC               	movwf	_Sw
 15705  1CBF  3002               	movlw	high _Sw2
 15706  1CC0  00ED               	movwf	_Sw+1
 15707  1CC1  0008               	return
 15708  1CC2                     __end_of_SwPointSelect:	
 15709                           
 15710                           	psect	text102
 15711  08AB                     __ptext102:	
 15712 ;; *************** function _setRF_DimmerLights *****************
 15713 ;; Defined at:
 15714 ;;		line 440 in file "../src/RF_Control_B1.c"
 15715 ;; Parameters:    Size  Location     Type
 15716 ;;  lights          1    wreg     unsigned char 
 15717 ;;  on              1   61[BANK0 ] unsigned char 
 15718 ;; Auto vars:     Size  Location     Type
 15719 ;;  lights          1   65[BANK0 ] unsigned char 
 15720 ;;  status          1   64[BANK0 ] unsigned char 
 15721 ;; Return value:  Size  Location     Type
 15722 ;;		None               void
 15723 ;; Registers used:
 15724 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15725 ;; Tracked objects:
 15726 ;;		On entry : 0/0
 15727 ;;		On exit  : 0/0
 15728 ;;		Unchanged: 0/0
 15729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15730 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15731 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15732 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15733 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15734 ;;Total ram usage:        5 bytes
 15735 ;; Hardware stack levels used:    1
 15736 ;; Hardware stack levels required when called:    8
 15737 ;; This function calls:
 15738 ;;		_setPercentValue
 15739 ;; This function is called by:
 15740 ;;		_DlyOff_Main
 15741 ;;		_setDimmerLights_Adj
 15742 ;;		_setRFSW_Control
 15743 ;;		_Sw_DimmerOnFunc
 15744 ;;		_Sw_DimmerOffFunc
 15745 ;; This function uses a non-reentrant model
 15746 ;;
 15747                           
 15748                           
 15749                           ;psect for function _setRF_DimmerLights
 15750  08AB                     _setRF_DimmerLights:	
 15751                           
 15752                           ;incstack = 0
 15753                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15754                           ;setRF_DimmerLights@lights stored from wreg
 15755  08AB  0020               	movlb	0	; select bank0
 15756  08AC  00E1               	movwf	setRF_DimmerLights@lights
 15757                           
 15758                           ;RF_Control_B1.c: 441: char status;
 15759                           ;RF_Control_B1.c: 442: status = 1;
 15760  08AD  01E0               	clrf	setRF_DimmerLights@status
 15761  08AE  0AE0               	incf	setRF_DimmerLights@status,f
 15762                           
 15763                           ;RF_Control_B1.c: 443: status <<= (lights - 1);
 15764  08AF  0861               	movf	setRF_DimmerLights@lights,w
 15765  08B0  3EFF               	addlw	-1
 15766  08B1  0A89               	incf	9,f
 15767  08B2  28B5               	goto	u8750
 15768  08B3                     u8755:	
 15769  08B3  1003               	clrc
 15770  08B4  0DE0               	rlf	setRF_DimmerLights@status,f
 15771  08B5                     u8750:	
 15772  08B5  3EFF               	addlw	-1
 15773  08B6  1D03               	skipz
 15774  08B7  28B3               	goto	u8755
 15775                           
 15776                           ;RF_Control_B1.c: 444: product->Data[11]=lights;
 15777  08B8  0861               	movf	setRF_DimmerLights@lights,w
 15778  08B9  00DE               	movwf	??_setRF_DimmerLights
 15779  08BA  086E               	movf	_product,w
 15780  08BB  3E0B               	addlw	11
 15781  08BC  0086               	movwf	6
 15782  08BD  3002               	movlw	2	; select bank4/5
 15783  08BE  0087               	movwf	7
 15784  08BF  085E               	movf	??_setRF_DimmerLights,w
 15785  08C0  0081               	movwf	1
 15786                           
 15787                           ;RF_Control_B1.c: 447: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 15788  08C1  3020               	movlw	32
 15789  08C2  3193  234C  3188   	fcall	_setPercentValue
 15790  08C5  0020               	movlb	0	; select bank0
 15791  08C6  00DE               	movwf	??_setRF_DimmerLights
 15792  08C7  0861               	movf	setRF_DimmerLights@lights,w
 15793  08C8  3E14               	addlw	20
 15794  08C9  076E               	addwf	_product,w
 15795  08CA  00DF               	movwf	??_setRF_DimmerLights+1
 15796  08CB  085F               	movf	??_setRF_DimmerLights+1,w
 15797  08CC  0086               	movwf	6
 15798  08CD  3002               	movlw	2	; select bank4/5
 15799  08CE  0087               	movwf	7
 15800  08CF  085E               	movf	??_setRF_DimmerLights,w
 15801  08D0  0081               	movwf	1
 15802                           
 15803                           ;RF_Control_B1.c: 450: product->Data[9]=product->Data[20 + lights];
 15804  08D1  0861               	movf	setRF_DimmerLights@lights,w
 15805  08D2  3E14               	addlw	20
 15806  08D3  076E               	addwf	_product,w
 15807  08D4  00DE               	movwf	??_setRF_DimmerLights
 15808  08D5  085E               	movf	??_setRF_DimmerLights,w
 15809  08D6  0086               	movwf	6
 15810  08D7  3002               	movlw	2	; select bank4/5
 15811  08D8  0087               	movwf	7
 15812  08D9  0801               	movf	1,w
 15813  08DA  00DF               	movwf	??_setRF_DimmerLights+1
 15814  08DB  086E               	movf	_product,w
 15815  08DC  3E09               	addlw	9
 15816  08DD  0086               	movwf	6
 15817  08DE  3002               	movlw	2	; select bank4/5
 15818  08DF  0087               	movwf	7
 15819  08E0  085F               	movf	??_setRF_DimmerLights+1,w
 15820  08E1  0081               	movwf	1
 15821                           
 15822                           ;RF_Control_B1.c: 451: product->Data[17]=product->Data[26 + lights];
 15823  08E2  0861               	movf	setRF_DimmerLights@lights,w
 15824  08E3  3E1A               	addlw	26
 15825  08E4  076E               	addwf	_product,w
 15826  08E5  00DE               	movwf	??_setRF_DimmerLights
 15827  08E6  085E               	movf	??_setRF_DimmerLights,w
 15828  08E7  0086               	movwf	6
 15829  08E8  3002               	movlw	2	; select bank4/5
 15830  08E9  0087               	movwf	7
 15831  08EA  0801               	movf	1,w
 15832  08EB  00DF               	movwf	??_setRF_DimmerLights+1
 15833  08EC  086E               	movf	_product,w
 15834  08ED  3E11               	addlw	17
 15835  08EE  0086               	movwf	6
 15836  08EF  3002               	movlw	2	; select bank4/5
 15837  08F0  0087               	movwf	7
 15838  08F1  085F               	movf	??_setRF_DimmerLights+1,w
 15839  08F2  0081               	movwf	1
 15840                           
 15841                           ;RF_Control_B1.c: 452: if (on == 1) {
 15842  08F3  085D               	movf	setRF_DimmerLights@on,w
 15843  08F4  3A01               	xorlw	1
 15844  08F5  1D03               	skipz
 15845  08F6  2907               	goto	l8680
 15846                           
 15847                           ;RF_Control_B1.c: 453: product->Data[15]=(product->Data[15] | status);
 15848  08F7  086E               	movf	_product,w
 15849  08F8  3E0F               	addlw	15
 15850  08F9  0086               	movwf	6
 15851  08FA  3002               	movlw	2	; select bank4/5
 15852  08FB  0087               	movwf	7
 15853  08FC  0801               	movf	1,w
 15854  08FD  0460               	iorwf	setRF_DimmerLights@status,w
 15855  08FE  00DE               	movwf	??_setRF_DimmerLights
 15856  08FF  086E               	movf	_product,w
 15857  0900  3E0F               	addlw	15
 15858  0901  0086               	movwf	6
 15859  0902  3002               	movlw	2	; select bank4/5
 15860  0903  0087               	movwf	7
 15861  0904  085E               	movf	??_setRF_DimmerLights,w
 15862  0905  0081               	movwf	1
 15863                           
 15864                           ;RF_Control_B1.c: 454: } else {
 15865  0906  0008               	return
 15866  0907                     l8680:	
 15867                           
 15868                           ;RF_Control_B1.c: 455: product->Data[15]=(product->Data[15]&(~status));
 15869  0907  086E               	movf	_product,w
 15870  0908  3E0F               	addlw	15
 15871  0909  0086               	movwf	6
 15872  090A  3002               	movlw	2	; select bank4/5
 15873  090B  0087               	movwf	7
 15874  090C  0960               	comf	setRF_DimmerLights@status,w
 15875  090D  0501               	andwf	1,w
 15876  090E  00DE               	movwf	??_setRF_DimmerLights
 15877  090F  086E               	movf	_product,w
 15878  0910  3E0F               	addlw	15
 15879  0911  0086               	movwf	6
 15880  0912  3002               	movlw	2	; select bank4/5
 15881  0913  0087               	movwf	7
 15882  0914  085E               	movf	??_setRF_DimmerLights,w
 15883  0915  0081               	movwf	1
 15884  0916  0008               	return
 15885  0917                     __end_of_setRF_DimmerLights:	
 15886                           
 15887                           	psect	text103
 15888  134C                     __ptext103:	
 15889 ;; *************** function _setPercentValue *****************
 15890 ;; Defined at:
 15891 ;;		line 779 in file "../src/Dimmer_B1.c"
 15892 ;; Parameters:    Size  Location     Type
 15893 ;;  value           1    wreg     unsigned char 
 15894 ;; Auto vars:     Size  Location     Type
 15895 ;;  value           1   57[BANK0 ] unsigned char 
 15896 ;;  i               3   58[BANK0 ] float 
 15897 ;; Return value:  Size  Location     Type
 15898 ;;                  1    wreg      unsigned char 
 15899 ;; Registers used:
 15900 ;;		wreg, status,2, status,0, pclath, cstack
 15901 ;; Tracked objects:
 15902 ;;		On entry : 0/0
 15903 ;;		On exit  : 0/0
 15904 ;;		Unchanged: 0/0
 15905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15907 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15909 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15910 ;;Total ram usage:        4 bytes
 15911 ;; Hardware stack levels used:    1
 15912 ;; Hardware stack levels required when called:    7
 15913 ;; This function calls:
 15914 ;;		___awtoft
 15915 ;;		___ftdiv
 15916 ;;		___fttol
 15917 ;; This function is called by:
 15918 ;;		_Flash_Memory_Initialization
 15919 ;;		_setRF_DimmerLights
 15920 ;; This function uses a non-reentrant model
 15921 ;;
 15922                           
 15923                           
 15924                           ;psect for function _setPercentValue
 15925  134C                     _setPercentValue:	
 15926                           
 15927                           ;incstack = 0
 15928                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15929                           ;setPercentValue@value stored from wreg
 15930  134C  0020               	movlb	0	; select bank0
 15931  134D  00D9               	movwf	setPercentValue@value
 15932                           
 15933                           ;Dimmer_B1.c: 781: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 15934  134E  3000               	movlw	0
 15935  134F  00DA               	movwf	setPercentValue@i
 15936  1350  30E0               	movlw	224
 15937  1351  00DB               	movwf	setPercentValue@i+1
 15938  1352  3041               	movlw	65
 15939  1353  00DC               	movwf	setPercentValue@i+2
 15940                           
 15941                           ;Dimmer_B1.c: 782: i /= 100;
 15942  1354  3000               	movlw	0
 15943  1355  00AE               	movwf	___ftdiv@f2
 15944  1356  30C8               	movlw	200
 15945  1357  00AF               	movwf	___ftdiv@f2+1
 15946  1358  3042               	movlw	66
 15947  1359  00B0               	movwf	___ftdiv@f2+2
 15948  135A  085A               	movf	setPercentValue@i,w
 15949  135B  00B1               	movwf	___ftdiv@f1
 15950  135C  085B               	movf	setPercentValue@i+1,w
 15951  135D  00B2               	movwf	___ftdiv@f1+1
 15952  135E  085C               	movf	setPercentValue@i+2,w
 15953  135F  00B3               	movwf	___ftdiv@f1+2
 15954  1360  3187  2753  3193   	fcall	___ftdiv
 15955  1363  0020               	movlb	0	; select bank0
 15956  1364  082E               	movf	?___ftdiv,w
 15957  1365  00DA               	movwf	setPercentValue@i
 15958  1366  082F               	movf	?___ftdiv+1,w
 15959  1367  00DB               	movwf	setPercentValue@i+1
 15960  1368  0830               	movf	?___ftdiv+2,w
 15961  1369  00DC               	movwf	setPercentValue@i+2
 15962                           
 15963                           ;Dimmer_B1.c: 783: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 15964  136A  0859               	movf	setPercentValue@value,w
 15965  136B  3EE0               	addlw	224
 15966  136C  00A8               	movwf	___awtoft@c
 15967  136D  30FF               	movlw	255
 15968  136E  1803               	skipnc
 15969  136F  3000               	movlw	0
 15970  1370  00A9               	movwf	___awtoft@c+1
 15971  1371  319E  26D9  3193   	fcall	___awtoft
 15972  1374  0020               	movlb	0	; select bank0
 15973  1375  0828               	movf	?___awtoft,w
 15974  1376  00B1               	movwf	___ftdiv@f1
 15975  1377  0829               	movf	?___awtoft+1,w
 15976  1378  00B2               	movwf	___ftdiv@f1+1
 15977  1379  082A               	movf	?___awtoft+2,w
 15978  137A  00B3               	movwf	___ftdiv@f1+2
 15979  137B  085A               	movf	setPercentValue@i,w
 15980  137C  00AE               	movwf	___ftdiv@f2
 15981  137D  085B               	movf	setPercentValue@i+1,w
 15982  137E  00AF               	movwf	___ftdiv@f2+1
 15983  137F  085C               	movf	setPercentValue@i+2,w
 15984  1380  00B0               	movwf	___ftdiv@f2+2
 15985  1381  3187  2753  3193   	fcall	___ftdiv
 15986  1384  0020               	movlb	0	; select bank0
 15987  1385  082E               	movf	?___ftdiv,w
 15988  1386  00CB               	movwf	___fttol@f1
 15989  1387  082F               	movf	?___ftdiv+1,w
 15990  1388  00CC               	movwf	___fttol@f1+1
 15991  1389  0830               	movf	?___ftdiv+2,w
 15992  138A  00CD               	movwf	___fttol@f1+2
 15993  138B  318C  2469         	fcall	___fttol
 15994  138D  0020               	movlb	0	; select bank0
 15995  138E  034B               	decf	?___fttol,w
 15996  138F  3AFF               	xorlw	255
 15997  1390  3E64               	addlw	100
 15998  1391  0008               	return
 15999  1392                     __end_of_setPercentValue:	
 16000                           
 16001                           	psect	text104
 16002  0C69                     __ptext104:	
 16003 ;; *************** function ___fttol *****************
 16004 ;; Defined at:
 16005 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16006 ;; Parameters:    Size  Location     Type
 16007 ;;  f1              3   43[BANK0 ] float 
 16008 ;; Auto vars:     Size  Location     Type
 16009 ;;  lval            4   52[BANK0 ] unsigned long 
 16010 ;;  exp1            1   56[BANK0 ] unsigned char 
 16011 ;;  sign1           1   51[BANK0 ] unsigned char 
 16012 ;; Return value:  Size  Location     Type
 16013 ;;                  4   43[BANK0 ] long 
 16014 ;; Registers used:
 16015 ;;		wreg, status,2, status,0
 16016 ;; Tracked objects:
 16017 ;;		On entry : 0/0
 16018 ;;		On exit  : 0/0
 16019 ;;		Unchanged: 0/0
 16020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16021 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16022 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16023 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16024 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16025 ;;Total ram usage:       14 bytes
 16026 ;; Hardware stack levels used:    1
 16027 ;; Hardware stack levels required when called:    5
 16028 ;; This function calls:
 16029 ;;		Nothing
 16030 ;; This function is called by:
 16031 ;;		_getPercentValue
 16032 ;;		_setPercentValue
 16033 ;; This function uses a non-reentrant model
 16034 ;;
 16035                           
 16036                           
 16037                           ;psect for function ___fttol
 16038  0C69                     ___fttol:	
 16039                           
 16040                           ;incstack = 0
 16041                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16042  0C69  0020               	movlb	0	; select bank0
 16043  0C6A  084B               	movf	___fttol@f1,w
 16044  0C6B  00CF               	movwf	??___fttol
 16045  0C6C  084C               	movf	___fttol@f1+1,w
 16046  0C6D  00D0               	movwf	??___fttol+1
 16047  0C6E  084D               	movf	___fttol@f1+2,w
 16048  0C6F  00D1               	movwf	??___fttol+2
 16049  0C70  1003               	clrc
 16050  0C71  0D50               	rlf	??___fttol+1,w
 16051  0C72  0D51               	rlf	??___fttol+2,w
 16052  0C73  00D2               	movwf	??___fttol+3
 16053  0C74  0852               	movf	??___fttol+3,w
 16054  0C75  00D8               	movwf	___fttol@exp1
 16055  0C76  08D8               	movf	___fttol@exp1,f
 16056  0C77  1D03               	skipz
 16057  0C78  2C82               	goto	l6072
 16058  0C79  3000               	movlw	0
 16059  0C7A  00CE               	movwf	?___fttol+3
 16060  0C7B  3000               	movlw	0
 16061  0C7C  00CD               	movwf	?___fttol+2
 16062  0C7D  3000               	movlw	0
 16063  0C7E  00CC               	movwf	?___fttol+1
 16064  0C7F  3000               	movlw	0
 16065  0C80  00CB               	movwf	?___fttol
 16066  0C81  0008               	return
 16067  0C82                     l6072:	
 16068  0C82  084B               	movf	___fttol@f1,w
 16069  0C83  00CF               	movwf	??___fttol
 16070  0C84  084C               	movf	___fttol@f1+1,w
 16071  0C85  00D0               	movwf	??___fttol+1
 16072  0C86  084D               	movf	___fttol@f1+2,w
 16073  0C87  00D1               	movwf	??___fttol+2
 16074  0C88  3017               	movlw	23
 16075  0C89                     u4795:	
 16076  0C89  36D1               	lsrf	??___fttol+2,f
 16077  0C8A  0CD0               	rrf	??___fttol+1,f
 16078  0C8B  0CCF               	rrf	??___fttol,f
 16079  0C8C  0B89               	decfsz	9,f
 16080  0C8D  2C89               	goto	u4795
 16081  0C8E  084F               	movf	??___fttol,w
 16082  0C8F  00D2               	movwf	??___fttol+3
 16083  0C90  0852               	movf	??___fttol+3,w
 16084  0C91  00D3               	movwf	___fttol@sign1
 16085  0C92  17CC               	bsf	___fttol@f1+1,7
 16086  0C93  30FF               	movlw	255
 16087  0C94  05CB               	andwf	___fttol@f1,f
 16088  0C95  30FF               	movlw	255
 16089  0C96  05CC               	andwf	___fttol@f1+1,f
 16090  0C97  3000               	movlw	0
 16091  0C98  05CD               	andwf	___fttol@f1+2,f
 16092  0C99  084B               	movf	___fttol@f1,w
 16093  0C9A  00D4               	movwf	___fttol@lval
 16094  0C9B  084C               	movf	___fttol@f1+1,w
 16095  0C9C  00D5               	movwf	___fttol@lval+1
 16096  0C9D  084D               	movf	___fttol@f1+2,w
 16097  0C9E  00D6               	movwf	___fttol@lval+2
 16098  0C9F  01D7               	clrf	___fttol@lval+3
 16099  0CA0  308E               	movlw	142
 16100  0CA1  02D8               	subwf	___fttol@exp1,f
 16101  0CA2  1FD8               	btfss	___fttol@exp1,7
 16102  0CA3  2CC0               	goto	l6092
 16103  0CA4  0858               	movf	___fttol@exp1,w
 16104  0CA5  3A80               	xorlw	128
 16105  0CA6  3E8F               	addlw	143
 16106  0CA7  1803               	skipnc
 16107  0CA8  2CB2               	goto	l6090
 16108  0CA9  3000               	movlw	0
 16109  0CAA  00CE               	movwf	?___fttol+3
 16110  0CAB  3000               	movlw	0
 16111  0CAC  00CD               	movwf	?___fttol+2
 16112  0CAD  3000               	movlw	0
 16113  0CAE  00CC               	movwf	?___fttol+1
 16114  0CAF  3000               	movlw	0
 16115  0CB0  00CB               	movwf	?___fttol
 16116  0CB1  0008               	return
 16117  0CB2                     l6090:	
 16118  0CB2  3001               	movlw	1
 16119  0CB3                     u4825:	
 16120  0CB3  36D7               	lsrf	___fttol@lval+3,f
 16121  0CB4  0CD6               	rrf	___fttol@lval+2,f
 16122  0CB5  0CD5               	rrf	___fttol@lval+1,f
 16123  0CB6  0CD4               	rrf	___fttol@lval,f
 16124  0CB7  0B89               	decfsz	9,f
 16125  0CB8  2CB3               	goto	u4825
 16126  0CB9  3001               	movlw	1
 16127  0CBA  00CF               	movwf	??___fttol
 16128  0CBB  084F               	movf	??___fttol,w
 16129  0CBC  07D8               	addwf	___fttol@exp1,f
 16130  0CBD  1903               	btfsc	3,2
 16131  0CBE  2CD9               	goto	l6102
 16132  0CBF  2CB2               	goto	l6090
 16133  0CC0                     l6092:	
 16134  0CC0  3018               	movlw	24
 16135  0CC1  0258               	subwf	___fttol@exp1,w
 16136  0CC2  1C03               	skipc
 16137  0CC3  2CD6               	goto	l6100
 16138  0CC4  3000               	movlw	0
 16139  0CC5  00CE               	movwf	?___fttol+3
 16140  0CC6  3000               	movlw	0
 16141  0CC7  00CD               	movwf	?___fttol+2
 16142  0CC8  3000               	movlw	0
 16143  0CC9  00CC               	movwf	?___fttol+1
 16144  0CCA  3000               	movlw	0
 16145  0CCB  00CB               	movwf	?___fttol
 16146  0CCC  0008               	return
 16147  0CCD                     l6098:	
 16148  0CCD  3001               	movlw	1
 16149  0CCE                     u4855:	
 16150  0CCE  35D4               	lslf	___fttol@lval,f
 16151  0CCF  0DD5               	rlf	___fttol@lval+1,f
 16152  0CD0  0DD6               	rlf	___fttol@lval+2,f
 16153  0CD1  0DD7               	rlf	___fttol@lval+3,f
 16154  0CD2  0B89               	decfsz	9,f
 16155  0CD3  2CCE               	goto	u4855
 16156  0CD4  3001               	movlw	1
 16157  0CD5  02D8               	subwf	___fttol@exp1,f
 16158  0CD6                     l6100:	
 16159  0CD6  08D8               	movf	___fttol@exp1,f
 16160  0CD7  1D03               	skipz
 16161  0CD8  2CCD               	goto	l6098
 16162  0CD9                     l6102:	
 16163  0CD9  0853               	movf	___fttol@sign1,w
 16164  0CDA  1903               	btfsc	3,2
 16165  0CDB  2CE7               	goto	l6106
 16166  0CDC  09D4               	comf	___fttol@lval,f
 16167  0CDD  09D5               	comf	___fttol@lval+1,f
 16168  0CDE  09D6               	comf	___fttol@lval+2,f
 16169  0CDF  09D7               	comf	___fttol@lval+3,f
 16170  0CE0  0AD4               	incf	___fttol@lval,f
 16171  0CE1  1903               	skipnz
 16172  0CE2  0AD5               	incf	___fttol@lval+1,f
 16173  0CE3  1903               	skipnz
 16174  0CE4  0AD6               	incf	___fttol@lval+2,f
 16175  0CE5  1903               	skipnz
 16176  0CE6  0AD7               	incf	___fttol@lval+3,f
 16177  0CE7                     l6106:	
 16178  0CE7  0857               	movf	___fttol@lval+3,w
 16179  0CE8  00CE               	movwf	?___fttol+3
 16180  0CE9  0856               	movf	___fttol@lval+2,w
 16181  0CEA  00CD               	movwf	?___fttol+2
 16182  0CEB  0855               	movf	___fttol@lval+1,w
 16183  0CEC  00CC               	movwf	?___fttol+1
 16184  0CED  0854               	movf	___fttol@lval,w
 16185  0CEE  00CB               	movwf	?___fttol
 16186  0CEF  0008               	return
 16187  0CF0                     __end_of___fttol:	
 16188                           
 16189                           	psect	text105
 16190  0753                     __ptext105:	
 16191 ;; *************** function ___ftdiv *****************
 16192 ;; Defined at:
 16193 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16194 ;; Parameters:    Size  Location     Type
 16195 ;;  f2              3   14[BANK0 ] float 
 16196 ;;  f1              3   17[BANK0 ] float 
 16197 ;; Auto vars:     Size  Location     Type
 16198 ;;  f3              3   25[BANK0 ] float 
 16199 ;;  sign            1   29[BANK0 ] unsigned char 
 16200 ;;  exp             1   28[BANK0 ] unsigned char 
 16201 ;;  cntr            1   24[BANK0 ] unsigned char 
 16202 ;; Return value:  Size  Location     Type
 16203 ;;                  3   14[BANK0 ] float 
 16204 ;; Registers used:
 16205 ;;		wreg, status,2, status,0, pclath, cstack
 16206 ;; Tracked objects:
 16207 ;;		On entry : 0/0
 16208 ;;		On exit  : 0/0
 16209 ;;		Unchanged: 0/0
 16210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16211 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16212 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16213 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16214 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16215 ;;Total ram usage:       16 bytes
 16216 ;; Hardware stack levels used:    1
 16217 ;; Hardware stack levels required when called:    6
 16218 ;; This function calls:
 16219 ;;		___ftpack
 16220 ;; This function is called by:
 16221 ;;		_getPercentValue
 16222 ;;		_setPercentValue
 16223 ;; This function uses a non-reentrant model
 16224 ;;
 16225                           
 16226                           
 16227                           ;psect for function ___ftdiv
 16228  0753                     ___ftdiv:	
 16229                           
 16230                           ;incstack = 0
 16231                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16232  0753  0020               	movlb	0	; select bank0
 16233  0754  0831               	movf	___ftdiv@f1,w
 16234  0755  00B4               	movwf	??___ftdiv
 16235  0756  0832               	movf	___ftdiv@f1+1,w
 16236  0757  00B5               	movwf	??___ftdiv+1
 16237  0758  0833               	movf	___ftdiv@f1+2,w
 16238  0759  00B6               	movwf	??___ftdiv+2
 16239  075A  1003               	clrc
 16240  075B  0D35               	rlf	??___ftdiv+1,w
 16241  075C  0D36               	rlf	??___ftdiv+2,w
 16242  075D  00B7               	movwf	??___ftdiv+3
 16243  075E  0837               	movf	??___ftdiv+3,w
 16244  075F  00BC               	movwf	___ftdiv@exp
 16245  0760  08BC               	movf	___ftdiv@exp,f
 16246  0761  1D03               	skipz
 16247  0762  2F6A               	goto	l5980
 16248  0763  3000               	movlw	0
 16249  0764  00AE               	movwf	?___ftdiv
 16250  0765  3000               	movlw	0
 16251  0766  00AF               	movwf	?___ftdiv+1
 16252  0767  3000               	movlw	0
 16253  0768  00B0               	movwf	?___ftdiv+2
 16254  0769  0008               	return
 16255  076A                     l5980:	
 16256  076A  082E               	movf	___ftdiv@f2,w
 16257  076B  00B4               	movwf	??___ftdiv
 16258  076C  082F               	movf	___ftdiv@f2+1,w
 16259  076D  00B5               	movwf	??___ftdiv+1
 16260  076E  0830               	movf	___ftdiv@f2+2,w
 16261  076F  00B6               	movwf	??___ftdiv+2
 16262  0770  1003               	clrc
 16263  0771  0D35               	rlf	??___ftdiv+1,w
 16264  0772  0D36               	rlf	??___ftdiv+2,w
 16265  0773  00B7               	movwf	??___ftdiv+3
 16266  0774  0837               	movf	??___ftdiv+3,w
 16267  0775  00BD               	movwf	___ftdiv@sign
 16268  0776  08BD               	movf	___ftdiv@sign,f
 16269  0777  1D03               	skipz
 16270  0778  2F80               	goto	l5986
 16271  0779  3000               	movlw	0
 16272  077A  00AE               	movwf	?___ftdiv
 16273  077B  3000               	movlw	0
 16274  077C  00AF               	movwf	?___ftdiv+1
 16275  077D  3000               	movlw	0
 16276  077E  00B0               	movwf	?___ftdiv+2
 16277  077F  0008               	return
 16278  0780                     l5986:	
 16279  0780  3000               	movlw	0
 16280  0781  00B9               	movwf	___ftdiv@f3
 16281  0782  3000               	movlw	0
 16282  0783  00BA               	movwf	___ftdiv@f3+1
 16283  0784  3000               	movlw	0
 16284  0785  00BB               	movwf	___ftdiv@f3+2
 16285  0786  3089               	movlw	137
 16286  0787  073D               	addwf	___ftdiv@sign,w
 16287  0788  00B4               	movwf	??___ftdiv
 16288  0789  0834               	movf	??___ftdiv,w
 16289  078A  02BC               	subwf	___ftdiv@exp,f
 16290  078B  0831               	movf	___ftdiv@f1,w
 16291  078C  00B4               	movwf	??___ftdiv
 16292  078D  0832               	movf	___ftdiv@f1+1,w
 16293  078E  00B5               	movwf	??___ftdiv+1
 16294  078F  0833               	movf	___ftdiv@f1+2,w
 16295  0790  00B6               	movwf	??___ftdiv+2
 16296  0791  3010               	movlw	16
 16297  0792                     u4605:	
 16298  0792  36B6               	lsrf	??___ftdiv+2,f
 16299  0793  0CB5               	rrf	??___ftdiv+1,f
 16300  0794  0CB4               	rrf	??___ftdiv,f
 16301  0795  0B89               	decfsz	9,f
 16302  0796  2F92               	goto	u4605
 16303  0797  0834               	movf	??___ftdiv,w
 16304  0798  00B7               	movwf	??___ftdiv+3
 16305  0799  0837               	movf	??___ftdiv+3,w
 16306  079A  00BD               	movwf	___ftdiv@sign
 16307  079B  082E               	movf	___ftdiv@f2,w
 16308  079C  00B4               	movwf	??___ftdiv
 16309  079D  082F               	movf	___ftdiv@f2+1,w
 16310  079E  00B5               	movwf	??___ftdiv+1
 16311  079F  0830               	movf	___ftdiv@f2+2,w
 16312  07A0  00B6               	movwf	??___ftdiv+2
 16313  07A1  3010               	movlw	16
 16314  07A2                     u4615:	
 16315  07A2  36B6               	lsrf	??___ftdiv+2,f
 16316  07A3  0CB5               	rrf	??___ftdiv+1,f
 16317  07A4  0CB4               	rrf	??___ftdiv,f
 16318  07A5  0B89               	decfsz	9,f
 16319  07A6  2FA2               	goto	u4615
 16320  07A7  0834               	movf	??___ftdiv,w
 16321  07A8  00B7               	movwf	??___ftdiv+3
 16322  07A9  0837               	movf	??___ftdiv+3,w
 16323  07AA  06BD               	xorwf	___ftdiv@sign,f
 16324  07AB  3080               	movlw	128
 16325  07AC  00B4               	movwf	??___ftdiv
 16326  07AD  0834               	movf	??___ftdiv,w
 16327  07AE  05BD               	andwf	___ftdiv@sign,f
 16328  07AF  17B2               	bsf	___ftdiv@f1+1,7
 16329  07B0  30FF               	movlw	255
 16330  07B1  05B1               	andwf	___ftdiv@f1,f
 16331  07B2  30FF               	movlw	255
 16332  07B3  05B2               	andwf	___ftdiv@f1+1,f
 16333  07B4  3000               	movlw	0
 16334  07B5  05B3               	andwf	___ftdiv@f1+2,f
 16335  07B6  17AF               	bsf	___ftdiv@f2+1,7
 16336  07B7  30FF               	movlw	255
 16337  07B8  05AE               	andwf	___ftdiv@f2,f
 16338  07B9  30FF               	movlw	255
 16339  07BA  05AF               	andwf	___ftdiv@f2+1,f
 16340  07BB  3000               	movlw	0
 16341  07BC  05B0               	andwf	___ftdiv@f2+2,f
 16342  07BD  3018               	movlw	24
 16343  07BE  00B4               	movwf	??___ftdiv
 16344  07BF  0834               	movf	??___ftdiv,w
 16345  07C0  00B8               	movwf	___ftdiv@cntr
 16346  07C1                     l6000:	
 16347  07C1  3001               	movlw	1
 16348  07C2                     u4625:	
 16349  07C2  35B9               	lslf	___ftdiv@f3,f
 16350  07C3  0DBA               	rlf	___ftdiv@f3+1,f
 16351  07C4  0DBB               	rlf	___ftdiv@f3+2,f
 16352  07C5  0B89               	decfsz	9,f
 16353  07C6  2FC2               	goto	u4625
 16354  07C7  0830               	movf	___ftdiv@f2+2,w
 16355  07C8  0233               	subwf	___ftdiv@f1+2,w
 16356  07C9  1D03               	skipz
 16357  07CA  2FD1               	goto	u4635
 16358  07CB  082F               	movf	___ftdiv@f2+1,w
 16359  07CC  0232               	subwf	___ftdiv@f1+1,w
 16360  07CD  1D03               	skipz
 16361  07CE  2FD1               	goto	u4635
 16362  07CF  082E               	movf	___ftdiv@f2,w
 16363  07D0  0231               	subwf	___ftdiv@f1,w
 16364  07D1                     u4635:	
 16365  07D1  1C03               	skipc
 16366  07D2  2FDA               	goto	l6008
 16367  07D3  082E               	movf	___ftdiv@f2,w
 16368  07D4  02B1               	subwf	___ftdiv@f1,f
 16369  07D5  082F               	movf	___ftdiv@f2+1,w
 16370  07D6  3BB2               	subwfb	___ftdiv@f1+1,f
 16371  07D7  0830               	movf	___ftdiv@f2+2,w
 16372  07D8  3BB3               	subwfb	___ftdiv@f1+2,f
 16373  07D9  1439               	bsf	___ftdiv@f3,0
 16374  07DA                     l6008:	
 16375  07DA  3001               	movlw	1
 16376  07DB                     u4645:	
 16377  07DB  35B1               	lslf	___ftdiv@f1,f
 16378  07DC  0DB2               	rlf	___ftdiv@f1+1,f
 16379  07DD  0DB3               	rlf	___ftdiv@f1+2,f
 16380  07DE  0B89               	decfsz	9,f
 16381  07DF  2FDB               	goto	u4645
 16382  07E0  3001               	movlw	1
 16383  07E1  02B8               	subwf	___ftdiv@cntr,f
 16384  07E2  1D03               	btfss	3,2
 16385  07E3  2FC1               	goto	l6000
 16386  07E4  0839               	movf	___ftdiv@f3,w
 16387  07E5  00A0               	movwf	___ftpack@arg
 16388  07E6  083A               	movf	___ftdiv@f3+1,w
 16389  07E7  00A1               	movwf	___ftpack@arg+1
 16390  07E8  083B               	movf	___ftdiv@f3+2,w
 16391  07E9  00A2               	movwf	___ftpack@arg+2
 16392  07EA  083C               	movf	___ftdiv@exp,w
 16393  07EB  00B4               	movwf	??___ftdiv
 16394  07EC  0834               	movf	??___ftdiv,w
 16395  07ED  00A3               	movwf	___ftpack@exp
 16396  07EE  083D               	movf	___ftdiv@sign,w
 16397  07EF  00B5               	movwf	??___ftdiv+1
 16398  07F0  0835               	movf	??___ftdiv+1,w
 16399  07F1  00A4               	movwf	___ftpack@sign
 16400  07F2  3196  26D1         	fcall	___ftpack
 16401  07F4  0020               	movlb	0	; select bank0
 16402  07F5  0820               	movf	?___ftpack,w
 16403  07F6  00AE               	movwf	?___ftdiv
 16404  07F7  0821               	movf	?___ftpack+1,w
 16405  07F8  00AF               	movwf	?___ftdiv+1
 16406  07F9  0822               	movf	?___ftpack+2,w
 16407  07FA  00B0               	movwf	?___ftdiv+2
 16408  07FB  0008               	return
 16409  07FC                     __end_of___ftdiv:	
 16410                           
 16411                           	psect	text106
 16412  1ED9                     __ptext106:	
 16413 ;; *************** function ___awtoft *****************
 16414 ;; Defined at:
 16415 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16416 ;; Parameters:    Size  Location     Type
 16417 ;;  c               2    8[BANK0 ] int 
 16418 ;; Auto vars:     Size  Location     Type
 16419 ;;  sign            1   13[BANK0 ] unsigned char 
 16420 ;; Return value:  Size  Location     Type
 16421 ;;                  3    8[BANK0 ] float 
 16422 ;; Registers used:
 16423 ;;		wreg, status,2, status,0, pclath, cstack
 16424 ;; Tracked objects:
 16425 ;;		On entry : 0/0
 16426 ;;		On exit  : 0/0
 16427 ;;		Unchanged: 0/0
 16428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16429 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16430 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16431 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16432 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16433 ;;Total ram usage:        6 bytes
 16434 ;; Hardware stack levels used:    1
 16435 ;; Hardware stack levels required when called:    6
 16436 ;; This function calls:
 16437 ;;		___ftpack
 16438 ;; This function is called by:
 16439 ;;		_getPercentValue
 16440 ;;		_setPercentValue
 16441 ;; This function uses a non-reentrant model
 16442 ;;
 16443                           
 16444                           
 16445                           ;psect for function ___awtoft
 16446  1ED9                     ___awtoft:	
 16447                           
 16448                           ;incstack = 0
 16449                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16450  1ED9  0020               	movlb	0	; select bank0
 16451  1EDA  01AD               	clrf	___awtoft@sign
 16452  1EDB  1FA9               	btfss	___awtoft@c+1,7
 16453  1EDC  2EE4               	goto	l8484
 16454  1EDD  09A8               	comf	___awtoft@c,f
 16455  1EDE  09A9               	comf	___awtoft@c+1,f
 16456  1EDF  0AA8               	incf	___awtoft@c,f
 16457  1EE0  1903               	skipnz
 16458  1EE1  0AA9               	incf	___awtoft@c+1,f
 16459  1EE2  01AD               	clrf	___awtoft@sign
 16460  1EE3  0AAD               	incf	___awtoft@sign,f
 16461  1EE4                     l8484:	
 16462  1EE4  0828               	movf	___awtoft@c,w
 16463  1EE5  00A0               	movwf	___ftpack@arg
 16464  1EE6  0829               	movf	___awtoft@c+1,w
 16465  1EE7  00A1               	movwf	___ftpack@arg+1
 16466  1EE8  01A2               	clrf	___ftpack@arg+2
 16467  1EE9  308E               	movlw	142
 16468  1EEA  00AB               	movwf	??___awtoft
 16469  1EEB  082B               	movf	??___awtoft,w
 16470  1EEC  00A3               	movwf	___ftpack@exp
 16471  1EED  082D               	movf	___awtoft@sign,w
 16472  1EEE  00AC               	movwf	??___awtoft+1
 16473  1EEF  082C               	movf	??___awtoft+1,w
 16474  1EF0  00A4               	movwf	___ftpack@sign
 16475  1EF1  3196  26D1         	fcall	___ftpack
 16476  1EF3  0020               	movlb	0	; select bank0
 16477  1EF4  0820               	movf	?___ftpack,w
 16478  1EF5  00A8               	movwf	?___awtoft
 16479  1EF6  0821               	movf	?___ftpack+1,w
 16480  1EF7  00A9               	movwf	?___awtoft+1
 16481  1EF8  0822               	movf	?___ftpack+2,w
 16482  1EF9  00AA               	movwf	?___awtoft+2
 16483  1EFA  0008               	return
 16484  1EFB                     __end_of___awtoft:	
 16485                           
 16486                           	psect	text107
 16487  16D1                     __ptext107:	
 16488 ;; *************** function ___ftpack *****************
 16489 ;; Defined at:
 16490 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16491 ;; Parameters:    Size  Location     Type
 16492 ;;  arg             3    0[BANK0 ] unsigned um
 16493 ;;  exp             1    3[BANK0 ] unsigned char 
 16494 ;;  sign            1    4[BANK0 ] unsigned char 
 16495 ;; Auto vars:     Size  Location     Type
 16496 ;;		None
 16497 ;; Return value:  Size  Location     Type
 16498 ;;                  3    0[BANK0 ] float 
 16499 ;; Registers used:
 16500 ;;		wreg, status,2, status,0
 16501 ;; Tracked objects:
 16502 ;;		On entry : 0/0
 16503 ;;		On exit  : 0/0
 16504 ;;		Unchanged: 0/0
 16505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16506 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16508 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16509 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16510 ;;Total ram usage:        8 bytes
 16511 ;; Hardware stack levels used:    1
 16512 ;; Hardware stack levels required when called:    5
 16513 ;; This function calls:
 16514 ;;		Nothing
 16515 ;; This function is called by:
 16516 ;;		___awtoft
 16517 ;;		___ftadd
 16518 ;;		___ftdiv
 16519 ;;		___ftmul
 16520 ;; This function uses a non-reentrant model
 16521 ;;
 16522                           
 16523                           
 16524                           ;psect for function ___ftpack
 16525  16D1                     ___ftpack:	
 16526                           
 16527                           ;incstack = 0
 16528                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16529  16D1  0020               	movlb	0	; select bank0
 16530  16D2  0823               	movf	___ftpack@exp,w
 16531  16D3  1903               	btfsc	3,2
 16532  16D4  2EDA               	goto	l5864
 16533  16D5  0822               	movf	___ftpack@arg+2,w
 16534  16D6  0421               	iorwf	___ftpack@arg+1,w
 16535  16D7  0420               	iorwf	___ftpack@arg,w
 16536  16D8  1D03               	skipz
 16537  16D9  2EEB               	goto	l5870
 16538  16DA                     l5864:	
 16539  16DA  3000               	movlw	0
 16540  16DB  00A0               	movwf	?___ftpack
 16541  16DC  3000               	movlw	0
 16542  16DD  00A1               	movwf	?___ftpack+1
 16543  16DE  3000               	movlw	0
 16544  16DF  00A2               	movwf	?___ftpack+2
 16545  16E0  0008               	return
 16546  16E1                     l5868:	
 16547  16E1  3001               	movlw	1
 16548  16E2  00A5               	movwf	??___ftpack
 16549  16E3  0825               	movf	??___ftpack,w
 16550  16E4  07A3               	addwf	___ftpack@exp,f
 16551  16E5  3001               	movlw	1
 16552  16E6                     u4255:	
 16553  16E6  36A2               	lsrf	___ftpack@arg+2,f
 16554  16E7  0CA1               	rrf	___ftpack@arg+1,f
 16555  16E8  0CA0               	rrf	___ftpack@arg,f
 16556  16E9  0B89               	decfsz	9,f
 16557  16EA  2EE6               	goto	u4255
 16558  16EB                     l5870:	
 16559  16EB  30FE               	movlw	254
 16560  16EC  0522               	andwf	___ftpack@arg+2,w
 16561  16ED  1903               	btfsc	3,2
 16562  16EE  2F04               	goto	l3028
 16563  16EF  2EE1               	goto	l5868
 16564  16F0                     l5872:	
 16565  16F0  3001               	movlw	1
 16566  16F1  00A5               	movwf	??___ftpack
 16567  16F2  0825               	movf	??___ftpack,w
 16568  16F3  07A3               	addwf	___ftpack@exp,f
 16569  16F4  3001               	movlw	1
 16570  16F5  07A0               	addwf	___ftpack@arg,f
 16571  16F6  3000               	movlw	0
 16572  16F7  1803               	skipnc
 16573  16F8  3001               	movlw	1
 16574  16F9  07A1               	addwf	___ftpack@arg+1,f
 16575  16FA  3000               	movlw	0
 16576  16FB  1803               	skipnc
 16577  16FC  3001               	movlw	1
 16578  16FD  07A2               	addwf	___ftpack@arg+2,f
 16579  16FE  3001               	movlw	1
 16580  16FF                     u4275:	
 16581  16FF  36A2               	lsrf	___ftpack@arg+2,f
 16582  1700  0CA1               	rrf	___ftpack@arg+1,f
 16583  1701  0CA0               	rrf	___ftpack@arg,f
 16584  1702  0B89               	decfsz	9,f
 16585  1703  2EFF               	goto	u4275
 16586  1704                     l3028:	
 16587  1704  30FF               	movlw	255
 16588  1705  0522               	andwf	___ftpack@arg+2,w
 16589  1706  1903               	btfsc	3,2
 16590  1707  2F11               	goto	l5880
 16591  1708  2EF0               	goto	l5872
 16592  1709                     l5878:	
 16593  1709  3001               	movlw	1
 16594  170A  02A3               	subwf	___ftpack@exp,f
 16595  170B  3001               	movlw	1
 16596  170C                     u4295:	
 16597  170C  35A0               	lslf	___ftpack@arg,f
 16598  170D  0DA1               	rlf	___ftpack@arg+1,f
 16599  170E  0DA2               	rlf	___ftpack@arg+2,f
 16600  170F  0B89               	decfsz	9,f
 16601  1710  2F0C               	goto	u4295
 16602  1711                     l5880:	
 16603  1711  1FA1               	btfss	___ftpack@arg+1,7
 16604  1712  2F09               	goto	l5878
 16605  1713  1823               	btfsc	___ftpack@exp,0
 16606  1714  2F1B               	goto	l3034
 16607  1715  30FF               	movlw	255
 16608  1716  05A0               	andwf	___ftpack@arg,f
 16609  1717  307F               	movlw	127
 16610  1718  05A1               	andwf	___ftpack@arg+1,f
 16611  1719  30FF               	movlw	255
 16612  171A  05A2               	andwf	___ftpack@arg+2,f
 16613  171B                     l3034:	
 16614  171B  1003               	clrc
 16615  171C  0CA3               	rrf	___ftpack@exp,f
 16616  171D  0823               	movf	___ftpack@exp,w
 16617  171E  00A5               	movwf	??___ftpack
 16618  171F  01A6               	clrf	??___ftpack+1
 16619  1720  01A7               	clrf	??___ftpack+2
 16620  1721  3010               	movlw	16
 16621  1722                     u4325:	
 16622  1722  35A5               	lslf	??___ftpack,f
 16623  1723  0DA6               	rlf	??___ftpack+1,f
 16624  1724  0DA7               	rlf	??___ftpack+2,f
 16625  1725  0B89               	decfsz	9,f
 16626  1726  2F22               	goto	u4325
 16627  1727  0825               	movf	??___ftpack,w
 16628  1728  04A0               	iorwf	___ftpack@arg,f
 16629  1729  0826               	movf	??___ftpack+1,w
 16630  172A  04A1               	iorwf	___ftpack@arg+1,f
 16631  172B  0827               	movf	??___ftpack+2,w
 16632  172C  04A2               	iorwf	___ftpack@arg+2,f
 16633  172D  0824               	movf	___ftpack@sign,w
 16634  172E  1903               	btfsc	3,2
 16635  172F  0008               	return
 16636  1730  17A2               	bsf	___ftpack@arg+2,7
 16637  1731  0008               	return
 16638  1732                     __end_of___ftpack:	
 16639                           
 16640                           	psect	text108
 16641  1B59                     __ptext108:	
 16642 ;; *************** function _setRFSW_Status *****************
 16643 ;; Defined at:
 16644 ;;		line 422 in file "../src/RF_Control_B1.c"
 16645 ;; Parameters:    Size  Location     Type
 16646 ;;  sw              1    wreg     unsigned char 
 16647 ;;  command         1    2[BANK0 ] unsigned char 
 16648 ;; Auto vars:     Size  Location     Type
 16649 ;;  sw              1    3[BANK0 ] unsigned char 
 16650 ;; Return value:  Size  Location     Type
 16651 ;;		None               void
 16652 ;; Registers used:
 16653 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16654 ;; Tracked objects:
 16655 ;;		On entry : 0/0
 16656 ;;		On exit  : 0/0
 16657 ;;		Unchanged: 0/0
 16658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16659 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16660 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16662 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16663 ;;Total ram usage:        2 bytes
 16664 ;; Hardware stack levels used:    1
 16665 ;; Hardware stack levels required when called:    6
 16666 ;; This function calls:
 16667 ;;		_RfSWPointSelect
 16668 ;; This function is called by:
 16669 ;;		_DlyOff_Main
 16670 ;;		_setDimmerLights_ERROR
 16671 ;;		_setControl_Lights_Table
 16672 ;;		_Sw_DimmerOnFunc
 16673 ;;		_Sw_DimmerAdjFunc
 16674 ;; This function uses a non-reentrant model
 16675 ;;
 16676                           
 16677                           
 16678                           ;psect for function _setRFSW_Status
 16679  1B59                     _setRFSW_Status:	
 16680                           
 16681                           ;incstack = 0
 16682                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16683                           ;setRFSW_Status@sw stored from wreg
 16684  1B59  0020               	movlb	0	; select bank0
 16685  1B5A  00A3               	movwf	setRFSW_Status@sw
 16686                           
 16687                           ;RF_Control_B1.c: 423: RfSWPointSelect(sw);
 16688  1B5B  0823               	movf	setRFSW_Status@sw,w
 16689  1B5C  319D  2502         	fcall	_RfSWPointSelect
 16690                           
 16691                           ;RF_Control_B1.c: 424: RFSW->Status = command;
 16692  1B5E  0021               	movlb	1	; select bank1
 16693  1B5F  084E               	movf	_RFSW^(0+128),w
 16694  1B60  0086               	movwf	6
 16695  1B61  0187               	clrf	7
 16696  1B62  0020               	movlb	0	; select bank0
 16697  1B63  0822               	movf	setRFSW_Status@command,w
 16698  1B64  1001               	bcf	1,0
 16699  1B65  1D03               	skipz
 16700  1B66  1401               	bsf	1,0
 16701  1B67  0008               	return
 16702  1B68                     __end_of_setRFSW_Status:	
 16703                           
 16704                           	psect	text109
 16705  1D02                     __ptext109:	
 16706 ;; *************** function _RfSWPointSelect *****************
 16707 ;; Defined at:
 16708 ;;		line 357 in file "../src/RF_Control_B1.c"
 16709 ;; Parameters:    Size  Location     Type
 16710 ;;  sw              1    wreg     unsigned char 
 16711 ;; Auto vars:     Size  Location     Type
 16712 ;;  sw              1    1[BANK0 ] unsigned char 
 16713 ;; Return value:  Size  Location     Type
 16714 ;;		None               void
 16715 ;; Registers used:
 16716 ;;		wreg
 16717 ;; Tracked objects:
 16718 ;;		On entry : 0/0
 16719 ;;		On exit  : 0/0
 16720 ;;		Unchanged: 0/0
 16721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16723 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16724 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16725 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16726 ;;Total ram usage:        2 bytes
 16727 ;; Hardware stack levels used:    1
 16728 ;; Hardware stack levels required when called:    5
 16729 ;; This function calls:
 16730 ;;		Nothing
 16731 ;; This function is called by:
 16732 ;;		_setRFSW_Control
 16733 ;;		_setRFSW_AdjControl
 16734 ;;		_setRFSW_Status
 16735 ;; This function uses a non-reentrant model
 16736 ;;
 16737                           
 16738                           
 16739                           ;psect for function _RfSWPointSelect
 16740  1D02                     _RfSWPointSelect:	
 16741                           
 16742                           ;incstack = 0
 16743                           ; Regs used in _RfSWPointSelect: [wreg]
 16744                           ;RfSWPointSelect@sw stored from wreg
 16745  1D02  0020               	movlb	0	; select bank0
 16746  1D03  00A1               	movwf	RfSWPointSelect@sw
 16747                           
 16748                           ;RF_Control_B1.c: 359: if (sw == 1) {
 16749  1D04  0821               	movf	RfSWPointSelect@sw,w
 16750  1D05  3A01               	xorlw	1
 16751  1D06  1D03               	skipz
 16752  1D07  2D0D               	goto	l2338
 16753                           
 16754                           ;RF_Control_B1.c: 360: RFSW = &RFSW1;
 16755  1D08  30EB               	movlw	_RFSW1& (0+255)
 16756  1D09  00A0               	movwf	??_RfSWPointSelect
 16757  1D0A  0820               	movf	??_RfSWPointSelect,w
 16758  1D0B  0021               	movlb	1	; select bank1
 16759  1D0C  00CE               	movwf	_RFSW^(0+128)
 16760  1D0D                     l2338:	
 16761                           
 16762                           ;RF_Control_B1.c: 361: }
 16763                           ;RF_Control_B1.c: 364: if (sw == 2) {
 16764  1D0D  0020               	movlb	0	; select bank0
 16765  1D0E  0821               	movf	RfSWPointSelect@sw,w
 16766  1D0F  3A02               	xorlw	2
 16767  1D10  1D03               	skipz
 16768  1D11  0008               	return
 16769                           
 16770                           ;RF_Control_B1.c: 365: RFSW = &RFSW2;
 16771  1D12  30EC               	movlw	_RFSW2& (0+255)
 16772  1D13  00A0               	movwf	??_RfSWPointSelect
 16773  1D14  0820               	movf	??_RfSWPointSelect,w
 16774  1D15  0021               	movlb	1	; select bank1
 16775  1D16  00CE               	movwf	_RFSW^(0+128)
 16776  1D17  0008               	return
 16777  1D18                     __end_of_RfSWPointSelect:	
 16778                           
 16779                           	psect	text110
 16780  1BA5                     __ptext110:	
 16781 ;; *************** function _setDimmerLights_Trigger *****************
 16782 ;; Defined at:
 16783 ;;		line 716 in file "../src/Dimmer_B1.c"
 16784 ;; Parameters:    Size  Location     Type
 16785 ;;  lights          1    wreg     unsigned char 
 16786 ;;  command         1    2[BANK0 ] unsigned char 
 16787 ;; Auto vars:     Size  Location     Type
 16788 ;;  lights          1    3[BANK0 ] unsigned char 
 16789 ;; Return value:  Size  Location     Type
 16790 ;;		None               void
 16791 ;; Registers used:
 16792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16793 ;; Tracked objects:
 16794 ;;		On entry : 0/0
 16795 ;;		On exit  : 0/0
 16796 ;;		Unchanged: 0/0
 16797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16798 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16801 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16802 ;;Total ram usage:        2 bytes
 16803 ;; Hardware stack levels used:    1
 16804 ;; Hardware stack levels required when called:    6
 16805 ;; This function calls:
 16806 ;;		_DimmerLightsPointSelect
 16807 ;; This function is called by:
 16808 ;;		_DlyOff_Main
 16809 ;;		_setRFSW_Control
 16810 ;;		_Sw_DimmerOnFunc
 16811 ;;		_Sw_DimmerOffFunc
 16812 ;; This function uses a non-reentrant model
 16813 ;;
 16814                           
 16815                           
 16816                           ;psect for function _setDimmerLights_Trigger
 16817  1BA5                     _setDimmerLights_Trigger:	
 16818                           
 16819                           ;incstack = 0
 16820                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16821                           ;setDimmerLights_Trigger@lights stored from wreg
 16822  1BA5  0020               	movlb	0	; select bank0
 16823  1BA6  00A3               	movwf	setDimmerLights_Trigger@lights
 16824                           
 16825                           ;Dimmer_B1.c: 718: DimmerLightsPointSelect(lights);
 16826  1BA7  0823               	movf	setDimmerLights_Trigger@lights,w
 16827  1BA8  319C  2460         	fcall	_DimmerLightsPointSelect
 16828                           
 16829                           ;Dimmer_B1.c: 719: DimmerLights->Trigger = command;
 16830  1BAA  0874               	movf	_DimmerLights,w
 16831  1BAB  3E08               	addlw	8
 16832  1BAC  0086               	movwf	6
 16833  1BAD  3001               	movlw	1	; select bank2/3
 16834  1BAE  0087               	movwf	7
 16835  1BAF  0020               	movlb	0	; select bank0
 16836  1BB0  0822               	movf	setDimmerLights_Trigger@command,w
 16837  1BB1  1101               	bcf	1,2
 16838  1BB2  1D03               	skipz
 16839  1BB3  1501               	bsf	1,2
 16840  1BB4  0008               	return
 16841  1BB5                     __end_of_setDimmerLights_Trigger:	
 16842                           
 16843                           	psect	text111
 16844  1B95                     __ptext111:	
 16845 ;; *************** function _setDimmerLights_Switch *****************
 16846 ;; Defined at:
 16847 ;;		line 704 in file "../src/Dimmer_B1.c"
 16848 ;; Parameters:    Size  Location     Type
 16849 ;;  lights          1    wreg     unsigned char 
 16850 ;;  command         1    2[BANK0 ] unsigned char 
 16851 ;; Auto vars:     Size  Location     Type
 16852 ;;  lights          1    3[BANK0 ] unsigned char 
 16853 ;; Return value:  Size  Location     Type
 16854 ;;		None               void
 16855 ;; Registers used:
 16856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16857 ;; Tracked objects:
 16858 ;;		On entry : 0/0
 16859 ;;		On exit  : 0/0
 16860 ;;		Unchanged: 0/0
 16861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16862 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16863 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16865 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16866 ;;Total ram usage:        2 bytes
 16867 ;; Hardware stack levels used:    1
 16868 ;; Hardware stack levels required when called:    6
 16869 ;; This function calls:
 16870 ;;		_DimmerLightsPointSelect
 16871 ;; This function is called by:
 16872 ;;		_DlyOff_Main
 16873 ;;		_setRFSW_Control
 16874 ;;		_Sw_DimmerOnFunc
 16875 ;;		_Sw_DimmerOffFunc
 16876 ;; This function uses a non-reentrant model
 16877 ;;
 16878                           
 16879                           
 16880                           ;psect for function _setDimmerLights_Switch
 16881  1B95                     _setDimmerLights_Switch:	
 16882                           
 16883                           ;incstack = 0
 16884                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16885                           ;setDimmerLights_Switch@lights stored from wreg
 16886  1B95  0020               	movlb	0	; select bank0
 16887  1B96  00A3               	movwf	setDimmerLights_Switch@lights
 16888                           
 16889                           ;Dimmer_B1.c: 706: DimmerLightsPointSelect(lights);
 16890  1B97  0823               	movf	setDimmerLights_Switch@lights,w
 16891  1B98  319C  2460         	fcall	_DimmerLightsPointSelect
 16892                           
 16893                           ;Dimmer_B1.c: 707: DimmerLights->Switch = command;
 16894  1B9A  0874               	movf	_DimmerLights,w
 16895  1B9B  3E08               	addlw	8
 16896  1B9C  0086               	movwf	6
 16897  1B9D  3001               	movlw	1	; select bank2/3
 16898  1B9E  0087               	movwf	7
 16899  1B9F  0020               	movlb	0	; select bank0
 16900  1BA0  0822               	movf	setDimmerLights_Switch@command,w
 16901  1BA1  1081               	bcf	1,1
 16902  1BA2  1D03               	skipz
 16903  1BA3  1481               	bsf	1,1
 16904  1BA4  0008               	return
 16905  1BA5                     __end_of_setDimmerLights_Switch:	
 16906                           
 16907                           	psect	text112
 16908  1C60                     __ptext112:	
 16909 ;; *************** function _DimmerLightsPointSelect *****************
 16910 ;; Defined at:
 16911 ;;		line 326 in file "../src/Dimmer_B1.c"
 16912 ;; Parameters:    Size  Location     Type
 16913 ;;  lights          1    wreg     unsigned char 
 16914 ;; Auto vars:     Size  Location     Type
 16915 ;;  lights          1    1[BANK0 ] unsigned char 
 16916 ;; Return value:  Size  Location     Type
 16917 ;;		None               void
 16918 ;; Registers used:
 16919 ;;		wreg
 16920 ;; Tracked objects:
 16921 ;;		On entry : 0/0
 16922 ;;		On exit  : 0/0
 16923 ;;		Unchanged: 0/0
 16924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16929 ;;Total ram usage:        2 bytes
 16930 ;; Hardware stack levels used:    1
 16931 ;; Hardware stack levels required when called:    5
 16932 ;; This function calls:
 16933 ;;		Nothing
 16934 ;; This function is called by:
 16935 ;;		_setDimmerLights_Initialization
 16936 ;;		_setDimmerLights_Main
 16937 ;;		_setDimmerLights_ERROR
 16938 ;;		_setDimmerLights_TriggerERROR
 16939 ;;		_setDimmerLights
 16940 ;;		_setDimmerLights_Adj
 16941 ;;		_setDimmerLights_AdjRF
 16942 ;;		_setDimmerLights_Switch
 16943 ;;		_setDimmerLights_AdjGo
 16944 ;;		_setDimmerLights_Trigger
 16945 ;;		_setDimmerLights_TriggerAdj
 16946 ;;		_setDimmerLights_Clear
 16947 ;;		_setDimmerLights_GO
 16948 ;;		_setDimmerLights_MaxmumValue
 16949 ;; This function uses a non-reentrant model
 16950 ;;
 16951                           
 16952                           
 16953                           ;psect for function _DimmerLightsPointSelect
 16954  1C60                     _DimmerLightsPointSelect:	
 16955                           
 16956                           ;incstack = 0
 16957                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16958                           ;DimmerLightsPointSelect@lights stored from wreg
 16959  1C60  0020               	movlb	0	; select bank0
 16960  1C61  00A1               	movwf	DimmerLightsPointSelect@lights
 16961                           
 16962                           ;Dimmer_B1.c: 328: if (lights == 1) {
 16963  1C62  0821               	movf	DimmerLightsPointSelect@lights,w
 16964  1C63  3A01               	xorlw	1
 16965  1C64  1D03               	skipz
 16966  1C65  2C6A               	goto	l824
 16967                           
 16968                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights1;
 16969  1C66  303D               	movlw	_DimmerLights1& (0+255)
 16970  1C67  00A0               	movwf	??_DimmerLightsPointSelect
 16971  1C68  0820               	movf	??_DimmerLightsPointSelect,w
 16972  1C69  00F4               	movwf	_DimmerLights
 16973  1C6A                     l824:	
 16974                           
 16975                           ;Dimmer_B1.c: 330: }
 16976                           ;Dimmer_B1.c: 333: if (lights == 2) {
 16977  1C6A  0821               	movf	DimmerLightsPointSelect@lights,w
 16978  1C6B  3A02               	xorlw	2
 16979  1C6C  1D03               	skipz
 16980  1C6D  0008               	return
 16981                           
 16982                           ;Dimmer_B1.c: 334: DimmerLights = &DimmerLights2;
 16983  1C6E  304C               	movlw	_DimmerLights2& (0+255)
 16984  1C6F  00A0               	movwf	??_DimmerLightsPointSelect
 16985  1C70  0820               	movf	??_DimmerLightsPointSelect,w
 16986  1C71  00F4               	movwf	_DimmerLights
 16987  1C72  0008               	return
 16988  1C73                     __end_of_DimmerLightsPointSelect:	
 16989                           
 16990                           	psect	text113
 16991  15BE                     __ptext113:	
 16992 ;; *************** function _setBuz *****************
 16993 ;; Defined at:
 16994 ;;		line 22 in file "../src/Buzzer_B1.c"
 16995 ;; Parameters:    Size  Location     Type
 16996 ;;  count           1    wreg     unsigned char 
 16997 ;;  time            2    9[BANK0 ] int 
 16998 ;; Auto vars:     Size  Location     Type
 16999 ;;  count           1   12[BANK0 ] unsigned char 
 17000 ;; Return value:  Size  Location     Type
 17001 ;;		None               void
 17002 ;; Registers used:
 17003 ;;		wreg, status,2, status,0, pclath, cstack
 17004 ;; Tracked objects:
 17005 ;;		On entry : 0/0
 17006 ;;		On exit  : 0/0
 17007 ;;		Unchanged: 0/0
 17008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17009 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17012 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17013 ;;Total ram usage:        4 bytes
 17014 ;; Hardware stack levels used:    1
 17015 ;; Hardware stack levels required when called:    6
 17016 ;; This function calls:
 17017 ;;		___awdiv
 17018 ;; This function is called by:
 17019 ;;		_DlyOff_Main
 17020 ;;		_setDimmerLights_Main
 17021 ;;		_DimmerLights_Exceptions
 17022 ;;		_my_MainTime
 17023 ;;		_setOverTemp_Exceptions
 17024 ;;		_setLog_Code
 17025 ;;		_setControl_Lights_Table
 17026 ;;		_setRFSW_Control
 17027 ;;		_setSw_Main
 17028 ;;		_Sw_DimmerOnFunc
 17029 ;; This function uses a non-reentrant model
 17030 ;;
 17031                           
 17032                           
 17033                           ;psect for function _setBuz
 17034  15BE                     _setBuz:	
 17035                           
 17036                           ;incstack = 0
 17037                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 17038                           ;setBuz@count stored from wreg
 17039  15BE  0020               	movlb	0	; select bank0
 17040  15BF  00AC               	movwf	setBuz@count
 17041                           
 17042                           ;Buzzer_B1.c: 23: time /= 10;
 17043  15C0  300A               	movlw	10
 17044  15C1  00A0               	movwf	___awdiv@divisor
 17045  15C2  3000               	movlw	0
 17046  15C3  00A1               	movwf	___awdiv@divisor+1
 17047  15C4  082A               	movf	setBuz@time+1,w
 17048  15C5  01A3               	clrf	___awdiv@dividend+1
 17049  15C6  07A3               	addwf	___awdiv@dividend+1,f
 17050  15C7  0829               	movf	setBuz@time,w
 17051  15C8  01A2               	clrf	___awdiv@dividend
 17052  15C9  07A2               	addwf	___awdiv@dividend,f
 17053  15CA  3194  24BD  3195   	fcall	___awdiv
 17054  15CD  0020               	movlb	0	; select bank0
 17055  15CE  0821               	movf	?___awdiv+1,w
 17056  15CF  01AA               	clrf	setBuz@time+1
 17057  15D0  07AA               	addwf	setBuz@time+1,f
 17058  15D1  0820               	movf	?___awdiv,w
 17059  15D2  01A9               	clrf	setBuz@time
 17060  15D3  07A9               	addwf	setBuz@time,f
 17061                           
 17062                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 17063  15D4  0021               	movlb	1	; select bank1
 17064  15D5  1C32               	btfss	_Buz1^(0+128),0
 17065  15D6  0008               	return
 17066                           
 17067                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 17068  15D7  18B2               	btfsc	_Buz1^(0+128),1
 17069  15D8  2DEF               	goto	l102
 17070                           
 17071                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 17072  15D9  14B2               	bsf	_Buz1^(0+128),1
 17073                           
 17074                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 17075  15DA  01B3               	clrf	(_Buz1^(0+128)+1)
 17076  15DB  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 17077                           
 17078                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 17079  15DC  0020               	movlb	0	; select bank0
 17080  15DD  082C               	movf	setBuz@count,w
 17081  15DE  00AB               	movwf	??_setBuz
 17082  15DF  082B               	movf	??_setBuz,w
 17083  15E0  0021               	movlb	1	; select bank1
 17084  15E1  00B5               	movwf	(_Buz1^(0+128)+3)
 17085                           
 17086                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 17087  15E2  0020               	movlb	0	; select bank0
 17088  15E3  082A               	movf	setBuz@time+1,w
 17089  15E4  0021               	movlb	1	; select bank1
 17090  15E5  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 17091  15E6  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 17092  15E7  0020               	movlb	0	; select bank0
 17093  15E8  0829               	movf	setBuz@time,w
 17094  15E9  0021               	movlb	1	; select bank1
 17095  15EA  01B8               	clrf	(_Buz1^(0+128)+6)
 17096  15EB  07B8               	addwf	(_Buz1^(0+128)+6),f
 17097                           
 17098                           ;Buzzer_B1.c: 30: RB3 = 1;
 17099  15EC  0020               	movlb	0	; select bank0
 17100  15ED  158D               	bsf	13,3	;volatile
 17101                           
 17102                           ;Buzzer_B1.c: 31: } else {
 17103  15EE  0008               	return
 17104  15EF                     l102:	
 17105                           
 17106                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 17107  15EF  19B2               	btfsc	_Buz1^(0+128),3
 17108  15F0  2E03               	goto	l104
 17109                           
 17110                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 17111  15F1  15B2               	bsf	_Buz1^(0+128),3
 17112                           
 17113                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 17114  15F2  0020               	movlb	0	; select bank0
 17115  15F3  082C               	movf	setBuz@count,w
 17116  15F4  00AB               	movwf	??_setBuz
 17117  15F5  082B               	movf	??_setBuz,w
 17118  15F6  0021               	movlb	1	; select bank1
 17119  15F7  00B6               	movwf	(_Buz1^(0+128)+4)
 17120                           
 17121                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17122  15F8  0020               	movlb	0	; select bank0
 17123  15F9  082A               	movf	setBuz@time+1,w
 17124  15FA  0021               	movlb	1	; select bank1
 17125  15FB  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 17126  15FC  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 17127  15FD  0020               	movlb	0	; select bank0
 17128  15FE  0829               	movf	setBuz@time,w
 17129  15FF  0021               	movlb	1	; select bank1
 17130  1600  01BA               	clrf	(_Buz1^(0+128)+8)
 17131  1601  07BA               	addwf	(_Buz1^(0+128)+8),f
 17132                           
 17133                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17134  1602  0008               	return
 17135  1603                     l104:	
 17136  1603  1A32               	btfsc	_Buz1^(0+128),4
 17137  1604  0008               	return
 17138                           
 17139                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17140  1605  1632               	bsf	_Buz1^(0+128),4
 17141                           
 17142                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17143  1606  0020               	movlb	0	; select bank0
 17144  1607  082C               	movf	setBuz@count,w
 17145  1608  00AB               	movwf	??_setBuz
 17146  1609  082B               	movf	??_setBuz,w
 17147  160A  0021               	movlb	1	; select bank1
 17148  160B  00B7               	movwf	(_Buz1^(0+128)+5)
 17149                           
 17150                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17151  160C  0020               	movlb	0	; select bank0
 17152  160D  082A               	movf	setBuz@time+1,w
 17153  160E  0021               	movlb	1	; select bank1
 17154  160F  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 17155  1610  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 17156  1611  0020               	movlb	0	; select bank0
 17157  1612  0829               	movf	setBuz@time,w
 17158  1613  0021               	movlb	1	; select bank1
 17159  1614  01BC               	clrf	(_Buz1^(0+128)+10)
 17160  1615  07BC               	addwf	(_Buz1^(0+128)+10),f
 17161  1616  0008               	return
 17162  1617                     __end_of_setBuz:	
 17163                           
 17164                           	psect	text114
 17165  14BD                     __ptext114:	
 17166 ;; *************** function ___awdiv *****************
 17167 ;; Defined at:
 17168 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17169 ;; Parameters:    Size  Location     Type
 17170 ;;  divisor         2    0[BANK0 ] int 
 17171 ;;  dividend        2    2[BANK0 ] int 
 17172 ;; Auto vars:     Size  Location     Type
 17173 ;;  quotient        2    7[BANK0 ] int 
 17174 ;;  sign            1    6[BANK0 ] unsigned char 
 17175 ;;  counter         1    5[BANK0 ] unsigned char 
 17176 ;; Return value:  Size  Location     Type
 17177 ;;                  2    0[BANK0 ] int 
 17178 ;; Registers used:
 17179 ;;		wreg, status,2, status,0
 17180 ;; Tracked objects:
 17181 ;;		On entry : 0/0
 17182 ;;		On exit  : 0/0
 17183 ;;		Unchanged: 0/0
 17184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17185 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17186 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17187 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17188 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17189 ;;Total ram usage:        9 bytes
 17190 ;; Hardware stack levels used:    1
 17191 ;; Hardware stack levels required when called:    5
 17192 ;; This function calls:
 17193 ;;		Nothing
 17194 ;; This function is called by:
 17195 ;;		_setBuz
 17196 ;; This function uses a non-reentrant model
 17197 ;;
 17198                           
 17199                           
 17200                           ;psect for function ___awdiv
 17201  14BD                     ___awdiv:	
 17202                           
 17203                           ;incstack = 0
 17204                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17205  14BD  0020               	movlb	0	; select bank0
 17206  14BE  01A6               	clrf	___awdiv@sign
 17207  14BF  1FA1               	btfss	___awdiv@divisor+1,7
 17208  14C0  2CC8               	goto	l8592
 17209  14C1  09A0               	comf	___awdiv@divisor,f
 17210  14C2  09A1               	comf	___awdiv@divisor+1,f
 17211  14C3  0AA0               	incf	___awdiv@divisor,f
 17212  14C4  1903               	skipnz
 17213  14C5  0AA1               	incf	___awdiv@divisor+1,f
 17214  14C6  01A6               	clrf	___awdiv@sign
 17215  14C7  0AA6               	incf	___awdiv@sign,f
 17216  14C8                     l8592:	
 17217  14C8  1FA3               	btfss	___awdiv@dividend+1,7
 17218  14C9  2CD3               	goto	l8598
 17219  14CA  09A2               	comf	___awdiv@dividend,f
 17220  14CB  09A3               	comf	___awdiv@dividend+1,f
 17221  14CC  0AA2               	incf	___awdiv@dividend,f
 17222  14CD  1903               	skipnz
 17223  14CE  0AA3               	incf	___awdiv@dividend+1,f
 17224  14CF  3001               	movlw	1
 17225  14D0  00A4               	movwf	??___awdiv
 17226  14D1  0824               	movf	??___awdiv,w
 17227  14D2  06A6               	xorwf	___awdiv@sign,f
 17228  14D3                     l8598:	
 17229  14D3  01A7               	clrf	___awdiv@quotient
 17230  14D4  01A8               	clrf	___awdiv@quotient+1
 17231  14D5  0821               	movf	___awdiv@divisor+1,w
 17232  14D6  0420               	iorwf	___awdiv@divisor,w
 17233  14D7  1903               	skipnz
 17234  14D8  2D02               	goto	l8620
 17235  14D9  01A5               	clrf	___awdiv@counter
 17236  14DA  0AA5               	incf	___awdiv@counter,f
 17237  14DB                     l8608:	
 17238  14DB  1BA1               	btfsc	___awdiv@divisor+1,7
 17239  14DC  2CE7               	goto	l8610
 17240  14DD  3001               	movlw	1
 17241  14DE                     u8645:	
 17242  14DE  35A0               	lslf	___awdiv@divisor,f
 17243  14DF  0DA1               	rlf	___awdiv@divisor+1,f
 17244  14E0  0B89               	decfsz	9,f
 17245  14E1  2CDE               	goto	u8645
 17246  14E2  3001               	movlw	1
 17247  14E3  00A4               	movwf	??___awdiv
 17248  14E4  0824               	movf	??___awdiv,w
 17249  14E5  07A5               	addwf	___awdiv@counter,f
 17250  14E6  2CDB               	goto	l8608
 17251  14E7                     l8610:	
 17252  14E7  3001               	movlw	1
 17253  14E8                     u8665:	
 17254  14E8  35A7               	lslf	___awdiv@quotient,f
 17255  14E9  0DA8               	rlf	___awdiv@quotient+1,f
 17256  14EA  0B89               	decfsz	9,f
 17257  14EB  2CE8               	goto	u8665
 17258  14EC  0821               	movf	___awdiv@divisor+1,w
 17259  14ED  0223               	subwf	___awdiv@dividend+1,w
 17260  14EE  1D03               	skipz
 17261  14EF  2CF2               	goto	u8675
 17262  14F0  0820               	movf	___awdiv@divisor,w
 17263  14F1  0222               	subwf	___awdiv@dividend,w
 17264  14F2                     u8675:	
 17265  14F2  1C03               	skipc
 17266  14F3  2CF9               	goto	l8616
 17267  14F4  0820               	movf	___awdiv@divisor,w
 17268  14F5  02A2               	subwf	___awdiv@dividend,f
 17269  14F6  0821               	movf	___awdiv@divisor+1,w
 17270  14F7  3BA3               	subwfb	___awdiv@dividend+1,f
 17271  14F8  1427               	bsf	___awdiv@quotient,0
 17272  14F9                     l8616:	
 17273  14F9  3001               	movlw	1
 17274  14FA                     u8685:	
 17275  14FA  36A1               	lsrf	___awdiv@divisor+1,f
 17276  14FB  0CA0               	rrf	___awdiv@divisor,f
 17277  14FC  0B89               	decfsz	9,f
 17278  14FD  2CFA               	goto	u8685
 17279  14FE  3001               	movlw	1
 17280  14FF  02A5               	subwf	___awdiv@counter,f
 17281  1500  1D03               	btfss	3,2
 17282  1501  2CE7               	goto	l8610
 17283  1502                     l8620:	
 17284  1502  0826               	movf	___awdiv@sign,w
 17285  1503  1903               	btfsc	3,2
 17286  1504  2D0A               	goto	l8624
 17287  1505  09A7               	comf	___awdiv@quotient,f
 17288  1506  09A8               	comf	___awdiv@quotient+1,f
 17289  1507  0AA7               	incf	___awdiv@quotient,f
 17290  1508  1903               	skipnz
 17291  1509  0AA8               	incf	___awdiv@quotient+1,f
 17292  150A                     l8624:	
 17293  150A  0828               	movf	___awdiv@quotient+1,w
 17294  150B  01A1               	clrf	?___awdiv+1
 17295  150C  07A1               	addwf	?___awdiv+1,f
 17296  150D  0827               	movf	___awdiv@quotient,w
 17297  150E  01A0               	clrf	?___awdiv
 17298  150F  07A0               	addwf	?___awdiv,f
 17299  1510  0008               	return
 17300  1511                     __end_of___awdiv:	
 17301                           
 17302                           	psect	text115
 17303  1A56                     __ptext115:	
 17304 ;; *************** function _DelayOff_Initialization *****************
 17305 ;; Defined at:
 17306 ;;		line 26 in file "../src/DelayOff_B1.c"
 17307 ;; Parameters:    Size  Location     Type
 17308 ;;		None
 17309 ;; Auto vars:     Size  Location     Type
 17310 ;;		None
 17311 ;; Return value:  Size  Location     Type
 17312 ;;		None               void
 17313 ;; Registers used:
 17314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17315 ;; Tracked objects:
 17316 ;;		On entry : 0/0
 17317 ;;		On exit  : 0/0
 17318 ;;		Unchanged: 0/0
 17319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17324 ;;Total ram usage:        0 bytes
 17325 ;; Hardware stack levels used:    1
 17326 ;; Hardware stack levels required when called:    7
 17327 ;; This function calls:
 17328 ;;		_DlyOff_Initialization
 17329 ;; This function is called by:
 17330 ;;		_main
 17331 ;; This function uses a non-reentrant model
 17332 ;;
 17333                           
 17334                           
 17335                           ;psect for function _DelayOff_Initialization
 17336  1A56                     _DelayOff_Initialization:	
 17337                           
 17338                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17339                           
 17340                           ;incstack = 0
 17341                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17342  1A56  3001               	movlw	1
 17343  1A57  319A  22B8  319A   	fcall	_DlyOff_Initialization
 17344                           
 17345                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17346  1A5A  3002               	movlw	2
 17347  1A5B  319A  22B8         	fcall	_DlyOff_Initialization
 17348  1A5D  0008               	return
 17349  1A5E                     __end_of_DelayOff_Initialization:	
 17350                           
 17351                           	psect	text116
 17352  1AB8                     __ptext116:	
 17353 ;; *************** function _DlyOff_Initialization *****************
 17354 ;; Defined at:
 17355 ;;		line 56 in file "../src/DelayOff_B1.c"
 17356 ;; Parameters:    Size  Location     Type
 17357 ;;  sw              1    wreg     unsigned char 
 17358 ;; Auto vars:     Size  Location     Type
 17359 ;;  sw              1    2[BANK0 ] unsigned char 
 17360 ;; Return value:  Size  Location     Type
 17361 ;;		None               void
 17362 ;; Registers used:
 17363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17364 ;; Tracked objects:
 17365 ;;		On entry : 0/0
 17366 ;;		On exit  : 0/0
 17367 ;;		Unchanged: 0/0
 17368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17373 ;;Total ram usage:        1 bytes
 17374 ;; Hardware stack levels used:    1
 17375 ;; Hardware stack levels required when called:    6
 17376 ;; This function calls:
 17377 ;;		_DelayOffPointSelect
 17378 ;; This function is called by:
 17379 ;;		_DelayOff_Initialization
 17380 ;; This function uses a non-reentrant model
 17381 ;;
 17382                           
 17383                           
 17384                           ;psect for function _DlyOff_Initialization
 17385  1AB8                     _DlyOff_Initialization:	
 17386                           
 17387                           ;incstack = 0
 17388                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17389                           ;DlyOff_Initialization@sw stored from wreg
 17390  1AB8  0020               	movlb	0	; select bank0
 17391  1AB9  00A2               	movwf	DlyOff_Initialization@sw
 17392                           
 17393                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17394  1ABA  0822               	movf	DlyOff_Initialization@sw,w
 17395  1ABB  319C  249A         	fcall	_DelayOffPointSelect
 17396                           
 17397                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 17398  1ABD  0872               	movf	_DelayOff,w
 17399  1ABE  0086               	movwf	6
 17400  1ABF  3001               	movlw	1	; select bank2/3
 17401  1AC0  0087               	movwf	7
 17402  1AC1  1401               	bsf	1,0
 17403  1AC2  0008               	return
 17404  1AC3                     __end_of_DlyOff_Initialization:	
 17405                           
 17406                           	psect	text117
 17407  1C9A                     __ptext117:	
 17408 ;; *************** function _DelayOffPointSelect *****************
 17409 ;; Defined at:
 17410 ;;		line 7 in file "../src/DelayOff_B1.c"
 17411 ;; Parameters:    Size  Location     Type
 17412 ;;  sw              1    wreg     unsigned char 
 17413 ;; Auto vars:     Size  Location     Type
 17414 ;;  sw              1    1[BANK0 ] unsigned char 
 17415 ;; Return value:  Size  Location     Type
 17416 ;;		None               void
 17417 ;; Registers used:
 17418 ;;		wreg
 17419 ;; Tracked objects:
 17420 ;;		On entry : 0/0
 17421 ;;		On exit  : 0/0
 17422 ;;		Unchanged: 0/0
 17423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17427 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17428 ;;Total ram usage:        2 bytes
 17429 ;; Hardware stack levels used:    1
 17430 ;; Hardware stack levels required when called:    5
 17431 ;; This function calls:
 17432 ;;		Nothing
 17433 ;; This function is called by:
 17434 ;;		_DlyOff_Initialization
 17435 ;;		_DlyOff_Main
 17436 ;;		_setDelayOff_GO
 17437 ;; This function uses a non-reentrant model
 17438 ;;
 17439                           
 17440                           
 17441                           ;psect for function _DelayOffPointSelect
 17442  1C9A                     _DelayOffPointSelect:	
 17443                           
 17444                           ;incstack = 0
 17445                           ; Regs used in _DelayOffPointSelect: [wreg]
 17446                           ;DelayOffPointSelect@sw stored from wreg
 17447  1C9A  0020               	movlb	0	; select bank0
 17448  1C9B  00A1               	movwf	DelayOffPointSelect@sw
 17449                           
 17450                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17451  1C9C  0821               	movf	DelayOffPointSelect@sw,w
 17452  1C9D  3A01               	xorlw	1
 17453  1C9E  1D03               	skipz
 17454  1C9F  2CA5               	goto	l8522
 17455                           
 17456                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17457  1CA0  305B               	movlw	_DlySw1& (0+255)
 17458  1CA1  00A0               	movwf	??_DelayOffPointSelect
 17459  1CA2  0820               	movf	??_DelayOffPointSelect,w
 17460  1CA3  00F2               	movwf	_DelayOff
 17461                           
 17462                           ;DelayOff_B1.c: 11: }
 17463  1CA4  0008               	return
 17464  1CA5                     l8522:	
 17465                           
 17466                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17467  1CA5  0821               	movf	DelayOffPointSelect@sw,w
 17468  1CA6  3A02               	xorlw	2
 17469  1CA7  1D03               	skipz
 17470  1CA8  0008               	return
 17471                           
 17472                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17473  1CA9  3060               	movlw	_DlySw2& (0+255)
 17474  1CAA  00A0               	movwf	??_DelayOffPointSelect
 17475  1CAB  0820               	movf	??_DelayOffPointSelect,w
 17476  1CAC  00F2               	movwf	_DelayOff
 17477  1CAD  0008               	return
 17478  1CAE                     __end_of_DelayOffPointSelect:	
 17479                           
 17480                           	psect	text118
 17481  1CD7                     __ptext118:	
 17482 ;; *************** function _CC2500_PowerOnInitial *****************
 17483 ;; Defined at:
 17484 ;;		line 124 in file "../src/CC2500_B1.c"
 17485 ;; Parameters:    Size  Location     Type
 17486 ;;		None
 17487 ;; Auto vars:     Size  Location     Type
 17488 ;;		None
 17489 ;; Return value:  Size  Location     Type
 17490 ;;		None               void
 17491 ;; Registers used:
 17492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17493 ;; Tracked objects:
 17494 ;;		On entry : 0/0
 17495 ;;		On exit  : 0/0
 17496 ;;		Unchanged: 0/0
 17497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17502 ;;Total ram usage:        0 bytes
 17503 ;; Hardware stack levels used:    1
 17504 ;; Hardware stack levels required when called:    8
 17505 ;; This function calls:
 17506 ;;		_CC2500_ClearRXFIFO
 17507 ;;		_CC2500_ClearTXFIFO
 17508 ;;		_CC2500_FrequencyCabr
 17509 ;;		_CC2500_InitPATable
 17510 ;;		_CC2500_InitSetREG
 17511 ;;		_CC2500_PowerRST
 17512 ;;		_CC2500_SIDLEMode
 17513 ;; This function is called by:
 17514 ;;		_main
 17515 ;; This function uses a non-reentrant model
 17516 ;;
 17517                           
 17518                           
 17519                           ;psect for function _CC2500_PowerOnInitial
 17520  1CD7                     _CC2500_PowerOnInitial:	
 17521                           
 17522                           ;CC2500_B1.c: 125: CC2500_PowerRST();
 17523                           
 17524                           ;incstack = 0
 17525                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17526  1CD7  3192  223C  319C   	fcall	_CC2500_PowerRST
 17527                           
 17528                           ;CC2500_B1.c: 126: CC2500_InitSetREG();
 17529  1CDA  319F  27D6  319C   	fcall	_CC2500_InitSetREG
 17530                           
 17531                           ;CC2500_B1.c: 127: CC2500_InitPATable();
 17532  1CDD  319E  263C  319C   	fcall	_CC2500_InitPATable
 17533                           
 17534                           ;CC2500_B1.c: 128: CC2500_ClearTXFIFO();
 17535  1CE0  319A  2223  319C   	fcall	_CC2500_ClearTXFIFO
 17536                           
 17537                           ;CC2500_B1.c: 129: CC2500_ClearRXFIFO();
 17538  1CE3  319A  221F  319C   	fcall	_CC2500_ClearRXFIFO
 17539                           
 17540                           ;CC2500_B1.c: 130: CC2500_FrequencyCabr();
 17541  1CE6  319A  22D9  319C   	fcall	_CC2500_FrequencyCabr
 17542                           
 17543                           ;CC2500_B1.c: 131: CC2500_SIDLEMode();
 17544  1CE9  319A  2227         	fcall	_CC2500_SIDLEMode
 17545  1CEB  0008               	return
 17546  1CEC                     __end_of_CC2500_PowerOnInitial:	
 17547                           
 17548                           	psect	text119
 17549  1A27                     __ptext119:	
 17550 ;; *************** function _CC2500_SIDLEMode *****************
 17551 ;; Defined at:
 17552 ;;		line 214 in file "../src/CC2500_B1.c"
 17553 ;; Parameters:    Size  Location     Type
 17554 ;;		None
 17555 ;; Auto vars:     Size  Location     Type
 17556 ;;		None
 17557 ;; Return value:  Size  Location     Type
 17558 ;;		None               void
 17559 ;; Registers used:
 17560 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17561 ;; Tracked objects:
 17562 ;;		On entry : 0/0
 17563 ;;		On exit  : 0/0
 17564 ;;		Unchanged: 0/0
 17565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17570 ;;Total ram usage:        0 bytes
 17571 ;; Hardware stack levels used:    1
 17572 ;; Hardware stack levels required when called:    7
 17573 ;; This function calls:
 17574 ;;		_CC2500_WriteCommand
 17575 ;; This function is called by:
 17576 ;;		_CC2500_PowerOnInitial
 17577 ;; This function uses a non-reentrant model
 17578 ;;
 17579                           
 17580                           
 17581                           ;psect for function _CC2500_SIDLEMode
 17582  1A27                     _CC2500_SIDLEMode:	
 17583                           
 17584                           ;CC2500_B1.c: 215: CC2500_WriteCommand(0x36);
 17585                           
 17586                           ;incstack = 0
 17587                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17588  1A27  3036               	movlw	54
 17589  1A28  319D  2578         	fcall	_CC2500_WriteCommand
 17590  1A2A  0008               	return
 17591  1A2B                     __end_of_CC2500_SIDLEMode:	
 17592                           
 17593                           	psect	text120
 17594  123C                     __ptext120:	
 17595 ;; *************** function _CC2500_PowerRST *****************
 17596 ;; Defined at:
 17597 ;;		line 137 in file "../src/CC2500_B1.c"
 17598 ;; Parameters:    Size  Location     Type
 17599 ;;		None
 17600 ;; Auto vars:     Size  Location     Type
 17601 ;;		None
 17602 ;; Return value:  Size  Location     Type
 17603 ;;		None               void
 17604 ;; Registers used:
 17605 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17606 ;; Tracked objects:
 17607 ;;		On entry : 0/0
 17608 ;;		On exit  : 0/0
 17609 ;;		Unchanged: 0/0
 17610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17614 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17615 ;;Total ram usage:        1 bytes
 17616 ;; Hardware stack levels used:    1
 17617 ;; Hardware stack levels required when called:    6
 17618 ;; This function calls:
 17619 ;;		_CC2500_WriteByte
 17620 ;;		_DelayTime_1us
 17621 ;;		_Timeout_Counter
 17622 ;;		_set_TimeoutCleared
 17623 ;; This function is called by:
 17624 ;;		_CC2500_PowerOnInitial
 17625 ;; This function uses a non-reentrant model
 17626 ;;
 17627                           
 17628                           
 17629                           ;psect for function _CC2500_PowerRST
 17630  123C                     _CC2500_PowerRST:	
 17631                           
 17632                           ;CC2500_B1.c: 138: RC1 = 0;
 17633                           
 17634                           ;incstack = 0
 17635                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17636  123C  0020               	movlb	0	; select bank0
 17637  123D  108E               	bcf	14,1	;volatile
 17638                           
 17639                           ;CC2500_B1.c: 139: RC0 = 0;
 17640  123E  100E               	bcf	14,0	;volatile
 17641                           
 17642                           ;CC2500_B1.c: 140: RC4 = 1;
 17643  123F  160E               	bsf	14,4	;volatile
 17644                           
 17645                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 17646  1240  300A               	movlw	10
 17647  1241  00A0               	movwf	DelayTime_1us@count
 17648  1242  3000               	movlw	0
 17649  1243  00A1               	movwf	DelayTime_1us@count+1
 17650  1244  319F  2789  3192   	fcall	_DelayTime_1us
 17651                           
 17652                           ;CC2500_B1.c: 142: RC4 = 0;
 17653  1247  0020               	movlb	0	; select bank0
 17654  1248  120E               	bcf	14,4	;volatile
 17655                           
 17656                           ;CC2500_B1.c: 143: DelayTime_1us(10);
 17657  1249  300A               	movlw	10
 17658  124A  00A0               	movwf	DelayTime_1us@count
 17659  124B  3000               	movlw	0
 17660  124C  00A1               	movwf	DelayTime_1us@count+1
 17661  124D  319F  2789  3192   	fcall	_DelayTime_1us
 17662                           
 17663                           ;CC2500_B1.c: 144: RC4 = 1;
 17664  1250  0020               	movlb	0	; select bank0
 17665  1251  160E               	bsf	14,4	;volatile
 17666                           
 17667                           ;CC2500_B1.c: 145: DelayTime_1us(40);
 17668  1252  3028               	movlw	40
 17669  1253  00A0               	movwf	DelayTime_1us@count
 17670  1254  3000               	movlw	0
 17671  1255  00A1               	movwf	DelayTime_1us@count+1
 17672  1256  319F  2789  3192   	fcall	_DelayTime_1us
 17673                           
 17674                           ;CC2500_B1.c: 146: RC4 = 0;
 17675  1259  0020               	movlb	0	; select bank0
 17676  125A  120E               	bcf	14,4	;volatile
 17677                           
 17678                           ;CC2500_B1.c: 147: SPI0Buffer = 0x30;
 17679  125B  3030               	movlw	48
 17680  125C  00A6               	movwf	??_CC2500_PowerRST
 17681  125D  0826               	movf	??_CC2500_PowerRST,w
 17682  125E  0021               	movlb	1	; select bank1
 17683  125F  00D1               	movwf	_SPI0Buffer^(0+128)
 17684                           
 17685                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 17686  1260  2A64               	goto	l9572
 17687  1261                     l9570:	
 17688                           
 17689                           ;CC2500_B1.c: 149: Timeout_Counter();
 17690  1261  319C  24C2  3192   	fcall	_Timeout_Counter
 17691  1264                     l9572:	
 17692  1264  0020               	movlb	0	; select bank0
 17693  1265  1D0E               	btfss	14,2	;volatile
 17694  1266  2A6A               	goto	l9576
 17695  1267  0021               	movlb	1	; select bank1
 17696  1268  1D2F               	btfss	(_myMain^(0+128)+15),2
 17697  1269  2A61               	goto	l9570
 17698  126A                     l9576:	
 17699                           
 17700                           ;CC2500_B1.c: 150: };
 17701                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17702  126A  319A  222B  3192   	fcall	_set_TimeoutCleared
 17703                           
 17704                           ;CC2500_B1.c: 152: CC2500_WriteByte();
 17705  126D  319D  2546  3192   	fcall	_CC2500_WriteByte
 17706                           
 17707                           ;CC2500_B1.c: 153: while (RC2 == 1 && myMain.Timeout == 0) {
 17708  1270  2A74               	goto	l9582
 17709  1271                     l9580:	
 17710                           
 17711                           ;CC2500_B1.c: 154: Timeout_Counter();
 17712  1271  319C  24C2  3192   	fcall	_Timeout_Counter
 17713  1274                     l9582:	
 17714  1274  0020               	movlb	0	; select bank0
 17715  1275  1D0E               	btfss	14,2	;volatile
 17716  1276  2A7A               	goto	l9586
 17717  1277  0021               	movlb	1	; select bank1
 17718  1278  1D2F               	btfss	(_myMain^(0+128)+15),2
 17719  1279  2A71               	goto	l9580
 17720  127A                     l9586:	
 17721                           
 17722                           ;CC2500_B1.c: 155: };
 17723                           ;CC2500_B1.c: 156: set_TimeoutCleared();
 17724  127A  319A  222B         	fcall	_set_TimeoutCleared
 17725                           
 17726                           ;CC2500_B1.c: 157: RC0 = 0;
 17727  127C  0020               	movlb	0	; select bank0
 17728  127D  100E               	bcf	14,0	;volatile
 17729                           
 17730                           ;CC2500_B1.c: 158: RC4 = 1;
 17731  127E  160E               	bsf	14,4	;volatile
 17732  127F  0008               	return
 17733  1280                     __end_of_CC2500_PowerRST:	
 17734                           
 17735                           	psect	text121
 17736  1FD6                     __ptext121:	
 17737 ;; *************** function _CC2500_InitSetREG *****************
 17738 ;; Defined at:
 17739 ;;		line 164 in file "../src/CC2500_B1.c"
 17740 ;; Parameters:    Size  Location     Type
 17741 ;;		None
 17742 ;; Auto vars:     Size  Location     Type
 17743 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17744 ;;  temp2           1    7[BANK0 ] unsigned char 
 17745 ;;  temp1           1    6[BANK0 ] unsigned char 
 17746 ;; Return value:  Size  Location     Type
 17747 ;;		None               void
 17748 ;; Registers used:
 17749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17750 ;; Tracked objects:
 17751 ;;		On entry : 0/0
 17752 ;;		On exit  : 0/0
 17753 ;;		Unchanged: 0/0
 17754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17756 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17758 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17759 ;;Total ram usage:        4 bytes
 17760 ;; Hardware stack levels used:    1
 17761 ;; Hardware stack levels required when called:    7
 17762 ;; This function calls:
 17763 ;;		_CC2500_WriteREG
 17764 ;; This function is called by:
 17765 ;;		_CC2500_PowerOnInitial
 17766 ;; This function uses a non-reentrant model
 17767 ;;
 17768                           
 17769                           
 17770                           ;psect for function _CC2500_InitSetREG
 17771  1FD6                     _CC2500_InitSetREG:	
 17772                           
 17773                           ;CC2500_B1.c: 165: unsigned char loop_c;
 17774                           ;CC2500_B1.c: 166: unsigned char temp1, temp2;
 17775                           ;CC2500_B1.c: 168: for (loop_c = 0; loop_c < 47; loop_c++) {
 17776                           
 17777                           ;incstack = 0
 17778                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17779  1FD6  0020               	movlb	0	; select bank0
 17780  1FD7  01A8               	clrf	CC2500_InitSetREG@loop_c
 17781  1FD8                     L10:	
 17782  1FD8  302F               	movlw	47
 17783  1FD9  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17784  1FDA  1803               	btfsc	3,0
 17785  1FDB  0008               	return
 17786                           
 17787                           ;CC2500_B1.c: 169: temp1 = CC2500_registers_address[loop_c];
 17788  1FDC  0828               	movf	CC2500_InitSetREG@loop_c,w
 17789  1FDD  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17790  1FDE  0084               	movwf	4
 17791  1FDF  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 17792  1FE0  1803               	skipnc
 17793  1FE1  3E01               	addlw	1
 17794  1FE2  0085               	movwf	5
 17795  1FE3  0800               	movf	0,w	;code access
 17796  1FE4  00A5               	movwf	??_CC2500_InitSetREG
 17797  1FE5  0825               	movf	??_CC2500_InitSetREG,w
 17798  1FE6  00A6               	movwf	CC2500_InitSetREG@temp1
 17799                           
 17800                           ;CC2500_B1.c: 170: temp2 = CC2500_rfSettings[loop_c];
 17801  1FE7  0828               	movf	CC2500_InitSetREG@loop_c,w
 17802  1FE8  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17803  1FE9  0084               	movwf	4
 17804  1FEA  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 17805  1FEB  1803               	skipnc
 17806  1FEC  3E01               	addlw	1
 17807  1FED  0085               	movwf	5
 17808  1FEE  0800               	movf	0,w	;code access
 17809  1FEF  00A5               	movwf	??_CC2500_InitSetREG
 17810  1FF0  0825               	movf	??_CC2500_InitSetREG,w
 17811  1FF1  00A7               	movwf	CC2500_InitSetREG@temp2
 17812                           
 17813                           ;CC2500_B1.c: 172: CC2500_WriteREG(temp1, temp2);
 17814  1FF2  0827               	movf	CC2500_InitSetREG@temp2,w
 17815  1FF3  00A5               	movwf	??_CC2500_InitSetREG
 17816  1FF4  0825               	movf	??_CC2500_InitSetREG,w
 17817  1FF5  00A2               	movwf	CC2500_WriteREG@value
 17818  1FF6  0826               	movf	CC2500_InitSetREG@temp1,w
 17819  1FF7  319E  26FB  319F   	fcall	_CC2500_WriteREG
 17820  1FFA  3001               	movlw	1
 17821  1FFB  0020               	movlb	0	; select bank0
 17822  1FFC  00A5               	movwf	??_CC2500_InitSetREG
 17823  1FFD  0825               	movf	??_CC2500_InitSetREG,w
 17824  1FFE  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17825  1FFF  2FD8               	goto	L10
 17826  2000                     __end_of_CC2500_InitSetREG:	
 17827                           
 17828                           	psect	text122
 17829  1E3C                     __ptext122:	
 17830 ;; *************** function _CC2500_InitPATable *****************
 17831 ;; Defined at:
 17832 ;;		line 179 in file "../src/CC2500_B1.c"
 17833 ;; Parameters:    Size  Location     Type
 17834 ;;		None
 17835 ;; Auto vars:     Size  Location     Type
 17836 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17837 ;;  temp            1    6[BANK0 ] unsigned char 
 17838 ;; Return value:  Size  Location     Type
 17839 ;;		None               void
 17840 ;; Registers used:
 17841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17842 ;; Tracked objects:
 17843 ;;		On entry : 0/0
 17844 ;;		On exit  : 0/0
 17845 ;;		Unchanged: 0/0
 17846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17848 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17849 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17850 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17851 ;;Total ram usage:        3 bytes
 17852 ;; Hardware stack levels used:    1
 17853 ;; Hardware stack levels required when called:    7
 17854 ;; This function calls:
 17855 ;;		_CC2500_WriteREG
 17856 ;; This function is called by:
 17857 ;;		_CC2500_PowerOnInitial
 17858 ;; This function uses a non-reentrant model
 17859 ;;
 17860                           
 17861                           
 17862                           ;psect for function _CC2500_InitPATable
 17863  1E3C                     _CC2500_InitPATable:	
 17864                           
 17865                           ;CC2500_B1.c: 180: unsigned char loop_d;
 17866                           ;CC2500_B1.c: 181: unsigned char temp;
 17867                           ;CC2500_B1.c: 183: for (loop_d = 0; loop_d < 8; loop_d++) {
 17868                           
 17869                           ;incstack = 0
 17870                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17871  1E3C  0020               	movlb	0	; select bank0
 17872  1E3D  01A7               	clrf	CC2500_InitPATable@loop_d
 17873  1E3E                     L11:	
 17874  1E3E  3008               	movlw	8
 17875  1E3F  0227               	subwf	CC2500_InitPATable@loop_d,w
 17876  1E40  1803               	btfsc	3,0
 17877  1E41  0008               	return
 17878                           
 17879                           ;CC2500_B1.c: 184: temp = CC2500_patable_vaule[loop_d];
 17880  1E42  0827               	movf	CC2500_InitPATable@loop_d,w
 17881  1E43  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17882  1E44  0084               	movwf	4
 17883  1E45  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17884  1E46  1803               	skipnc
 17885  1E47  3E01               	addlw	1
 17886  1E48  0085               	movwf	5
 17887  1E49  0800               	movf	0,w	;code access
 17888  1E4A  00A5               	movwf	??_CC2500_InitPATable
 17889  1E4B  0825               	movf	??_CC2500_InitPATable,w
 17890  1E4C  00A6               	movwf	CC2500_InitPATable@temp
 17891                           
 17892                           ;CC2500_B1.c: 185: CC2500_WriteREG(0x3E, temp);
 17893  1E4D  0826               	movf	CC2500_InitPATable@temp,w
 17894  1E4E  00A5               	movwf	??_CC2500_InitPATable
 17895  1E4F  0825               	movf	??_CC2500_InitPATable,w
 17896  1E50  00A2               	movwf	CC2500_WriteREG@value
 17897  1E51  303E               	movlw	62
 17898  1E52  319E  26FB  319E   	fcall	_CC2500_WriteREG
 17899  1E55  3001               	movlw	1
 17900  1E56  0020               	movlb	0	; select bank0
 17901  1E57  00A5               	movwf	??_CC2500_InitPATable
 17902  1E58  0825               	movf	??_CC2500_InitPATable,w
 17903  1E59  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17904  1E5A  2E3E               	goto	L11
 17905  1E5B                     __end_of_CC2500_InitPATable:	
 17906                           
 17907                           	psect	text123
 17908  1EFB                     __ptext123:	
 17909 ;; *************** function _CC2500_WriteREG *****************
 17910 ;; Defined at:
 17911 ;;		line 256 in file "../src/CC2500_B1.c"
 17912 ;; Parameters:    Size  Location     Type
 17913 ;;  w_addr          1    wreg     unsigned char 
 17914 ;;  value           1    2[BANK0 ] unsigned char 
 17915 ;; Auto vars:     Size  Location     Type
 17916 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17917 ;; Return value:  Size  Location     Type
 17918 ;;		None               void
 17919 ;; Registers used:
 17920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17921 ;; Tracked objects:
 17922 ;;		On entry : 0/0
 17923 ;;		On exit  : 0/0
 17924 ;;		Unchanged: 0/0
 17925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17926 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17927 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17928 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17929 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17930 ;;Total ram usage:        3 bytes
 17931 ;; Hardware stack levels used:    1
 17932 ;; Hardware stack levels required when called:    6
 17933 ;; This function calls:
 17934 ;;		_CC2500_WriteByte
 17935 ;;		_Timeout_Counter
 17936 ;;		_set_TimeoutCleared
 17937 ;; This function is called by:
 17938 ;;		_CC2500_InitSetREG
 17939 ;;		_CC2500_InitPATable
 17940 ;; This function uses a non-reentrant model
 17941 ;;
 17942                           
 17943                           
 17944                           ;psect for function _CC2500_WriteREG
 17945  1EFB                     _CC2500_WriteREG:	
 17946                           
 17947                           ;incstack = 0
 17948                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17949                           ;CC2500_WriteREG@w_addr stored from wreg
 17950  1EFB  0020               	movlb	0	; select bank0
 17951  1EFC  00A4               	movwf	CC2500_WriteREG@w_addr
 17952                           
 17953                           ;CC2500_B1.c: 257: RC4 = 0;
 17954  1EFD  120E               	bcf	14,4	;volatile
 17955                           
 17956                           ;CC2500_B1.c: 258: SPI0Buffer = w_addr;
 17957  1EFE  0824               	movf	CC2500_WriteREG@w_addr,w
 17958  1EFF  00A3               	movwf	??_CC2500_WriteREG
 17959  1F00  0823               	movf	??_CC2500_WriteREG,w
 17960  1F01  0021               	movlb	1	; select bank1
 17961  1F02  00D1               	movwf	_SPI0Buffer^(0+128)
 17962                           
 17963                           ;CC2500_B1.c: 259: while (RC2 == 1 && myMain.Timeout == 0) {
 17964  1F03  2F07               	goto	l9302
 17965  1F04                     l9300:	
 17966                           
 17967                           ;CC2500_B1.c: 260: Timeout_Counter();
 17968  1F04  319C  24C2  319E   	fcall	_Timeout_Counter
 17969  1F07                     l9302:	
 17970  1F07  0020               	movlb	0	; select bank0
 17971  1F08  1D0E               	btfss	14,2	;volatile
 17972  1F09  2F0D               	goto	l9306
 17973  1F0A  0021               	movlb	1	; select bank1
 17974  1F0B  1D2F               	btfss	(_myMain^(0+128)+15),2
 17975  1F0C  2F04               	goto	l9300
 17976  1F0D                     l9306:	
 17977                           
 17978                           ;CC2500_B1.c: 261: };
 17979                           ;CC2500_B1.c: 262: set_TimeoutCleared();
 17980  1F0D  319A  222B  319E   	fcall	_set_TimeoutCleared
 17981                           
 17982                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17983  1F10  319D  2546  319E   	fcall	_CC2500_WriteByte
 17984                           
 17985                           ;CC2500_B1.c: 265: SPI0Buffer = value;
 17986  1F13  0020               	movlb	0	; select bank0
 17987  1F14  0822               	movf	CC2500_WriteREG@value,w
 17988  1F15  00A3               	movwf	??_CC2500_WriteREG
 17989  1F16  0823               	movf	??_CC2500_WriteREG,w
 17990  1F17  0021               	movlb	1	; select bank1
 17991  1F18  00D1               	movwf	_SPI0Buffer^(0+128)
 17992                           
 17993                           ;CC2500_B1.c: 266: CC2500_WriteByte();
 17994  1F19  319D  2546         	fcall	_CC2500_WriteByte
 17995                           
 17996                           ;CC2500_B1.c: 267: RC4 = 1;
 17997  1F1B  0020               	movlb	0	; select bank0
 17998  1F1C  160E               	bsf	14,4	;volatile
 17999  1F1D  0008               	return
 18000  1F1E                     __end_of_CC2500_WriteREG:	
 18001                           
 18002                           	psect	text124
 18003  1AD9                     __ptext124:	
 18004 ;; *************** function _CC2500_FrequencyCabr *****************
 18005 ;; Defined at:
 18006 ;;		line 206 in file "../src/CC2500_B1.c"
 18007 ;; Parameters:    Size  Location     Type
 18008 ;;		None
 18009 ;; Auto vars:     Size  Location     Type
 18010 ;;		None
 18011 ;; Return value:  Size  Location     Type
 18012 ;;		None               void
 18013 ;; Registers used:
 18014 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18015 ;; Tracked objects:
 18016 ;;		On entry : 0/0
 18017 ;;		On exit  : 0/0
 18018 ;;		Unchanged: 0/0
 18019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18024 ;;Total ram usage:        0 bytes
 18025 ;; Hardware stack levels used:    1
 18026 ;; Hardware stack levels required when called:    7
 18027 ;; This function calls:
 18028 ;;		_CC2500_WriteCommand
 18029 ;;		_DelayTime_1us
 18030 ;; This function is called by:
 18031 ;;		_CC2500_PowerOnInitial
 18032 ;; This function uses a non-reentrant model
 18033 ;;
 18034                           
 18035                           
 18036                           ;psect for function _CC2500_FrequencyCabr
 18037  1AD9                     _CC2500_FrequencyCabr:	
 18038                           
 18039                           ;CC2500_B1.c: 207: CC2500_WriteCommand(0x33);
 18040                           
 18041                           ;incstack = 0
 18042                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18043  1AD9  3033               	movlw	51
 18044  1ADA  319D  2578  319A   	fcall	_CC2500_WriteCommand
 18045                           
 18046                           ;CC2500_B1.c: 208: DelayTime_1us(1000);
 18047  1ADD  30E8               	movlw	232
 18048  1ADE  0020               	movlb	0	; select bank0
 18049  1ADF  00A0               	movwf	DelayTime_1us@count
 18050  1AE0  3003               	movlw	3
 18051  1AE1  00A1               	movwf	DelayTime_1us@count+1
 18052  1AE2  319F  2789         	fcall	_DelayTime_1us
 18053  1AE4  0008               	return
 18054  1AE5                     __end_of_CC2500_FrequencyCabr:	
 18055                           
 18056                           	psect	text125
 18057  1F89                     __ptext125:	
 18058 ;; *************** function _DelayTime_1us *****************
 18059 ;; Defined at:
 18060 ;;		line 325 in file "../src/CC2500_B1.c"
 18061 ;; Parameters:    Size  Location     Type
 18062 ;;  count           2    0[BANK0 ] int 
 18063 ;; Auto vars:     Size  Location     Type
 18064 ;;  j               2    4[BANK0 ] unsigned int 
 18065 ;;  i               2    2[BANK0 ] unsigned int 
 18066 ;; Return value:  Size  Location     Type
 18067 ;;		None               void
 18068 ;; Registers used:
 18069 ;;		wreg, status,2
 18070 ;; Tracked objects:
 18071 ;;		On entry : 0/0
 18072 ;;		On exit  : 0/0
 18073 ;;		Unchanged: 0/0
 18074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18075 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18076 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18078 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18079 ;;Total ram usage:        6 bytes
 18080 ;; Hardware stack levels used:    1
 18081 ;; Hardware stack levels required when called:    5
 18082 ;; This function calls:
 18083 ;;		Nothing
 18084 ;; This function is called by:
 18085 ;;		_CC2500_PowerRST
 18086 ;;		_CC2500_FrequencyCabr
 18087 ;; This function uses a non-reentrant model
 18088 ;;
 18089                           
 18090                           
 18091                           ;psect for function _DelayTime_1us
 18092  1F89                     _DelayTime_1us:	
 18093                           
 18094                           ;CC2500_B1.c: 326: unsigned int i, j;
 18095                           ;CC2500_B1.c: 327: for (i = 1; i < count; i++)
 18096                           
 18097                           ;incstack = 0
 18098                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 18099  1F89  3001               	movlw	1
 18100  1F8A  0020               	movlb	0	; select bank0
 18101  1F8B  00A2               	movwf	DelayTime_1us@i
 18102  1F8C  3000               	movlw	0
 18103  1F8D  00A3               	movwf	DelayTime_1us@i+1
 18104  1F8E                     l386:	
 18105  1F8E  0821               	movf	DelayTime_1us@count+1,w
 18106  1F8F  0223               	subwf	DelayTime_1us@i+1,w
 18107  1F90  1D03               	skipz
 18108  1F91  2F94               	goto	u9555
 18109  1F92  0820               	movf	DelayTime_1us@count,w
 18110  1F93  0222               	subwf	DelayTime_1us@i,w
 18111  1F94                     u9555:	
 18112  1F94  1803               	btfsc	3,0
 18113  1F95  0008               	return
 18114                           
 18115                           ;CC2500_B1.c: 328: for (j = 0; j <= 1; j++);
 18116  1F96  01A4               	clrf	DelayTime_1us@j
 18117  1F97  01A5               	clrf	DelayTime_1us@j+1
 18118  1F98  3000               	movlw	0
 18119  1F99  0225               	subwf	DelayTime_1us@j+1,w
 18120  1F9A  3002               	movlw	2
 18121  1F9B  1903               	skipnz
 18122  1F9C  0224               	subwf	DelayTime_1us@j,w
 18123  1F9D  1803               	btfsc	3,0
 18124  1F9E  2FAA               	goto	l9294
 18125  1F9F                     l9292:	
 18126  1F9F  3001               	movlw	1
 18127  1FA0  07A4               	addwf	DelayTime_1us@j,f
 18128  1FA1  3000               	movlw	0
 18129  1FA2  3DA5               	addwfc	DelayTime_1us@j+1,f
 18130  1FA3  3000               	movlw	0
 18131  1FA4  0225               	subwf	DelayTime_1us@j+1,w
 18132  1FA5  3002               	movlw	2
 18133  1FA6  1903               	skipnz
 18134  1FA7  0224               	subwf	DelayTime_1us@j,w
 18135  1FA8  1C03               	skipc
 18136  1FA9  2F9F               	goto	l9292
 18137  1FAA                     l9294:	
 18138  1FAA  3001               	movlw	1
 18139  1FAB  07A2               	addwf	DelayTime_1us@i,f
 18140  1FAC  3000               	movlw	0
 18141  1FAD  3DA3               	addwfc	DelayTime_1us@i+1,f
 18142  1FAE  2F8E               	goto	l386
 18143  1FAF                     __end_of_DelayTime_1us:	
 18144                           
 18145                           	psect	text126
 18146  1A23                     __ptext126:	
 18147 ;; *************** function _CC2500_ClearTXFIFO *****************
 18148 ;; Defined at:
 18149 ;;		line 192 in file "../src/CC2500_B1.c"
 18150 ;; Parameters:    Size  Location     Type
 18151 ;;		None
 18152 ;; Auto vars:     Size  Location     Type
 18153 ;;		None
 18154 ;; Return value:  Size  Location     Type
 18155 ;;		None               void
 18156 ;; Registers used:
 18157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18158 ;; Tracked objects:
 18159 ;;		On entry : 0/0
 18160 ;;		On exit  : 0/0
 18161 ;;		Unchanged: 0/0
 18162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18167 ;;Total ram usage:        0 bytes
 18168 ;; Hardware stack levels used:    1
 18169 ;; Hardware stack levels required when called:    7
 18170 ;; This function calls:
 18171 ;;		_CC2500_WriteCommand
 18172 ;; This function is called by:
 18173 ;;		_CC2500_PowerOnInitial
 18174 ;; This function uses a non-reentrant model
 18175 ;;
 18176                           
 18177                           
 18178                           ;psect for function _CC2500_ClearTXFIFO
 18179  1A23                     _CC2500_ClearTXFIFO:	
 18180                           
 18181                           ;CC2500_B1.c: 193: CC2500_WriteCommand(0x3B);
 18182                           
 18183                           ;incstack = 0
 18184                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18185  1A23  303B               	movlw	59
 18186  1A24  319D  2578         	fcall	_CC2500_WriteCommand
 18187  1A26  0008               	return
 18188  1A27                     __end_of_CC2500_ClearTXFIFO:	
 18189                           
 18190                           	psect	text127
 18191  1A1F                     __ptext127:	
 18192 ;; *************** function _CC2500_ClearRXFIFO *****************
 18193 ;; Defined at:
 18194 ;;		line 199 in file "../src/CC2500_B1.c"
 18195 ;; Parameters:    Size  Location     Type
 18196 ;;		None
 18197 ;; Auto vars:     Size  Location     Type
 18198 ;;		None
 18199 ;; Return value:  Size  Location     Type
 18200 ;;		None               void
 18201 ;; Registers used:
 18202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18203 ;; Tracked objects:
 18204 ;;		On entry : 0/0
 18205 ;;		On exit  : 0/0
 18206 ;;		Unchanged: 0/0
 18207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18212 ;;Total ram usage:        0 bytes
 18213 ;; Hardware stack levels used:    1
 18214 ;; Hardware stack levels required when called:    7
 18215 ;; This function calls:
 18216 ;;		_CC2500_WriteCommand
 18217 ;; This function is called by:
 18218 ;;		_CC2500_PowerOnInitial
 18219 ;; This function uses a non-reentrant model
 18220 ;;
 18221                           
 18222                           
 18223                           ;psect for function _CC2500_ClearRXFIFO
 18224  1A1F                     _CC2500_ClearRXFIFO:	
 18225                           
 18226                           ;CC2500_B1.c: 200: CC2500_WriteCommand(0x3A);
 18227                           
 18228                           ;incstack = 0
 18229                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18230  1A1F  303A               	movlw	58
 18231  1A20  319D  2578         	fcall	_CC2500_WriteCommand
 18232  1A22  0008               	return
 18233  1A23                     __end_of_CC2500_ClearRXFIFO:	
 18234                           
 18235                           	psect	text128
 18236  1D78                     __ptext128:	
 18237 ;; *************** function _CC2500_WriteCommand *****************
 18238 ;; Defined at:
 18239 ;;		line 290 in file "../src/CC2500_B1.c"
 18240 ;; Parameters:    Size  Location     Type
 18241 ;;  command         1    wreg     unsigned char 
 18242 ;; Auto vars:     Size  Location     Type
 18243 ;;  command         1    3[BANK0 ] unsigned char 
 18244 ;; Return value:  Size  Location     Type
 18245 ;;		None               void
 18246 ;; Registers used:
 18247 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18248 ;; Tracked objects:
 18249 ;;		On entry : 0/0
 18250 ;;		On exit  : 0/0
 18251 ;;		Unchanged: 0/0
 18252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18254 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18255 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18256 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18257 ;;Total ram usage:        2 bytes
 18258 ;; Hardware stack levels used:    1
 18259 ;; Hardware stack levels required when called:    6
 18260 ;; This function calls:
 18261 ;;		_CC2500_WriteByte
 18262 ;;		_Timeout_Counter
 18263 ;;		_set_TimeoutCleared
 18264 ;; This function is called by:
 18265 ;;		_CC2500_TxData
 18266 ;;		_CC2500_RxData
 18267 ;;		_CC2500_ClearTXFIFO
 18268 ;;		_CC2500_ClearRXFIFO
 18269 ;;		_CC2500_FrequencyCabr
 18270 ;;		_CC2500_SIDLEMode
 18271 ;;		_setRF_Main
 18272 ;;		_RF_RxDisable
 18273 ;; This function uses a non-reentrant model
 18274 ;;
 18275                           
 18276                           
 18277                           ;psect for function _CC2500_WriteCommand
 18278  1D78                     _CC2500_WriteCommand:	
 18279                           
 18280                           ;incstack = 0
 18281                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18282                           ;CC2500_WriteCommand@command stored from wreg
 18283  1D78  0020               	movlb	0	; select bank0
 18284  1D79  00A3               	movwf	CC2500_WriteCommand@command
 18285                           
 18286                           ;CC2500_B1.c: 291: RC4 = 0;
 18287  1D7A  120E               	bcf	14,4	;volatile
 18288                           
 18289                           ;CC2500_B1.c: 292: SPI0Buffer = command;
 18290  1D7B  0823               	movf	CC2500_WriteCommand@command,w
 18291  1D7C  00A2               	movwf	??_CC2500_WriteCommand
 18292  1D7D  0822               	movf	??_CC2500_WriteCommand,w
 18293  1D7E  0021               	movlb	1	; select bank1
 18294  1D7F  00D1               	movwf	_SPI0Buffer^(0+128)
 18295                           
 18296                           ;CC2500_B1.c: 294: while (RC2 == 1 && myMain.Timeout == 0) {
 18297  1D80  2D84               	goto	l9028
 18298  1D81                     l9026:	
 18299                           
 18300                           ;CC2500_B1.c: 295: Timeout_Counter();
 18301  1D81  319C  24C2  319D   	fcall	_Timeout_Counter
 18302  1D84                     l9028:	
 18303  1D84  0020               	movlb	0	; select bank0
 18304  1D85  1D0E               	btfss	14,2	;volatile
 18305  1D86  2D8A               	goto	l9032
 18306  1D87  0021               	movlb	1	; select bank1
 18307  1D88  1D2F               	btfss	(_myMain^(0+128)+15),2
 18308  1D89  2D81               	goto	l9026
 18309  1D8A                     l9032:	
 18310                           
 18311                           ;CC2500_B1.c: 296: };
 18312                           ;CC2500_B1.c: 297: set_TimeoutCleared();
 18313  1D8A  319A  222B  319D   	fcall	_set_TimeoutCleared
 18314                           
 18315                           ;CC2500_B1.c: 299: CC2500_WriteByte();
 18316  1D8D  319D  2546         	fcall	_CC2500_WriteByte
 18317                           
 18318                           ;CC2500_B1.c: 300: RC4 = 1;
 18319  1D8F  0020               	movlb	0	; select bank0
 18320  1D90  160E               	bsf	14,4	;volatile
 18321  1D91  0008               	return
 18322  1D92                     __end_of_CC2500_WriteCommand:	
 18323                           
 18324                           	psect	text129
 18325  1A2B                     __ptext129:	
 18326 ;; *************** function _set_TimeoutCleared *****************
 18327 ;; Defined at:
 18328 ;;		line 217 in file "../src/Main_B1.c"
 18329 ;; Parameters:    Size  Location     Type
 18330 ;;		None
 18331 ;; Auto vars:     Size  Location     Type
 18332 ;;		None
 18333 ;; Return value:  Size  Location     Type
 18334 ;;		None               void
 18335 ;; Registers used:
 18336 ;;		status,2
 18337 ;; Tracked objects:
 18338 ;;		On entry : 0/0
 18339 ;;		On exit  : 0/0
 18340 ;;		Unchanged: 0/0
 18341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18346 ;;Total ram usage:        0 bytes
 18347 ;; Hardware stack levels used:    1
 18348 ;; Hardware stack levels required when called:    5
 18349 ;; This function calls:
 18350 ;;		Nothing
 18351 ;; This function is called by:
 18352 ;;		_CC2500_TxData
 18353 ;;		_CC2500_RxData
 18354 ;;		_CC2500_PowerRST
 18355 ;;		_CC2500_WriteREG
 18356 ;;		_CC2500_WriteCommand
 18357 ;;		_CC2500_ReadStatus
 18358 ;;		_getAD
 18359 ;;		_TouchPower
 18360 ;;		_CC2500_ReadREG
 18361 ;; This function uses a non-reentrant model
 18362 ;;
 18363                           
 18364                           
 18365                           ;psect for function _set_TimeoutCleared
 18366  1A2B                     _set_TimeoutCleared:	
 18367                           
 18368                           ;Main_B1.c: 218: myMain.Timeout = 0;
 18369                           
 18370                           ;incstack = 0
 18371                           ; Regs used in _set_TimeoutCleared: [status,2]
 18372  1A2B  0021               	movlb	1	; select bank1
 18373  1A2C  112F               	bcf	(_myMain^(0+128)+15),2
 18374                           
 18375                           ;Main_B1.c: 219: myMain.Timeout_Counter = 0;
 18376  1A2D  01B0               	clrf	(_myMain^(0+128)+16)
 18377  1A2E  01B1               	clrf	((_myMain+1)^(0+128)+16)
 18378  1A2F  0008               	return
 18379  1A30                     __end_of_set_TimeoutCleared:	
 18380                           
 18381                           	psect	text130
 18382  1CC2                     __ptext130:	
 18383 ;; *************** function _Timeout_Counter *****************
 18384 ;; Defined at:
 18385 ;;		line 208 in file "../src/Main_B1.c"
 18386 ;; Parameters:    Size  Location     Type
 18387 ;;		None
 18388 ;; Auto vars:     Size  Location     Type
 18389 ;;		None
 18390 ;; Return value:  Size  Location     Type
 18391 ;;		None               void
 18392 ;; Registers used:
 18393 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18394 ;; Tracked objects:
 18395 ;;		On entry : 0/0
 18396 ;;		On exit  : 0/0
 18397 ;;		Unchanged: 0/0
 18398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18403 ;;Total ram usage:        0 bytes
 18404 ;; Hardware stack levels used:    1
 18405 ;; Hardware stack levels required when called:    5
 18406 ;; This function calls:
 18407 ;;		Nothing
 18408 ;; This function is called by:
 18409 ;;		_CC2500_TxData
 18410 ;;		_CC2500_RxData
 18411 ;;		_CC2500_PowerRST
 18412 ;;		_CC2500_WriteREG
 18413 ;;		_CC2500_WriteCommand
 18414 ;;		_CC2500_ReadStatus
 18415 ;;		_getAD
 18416 ;;		_TouchPower
 18417 ;;		_CC2500_ReadREG
 18418 ;; This function uses a non-reentrant model
 18419 ;;
 18420                           
 18421                           
 18422                           ;psect for function _Timeout_Counter
 18423  1CC2                     _Timeout_Counter:	
 18424                           
 18425                           ;Main_B1.c: 209: myMain.Timeout_Counter++;
 18426                           
 18427                           ;incstack = 0
 18428                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18429  1CC2  3001               	movlw	1
 18430  1CC3  0021               	movlb	1	; select bank1
 18431  1CC4  07B0               	addwf	(_myMain^(0+128)+16),f
 18432  1CC5  3000               	movlw	0
 18433  1CC6  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 18434                           
 18435                           ;Main_B1.c: 210: if (myMain.Timeout_Counter == 10000) {
 18436  1CC7  3010               	movlw	16
 18437  1CC8  3EA0               	addlw	_myMain& (0+255)
 18438  1CC9  0086               	movwf	6
 18439  1CCA  0187               	clrf	7
 18440  1CCB  3F40               	moviw [0]fsr1
 18441  1CCC  3A10               	xorlw	16
 18442  1CCD  1D03               	skipz
 18443  1CCE  2CD1               	goto	u9055
 18444  1CCF  3F41               	moviw [1]fsr1
 18445  1CD0  3A27               	xorlw	39
 18446  1CD1                     u9055:	
 18447  1CD1  1D03               	skipz
 18448  1CD2  0008               	return
 18449                           
 18450                           ;Main_B1.c: 211: myMain.Timeout_Counter = 0;
 18451  1CD3  01B0               	clrf	(_myMain^(0+128)+16)
 18452  1CD4  01B1               	clrf	((_myMain+1)^(0+128)+16)
 18453                           
 18454                           ;Main_B1.c: 212: myMain.Timeout = 1;
 18455  1CD5  152F               	bsf	(_myMain^(0+128)+15),2
 18456  1CD6  0008               	return
 18457  1CD7                     __end_of_Timeout_Counter:	
 18458                           
 18459                           	psect	text131
 18460  1D46                     __ptext131:	
 18461 ;; *************** function _CC2500_WriteByte *****************
 18462 ;; Defined at:
 18463 ;;		line 224 in file "../src/CC2500_B1.c"
 18464 ;; Parameters:    Size  Location     Type
 18465 ;;		None
 18466 ;; Auto vars:     Size  Location     Type
 18467 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18468 ;; Return value:  Size  Location     Type
 18469 ;;		None               void
 18470 ;; Registers used:
 18471 ;;		wreg, status,2, status,0
 18472 ;; Tracked objects:
 18473 ;;		On entry : 0/0
 18474 ;;		On exit  : 0/0
 18475 ;;		Unchanged: 0/0
 18476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18480 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18481 ;;Total ram usage:        2 bytes
 18482 ;; Hardware stack levels used:    1
 18483 ;; Hardware stack levels required when called:    5
 18484 ;; This function calls:
 18485 ;;		Nothing
 18486 ;; This function is called by:
 18487 ;;		_CC2500_TxData
 18488 ;;		_CC2500_RxData
 18489 ;;		_CC2500_PowerRST
 18490 ;;		_CC2500_WriteREG
 18491 ;;		_CC2500_WriteCommand
 18492 ;;		_CC2500_ReadStatus
 18493 ;;		_CC2500_ReadREG
 18494 ;; This function uses a non-reentrant model
 18495 ;;
 18496                           
 18497                           
 18498                           ;psect for function _CC2500_WriteByte
 18499  1D46                     _CC2500_WriteByte:	
 18500                           
 18501                           ;CC2500_B1.c: 225: unsigned char loop_a;
 18502                           ;CC2500_B1.c: 226: for (loop_a = 0; loop_a < 8; loop_a++) {
 18503                           
 18504                           ;incstack = 0
 18505                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18506  1D46  0020               	movlb	0	; select bank0
 18507  1D47  01A1               	clrf	CC2500_WriteByte@loop_a
 18508  1D48                     L12:	
 18509  1D48  3008               	movlw	8
 18510  1D49  0221               	subwf	CC2500_WriteByte@loop_a,w
 18511  1D4A  1803               	btfsc	3,0
 18512  1D4B  0008               	return
 18513                           
 18514                           ;CC2500_B1.c: 227: if (SPI0Buffer & 0x80)
 18515  1D4C  0021               	movlb	1	; select bank1
 18516  1D4D  1FD1               	btfss	_SPI0Buffer^(0+128),7
 18517  1D4E  2D52               	goto	l342
 18518                           
 18519                           ;CC2500_B1.c: 228: RC0 = 1;
 18520  1D4F  0020               	movlb	0	; select bank0
 18521  1D50  140E               	bsf	14,0	;volatile
 18522  1D51  2D54               	goto	l343
 18523  1D52                     l342:	
 18524                           
 18525                           ;CC2500_B1.c: 229: else
 18526                           ;CC2500_B1.c: 230: RC0 = 0;
 18527  1D52  0020               	movlb	0	; select bank0
 18528  1D53  100E               	bcf	14,0	;volatile
 18529  1D54                     l343:	
 18530                           
 18531                           ;CC2500_B1.c: 231: RC1 = 1;
 18532  1D54  148E               	bsf	14,1	;volatile
 18533                           
 18534                           ;CC2500_B1.c: 232: SPI0Buffer <<= 1;
 18535  1D55  1003               	clrc
 18536  1D56  0021               	movlb	1	; select bank1
 18537  1D57  0DD1               	rlf	_SPI0Buffer^(0+128),f
 18538                           
 18539                           ;CC2500_B1.c: 233: RC1 = 0;
 18540  1D58  0020               	movlb	0	; select bank0
 18541  1D59  108E               	bcf	14,1	;volatile
 18542  1D5A  3001               	movlw	1
 18543  1D5B  00A0               	movwf	??_CC2500_WriteByte
 18544  1D5C  0820               	movf	??_CC2500_WriteByte,w
 18545  1D5D  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18546  1D5E  2D48               	goto	L12
 18547  1D5F                     __end_of_CC2500_WriteByte:	
 18548                           
 18549                           	psect	text132
 18550  1392                     __ptext132:	
 18551 ;; *************** function _Buzzer_Main *****************
 18552 ;; Defined at:
 18553 ;;		line 46 in file "../src/Buzzer_B1.c"
 18554 ;; Parameters:    Size  Location     Type
 18555 ;;		None
 18556 ;; Auto vars:     Size  Location     Type
 18557 ;;		None
 18558 ;; Return value:  Size  Location     Type
 18559 ;;		None               void
 18560 ;; Registers used:
 18561 ;;		wreg, status,2, status,0
 18562 ;; Tracked objects:
 18563 ;;		On entry : 0/0
 18564 ;;		On exit  : 0/0
 18565 ;;		Unchanged: 0/0
 18566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18570 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18571 ;;Total ram usage:        1 bytes
 18572 ;; Hardware stack levels used:    1
 18573 ;; Hardware stack levels required when called:    5
 18574 ;; This function calls:
 18575 ;;		Nothing
 18576 ;; This function is called by:
 18577 ;;		_main
 18578 ;; This function uses a non-reentrant model
 18579 ;;
 18580                           
 18581                           
 18582                           ;psect for function _Buzzer_Main
 18583  1392                     _Buzzer_Main:	
 18584                           
 18585                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18586                           
 18587                           ;incstack = 0
 18588                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18589  1392  0021               	movlb	1	; select bank1
 18590  1393  1CB2               	btfss	_Buz1^(0+128),1
 18591  1394  0008               	return
 18592                           
 18593                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18594  1395  3001               	movlw	1
 18595  1396  07B3               	addwf	(_Buz1^(0+128)+1),f
 18596  1397  3000               	movlw	0
 18597  1398  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 18598                           
 18599                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18600  1399  0839               	movf	((_Buz1+1)^(0+128)+6),w
 18601  139A  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 18602  139B  1D03               	skipz
 18603  139C  2B9F               	goto	u10965
 18604  139D  0838               	movf	(_Buz1^(0+128)+6),w
 18605  139E  0233               	subwf	(_Buz1^(0+128)+1),w
 18606  139F                     u10965:	
 18607  139F  1C03               	skipc
 18608  13A0  0008               	return
 18609                           
 18610                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18611  13A1  01B3               	clrf	(_Buz1^(0+128)+1)
 18612  13A2  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 18613                           
 18614                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18615  13A3  12B2               	bcf	_Buz1^(0+128),5
 18616  13A4  0020               	movlb	0	; select bank0
 18617  13A5  1D8D               	btfss	13,3	;volatile
 18618  13A6  2BA9               	goto	l10190
 18619  13A7  0021               	movlb	1	; select bank1
 18620  13A8  16B2               	bsf	_Buz1^(0+128),5
 18621  13A9                     l10190:	
 18622                           
 18623                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18624  13A9  0021               	movlb	1	; select bank1
 18625  13AA  1AB2               	btfsc	_Buz1^(0+128),5
 18626  13AB  2BD5               	goto	l112
 18627                           
 18628                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18629  13AC  08B5               	movf	(_Buz1^(0+128)+3),f
 18630  13AD  1D03               	skipz
 18631  13AE  2BD1               	goto	l113
 18632                           
 18633                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18634  13AF  1DB2               	btfss	_Buz1^(0+128),3
 18635  13B0  2BBF               	goto	l114
 18636                           
 18637                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18638  13B1  11B2               	bcf	_Buz1^(0+128),3
 18639                           
 18640                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18641  13B2  0836               	movf	(_Buz1^(0+128)+4),w
 18642  13B3  0020               	movlb	0	; select bank0
 18643  13B4  00A0               	movwf	??_Buzzer_Main
 18644  13B5  0820               	movf	??_Buzzer_Main,w
 18645  13B6  0021               	movlb	1	; select bank1
 18646  13B7  00B5               	movwf	(_Buz1^(0+128)+3)
 18647                           
 18648                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18649  13B8  083B               	movf	((_Buz1+1)^(0+128)+8),w
 18650  13B9  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 18651  13BA  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 18652  13BB  083A               	movf	(_Buz1^(0+128)+8),w
 18653  13BC  01B8               	clrf	(_Buz1^(0+128)+6)
 18654  13BD  07B8               	addwf	(_Buz1^(0+128)+6),f
 18655                           
 18656                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18657  13BE  0008               	return
 18658  13BF                     l114:	
 18659  13BF  1E32               	btfss	_Buz1^(0+128),4
 18660  13C0  2BCF               	goto	l116
 18661                           
 18662                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18663  13C1  1232               	bcf	_Buz1^(0+128),4
 18664                           
 18665                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18666  13C2  0837               	movf	(_Buz1^(0+128)+5),w
 18667  13C3  0020               	movlb	0	; select bank0
 18668  13C4  00A0               	movwf	??_Buzzer_Main
 18669  13C5  0820               	movf	??_Buzzer_Main,w
 18670  13C6  0021               	movlb	1	; select bank1
 18671  13C7  00B5               	movwf	(_Buz1^(0+128)+3)
 18672                           
 18673                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18674  13C8  083D               	movf	((_Buz1+1)^(0+128)+10),w
 18675  13C9  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 18676  13CA  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 18677  13CB  083C               	movf	(_Buz1^(0+128)+10),w
 18678  13CC  01B8               	clrf	(_Buz1^(0+128)+6)
 18679  13CD  07B8               	addwf	(_Buz1^(0+128)+6),f
 18680                           
 18681                           ;Buzzer_B1.c: 62: } else {
 18682  13CE  0008               	return
 18683  13CF                     l116:	
 18684                           
 18685                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18686  13CF  10B2               	bcf	_Buz1^(0+128),1
 18687                           
 18688                           ;Buzzer_B1.c: 64: }
 18689                           ;Buzzer_B1.c: 65: } else {
 18690  13D0  0008               	return
 18691  13D1                     l113:	
 18692                           
 18693                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18694  13D1  16B2               	bsf	_Buz1^(0+128),5
 18695                           
 18696                           ;Buzzer_B1.c: 68: RB3 = 1;
 18697  13D2  0020               	movlb	0	; select bank0
 18698  13D3  158D               	bsf	13,3	;volatile
 18699                           
 18700                           ;Buzzer_B1.c: 69: }
 18701                           ;Buzzer_B1.c: 70: } else {
 18702  13D4  0008               	return
 18703  13D5                     l112:	
 18704                           
 18705                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18706  13D5  12B2               	bcf	_Buz1^(0+128),5
 18707                           
 18708                           ;Buzzer_B1.c: 73: RB3 = 0;
 18709  13D6  0020               	movlb	0	; select bank0
 18710  13D7  118D               	bcf	13,3	;volatile
 18711                           
 18712                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18713  13D8  3001               	movlw	1
 18714  13D9  0021               	movlb	1	; select bank1
 18715  13DA  02B5               	subwf	(_Buz1^(0+128)+3),f
 18716  13DB  0008               	return
 18717  13DC                     __end_of_Buzzer_Main:	
 18718                           
 18719                           	psect	text133
 18720  1A10                     __ptext133:	
 18721 ;; *************** function _Buzzer_Initialization *****************
 18722 ;; Defined at:
 18723 ;;		line 11 in file "../src/Buzzer_B1.c"
 18724 ;; Parameters:    Size  Location     Type
 18725 ;;		None
 18726 ;; Auto vars:     Size  Location     Type
 18727 ;;		None
 18728 ;; Return value:  Size  Location     Type
 18729 ;;		None               void
 18730 ;; Registers used:
 18731 ;;		None
 18732 ;; Tracked objects:
 18733 ;;		On entry : 0/0
 18734 ;;		On exit  : 0/0
 18735 ;;		Unchanged: 0/0
 18736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18741 ;;Total ram usage:        0 bytes
 18742 ;; Hardware stack levels used:    1
 18743 ;; Hardware stack levels required when called:    5
 18744 ;; This function calls:
 18745 ;;		Nothing
 18746 ;; This function is called by:
 18747 ;;		_main
 18748 ;; This function uses a non-reentrant model
 18749 ;;
 18750                           
 18751                           
 18752                           ;psect for function _Buzzer_Initialization
 18753  1A10                     _Buzzer_Initialization:	
 18754                           
 18755                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18756                           
 18757                           ;incstack = 0
 18758                           ; Regs used in _Buzzer_Initialization: []
 18759  1A10  0021               	movlb	1	; select bank1
 18760  1A11  1432               	bsf	_Buz1^(0+128),0
 18761  1A12  0008               	return
 18762  1A13                     __end_of_Buzzer_Initialization:	
 18763                           
 18764                           	psect	intentry
 18765  0004                     __pintentry:	
 18766 ;; *************** function _ISR *****************
 18767 ;; Defined at:
 18768 ;;		line 107 in file "../src/MCU_B1.c"
 18769 ;; Parameters:    Size  Location     Type
 18770 ;;		None
 18771 ;; Auto vars:     Size  Location     Type
 18772 ;;		None
 18773 ;; Return value:  Size  Location     Type
 18774 ;;		None               void
 18775 ;; Registers used:
 18776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18777 ;; Tracked objects:
 18778 ;;		On entry : 0/0
 18779 ;;		On exit  : 0/0
 18780 ;;		Unchanged: 0/0
 18781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18784 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18785 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18786 ;;Total ram usage:        1 bytes
 18787 ;; Hardware stack levels used:    1
 18788 ;; Hardware stack levels required when called:    4
 18789 ;; This function calls:
 18790 ;;		_IOC_ISR
 18791 ;;		_TMR0_ISR
 18792 ;; This function is called by:
 18793 ;;		Interrupt level 1
 18794 ;; This function uses a non-reentrant model
 18795 ;;
 18796                           
 18797  0004                     _ISR:	
 18798                           
 18799                           ;incstack = 0
 18800                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18801  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18802  0005  3180               	pagesel	$
 18803  0006  0020               	movlb	0	; select bank0
 18804  0007  087F               	movf	127,w
 18805  0008  00FB               	movwf	??_ISR
 18806                           
 18807                           ;MCU_B1.c: 109: IOC_ISR();
 18808  0009  319B  2309  3180   	fcall	_IOC_ISR
 18809                           
 18810                           ;MCU_B1.c: 111: TMR0_ISR();
 18811  000C  319F  27AF         	fcall	_TMR0_ISR
 18812  000E  087B               	movf	??_ISR,w
 18813  000F  0020               	movlb	0	; select bank0
 18814  0010  00FF               	movwf	127
 18815  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18816  0012  0009               	retfie
 18817  0013                     __end_of_ISR:	
 18818                           
 18819                           	psect	text135
 18820  1FAF                     __ptext135:	
 18821 ;; *************** function _TMR0_ISR *****************
 18822 ;; Defined at:
 18823 ;;		line 135 in file "../src/MCU_B1.c"
 18824 ;; Parameters:    Size  Location     Type
 18825 ;;		None
 18826 ;; Auto vars:     Size  Location     Type
 18827 ;;		None
 18828 ;; Return value:  Size  Location     Type
 18829 ;;		None               void
 18830 ;; Registers used:
 18831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18832 ;; Tracked objects:
 18833 ;;		On entry : 0/0
 18834 ;;		On exit  : 0/0
 18835 ;;		Unchanged: 0/0
 18836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18841 ;;Total ram usage:        0 bytes
 18842 ;; Hardware stack levels used:    1
 18843 ;; Hardware stack levels required when called:    2
 18844 ;; This function calls:
 18845 ;;		_setDimmerLights_IntrControl
 18846 ;; This function is called by:
 18847 ;;		_ISR
 18848 ;; This function uses a non-reentrant model
 18849 ;;
 18850                           
 18851                           
 18852                           ;psect for function _TMR0_ISR
 18853  1FAF                     _TMR0_ISR:	
 18854                           
 18855                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 18856                           
 18857                           ;incstack = 0
 18858                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18859  1FAF  1E8B               	btfss	11,5	;volatile
 18860  1FB0  0008               	return
 18861  1FB1  1D0B               	btfss	11,2	;volatile
 18862  1FB2  0008               	return
 18863                           
 18864                           ;MCU_B1.c: 138: TMR0 = (256-190);
 18865  1FB3  3042               	movlw	66
 18866  1FB4  0020               	movlb	0	; select bank0
 18867  1FB5  0095               	movwf	21	;volatile
 18868                           
 18869                           ;MCU_B1.c: 139: TMR0IF = 0;
 18870  1FB6  110B               	bcf	11,2	;volatile
 18871                           
 18872                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 18873  1FB7  3001               	movlw	1
 18874  1FB8  3180  204D  319F   	fcall	_setDimmerLights_IntrControl
 18875                           
 18876                           ;MCU_B1.c: 149: setDimmerLights_IntrControl(2);
 18877  1FBB  3002               	movlw	2
 18878  1FBC  3180  204D  319F   	fcall	_setDimmerLights_IntrControl
 18879                           
 18880                           ;MCU_B1.c: 160: Timer0.Count++;
 18881  1FBF  3001               	movlw	1
 18882  1FC0  0022               	movlb	2	; select bank2
 18883  1FC1  07B6               	addwf	(_Timer0^(0+256)+1),f
 18884  1FC2  3000               	movlw	0
 18885  1FC3  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 18886                           
 18887                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 18888  1FC4  3001               	movlw	1
 18889  1FC5  3E35               	addlw	_Timer0& (0+255)
 18890  1FC6  0086               	movwf	6
 18891  1FC7  3001               	movlw	1	; select bank2/3
 18892  1FC8  0087               	movwf	7
 18893  1FC9  3F40               	moviw [0]fsr1
 18894  1FCA  3A64               	xorlw	100
 18895  1FCB  1D03               	skipz
 18896  1FCC  2FCF               	goto	u786_25
 18897  1FCD  3F41               	moviw [1]fsr1
 18898  1FCE  3A00               	xorlw	0
 18899  1FCF                     u786_25:	
 18900  1FCF  1D03               	skipz
 18901  1FD0  0008               	return
 18902                           
 18903                           ;MCU_B1.c: 162: Timer0.Count = 0;
 18904  1FD1  01B6               	clrf	(_Timer0^(0+256)+1)
 18905  1FD2  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 18906                           
 18907                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 18908  1FD3  0021               	movlb	1	; select bank1
 18909  1FD4  14A0               	bsf	_myMain^(0+128),1
 18910  1FD5  0008               	return
 18911  1FD6                     __end_of_TMR0_ISR:	
 18912                           
 18913                           	psect	text136
 18914  004D                     __ptext136:	
 18915 ;; *************** function _setDimmerLights_IntrControl *****************
 18916 ;; Defined at:
 18917 ;;		line 95 in file "../src/Dimmer_B1.c"
 18918 ;; Parameters:    Size  Location     Type
 18919 ;;  lights          1    wreg     unsigned char 
 18920 ;; Auto vars:     Size  Location     Type
 18921 ;;  lights          1    4[COMMON] unsigned char 
 18922 ;; Return value:  Size  Location     Type
 18923 ;;		None               void
 18924 ;; Registers used:
 18925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18926 ;; Tracked objects:
 18927 ;;		On entry : 0/0
 18928 ;;		On exit  : 0/0
 18929 ;;		Unchanged: 0/0
 18930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18932 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18933 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18934 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18935 ;;Total ram usage:        3 bytes
 18936 ;; Hardware stack levels used:    1
 18937 ;; Hardware stack levels required when called:    1
 18938 ;; This function calls:
 18939 ;;		_DimmerIntrPointSelect
 18940 ;;		i1_setLoad_StatusOff
 18941 ;; This function is called by:
 18942 ;;		_TMR0_ISR
 18943 ;; This function uses a non-reentrant model
 18944 ;;
 18945                           
 18946                           
 18947                           ;psect for function _setDimmerLights_IntrControl
 18948  004D                     _setDimmerLights_IntrControl:	
 18949                           
 18950                           ;incstack = 0
 18951                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18952                           ;setDimmerLights_IntrControl@lights stored from wreg
 18953  004D  00FA               	movwf	setDimmerLights_IntrControl@lights
 18954                           
 18955                           ;Dimmer_B1.c: 97: DimmerIntrPointSelect(lights);
 18956  004E  087A               	movf	setDimmerLights_IntrControl@lights,w
 18957  004F  319C  2418  3180   	fcall	_DimmerIntrPointSelect
 18958                           
 18959                           ;Dimmer_B1.c: 98: if (DimmerLightsIntr->GO == 1) {
 18960  0052  0875               	movf	_DimmerLightsIntr,w
 18961  0053  0086               	movwf	6
 18962  0054  3001               	movlw	1	; select bank2/3
 18963  0055  0087               	movwf	7
 18964  0056  1C01               	btfss	1,0
 18965  0057  28A7               	goto	i1l7354
 18966                           
 18967                           ;Dimmer_B1.c: 99: DimmerLightsIntr->Count++;
 18968  0058  3001               	movlw	1
 18969  0059  00F8               	movwf	??_setDimmerLights_IntrControl
 18970  005A  0875               	movf	_DimmerLightsIntr,w
 18971  005B  3E03               	addlw	3
 18972  005C  0086               	movwf	6
 18973  005D  3001               	movlw	1	; select bank2/3
 18974  005E  0087               	movwf	7
 18975  005F  0878               	movf	??_setDimmerLights_IntrControl,w
 18976  0060  0781               	addwf	1,f
 18977                           
 18978                           ;Dimmer_B1.c: 100: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimm
      +                          er->Correction)) {
 18979  0061  0873               	movf	_Dimmer,w
 18980  0062  3E02               	addlw	2
 18981  0063  0086               	movwf	6
 18982  0064  0187               	clrf	7
 18983  0065  0875               	movf	_DimmerLightsIntr,w
 18984  0066  3E04               	addlw	4
 18985  0067  0084               	movwf	4
 18986  0068  3001               	movlw	1	; select bank2/3
 18987  0069  0085               	movwf	5
 18988  006A  0800               	movf	0,w
 18989  006B  0701               	addwf	1,w
 18990  006C  00F8               	movwf	??_setDimmerLights_IntrControl
 18991  006D  01F9               	clrf	??_setDimmerLights_IntrControl+1
 18992  006E  0DF9               	rlf	??_setDimmerLights_IntrControl+1,f
 18993  006F  0875               	movf	_DimmerLightsIntr,w
 18994  0070  3E03               	addlw	3
 18995  0071  0086               	movwf	6
 18996  0072  3001               	movlw	1	; select bank2/3
 18997  0073  0087               	movwf	7
 18998  0074  0879               	movf	??_setDimmerLights_IntrControl+1,w
 18999  0075  3A80               	xorlw	128
 19000  0076  3C80               	sublw	128
 19001  0077  1D03               	skipz
 19002  0078  287B               	goto	u660_25
 19003  0079  0878               	movf	??_setDimmerLights_IntrControl,w
 19004  007A  0201               	subwf	1,w
 19005  007B                     u660_25:	
 19006  007B  1C03               	skipc
 19007  007C  29B5               	goto	i1l7418
 19008                           
 19009                           ;Dimmer_B1.c: 101: DimmerLightsIntr->Count = 0;
 19010  007D  0875               	movf	_DimmerLightsIntr,w
 19011  007E  3E03               	addlw	3
 19012  007F  0086               	movwf	6
 19013  0080  3001               	movlw	1	; select bank2/3
 19014  0081  0087               	movwf	7
 19015  0082  0181               	clrf	1
 19016                           
 19017                           ;Dimmer_B1.c: 102: DimmerLightsIntr->GO = 0;
 19018  0083  0875               	movf	_DimmerLightsIntr,w
 19019  0084  0086               	movwf	6
 19020  0085  3001               	movlw	1	; select bank2/3
 19021  0086  0087               	movwf	7
 19022  0087  1001               	bcf	1,0
 19023                           
 19024                           ;Dimmer_B1.c: 104: if (DimmerLightsIntr->StatusFlag == 1) {
 19025  0088  0875               	movf	_DimmerLightsIntr,w
 19026  0089  0086               	movwf	6
 19027  008A  3001               	movlw	1	; select bank2/3
 19028  008B  0087               	movwf	7
 19029  008C  1F01               	btfss	1,6
 19030  008D  29B5               	goto	i1l7418
 19031                           
 19032                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Flag = 1;
 19033  008E  0875               	movf	_DimmerLightsIntr,w
 19034  008F  3E08               	addlw	8
 19035  0090  0086               	movwf	6
 19036  0091  3001               	movlw	1	; select bank2/3
 19037  0092  0087               	movwf	7
 19038  0093  1401               	bsf	1,0
 19039                           
 19040                           ;Dimmer_B1.c: 106: DimmerLightsIntr->Triac = 1;
 19041  0094  0875               	movf	_DimmerLightsIntr,w
 19042  0095  3E08               	addlw	8
 19043  0096  0086               	movwf	6
 19044  0097  3001               	movlw	1	; select bank2/3
 19045  0098  0087               	movwf	7
 19046  0099  1681               	bsf	1,5
 19047                           
 19048                           ;Dimmer_B1.c: 108: if (lights == 1) {
 19049  009A  087A               	movf	setDimmerLights_IntrControl@lights,w
 19050  009B  3A01               	xorlw	1
 19051  009C  1D03               	skipz
 19052  009D  28A0               	goto	i1l7350
 19053                           
 19054                           ;Dimmer_B1.c: 109: RA7 = 1;
 19055  009E  0020               	movlb	0	; select bank0
 19056  009F  178C               	bsf	12,7	;volatile
 19057  00A0                     i1l7350:	
 19058                           ;Dimmer_B1.c: 110: ;;
 19059                           
 19060                           
 19061                           ;Dimmer_B1.c: 111: }
 19062                           ;Dimmer_B1.c: 114: if (lights == 2) {
 19063  00A0  087A               	movf	setDimmerLights_IntrControl@lights,w
 19064  00A1  3A02               	xorlw	2
 19065  00A2  1D03               	skipz
 19066  00A3  29B5               	goto	i1l7418
 19067                           
 19068                           ;Dimmer_B1.c: 115: RB4 = 1;
 19069  00A4  0020               	movlb	0	; select bank0
 19070  00A5  160D               	bsf	13,4	;volatile
 19071                           
 19072                           ;Dimmer_B1.c: 116: }
 19073                           ;Dimmer_B1.c: 123: }
 19074                           ;Dimmer_B1.c: 124: }
 19075                           ;Dimmer_B1.c: 125: } else {
 19076  00A6  29B5               	goto	i1l7418
 19077  00A7                     i1l7354:	
 19078                           
 19079                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->Flag == 1) {
 19080  00A7  0875               	movf	_DimmerLightsIntr,w
 19081  00A8  3E08               	addlw	8
 19082  00A9  0086               	movwf	6
 19083  00AA  3001               	movlw	1	; select bank2/3
 19084  00AB  0087               	movwf	7
 19085  00AC  1C01               	btfss	1,0
 19086  00AD  29B5               	goto	i1l7418
 19087                           
 19088                           ;Dimmer_B1.c: 127: DimmerLightsIntr->Flag = 0;
 19089  00AE  0875               	movf	_DimmerLightsIntr,w
 19090  00AF  3E08               	addlw	8
 19091  00B0  0086               	movwf	6
 19092  00B1  3001               	movlw	1	; select bank2/3
 19093  00B2  0087               	movwf	7
 19094  00B3  1001               	bcf	1,0
 19095                           
 19096                           ;Dimmer_B1.c: 128: if (DimmerLightsIntr->Signal == 1) {
 19097  00B4  0875               	movf	_DimmerLightsIntr,w
 19098  00B5  0086               	movwf	6
 19099  00B6  3001               	movlw	1	; select bank2/3
 19100  00B7  0087               	movwf	7
 19101  00B8  1C81               	btfss	1,1
 19102  00B9  29B5               	goto	i1l7418
 19103                           
 19104                           ;Dimmer_B1.c: 129: DimmerLightsIntr->DimmingTime++;
 19105  00BA  3001               	movlw	1
 19106  00BB  00F8               	movwf	??_setDimmerLights_IntrControl
 19107  00BC  0A75               	incf	_DimmerLightsIntr,w
 19108  00BD  0086               	movwf	6
 19109  00BE  3001               	movlw	1	; select bank2/3
 19110  00BF  0087               	movwf	7
 19111  00C0  0878               	movf	??_setDimmerLights_IntrControl,w
 19112  00C1  0781               	addwf	1,f
 19113                           
 19114                           ;Dimmer_B1.c: 130: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 19115  00C2  0A75               	incf	_DimmerLightsIntr,w
 19116  00C3  0086               	movwf	6
 19117  00C4  3001               	movlw	1	; select bank2/3
 19118  00C5  0087               	movwf	7
 19119  00C6  0875               	movf	_DimmerLightsIntr,w
 19120  00C7  3E02               	addlw	2
 19121  00C8  0084               	movwf	4
 19122  00C9  3001               	movlw	1	; select bank2/3
 19123  00CA  0085               	movwf	5
 19124  00CB  0800               	movf	0,w
 19125  00CC  0201               	subwf	1,w
 19126  00CD  1C03               	skipc
 19127  00CE  29B5               	goto	i1l7418
 19128                           
 19129                           ;Dimmer_B1.c: 131: DimmerLightsIntr->DimmingTime = 0;
 19130  00CF  0A75               	incf	_DimmerLightsIntr,w
 19131  00D0  0086               	movwf	6
 19132  00D1  3001               	movlw	1	; select bank2/3
 19133  00D2  0087               	movwf	7
 19134  00D3  0181               	clrf	1
 19135                           
 19136                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjFlag == 1) {
 19137  00D4  0875               	movf	_DimmerLightsIntr,w
 19138  00D5  0086               	movwf	6
 19139  00D6  3001               	movlw	1	; select bank2/3
 19140  00D7  0087               	movwf	7
 19141  00D8  1D81               	btfss	1,3
 19142  00D9  2910               	goto	i1l7380
 19143                           
 19144                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->AdjStatus == 0) {
 19145  00DA  0875               	movf	_DimmerLightsIntr,w
 19146  00DB  0086               	movwf	6
 19147  00DC  3001               	movlw	1	; select bank2/3
 19148  00DD  0087               	movwf	7
 19149  00DE  1A01               	btfsc	1,4
 19150  00DF  28F7               	goto	i1l7374
 19151                           
 19152                           ;Dimmer_B1.c: 134: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 19153  00E0  0875               	movf	_DimmerLightsIntr,w
 19154  00E1  3E04               	addlw	4
 19155  00E2  0086               	movwf	6
 19156  00E3  3001               	movlw	1	; select bank2/3
 19157  00E4  0087               	movwf	7
 19158  00E5  3021               	movlw	33
 19159  00E6  0201               	subwf	1,w
 19160  00E7  1C03               	skipc
 19161  00E8  28F1               	goto	i1l7372
 19162                           
 19163                           ;Dimmer_B1.c: 135: DimmerLightsIntr->DimmingValue--;
 19164  00E9  0875               	movf	_DimmerLightsIntr,w
 19165  00EA  3E04               	addlw	4
 19166  00EB  0086               	movwf	6
 19167  00EC  3001               	movlw	1	; select bank2/3
 19168  00ED  0087               	movwf	7
 19169  00EE  3001               	movlw	1
 19170  00EF  0281               	subwf	1,f
 19171                           
 19172                           ;Dimmer_B1.c: 136: } else {
 19173  00F0  29B5               	goto	i1l7418
 19174  00F1                     i1l7372:	
 19175                           
 19176                           ;Dimmer_B1.c: 137: DimmerLightsIntr->AdjStatus = 1;
 19177  00F1  0875               	movf	_DimmerLightsIntr,w
 19178  00F2  0086               	movwf	6
 19179  00F3  3001               	movlw	1	; select bank2/3
 19180  00F4  0087               	movwf	7
 19181  00F5  1601               	bsf	1,4
 19182                           
 19183                           ;Dimmer_B1.c: 138: }
 19184                           ;Dimmer_B1.c: 139: } else {
 19185  00F6  29B5               	goto	i1l7418
 19186  00F7                     i1l7374:	
 19187                           
 19188                           ;Dimmer_B1.c: 140: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 19189  00F7  0875               	movf	_DimmerLightsIntr,w
 19190  00F8  3E04               	addlw	4
 19191  00F9  0086               	movwf	6
 19192  00FA  3001               	movlw	1	; select bank2/3
 19193  00FB  0087               	movwf	7
 19194  00FC  303C               	movlw	60
 19195  00FD  0201               	subwf	1,w
 19196  00FE  1803               	skipnc
 19197  00FF  290A               	goto	i1l7378
 19198                           
 19199                           ;Dimmer_B1.c: 141: DimmerLightsIntr->DimmingValue++;
 19200  0100  3001               	movlw	1
 19201  0101  00F8               	movwf	??_setDimmerLights_IntrControl
 19202  0102  0875               	movf	_DimmerLightsIntr,w
 19203  0103  3E04               	addlw	4
 19204  0104  0086               	movwf	6
 19205  0105  3001               	movlw	1	; select bank2/3
 19206  0106  0087               	movwf	7
 19207  0107  0878               	movf	??_setDimmerLights_IntrControl,w
 19208  0108  0781               	addwf	1,f
 19209                           
 19210                           ;Dimmer_B1.c: 142: } else {
 19211  0109  29B5               	goto	i1l7418
 19212  010A                     i1l7378:	
 19213                           
 19214                           ;Dimmer_B1.c: 143: DimmerLightsIntr->AdjStatus = 0;
 19215  010A  0875               	movf	_DimmerLightsIntr,w
 19216  010B  0086               	movwf	6
 19217  010C  3001               	movlw	1	; select bank2/3
 19218  010D  0087               	movwf	7
 19219  010E  1201               	bcf	1,4
 19220                           
 19221                           ;Dimmer_B1.c: 144: }
 19222                           ;Dimmer_B1.c: 145: }
 19223                           ;Dimmer_B1.c: 146: } else if (DimmerLightsIntr->AdjRF == 1) {
 19224  010F  29B5               	goto	i1l7418
 19225  0110                     i1l7380:	
 19226  0110  0875               	movf	_DimmerLightsIntr,w
 19227  0111  0086               	movwf	6
 19228  0112  3001               	movlw	1	; select bank2/3
 19229  0113  0087               	movwf	7
 19230  0114  1D01               	btfss	1,2
 19231  0115  2957               	goto	i1l7394
 19232                           
 19233                           ;Dimmer_B1.c: 147: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 19234  0116  0875               	movf	_DimmerLightsIntr,w
 19235  0117  3E05               	addlw	5
 19236  0118  0086               	movwf	6
 19237  0119  3001               	movlw	1	; select bank2/3
 19238  011A  0087               	movwf	7
 19239  011B  0875               	movf	_DimmerLightsIntr,w
 19240  011C  3E04               	addlw	4
 19241  011D  0084               	movwf	4
 19242  011E  3001               	movlw	1	; select bank2/3
 19243  011F  0085               	movwf	5
 19244  0120  0800               	movf	0,w
 19245  0121  0201               	subwf	1,w
 19246  0122  1803               	skipnc
 19247  0123  292C               	goto	i1l7386
 19248                           
 19249                           ;Dimmer_B1.c: 148: DimmerLightsIntr->DimmingValue--;
 19250  0124  0875               	movf	_DimmerLightsIntr,w
 19251  0125  3E04               	addlw	4
 19252  0126  0086               	movwf	6
 19253  0127  3001               	movlw	1	; select bank2/3
 19254  0128  0087               	movwf	7
 19255  0129  3001               	movlw	1
 19256  012A  0281               	subwf	1,f
 19257                           
 19258                           ;Dimmer_B1.c: 149: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 19259  012B  2943               	goto	i1l7390
 19260  012C                     i1l7386:	
 19261  012C  0875               	movf	_DimmerLightsIntr,w
 19262  012D  3E04               	addlw	4
 19263  012E  0086               	movwf	6
 19264  012F  3001               	movlw	1	; select bank2/3
 19265  0130  0087               	movwf	7
 19266  0131  0875               	movf	_DimmerLightsIntr,w
 19267  0132  3E05               	addlw	5
 19268  0133  0084               	movwf	4
 19269  0134  3001               	movlw	1	; select bank2/3
 19270  0135  0085               	movwf	5
 19271  0136  0800               	movf	0,w
 19272  0137  0201               	subwf	1,w
 19273  0138  1803               	skipnc
 19274  0139  2943               	goto	i1l7390
 19275                           
 19276                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue++;
 19277  013A  3001               	movlw	1
 19278  013B  00F8               	movwf	??_setDimmerLights_IntrControl
 19279  013C  0875               	movf	_DimmerLightsIntr,w
 19280  013D  3E04               	addlw	4
 19281  013E  0086               	movwf	6
 19282  013F  3001               	movlw	1	; select bank2/3
 19283  0140  0087               	movwf	7
 19284  0141  0878               	movf	??_setDimmerLights_IntrControl,w
 19285  0142  0781               	addwf	1,f
 19286  0143                     i1l7390:	
 19287                           
 19288                           ;Dimmer_B1.c: 151: }
 19289                           ;Dimmer_B1.c: 152: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 19290  0143  0875               	movf	_DimmerLightsIntr,w
 19291  0144  3E05               	addlw	5
 19292  0145  0086               	movwf	6
 19293  0146  3001               	movlw	1	; select bank2/3
 19294  0147  0087               	movwf	7
 19295  0148  0875               	movf	_DimmerLightsIntr,w
 19296  0149  3E04               	addlw	4
 19297  014A  0084               	movwf	4
 19298  014B  3001               	movlw	1	; select bank2/3
 19299  014C  0085               	movwf	5
 19300  014D  0800               	movf	0,w
 19301  014E  0601               	xorwf	1,w
 19302  014F  1D03               	skipz
 19303  0150  29B5               	goto	i1l7418
 19304                           
 19305                           ;Dimmer_B1.c: 153: DimmerLightsIntr->AdjRF = 0;
 19306  0151  0875               	movf	_DimmerLightsIntr,w
 19307  0152  0086               	movwf	6
 19308  0153  3001               	movlw	1	; select bank2/3
 19309  0154  0087               	movwf	7
 19310  0155  1101               	bcf	1,2
 19311  0156  2972               	goto	i1l7400
 19312  0157                     i1l7394:	
 19313                           ;Dimmer_B1.c: 155: }
 19314                           ;Dimmer_B1.c: 156: } else {
 19315                           
 19316                           ;Dimmer_B1.c: 154: DimmerLightsIntr->Signal = 0;
 19317                           
 19318                           
 19319                           ;Dimmer_B1.c: 157: if (DimmerLightsIntr->Status == 1) {
 19320  0157  0875               	movf	_DimmerLightsIntr,w
 19321  0158  0086               	movwf	6
 19322  0159  3001               	movlw	1	; select bank2/3
 19323  015A  0087               	movwf	7
 19324  015B  1E81               	btfss	1,5
 19325  015C  2978               	goto	i1l7402
 19326                           
 19327                           ;Dimmer_B1.c: 158: DimmerLightsIntr->DimmingValue--;
 19328  015D  0875               	movf	_DimmerLightsIntr,w
 19329  015E  3E04               	addlw	4
 19330  015F  0086               	movwf	6
 19331  0160  3001               	movlw	1	; select bank2/3
 19332  0161  0087               	movwf	7
 19333  0162  3001               	movlw	1
 19334  0163  0281               	subwf	1,f
 19335                           
 19336                           ;Dimmer_B1.c: 159: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 19337  0164  0875               	movf	_DimmerLightsIntr,w
 19338  0165  3E05               	addlw	5
 19339  0166  0086               	movwf	6
 19340  0167  3001               	movlw	1	; select bank2/3
 19341  0168  0087               	movwf	7
 19342  0169  0875               	movf	_DimmerLightsIntr,w
 19343  016A  3E04               	addlw	4
 19344  016B  0084               	movwf	4
 19345  016C  3001               	movlw	1	; select bank2/3
 19346  016D  0085               	movwf	5
 19347  016E  0800               	movf	0,w
 19348  016F  0201               	subwf	1,w
 19349  0170  1C03               	skipc
 19350  0171  29B5               	goto	i1l7418
 19351  0172                     i1l7400:	
 19352                           
 19353                           ;Dimmer_B1.c: 160: DimmerLightsIntr->Signal = 0;
 19354  0172  0875               	movf	_DimmerLightsIntr,w
 19355  0173  0086               	movwf	6
 19356  0174  3001               	movlw	1	; select bank2/3
 19357  0175  0087               	movwf	7
 19358  0176  1081               	bcf	1,1
 19359                           
 19360                           ;Dimmer_B1.c: 161: }
 19361                           ;Dimmer_B1.c: 162: } else {
 19362  0177  29B5               	goto	i1l7418
 19363  0178                     i1l7402:	
 19364                           
 19365                           ;Dimmer_B1.c: 163: DimmerLightsIntr->DimmingValue++;
 19366  0178  3001               	movlw	1
 19367  0179  00F8               	movwf	??_setDimmerLights_IntrControl
 19368  017A  0875               	movf	_DimmerLightsIntr,w
 19369  017B  3E04               	addlw	4
 19370  017C  0086               	movwf	6
 19371  017D  3001               	movlw	1	; select bank2/3
 19372  017E  0087               	movwf	7
 19373  017F  0878               	movf	??_setDimmerLights_IntrControl,w
 19374  0180  0781               	addwf	1,f
 19375                           
 19376                           ;Dimmer_B1.c: 164: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 19377  0181  0875               	movf	_DimmerLightsIntr,w
 19378  0182  3E04               	addlw	4
 19379  0183  0086               	movwf	6
 19380  0184  3001               	movlw	1	; select bank2/3
 19381  0185  0087               	movwf	7
 19382  0186  0875               	movf	_DimmerLightsIntr,w
 19383  0187  3E06               	addlw	6
 19384  0188  0084               	movwf	4
 19385  0189  3001               	movlw	1	; select bank2/3
 19386  018A  0085               	movwf	5
 19387  018B  0800               	movf	0,w
 19388  018C  0201               	subwf	1,w
 19389  018D  1C03               	skipc
 19390  018E  29B5               	goto	i1l7418
 19391                           
 19392                           ;Dimmer_B1.c: 165: DimmerLightsIntr->Signal = 0;
 19393  018F  0875               	movf	_DimmerLightsIntr,w
 19394  0190  0086               	movwf	6
 19395  0191  3001               	movlw	1	; select bank2/3
 19396  0192  0087               	movwf	7
 19397  0193  1081               	bcf	1,1
 19398                           
 19399                           ;Dimmer_B1.c: 166: DimmerLightsIntr->StatusFlag = 0;
 19400  0194  0875               	movf	_DimmerLightsIntr,w
 19401  0195  0086               	movwf	6
 19402  0196  3001               	movlw	1	; select bank2/3
 19403  0197  0087               	movwf	7
 19404  0198  1301               	bcf	1,6
 19405                           
 19406                           ;Dimmer_B1.c: 167: DimmerLightsIntr->Clear = 1;
 19407  0199  0875               	movf	_DimmerLightsIntr,w
 19408  019A  3E09               	addlw	9
 19409  019B  0086               	movwf	6
 19410  019C  3001               	movlw	1	; select bank2/3
 19411  019D  0087               	movwf	7
 19412  019E  1501               	bsf	1,2
 19413                           
 19414                           ;Dimmer_B1.c: 168: Dimmer->Detect = 1;
 19415  019F  0873               	movf	_Dimmer,w
 19416  01A0  0086               	movwf	6
 19417  01A1  0187               	clrf	7
 19418  01A2  1401               	bsf	1,0
 19419                           
 19420                           ;Dimmer_B1.c: 170: if (lights == 1) {
 19421  01A3  087A               	movf	setDimmerLights_IntrControl@lights,w
 19422  01A4  3A01               	xorlw	1
 19423  01A5  1D03               	skipz
 19424  01A6  29A9               	goto	i1l7412
 19425                           
 19426                           ;Dimmer_B1.c: 171: RA3 = 0;
 19427  01A7  0020               	movlb	0	; select bank0
 19428  01A8  118C               	bcf	12,3	;volatile
 19429  01A9                     i1l7412:	
 19430                           
 19431                           ;Dimmer_B1.c: 173: }
 19432                           ;Dimmer_B1.c: 176: if (lights == 2) {
 19433  01A9  087A               	movf	setDimmerLights_IntrControl@lights,w
 19434  01AA  3A02               	xorlw	2
 19435  01AB  1D03               	skipz
 19436  01AC  29AF               	goto	i1l7416
 19437                           
 19438                           ;Dimmer_B1.c: 177: RC7 = 0;
 19439  01AD  0020               	movlb	0	; select bank0
 19440  01AE  138E               	bcf	14,7	;volatile
 19441  01AF                     i1l7416:	
 19442                           
 19443                           ;Dimmer_B1.c: 178: }
 19444                           ;Dimmer_B1.c: 185: setLoad_StatusOff(lights, 1);
 19445  01AF  01F6               	clrf	i1setLoad_StatusOff@command
 19446  01B0  0AF6               	incf	i1setLoad_StatusOff@command,f
 19447  01B1  087A               	movf	setDimmerLights_IntrControl@lights,w
 19448  01B2  319C  24EC  3180   	fcall	i1_setLoad_StatusOff
 19449  01B5                     i1l7418:	
 19450                           
 19451                           ;Dimmer_B1.c: 186: }
 19452                           ;Dimmer_B1.c: 187: }
 19453                           ;Dimmer_B1.c: 188: }
 19454                           ;Dimmer_B1.c: 189: }
 19455                           ;Dimmer_B1.c: 190: }
 19456                           ;Dimmer_B1.c: 191: }
 19457                           ;Dimmer_B1.c: 192: }
 19458                           ;Dimmer_B1.c: 193: if (DimmerLightsIntr->Triac == 1) {
 19459  01B5  0875               	movf	_DimmerLightsIntr,w
 19460  01B6  3E08               	addlw	8
 19461  01B7  0086               	movwf	6
 19462  01B8  3001               	movlw	1	; select bank2/3
 19463  01B9  0087               	movwf	7
 19464  01BA  1E81               	btfss	1,5
 19465  01BB  29E6               	goto	i1l7436
 19466                           
 19467                           ;Dimmer_B1.c: 194: DimmerLightsIntr->TriacTime++;
 19468  01BC  3001               	movlw	1
 19469  01BD  00F8               	movwf	??_setDimmerLights_IntrControl
 19470  01BE  0875               	movf	_DimmerLightsIntr,w
 19471  01BF  3E07               	addlw	7
 19472  01C0  0086               	movwf	6
 19473  01C1  3001               	movlw	1	; select bank2/3
 19474  01C2  0087               	movwf	7
 19475  01C3  0878               	movf	??_setDimmerLights_IntrControl,w
 19476  01C4  0781               	addwf	1,f
 19477                           
 19478                           ;Dimmer_B1.c: 195: if (DimmerLightsIntr->TriacTime >= 5) {
 19479  01C5  0875               	movf	_DimmerLightsIntr,w
 19480  01C6  3E07               	addlw	7
 19481  01C7  0086               	movwf	6
 19482  01C8  3001               	movlw	1	; select bank2/3
 19483  01C9  0087               	movwf	7
 19484  01CA  3005               	movlw	5
 19485  01CB  0201               	subwf	1,w
 19486  01CC  1C03               	skipc
 19487  01CD  29E6               	goto	i1l7436
 19488                           
 19489                           ;Dimmer_B1.c: 196: DimmerLightsIntr->TriacTime = 0;
 19490  01CE  0875               	movf	_DimmerLightsIntr,w
 19491  01CF  3E07               	addlw	7
 19492  01D0  0086               	movwf	6
 19493  01D1  3001               	movlw	1	; select bank2/3
 19494  01D2  0087               	movwf	7
 19495  01D3  0181               	clrf	1
 19496                           
 19497                           ;Dimmer_B1.c: 197: DimmerLightsIntr->Triac = 0;
 19498  01D4  0875               	movf	_DimmerLightsIntr,w
 19499  01D5  3E08               	addlw	8
 19500  01D6  0086               	movwf	6
 19501  01D7  3001               	movlw	1	; select bank2/3
 19502  01D8  0087               	movwf	7
 19503  01D9  1281               	bcf	1,5
 19504                           
 19505                           ;Dimmer_B1.c: 200: if (lights == 1) {
 19506  01DA  087A               	movf	setDimmerLights_IntrControl@lights,w
 19507  01DB  3A01               	xorlw	1
 19508  01DC  1D03               	skipz
 19509  01DD  29E0               	goto	i1l7432
 19510                           
 19511                           ;Dimmer_B1.c: 201: RA7 = 0;
 19512  01DE  0020               	movlb	0	; select bank0
 19513  01DF  138C               	bcf	12,7	;volatile
 19514  01E0                     i1l7432:	
 19515                           ;Dimmer_B1.c: 202: ;;
 19516                           
 19517                           
 19518                           ;Dimmer_B1.c: 203: }
 19519                           ;Dimmer_B1.c: 206: if (lights == 2) {
 19520  01E0  087A               	movf	setDimmerLights_IntrControl@lights,w
 19521  01E1  3A02               	xorlw	2
 19522  01E2  1D03               	skipz
 19523  01E3  29E6               	goto	i1l7436
 19524                           
 19525                           ;Dimmer_B1.c: 207: RB4 = 0;
 19526  01E4  0020               	movlb	0	; select bank0
 19527  01E5  120D               	bcf	13,4	;volatile
 19528  01E6                     i1l7436:	
 19529                           
 19530                           ;Dimmer_B1.c: 208: }
 19531                           ;Dimmer_B1.c: 215: }
 19532                           ;Dimmer_B1.c: 216: }
 19533                           ;Dimmer_B1.c: 217: if (DimmerLightsIntr->TriacFlag == 1) {
 19534  01E6  0875               	movf	_DimmerLightsIntr,w
 19535  01E7  3E09               	addlw	9
 19536  01E8  0086               	movwf	6
 19537  01E9  3001               	movlw	1	; select bank2/3
 19538  01EA  0087               	movwf	7
 19539  01EB  1E81               	btfss	1,5
 19540  01EC  0008               	return
 19541                           
 19542                           ;Dimmer_B1.c: 218: DimmerLightsIntr->TriacCount++;
 19543  01ED  3001               	movlw	1
 19544  01EE  00F8               	movwf	??_setDimmerLights_IntrControl
 19545  01EF  0875               	movf	_DimmerLightsIntr,w
 19546  01F0  3E0A               	addlw	10
 19547  01F1  0086               	movwf	6
 19548  01F2  3001               	movlw	1	; select bank2/3
 19549  01F3  0087               	movwf	7
 19550  01F4  0878               	movf	??_setDimmerLights_IntrControl,w
 19551  01F5  0781               	addwf	1,f
 19552                           
 19553                           ;Dimmer_B1.c: 219: if (DimmerLightsIntr->TriacCount == 70) {
 19554  01F6  0875               	movf	_DimmerLightsIntr,w
 19555  01F7  3E0A               	addlw	10
 19556  01F8  0086               	movwf	6
 19557  01F9  3001               	movlw	1	; select bank2/3
 19558  01FA  0087               	movwf	7
 19559  01FB  0801               	movf	1,w
 19560  01FC  3A46               	xorlw	70
 19561  01FD  1D03               	skipz
 19562  01FE  0008               	return
 19563                           
 19564                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacCount = 0;
 19565  01FF  0875               	movf	_DimmerLightsIntr,w
 19566  0200  3E0A               	addlw	10
 19567  0201  0086               	movwf	6
 19568  0202  3001               	movlw	1	; select bank2/3
 19569  0203  0087               	movwf	7
 19570  0204  0181               	clrf	1
 19571                           
 19572                           ;Dimmer_B1.c: 221: DimmerLightsIntr->TriacFlag = 0;
 19573  0205  0875               	movf	_DimmerLightsIntr,w
 19574  0206  3E09               	addlw	9
 19575  0207  0086               	movwf	6
 19576  0208  3001               	movlw	1	; select bank2/3
 19577  0209  0087               	movwf	7
 19578  020A  1281               	bcf	1,5
 19579  020B  0008               	return
 19580  020C                     __end_of_setDimmerLights_IntrControl:	
 19581                           
 19582                           	psect	text137
 19583  1CEC                     __ptext137:	
 19584 ;; *************** function i1_setLoad_StatusOff *****************
 19585 ;; Defined at:
 19586 ;;		line 282 in file "../src/OverLoad_B1.c"
 19587 ;; Parameters:    Size  Location     Type
 19588 ;;  lights          1    wreg     unsigned char 
 19589 ;;  command         1    0[COMMON] unsigned char 
 19590 ;; Auto vars:     Size  Location     Type
 19591 ;;  lights          1    1[COMMON] unsigned char 
 19592 ;; Return value:  Size  Location     Type
 19593 ;;		None               void
 19594 ;; Registers used:
 19595 ;;		wreg, status,2, status,0
 19596 ;; Tracked objects:
 19597 ;;		On entry : 0/0
 19598 ;;		On exit  : 0/0
 19599 ;;		Unchanged: 0/0
 19600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19601 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19602 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19604 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19605 ;;Total ram usage:        2 bytes
 19606 ;; Hardware stack levels used:    1
 19607 ;; This function calls:
 19608 ;;		Nothing
 19609 ;; This function is called by:
 19610 ;;		_setDimmerLights_IntrControl
 19611 ;; This function uses a non-reentrant model
 19612 ;;
 19613                           
 19614                           
 19615                           ;psect for function i1_setLoad_StatusOff
 19616  1CEC                     i1_setLoad_StatusOff:	
 19617                           
 19618                           ;incstack = 0
 19619                           ; Regs used in i1_setLoad_StatusOff: [wreg+status,2+status,0]
 19620                           ;i1setLoad_StatusOff@lights stored from wreg
 19621  1CEC  00F7               	movwf	i1setLoad_StatusOff@lights
 19622                           
 19623                           ;OverLoad_B1.c: 283: Load1.StatusOff = command;
 19624  1CED  0876               	movf	i1setLoad_StatusOff@command,w
 19625  1CEE  0023               	movlb	3	; select bank3
 19626  1CEF  13A0               	bcf	_Load1^(0+384),7
 19627  1CF0  1D03               	skipz
 19628  1CF1  17A0               	bsf	_Load1^(0+384),7
 19629                           
 19630                           ;OverLoad_B1.c: 284: Load1.SafeCount -= 2;
 19631  1CF2  3002               	movlw	2
 19632  1CF3  02E2               	subwf	(_Load1^(0+384)+66),f
 19633                           
 19634                           ;OverLoad_B1.c: 285: if (lights == 1) {
 19635  1CF4  0877               	movf	i1setLoad_StatusOff@lights,w
 19636  1CF5  3A01               	xorlw	1
 19637  1CF6  1903               	btfsc	3,2
 19638                           
 19639                           ;OverLoad_B1.c: 286: Load1.Lights1Status = 0;
 19640  1CF7  01E3               	clrf	(_Load1^(0+384)+67)
 19641                           
 19642                           ;OverLoad_B1.c: 287: }
 19643                           ;OverLoad_B1.c: 288: if (lights == 2) {
 19644  1CF8  0877               	movf	i1setLoad_StatusOff@lights,w
 19645  1CF9  3A02               	xorlw	2
 19646  1CFA  1903               	btfsc	3,2
 19647                           
 19648                           ;OverLoad_B1.c: 289: Load1.Lights2Status = 0;
 19649  1CFB  01E4               	clrf	(_Load1^(0+384)+68)
 19650                           
 19651                           ;OverLoad_B1.c: 290: }
 19652                           ;OverLoad_B1.c: 291: if (lights == 3) {
 19653  1CFC  0877               	movf	i1setLoad_StatusOff@lights,w
 19654  1CFD  3A03               	xorlw	3
 19655  1CFE  1D03               	skipz
 19656  1CFF  0008               	return
 19657                           
 19658                           ;OverLoad_B1.c: 292: Load1.Lights3Status = 0;
 19659  1D00  01E5               	clrf	(_Load1^(0+384)+69)
 19660  1D01  0008               	return
 19661  1D02                     __end_ofi1_setLoad_StatusOff:	
 19662                           
 19663                           	psect	text138
 19664  1C18                     __ptext138:	
 19665 ;; *************** function _DimmerIntrPointSelect *****************
 19666 ;; Defined at:
 19667 ;;		line 73 in file "../src/Dimmer_B1.c"
 19668 ;; Parameters:    Size  Location     Type
 19669 ;;  lights          1    wreg     unsigned char 
 19670 ;; Auto vars:     Size  Location     Type
 19671 ;;  lights          1    1[COMMON] unsigned char 
 19672 ;; Return value:  Size  Location     Type
 19673 ;;		None               void
 19674 ;; Registers used:
 19675 ;;		wreg
 19676 ;; Tracked objects:
 19677 ;;		On entry : 0/0
 19678 ;;		On exit  : 0/0
 19679 ;;		Unchanged: 0/0
 19680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19682 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19683 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19684 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19685 ;;Total ram usage:        2 bytes
 19686 ;; Hardware stack levels used:    1
 19687 ;; This function calls:
 19688 ;;		Nothing
 19689 ;; This function is called by:
 19690 ;;		_setDimmerLights_IntrControl
 19691 ;; This function uses a non-reentrant model
 19692 ;;
 19693                           
 19694                           
 19695                           ;psect for function _DimmerIntrPointSelect
 19696  1C18                     _DimmerIntrPointSelect:	
 19697                           
 19698                           ;incstack = 0
 19699                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19700                           ;DimmerIntrPointSelect@lights stored from wreg
 19701  1C18  00F7               	movwf	DimmerIntrPointSelect@lights
 19702                           
 19703                           ;Dimmer_B1.c: 75: if (lights == 1) {
 19704  1C19  0877               	movf	DimmerIntrPointSelect@lights,w
 19705  1C1A  3A01               	xorlw	1
 19706  1C1B  1D03               	skipz
 19707  1C1C  2C21               	goto	i1l781
 19708                           
 19709                           ;Dimmer_B1.c: 76: DimmerLightsIntr = &DimmerLights1;
 19710  1C1D  303D               	movlw	_DimmerLights1& (0+255)
 19711  1C1E  00F6               	movwf	??_DimmerIntrPointSelect
 19712  1C1F  0876               	movf	??_DimmerIntrPointSelect,w
 19713  1C20  00F5               	movwf	_DimmerLightsIntr
 19714  1C21                     i1l781:	
 19715                           
 19716                           ;Dimmer_B1.c: 77: }
 19717                           ;Dimmer_B1.c: 80: if (lights == 2) {
 19718  1C21  0877               	movf	DimmerIntrPointSelect@lights,w
 19719  1C22  3A02               	xorlw	2
 19720  1C23  1D03               	skipz
 19721  1C24  0008               	return
 19722                           
 19723                           ;Dimmer_B1.c: 81: DimmerLightsIntr = &DimmerLights2;
 19724  1C25  304C               	movlw	_DimmerLights2& (0+255)
 19725  1C26  00F6               	movwf	??_DimmerIntrPointSelect
 19726  1C27  0876               	movf	??_DimmerIntrPointSelect,w
 19727  1C28  00F5               	movwf	_DimmerLightsIntr
 19728  1C29  0008               	return
 19729  1C2A                     __end_of_DimmerIntrPointSelect:	
 19730                           
 19731                           	psect	text139
 19732  1B09                     __ptext139:	
 19733 ;; *************** function _IOC_ISR *****************
 19734 ;; Defined at:
 19735 ;;		line 291 in file "../src/MCU_B1.c"
 19736 ;; Parameters:    Size  Location     Type
 19737 ;;		None
 19738 ;; Auto vars:     Size  Location     Type
 19739 ;;		None
 19740 ;; Return value:  Size  Location     Type
 19741 ;;		None               void
 19742 ;; Registers used:
 19743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19744 ;; Tracked objects:
 19745 ;;		On entry : 0/0
 19746 ;;		On exit  : 0/0
 19747 ;;		Unchanged: 0/0
 19748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19753 ;;Total ram usage:        0 bytes
 19754 ;; Hardware stack levels used:    1
 19755 ;; Hardware stack levels required when called:    3
 19756 ;; This function calls:
 19757 ;;		_setDimmerReClock
 19758 ;; This function is called by:
 19759 ;;		_ISR
 19760 ;; This function uses a non-reentrant model
 19761 ;;
 19762                           
 19763                           
 19764                           ;psect for function _IOC_ISR
 19765  1B09                     _IOC_ISR:	
 19766                           
 19767                           ;MCU_B1.c: 292: if (IOCIE == 1 && IOCBF2 == 1) {
 19768                           
 19769                           ;incstack = 0
 19770                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19771  1B09  1D8B               	btfss	11,3	;volatile
 19772  1B0A  0008               	return
 19773  1B0B  0027               	movlb	7	; select bank7
 19774  1B0C  1D16               	btfss	22,2	;volatile
 19775  1B0D  0008               	return
 19776                           
 19777                           ;MCU_B1.c: 293: IOCBF2 = 0;
 19778  1B0E  1116               	bcf	22,2	;volatile
 19779                           
 19780                           ;MCU_B1.c: 294: IOCIF = 0;
 19781  1B0F  100B               	bcf	11,0	;volatile
 19782                           
 19783                           ;MCU_B1.c: 295: if (myMain.PowerON == 1) {
 19784  1B10  0021               	movlb	1	; select bank1
 19785  1B11  1C20               	btfss	_myMain^(0+128),0
 19786  1B12  0008               	return
 19787                           
 19788                           ;MCU_B1.c: 297: setDimmerReClock();
 19789  1B13  319A  224E         	fcall	_setDimmerReClock
 19790  1B15  0008               	return
 19791  1B16                     __end_of_IOC_ISR:	
 19792                           
 19793                           	psect	text140
 19794  1A4E                     __ptext140:	
 19795 ;; *************** function _setDimmerReClock *****************
 19796 ;; Defined at:
 19797 ;;		line 169 in file "../src/MCU_B1.c"
 19798 ;; Parameters:    Size  Location     Type
 19799 ;;		None
 19800 ;; Auto vars:     Size  Location     Type
 19801 ;;		None
 19802 ;; Return value:  Size  Location     Type
 19803 ;;		None               void
 19804 ;; Registers used:
 19805 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19806 ;; Tracked objects:
 19807 ;;		On entry : 0/0
 19808 ;;		On exit  : 0/0
 19809 ;;		Unchanged: 0/0
 19810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19815 ;;Total ram usage:        0 bytes
 19816 ;; Hardware stack levels used:    1
 19817 ;; Hardware stack levels required when called:    2
 19818 ;; This function calls:
 19819 ;;		_setDimmerLights_IntrIOC_GO
 19820 ;; This function is called by:
 19821 ;;		_IOC_ISR
 19822 ;; This function uses a non-reentrant model
 19823 ;;
 19824                           
 19825                           
 19826                           ;psect for function _setDimmerReClock
 19827  1A4E                     _setDimmerReClock:	
 19828                           
 19829                           ;MCU_B1.c: 174: setDimmerLights_IntrIOC_GO(1);
 19830                           
 19831                           ;incstack = 0
 19832                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19833  1A4E  3001               	movlw	1
 19834  1A4F  3190  2098  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19835                           
 19836                           ;MCU_B1.c: 178: setDimmerLights_IntrIOC_GO(2);
 19837  1A52  3002               	movlw	2
 19838  1A53  3190  2098         	fcall	_setDimmerLights_IntrIOC_GO
 19839  1A55  0008               	return
 19840  1A56                     __end_of_setDimmerReClock:	
 19841                           
 19842                           	psect	text141
 19843  1098                     __ptext141:	
 19844 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19845 ;; Defined at:
 19846 ;;		line 28 in file "../src/Dimmer_B1.c"
 19847 ;; Parameters:    Size  Location     Type
 19848 ;;  lights          1    wreg     unsigned char 
 19849 ;; Auto vars:     Size  Location     Type
 19850 ;;  lights          1    2[COMMON] unsigned char 
 19851 ;; Return value:  Size  Location     Type
 19852 ;;		None               void
 19853 ;; Registers used:
 19854 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19855 ;; Tracked objects:
 19856 ;;		On entry : 0/0
 19857 ;;		On exit  : 0/0
 19858 ;;		Unchanged: 0/0
 19859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19861 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19863 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19864 ;;Total ram usage:        1 bytes
 19865 ;; Hardware stack levels used:    1
 19866 ;; Hardware stack levels required when called:    1
 19867 ;; This function calls:
 19868 ;;		_DimmerIntrIOCPointSelect
 19869 ;; This function is called by:
 19870 ;;		_setDimmerReClock
 19871 ;; This function uses a non-reentrant model
 19872 ;;
 19873                           
 19874                           
 19875                           ;psect for function _setDimmerLights_IntrIOC_GO
 19876  1098                     _setDimmerLights_IntrIOC_GO:	
 19877                           
 19878                           ;incstack = 0
 19879                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19880                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19881  1098  00F8               	movwf	setDimmerLights_IntrIOC_GO@lights
 19882                           
 19883                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 19884  1099  0878               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19885  109A  319C  2486  3190   	fcall	_DimmerIntrIOCPointSelect
 19886                           
 19887                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 19888  109D  0021               	movlb	1	; select bank1
 19889  109E  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 19890  109F  0086               	movwf	6
 19891  10A0  3001               	movlw	1	; select bank2/3
 19892  10A1  0087               	movwf	7
 19893  10A2  1801               	btfsc	1,0
 19894  10A3  0008               	return
 19895  10A4  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 19896  10A5  3E09               	addlw	9
 19897  10A6  0086               	movwf	6
 19898  10A7  3001               	movlw	1	; select bank2/3
 19899  10A8  0087               	movwf	7
 19900  10A9  1A81               	btfsc	1,5
 19901  10AA  0008               	return
 19902                           
 19903                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 19904  10AB  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 19905  10AC  0086               	movwf	6
 19906  10AD  3001               	movlw	1	; select bank2/3
 19907  10AE  0087               	movwf	7
 19908  10AF  1401               	bsf	1,0
 19909                           
 19910                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 19911  10B0  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 19912  10B1  3E09               	addlw	9
 19913  10B2  0086               	movwf	6
 19914  10B3  3001               	movlw	1	; select bank2/3
 19915  10B4  0087               	movwf	7
 19916  10B5  1681               	bsf	1,5
 19917                           
 19918                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 19919  10B6  0020               	movlb	0	; select bank0
 19920  10B7  1D0D               	btfss	13,2	;volatile
 19921  10B8  28C0               	goto	i1l6954
 19922                           
 19923                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 19924  10B9  0873               	movf	_Dimmer,w
 19925  10BA  3E02               	addlw	2
 19926  10BB  0086               	movwf	6
 19927  10BC  0187               	clrf	7
 19928  10BD  0181               	clrf	1
 19929  10BE  0A81               	incf	1,f
 19930                           
 19931                           ;Dimmer_B1.c: 37: } else {
 19932  10BF  0008               	return
 19933  10C0                     i1l6954:	
 19934                           
 19935                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 19936  10C0  0873               	movf	_Dimmer,w
 19937  10C1  3E02               	addlw	2
 19938  10C2  0086               	movwf	6
 19939  10C3  0187               	clrf	7
 19940  10C4  0181               	clrf	1
 19941  10C5  0008               	return
 19942  10C6                     __end_of_setDimmerLights_IntrIOC_GO:	
 19943                           
 19944                           	psect	text142
 19945  1C86                     __ptext142:	
 19946 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19947 ;; Defined at:
 19948 ;;		line 8 in file "../src/Dimmer_B1.c"
 19949 ;; Parameters:    Size  Location     Type
 19950 ;;  lights          1    wreg     unsigned char 
 19951 ;; Auto vars:     Size  Location     Type
 19952 ;;  lights          1    1[COMMON] unsigned char 
 19953 ;; Return value:  Size  Location     Type
 19954 ;;		None               void
 19955 ;; Registers used:
 19956 ;;		wreg
 19957 ;; Tracked objects:
 19958 ;;		On entry : 0/0
 19959 ;;		On exit  : 0/0
 19960 ;;		Unchanged: 0/0
 19961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19964 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19965 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19966 ;;Total ram usage:        2 bytes
 19967 ;; Hardware stack levels used:    1
 19968 ;; This function calls:
 19969 ;;		Nothing
 19970 ;; This function is called by:
 19971 ;;		_setDimmerLights_IntrIOC_GO
 19972 ;; This function uses a non-reentrant model
 19973 ;;
 19974                           
 19975                           
 19976                           ;psect for function _DimmerIntrIOCPointSelect
 19977  1C86                     _DimmerIntrIOCPointSelect:	
 19978                           
 19979                           ;incstack = 0
 19980                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19981                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19982  1C86  00F7               	movwf	DimmerIntrIOCPointSelect@lights
 19983                           
 19984                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19985  1C87  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 19986  1C88  3A01               	xorlw	1
 19987  1C89  1D03               	skipz
 19988  1C8A  2C90               	goto	i1l770
 19989                           
 19990                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19991  1C8B  303D               	movlw	_DimmerLights1& (0+255)
 19992  1C8C  00F6               	movwf	??_DimmerIntrIOCPointSelect
 19993  1C8D  0876               	movf	??_DimmerIntrIOCPointSelect,w
 19994  1C8E  0021               	movlb	1	; select bank1
 19995  1C8F  00CD               	movwf	_DimmerLightsIntrIOC^(0+128)
 19996  1C90                     i1l770:	
 19997                           
 19998                           ;Dimmer_B1.c: 12: }
 19999                           ;Dimmer_B1.c: 15: if (lights == 2) {
 20000  1C90  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 20001  1C91  3A02               	xorlw	2
 20002  1C92  1D03               	skipz
 20003  1C93  0008               	return
 20004                           
 20005                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 20006  1C94  304C               	movlw	_DimmerLights2& (0+255)
 20007  1C95  00F6               	movwf	??_DimmerIntrIOCPointSelect
 20008  1C96  0876               	movf	??_DimmerIntrIOCPointSelect,w
 20009  1C97  0021               	movlb	1	; select bank1
 20010  1C98  00CD               	movwf	_DimmerLightsIntrIOC^(0+128)
 20011  1C99  0008               	return
 20012  1C9A                     __end_of_DimmerIntrIOCPointSelect:	
 20013  007E                     btemp	set	126	;btemp
 20014  007E                     pic14e$flags	set	126
 20015  007E                     wtemp	set	126
 20016  007E                     wtemp0	set	126
 20017  0080                     wtemp1	set	128
 20018  0082                     wtemp2	set	130
 20019  0084                     wtemp3	set	132
 20020  0086                     wtemp4	set	134
 20021  0088                     wtemp5	set	136
 20022  007F                     wtemp6	set	127
 20023  007E                     ttemp	set	126
 20024  007E                     ttemp0	set	126
 20025  0081                     ttemp1	set	129
 20026  0084                     ttemp2	set	132
 20027  0087                     ttemp3	set	135
 20028  007F                     ttemp4	set	127
 20029  007E                     ltemp	set	126
 20030  007E                     ltemp0	set	126
 20031  0082                     ltemp1	set	130
 20032  0086                     ltemp2	set	134
 20033  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         287
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      13
    BANK0            80     76      79
    BANK1            80      0      77
    BANK2            80      0      77
    BANK3            80      0      79
    BANK4            80      0      78
    BANK5            80      4       4
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(2) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK4[9]), Sw1(BANK3[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerLights_IntrControl->i1_setLoad_StatusOff
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  106160
                                              0 BANK5      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    1883
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           5     5      0     547
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8074
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    8074
                                             17 BANK0      1     1      0
                       _getLoad_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    8040
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   23118
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   23118
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0   10000
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    9685
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1414
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     278
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     278
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   31139
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           7     7      0   31139
                                             71 BANK0      5     5      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                             ___wmul
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   29567
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   27901
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   11598
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1467
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11518
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11332
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11239
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11146
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            3     3      0    8250
                                             17 BANK0      3     3      0
                            ___lwdiv
                             ___wmul
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   3     3      0    6374
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     124
                                              1 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4979
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     371
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2775
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     432
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getTemp_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     598
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5928
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   11109
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10911
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    7025
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     320
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1870
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1     989
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       1     1      0      93
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     198
         _getDimmerLights_StatusFlag
                         _setLoad_GO
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10577
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10577
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     586
                                              1 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6396
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5526
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2335
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     663
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     509
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     509
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     400
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     334
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     334
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (14) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___awdiv
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       ___wmul
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setLoad_Enable
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect
       i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      4E      13       97.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      4       4      15        5.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     197      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     197      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Oct 22 17:02:20 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0076  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1F1E                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006C  
     __end_of_getDimmerLights_StatusFlag 1BF6               _getDimmerLights_StatusFlag 1BE5  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 1798  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1E7A  
                   _setDimmerLights_Main 09FA                             ___ftadd@sign 0048  
                                    l102 15EF                                      l112 13D5  
                                    l104 1603                                      l113 13D1  
                                    l114 13BF                                      l116 13CF  
                                    l342 1D52                                      l343 1D54  
                                    l267 17D4                                      l292 0B89  
                                    l293 0BDD                                      l386 1F8E  
                                    l824 1C6A                                      l870 1411  
                                    _GIE 005F                                      _CRC 00CA  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 0070                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BE  
                                    _ISR 0004                                      _WDT 00C8  
                                    _Sw1 01E6                                      _Sw2 0245  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1D5F  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 1A10  
                        __end_of_ADC_Set 1A4E                          ?_DelayTimejudge 0076  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0CF0                    _setDimmerLights_ERROR 1511  
                  _setDimmerLights_AdjRF 1F41                    _setDimmerLights_AdjGo 1BC5  
                __size_of_setTemp_Enable 0008                    _setDimmerLights_Clear 1BB5  
                                   ?_ISR 0076                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1B16                               Load_Main@i 0033  
                           ___ftdiv@sign 003D                                     l2300 1C78  
                                   l1360 10EE                                     l2320 1124  
                                   l2305 0852                                     l3034 171B  
               ?_DimmerLightsPointSelect 0076                                     l1347 1E97  
                                   l2315 08A8                                     l3028 1704  
                                   l1710 035C                                     l2270 05F9  
                                   l2352 1227                                     l2272 0630  
                                   l1369 1300                                     l3057 0565  
                                   l2265 05DD                                     l2338 1D0D  
                                   l1554 146E                          __end_of_IOC_Set 1B23  
                                   l1718 11ED                                     l6000 07C1  
                                   l1691 034D                                     l6100 0CD6  
                                   l6102 0CD9                                     l6022 0EAA  
                                   l6008 07DA                                     l1688 0222  
                                   l6040 0EFB                                     l6106 0CE7  
                                   l2691 1B78                                     l6052 0F17  
                                   l6044 0F03                                     l6028 0EC0  
                                   l6072 0C82                                     l6056 0F1F  
                                   l6090 0CB2                                     l2867 1E27  
                                   l6092 0CC0                                     l6098 0CCD  
                                   l5910 04EE                                     l9032 1D8A  
                                   l9200 17DA                                     l5920 0504  
                                   l9026 1D81                                     l9042 1F6E  
                                   l9210 17EA                                     l9202 17DD  
                                   l5914 04F5                                     l9018 1215  
                                   l9028 1D84                                     l9300 1F04  
                                   l9044 1F71                                     l5940 053B  
                                   l5932 051E                                     l9302 1F07  
                                   l5870 16EB                                     l9230 0B67  
                                   l9214 17F0                                     l9206 17E3  
                                   l5950 0557                                     l5942 0540  
                                   l5880 1711                                     l5872 16F0  
                                   l5864 16DA                                     l9048 1F77  
                                   l9208 17E7                                     l5960 0589  
                                   l5952 0561                                     l5944 0544  
                                   l8504 1C3F                                     l9160 0DF1  
                                   l9152 0DDF                                     l9306 1F0D  
                                   l8522 1CA5                                     l8610 14E7  
                                   l9322 1296                                     l9074 1404  
                                   l9234 0B6D                                     l5970 05A4  
                                   l5938 0531                                     l9146 0DC4  
                                   l9410 0822                                     l8620 1502  
                                   l5868 16E1                                     l5980 076A  
                                   l9076 1409                                     l9068 13F2  
                                   l9228 0B64                                     l9236 0B70  
                                   l5956 0577                                     l8508 1C45  
                                   l9164 0DFA                                     l9156 0DE8  
                                   l9500 09E8                                     l5878 1709  
                                   l9262 0B9B                                     l9246 0B86  
                                   l9182 17A9                                     l9510 1482  
                                   l9414 082E                                     l8624 150A  
                                   l8616 14F9                                     l8608 14DB  
                                   l9264 0BB4                                     l9248 0B80  
                                   l9176 17A0                                     l5986 0780  
                                   l8562 1DEF                                     l9282 0BDF  
                                   l9178 17A3                                     l8538 103E  
                                   l9514 148F                                     l9292 1F9F  
                                   l8484 1EE4                                     l8580 1CB9  
                                   l8820 16BB                                     l8804 1698  
                                   l8812 16A4                                     l9372 10D6  
                                   l8900 1E11                                     l9196 17BB  
                                   l9436 0855                    _myMain_Initialization 1B86  
                                   l9294 1FAA                                     l8566 1DF8  
                                   l9710 0A3F                                     l8902 1E17  
                                   l8750 1770                                     l8592 14C8  
                                   l8680 0907                                     l8824 16C1  
                                   l8808 169E                                     l8840 1F30  
                                   l9720 0A67                                     l8752 177D  
                                   l9464 089E                                     l9448 086D  
                                   l9544 0964                                     l9480 09A7  
                                   l9570 1261                                     l9706 0A33  
                                   l8746 176A                                     l9458 0893  
                                   l9580 1271                                     l9572 1264  
                                   l8916 1BEF                                     l8828 16C7  
                                   l8844 1F38                                     l8772 1E72  
                                   l9548 1E21                                     l8852 1134  
                                   l8756 1789                                     l9476 099A  
                                   l9812 1EAC                                     l9582 1274  
                                   l8598 14D3                                     l8790 1682  
                                   l9830 12E0                                     l9750 1345  
                                   l9806 1EA4                                     l9576 126A  
                                   l8768 1E6B                                     l9824 12CB  
                                   l9808 1EA7                                     _CFGS 0CAE  
                                   l9586 127A                                     l8794 1688  
                                   l8946 0D4C                                     l9746 133E  
                                   l9914 0C32                                     l8980 0E21  
                                   l9924 0C49                                     l8798 168E  
                                   l9694 0A0E                                     l8990 0E45  
                                   l9950 05D0                                     l9926 0C4B  
                                   l9698 0A18                                     l8994 0E5B  
                                   l9890 0BFF                                     l9972 05ED  
                                   l9892 0C05                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4325 1722  
                                   u4255 16E6                                     u4505 0545  
                                   u4275 16FF                                     _PEIE 005E  
                                   u4605 0792                                     u4445 051F  
                                   u4295 170C                                     u4615 07A2  
                                   u4535 0558                                     u4625 07C2  
                                   u4635 07D1                                     u4475 0532  
                                   u4715 0F04                                     u4645 07DB  
                                   u4725 0F0A                                     u4825 0CB3  
                                   u4755 0F20                                     u4765 0F26  
                                   u4685 0ECC                                     u4855 0CCE  
                                   u4695 0EDC                                     u4795 0C89  
                                   u9055 1CD1                                     u8535 102A  
                                   u8645 14DE                                     u8750 08B5  
                                   u8665 14E8                                     u9555 1F94  
                                   u8675 14F2                                     u8755 08B3  
                                   u8685 14FA                                     _LWLO 0CAD  
                                   _RFSW 00CE                                     u9935 1E28  
                                   _TMR0 0015                                     u9945 1E2D  
                                   _RSSI 00CF                                     _WREN 0CAA  
                                   _Buz1 00B2                                     _main 1566  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0B60  
                        __end_of_RF_Main 1A19                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 1AD9                                     ltemp 007E  
          __size_of_setRF_Initialization 000D                         _setDimmerReClock 1A4E  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 123C                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                                    ??_ISR 007B  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1B09  
          __end_of_DimmerIntrPointSelect 1C2A                                    l10002 0613  
                                  l10004 0615                                    l10014 0625  
                                  l10024 0638                                    l10104 0403  
                                  l10034 0661                                    l10052 1B83  
                                  l10118 0441                                    l10070 0397  
                                  l10048 1B7D                                    l10128 0473  
                                  l10080 03A9                                    l10400 1457  
                                  l10172 11B9                                    l10164 119B  
                                  l10500 034A                                    l10068 0391  
                                  l10340 0A8D                                    l10190 13A9  
                                  l10166 11A7                                    l10094 03D6  
                                  l10078 03A1                                    l10350 0AB8  
                                  l10176 11C2                                    l10258 06FE  
                                  l10506 0353                                    l10442 026B  
                                  l10362 0AE0                                    l10346 0AB0  
                                  l10436 0241                                    l10462 02E1  
                                  l10374 1183                                    l10480 030B  
                                  l10456 02D4                                    l10464 02E7  
                                  l10474 02FF                                    l10492 0328  
                                  l10580 158A                    ?_setDimmerLights_Main 0076  
                                  l10584 1595                          ?_setDelayOff_GO 002A  
                  __end_of_setLoad_Count 1B4B                                    ?_main 02A0  
                        __end_of___awdiv 1511                          __end_of___ftadd 05BC  
                        __end_of___ftdiv 07FC                          __end_of___ftmul 0F47  
                                  u11205 117A                                    u11135 0AA0  
                                  u11215 1189                                    u11235 1437  
                        ___awdiv@divisor 0020                                    u11085 1E8E  
                                  u11325 02A8                                    u11245 1466  
                                  u11175 0AD2                          __end_of___fttol 0CF0  
                                  u10645 065B                                    u11375 02ED  
                                  u10665 0685                                    u10915 11A8  
                                  u10925 11B2             setDimmerLights_AdjGo@command 0022  
                                  u10935 11BA                                    u10965 139F  
                                  u10895 119E                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 11C9                                    i1l770 1C90  
                                  i1l781 1C21                   _setDimmerLights_Switch 1B95  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EB                                    _RFSW2 00EC  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0076  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0016                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _Load1 01A0  
                __end_of_Timeout_Counter 1CD7                            __CFG_WRT$HALF 0000  
                                  _Temp1 00D6       __end_of_setDimmerLights_IntrIOC_GO 10C6  
             _setDimmerLights_IntrIOC_GO 1098                         __end_of_TMR0_ISR 1FD6  
           __size_of_CC2500_WriteCommand 001A                         __end_of_TMR0_Set 1A7E  
                                  _getAD 1E99                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 1426            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0077                            ___ftpack@sign 0024  
                         _setLoad_Enable 1AAF              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1C60  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0076                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1C07                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0076                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 08AB  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0076  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0022  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0076                             ?_my_MainTime 0076  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 1617  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0076                        ??_Sw_DimmerOnFunc 0062  
                   __end_of_getLoad_Safe 1A9E                        ??_setPercentValue 0059  
                           __end_of_main 15BE                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 0800                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D78  
                   _setSw_Initialization 1A7E                  setOverTemp_Exceptions@i 002F  
             __size_of_setLoad_StatusOff 001F                                   ??_main 006C  
                          ___fttol@sign1 0053                             ?_setLog_Code 0076  
                _setControl_Lights_Table 0D78                   ?_Buzzer_Initialization 0076  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0076  
                              ??_IOC_ISR 0079                   ?_setDimmerLights_ERROR 0076  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C73  
                 ?_setDimmerLights_AdjRF 0076                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0024  
                 __end_of_setLoad_Enable 1AB8                     __end_of_getTemp_Safe 1A76  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 0AE6                   ?_myMain_Initialization 0076  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0076  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1EFB                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 1732                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1BA5                                   i1l7400 0172  
                                 i1l7402 0178                                   i1l7412 01A9  
                                 i1l7350 00A0                                   i1l7432 01E0  
                                 i1l7416 01AF                                   i1l7418 01B5  
                                 i1l7354 00A7                                   i1l7436 01E6  
                                 i1l7372 00F1                                   i1l7380 0110  
                                 i1l7390 0143                                   i1l7374 00F7  
                                 i1l7386 012C                                   i1l7394 0157  
                                 i1l7378 010A                                   i1l6954 10C0  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u660_25 007B  
                     __size_of_Load_Main 016E                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1D5F  
                                 u786_25 1FCF                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1A35  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1CEC  
                                 _Dimmer 0073                                   _DlySw1 015B  
                                 _DlySw2 0160              __size_of_setLoad_Exceptions 0038  
             __end_of_Mcu_Initialization 1C3C                      __end_of_Buzzer_Main 13DC  
                                 _Memory 0220                                   _Timer0 0135  
     __end_of_setDimmerLights_TriggerAdj 1BE5               _setDimmerLights_TriggerAdj 1BD5  
                                 ___bmul 1C3C            setDimmerLights_Switch@command 0022  
                                 ___wmul 1E1E                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                    setDimmerLights@lights 0025  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0076                                ??___lwdiv 0024  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00D4                                   _s_data 00D5  
                                 _setLED 1672                                   _myMain 00A0  
                       _DimmerLightsIntr 0075                    ?_setSw_Initialization 0076  
                  setDimmerLights@status 0023                         ___awdiv@quotient 0027  
                                 _setBuz 15BE                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1A35         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0076                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020      __end_of_setDimmerLights_IntrControl 020C  
            _setDimmerLights_IntrControl 004D                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0076  
                  __end_of_SwPointSelect 1CC2                          ?_setLoad_Enable 0076  
                          ?_setRF_Enable 0076                           _setTemp_Enable 1A9E  
                        _RfSWPointSelect 1D02             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 007A              __size_of_DimmerLights_Close 0017  
                __size_of_LedPointSelect 001D                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1B77  
                      ?_Sw_DimmerAdjFunc 0076              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1672  
       __end_of_CC2500_registers_address 182F                  __end_of__initialization 0049  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0076  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0021  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0076  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0076                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                       getLoad_Safe@result 0020  
                             ___fttol@f1 004B                           __pcstackCOMMON 0076  
         DimmerIntrIOCPointSelect@lights 0077                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK4 1EB9                            __end_of_getAD 1EB9  
                              ?_TMR0_ISR 0076                                ?_TMR0_Set 0076  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0044  
                     _LED_Initialization 1AF1                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 004A                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0076                __size_of_setLoad_StatusOn 0023  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0023  
                              ?_WDT_Main 0076                        __end_of_Load_Main 037A  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 1A30  
               __end_of_setDimmerReClock 1A56                       __size_of_getRxData 0069  
                    ?_LED_Initialization 0076                   __end_of_setTemp_Enable 1AA6  
                      ?_CC2500_WriteByte 0076                           ??_setRF_Enable 0020  
                         _DimmerLights11 00CB                           _DimmerLights22 00CC  
                   __size_of_setLED_Main 0044                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1A1C  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006C                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0076  
                            _Buzzer_Main 1392                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 0803                   ?_Dimmer_Initialization 0076  
                                ?_IO_Set 0076                               ??_LED_Main 0024  
                          ?_setMemory_GO 0076                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1A56                    __size_of_getLoad_Safe 0008  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0024  
                           _DimmerLights 0074                        LedPointSelect@led 0020  
                    i1_setLoad_StatusOff 1CEC                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0008                       getTemp_Safe@result 0020  
                            setBuz@count 002C                               __pmaintext 1566  
                    _CC2500_WriteCommand 1D78                     ?_Temp_Initialization 0076  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C                     __size_of_my_MainTime 004A  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 007B                            ?_setTemp_Main 0076  
                             ??_TMR0_Set 0020                               _getLoad_AD 0A6D  
                             __pintentry 0004                   ??_setSw_Initialization 0023  
                          ?_setSw_Enable 0076                       __size_of_setTxData 00B9  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0021                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1A47                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 115C                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1B30                    __size_of_getTemp_Safe 0008  
                          ?_setSw_Status 0021                       _setRFSW_AdjControl 1201  
                __end_of_RfSWPointSelect 1D18                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0076                                  _IOC_ISR 1B09  
                        ?_setTemp_Enable 0076                                  _IOC_Set 1B16  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0076  
                      _Flash_Memory_Main 1E7A                        _Flash_Memory_Read 1D92  
            ?_setDimmerLights_IntrIOC_GO 0076                   __size_of_CC2500_RxData 0083  
                 __size_of_CC2500_TxData 0068                      ?_setRFSW_AdjControl 0076  
    setDimmerLights_TriggerERROR@command 0022                             _getLoad_Safe 1A96  
                                _RF_Data 0120                                  _RF_Main 1A16  
                     ?_Flash_Memory_Main 0076                       ?_Flash_Memory_Read 0076  
                                _WDT_Set 1ACE          __end_of_setControl_Lights_Table 0E03  
                             ??_Fosc_Set 0020                              ?_TouchPower 0076  
                        _Sw_DimmerOnFunc 0988                          _setPercentValue 134C  
                ??_setLoad_AH_AL_Restore 0020                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0076                                  _Dimmer1 00E8  
           __end_of_CC2500_FrequencyCabr 1AE5                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1C18                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0165  
                                _VarLED2 0169                        __end_of_getRxData 08AB  
               _CC2500_registers_address 1800         __end_of_DimmerIntrIOCPointSelect 1C9A  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1BB5  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 1A6E  
                         ??_setTemp_Main 0031                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1BA5                                  ___awdiv 14BD  
                                ___ftadd 04C6                           ??_setSw_Enable 0021  
                                ___ftdiv 0753                          __size_of___wmul 001E  
                                ___ftmul 0E93                                  ___fttol 0C69  
                    __end_of_Switch_Main 1A96                                  ___lwdiv 1192  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005F                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0022                                  __ptext1 1426  
                                __ptext2 1A9E                                  __ptext3 1AAF  
                                __ptext4 1B86                                  __ptext5 115C  
                                __ptext6 0A6D                                  __ptext7 1E99  
                                __ptext8 1C4E                                  __ptext9 0002  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0077  
                  _DimmerIntrPointSelect 1C18                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 1E99                __end_of_Flash_Memory_Read 1DAC  
                             _setRF_Main 05BC                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1A5E                        _DimmerLights_Main 1AC3  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1AC3               __end_of_CC2500_ClearRXFIFO 1A23  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1A27  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0076  
                     ?_DimmerLights_Main 0076                                  _product 006E  
                         _LedPointSelect 1DE4                      _DelayOffPointSelect 1C9A  
                                clrloop0 1A42           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1B3D                     end_of_initialization 0049  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 1A66  
                      _CC2500_InitSetREG 1FD6                            _DelayTime_1us 1F89  
                      __end_of_setTxData 1000               __end_of_Flash_Memory_Write 10F5  
                                init_ram 1A3B                       ?_CC2500_InitSetREG 0076  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1A3C                               _setSw_Main 037A  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1F64  
                 __size_of_setLoad_Count 000E                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1BF6                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0076                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0B60  
                          _CC2500_TxData 1798                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1B59              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0076  
                    _Flash_Memory_Modify 12C4                  _DimmerLights_Exceptions 13DC  
                            ?_getLoad_AD 0076                             __pstringtext 1800  
                    _Flash_Memory_Unlock 1AA6                      ??_CC2500_ReadStatus 0022  
                       _setLoad_StatusOn 1F1E         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0076  
              setLoad_Exceptions@command 0030                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0023                   setSw_Initialization@sw 0023  
              __end_of_DimmerLights_Main 1ACE                       _Mcu_Initialization 1C2A  
                       ??_setLoad_Enable 0020                 __size_of_CC2500_PowerRST 0044  
                         ?_DelayOff_Main 0076                         ?_RfSWPointSelect 0076  
                        _setSw_Main$6143 0067                          _setSw_Main$6144 0068  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1E01  
                __end_of_Sw_DimmerOnFunc 09FA                  __end_of_setPercentValue 1392  
               __size_of_CC2500_WriteREG 0023                __end_of_CC2500_InitSetREG 2000  
                    ?_Mcu_Initialization 0076                     ?_Flash_Memory_Modify 0076  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1280                     ?_Flash_Memory_Unlock 0076  
              __end_of_CC2500_ReadStatus 1F89                            ?_RF_RxDisable 0076  
             __end_of_setLoad_Exceptions 1201                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1D78                     _setRF_Initialization 1B23  
                            _Switch_Main 1A8E              setDimmerLights_Clear@lights 0023  
                    setLoad_Exceptions@i 002F                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0076                           ?_CC2500_TxData 0076  
                _DimmerLightsPointSelect 1C60                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1CD7                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0076  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1C4E  
              __size_of_Sw_DimmerAdjFunc 004D                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1C86                           __end_of___wmul 1E3C  
                      __size_of_TMR0_ISR 0027          __size_of_setOverTemp_Exceptions 003F  
                 ?_DimmerIntrPointSelect 0076                        __size_of_TMR0_Set 0008  
                   __end_of_setMemory_GO 1016            __size_of_setDimmerLights_Main 0073  
                         __end_of_setLED 16D1                           __end_of_setBuz 1617  
                          _setLoad_Count 1B3D          _getDimmerLights_StatusFlag$2295 0022  
                   _CC2500_FrequencyCabr 1AD9                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 001F  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0076  
                        _setRFSW_Control 0E03                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0076                      start_initialization 0015  
                      _setRF_DimmerValue 1127                          ?_LedPointSelect 0076  
             __end_of_DimmerLights_Close 1D46                                _Load_Main 020C  
                setLoad_StatusOff@lights 0021                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0079                       ?_setRF_DimmerValue 0076  
             __end_of_CC2500_InitPATable 1E5B          __size_of_setTemp_Initialization 0003  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0C69                              ?_setLoad_GO 0076  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 1DE4  
                    __size_of_getLoad_AD 0079                             ?_Buzzer_Main 0076  
                     _set_TimeoutCleared 1A2B                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 00E4  
                            ?_setSw_Main 0076                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0036                   ?_setLED_Initialization 0076  
                   __end_of_setSw_Status 1B77                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0076                        __size_of_Fosc_Set 0004  
              i1setLoad_StatusOff@lights 0077                  __size_of_setRFSW_Status 000F  
              __size_of_CC2500_WriteByte 0019                                _Temp_Main 0800  
              ??_DimmerLights_Exceptions 002D            setOverTemp_Exceptions@command 0030  
                    ?_set_TimeoutCleared 0076                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D0                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                               ??___wmul 0024                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D2                              __pdataBANK4 024E  
                               ??_setLED 0022                         ??_setTemp_Enable 0020  
                               ?_ADC_Set 0076                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                         ?_setLoad_Count 0076                         _CC2500_SIDLEMode 1A27  
             __size_of_DimmerLights_Main 000B                __end_of_setRF_DimmerValue 115C  
                  ?_CC2500_FrequencyCabr 0076                            ??_setLED_Main 0021  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0076                          _setRF_Main$5153 006B  
                            __pbssCOMMON 0070                                 ?_IOC_Set 0076  
                              ___latbits 0003                               ?_Load_Main 0076  
                  setTemp_Enable@command 0020                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0076                            __pcstackBANK0 0020  
                          __pcstackBANK5 02A0                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0076                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0088  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0076                                 ?_WDT_Set 0076  
           setDimmerLights_Clear@command 0022                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 007A               __size_of_CC2500_ReadStatus 0025  
                 _setOverTemp_Exceptions 0803                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 013D  
                          _DimmerLights2 014C                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                    __size_of_setRF_Enable 000E  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1DC8  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
                          ??_my_MainTime 002D              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0076                               ?_Temp_Main 0076  
                    __size_of_setRF_Main 00D0                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0076  
                 _setTemp_Initialization 1A19                                _getBuz_GO 1C07  
    __end_of_Flash_Memory_Initialization 0753              _Flash_Memory_Initialization 068C  
                               ?___awdiv 0020                                __ptext100 1B68  
                              __ptext101 1CAE                                __ptext110 1BA5  
                              __ptext102 08AB                                __ptext111 1B95  
                              __ptext103 134C                                __ptext120 123C  
                              __ptext112 1C60                                __ptext104 0C69  
                              __ptext121 1FD6                                __ptext113 15BE  
                              __ptext105 0753                                __ptext130 1CC2  
                              __ptext122 1E3C                                __ptext114 14BD  
                              __ptext106 1ED9                                __ptext131 1D46  
                              __ptext123 1EFB                                __ptext115 1A56  
                              __ptext107 16D1                                __ptext140 1A4E  
                              __ptext132 1392                                __ptext124 1AD9  
                              __ptext116 1AB8                                __ptext108 1B59  
                              __ptext141 1098                                __ptext133 1A10  
                              __ptext125 1F89                                __ptext117 1C9A  
                              __ptext109 1D02                                 ?___ftadd 003E  
                              __ptext142 1C86                                __ptext126 1A23  
                              __ptext118 1CD7                                __ptext135 1FAF  
                              __ptext127 1A1F                                __ptext119 1A27  
                              __ptext136 004D                                __ptext128 1D78  
                              __ptext137 1CEC                                __ptext129 1A2B  
                              __ptext138 1C18                                __ptext139 1B09  
                              _getRxData 0842                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 0E93  
                    __size_of_setLoad_GO 0008            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 1A13  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1B86  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0055  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 014C            __end_of_setDimmerLights_ERROR 1566  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1F64  
          __end_of_setDimmerLights_AdjGo 1BD5                   CC2500_WriteByte@loop_a 0021  
         __size_of_setDimmerLights_Clear 0010            __end_of_setDimmerLights_Clear 1BC5  
                              _r_address 00D3           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1866            __end_of_myMain_Initialization 1B95  
                       __CFG_WDTE$SWDTEN 0000                           __size_of_getAD 0020  
                           _setRF_Enable 1B4B                         ___lwdiv@quotient 0026  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1CAE  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 134C  
                    _DimmerLightsIntrIOC 00CD                 __end_of_setLoad_StatusOn 1F41  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1A1F  
                      _CC2500_rfSettings 182F                           ___wmul@product 0024  
                               _LED_Main 1AFD                          SwPointSelect@sw 0020  
                              clear_ram0 1A41                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0F47      __end_of_DimmerLights_Initialization 1D2F  
            _DimmerLights_Initialization 1D18                       _CC2500_ClearRXFIFO 1A1F  
                     _CC2500_ClearTXFIFO 1A23           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1A8E                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003B  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 10C6  
                             ?_getRxData 0076                                 _TMR0_ISR 1FAF  
                           ??_getLoad_AD 0024                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1D02  
                               _TMR0_Set 1A76                         _Sw_DimmerAdjFunc 1470  
                    ?_CC2500_ClearRXFIFO 0076                      ?_CC2500_ClearTXFIFO 0076  
                    __end_of_my_MainTime 1470                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00C6  
                   __end_of_RF_RxDisable 1C86                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1D92                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1C4E                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0076  
                       _Sw_DimmerOffFunc 0917                    __size_of_setTemp_Main 0086  
                __size_of_setDelayOff_GO 0066                    __size_of_setSw_Enable 001C  
                               _DelayOff 0072                             setSw_Main@sw 0069  
       setDimmerLights_IntrIOC_GO@lights 0078                              ??_Load_Main 0031  
                       __size_of_IOC_ISR 000D             ?_setDimmerLights_IntrControl 0076  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 1AF1  
                         ?_SwPointSelect 0076                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0023  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 1127  
                  _DlyOff_Initialization 1AB8                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 185E                         __size_of_RF_Main 0003  
                               _Fosc_Set 07FC                         __size_of_WDT_Set 000B  
                 setLoad_StatusOn@lights 0021                       __end_of_getLoad_AD 0AE6  
                  _Switch_Initialization 1B30                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0024                           _setRFSW_Status 1B59  
                           _setMemory_GO 1000                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 1192                               ?_setTxData 0076  
                           ?_Switch_Main 0076               ??_DimmerIntrIOCPointSelect 0076  
                       _CC2500_WriteByte 1D46                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 005E                              ??_Temp_Main 0032  
                      setRFSW_Control@sw 0063                      _Load_Initialization 1A30  
                              setLED@led 0022     __end_of_setDimmerLights_TriggerERROR 106B  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 1040  
                ??_DimmerIntrPointSelect 0076                             _setTemp_Main 0BE3  
                     _setLoad_Exceptions 11C9                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0076  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1DC8  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                                 ___awtoft 1ED9  
                       ??_LedPointSelect 0020                                 ___ftpack 16D1  
                           _setSw_Status 1B68                        getTemp_AD@channel 0025  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1308                      ?_setLoad_Exceptions 0076  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 0917  
               ?_DelayOff_Initialization 0076                         setDelayOff_GO@sw 002E  
                        ___lwdiv@divisor 0020                     ?_Load_Initialization 0076  
                        ___lwdiv@counter 0025                                 __ptext10 0800  
                               __ptext11 0BE3                                 __ptext20 0917  
                               __ptext12 0803                                 __ptext21 1470  
                               __ptext13 1A96                                 __ptext30 10F5  
                               __ptext22 1BD5                                 __ptext14 1A1C  
                               __ptext31 0D78                                 __ptext23 1BC5  
                               __ptext15 1A19                                 __ptext40 0E93  
                               __ptext32 0E03                                 __ptext24 1B30  
                               __ptext16 1A8E                                 __ptext41 04C6  
                               __ptext33 1732                                 __ptext25 1A7E  
                               __ptext17 037A                                 __ptext50 1C2A  
                               __ptext42 1C07                                 __ptext34 1016  
                               __ptext26 1B77                                 __ptext18 1A86  
                               __ptext51 1ACE                                 __ptext43 1C73  
                               __ptext35 1C3C                                 __ptext27 1A16  
                               __ptext19 0988                                 __ptext60 1B4B  
                               __ptext52 1A76                                 __ptext44 1798  
                               __ptext36 1201                                 __ptext28 05BC  
                               __ptext61 13DC                                 __ptext53 1D5F  
                               __ptext45 0B60                                 __ptext37 1127  
                               __ptext29 0842                                 __ptext70 1AFD  
                               __ptext62 1040                                 __ptext54 1B16  
                               __ptext46 1F64                                 __ptext38 1F41  
                               __ptext71 1308                                 __ptext63 1511  
                               __ptext55 07FC                                 __ptext47 1E01  
                               __ptext39 1617                                 __ptext80 1D92  
                               __ptext72 1AF1                                 __ptext64 1BB5  
                               __ptext56 1A47                                 __ptext48 1A13  
                               __ptext81 1AC3                                 __ptext73 1BF6  
                               __ptext65 1A6E                                 __ptext57 020C  
                               __ptext49 1B23                                 __ptext90 1D2F  
                               __ptext82 09FA                                 __ptext74 1E7A  
                               __ptext66 1E1E                                 __ptext58 11C9  
                               __ptext91 1000                                 __ptext83 1280  
                               __ptext75 12C4                                 __ptext67 1192  
                               __ptext59 1DC8                                 __ptext92 1A66  
                               __ptext84 1E5B                                 __ptext76 1AE5  
                               __ptext68 1A30                                 __ptext93 1BE5  
                               __ptext85 0CF0                                 __ptext77 068C  
                               __ptext69 1DAC                                 __ptext94 1D18  
                               __ptext86 1F1E                                 __ptext78 10C6  
                               __ptext95 106B                                 __ptext87 1B3D  
                               __ptext79 1AA6                                 __ptext96 1A35  
                               __ptext88 1672                                 __ptext97 1A5E  
                               __ptext89 1DE4                                 __ptext98 0AE6  
                               __ptext99 0F47                                 __product 024E  
          ??_setDimmerLights_IntrControl 0078                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0023                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0006                   __end_of_setRFSW_Status 1B68  
          __end_of_Dimmer_Initialization 1A3B             __end_of_setDimmerLights_Main 0A6D  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0021                            __size_of_main 0058  
                            _setRF_Learn 1A86                 __end_of_CC2500_SIDLEMode 1A2B  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1CAE  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1D2F  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 0008  
                   ??_setLoad_Exceptions 002E                          _CC2500_ReadByte 1E01  
                            _my_MainTime 1426                       _CC2500_InitPATable 1E3C  
    __size_of_getDimmerLights_StatusFlag 0011            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 068C                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012                     _CC2500_patable_vaule 185E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0076  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 02A0  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 02A2  
                    ?_CC2500_InitPATable 0076                          _CC2500_PowerRST 123C  
                     __end_of_setLoad_GO 1A6E              __end_of_Flash_Memory_Modify 1308  
                      ??_getPercentValue 0059                              _setLog_Code 10F5  
            __end_of_Flash_Memory_Unlock 1AAF                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1EFB                       __end_of_setSw_Main 04C6  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_OK 03E1                     setLoad_Count@command 0021  
                 ?_DlyOff_Initialization 0076                  ?_setOverTemp_Exceptions 0076  
                         _DelayTimejudge 1016                            ?_getLoad_Safe 0076  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0078                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                  __size_of_setLoad_Enable 0009  
                 ?_Switch_Initialization 0076                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1098  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 106B  
            __end_of_setDimmerLights_Adj 12C4                  ?_setTemp_Initialization 0076  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 0013                        _RF_Initialization 1A13  
   __size_of_setDimmerLights_IntrControl 01BF                              getLoad_AD@i 0028  
                            getLoad_AD@j 0027                            ?_getTemp_Safe 0076  
                   _Flash_Memory_Erasing 1AE5                       ?_RF_Initialization 0076  
                             _SPI0Buffer 00D1          __end_of_DelayOff_Initialization 1A5E  
    __size_of_setDimmerLights_IntrIOC_GO 002E                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1A66  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 1732  
       __size_of_setControl_Lights_Table 008B                        _setLoad_StatusOff 1E5B  
                 __end_of_DelayTimejudge 1040           __end_of_setOverTemp_Exceptions 0842  
                         ??_getLoad_Safe 0020     __size_of_Flash_Memory_Initialization 00C7  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0062  
                     ?_setLoad_StatusOff 0020                    __end_of_DelayTime_1us 1FAF  
               __end_of_Sw_DimmerAdjFunc 14BD                  __end_of_CC2500_ReadByte 1E1E  
           __end_of_setSw_Initialization 1A86                          _Timeout_Counter 1CC2  
                   getPercentValue@value 005B                             _RF_RxDisable 1C73  
             __end_of_LED_Initialization 1AFD         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 1A1C  
               __size_of_Sw_DimmerOnFunc 0072                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0076                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1A16  
               __end_of_Sw_DimmerOffFunc 0988                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0BE3                    __end_of_CC2500_TxData 1800  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 1DAC  
                    setSw_Status@command 0021                  __end_of_CC2500_PowerRST 1280  
