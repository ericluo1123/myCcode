

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Nov 10 16:55:31 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	intentry,global,class=CODE,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	dabs	1,0x7E,2
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  008C                     	;# 
   180  008D                     	;# 
   181  008E                     	;# 
   182  0090                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  010C                     	;# 
   196  010D                     	;# 
   197  010E                     	;# 
   198  0116                     	;# 
   199  0117                     	;# 
   200  011D                     	;# 
   201  018C                     	;# 
   202  018D                     	;# 
   203  018E                     	;# 
   204  0191                     	;# 
   205  0191                     	;# 
   206  0192                     	;# 
   207  0193                     	;# 
   208  0193                     	;# 
   209  0194                     	;# 
   210  0195                     	;# 
   211  0196                     	;# 
   212  0197                     	;# 
   213  0199                     	;# 
   214  019A                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019C                     	;# 
   220  019C                     	;# 
   221  019D                     	;# 
   222  019E                     	;# 
   223  019F                     	;# 
   224  020D                     	;# 
   225  0210                     	;# 
   226  0211                     	;# 
   227  0211                     	;# 
   228  0212                     	;# 
   229  0212                     	;# 
   230  0213                     	;# 
   231  0213                     	;# 
   232  0214                     	;# 
   233  0214                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0215                     	;# 
   237  0216                     	;# 
   238  0216                     	;# 
   239  0217                     	;# 
   240  0217                     	;# 
   241  0291                     	;# 
   242  0291                     	;# 
   243  0292                     	;# 
   244  0293                     	;# 
   245  0298                     	;# 
   246  0298                     	;# 
   247  0299                     	;# 
   248  029A                     	;# 
   249  0394                     	;# 
   250  0395                     	;# 
   251  0396                     	;# 
   252  0FE4                     	;# 
   253  0FE5                     	;# 
   254  0FE6                     	;# 
   255  0FE7                     	;# 
   256  0FE8                     	;# 
   257  0FE9                     	;# 
   258  0FEA                     	;# 
   259  0FEB                     	;# 
   260  0FED                     	;# 
   261  0FEE                     	;# 
   262  0FEF                     	;# 
   263  0000                     	;# 
   264  0001                     	;# 
   265  0002                     	;# 
   266  0003                     	;# 
   267  0004                     	;# 
   268  0005                     	;# 
   269  0006                     	;# 
   270  0007                     	;# 
   271  0008                     	;# 
   272  0009                     	;# 
   273  000A                     	;# 
   274  000B                     	;# 
   275  000C                     	;# 
   276  000D                     	;# 
   277  000E                     	;# 
   278  0010                     	;# 
   279  0011                     	;# 
   280  0012                     	;# 
   281  0015                     	;# 
   282  0016                     	;# 
   283  0016                     	;# 
   284  0017                     	;# 
   285  0018                     	;# 
   286  0019                     	;# 
   287  001A                     	;# 
   288  001B                     	;# 
   289  001C                     	;# 
   290  008C                     	;# 
   291  008D                     	;# 
   292  008E                     	;# 
   293  0090                     	;# 
   294  0091                     	;# 
   295  0092                     	;# 
   296  0095                     	;# 
   297  0096                     	;# 
   298  0097                     	;# 
   299  0099                     	;# 
   300  009A                     	;# 
   301  009B                     	;# 
   302  009B                     	;# 
   303  009C                     	;# 
   304  009D                     	;# 
   305  009E                     	;# 
   306  010C                     	;# 
   307  010D                     	;# 
   308  010E                     	;# 
   309  0116                     	;# 
   310  0117                     	;# 
   311  011D                     	;# 
   312  018C                     	;# 
   313  018D                     	;# 
   314  018E                     	;# 
   315  0191                     	;# 
   316  0191                     	;# 
   317  0192                     	;# 
   318  0193                     	;# 
   319  0193                     	;# 
   320  0194                     	;# 
   321  0195                     	;# 
   322  0196                     	;# 
   323  0197                     	;# 
   324  0199                     	;# 
   325  019A                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019C                     	;# 
   331  019C                     	;# 
   332  019D                     	;# 
   333  019E                     	;# 
   334  019F                     	;# 
   335  020D                     	;# 
   336  0210                     	;# 
   337  0211                     	;# 
   338  0211                     	;# 
   339  0212                     	;# 
   340  0212                     	;# 
   341  0213                     	;# 
   342  0213                     	;# 
   343  0214                     	;# 
   344  0214                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0216                     	;# 
   349  0216                     	;# 
   350  0217                     	;# 
   351  0217                     	;# 
   352  0291                     	;# 
   353  0291                     	;# 
   354  0292                     	;# 
   355  0293                     	;# 
   356  0298                     	;# 
   357  0298                     	;# 
   358  0299                     	;# 
   359  029A                     	;# 
   360  0394                     	;# 
   361  0395                     	;# 
   362  0396                     	;# 
   363  0FE4                     	;# 
   364  0FE5                     	;# 
   365  0FE6                     	;# 
   366  0FE7                     	;# 
   367  0FE8                     	;# 
   368  0FE9                     	;# 
   369  0FEA                     	;# 
   370  0FEB                     	;# 
   371  0FED                     	;# 
   372  0FEE                     	;# 
   373  0FEF                     	;# 
   374  0000                     	;# 
   375  0001                     	;# 
   376  0002                     	;# 
   377  0003                     	;# 
   378  0004                     	;# 
   379  0005                     	;# 
   380  0006                     	;# 
   381  0007                     	;# 
   382  0008                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000D                     	;# 
   388  000E                     	;# 
   389  0010                     	;# 
   390  0011                     	;# 
   391  0012                     	;# 
   392  0015                     	;# 
   393  0016                     	;# 
   394  0016                     	;# 
   395  0017                     	;# 
   396  0018                     	;# 
   397  0019                     	;# 
   398  001A                     	;# 
   399  001B                     	;# 
   400  001C                     	;# 
   401  008C                     	;# 
   402  008D                     	;# 
   403  008E                     	;# 
   404  0090                     	;# 
   405  0091                     	;# 
   406  0092                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0097                     	;# 
   410  0099                     	;# 
   411  009A                     	;# 
   412  009B                     	;# 
   413  009B                     	;# 
   414  009C                     	;# 
   415  009D                     	;# 
   416  009E                     	;# 
   417  010C                     	;# 
   418  010D                     	;# 
   419  010E                     	;# 
   420  0116                     	;# 
   421  0117                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018D                     	;# 
   425  018E                     	;# 
   426  0191                     	;# 
   427  0191                     	;# 
   428  0192                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0194                     	;# 
   432  0195                     	;# 
   433  0196                     	;# 
   434  0197                     	;# 
   435  0199                     	;# 
   436  019A                     	;# 
   437  019B                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019C                     	;# 
   442  019C                     	;# 
   443  019D                     	;# 
   444  019E                     	;# 
   445  019F                     	;# 
   446  020D                     	;# 
   447  0210                     	;# 
   448  0211                     	;# 
   449  0211                     	;# 
   450  0212                     	;# 
   451  0212                     	;# 
   452  0213                     	;# 
   453  0213                     	;# 
   454  0214                     	;# 
   455  0214                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0215                     	;# 
   459  0216                     	;# 
   460  0216                     	;# 
   461  0217                     	;# 
   462  0217                     	;# 
   463  0291                     	;# 
   464  0291                     	;# 
   465  0292                     	;# 
   466  0293                     	;# 
   467  0298                     	;# 
   468  0298                     	;# 
   469  0299                     	;# 
   470  029A                     	;# 
   471  0394                     	;# 
   472  0395                     	;# 
   473  0396                     	;# 
   474  0FE4                     	;# 
   475  0FE5                     	;# 
   476  0FE6                     	;# 
   477  0FE7                     	;# 
   478  0FE8                     	;# 
   479  0FE9                     	;# 
   480  0FEA                     	;# 
   481  0FEB                     	;# 
   482  0FED                     	;# 
   483  0FEE                     	;# 
   484  0FEF                     	;# 
   485  0000                     	;# 
   486  0001                     	;# 
   487  0002                     	;# 
   488  0003                     	;# 
   489  0004                     	;# 
   490  0005                     	;# 
   491  0006                     	;# 
   492  0007                     	;# 
   493  0008                     	;# 
   494  0009                     	;# 
   495  000A                     	;# 
   496  000B                     	;# 
   497  000C                     	;# 
   498  000D                     	;# 
   499  000E                     	;# 
   500  0010                     	;# 
   501  0011                     	;# 
   502  0012                     	;# 
   503  0015                     	;# 
   504  0016                     	;# 
   505  0016                     	;# 
   506  0017                     	;# 
   507  0018                     	;# 
   508  0019                     	;# 
   509  001A                     	;# 
   510  001B                     	;# 
   511  001C                     	;# 
   512  008C                     	;# 
   513  008D                     	;# 
   514  008E                     	;# 
   515  0090                     	;# 
   516  0091                     	;# 
   517  0092                     	;# 
   518  0095                     	;# 
   519  0096                     	;# 
   520  0097                     	;# 
   521  0099                     	;# 
   522  009A                     	;# 
   523  009B                     	;# 
   524  009B                     	;# 
   525  009C                     	;# 
   526  009D                     	;# 
   527  009E                     	;# 
   528  010C                     	;# 
   529  010D                     	;# 
   530  010E                     	;# 
   531  0116                     	;# 
   532  0117                     	;# 
   533  011D                     	;# 
   534  018C                     	;# 
   535  018D                     	;# 
   536  018E                     	;# 
   537  0191                     	;# 
   538  0191                     	;# 
   539  0192                     	;# 
   540  0193                     	;# 
   541  0193                     	;# 
   542  0194                     	;# 
   543  0195                     	;# 
   544  0196                     	;# 
   545  0197                     	;# 
   546  0199                     	;# 
   547  019A                     	;# 
   548  019B                     	;# 
   549  019B                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019C                     	;# 
   553  019C                     	;# 
   554  019D                     	;# 
   555  019E                     	;# 
   556  019F                     	;# 
   557  020D                     	;# 
   558  0210                     	;# 
   559  0211                     	;# 
   560  0211                     	;# 
   561  0212                     	;# 
   562  0212                     	;# 
   563  0213                     	;# 
   564  0213                     	;# 
   565  0214                     	;# 
   566  0214                     	;# 
   567  0215                     	;# 
   568  0215                     	;# 
   569  0215                     	;# 
   570  0216                     	;# 
   571  0216                     	;# 
   572  0217                     	;# 
   573  0217                     	;# 
   574  0291                     	;# 
   575  0291                     	;# 
   576  0292                     	;# 
   577  0293                     	;# 
   578  0298                     	;# 
   579  0298                     	;# 
   580  0299                     	;# 
   581  029A                     	;# 
   582  0394                     	;# 
   583  0395                     	;# 
   584  0396                     	;# 
   585  0FE4                     	;# 
   586  0FE5                     	;# 
   587  0FE6                     	;# 
   588  0FE7                     	;# 
   589  0FE8                     	;# 
   590  0FE9                     	;# 
   591  0FEA                     	;# 
   592  0FEB                     	;# 
   593  0FED                     	;# 
   594  0FEE                     	;# 
   595  0FEF                     	;# 
   596  0000                     	;# 
   597  0001                     	;# 
   598  0002                     	;# 
   599  0003                     	;# 
   600  0004                     	;# 
   601  0005                     	;# 
   602  0006                     	;# 
   603  0007                     	;# 
   604  0008                     	;# 
   605  0009                     	;# 
   606  000A                     	;# 
   607  000B                     	;# 
   608  000C                     	;# 
   609  000D                     	;# 
   610  000E                     	;# 
   611  0010                     	;# 
   612  0011                     	;# 
   613  0012                     	;# 
   614  0015                     	;# 
   615  0016                     	;# 
   616  0016                     	;# 
   617  0017                     	;# 
   618  0018                     	;# 
   619  0019                     	;# 
   620  001A                     	;# 
   621  001B                     	;# 
   622  001C                     	;# 
   623  008C                     	;# 
   624  008D                     	;# 
   625  008E                     	;# 
   626  0090                     	;# 
   627  0091                     	;# 
   628  0092                     	;# 
   629  0095                     	;# 
   630  0096                     	;# 
   631  0097                     	;# 
   632  0099                     	;# 
   633  009A                     	;# 
   634  009B                     	;# 
   635  009B                     	;# 
   636  009C                     	;# 
   637  009D                     	;# 
   638  009E                     	;# 
   639  010C                     	;# 
   640  010D                     	;# 
   641  010E                     	;# 
   642  0116                     	;# 
   643  0117                     	;# 
   644  011D                     	;# 
   645  018C                     	;# 
   646  018D                     	;# 
   647  018E                     	;# 
   648  0191                     	;# 
   649  0191                     	;# 
   650  0192                     	;# 
   651  0193                     	;# 
   652  0193                     	;# 
   653  0194                     	;# 
   654  0195                     	;# 
   655  0196                     	;# 
   656  0197                     	;# 
   657  0199                     	;# 
   658  019A                     	;# 
   659  019B                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019C                     	;# 
   664  019C                     	;# 
   665  019D                     	;# 
   666  019E                     	;# 
   667  019F                     	;# 
   668  020D                     	;# 
   669  0210                     	;# 
   670  0211                     	;# 
   671  0211                     	;# 
   672  0212                     	;# 
   673  0212                     	;# 
   674  0213                     	;# 
   675  0213                     	;# 
   676  0214                     	;# 
   677  0214                     	;# 
   678  0215                     	;# 
   679  0215                     	;# 
   680  0215                     	;# 
   681  0216                     	;# 
   682  0216                     	;# 
   683  0217                     	;# 
   684  0217                     	;# 
   685  0291                     	;# 
   686  0291                     	;# 
   687  0292                     	;# 
   688  0293                     	;# 
   689  0298                     	;# 
   690  0298                     	;# 
   691  0299                     	;# 
   692  029A                     	;# 
   693  0394                     	;# 
   694  0395                     	;# 
   695  0396                     	;# 
   696  0FE4                     	;# 
   697  0FE5                     	;# 
   698  0FE6                     	;# 
   699  0FE7                     	;# 
   700  0FE8                     	;# 
   701  0FE9                     	;# 
   702  0FEA                     	;# 
   703  0FEB                     	;# 
   704  0FED                     	;# 
   705  0FEE                     	;# 
   706  0FEF                     	;# 
   707  0000                     	;# 
   708  0001                     	;# 
   709  0002                     	;# 
   710  0003                     	;# 
   711  0004                     	;# 
   712  0005                     	;# 
   713  0006                     	;# 
   714  0007                     	;# 
   715  0008                     	;# 
   716  0009                     	;# 
   717  000A                     	;# 
   718  000B                     	;# 
   719  000C                     	;# 
   720  000D                     	;# 
   721  000E                     	;# 
   722  0010                     	;# 
   723  0011                     	;# 
   724  0012                     	;# 
   725  0015                     	;# 
   726  0016                     	;# 
   727  0016                     	;# 
   728  0017                     	;# 
   729  0018                     	;# 
   730  0019                     	;# 
   731  001A                     	;# 
   732  001B                     	;# 
   733  001C                     	;# 
   734  008C                     	;# 
   735  008D                     	;# 
   736  008E                     	;# 
   737  0090                     	;# 
   738  0091                     	;# 
   739  0092                     	;# 
   740  0095                     	;# 
   741  0096                     	;# 
   742  0097                     	;# 
   743  0099                     	;# 
   744  009A                     	;# 
   745  009B                     	;# 
   746  009B                     	;# 
   747  009C                     	;# 
   748  009D                     	;# 
   749  009E                     	;# 
   750  010C                     	;# 
   751  010D                     	;# 
   752  010E                     	;# 
   753  0116                     	;# 
   754  0117                     	;# 
   755  011D                     	;# 
   756  018C                     	;# 
   757  018D                     	;# 
   758  018E                     	;# 
   759  0191                     	;# 
   760  0191                     	;# 
   761  0192                     	;# 
   762  0193                     	;# 
   763  0193                     	;# 
   764  0194                     	;# 
   765  0195                     	;# 
   766  0196                     	;# 
   767  0197                     	;# 
   768  0199                     	;# 
   769  019A                     	;# 
   770  019B                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019C                     	;# 
   775  019C                     	;# 
   776  019D                     	;# 
   777  019E                     	;# 
   778  019F                     	;# 
   779  020D                     	;# 
   780  0210                     	;# 
   781  0211                     	;# 
   782  0211                     	;# 
   783  0212                     	;# 
   784  0212                     	;# 
   785  0213                     	;# 
   786  0213                     	;# 
   787  0214                     	;# 
   788  0214                     	;# 
   789  0215                     	;# 
   790  0215                     	;# 
   791  0215                     	;# 
   792  0216                     	;# 
   793  0216                     	;# 
   794  0217                     	;# 
   795  0217                     	;# 
   796  0291                     	;# 
   797  0291                     	;# 
   798  0292                     	;# 
   799  0293                     	;# 
   800  0298                     	;# 
   801  0298                     	;# 
   802  0299                     	;# 
   803  029A                     	;# 
   804  0394                     	;# 
   805  0395                     	;# 
   806  0396                     	;# 
   807  0FE4                     	;# 
   808  0FE5                     	;# 
   809  0FE6                     	;# 
   810  0FE7                     	;# 
   811  0FE8                     	;# 
   812  0FE9                     	;# 
   813  0FEA                     	;# 
   814  0FEB                     	;# 
   815  0FED                     	;# 
   816  0FEE                     	;# 
   817  0FEF                     	;# 
   818  0000                     	;# 
   819  0001                     	;# 
   820  0002                     	;# 
   821  0003                     	;# 
   822  0004                     	;# 
   823  0005                     	;# 
   824  0006                     	;# 
   825  0007                     	;# 
   826  0008                     	;# 
   827  0009                     	;# 
   828  000A                     	;# 
   829  000B                     	;# 
   830  000C                     	;# 
   831  000D                     	;# 
   832  000E                     	;# 
   833  0010                     	;# 
   834  0011                     	;# 
   835  0012                     	;# 
   836  0015                     	;# 
   837  0016                     	;# 
   838  0016                     	;# 
   839  0017                     	;# 
   840  0018                     	;# 
   841  0019                     	;# 
   842  001A                     	;# 
   843  001B                     	;# 
   844  001C                     	;# 
   845  008C                     	;# 
   846  008D                     	;# 
   847  008E                     	;# 
   848  0090                     	;# 
   849  0091                     	;# 
   850  0092                     	;# 
   851  0095                     	;# 
   852  0096                     	;# 
   853  0097                     	;# 
   854  0099                     	;# 
   855  009A                     	;# 
   856  009B                     	;# 
   857  009B                     	;# 
   858  009C                     	;# 
   859  009D                     	;# 
   860  009E                     	;# 
   861  010C                     	;# 
   862  010D                     	;# 
   863  010E                     	;# 
   864  0116                     	;# 
   865  0117                     	;# 
   866  011D                     	;# 
   867  018C                     	;# 
   868  018D                     	;# 
   869  018E                     	;# 
   870  0191                     	;# 
   871  0191                     	;# 
   872  0192                     	;# 
   873  0193                     	;# 
   874  0193                     	;# 
   875  0194                     	;# 
   876  0195                     	;# 
   877  0196                     	;# 
   878  0197                     	;# 
   879  0199                     	;# 
   880  019A                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019C                     	;# 
   886  019C                     	;# 
   887  019D                     	;# 
   888  019E                     	;# 
   889  019F                     	;# 
   890  020D                     	;# 
   891  0210                     	;# 
   892  0211                     	;# 
   893  0211                     	;# 
   894  0212                     	;# 
   895  0212                     	;# 
   896  0213                     	;# 
   897  0213                     	;# 
   898  0214                     	;# 
   899  0214                     	;# 
   900  0215                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0216                     	;# 
   904  0216                     	;# 
   905  0217                     	;# 
   906  0217                     	;# 
   907  0291                     	;# 
   908  0291                     	;# 
   909  0292                     	;# 
   910  0293                     	;# 
   911  0298                     	;# 
   912  0298                     	;# 
   913  0299                     	;# 
   914  029A                     	;# 
   915  0394                     	;# 
   916  0395                     	;# 
   917  0396                     	;# 
   918  0FE4                     	;# 
   919  0FE5                     	;# 
   920  0FE6                     	;# 
   921  0FE7                     	;# 
   922  0FE8                     	;# 
   923  0FE9                     	;# 
   924  0FEA                     	;# 
   925  0FEB                     	;# 
   926  0FED                     	;# 
   927  0FEE                     	;# 
   928  0FEF                     	;# 
   929  0000                     	;# 
   930  0001                     	;# 
   931  0002                     	;# 
   932  0003                     	;# 
   933  0004                     	;# 
   934  0005                     	;# 
   935  0006                     	;# 
   936  0007                     	;# 
   937  0008                     	;# 
   938  0009                     	;# 
   939  000A                     	;# 
   940  000B                     	;# 
   941  000C                     	;# 
   942  000D                     	;# 
   943  000E                     	;# 
   944  0010                     	;# 
   945  0011                     	;# 
   946  0012                     	;# 
   947  0015                     	;# 
   948  0016                     	;# 
   949  0016                     	;# 
   950  0017                     	;# 
   951  0018                     	;# 
   952  0019                     	;# 
   953  001A                     	;# 
   954  001B                     	;# 
   955  001C                     	;# 
   956  008C                     	;# 
   957  008D                     	;# 
   958  008E                     	;# 
   959  0090                     	;# 
   960  0091                     	;# 
   961  0092                     	;# 
   962  0095                     	;# 
   963  0096                     	;# 
   964  0097                     	;# 
   965  0099                     	;# 
   966  009A                     	;# 
   967  009B                     	;# 
   968  009B                     	;# 
   969  009C                     	;# 
   970  009D                     	;# 
   971  009E                     	;# 
   972  010C                     	;# 
   973  010D                     	;# 
   974  010E                     	;# 
   975  0116                     	;# 
   976  0117                     	;# 
   977  011D                     	;# 
   978  018C                     	;# 
   979  018D                     	;# 
   980  018E                     	;# 
   981  0191                     	;# 
   982  0191                     	;# 
   983  0192                     	;# 
   984  0193                     	;# 
   985  0193                     	;# 
   986  0194                     	;# 
   987  0195                     	;# 
   988  0196                     	;# 
   989  0197                     	;# 
   990  0199                     	;# 
   991  019A                     	;# 
   992  019B                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019C                     	;# 
   997  019C                     	;# 
   998  019D                     	;# 
   999  019E                     	;# 
  1000  019F                     	;# 
  1001  020D                     	;# 
  1002  0210                     	;# 
  1003  0211                     	;# 
  1004  0211                     	;# 
  1005  0212                     	;# 
  1006  0212                     	;# 
  1007  0213                     	;# 
  1008  0213                     	;# 
  1009  0214                     	;# 
  1010  0214                     	;# 
  1011  0215                     	;# 
  1012  0215                     	;# 
  1013  0215                     	;# 
  1014  0216                     	;# 
  1015  0216                     	;# 
  1016  0217                     	;# 
  1017  0217                     	;# 
  1018  0291                     	;# 
  1019  0291                     	;# 
  1020  0292                     	;# 
  1021  0293                     	;# 
  1022  0298                     	;# 
  1023  0298                     	;# 
  1024  0299                     	;# 
  1025  029A                     	;# 
  1026  0394                     	;# 
  1027  0395                     	;# 
  1028  0396                     	;# 
  1029  0FE4                     	;# 
  1030  0FE5                     	;# 
  1031  0FE6                     	;# 
  1032  0FE7                     	;# 
  1033  0FE8                     	;# 
  1034  0FE9                     	;# 
  1035  0FEA                     	;# 
  1036  0FEB                     	;# 
  1037  0FED                     	;# 
  1038  0FEE                     	;# 
  1039  0FEF                     	;# 
  1040  0000                     	;# 
  1041  0001                     	;# 
  1042  0002                     	;# 
  1043  0003                     	;# 
  1044  0004                     	;# 
  1045  0005                     	;# 
  1046  0006                     	;# 
  1047  0007                     	;# 
  1048  0008                     	;# 
  1049  0009                     	;# 
  1050  000A                     	;# 
  1051  000B                     	;# 
  1052  000C                     	;# 
  1053  000D                     	;# 
  1054  000E                     	;# 
  1055  0010                     	;# 
  1056  0011                     	;# 
  1057  0012                     	;# 
  1058  0015                     	;# 
  1059  0016                     	;# 
  1060  0016                     	;# 
  1061  0017                     	;# 
  1062  0018                     	;# 
  1063  0019                     	;# 
  1064  001A                     	;# 
  1065  001B                     	;# 
  1066  001C                     	;# 
  1067  008C                     	;# 
  1068  008D                     	;# 
  1069  008E                     	;# 
  1070  0090                     	;# 
  1071  0091                     	;# 
  1072  0092                     	;# 
  1073  0095                     	;# 
  1074  0096                     	;# 
  1075  0097                     	;# 
  1076  0099                     	;# 
  1077  009A                     	;# 
  1078  009B                     	;# 
  1079  009B                     	;# 
  1080  009C                     	;# 
  1081  009D                     	;# 
  1082  009E                     	;# 
  1083  010C                     	;# 
  1084  010D                     	;# 
  1085  010E                     	;# 
  1086  0116                     	;# 
  1087  0117                     	;# 
  1088  011D                     	;# 
  1089  018C                     	;# 
  1090  018D                     	;# 
  1091  018E                     	;# 
  1092  0191                     	;# 
  1093  0191                     	;# 
  1094  0192                     	;# 
  1095  0193                     	;# 
  1096  0193                     	;# 
  1097  0194                     	;# 
  1098  0195                     	;# 
  1099  0196                     	;# 
  1100  0197                     	;# 
  1101  0199                     	;# 
  1102  019A                     	;# 
  1103  019B                     	;# 
  1104  019B                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019C                     	;# 
  1108  019C                     	;# 
  1109  019D                     	;# 
  1110  019E                     	;# 
  1111  019F                     	;# 
  1112  020D                     	;# 
  1113  0210                     	;# 
  1114  0211                     	;# 
  1115  0211                     	;# 
  1116  0212                     	;# 
  1117  0212                     	;# 
  1118  0213                     	;# 
  1119  0213                     	;# 
  1120  0214                     	;# 
  1121  0214                     	;# 
  1122  0215                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0216                     	;# 
  1126  0216                     	;# 
  1127  0217                     	;# 
  1128  0217                     	;# 
  1129  0291                     	;# 
  1130  0291                     	;# 
  1131  0292                     	;# 
  1132  0293                     	;# 
  1133  0298                     	;# 
  1134  0298                     	;# 
  1135  0299                     	;# 
  1136  029A                     	;# 
  1137  0394                     	;# 
  1138  0395                     	;# 
  1139  0396                     	;# 
  1140  0FE4                     	;# 
  1141  0FE5                     	;# 
  1142  0FE6                     	;# 
  1143  0FE7                     	;# 
  1144  0FE8                     	;# 
  1145  0FE9                     	;# 
  1146  0FEA                     	;# 
  1147  0FEB                     	;# 
  1148  0FED                     	;# 
  1149  0FEE                     	;# 
  1150  0FEF                     	;# 
  1151  0000                     	;# 
  1152  0001                     	;# 
  1153  0002                     	;# 
  1154  0003                     	;# 
  1155  0004                     	;# 
  1156  0005                     	;# 
  1157  0006                     	;# 
  1158  0007                     	;# 
  1159  0008                     	;# 
  1160  0009                     	;# 
  1161  000A                     	;# 
  1162  000B                     	;# 
  1163  000C                     	;# 
  1164  000D                     	;# 
  1165  000E                     	;# 
  1166  0010                     	;# 
  1167  0011                     	;# 
  1168  0012                     	;# 
  1169  0015                     	;# 
  1170  0016                     	;# 
  1171  0016                     	;# 
  1172  0017                     	;# 
  1173  0018                     	;# 
  1174  0019                     	;# 
  1175  001A                     	;# 
  1176  001B                     	;# 
  1177  001C                     	;# 
  1178  008C                     	;# 
  1179  008D                     	;# 
  1180  008E                     	;# 
  1181  0090                     	;# 
  1182  0091                     	;# 
  1183  0092                     	;# 
  1184  0095                     	;# 
  1185  0096                     	;# 
  1186  0097                     	;# 
  1187  0099                     	;# 
  1188  009A                     	;# 
  1189  009B                     	;# 
  1190  009B                     	;# 
  1191  009C                     	;# 
  1192  009D                     	;# 
  1193  009E                     	;# 
  1194  010C                     	;# 
  1195  010D                     	;# 
  1196  010E                     	;# 
  1197  0116                     	;# 
  1198  0117                     	;# 
  1199  011D                     	;# 
  1200  018C                     	;# 
  1201  018D                     	;# 
  1202  018E                     	;# 
  1203  0191                     	;# 
  1204  0191                     	;# 
  1205  0192                     	;# 
  1206  0193                     	;# 
  1207  0193                     	;# 
  1208  0194                     	;# 
  1209  0195                     	;# 
  1210  0196                     	;# 
  1211  0197                     	;# 
  1212  0199                     	;# 
  1213  019A                     	;# 
  1214  019B                     	;# 
  1215  019B                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019C                     	;# 
  1219  019C                     	;# 
  1220  019D                     	;# 
  1221  019E                     	;# 
  1222  019F                     	;# 
  1223  020D                     	;# 
  1224  0210                     	;# 
  1225  0211                     	;# 
  1226  0211                     	;# 
  1227  0212                     	;# 
  1228  0212                     	;# 
  1229  0213                     	;# 
  1230  0213                     	;# 
  1231  0214                     	;# 
  1232  0214                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0216                     	;# 
  1237  0216                     	;# 
  1238  0217                     	;# 
  1239  0217                     	;# 
  1240  0291                     	;# 
  1241  0291                     	;# 
  1242  0292                     	;# 
  1243  0293                     	;# 
  1244  0298                     	;# 
  1245  0298                     	;# 
  1246  0299                     	;# 
  1247  029A                     	;# 
  1248  0394                     	;# 
  1249  0395                     	;# 
  1250  0396                     	;# 
  1251  0FE4                     	;# 
  1252  0FE5                     	;# 
  1253  0FE6                     	;# 
  1254  0FE7                     	;# 
  1255  0FE8                     	;# 
  1256  0FE9                     	;# 
  1257  0FEA                     	;# 
  1258  0FEB                     	;# 
  1259  0FED                     	;# 
  1260  0FEE                     	;# 
  1261  0FEF                     	;# 
  1262  0000                     	;# 
  1263  0001                     	;# 
  1264  0002                     	;# 
  1265  0003                     	;# 
  1266  0004                     	;# 
  1267  0005                     	;# 
  1268  0006                     	;# 
  1269  0007                     	;# 
  1270  0008                     	;# 
  1271  0009                     	;# 
  1272  000A                     	;# 
  1273  000B                     	;# 
  1274  000C                     	;# 
  1275  000D                     	;# 
  1276  000E                     	;# 
  1277  0010                     	;# 
  1278  0011                     	;# 
  1279  0012                     	;# 
  1280  0015                     	;# 
  1281  0016                     	;# 
  1282  0016                     	;# 
  1283  0017                     	;# 
  1284  0018                     	;# 
  1285  0019                     	;# 
  1286  001A                     	;# 
  1287  001B                     	;# 
  1288  001C                     	;# 
  1289  008C                     	;# 
  1290  008D                     	;# 
  1291  008E                     	;# 
  1292  0090                     	;# 
  1293  0091                     	;# 
  1294  0092                     	;# 
  1295  0095                     	;# 
  1296  0096                     	;# 
  1297  0097                     	;# 
  1298  0099                     	;# 
  1299  009A                     	;# 
  1300  009B                     	;# 
  1301  009B                     	;# 
  1302  009C                     	;# 
  1303  009D                     	;# 
  1304  009E                     	;# 
  1305  010C                     	;# 
  1306  010D                     	;# 
  1307  010E                     	;# 
  1308  0116                     	;# 
  1309  0117                     	;# 
  1310  011D                     	;# 
  1311  018C                     	;# 
  1312  018D                     	;# 
  1313  018E                     	;# 
  1314  0191                     	;# 
  1315  0191                     	;# 
  1316  0192                     	;# 
  1317  0193                     	;# 
  1318  0193                     	;# 
  1319  0194                     	;# 
  1320  0195                     	;# 
  1321  0196                     	;# 
  1322  0197                     	;# 
  1323  0199                     	;# 
  1324  019A                     	;# 
  1325  019B                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019C                     	;# 
  1330  019C                     	;# 
  1331  019D                     	;# 
  1332  019E                     	;# 
  1333  019F                     	;# 
  1334  020D                     	;# 
  1335  0210                     	;# 
  1336  0211                     	;# 
  1337  0211                     	;# 
  1338  0212                     	;# 
  1339  0212                     	;# 
  1340  0213                     	;# 
  1341  0213                     	;# 
  1342  0214                     	;# 
  1343  0214                     	;# 
  1344  0215                     	;# 
  1345  0215                     	;# 
  1346  0215                     	;# 
  1347  0216                     	;# 
  1348  0216                     	;# 
  1349  0217                     	;# 
  1350  0217                     	;# 
  1351  0291                     	;# 
  1352  0291                     	;# 
  1353  0292                     	;# 
  1354  0293                     	;# 
  1355  0298                     	;# 
  1356  0298                     	;# 
  1357  0299                     	;# 
  1358  029A                     	;# 
  1359  0394                     	;# 
  1360  0395                     	;# 
  1361  0396                     	;# 
  1362  0FE4                     	;# 
  1363  0FE5                     	;# 
  1364  0FE6                     	;# 
  1365  0FE7                     	;# 
  1366  0FE8                     	;# 
  1367  0FE9                     	;# 
  1368  0FEA                     	;# 
  1369  0FEB                     	;# 
  1370  0FED                     	;# 
  1371  0FEE                     	;# 
  1372  0FEF                     	;# 
  1373  0000                     	;# 
  1374  0001                     	;# 
  1375  0002                     	;# 
  1376  0003                     	;# 
  1377  0004                     	;# 
  1378  0005                     	;# 
  1379  0006                     	;# 
  1380  0007                     	;# 
  1381  0008                     	;# 
  1382  0009                     	;# 
  1383  000A                     	;# 
  1384  000B                     	;# 
  1385  000C                     	;# 
  1386  000D                     	;# 
  1387  000E                     	;# 
  1388  0010                     	;# 
  1389  0011                     	;# 
  1390  0012                     	;# 
  1391  0015                     	;# 
  1392  0016                     	;# 
  1393  0016                     	;# 
  1394  0017                     	;# 
  1395  0018                     	;# 
  1396  0019                     	;# 
  1397  001A                     	;# 
  1398  001B                     	;# 
  1399  001C                     	;# 
  1400  008C                     	;# 
  1401  008D                     	;# 
  1402  008E                     	;# 
  1403  0090                     	;# 
  1404  0091                     	;# 
  1405  0092                     	;# 
  1406  0095                     	;# 
  1407  0096                     	;# 
  1408  0097                     	;# 
  1409  0099                     	;# 
  1410  009A                     	;# 
  1411  009B                     	;# 
  1412  009B                     	;# 
  1413  009C                     	;# 
  1414  009D                     	;# 
  1415  009E                     	;# 
  1416  010C                     	;# 
  1417  010D                     	;# 
  1418  010E                     	;# 
  1419  0116                     	;# 
  1420  0117                     	;# 
  1421  011D                     	;# 
  1422  018C                     	;# 
  1423  018D                     	;# 
  1424  018E                     	;# 
  1425  0191                     	;# 
  1426  0191                     	;# 
  1427  0192                     	;# 
  1428  0193                     	;# 
  1429  0193                     	;# 
  1430  0194                     	;# 
  1431  0195                     	;# 
  1432  0196                     	;# 
  1433  0197                     	;# 
  1434  0199                     	;# 
  1435  019A                     	;# 
  1436  019B                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019C                     	;# 
  1441  019C                     	;# 
  1442  019D                     	;# 
  1443  019E                     	;# 
  1444  019F                     	;# 
  1445  020D                     	;# 
  1446  0210                     	;# 
  1447  0211                     	;# 
  1448  0211                     	;# 
  1449  0212                     	;# 
  1450  0212                     	;# 
  1451  0213                     	;# 
  1452  0213                     	;# 
  1453  0214                     	;# 
  1454  0214                     	;# 
  1455  0215                     	;# 
  1456  0215                     	;# 
  1457  0215                     	;# 
  1458  0216                     	;# 
  1459  0216                     	;# 
  1460  0217                     	;# 
  1461  0217                     	;# 
  1462  0291                     	;# 
  1463  0291                     	;# 
  1464  0292                     	;# 
  1465  0293                     	;# 
  1466  0298                     	;# 
  1467  0298                     	;# 
  1468  0299                     	;# 
  1469  029A                     	;# 
  1470  0394                     	;# 
  1471  0395                     	;# 
  1472  0396                     	;# 
  1473  0FE4                     	;# 
  1474  0FE5                     	;# 
  1475  0FE6                     	;# 
  1476  0FE7                     	;# 
  1477  0FE8                     	;# 
  1478  0FE9                     	;# 
  1479  0FEA                     	;# 
  1480  0FEB                     	;# 
  1481  0FED                     	;# 
  1482  0FEE                     	;# 
  1483  0FEF                     	;# 
  1484  0000                     	;# 
  1485  0001                     	;# 
  1486  0002                     	;# 
  1487  0003                     	;# 
  1488  0004                     	;# 
  1489  0005                     	;# 
  1490  0006                     	;# 
  1491  0007                     	;# 
  1492  0008                     	;# 
  1493  0009                     	;# 
  1494  000A                     	;# 
  1495  000B                     	;# 
  1496  000C                     	;# 
  1497  000D                     	;# 
  1498  000E                     	;# 
  1499  0010                     	;# 
  1500  0011                     	;# 
  1501  0012                     	;# 
  1502  0015                     	;# 
  1503  0016                     	;# 
  1504  0016                     	;# 
  1505  0017                     	;# 
  1506  0018                     	;# 
  1507  0019                     	;# 
  1508  001A                     	;# 
  1509  001B                     	;# 
  1510  001C                     	;# 
  1511  008C                     	;# 
  1512  008D                     	;# 
  1513  008E                     	;# 
  1514  0090                     	;# 
  1515  0091                     	;# 
  1516  0092                     	;# 
  1517  0095                     	;# 
  1518  0096                     	;# 
  1519  0097                     	;# 
  1520  0099                     	;# 
  1521  009A                     	;# 
  1522  009B                     	;# 
  1523  009B                     	;# 
  1524  009C                     	;# 
  1525  009D                     	;# 
  1526  009E                     	;# 
  1527  010C                     	;# 
  1528  010D                     	;# 
  1529  010E                     	;# 
  1530  0116                     	;# 
  1531  0117                     	;# 
  1532  011D                     	;# 
  1533  018C                     	;# 
  1534  018D                     	;# 
  1535  018E                     	;# 
  1536  0191                     	;# 
  1537  0191                     	;# 
  1538  0192                     	;# 
  1539  0193                     	;# 
  1540  0193                     	;# 
  1541  0194                     	;# 
  1542  0195                     	;# 
  1543  0196                     	;# 
  1544  0197                     	;# 
  1545  0199                     	;# 
  1546  019A                     	;# 
  1547  019B                     	;# 
  1548  019B                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019C                     	;# 
  1552  019C                     	;# 
  1553  019D                     	;# 
  1554  019E                     	;# 
  1555  019F                     	;# 
  1556  020D                     	;# 
  1557  0210                     	;# 
  1558  0211                     	;# 
  1559  0211                     	;# 
  1560  0212                     	;# 
  1561  0212                     	;# 
  1562  0213                     	;# 
  1563  0213                     	;# 
  1564  0214                     	;# 
  1565  0214                     	;# 
  1566  0215                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0216                     	;# 
  1570  0216                     	;# 
  1571  0217                     	;# 
  1572  0217                     	;# 
  1573  0291                     	;# 
  1574  0291                     	;# 
  1575  0292                     	;# 
  1576  0293                     	;# 
  1577  0298                     	;# 
  1578  0298                     	;# 
  1579  0299                     	;# 
  1580  029A                     	;# 
  1581  0394                     	;# 
  1582  0395                     	;# 
  1583  0396                     	;# 
  1584  0FE4                     	;# 
  1585  0FE5                     	;# 
  1586  0FE6                     	;# 
  1587  0FE7                     	;# 
  1588  0FE8                     	;# 
  1589  0FE9                     	;# 
  1590  0FEA                     	;# 
  1591  0FEB                     	;# 
  1592  0FED                     	;# 
  1593  0FEE                     	;# 
  1594  0FEF                     	;# 
  1595  0000                     	;# 
  1596  0001                     	;# 
  1597  0002                     	;# 
  1598  0003                     	;# 
  1599  0004                     	;# 
  1600  0005                     	;# 
  1601  0006                     	;# 
  1602  0007                     	;# 
  1603  0008                     	;# 
  1604  0009                     	;# 
  1605  000A                     	;# 
  1606  000B                     	;# 
  1607  000C                     	;# 
  1608  000D                     	;# 
  1609  000E                     	;# 
  1610  0010                     	;# 
  1611  0011                     	;# 
  1612  0012                     	;# 
  1613  0015                     	;# 
  1614  0016                     	;# 
  1615  0016                     	;# 
  1616  0017                     	;# 
  1617  0018                     	;# 
  1618  0019                     	;# 
  1619  001A                     	;# 
  1620  001B                     	;# 
  1621  001C                     	;# 
  1622  008C                     	;# 
  1623  008D                     	;# 
  1624  008E                     	;# 
  1625  0090                     	;# 
  1626  0091                     	;# 
  1627  0092                     	;# 
  1628  0095                     	;# 
  1629  0096                     	;# 
  1630  0097                     	;# 
  1631  0099                     	;# 
  1632  009A                     	;# 
  1633  009B                     	;# 
  1634  009B                     	;# 
  1635  009C                     	;# 
  1636  009D                     	;# 
  1637  009E                     	;# 
  1638  010C                     	;# 
  1639  010D                     	;# 
  1640  010E                     	;# 
  1641  0116                     	;# 
  1642  0117                     	;# 
  1643  011D                     	;# 
  1644  018C                     	;# 
  1645  018D                     	;# 
  1646  018E                     	;# 
  1647  0191                     	;# 
  1648  0191                     	;# 
  1649  0192                     	;# 
  1650  0193                     	;# 
  1651  0193                     	;# 
  1652  0194                     	;# 
  1653  0195                     	;# 
  1654  0196                     	;# 
  1655  0197                     	;# 
  1656  0199                     	;# 
  1657  019A                     	;# 
  1658  019B                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019C                     	;# 
  1663  019C                     	;# 
  1664  019D                     	;# 
  1665  019E                     	;# 
  1666  019F                     	;# 
  1667  020D                     	;# 
  1668  0210                     	;# 
  1669  0211                     	;# 
  1670  0211                     	;# 
  1671  0212                     	;# 
  1672  0212                     	;# 
  1673  0213                     	;# 
  1674  0213                     	;# 
  1675  0214                     	;# 
  1676  0214                     	;# 
  1677  0215                     	;# 
  1678  0215                     	;# 
  1679  0215                     	;# 
  1680  0216                     	;# 
  1681  0216                     	;# 
  1682  0217                     	;# 
  1683  0217                     	;# 
  1684  0291                     	;# 
  1685  0291                     	;# 
  1686  0292                     	;# 
  1687  0293                     	;# 
  1688  0298                     	;# 
  1689  0298                     	;# 
  1690  0299                     	;# 
  1691  029A                     	;# 
  1692  0394                     	;# 
  1693  0395                     	;# 
  1694  0396                     	;# 
  1695  0FE4                     	;# 
  1696  0FE5                     	;# 
  1697  0FE6                     	;# 
  1698  0FE7                     	;# 
  1699  0FE8                     	;# 
  1700  0FE9                     	;# 
  1701  0FEA                     	;# 
  1702  0FEB                     	;# 
  1703  0FED                     	;# 
  1704  0FEE                     	;# 
  1705  0FEF                     	;# 
  1706  0000                     	;# 
  1707  0001                     	;# 
  1708  0002                     	;# 
  1709  0003                     	;# 
  1710  0004                     	;# 
  1711  0005                     	;# 
  1712  0006                     	;# 
  1713  0007                     	;# 
  1714  0008                     	;# 
  1715  0009                     	;# 
  1716  000A                     	;# 
  1717  000B                     	;# 
  1718  000C                     	;# 
  1719  000D                     	;# 
  1720  000E                     	;# 
  1721  0010                     	;# 
  1722  0011                     	;# 
  1723  0012                     	;# 
  1724  0015                     	;# 
  1725  0016                     	;# 
  1726  0016                     	;# 
  1727  0017                     	;# 
  1728  0018                     	;# 
  1729  0019                     	;# 
  1730  001A                     	;# 
  1731  001B                     	;# 
  1732  001C                     	;# 
  1733  008C                     	;# 
  1734  008D                     	;# 
  1735  008E                     	;# 
  1736  0090                     	;# 
  1737  0091                     	;# 
  1738  0092                     	;# 
  1739  0095                     	;# 
  1740  0096                     	;# 
  1741  0097                     	;# 
  1742  0099                     	;# 
  1743  009A                     	;# 
  1744  009B                     	;# 
  1745  009B                     	;# 
  1746  009C                     	;# 
  1747  009D                     	;# 
  1748  009E                     	;# 
  1749  010C                     	;# 
  1750  010D                     	;# 
  1751  010E                     	;# 
  1752  0116                     	;# 
  1753  0117                     	;# 
  1754  011D                     	;# 
  1755  018C                     	;# 
  1756  018D                     	;# 
  1757  018E                     	;# 
  1758  0191                     	;# 
  1759  0191                     	;# 
  1760  0192                     	;# 
  1761  0193                     	;# 
  1762  0193                     	;# 
  1763  0194                     	;# 
  1764  0195                     	;# 
  1765  0196                     	;# 
  1766  0197                     	;# 
  1767  0199                     	;# 
  1768  019A                     	;# 
  1769  019B                     	;# 
  1770  019B                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019C                     	;# 
  1774  019C                     	;# 
  1775  019D                     	;# 
  1776  019E                     	;# 
  1777  019F                     	;# 
  1778  020D                     	;# 
  1779  0210                     	;# 
  1780  0211                     	;# 
  1781  0211                     	;# 
  1782  0212                     	;# 
  1783  0212                     	;# 
  1784  0213                     	;# 
  1785  0213                     	;# 
  1786  0214                     	;# 
  1787  0214                     	;# 
  1788  0215                     	;# 
  1789  0215                     	;# 
  1790  0215                     	;# 
  1791  0216                     	;# 
  1792  0216                     	;# 
  1793  0217                     	;# 
  1794  0217                     	;# 
  1795  0291                     	;# 
  1796  0291                     	;# 
  1797  0292                     	;# 
  1798  0293                     	;# 
  1799  0298                     	;# 
  1800  0298                     	;# 
  1801  0299                     	;# 
  1802  029A                     	;# 
  1803  0394                     	;# 
  1804  0395                     	;# 
  1805  0396                     	;# 
  1806  0FE4                     	;# 
  1807  0FE5                     	;# 
  1808  0FE6                     	;# 
  1809  0FE7                     	;# 
  1810  0FE8                     	;# 
  1811  0FE9                     	;# 
  1812  0FEA                     	;# 
  1813  0FEB                     	;# 
  1814  0FED                     	;# 
  1815  0FEE                     	;# 
  1816  0FEF                     	;# 
  1817  0000                     	;# 
  1818  0001                     	;# 
  1819  0002                     	;# 
  1820  0003                     	;# 
  1821  0004                     	;# 
  1822  0005                     	;# 
  1823  0006                     	;# 
  1824  0007                     	;# 
  1825  0008                     	;# 
  1826  0009                     	;# 
  1827  000A                     	;# 
  1828  000B                     	;# 
  1829  000C                     	;# 
  1830  000D                     	;# 
  1831  000E                     	;# 
  1832  0010                     	;# 
  1833  0011                     	;# 
  1834  0012                     	;# 
  1835  0015                     	;# 
  1836  0016                     	;# 
  1837  0016                     	;# 
  1838  0017                     	;# 
  1839  0018                     	;# 
  1840  0019                     	;# 
  1841  001A                     	;# 
  1842  001B                     	;# 
  1843  001C                     	;# 
  1844  008C                     	;# 
  1845  008D                     	;# 
  1846  008E                     	;# 
  1847  0090                     	;# 
  1848  0091                     	;# 
  1849  0092                     	;# 
  1850  0095                     	;# 
  1851  0096                     	;# 
  1852  0097                     	;# 
  1853  0099                     	;# 
  1854  009A                     	;# 
  1855  009B                     	;# 
  1856  009B                     	;# 
  1857  009C                     	;# 
  1858  009D                     	;# 
  1859  009E                     	;# 
  1860  010C                     	;# 
  1861  010D                     	;# 
  1862  010E                     	;# 
  1863  0116                     	;# 
  1864  0117                     	;# 
  1865  011D                     	;# 
  1866  018C                     	;# 
  1867  018D                     	;# 
  1868  018E                     	;# 
  1869  0191                     	;# 
  1870  0191                     	;# 
  1871  0192                     	;# 
  1872  0193                     	;# 
  1873  0193                     	;# 
  1874  0194                     	;# 
  1875  0195                     	;# 
  1876  0196                     	;# 
  1877  0197                     	;# 
  1878  0199                     	;# 
  1879  019A                     	;# 
  1880  019B                     	;# 
  1881  019B                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019C                     	;# 
  1885  019C                     	;# 
  1886  019D                     	;# 
  1887  019E                     	;# 
  1888  019F                     	;# 
  1889  020D                     	;# 
  1890  0210                     	;# 
  1891  0211                     	;# 
  1892  0211                     	;# 
  1893  0212                     	;# 
  1894  0212                     	;# 
  1895  0213                     	;# 
  1896  0213                     	;# 
  1897  0214                     	;# 
  1898  0214                     	;# 
  1899  0215                     	;# 
  1900  0215                     	;# 
  1901  0215                     	;# 
  1902  0216                     	;# 
  1903  0216                     	;# 
  1904  0217                     	;# 
  1905  0217                     	;# 
  1906  0291                     	;# 
  1907  0291                     	;# 
  1908  0292                     	;# 
  1909  0293                     	;# 
  1910  0298                     	;# 
  1911  0298                     	;# 
  1912  0299                     	;# 
  1913  029A                     	;# 
  1914  0394                     	;# 
  1915  0395                     	;# 
  1916  0396                     	;# 
  1917  0FE4                     	;# 
  1918  0FE5                     	;# 
  1919  0FE6                     	;# 
  1920  0FE7                     	;# 
  1921  0FE8                     	;# 
  1922  0FE9                     	;# 
  1923  0FEA                     	;# 
  1924  0FEB                     	;# 
  1925  0FED                     	;# 
  1926  0FEE                     	;# 
  1927  0FEF                     	;# 
  1928  0000                     	;# 
  1929  0001                     	;# 
  1930  0002                     	;# 
  1931  0003                     	;# 
  1932  0004                     	;# 
  1933  0005                     	;# 
  1934  0006                     	;# 
  1935  0007                     	;# 
  1936  0008                     	;# 
  1937  0009                     	;# 
  1938  000A                     	;# 
  1939  000B                     	;# 
  1940  000C                     	;# 
  1941  000D                     	;# 
  1942  000E                     	;# 
  1943  0010                     	;# 
  1944  0011                     	;# 
  1945  0012                     	;# 
  1946  0015                     	;# 
  1947  0016                     	;# 
  1948  0016                     	;# 
  1949  0017                     	;# 
  1950  0018                     	;# 
  1951  0019                     	;# 
  1952  001A                     	;# 
  1953  001B                     	;# 
  1954  001C                     	;# 
  1955  008C                     	;# 
  1956  008D                     	;# 
  1957  008E                     	;# 
  1958  0090                     	;# 
  1959  0091                     	;# 
  1960  0092                     	;# 
  1961  0095                     	;# 
  1962  0096                     	;# 
  1963  0097                     	;# 
  1964  0099                     	;# 
  1965  009A                     	;# 
  1966  009B                     	;# 
  1967  009B                     	;# 
  1968  009C                     	;# 
  1969  009D                     	;# 
  1970  009E                     	;# 
  1971  010C                     	;# 
  1972  010D                     	;# 
  1973  010E                     	;# 
  1974  0116                     	;# 
  1975  0117                     	;# 
  1976  011D                     	;# 
  1977  018C                     	;# 
  1978  018D                     	;# 
  1979  018E                     	;# 
  1980  0191                     	;# 
  1981  0191                     	;# 
  1982  0192                     	;# 
  1983  0193                     	;# 
  1984  0193                     	;# 
  1985  0194                     	;# 
  1986  0195                     	;# 
  1987  0196                     	;# 
  1988  0197                     	;# 
  1989  0199                     	;# 
  1990  019A                     	;# 
  1991  019B                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019C                     	;# 
  1996  019C                     	;# 
  1997  019D                     	;# 
  1998  019E                     	;# 
  1999  019F                     	;# 
  2000  020D                     	;# 
  2001  0210                     	;# 
  2002  0211                     	;# 
  2003  0211                     	;# 
  2004  0212                     	;# 
  2005  0212                     	;# 
  2006  0213                     	;# 
  2007  0213                     	;# 
  2008  0214                     	;# 
  2009  0214                     	;# 
  2010  0215                     	;# 
  2011  0215                     	;# 
  2012  0215                     	;# 
  2013  0216                     	;# 
  2014  0216                     	;# 
  2015  0217                     	;# 
  2016  0217                     	;# 
  2017  0291                     	;# 
  2018  0291                     	;# 
  2019  0292                     	;# 
  2020  0293                     	;# 
  2021  0298                     	;# 
  2022  0298                     	;# 
  2023  0299                     	;# 
  2024  029A                     	;# 
  2025  0394                     	;# 
  2026  0395                     	;# 
  2027  0396                     	;# 
  2028  0FE4                     	;# 
  2029  0FE5                     	;# 
  2030  0FE6                     	;# 
  2031  0FE7                     	;# 
  2032  0FE8                     	;# 
  2033  0FE9                     	;# 
  2034  0FEA                     	;# 
  2035  0FEB                     	;# 
  2036  0FED                     	;# 
  2037  0FEE                     	;# 
  2038  0FEF                     	;# 
  2039                           
  2040                           	psect	idataBANK4
  2041  0801                     __pidataBANK4:	
  2042                           
  2043                           ;initializer for __product
  2044  0801  3463               	retlw	99
  2045  0802  3402               	retlw	2
  2046  0803  3400               	retlw	0
  2047  0804  3400               	retlw	0
  2048  0805  3400               	retlw	0
  2049  0806  3400               	retlw	0
  2050  0807  3400               	retlw	0
  2051  0808  3400               	retlw	0
  2052  0809  3400               	retlw	0
  2053  080A  3400               	retlw	0
  2054  080B  3400               	retlw	0
  2055  080C  3400               	retlw	0
  2056  080D  34FF               	retlw	255
  2057  080E  34FF               	retlw	255
  2058  080F  34FF               	retlw	255
  2059  0810  3400               	retlw	0
  2060  0811  3400               	retlw	0
  2061  0812  3400               	retlw	0
  2062  0813  3400               	retlw	0
  2063  0814  3400               	retlw	0
  2064  0815  3400               	retlw	0
  2065  0816  3400               	retlw	0
  2066  0817  3400               	retlw	0
  2067  0818  3400               	retlw	0
  2068  0819  3400               	retlw	0
  2069  081A  3400               	retlw	0
  2070  081B  3400               	retlw	0
  2071  081C  3400               	retlw	0
  2072  081D  3400               	retlw	0
  2073  081E  3400               	retlw	0
  2074  081F  3400               	retlw	0
  2075  0820  3400               	retlw	0
  2076                           
  2077                           	psect	stringtext
  2078  1000                     __pstringtext:	
  2079  1000                     _CC2500_registers_address:	
  2080  1000  3403               	retlw	3
  2081  1001  3416               	retlw	22
  2082  1002  3417               	retlw	23
  2083  1003  341E               	retlw	30
  2084  1004  341F               	retlw	31
  2085  1005  3420               	retlw	32
  2086  1006  342A               	retlw	42
  2087  1007  342B               	retlw	43
  2088  1008  340B               	retlw	11
  2089  1009  340C               	retlw	12
  2090  100A  340D               	retlw	13
  2091  100B  340E               	retlw	14
  2092  100C  340F               	retlw	15
  2093  100D  3410               	retlw	16
  2094  100E  3411               	retlw	17
  2095  100F  3412               	retlw	18
  2096  1010  3413               	retlw	19
  2097  1011  3414               	retlw	20
  2098  1012  340A               	retlw	10
  2099  1013  3415               	retlw	21
  2100  1014  3421               	retlw	33
  2101  1015  3422               	retlw	34
  2102  1016  3418               	retlw	24
  2103  1017  3419               	retlw	25
  2104  1018  341A               	retlw	26
  2105  1019  341B               	retlw	27
  2106  101A  341C               	retlw	28
  2107  101B  341D               	retlw	29
  2108  101C  3423               	retlw	35
  2109  101D  3424               	retlw	36
  2110  101E  3425               	retlw	37
  2111  101F  3426               	retlw	38
  2112  1020  3429               	retlw	41
  2113  1021  342C               	retlw	44
  2114  1022  342D               	retlw	45
  2115  1023  342E               	retlw	46
  2116  1024  3400               	retlw	0
  2117  1025  3401               	retlw	1
  2118  1026  3402               	retlw	2
  2119  1027  3407               	retlw	7
  2120  1028  3408               	retlw	8
  2121  1029  3409               	retlw	9
  2122  102A  3406               	retlw	6
  2123  102B  3404               	retlw	4
  2124  102C  3405               	retlw	5
  2125  102D  3427               	retlw	39
  2126  102E  3428               	retlw	40
  2127  102F                     __end_of_CC2500_registers_address:	
  2128  102F                     _CC2500_rfSettings:	
  2129  102F  3407               	retlw	7
  2130  1030  3407               	retlw	7
  2131  1031  3430               	retlw	48
  2132  1032  3487               	retlw	135
  2133  1033  346B               	retlw	107
  2134  1034  34F8               	retlw	248
  2135  1035  347F               	retlw	127
  2136  1036  343F               	retlw	63
  2137  1037  3409               	retlw	9
  2138  1038  3400               	retlw	0
  2139  1039  345C               	retlw	92
  2140  103A  34A7               	retlw	167
  2141  103B  3462               	retlw	98
  2142  103C  3486               	retlw	134
  2143  103D  3483               	retlw	131
  2144  103E  3403               	retlw	3
  2145  103F  3422               	retlw	34
  2146  1040  34F8               	retlw	248
  2147  1041  3400               	retlw	0
  2148  1042  3444               	retlw	68
  2149  1043  34B6               	retlw	182
  2150  1044  3410               	retlw	16
  2151  1045  3418               	retlw	24
  2152  1046  341D               	retlw	29
  2153  1047  341C               	retlw	28
  2154  1048  34C7               	retlw	199
  2155  1049  3400               	retlw	0
  2156  104A  34B2               	retlw	178
  2157  104B  34EA               	retlw	234
  2158  104C  340A               	retlw	10
  2159  104D  3400               	retlw	0
  2160  104E  3411               	retlw	17
  2161  104F  3459               	retlw	89
  2162  1050  3488               	retlw	136
  2163  1051  3431               	retlw	49
  2164  1052  340B               	retlw	11
  2165  1053  342F               	retlw	47
  2166  1054  342E               	retlw	46
  2167  1055  3406               	retlw	6
  2168  1056  3404               	retlw	4
  2169  1057  3405               	retlw	5
  2170  1058  3400               	retlw	0
  2171  1059  3430               	retlw	48
  2172  105A  34D3               	retlw	211
  2173  105B  3491               	retlw	145
  2174  105C  3441               	retlw	65
  2175  105D  3400               	retlw	0
  2176  105E                     __end_of_CC2500_rfSettings:	
  2177  105E                     _CC2500_patable_vaule:	
  2178  105E  34FE               	retlw	254
  2179  105F  34FE               	retlw	254
  2180  1060  34FE               	retlw	254
  2181  1061  34FE               	retlw	254
  2182  1062  34FE               	retlw	254
  2183  1063  34FE               	retlw	254
  2184  1064  34FE               	retlw	254
  2185  1065  34FE               	retlw	254
  2186  1066                     __end_of_CC2500_patable_vaule:	
  2187                           
  2188                           	psect	nvCOMMON
  2189  007B                     __pnvCOMMON:	
  2190  007B                     _product:	
  2191  007B                     	ds	1
  2192  000C                     _PORTA	set	12
  2193  000D                     _PORTB	set	13
  2194  000E                     _PORTC	set	14
  2195  0018                     _T1CON	set	24
  2196  0017                     _TMR1H	set	23
  2197  0016                     _TMR1L	set	22
  2198  005F                     _GIE	set	95
  2199  005B                     _IOCIE	set	91
  2200  0058                     _IOCIF	set	88
  2201  005E                     _PEIE	set	94
  2202  0060                     _RA0	set	96
  2203  0063                     _RA3	set	99
  2204  0064                     _RA4	set	100
  2205  0066                     _RA6	set	102
  2206  0067                     _RA7	set	103
  2207  0068                     _RB0	set	104
  2208  0069                     _RB1	set	105
  2209  006A                     _RB2	set	106
  2210  006B                     _RB3	set	107
  2211  006C                     _RB4	set	108
  2212  006D                     _RB5	set	109
  2213  0070                     _RC0	set	112
  2214  0071                     _RC1	set	113
  2215  0072                     _RC2	set	114
  2216  0074                     _RC4	set	116
  2217  0075                     _RC5	set	117
  2218  0077                     _RC7	set	119
  2219  0088                     _TMR1IF	set	136
  2220  009D                     _ADCON0	set	157
  2221  009E                     _ADCON1	set	158
  2222  009C                     _ADRESH	set	156
  2223  009B                     _ADRESL	set	155
  2224  0099                     _OSCCON	set	153
  2225  008C                     _TRISA	set	140
  2226  008D                     _TRISB	set	141
  2227  008E                     _TRISC	set	142
  2228  0097                     _WDTCON	set	151
  2229  04E9                     _GO_nDONE	set	1257
  2230  0488                     _TMR1IE	set	1160
  2231  0117                     _FVRCON	set	279
  2232  010C                     _LATA	set	268
  2233  010D                     _LATB	set	269
  2234  010E                     _LATC	set	270
  2235  018C                     _ANSELA	set	396
  2236  018D                     _ANSELB	set	397
  2237  018E                     _ANSELC	set	398
  2238  0192                     _PMADRH	set	402
  2239  0191                     _PMADRL	set	401
  2240  0196                     _PMCON2	set	406
  2241  0194                     _PMDATH	set	404
  2242  0193                     _PMDATL	set	403
  2243  0CAE                     _CFGS	set	3246
  2244  0CAC                     _FREE	set	3244
  2245  0CAD                     _LWLO	set	3245
  2246  0CA8                     _RD	set	3240
  2247  0CA9                     _WR	set	3241
  2248  0CAA                     _WREN	set	3242
  2249  1069                     _WPUB1	set	4201
  2250  106A                     _WPUB2	set	4202
  2251  0396                     _IOCBF	set	918
  2252  0395                     _IOCBN	set	917
  2253  0394                     _IOCBP	set	916
  2254  1CB2                     _IOCBF2	set	7346
  2255                           
  2256                           ; #config settings
  2257  0000                     
  2258                           	psect	cinit
  2259  0015                     start_initialization:	
  2260  0015                     __initialization:	
  2261                           
  2262                           ; Clear objects allocated to BITCOMMON
  2263  0015  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2264                           
  2265                           ; Clear objects allocated to COMMON
  2266  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2267  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2268  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2269  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2270                           
  2271                           ; Clear objects allocated to BANK1
  2272  001A  30A0               	movlw	low __pbssBANK1
  2273  001B  0084               	movwf	4
  2274  001C  3000               	movlw	high __pbssBANK1
  2275  001D  0085               	movwf	5
  2276  001E  304A               	movlw	74
  2277  001F  319A  22A3  3180   	fcall	clear_ram0
  2278                           
  2279                           ; Clear objects allocated to BANK2
  2280  0022  3020               	movlw	low __pbssBANK2
  2281  0023  0084               	movwf	4
  2282  0024  3001               	movlw	high __pbssBANK2
  2283  0025  0085               	movwf	5
  2284  0026  304D               	movlw	77
  2285  0027  319A  22A3  3180   	fcall	clear_ram0
  2286                           
  2287                           ; Clear objects allocated to BANK3
  2288  002A  30A0               	movlw	low __pbssBANK3
  2289  002B  0084               	movwf	4
  2290  002C  3001               	movlw	high __pbssBANK3
  2291  002D  0085               	movwf	5
  2292  002E  3045               	movlw	69
  2293  002F  319A  22A3  3180   	fcall	clear_ram0
  2294                           
  2295                           ; Clear objects allocated to BANK4
  2296  0032  3020               	movlw	low __pbssBANK4
  2297  0033  0084               	movwf	4
  2298  0034  3002               	movlw	high __pbssBANK4
  2299  0035  0085               	movwf	5
  2300  0036  3025               	movlw	37
  2301  0037  319A  22A3  3180   	fcall	clear_ram0
  2302                           
  2303                           ; Initialize objects allocated to BANK4
  2304  003A  3001               	movlw	low __pidataBANK4
  2305  003B  0084               	movwf	4
  2306  003C  3088               	movlw	(high __pidataBANK4)| (0+128)
  2307  003D  0085               	movwf	5
  2308  003E  3045               	movlw	low __pdataBANK4
  2309  003F  0086               	movwf	6
  2310  0040  3002               	movlw	high __pdataBANK4
  2311  0041  0087               	movwf	7
  2312  0042  3020               	movlw	32
  2313  0043  319A  229D         	fcall	init_ram
  2314  0045                     end_of_initialization:	
  2315                           ;End of C runtime variable initialization code
  2316                           
  2317  0045                     __end_of__initialization:	
  2318  0045  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2319  0046  0020               	movlb	0
  2320  0047  3195  2D79         	ljmp	_main	;jump to C main() function
  2321                           
  2322                           	psect	bitbssCOMMON
  2323  03D0                     __pbitbssCOMMON:	
  2324  03D0                     _Receive_OK:	
  2325  03D0                     	ds	1
  2326  03D1                     _Transceive_OK:	
  2327  03D1                     	ds	1
  2328                           
  2329                           	psect	bssCOMMON
  2330  0076                     __pbssCOMMON:	
  2331  0076                     _DelayOff:	
  2332  0076                     	ds	1
  2333  0077                     _DimmerLights:	
  2334  0077                     	ds	1
  2335  0078                     _DimmerLightsIntr:	
  2336  0078                     	ds	1
  2337  0079                     _Sw:	
  2338  0079                     	ds	1
  2339                           
  2340                           	psect	bssBANK1
  2341  00A0                     __pbssBANK1:	
  2342  00A0                     _myMain:	
  2343  00A0                     	ds	16
  2344  00B0                     _Buz1:	
  2345  00B0                     	ds	12
  2346  00BC                     _RF1:	
  2347  00BC                     	ds	12
  2348  00C8                     _Dimmer:	
  2349  00C8                     	ds	3
  2350  00CB                     _CRC:	
  2351  00CB                     	ds	1
  2352  00CC                     _DimmerLights11:	
  2353  00CC                     	ds	1
  2354  00CD                     _DimmerLights22:	
  2355  00CD                     	ds	1
  2356  00CE                     _DimmerLightsIntrIOC:	
  2357  00CE                     	ds	1
  2358  00CF                     _LED:	
  2359  00CF                     	ds	1
  2360  00D0                     _RSSI:	
  2361  00D0                     	ds	1
  2362  00D1                     _Rx_Length:	
  2363  00D1                     	ds	1
  2364  00D2                     _SPI0Buffer:	
  2365  00D2                     	ds	1
  2366  00D3                     _SwDetect:	
  2367  00D3                     	ds	1
  2368  00D4                     _Tx_Length:	
  2369  00D4                     	ds	1
  2370  00D5                     _r_address:	
  2371  00D5                     	ds	1
  2372  00D6                     _r_data:	
  2373  00D6                     	ds	1
  2374  00D7                     _s_data:	
  2375  00D7                     	ds	1
  2376  00D8                     _Temp:	
  2377  00D8                     	ds	18
  2378                           
  2379                           	psect	bssBANK2
  2380  0120                     __pbssBANK2:	
  2381  0120                     _Timer1:	
  2382  0120                     	ds	3
  2383  0123                     _RF_Count:	
  2384  0123                     	ds	2
  2385  0125                     _WDT:	
  2386  0125                     	ds	2
  2387  0127                     _Load:	
  2388  0127                     	ds	45
  2389  0154                     _Sw1:	
  2390  0154                     	ds	9
  2391  015D                     _VarErrLED:	
  2392  015D                     	ds	4
  2393  0161                     _VarLED1:	
  2394  0161                     	ds	4
  2395  0165                     _VarLED2:	
  2396  0165                     	ds	4
  2397  0169                     _DlySw1:	
  2398  0169                     	ds	2
  2399  016B                     _DlySw2:	
  2400  016B                     	ds	2
  2401                           
  2402                           	psect	bssBANK3
  2403  01A0                     __pbssBANK3:	
  2404  01A0                     _RF_Data:	
  2405  01A0                     	ds	30
  2406  01BE                     _DimmerLights1:	
  2407  01BE                     	ds	15
  2408  01CD                     _DimmerLights2:	
  2409  01CD                     	ds	15
  2410  01DC                     _Sw2:	
  2411  01DC                     	ds	9
  2412                           
  2413                           	psect	bssBANK4
  2414  0220                     __pbssBANK4:	
  2415  0220                     _Memory:	
  2416  0220                     	ds	37
  2417                           
  2418                           	psect	dataBANK4
  2419  0245                     __pdataBANK4:	
  2420  0245                     __product:	
  2421  0245                     	ds	32
  2422                           
  2423                           	psect	clrtext
  2424  1AA3                     clear_ram0:	
  2425                           ;	Called with FSR0 containing the base address, and
  2426                           ;	WREG with the size to clear
  2427                           
  2428  1AA3  0064               	clrwdt	;clear the watchdog before getting into this loop
  2429  1AA4                     clrloop0:	
  2430  1AA4  0180               	clrf	0	;clear RAM location pointed to by FSR
  2431  1AA5  3101               	addfsr 0,1
  2432  1AA6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2433  1AA7  2AA4               	goto	clrloop0	;have we reached the end yet?
  2434  1AA8  3400               	retlw	0	;all done for this memory range, return
  2435                           
  2436                           	psect	inittext
  2437  1A9D                     init_ram:	
  2438  1A9D  00FE               	movwf	126
  2439  1A9E                     initloop:	
  2440  1A9E  0012               	moviw fsr0++
  2441  1A9F  001E               	movwi fsr1++
  2442  1AA0  0BFE               	decfsz	126,f
  2443  1AA1  2A9E               	goto	initloop
  2444  1AA2  3400               	retlw	0
  2445                           
  2446                           	psect	cstackBANK3
  2447  01E5                     __pcstackBANK3:	
  2448  01E5                     ?_main:	
  2449  01E5                     main@argc:	
  2450                           ; 2 bytes @ 0x0
  2451                           
  2452                           
  2453                           ; 2 bytes @ 0x0
  2454  01E5                     	ds	2
  2455  01E7                     main@argv:	
  2456                           
  2457                           ; 2 bytes @ 0x2
  2458  01E7                     	ds	2
  2459                           
  2460                           	psect	cstackBANK1
  2461  00EA                     __pcstackBANK1:	
  2462  00EA                     setMain_Exception@buz:	
  2463                           
  2464                           ; 1 bytes @ 0x0
  2465  00EA                     	ds	1
  2466  00EB                     _setMain_Exception$3910:	
  2467                           
  2468                           ; 2 bytes @ 0x1
  2469  00EB                     	ds	2
  2470  00ED                     setMain_Exception@status:	
  2471                           
  2472                           ; 1 bytes @ 0x3
  2473  00ED                     	ds	1
  2474  00EE                     setMain_Exception@command:	
  2475                           
  2476                           ; 1 bytes @ 0x4
  2477  00EE                     	ds	1
  2478                           
  2479                           	psect	cstackCOMMON
  2480  0070                     __pcstackCOMMON:	
  2481  0070                     ?_Timeout_Counter:	
  2482  0070                     ?_set_TimeoutCleared:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_CC2500_WriteByte:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_WriteCommand:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_ReadStatus:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_CC2500_ReadByte:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_CC2500_PowerRST:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_CC2500_InitSetREG:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_CC2500_InitPATable:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_CC2500_ClearTXFIFO:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_CC2500_ClearRXFIFO:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_CC2500_FrequencyCabr:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_CC2500_SIDLEMode:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_DlyOff_Initialization:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_DlyOff_Main:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_setDimmerLights_SwOn:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_setDimmerLights_SwOff:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_setDimmerLights_Initialization:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_Dimmer_Initialization:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_setDimmerLights_Main:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_setTxData:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_setLED_Initialization:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_setLED_Main:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_Fosc_Set:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_IO_Set:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_TMR1_Set:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_ADC_Set:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_IOC_Set:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_WDT_Set:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_IOC_ISR:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_TMR1_ISR:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_Flash_Memory_Write:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_Flash_Memory_Modify:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_WDT_Clearing:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_myMain_Initialization:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_Temp_Initialization:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_Load_Initialization:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_Switch_Initialization:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_RF_Initialization:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_getLoad_AD:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_getTemp_AD:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_my_MainTimer:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_Temp_Main:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_Load_Main:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_Switch_Main:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_RF_Main:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setLoad_AH_AL_Restore:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setTemp_Initialization:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setTemp_Main:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setRF_Initialization:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setRF_Main:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_getRxData:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setLog_Code:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_setControl_Lights_Table:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setRFSW_Control:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setRFSW_AdjControl:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setRF_DimmerValue:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setSw_Initialization:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setSw_Main:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_Buzzer_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_Buzzer_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_CC2500_TxData:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_CC2500_RxData:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_CC2500_PowerOnInitial:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_DelayOffPointSelect:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_DelayOff_Initialization:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_DelayOff_Main:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DimmerIntrIOCPointSelect:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ??_DimmerIntrIOCPointSelect:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_DimmerIntrPointSelect:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ??_DimmerIntrPointSelect:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_setDimmerLights_IntrControl:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_DimmerLightsPointSelect:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_DimmerLights_Initialization:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_DimmerLights_Main:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_setDimmerLights_AdjControl:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_setDimmerLights_ErrorClose:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_setDimmerLights_AdjRF:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_LedPointSelect:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_LED_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_LED_Main:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Mcu_Initialization:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_ISR:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setDimmerReClock:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Flash_Memory_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Flash_Memory_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Flash_Memory_Unlock:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Flash_Memory_Erasing:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setMemory_Modify:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setMemory_LoopSave:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_WDT_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setMain_Exception:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setRF_Learn:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_TouchPower:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_SwPointSelect:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_getDimmerLights_Status:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_DelayTimejudge:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0070                     ?_getMain_All_Error_Status:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0070                     ?_getLoad_OK:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0070                     ?_getPercentValue:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0070                     ?_Flash_Memory_Read:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785  0070                     ?_getMain_LightsStatus:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788  0070                     ?_getRF_KeyStatus:	
  2789                           ; 1 bytes @ 0x0
  2790                           
  2791  0070                     ?_getSw_KeyStatus:	
  2792                           ; 1 bytes @ 0x0
  2793                           
  2794  0070                     ?_getAll_DimmerLights_AdjGO:	
  2795                           ; 1 bytes @ 0x0
  2796                           
  2797  0070                     ?_getDimmer_LoadOK:	
  2798                           ; 1 bytes @ 0x0
  2799                           
  2800  0070                     ?_setPercentValue:	
  2801                           ; 1 bytes @ 0x0
  2802                           
  2803  0070                     ?_getMain_Lights_Count:	
  2804                           ; 1 bytes @ 0x0
  2805                           
  2806  0070                     ?_getMain_LoadOK:	
  2807                           ; 1 bytes @ 0x0
  2808                           
  2809                           
  2810                           ; 1 bytes @ 0x0
  2811  0070                     	ds	1
  2812  0071                     DimmerIntrIOCPointSelect@lights:	
  2813  0071                     DimmerIntrPointSelect@lights:	
  2814                           ; 1 bytes @ 0x1
  2815                           
  2816                           
  2817                           ; 1 bytes @ 0x1
  2818  0071                     	ds	1
  2819  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2820  0072                     ??_setDimmerLights_IntrControl:	
  2821                           ; 0 bytes @ 0x2
  2822                           
  2823  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2824                           ; 0 bytes @ 0x2
  2825                           
  2826                           
  2827                           ; 1 bytes @ 0x2
  2828  0072                     	ds	1
  2829  0073                     ??_IOC_ISR:	
  2830  0073                     ??_setDimmerReClock:	
  2831                           ; 0 bytes @ 0x3
  2832                           
  2833                           
  2834                           ; 0 bytes @ 0x3
  2835  0073                     	ds	1
  2836  0074                     setDimmerLights_IntrControl@lights:	
  2837                           
  2838                           ; 1 bytes @ 0x4
  2839  0074                     	ds	1
  2840  0075                     ??_TMR1_ISR:	
  2841  0075                     ??_ISR:	
  2842                           ; 0 bytes @ 0x5
  2843                           
  2844                           
  2845                           ; 0 bytes @ 0x5
  2846  0075                     	ds	1
  2847                           
  2848                           	psect	cstackBANK0
  2849  0020                     __pcstackBANK0:	
  2850  0020                     ??_Timeout_Counter:	
  2851  0020                     ??_set_TimeoutCleared:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_CC2500_WriteByte:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_CC2500_ReadByte:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ?_DelayTime_1us:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_Dimmer_Initialization:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_getMain_All_Error_Status:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_getLoad_OK:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_setTxData:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_Fosc_Set:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_IO_Set:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_TMR1_Set:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_ADC_Set:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_IOC_Set:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_WDT_Set:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_Flash_Memory_Read:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ?_setMemory_Data:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_Flash_Memory_Write:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_WDT_Clearing:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_myMain_Initialization:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_Temp_Initialization:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_setLoad_AH_AL_Restore:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ??_setTemp_Initialization:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ??_setRF_Initialization:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0020                     ??_getRF_KeyStatus:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0020                     ??_Buzzer_Initialization:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0020                     ??_Buzzer_Main:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0020                     ??_DelayOffPointSelect:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0020                     ??_DimmerLightsPointSelect:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0020                     ??_getSw_KeyStatus:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0020                     ??_getAll_DimmerLights_AdjGO:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0020                     ??_getDimmer_LoadOK:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0020                     ??_LedPointSelect:	
  2945                           ; 0 bytes @ 0x0
  2946                           
  2947  0020                     ??_Flash_Memory_Unlock:	
  2948                           ; 0 bytes @ 0x0
  2949                           
  2950  0020                     ??_Flash_Memory_Erasing:	
  2951                           ; 0 bytes @ 0x0
  2952                           
  2953  0020                     ??_setMemory_Modify:	
  2954                           ; 0 bytes @ 0x0
  2955                           
  2956  0020                     ??_setMemory_LoopSave:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0020                     ??_WDT_Main:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0020                     ??_getMain_Lights_Count:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0020                     ??_setRF_Learn:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0020                     ??_TouchPower:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0020                     ??_SwPointSelect:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0020                     ?___bmul:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0020                     ?_getBuz_GO:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980  0020                     ?_getAD:	
  2981                           ; 2 bytes @ 0x0
  2982                           
  2983  0020                     ?___awdiv:	
  2984                           ; 2 bytes @ 0x0
  2985                           
  2986  0020                     ?___ftpack:	
  2987                           ; 2 bytes @ 0x0
  2988                           
  2989  0020                     getAD@adcon1:	
  2990                           ; 3 bytes @ 0x0
  2991                           
  2992  0020                     setMemory_Data@data:	
  2993                           ; 1 bytes @ 0x0
  2994                           
  2995  0020                     getMain_Lights_Count@count:	
  2996                           ; 1 bytes @ 0x0
  2997                           
  2998  0020                     getLoad_OK@ok:	
  2999                           ; 1 bytes @ 0x0
  3000                           
  3001  0020                     ___bmul@multiplicand:	
  3002                           ; 1 bytes @ 0x0
  3003                           
  3004  0020                     DelayTime_1us@count:	
  3005                           ; 1 bytes @ 0x0
  3006                           
  3007  0020                     ___awdiv@divisor:	
  3008                           ; 2 bytes @ 0x0
  3009                           
  3010  0020                     ___ftpack@arg:	
  3011                           ; 2 bytes @ 0x0
  3012                           
  3013                           
  3014                           ; 3 bytes @ 0x0
  3015  0020                     	ds	1
  3016  0021                     ??_setMemory_Data:	
  3017  0021                     ??_RF_Initialization:	
  3018                           ; 0 bytes @ 0x1
  3019                           
  3020  0021                     ??_Mcu_Initialization:	
  3021                           ; 0 bytes @ 0x1
  3022                           
  3023  0021                     ??___bmul:	
  3024                           ; 0 bytes @ 0x1
  3025                           
  3026  0021                     CC2500_WriteByte@loop_a:	
  3027                           ; 0 bytes @ 0x1
  3028                           
  3029  0021                     CC2500_ReadByte@loop_b:	
  3030                           ; 1 bytes @ 0x1
  3031                           
  3032  0021                     DelayOffPointSelect@sw:	
  3033                           ; 1 bytes @ 0x1
  3034                           
  3035  0021                     DimmerLightsPointSelect@lights:	
  3036                           ; 1 bytes @ 0x1
  3037                           
  3038  0021                     _getSw_KeyStatus$2558:	
  3039                           ; 1 bytes @ 0x1
  3040                           
  3041  0021                     _getAll_DimmerLights_AdjGO$2562:	
  3042                           ; 1 bytes @ 0x1
  3043                           
  3044  0021                     getDimmer_LoadOK@status:	
  3045                           ; 1 bytes @ 0x1
  3046                           
  3047  0021                     LedPointSelect@led:	
  3048                           ; 1 bytes @ 0x1
  3049                           
  3050  0021                     Flash_Memory_Read@i:	
  3051                           ; 1 bytes @ 0x1
  3052                           
  3053  0021                     Flash_Memory_Write@i:	
  3054                           ; 1 bytes @ 0x1
  3055                           
  3056  0021                     setMemory_Modify@command:	
  3057                           ; 1 bytes @ 0x1
  3058                           
  3059  0021                     setMemory_LoopSave@command:	
  3060                           ; 1 bytes @ 0x1
  3061                           
  3062  0021                     getMain_Lights_Count@status3:	
  3063                           ; 1 bytes @ 0x1
  3064                           
  3065  0021                     setLoad_AH_AL_Restore@i:	
  3066                           ; 1 bytes @ 0x1
  3067                           
  3068  0021                     setRF_Learn@command:	
  3069                           ; 1 bytes @ 0x1
  3070                           
  3071  0021                     getRF_KeyStatus@key:	
  3072                           ; 1 bytes @ 0x1
  3073                           
  3074  0021                     SwPointSelect@sw:	
  3075                           ; 1 bytes @ 0x1
  3076                           
  3077  0021                     _getMain_All_Error_Status$3927:	
  3078                           ; 1 bytes @ 0x1
  3079                           
  3080                           
  3081                           ; 2 bytes @ 0x1
  3082  0021                     	ds	1
  3083  0022                     ??_CC2500_WriteCommand:	
  3084  0022                     ??_CC2500_ReadStatus:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0022                     ??_DelayTime_1us:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0022                     ?_CC2500_WriteREG:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0022                     ??_DlyOff_Initialization:	
  3094                           ; 0 bytes @ 0x2
  3095                           
  3096  0022                     ??_getDimmerLights_Status:	
  3097                           ; 0 bytes @ 0x2
  3098                           
  3099  0022                     ??_setDimmerLights_Initialization:	
  3100                           ; 0 bytes @ 0x2
  3101                           
  3102  0022                     ?_setDimmerLights_Trigger:	
  3103                           ; 0 bytes @ 0x2
  3104                           
  3105  0022                     ?_setDimmerLights_TriggerAdj:	
  3106                           ; 0 bytes @ 0x2
  3107                           
  3108  0022                     ?_setLED:	
  3109                           ; 0 bytes @ 0x2
  3110                           
  3111  0022                     ??_setLED_Main:	
  3112                           ; 0 bytes @ 0x2
  3113                           
  3114  0022                     ??_Load_Initialization:	
  3115                           ; 0 bytes @ 0x2
  3116                           
  3117  0022                     ??_getBuz_GO:	
  3118                           ; 0 bytes @ 0x2
  3119                           
  3120  0022                     ??_getMain_LoadOK:	
  3121                           ; 0 bytes @ 0x2
  3122                           
  3123  0022                     CC2500_WriteREG@value:	
  3124                           ; 0 bytes @ 0x2
  3125                           
  3126  0022                     DlyOff_Initialization@sw:	
  3127                           ; 1 bytes @ 0x2
  3128                           
  3129  0022                     getDimmerLights_Status@lights:	
  3130                           ; 1 bytes @ 0x2
  3131                           
  3132  0022                     _getSw_KeyStatus$2559:	
  3133                           ; 1 bytes @ 0x2
  3134                           
  3135  0022                     getAll_DimmerLights_AdjGO@adjgo:	
  3136                           ; 1 bytes @ 0x2
  3137                           
  3138  0022                     setDimmerLights_Trigger@command:	
  3139                           ; 1 bytes @ 0x2
  3140                           
  3141  0022                     setDimmerLights_TriggerAdj@command:	
  3142                           ; 1 bytes @ 0x2
  3143                           
  3144  0022                     setLED@command:	
  3145                           ; 1 bytes @ 0x2
  3146                           
  3147  0022                     Flash_Memory_Read@address:	
  3148                           ; 1 bytes @ 0x2
  3149                           
  3150  0022                     setMemory_Data@address:	
  3151                           ; 1 bytes @ 0x2
  3152                           
  3153  0022                     getMain_Lights_Count@status1:	
  3154                           ; 1 bytes @ 0x2
  3155                           
  3156  0022                     _getRF_KeyStatus$5691:	
  3157                           ; 1 bytes @ 0x2
  3158                           
  3159  0022                     ___bmul@product:	
  3160                           ; 1 bytes @ 0x2
  3161                           
  3162  0022                     DelayTime_1us@i:	
  3163                           ; 1 bytes @ 0x2
  3164                           
  3165  0022                     ___awdiv@dividend:	
  3166                           ; 2 bytes @ 0x2
  3167                           
  3168                           
  3169                           ; 2 bytes @ 0x2
  3170  0022                     	ds	1
  3171  0023                     ??_CC2500_WriteREG:	
  3172  0023                     ??_setDimmerLights_Trigger:	
  3173                           ; 0 bytes @ 0x3
  3174                           
  3175  0023                     ??_setDimmerLights_TriggerAdj:	
  3176                           ; 0 bytes @ 0x3
  3177                           
  3178  0023                     ??_setLED:	
  3179                           ; 0 bytes @ 0x3
  3180                           
  3181  0023                     ??_DelayOff_Initialization:	
  3182                           ; 0 bytes @ 0x3
  3183                           
  3184  0023                     ??_getAD:	
  3185                           ; 0 bytes @ 0x3
  3186                           
  3187  0023                     CC2500_WriteCommand@command:	
  3188                           ; 0 bytes @ 0x3
  3189                           
  3190  0023                     CC2500_ReadStatus@status_addr:	
  3191                           ; 1 bytes @ 0x3
  3192                           
  3193  0023                     setDimmerLights_Initialization@lights:	
  3194                           ; 1 bytes @ 0x3
  3195                           
  3196  0023                     getDimmerLights_Status@status:	
  3197                           ; 1 bytes @ 0x3
  3198                           
  3199  0023                     getSw_KeyStatus@status:	
  3200                           ; 1 bytes @ 0x3
  3201                           
  3202  0023                     setLED@led:	
  3203                           ; 1 bytes @ 0x3
  3204                           
  3205  0023                     getAD@adcon0:	
  3206                           ; 1 bytes @ 0x3
  3207                           
  3208  0023                     Flash_Memory_Read@ret:	
  3209                           ; 1 bytes @ 0x3
  3210                           
  3211  0023                     getMain_Lights_Count@status2:	
  3212                           ; 1 bytes @ 0x3
  3213                           
  3214  0023                     getMain_LoadOK@ok:	
  3215                           ; 1 bytes @ 0x3
  3216                           
  3217  0023                     ___bmul@multiplier:	
  3218                           ; 1 bytes @ 0x3
  3219                           
  3220  0023                     ___ftpack@exp:	
  3221                           ; 1 bytes @ 0x3
  3222                           
  3223  0023                     _getMain_All_Error_Status$3936:	
  3224                           ; 1 bytes @ 0x3
  3225                           
  3226                           
  3227                           ; 2 bytes @ 0x3
  3228  0023                     	ds	1
  3229  0024                     ??_CC2500_ClearTXFIFO:	
  3230  0024                     ??_CC2500_ClearRXFIFO:	
  3231                           ; 0 bytes @ 0x4
  3232                           
  3233  0024                     ??_CC2500_SIDLEMode:	
  3234                           ; 0 bytes @ 0x4
  3235                           
  3236  0024                     ??_DelayTimejudge:	
  3237                           ; 0 bytes @ 0x4
  3238                           
  3239  0024                     ??_setLED_Initialization:	
  3240                           ; 0 bytes @ 0x4
  3241                           
  3242  0024                     ??_getMain_LightsStatus:	
  3243                           ; 0 bytes @ 0x4
  3244                           
  3245  0024                     ??_Flash_Memory_Modify:	
  3246                           ; 0 bytes @ 0x4
  3247                           
  3248  0024                     ??_getLoad_AD:	
  3249                           ; 0 bytes @ 0x4
  3250                           
  3251  0024                     ??_getTemp_AD:	
  3252                           ; 0 bytes @ 0x4
  3253                           
  3254  0024                     ??_setSw_Initialization:	
  3255                           ; 0 bytes @ 0x4
  3256                           
  3257  0024                     ??_CC2500_TxData:	
  3258                           ; 0 bytes @ 0x4
  3259                           
  3260  0024                     ??_CC2500_RxData:	
  3261                           ; 0 bytes @ 0x4
  3262                           
  3263  0024                     ??_DimmerLights_Initialization:	
  3264                           ; 0 bytes @ 0x4
  3265                           
  3266  0024                     ??___awdiv:	
  3267                           ; 0 bytes @ 0x4
  3268                           
  3269  0024                     CC2500_WriteREG@w_addr:	
  3270                           ; 0 bytes @ 0x4
  3271                           
  3272  0024                     getSw_KeyStatus@sw:	
  3273                           ; 1 bytes @ 0x4
  3274                           
  3275  0024                     setDimmerLights_Trigger@lights:	
  3276                           ; 1 bytes @ 0x4
  3277                           
  3278  0024                     setDimmerLights_TriggerAdj@lights:	
  3279                           ; 1 bytes @ 0x4
  3280                           
  3281  0024                     setLED_Initialization@led:	
  3282                           ; 1 bytes @ 0x4
  3283                           
  3284  0024                     setLED_Main@led:	
  3285                           ; 1 bytes @ 0x4
  3286                           
  3287  0024                     setSw_Initialization@sw:	
  3288                           ; 1 bytes @ 0x4
  3289                           
  3290  0024                     ___ftpack@sign:	
  3291                           ; 1 bytes @ 0x4
  3292                           
  3293  0024                     getBuz_GO@i:	
  3294                           ; 1 bytes @ 0x4
  3295                           
  3296  0024                     DelayTime_1us@j:	
  3297                           ; 2 bytes @ 0x4
  3298                           
  3299                           
  3300                           ; 2 bytes @ 0x4
  3301  0024                     	ds	1
  3302  0025                     ??_CC2500_InitSetREG:	
  3303  0025                     ??_CC2500_InitPATable:	
  3304                           ; 0 bytes @ 0x5
  3305                           
  3306  0025                     ??_Switch_Initialization:	
  3307                           ; 0 bytes @ 0x5
  3308                           
  3309  0025                     ??___ftpack:	
  3310                           ; 0 bytes @ 0x5
  3311                           
  3312  0025                     ??_setDimmerLights_AdjControl:	
  3313                           ; 0 bytes @ 0x5
  3314                           
  3315  0025                     ??_LED_Initialization:	
  3316                           ; 0 bytes @ 0x5
  3317                           
  3318  0025                     ??_LED_Main:	
  3319                           ; 0 bytes @ 0x5
  3320                           
  3321  0025                     CC2500_TxData@loop_e:	
  3322                           ; 0 bytes @ 0x5
  3323                           
  3324  0025                     CC2500_RxData@loop_f:	
  3325                           ; 1 bytes @ 0x5
  3326                           
  3327  0025                     Flash_Memory_Modify@i:	
  3328                           ; 1 bytes @ 0x5
  3329                           
  3330  0025                     getMain_LightsStatus@count:	
  3331                           ; 1 bytes @ 0x5
  3332                           
  3333  0025                     getMain_All_Error_Status@command:	
  3334                           ; 1 bytes @ 0x5
  3335                           
  3336  0025                     getTemp_AD@channel:	
  3337                           ; 1 bytes @ 0x5
  3338                           
  3339  0025                     ___awdiv@counter:	
  3340                           ; 1 bytes @ 0x5
  3341                           
  3342                           
  3343                           ; 1 bytes @ 0x5
  3344  0025                     	ds	1
  3345  0026                     ??_CC2500_PowerRST:	
  3346  0026                     ??_CC2500_FrequencyCabr:	
  3347                           ; 0 bytes @ 0x6
  3348                           
  3349  0026                     CC2500_InitSetREG@temp1:	
  3350                           ; 0 bytes @ 0x6
  3351                           
  3352  0026                     CC2500_InitPATable@temp:	
  3353                           ; 1 bytes @ 0x6
  3354                           
  3355  0026                     DelayTimejudge@i:	
  3356                           ; 1 bytes @ 0x6
  3357                           
  3358  0026                     setDimmerLights_AdjControl@idle:	
  3359                           ; 1 bytes @ 0x6
  3360                           
  3361  0026                     getMain_All_Error_Status@status:	
  3362                           ; 1 bytes @ 0x6
  3363                           
  3364  0026                     getLoad_AD@channel:	
  3365                           ; 1 bytes @ 0x6
  3366                           
  3367  0026                     ___awdiv@sign:	
  3368                           ; 1 bytes @ 0x6
  3369                           
  3370  0026                     getMain_LightsStatus@i:	
  3371                           ; 1 bytes @ 0x6
  3372                           
  3373                           
  3374                           ; 2 bytes @ 0x6
  3375  0026                     	ds	1
  3376  0027                     ?_setDimmerLights:	
  3377  0027                     ??_setTemp_Main:	
  3378                           ; 0 bytes @ 0x7
  3379                           
  3380  0027                     CC2500_InitSetREG@temp2:	
  3381                           ; 0 bytes @ 0x7
  3382                           
  3383  0027                     CC2500_InitPATable@loop_d:	
  3384                           ; 1 bytes @ 0x7
  3385                           
  3386  0027                     DelayTimejudge@j:	
  3387                           ; 1 bytes @ 0x7
  3388                           
  3389  0027                     setDimmerLights_AdjControl@sw:	
  3390                           ; 1 bytes @ 0x7
  3391                           
  3392  0027                     setDimmerLights@status:	
  3393                           ; 1 bytes @ 0x7
  3394                           
  3395  0027                     getLoad_AD@k:	
  3396                           ; 1 bytes @ 0x7
  3397                           
  3398  0027                     ___awdiv@quotient:	
  3399                           ; 1 bytes @ 0x7
  3400                           
  3401                           
  3402                           ; 2 bytes @ 0x7
  3403  0027                     	ds	1
  3404  0028                     ??_setDimmerLights:	
  3405  0028                     ?___awtoft:	
  3406                           ; 0 bytes @ 0x8
  3407                           
  3408  0028                     CC2500_InitSetREG@loop_c:	
  3409                           ; 3 bytes @ 0x8
  3410                           
  3411  0028                     DelayTimejudge@k:	
  3412                           ; 1 bytes @ 0x8
  3413                           
  3414  0028                     getMain_LightsStatus@status:	
  3415                           ; 1 bytes @ 0x8
  3416                           
  3417  0028                     getLoad_AD@j:	
  3418                           ; 1 bytes @ 0x8
  3419                           
  3420  0028                     ___awtoft@c:	
  3421                           ; 1 bytes @ 0x8
  3422                           
  3423                           
  3424                           ; 2 bytes @ 0x8
  3425  0028                     	ds	1
  3426  0029                     ??_Temp_Main:	
  3427  0029                     ??_Load_Main:	
  3428                           ; 0 bytes @ 0x9
  3429                           
  3430  0029                     ?_setBuz:	
  3431                           ; 0 bytes @ 0x9
  3432                           
  3433  0029                     ??_CC2500_PowerOnInitial:	
  3434                           ; 0 bytes @ 0x9
  3435                           
  3436  0029                     ??_Flash_Memory_Main:	
  3437                           ; 0 bytes @ 0x9
  3438                           
  3439  0029                     DelayTimejudge@value:	
  3440                           ; 0 bytes @ 0x9
  3441                           
  3442  0029                     getLoad_AD@i:	
  3443                           ; 1 bytes @ 0x9
  3444                           
  3445  0029                     setBuz@time:	
  3446                           ; 1 bytes @ 0x9
  3447                           
  3448                           
  3449                           ; 2 bytes @ 0x9
  3450  0029                     	ds	1
  3451  002A                     ?_setDelayOff_GO:	
  3452  002A                     setDelayOff_GO@command:	
  3453                           ; 0 bytes @ 0xA
  3454                           
  3455  002A                     _setDimmerLights$2594:	
  3456                           ; 1 bytes @ 0xA
  3457                           
  3458                           
  3459                           ; 2 bytes @ 0xA
  3460  002A                     	ds	1
  3461  002B                     ??_setBuz:	
  3462  002B                     ??___awtoft:	
  3463                           ; 0 bytes @ 0xB
  3464                           
  3465  002B                     setDelayOff_GO@value:	
  3466                           ; 0 bytes @ 0xB
  3467                           
  3468  002B                     Load_Main@j:	
  3469                           ; 1 bytes @ 0xB
  3470                           
  3471                           
  3472                           ; 1 bytes @ 0xB
  3473  002B                     	ds	1
  3474  002C                     ??_setDelayOff_GO:	
  3475  002C                     setBuz@count:	
  3476                           ; 0 bytes @ 0xC
  3477                           
  3478  002C                     setDimmerLights@lights:	
  3479                           ; 1 bytes @ 0xC
  3480                           
  3481  002C                     Load_Main@error:	
  3482                           ; 1 bytes @ 0xC
  3483                           
  3484                           
  3485                           ; 1 bytes @ 0xC
  3486  002C                     	ds	1
  3487  002D                     ??_my_MainTimer:	
  3488  002D                     ??_setLog_Code:	
  3489                           ; 0 bytes @ 0xD
  3490                           
  3491  002D                     _Load_Main$4290:	
  3492                           ; 0 bytes @ 0xD
  3493                           
  3494  002D                     ___awtoft@sign:	
  3495                           ; 1 bytes @ 0xD
  3496                           
  3497                           
  3498                           ; 1 bytes @ 0xD
  3499  002D                     	ds	1
  3500  002E                     ?___ftdiv:	
  3501  002E                     ?___ftmul:	
  3502                           ; 3 bytes @ 0xE
  3503                           
  3504  002E                     setDelayOff_GO@sw:	
  3505                           ; 3 bytes @ 0xE
  3506                           
  3507  002E                     Load_Main@i:	
  3508                           ; 1 bytes @ 0xE
  3509                           
  3510  002E                     ___ftdiv@f2:	
  3511                           ; 1 bytes @ 0xE
  3512                           
  3513  002E                     ___ftmul@f1:	
  3514                           ; 3 bytes @ 0xE
  3515                           
  3516                           
  3517                           ; 3 bytes @ 0xE
  3518  002E                     	ds	3
  3519  0031                     ___ftdiv@f1:	
  3520  0031                     ___ftmul@f2:	
  3521                           ; 3 bytes @ 0x11
  3522                           
  3523                           
  3524                           ; 3 bytes @ 0x11
  3525  0031                     	ds	3
  3526  0034                     ??___ftdiv:	
  3527  0034                     ??___ftmul:	
  3528                           ; 0 bytes @ 0x14
  3529                           
  3530                           
  3531                           ; 0 bytes @ 0x14
  3532  0034                     	ds	4
  3533  0038                     ___ftdiv@cntr:	
  3534  0038                     ___ftmul@exp:	
  3535                           ; 1 bytes @ 0x18
  3536                           
  3537                           
  3538                           ; 1 bytes @ 0x18
  3539  0038                     	ds	1
  3540  0039                     ___ftdiv@f3:	
  3541  0039                     ___ftmul@f3_as_product:	
  3542                           ; 3 bytes @ 0x19
  3543                           
  3544                           
  3545                           ; 3 bytes @ 0x19
  3546  0039                     	ds	3
  3547  003C                     ___ftdiv@exp:	
  3548  003C                     ___ftmul@cntr:	
  3549                           ; 1 bytes @ 0x1C
  3550                           
  3551                           
  3552                           ; 1 bytes @ 0x1C
  3553  003C                     	ds	1
  3554  003D                     ___ftdiv@sign:	
  3555  003D                     ___ftmul@sign:	
  3556                           ; 1 bytes @ 0x1D
  3557                           
  3558                           
  3559                           ; 1 bytes @ 0x1D
  3560  003D                     	ds	1
  3561  003E                     ?___ftadd:	
  3562  003E                     ___ftadd@f1:	
  3563                           ; 3 bytes @ 0x1E
  3564                           
  3565                           
  3566                           ; 3 bytes @ 0x1E
  3567  003E                     	ds	3
  3568  0041                     ___ftadd@f2:	
  3569                           
  3570                           ; 3 bytes @ 0x21
  3571  0041                     	ds	3
  3572  0044                     ??___ftadd:	
  3573                           
  3574                           ; 0 bytes @ 0x24
  3575  0044                     	ds	4
  3576  0048                     ___ftadd@sign:	
  3577                           
  3578                           ; 1 bytes @ 0x28
  3579  0048                     	ds	1
  3580  0049                     ___ftadd@exp2:	
  3581                           
  3582                           ; 1 bytes @ 0x29
  3583  0049                     	ds	1
  3584  004A                     ___ftadd@exp1:	
  3585                           
  3586                           ; 1 bytes @ 0x2A
  3587  004A                     	ds	1
  3588  004B                     ?___fttol:	
  3589  004B                     ___fttol@f1:	
  3590                           ; 4 bytes @ 0x2B
  3591                           
  3592                           
  3593                           ; 3 bytes @ 0x2B
  3594  004B                     	ds	4
  3595  004F                     ??___fttol:	
  3596                           
  3597                           ; 0 bytes @ 0x2F
  3598  004F                     	ds	4
  3599  0053                     ___fttol@sign1:	
  3600                           
  3601                           ; 1 bytes @ 0x33
  3602  0053                     	ds	1
  3603  0054                     ___fttol@lval:	
  3604                           
  3605                           ; 4 bytes @ 0x34
  3606  0054                     	ds	4
  3607  0058                     ___fttol@exp1:	
  3608                           
  3609                           ; 1 bytes @ 0x38
  3610  0058                     	ds	1
  3611  0059                     ??_getPercentValue:	
  3612  0059                     ??_setPercentValue:	
  3613                           ; 0 bytes @ 0x39
  3614                           
  3615  0059                     setPercentValue@value:	
  3616                           ; 0 bytes @ 0x39
  3617                           
  3618                           
  3619                           ; 1 bytes @ 0x39
  3620  0059                     	ds	1
  3621  005A                     setPercentValue@i:	
  3622                           
  3623                           ; 3 bytes @ 0x3A
  3624  005A                     	ds	1
  3625  005B                     getPercentValue@value:	
  3626                           
  3627                           ; 1 bytes @ 0x3B
  3628  005B                     	ds	1
  3629  005C                     getPercentValue@i:	
  3630                           
  3631                           ; 3 bytes @ 0x3C
  3632  005C                     	ds	1
  3633  005D                     ?_setRF_DimmerLights:	
  3634  005D                     ??_Flash_Memory_Initialization:	
  3635                           ; 0 bytes @ 0x3D
  3636                           
  3637  005D                     setRF_DimmerLights@on:	
  3638                           ; 0 bytes @ 0x3D
  3639                           
  3640                           
  3641                           ; 1 bytes @ 0x3D
  3642  005D                     	ds	1
  3643  005E                     ??_setRF_DimmerLights:	
  3644  005E                     Flash_Memory_Initialization@i:	
  3645                           ; 0 bytes @ 0x3E
  3646                           
  3647                           
  3648                           ; 1 bytes @ 0x3E
  3649  005E                     	ds	1
  3650  005F                     ??_setDimmerLights_AdjRF:	
  3651                           
  3652                           ; 0 bytes @ 0x3F
  3653  005F                     	ds	1
  3654  0060                     setDimmerLights_AdjRF@lights:	
  3655  0060                     setRF_DimmerLights@status:	
  3656                           ; 1 bytes @ 0x40
  3657                           
  3658                           
  3659                           ; 1 bytes @ 0x40
  3660  0060                     	ds	1
  3661  0061                     ??_setRF_DimmerValue:	
  3662  0061                     setRF_DimmerLights@lights:	
  3663                           ; 0 bytes @ 0x41
  3664                           
  3665                           
  3666                           ; 1 bytes @ 0x41
  3667  0061                     	ds	1
  3668  0062                     ??_setDimmerLights_SwOn:	
  3669  0062                     ??_setDimmerLights_SwOff:	
  3670                           ; 0 bytes @ 0x42
  3671                           
  3672  0062                     ?_setDimmerLights_Adj:	
  3673                           ; 0 bytes @ 0x42
  3674                           
  3675  0062                     setDimmerLights_Adj@status:	
  3676                           ; 0 bytes @ 0x42
  3677                           
  3678                           
  3679                           ; 1 bytes @ 0x42
  3680  0062                     	ds	1
  3681  0063                     ??_setDimmerLights_Adj:	
  3682  0063                     setDimmerLights_SwOn@idle:	
  3683                           ; 0 bytes @ 0x43
  3684                           
  3685  0063                     setRF_DimmerValue@lights:	
  3686                           ; 1 bytes @ 0x43
  3687                           
  3688                           
  3689                           ; 1 bytes @ 0x43
  3690  0063                     	ds	1
  3691  0064                     ??_setRFSW_AdjControl:	
  3692  0064                     setDimmerLights_SwOn@sw:	
  3693                           ; 0 bytes @ 0x44
  3694                           
  3695  0064                     setDimmerLights_SwOff@command:	
  3696                           ; 1 bytes @ 0x44
  3697                           
  3698  0064                     setDimmerLights_Adj@lights:	
  3699                           ; 1 bytes @ 0x44
  3700                           
  3701                           
  3702                           ; 1 bytes @ 0x44
  3703  0064                     	ds	1
  3704  0065                     ??_setDimmerLights_Main:	
  3705  0065                     setDimmerLights_SwOff@sw:	
  3706                           ; 0 bytes @ 0x45
  3707                           
  3708                           
  3709                           ; 1 bytes @ 0x45
  3710  0065                     	ds	1
  3711  0066                     ??_DlyOff_Main:	
  3712  0066                     ??_setRFSW_Control:	
  3713                           ; 0 bytes @ 0x46
  3714                           
  3715  0066                     ??_setSw_Main:	
  3716                           ; 0 bytes @ 0x46
  3717                           
  3718  0066                     ??_setDimmerLights_ErrorClose:	
  3719                           ; 0 bytes @ 0x46
  3720                           
  3721  0066                     setRFSW_AdjControl@sw:	
  3722                           ; 0 bytes @ 0x46
  3723                           
  3724                           
  3725                           ; 1 bytes @ 0x46
  3726  0066                     	ds	1
  3727  0067                     setDimmerLights_Main@clear:	
  3728  0067                     setDimmerLights_ErrorClose@count:	
  3729                           ; 1 bytes @ 0x47
  3730                           
  3731  0067                     setRFSW_Control@sw:	
  3732                           ; 1 bytes @ 0x47
  3733                           
  3734                           
  3735                           ; 1 bytes @ 0x47
  3736  0067                     	ds	1
  3737  0068                     ??_getRxData:	
  3738  0068                     ??_setControl_Lights_Table:	
  3739                           ; 0 bytes @ 0x48
  3740                           
  3741  0068                     DlyOff_Main@sw:	
  3742                           ; 0 bytes @ 0x48
  3743                           
  3744  0068                     setDimmerLights_ErrorClose@lights:	
  3745                           ; 1 bytes @ 0x48
  3746                           
  3747  0068                     setSw_Main@sw:	
  3748                           ; 1 bytes @ 0x48
  3749                           
  3750  0068                     _setDimmerLights_Main$2503:	
  3751                           ; 1 bytes @ 0x48
  3752                           
  3753                           
  3754                           ; 2 bytes @ 0x48
  3755  0068                     	ds	1
  3756  0069                     ??_DelayOff_Main:	
  3757  0069                     getRxData@error:	
  3758                           ; 0 bytes @ 0x49
  3759                           
  3760  0069                     setDimmerLights_ErrorClose@i:	
  3761                           ; 1 bytes @ 0x49
  3762                           
  3763                           
  3764                           ; 2 bytes @ 0x49
  3765  0069                     	ds	1
  3766  006A                     ??_setRF_Main:	
  3767  006A                     _setDimmerLights_Main$2504:	
  3768                           ; 0 bytes @ 0x4A
  3769                           
  3770                           
  3771                           ; 2 bytes @ 0x4A
  3772  006A                     	ds	1
  3773  006B                     ??_setMain_Exception:	
  3774  006B                     setRF_Main@loop_f:	
  3775                           ; 0 bytes @ 0x4B
  3776                           
  3777                           
  3778                           ; 1 bytes @ 0x4B
  3779  006B                     	ds	1
  3780  006C                     ??_Switch_Main:	
  3781  006C                     setDimmerLights_Main@lights:	
  3782                           ; 0 bytes @ 0x4C
  3783                           
  3784  006C                     setRF_Main@Receive_OK:	
  3785                           ; 1 bytes @ 0x4C
  3786                           
  3787                           
  3788                           ; 1 bytes @ 0x4C
  3789  006C                     	ds	1
  3790  006D                     ??_DimmerLights_Main:	
  3791  006D                     setRF_Main@error:	
  3792                           ; 0 bytes @ 0x4D
  3793                           
  3794  006D                     Switch_Main@error:	
  3795                           ; 1 bytes @ 0x4D
  3796                           
  3797                           
  3798                           ; 1 bytes @ 0x4D
  3799  006D                     	ds	1
  3800  006E                     ??_RF_Main:	
  3801  006E                     ??_main:	
  3802                           ; 0 bytes @ 0x4E
  3803                           
  3804                           
  3805                           	psect	maintext
  3806  1579                     __pmaintext:	
  3807                           ; 0 bytes @ 0x4E
  3808 ;;
  3809 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3810 ;;
  3811 ;; *************** function _main *****************
  3812 ;; Defined at:
  3813 ;;		line 7 in file "../src/Main_B1.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  argc            2    0[BANK3 ] int 
  3816 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;		None
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  2    0[BANK3 ] int 
  3821 ;; Registers used:
  3822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 17F/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3828 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3831 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3832 ;;Total ram usage:        4 bytes
  3833 ;; Hardware stack levels required when called:   15
  3834 ;; This function calls:
  3835 ;;		_Buzzer_Initialization
  3836 ;;		_Buzzer_Main
  3837 ;;		_CC2500_PowerOnInitial
  3838 ;;		_DelayOff_Initialization
  3839 ;;		_DelayOff_Main
  3840 ;;		_DimmerLights_Initialization
  3841 ;;		_DimmerLights_Main
  3842 ;;		_Flash_Memory_Initialization
  3843 ;;		_Flash_Memory_Main
  3844 ;;		_LED_Initialization
  3845 ;;		_LED_Main
  3846 ;;		_Load_Initialization
  3847 ;;		_Load_Main
  3848 ;;		_Mcu_Initialization
  3849 ;;		_RF_Initialization
  3850 ;;		_RF_Main
  3851 ;;		_Switch_Initialization
  3852 ;;		_Switch_Main
  3853 ;;		_Temp_Initialization
  3854 ;;		_Temp_Main
  3855 ;;		_WDT_Main
  3856 ;;		_getLoad_AD
  3857 ;;		_getTemp_AD
  3858 ;;		_myMain_Initialization
  3859 ;;		_my_MainTimer
  3860 ;; This function is called by:
  3861 ;;		Startup code after reset
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           
  3866                           ;psect for function _main
  3867  1579                     _main:	
  3868                           
  3869                           ;Main_B1.c: 8: myMain_Initialization();
  3870                           
  3871                           ;incstack = 0
  3872                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3873  1579  319B  2395  3195   	fcall	_myMain_Initialization
  3874                           
  3875                           ;Main_B1.c: 9: Mcu_Initialization();
  3876  157C  319C  240C  3195   	fcall	_Mcu_Initialization
  3877                           
  3878                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3879  157F  318F  2724  3195   	fcall	_Flash_Memory_Initialization
  3880                           
  3881                           ;Main_B1.c: 11: LED_Initialization();
  3882  1582  319B  2323  3195   	fcall	_LED_Initialization
  3883                           
  3884                           ;Main_B1.c: 12: Buzzer_Initialization();
  3885  1585  319A  2274  3195   	fcall	_Buzzer_Initialization
  3886                           
  3887                           ;Main_B1.c: 14: ;;
  3888                           ;Main_B1.c: 15: Temp_Initialization();
  3889  1588  319A  227D  3195   	fcall	_Temp_Initialization
  3890                           
  3891                           ;Main_B1.c: 16: Load_Initialization();
  3892  158B  319A  2298  3195   	fcall	_Load_Initialization
  3893                           
  3894                           ;Main_B1.c: 17: ;;
  3895                           ;Main_B1.c: 18: DelayOff_Initialization();
  3896  158E  319A  22B8  3195   	fcall	_DelayOff_Initialization
  3897                           
  3898                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3899  1591  319D  2511  3195   	fcall	_DimmerLights_Initialization
  3900                           
  3901                           ;Main_B1.c: 21: ;;
  3902                           ;Main_B1.c: 22: ;;
  3903                           ;Main_B1.c: 23: ;;
  3904                           ;Main_B1.c: 24: Switch_Initialization();
  3905  1594  319B  236B  3195   	fcall	_Switch_Initialization
  3906                           
  3907                           ;Main_B1.c: 25: RF_Initialization();
  3908  1597  319A  2277  3195   	fcall	_RF_Initialization
  3909                           
  3910                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3911  159A  319C  24BA  3195   	fcall	_CC2500_PowerOnInitial
  3912  159D                     l10674:	
  3913                           ;Main_B1.c: 27: ;;
  3914                           ;Main_B1.c: 29: while (1) {
  3915                           
  3916                           
  3917                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  3918  159D  0021               	movlb	1	; select bank1
  3919  159E  1C20               	btfss	_myMain^(0+128),0
  3920  159F  2DA8               	goto	l10678
  3921                           
  3922                           ;Main_B1.c: 37: getLoad_AD(0x05);
  3923  15A0  3005               	movlw	5
  3924  15A1  318B  230A  3195   	fcall	_getLoad_AD
  3925                           
  3926                           ;Main_B1.c: 41: getTemp_AD(0x09);
  3927  15A4  3009               	movlw	9
  3928  15A5  3191  21D9  3195   	fcall	_getTemp_AD
  3929  15A8                     l10678:	
  3930                           
  3931                           ;Main_B1.c: 56: }
  3932                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  3933  15A8  0022               	movlb	2	; select bank2
  3934  15A9  1C20               	btfss	_Timer1^(0+256),0
  3935  15AA  2D9D               	goto	l10674
  3936                           
  3937                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  3938  15AB  1020               	bcf	_Timer1^(0+256),0
  3939                           
  3940                           ;Main_B1.c: 94: my_MainTimer();
  3941  15AC  3194  242F  3195   	fcall	_my_MainTimer
  3942                           
  3943                           ;Main_B1.c: 95: WDT_Main();
  3944  15AF  319C  241E  3195   	fcall	_WDT_Main
  3945                           
  3946                           ;Main_B1.c: 96: ;;
  3947                           ;Main_B1.c: 97: ;;
  3948                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  3949  15B2  0021               	movlb	1	; select bank1
  3950  15B3  1C20               	btfss	_myMain^(0+128),0
  3951  15B4  2D9D               	goto	l10674
  3952                           
  3953                           ;Main_B1.c: 99: Flash_Memory_Main();
  3954  15B5  3191  216D  3195   	fcall	_Flash_Memory_Main
  3955                           
  3956                           ;Main_B1.c: 101: LED_Main();
  3957  15B8  319B  232F  3195   	fcall	_LED_Main
  3958                           
  3959                           ;Main_B1.c: 102: Buzzer_Main();
  3960  15BB  3193  2397  3195   	fcall	_Buzzer_Main
  3961                           
  3962                           ;Main_B1.c: 104: ;;
  3963                           ;Main_B1.c: 105: Temp_Main();
  3964  15BE  319A  2280  3195   	fcall	_Temp_Main
  3965                           
  3966                           ;Main_B1.c: 106: Load_Main();
  3967  15C1  3180  2049  3195   	fcall	_Load_Main
  3968                           
  3969                           ;Main_B1.c: 107: ;;
  3970                           ;Main_B1.c: 109: ;;
  3971                           ;Main_B1.c: 110: DimmerLights_Main();
  3972  15C4  319A  22D0  3195   	fcall	_DimmerLights_Main
  3973                           
  3974                           ;Main_B1.c: 111: Switch_Main();
  3975  15C7  319E  26EC  3195   	fcall	_Switch_Main
  3976                           
  3977                           ;Main_B1.c: 112: ;;
  3978                           ;Main_B1.c: 113: ;;
  3979                           ;Main_B1.c: 115: RF_Main();
  3980  15CA  319A  227A  3195   	fcall	_RF_Main
  3981                           
  3982                           ;Main_B1.c: 116: DelayOff_Main();
  3983  15CD  319A  22C0  3195   	fcall	_DelayOff_Main
  3984                           
  3985                           ;Main_B1.c: 117: ;;
  3986  15D0  2D9D               	goto	l10674
  3987  15D1                     __end_of_main:	
  3988                           ;Main_B1.c: 125: }
  3989                           ;Main_B1.c: 126: }
  3990                           ;Main_B1.c: 160: }
  3991                           ;Main_B1.c: 161: return (0);
  3992                           ;	Return value of _main is never used
  3993                           
  3994                           
  3995                           	psect	text1
  3996  142F                     __ptext1:	
  3997 ;; *************** function _my_MainTimer *****************
  3998 ;; Defined at:
  3999 ;;		line 180 in file "../src/Main_B1.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;		None
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;		None
  4004 ;; Return value:  Size  Location     Type
  4005 ;;		None               void
  4006 ;; Registers used:
  4007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;Total ram usage:        0 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    7
  4020 ;; This function calls:
  4021 ;;		_setBuz
  4022 ;;		_setTxData
  4023 ;; This function is called by:
  4024 ;;		_main
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           
  4029                           ;psect for function _my_MainTimer
  4030  142F                     _my_MainTimer:	
  4031                           
  4032                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  4033                           
  4034                           ;incstack = 0
  4035                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4036  142F  0021               	movlb	1	; select bank1
  4037  1430  1820               	btfsc	_myMain^(0+128),0
  4038  1431  2C51               	goto	l10410
  4039                           
  4040                           ;Main_B1.c: 183: myMain.PowerCount++;
  4041  1432  3001               	movlw	1
  4042  1433  07A2               	addwf	(_myMain^(0+128)+2),f
  4043  1434  3000               	movlw	0
  4044  1435  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4045                           
  4046                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  4047  1436  3002               	movlw	2
  4048  1437  3EA0               	addlw	_myMain& (0+255)
  4049  1438  0086               	movwf	6
  4050  1439  0187               	clrf	7
  4051  143A  3F40               	moviw [0]fsr1
  4052  143B  3A96               	xorlw	150
  4053  143C  1D03               	skipz
  4054  143D  2C40               	goto	u11755
  4055  143E  3F41               	moviw [1]fsr1
  4056  143F  3A00               	xorlw	0
  4057  1440                     u11755:	
  4058  1440  1D03               	skipz
  4059  1441  2C68               	goto	l10420
  4060                           
  4061                           ;Main_B1.c: 185: {
  4062                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  4063  1442  01A2               	clrf	(_myMain^(0+128)+2)
  4064  1443  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4065                           
  4066                           ;Main_B1.c: 187: myMain.PowerON = 1;
  4067  1444  1420               	bsf	_myMain^(0+128),0
  4068                           
  4069                           ;Main_B1.c: 193: setBuz(3, 50);
  4070  1445  3032               	movlw	50
  4071  1446  0020               	movlb	0	; select bank0
  4072  1447  00A9               	movwf	setBuz@time
  4073  1448  3000               	movlw	0
  4074  1449  00AA               	movwf	setBuz@time+1
  4075  144A  3003               	movlw	3
  4076  144B  3195  25D1  3194   	fcall	_setBuz
  4077                           
  4078                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  4079  144E  0021               	movlb	1	; select bank1
  4080  144F  1620               	bsf	_myMain^(0+128),4
  4081                           
  4082                           ;Main_B1.c: 203: }
  4083                           ;Main_B1.c: 204: } else {
  4084  1450  2C68               	goto	l10420
  4085  1451                     l10410:	
  4086                           
  4087                           ;Main_B1.c: 212: myMain.Count1++;
  4088  1451  3001               	movlw	1
  4089  1452  07A6               	addwf	(_myMain^(0+128)+6),f
  4090  1453  3000               	movlw	0
  4091  1454  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4092                           
  4093                           ;Main_B1.c: 213: if (myMain.Count1 == 100)
  4094  1455  3006               	movlw	6
  4095  1456  3EA0               	addlw	_myMain& (0+255)
  4096  1457  0086               	movwf	6
  4097  1458  0187               	clrf	7
  4098  1459  3F40               	moviw [0]fsr1
  4099  145A  3A64               	xorlw	100
  4100  145B  1D03               	skipz
  4101  145C  2C5F               	goto	u11765
  4102  145D  3F41               	moviw [1]fsr1
  4103  145E  3A00               	xorlw	0
  4104  145F                     u11765:	
  4105  145F  1D03               	skipz
  4106  1460  2C68               	goto	l10420
  4107                           
  4108                           ;Main_B1.c: 214: {
  4109                           ;Main_B1.c: 215: myMain.Count1 = 0;
  4110  1461  01A6               	clrf	(_myMain^(0+128)+6)
  4111  1462  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4112                           
  4113                           ;Main_B1.c: 227: if (myMain.Flag) {
  4114  1463  1CA0               	btfss	_myMain^(0+128),1
  4115  1464  2C67               	goto	l1549
  4116                           
  4117                           ;Main_B1.c: 228: myMain.Flag = 0;
  4118  1465  10A0               	bcf	_myMain^(0+128),1
  4119                           
  4120                           ;Main_B1.c: 237: } else {
  4121  1466  2C68               	goto	l10420
  4122  1467                     l1549:	
  4123                           
  4124                           ;Main_B1.c: 238: myMain.Flag = 1;
  4125  1467  14A0               	bsf	_myMain^(0+128),1
  4126  1468                     l10420:	
  4127                           
  4128                           ;Main_B1.c: 247: }
  4129                           ;Main_B1.c: 248: }
  4130                           ;Main_B1.c: 250: }
  4131                           ;Main_B1.c: 252: myMain.Count2++;
  4132  1468  3001               	movlw	1
  4133  1469  07A8               	addwf	(_myMain^(0+128)+8),f
  4134  146A  3000               	movlw	0
  4135  146B  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  4136                           
  4137                           ;Main_B1.c: 253: if (myMain.Count2 == 100) {
  4138  146C  3008               	movlw	8
  4139  146D  3EA0               	addlw	_myMain& (0+255)
  4140  146E  0086               	movwf	6
  4141  146F  0187               	clrf	7
  4142  1470  3F40               	moviw [0]fsr1
  4143  1471  3A64               	xorlw	100
  4144  1472  1D03               	skipz
  4145  1473  2C76               	goto	u11785
  4146  1474  3F41               	moviw [1]fsr1
  4147  1475  3A00               	xorlw	0
  4148  1476                     u11785:	
  4149  1476  1D03               	skipz
  4150  1477  0008               	return
  4151                           
  4152                           ;Main_B1.c: 254: myMain.Count2 = 0;
  4153  1478  01A8               	clrf	(_myMain^(0+128)+8)
  4154  1479  01A9               	clrf	((_myMain+1)^(0+128)+8)
  4155                           
  4156                           ;Main_B1.c: 255: setTxData();
  4157  147A  318C  24A6         	fcall	_setTxData
  4158  147C  0008               	return
  4159  147D                     __end_of_my_MainTimer:	
  4160                           
  4161                           	psect	text2
  4162  1B95                     __ptext2:	
  4163 ;; *************** function _myMain_Initialization *****************
  4164 ;; Defined at:
  4165 ;;		line 167 in file "../src/Main_B1.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;		None
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;		None
  4170 ;; Return value:  Size  Location     Type
  4171 ;;		None               void
  4172 ;; Registers used:
  4173 ;;		wreg, fsr1l, fsr1h
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4183 ;;Total ram usage:        1 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    5
  4186 ;; This function calls:
  4187 ;;		Nothing
  4188 ;; This function is called by:
  4189 ;;		_main
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           
  4194                           ;psect for function _myMain_Initialization
  4195  1B95                     _myMain_Initialization:	
  4196                           
  4197                           ;Main_B1.c: 169: product = &_product;
  4198                           
  4199                           ;incstack = 0
  4200                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4201  1B95  3045               	movlw	__product& (0+255)
  4202  1B96  0020               	movlb	0	; select bank0
  4203  1B97  00A0               	movwf	??_myMain_Initialization
  4204  1B98  0820               	movf	??_myMain_Initialization,w
  4205  1B99  00FB               	movwf	_product
  4206                           
  4207                           ;Main_B1.c: 170: product->Data[20] = 210;
  4208  1B9A  30D2               	movlw	210
  4209  1B9B  00A0               	movwf	??_myMain_Initialization
  4210  1B9C  087B               	movf	_product,w
  4211  1B9D  3E14               	addlw	20
  4212  1B9E  0086               	movwf	6
  4213  1B9F  3002               	movlw	2	; select bank4/5
  4214  1BA0  0087               	movwf	7
  4215  1BA1  0820               	movf	??_myMain_Initialization,w
  4216  1BA2  0081               	movwf	1
  4217  1BA3  0008               	return
  4218  1BA4                     __end_of_myMain_Initialization:	
  4219                           
  4220                           	psect	text3
  4221  11D9                     __ptext3:	
  4222 ;; *************** function _getTemp_AD *****************
  4223 ;; Defined at:
  4224 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;  channel         1    wreg     unsigned char 
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;  channel         1    5[BANK0 ] unsigned char 
  4229 ;; Return value:  Size  Location     Type
  4230 ;;		None               void
  4231 ;; Registers used:
  4232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4241 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4242 ;;Total ram usage:        2 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:    7
  4245 ;; This function calls:
  4246 ;;		_getAD
  4247 ;; This function is called by:
  4248 ;;		_main
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           
  4253                           ;psect for function _getTemp_AD
  4254  11D9                     _getTemp_AD:	
  4255                           
  4256                           ;incstack = 0
  4257                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4258                           ;getTemp_AD@channel stored from wreg
  4259  11D9  0020               	movlb	0	; select bank0
  4260  11DA  00A5               	movwf	getTemp_AD@channel
  4261                           
  4262                           ;OverTemperature_B1.c: 33: if (Temp.ADtoGO == 1) {
  4263  11DB  0021               	movlb	1	; select bank1
  4264  11DC  1D58               	btfss	_Temp^(0+128),2
  4265  11DD  0008               	return
  4266                           
  4267                           ;OverTemperature_B1.c: 34: Temp.GO = 1;
  4268  11DE  1658               	bsf	_Temp^(0+128),4
  4269                           
  4270                           ;OverTemperature_B1.c: 35: Temp.ADRES = getAD(channel, 0xf0);
  4271  11DF  30F0               	movlw	240
  4272  11E0  0020               	movlb	0	; select bank0
  4273  11E1  00A4               	movwf	??_getTemp_AD
  4274  11E2  0824               	movf	??_getTemp_AD,w
  4275  11E3  00A0               	movwf	getAD@adcon1
  4276  11E4  0825               	movf	getTemp_AD@channel,w
  4277  11E5  319E  2643  3191   	fcall	_getAD
  4278  11E8  0020               	movlb	0	; select bank0
  4279  11E9  0821               	movf	?_getAD+1,w
  4280  11EA  0021               	movlb	1	; select bank1
  4281  11EB  01E5               	clrf	((_Temp+1)^(0+128)+12)
  4282  11EC  07E5               	addwf	((_Temp+1)^(0+128)+12),f
  4283  11ED  0020               	movlb	0	; select bank0
  4284  11EE  0820               	movf	?_getAD,w
  4285  11EF  0021               	movlb	1	; select bank1
  4286  11F0  01E4               	clrf	(_Temp^(0+128)+12)
  4287  11F1  07E4               	addwf	(_Temp^(0+128)+12),f
  4288                           
  4289                           ;OverTemperature_B1.c: 36: if (Temp.ADH[0] < Temp.ADRES) {
  4290  11F2  0865               	movf	((_Temp+1)^(0+128)+12),w
  4291  11F3  0261               	subwf	((_Temp+1)^(0+128)+8),w
  4292  11F4  1D03               	skipz
  4293  11F5  29F8               	goto	u11725
  4294  11F6  0864               	movf	(_Temp^(0+128)+12),w
  4295  11F7  0260               	subwf	(_Temp^(0+128)+8),w
  4296  11F8                     u11725:	
  4297  11F8  1803               	skipnc
  4298  11F9  2A01               	goto	l10392
  4299                           
  4300                           ;OverTemperature_B1.c: 37: Temp.ADH[0] = Temp.ADRES;
  4301  11FA  0865               	movf	((_Temp+1)^(0+128)+12),w
  4302  11FB  01E1               	clrf	((_Temp+1)^(0+128)+8)
  4303  11FC  07E1               	addwf	((_Temp+1)^(0+128)+8),f
  4304  11FD  0864               	movf	(_Temp^(0+128)+12),w
  4305  11FE  01E0               	clrf	(_Temp^(0+128)+8)
  4306  11FF  07E0               	addwf	(_Temp^(0+128)+8),f
  4307                           
  4308                           ;OverTemperature_B1.c: 38: } else if (Temp.ADH[1] < Temp.ADRES) {
  4309  1200  0008               	return
  4310  1201                     l10392:	
  4311  1201  0865               	movf	((_Temp+1)^(0+128)+12),w
  4312  1202  0263               	subwf	((_Temp+1)^(0+128)+10),w
  4313  1203  1D03               	skipz
  4314  1204  2A07               	goto	u11735
  4315  1205  0864               	movf	(_Temp^(0+128)+12),w
  4316  1206  0262               	subwf	(_Temp^(0+128)+10),w
  4317  1207                     u11735:	
  4318  1207  1803               	skipnc
  4319  1208  0008               	return
  4320                           
  4321                           ;OverTemperature_B1.c: 39: Temp.ADH[1] = Temp.ADRES;
  4322  1209  0865               	movf	((_Temp+1)^(0+128)+12),w
  4323  120A  01E3               	clrf	((_Temp+1)^(0+128)+10)
  4324  120B  07E3               	addwf	((_Temp+1)^(0+128)+10),f
  4325  120C  0864               	movf	(_Temp^(0+128)+12),w
  4326  120D  01E2               	clrf	(_Temp^(0+128)+10)
  4327  120E  07E2               	addwf	(_Temp^(0+128)+10),f
  4328  120F  0008               	return
  4329  1210                     __end_of_getTemp_AD:	
  4330                           
  4331                           	psect	text4
  4332  0B0A                     __ptext4:	
  4333 ;; *************** function _getLoad_AD *****************
  4334 ;; Defined at:
  4335 ;;		line 15 in file "../src/OverLoad_B1.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;  channel         1    wreg     unsigned char 
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;  channel         1    6[BANK0 ] unsigned char 
  4340 ;;  i               1    9[BANK0 ] unsigned char 
  4341 ;;  j               1    8[BANK0 ] unsigned char 
  4342 ;;  k               1    7[BANK0 ] unsigned char 
  4343 ;; Return value:  Size  Location     Type
  4344 ;;		None               void
  4345 ;; Registers used:
  4346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;Total ram usage:        6 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    7
  4359 ;; This function calls:
  4360 ;;		_getAD
  4361 ;; This function is called by:
  4362 ;;		_main
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           
  4367                           ;psect for function _getLoad_AD
  4368  0B0A                     _getLoad_AD:	
  4369                           
  4370                           ;incstack = 0
  4371                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4372                           ;getLoad_AD@channel stored from wreg
  4373  0B0A  0020               	movlb	0	; select bank0
  4374  0B0B  00A6               	movwf	getLoad_AD@channel
  4375                           
  4376                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4377  0B0C  01A9               	clrf	getLoad_AD@i
  4378  0B0D  01A8               	clrf	getLoad_AD@j
  4379  0B0E  01A7               	clrf	getLoad_AD@k
  4380                           
  4381                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4382  0B0F  0022               	movlb	2	; select bank2
  4383  0B10  1E27               	btfss	_Load^(0+256),4
  4384  0B11  0008               	return
  4385                           
  4386                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4387  0B12  30F3               	movlw	243
  4388  0B13  0020               	movlb	0	; select bank0
  4389  0B14  00A4               	movwf	??_getLoad_AD
  4390  0B15  0824               	movf	??_getLoad_AD,w
  4391  0B16  00A0               	movwf	getAD@adcon1
  4392  0B17  0826               	movf	getLoad_AD@channel,w
  4393  0B18  319E  2643  318B   	fcall	_getAD
  4394  0B1B  0020               	movlb	0	; select bank0
  4395  0B1C  0821               	movf	?_getAD+1,w
  4396  0B1D  0022               	movlb	2	; select bank2
  4397  0B1E  01C9               	clrf	((_Load+1)^(0+256)+33)
  4398  0B1F  07C9               	addwf	((_Load+1)^(0+256)+33),f
  4399  0B20  0020               	movlb	0	; select bank0
  4400  0B21  0820               	movf	?_getAD,w
  4401  0B22  0022               	movlb	2	; select bank2
  4402  0B23  01C8               	clrf	(_Load^(0+256)+33)
  4403  0B24  07C8               	addwf	(_Load^(0+256)+33),f
  4404                           
  4405                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4406  0B25  0020               	movlb	0	; select bank0
  4407  0B26  01A9               	clrf	getLoad_AD@i
  4408  0B27  3004               	movlw	4
  4409  0B28  0229               	subwf	getLoad_AD@i,w
  4410  0B29  1803               	btfsc	3,0
  4411  0B2A  2B58               	goto	l10362
  4412  0B2B                     l10350:	
  4413                           
  4414                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4415  0B2B  3529               	lslf	getLoad_AD@i,w
  4416  0B2C  3E32               	addlw	(_Load+11)& (0+255)
  4417  0B2D  0086               	movwf	6
  4418  0B2E  3001               	movlw	1	; select bank2/3
  4419  0B2F  0087               	movwf	7
  4420  0B30  3F40               	moviw [0]fsr1
  4421  0B31  00A4               	movwf	??_getLoad_AD
  4422  0B32  3F41               	moviw [1]fsr1
  4423  0B33  00A5               	movwf	??_getLoad_AD+1
  4424  0B34  0022               	movlb	2	; select bank2
  4425  0B35  0849               	movf	((_Load+1)^(0+256)+33),w
  4426  0B36  0020               	movlb	0	; select bank0
  4427  0B37  0225               	subwf	??_getLoad_AD+1,w
  4428  0B38  1D03               	skipz
  4429  0B39  2B3E               	goto	u11635
  4430  0B3A  0022               	movlb	2	; select bank2
  4431  0B3B  0848               	movf	(_Load^(0+256)+33),w
  4432  0B3C  0020               	movlb	0	; select bank0
  4433  0B3D  0224               	subwf	??_getLoad_AD,w
  4434  0B3E                     u11635:	
  4435  0B3E  1803               	skipnc
  4436  0B3F  2B50               	goto	l10358
  4437  0B40  08A8               	movf	getLoad_AD@j,f
  4438  0B41  1D03               	skipz
  4439  0B42  2B50               	goto	l10358
  4440                           
  4441                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4442  0B43  3529               	lslf	getLoad_AD@i,w
  4443  0B44  3E32               	addlw	(_Load+11)& (0+255)
  4444  0B45  0086               	movwf	6
  4445  0B46  3001               	movlw	1	; select bank2/3
  4446  0B47  0087               	movwf	7
  4447  0B48  0022               	movlb	2	; select bank2
  4448  0B49  0848               	movf	(_Load^(0+256)+33),w
  4449  0B4A  3FC0               	movwi [0]fsr1
  4450  0B4B  0849               	movf	((_Load+1)^(0+256)+33),w
  4451  0B4C  3FC1               	movwi [1]fsr1
  4452                           
  4453                           ;OverLoad_B1.c: 24: j = 1;
  4454  0B4D  0020               	movlb	0	; select bank0
  4455  0B4E  01A8               	clrf	getLoad_AD@j
  4456  0B4F  0AA8               	incf	getLoad_AD@j,f
  4457  0B50                     l10358:	
  4458  0B50  3001               	movlw	1
  4459  0B51  00A4               	movwf	??_getLoad_AD
  4460  0B52  0824               	movf	??_getLoad_AD,w
  4461  0B53  07A9               	addwf	getLoad_AD@i,f
  4462  0B54  3004               	movlw	4
  4463  0B55  0229               	subwf	getLoad_AD@i,w
  4464  0B56  1C03               	skipc
  4465  0B57  2B2B               	goto	l10350
  4466  0B58                     l10362:	
  4467                           
  4468                           ;OverLoad_B1.c: 25: }
  4469                           ;OverLoad_B1.c: 26: }
  4470                           ;OverLoad_B1.c: 27: if (j == 0) {
  4471  0B58  08A8               	movf	getLoad_AD@j,f
  4472  0B59  1D03               	skipz
  4473  0B5A  0008               	return
  4474                           
  4475                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4476  0B5B  01A9               	clrf	getLoad_AD@i
  4477  0B5C                     L1:	
  4478  0B5C  3004               	movlw	4
  4479  0B5D  0229               	subwf	getLoad_AD@i,w
  4480  0B5E  1803               	btfsc	3,0
  4481  0B5F  0008               	return
  4482                           
  4483                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4484  0B60  3529               	lslf	getLoad_AD@i,w
  4485  0B61  3E3C               	addlw	(_Load+21)& (0+255)
  4486  0B62  0086               	movwf	6
  4487  0B63  3001               	movlw	1	; select bank2/3
  4488  0B64  0087               	movwf	7
  4489  0B65  3F40               	moviw [0]fsr1
  4490  0B66  00A4               	movwf	??_getLoad_AD
  4491  0B67  3F41               	moviw [1]fsr1
  4492  0B68  00A5               	movwf	??_getLoad_AD+1
  4493  0B69  0825               	movf	??_getLoad_AD+1,w
  4494  0B6A  0022               	movlb	2	; select bank2
  4495  0B6B  0249               	subwf	((_Load+1)^(0+256)+33),w
  4496  0B6C  1D03               	skipz
  4497  0B6D  2B72               	goto	u11685
  4498  0B6E  0020               	movlb	0	; select bank0
  4499  0B6F  0824               	movf	??_getLoad_AD,w
  4500  0B70  0022               	movlb	2	; select bank2
  4501  0B71  0248               	subwf	(_Load^(0+256)+33),w
  4502  0B72                     u11685:	
  4503  0B72  1803               	skipnc
  4504  0B73  2B85               	goto	l10378
  4505  0B74  0020               	movlb	0	; select bank0
  4506  0B75  08A7               	movf	getLoad_AD@k,f
  4507  0B76  1D03               	skipz
  4508  0B77  2B85               	goto	l10378
  4509                           
  4510                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4511  0B78  3529               	lslf	getLoad_AD@i,w
  4512  0B79  3E3C               	addlw	(_Load+21)& (0+255)
  4513  0B7A  0086               	movwf	6
  4514  0B7B  3001               	movlw	1	; select bank2/3
  4515  0B7C  0087               	movwf	7
  4516  0B7D  0022               	movlb	2	; select bank2
  4517  0B7E  0848               	movf	(_Load^(0+256)+33),w
  4518  0B7F  3FC0               	movwi [0]fsr1
  4519  0B80  0849               	movf	((_Load+1)^(0+256)+33),w
  4520  0B81  3FC1               	movwi [1]fsr1
  4521                           
  4522                           ;OverLoad_B1.c: 31: k = 1;
  4523  0B82  0020               	movlb	0	; select bank0
  4524  0B83  01A7               	clrf	getLoad_AD@k
  4525  0B84  0AA7               	incf	getLoad_AD@k,f
  4526  0B85                     l10378:	
  4527  0B85  3001               	movlw	1
  4528  0B86  0020               	movlb	0	; select bank0
  4529  0B87  00A4               	movwf	??_getLoad_AD
  4530  0B88  0824               	movf	??_getLoad_AD,w
  4531  0B89  07A9               	addwf	getLoad_AD@i,f
  4532  0B8A  2B5C               	goto	L1
  4533  0B8B                     __end_of_getLoad_AD:	
  4534                           
  4535                           	psect	text5
  4536  1E43                     __ptext5:	
  4537 ;; *************** function _getAD *****************
  4538 ;; Defined at:
  4539 ;;		line 454 in file "../src/MCU_B1.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  adcon0          1    wreg     unsigned char 
  4542 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  2    0[BANK0 ] int 
  4547 ;; Registers used:
  4548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4554 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4557 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4558 ;;Total ram usage:        4 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; Hardware stack levels required when called:    6
  4561 ;; This function calls:
  4562 ;;		_Timeout_Counter
  4563 ;;		_set_TimeoutCleared
  4564 ;; This function is called by:
  4565 ;;		_getLoad_AD
  4566 ;;		_getTemp_AD
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           
  4571                           ;psect for function _getAD
  4572  1E43                     _getAD:	
  4573                           
  4574                           ;incstack = 0
  4575                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4576                           ;getAD@adcon0 stored from wreg
  4577  1E43  0020               	movlb	0	; select bank0
  4578  1E44  00A3               	movwf	getAD@adcon0
  4579                           
  4580                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4581  1E45  0823               	movf	getAD@adcon0,w
  4582  1E46  0021               	movlb	1	; select bank1
  4583  1E47  009D               	movwf	29	;volatile
  4584                           
  4585                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4586  1E48  0020               	movlb	0	; select bank0
  4587  1E49  0820               	movf	getAD@adcon1,w
  4588  1E4A  0021               	movlb	1	; select bank1
  4589  1E4B  009E               	movwf	30	;volatile
  4590                           
  4591                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4592  1E4C  149D               	bsf	29,1	;volatile
  4593                           
  4594                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4595  1E4D  2E51               	goto	l9810
  4596  1E4E                     l9808:	
  4597                           
  4598                           ;MCU_B1.c: 459: Timeout_Counter();
  4599  1E4E  319C  24A5  319E   	fcall	_Timeout_Counter
  4600  1E51                     l9810:	
  4601  1E51  0021               	movlb	1	; select bank1
  4602  1E52  1C9D               	btfss	29,1	;volatile
  4603  1E53  2E56               	goto	l9814
  4604  1E54  1D2D               	btfss	(_myMain^(0+128)+13),2
  4605  1E55  2E4E               	goto	l9808
  4606  1E56                     l9814:	
  4607                           
  4608                           ;MCU_B1.c: 460: };
  4609                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4610  1E56  319A  2293         	fcall	_set_TimeoutCleared
  4611                           
  4612                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4613  1E58  0021               	movlb	1	; select bank1
  4614  1E59  081C               	movf	28,w	;volatile
  4615  1E5A  0020               	movlb	0	; select bank0
  4616  1E5B  01A1               	clrf	?_getAD+1
  4617  1E5C  07A1               	addwf	?_getAD+1,f
  4618  1E5D  0021               	movlb	1	; select bank1
  4619  1E5E  081B               	movf	27,w	;volatile
  4620  1E5F  0020               	movlb	0	; select bank0
  4621  1E60  01A0               	clrf	?_getAD
  4622  1E61  07A0               	addwf	?_getAD,f
  4623  1E62  0008               	return
  4624  1E63                     __end_of_getAD:	
  4625                           
  4626                           	psect	text6
  4627  1C1E                     __ptext6:	
  4628 ;; *************** function _WDT_Main *****************
  4629 ;; Defined at:
  4630 ;;		line 1033 in file "../src/MCU_B1.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;		None
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;		None
  4635 ;; Return value:  Size  Location     Type
  4636 ;;		None               void
  4637 ;; Registers used:
  4638 ;;		wreg, status,2, status,0, pclath, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4648 ;;Total ram usage:        1 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    6
  4651 ;; This function calls:
  4652 ;;		_WDT_Clearing
  4653 ;; This function is called by:
  4654 ;;		_main
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           
  4659                           ;psect for function _WDT_Main
  4660  1C1E                     _WDT_Main:	
  4661                           
  4662                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  4663                           
  4664                           ;incstack = 0
  4665                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4666  1C1E  0022               	movlb	2	; select bank2
  4667  1C1F  1C25               	btfss	_WDT^(0+256),0
  4668  1C20  0008               	return
  4669                           
  4670                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  4671  1C21  3001               	movlw	1
  4672  1C22  02A6               	subwf	(_WDT^(0+256)+1),f
  4673  1C23  0826               	movf	(_WDT^(0+256)+1),w
  4674  1C24  3AFF               	xorlw	255
  4675  1C25  1903               	skipnz
  4676  1C26  0008               	return
  4677                           
  4678                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  4679  1C27  3064               	movlw	100
  4680  1C28  0020               	movlb	0	; select bank0
  4681  1C29  00A0               	movwf	??_WDT_Main
  4682  1C2A  0820               	movf	??_WDT_Main,w
  4683  1C2B  0022               	movlb	2	; select bank2
  4684  1C2C  00A6               	movwf	(_WDT^(0+256)+1)
  4685                           
  4686                           ;MCU_B1.c: 1037: WDT_Clearing();
  4687  1C2D  3180  2002         	fcall	_WDT_Clearing
  4688  1C2F  0008               	return
  4689  1C30                     __end_of_WDT_Main:	
  4690                           
  4691                           	psect	text7
  4692  0002                     __ptext7:	
  4693 ;; *************** function _WDT_Clearing *****************
  4694 ;; Defined at:
  4695 ;;		line 1043 in file "../src/MCU_B1.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;		None
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;		None
  4700 ;; Return value:  Size  Location     Type
  4701 ;;		None               void
  4702 ;; Registers used:
  4703 ;;		None
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;Total ram usage:        0 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    5
  4716 ;; This function calls:
  4717 ;;		Nothing
  4718 ;; This function is called by:
  4719 ;;		_WDT_Main
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           
  4724                           ;psect for function _WDT_Clearing
  4725  0002                     _WDT_Clearing:	
  4726                           
  4727                           ;incstack = 0
  4728                           ; Regs used in _WDT_Clearing: []
  4729  0002  0064               	clrwdt	;# 
  4730  0003  0008               	return
  4731  0004                     __end_of_WDT_Clearing:	
  4732                           
  4733                           	psect	text8
  4734  1A80                     __ptext8:	
  4735 ;; *************** function _Temp_Main *****************
  4736 ;; Defined at:
  4737 ;;		line 51 in file "../src/OverTemperature_B1.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;		None
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;		None
  4742 ;; Return value:  Size  Location     Type
  4743 ;;		None               void
  4744 ;; Registers used:
  4745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4755 ;;Total ram usage:        0 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:    7
  4758 ;; This function calls:
  4759 ;;		_setTemp_Main
  4760 ;; This function is called by:
  4761 ;;		_main
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           
  4766                           ;psect for function _Temp_Main
  4767  1A80                     _Temp_Main:	
  4768                           
  4769                           ;OverTemperature_B1.c: 53: setTemp_Main();
  4770                           
  4771                           ;incstack = 0
  4772                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4773  1A80  318D  253F         	fcall	_setTemp_Main
  4774  1A82  0008               	return
  4775  1A83                     __end_of_Temp_Main:	
  4776                           
  4777                           	psect	text9
  4778  0D3F                     __ptext9:	
  4779 ;; *************** function _setTemp_Main *****************
  4780 ;; Defined at:
  4781 ;;		line 58 in file "../src/OverTemperature_B1.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;		None
  4786 ;; Return value:  Size  Location     Type
  4787 ;;		None               void
  4788 ;; Registers used:
  4789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4798 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4799 ;;Total ram usage:        2 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    6
  4802 ;; This function calls:
  4803 ;;		_getMain_All_Error_Status
  4804 ;; This function is called by:
  4805 ;;		_Temp_Main
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           
  4810                           ;psect for function _setTemp_Main
  4811  0D3F                     _setTemp_Main:	
  4812                           
  4813                           ;OverTemperature_B1.c: 59: if (Temp.Enable == 1) {
  4814                           
  4815                           ;incstack = 0
  4816                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4817  0D3F  0021               	movlb	1	; select bank1
  4818  0D40  1C58               	btfss	_Temp^(0+128),0
  4819  0D41  2DD4               	goto	l1876
  4820                           
  4821                           ;OverTemperature_B1.c: 60: if (Temp.ADtoGO == 0) {
  4822  0D42  1958               	btfsc	_Temp^(0+128),2
  4823  0D43  2D53               	goto	l9918
  4824                           
  4825                           ;OverTemperature_B1.c: 61: Temp.Time++;
  4826  0D44  3001               	movlw	1
  4827  0D45  07D9               	addwf	(_Temp^(0+128)+1),f
  4828  0D46  3000               	movlw	0
  4829  0D47  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  4830                           
  4831                           ;OverTemperature_B1.c: 62: if (Temp.Time >= 500) {
  4832  0D48  3001               	movlw	1
  4833  0D49  025A               	subwf	((_Temp+1)^(0+128)+1),w
  4834  0D4A  30F4               	movlw	244
  4835  0D4B  1903               	skipnz
  4836  0D4C  0259               	subwf	(_Temp^(0+128)+1),w
  4837  0D4D  1C03               	skipc
  4838  0D4E  0008               	return
  4839                           
  4840                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  4841  0D4F  01D9               	clrf	(_Temp^(0+128)+1)
  4842  0D50  01DA               	clrf	((_Temp+1)^(0+128)+1)
  4843                           
  4844                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  4845  0D51  1558               	bsf	_Temp^(0+128),2
  4846                           
  4847                           ;OverTemperature_B1.c: 65: }
  4848                           ;OverTemperature_B1.c: 66: } else {
  4849  0D52  0008               	return
  4850  0D53                     l9918:	
  4851                           
  4852                           ;OverTemperature_B1.c: 67: if (getMain_All_Error_Status(2) == 0) {
  4853  0D53  3002               	movlw	2
  4854  0D54  3191  2105  318D   	fcall	_getMain_All_Error_Status
  4855  0D57  3800               	iorlw	0
  4856  0D58  1D03               	skipz
  4857  0D59  0008               	return
  4858                           
  4859                           ;OverTemperature_B1.c: 68: Temp.Time++;
  4860  0D5A  3001               	movlw	1
  4861  0D5B  0021               	movlb	1	; select bank1
  4862  0D5C  07D9               	addwf	(_Temp^(0+128)+1),f
  4863  0D5D  3000               	movlw	0
  4864  0D5E  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  4865                           
  4866                           ;OverTemperature_B1.c: 69: if (Temp.Time >= 5) {
  4867  0D5F  3000               	movlw	0
  4868  0D60  025A               	subwf	((_Temp+1)^(0+128)+1),w
  4869  0D61  3005               	movlw	5
  4870  0D62  1903               	skipnz
  4871  0D63  0259               	subwf	(_Temp^(0+128)+1),w
  4872  0D64  1C03               	skipc
  4873  0D65  0008               	return
  4874                           
  4875                           ;OverTemperature_B1.c: 70: Temp.Time = 0;
  4876  0D66  01D9               	clrf	(_Temp^(0+128)+1)
  4877  0D67  01DA               	clrf	((_Temp+1)^(0+128)+1)
  4878                           
  4879                           ;OverTemperature_B1.c: 71: if (Temp.GO == 1) {
  4880  0D68  1E58               	btfss	_Temp^(0+128),4
  4881  0D69  0008               	return
  4882                           
  4883                           ;OverTemperature_B1.c: 72: Temp.ADtoGO = 0;
  4884  0D6A  1158               	bcf	_Temp^(0+128),2
  4885                           
  4886                           ;OverTemperature_B1.c: 73: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4887  0D6B  300A               	movlw	10
  4888  0D6C  3ED8               	addlw	_Temp& (0+255)
  4889  0D6D  0086               	movwf	6
  4890  0D6E  0187               	clrf	7
  4891  0D6F  3008               	movlw	8
  4892  0D70  3ED8               	addlw	_Temp& (0+255)
  4893  0D71  0084               	movwf	4
  4894  0D72  0185               	clrf	5
  4895  0D73  3F40               	moviw [0]fsr1
  4896  0D74  0700               	addwf	0,w
  4897  0D75  0020               	movlb	0	; select bank0
  4898  0D76  00A7               	movwf	??_setTemp_Main
  4899  0D77  3101               	addfsr 0,1
  4900  0D78  3F41               	moviw [1]fsr1
  4901  0D79  3D00               	addwfc	0,w
  4902  0D7A  00A8               	movwf	??_setTemp_Main+1
  4903  0D7B  36A8               	lsrf	??_setTemp_Main+1,f
  4904  0D7C  0CA7               	rrf	??_setTemp_Main,f
  4905  0D7D  0827               	movf	??_setTemp_Main,w
  4906  0D7E  0021               	movlb	1	; select bank1
  4907  0D7F  00DE               	movwf	(_Temp^(0+128)+6)
  4908  0D80  0020               	movlb	0	; select bank0
  4909  0D81  0828               	movf	??_setTemp_Main+1,w
  4910  0D82  0021               	movlb	1	; select bank1
  4911  0D83  00DF               	movwf	((_Temp+1)^(0+128)+6)
  4912                           
  4913                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 600;
  4914  0D84  3058               	movlw	88
  4915  0D85  00E6               	movwf	(_Temp^(0+128)+14)
  4916  0D86  3002               	movlw	2
  4917  0D87  00E7               	movwf	(_Temp^(0+128)+15)
  4918                           
  4919                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 550;
  4920  0D88  3026               	movlw	38
  4921  0D89  00E8               	movwf	(_Temp^(0+128)+16)
  4922  0D8A  3002               	movlw	2
  4923  0D8B  00E9               	movwf	(_Temp^(0+128)+17)
  4924                           
  4925                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  4926  0D8C  1CD8               	btfss	_Temp^(0+128),1
  4927  0D8D  2DA3               	goto	l9948
  4928                           
  4929                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  4930  0D8E  0867               	movf	((_Temp+1)^(0+128)+14),w
  4931  0D8F  025F               	subwf	((_Temp+1)^(0+128)+6),w
  4932  0D90  1D03               	skipz
  4933  0D91  2D94               	goto	u10935
  4934  0D92  0866               	movf	(_Temp^(0+128)+14),w
  4935  0D93  025E               	subwf	(_Temp^(0+128)+6),w
  4936  0D94                     u10935:	
  4937  0D94  1C03               	skipc
  4938  0D95  2DB8               	goto	l9958
  4939                           
  4940                           ;OverTemperature_B1.c: 92: Temp.Count++;
  4941  0D96  3001               	movlw	1
  4942  0D97  0020               	movlb	0	; select bank0
  4943  0D98  00A7               	movwf	??_setTemp_Main
  4944  0D99  0827               	movf	??_setTemp_Main,w
  4945  0D9A  0021               	movlb	1	; select bank1
  4946  0D9B  07DB               	addwf	(_Temp^(0+128)+3),f
  4947                           
  4948                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  4949  0D9C  3003               	movlw	3
  4950  0D9D  025B               	subwf	(_Temp^(0+128)+3),w
  4951  0D9E  1C03               	skipc
  4952  0D9F  2DB9               	goto	l9960
  4953                           
  4954                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  4955  0DA0  01DB               	clrf	(_Temp^(0+128)+3)
  4956                           
  4957                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  4958  0DA1  10D8               	bcf	_Temp^(0+128),1
  4959                           
  4960                           ;OverTemperature_B1.c: 96: }
  4961                           ;OverTemperature_B1.c: 97: } else {
  4962  0DA2  2DB9               	goto	l9960
  4963  0DA3                     l9948:	
  4964                           ;OverTemperature_B1.c: 99: }
  4965                           ;OverTemperature_B1.c: 100: } else {
  4966                           
  4967                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  4968                           
  4969                           
  4970                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  4971  0DA3  085F               	movf	((_Temp+1)^(0+128)+6),w
  4972  0DA4  0269               	subwf	((_Temp+1)^(0+128)+16),w
  4973  0DA5  1D03               	skipz
  4974  0DA6  2DA9               	goto	u10955
  4975  0DA7  085E               	movf	(_Temp^(0+128)+6),w
  4976  0DA8  0268               	subwf	(_Temp^(0+128)+16),w
  4977  0DA9                     u10955:	
  4978  0DA9  1C03               	skipc
  4979  0DAA  2DB8               	goto	l9958
  4980                           
  4981                           ;OverTemperature_B1.c: 102: Temp.Count++;
  4982  0DAB  3001               	movlw	1
  4983  0DAC  0020               	movlb	0	; select bank0
  4984  0DAD  00A7               	movwf	??_setTemp_Main
  4985  0DAE  0827               	movf	??_setTemp_Main,w
  4986  0DAF  0021               	movlb	1	; select bank1
  4987  0DB0  07DB               	addwf	(_Temp^(0+128)+3),f
  4988                           
  4989                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  4990  0DB1  3003               	movlw	3
  4991  0DB2  025B               	subwf	(_Temp^(0+128)+3),w
  4992  0DB3  1C03               	skipc
  4993  0DB4  2DB9               	goto	l9960
  4994                           
  4995                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  4996  0DB5  01DB               	clrf	(_Temp^(0+128)+3)
  4997                           
  4998                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  4999  0DB6  14D8               	bsf	_Temp^(0+128),1
  5000                           
  5001                           ;OverTemperature_B1.c: 106: }
  5002                           ;OverTemperature_B1.c: 107: } else {
  5003  0DB7  2DB9               	goto	l9960
  5004  0DB8                     l9958:	
  5005                           
  5006                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5007  0DB8  01DB               	clrf	(_Temp^(0+128)+3)
  5008  0DB9                     l9960:	
  5009                           
  5010                           ;OverTemperature_B1.c: 109: }
  5011                           ;OverTemperature_B1.c: 110: }
  5012                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5013  0DB9  085F               	movf	((_Temp+1)^(0+128)+6),w
  5014  0DBA  0020               	movlb	0	; select bank0
  5015  0DBB  00A7               	movwf	??_setTemp_Main
  5016  0DBC  087B               	movf	_product,w
  5017  0DBD  3E18               	addlw	24
  5018  0DBE  0086               	movwf	6
  5019  0DBF  3002               	movlw	2	; select bank4/5
  5020  0DC0  0087               	movwf	7
  5021  0DC1  0827               	movf	??_setTemp_Main,w
  5022  0DC2  0081               	movwf	1
  5023                           
  5024                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5025  0DC3  0021               	movlb	1	; select bank1
  5026  0DC4  085E               	movf	(_Temp^(0+128)+6),w
  5027  0DC5  0020               	movlb	0	; select bank0
  5028  0DC6  00A7               	movwf	??_setTemp_Main
  5029  0DC7  087B               	movf	_product,w
  5030  0DC8  3E19               	addlw	25
  5031  0DC9  0086               	movwf	6
  5032  0DCA  3002               	movlw	2	; select bank4/5
  5033  0DCB  0087               	movwf	7
  5034  0DCC  0827               	movf	??_setTemp_Main,w
  5035  0DCD  0081               	movwf	1
  5036                           
  5037                           ;OverTemperature_B1.c: 115: Temp.ADH[0] = 0;
  5038  0DCE  0021               	movlb	1	; select bank1
  5039  0DCF  01E0               	clrf	(_Temp^(0+128)+8)
  5040  0DD0  01E1               	clrf	((_Temp+1)^(0+128)+8)
  5041                           
  5042                           ;OverTemperature_B1.c: 116: Temp.ADH[1] = 0;
  5043  0DD1  01E2               	clrf	(_Temp^(0+128)+10)
  5044  0DD2  01E3               	clrf	((_Temp+1)^(0+128)+10)
  5045                           
  5046                           ;OverTemperature_B1.c: 117: }
  5047                           ;OverTemperature_B1.c: 118: }
  5048                           ;OverTemperature_B1.c: 119: }
  5049                           ;OverTemperature_B1.c: 120: }
  5050                           ;OverTemperature_B1.c: 121: } else {
  5051  0DD3  0008               	return
  5052  0DD4                     l1876:	
  5053                           
  5054                           ;OverTemperature_B1.c: 122: if (myMain.PowerON == 1) {
  5055  0DD4  1C20               	btfss	_myMain^(0+128),0
  5056  0DD5  0008               	return
  5057                           
  5058                           ;OverTemperature_B1.c: 123: Temp.Enable = 1;
  5059  0DD6  1458               	bsf	_Temp^(0+128),0
  5060  0DD7  0008               	return
  5061  0DD8                     __end_of_setTemp_Main:	
  5062                           
  5063                           	psect	text10
  5064  1A7D                     __ptext10:	
  5065 ;; *************** function _Temp_Initialization *****************
  5066 ;; Defined at:
  5067 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;		None
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;		None
  5072 ;; Return value:  Size  Location     Type
  5073 ;;		None               void
  5074 ;; Registers used:
  5075 ;;		status,2, status,0, pclath, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;Total ram usage:        0 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    6
  5088 ;; This function calls:
  5089 ;;		_setTemp_Initialization
  5090 ;; This function is called by:
  5091 ;;		_main
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           
  5096                           ;psect for function _Temp_Initialization
  5097  1A7D                     _Temp_Initialization:	
  5098                           
  5099                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5100                           
  5101                           ;incstack = 0
  5102                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5103  1A7D  3188  2000         	fcall	_setTemp_Initialization
  5104  1A7F  0008               	return
  5105  1A80                     __end_of_Temp_Initialization:	
  5106                           
  5107                           	psect	text11
  5108  0800                     __ptext11:	
  5109 ;; *************** function _setTemp_Initialization *****************
  5110 ;; Defined at:
  5111 ;;		line 46 in file "../src/OverTemperature_B1.c"
  5112 ;; Parameters:    Size  Location     Type
  5113 ;;		None
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;		None
  5116 ;; Return value:  Size  Location     Type
  5117 ;;		None               void
  5118 ;; Registers used:
  5119 ;;		None
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 0/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5129 ;;Total ram usage:        0 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:    5
  5132 ;; This function calls:
  5133 ;;		Nothing
  5134 ;; This function is called by:
  5135 ;;		_Temp_Initialization
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           
  5140                           ;psect for function _setTemp_Initialization
  5141  0800                     _setTemp_Initialization:	
  5142                           
  5143                           ;incstack = 0
  5144                           ; Regs used in _setTemp_Initialization: []
  5145  0800  0008               	return
  5146  0801                     __end_of_setTemp_Initialization:	
  5147                           
  5148                           	psect	text12
  5149  1EEC                     __ptext12:	
  5150 ;; *************** function _Switch_Main *****************
  5151 ;; Defined at:
  5152 ;;		line 72 in file "../src/Switch_B1.c"
  5153 ;; Parameters:    Size  Location     Type
  5154 ;;		None
  5155 ;; Auto vars:     Size  Location     Type
  5156 ;;  error           1   77[BANK0 ] unsigned char 
  5157 ;; Return value:  Size  Location     Type
  5158 ;;		None               void
  5159 ;; Registers used:
  5160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5161 ;; Tracked objects:
  5162 ;;		On entry : 0/0
  5163 ;;		On exit  : 0/0
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5169 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5170 ;;Total ram usage:        2 bytes
  5171 ;; Hardware stack levels used:    1
  5172 ;; Hardware stack levels required when called:   12
  5173 ;; This function calls:
  5174 ;;		_TouchPower
  5175 ;;		_getMain_All_Error_Status
  5176 ;;		_setMain_Exception
  5177 ;;		_setSw_Main
  5178 ;; This function is called by:
  5179 ;;		_main
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           
  5184                           ;psect for function _Switch_Main
  5185  1EEC                     _Switch_Main:	
  5186                           
  5187                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5188                           
  5189                           ;incstack = 0
  5190                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5191  1EEC  3000               	movlw	0
  5192  1EED  3191  2105  319E   	fcall	_getMain_All_Error_Status
  5193  1EF0  0020               	movlb	0	; select bank0
  5194  1EF1  00EC               	movwf	??_Switch_Main
  5195  1EF2  086C               	movf	??_Switch_Main,w
  5196  1EF3  00ED               	movwf	Switch_Main@error
  5197                           
  5198                           ;Switch_B1.c: 74: if (error != 0) {
  5199  1EF4  086D               	movf	Switch_Main@error,w
  5200  1EF5  1903               	btfsc	3,2
  5201  1EF6  2EFC               	goto	l2634
  5202                           
  5203                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5204  1EF7  0021               	movlb	1	; select bank1
  5205  1EF8  1853               	btfsc	_SwDetect^(0+128),0
  5206  1EF9  2F05               	goto	l10610
  5207                           
  5208                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5209  1EFA  1453               	bsf	_SwDetect^(0+128),0
  5210  1EFB  2F00               	goto	L2
  5211  1EFC                     l2634:	
  5212                           ;Switch_B1.c: 80: }
  5213                           ;Switch_B1.c: 81: } else {
  5214                           
  5215                           ;Switch_B1.c: 78: setMain_Exception(error);
  5216                           
  5217                           
  5218                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5219  1EFC  0021               	movlb	1	; select bank1
  5220  1EFD  1C53               	btfss	_SwDetect^(0+128),0
  5221  1EFE  2F05               	goto	l10610
  5222                           
  5223                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5224  1EFF  1053               	bcf	_SwDetect^(0+128),0
  5225  1F00                     L2:	
  5226                           
  5227                           ;Switch_B1.c: 85: setMain_Exception(error);
  5228  1F00  0020               	movlb	0	; select bank0
  5229  1F01  086D               	movf	Switch_Main@error,w
  5230  1F02  3195  2523  319E   	fcall	_setMain_Exception
  5231  1F05                     l10610:	
  5232                           
  5233                           ;Switch_B1.c: 87: }
  5234                           ;Switch_B1.c: 88: }
  5235                           ;Switch_B1.c: 91: setSw_Main(1);
  5236  1F05  3001               	movlw	1
  5237  1F06  3183  23CF  319E   	fcall	_setSw_Main
  5238                           
  5239                           ;Switch_B1.c: 95: setSw_Main(2);
  5240  1F09  3002               	movlw	2
  5241  1F0A  3183  23CF  319E   	fcall	_setSw_Main
  5242                           
  5243                           ;Switch_B1.c: 103: TouchPower();
  5244  1F0D  319C  24CF         	fcall	_TouchPower
  5245  1F0F  0008               	return
  5246  1F10                     __end_of_Switch_Main:	
  5247                           
  5248                           	psect	text13
  5249  03CF                     __ptext13:	
  5250 ;; *************** function _setSw_Main *****************
  5251 ;; Defined at:
  5252 ;;		line 137 in file "../src/Switch_B1.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;  sw              1    wreg     unsigned char 
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;  sw              1   72[BANK0 ] unsigned char 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;		None               void
  5259 ;; Registers used:
  5260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;Total ram usage:        3 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:   10
  5273 ;; This function calls:
  5274 ;;		_SwPointSelect
  5275 ;;		_getSw_KeyStatus
  5276 ;;		_setBuz
  5277 ;;		_setDimmerLights_AdjControl
  5278 ;;		_setDimmerLights_SwOff
  5279 ;;		_setDimmerLights_SwOn
  5280 ;;		_setRF_Learn
  5281 ;; This function is called by:
  5282 ;;		_Switch_Main
  5283 ;; This function uses a non-reentrant model
  5284 ;;
  5285                           
  5286                           
  5287                           ;psect for function _setSw_Main
  5288  03CF                     _setSw_Main:	
  5289                           
  5290                           ;incstack = 0
  5291                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5292                           ;setSw_Main@sw stored from wreg
  5293  03CF  0020               	movlb	0	; select bank0
  5294  03D0  00E8               	movwf	setSw_Main@sw
  5295                           
  5296                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5297  03D1  0868               	movf	setSw_Main@sw,w
  5298  03D2  319C  2491  3183   	fcall	_SwPointSelect
  5299                           
  5300                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5301  03D5  0879               	movf	_Sw,w
  5302  03D6  0086               	movwf	6
  5303  03D7  3001               	movlw	1	; select bank2/3
  5304  03D8  0087               	movwf	7
  5305  03D9  1C01               	btfss	1,0
  5306  03DA  2D35               	goto	l2644
  5307                           
  5308                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5309  03DB  0021               	movlb	1	; select bank1
  5310  03DC  1853               	btfsc	_SwDetect^(0+128),0
  5311  03DD  2BF9               	goto	l10100
  5312                           
  5313                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5314  03DE  0A79               	incf	_Sw,w
  5315  03DF  0086               	movwf	6
  5316  03E0  3001               	movlw	1	; select bank2/3
  5317  03E1  0087               	movwf	7
  5318  03E2  1081               	bcf	1,1
  5319                           
  5320                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5321  03E3  0020               	movlb	0	; select bank0
  5322  03E4  0868               	movf	setSw_Main@sw,w
  5323  03E5  319E  2604  3183   	fcall	_getSw_KeyStatus
  5324  03E8  3A01               	xorlw	1
  5325  03E9  3000               	movlw	0
  5326  03EA  1903               	skipnz
  5327  03EB  3001               	movlw	1
  5328  03EC  0020               	movlb	0	; select bank0
  5329  03ED  00E6               	movwf	??_setSw_Main
  5330  03EE  0879               	movf	_Sw,w
  5331  03EF  0086               	movwf	6
  5332  03F0  3001               	movlw	1	; select bank2/3
  5333  03F1  0087               	movwf	7
  5334  03F2  0DE6               	rlf	??_setSw_Main,f
  5335  03F3  0801               	movf	1,w
  5336  03F4  0666               	xorwf	??_setSw_Main,w
  5337  03F5  39FD               	andlw	-3
  5338  03F6  0666               	xorwf	??_setSw_Main,w
  5339  03F7  0081               	movwf	1
  5340                           
  5341                           ;Switch_B1.c: 143: } else {
  5342  03F8  2C0E               	goto	l2646
  5343  03F9                     l10100:	
  5344                           
  5345                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5346  03F9  0A79               	incf	_Sw,w
  5347  03FA  0086               	movwf	6
  5348  03FB  3001               	movlw	1	; select bank2/3
  5349  03FC  0087               	movwf	7
  5350  03FD  1881               	btfsc	1,1
  5351  03FE  2C0E               	goto	l2646
  5352                           
  5353                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5354  03FF  0A79               	incf	_Sw,w
  5355  0400  0086               	movwf	6
  5356  0401  3001               	movlw	1	; select bank2/3
  5357  0402  0087               	movwf	7
  5358  0403  1481               	bsf	1,1
  5359                           
  5360                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5361  0404  0879               	movf	_Sw,w
  5362  0405  0086               	movwf	6
  5363  0406  3001               	movlw	1	; select bank2/3
  5364  0407  0087               	movwf	7
  5365  0408  1081               	bcf	1,1
  5366                           
  5367                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5368  0409  0879               	movf	_Sw,w
  5369  040A  0086               	movwf	6
  5370  040B  3001               	movlw	1	; select bank2/3
  5371  040C  0087               	movwf	7
  5372  040D  1501               	bsf	1,2
  5373  040E                     l2646:	
  5374                           
  5375                           ;Switch_B1.c: 148: }
  5376                           ;Switch_B1.c: 149: }
  5377                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5378  040E  0879               	movf	_Sw,w
  5379  040F  0086               	movwf	6
  5380  0410  3001               	movlw	1	; select bank2/3
  5381  0411  0087               	movwf	7
  5382  0412  1C81               	btfss	1,1
  5383  0413  2CDE               	goto	l10150
  5384                           
  5385                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5386  0414  0879               	movf	_Sw,w
  5387  0415  0086               	movwf	6
  5388  0416  3001               	movlw	1	; select bank2/3
  5389  0417  0087               	movwf	7
  5390  0418  1901               	btfsc	1,2
  5391  0419  2C3C               	goto	l10116
  5392                           
  5393                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5394  041A  3001               	movlw	1
  5395  041B  0020               	movlb	0	; select bank0
  5396  041C  00E6               	movwf	??_setSw_Main
  5397  041D  0879               	movf	_Sw,w
  5398  041E  3E02               	addlw	2
  5399  041F  0086               	movwf	6
  5400  0420  3001               	movlw	1	; select bank2/3
  5401  0421  0087               	movwf	7
  5402  0422  0866               	movf	??_setSw_Main,w
  5403  0423  0781               	addwf	1,f
  5404                           
  5405                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5406  0424  0879               	movf	_Sw,w
  5407  0425  3E02               	addlw	2
  5408  0426  0086               	movwf	6
  5409  0427  3001               	movlw	1	; select bank2/3
  5410  0428  0087               	movwf	7
  5411  0429  3005               	movlw	5
  5412  042A  0201               	subwf	1,w
  5413  042B  1C03               	skipc
  5414  042C  0008               	return
  5415                           
  5416                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5417  042D  0879               	movf	_Sw,w
  5418  042E  3E02               	addlw	2
  5419  042F  0086               	movwf	6
  5420  0430  3001               	movlw	1	; select bank2/3
  5421  0431  0087               	movwf	7
  5422  0432  0181               	clrf	1
  5423                           
  5424                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5425  0433  0879               	movf	_Sw,w
  5426  0434  0086               	movwf	6
  5427  0435  3001               	movlw	1	; select bank2/3
  5428  0436  0087               	movwf	7
  5429  0437  1501               	bsf	1,2
  5430                           
  5431                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5432  0438  0868               	movf	setSw_Main@sw,w
  5433  0439  3192  2287         	fcall	_setDimmerLights_SwOn
  5434                           
  5435                           ;Switch_B1.c: 162: }
  5436                           ;Switch_B1.c: 163: } else {
  5437  043B  0008               	return
  5438  043C                     l10116:	
  5439                           
  5440                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5441  043C  0879               	movf	_Sw,w
  5442  043D  0086               	movwf	6
  5443  043E  3001               	movlw	1	; select bank2/3
  5444  043F  0087               	movwf	7
  5445  0440  1981               	btfsc	1,3
  5446  0441  2C6E               	goto	l10126
  5447                           
  5448                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5449  0442  0879               	movf	_Sw,w
  5450  0443  3E03               	addlw	3
  5451  0444  0086               	movwf	6
  5452  0445  3001               	movlw	1	; select bank2/3
  5453  0446  0087               	movwf	7
  5454  0447  3001               	movlw	1
  5455  0448  0781               	addwf	1,f
  5456  0449  3141               	addfsr 1,1
  5457  044A  1803               	skipnc
  5458  044B  0A81               	incf	1,f
  5459                           
  5460                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5461  044C  0879               	movf	_Sw,w
  5462  044D  3E03               	addlw	3
  5463  044E  0086               	movwf	6
  5464  044F  3001               	movlw	1	; select bank2/3
  5465  0450  0087               	movwf	7
  5466  0451  3F40               	moviw [0]fsr1
  5467  0452  0020               	movlb	0	; select bank0
  5468  0453  00E6               	movwf	??_setSw_Main
  5469  0454  3F41               	moviw [1]fsr1
  5470  0455  00E7               	movwf	??_setSw_Main+1
  5471  0456  3000               	movlw	0
  5472  0457  0267               	subwf	??_setSw_Main+1,w
  5473  0458  3096               	movlw	150
  5474  0459  1903               	skipnz
  5475  045A  0266               	subwf	??_setSw_Main,w
  5476  045B  1C03               	skipc
  5477  045C  0008               	return
  5478                           
  5479                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5480  045D  0879               	movf	_Sw,w
  5481  045E  3E03               	addlw	3
  5482  045F  0086               	movwf	6
  5483  0460  3001               	movlw	1	; select bank2/3
  5484  0461  0087               	movwf	7
  5485  0462  3000               	movlw	0
  5486  0463  3FC0               	movwi [0]fsr1
  5487  0464  3FC1               	movwi [1]fsr1
  5488                           
  5489                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5490  0465  0879               	movf	_Sw,w
  5491  0466  0086               	movwf	6
  5492  0467  3001               	movlw	1	; select bank2/3
  5493  0468  0087               	movwf	7
  5494  0469  1581               	bsf	1,3
  5495                           
  5496                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5497  046A  0868               	movf	setSw_Main@sw,w
  5498  046B  3190  207A         	fcall	_setDimmerLights_AdjControl
  5499                           
  5500                           ;Switch_B1.c: 174: }
  5501                           ;Switch_B1.c: 175: } else {
  5502  046D  0008               	return
  5503  046E                     l10126:	
  5504                           
  5505                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5506  046E  0879               	movf	_Sw,w
  5507  046F  0086               	movwf	6
  5508  0470  3001               	movlw	1	; select bank2/3
  5509  0471  0087               	movwf	7
  5510  0472  1A01               	btfsc	1,4
  5511  0473  2CAC               	goto	l10140
  5512                           
  5513                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5514  0474  0879               	movf	_Sw,w
  5515  0475  3E05               	addlw	5
  5516  0476  0086               	movwf	6
  5517  0477  3001               	movlw	1	; select bank2/3
  5518  0478  0087               	movwf	7
  5519  0479  3001               	movlw	1
  5520  047A  0781               	addwf	1,f
  5521  047B  3141               	addfsr 1,1
  5522  047C  1803               	skipnc
  5523  047D  0A81               	incf	1,f
  5524                           
  5525                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5526  047E  0879               	movf	_Sw,w
  5527  047F  3E05               	addlw	5
  5528  0480  0086               	movwf	6
  5529  0481  3001               	movlw	1	; select bank2/3
  5530  0482  0087               	movwf	7
  5531  0483  3F40               	moviw [0]fsr1
  5532  0484  0020               	movlb	0	; select bank0
  5533  0485  00E6               	movwf	??_setSw_Main
  5534  0486  3F41               	moviw [1]fsr1
  5535  0487  00E7               	movwf	??_setSw_Main+1
  5536  0488  3000               	movlw	0
  5537  0489  0267               	subwf	??_setSw_Main+1,w
  5538  048A  3096               	movlw	150
  5539  048B  1903               	skipnz
  5540  048C  0266               	subwf	??_setSw_Main,w
  5541  048D  1C03               	skipc
  5542  048E  0008               	return
  5543                           
  5544                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5545  048F  0879               	movf	_Sw,w
  5546  0490  3E05               	addlw	5
  5547  0491  0086               	movwf	6
  5548  0492  3001               	movlw	1	; select bank2/3
  5549  0493  0087               	movwf	7
  5550  0494  3000               	movlw	0
  5551  0495  3FC0               	movwi [0]fsr1
  5552  0496  3FC1               	movwi [1]fsr1
  5553                           
  5554                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5555  0497  0879               	movf	_Sw,w
  5556  0498  0086               	movwf	6
  5557  0499  3001               	movlw	1	; select bank2/3
  5558  049A  0087               	movwf	7
  5559  049B  1601               	bsf	1,4
  5560                           
  5561                           ;Switch_B1.c: 183: setRF_Learn(1);
  5562  049C  3001               	movlw	1
  5563  049D  3190  2066  3183   	fcall	_setRF_Learn
  5564                           
  5565                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5566  04A0  0021               	movlb	1	; select bank1
  5567  04A1  1EA0               	btfss	_myMain^(0+128),5
  5568  04A2  0008               	return
  5569                           
  5570                           ;Switch_B1.c: 186: setBuz(2, 100);
  5571  04A3  3064               	movlw	100
  5572  04A4  0020               	movlb	0	; select bank0
  5573  04A5  00A9               	movwf	setBuz@time
  5574  04A6  3000               	movlw	0
  5575  04A7  00AA               	movwf	setBuz@time+1
  5576  04A8  3002               	movlw	2
  5577  04A9  3195  25D1         	fcall	_setBuz
  5578                           
  5579                           ;Switch_B1.c: 187: }
  5580                           ;Switch_B1.c: 189: }
  5581                           ;Switch_B1.c: 190: } else {
  5582  04AB  0008               	return
  5583  04AC                     l10140:	
  5584                           
  5585                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5586  04AC  0879               	movf	_Sw,w
  5587  04AD  0086               	movwf	6
  5588  04AE  3001               	movlw	1	; select bank2/3
  5589  04AF  0087               	movwf	7
  5590  04B0  1A81               	btfsc	1,5
  5591  04B1  0008               	return
  5592                           
  5593                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5594  04B2  0879               	movf	_Sw,w
  5595  04B3  3E07               	addlw	7
  5596  04B4  0086               	movwf	6
  5597  04B5  3001               	movlw	1	; select bank2/3
  5598  04B6  0087               	movwf	7
  5599  04B7  3001               	movlw	1
  5600  04B8  0781               	addwf	1,f
  5601  04B9  3141               	addfsr 1,1
  5602  04BA  1803               	skipnc
  5603  04BB  0A81               	incf	1,f
  5604                           
  5605                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5606  04BC  0879               	movf	_Sw,w
  5607  04BD  3E07               	addlw	7
  5608  04BE  0086               	movwf	6
  5609  04BF  3001               	movlw	1	; select bank2/3
  5610  04C0  0087               	movwf	7
  5611  04C1  3F40               	moviw [0]fsr1
  5612  04C2  0020               	movlb	0	; select bank0
  5613  04C3  00E6               	movwf	??_setSw_Main
  5614  04C4  3F41               	moviw [1]fsr1
  5615  04C5  00E7               	movwf	??_setSw_Main+1
  5616  04C6  3001               	movlw	1
  5617  04C7  0267               	subwf	??_setSw_Main+1,w
  5618  04C8  302C               	movlw	44
  5619  04C9  1903               	skipnz
  5620  04CA  0266               	subwf	??_setSw_Main,w
  5621  04CB  1C03               	skipc
  5622  04CC  0008               	return
  5623                           
  5624                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5625  04CD  0879               	movf	_Sw,w
  5626  04CE  3E07               	addlw	7
  5627  04CF  0086               	movwf	6
  5628  04D0  3001               	movlw	1	; select bank2/3
  5629  04D1  0087               	movwf	7
  5630  04D2  3000               	movlw	0
  5631  04D3  3FC0               	movwi [0]fsr1
  5632  04D4  3FC1               	movwi [1]fsr1
  5633                           
  5634                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5635  04D5  0879               	movf	_Sw,w
  5636  04D6  0086               	movwf	6
  5637  04D7  3001               	movlw	1	; select bank2/3
  5638  04D8  0087               	movwf	7
  5639  04D9  1681               	bsf	1,5
  5640                           
  5641                           ;Switch_B1.c: 198: setRF_Learn(0);
  5642  04DA  3000               	movlw	0
  5643  04DB  3190  2066         	fcall	_setRF_Learn
  5644                           
  5645                           ;Switch_B1.c: 201: }
  5646                           ;Switch_B1.c: 202: }
  5647                           ;Switch_B1.c: 203: }
  5648                           ;Switch_B1.c: 204: }
  5649                           ;Switch_B1.c: 205: }
  5650                           ;Switch_B1.c: 206: } else {
  5651  04DD  0008               	return
  5652  04DE                     l10150:	
  5653                           
  5654                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5655  04DE  0879               	movf	_Sw,w
  5656  04DF  0086               	movwf	6
  5657  04E0  3001               	movlw	1	; select bank2/3
  5658  04E1  0087               	movwf	7
  5659  04E2  1D01               	btfss	1,2
  5660  04E3  0008               	return
  5661                           
  5662                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5663  04E4  3001               	movlw	1
  5664  04E5  0020               	movlb	0	; select bank0
  5665  04E6  00E6               	movwf	??_setSw_Main
  5666  04E7  0879               	movf	_Sw,w
  5667  04E8  3E02               	addlw	2
  5668  04E9  0086               	movwf	6
  5669  04EA  3001               	movlw	1	; select bank2/3
  5670  04EB  0087               	movwf	7
  5671  04EC  0866               	movf	??_setSw_Main,w
  5672  04ED  0781               	addwf	1,f
  5673                           
  5674                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5675  04EE  0879               	movf	_Sw,w
  5676  04EF  3E02               	addlw	2
  5677  04F0  0086               	movwf	6
  5678  04F1  3001               	movlw	1	; select bank2/3
  5679  04F2  0087               	movwf	7
  5680  04F3  3005               	movlw	5
  5681  04F4  0201               	subwf	1,w
  5682  04F5  1C03               	skipc
  5683  04F6  0008               	return
  5684                           
  5685                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5686  04F7  0879               	movf	_Sw,w
  5687  04F8  3E02               	addlw	2
  5688  04F9  0086               	movwf	6
  5689  04FA  3001               	movlw	1	; select bank2/3
  5690  04FB  0087               	movwf	7
  5691  04FC  0181               	clrf	1
  5692                           
  5693                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5694  04FD  0879               	movf	_Sw,w
  5695  04FE  0086               	movwf	6
  5696  04FF  3001               	movlw	1	; select bank2/3
  5697  0500  0087               	movwf	7
  5698  0501  1101               	bcf	1,2
  5699                           
  5700                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5701  0502  0879               	movf	_Sw,w
  5702  0503  3E03               	addlw	3
  5703  0504  0086               	movwf	6
  5704  0505  3001               	movlw	1	; select bank2/3
  5705  0506  0087               	movwf	7
  5706  0507  3000               	movlw	0
  5707  0508  3FC0               	movwi [0]fsr1
  5708  0509  3FC1               	movwi [1]fsr1
  5709                           
  5710                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5711  050A  0879               	movf	_Sw,w
  5712  050B  0086               	movwf	6
  5713  050C  3001               	movlw	1	; select bank2/3
  5714  050D  0087               	movwf	7
  5715  050E  1181               	bcf	1,3
  5716                           
  5717                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5718  050F  0879               	movf	_Sw,w
  5719  0510  3E05               	addlw	5
  5720  0511  0086               	movwf	6
  5721  0512  3001               	movlw	1	; select bank2/3
  5722  0513  0087               	movwf	7
  5723  0514  3000               	movlw	0
  5724  0515  3FC0               	movwi [0]fsr1
  5725  0516  3FC1               	movwi [1]fsr1
  5726                           
  5727                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5728  0517  0879               	movf	_Sw,w
  5729  0518  0086               	movwf	6
  5730  0519  3001               	movlw	1	; select bank2/3
  5731  051A  0087               	movwf	7
  5732  051B  1201               	bcf	1,4
  5733                           
  5734                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5735  051C  0879               	movf	_Sw,w
  5736  051D  3E07               	addlw	7
  5737  051E  0086               	movwf	6
  5738  051F  3001               	movlw	1	; select bank2/3
  5739  0520  0087               	movwf	7
  5740  0521  3000               	movlw	0
  5741  0522  3FC0               	movwi [0]fsr1
  5742  0523  3FC1               	movwi [1]fsr1
  5743                           
  5744                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5745  0524  0879               	movf	_Sw,w
  5746  0525  0086               	movwf	6
  5747  0526  3001               	movlw	1	; select bank2/3
  5748  0527  0087               	movwf	7
  5749  0528  1281               	bcf	1,5
  5750                           
  5751                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5752  0529  0021               	movlb	1	; select bank1
  5753  052A  1853               	btfsc	_SwDetect^(0+128),0
  5754  052B  2D31               	goto	l10176
  5755                           
  5756                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5757  052C  0020               	movlb	0	; select bank0
  5758  052D  0868               	movf	setSw_Main@sw,w
  5759  052E  3196  26DF  3183   	fcall	_setDimmerLights_SwOff
  5760  0531                     l10176:	
  5761                           
  5762                           ;Switch_B1.c: 221: }
  5763                           ;Switch_B1.c: 224: setRF_Learn(0);
  5764  0531  3000               	movlw	0
  5765  0532  3190  2066         	fcall	_setRF_Learn
  5766                           
  5767                           ;Switch_B1.c: 226: }
  5768                           ;Switch_B1.c: 227: }
  5769                           ;Switch_B1.c: 228: }
  5770                           ;Switch_B1.c: 229: } else {
  5771  0534  0008               	return
  5772  0535                     l2644:	
  5773                           
  5774                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5775  0535  0021               	movlb	1	; select bank1
  5776  0536  1C20               	btfss	_myMain^(0+128),0
  5777  0537  0008               	return
  5778                           
  5779                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5780  0538  0879               	movf	_Sw,w
  5781  0539  0086               	movwf	6
  5782  053A  3001               	movlw	1	; select bank2/3
  5783  053B  0087               	movwf	7
  5784  053C  1401               	bsf	1,0
  5785  053D  0008               	return
  5786  053E                     __end_of_setSw_Main:	
  5787                           
  5788                           	psect	text14
  5789  1066                     __ptext14:	
  5790 ;; *************** function _setRF_Learn *****************
  5791 ;; Defined at:
  5792 ;;		line 23 in file "../src/RF_Control_B1.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  command         1    wreg     unsigned char 
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;  command         1    1[BANK0 ] unsigned char 
  5797 ;; Return value:  Size  Location     Type
  5798 ;;		None               void
  5799 ;; Registers used:
  5800 ;;		wreg, status,2, status,0
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 0/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5810 ;;Total ram usage:        2 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; Hardware stack levels required when called:    5
  5813 ;; This function calls:
  5814 ;;		Nothing
  5815 ;; This function is called by:
  5816 ;;		_setSw_Main
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           
  5821                           ;psect for function _setRF_Learn
  5822  1066                     _setRF_Learn:	
  5823                           
  5824                           ;incstack = 0
  5825                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5826                           ;setRF_Learn@command stored from wreg
  5827  1066  0020               	movlb	0	; select bank0
  5828  1067  00A1               	movwf	setRF_Learn@command
  5829                           
  5830                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5831  1068  0821               	movf	setRF_Learn@command,w
  5832  1069  3A01               	xorlw	1
  5833  106A  3000               	movlw	0
  5834  106B  1903               	skipnz
  5835  106C  3001               	movlw	1
  5836  106D  00A0               	movwf	??_setRF_Learn
  5837  106E  0EA0               	swapf	??_setRF_Learn,f
  5838  106F  0DA0               	rlf	??_setRF_Learn,f
  5839  1070  0DA0               	rlf	??_setRF_Learn,f
  5840  1071  0021               	movlb	1	; select bank1
  5841  1072  083C               	movf	_RF1^(0+128),w
  5842  1073  0020               	movlb	0	; select bank0
  5843  1074  0620               	xorwf	??_setRF_Learn,w
  5844  1075  39BF               	andlw	-65
  5845  1076  0620               	xorwf	??_setRF_Learn,w
  5846  1077  0021               	movlb	1	; select bank1
  5847  1078  00BC               	movwf	_RF1^(0+128)
  5848  1079  0008               	return
  5849  107A                     __end_of_setRF_Learn:	
  5850                           
  5851                           	psect	text15
  5852  107A                     __ptext15:	
  5853 ;; *************** function _setDimmerLights_AdjControl *****************
  5854 ;; Defined at:
  5855 ;;		line 606 in file "../src/Dimmer_B1.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  sw              1    wreg     unsigned char 
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;  sw              1    7[BANK0 ] unsigned char 
  5860 ;;  idle            1    6[BANK0 ] unsigned char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;		None               void
  5863 ;; Registers used:
  5864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5871 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5872 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;Total ram usage:        3 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    7
  5877 ;; This function calls:
  5878 ;;		_DimmerLightsPointSelect
  5879 ;;		_getAll_DimmerLights_AdjGO
  5880 ;;		_setDimmerLights_TriggerAdj
  5881 ;; This function is called by:
  5882 ;;		_setSw_Main
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           
  5887                           ;psect for function _setDimmerLights_AdjControl
  5888  107A                     _setDimmerLights_AdjControl:	
  5889                           
  5890                           ;incstack = 0
  5891                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5892                           ;setDimmerLights_AdjControl@sw stored from wreg
  5893  107A  0020               	movlb	0	; select bank0
  5894  107B  00A7               	movwf	setDimmerLights_AdjControl@sw
  5895                           
  5896                           ;Dimmer_B1.c: 607: DimmerLightsPointSelect(sw);
  5897  107C  0827               	movf	setDimmerLights_AdjControl@sw,w
  5898  107D  319C  2430  3190   	fcall	_DimmerLightsPointSelect
  5899                           
  5900                           ;Dimmer_B1.c: 608: char idle = 0;
  5901  1080  0020               	movlb	0	; select bank0
  5902  1081  01A6               	clrf	setDimmerLights_AdjControl@idle
  5903                           
  5904                           ;Dimmer_B1.c: 610: idle = getAll_DimmerLights_AdjGO();
  5905  1082  319C  24FA  3190   	fcall	_getAll_DimmerLights_AdjGO
  5906  1085  0020               	movlb	0	; select bank0
  5907  1086  00A5               	movwf	??_setDimmerLights_AdjControl
  5908  1087  0825               	movf	??_setDimmerLights_AdjControl,w
  5909  1088  00A6               	movwf	setDimmerLights_AdjControl@idle
  5910                           
  5911                           ;Dimmer_B1.c: 612: if (idle == 0) {
  5912  1089  08A6               	movf	setDimmerLights_AdjControl@idle,f
  5913  108A  1D03               	skipz
  5914  108B  0008               	return
  5915                           
  5916                           ;Dimmer_B1.c: 613: if (DimmerLights->SwFlag == 1) {
  5917  108C  0877               	movf	_DimmerLights,w
  5918  108D  3E09               	addlw	9
  5919  108E  0086               	movwf	6
  5920  108F  3001               	movlw	1	; select bank2/3
  5921  1090  0087               	movwf	7
  5922  1091  1F01               	btfss	1,6
  5923  1092  0008               	return
  5924                           
  5925                           ;Dimmer_B1.c: 614: DimmerLights->SwAdj = 1;
  5926  1093  0877               	movf	_DimmerLights,w
  5927  1094  3E09               	addlw	9
  5928  1095  0086               	movwf	6
  5929  1096  3001               	movlw	1	; select bank2/3
  5930  1097  0087               	movwf	7
  5931  1098  1781               	bsf	1,7
  5932                           
  5933                           ;Dimmer_B1.c: 615: DimmerLights->Status = 1;
  5934  1099  0877               	movf	_DimmerLights,w
  5935  109A  0086               	movwf	6
  5936  109B  3001               	movlw	1	; select bank2/3
  5937  109C  0087               	movwf	7
  5938  109D  1681               	bsf	1,5
  5939                           
  5940                           ;Dimmer_B1.c: 616: setDimmerLights_TriggerAdj(sw, 1);
  5941  109E  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5942  109F  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5943  10A0  0827               	movf	setDimmerLights_AdjControl@sw,w
  5944  10A1  319E  2623         	fcall	_setDimmerLights_TriggerAdj
  5945  10A3  0008               	return
  5946  10A4                     __end_of_setDimmerLights_AdjControl:	
  5947                           
  5948                           	psect	text16
  5949  1E04                     __ptext16:	
  5950 ;; *************** function _getSw_KeyStatus *****************
  5951 ;; Defined at:
  5952 ;;		line 519 in file "../src/Dimmer_B1.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;  sw              1    wreg     unsigned char 
  5955 ;; Auto vars:     Size  Location     Type
  5956 ;;  sw              1    4[BANK0 ] unsigned char 
  5957 ;;  status          1    3[BANK0 ] unsigned char 
  5958 ;; Return value:  Size  Location     Type
  5959 ;;                  1    wreg      unsigned char 
  5960 ;; Registers used:
  5961 ;;		wreg, status,2
  5962 ;; Tracked objects:
  5963 ;;		On entry : 0/0
  5964 ;;		On exit  : 0/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5970 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;Total ram usage:        5 bytes
  5972 ;; Hardware stack levels used:    1
  5973 ;; Hardware stack levels required when called:    5
  5974 ;; This function calls:
  5975 ;;		Nothing
  5976 ;; This function is called by:
  5977 ;;		_setSw_Main
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           
  5982                           ;psect for function _getSw_KeyStatus
  5983  1E04                     _getSw_KeyStatus:	
  5984                           
  5985                           ;incstack = 0
  5986                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  5987                           ;getSw_KeyStatus@sw stored from wreg
  5988  1E04  0020               	movlb	0	; select bank0
  5989  1E05  00A4               	movwf	getSw_KeyStatus@sw
  5990                           
  5991                           ;Dimmer_B1.c: 520: char status = 0;
  5992  1E06  01A3               	clrf	getSw_KeyStatus@status
  5993                           
  5994                           ;Dimmer_B1.c: 532: if (sw == 1) {
  5995  1E07  0824               	movf	getSw_KeyStatus@sw,w
  5996  1E08  3A01               	xorlw	1
  5997  1E09  1D03               	skipz
  5998  1E0A  2E13               	goto	l9350
  5999                           
  6000                           ;Dimmer_B1.c: 533: status = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  6001  1E0B  01A1               	clrf	_getSw_KeyStatus$2558
  6002  1E0C  0AA1               	incf	_getSw_KeyStatus$2558,f
  6003  1E0D  1F0C               	btfss	12,6	;volatile
  6004  1E0E  1A0C               	btfsc	12,4	;volatile
  6005  1E0F  2E11               	goto	l9348
  6006  1E10  01A1               	clrf	_getSw_KeyStatus$2558
  6007  1E11                     l9348:	
  6008  1E11  0821               	movf	_getSw_KeyStatus$2558,w
  6009  1E12  2E1E               	goto	L3
  6010  1E13                     l9350:	
  6011                           ;Dimmer_B1.c: 534: } else if (sw == 2) {
  6012                           
  6013  1E13  0824               	movf	getSw_KeyStatus@sw,w
  6014  1E14  3A02               	xorlw	2
  6015  1E15  1D03               	skipz
  6016  1E16  2E21               	goto	l9360
  6017                           
  6018                           ;Dimmer_B1.c: 535: status = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  6019  1E17  01A2               	clrf	_getSw_KeyStatus$2559
  6020  1E18  0AA2               	incf	_getSw_KeyStatus$2559,f
  6021  1E19  1C0C               	btfss	12,0	;volatile
  6022  1E1A  188D               	btfsc	13,1	;volatile
  6023  1E1B  2E1D               	goto	l9358
  6024  1E1C  01A2               	clrf	_getSw_KeyStatus$2559
  6025  1E1D                     l9358:	
  6026  1E1D  0822               	movf	_getSw_KeyStatus$2559,w
  6027  1E1E                     L3:	
  6028  1E1E  00A0               	movwf	??_getSw_KeyStatus
  6029  1E1F  0820               	movf	??_getSw_KeyStatus,w
  6030  1E20  00A3               	movwf	getSw_KeyStatus@status
  6031  1E21                     l9360:	
  6032                           
  6033                           ;Dimmer_B1.c: 536: }
  6034                           ;Dimmer_B1.c: 543: return status;
  6035  1E21  0823               	movf	getSw_KeyStatus@status,w
  6036  1E22  0008               	return
  6037  1E23                     __end_of_getSw_KeyStatus:	
  6038                           
  6039                           	psect	text17
  6040  1C91                     __ptext17:	
  6041 ;; *************** function _SwPointSelect *****************
  6042 ;; Defined at:
  6043 ;;		line 25 in file "../src/Switch_B1.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;  sw              1    wreg     unsigned char 
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;  sw              1    1[BANK0 ] unsigned char 
  6048 ;; Return value:  Size  Location     Type
  6049 ;;		None               void
  6050 ;; Registers used:
  6051 ;;		wreg
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6060 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6061 ;;Total ram usage:        2 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; Hardware stack levels required when called:    5
  6064 ;; This function calls:
  6065 ;;		Nothing
  6066 ;; This function is called by:
  6067 ;;		_setSw_Main
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           
  6072                           ;psect for function _SwPointSelect
  6073  1C91                     _SwPointSelect:	
  6074                           
  6075                           ;incstack = 0
  6076                           ; Regs used in _SwPointSelect: [wreg]
  6077                           ;SwPointSelect@sw stored from wreg
  6078  1C91  0020               	movlb	0	; select bank0
  6079  1C92  00A1               	movwf	SwPointSelect@sw
  6080                           
  6081                           ;Switch_B1.c: 28: if (sw == 1) {
  6082  1C93  0821               	movf	SwPointSelect@sw,w
  6083  1C94  3A01               	xorlw	1
  6084  1C95  1D03               	skipz
  6085  1C96  2C9C               	goto	l9568
  6086                           
  6087                           ;Switch_B1.c: 29: Sw = &Sw1;
  6088  1C97  3054               	movlw	_Sw1& (0+255)
  6089  1C98  00A0               	movwf	??_SwPointSelect
  6090  1C99  0820               	movf	??_SwPointSelect,w
  6091  1C9A  00F9               	movwf	_Sw
  6092                           
  6093                           ;Switch_B1.c: 30: }
  6094  1C9B  0008               	return
  6095  1C9C                     l9568:	
  6096                           
  6097                           ;Switch_B1.c: 33: else if (sw == 2) {
  6098  1C9C  0821               	movf	SwPointSelect@sw,w
  6099  1C9D  3A02               	xorlw	2
  6100  1C9E  1D03               	skipz
  6101  1C9F  0008               	return
  6102                           
  6103                           ;Switch_B1.c: 34: Sw = &Sw2;
  6104  1CA0  30DC               	movlw	_Sw2& (0+255)
  6105  1CA1  00A0               	movwf	??_SwPointSelect
  6106  1CA2  0820               	movf	??_SwPointSelect,w
  6107  1CA3  00F9               	movwf	_Sw
  6108  1CA4  0008               	return
  6109  1CA5                     __end_of_SwPointSelect:	
  6110                           
  6111                           	psect	text18
  6112  1523                     __ptext18:	
  6113 ;; *************** function _setMain_Exception *****************
  6114 ;; Defined at:
  6115 ;;		line 276 in file "../src/Main_B1.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;  command         1    wreg     unsigned char 
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;  command         1    4[BANK1 ] unsigned char 
  6120 ;;  status          1    3[BANK1 ] unsigned char 
  6121 ;;  buz             1    0[BANK1 ] unsigned char 
  6122 ;; Return value:  Size  Location     Type
  6123 ;;		None               void
  6124 ;; Registers used:
  6125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;Total ram usage:        6 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:   11
  6138 ;; This function calls:
  6139 ;;		_getMain_LightsStatus
  6140 ;;		_setBuz
  6141 ;;		_setDimmerLights_ErrorClose
  6142 ;;		_setLED
  6143 ;; This function is called by:
  6144 ;;		_Switch_Main
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           
  6149                           ;psect for function _setMain_Exception
  6150  1523                     _setMain_Exception:	
  6151                           
  6152                           ;incstack = 0
  6153                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6154                           ;setMain_Exception@command stored from wreg
  6155  1523  0021               	movlb	1	; select bank1
  6156  1524  00EE               	movwf	setMain_Exception@command^(0+128)
  6157                           
  6158                           ;Main_B1.c: 277: char status = 0, buz = 0;
  6159  1525  01ED               	clrf	setMain_Exception@status^(0+128)
  6160  1526  01EA               	clrf	setMain_Exception@buz^(0+128)
  6161                           
  6162                           ;Main_B1.c: 292: status = command == 3 ? 1 : 255;
  6163  1527  086E               	movf	setMain_Exception@command^(0+128),w
  6164  1528  3A03               	xorlw	3
  6165  1529  1903               	skipnz
  6166  152A  2D2D               	goto	l9852
  6167  152B  30FF               	movlw	255
  6168  152C  2D2E               	goto	L4
  6169  152D                     l9852:	
  6170  152D  3001               	movlw	1
  6171  152E                     L4:	
  6172  152E  00EB               	movwf	_setMain_Exception$3910^(0+128)
  6173  152F  3000               	movlw	0
  6174  1530  00EC               	movwf	(_setMain_Exception$3910^(0+128)+1)
  6175  1531  086B               	movf	_setMain_Exception$3910^(0+128),w
  6176  1532  0020               	movlb	0	; select bank0
  6177  1533  00EB               	movwf	??_setMain_Exception
  6178  1534  086B               	movf	??_setMain_Exception,w
  6179  1535  0021               	movlb	1	; select bank1
  6180  1536  00ED               	movwf	setMain_Exception@status^(0+128)
  6181                           
  6182                           ;Main_B1.c: 294: if (command == 0) {
  6183  1537  08EE               	movf	setMain_Exception@command^(0+128),f
  6184  1538  1D03               	skipz
  6185  1539  2D3C               	goto	l9858
  6186                           
  6187                           ;Main_B1.c: 295: setLED(99, 10);
  6188  153A  300A               	movlw	10
  6189  153B  2D3D               	goto	L5
  6190  153C                     l9858:	
  6191                           ;Main_B1.c: 296: } else {
  6192                           
  6193                           
  6194                           ;Main_B1.c: 297: setLED(99, 11);
  6195  153C  300B               	movlw	11
  6196  153D                     L5:	
  6197  153D  0020               	movlb	0	; select bank0
  6198  153E  00EB               	movwf	??_setMain_Exception
  6199  153F  086B               	movf	??_setMain_Exception,w
  6200  1540  00A2               	movwf	setLED@command
  6201  1541  3063               	movlw	99
  6202  1542  3188  2082  3195   	fcall	_setLED
  6203                           
  6204                           ;Main_B1.c: 298: }
  6205                           ;Main_B1.c: 299: if (command != 0) {
  6206  1545  0021               	movlb	1	; select bank1
  6207  1546  086E               	movf	setMain_Exception@command^(0+128),w
  6208  1547  1903               	btfsc	3,2
  6209  1548  0008               	return
  6210                           
  6211                           ;Main_B1.c: 300: switch (command) {
  6212  1549  2D6A               	goto	l9874
  6213  154A                     l9864:	
  6214                           ;Main_B1.c: 301: case 2:
  6215                           
  6216                           
  6217                           ;Main_B1.c: 302: if (getMain_LightsStatus() == 1) {
  6218  154A  3190  20D3  3195   	fcall	_getMain_LightsStatus
  6219  154D  3A01               	xorlw	1
  6220  154E  1D03               	skipz
  6221  154F  2D73               	goto	l9876
  6222                           
  6223                           ;Main_B1.c: 303: setBuz(10, 300);
  6224  1550  302C               	movlw	44
  6225  1551  0020               	movlb	0	; select bank0
  6226  1552  00A9               	movwf	setBuz@time
  6227  1553  3001               	movlw	1
  6228  1554  00AA               	movwf	setBuz@time+1
  6229  1555  300A               	movlw	10
  6230  1556  3195  25D1  3195   	fcall	_setBuz
  6231                           
  6232                           ;Main_B1.c: 304: }
  6233                           ;Main_B1.c: 305: break;
  6234  1559  2D73               	goto	l9876
  6235  155A                     l9868:	
  6236                           ;Main_B1.c: 306: case 3:
  6237                           
  6238                           
  6239                           ;Main_B1.c: 307: if (getMain_LightsStatus() == 1) {
  6240  155A  3190  20D3  3195   	fcall	_getMain_LightsStatus
  6241  155D  3A01               	xorlw	1
  6242  155E  1D03               	skipz
  6243  155F  2D73               	goto	l9876
  6244                           
  6245                           ;Main_B1.c: 308: setBuz(5, 300);
  6246  1560  302C               	movlw	44
  6247  1561  0020               	movlb	0	; select bank0
  6248  1562  00A9               	movwf	setBuz@time
  6249  1563  3001               	movlw	1
  6250  1564  00AA               	movwf	setBuz@time+1
  6251  1565  3005               	movlw	5
  6252  1566  3195  25D1  3195   	fcall	_setBuz
  6253                           
  6254                           ;Main_B1.c: 311: }
  6255                           
  6256                           ;Main_B1.c: 309: }
  6257                           ;Main_B1.c: 310: break;
  6258  1569  2D73               	goto	l9876
  6259  156A                     l9874:	
  6260  156A  0021               	movlb	1	; select bank1
  6261  156B  086E               	movf	setMain_Exception@command^(0+128),w
  6262                           
  6263                           ; Switch size 1, requested type "space"
  6264                           ; Number of cases is 2, Range of values is 2 to 3
  6265                           ; switch strategies available:
  6266                           ; Name         Instructions Cycles
  6267                           ; simple_byte            7     4 (average)
  6268                           ; direct_byte           13     9 (fixed)
  6269                           ; jumptable            263     9 (fixed)
  6270                           ;	Chosen strategy is simple_byte
  6271  156C  3A02               	xorlw	2	; case 2
  6272  156D  1903               	skipnz
  6273  156E  2D4A               	goto	l9864
  6274  156F  3A01               	xorlw	1	; case 3
  6275  1570  1903               	skipnz
  6276  1571  2D5A               	goto	l9868
  6277  1572  2D73               	goto	l9876
  6278  1573                     l9876:	
  6279                           
  6280                           ;Main_B1.c: 312: setDimmerLights_ErrorClose(status);
  6281  1573  0021               	movlb	1	; select bank1
  6282  1574  086D               	movf	setMain_Exception@status^(0+128),w
  6283  1575  3196  262A         	fcall	_setDimmerLights_ErrorClose
  6284  1577  0021               	movlb	1	; select bank1
  6285  1578  0008               	return
  6286  1579                     __end_of_setMain_Exception:	
  6287                           
  6288                           	psect	text19
  6289  162A                     __ptext19:	
  6290 ;; *************** function _setDimmerLights_ErrorClose *****************
  6291 ;; Defined at:
  6292 ;;		line 622 in file "../src/Dimmer_B1.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;  lights          1    wreg     unsigned char 
  6295 ;; Auto vars:     Size  Location     Type
  6296 ;;  lights          1   72[BANK0 ] unsigned char 
  6297 ;;  i               2   73[BANK0 ] int 
  6298 ;;  count           1   71[BANK0 ] unsigned char 
  6299 ;; Return value:  Size  Location     Type
  6300 ;;		None               void
  6301 ;; Registers used:
  6302 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/0
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;Total ram usage:        5 bytes
  6313 ;; Hardware stack levels used:    1
  6314 ;; Hardware stack levels required when called:   10
  6315 ;; This function calls:
  6316 ;;		_DimmerLightsPointSelect
  6317 ;;		_getDimmerLights_Status
  6318 ;;		_setDimmerLights_SwOff
  6319 ;; This function is called by:
  6320 ;;		_setMain_Exception
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           
  6325                           ;psect for function _setDimmerLights_ErrorClose
  6326  162A                     _setDimmerLights_ErrorClose:	
  6327                           
  6328                           ;incstack = 0
  6329                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6330                           ;setDimmerLights_ErrorClose@lights stored from wreg
  6331  162A  0020               	movlb	0	; select bank0
  6332  162B  00E8               	movwf	setDimmerLights_ErrorClose@lights
  6333                           
  6334                           ;Dimmer_B1.c: 623: if (lights == 255) {
  6335  162C  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6336  162D  3AFF               	xorlw	255
  6337  162E  1D03               	skipz
  6338  162F  2E67               	goto	l9394
  6339                           
  6340                           ;Dimmer_B1.c: 628: char count = 2;
  6341  1630  3002               	movlw	2
  6342  1631  00E6               	movwf	??_setDimmerLights_ErrorClose
  6343  1632  0866               	movf	??_setDimmerLights_ErrorClose,w
  6344  1633  00E7               	movwf	setDimmerLights_ErrorClose@count
  6345                           
  6346                           ;Dimmer_B1.c: 633: for (int i = 0; i < count; i++) {
  6347  1634  01E9               	clrf	setDimmerLights_ErrorClose@i
  6348  1635  01EA               	clrf	setDimmerLights_ErrorClose@i+1
  6349  1636                     l9392:	
  6350  1636  086A               	movf	setDimmerLights_ErrorClose@i+1,w
  6351  1637  3A80               	xorlw	128
  6352  1638  00E6               	movwf	??_setDimmerLights_ErrorClose
  6353  1639  3080               	movlw	128
  6354  163A  0266               	subwf	??_setDimmerLights_ErrorClose,w
  6355  163B  1D03               	skipz
  6356  163C  2E3F               	goto	u10175
  6357  163D  0867               	movf	setDimmerLights_ErrorClose@count,w
  6358  163E  0269               	subwf	setDimmerLights_ErrorClose@i,w
  6359  163F                     u10175:	
  6360  163F  1803               	btfsc	3,0
  6361  1640  0008               	return
  6362                           
  6363                           ;Dimmer_B1.c: 634: DimmerLightsPointSelect(i + 1);
  6364  1641  0020               	movlb	0	; select bank0
  6365  1642  0869               	movf	setDimmerLights_ErrorClose@i,w
  6366  1643  3E01               	addlw	1
  6367  1644  319C  2430  3196   	fcall	_DimmerLightsPointSelect
  6368                           
  6369                           ;Dimmer_B1.c: 635: if (getDimmerLights_Status(i + 1) == 1) {
  6370  1647  0020               	movlb	0	; select bank0
  6371  1648  0869               	movf	setDimmerLights_ErrorClose@i,w
  6372  1649  3E01               	addlw	1
  6373  164A  319B  23A4  3196   	fcall	_getDimmerLights_Status
  6374  164D  3A01               	xorlw	1
  6375  164E  1D03               	skipz
  6376  164F  2E61               	goto	l9390
  6377                           
  6378                           ;Dimmer_B1.c: 636: DimmerLights->SwFlag = 1;
  6379  1650  0877               	movf	_DimmerLights,w
  6380  1651  3E09               	addlw	9
  6381  1652  0086               	movwf	6
  6382  1653  3001               	movlw	1	; select bank2/3
  6383  1654  0087               	movwf	7
  6384  1655  1701               	bsf	1,6
  6385                           
  6386                           ;Dimmer_B1.c: 637: DimmerLights->Status = 0;
  6387  1656  0877               	movf	_DimmerLights,w
  6388  1657  0086               	movwf	6
  6389  1658  3001               	movlw	1	; select bank2/3
  6390  1659  0087               	movwf	7
  6391  165A  1281               	bcf	1,5
  6392                           
  6393                           ;Dimmer_B1.c: 638: setDimmerLights_SwOff(i + 1);
  6394  165B  0020               	movlb	0	; select bank0
  6395  165C  0869               	movf	setDimmerLights_ErrorClose@i,w
  6396  165D  3E01               	addlw	1
  6397  165E  3196  26DF  3196   	fcall	_setDimmerLights_SwOff
  6398  1661                     l9390:	
  6399  1661  3001               	movlw	1
  6400  1662  0020               	movlb	0	; select bank0
  6401  1663  07E9               	addwf	setDimmerLights_ErrorClose@i,f
  6402  1664  3000               	movlw	0
  6403  1665  3DEA               	addwfc	setDimmerLights_ErrorClose@i+1,f
  6404  1666  2E36               	goto	l9392
  6405  1667                     l9394:	
  6406                           ;Dimmer_B1.c: 639: }
  6407                           ;Dimmer_B1.c: 640: }
  6408                           ;Dimmer_B1.c: 641: } else {
  6409                           
  6410                           
  6411                           ;Dimmer_B1.c: 642: DimmerLightsPointSelect(lights);
  6412  1667  0020               	movlb	0	; select bank0
  6413  1668  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6414  1669  319C  2430  3196   	fcall	_DimmerLightsPointSelect
  6415                           
  6416                           ;Dimmer_B1.c: 643: if (getDimmerLights_Status(lights) == 1) {
  6417  166C  0020               	movlb	0	; select bank0
  6418  166D  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6419  166E  319B  23A4  3196   	fcall	_getDimmerLights_Status
  6420  1671  3A01               	xorlw	1
  6421  1672  1D03               	skipz
  6422  1673  0008               	return
  6423                           
  6424                           ;Dimmer_B1.c: 644: DimmerLights->SwFlag = 1;
  6425  1674  0877               	movf	_DimmerLights,w
  6426  1675  3E09               	addlw	9
  6427  1676  0086               	movwf	6
  6428  1677  3001               	movlw	1	; select bank2/3
  6429  1678  0087               	movwf	7
  6430  1679  1701               	bsf	1,6
  6431                           
  6432                           ;Dimmer_B1.c: 645: DimmerLights->Status = 0;
  6433  167A  0877               	movf	_DimmerLights,w
  6434  167B  0086               	movwf	6
  6435  167C  3001               	movlw	1	; select bank2/3
  6436  167D  0087               	movwf	7
  6437  167E  1281               	bcf	1,5
  6438                           
  6439                           ;Dimmer_B1.c: 646: setDimmerLights_SwOff(lights);
  6440  167F  0020               	movlb	0	; select bank0
  6441  1680  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6442  1681  3196  26DF         	fcall	_setDimmerLights_SwOff
  6443  1683  0008               	return
  6444  1684                     __end_of_setDimmerLights_ErrorClose:	
  6445                           
  6446                           	psect	text20
  6447  1B6B                     __ptext20:	
  6448 ;; *************** function _Switch_Initialization *****************
  6449 ;; Defined at:
  6450 ;;		line 46 in file "../src/Switch_B1.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;		None
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;		None
  6455 ;; Return value:  Size  Location     Type
  6456 ;;		None               void
  6457 ;; Registers used:
  6458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6459 ;; Tracked objects:
  6460 ;;		On entry : 0/0
  6461 ;;		On exit  : 0/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6468 ;;Total ram usage:        0 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; Hardware stack levels required when called:    8
  6471 ;; This function calls:
  6472 ;;		_TouchPower
  6473 ;;		_setSw_Initialization
  6474 ;; This function is called by:
  6475 ;;		_main
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           
  6480                           ;psect for function _Switch_Initialization
  6481  1B6B                     _Switch_Initialization:	
  6482                           
  6483                           ;Switch_B1.c: 47: TouchPower();
  6484                           
  6485                           ;incstack = 0
  6486                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6487  1B6B  319C  24CF  319B   	fcall	_TouchPower
  6488                           
  6489                           ;Switch_B1.c: 49: WPUB1 = 0;
  6490  1B6E  0024               	movlb	4	; select bank4
  6491  1B6F  108D               	bcf	13,1	;volatile
  6492                           
  6493                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6494  1B70  3001               	movlw	1
  6495  1B71  319A  22D8  319B   	fcall	_setSw_Initialization
  6496                           
  6497                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6498  1B74  3002               	movlw	2
  6499  1B75  319A  22D8         	fcall	_setSw_Initialization
  6500  1B77  0008               	return
  6501  1B78                     __end_of_Switch_Initialization:	
  6502                           
  6503                           	psect	text21
  6504  1AD8                     __ptext21:	
  6505 ;; *************** function _setSw_Initialization *****************
  6506 ;; Defined at:
  6507 ;;		line 109 in file "../src/Switch_B1.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;  sw              1    wreg     unsigned char 
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;  sw              1    4[BANK0 ] unsigned char 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;		None               void
  6514 ;; Registers used:
  6515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;Total ram usage:        1 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    7
  6528 ;; This function calls:
  6529 ;;		_setLED
  6530 ;; This function is called by:
  6531 ;;		_Switch_Initialization
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           
  6536                           ;psect for function _setSw_Initialization
  6537  1AD8                     _setSw_Initialization:	
  6538                           
  6539                           ;incstack = 0
  6540                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6541                           ;setSw_Initialization@sw stored from wreg
  6542  1AD8  0020               	movlb	0	; select bank0
  6543  1AD9  00A4               	movwf	setSw_Initialization@sw
  6544                           
  6545                           ;Switch_B1.c: 110: setLED(sw, 1);
  6546  1ADA  01A2               	clrf	setLED@command
  6547  1ADB  0AA2               	incf	setLED@command,f
  6548  1ADC  0824               	movf	setSw_Initialization@sw,w
  6549  1ADD  3188  2082         	fcall	_setLED
  6550  1ADF  0008               	return
  6551  1AE0                     __end_of_setSw_Initialization:	
  6552                           
  6553                           	psect	text22
  6554  1CCF                     __ptext22:	
  6555 ;; *************** function _TouchPower *****************
  6556 ;; Defined at:
  6557 ;;		line 10 in file "../src/Switch_B1.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;		None
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;		None
  6562 ;; Return value:  Size  Location     Type
  6563 ;;		None               void
  6564 ;; Registers used:
  6565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;Total ram usage:        0 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:    6
  6578 ;; This function calls:
  6579 ;;		_Timeout_Counter
  6580 ;;		_set_TimeoutCleared
  6581 ;; This function is called by:
  6582 ;;		_Switch_Initialization
  6583 ;;		_Switch_Main
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           
  6588                           ;psect for function _TouchPower
  6589  1CCF                     _TouchPower:	
  6590                           
  6591                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6592                           
  6593                           ;incstack = 0
  6594                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6595  1CCF  0020               	movlb	0	; select bank0
  6596  1CD0  1A8E               	btfsc	14,5	;volatile
  6597  1CD1  0008               	return
  6598                           
  6599                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6600  1CD2  0021               	movlb	1	; select bank1
  6601  1CD3  1C20               	btfss	_myMain^(0+128),0
  6602  1CD4  0008               	return
  6603  1CD5  2CDB               	goto	l10082
  6604  1CD6                     l2618:	
  6605                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6606                           
  6607                           
  6608                           ;Switch_B1.c: 14: RC5 = 1;
  6609  1CD6  0020               	movlb	0	; select bank0
  6610  1CD7  168E               	bsf	14,5	;volatile
  6611                           
  6612                           ;Switch_B1.c: 15: Timeout_Counter();
  6613  1CD8  319C  24A5  319C   	fcall	_Timeout_Counter
  6614  1CDB                     l10082:	
  6615  1CDB  0020               	movlb	0	; select bank0
  6616  1CDC  1A8E               	btfsc	14,5	;volatile
  6617  1CDD  2CE1               	goto	l10086
  6618  1CDE  0021               	movlb	1	; select bank1
  6619  1CDF  1D2D               	btfss	(_myMain^(0+128)+13),2
  6620  1CE0  2CD6               	goto	l2618
  6621  1CE1                     l10086:	
  6622                           
  6623                           ;Switch_B1.c: 16: }
  6624                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6625  1CE1  319A  2293         	fcall	_set_TimeoutCleared
  6626  1CE3  0008               	return
  6627  1CE4                     __end_of_TouchPower:	
  6628                           
  6629                           	psect	text23
  6630  1A7A                     __ptext23:	
  6631 ;; *************** function _RF_Main *****************
  6632 ;; Defined at:
  6633 ;;		line 16 in file "../src/RF_Control_B1.c"
  6634 ;; Parameters:    Size  Location     Type
  6635 ;;		None
  6636 ;; Auto vars:     Size  Location     Type
  6637 ;;		None
  6638 ;; Return value:  Size  Location     Type
  6639 ;;		None               void
  6640 ;; Registers used:
  6641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 0/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6651 ;;Total ram usage:        0 bytes
  6652 ;; Hardware stack levels used:    1
  6653 ;; Hardware stack levels required when called:   14
  6654 ;; This function calls:
  6655 ;;		_setRF_Main
  6656 ;; This function is called by:
  6657 ;;		_main
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           
  6662                           ;psect for function _RF_Main
  6663  1A7A                     _RF_Main:	
  6664                           
  6665                           ;RF_Control_B1.c: 18: setRF_Main();
  6666                           
  6667                           ;incstack = 0
  6668                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6669  1A7A  3186  2634         	fcall	_setRF_Main
  6670  1A7C  0008               	return
  6671  1A7D                     __end_of_RF_Main:	
  6672                           
  6673                           	psect	text24
  6674  0634                     __ptext24:	
  6675 ;; *************** function _setRF_Main *****************
  6676 ;; Defined at:
  6677 ;;		line 52 in file "../src/RF_Control_B1.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;		None
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;  error           1   77[BANK0 ] unsigned char 
  6682 ;;  Receive_OK      1   76[BANK0 ] unsigned char 
  6683 ;;  loop_f          1   75[BANK0 ] unsigned char 
  6684 ;; Return value:  Size  Location     Type
  6685 ;;		None               void
  6686 ;; Registers used:
  6687 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6695 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6696 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6697 ;;Total ram usage:        4 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; Hardware stack levels required when called:   13
  6700 ;; This function calls:
  6701 ;;		_CC2500_ReadStatus
  6702 ;;		_CC2500_RxData
  6703 ;;		_CC2500_TxData
  6704 ;;		_CC2500_WriteCommand
  6705 ;;		_getBuz_GO
  6706 ;;		_getMain_All_Error_Status
  6707 ;;		_getRF_KeyStatus
  6708 ;;		_getRxData
  6709 ;; This function is called by:
  6710 ;;		_RF_Main
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           
  6715                           ;psect for function _setRF_Main
  6716  0634                     _setRF_Main:	
  6717                           
  6718                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6719                           
  6720                           ;incstack = 0
  6721                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6722  0634  0020               	movlb	0	; select bank0
  6723  0635  01EB               	clrf	setRF_Main@loop_f
  6724  0636  01EC               	clrf	setRF_Main@Receive_OK
  6725  0637  01ED               	clrf	setRF_Main@error
  6726                           
  6727                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6728  0638  0021               	movlb	1	; select bank1
  6729  0639  1C3C               	btfss	_RF1^(0+128),0
  6730  063A  2F21               	goto	l2227
  6731                           
  6732                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6733  063B  319B  23B4  3186   	fcall	_getBuz_GO
  6734  063E  0020               	movlb	0	; select bank0
  6735  063F  0821               	movf	?_getBuz_GO+1,w
  6736  0640  0420               	iorwf	?_getBuz_GO,w
  6737  0641  1D03               	skipz
  6738  0642  0008               	return
  6739                           
  6740                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6741  0643  3000               	movlw	0
  6742  0644  3191  2105  3186   	fcall	_getMain_All_Error_Status
  6743  0647  3800               	iorlw	0
  6744  0648  1D03               	skipz
  6745  0649  2E5E               	goto	l2229
  6746                           
  6747                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6748  064A  319B  23C5  3186   	fcall	_getRF_KeyStatus
  6749  064D  3A01               	xorlw	1
  6750  064E  3000               	movlw	0
  6751  064F  1903               	skipnz
  6752  0650  3001               	movlw	1
  6753  0651  0020               	movlb	0	; select bank0
  6754  0652  00EA               	movwf	??_setRF_Main
  6755  0653  0CEA               	rrf	??_setRF_Main,f
  6756  0654  0CEA               	rrf	??_setRF_Main,f
  6757  0655  0021               	movlb	1	; select bank1
  6758  0656  083C               	movf	_RF1^(0+128),w
  6759  0657  0020               	movlb	0	; select bank0
  6760  0658  066A               	xorwf	??_setRF_Main,w
  6761  0659  397F               	andlw	-129
  6762  065A  066A               	xorwf	??_setRF_Main,w
  6763  065B  0021               	movlb	1	; select bank1
  6764  065C  00BC               	movwf	_RF1^(0+128)
  6765                           
  6766                           ;RF_Control_B1.c: 65: } else {
  6767  065D  2E60               	goto	l2230
  6768  065E                     l2229:	
  6769                           
  6770                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6771  065E  0021               	movlb	1	; select bank1
  6772  065F  13BC               	bcf	_RF1^(0+128),7
  6773  0660                     l2230:	
  6774                           
  6775                           ;RF_Control_B1.c: 70: }
  6776                           ;RF_Control_B1.c: 73: if (RF1.Key == 1 && RF1.Learn == 0) {
  6777  0660  1BBC               	btfsc	_RF1^(0+128),7
  6778  0661  1B3C               	btfsc	_RF1^(0+128),6
  6779  0662  2E68               	goto	l2231
  6780                           
  6781                           ;RF_Control_B1.c: 74: RF1.Count = 0;
  6782  0663  01BE               	clrf	(_RF1^(0+128)+2)
  6783  0664  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6784                           
  6785                           ;RF_Control_B1.c: 75: RF1.Run = 1;
  6786  0665  14BD               	bsf	(_RF1^(0+128)+1),1
  6787                           
  6788                           ;RF_Control_B1.c: 76: RF1.RxStatus = 0;
  6789  0666  11BC               	bcf	_RF1^(0+128),3
  6790                           
  6791                           ;RF_Control_B1.c: 78: } else {
  6792  0667  0008               	return
  6793  0668                     l2231:	
  6794                           
  6795                           ;RF_Control_B1.c: 79: if (RF1.Run == 1 && RF1.Learn == 0) {
  6796  0668  18BD               	btfsc	(_RF1^(0+128)+1),1
  6797  0669  1B3C               	btfsc	_RF1^(0+128),6
  6798  066A  2E7F               	goto	l9998
  6799                           
  6800                           ;RF_Control_B1.c: 80: RF1.Count++;
  6801  066B  3001               	movlw	1
  6802  066C  07BE               	addwf	(_RF1^(0+128)+2),f
  6803  066D  3000               	movlw	0
  6804  066E  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  6805                           
  6806                           ;RF_Control_B1.c: 81: if (RF1.Count == RF1.RunTime) {
  6807  066F  3002               	movlw	2
  6808  0670  3EBC               	addlw	_RF1& (0+255)
  6809  0671  0086               	movwf	6
  6810  0672  0187               	clrf	7
  6811  0673  3F40               	moviw [0]fsr1
  6812  0674  0643               	xorwf	(_RF1^(0+128)+7),w
  6813  0675  1D03               	skipz
  6814  0676  2E79               	goto	u11055
  6815  0677  3F41               	moviw [1]fsr1
  6816  0678  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  6817  0679                     u11055:	
  6818  0679  1D03               	skipz
  6819  067A  2EEE               	goto	l10050
  6820                           
  6821                           ;RF_Control_B1.c: 82: RF1.Count = 0;
  6822  067B  01BE               	clrf	(_RF1^(0+128)+2)
  6823  067C  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6824                           
  6825                           ;RF_Control_B1.c: 83: RF1.Run = 0;
  6826  067D  10BD               	bcf	(_RF1^(0+128)+1),1
  6827                           
  6828                           ;RF_Control_B1.c: 84: }
  6829                           ;RF_Control_B1.c: 85: } else {
  6830  067E  2EEE               	goto	l10050
  6831  067F                     l9998:	
  6832                           
  6833                           ;RF_Control_B1.c: 86: RF1.Count = 0;
  6834  067F  01BE               	clrf	(_RF1^(0+128)+2)
  6835  0680  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6836                           
  6837                           ;RF_Control_B1.c: 87: RF1.Run = 0;
  6838  0681  10BD               	bcf	(_RF1^(0+128)+1),1
  6839                           
  6840                           ;RF_Control_B1.c: 89: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6841  0682  193C               	btfsc	_RF1^(0+128),2
  6842  0683  1B3C               	btfsc	_RF1^(0+128),6
  6843  0684  2EA0               	goto	l2236
  6844                           
  6845                           ;RF_Control_B1.c: 90: RF1.TransceiveGO = 0;
  6846  0685  113C               	bcf	_RF1^(0+128),2
  6847                           
  6848                           ;RF_Control_B1.c: 91: RF1.RxStatus = 0;
  6849  0686  11BC               	bcf	_RF1^(0+128),3
  6850                           
  6851                           ;RF_Control_B1.c: 92: RF1.ReceiveGO = 0;
  6852  0687  10BC               	bcf	_RF1^(0+128),1
  6853                           
  6854                           ;RF_Control_B1.c: 94: CC2500_ReadStatus(0x3B);
  6855  0688  303B               	movlw	59
  6856  0689  319F  2710  3186   	fcall	_CC2500_ReadStatus
  6857                           
  6858                           ;RF_Control_B1.c: 95: if (s_data != 0) {
  6859  068C  0021               	movlb	1	; select bank1
  6860  068D  0857               	movf	_s_data^(0+128),w
  6861  068E  1903               	btfsc	3,2
  6862  068F  2E9C               	goto	l2237
  6863                           
  6864                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x36);
  6865  0690  3036               	movlw	54
  6866  0691  319D  255A  3186   	fcall	_CC2500_WriteCommand
  6867                           
  6868                           ;RF_Control_B1.c: 97: CC2500_WriteCommand(0x3B);
  6869  0694  303B               	movlw	59
  6870  0695  319D  255A  3186   	fcall	_CC2500_WriteCommand
  6871                           
  6872                           ;RF_Control_B1.c: 98: CC2500_WriteCommand(0x3A);
  6873  0698  303A               	movlw	58
  6874  0699  319D  255A  3186   	fcall	_CC2500_WriteCommand
  6875  069C                     l2237:	
  6876                           
  6877                           ;RF_Control_B1.c: 99: }
  6878                           ;RF_Control_B1.c: 100: CC2500_TxData();
  6879  069C  3188  20E3  3186   	fcall	_CC2500_TxData
  6880                           
  6881                           ;RF_Control_B1.c: 102: } else {
  6882  069F  2EEE               	goto	l10050
  6883  06A0                     l2236:	
  6884                           
  6885                           ;RF_Control_B1.c: 104: if (RF1.RxStatus == 1) {
  6886  06A0  1DBC               	btfss	_RF1^(0+128),3
  6887  06A1  2ED9               	goto	l2239
  6888                           
  6889                           ;RF_Control_B1.c: 105: CC2500_RxData();
  6890  06A2  318A  2294  3186   	fcall	_CC2500_RxData
  6891                           
  6892                           ;RF_Control_B1.c: 106: if (RF1.ReceiveGO == 1) {
  6893  06A5  0021               	movlb	1	; select bank1
  6894  06A6  1CBC               	btfss	_RF1^(0+128),1
  6895  06A7  2EEE               	goto	l10050
  6896                           
  6897                           ;RF_Control_B1.c: 107: RF1.ReceiveGO = 0;
  6898  06A8  10BC               	bcf	_RF1^(0+128),1
  6899                           
  6900                           ;RF_Control_B1.c: 108: RF1.Correction = 0;
  6901  06A9  12BD               	bcf	(_RF1^(0+128)+1),5
  6902                           
  6903                           ;RF_Control_B1.c: 109: RF1.CorrectionCounter = 0;
  6904  06AA  01C6               	clrf	(_RF1^(0+128)+10)
  6905  06AB  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6906                           
  6907                           ;RF_Control_B1.c: 118: getRxData();
  6908  06AC  318A  2225  3186   	fcall	_getRxData
  6909                           
  6910                           ;RF_Control_B1.c: 122: RF1.Run = 1;
  6911  06AF  0021               	movlb	1	; select bank1
  6912  06B0  14BD               	bsf	(_RF1^(0+128)+1),1
  6913                           
  6914                           ;RF_Control_B1.c: 124: if (RF1.Checked == 1) {
  6915  06B1  1DBD               	btfss	(_RF1^(0+128)+1),3
  6916  06B2  2EC0               	goto	l10034
  6917                           
  6918                           ;RF_Control_B1.c: 125: if (RF1.RunTime > 10) {
  6919  06B3  3000               	movlw	0
  6920  06B4  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6921  06B5  300B               	movlw	11
  6922  06B6  1903               	skipnz
  6923  06B7  0243               	subwf	(_RF1^(0+128)+7),w
  6924  06B8  1C03               	skipc
  6925  06B9  2EBE               	goto	l10032
  6926                           
  6927                           ;RF_Control_B1.c: 126: RF1.RunTime = 10;
  6928  06BA  300A               	movlw	10
  6929  06BB  00C3               	movwf	(_RF1^(0+128)+7)
  6930  06BC  3000               	movlw	0
  6931  06BD  00C4               	movwf	(_RF1^(0+128)+8)
  6932  06BE                     l10032:	
  6933                           
  6934                           ;RF_Control_B1.c: 127: }
  6935                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  6936  06BE  01C0               	clrf	(_RF1^(0+128)+4)
  6937                           
  6938                           ;RF_Control_B1.c: 129: } else {
  6939  06BF  2EEE               	goto	l10050
  6940  06C0                     l10034:	
  6941                           
  6942                           ;RF_Control_B1.c: 130: RF1.CheckCount++;
  6943  06C0  3001               	movlw	1
  6944  06C1  0020               	movlb	0	; select bank0
  6945  06C2  00EA               	movwf	??_setRF_Main
  6946  06C3  086A               	movf	??_setRF_Main,w
  6947  06C4  0021               	movlb	1	; select bank1
  6948  06C5  07C0               	addwf	(_RF1^(0+128)+4),f
  6949                           
  6950                           ;RF_Control_B1.c: 131: if (RF1.CheckCount == 2) {
  6951  06C6  0840               	movf	(_RF1^(0+128)+4),w
  6952  06C7  3A02               	xorlw	2
  6953  06C8  1D03               	skipz
  6954  06C9  2EEE               	goto	l10050
  6955                           
  6956                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  6957  06CA  01C0               	clrf	(_RF1^(0+128)+4)
  6958                           
  6959                           ;RF_Control_B1.c: 133: RF1.CheckedCounter = 0;
  6960  06CB  01C1               	clrf	(_RF1^(0+128)+5)
  6961  06CC  01C2               	clrf	((_RF1+1)^(0+128)+5)
  6962                           
  6963                           ;RF_Control_B1.c: 134: if (RF1.RunTime < 200) {
  6964  06CD  3000               	movlw	0
  6965  06CE  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6966  06CF  30C8               	movlw	200
  6967  06D0  1903               	skipnz
  6968  06D1  0243               	subwf	(_RF1^(0+128)+7),w
  6969  06D2  1803               	skipnc
  6970  06D3  2EEE               	goto	l10050
  6971                           
  6972                           ;RF_Control_B1.c: 135: RF1.RunTime += 10;
  6973  06D4  300A               	movlw	10
  6974  06D5  07C3               	addwf	(_RF1^(0+128)+7),f
  6975  06D6  3000               	movlw	0
  6976  06D7  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  6977                           
  6978                           ;RF_Control_B1.c: 136: }
  6979                           ;RF_Control_B1.c: 137: }
  6980                           ;RF_Control_B1.c: 138: }
  6981                           ;RF_Control_B1.c: 139: }
  6982                           ;RF_Control_B1.c: 140: } else {
  6983  06D8  2EEE               	goto	l10050
  6984  06D9                     l2239:	
  6985                           
  6986                           ;RF_Control_B1.c: 142: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6987  06D9  1DBC               	btfss	_RF1^(0+128),3
  6988  06DA  18BC               	btfsc	_RF1^(0+128),1
  6989  06DB  2EEE               	goto	l10050
  6990                           
  6991                           ;RF_Control_B1.c: 143: RF1.RxStatus = 1;
  6992  06DC  15BC               	bsf	_RF1^(0+128),3
  6993                           
  6994                           ;RF_Control_B1.c: 144: RF1.Correction = 1;
  6995  06DD  16BD               	bsf	(_RF1^(0+128)+1),5
  6996                           
  6997                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x36);
  6998  06DE  3036               	movlw	54
  6999  06DF  319D  255A  3186   	fcall	_CC2500_WriteCommand
  7000                           
  7001                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x3B);
  7002  06E2  303B               	movlw	59
  7003  06E3  319D  255A  3186   	fcall	_CC2500_WriteCommand
  7004                           
  7005                           ;RF_Control_B1.c: 148: CC2500_WriteCommand(0x3A);
  7006  06E6  303A               	movlw	58
  7007  06E7  319D  255A  3186   	fcall	_CC2500_WriteCommand
  7008                           
  7009                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x34);
  7010  06EA  3034               	movlw	52
  7011  06EB  319D  255A  3186   	fcall	_CC2500_WriteCommand
  7012  06EE                     l10050:	
  7013                           
  7014                           ;RF_Control_B1.c: 151: }
  7015                           ;RF_Control_B1.c: 153: }
  7016                           ;RF_Control_B1.c: 154: }
  7017                           ;RF_Control_B1.c: 155: }
  7018                           ;RF_Control_B1.c: 156: if (RF1.RxStatus == 1) {
  7019  06EE  0021               	movlb	1	; select bank1
  7020  06EF  1DBC               	btfss	_RF1^(0+128),3
  7021  06F0  2F0F               	goto	l10062
  7022                           
  7023                           ;RF_Control_B1.c: 157: RF1.CheckedCounter++;
  7024  06F1  3001               	movlw	1
  7025  06F2  07C1               	addwf	(_RF1^(0+128)+5),f
  7026  06F3  3000               	movlw	0
  7027  06F4  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  7028                           
  7029                           ;RF_Control_B1.c: 158: if (RF1.CheckedCounter == 100) {
  7030  06F5  3005               	movlw	5
  7031  06F6  3EBC               	addlw	_RF1& (0+255)
  7032  06F7  0086               	movwf	6
  7033  06F8  0187               	clrf	7
  7034  06F9  3F40               	moviw [0]fsr1
  7035  06FA  3A64               	xorlw	100
  7036  06FB  1D03               	skipz
  7037  06FC  2EFF               	goto	u11185
  7038  06FD  3F41               	moviw [1]fsr1
  7039  06FE  3A00               	xorlw	0
  7040  06FF                     u11185:	
  7041  06FF  1D03               	skipz
  7042  0700  2F0F               	goto	l10062
  7043                           
  7044                           ;RF_Control_B1.c: 159: RF1.CheckedCounter = 0;
  7045  0701  01C1               	clrf	(_RF1^(0+128)+5)
  7046  0702  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7047                           
  7048                           ;RF_Control_B1.c: 160: RF1.CheckCount = 0;
  7049  0703  01C0               	clrf	(_RF1^(0+128)+4)
  7050                           
  7051                           ;RF_Control_B1.c: 161: if (RF1.RunTime > 10) {
  7052  0704  3000               	movlw	0
  7053  0705  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7054  0706  300B               	movlw	11
  7055  0707  1903               	skipnz
  7056  0708  0243               	subwf	(_RF1^(0+128)+7),w
  7057  0709  1C03               	skipc
  7058  070A  2F0F               	goto	l10062
  7059                           
  7060                           ;RF_Control_B1.c: 162: RF1.RunTime -= 10;
  7061  070B  300A               	movlw	10
  7062  070C  02C3               	subwf	(_RF1^(0+128)+7),f
  7063  070D  3000               	movlw	0
  7064  070E  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  7065  070F                     l10062:	
  7066                           
  7067                           ;RF_Control_B1.c: 163: }
  7068                           ;RF_Control_B1.c: 164: }
  7069                           ;RF_Control_B1.c: 165: }
  7070                           ;RF_Control_B1.c: 166: if (RF1.Correction == 1) {
  7071  070F  1EBD               	btfss	(_RF1^(0+128)+1),5
  7072  0710  0008               	return
  7073                           
  7074                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter++;
  7075  0711  3001               	movlw	1
  7076  0712  07C6               	addwf	(_RF1^(0+128)+10),f
  7077  0713  3000               	movlw	0
  7078  0714  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  7079                           
  7080                           ;RF_Control_B1.c: 168: if (RF1.CorrectionCounter >= 30000) {
  7081  0715  3075               	movlw	117
  7082  0716  0247               	subwf	((_RF1+1)^(0+128)+10),w
  7083  0717  3030               	movlw	48
  7084  0718  1903               	skipnz
  7085  0719  0246               	subwf	(_RF1^(0+128)+10),w
  7086  071A  1C03               	skipc
  7087  071B  0008               	return
  7088                           
  7089                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter = 0;
  7090  071C  01C6               	clrf	(_RF1^(0+128)+10)
  7091  071D  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7092                           
  7093                           ;RF_Control_B1.c: 170: RF1.RxStatus = 0;
  7094  071E  11BC               	bcf	_RF1^(0+128),3
  7095                           
  7096                           ;RF_Control_B1.c: 171: RF1.ReceiveGO = 0;
  7097  071F  10BC               	bcf	_RF1^(0+128),1
  7098                           
  7099                           ;RF_Control_B1.c: 172: }
  7100                           ;RF_Control_B1.c: 173: }
  7101                           ;RF_Control_B1.c: 174: }
  7102                           ;RF_Control_B1.c: 175: }
  7103                           ;RF_Control_B1.c: 182: } else {
  7104  0720  0008               	return
  7105  0721                     l2227:	
  7106                           
  7107                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  7108  0721  1C20               	btfss	_myMain^(0+128),0
  7109  0722  0008               	return
  7110                           
  7111                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  7112  0723  143C               	bsf	_RF1^(0+128),0
  7113  0724  0008               	return
  7114  0725                     __end_of_setRF_Main:	
  7115                           
  7116                           	psect	text25
  7117  0A25                     __ptext25:	
  7118 ;; *************** function _getRxData *****************
  7119 ;; Defined at:
  7120 ;;		line 273 in file "../src/RF_Control_B1.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;		None
  7123 ;; Auto vars:     Size  Location     Type
  7124 ;;  error           1   73[BANK0 ] unsigned char 
  7125 ;; Return value:  Size  Location     Type
  7126 ;;		None               void
  7127 ;; Registers used:
  7128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7135 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7137 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7138 ;;Total ram usage:        2 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:   12
  7141 ;; This function calls:
  7142 ;;		_getMain_All_Error_Status
  7143 ;;		_setControl_Lights_Table
  7144 ;;		_setLog_Code
  7145 ;; This function is called by:
  7146 ;;		_setRF_Main
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           
  7151                           ;psect for function _getRxData
  7152  0A25                     _getRxData:	
  7153                           
  7154                           ;RF_Control_B1.c: 274: char error = getMain_All_Error_Status(0);
  7155                           
  7156                           ;incstack = 0
  7157                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7158  0A25  3000               	movlw	0
  7159  0A26  3191  2105  318A   	fcall	_getMain_All_Error_Status
  7160  0A29  0020               	movlb	0	; select bank0
  7161  0A2A  00E8               	movwf	??_getRxData
  7162  0A2B  0868               	movf	??_getRxData,w
  7163  0A2C  00E9               	movwf	getRxData@error
  7164                           
  7165                           ;RF_Control_B1.c: 275: if (error == 0) {
  7166  0A2D  08E9               	movf	getRxData@error,f
  7167  0A2E  1D03               	skipz
  7168  0A2F  0008               	return
  7169                           
  7170                           ;RF_Control_B1.c: 276: if (RF1.Learn == 1) {
  7171  0A30  0021               	movlb	1	; select bank1
  7172  0A31  1F3C               	btfss	_RF1^(0+128),6
  7173  0A32  2A43               	goto	l9530
  7174                           
  7175                           ;RF_Control_B1.c: 277: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7176  0A33  0023               	movlb	3	; select bank3
  7177  0A34  08A0               	movf	_RF_Data^(0+384),f
  7178  0A35  1D03               	skipz
  7179  0A36  2A40               	goto	l2278
  7180  0A37  0821               	movf	(_RF_Data^(0+384)+1),w
  7181  0A38  3A64               	xorlw	100
  7182  0A39  1D03               	skipz
  7183  0A3A  2A40               	goto	l2278
  7184                           
  7185                           ;RF_Control_B1.c: 278: setLog_Code();
  7186  0A3B  3191  21A3         	fcall	_setLog_Code
  7187                           
  7188                           ;RF_Control_B1.c: 279: RF1.Checked = 1;
  7189  0A3D  0021               	movlb	1	; select bank1
  7190  0A3E  15BD               	bsf	(_RF1^(0+128)+1),3
  7191                           
  7192                           ;RF_Control_B1.c: 280: } else {
  7193  0A3F  0008               	return
  7194  0A40                     l2278:	
  7195                           
  7196                           ;RF_Control_B1.c: 281: RF1.Checked = 0;
  7197  0A40  0021               	movlb	1	; select bank1
  7198  0A41  11BD               	bcf	(_RF1^(0+128)+1),3
  7199                           
  7200                           ;RF_Control_B1.c: 282: }
  7201                           ;RF_Control_B1.c: 283: } else {
  7202  0A42  0008               	return
  7203  0A43                     l9530:	
  7204                           
  7205                           ;RF_Control_B1.c: 284: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7206  0A43  0023               	movlb	3	; select bank3
  7207  0A44  08A0               	movf	_RF_Data^(0+384),f
  7208  0A45  1D03               	skipz
  7209  0A46  2A7C               	goto	l9552
  7210  0A47  0821               	movf	(_RF_Data^(0+384)+1),w
  7211  0A48  3A02               	xorlw	2
  7212  0A49  1D03               	skipz
  7213  0A4A  2A7C               	goto	l9552
  7214                           
  7215                           ;RF_Control_B1.c: 286: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7216  0A4B  082C               	movf	(_RF_Data^(0+384)+12),w
  7217  0A4C  3AFF               	xorlw	255
  7218  0A4D  1D03               	skipz
  7219  0A4E  2A5B               	goto	l9542
  7220  0A4F  082D               	movf	(_RF_Data^(0+384)+13),w
  7221  0A50  3AFF               	xorlw	255
  7222  0A51  1D03               	skipz
  7223  0A52  2A5B               	goto	l9542
  7224  0A53  082E               	movf	(_RF_Data^(0+384)+14),w
  7225  0A54  3AFF               	xorlw	255
  7226  0A55  1D03               	skipz
  7227  0A56  2A5B               	goto	l9542
  7228                           
  7229                           ;RF_Control_B1.c: 287: __nop();
  7230  0A57  0000               	nop
  7231                           
  7232                           ;RF_Control_B1.c: 288: RF1.Checked = 0;
  7233  0A58  0021               	movlb	1	; select bank1
  7234  0A59  11BD               	bcf	(_RF1^(0+128)+1),3
  7235                           
  7236                           ;RF_Control_B1.c: 289: } else {
  7237  0A5A  0008               	return
  7238  0A5B                     l9542:	
  7239                           
  7240                           ;RF_Control_B1.c: 290: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7241  0A5B  087B               	movf	_product,w
  7242  0A5C  3E0C               	addlw	12
  7243  0A5D  0086               	movwf	6
  7244  0A5E  3002               	movlw	2	; select bank4/5
  7245  0A5F  0087               	movwf	7
  7246  0A60  0023               	movlb	3	; select bank3
  7247  0A61  082C               	movf	(_RF_Data^(0+384)+12),w
  7248  0A62  0601               	xorwf	1,w
  7249  0A63  1D03               	skipz
  7250  0A64  0008               	return
  7251  0A65  087B               	movf	_product,w
  7252  0A66  3E0D               	addlw	13
  7253  0A67  0086               	movwf	6
  7254  0A68  3002               	movlw	2	; select bank4/5
  7255  0A69  0087               	movwf	7
  7256  0A6A  082D               	movf	(_RF_Data^(0+384)+13),w
  7257  0A6B  0601               	xorwf	1,w
  7258  0A6C  1D03               	skipz
  7259  0A6D  0008               	return
  7260  0A6E  087B               	movf	_product,w
  7261  0A6F  3E0E               	addlw	14
  7262  0A70  0086               	movwf	6
  7263  0A71  3002               	movlw	2	; select bank4/5
  7264  0A72  0087               	movwf	7
  7265  0A73  082E               	movf	(_RF_Data^(0+384)+14),w
  7266  0A74  0601               	xorwf	1,w
  7267  0A75  1D03               	skipz
  7268  0A76  0008               	return
  7269                           
  7270                           ;RF_Control_B1.c: 291: setControl_Lights_Table();
  7271  0A77  3189  21B7         	fcall	_setControl_Lights_Table
  7272                           
  7273                           ;RF_Control_B1.c: 292: RF1.Checked = 1;
  7274  0A79  0021               	movlb	1	; select bank1
  7275  0A7A  15BD               	bsf	(_RF1^(0+128)+1),3
  7276                           
  7277                           ;RF_Control_B1.c: 293: }
  7278                           ;RF_Control_B1.c: 294: }
  7279                           ;RF_Control_B1.c: 295: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7280  0A7B  0008               	return
  7281  0A7C                     l9552:	
  7282  0A7C  0023               	movlb	3	; select bank3
  7283  0A7D  0820               	movf	_RF_Data^(0+384),w
  7284  0A7E  3AFF               	xorlw	255
  7285  0A7F  1D03               	skipz
  7286  0A80  2A87               	goto	l9558
  7287  0A81  0821               	movf	(_RF_Data^(0+384)+1),w
  7288  0A82  3A02               	xorlw	2
  7289  0A83  1D03               	skipz
  7290  0A84  2A87               	goto	l9558
  7291                           
  7292                           ;RF_Control_B1.c: 296: __nop();
  7293  0A85  0000               	nop
  7294                           
  7295                           ;RF_Control_B1.c: 297: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7296  0A86  0008               	return
  7297  0A87                     l9558:	
  7298  0A87  0023               	movlb	3	; select bank3
  7299  0A88  08A0               	movf	_RF_Data^(0+384),f
  7300  0A89  1D03               	skipz
  7301  0A8A  2A91               	goto	l2288
  7302  0A8B  0821               	movf	(_RF_Data^(0+384)+1),w
  7303  0A8C  3A65               	xorlw	101
  7304  0A8D  1D03               	skipz
  7305  0A8E  2A91               	goto	l2288
  7306                           
  7307                           ;RF_Control_B1.c: 298: __nop();
  7308  0A8F  0000               	nop
  7309                           
  7310                           ;RF_Control_B1.c: 299: } else {
  7311  0A90  0008               	return
  7312  0A91                     l2288:	
  7313                           
  7314                           ;RF_Control_B1.c: 300: RF1.Checked = 0;
  7315  0A91  0021               	movlb	1	; select bank1
  7316  0A92  11BD               	bcf	(_RF1^(0+128)+1),3
  7317                           
  7318                           ;RF_Control_B1.c: 301: }
  7319                           ;RF_Control_B1.c: 306: }
  7320                           ;RF_Control_B1.c: 307: } else {
  7321  0A93  0008               	return
  7322  0A94                     __end_of_getRxData:	
  7323                           ;RF_Control_B1.c: 308: ;
  7324                           
  7325                           
  7326                           	psect	text26
  7327  11A3                     __ptext26:	
  7328 ;; *************** function _setLog_Code *****************
  7329 ;; Defined at:
  7330 ;;		line 313 in file "../src/RF_Control_B1.c"
  7331 ;; Parameters:    Size  Location     Type
  7332 ;;		None
  7333 ;; Auto vars:     Size  Location     Type
  7334 ;;		None
  7335 ;; Return value:  Size  Location     Type
  7336 ;;		None               void
  7337 ;; Registers used:
  7338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7339 ;; Tracked objects:
  7340 ;;		On entry : 0/0
  7341 ;;		On exit  : 0/0
  7342 ;;		Unchanged: 0/0
  7343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7348 ;;Total ram usage:        1 bytes
  7349 ;; Hardware stack levels used:    1
  7350 ;; Hardware stack levels required when called:    7
  7351 ;; This function calls:
  7352 ;;		_setBuz
  7353 ;;		_setMemory_LoopSave
  7354 ;;		_setMemory_Modify
  7355 ;; This function is called by:
  7356 ;;		_getRxData
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           
  7361                           ;psect for function _setLog_Code
  7362  11A3                     _setLog_Code:	
  7363                           
  7364                           ;RF_Control_B1.c: 314: RF1.Learn = 0;
  7365                           
  7366                           ;incstack = 0
  7367                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7368  11A3  0021               	movlb	1	; select bank1
  7369  11A4  133C               	bcf	_RF1^(0+128),6
  7370                           
  7371                           ;RF_Control_B1.c: 315: product->Data[12]=RF_Data[12];
  7372  11A5  0023               	movlb	3	; select bank3
  7373  11A6  082C               	movf	(_RF_Data^(0+384)+12),w
  7374  11A7  0020               	movlb	0	; select bank0
  7375  11A8  00AD               	movwf	??_setLog_Code
  7376  11A9  087B               	movf	_product,w
  7377  11AA  3E0C               	addlw	12
  7378  11AB  0086               	movwf	6
  7379  11AC  3002               	movlw	2	; select bank4/5
  7380  11AD  0087               	movwf	7
  7381  11AE  082D               	movf	??_setLog_Code,w
  7382  11AF  0081               	movwf	1
  7383                           
  7384                           ;RF_Control_B1.c: 316: product->Data[13]=RF_Data[13];
  7385  11B0  0023               	movlb	3	; select bank3
  7386  11B1  082D               	movf	(_RF_Data^(0+384)+13),w
  7387  11B2  0020               	movlb	0	; select bank0
  7388  11B3  00AD               	movwf	??_setLog_Code
  7389  11B4  087B               	movf	_product,w
  7390  11B5  3E0D               	addlw	13
  7391  11B6  0086               	movwf	6
  7392  11B7  3002               	movlw	2	; select bank4/5
  7393  11B8  0087               	movwf	7
  7394  11B9  082D               	movf	??_setLog_Code,w
  7395  11BA  0081               	movwf	1
  7396                           
  7397                           ;RF_Control_B1.c: 317: product->Data[14]=RF_Data[14];
  7398  11BB  0023               	movlb	3	; select bank3
  7399  11BC  082E               	movf	(_RF_Data^(0+384)+14),w
  7400  11BD  0020               	movlb	0	; select bank0
  7401  11BE  00AD               	movwf	??_setLog_Code
  7402  11BF  087B               	movf	_product,w
  7403  11C0  3E0E               	addlw	14
  7404  11C1  0086               	movwf	6
  7405  11C2  3002               	movlw	2	; select bank4/5
  7406  11C3  0087               	movwf	7
  7407  11C4  082D               	movf	??_setLog_Code,w
  7408  11C5  0081               	movwf	1
  7409                           
  7410                           ;RF_Control_B1.c: 318: setBuz(1, 100);
  7411  11C6  3064               	movlw	100
  7412  11C7  00A9               	movwf	setBuz@time
  7413  11C8  3000               	movlw	0
  7414  11C9  00AA               	movwf	setBuz@time+1
  7415  11CA  3001               	movlw	1
  7416  11CB  3195  25D1  3191   	fcall	_setBuz
  7417                           
  7418                           ;RF_Control_B1.c: 319: if (myMain.First == 1) {
  7419  11CE  0021               	movlb	1	; select bank1
  7420  11CF  1EA0               	btfss	_myMain^(0+128),5
  7421  11D0  29D5               	goto	l2294
  7422                           
  7423                           ;RF_Control_B1.c: 320: setMemory_LoopSave(1);
  7424  11D1  3001               	movlw	1
  7425  11D2  319C  2456  3191   	fcall	_setMemory_LoopSave
  7426  11D5                     l2294:	
  7427                           
  7428                           ;RF_Control_B1.c: 321: }
  7429                           ;RF_Control_B1.c: 322: setMemory_Modify(1);
  7430  11D5  3001               	movlw	1
  7431  11D6  319C  2443         	fcall	_setMemory_Modify
  7432  11D8  0008               	return
  7433  11D9                     __end_of_setLog_Code:	
  7434                           
  7435                           	psect	text27
  7436  1C56                     __ptext27:	
  7437 ;; *************** function _setMemory_LoopSave *****************
  7438 ;; Defined at:
  7439 ;;		line 1006 in file "../src/MCU_B1.c"
  7440 ;; Parameters:    Size  Location     Type
  7441 ;;  command         1    wreg     unsigned char 
  7442 ;; Auto vars:     Size  Location     Type
  7443 ;;  command         1    1[BANK0 ] unsigned char 
  7444 ;; Return value:  Size  Location     Type
  7445 ;;		None               void
  7446 ;; Registers used:
  7447 ;;		wreg, status,2, status,0
  7448 ;; Tracked objects:
  7449 ;;		On entry : 0/0
  7450 ;;		On exit  : 0/0
  7451 ;;		Unchanged: 0/0
  7452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7454 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;Total ram usage:        2 bytes
  7458 ;; Hardware stack levels used:    1
  7459 ;; Hardware stack levels required when called:    5
  7460 ;; This function calls:
  7461 ;;		Nothing
  7462 ;; This function is called by:
  7463 ;;		_setLog_Code
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           
  7468                           ;psect for function _setMemory_LoopSave
  7469  1C56                     _setMemory_LoopSave:	
  7470                           
  7471                           ;incstack = 0
  7472                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7473                           ;setMemory_LoopSave@command stored from wreg
  7474  1C56  0020               	movlb	0	; select bank0
  7475  1C57  00A1               	movwf	setMemory_LoopSave@command
  7476                           
  7477                           ;MCU_B1.c: 1007: Memory.LoopSave = command == 1 ? 1 : 0;
  7478  1C58  0821               	movf	setMemory_LoopSave@command,w
  7479  1C59  3A01               	xorlw	1
  7480  1C5A  3000               	movlw	0
  7481  1C5B  1903               	skipnz
  7482  1C5C  3001               	movlw	1
  7483  1C5D  00A0               	movwf	??_setMemory_LoopSave
  7484  1C5E  0DA0               	rlf	??_setMemory_LoopSave,f
  7485  1C5F  0DA0               	rlf	??_setMemory_LoopSave,f
  7486  1C60  0024               	movlb	4	; select bank4
  7487  1C61  0844               	movf	(_Memory^(0+512)+36),w
  7488  1C62  0020               	movlb	0	; select bank0
  7489  1C63  0620               	xorwf	??_setMemory_LoopSave,w
  7490  1C64  39FB               	andlw	-5
  7491  1C65  0620               	xorwf	??_setMemory_LoopSave,w
  7492  1C66  0024               	movlb	4	; select bank4
  7493  1C67  00C4               	movwf	(_Memory^(0+512)+36)
  7494  1C68  0008               	return
  7495  1C69                     __end_of_setMemory_LoopSave:	
  7496                           
  7497                           	psect	text28
  7498  09B7                     __ptext28:	
  7499 ;; *************** function _setControl_Lights_Table *****************
  7500 ;; Defined at:
  7501 ;;		line 326 in file "../src/RF_Control_B1.c"
  7502 ;; Parameters:    Size  Location     Type
  7503 ;;		None
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;		None
  7506 ;; Return value:  Size  Location     Type
  7507 ;;		None               void
  7508 ;; Registers used:
  7509 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;Total ram usage:        0 bytes
  7520 ;; Hardware stack levels used:    1
  7521 ;; Hardware stack levels required when called:   11
  7522 ;; This function calls:
  7523 ;;		_setBuz
  7524 ;;		_setRFSW_AdjControl
  7525 ;;		_setRFSW_Control
  7526 ;;		_setTxData
  7527 ;; This function is called by:
  7528 ;;		_getRxData
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           
  7533                           ;psect for function _setControl_Lights_Table
  7534  09B7                     _setControl_Lights_Table:	
  7535                           
  7536                           ;RF_Control_B1.c: 327: switch (RF_Data[15]) {
  7537                           
  7538                           ;incstack = 0
  7539                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7540  09B7  2A09               	goto	l9154
  7541  09B8                     l9126:	
  7542                           ;RF_Control_B1.c: 328: case 0x00:
  7543                           
  7544                           
  7545                           ;RF_Control_B1.c: 331: setRFSW_Control(1);
  7546  09B8  3001               	movlw	1
  7547  09B9  3194  247D  3189   	fcall	_setRFSW_Control
  7548                           
  7549                           ;RF_Control_B1.c: 337: setRFSW_Control(2);
  7550  09BC  3002               	movlw	2
  7551  09BD  3194  247D  3189   	fcall	_setRFSW_Control
  7552                           
  7553                           ;RF_Control_B1.c: 345: product->Data[9]=0;
  7554  09C0  087B               	movf	_product,w
  7555  09C1  3E09               	addlw	9
  7556  09C2  0086               	movwf	6
  7557  09C3  3002               	movlw	2	; select bank4/5
  7558  09C4  0087               	movwf	7
  7559  09C5  0181               	clrf	1
  7560                           
  7561                           ;RF_Control_B1.c: 346: product->Data[11]=0;
  7562  09C6  087B               	movf	_product,w
  7563  09C7  3E0B               	addlw	11
  7564  09C8  0086               	movwf	6
  7565  09C9  3002               	movlw	2	; select bank4/5
  7566  09CA  0087               	movwf	7
  7567  09CB  0181               	clrf	1
  7568                           
  7569                           ;RF_Control_B1.c: 347: product->Data[15]=0;
  7570  09CC  087B               	movf	_product,w
  7571  09CD  3E0F               	addlw	15
  7572  09CE  0086               	movwf	6
  7573  09CF  3002               	movlw	2	; select bank4/5
  7574  09D0  0087               	movwf	7
  7575  09D1  0181               	clrf	1
  7576                           
  7577                           ;RF_Control_B1.c: 348: product->Data[17]=0;
  7578  09D2  087B               	movf	_product,w
  7579  09D3  3E11               	addlw	17
  7580  09D4  0086               	movwf	6
  7581  09D5  3002               	movlw	2	; select bank4/5
  7582  09D6  0087               	movwf	7
  7583  09D7  0181               	clrf	1
  7584                           
  7585                           ;RF_Control_B1.c: 349: setBuz(1, 100);
  7586  09D8  3064               	movlw	100
  7587  09D9  0020               	movlb	0	; select bank0
  7588  09DA  00A9               	movwf	setBuz@time
  7589  09DB  3000               	movlw	0
  7590  09DC  00AA               	movwf	setBuz@time+1
  7591  09DD  3001               	movlw	1
  7592  09DE  3195  25D1  3189   	fcall	_setBuz
  7593                           
  7594                           ;RF_Control_B1.c: 350: setTxData();
  7595  09E1  318C  24A6         	fcall	_setTxData
  7596                           
  7597                           ;RF_Control_B1.c: 351: break;
  7598  09E3  0008               	return
  7599  09E4                     l9140:	
  7600                           ;RF_Control_B1.c: 352: case 0x20:
  7601                           
  7602                           
  7603                           ;RF_Control_B1.c: 353: product->Data[9]=0;
  7604  09E4  087B               	movf	_product,w
  7605  09E5  3E09               	addlw	9
  7606  09E6  0086               	movwf	6
  7607  09E7  3002               	movlw	2	; select bank4/5
  7608  09E8  0087               	movwf	7
  7609  09E9  0181               	clrf	1
  7610                           
  7611                           ;RF_Control_B1.c: 354: product->Data[11]=0;
  7612  09EA  087B               	movf	_product,w
  7613  09EB  3E0B               	addlw	11
  7614  09EC  0086               	movwf	6
  7615  09ED  3002               	movlw	2	; select bank4/5
  7616  09EE  0087               	movwf	7
  7617  09EF  0181               	clrf	1
  7618                           
  7619                           ;RF_Control_B1.c: 355: product->Data[17]=0;
  7620  09F0  087B               	movf	_product,w
  7621  09F1  3E11               	addlw	17
  7622  09F2  0086               	movwf	6
  7623  09F3  3002               	movlw	2	; select bank4/5
  7624  09F4  0087               	movwf	7
  7625  09F5  0181               	clrf	1
  7626                           
  7627                           ;RF_Control_B1.c: 356: setTxData();
  7628  09F6  318C  24A6         	fcall	_setTxData
  7629                           
  7630                           ;RF_Control_B1.c: 357: break;
  7631  09F8  0008               	return
  7632  09F9                     l9144:	
  7633                           ;RF_Control_B1.c: 358: case 0x01:
  7634                           
  7635                           
  7636                           ;RF_Control_B1.c: 360: setRFSW_Control(1);
  7637  09F9  3001               	movlw	1
  7638  09FA  3194  247D         	fcall	_setRFSW_Control
  7639                           
  7640                           ;RF_Control_B1.c: 362: break;
  7641  09FC  0008               	return
  7642  09FD                     l9146:	
  7643                           ;RF_Control_B1.c: 363: case 0x02:
  7644                           
  7645                           
  7646                           ;RF_Control_B1.c: 365: setRFSW_Control(2);
  7647  09FD  3002               	movlw	2
  7648  09FE  3194  247D         	fcall	_setRFSW_Control
  7649                           
  7650                           ;RF_Control_B1.c: 372: break;
  7651                           
  7652                           ;RF_Control_B1.c: 368: case 0x03:
  7653                           
  7654                           ;RF_Control_B1.c: 367: break;
  7655  0A00  0008               	return
  7656  0A01                     l9148:	
  7657                           ;RF_Control_B1.c: 373: case 0x11:
  7658                           
  7659                           
  7660                           ;RF_Control_B1.c: 376: setRFSW_AdjControl(1);
  7661  0A01  3001               	movlw	1
  7662  0A02  3192  2210         	fcall	_setRFSW_AdjControl
  7663                           
  7664                           ;RF_Control_B1.c: 379: break;
  7665  0A04  0008               	return
  7666  0A05                     l9150:	
  7667                           ;RF_Control_B1.c: 380: case 0x21:
  7668                           
  7669                           
  7670                           ;RF_Control_B1.c: 383: setRFSW_AdjControl(2);
  7671  0A05  3002               	movlw	2
  7672  0A06  3192  2210         	fcall	_setRFSW_AdjControl
  7673                           
  7674                           ;RF_Control_B1.c: 394: }
  7675                           
  7676                           ;RF_Control_B1.c: 393: break;
  7677                           
  7678                           ;RF_Control_B1.c: 387: case 0x31:
  7679                           
  7680                           ;RF_Control_B1.c: 386: break;
  7681  0A08  0008               	return
  7682  0A09                     l9154:	
  7683  0A09  0023               	movlb	3	; select bank3
  7684  0A0A  082F               	movf	(_RF_Data^(0+384)+15),w
  7685                           
  7686                           ; Switch size 1, requested type "space"
  7687                           ; Number of cases is 8, Range of values is 0 to 49
  7688                           ; switch strategies available:
  7689                           ; Name         Instructions Cycles
  7690                           ; simple_byte           25    13 (average)
  7691                           ; direct_byte          106     6 (fixed)
  7692                           ; jumptable            260     6 (fixed)
  7693                           ;	Chosen strategy is simple_byte
  7694  0A0B  3A00               	xorlw	0	; case 0
  7695  0A0C  1903               	skipnz
  7696  0A0D  29B8               	goto	l9126
  7697  0A0E  3A01               	xorlw	1	; case 1
  7698  0A0F  1903               	skipnz
  7699  0A10  29F9               	goto	l9144
  7700  0A11  3A03               	xorlw	3	; case 2
  7701  0A12  1903               	skipnz
  7702  0A13  29FD               	goto	l9146
  7703  0A14  3A01               	xorlw	1	; case 3
  7704  0A15  1903               	skipnz
  7705  0A16  2A24               	goto	l2308
  7706  0A17  3A12               	xorlw	18	; case 17
  7707  0A18  1903               	skipnz
  7708  0A19  2A01               	goto	l9148
  7709  0A1A  3A31               	xorlw	49	; case 32
  7710  0A1B  1903               	skipnz
  7711  0A1C  29E4               	goto	l9140
  7712  0A1D  3A01               	xorlw	1	; case 33
  7713  0A1E  1903               	skipnz
  7714  0A1F  2A05               	goto	l9150
  7715  0A20  3A10               	xorlw	16	; case 49
  7716  0A21  1903               	skipnz
  7717  0A22  2A24               	goto	l2308
  7718  0A23  2A24               	goto	l2308
  7719  0A24                     l2308:	
  7720  0A24  0008               	return
  7721  0A25                     __end_of_setControl_Lights_Table:	
  7722                           
  7723                           	psect	text29
  7724  147D                     __ptext29:	
  7725 ;; *************** function _setRFSW_Control *****************
  7726 ;; Defined at:
  7727 ;;		line 477 in file "../src/RF_Control_B1.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;  sw              1    wreg     unsigned char 
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;  sw              1   71[BANK0 ] unsigned char 
  7732 ;; Return value:  Size  Location     Type
  7733 ;;		None               void
  7734 ;; Registers used:
  7735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7743 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7744 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7745 ;;Total ram usage:        2 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; Hardware stack levels required when called:   10
  7748 ;; This function calls:
  7749 ;;		_getDimmerLights_Status
  7750 ;;		_setDelayOff_GO
  7751 ;;		_setDimmerLights_SwOff
  7752 ;;		_setDimmerLights_SwOn
  7753 ;;		_setRF_DimmerLights
  7754 ;; This function is called by:
  7755 ;;		_setControl_Lights_Table
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           
  7760                           ;psect for function _setRFSW_Control
  7761  147D                     _setRFSW_Control:	
  7762                           
  7763                           ;incstack = 0
  7764                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7765                           ;setRFSW_Control@sw stored from wreg
  7766  147D  0020               	movlb	0	; select bank0
  7767  147E  00E7               	movwf	setRFSW_Control@sw
  7768                           
  7769                           ;RF_Control_B1.c: 480: setDimmerLights_SwOn(sw);
  7770  147F  0867               	movf	setRFSW_Control@sw,w
  7771  1480  3192  2287  3194   	fcall	_setDimmerLights_SwOn
  7772                           
  7773                           ;RF_Control_B1.c: 482: if (getDimmerLights_Status(sw) == 1) {
  7774  1483  0020               	movlb	0	; select bank0
  7775  1484  0867               	movf	setRFSW_Control@sw,w
  7776  1485  319B  23A4  3194   	fcall	_getDimmerLights_Status
  7777  1488  3A01               	xorlw	1
  7778  1489  1D03               	skipz
  7779  148A  2CA4               	goto	l8980
  7780                           
  7781                           ;RF_Control_B1.c: 483: if (RF_Data[16] == 0x80) {
  7782  148B  0023               	movlb	3	; select bank3
  7783  148C  0830               	movf	(_RF_Data^(0+384)+16),w
  7784  148D  3A80               	xorlw	128
  7785  148E  1D03               	skipz
  7786  148F  2C9D               	goto	l2312
  7787                           
  7788                           ;RF_Control_B1.c: 484: setDelayOff_GO(sw, 1, RF_Data[17]);
  7789  1490  0020               	movlb	0	; select bank0
  7790  1491  01AA               	clrf	setDelayOff_GO@command
  7791  1492  0AAA               	incf	setDelayOff_GO@command,f
  7792  1493  0023               	movlb	3	; select bank3
  7793  1494  0831               	movf	(_RF_Data^(0+384)+17),w
  7794  1495  0020               	movlb	0	; select bank0
  7795  1496  00E6               	movwf	??_setRFSW_Control
  7796  1497  0866               	movf	??_setRFSW_Control,w
  7797  1498  00AB               	movwf	setDelayOff_GO@value
  7798  1499  0867               	movf	setRFSW_Control@sw,w
  7799  149A  3197  273E  3194   	fcall	_setDelayOff_GO
  7800  149D                     l2312:	
  7801                           
  7802                           ;RF_Control_B1.c: 485: }
  7803                           ;RF_Control_B1.c: 487: setRF_DimmerLights(sw, 1);
  7804  149D  0020               	movlb	0	; select bank0
  7805  149E  01DD               	clrf	setRF_DimmerLights@on
  7806  149F  0ADD               	incf	setRF_DimmerLights@on,f
  7807  14A0  0867               	movf	setRFSW_Control@sw,w
  7808  14A1  3189  214B         	fcall	_setRF_DimmerLights
  7809                           
  7810                           ;RF_Control_B1.c: 489: } else {
  7811  14A3  0008               	return
  7812  14A4                     l8980:	
  7813                           
  7814                           ;RF_Control_B1.c: 490: if (RF_Data[16] == 0x80) {
  7815  14A4  0023               	movlb	3	; select bank3
  7816  14A5  0830               	movf	(_RF_Data^(0+384)+16),w
  7817  14A6  3A80               	xorlw	128
  7818  14A7  1D03               	skipz
  7819  14A8  2CBD               	goto	l8984
  7820                           
  7821                           ;RF_Control_B1.c: 491: setDelayOff_GO(sw, 1, RF_Data[17]);
  7822  14A9  0020               	movlb	0	; select bank0
  7823  14AA  01AA               	clrf	setDelayOff_GO@command
  7824  14AB  0AAA               	incf	setDelayOff_GO@command,f
  7825  14AC  0023               	movlb	3	; select bank3
  7826  14AD  0831               	movf	(_RF_Data^(0+384)+17),w
  7827  14AE  0020               	movlb	0	; select bank0
  7828  14AF  00E6               	movwf	??_setRFSW_Control
  7829  14B0  0866               	movf	??_setRFSW_Control,w
  7830  14B1  00AB               	movwf	setDelayOff_GO@value
  7831  14B2  0867               	movf	setRFSW_Control@sw,w
  7832  14B3  3197  273E  3194   	fcall	_setDelayOff_GO
  7833                           
  7834                           ;RF_Control_B1.c: 492: setRF_DimmerLights(sw, 1);
  7835  14B6  0020               	movlb	0	; select bank0
  7836  14B7  01DD               	clrf	setRF_DimmerLights@on
  7837  14B8  0ADD               	incf	setRF_DimmerLights@on,f
  7838  14B9  0867               	movf	setRFSW_Control@sw,w
  7839  14BA  3189  214B         	fcall	_setRF_DimmerLights
  7840                           
  7841                           ;RF_Control_B1.c: 493: } else {
  7842  14BC  0008               	return
  7843  14BD                     l8984:	
  7844                           
  7845                           ;RF_Control_B1.c: 495: setDimmerLights_SwOff(sw);
  7846  14BD  0020               	movlb	0	; select bank0
  7847  14BE  0867               	movf	setRFSW_Control@sw,w
  7848  14BF  3196  26DF  3194   	fcall	_setDimmerLights_SwOff
  7849                           
  7850                           ;RF_Control_B1.c: 496: setRF_DimmerLights(sw, 0);
  7851  14C2  0020               	movlb	0	; select bank0
  7852  14C3  01DD               	clrf	setRF_DimmerLights@on
  7853  14C4  0867               	movf	setRFSW_Control@sw,w
  7854  14C5  3189  214B  3194   	fcall	_setRF_DimmerLights
  7855                           
  7856                           ;RF_Control_B1.c: 498: setDelayOff_GO(sw, 0, 0);
  7857  14C8  0020               	movlb	0	; select bank0
  7858  14C9  01AA               	clrf	setDelayOff_GO@command
  7859  14CA  01AB               	clrf	setDelayOff_GO@value
  7860  14CB  0867               	movf	setRFSW_Control@sw,w
  7861  14CC  3197  273E         	fcall	_setDelayOff_GO
  7862  14CE  0008               	return
  7863  14CF                     __end_of_setRFSW_Control:	
  7864                           
  7865                           	psect	text30
  7866  1210                     __ptext30:	
  7867 ;; *************** function _setRFSW_AdjControl *****************
  7868 ;; Defined at:
  7869 ;;		line 504 in file "../src/RF_Control_B1.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  sw              1    wreg     unsigned char 
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;  sw              1   70[BANK0 ] unsigned char 
  7874 ;; Return value:  Size  Location     Type
  7875 ;;		None               void
  7876 ;; Registers used:
  7877 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7878 ;; Tracked objects:
  7879 ;;		On entry : 0/0
  7880 ;;		On exit  : 0/0
  7881 ;;		Unchanged: 0/0
  7882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7884 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7885 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7886 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7887 ;;Total ram usage:        3 bytes
  7888 ;; Hardware stack levels used:    1
  7889 ;; Hardware stack levels required when called:   10
  7890 ;; This function calls:
  7891 ;;		_getDimmerLights_Status
  7892 ;;		_setMemory_Modify
  7893 ;;		_setRF_DimmerValue
  7894 ;;		_setTxData
  7895 ;; This function is called by:
  7896 ;;		_setControl_Lights_Table
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           
  7901                           ;psect for function _setRFSW_AdjControl
  7902  1210                     _setRFSW_AdjControl:	
  7903                           
  7904                           ;incstack = 0
  7905                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7906                           ;setRFSW_AdjControl@sw stored from wreg
  7907  1210  0020               	movlb	0	; select bank0
  7908  1211  00E6               	movwf	setRFSW_AdjControl@sw
  7909                           
  7910                           ;RF_Control_B1.c: 506: if (getDimmerLights_Status(sw) == 1) {
  7911  1212  0866               	movf	setRFSW_AdjControl@sw,w
  7912  1213  319B  23A4  3192   	fcall	_getDimmerLights_Status
  7913  1216  3A01               	xorlw	1
  7914  1217  1D03               	skipz
  7915  1218  2A23               	goto	l8992
  7916                           
  7917                           ;RF_Control_B1.c: 507: setMemory_Modify(1);
  7918  1219  3001               	movlw	1
  7919  121A  319C  2443  3192   	fcall	_setMemory_Modify
  7920                           
  7921                           ;RF_Control_B1.c: 508: setRF_DimmerValue(sw);
  7922  121D  0020               	movlb	0	; select bank0
  7923  121E  0866               	movf	setRFSW_AdjControl@sw,w
  7924  121F  3191  2138  3192   	fcall	_setRF_DimmerValue
  7925                           
  7926                           ;RF_Control_B1.c: 509: } else {
  7927  1222  2A35               	goto	l2320
  7928  1223                     l8992:	
  7929                           
  7930                           ;RF_Control_B1.c: 510: product->Data[9]=product->Data[20 + sw];
  7931  1223  0020               	movlb	0	; select bank0
  7932  1224  0866               	movf	setRFSW_AdjControl@sw,w
  7933  1225  3E14               	addlw	20
  7934  1226  077B               	addwf	_product,w
  7935  1227  00E4               	movwf	??_setRFSW_AdjControl
  7936  1228  0864               	movf	??_setRFSW_AdjControl,w
  7937  1229  0086               	movwf	6
  7938  122A  3002               	movlw	2	; select bank4/5
  7939  122B  0087               	movwf	7
  7940  122C  0801               	movf	1,w
  7941  122D  00E5               	movwf	??_setRFSW_AdjControl+1
  7942  122E  087B               	movf	_product,w
  7943  122F  3E09               	addlw	9
  7944  1230  0086               	movwf	6
  7945  1231  3002               	movlw	2	; select bank4/5
  7946  1232  0087               	movwf	7
  7947  1233  0865               	movf	??_setRFSW_AdjControl+1,w
  7948  1234  0081               	movwf	1
  7949  1235                     l2320:	
  7950                           
  7951                           ;RF_Control_B1.c: 511: }
  7952                           ;RF_Control_B1.c: 512: product->Data[17]=product->Data[26 + sw];
  7953  1235  0020               	movlb	0	; select bank0
  7954  1236  0866               	movf	setRFSW_AdjControl@sw,w
  7955  1237  3E1A               	addlw	26
  7956  1238  077B               	addwf	_product,w
  7957  1239  00E4               	movwf	??_setRFSW_AdjControl
  7958  123A  0864               	movf	??_setRFSW_AdjControl,w
  7959  123B  0086               	movwf	6
  7960  123C  3002               	movlw	2	; select bank4/5
  7961  123D  0087               	movwf	7
  7962  123E  0801               	movf	1,w
  7963  123F  00E5               	movwf	??_setRFSW_AdjControl+1
  7964  1240  087B               	movf	_product,w
  7965  1241  3E11               	addlw	17
  7966  1242  0086               	movwf	6
  7967  1243  3002               	movlw	2	; select bank4/5
  7968  1244  0087               	movwf	7
  7969  1245  0865               	movf	??_setRFSW_AdjControl+1,w
  7970  1246  0081               	movwf	1
  7971                           
  7972                           ;RF_Control_B1.c: 513: setTxData();
  7973  1247  318C  24A6         	fcall	_setTxData
  7974  1249  0008               	return
  7975  124A                     __end_of_setRFSW_AdjControl:	
  7976                           
  7977                           	psect	text31
  7978  1138                     __ptext31:	
  7979 ;; *************** function _setRF_DimmerValue *****************
  7980 ;; Defined at:
  7981 ;;		line 518 in file "../src/RF_Control_B1.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;  lights          1    wreg     unsigned char 
  7984 ;; Auto vars:     Size  Location     Type
  7985 ;;  lights          1   67[BANK0 ] unsigned char 
  7986 ;; Return value:  Size  Location     Type
  7987 ;;		None               void
  7988 ;; Registers used:
  7989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7997 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;Total ram usage:        3 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    9
  8002 ;; This function calls:
  8003 ;;		_setDimmerLights_AdjRF
  8004 ;; This function is called by:
  8005 ;;		_setRFSW_AdjControl
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           
  8010                           ;psect for function _setRF_DimmerValue
  8011  1138                     _setRF_DimmerValue:	
  8012                           
  8013                           ;incstack = 0
  8014                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8015                           ;setRF_DimmerValue@lights stored from wreg
  8016  1138  0020               	movlb	0	; select bank0
  8017  1139  00E3               	movwf	setRF_DimmerValue@lights
  8018                           
  8019                           ;RF_Control_B1.c: 519: if (RF_Data[9] > 0x64) {
  8020  113A  3065               	movlw	101
  8021  113B  0023               	movlb	3	; select bank3
  8022  113C  0229               	subwf	(_RF_Data^(0+384)+9),w
  8023  113D  1C03               	skipc
  8024  113E  2945               	goto	l8906
  8025                           
  8026                           ;RF_Control_B1.c: 520: RF_Data[9] = 0x64;
  8027  113F  3064               	movlw	100
  8028  1140  0020               	movlb	0	; select bank0
  8029  1141  00E1               	movwf	??_setRF_DimmerValue
  8030  1142  0861               	movf	??_setRF_DimmerValue,w
  8031  1143  0023               	movlb	3	; select bank3
  8032  1144  00A9               	movwf	(_RF_Data^(0+384)+9)
  8033  1145                     l8906:	
  8034                           
  8035                           ;RF_Control_B1.c: 521: }
  8036                           ;RF_Control_B1.c: 522: product->Data[9]=RF_Data[9];
  8037  1145  0829               	movf	(_RF_Data^(0+384)+9),w
  8038  1146  0020               	movlb	0	; select bank0
  8039  1147  00E1               	movwf	??_setRF_DimmerValue
  8040  1148  087B               	movf	_product,w
  8041  1149  3E09               	addlw	9
  8042  114A  0086               	movwf	6
  8043  114B  3002               	movlw	2	; select bank4/5
  8044  114C  0087               	movwf	7
  8045  114D  0861               	movf	??_setRF_DimmerValue,w
  8046  114E  0081               	movwf	1
  8047                           
  8048                           ;RF_Control_B1.c: 523: product->Data[11]=lights;
  8049  114F  0863               	movf	setRF_DimmerValue@lights,w
  8050  1150  00E1               	movwf	??_setRF_DimmerValue
  8051  1151  087B               	movf	_product,w
  8052  1152  3E0B               	addlw	11
  8053  1153  0086               	movwf	6
  8054  1154  3002               	movlw	2	; select bank4/5
  8055  1155  0087               	movwf	7
  8056  1156  0861               	movf	??_setRF_DimmerValue,w
  8057  1157  0081               	movwf	1
  8058                           
  8059                           ;RF_Control_B1.c: 524: product->Data[(20 + lights)]=product->Data[9];
  8060  1158  087B               	movf	_product,w
  8061  1159  3E09               	addlw	9
  8062  115A  0086               	movwf	6
  8063  115B  3002               	movlw	2	; select bank4/5
  8064  115C  0087               	movwf	7
  8065  115D  0801               	movf	1,w
  8066  115E  00E1               	movwf	??_setRF_DimmerValue
  8067  115F  0863               	movf	setRF_DimmerValue@lights,w
  8068  1160  3E14               	addlw	20
  8069  1161  077B               	addwf	_product,w
  8070  1162  00E2               	movwf	??_setRF_DimmerValue+1
  8071  1163  0862               	movf	??_setRF_DimmerValue+1,w
  8072  1164  0086               	movwf	6
  8073  1165  3002               	movlw	2	; select bank4/5
  8074  1166  0087               	movwf	7
  8075  1167  0861               	movf	??_setRF_DimmerValue,w
  8076  1168  0081               	movwf	1
  8077                           
  8078                           ;RF_Control_B1.c: 525: setDimmerLights_AdjRF(lights);
  8079  1169  0863               	movf	setRF_DimmerValue@lights,w
  8080  116A  319E  26A7         	fcall	_setDimmerLights_AdjRF
  8081  116C  0008               	return
  8082  116D                     __end_of_setRF_DimmerValue:	
  8083                           
  8084                           	psect	text32
  8085  1EA7                     __ptext32:	
  8086 ;; *************** function _setDimmerLights_AdjRF *****************
  8087 ;; Defined at:
  8088 ;;		line 756 in file "../src/Dimmer_B1.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  lights          1    wreg     unsigned char 
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;  lights          1   64[BANK0 ] unsigned char 
  8093 ;; Return value:  Size  Location     Type
  8094 ;;		None               void
  8095 ;; Registers used:
  8096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8097 ;; Tracked objects:
  8098 ;;		On entry : 0/0
  8099 ;;		On exit  : 0/0
  8100 ;;		Unchanged: 0/0
  8101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;Total ram usage:        2 bytes
  8107 ;; Hardware stack levels used:    1
  8108 ;; Hardware stack levels required when called:    8
  8109 ;; This function calls:
  8110 ;;		_DimmerLightsPointSelect
  8111 ;;		_getPercentValue
  8112 ;; This function is called by:
  8113 ;;		_setRF_DimmerValue
  8114 ;; This function uses a non-reentrant model
  8115 ;;
  8116                           
  8117                           
  8118                           ;psect for function _setDimmerLights_AdjRF
  8119  1EA7                     _setDimmerLights_AdjRF:	
  8120                           
  8121                           ;incstack = 0
  8122                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8123                           ;setDimmerLights_AdjRF@lights stored from wreg
  8124  1EA7  0020               	movlb	0	; select bank0
  8125  1EA8  00E0               	movwf	setDimmerLights_AdjRF@lights
  8126                           
  8127                           ;Dimmer_B1.c: 757: DimmerLightsPointSelect(lights);
  8128  1EA9  0860               	movf	setDimmerLights_AdjRF@lights,w
  8129  1EAA  319C  2430  319E   	fcall	_DimmerLightsPointSelect
  8130                           
  8131                           ;Dimmer_B1.c: 758: DimmerLights->AdjRF = 1;
  8132  1EAD  0877               	movf	_DimmerLights,w
  8133  1EAE  0086               	movwf	6
  8134  1EAF  3001               	movlw	1	; select bank2/3
  8135  1EB0  0087               	movwf	7
  8136  1EB1  1501               	bsf	1,2
  8137                           
  8138                           ;Dimmer_B1.c: 759: DimmerLights->Signal = 1;
  8139  1EB2  0877               	movf	_DimmerLights,w
  8140  1EB3  0086               	movwf	6
  8141  1EB4  3001               	movlw	1	; select bank2/3
  8142  1EB5  0087               	movwf	7
  8143  1EB6  1481               	bsf	1,1
  8144                           
  8145                           ;Dimmer_B1.c: 760: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8146  1EB7  087B               	movf	_product,w
  8147  1EB8  3E09               	addlw	9
  8148  1EB9  0086               	movwf	6
  8149  1EBA  3002               	movlw	2	; select bank4/5
  8150  1EBB  0087               	movwf	7
  8151  1EBC  0801               	movf	1,w
  8152  1EBD  3196  2684         	fcall	_getPercentValue
  8153  1EBF  0020               	movlb	0	; select bank0
  8154  1EC0  00DF               	movwf	??_setDimmerLights_AdjRF
  8155  1EC1  0877               	movf	_DimmerLights,w
  8156  1EC2  3E05               	addlw	5
  8157  1EC3  0086               	movwf	6
  8158  1EC4  3001               	movlw	1	; select bank2/3
  8159  1EC5  0087               	movwf	7
  8160  1EC6  085F               	movf	??_setDimmerLights_AdjRF,w
  8161  1EC7  0081               	movwf	1
  8162  1EC8  0008               	return
  8163  1EC9                     __end_of_setDimmerLights_AdjRF:	
  8164                           
  8165                           	psect	text33
  8166  1684                     __ptext33:	
  8167 ;; *************** function _getPercentValue *****************
  8168 ;; Defined at:
  8169 ;;		line 902 in file "../src/Dimmer_B1.c"
  8170 ;; Parameters:    Size  Location     Type
  8171 ;;  value           1    wreg     unsigned char 
  8172 ;; Auto vars:     Size  Location     Type
  8173 ;;  value           1   59[BANK0 ] unsigned char 
  8174 ;;  i               3   60[BANK0 ] float 
  8175 ;; Return value:  Size  Location     Type
  8176 ;;                  1    wreg      unsigned char 
  8177 ;; Registers used:
  8178 ;;		wreg, status,2, status,0, pclath, cstack
  8179 ;; Tracked objects:
  8180 ;;		On entry : 0/0
  8181 ;;		On exit  : 0/0
  8182 ;;		Unchanged: 0/0
  8183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8186 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8187 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8188 ;;Total ram usage:        6 bytes
  8189 ;; Hardware stack levels used:    1
  8190 ;; Hardware stack levels required when called:    7
  8191 ;; This function calls:
  8192 ;;		___awtoft
  8193 ;;		___ftadd
  8194 ;;		___ftdiv
  8195 ;;		___ftmul
  8196 ;;		___fttol
  8197 ;; This function is called by:
  8198 ;;		_setDimmerLights_AdjRF
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           
  8203                           ;psect for function _getPercentValue
  8204  1684                     _getPercentValue:	
  8205                           
  8206                           ;incstack = 0
  8207                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8208                           ;getPercentValue@value stored from wreg
  8209  1684  0020               	movlb	0	; select bank0
  8210  1685  00DB               	movwf	getPercentValue@value
  8211                           
  8212                           ;Dimmer_B1.c: 904: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8213  1686  3000               	movlw	0
  8214  1687  00DC               	movwf	getPercentValue@i
  8215  1688  30E0               	movlw	224
  8216  1689  00DD               	movwf	getPercentValue@i+1
  8217  168A  3041               	movlw	65
  8218  168B  00DE               	movwf	getPercentValue@i+2
  8219                           
  8220                           ;Dimmer_B1.c: 905: i /= 100;
  8221  168C  3000               	movlw	0
  8222  168D  00AE               	movwf	___ftdiv@f2
  8223  168E  30C8               	movlw	200
  8224  168F  00AF               	movwf	___ftdiv@f2+1
  8225  1690  3042               	movlw	66
  8226  1691  00B0               	movwf	___ftdiv@f2+2
  8227  1692  085C               	movf	getPercentValue@i,w
  8228  1693  00B1               	movwf	___ftdiv@f1
  8229  1694  085D               	movf	getPercentValue@i+1,w
  8230  1695  00B2               	movwf	___ftdiv@f1+1
  8231  1696  085E               	movf	getPercentValue@i+2,w
  8232  1697  00B3               	movwf	___ftdiv@f1+2
  8233  1698  318E  267B  3196   	fcall	___ftdiv
  8234  169B  0020               	movlb	0	; select bank0
  8235  169C  082E               	movf	?___ftdiv,w
  8236  169D  00DC               	movwf	getPercentValue@i
  8237  169E  082F               	movf	?___ftdiv+1,w
  8238  169F  00DD               	movwf	getPercentValue@i+1
  8239  16A0  0830               	movf	?___ftdiv+2,w
  8240  16A1  00DE               	movwf	getPercentValue@i+2
  8241                           
  8242                           ;Dimmer_B1.c: 906: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8243  16A2  085B               	movf	getPercentValue@value,w
  8244  16A3  00D9               	movwf	??_getPercentValue
  8245  16A4  01DA               	clrf	??_getPercentValue+1
  8246  16A5  09D9               	comf	??_getPercentValue,f
  8247  16A6  09DA               	comf	??_getPercentValue+1,f
  8248  16A7  0AD9               	incf	??_getPercentValue,f
  8249  16A8  1903               	skipnz
  8250  16A9  0ADA               	incf	??_getPercentValue+1,f
  8251  16AA  0859               	movf	??_getPercentValue,w
  8252  16AB  3E64               	addlw	100
  8253  16AC  00A8               	movwf	___awtoft@c
  8254  16AD  3000               	movlw	0
  8255  16AE  3D5A               	addwfc	??_getPercentValue+1,w
  8256  16AF  00A9               	movwf	___awtoft@c+1
  8257  16B0  319E  2663  3196   	fcall	___awtoft
  8258  16B3  0020               	movlb	0	; select bank0
  8259  16B4  0828               	movf	?___awtoft,w
  8260  16B5  00B1               	movwf	___ftmul@f2
  8261  16B6  0829               	movf	?___awtoft+1,w
  8262  16B7  00B2               	movwf	___ftmul@f2+1
  8263  16B8  082A               	movf	?___awtoft+2,w
  8264  16B9  00B3               	movwf	___ftmul@f2+2
  8265  16BA  085C               	movf	getPercentValue@i,w
  8266  16BB  00AE               	movwf	___ftmul@f1
  8267  16BC  085D               	movf	getPercentValue@i+1,w
  8268  16BD  00AF               	movwf	___ftmul@f1+1
  8269  16BE  085E               	movf	getPercentValue@i+2,w
  8270  16BF  00B0               	movwf	___ftmul@f1+2
  8271  16C0  3187  2725  3196   	fcall	___ftmul
  8272  16C3  0020               	movlb	0	; select bank0
  8273  16C4  082E               	movf	?___ftmul,w
  8274  16C5  00C1               	movwf	___ftadd@f2
  8275  16C6  082F               	movf	?___ftmul+1,w
  8276  16C7  00C2               	movwf	___ftadd@f2+1
  8277  16C8  0830               	movf	?___ftmul+2,w
  8278  16C9  00C3               	movwf	___ftadd@f2+2
  8279  16CA  3000               	movlw	0
  8280  16CB  00BE               	movwf	___ftadd@f1
  8281  16CC  3000               	movlw	0
  8282  16CD  00BF               	movwf	___ftadd@f1+1
  8283  16CE  3042               	movlw	66
  8284  16CF  00C0               	movwf	___ftadd@f1+2
  8285  16D0  3185  253E  3196   	fcall	___ftadd
  8286  16D3  0020               	movlb	0	; select bank0
  8287  16D4  083E               	movf	?___ftadd,w
  8288  16D5  00CB               	movwf	___fttol@f1
  8289  16D6  083F               	movf	?___ftadd+1,w
  8290  16D7  00CC               	movwf	___fttol@f1+1
  8291  16D8  0840               	movf	?___ftadd+2,w
  8292  16D9  00CD               	movwf	___fttol@f1+2
  8293  16DA  318B  238B         	fcall	___fttol
  8294  16DC  0020               	movlb	0	; select bank0
  8295  16DD  084B               	movf	?___fttol,w
  8296  16DE  0008               	return
  8297  16DF                     __end_of_getPercentValue:	
  8298                           
  8299                           	psect	text34
  8300  0725                     __ptext34:	
  8301 ;; *************** function ___ftmul *****************
  8302 ;; Defined at:
  8303 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  f1              3   14[BANK0 ] float 
  8306 ;;  f2              3   17[BANK0 ] float 
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8309 ;;  sign            1   29[BANK0 ] unsigned char 
  8310 ;;  cntr            1   28[BANK0 ] unsigned char 
  8311 ;;  exp             1   24[BANK0 ] unsigned char 
  8312 ;; Return value:  Size  Location     Type
  8313 ;;                  3   14[BANK0 ] float 
  8314 ;; Registers used:
  8315 ;;		wreg, status,2, status,0, pclath, cstack
  8316 ;; Tracked objects:
  8317 ;;		On entry : 0/0
  8318 ;;		On exit  : 0/0
  8319 ;;		Unchanged: 0/0
  8320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8321 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8323 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;Total ram usage:       16 bytes
  8326 ;; Hardware stack levels used:    1
  8327 ;; Hardware stack levels required when called:    6
  8328 ;; This function calls:
  8329 ;;		___ftpack
  8330 ;; This function is called by:
  8331 ;;		_getPercentValue
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           
  8336                           ;psect for function ___ftmul
  8337  0725                     ___ftmul:	
  8338                           
  8339                           ;incstack = 0
  8340                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8341  0725  0020               	movlb	0	; select bank0
  8342  0726  082E               	movf	___ftmul@f1,w
  8343  0727  00B4               	movwf	??___ftmul
  8344  0728  082F               	movf	___ftmul@f1+1,w
  8345  0729  00B5               	movwf	??___ftmul+1
  8346  072A  0830               	movf	___ftmul@f1+2,w
  8347  072B  00B6               	movwf	??___ftmul+2
  8348  072C  1003               	clrc
  8349  072D  0D35               	rlf	??___ftmul+1,w
  8350  072E  0D36               	rlf	??___ftmul+2,w
  8351  072F  00B7               	movwf	??___ftmul+3
  8352  0730  0837               	movf	??___ftmul+3,w
  8353  0731  00B8               	movwf	___ftmul@exp
  8354  0732  08B8               	movf	___ftmul@exp,f
  8355  0733  1D03               	skipz
  8356  0734  2F3C               	goto	l8522
  8357  0735  3000               	movlw	0
  8358  0736  00AE               	movwf	?___ftmul
  8359  0737  3000               	movlw	0
  8360  0738  00AF               	movwf	?___ftmul+1
  8361  0739  3000               	movlw	0
  8362  073A  00B0               	movwf	?___ftmul+2
  8363  073B  0008               	return
  8364  073C                     l8522:	
  8365  073C  0831               	movf	___ftmul@f2,w
  8366  073D  00B4               	movwf	??___ftmul
  8367  073E  0832               	movf	___ftmul@f2+1,w
  8368  073F  00B5               	movwf	??___ftmul+1
  8369  0740  0833               	movf	___ftmul@f2+2,w
  8370  0741  00B6               	movwf	??___ftmul+2
  8371  0742  1003               	clrc
  8372  0743  0D35               	rlf	??___ftmul+1,w
  8373  0744  0D36               	rlf	??___ftmul+2,w
  8374  0745  00B7               	movwf	??___ftmul+3
  8375  0746  0837               	movf	??___ftmul+3,w
  8376  0747  00BD               	movwf	___ftmul@sign
  8377  0748  08BD               	movf	___ftmul@sign,f
  8378  0749  1D03               	skipz
  8379  074A  2F52               	goto	l8528
  8380  074B  3000               	movlw	0
  8381  074C  00AE               	movwf	?___ftmul
  8382  074D  3000               	movlw	0
  8383  074E  00AF               	movwf	?___ftmul+1
  8384  074F  3000               	movlw	0
  8385  0750  00B0               	movwf	?___ftmul+2
  8386  0751  0008               	return
  8387  0752                     l8528:	
  8388  0752  083D               	movf	___ftmul@sign,w
  8389  0753  3E7B               	addlw	123
  8390  0754  00B4               	movwf	??___ftmul
  8391  0755  0834               	movf	??___ftmul,w
  8392  0756  07B8               	addwf	___ftmul@exp,f
  8393  0757  082E               	movf	___ftmul@f1,w
  8394  0758  00B4               	movwf	??___ftmul
  8395  0759  082F               	movf	___ftmul@f1+1,w
  8396  075A  00B5               	movwf	??___ftmul+1
  8397  075B  0830               	movf	___ftmul@f1+2,w
  8398  075C  00B6               	movwf	??___ftmul+2
  8399  075D  3010               	movlw	16
  8400  075E                     u8885:	
  8401  075E  36B6               	lsrf	??___ftmul+2,f
  8402  075F  0CB5               	rrf	??___ftmul+1,f
  8403  0760  0CB4               	rrf	??___ftmul,f
  8404  0761  0B89               	decfsz	9,f
  8405  0762  2F5E               	goto	u8885
  8406  0763  0834               	movf	??___ftmul,w
  8407  0764  00B7               	movwf	??___ftmul+3
  8408  0765  0837               	movf	??___ftmul+3,w
  8409  0766  00BD               	movwf	___ftmul@sign
  8410  0767  0831               	movf	___ftmul@f2,w
  8411  0768  00B4               	movwf	??___ftmul
  8412  0769  0832               	movf	___ftmul@f2+1,w
  8413  076A  00B5               	movwf	??___ftmul+1
  8414  076B  0833               	movf	___ftmul@f2+2,w
  8415  076C  00B6               	movwf	??___ftmul+2
  8416  076D  3010               	movlw	16
  8417  076E                     u8895:	
  8418  076E  36B6               	lsrf	??___ftmul+2,f
  8419  076F  0CB5               	rrf	??___ftmul+1,f
  8420  0770  0CB4               	rrf	??___ftmul,f
  8421  0771  0B89               	decfsz	9,f
  8422  0772  2F6E               	goto	u8895
  8423  0773  0834               	movf	??___ftmul,w
  8424  0774  00B7               	movwf	??___ftmul+3
  8425  0775  0837               	movf	??___ftmul+3,w
  8426  0776  06BD               	xorwf	___ftmul@sign,f
  8427  0777  3080               	movlw	128
  8428  0778  00B4               	movwf	??___ftmul
  8429  0779  0834               	movf	??___ftmul,w
  8430  077A  05BD               	andwf	___ftmul@sign,f
  8431  077B  17AF               	bsf	___ftmul@f1+1,7
  8432  077C  17B2               	bsf	___ftmul@f2+1,7
  8433  077D  30FF               	movlw	255
  8434  077E  05B1               	andwf	___ftmul@f2,f
  8435  077F  30FF               	movlw	255
  8436  0780  05B2               	andwf	___ftmul@f2+1,f
  8437  0781  3000               	movlw	0
  8438  0782  05B3               	andwf	___ftmul@f2+2,f
  8439  0783  3000               	movlw	0
  8440  0784  00B9               	movwf	___ftmul@f3_as_product
  8441  0785  3000               	movlw	0
  8442  0786  00BA               	movwf	___ftmul@f3_as_product+1
  8443  0787  3000               	movlw	0
  8444  0788  00BB               	movwf	___ftmul@f3_as_product+2
  8445  0789  3007               	movlw	7
  8446  078A  00B4               	movwf	??___ftmul
  8447  078B  0834               	movf	??___ftmul,w
  8448  078C  00BC               	movwf	___ftmul@cntr
  8449  078D                     l8540:	
  8450  078D  1C2E               	btfss	___ftmul@f1,0
  8451  078E  2F95               	goto	l8544
  8452  078F  0831               	movf	___ftmul@f2,w
  8453  0790  07B9               	addwf	___ftmul@f3_as_product,f
  8454  0791  0832               	movf	___ftmul@f2+1,w
  8455  0792  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8456  0793  0833               	movf	___ftmul@f2+2,w
  8457  0794  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8458  0795                     l8544:	
  8459  0795  3001               	movlw	1
  8460  0796                     u8915:	
  8461  0796  36B0               	lsrf	___ftmul@f1+2,f
  8462  0797  0CAF               	rrf	___ftmul@f1+1,f
  8463  0798  0CAE               	rrf	___ftmul@f1,f
  8464  0799  0B89               	decfsz	9,f
  8465  079A  2F96               	goto	u8915
  8466  079B  3001               	movlw	1
  8467  079C                     u8925:	
  8468  079C  35B1               	lslf	___ftmul@f2,f
  8469  079D  0DB2               	rlf	___ftmul@f2+1,f
  8470  079E  0DB3               	rlf	___ftmul@f2+2,f
  8471  079F  0B89               	decfsz	9,f
  8472  07A0  2F9C               	goto	u8925
  8473  07A1  3001               	movlw	1
  8474  07A2  02BC               	subwf	___ftmul@cntr,f
  8475  07A3  1D03               	btfss	3,2
  8476  07A4  2F8D               	goto	l8540
  8477  07A5  3009               	movlw	9
  8478  07A6  00B4               	movwf	??___ftmul
  8479  07A7  0834               	movf	??___ftmul,w
  8480  07A8  00BC               	movwf	___ftmul@cntr
  8481  07A9                     l8552:	
  8482  07A9  1C2E               	btfss	___ftmul@f1,0
  8483  07AA  2FB1               	goto	l8556
  8484  07AB  0831               	movf	___ftmul@f2,w
  8485  07AC  07B9               	addwf	___ftmul@f3_as_product,f
  8486  07AD  0832               	movf	___ftmul@f2+1,w
  8487  07AE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8488  07AF  0833               	movf	___ftmul@f2+2,w
  8489  07B0  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8490  07B1                     l8556:	
  8491  07B1  3001               	movlw	1
  8492  07B2                     u8955:	
  8493  07B2  36B0               	lsrf	___ftmul@f1+2,f
  8494  07B3  0CAF               	rrf	___ftmul@f1+1,f
  8495  07B4  0CAE               	rrf	___ftmul@f1,f
  8496  07B5  0B89               	decfsz	9,f
  8497  07B6  2FB2               	goto	u8955
  8498  07B7  3001               	movlw	1
  8499  07B8                     u8965:	
  8500  07B8  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8501  07B9  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8502  07BA  0CB9               	rrf	___ftmul@f3_as_product,f
  8503  07BB  0B89               	decfsz	9,f
  8504  07BC  2FB8               	goto	u8965
  8505  07BD  3001               	movlw	1
  8506  07BE  02BC               	subwf	___ftmul@cntr,f
  8507  07BF  1D03               	btfss	3,2
  8508  07C0  2FA9               	goto	l8552
  8509  07C1  0839               	movf	___ftmul@f3_as_product,w
  8510  07C2  00A0               	movwf	___ftpack@arg
  8511  07C3  083A               	movf	___ftmul@f3_as_product+1,w
  8512  07C4  00A1               	movwf	___ftpack@arg+1
  8513  07C5  083B               	movf	___ftmul@f3_as_product+2,w
  8514  07C6  00A2               	movwf	___ftpack@arg+2
  8515  07C7  0838               	movf	___ftmul@exp,w
  8516  07C8  00B4               	movwf	??___ftmul
  8517  07C9  0834               	movf	??___ftmul,w
  8518  07CA  00A3               	movwf	___ftpack@exp
  8519  07CB  083D               	movf	___ftmul@sign,w
  8520  07CC  00B5               	movwf	??___ftmul+1
  8521  07CD  0835               	movf	??___ftmul+1,w
  8522  07CE  00A4               	movwf	___ftpack@sign
  8523  07CF  3197  279F         	fcall	___ftpack
  8524  07D1  0020               	movlb	0	; select bank0
  8525  07D2  0820               	movf	?___ftpack,w
  8526  07D3  00AE               	movwf	?___ftmul
  8527  07D4  0821               	movf	?___ftpack+1,w
  8528  07D5  00AF               	movwf	?___ftmul+1
  8529  07D6  0822               	movf	?___ftpack+2,w
  8530  07D7  00B0               	movwf	?___ftmul+2
  8531  07D8  0008               	return
  8532  07D9                     __end_of___ftmul:	
  8533                           
  8534                           	psect	text35
  8535  053E                     __ptext35:	
  8536 ;; *************** function ___ftadd *****************
  8537 ;; Defined at:
  8538 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8539 ;; Parameters:    Size  Location     Type
  8540 ;;  f1              3   30[BANK0 ] float 
  8541 ;;  f2              3   33[BANK0 ] float 
  8542 ;; Auto vars:     Size  Location     Type
  8543 ;;  exp1            1   42[BANK0 ] unsigned char 
  8544 ;;  exp2            1   41[BANK0 ] unsigned char 
  8545 ;;  sign            1   40[BANK0 ] unsigned char 
  8546 ;; Return value:  Size  Location     Type
  8547 ;;                  3   30[BANK0 ] float 
  8548 ;; Registers used:
  8549 ;;		wreg, status,2, status,0, pclath, cstack
  8550 ;; Tracked objects:
  8551 ;;		On entry : 0/0
  8552 ;;		On exit  : 0/0
  8553 ;;		Unchanged: 0/0
  8554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8555 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8559 ;;Total ram usage:       13 bytes
  8560 ;; Hardware stack levels used:    1
  8561 ;; Hardware stack levels required when called:    6
  8562 ;; This function calls:
  8563 ;;		___ftpack
  8564 ;; This function is called by:
  8565 ;;		_getPercentValue
  8566 ;; This function uses a non-reentrant model
  8567 ;;
  8568                           
  8569                           
  8570                           ;psect for function ___ftadd
  8571  053E                     ___ftadd:	
  8572                           
  8573                           ;incstack = 0
  8574                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8575  053E  0020               	movlb	0	; select bank0
  8576  053F  083E               	movf	___ftadd@f1,w
  8577  0540  00C4               	movwf	??___ftadd
  8578  0541  083F               	movf	___ftadd@f1+1,w
  8579  0542  00C5               	movwf	??___ftadd+1
  8580  0543  0840               	movf	___ftadd@f1+2,w
  8581  0544  00C6               	movwf	??___ftadd+2
  8582  0545  1003               	clrc
  8583  0546  0D45               	rlf	??___ftadd+1,w
  8584  0547  0D46               	rlf	??___ftadd+2,w
  8585  0548  00C7               	movwf	??___ftadd+3
  8586  0549  0847               	movf	??___ftadd+3,w
  8587  054A  00CA               	movwf	___ftadd@exp1
  8588  054B  0841               	movf	___ftadd@f2,w
  8589  054C  00C4               	movwf	??___ftadd
  8590  054D  0842               	movf	___ftadd@f2+1,w
  8591  054E  00C5               	movwf	??___ftadd+1
  8592  054F  0843               	movf	___ftadd@f2+2,w
  8593  0550  00C6               	movwf	??___ftadd+2
  8594  0551  1003               	clrc
  8595  0552  0D45               	rlf	??___ftadd+1,w
  8596  0553  0D46               	rlf	??___ftadd+2,w
  8597  0554  00C7               	movwf	??___ftadd+3
  8598  0555  0847               	movf	??___ftadd+3,w
  8599  0556  00C9               	movwf	___ftadd@exp2
  8600  0557  084A               	movf	___ftadd@exp1,w
  8601  0558  1903               	btfsc	3,2
  8602  0559  2D66               	goto	l8410
  8603  055A  0849               	movf	___ftadd@exp2,w
  8604  055B  024A               	subwf	___ftadd@exp1,w
  8605  055C  1803               	skipnc
  8606  055D  2D6D               	goto	l8414
  8607  055E  034A               	decf	___ftadd@exp1,w
  8608  055F  3AFF               	xorlw	255
  8609  0560  0749               	addwf	___ftadd@exp2,w
  8610  0561  00C4               	movwf	??___ftadd
  8611  0562  3019               	movlw	25
  8612  0563  0244               	subwf	??___ftadd,w
  8613  0564  1C03               	skipc
  8614  0565  2D6D               	goto	l8414
  8615  0566                     l8410:	
  8616  0566  0841               	movf	___ftadd@f2,w
  8617  0567  00BE               	movwf	?___ftadd
  8618  0568  0842               	movf	___ftadd@f2+1,w
  8619  0569  00BF               	movwf	?___ftadd+1
  8620  056A  0843               	movf	___ftadd@f2+2,w
  8621  056B  00C0               	movwf	?___ftadd+2
  8622  056C  0008               	return
  8623  056D                     l8414:	
  8624  056D  0849               	movf	___ftadd@exp2,w
  8625  056E  1903               	btfsc	3,2
  8626  056F  0008               	return
  8627  0570  084A               	movf	___ftadd@exp1,w
  8628  0571  0249               	subwf	___ftadd@exp2,w
  8629  0572  1803               	skipnc
  8630  0573  2D7C               	goto	l8420
  8631  0574  0349               	decf	___ftadd@exp2,w
  8632  0575  3AFF               	xorlw	255
  8633  0576  074A               	addwf	___ftadd@exp1,w
  8634  0577  00C4               	movwf	??___ftadd
  8635  0578  3019               	movlw	25
  8636  0579  0244               	subwf	??___ftadd,w
  8637  057A  1803               	btfsc	3,0
  8638  057B  0008               	return
  8639  057C                     l8420:	
  8640  057C  3006               	movlw	6
  8641  057D  00C4               	movwf	??___ftadd
  8642  057E  0844               	movf	??___ftadd,w
  8643  057F  00C8               	movwf	___ftadd@sign
  8644  0580  1BC0               	btfsc	___ftadd@f1+2,7
  8645  0581  17C8               	bsf	___ftadd@sign,7
  8646  0582  1BC3               	btfsc	___ftadd@f2+2,7
  8647  0583  1748               	bsf	___ftadd@sign,6
  8648  0584  17BF               	bsf	___ftadd@f1+1,7
  8649  0585  30FF               	movlw	255
  8650  0586  05BE               	andwf	___ftadd@f1,f
  8651  0587  30FF               	movlw	255
  8652  0588  05BF               	andwf	___ftadd@f1+1,f
  8653  0589  3000               	movlw	0
  8654  058A  05C0               	andwf	___ftadd@f1+2,f
  8655  058B  17C2               	bsf	___ftadd@f2+1,7
  8656  058C  30FF               	movlw	255
  8657  058D  05C1               	andwf	___ftadd@f2,f
  8658  058E  30FF               	movlw	255
  8659  058F  05C2               	andwf	___ftadd@f2+1,f
  8660  0590  3000               	movlw	0
  8661  0591  05C3               	andwf	___ftadd@f2+2,f
  8662  0592  0849               	movf	___ftadd@exp2,w
  8663  0593  024A               	subwf	___ftadd@exp1,w
  8664  0594  1803               	skipnc
  8665  0595  2DB8               	goto	l8442
  8666  0596                     l8432:	
  8667  0596  3001               	movlw	1
  8668  0597                     u8645:	
  8669  0597  35C1               	lslf	___ftadd@f2,f
  8670  0598  0DC2               	rlf	___ftadd@f2+1,f
  8671  0599  0DC3               	rlf	___ftadd@f2+2,f
  8672  059A  0B89               	decfsz	9,f
  8673  059B  2D97               	goto	u8645
  8674  059C  3001               	movlw	1
  8675  059D  02C9               	subwf	___ftadd@exp2,f
  8676  059E  0849               	movf	___ftadd@exp2,w
  8677  059F  064A               	xorwf	___ftadd@exp1,w
  8678  05A0  1903               	skipnz
  8679  05A1  2DB3               	goto	l8440
  8680  05A2  3001               	movlw	1
  8681  05A3  02C8               	subwf	___ftadd@sign,f
  8682  05A4  0848               	movf	___ftadd@sign,w
  8683  05A5  3907               	andlw	7
  8684  05A6  1903               	btfsc	3,2
  8685  05A7  2DB3               	goto	l8440
  8686  05A8  2D96               	goto	l8432
  8687  05A9                     l8438:	
  8688  05A9  3001               	movlw	1
  8689  05AA                     u8675:	
  8690  05AA  36C0               	lsrf	___ftadd@f1+2,f
  8691  05AB  0CBF               	rrf	___ftadd@f1+1,f
  8692  05AC  0CBE               	rrf	___ftadd@f1,f
  8693  05AD  0B89               	decfsz	9,f
  8694  05AE  2DAA               	goto	u8675
  8695  05AF  3001               	movlw	1
  8696  05B0  00C4               	movwf	??___ftadd
  8697  05B1  0844               	movf	??___ftadd,w
  8698  05B2  07CA               	addwf	___ftadd@exp1,f
  8699  05B3                     l8440:	
  8700  05B3  084A               	movf	___ftadd@exp1,w
  8701  05B4  0649               	xorwf	___ftadd@exp2,w
  8702  05B5  1903               	btfsc	3,2
  8703  05B6  2DDD               	goto	l2945
  8704  05B7  2DA9               	goto	l8438
  8705  05B8                     l8442:	
  8706  05B8  084A               	movf	___ftadd@exp1,w
  8707  05B9  0249               	subwf	___ftadd@exp2,w
  8708  05BA  1803               	skipnc
  8709  05BB  2DDD               	goto	l2945
  8710  05BC                     l8444:	
  8711  05BC  3001               	movlw	1
  8712  05BD                     u8705:	
  8713  05BD  35BE               	lslf	___ftadd@f1,f
  8714  05BE  0DBF               	rlf	___ftadd@f1+1,f
  8715  05BF  0DC0               	rlf	___ftadd@f1+2,f
  8716  05C0  0B89               	decfsz	9,f
  8717  05C1  2DBD               	goto	u8705
  8718  05C2  3001               	movlw	1
  8719  05C3  02CA               	subwf	___ftadd@exp1,f
  8720  05C4  0849               	movf	___ftadd@exp2,w
  8721  05C5  064A               	xorwf	___ftadd@exp1,w
  8722  05C6  1903               	skipnz
  8723  05C7  2DD9               	goto	l8452
  8724  05C8  3001               	movlw	1
  8725  05C9  02C8               	subwf	___ftadd@sign,f
  8726  05CA  0848               	movf	___ftadd@sign,w
  8727  05CB  3907               	andlw	7
  8728  05CC  1903               	btfsc	3,2
  8729  05CD  2DD9               	goto	l8452
  8730  05CE  2DBC               	goto	l8444
  8731  05CF                     l8450:	
  8732  05CF  3001               	movlw	1
  8733  05D0                     u8735:	
  8734  05D0  36C3               	lsrf	___ftadd@f2+2,f
  8735  05D1  0CC2               	rrf	___ftadd@f2+1,f
  8736  05D2  0CC1               	rrf	___ftadd@f2,f
  8737  05D3  0B89               	decfsz	9,f
  8738  05D4  2DD0               	goto	u8735
  8739  05D5  3001               	movlw	1
  8740  05D6  00C4               	movwf	??___ftadd
  8741  05D7  0844               	movf	??___ftadd,w
  8742  05D8  07C9               	addwf	___ftadd@exp2,f
  8743  05D9                     l8452:	
  8744  05D9  084A               	movf	___ftadd@exp1,w
  8745  05DA  0649               	xorwf	___ftadd@exp2,w
  8746  05DB  1D03               	skipz
  8747  05DC  2DCF               	goto	l8450
  8748  05DD                     l2945:	
  8749  05DD  1FC8               	btfss	___ftadd@sign,7
  8750  05DE  2DEF               	goto	l8456
  8751  05DF  30FF               	movlw	255
  8752  05E0  06BE               	xorwf	___ftadd@f1,f
  8753  05E1  30FF               	movlw	255
  8754  05E2  06BF               	xorwf	___ftadd@f1+1,f
  8755  05E3  30FF               	movlw	255
  8756  05E4  06C0               	xorwf	___ftadd@f1+2,f
  8757  05E5  3001               	movlw	1
  8758  05E6  07BE               	addwf	___ftadd@f1,f
  8759  05E7  3000               	movlw	0
  8760  05E8  1803               	skipnc
  8761  05E9  3001               	movlw	1
  8762  05EA  07BF               	addwf	___ftadd@f1+1,f
  8763  05EB  3000               	movlw	0
  8764  05EC  1803               	skipnc
  8765  05ED  3001               	movlw	1
  8766  05EE  07C0               	addwf	___ftadd@f1+2,f
  8767  05EF                     l8456:	
  8768  05EF  1F48               	btfss	___ftadd@sign,6
  8769  05F0  2E01               	goto	l8460
  8770  05F1  30FF               	movlw	255
  8771  05F2  06C1               	xorwf	___ftadd@f2,f
  8772  05F3  30FF               	movlw	255
  8773  05F4  06C2               	xorwf	___ftadd@f2+1,f
  8774  05F5  30FF               	movlw	255
  8775  05F6  06C3               	xorwf	___ftadd@f2+2,f
  8776  05F7  3001               	movlw	1
  8777  05F8  07C1               	addwf	___ftadd@f2,f
  8778  05F9  3000               	movlw	0
  8779  05FA  1803               	skipnc
  8780  05FB  3001               	movlw	1
  8781  05FC  07C2               	addwf	___ftadd@f2+1,f
  8782  05FD  3000               	movlw	0
  8783  05FE  1803               	skipnc
  8784  05FF  3001               	movlw	1
  8785  0600  07C3               	addwf	___ftadd@f2+2,f
  8786  0601                     l8460:	
  8787  0601  01C8               	clrf	___ftadd@sign
  8788  0602  083E               	movf	___ftadd@f1,w
  8789  0603  07C1               	addwf	___ftadd@f2,f
  8790  0604  083F               	movf	___ftadd@f1+1,w
  8791  0605  3DC2               	addwfc	___ftadd@f2+1,f
  8792  0606  0840               	movf	___ftadd@f1+2,w
  8793  0607  3DC3               	addwfc	___ftadd@f2+2,f
  8794  0608  1FC3               	btfss	___ftadd@f2+2,7
  8795  0609  2E1C               	goto	l8470
  8796  060A  30FF               	movlw	255
  8797  060B  06C1               	xorwf	___ftadd@f2,f
  8798  060C  30FF               	movlw	255
  8799  060D  06C2               	xorwf	___ftadd@f2+1,f
  8800  060E  30FF               	movlw	255
  8801  060F  06C3               	xorwf	___ftadd@f2+2,f
  8802  0610  3001               	movlw	1
  8803  0611  07C1               	addwf	___ftadd@f2,f
  8804  0612  3000               	movlw	0
  8805  0613  1803               	skipnc
  8806  0614  3001               	movlw	1
  8807  0615  07C2               	addwf	___ftadd@f2+1,f
  8808  0616  3000               	movlw	0
  8809  0617  1803               	skipnc
  8810  0618  3001               	movlw	1
  8811  0619  07C3               	addwf	___ftadd@f2+2,f
  8812  061A  01C8               	clrf	___ftadd@sign
  8813  061B  0AC8               	incf	___ftadd@sign,f
  8814  061C                     l8470:	
  8815  061C  0841               	movf	___ftadd@f2,w
  8816  061D  00A0               	movwf	___ftpack@arg
  8817  061E  0842               	movf	___ftadd@f2+1,w
  8818  061F  00A1               	movwf	___ftpack@arg+1
  8819  0620  0843               	movf	___ftadd@f2+2,w
  8820  0621  00A2               	movwf	___ftpack@arg+2
  8821  0622  084A               	movf	___ftadd@exp1,w
  8822  0623  00C4               	movwf	??___ftadd
  8823  0624  0844               	movf	??___ftadd,w
  8824  0625  00A3               	movwf	___ftpack@exp
  8825  0626  0848               	movf	___ftadd@sign,w
  8826  0627  00C5               	movwf	??___ftadd+1
  8827  0628  0845               	movf	??___ftadd+1,w
  8828  0629  00A4               	movwf	___ftpack@sign
  8829  062A  3197  279F         	fcall	___ftpack
  8830  062C  0020               	movlb	0	; select bank0
  8831  062D  0820               	movf	?___ftpack,w
  8832  062E  00BE               	movwf	?___ftadd
  8833  062F  0821               	movf	?___ftpack+1,w
  8834  0630  00BF               	movwf	?___ftadd+1
  8835  0631  0822               	movf	?___ftpack+2,w
  8836  0632  00C0               	movwf	?___ftadd+2
  8837  0633  0008               	return
  8838  0634                     __end_of___ftadd:	
  8839                           
  8840                           	psect	text36
  8841  1C43                     __ptext36:	
  8842 ;; *************** function _setMemory_Modify *****************
  8843 ;; Defined at:
  8844 ;;		line 1000 in file "../src/MCU_B1.c"
  8845 ;; Parameters:    Size  Location     Type
  8846 ;;  command         1    wreg     unsigned char 
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;  command         1    1[BANK0 ] unsigned char 
  8849 ;; Return value:  Size  Location     Type
  8850 ;;		None               void
  8851 ;; Registers used:
  8852 ;;		wreg, status,2, status,0
  8853 ;; Tracked objects:
  8854 ;;		On entry : 0/0
  8855 ;;		On exit  : 0/0
  8856 ;;		Unchanged: 0/0
  8857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8859 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;Total ram usage:        2 bytes
  8863 ;; Hardware stack levels used:    1
  8864 ;; Hardware stack levels required when called:    5
  8865 ;; This function calls:
  8866 ;;		Nothing
  8867 ;; This function is called by:
  8868 ;;		_setLog_Code
  8869 ;;		_setRFSW_AdjControl
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           
  8874                           ;psect for function _setMemory_Modify
  8875  1C43                     _setMemory_Modify:	
  8876                           
  8877                           ;incstack = 0
  8878                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8879                           ;setMemory_Modify@command stored from wreg
  8880  1C43  0020               	movlb	0	; select bank0
  8881  1C44  00A1               	movwf	setMemory_Modify@command
  8882                           
  8883                           ;MCU_B1.c: 1001: Memory.Modify = command == 1 ? 1 : 0;
  8884  1C45  0821               	movf	setMemory_Modify@command,w
  8885  1C46  3A01               	xorlw	1
  8886  1C47  3000               	movlw	0
  8887  1C48  1903               	skipnz
  8888  1C49  3001               	movlw	1
  8889  1C4A  00A0               	movwf	??_setMemory_Modify
  8890  1C4B  0024               	movlb	4	; select bank4
  8891  1C4C  0844               	movf	(_Memory^(0+512)+36),w
  8892  1C4D  0020               	movlb	0	; select bank0
  8893  1C4E  0620               	xorwf	??_setMemory_Modify,w
  8894  1C4F  39FE               	andlw	-2
  8895  1C50  0620               	xorwf	??_setMemory_Modify,w
  8896  1C51  0024               	movlb	4	; select bank4
  8897  1C52  00C4               	movwf	(_Memory^(0+512)+36)
  8898                           
  8899                           ;MCU_B1.c: 1002: Memory.Time = 0;
  8900  1C53  01C2               	clrf	(_Memory^(0+512)+34)
  8901  1C54  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8902  1C55  0008               	return
  8903  1C56                     __end_of_setMemory_Modify:	
  8904                           
  8905                           	psect	text37
  8906  1BC5                     __ptext37:	
  8907 ;; *************** function _getRF_KeyStatus *****************
  8908 ;; Defined at:
  8909 ;;		line 190 in file "../src/RF_Control_B1.c"
  8910 ;; Parameters:    Size  Location     Type
  8911 ;;		None
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;  key             1    1[BANK0 ] unsigned char 
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  1    wreg      unsigned char 
  8916 ;; Registers used:
  8917 ;;		wreg, status,2
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;Total ram usage:        3 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    5
  8930 ;; This function calls:
  8931 ;;		Nothing
  8932 ;; This function is called by:
  8933 ;;		_setRF_Main
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           
  8938                           ;psect for function _getRF_KeyStatus
  8939  1BC5                     _getRF_KeyStatus:	
  8940                           
  8941                           ;RF_Control_B1.c: 191: char key = 0;
  8942                           
  8943                           ;incstack = 0
  8944                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8945  1BC5  0020               	movlb	0	; select bank0
  8946  1BC6  01A1               	clrf	getRF_KeyStatus@key
  8947                           
  8948                           ;RF_Control_B1.c: 197: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8949  1BC7  01A2               	clrf	_getRF_KeyStatus$5691
  8950  1BC8  0AA2               	incf	_getRF_KeyStatus$5691,f
  8951  1BC9  1F0C               	btfss	12,6	;volatile
  8952  1BCA  1A0C               	btfsc	12,4	;volatile
  8953  1BCB  2BD0               	goto	l9510
  8954  1BCC  1C0C               	btfss	12,0	;volatile
  8955  1BCD  188D               	btfsc	13,1	;volatile
  8956  1BCE  2BD0               	goto	l9510
  8957  1BCF  01A2               	clrf	_getRF_KeyStatus$5691
  8958  1BD0                     l9510:	
  8959  1BD0  0822               	movf	_getRF_KeyStatus$5691,w
  8960  1BD1  00A0               	movwf	??_getRF_KeyStatus
  8961  1BD2  0820               	movf	??_getRF_KeyStatus,w
  8962  1BD3  00A1               	movwf	getRF_KeyStatus@key
  8963                           
  8964                           ;RF_Control_B1.c: 203: return key;
  8965  1BD4  0821               	movf	getRF_KeyStatus@key,w
  8966  1BD5  0008               	return
  8967  1BD6                     __end_of_getRF_KeyStatus:	
  8968                           
  8969                           	psect	text38
  8970  1BB4                     __ptext38:	
  8971 ;; *************** function _getBuz_GO *****************
  8972 ;; Defined at:
  8973 ;;		line 82 in file "../src/Buzzer_B1.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;		None
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;  i               2    4[BANK0 ] int 
  8978 ;; Return value:  Size  Location     Type
  8979 ;;                  2    0[BANK0 ] int 
  8980 ;; Registers used:
  8981 ;;		wreg, status,2, status,0
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8987 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;Total ram usage:        6 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; Hardware stack levels required when called:    5
  8994 ;; This function calls:
  8995 ;;		Nothing
  8996 ;; This function is called by:
  8997 ;;		_setRF_Main
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           
  9002                           ;psect for function _getBuz_GO
  9003  1BB4                     _getBuz_GO:	
  9004                           
  9005                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9006                           
  9007                           ;incstack = 0
  9008                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9009  1BB4  0021               	movlb	1	; select bank1
  9010  1BB5  0C30               	rrf	_Buz1^(0+128),w
  9011  1BB6  3901               	andlw	1
  9012  1BB7  0020               	movlb	0	; select bank0
  9013  1BB8  00A2               	movwf	??_getBuz_GO
  9014  1BB9  01A3               	clrf	??_getBuz_GO+1
  9015  1BBA  0822               	movf	??_getBuz_GO,w
  9016  1BBB  00A4               	movwf	getBuz_GO@i
  9017  1BBC  0823               	movf	??_getBuz_GO+1,w
  9018  1BBD  00A5               	movwf	getBuz_GO@i+1
  9019                           
  9020                           ;Buzzer_B1.c: 84: return i;
  9021  1BBE  0825               	movf	getBuz_GO@i+1,w
  9022  1BBF  01A1               	clrf	?_getBuz_GO+1
  9023  1BC0  07A1               	addwf	?_getBuz_GO+1,f
  9024  1BC1  0824               	movf	getBuz_GO@i,w
  9025  1BC2  01A0               	clrf	?_getBuz_GO
  9026  1BC3  07A0               	addwf	?_getBuz_GO,f
  9027  1BC4  0008               	return
  9028  1BC5                     __end_of_getBuz_GO:	
  9029                           
  9030                           	psect	text39
  9031  08E3                     __ptext39:	
  9032 ;; *************** function _CC2500_TxData *****************
  9033 ;; Defined at:
  9034 ;;		line 32 in file "../src/CC2500_B1.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;		None
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9039 ;; Return value:  Size  Location     Type
  9040 ;;		None               void
  9041 ;; Registers used:
  9042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9052 ;;Total ram usage:        2 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    7
  9055 ;; This function calls:
  9056 ;;		_CC2500_WriteByte
  9057 ;;		_CC2500_WriteCommand
  9058 ;;		_Timeout_Counter
  9059 ;;		_set_TimeoutCleared
  9060 ;; This function is called by:
  9061 ;;		_setRF_Main
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           
  9066                           ;psect for function _CC2500_TxData
  9067  08E3                     _CC2500_TxData:	
  9068                           
  9069                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9070                           ;CC2500_B1.c: 35: RC4 = 0;
  9071                           
  9072                           ;incstack = 0
  9073                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9074  08E3  0020               	movlb	0	; select bank0
  9075  08E4  120E               	bcf	14,4	;volatile
  9076                           
  9077                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9078  08E5  307F               	movlw	127
  9079  08E6  00A4               	movwf	??_CC2500_TxData
  9080  08E7  0824               	movf	??_CC2500_TxData,w
  9081  08E8  0021               	movlb	1	; select bank1
  9082  08E9  00D2               	movwf	_SPI0Buffer^(0+128)
  9083                           
  9084                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9085  08EA  28EE               	goto	l9166
  9086  08EB                     l9164:	
  9087                           
  9088                           ;CC2500_B1.c: 38: Timeout_Counter();
  9089  08EB  319C  24A5  3188   	fcall	_Timeout_Counter
  9090  08EE                     l9166:	
  9091  08EE  0020               	movlb	0	; select bank0
  9092  08EF  1D0E               	btfss	14,2	;volatile
  9093  08F0  28F4               	goto	l9170
  9094  08F1  0021               	movlb	1	; select bank1
  9095  08F2  1D2D               	btfss	(_myMain^(0+128)+13),2
  9096  08F3  28EB               	goto	l9164
  9097  08F4                     l9170:	
  9098                           
  9099                           ;CC2500_B1.c: 39: };
  9100                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9101  08F4  319A  2293  3188   	fcall	_set_TimeoutCleared
  9102                           
  9103                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9104  08F7  319D  2528  3188   	fcall	_CC2500_WriteByte
  9105                           
  9106                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9107  08FA  0021               	movlb	1	; select bank1
  9108  08FB  0854               	movf	_Tx_Length^(0+128),w
  9109  08FC  0020               	movlb	0	; select bank0
  9110  08FD  00A4               	movwf	??_CC2500_TxData
  9111  08FE  0824               	movf	??_CC2500_TxData,w
  9112  08FF  0021               	movlb	1	; select bank1
  9113  0900  00D2               	movwf	_SPI0Buffer^(0+128)
  9114                           
  9115                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9116  0901  319D  2528  3188   	fcall	_CC2500_WriteByte
  9117                           
  9118                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9119  0904  0020               	movlb	0	; select bank0
  9120  0905  01A5               	clrf	CC2500_TxData@loop_e
  9121  0906                     l9184:	
  9122  0906  0021               	movlb	1	; select bank1
  9123  0907  0854               	movf	_Tx_Length^(0+128),w
  9124  0908  0020               	movlb	0	; select bank0
  9125  0909  0225               	subwf	CC2500_TxData@loop_e,w
  9126  090A  1803               	btfsc	3,0
  9127  090B  291F               	goto	l255
  9128                           
  9129                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9130  090C  0825               	movf	CC2500_TxData@loop_e,w
  9131  090D  3EA0               	addlw	_RF_Data& (0+255)
  9132  090E  0086               	movwf	6
  9133  090F  3001               	movlw	1	; select bank3/4
  9134  0910  0087               	movwf	7
  9135  0911  0801               	movf	1,w
  9136  0912  00A4               	movwf	??_CC2500_TxData
  9137  0913  0824               	movf	??_CC2500_TxData,w
  9138  0914  0021               	movlb	1	; select bank1
  9139  0915  00D2               	movwf	_SPI0Buffer^(0+128)
  9140                           
  9141                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9142  0916  319D  2528  3188   	fcall	_CC2500_WriteByte
  9143  0919  3001               	movlw	1
  9144  091A  0020               	movlb	0	; select bank0
  9145  091B  00A4               	movwf	??_CC2500_TxData
  9146  091C  0824               	movf	??_CC2500_TxData,w
  9147  091D  07A5               	addwf	CC2500_TxData@loop_e,f
  9148  091E  2906               	goto	l9184
  9149  091F                     l255:	
  9150                           
  9151                           ;CC2500_B1.c: 48: }
  9152                           ;CC2500_B1.c: 49: RC4 = 1;
  9153  091F  160E               	bsf	14,4	;volatile
  9154                           
  9155                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9156  0920  3035               	movlw	53
  9157  0921  319D  255A  3188   	fcall	_CC2500_WriteCommand
  9158                           
  9159                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9160  0924  2928               	goto	l9190
  9161  0925                     l9188:	
  9162                           
  9163                           ;CC2500_B1.c: 52: Timeout_Counter();
  9164  0925  319C  24A5  3188   	fcall	_Timeout_Counter
  9165  0928                     l9190:	
  9166  0928  0020               	movlb	0	; select bank0
  9167  0929  180D               	btfsc	13,0	;volatile
  9168  092A  292E               	goto	l9194
  9169  092B  0021               	movlb	1	; select bank1
  9170  092C  1D2D               	btfss	(_myMain^(0+128)+13),2
  9171  092D  2925               	goto	l9188
  9172  092E                     l9194:	
  9173                           
  9174                           ;CC2500_B1.c: 53: };
  9175                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9176  092E  319A  2293  3188   	fcall	_set_TimeoutCleared
  9177                           
  9178                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9179  0931  2935               	goto	l9198
  9180  0932                     l9196:	
  9181                           
  9182                           ;CC2500_B1.c: 57: Timeout_Counter();
  9183  0932  319C  24A5  3188   	fcall	_Timeout_Counter
  9184  0935                     l9198:	
  9185  0935  0020               	movlb	0	; select bank0
  9186  0936  1C0D               	btfss	13,0	;volatile
  9187  0937  293B               	goto	l9202
  9188  0938  0021               	movlb	1	; select bank1
  9189  0939  1D2D               	btfss	(_myMain^(0+128)+13),2
  9190  093A  2932               	goto	l9196
  9191  093B                     l9202:	
  9192                           
  9193                           ;CC2500_B1.c: 58: };
  9194                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9195  093B  319A  2293  3188   	fcall	_set_TimeoutCleared
  9196                           
  9197                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9198  093E  3036               	movlw	54
  9199  093F  319D  255A  3188   	fcall	_CC2500_WriteCommand
  9200                           
  9201                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9202  0942  303B               	movlw	59
  9203  0943  319D  255A  3188   	fcall	_CC2500_WriteCommand
  9204                           
  9205                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9206  0946  303A               	movlw	58
  9207  0947  319D  255A         	fcall	_CC2500_WriteCommand
  9208                           
  9209                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9210  0949  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9211  094A  0008               	return
  9212  094B                     __end_of_CC2500_TxData:	
  9213                           
  9214                           	psect	text40
  9215  0A94                     __ptext40:	
  9216 ;; *************** function _CC2500_RxData *****************
  9217 ;; Defined at:
  9218 ;;		line 70 in file "../src/CC2500_B1.c"
  9219 ;; Parameters:    Size  Location     Type
  9220 ;;		None
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9223 ;; Return value:  Size  Location     Type
  9224 ;;		None               void
  9225 ;; Registers used:
  9226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;Total ram usage:        2 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    7
  9239 ;; This function calls:
  9240 ;;		_CC2500_ReadByte
  9241 ;;		_CC2500_ReadStatus
  9242 ;;		_CC2500_WriteByte
  9243 ;;		_Timeout_Counter
  9244 ;;		_set_TimeoutCleared
  9245 ;; This function is called by:
  9246 ;;		_setRF_Main
  9247 ;; This function uses a non-reentrant model
  9248 ;;
  9249                           
  9250                           
  9251                           ;psect for function _CC2500_RxData
  9252  0A94                     _CC2500_RxData:	
  9253                           
  9254                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9255                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9256                           
  9257                           ;incstack = 0
  9258                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9259  0A94  0020               	movlb	0	; select bank0
  9260  0A95  180D               	btfsc	13,0	;volatile
  9261  0A96  2A9B               	goto	l9218
  9262  0A97  2AA4               	goto	l9224
  9263  0A98                     l9216:	
  9264                           ;CC2500_B1.c: 76: {
  9265                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9266                           
  9267                           
  9268                           ;CC2500_B1.c: 78: Timeout_Counter();
  9269  0A98  319C  24A5  318A   	fcall	_Timeout_Counter
  9270  0A9B                     l9218:	
  9271  0A9B  0020               	movlb	0	; select bank0
  9272  0A9C  1C0D               	btfss	13,0	;volatile
  9273  0A9D  2AA1               	goto	l9222
  9274  0A9E  0021               	movlb	1	; select bank1
  9275  0A9F  1D2D               	btfss	(_myMain^(0+128)+13),2
  9276  0AA0  2A98               	goto	l9216
  9277  0AA1                     l9222:	
  9278                           
  9279                           ;CC2500_B1.c: 79: };
  9280                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9281  0AA1  319A  2293  318A   	fcall	_set_TimeoutCleared
  9282  0AA4                     l9224:	
  9283                           
  9284                           ;CC2500_B1.c: 81: }
  9285                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9286  0AA4  303B               	movlw	59
  9287  0AA5  319F  2710  318A   	fcall	_CC2500_ReadStatus
  9288                           
  9289                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9290  0AA8  0021               	movlb	1	; select bank1
  9291  0AA9  0857               	movf	_s_data^(0+128),w
  9292  0AAA  1903               	btfsc	3,2
  9293  0AAB  0008               	return
  9294                           
  9295                           ;CC2500_B1.c: 86: RC4 = 0;
  9296  0AAC  0020               	movlb	0	; select bank0
  9297  0AAD  120E               	bcf	14,4	;volatile
  9298                           
  9299                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9300  0AAE  30FF               	movlw	255
  9301  0AAF  00A4               	movwf	??_CC2500_RxData
  9302  0AB0  0824               	movf	??_CC2500_RxData,w
  9303  0AB1  0021               	movlb	1	; select bank1
  9304  0AB2  00D2               	movwf	_SPI0Buffer^(0+128)
  9305                           
  9306                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9307  0AB3  2ABA               	goto	l9234
  9308  0AB4                     l9236:	
  9309  0AB4  0021               	movlb	1	; select bank1
  9310  0AB5  192D               	btfsc	(_myMain^(0+128)+13),2
  9311  0AB6  2ABD               	goto	l280
  9312                           
  9313                           ;CC2500_B1.c: 89: Timeout_Counter();
  9314  0AB7  319C  24A5  318A   	fcall	_Timeout_Counter
  9315  0ABA                     l9234:	
  9316  0ABA  0020               	movlb	0	; select bank0
  9317  0ABB  190E               	btfsc	14,2	;volatile
  9318  0ABC  2AB4               	goto	l9236
  9319  0ABD                     l280:	
  9320                           
  9321                           ;CC2500_B1.c: 90: };
  9322                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9323  0ABD  0021               	movlb	1	; select bank1
  9324  0ABE  192D               	btfsc	(_myMain^(0+128)+13),2
  9325  0ABF  2B04               	goto	l281
  9326                           
  9327                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9328  0AC0  319D  2528  318A   	fcall	_CC2500_WriteByte
  9329                           
  9330                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9331  0AC3  319D  25AA  318A   	fcall	_CC2500_ReadByte
  9332                           
  9333                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9334  0AC6  0021               	movlb	1	; select bank1
  9335  0AC7  0852               	movf	_SPI0Buffer^(0+128),w
  9336  0AC8  0020               	movlb	0	; select bank0
  9337  0AC9  00A4               	movwf	??_CC2500_RxData
  9338  0ACA  0824               	movf	??_CC2500_RxData,w
  9339  0ACB  0021               	movlb	1	; select bank1
  9340  0ACC  00D1               	movwf	_Rx_Length^(0+128)
  9341                           
  9342                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9343  0ACD  0020               	movlb	0	; select bank0
  9344  0ACE  01A5               	clrf	CC2500_RxData@loop_f
  9345  0ACF                     l9250:	
  9346  0ACF  0021               	movlb	1	; select bank1
  9347  0AD0  0851               	movf	_Rx_Length^(0+128),w
  9348  0AD1  0020               	movlb	0	; select bank0
  9349  0AD2  0225               	subwf	CC2500_RxData@loop_f,w
  9350  0AD3  1803               	btfsc	3,0
  9351  0AD4  2AE8               	goto	l9252
  9352                           
  9353                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9354  0AD5  319D  25AA  318A   	fcall	_CC2500_ReadByte
  9355                           
  9356                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9357  0AD8  0021               	movlb	1	; select bank1
  9358  0AD9  0852               	movf	_SPI0Buffer^(0+128),w
  9359  0ADA  0020               	movlb	0	; select bank0
  9360  0ADB  00A4               	movwf	??_CC2500_RxData
  9361  0ADC  0825               	movf	CC2500_RxData@loop_f,w
  9362  0ADD  3EA0               	addlw	_RF_Data& (0+255)
  9363  0ADE  0086               	movwf	6
  9364  0ADF  3001               	movlw	1	; select bank3/4
  9365  0AE0  0087               	movwf	7
  9366  0AE1  0824               	movf	??_CC2500_RxData,w
  9367  0AE2  0081               	movwf	1
  9368  0AE3  3001               	movlw	1
  9369  0AE4  00A4               	movwf	??_CC2500_RxData
  9370  0AE5  0824               	movf	??_CC2500_RxData,w
  9371  0AE6  07A5               	addwf	CC2500_RxData@loop_f,f
  9372  0AE7  2ACF               	goto	l9250
  9373  0AE8                     l9252:	
  9374                           
  9375                           ;CC2500_B1.c: 99: }
  9376                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9377  0AE8  319D  25AA  318A   	fcall	_CC2500_ReadByte
  9378                           
  9379                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9380  0AEB  0021               	movlb	1	; select bank1
  9381  0AEC  0852               	movf	_SPI0Buffer^(0+128),w
  9382  0AED  0020               	movlb	0	; select bank0
  9383  0AEE  00A4               	movwf	??_CC2500_RxData
  9384  0AEF  0824               	movf	??_CC2500_RxData,w
  9385  0AF0  0021               	movlb	1	; select bank1
  9386  0AF1  00D0               	movwf	_RSSI^(0+128)
  9387                           
  9388                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9389  0AF2  319D  25AA  318A   	fcall	_CC2500_ReadByte
  9390                           
  9391                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9392  0AF5  0021               	movlb	1	; select bank1
  9393  0AF6  0852               	movf	_SPI0Buffer^(0+128),w
  9394  0AF7  0020               	movlb	0	; select bank0
  9395  0AF8  00A4               	movwf	??_CC2500_RxData
  9396  0AF9  0824               	movf	??_CC2500_RxData,w
  9397  0AFA  0021               	movlb	1	; select bank1
  9398  0AFB  00CB               	movwf	_CRC^(0+128)
  9399                           
  9400                           ;CC2500_B1.c: 104: RC4 = 1;
  9401  0AFC  0020               	movlb	0	; select bank0
  9402  0AFD  160E               	bsf	14,4	;volatile
  9403                           
  9404                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9405  0AFE  0021               	movlb	1	; select bank1
  9406  0AFF  1BCB               	btfsc	_CRC^(0+128),7
  9407                           
  9408                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9409  0B00  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9410                           
  9411                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9412  0B01  11BC               	bcf	_RF1^(0+128),3
  9413                           
  9414                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9415  0B02  14BC               	bsf	_RF1^(0+128),1
  9416                           
  9417                           ;CC2500_B1.c: 110: } else {
  9418  0B03  2B06               	goto	l9264
  9419  0B04                     l281:	
  9420                           
  9421                           ;CC2500_B1.c: 111: RC4 = 1;
  9422  0B04  0020               	movlb	0	; select bank0
  9423  0B05  160E               	bsf	14,4	;volatile
  9424  0B06                     l9264:	
  9425                           
  9426                           ;CC2500_B1.c: 112: }
  9427                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9428  0B06  319A  2293         	fcall	_set_TimeoutCleared
  9429  0B08  0021               	movlb	1	; select bank1
  9430  0B09  0008               	return
  9431  0B0A                     __end_of_CC2500_RxData:	
  9432                           
  9433                           	psect	text41
  9434  1F10                     __ptext41:	
  9435 ;; *************** function _CC2500_ReadStatus *****************
  9436 ;; Defined at:
  9437 ;;		line 304 in file "../src/CC2500_B1.c"
  9438 ;; Parameters:    Size  Location     Type
  9439 ;;  status_addr     1    wreg     unsigned char 
  9440 ;; Auto vars:     Size  Location     Type
  9441 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9442 ;; Return value:  Size  Location     Type
  9443 ;;		None               void
  9444 ;; Registers used:
  9445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9446 ;; Tracked objects:
  9447 ;;		On entry : 0/0
  9448 ;;		On exit  : 0/0
  9449 ;;		Unchanged: 0/0
  9450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;Total ram usage:        2 bytes
  9456 ;; Hardware stack levels used:    1
  9457 ;; Hardware stack levels required when called:    6
  9458 ;; This function calls:
  9459 ;;		_CC2500_ReadByte
  9460 ;;		_CC2500_WriteByte
  9461 ;;		_Timeout_Counter
  9462 ;;		_set_TimeoutCleared
  9463 ;; This function is called by:
  9464 ;;		_CC2500_RxData
  9465 ;;		_setRF_Main
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           
  9469                           
  9470                           ;psect for function _CC2500_ReadStatus
  9471  1F10                     _CC2500_ReadStatus:	
  9472                           
  9473                           ;incstack = 0
  9474                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9475                           ;CC2500_ReadStatus@status_addr stored from wreg
  9476  1F10  0020               	movlb	0	; select bank0
  9477  1F11  00A3               	movwf	CC2500_ReadStatus@status_addr
  9478                           
  9479                           ;CC2500_B1.c: 305: RC4 = 0;
  9480  1F12  120E               	bcf	14,4	;volatile
  9481                           
  9482                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9483  1F13  0823               	movf	CC2500_ReadStatus@status_addr,w
  9484  1F14  3EC0               	addlw	192
  9485  1F15  00A2               	movwf	??_CC2500_ReadStatus
  9486  1F16  0822               	movf	??_CC2500_ReadStatus,w
  9487  1F17  0021               	movlb	1	; select bank1
  9488  1F18  00D2               	movwf	_SPI0Buffer^(0+128)
  9489                           
  9490                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9491  1F19  2F1D               	goto	l9018
  9492  1F1A                     l9016:	
  9493                           
  9494                           ;CC2500_B1.c: 309: Timeout_Counter();
  9495  1F1A  319C  24A5  319F   	fcall	_Timeout_Counter
  9496  1F1D                     l9018:	
  9497  1F1D  0020               	movlb	0	; select bank0
  9498  1F1E  1D0E               	btfss	14,2	;volatile
  9499  1F1F  2F23               	goto	l9022
  9500  1F20  0021               	movlb	1	; select bank1
  9501  1F21  1D2D               	btfss	(_myMain^(0+128)+13),2
  9502  1F22  2F1A               	goto	l9016
  9503  1F23                     l9022:	
  9504                           
  9505                           ;CC2500_B1.c: 310: };
  9506                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9507  1F23  319A  2293  319F   	fcall	_set_TimeoutCleared
  9508                           
  9509                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9510  1F26  319D  2528  319F   	fcall	_CC2500_WriteByte
  9511                           
  9512                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9513  1F29  319D  25AA         	fcall	_CC2500_ReadByte
  9514                           
  9515                           ;CC2500_B1.c: 315: RC4 = 1;
  9516  1F2B  0020               	movlb	0	; select bank0
  9517  1F2C  160E               	bsf	14,4	;volatile
  9518                           
  9519                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9520  1F2D  0021               	movlb	1	; select bank1
  9521  1F2E  0852               	movf	_SPI0Buffer^(0+128),w
  9522  1F2F  0020               	movlb	0	; select bank0
  9523  1F30  00A2               	movwf	??_CC2500_ReadStatus
  9524  1F31  0822               	movf	??_CC2500_ReadStatus,w
  9525  1F32  0021               	movlb	1	; select bank1
  9526  1F33  00D7               	movwf	_s_data^(0+128)
  9527  1F34  0008               	return
  9528  1F35                     __end_of_CC2500_ReadStatus:	
  9529                           
  9530                           	psect	text42
  9531  1DAA                     __ptext42:	
  9532 ;; *************** function _CC2500_ReadByte *****************
  9533 ;; Defined at:
  9534 ;;		line 238 in file "../src/CC2500_B1.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;		None
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9539 ;; Return value:  Size  Location     Type
  9540 ;;		None               void
  9541 ;; Registers used:
  9542 ;;		wreg, status,2, status,0
  9543 ;; Tracked objects:
  9544 ;;		On entry : 0/0
  9545 ;;		On exit  : 0/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;Total ram usage:        2 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; Hardware stack levels required when called:    5
  9555 ;; This function calls:
  9556 ;;		Nothing
  9557 ;; This function is called by:
  9558 ;;		_CC2500_RxData
  9559 ;;		_CC2500_ReadStatus
  9560 ;;		_CC2500_ReadREG
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           
  9565                           ;psect for function _CC2500_ReadByte
  9566  1DAA                     _CC2500_ReadByte:	
  9567                           
  9568                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9569                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9570                           
  9571                           ;incstack = 0
  9572                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9573  1DAA  0020               	movlb	0	; select bank0
  9574  1DAB  01A1               	clrf	CC2500_ReadByte@loop_b
  9575  1DAC                     L6:	
  9576  1DAC  3008               	movlw	8
  9577  1DAD  0221               	subwf	CC2500_ReadByte@loop_b,w
  9578  1DAE  1803               	btfsc	3,0
  9579  1DAF  0008               	return
  9580                           
  9581                           ;CC2500_B1.c: 241: RC1 = 1;
  9582  1DB0  148E               	bsf	14,1	;volatile
  9583                           
  9584                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9585  1DB1  1003               	clrc
  9586  1DB2  0021               	movlb	1	; select bank1
  9587  1DB3  0DD2               	rlf	_SPI0Buffer^(0+128),f
  9588                           
  9589                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9590  1DB4  0020               	movlb	0	; select bank0
  9591  1DB5  1D0E               	btfss	14,2	;volatile
  9592  1DB6  2DBA               	goto	l8954
  9593                           
  9594                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9595  1DB7  0021               	movlb	1	; select bank1
  9596  1DB8  1452               	bsf	_SPI0Buffer^(0+128),0
  9597  1DB9  2DC0               	goto	l8956
  9598  1DBA                     l8954:	
  9599                           
  9600                           ;CC2500_B1.c: 245: else
  9601                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9602  1DBA  30FE               	movlw	254
  9603  1DBB  0020               	movlb	0	; select bank0
  9604  1DBC  00A0               	movwf	??_CC2500_ReadByte
  9605  1DBD  0820               	movf	??_CC2500_ReadByte,w
  9606  1DBE  0021               	movlb	1	; select bank1
  9607  1DBF  05D2               	andwf	_SPI0Buffer^(0+128),f
  9608  1DC0                     l8956:	
  9609                           
  9610                           ;CC2500_B1.c: 247: RC1 = 0;
  9611  1DC0  0020               	movlb	0	; select bank0
  9612  1DC1  108E               	bcf	14,1	;volatile
  9613  1DC2  3001               	movlw	1
  9614  1DC3  00A0               	movwf	??_CC2500_ReadByte
  9615  1DC4  0820               	movf	??_CC2500_ReadByte,w
  9616  1DC5  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9617  1DC6  2DAC               	goto	L6
  9618  1DC7                     __end_of_CC2500_ReadByte:	
  9619                           
  9620                           	psect	text43
  9621  1A77                     __ptext43:	
  9622 ;; *************** function _RF_Initialization *****************
  9623 ;; Defined at:
  9624 ;;		line 9 in file "../src/RF_Control_B1.c"
  9625 ;; Parameters:    Size  Location     Type
  9626 ;;		None
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;		None
  9629 ;; Return value:  Size  Location     Type
  9630 ;;		None               void
  9631 ;; Registers used:
  9632 ;;		wreg, status,2, status,0, pclath, cstack
  9633 ;; Tracked objects:
  9634 ;;		On entry : 0/0
  9635 ;;		On exit  : 0/0
  9636 ;;		Unchanged: 0/0
  9637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;Total ram usage:        0 bytes
  9643 ;; Hardware stack levels used:    1
  9644 ;; Hardware stack levels required when called:    6
  9645 ;; This function calls:
  9646 ;;		_setRF_Initialization
  9647 ;; This function is called by:
  9648 ;;		_main
  9649 ;; This function uses a non-reentrant model
  9650 ;;
  9651                           
  9652                           
  9653                           ;psect for function _RF_Initialization
  9654  1A77                     _RF_Initialization:	
  9655                           
  9656                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9657                           
  9658                           ;incstack = 0
  9659                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9660  1A77  319A  22F4         	fcall	_setRF_Initialization
  9661  1A79  0008               	return
  9662  1A7A                     __end_of_RF_Initialization:	
  9663                           
  9664                           	psect	text44
  9665  1AF4                     __ptext44:	
  9666 ;; *************** function _setRF_Initialization *****************
  9667 ;; Defined at:
  9668 ;;		line 43 in file "../src/RF_Control_B1.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;		None
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;		None
  9673 ;; Return value:  Size  Location     Type
  9674 ;;		None               void
  9675 ;; Registers used:
  9676 ;;		wreg
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;Total ram usage:        1 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    5
  9689 ;; This function calls:
  9690 ;;		Nothing
  9691 ;; This function is called by:
  9692 ;;		_RF_Initialization
  9693 ;; This function uses a non-reentrant model
  9694 ;;
  9695                           
  9696                           
  9697                           ;psect for function _setRF_Initialization
  9698  1AF4                     _setRF_Initialization:	
  9699                           
  9700                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9701                           
  9702                           ;incstack = 0
  9703                           ; Regs used in _setRF_Initialization: [wreg]
  9704  1AF4  3015               	movlw	21
  9705  1AF5  0020               	movlb	0	; select bank0
  9706  1AF6  00A0               	movwf	??_setRF_Initialization
  9707  1AF7  0820               	movf	??_setRF_Initialization,w
  9708  1AF8  0021               	movlb	1	; select bank1
  9709  1AF9  00D4               	movwf	_Tx_Length^(0+128)
  9710                           
  9711                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9712  1AFA  300A               	movlw	10
  9713  1AFB  00C3               	movwf	(_RF1^(0+128)+7)
  9714  1AFC  3000               	movlw	0
  9715  1AFD  00C4               	movwf	(_RF1^(0+128)+8)
  9716  1AFE  0008               	return
  9717  1AFF                     __end_of_setRF_Initialization:	
  9718                           
  9719                           	psect	text45
  9720  1C0C                     __ptext45:	
  9721 ;; *************** function _Mcu_Initialization *****************
  9722 ;; Defined at:
  9723 ;;		line 30 in file "../src/MCU_B1.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;		None
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;		None
  9728 ;; Return value:  Size  Location     Type
  9729 ;;		None               void
  9730 ;; Registers used:
  9731 ;;		wreg, status,2, status,0, pclath, cstack
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/0
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9741 ;;Total ram usage:        0 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; Hardware stack levels required when called:    6
  9744 ;; This function calls:
  9745 ;;		_ADC_Set
  9746 ;;		_Fosc_Set
  9747 ;;		_IOC_Set
  9748 ;;		_IO_Set
  9749 ;;		_TMR1_Set
  9750 ;;		_WDT_Set
  9751 ;; This function is called by:
  9752 ;;		_main
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           
  9757                           ;psect for function _Mcu_Initialization
  9758  1C0C                     _Mcu_Initialization:	
  9759                           
  9760                           ;MCU_B1.c: 32: Fosc_Set();
  9761                           
  9762                           ;incstack = 0
  9763                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9764  1C0C  319A  228F  319C   	fcall	_Fosc_Set
  9765                           
  9766                           ;MCU_B1.c: 34: IO_Set();
  9767  1C0F  319D  2541  319C   	fcall	_IO_Set
  9768                           
  9769                           ;MCU_B1.c: 36: ;;
  9770                           ;MCU_B1.c: 38: TMR1_Set();
  9771  1C12  319B  2353  319C   	fcall	_TMR1_Set
  9772                           
  9773                           ;MCU_B1.c: 40: ADC_Set();
  9774  1C15  319A  22A9  319C   	fcall	_ADC_Set
  9775                           
  9776                           ;MCU_B1.c: 42: ;;
  9777                           ;MCU_B1.c: 44: ;;
  9778                           ;MCU_B1.c: 46: IOC_Set();
  9779  1C18  319B  2347  319C   	fcall	_IOC_Set
  9780                           
  9781                           ;MCU_B1.c: 48: ;;
  9782                           ;MCU_B1.c: 50: ;;
  9783                           ;MCU_B1.c: 52: WDT_Set();
  9784  1C1B  319B  235F         	fcall	_WDT_Set
  9785  1C1D  0008               	return
  9786  1C1E                     __end_of_Mcu_Initialization:	
  9787                           
  9788                           	psect	text46
  9789  1B5F                     __ptext46:	
  9790 ;; *************** function _WDT_Set *****************
  9791 ;; Defined at:
  9792 ;;		line 1019 in file "../src/MCU_B1.c"
  9793 ;; Parameters:    Size  Location     Type
  9794 ;;		None
  9795 ;; Auto vars:     Size  Location     Type
  9796 ;;		None
  9797 ;; Return value:  Size  Location     Type
  9798 ;;		None               void
  9799 ;; Registers used:
  9800 ;;		wreg
  9801 ;; Tracked objects:
  9802 ;;		On entry : 0/0
  9803 ;;		On exit  : 0/0
  9804 ;;		Unchanged: 0/0
  9805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;Total ram usage:        1 bytes
  9811 ;; Hardware stack levels used:    1
  9812 ;; Hardware stack levels required when called:    5
  9813 ;; This function calls:
  9814 ;;		Nothing
  9815 ;; This function is called by:
  9816 ;;		_Mcu_Initialization
  9817 ;; This function uses a non-reentrant model
  9818 ;;
  9819                           
  9820                           
  9821                           ;psect for function _WDT_Set
  9822  1B5F                     _WDT_Set:	
  9823                           
  9824                           ;MCU_B1.c: 1026: WDTCON = 0b00010111;;
  9825                           
  9826                           ;incstack = 0
  9827                           ; Regs used in _WDT_Set: [wreg]
  9828  1B5F  3017               	movlw	23
  9829  1B60  0021               	movlb	1	; select bank1
  9830  1B61  0097               	movwf	23	;volatile
  9831                           
  9832                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  9833  1B62  0022               	movlb	2	; select bank2
  9834  1B63  1425               	bsf	_WDT^(0+256),0
  9835                           
  9836                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  9837  1B64  300A               	movlw	10
  9838  1B65  0020               	movlb	0	; select bank0
  9839  1B66  00A0               	movwf	??_WDT_Set
  9840  1B67  0820               	movf	??_WDT_Set,w
  9841  1B68  0022               	movlb	2	; select bank2
  9842  1B69  00A6               	movwf	(_WDT^(0+256)+1)
  9843  1B6A  0008               	return
  9844  1B6B                     __end_of_WDT_Set:	
  9845                           
  9846                           	psect	text47
  9847  1B53                     __ptext47:	
  9848 ;; *************** function _TMR1_Set *****************
  9849 ;; Defined at:
  9850 ;;		line 199 in file "../src/MCU_B1.c"
  9851 ;; Parameters:    Size  Location     Type
  9852 ;;		None
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;		None
  9855 ;; Return value:  Size  Location     Type
  9856 ;;		None               void
  9857 ;; Registers used:
  9858 ;;		wreg
  9859 ;; Tracked objects:
  9860 ;;		On entry : 0/0
  9861 ;;		On exit  : 0/0
  9862 ;;		Unchanged: 0/0
  9863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9868 ;;Total ram usage:        0 bytes
  9869 ;; Hardware stack levels used:    1
  9870 ;; Hardware stack levels required when called:    5
  9871 ;; This function calls:
  9872 ;;		Nothing
  9873 ;; This function is called by:
  9874 ;;		_Mcu_Initialization
  9875 ;; This function uses a non-reentrant model
  9876 ;;
  9877                           
  9878                           
  9879                           ;psect for function _TMR1_Set
  9880  1B53                     _TMR1_Set:	
  9881                           
  9882                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9883                           
  9884                           ;incstack = 0
  9885                           ; Regs used in _TMR1_Set: [wreg]
  9886  1B53  3041               	movlw	65
  9887  1B54  0020               	movlb	0	; select bank0
  9888  1B55  0098               	movwf	24	;volatile
  9889                           
  9890                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9891  1B56  30FA               	movlw	250
  9892  1B57  0097               	movwf	23	;volatile
  9893                           
  9894                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9895  1B58  3038               	movlw	56
  9896  1B59  0096               	movwf	22	;volatile
  9897                           
  9898                           ;MCU_B1.c: 203: TMR1IE = 1;
  9899  1B5A  0021               	movlb	1	; select bank1
  9900  1B5B  1411               	bsf	17,0	;volatile
  9901                           
  9902                           ;MCU_B1.c: 204: PEIE = 1;
  9903  1B5C  170B               	bsf	11,6	;volatile
  9904                           
  9905                           ;MCU_B1.c: 205: GIE = 1;
  9906  1B5D  178B               	bsf	11,7	;volatile
  9907  1B5E  0008               	return
  9908  1B5F                     __end_of_TMR1_Set:	
  9909                           
  9910                           	psect	text48
  9911  1D41                     __ptext48:	
  9912 ;; *************** function _IO_Set *****************
  9913 ;; Defined at:
  9914 ;;		line 60 in file "../src/MCU_B1.c"
  9915 ;; Parameters:    Size  Location     Type
  9916 ;;		None
  9917 ;; Auto vars:     Size  Location     Type
  9918 ;;		None
  9919 ;; Return value:  Size  Location     Type
  9920 ;;		None               void
  9921 ;; Registers used:
  9922 ;;		wreg, status,2
  9923 ;; Tracked objects:
  9924 ;;		On entry : 0/0
  9925 ;;		On exit  : 0/0
  9926 ;;		Unchanged: 0/0
  9927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;Total ram usage:        0 bytes
  9933 ;; Hardware stack levels used:    1
  9934 ;; Hardware stack levels required when called:    5
  9935 ;; This function calls:
  9936 ;;		Nothing
  9937 ;; This function is called by:
  9938 ;;		_Mcu_Initialization
  9939 ;; This function uses a non-reentrant model
  9940 ;;
  9941                           
  9942                           
  9943                           ;psect for function _IO_Set
  9944  1D41                     _IO_Set:	
  9945                           
  9946                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9947                           
  9948                           ;incstack = 0
  9949                           ; Regs used in _IO_Set: [wreg+status,2]
  9950  1D41  3077               	movlw	119
  9951  1D42  0021               	movlb	1	; select bank1
  9952  1D43  008C               	movwf	12	;volatile
  9953                           
  9954                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9955  1D44  3007               	movlw	7
  9956  1D45  008D               	movwf	13	;volatile
  9957                           
  9958                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9959  1D46  300C               	movlw	12
  9960  1D47  008E               	movwf	14	;volatile
  9961                           
  9962                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9963  1D48  0022               	movlb	2	; select bank2
  9964  1D49  018C               	clrf	12	;volatile
  9965                           
  9966                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9967  1D4A  3002               	movlw	2
  9968  1D4B  008D               	movwf	13	;volatile
  9969                           
  9970                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9971  1D4C  018E               	clrf	14	;volatile
  9972                           
  9973                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9974  1D4D  3022               	movlw	34
  9975  1D4E  0023               	movlb	3	; select bank3
  9976  1D4F  008C               	movwf	12	;volatile
  9977                           
  9978                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9979  1D50  018D               	clrf	13	;volatile
  9980                           
  9981                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9982  1D51  018E               	clrf	14	;volatile
  9983                           
  9984                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9985  1D52  3077               	movlw	119
  9986  1D53  0020               	movlb	0	; select bank0
  9987  1D54  008C               	movwf	12	;volatile
  9988                           
  9989                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9990  1D55  3007               	movlw	7
  9991  1D56  008D               	movwf	13	;volatile
  9992                           
  9993                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9994  1D57  300C               	movlw	12
  9995  1D58  008E               	movwf	14	;volatile
  9996  1D59  0008               	return
  9997  1D5A                     __end_of_IO_Set:	
  9998                           
  9999                           	psect	text49
 10000  1B47                     __ptext49:	
 10001 ;; *************** function _IOC_Set *****************
 10002 ;; Defined at:
 10003 ;;		line 367 in file "../src/MCU_B1.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;		None
 10006 ;; Auto vars:     Size  Location     Type
 10007 ;;		None
 10008 ;; Return value:  Size  Location     Type
 10009 ;;		None               void
 10010 ;; Registers used:
 10011 ;;		wreg, status,2
 10012 ;; Tracked objects:
 10013 ;;		On entry : 0/0
 10014 ;;		On exit  : 0/0
 10015 ;;		Unchanged: 0/0
 10016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;Total ram usage:        0 bytes
 10022 ;; Hardware stack levels used:    1
 10023 ;; Hardware stack levels required when called:    5
 10024 ;; This function calls:
 10025 ;;		Nothing
 10026 ;; This function is called by:
 10027 ;;		_Mcu_Initialization
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           
 10032                           ;psect for function _IOC_Set
 10033  1B47                     _IOC_Set:	
 10034                           
 10035                           ;MCU_B1.c: 368: WPUB2 = 0;
 10036                           
 10037                           ;incstack = 0
 10038                           ; Regs used in _IOC_Set: [wreg+status,2]
 10039  1B47  0024               	movlb	4	; select bank4
 10040  1B48  110D               	bcf	13,2	;volatile
 10041                           
 10042                           ;MCU_B1.c: 376: IOCBP = 0b00000000;
 10043  1B49  0027               	movlb	7	; select bank7
 10044  1B4A  0194               	clrf	20	;volatile
 10045                           
 10046                           ;MCU_B1.c: 377: IOCBN = 0b00000100;
 10047  1B4B  3004               	movlw	4
 10048  1B4C  0095               	movwf	21	;volatile
 10049                           
 10050                           ;MCU_B1.c: 393: IOCBF = 0b00000000;
 10051  1B4D  0196               	clrf	22	;volatile
 10052                           
 10053                           ;MCU_B1.c: 395: IOCIE = 1;
 10054  1B4E  158B               	bsf	11,3	;volatile
 10055                           
 10056                           ;MCU_B1.c: 396: IOCIF = 0;
 10057  1B4F  100B               	bcf	11,0	;volatile
 10058                           
 10059                           ;MCU_B1.c: 397: PEIE = 1;
 10060  1B50  170B               	bsf	11,6	;volatile
 10061                           
 10062                           ;MCU_B1.c: 398: GIE = 1;
 10063  1B51  178B               	bsf	11,7	;volatile
 10064  1B52  0008               	return
 10065  1B53                     __end_of_IOC_Set:	
 10066                           
 10067                           	psect	text50
 10068  1A8F                     __ptext50:	
 10069 ;; *************** function _Fosc_Set *****************
 10070 ;; Defined at:
 10071 ;;		line 56 in file "../src/MCU_B1.c"
 10072 ;; Parameters:    Size  Location     Type
 10073 ;;		None
 10074 ;; Auto vars:     Size  Location     Type
 10075 ;;		None
 10076 ;; Return value:  Size  Location     Type
 10077 ;;		None               void
 10078 ;; Registers used:
 10079 ;;		wreg
 10080 ;; Tracked objects:
 10081 ;;		On entry : 0/0
 10082 ;;		On exit  : 0/0
 10083 ;;		Unchanged: 0/0
 10084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;Total ram usage:        0 bytes
 10090 ;; Hardware stack levels used:    1
 10091 ;; Hardware stack levels required when called:    5
 10092 ;; This function calls:
 10093 ;;		Nothing
 10094 ;; This function is called by:
 10095 ;;		_Mcu_Initialization
 10096 ;; This function uses a non-reentrant model
 10097 ;;
 10098                           
 10099                           
 10100                           ;psect for function _Fosc_Set
 10101  1A8F                     _Fosc_Set:	
 10102                           
 10103                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10104                           
 10105                           ;incstack = 0
 10106                           ; Regs used in _Fosc_Set: [wreg]
 10107  1A8F  3078               	movlw	120
 10108  1A90  0021               	movlb	1	; select bank1
 10109  1A91  0099               	movwf	25	;volatile
 10110  1A92  0008               	return
 10111  1A93                     __end_of_Fosc_Set:	
 10112                           
 10113                           	psect	text51
 10114  1AA9                     __ptext51:	
 10115 ;; *************** function _ADC_Set *****************
 10116 ;; Defined at:
 10117 ;;		line 420 in file "../src/MCU_B1.c"
 10118 ;; Parameters:    Size  Location     Type
 10119 ;;		None
 10120 ;; Auto vars:     Size  Location     Type
 10121 ;;		None
 10122 ;; Return value:  Size  Location     Type
 10123 ;;		None               void
 10124 ;; Registers used:
 10125 ;;		wreg
 10126 ;; Tracked objects:
 10127 ;;		On entry : 0/0
 10128 ;;		On exit  : 0/0
 10129 ;;		Unchanged: 0/0
 10130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;Total ram usage:        0 bytes
 10136 ;; Hardware stack levels used:    1
 10137 ;; Hardware stack levels required when called:    5
 10138 ;; This function calls:
 10139 ;;		Nothing
 10140 ;; This function is called by:
 10141 ;;		_Mcu_Initialization
 10142 ;; This function uses a non-reentrant model
 10143 ;;
 10144                           
 10145                           
 10146                           ;psect for function _ADC_Set
 10147  1AA9                     _ADC_Set:	
 10148                           
 10149                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10150                           
 10151                           ;incstack = 0
 10152                           ; Regs used in _ADC_Set: [wreg]
 10153  1AA9  30F3               	movlw	243
 10154  1AAA  0021               	movlb	1	; select bank1
 10155  1AAB  009E               	movwf	30	;volatile
 10156                           
 10157                           ;MCU_B1.c: 422: FVRCON = 0xc0;
 10158  1AAC  30C0               	movlw	192
 10159  1AAD  0022               	movlb	2	; select bank2
 10160  1AAE  0097               	movwf	23	;volatile
 10161  1AAF  0008               	return
 10162  1AB0                     __end_of_ADC_Set:	
 10163                           
 10164                           	psect	text52
 10165  0049                     __ptext52:	
 10166 ;; *************** function _Load_Main *****************
 10167 ;; Defined at:
 10168 ;;		line 39 in file "../src/OverLoad_B1.c"
 10169 ;; Parameters:    Size  Location     Type
 10170 ;;		None
 10171 ;; Auto vars:     Size  Location     Type
 10172 ;;  i               1   14[BANK0 ] unsigned char 
 10173 ;;  error           1   12[BANK0 ] unsigned char 
 10174 ;;  j               1   11[BANK0 ] unsigned char 
 10175 ;; Return value:  Size  Location     Type
 10176 ;;		None               void
 10177 ;; Registers used:
 10178 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10179 ;; Tracked objects:
 10180 ;;		On entry : 0/0
 10181 ;;		On exit  : 0/0
 10182 ;;		Unchanged: 0/0
 10183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10185 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10186 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10187 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10188 ;;Total ram usage:        6 bytes
 10189 ;; Hardware stack levels used:    1
 10190 ;; Hardware stack levels required when called:    8
 10191 ;; This function calls:
 10192 ;;		_getMain_All_Error_Status
 10193 ;;		_getMain_LightsStatus
 10194 ;;		_getMain_Lights_Count
 10195 ;;		_getMain_LoadOK
 10196 ;;		_setLoad_AH_AL_Restore
 10197 ;; This function is called by:
 10198 ;;		_main
 10199 ;; This function uses a non-reentrant model
 10200 ;;
 10201                           
 10202                           
 10203                           ;psect for function _Load_Main
 10204  0049                     _Load_Main:	
 10205                           
 10206                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = 0;
 10207                           
 10208                           ;incstack = 0
 10209                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10210  0049  0020               	movlb	0	; select bank0
 10211  004A  01AE               	clrf	Load_Main@i
 10212  004B  01AB               	clrf	Load_Main@j
 10213  004C  01AC               	clrf	Load_Main@error
 10214                           
 10215                           ;OverLoad_B1.c: 41: if (Load.Enable == 1) {
 10216  004D  0022               	movlb	2	; select bank2
 10217  004E  1C27               	btfss	_Load^(0+256),0
 10218  004F  2A1D               	goto	l1720
 10219                           
 10220                           ;OverLoad_B1.c: 42: Load.GO = 0;
 10221  0050  10A7               	bcf	_Load^(0+256),1
 10222                           
 10223                           ;OverLoad_B1.c: 44: Load.GO = getMain_LightsStatus() == 1 && getMain_All_Error_Status(0)
      +                           == 0 ? 1 : 0;
 10224  0051  0020               	movlb	0	; select bank0
 10225  0052  01AD               	clrf	_Load_Main$4290
 10226  0053  3190  20D3  3180   	fcall	_getMain_LightsStatus
 10227  0056  3A01               	xorlw	1
 10228  0057  1D03               	skipz
 10229  0058  2863               	goto	l10444
 10230  0059  3000               	movlw	0
 10231  005A  3191  2105  3180   	fcall	_getMain_All_Error_Status
 10232  005D  3800               	iorlw	0
 10233  005E  1D03               	skipz
 10234  005F  2863               	goto	l10444
 10235  0060  0020               	movlb	0	; select bank0
 10236  0061  01AD               	clrf	_Load_Main$4290
 10237  0062  0AAD               	incf	_Load_Main$4290,f
 10238  0063                     l10444:	
 10239  0063  0020               	movlb	0	; select bank0
 10240  0064  082D               	movf	_Load_Main$4290,w
 10241  0065  0022               	movlb	2	; select bank2
 10242  0066  10A7               	bcf	_Load^(0+256),1
 10243  0067  1D03               	skipz
 10244  0068  14A7               	bsf	_Load^(0+256),1
 10245                           
 10246                           ;OverLoad_B1.c: 46: if (Load.OK == 1) {
 10247  0069  1FA7               	btfss	_Load^(0+256),7
 10248  006A  2874               	goto	l10454
 10249                           
 10250                           ;OverLoad_B1.c: 47: if (getMain_LoadOK() == 1) {
 10251  006B  319B  2378  3180   	fcall	_getMain_LoadOK
 10252  006E  3A01               	xorlw	1
 10253  006F  1D03               	skipz
 10254  0070  2874               	goto	l10454
 10255                           
 10256                           ;OverLoad_B1.c: 48: Load.OK = 0;
 10257  0071  0022               	movlb	2	; select bank2
 10258  0072  13A7               	bcf	_Load^(0+256),7
 10259                           
 10260                           ;OverLoad_B1.c: 49: Load.Count = 0;
 10261  0073  01D0               	clrf	(_Load^(0+256)+41)
 10262  0074                     l10454:	
 10263                           
 10264                           ;OverLoad_B1.c: 50: }
 10265                           ;OverLoad_B1.c: 51: }
 10266                           ;OverLoad_B1.c: 53: if (Load.GO == 1) {
 10267  0074  0022               	movlb	2	; select bank2
 10268  0075  1CA7               	btfss	_Load^(0+256),1
 10269  0076  29C3               	goto	l1725
 10270                           
 10271                           ;OverLoad_B1.c: 54: Load.LightsON = 1;
 10272  0077  1527               	bsf	_Load^(0+256),2
 10273                           
 10274                           ;OverLoad_B1.c: 56: if (Load.ADtoGO == 1) {
 10275  0078  1E27               	btfss	_Load^(0+256),4
 10276  0079  29C1               	goto	l1726
 10277                           
 10278                           ;OverLoad_B1.c: 57: Load.Time++;
 10279  007A  3001               	movlw	1
 10280  007B  07A8               	addwf	(_Load^(0+256)+1),f
 10281  007C  3000               	movlw	0
 10282  007D  3DA9               	addwfc	((_Load+1)^(0+256)+1),f
 10283                           
 10284                           ;OverLoad_B1.c: 58: if (Load.Time >= 5) {
 10285  007E  3000               	movlw	0
 10286  007F  0229               	subwf	((_Load+1)^(0+256)+1),w
 10287  0080  3005               	movlw	5
 10288  0081  1903               	skipnz
 10289  0082  0228               	subwf	(_Load^(0+256)+1),w
 10290  0083  1C03               	skipc
 10291  0084  0008               	return
 10292                           
 10293                           ;OverLoad_B1.c: 59: Load.Time = 0;
 10294  0085  01A8               	clrf	(_Load^(0+256)+1)
 10295  0086  01A9               	clrf	((_Load+1)^(0+256)+1)
 10296                           
 10297                           ;OverLoad_B1.c: 60: Load.ADtoGO = 0;
 10298  0087  1227               	bcf	_Load^(0+256),4
 10299                           
 10300                           ;OverLoad_B1.c: 61: Load.LightsCount = getMain_Lights_Count();
 10301  0088  319C  24E4  3180   	fcall	_getMain_Lights_Count
 10302  008B  0020               	movlb	0	; select bank0
 10303  008C  00A9               	movwf	??_Load_Main
 10304  008D  0829               	movf	??_Load_Main,w
 10305  008E  0022               	movlb	2	; select bank2
 10306  008F  00D2               	movwf	(_Load^(0+256)+43)
 10307                           
 10308                           ;OverLoad_B1.c: 64: for (i = 0; i < 4; i++) {
 10309  0090  0020               	movlb	0	; select bank0
 10310  0091  01AE               	clrf	Load_Main@i
 10311  0092  3004               	movlw	4
 10312  0093  022E               	subwf	Load_Main@i,w
 10313  0094  1803               	btfsc	3,0
 10314  0095  28C0               	goto	l10478
 10315  0096                     l10472:	
 10316                           
 10317                           ;OverLoad_B1.c: 65: Load.ADH += Load.AH[i];
 10318  0096  352E               	lslf	Load_Main@i,w
 10319  0097  3E32               	addlw	(_Load+11)& (0+255)
 10320  0098  0086               	movwf	6
 10321  0099  3001               	movlw	1	; select bank2/3
 10322  009A  0087               	movwf	7
 10323  009B  3F40               	moviw [0]fsr1
 10324  009C  00A9               	movwf	??_Load_Main
 10325  009D  3F41               	moviw [1]fsr1
 10326  009E  00AA               	movwf	??_Load_Main+1
 10327  009F  0829               	movf	??_Load_Main,w
 10328  00A0  0022               	movlb	2	; select bank2
 10329  00A1  07AC               	addwf	(_Load^(0+256)+5),f
 10330  00A2  0020               	movlb	0	; select bank0
 10331  00A3  082A               	movf	??_Load_Main+1,w
 10332  00A4  0022               	movlb	2	; select bank2
 10333  00A5  3DAD               	addwfc	((_Load+1)^(0+256)+5),f
 10334                           
 10335                           ;OverLoad_B1.c: 66: Load.ADL += Load.AL[i];
 10336  00A6  0020               	movlb	0	; select bank0
 10337  00A7  352E               	lslf	Load_Main@i,w
 10338  00A8  3E3C               	addlw	(_Load+21)& (0+255)
 10339  00A9  0086               	movwf	6
 10340  00AA  3001               	movlw	1	; select bank2/3
 10341  00AB  0087               	movwf	7
 10342  00AC  3F40               	moviw [0]fsr1
 10343  00AD  00A9               	movwf	??_Load_Main
 10344  00AE  3F41               	moviw [1]fsr1
 10345  00AF  00AA               	movwf	??_Load_Main+1
 10346  00B0  0829               	movf	??_Load_Main,w
 10347  00B1  0022               	movlb	2	; select bank2
 10348  00B2  07AE               	addwf	(_Load^(0+256)+7),f
 10349  00B3  0020               	movlb	0	; select bank0
 10350  00B4  082A               	movf	??_Load_Main+1,w
 10351  00B5  0022               	movlb	2	; select bank2
 10352  00B6  3DAF               	addwfc	((_Load+1)^(0+256)+7),f
 10353  00B7  3001               	movlw	1
 10354  00B8  0020               	movlb	0	; select bank0
 10355  00B9  00A9               	movwf	??_Load_Main
 10356  00BA  0829               	movf	??_Load_Main,w
 10357  00BB  07AE               	addwf	Load_Main@i,f
 10358  00BC  3004               	movlw	4
 10359  00BD  022E               	subwf	Load_Main@i,w
 10360  00BE  1C03               	skipc
 10361  00BF  2896               	goto	l10472
 10362  00C0                     l10478:	
 10363                           
 10364                           ;OverLoad_B1.c: 67: }
 10365                           ;OverLoad_B1.c: 68: setLoad_AH_AL_Restore();
 10366  00C0  319D  258E  3180   	fcall	_setLoad_AH_AL_Restore
 10367                           
 10368                           ;OverLoad_B1.c: 69: Load.ADH /= 4;
 10369  00C3  3002               	movlw	2
 10370  00C4  0022               	movlb	2	; select bank2
 10371  00C5                     u11895:	
 10372  00C5  36AD               	lsrf	((_Load+1)^(0+256)+5),f
 10373  00C6  0CAC               	rrf	(_Load^(0+256)+5),f
 10374  00C7  0B89               	decfsz	9,f
 10375  00C8  28C5               	goto	u11895
 10376                           
 10377                           ;OverLoad_B1.c: 70: Load.ADL /= 4;
 10378  00C9  3002               	movlw	2
 10379  00CA                     u11905:	
 10380  00CA  36AF               	lsrf	((_Load+1)^(0+256)+7),f
 10381  00CB  0CAE               	rrf	(_Load^(0+256)+7),f
 10382  00CC  0B89               	decfsz	9,f
 10383  00CD  28CA               	goto	u11905
 10384                           
 10385                           ;OverLoad_B1.c: 71: RB5 = 0;
 10386  00CE  0020               	movlb	0	; select bank0
 10387  00CF  128D               	bcf	13,5	;volatile
 10388                           
 10389                           ;OverLoad_B1.c: 72: if (Load.ADH > Load.ADL) {
 10390  00D0  0022               	movlb	2	; select bank2
 10391  00D1  082D               	movf	((_Load+1)^(0+256)+5),w
 10392  00D2  022F               	subwf	((_Load+1)^(0+256)+7),w
 10393  00D3  1D03               	skipz
 10394  00D4  28D7               	goto	u11915
 10395  00D5  082C               	movf	(_Load^(0+256)+5),w
 10396  00D6  022E               	subwf	(_Load^(0+256)+7),w
 10397  00D7                     u11915:	
 10398  00D7  1803               	skipnc
 10399  00D8  0008               	return
 10400                           
 10401                           ;OverLoad_B1.c: 73: Load.AD = (Load.ADH - Load.ADL);
 10402  00D9  3005               	movlw	5
 10403  00DA  3E27               	addlw	_Load& (0+255)
 10404  00DB  0086               	movwf	6
 10405  00DC  3001               	movlw	1	; select bank2/3
 10406  00DD  0087               	movwf	7
 10407  00DE  092E               	comf	(_Load^(0+256)+7),w
 10408  00DF  0020               	movlb	0	; select bank0
 10409  00E0  00A9               	movwf	??_Load_Main
 10410  00E1  0022               	movlb	2	; select bank2
 10411  00E2  092F               	comf	((_Load+1)^(0+256)+7),w
 10412  00E3  0020               	movlb	0	; select bank0
 10413  00E4  00AA               	movwf	??_Load_Main+1
 10414  00E5  0AA9               	incf	??_Load_Main,f
 10415  00E6  1903               	skipnz
 10416  00E7  0AAA               	incf	??_Load_Main+1,f
 10417  00E8  3F40               	moviw [0]fsr1
 10418  00E9  0729               	addwf	??_Load_Main,w
 10419  00EA  0022               	movlb	2	; select bank2
 10420  00EB  00C6               	movwf	(_Load^(0+256)+31)
 10421  00EC  3F41               	moviw [1]fsr1
 10422  00ED  0020               	movlb	0	; select bank0
 10423  00EE  3D2A               	addwfc	??_Load_Main+1,w
 10424  00EF  0022               	movlb	2	; select bank2
 10425  00F0  00C7               	movwf	(_Load^(0+256)+32)
 10426                           
 10427                           ;OverLoad_B1.c: 75: Load.ADH = 0;
 10428  00F1  01AC               	clrf	(_Load^(0+256)+5)
 10429  00F2  01AD               	clrf	((_Load+1)^(0+256)+5)
 10430                           
 10431                           ;OverLoad_B1.c: 76: Load.ADL = 0;
 10432  00F3  01AE               	clrf	(_Load^(0+256)+7)
 10433  00F4  01AF               	clrf	((_Load+1)^(0+256)+7)
 10434                           
 10435                           ;OverLoad_B1.c: 77: if (Load.Count < 2) {
 10436  00F5  3002               	movlw	2
 10437  00F6  0250               	subwf	(_Load^(0+256)+41),w
 10438  00F7  1803               	skipnc
 10439  00F8  291A               	goto	l10510
 10440                           
 10441                           ;OverLoad_B1.c: 78: Load.Count++;
 10442  00F9  3001               	movlw	1
 10443  00FA  0020               	movlb	0	; select bank0
 10444  00FB  00A9               	movwf	??_Load_Main
 10445  00FC  0829               	movf	??_Load_Main,w
 10446  00FD  0022               	movlb	2	; select bank2
 10447  00FE  07D0               	addwf	(_Load^(0+256)+41),f
 10448                           
 10449                           ;OverLoad_B1.c: 79: if (Load.Count == 1) {
 10450  00FF  0850               	movf	(_Load^(0+256)+41),w
 10451  0100  3A01               	xorlw	1
 10452  0101  1D03               	skipz
 10453  0102  2907               	goto	l10502
 10454                           
 10455                           ;OverLoad_B1.c: 80: Load.JudgeValue = 500;
 10456  0103  30F4               	movlw	244
 10457  0104  00CC               	movwf	(_Load^(0+256)+37)
 10458  0105  3001               	movlw	1
 10459  0106  2912               	goto	L7
 10460  0107                     l10502:	
 10461                           ;OverLoad_B1.c: 81: } else if (Load.Count == 2) {
 10462                           
 10463  0107  0850               	movf	(_Load^(0+256)+41),w
 10464  0108  3A02               	xorlw	2
 10465  0109  1D03               	skipz
 10466  010A  291A               	goto	l10510
 10467                           
 10468                           ;OverLoad_B1.c: 82: if (Load.LightsCount == 1) {
 10469  010B  0852               	movf	(_Load^(0+256)+43),w
 10470  010C  3A01               	xorlw	1
 10471  010D  1D03               	skipz
 10472  010E  2914               	goto	l10508
 10473                           
 10474                           ;OverLoad_B1.c: 83: Load.JudgeValue = 0x32;
 10475  010F  3032               	movlw	50
 10476  0110  00CC               	movwf	(_Load^(0+256)+37)
 10477  0111  3000               	movlw	0
 10478  0112                     L7:	
 10479  0112  00CD               	movwf	(_Load^(0+256)+38)
 10480                           
 10481                           ;OverLoad_B1.c: 84: } else {
 10482  0113  291A               	goto	l10510
 10483  0114                     l10508:	
 10484                           
 10485                           ;OverLoad_B1.c: 85: Load.JudgeValue = (0x32 + Load.TotalLoad) - 0x08;
 10486  0114  0830               	movf	(_Load^(0+256)+9),w
 10487  0115  3E2A               	addlw	42
 10488  0116  00CC               	movwf	(_Load^(0+256)+37)
 10489  0117  3000               	movlw	0
 10490  0118  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 10491  0119  00CD               	movwf	((_Load+1)^(0+256)+37)
 10492  011A                     l10510:	
 10493                           
 10494                           ;OverLoad_B1.c: 86: }
 10495                           ;OverLoad_B1.c: 87: }
 10496                           ;OverLoad_B1.c: 88: }
 10497                           ;OverLoad_B1.c: 90: if (Load.AD >= Load.JudgeValue) {
 10498  011A  084D               	movf	((_Load+1)^(0+256)+37),w
 10499  011B  0247               	subwf	((_Load+1)^(0+256)+31),w
 10500  011C  1D03               	skipz
 10501  011D  2920               	goto	u11965
 10502  011E  084C               	movf	(_Load^(0+256)+37),w
 10503  011F  0246               	subwf	(_Load^(0+256)+31),w
 10504  0120                     u11965:	
 10505  0120  1C03               	skipc
 10506  0121  2965               	goto	l10528
 10507                           
 10508                           ;OverLoad_B1.c: 91: Load.ErrorCount++;
 10509  0122  3001               	movlw	1
 10510  0123  0020               	movlb	0	; select bank0
 10511  0124  00A9               	movwf	??_Load_Main
 10512  0125  0829               	movf	??_Load_Main,w
 10513  0126  0022               	movlb	2	; select bank2
 10514  0127  07D1               	addwf	(_Load^(0+256)+42),f
 10515                           
 10516                           ;OverLoad_B1.c: 92: if (Load.ErrorCount > 2) {
 10517  0128  3003               	movlw	3
 10518  0129  0251               	subwf	(_Load^(0+256)+42),w
 10519  012A  1C03               	skipc
 10520  012B  0008               	return
 10521                           
 10522                           ;OverLoad_B1.c: 93: Load.ErrorCount = 0;
 10523  012C  01D1               	clrf	(_Load^(0+256)+42)
 10524                           
 10525                           ;OverLoad_B1.c: 95: Load.ERROR = 1;
 10526  012D  16A7               	bsf	_Load^(0+256),5
 10527                           
 10528                           ;OverLoad_B1.c: 102: product->Data[4]=(Load.AD >> 8);
 10529  012E  0847               	movf	((_Load+1)^(0+256)+31),w
 10530  012F  0020               	movlb	0	; select bank0
 10531  0130  00A9               	movwf	??_Load_Main
 10532  0131  087B               	movf	_product,w
 10533  0132  3E04               	addlw	4
 10534  0133  0086               	movwf	6
 10535  0134  3002               	movlw	2	; select bank4/5
 10536  0135  0087               	movwf	7
 10537  0136  0829               	movf	??_Load_Main,w
 10538  0137  0081               	movwf	1
 10539                           
 10540                           ;OverLoad_B1.c: 103: product->Data[5]=Load.AD;
 10541  0138  0022               	movlb	2	; select bank2
 10542  0139  0846               	movf	(_Load^(0+256)+31),w
 10543  013A  0020               	movlb	0	; select bank0
 10544  013B  00A9               	movwf	??_Load_Main
 10545  013C  087B               	movf	_product,w
 10546  013D  3E05               	addlw	5
 10547  013E  0086               	movwf	6
 10548  013F  3002               	movlw	2	; select bank4/5
 10549  0140  0087               	movwf	7
 10550  0141  0829               	movf	??_Load_Main,w
 10551  0142  0081               	movwf	1
 10552                           
 10553                           ;OverLoad_B1.c: 104: product->Data[6]=(Load.JudgeValue >> 8);
 10554  0143  0022               	movlb	2	; select bank2
 10555  0144  084D               	movf	((_Load+1)^(0+256)+37),w
 10556  0145  0020               	movlb	0	; select bank0
 10557  0146  00A9               	movwf	??_Load_Main
 10558  0147  087B               	movf	_product,w
 10559  0148  3E06               	addlw	6
 10560  0149  0086               	movwf	6
 10561  014A  3002               	movlw	2	; select bank4/5
 10562  014B  0087               	movwf	7
 10563  014C  0829               	movf	??_Load_Main,w
 10564  014D  0081               	movwf	1
 10565                           
 10566                           ;OverLoad_B1.c: 105: product->Data[7]=Load.JudgeValue;
 10567  014E  0022               	movlb	2	; select bank2
 10568  014F  084C               	movf	(_Load^(0+256)+37),w
 10569  0150  0020               	movlb	0	; select bank0
 10570  0151  00A9               	movwf	??_Load_Main
 10571  0152  087B               	movf	_product,w
 10572  0153  3E07               	addlw	7
 10573  0154  0086               	movwf	6
 10574  0155  3002               	movlw	2	; select bank4/5
 10575  0156  0087               	movwf	7
 10576  0157  0829               	movf	??_Load_Main,w
 10577  0158  0081               	movwf	1
 10578                           
 10579                           ;OverLoad_B1.c: 106: product->Data[8]=Load.LightsCount;
 10580  0159  0022               	movlb	2	; select bank2
 10581  015A  0852               	movf	(_Load^(0+256)+43),w
 10582  015B  0020               	movlb	0	; select bank0
 10583  015C  00A9               	movwf	??_Load_Main
 10584  015D  087B               	movf	_product,w
 10585  015E  3E08               	addlw	8
 10586  015F  0086               	movwf	6
 10587  0160  3002               	movlw	2	; select bank4/5
 10588  0161  0087               	movwf	7
 10589  0162  0829               	movf	??_Load_Main,w
 10590  0163  0081               	movwf	1
 10591                           
 10592                           ;OverLoad_B1.c: 108: }
 10593                           ;OverLoad_B1.c: 109: } else {
 10594  0164  0008               	return
 10595  0165                     l10528:	
 10596                           
 10597                           ;OverLoad_B1.c: 110: Load.ErrorCount = 0;
 10598  0165  0022               	movlb	2	; select bank2
 10599  0166  01D1               	clrf	(_Load^(0+256)+42)
 10600                           
 10601                           ;OverLoad_B1.c: 111: if (Load.OK == 0) {
 10602  0167  1BA7               	btfsc	_Load^(0+256),7
 10603  0168  0008               	return
 10604                           
 10605                           ;OverLoad_B1.c: 112: Load.SafeCount++;
 10606  0169  3001               	movlw	1
 10607  016A  0020               	movlb	0	; select bank0
 10608  016B  00A9               	movwf	??_Load_Main
 10609  016C  0829               	movf	??_Load_Main,w
 10610  016D  0022               	movlb	2	; select bank2
 10611  016E  07D3               	addwf	(_Load^(0+256)+44),f
 10612                           
 10613                           ;OverLoad_B1.c: 113: if (Load.SafeCount >= 10) {
 10614  016F  300A               	movlw	10
 10615  0170  0253               	subwf	(_Load^(0+256)+44),w
 10616  0171  1C03               	skipc
 10617  0172  0008               	return
 10618                           
 10619                           ;OverLoad_B1.c: 114: Load.SafeCount = 0;
 10620  0173  01D3               	clrf	(_Load^(0+256)+44)
 10621                           
 10622                           ;OverLoad_B1.c: 115: Load.OK = 1;
 10623  0174  17A7               	bsf	_Load^(0+256),7
 10624                           
 10625                           ;OverLoad_B1.c: 116: Load.TotalLoad = Load.AD;
 10626  0175  0847               	movf	((_Load+1)^(0+256)+31),w
 10627  0176  01B1               	clrf	((_Load+1)^(0+256)+9)
 10628  0177  07B1               	addwf	((_Load+1)^(0+256)+9),f
 10629  0178  0846               	movf	(_Load^(0+256)+31),w
 10630  0179  01B0               	clrf	(_Load^(0+256)+9)
 10631  017A  07B0               	addwf	(_Load^(0+256)+9),f
 10632                           
 10633                           ;OverLoad_B1.c: 117: if (Load.LightsCount == 1) {
 10634  017B  0852               	movf	(_Load^(0+256)+43),w
 10635  017C  3A01               	xorlw	1
 10636  017D  1D03               	skipz
 10637  017E  2984               	goto	l10546
 10638                           
 10639                           ;OverLoad_B1.c: 118: Load.JudgeValue = 0x32;
 10640  017F  3032               	movlw	50
 10641  0180  00CC               	movwf	(_Load^(0+256)+37)
 10642  0181  3000               	movlw	0
 10643  0182  00CD               	movwf	(_Load^(0+256)+38)
 10644                           
 10645                           ;OverLoad_B1.c: 119: } else {
 10646  0183  298A               	goto	l10548
 10647  0184                     l10546:	
 10648                           
 10649                           ;OverLoad_B1.c: 120: Load.JudgeValue = (0x32 + Load.TotalLoad) - 0x08;
 10650  0184  0830               	movf	(_Load^(0+256)+9),w
 10651  0185  3E2A               	addlw	42
 10652  0186  00CC               	movwf	(_Load^(0+256)+37)
 10653  0187  3000               	movlw	0
 10654  0188  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 10655  0189  00CD               	movwf	((_Load+1)^(0+256)+37)
 10656  018A                     l10548:	
 10657                           
 10658                           ;OverLoad_B1.c: 121: }
 10659                           ;OverLoad_B1.c: 123: product->Data[4]=(Load.AD >> 8);
 10660  018A  0847               	movf	((_Load+1)^(0+256)+31),w
 10661  018B  0020               	movlb	0	; select bank0
 10662  018C  00A9               	movwf	??_Load_Main
 10663  018D  087B               	movf	_product,w
 10664  018E  3E04               	addlw	4
 10665  018F  0086               	movwf	6
 10666  0190  3002               	movlw	2	; select bank4/5
 10667  0191  0087               	movwf	7
 10668  0192  0829               	movf	??_Load_Main,w
 10669  0193  0081               	movwf	1
 10670                           
 10671                           ;OverLoad_B1.c: 124: product->Data[5]=Load.AD;
 10672  0194  0022               	movlb	2	; select bank2
 10673  0195  0846               	movf	(_Load^(0+256)+31),w
 10674  0196  0020               	movlb	0	; select bank0
 10675  0197  00A9               	movwf	??_Load_Main
 10676  0198  087B               	movf	_product,w
 10677  0199  3E05               	addlw	5
 10678  019A  0086               	movwf	6
 10679  019B  3002               	movlw	2	; select bank4/5
 10680  019C  0087               	movwf	7
 10681  019D  0829               	movf	??_Load_Main,w
 10682  019E  0081               	movwf	1
 10683                           
 10684                           ;OverLoad_B1.c: 125: product->Data[6]=(Load.JudgeValue >> 8);
 10685  019F  0022               	movlb	2	; select bank2
 10686  01A0  084D               	movf	((_Load+1)^(0+256)+37),w
 10687  01A1  0020               	movlb	0	; select bank0
 10688  01A2  00A9               	movwf	??_Load_Main
 10689  01A3  087B               	movf	_product,w
 10690  01A4  3E06               	addlw	6
 10691  01A5  0086               	movwf	6
 10692  01A6  3002               	movlw	2	; select bank4/5
 10693  01A7  0087               	movwf	7
 10694  01A8  0829               	movf	??_Load_Main,w
 10695  01A9  0081               	movwf	1
 10696                           
 10697                           ;OverLoad_B1.c: 126: product->Data[7]=Load.JudgeValue;
 10698  01AA  0022               	movlb	2	; select bank2
 10699  01AB  084C               	movf	(_Load^(0+256)+37),w
 10700  01AC  0020               	movlb	0	; select bank0
 10701  01AD  00A9               	movwf	??_Load_Main
 10702  01AE  087B               	movf	_product,w
 10703  01AF  3E07               	addlw	7
 10704  01B0  0086               	movwf	6
 10705  01B1  3002               	movlw	2	; select bank4/5
 10706  01B2  0087               	movwf	7
 10707  01B3  0829               	movf	??_Load_Main,w
 10708  01B4  0081               	movwf	1
 10709                           
 10710                           ;OverLoad_B1.c: 127: product->Data[8]=Load.LightsCount;
 10711  01B5  0022               	movlb	2	; select bank2
 10712  01B6  0852               	movf	(_Load^(0+256)+43),w
 10713  01B7  0020               	movlb	0	; select bank0
 10714  01B8  00A9               	movwf	??_Load_Main
 10715  01B9  087B               	movf	_product,w
 10716  01BA  3E08               	addlw	8
 10717  01BB  0086               	movwf	6
 10718  01BC  3002               	movlw	2	; select bank4/5
 10719  01BD  0087               	movwf	7
 10720  01BE  0829               	movf	??_Load_Main,w
 10721  01BF  0081               	movwf	1
 10722                           
 10723                           ;OverLoad_B1.c: 129: }
 10724                           ;OverLoad_B1.c: 130: }
 10725                           ;OverLoad_B1.c: 131: }
 10726                           ;OverLoad_B1.c: 132: }
 10727                           ;OverLoad_B1.c: 133: }
 10728                           ;OverLoad_B1.c: 134: } else {
 10729  01C0  0008               	return
 10730  01C1                     l1726:	
 10731                           
 10732                           ;OverLoad_B1.c: 135: Load.ADtoGO = 1;
 10733  01C1  1627               	bsf	_Load^(0+256),4
 10734                           
 10735                           ;OverLoad_B1.c: 136: }
 10736                           ;OverLoad_B1.c: 137: } else {
 10737  01C2  0008               	return
 10738  01C3                     l1725:	
 10739                           
 10740                           ;OverLoad_B1.c: 138: Load.OK = 1;
 10741  01C3  17A7               	bsf	_Load^(0+256),7
 10742                           
 10743                           ;OverLoad_B1.c: 139: if (Load.LightsON == 1) {
 10744  01C4  1D27               	btfss	_Load^(0+256),2
 10745  01C5  2A0B               	goto	l10586
 10746                           
 10747                           ;OverLoad_B1.c: 140: Load.LightsON = 0;
 10748  01C6  1127               	bcf	_Load^(0+256),2
 10749                           
 10750                           ;OverLoad_B1.c: 142: Load.Time = 0;
 10751  01C7  01A8               	clrf	(_Load^(0+256)+1)
 10752  01C8  01A9               	clrf	((_Load+1)^(0+256)+1)
 10753                           
 10754                           ;OverLoad_B1.c: 143: Load.ADtoGO = 0;
 10755  01C9  1227               	bcf	_Load^(0+256),4
 10756                           
 10757                           ;OverLoad_B1.c: 144: setLoad_AH_AL_Restore();
 10758  01CA  319D  258E  3180   	fcall	_setLoad_AH_AL_Restore
 10759                           
 10760                           ;OverLoad_B1.c: 145: Load.Count = 0;
 10761  01CD  0022               	movlb	2	; select bank2
 10762  01CE  01D0               	clrf	(_Load^(0+256)+41)
 10763                           
 10764                           ;OverLoad_B1.c: 146: Load.ErrorCount = 0;
 10765  01CF  01D1               	clrf	(_Load^(0+256)+42)
 10766                           
 10767                           ;OverLoad_B1.c: 147: Load.SafeCount = 0;
 10768  01D0  01D3               	clrf	(_Load^(0+256)+44)
 10769                           
 10770                           ;OverLoad_B1.c: 149: Load.ADH = 0;
 10771  01D1  01AC               	clrf	(_Load^(0+256)+5)
 10772  01D2  01AD               	clrf	((_Load+1)^(0+256)+5)
 10773                           
 10774                           ;OverLoad_B1.c: 150: Load.ADL = 0;
 10775  01D3  01AE               	clrf	(_Load^(0+256)+7)
 10776  01D4  01AF               	clrf	((_Load+1)^(0+256)+7)
 10777                           
 10778                           ;OverLoad_B1.c: 153: product->Data[4]=(Load.AD >> 8);
 10779  01D5  0847               	movf	((_Load+1)^(0+256)+31),w
 10780  01D6  0020               	movlb	0	; select bank0
 10781  01D7  00A9               	movwf	??_Load_Main
 10782  01D8  087B               	movf	_product,w
 10783  01D9  3E04               	addlw	4
 10784  01DA  0086               	movwf	6
 10785  01DB  3002               	movlw	2	; select bank4/5
 10786  01DC  0087               	movwf	7
 10787  01DD  0829               	movf	??_Load_Main,w
 10788  01DE  0081               	movwf	1
 10789                           
 10790                           ;OverLoad_B1.c: 154: product->Data[5]=Load.AD;
 10791  01DF  0022               	movlb	2	; select bank2
 10792  01E0  0846               	movf	(_Load^(0+256)+31),w
 10793  01E1  0020               	movlb	0	; select bank0
 10794  01E2  00A9               	movwf	??_Load_Main
 10795  01E3  087B               	movf	_product,w
 10796  01E4  3E05               	addlw	5
 10797  01E5  0086               	movwf	6
 10798  01E6  3002               	movlw	2	; select bank4/5
 10799  01E7  0087               	movwf	7
 10800  01E8  0829               	movf	??_Load_Main,w
 10801  01E9  0081               	movwf	1
 10802                           
 10803                           ;OverLoad_B1.c: 155: product->Data[6]=(Load.JudgeValue >> 8);
 10804  01EA  0022               	movlb	2	; select bank2
 10805  01EB  084D               	movf	((_Load+1)^(0+256)+37),w
 10806  01EC  0020               	movlb	0	; select bank0
 10807  01ED  00A9               	movwf	??_Load_Main
 10808  01EE  087B               	movf	_product,w
 10809  01EF  3E06               	addlw	6
 10810  01F0  0086               	movwf	6
 10811  01F1  3002               	movlw	2	; select bank4/5
 10812  01F2  0087               	movwf	7
 10813  01F3  0829               	movf	??_Load_Main,w
 10814  01F4  0081               	movwf	1
 10815                           
 10816                           ;OverLoad_B1.c: 156: product->Data[7]=Load.JudgeValue;
 10817  01F5  0022               	movlb	2	; select bank2
 10818  01F6  084C               	movf	(_Load^(0+256)+37),w
 10819  01F7  0020               	movlb	0	; select bank0
 10820  01F8  00A9               	movwf	??_Load_Main
 10821  01F9  087B               	movf	_product,w
 10822  01FA  3E07               	addlw	7
 10823  01FB  0086               	movwf	6
 10824  01FC  3002               	movlw	2	; select bank4/5
 10825  01FD  0087               	movwf	7
 10826  01FE  0829               	movf	??_Load_Main,w
 10827  01FF  0081               	movwf	1
 10828                           
 10829                           ;OverLoad_B1.c: 157: product->Data[8]=Load.LightsCount;
 10830  0200  0022               	movlb	2	; select bank2
 10831  0201  0852               	movf	(_Load^(0+256)+43),w
 10832  0202  0020               	movlb	0	; select bank0
 10833  0203  00A9               	movwf	??_Load_Main
 10834  0204  087B               	movf	_product,w
 10835  0205  3E08               	addlw	8
 10836  0206  0086               	movwf	6
 10837  0207  3002               	movlw	2	; select bank4/5
 10838  0208  0087               	movwf	7
 10839  0209  0829               	movf	??_Load_Main,w
 10840  020A  0081               	movwf	1
 10841  020B                     l10586:	
 10842                           
 10843                           ;OverLoad_B1.c: 159: }
 10844                           ;OverLoad_B1.c: 160: if (Load.ERROR == 1) {
 10845  020B  0022               	movlb	2	; select bank2
 10846  020C  1EA7               	btfss	_Load^(0+256),5
 10847  020D  0008               	return
 10848                           
 10849                           ;OverLoad_B1.c: 161: Load.ErrorTime++;
 10850  020E  3001               	movlw	1
 10851  020F  07AA               	addwf	(_Load^(0+256)+3),f
 10852  0210  3000               	movlw	0
 10853  0211  3DAB               	addwfc	((_Load+1)^(0+256)+3),f
 10854                           
 10855                           ;OverLoad_B1.c: 162: if (Load.ErrorTime >= 1000)
 10856  0212  3003               	movlw	3
 10857  0213  022B               	subwf	((_Load+1)^(0+256)+3),w
 10858  0214  30E8               	movlw	232
 10859  0215  1903               	skipnz
 10860  0216  022A               	subwf	(_Load^(0+256)+3),w
 10861  0217  1C03               	skipc
 10862  0218  0008               	return
 10863                           
 10864                           ;OverLoad_B1.c: 163: {
 10865                           ;OverLoad_B1.c: 164: Load.ErrorTime = 0;
 10866  0219  01AA               	clrf	(_Load^(0+256)+3)
 10867  021A  01AB               	clrf	((_Load+1)^(0+256)+3)
 10868                           
 10869                           ;OverLoad_B1.c: 171: Load.ERROR = 0;
 10870  021B  12A7               	bcf	_Load^(0+256),5
 10871                           
 10872                           ;OverLoad_B1.c: 172: }
 10873                           ;OverLoad_B1.c: 173: }
 10874                           ;OverLoad_B1.c: 174: }
 10875                           ;OverLoad_B1.c: 175: } else {
 10876  021C  0008               	return
 10877  021D                     l1720:	
 10878                           
 10879                           ;OverLoad_B1.c: 176: if (myMain.PowerON == 1) {
 10880  021D  0021               	movlb	1	; select bank1
 10881  021E  1C20               	btfss	_myMain^(0+128),0
 10882  021F  0008               	return
 10883                           
 10884                           ;OverLoad_B1.c: 177: Load.Enable = 1;
 10885  0220  0022               	movlb	2	; select bank2
 10886  0221  1427               	bsf	_Load^(0+256),0
 10887  0222  0008               	return
 10888  0223                     __end_of_Load_Main:	
 10889                           
 10890                           	psect	text53
 10891  1B78                     __ptext53:	
 10892 ;; *************** function _getMain_LoadOK *****************
 10893 ;; Defined at:
 10894 ;;		line 431 in file "../src/Main_B1.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;		None
 10897 ;; Auto vars:     Size  Location     Type
 10898 ;;  ok              1    3[BANK0 ] unsigned char 
 10899 ;; Return value:  Size  Location     Type
 10900 ;;                  1    wreg      unsigned char 
 10901 ;; Registers used:
 10902 ;;		wreg, status,2, pclath, cstack
 10903 ;; Tracked objects:
 10904 ;;		On entry : 0/0
 10905 ;;		On exit  : 0/0
 10906 ;;		Unchanged: 0/0
 10907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;Total ram usage:        2 bytes
 10913 ;; Hardware stack levels used:    1
 10914 ;; Hardware stack levels required when called:    6
 10915 ;; This function calls:
 10916 ;;		_getDimmer_LoadOK
 10917 ;; This function is called by:
 10918 ;;		_Load_Main
 10919 ;; This function uses a non-reentrant model
 10920 ;;
 10921                           
 10922                           
 10923                           ;psect for function _getMain_LoadOK
 10924  1B78                     _getMain_LoadOK:	
 10925                           
 10926                           ;Main_B1.c: 432: char ok = 0;
 10927                           
 10928                           ;incstack = 0
 10929                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10930  1B78  0020               	movlb	0	; select bank0
 10931  1B79  01A3               	clrf	getMain_LoadOK@ok
 10932                           
 10933                           ;Main_B1.c: 438: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10934  1B7A  319B  233B         	fcall	_getDimmer_LoadOK
 10935  1B7C  3A01               	xorlw	1
 10936  1B7D  3000               	movlw	0
 10937  1B7E  1903               	skipnz
 10938  1B7F  3001               	movlw	1
 10939  1B80  0020               	movlb	0	; select bank0
 10940  1B81  00A2               	movwf	??_getMain_LoadOK
 10941  1B82  0822               	movf	??_getMain_LoadOK,w
 10942  1B83  00A3               	movwf	getMain_LoadOK@ok
 10943                           
 10944                           ;Main_B1.c: 440: return ok;
 10945  1B84  0823               	movf	getMain_LoadOK@ok,w
 10946  1B85  0008               	return
 10947  1B86                     __end_of_getMain_LoadOK:	
 10948                           
 10949                           	psect	text54
 10950  1B3B                     __ptext54:	
 10951 ;; *************** function _getDimmer_LoadOK *****************
 10952 ;; Defined at:
 10953 ;;		line 660 in file "../src/Dimmer_B1.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;		None
 10956 ;; Auto vars:     Size  Location     Type
 10957 ;;  status          1    1[BANK0 ] unsigned char 
 10958 ;; Return value:  Size  Location     Type
 10959 ;;                  1    wreg      unsigned char 
 10960 ;; Registers used:
 10961 ;;		wreg
 10962 ;; Tracked objects:
 10963 ;;		On entry : 0/0
 10964 ;;		On exit  : 0/0
 10965 ;;		Unchanged: 0/0
 10966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10970 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;Total ram usage:        2 bytes
 10972 ;; Hardware stack levels used:    1
 10973 ;; Hardware stack levels required when called:    5
 10974 ;; This function calls:
 10975 ;;		Nothing
 10976 ;; This function is called by:
 10977 ;;		_getMain_LoadOK
 10978 ;; This function uses a non-reentrant model
 10979 ;;
 10980                           
 10981                           
 10982                           ;psect for function _getDimmer_LoadOK
 10983  1B3B                     _getDimmer_LoadOK:	
 10984                           
 10985                           ;Dimmer_B1.c: 661: char status = Dimmer.Load == 1 ? 1 : 0;
 10986                           
 10987                           ;incstack = 0
 10988                           ; Regs used in _getDimmer_LoadOK: [wreg]
 10989  1B3B  0021               	movlb	1	; select bank1
 10990  1B3C  0849               	movf	(_Dimmer^(0+128)+1),w
 10991  1B3D  3A01               	xorlw	1
 10992  1B3E  3000               	movlw	0
 10993  1B3F  1903               	skipnz
 10994  1B40  3001               	movlw	1
 10995  1B41  0020               	movlb	0	; select bank0
 10996  1B42  00A0               	movwf	??_getDimmer_LoadOK
 10997  1B43  0820               	movf	??_getDimmer_LoadOK,w
 10998  1B44  00A1               	movwf	getDimmer_LoadOK@status
 10999                           
 11000                           ;Dimmer_B1.c: 662: return status;
 11001  1B45  0821               	movf	getDimmer_LoadOK@status,w
 11002  1B46  0008               	return
 11003  1B47                     __end_of_getDimmer_LoadOK:	
 11004                           
 11005                           	psect	text55
 11006  1CE4                     __ptext55:	
 11007 ;; *************** function _getMain_Lights_Count *****************
 11008 ;; Defined at:
 11009 ;;		line 401 in file "../src/Main_B1.c"
 11010 ;; Parameters:    Size  Location     Type
 11011 ;;		None
 11012 ;; Auto vars:     Size  Location     Type
 11013 ;;  status2         1    3[BANK0 ] unsigned char 
 11014 ;;  status1         1    2[BANK0 ] unsigned char 
 11015 ;;  status3         1    1[BANK0 ] unsigned char 
 11016 ;;  count           1    0[BANK0 ] unsigned char 
 11017 ;; Return value:  Size  Location     Type
 11018 ;;                  1    wreg      unsigned char 
 11019 ;; Registers used:
 11020 ;;		wreg, status,2, status,0
 11021 ;; Tracked objects:
 11022 ;;		On entry : 0/0
 11023 ;;		On exit  : 0/0
 11024 ;;		Unchanged: 0/0
 11025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11027 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11029 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11030 ;;Total ram usage:        4 bytes
 11031 ;; Hardware stack levels used:    1
 11032 ;; Hardware stack levels required when called:    5
 11033 ;; This function calls:
 11034 ;;		Nothing
 11035 ;; This function is called by:
 11036 ;;		_Load_Main
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040                           
 11041                           ;psect for function _getMain_Lights_Count
 11042  1CE4                     _getMain_Lights_Count:	
 11043                           
 11044                           ;Main_B1.c: 402: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 11045                           
 11046                           ;incstack = 0
 11047                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11048  1CE4  0020               	movlb	0	; select bank0
 11049  1CE5  01A2               	clrf	getMain_Lights_Count@status1
 11050  1CE6  01A3               	clrf	getMain_Lights_Count@status2
 11051  1CE7  01A1               	clrf	getMain_Lights_Count@status3
 11052  1CE8  01A0               	clrf	getMain_Lights_Count@count
 11053                           
 11054                           ;Main_B1.c: 406: status1 = DimmerLights1.Status == 1 ? 1 : 0;
 11055  1CE9  3000               	movlw	0
 11056  1CEA  0023               	movlb	3	; select bank3
 11057  1CEB  1ABE               	btfsc	_DimmerLights1^(0+384),5
 11058  1CEC  3001               	movlw	1
 11059  1CED  0020               	movlb	0	; select bank0
 11060  1CEE  00A2               	movwf	getMain_Lights_Count@status1
 11061                           
 11062                           ;Main_B1.c: 409: status2 = DimmerLights2.Status == 1 ? 1 : 0;
 11063  1CEF  3000               	movlw	0
 11064  1CF0  0023               	movlb	3	; select bank3
 11065  1CF1  1ACD               	btfsc	_DimmerLights2^(0+384),5
 11066  1CF2  3001               	movlw	1
 11067  1CF3  0020               	movlb	0	; select bank0
 11068  1CF4  00A3               	movwf	getMain_Lights_Count@status2
 11069                           
 11070                           ;Main_B1.c: 427: return count = (status1 + status2 + status3);
 11071  1CF5  0822               	movf	getMain_Lights_Count@status1,w
 11072  1CF6  0723               	addwf	getMain_Lights_Count@status2,w
 11073  1CF7  0721               	addwf	getMain_Lights_Count@status3,w
 11074  1CF8  00A0               	movwf	getMain_Lights_Count@count
 11075  1CF9  0008               	return
 11076  1CFA                     __end_of_getMain_Lights_Count:	
 11077                           
 11078                           	psect	text56
 11079  1A98                     __ptext56:	
 11080 ;; *************** function _Load_Initialization *****************
 11081 ;; Defined at:
 11082 ;;		line 9 in file "../src/OverLoad_B1.c"
 11083 ;; Parameters:    Size  Location     Type
 11084 ;;		None
 11085 ;; Auto vars:     Size  Location     Type
 11086 ;;		None
 11087 ;; Return value:  Size  Location     Type
 11088 ;;		None               void
 11089 ;; Registers used:
 11090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11091 ;; Tracked objects:
 11092 ;;		On entry : 0/0
 11093 ;;		On exit  : 0/0
 11094 ;;		Unchanged: 0/0
 11095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11100 ;;Total ram usage:        0 bytes
 11101 ;; Hardware stack levels used:    1
 11102 ;; Hardware stack levels required when called:    6
 11103 ;; This function calls:
 11104 ;;		_setLoad_AH_AL_Restore
 11105 ;; This function is called by:
 11106 ;;		_main
 11107 ;; This function uses a non-reentrant model
 11108 ;;
 11109                           
 11110                           
 11111                           ;psect for function _Load_Initialization
 11112  1A98                     _Load_Initialization:	
 11113                           
 11114                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11115                           
 11116                           ;incstack = 0
 11117                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11118  1A98  0022               	movlb	2	; select bank2
 11119  1A99  17A7               	bsf	_Load^(0+256),7
 11120                           
 11121                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11122  1A9A  319D  258E         	fcall	_setLoad_AH_AL_Restore
 11123  1A9C  0008               	return
 11124  1A9D                     __end_of_Load_Initialization:	
 11125                           
 11126                           	psect	text57
 11127  1D8E                     __ptext57:	
 11128 ;; *************** function _setLoad_AH_AL_Restore *****************
 11129 ;; Defined at:
 11130 ;;		line 283 in file "../src/OverLoad_B1.c"
 11131 ;; Parameters:    Size  Location     Type
 11132 ;;		None
 11133 ;; Auto vars:     Size  Location     Type
 11134 ;;  i               1    1[BANK0 ] unsigned char 
 11135 ;; Return value:  Size  Location     Type
 11136 ;;		None               void
 11137 ;; Registers used:
 11138 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11139 ;; Tracked objects:
 11140 ;;		On entry : 0/0
 11141 ;;		On exit  : 0/0
 11142 ;;		Unchanged: 0/0
 11143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;Total ram usage:        2 bytes
 11149 ;; Hardware stack levels used:    1
 11150 ;; Hardware stack levels required when called:    5
 11151 ;; This function calls:
 11152 ;;		Nothing
 11153 ;; This function is called by:
 11154 ;;		_Load_Initialization
 11155 ;;		_Load_Main
 11156 ;; This function uses a non-reentrant model
 11157 ;;
 11158                           
 11159                           
 11160                           ;psect for function _setLoad_AH_AL_Restore
 11161  1D8E                     _setLoad_AH_AL_Restore:	
 11162                           
 11163                           ;OverLoad_B1.c: 284: char i;
 11164                           ;OverLoad_B1.c: 285: for (i = 0; i < 5; i++) {
 11165                           
 11166                           ;incstack = 0
 11167                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11168  1D8E  0020               	movlb	0	; select bank0
 11169  1D8F  01A1               	clrf	setLoad_AH_AL_Restore@i
 11170  1D90                     L8:	
 11171  1D90  3005               	movlw	5
 11172  1D91  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11173  1D92  1803               	btfsc	3,0
 11174  1D93  0008               	return
 11175                           
 11176                           ;OverLoad_B1.c: 286: Load.AH[i] = 0;
 11177  1D94  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11178  1D95  3E32               	addlw	(_Load+11)& (0+255)
 11179  1D96  0086               	movwf	6
 11180  1D97  3001               	movlw	1	; select bank2/3
 11181  1D98  0087               	movwf	7
 11182  1D99  3000               	movlw	0
 11183  1D9A  3FC0               	movwi [0]fsr1
 11184  1D9B  3FC1               	movwi [1]fsr1
 11185                           
 11186                           ;OverLoad_B1.c: 287: Load.AL[i] = 0xffff;
 11187  1D9C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11188  1D9D  3E3C               	addlw	(_Load+21)& (0+255)
 11189  1D9E  0086               	movwf	6
 11190  1D9F  3001               	movlw	1	; select bank2/3
 11191  1DA0  0087               	movwf	7
 11192  1DA1  30FF               	movlw	255
 11193  1DA2  3FC0               	movwi [0]fsr1
 11194  1DA3  30FF               	movlw	255
 11195  1DA4  3FC1               	movwi [1]fsr1
 11196  1DA5  3001               	movlw	1
 11197  1DA6  00A0               	movwf	??_setLoad_AH_AL_Restore
 11198  1DA7  0820               	movf	??_setLoad_AH_AL_Restore,w
 11199  1DA8  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11200  1DA9  2D90               	goto	L8
 11201  1DAA                     __end_of_setLoad_AH_AL_Restore:	
 11202                           
 11203                           	psect	text58
 11204  1B2F                     __ptext58:	
 11205 ;; *************** function _LED_Main *****************
 11206 ;; Defined at:
 11207 ;;		line 47 in file "../src/LED_B1.c"
 11208 ;; Parameters:    Size  Location     Type
 11209 ;;		None
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;		None
 11212 ;; Return value:  Size  Location     Type
 11213 ;;		None               void
 11214 ;; Registers used:
 11215 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11216 ;; Tracked objects:
 11217 ;;		On entry : 0/0
 11218 ;;		On exit  : 0/0
 11219 ;;		Unchanged: 0/0
 11220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;Total ram usage:        0 bytes
 11226 ;; Hardware stack levels used:    1
 11227 ;; Hardware stack levels required when called:    7
 11228 ;; This function calls:
 11229 ;;		_setLED_Main
 11230 ;; This function is called by:
 11231 ;;		_main
 11232 ;; This function uses a non-reentrant model
 11233 ;;
 11234                           
 11235                           
 11236                           ;psect for function _LED_Main
 11237  1B2F                     _LED_Main:	
 11238                           
 11239                           ;LED_B1.c: 49: setLED_Main(1);
 11240                           
 11241                           ;incstack = 0
 11242                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11243  1B2F  3001               	movlw	1
 11244  1B30  3193  230D  319B   	fcall	_setLED_Main
 11245                           
 11246                           ;LED_B1.c: 52: setLED_Main(2);
 11247  1B33  3002               	movlw	2
 11248  1B34  3193  230D  319B   	fcall	_setLED_Main
 11249                           
 11250                           ;LED_B1.c: 58: setLED_Main(99);
 11251  1B37  3063               	movlw	99
 11252  1B38  3193  230D         	fcall	_setLED_Main
 11253  1B3A  0008               	return
 11254  1B3B                     __end_of_LED_Main:	
 11255                           
 11256                           	psect	text59
 11257  130D                     __ptext59:	
 11258 ;; *************** function _setLED_Main *****************
 11259 ;; Defined at:
 11260 ;;		line 215 in file "../src/LED_B1.c"
 11261 ;; Parameters:    Size  Location     Type
 11262 ;;  led             1    wreg     unsigned char 
 11263 ;; Auto vars:     Size  Location     Type
 11264 ;;  led             1    4[BANK0 ] unsigned char 
 11265 ;; Return value:  Size  Location     Type
 11266 ;;		None               void
 11267 ;; Registers used:
 11268 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11269 ;; Tracked objects:
 11270 ;;		On entry : 0/0
 11271 ;;		On exit  : 0/0
 11272 ;;		Unchanged: 0/0
 11273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11275 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11276 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11277 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11278 ;;Total ram usage:        3 bytes
 11279 ;; Hardware stack levels used:    1
 11280 ;; Hardware stack levels required when called:    6
 11281 ;; This function calls:
 11282 ;;		_LedPointSelect
 11283 ;; This function is called by:
 11284 ;;		_LED_Main
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           
 11289                           ;psect for function _setLED_Main
 11290  130D                     _setLED_Main:	
 11291                           
 11292                           ;incstack = 0
 11293                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11294                           ;setLED_Main@led stored from wreg
 11295  130D  0020               	movlb	0	; select bank0
 11296  130E  00A4               	movwf	setLED_Main@led
 11297                           
 11298                           ;LED_B1.c: 216: LedPointSelect(led);
 11299  130F  0824               	movf	setLED_Main@led,w
 11300  1310  319E  2685  3193   	fcall	_LedPointSelect
 11301                           
 11302                           ;LED_B1.c: 217: if (LED->GO == 1) {
 11303  1313  0021               	movlb	1	; select bank1
 11304  1314  084F               	movf	_LED^(0+128),w
 11305  1315  0086               	movwf	6
 11306  1316  3001               	movlw	1	; select bank2/3
 11307  1317  0087               	movwf	7
 11308  1318  1C81               	btfss	1,1
 11309  1319  0008               	return
 11310                           
 11311                           ;LED_B1.c: 218: LED->Time++;
 11312  131A  0A4F               	incf	_LED^(0+128),w
 11313  131B  0086               	movwf	6
 11314  131C  3001               	movlw	1	; select bank2/3
 11315  131D  0087               	movwf	7
 11316  131E  3001               	movlw	1
 11317  131F  0781               	addwf	1,f
 11318  1320  3141               	addfsr 1,1
 11319  1321  1803               	skipnc
 11320  1322  0A81               	incf	1,f
 11321                           
 11322                           ;LED_B1.c: 219: if (LED->Time >= 500 / 10) {
 11323  1323  0A4F               	incf	_LED^(0+128),w
 11324  1324  0086               	movwf	6
 11325  1325  3001               	movlw	1	; select bank2/3
 11326  1326  0087               	movwf	7
 11327  1327  3F40               	moviw [0]fsr1
 11328  1328  0020               	movlb	0	; select bank0
 11329  1329  00A2               	movwf	??_setLED_Main
 11330  132A  3F41               	moviw [1]fsr1
 11331  132B  00A3               	movwf	??_setLED_Main+1
 11332  132C  3000               	movlw	0
 11333  132D  0223               	subwf	??_setLED_Main+1,w
 11334  132E  3032               	movlw	50
 11335  132F  1903               	skipnz
 11336  1330  0222               	subwf	??_setLED_Main,w
 11337  1331  1C03               	skipc
 11338  1332  0008               	return
 11339                           
 11340                           ;LED_B1.c: 220: LED->Time = 0;
 11341  1333  0021               	movlb	1	; select bank1
 11342  1334  0A4F               	incf	_LED^(0+128),w
 11343  1335  0086               	movwf	6
 11344  1336  3001               	movlw	1	; select bank2/3
 11345  1337  0087               	movwf	7
 11346  1338  3000               	movlw	0
 11347  1339  3FC0               	movwi [0]fsr1
 11348  133A  3FC1               	movwi [1]fsr1
 11349                           
 11350                           ;LED_B1.c: 222: if (led == 1) {
 11351  133B  0020               	movlb	0	; select bank0
 11352  133C  0824               	movf	setLED_Main@led,w
 11353  133D  3A01               	xorlw	1
 11354  133E  1D03               	skipz
 11355  133F  2B43               	goto	l9746
 11356                           
 11357                           ;LED_B1.c: 223: RA3 = RA3 == 1 ? 0 : 1;
 11358  1340  3008               	movlw	8
 11359  1341  068C               	xorwf	12,f
 11360                           
 11361                           ;LED_B1.c: 224: }
 11362  1342  0008               	return
 11363  1343                     l9746:	
 11364                           
 11365                           ;LED_B1.c: 227: else if (led == 2) {
 11366  1343  0824               	movf	setLED_Main@led,w
 11367  1344  3A02               	xorlw	2
 11368  1345  1D03               	skipz
 11369  1346  2B4A               	goto	l9750
 11370                           
 11371                           ;LED_B1.c: 228: RC7 = RC7 == 1 ? 0 : 1;
 11372  1347  3080               	movlw	128
 11373  1348  068E               	xorwf	14,f
 11374                           
 11375                           ;LED_B1.c: 229: }
 11376  1349  0008               	return
 11377  134A                     l9750:	
 11378                           
 11379                           ;LED_B1.c: 237: else if (led == 99) {
 11380  134A  0824               	movf	setLED_Main@led,w
 11381  134B  3A63               	xorlw	99
 11382  134C  1D03               	skipz
 11383  134D  0008               	return
 11384                           
 11385                           ;LED_B1.c: 238: RB5 = RB5 == 1 ? 0 : 1;
 11386  134E  3020               	movlw	32
 11387  134F  068D               	xorwf	13,f
 11388  1350  0008               	return
 11389  1351                     __end_of_setLED_Main:	
 11390                           
 11391                           	psect	text60
 11392  1B23                     __ptext60:	
 11393 ;; *************** function _LED_Initialization *****************
 11394 ;; Defined at:
 11395 ;;		line 31 in file "../src/LED_B1.c"
 11396 ;; Parameters:    Size  Location     Type
 11397 ;;		None
 11398 ;; Auto vars:     Size  Location     Type
 11399 ;;		None
 11400 ;; Return value:  Size  Location     Type
 11401 ;;		None               void
 11402 ;; Registers used:
 11403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11404 ;; Tracked objects:
 11405 ;;		On entry : 0/0
 11406 ;;		On exit  : 0/0
 11407 ;;		Unchanged: 0/0
 11408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11413 ;;Total ram usage:        0 bytes
 11414 ;; Hardware stack levels used:    1
 11415 ;; Hardware stack levels required when called:    8
 11416 ;; This function calls:
 11417 ;;		_setLED_Initialization
 11418 ;; This function is called by:
 11419 ;;		_main
 11420 ;; This function uses a non-reentrant model
 11421 ;;
 11422                           
 11423                           
 11424                           ;psect for function _LED_Initialization
 11425  1B23                     _LED_Initialization:	
 11426                           
 11427                           ;LED_B1.c: 33: setLED_Initialization(1);
 11428                           
 11429                           ;incstack = 0
 11430                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11431  1B23  3001               	movlw	1
 11432  1B24  319B  23FA  319B   	fcall	_setLED_Initialization
 11433                           
 11434                           ;LED_B1.c: 36: setLED_Initialization(2);
 11435  1B27  3002               	movlw	2
 11436  1B28  319B  23FA  319B   	fcall	_setLED_Initialization
 11437                           
 11438                           ;LED_B1.c: 42: setLED_Initialization(99);
 11439  1B2B  3063               	movlw	99
 11440  1B2C  319B  23FA         	fcall	_setLED_Initialization
 11441  1B2E  0008               	return
 11442  1B2F                     __end_of_LED_Initialization:	
 11443                           
 11444                           	psect	text61
 11445  1BFA                     __ptext61:	
 11446 ;; *************** function _setLED_Initialization *****************
 11447 ;; Defined at:
 11448 ;;		line 66 in file "../src/LED_B1.c"
 11449 ;; Parameters:    Size  Location     Type
 11450 ;;  led             1    wreg     unsigned char 
 11451 ;; Auto vars:     Size  Location     Type
 11452 ;;  led             1    4[BANK0 ] unsigned char 
 11453 ;; Return value:  Size  Location     Type
 11454 ;;		None               void
 11455 ;; Registers used:
 11456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11457 ;; Tracked objects:
 11458 ;;		On entry : 0/0
 11459 ;;		On exit  : 0/0
 11460 ;;		Unchanged: 0/0
 11461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11465 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11466 ;;Total ram usage:        1 bytes
 11467 ;; Hardware stack levels used:    1
 11468 ;; Hardware stack levels required when called:    7
 11469 ;; This function calls:
 11470 ;;		_LedPointSelect
 11471 ;;		_setLED
 11472 ;; This function is called by:
 11473 ;;		_LED_Initialization
 11474 ;; This function uses a non-reentrant model
 11475 ;;
 11476                           
 11477                           
 11478                           ;psect for function _setLED_Initialization
 11479  1BFA                     _setLED_Initialization:	
 11480                           
 11481                           ;incstack = 0
 11482                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11483                           ;setLED_Initialization@led stored from wreg
 11484  1BFA  0020               	movlb	0	; select bank0
 11485  1BFB  00A4               	movwf	setLED_Initialization@led
 11486                           
 11487                           ;LED_B1.c: 67: LedPointSelect(led);
 11488  1BFC  0824               	movf	setLED_Initialization@led,w
 11489  1BFD  319E  2685  319B   	fcall	_LedPointSelect
 11490                           
 11491                           ;LED_B1.c: 68: LED->Enable = 1;
 11492  1C00  0021               	movlb	1	; select bank1
 11493  1C01  084F               	movf	_LED^(0+128),w
 11494  1C02  0086               	movwf	6
 11495  1C03  3001               	movlw	1	; select bank2/3
 11496  1C04  0087               	movwf	7
 11497  1C05  1401               	bsf	1,0
 11498                           
 11499                           ;LED_B1.c: 69: setLED(led, 0);
 11500  1C06  0020               	movlb	0	; select bank0
 11501  1C07  01A2               	clrf	setLED@command
 11502  1C08  0824               	movf	setLED_Initialization@led,w
 11503  1C09  3188  2082         	fcall	_setLED
 11504  1C0B  0008               	return
 11505  1C0C                     __end_of_setLED_Initialization:	
 11506                           
 11507                           	psect	text62
 11508  116D                     __ptext62:	
 11509 ;; *************** function _Flash_Memory_Main *****************
 11510 ;; Defined at:
 11511 ;;		line 901 in file "../src/MCU_B1.c"
 11512 ;; Parameters:    Size  Location     Type
 11513 ;;		None
 11514 ;; Auto vars:     Size  Location     Type
 11515 ;;		None
 11516 ;; Return value:  Size  Location     Type
 11517 ;;		None               void
 11518 ;; Registers used:
 11519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11520 ;; Tracked objects:
 11521 ;;		On entry : 0/0
 11522 ;;		On exit  : 0/0
 11523 ;;		Unchanged: 0/0
 11524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11528 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;Total ram usage:        1 bytes
 11530 ;; Hardware stack levels used:    1
 11531 ;; Hardware stack levels required when called:    8
 11532 ;; This function calls:
 11533 ;;		_Flash_Memory_Modify
 11534 ;;		_getMain_LightsStatus
 11535 ;; This function is called by:
 11536 ;;		_main
 11537 ;; This function uses a non-reentrant model
 11538 ;;
 11539                           
 11540                           
 11541                           ;psect for function _Flash_Memory_Main
 11542  116D                     _Flash_Memory_Main:	
 11543                           
 11544                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 11545                           
 11546                           ;incstack = 0
 11547                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11548  116D  0024               	movlb	4	; select bank4
 11549  116E  1C44               	btfss	(_Memory^(0+512)+36),0
 11550  116F  0008               	return
 11551                           
 11552                           ;MCU_B1.c: 903: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11553  1170  3190  20D3  3191   	fcall	_getMain_LightsStatus
 11554  1173  3A00               	xorlw	0
 11555  1174  3000               	movlw	0
 11556  1175  1903               	skipnz
 11557  1176  3001               	movlw	1
 11558  1177  0020               	movlb	0	; select bank0
 11559  1178  00A9               	movwf	??_Flash_Memory_Main
 11560  1179  0DA9               	rlf	??_Flash_Memory_Main,f
 11561  117A  0024               	movlb	4	; select bank4
 11562  117B  0844               	movf	(_Memory^(0+512)+36),w
 11563  117C  0020               	movlb	0	; select bank0
 11564  117D  0629               	xorwf	??_Flash_Memory_Main,w
 11565  117E  39FD               	andlw	-3
 11566  117F  0629               	xorwf	??_Flash_Memory_Main,w
 11567  1180  0024               	movlb	4	; select bank4
 11568  1181  00C4               	movwf	(_Memory^(0+512)+36)
 11569                           
 11570                           ;MCU_B1.c: 904: if (Memory.GO == 1) {
 11571  1182  1CC4               	btfss	(_Memory^(0+512)+36),1
 11572  1183  299D               	goto	l1338
 11573                           
 11574                           ;MCU_B1.c: 905: Memory.Runtime = 1;
 11575  1184  15C4               	bsf	(_Memory^(0+512)+36),3
 11576                           
 11577                           ;MCU_B1.c: 906: Memory.Time++;
 11578  1185  3001               	movlw	1
 11579  1186  07C2               	addwf	(_Memory^(0+512)+34),f
 11580  1187  3000               	movlw	0
 11581  1188  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11582                           
 11583                           ;MCU_B1.c: 907: if (Memory.Time == 25) {
 11584  1189  3022               	movlw	34
 11585  118A  3E20               	addlw	_Memory& (0+255)
 11586  118B  0086               	movwf	6
 11587  118C  3002               	movlw	2	; select bank4/5
 11588  118D  0087               	movwf	7
 11589  118E  3F40               	moviw [0]fsr1
 11590  118F  3A19               	xorlw	25
 11591  1190  1D03               	skipz
 11592  1191  2994               	goto	u11575
 11593  1192  3F41               	moviw [1]fsr1
 11594  1193  3A00               	xorlw	0
 11595  1194                     u11575:	
 11596  1194  1D03               	skipz
 11597  1195  0008               	return
 11598                           
 11599                           ;MCU_B1.c: 908: Memory.Time = 0;
 11600  1196  01C2               	clrf	(_Memory^(0+512)+34)
 11601  1197  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11602                           
 11603                           ;MCU_B1.c: 909: Memory.Modify = 0;
 11604  1198  1044               	bcf	(_Memory^(0+512)+36),0
 11605                           
 11606                           ;MCU_B1.c: 910: Memory.GO = 0;
 11607  1199  10C4               	bcf	(_Memory^(0+512)+36),1
 11608                           
 11609                           ;MCU_B1.c: 911: Flash_Memory_Modify();
 11610  119A  3193  23E1         	fcall	_Flash_Memory_Modify
 11611                           
 11612                           ;MCU_B1.c: 912: }
 11613                           ;MCU_B1.c: 913: } else {
 11614  119C  0008               	return
 11615  119D                     l1338:	
 11616                           
 11617                           ;MCU_B1.c: 914: if (Memory.Runtime == 1) {
 11618  119D  1DC4               	btfss	(_Memory^(0+512)+36),3
 11619  119E  0008               	return
 11620                           
 11621                           ;MCU_B1.c: 915: Memory.Runtime = 0;
 11622  119F  11C4               	bcf	(_Memory^(0+512)+36),3
 11623                           
 11624                           ;MCU_B1.c: 916: Memory.Time = 0;
 11625  11A0  01C2               	clrf	(_Memory^(0+512)+34)
 11626  11A1  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11627  11A2  0008               	return
 11628  11A3                     __end_of_Flash_Memory_Main:	
 11629                           
 11630                           	psect	text63
 11631  10D3                     __ptext63:	
 11632 ;; *************** function _getMain_LightsStatus *****************
 11633 ;; Defined at:
 11634 ;;		line 333 in file "../src/Main_B1.c"
 11635 ;; Parameters:    Size  Location     Type
 11636 ;;		None
 11637 ;; Auto vars:     Size  Location     Type
 11638 ;;  i               2    6[BANK0 ] int 
 11639 ;;  status          1    8[BANK0 ] unsigned char 
 11640 ;;  count           1    5[BANK0 ] unsigned char 
 11641 ;; Return value:  Size  Location     Type
 11642 ;;                  1    wreg      unsigned char 
 11643 ;; Registers used:
 11644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11653 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11654 ;;Total ram usage:        5 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; Hardware stack levels required when called:    7
 11657 ;; This function calls:
 11658 ;;		_getDimmerLights_Status
 11659 ;; This function is called by:
 11660 ;;		_Flash_Memory_Main
 11661 ;;		_setMain_Exception
 11662 ;;		_Load_Main
 11663 ;; This function uses a non-reentrant model
 11664 ;;
 11665                           
 11666                           
 11667                           ;psect for function _getMain_LightsStatus
 11668  10D3                     _getMain_LightsStatus:	
 11669                           
 11670                           ;Main_B1.c: 334: char status = 0;
 11671                           
 11672                           ;incstack = 0
 11673                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11674  10D3  0020               	movlb	0	; select bank0
 11675  10D4  01A8               	clrf	getMain_LightsStatus@status
 11676                           
 11677                           ;Main_B1.c: 337: char count = 1;
 11678  10D5  01A5               	clrf	getMain_LightsStatus@count
 11679  10D6  0AA5               	incf	getMain_LightsStatus@count,f
 11680                           
 11681                           ;Main_B1.c: 340: char count = 2;
 11682  10D7  3002               	movlw	2
 11683  10D8  00A4               	movwf	??_getMain_LightsStatus
 11684  10D9  0824               	movf	??_getMain_LightsStatus,w
 11685  10DA  00A5               	movwf	getMain_LightsStatus@count
 11686                           
 11687                           ;Main_B1.c: 343: char count = 3;
 11688  10DB  3003               	movlw	3
 11689  10DC  00A4               	movwf	??_getMain_LightsStatus
 11690  10DD  0824               	movf	??_getMain_LightsStatus,w
 11691  10DE  00A5               	movwf	getMain_LightsStatus@count
 11692                           
 11693                           ;Main_B1.c: 346: for (int i = 0; i < count; i++) {
 11694  10DF  01A6               	clrf	getMain_LightsStatus@i
 11695  10E0  01A7               	clrf	getMain_LightsStatus@i+1
 11696  10E1                     l9474:	
 11697  10E1  0827               	movf	getMain_LightsStatus@i+1,w
 11698  10E2  3A80               	xorlw	128
 11699  10E3  00A4               	movwf	??_getMain_LightsStatus
 11700  10E4  3080               	movlw	128
 11701  10E5  0224               	subwf	??_getMain_LightsStatus,w
 11702  10E6  1D03               	skipz
 11703  10E7  28EA               	goto	u10225
 11704  10E8  0825               	movf	getMain_LightsStatus@count,w
 11705  10E9  0226               	subwf	getMain_LightsStatus@i,w
 11706  10EA                     u10225:	
 11707  10EA  1803               	btfsc	3,0
 11708  10EB  2902               	goto	l9476
 11709                           
 11710                           ;Main_B1.c: 347: if (status == 0) {
 11711  10EC  0020               	movlb	0	; select bank0
 11712  10ED  08A8               	movf	getMain_LightsStatus@status,f
 11713  10EE  1D03               	skipz
 11714  10EF  28FD               	goto	l9472
 11715                           
 11716                           ;Main_B1.c: 352: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 11717  10F0  0826               	movf	getMain_LightsStatus@i,w
 11718  10F1  3E01               	addlw	1
 11719  10F2  319B  23A4  3190   	fcall	_getDimmerLights_Status
 11720  10F5  3A01               	xorlw	1
 11721  10F6  3000               	movlw	0
 11722  10F7  1903               	skipnz
 11723  10F8  3001               	movlw	1
 11724  10F9  0020               	movlb	0	; select bank0
 11725  10FA  00A4               	movwf	??_getMain_LightsStatus
 11726  10FB  0824               	movf	??_getMain_LightsStatus,w
 11727  10FC  00A8               	movwf	getMain_LightsStatus@status
 11728  10FD                     l9472:	
 11729  10FD  3001               	movlw	1
 11730  10FE  07A6               	addwf	getMain_LightsStatus@i,f
 11731  10FF  3000               	movlw	0
 11732  1100  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 11733  1101  28E1               	goto	l9474
 11734  1102                     l9476:	
 11735                           
 11736                           ;Main_B1.c: 354: }
 11737                           ;Main_B1.c: 355: }
 11738                           ;Main_B1.c: 356: return status;
 11739  1102  0020               	movlb	0	; select bank0
 11740  1103  0828               	movf	getMain_LightsStatus@status,w
 11741  1104  0008               	return
 11742  1105                     __end_of_getMain_LightsStatus:	
 11743                           
 11744                           	psect	text64
 11745  13E1                     __ptext64:	
 11746 ;; *************** function _Flash_Memory_Modify *****************
 11747 ;; Defined at:
 11748 ;;		line 974 in file "../src/MCU_B1.c"
 11749 ;; Parameters:    Size  Location     Type
 11750 ;;		None
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;  i               1    5[BANK0 ] unsigned char 
 11753 ;; Return value:  Size  Location     Type
 11754 ;;		None               void
 11755 ;; Registers used:
 11756 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11757 ;; Tracked objects:
 11758 ;;		On entry : 0/0
 11759 ;;		On exit  : 0/0
 11760 ;;		Unchanged: 0/0
 11761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11764 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;Total ram usage:        2 bytes
 11767 ;; Hardware stack levels used:    1
 11768 ;; Hardware stack levels required when called:    7
 11769 ;; This function calls:
 11770 ;;		_Flash_Memory_Erasing
 11771 ;;		_Flash_Memory_Read
 11772 ;;		_Flash_Memory_Write
 11773 ;;		_setMemory_Data
 11774 ;; This function is called by:
 11775 ;;		_Flash_Memory_Main
 11776 ;; This function uses a non-reentrant model
 11777 ;;
 11778                           
 11779                           
 11780                           ;psect for function _Flash_Memory_Modify
 11781  13E1                     _Flash_Memory_Modify:	
 11782                           
 11783                           ;MCU_B1.c: 975: char i = 0;
 11784                           
 11785                           ;incstack = 0
 11786                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11787  13E1  0020               	movlb	0	; select bank0
 11788  13E2  01A5               	clrf	Flash_Memory_Modify@i
 11789                           
 11790                           ;MCU_B1.c: 976: for (i = 0; i < 32; i++) {
 11791  13E3  01A5               	clrf	Flash_Memory_Modify@i
 11792  13E4  3020               	movlw	32
 11793  13E5  0225               	subwf	Flash_Memory_Modify@i,w
 11794  13E6  1803               	btfsc	3,0
 11795  13E7  2BFD               	goto	l9832
 11796  13E8                     l9826:	
 11797                           
 11798                           ;MCU_B1.c: 977: Memory.Data[i] = Flash_Memory_Read(i);
 11799  13E8  0825               	movf	Flash_Memory_Modify@i,w
 11800  13E9  319D  2574  3193   	fcall	_Flash_Memory_Read
 11801  13EC  0020               	movlb	0	; select bank0
 11802  13ED  00A4               	movwf	??_Flash_Memory_Modify
 11803  13EE  0825               	movf	Flash_Memory_Modify@i,w
 11804  13EF  3E20               	addlw	_Memory& (0+255)
 11805  13F0  0086               	movwf	6
 11806  13F1  3002               	movlw	2	; select bank4/5
 11807  13F2  0087               	movwf	7
 11808  13F3  0824               	movf	??_Flash_Memory_Modify,w
 11809  13F4  0081               	movwf	1
 11810  13F5  3001               	movlw	1
 11811  13F6  00A4               	movwf	??_Flash_Memory_Modify
 11812  13F7  0824               	movf	??_Flash_Memory_Modify,w
 11813  13F8  07A5               	addwf	Flash_Memory_Modify@i,f
 11814  13F9  3020               	movlw	32
 11815  13FA  0225               	subwf	Flash_Memory_Modify@i,w
 11816  13FB  1C03               	skipc
 11817  13FC  2BE8               	goto	l9826
 11818  13FD                     l9832:	
 11819                           
 11820                           ;MCU_B1.c: 978: }
 11821                           ;MCU_B1.c: 979: setMemory_Data(0, product->Data[12]);
 11822  13FD  087B               	movf	_product,w
 11823  13FE  0086               	movwf	6
 11824  13FF  3002               	movlw	2	; select bank4/5
 11825  1400  0087               	movwf	7
 11826  1401  3002               	movlw	2	; select bank4/5
 11827  1402  3F4C               	moviw [12]fsr1
 11828  1403  00A0               	movwf	setMemory_Data@data
 11829  1404  3000               	movlw	0
 11830  1405  319B  230B  3193   	fcall	_setMemory_Data
 11831                           
 11832                           ;MCU_B1.c: 980: setMemory_Data(1, product->Data[13]);
 11833  1408  087B               	movf	_product,w
 11834  1409  0086               	movwf	6
 11835  140A  3002               	movlw	2	; select bank4/5
 11836  140B  0087               	movwf	7
 11837  140C  3002               	movlw	2	; select bank4/5
 11838  140D  3F4D               	moviw [13]fsr1
 11839  140E  0020               	movlb	0	; select bank0
 11840  140F  00A0               	movwf	setMemory_Data@data
 11841  1410  3001               	movlw	1
 11842  1411  319B  230B  3193   	fcall	_setMemory_Data
 11843                           
 11844                           ;MCU_B1.c: 981: setMemory_Data(2, product->Data[14]);
 11845  1414  087B               	movf	_product,w
 11846  1415  0086               	movwf	6
 11847  1416  3002               	movlw	2	; select bank4/5
 11848  1417  0087               	movwf	7
 11849  1418  3002               	movlw	2	; select bank4/5
 11850  1419  3F4E               	moviw [14]fsr1
 11851  141A  0020               	movlb	0	; select bank0
 11852  141B  00A0               	movwf	setMemory_Data@data
 11853  141C  3002               	movlw	2
 11854  141D  319B  230B  3193   	fcall	_setMemory_Data
 11855                           
 11856                           ;MCU_B1.c: 987: if (Memory.LoopSave == 1) {
 11857  1420  0024               	movlb	4	; select bank4
 11858  1421  1D44               	btfss	(_Memory^(0+512)+36),2
 11859  1422  2C27               	goto	l1361
 11860                           
 11861                           ;MCU_B1.c: 988: Memory.LoopSave = 0;
 11862  1423  1144               	bcf	(_Memory^(0+512)+36),2
 11863                           
 11864                           ;MCU_B1.c: 989: myMain.FirstOpen = 0;
 11865  1424  0021               	movlb	1	; select bank1
 11866  1425  11A0               	bcf	_myMain^(0+128),3
 11867                           
 11868                           ;MCU_B1.c: 990: myMain.First = 0;
 11869  1426  12A0               	bcf	_myMain^(0+128),5
 11870  1427                     l1361:	
 11871                           
 11872                           ;MCU_B1.c: 992: }
 11873                           ;MCU_B1.c: 993: GIE = 0;
 11874  1427  138B               	bcf	11,7	;volatile
 11875                           
 11876                           ;MCU_B1.c: 994: Flash_Memory_Erasing();
 11877  1428  319B  2317  3193   	fcall	_Flash_Memory_Erasing
 11878                           
 11879                           ;MCU_B1.c: 995: Flash_Memory_Write();
 11880  142B  3190  20A4         	fcall	_Flash_Memory_Write
 11881                           
 11882                           ;MCU_B1.c: 996: GIE = 1;
 11883  142D  178B               	bsf	11,7	;volatile
 11884  142E  0008               	return
 11885  142F                     __end_of_Flash_Memory_Modify:	
 11886                           
 11887                           	psect	text65
 11888  1B17                     __ptext65:	
 11889 ;; *************** function _Flash_Memory_Erasing *****************
 11890 ;; Defined at:
 11891 ;;		line 963 in file "../src/MCU_B1.c"
 11892 ;; Parameters:    Size  Location     Type
 11893 ;;		None
 11894 ;; Auto vars:     Size  Location     Type
 11895 ;;		None
 11896 ;; Return value:  Size  Location     Type
 11897 ;;		None               void
 11898 ;; Registers used:
 11899 ;;		wreg, status,2, status,0, pclath, cstack
 11900 ;; Tracked objects:
 11901 ;;		On entry : 0/0
 11902 ;;		On exit  : 0/0
 11903 ;;		Unchanged: 0/0
 11904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11909 ;;Total ram usage:        0 bytes
 11910 ;; Hardware stack levels used:    1
 11911 ;; Hardware stack levels required when called:    6
 11912 ;; This function calls:
 11913 ;;		_Flash_Memory_Unlock
 11914 ;; This function is called by:
 11915 ;;		_Flash_Memory_Modify
 11916 ;; This function uses a non-reentrant model
 11917 ;;
 11918                           
 11919                           
 11920                           ;psect for function _Flash_Memory_Erasing
 11921  1B17                     _Flash_Memory_Erasing:	
 11922                           
 11923                           ;MCU_B1.c: 964: CFGS = 0;
 11924                           
 11925                           ;incstack = 0
 11926                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11927  1B17  0023               	movlb	3	; select bank3
 11928  1B18  1315               	bcf	21,6	;volatile
 11929                           
 11930                           ;MCU_B1.c: 965: PMADRH = 0x30;
 11931  1B19  3030               	movlw	48
 11932  1B1A  0092               	movwf	18	;volatile
 11933                           
 11934                           ;MCU_B1.c: 966: PMADRL = 0x00;
 11935  1B1B  0191               	clrf	17	;volatile
 11936                           
 11937                           ;MCU_B1.c: 967: FREE = 1;
 11938  1B1C  1615               	bsf	21,4	;volatile
 11939                           
 11940                           ;MCU_B1.c: 968: WREN = 1;
 11941  1B1D  1515               	bsf	21,2	;volatile
 11942                           
 11943                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 11944  1B1E  319A  22E0         	fcall	_Flash_Memory_Unlock
 11945                           
 11946                           ;MCU_B1.c: 970: WREN = 0;
 11947  1B20  0023               	movlb	3	; select bank3
 11948  1B21  1115               	bcf	21,2	;volatile
 11949  1B22  0008               	return
 11950  1B23                     __end_of_Flash_Memory_Erasing:	
 11951                           
 11952                           	psect	text66
 11953  0F24                     __ptext66:	
 11954 ;; *************** function _Flash_Memory_Initialization *****************
 11955 ;; Defined at:
 11956 ;;		line 860 in file "../src/MCU_B1.c"
 11957 ;; Parameters:    Size  Location     Type
 11958 ;;		None
 11959 ;; Auto vars:     Size  Location     Type
 11960 ;;  i               1   62[BANK0 ] unsigned char 
 11961 ;; Return value:  Size  Location     Type
 11962 ;;		None               void
 11963 ;; Registers used:
 11964 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11965 ;; Tracked objects:
 11966 ;;		On entry : 0/0
 11967 ;;		On exit  : 0/0
 11968 ;;		Unchanged: 0/0
 11969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11972 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11973 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11974 ;;Total ram usage:        2 bytes
 11975 ;; Hardware stack levels used:    1
 11976 ;; Hardware stack levels required when called:    8
 11977 ;; This function calls:
 11978 ;;		_Flash_Memory_Read
 11979 ;;		_Flash_Memory_Write
 11980 ;;		_setMemory_Data
 11981 ;;		_setPercentValue
 11982 ;; This function is called by:
 11983 ;;		_main
 11984 ;; This function uses a non-reentrant model
 11985 ;;
 11986                           
 11987                           
 11988                           ;psect for function _Flash_Memory_Initialization
 11989  0F24                     _Flash_Memory_Initialization:	
 11990                           
 11991                           ;MCU_B1.c: 861: char i = 0;
 11992                           
 11993                           ;incstack = 0
 11994                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11995  0F24  0020               	movlb	0	; select bank0
 11996  0F25  01DE               	clrf	Flash_Memory_Initialization@i
 11997                           
 11998                           ;MCU_B1.c: 862: if (Flash_Memory_Read(31) == 0xaa) {
 11999  0F26  301F               	movlw	31
 12000  0F27  319D  2574  318F   	fcall	_Flash_Memory_Read
 12001  0F2A  3AAA               	xorlw	170
 12002  0F2B  1D03               	skipz
 12003  0F2C  2F96               	goto	l10258
 12004                           
 12005                           ;MCU_B1.c: 863: product->Data[12] = Flash_Memory_Read(0);
 12006  0F2D  3000               	movlw	0
 12007  0F2E  319D  2574  318F   	fcall	_Flash_Memory_Read
 12008  0F31  0020               	movlb	0	; select bank0
 12009  0F32  00DD               	movwf	??_Flash_Memory_Initialization
 12010  0F33  087B               	movf	_product,w
 12011  0F34  3E0C               	addlw	12
 12012  0F35  0086               	movwf	6
 12013  0F36  3002               	movlw	2	; select bank4/5
 12014  0F37  0087               	movwf	7
 12015  0F38  085D               	movf	??_Flash_Memory_Initialization,w
 12016  0F39  0081               	movwf	1
 12017                           
 12018                           ;MCU_B1.c: 864: product->Data[13] = Flash_Memory_Read(1);
 12019  0F3A  3001               	movlw	1
 12020  0F3B  319D  2574  318F   	fcall	_Flash_Memory_Read
 12021  0F3E  0020               	movlb	0	; select bank0
 12022  0F3F  00DD               	movwf	??_Flash_Memory_Initialization
 12023  0F40  087B               	movf	_product,w
 12024  0F41  3E0D               	addlw	13
 12025  0F42  0086               	movwf	6
 12026  0F43  3002               	movlw	2	; select bank4/5
 12027  0F44  0087               	movwf	7
 12028  0F45  085D               	movf	??_Flash_Memory_Initialization,w
 12029  0F46  0081               	movwf	1
 12030                           
 12031                           ;MCU_B1.c: 865: product->Data[14] = Flash_Memory_Read(2);
 12032  0F47  3002               	movlw	2
 12033  0F48  319D  2574  318F   	fcall	_Flash_Memory_Read
 12034  0F4B  0020               	movlb	0	; select bank0
 12035  0F4C  00DD               	movwf	??_Flash_Memory_Initialization
 12036  0F4D  087B               	movf	_product,w
 12037  0F4E  3E0E               	addlw	14
 12038  0F4F  0086               	movwf	6
 12039  0F50  3002               	movlw	2	; select bank4/5
 12040  0F51  0087               	movwf	7
 12041  0F52  085D               	movf	??_Flash_Memory_Initialization,w
 12042  0F53  0081               	movwf	1
 12043                           
 12044                           ;MCU_B1.c: 871: i = setPercentValue(((char)((100-60)*0.8)));
 12045  0F54  3020               	movlw	32
 12046  0F55  3193  2351  318F   	fcall	_setPercentValue
 12047  0F58  0020               	movlb	0	; select bank0
 12048  0F59  00DD               	movwf	??_Flash_Memory_Initialization
 12049  0F5A  085D               	movf	??_Flash_Memory_Initialization,w
 12050  0F5B  00DE               	movwf	Flash_Memory_Initialization@i
 12051                           
 12052                           ;MCU_B1.c: 872: product->Data[21] = i;
 12053  0F5C  085E               	movf	Flash_Memory_Initialization@i,w
 12054  0F5D  00DD               	movwf	??_Flash_Memory_Initialization
 12055  0F5E  087B               	movf	_product,w
 12056  0F5F  3E15               	addlw	21
 12057  0F60  0086               	movwf	6
 12058  0F61  3002               	movlw	2	; select bank4/5
 12059  0F62  0087               	movwf	7
 12060  0F63  085D               	movf	??_Flash_Memory_Initialization,w
 12061  0F64  0081               	movwf	1
 12062                           
 12063                           ;MCU_B1.c: 873: product->Data[22] = i;
 12064  0F65  085E               	movf	Flash_Memory_Initialization@i,w
 12065  0F66  00DD               	movwf	??_Flash_Memory_Initialization
 12066  0F67  087B               	movf	_product,w
 12067  0F68  3E16               	addlw	22
 12068  0F69  0086               	movwf	6
 12069  0F6A  3002               	movlw	2	; select bank4/5
 12070  0F6B  0087               	movwf	7
 12071  0F6C  085D               	movf	??_Flash_Memory_Initialization,w
 12072  0F6D  0081               	movwf	1
 12073                           
 12074                           ;MCU_B1.c: 874: product->Data[23] = i;
 12075  0F6E  085E               	movf	Flash_Memory_Initialization@i,w
 12076  0F6F  00DD               	movwf	??_Flash_Memory_Initialization
 12077  0F70  087B               	movf	_product,w
 12078  0F71  3E17               	addlw	23
 12079  0F72  0086               	movwf	6
 12080  0F73  3002               	movlw	2	; select bank4/5
 12081  0F74  0087               	movwf	7
 12082  0F75  085D               	movf	??_Flash_Memory_Initialization,w
 12083  0F76  0081               	movwf	1
 12084                           
 12085                           ;MCU_B1.c: 876: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12086  0F77  087B               	movf	_product,w
 12087  0F78  3E0C               	addlw	12
 12088  0F79  0086               	movwf	6
 12089  0F7A  3002               	movlw	2	; select bank4/5
 12090  0F7B  0087               	movwf	7
 12091  0F7C  0801               	movf	1,w
 12092  0F7D  3AFF               	xorlw	255
 12093  0F7E  1D03               	skipz
 12094  0F7F  0008               	return
 12095  0F80  087B               	movf	_product,w
 12096  0F81  3E0D               	addlw	13
 12097  0F82  0086               	movwf	6
 12098  0F83  3002               	movlw	2	; select bank4/5
 12099  0F84  0087               	movwf	7
 12100  0F85  0801               	movf	1,w
 12101  0F86  3AFF               	xorlw	255
 12102  0F87  1D03               	skipz
 12103  0F88  0008               	return
 12104  0F89  087B               	movf	_product,w
 12105  0F8A  3E0E               	addlw	14
 12106  0F8B  0086               	movwf	6
 12107  0F8C  3002               	movlw	2	; select bank4/5
 12108  0F8D  0087               	movwf	7
 12109  0F8E  0801               	movf	1,w
 12110  0F8F  3AFF               	xorlw	255
 12111  0F90  1D03               	skipz
 12112  0F91  0008               	return
 12113                           
 12114                           ;MCU_B1.c: 877: myMain.FirstOpen = 1;
 12115  0F92  0021               	movlb	1	; select bank1
 12116  0F93  15A0               	bsf	_myMain^(0+128),3
 12117                           
 12118                           ;MCU_B1.c: 878: myMain.First = 1;
 12119  0F94  16A0               	bsf	_myMain^(0+128),5
 12120                           
 12121                           ;MCU_B1.c: 879: }
 12122                           ;MCU_B1.c: 880: } else {
 12123  0F95  0008               	return
 12124  0F96                     l10258:	
 12125                           
 12126                           ;MCU_B1.c: 881: i = setPercentValue(((char)((100-60)*0.8)));
 12127  0F96  3020               	movlw	32
 12128  0F97  3193  2351  318F   	fcall	_setPercentValue
 12129  0F9A  0020               	movlb	0	; select bank0
 12130  0F9B  00DD               	movwf	??_Flash_Memory_Initialization
 12131  0F9C  085D               	movf	??_Flash_Memory_Initialization,w
 12132  0F9D  00DE               	movwf	Flash_Memory_Initialization@i
 12133                           
 12134                           ;MCU_B1.c: 882: setMemory_Data(0, 0xff);
 12135  0F9E  30FF               	movlw	255
 12136  0F9F  00DD               	movwf	??_Flash_Memory_Initialization
 12137  0FA0  085D               	movf	??_Flash_Memory_Initialization,w
 12138  0FA1  00A0               	movwf	setMemory_Data@data
 12139  0FA2  3000               	movlw	0
 12140  0FA3  319B  230B  318F   	fcall	_setMemory_Data
 12141                           
 12142                           ;MCU_B1.c: 883: setMemory_Data(1, 0xff);
 12143  0FA6  30FF               	movlw	255
 12144  0FA7  0020               	movlb	0	; select bank0
 12145  0FA8  00DD               	movwf	??_Flash_Memory_Initialization
 12146  0FA9  085D               	movf	??_Flash_Memory_Initialization,w
 12147  0FAA  00A0               	movwf	setMemory_Data@data
 12148  0FAB  3001               	movlw	1
 12149  0FAC  319B  230B  318F   	fcall	_setMemory_Data
 12150                           
 12151                           ;MCU_B1.c: 884: setMemory_Data(2, 0xff);
 12152  0FAF  30FF               	movlw	255
 12153  0FB0  0020               	movlb	0	; select bank0
 12154  0FB1  00DD               	movwf	??_Flash_Memory_Initialization
 12155  0FB2  085D               	movf	??_Flash_Memory_Initialization,w
 12156  0FB3  00A0               	movwf	setMemory_Data@data
 12157  0FB4  3002               	movlw	2
 12158  0FB5  319B  230B  318F   	fcall	_setMemory_Data
 12159                           
 12160                           ;MCU_B1.c: 885: setMemory_Data(3, 0xff);
 12161  0FB8  30FF               	movlw	255
 12162  0FB9  0020               	movlb	0	; select bank0
 12163  0FBA  00DD               	movwf	??_Flash_Memory_Initialization
 12164  0FBB  085D               	movf	??_Flash_Memory_Initialization,w
 12165  0FBC  00A0               	movwf	setMemory_Data@data
 12166  0FBD  3003               	movlw	3
 12167  0FBE  319B  230B  318F   	fcall	_setMemory_Data
 12168                           
 12169                           ;MCU_B1.c: 886: setMemory_Data(4, 0xff);
 12170  0FC1  30FF               	movlw	255
 12171  0FC2  0020               	movlb	0	; select bank0
 12172  0FC3  00DD               	movwf	??_Flash_Memory_Initialization
 12173  0FC4  085D               	movf	??_Flash_Memory_Initialization,w
 12174  0FC5  00A0               	movwf	setMemory_Data@data
 12175  0FC6  3004               	movlw	4
 12176  0FC7  319B  230B  318F   	fcall	_setMemory_Data
 12177                           
 12178                           ;MCU_B1.c: 887: setMemory_Data(5, 0xff);
 12179  0FCA  30FF               	movlw	255
 12180  0FCB  0020               	movlb	0	; select bank0
 12181  0FCC  00DD               	movwf	??_Flash_Memory_Initialization
 12182  0FCD  085D               	movf	??_Flash_Memory_Initialization,w
 12183  0FCE  00A0               	movwf	setMemory_Data@data
 12184  0FCF  3005               	movlw	5
 12185  0FD0  319B  230B  318F   	fcall	_setMemory_Data
 12186                           
 12187                           ;MCU_B1.c: 888: setMemory_Data(31, 0xaa);
 12188  0FD3  30AA               	movlw	170
 12189  0FD4  0020               	movlb	0	; select bank0
 12190  0FD5  00DD               	movwf	??_Flash_Memory_Initialization
 12191  0FD6  085D               	movf	??_Flash_Memory_Initialization,w
 12192  0FD7  00A0               	movwf	setMemory_Data@data
 12193  0FD8  301F               	movlw	31
 12194  0FD9  319B  230B  318F   	fcall	_setMemory_Data
 12195                           
 12196                           ;MCU_B1.c: 889: product->Data[21] = i;
 12197  0FDC  0020               	movlb	0	; select bank0
 12198  0FDD  085E               	movf	Flash_Memory_Initialization@i,w
 12199  0FDE  00DD               	movwf	??_Flash_Memory_Initialization
 12200  0FDF  087B               	movf	_product,w
 12201  0FE0  3E15               	addlw	21
 12202  0FE1  0086               	movwf	6
 12203  0FE2  3002               	movlw	2	; select bank4/5
 12204  0FE3  0087               	movwf	7
 12205  0FE4  085D               	movf	??_Flash_Memory_Initialization,w
 12206  0FE5  0081               	movwf	1
 12207                           
 12208                           ;MCU_B1.c: 890: product->Data[22] = i;
 12209  0FE6  085E               	movf	Flash_Memory_Initialization@i,w
 12210  0FE7  00DD               	movwf	??_Flash_Memory_Initialization
 12211  0FE8  087B               	movf	_product,w
 12212  0FE9  3E16               	addlw	22
 12213  0FEA  0086               	movwf	6
 12214  0FEB  3002               	movlw	2	; select bank4/5
 12215  0FEC  0087               	movwf	7
 12216  0FED  085D               	movf	??_Flash_Memory_Initialization,w
 12217  0FEE  0081               	movwf	1
 12218                           
 12219                           ;MCU_B1.c: 891: product->Data[23] = i;
 12220  0FEF  085E               	movf	Flash_Memory_Initialization@i,w
 12221  0FF0  00DD               	movwf	??_Flash_Memory_Initialization
 12222  0FF1  087B               	movf	_product,w
 12223  0FF2  3E17               	addlw	23
 12224  0FF3  0086               	movwf	6
 12225  0FF4  3002               	movlw	2	; select bank4/5
 12226  0FF5  0087               	movwf	7
 12227  0FF6  085D               	movf	??_Flash_Memory_Initialization,w
 12228  0FF7  0081               	movwf	1
 12229                           
 12230                           ;MCU_B1.c: 892: GIE = 0;
 12231  0FF8  138B               	bcf	11,7	;volatile
 12232                           
 12233                           ;MCU_B1.c: 893: Flash_Memory_Write();
 12234  0FF9  3190  20A4         	fcall	_Flash_Memory_Write
 12235                           
 12236                           ;MCU_B1.c: 894: GIE = 1;
 12237  0FFB  178B               	bsf	11,7	;volatile
 12238                           
 12239                           ;MCU_B1.c: 895: myMain.FirstOpen = 1;
 12240  0FFC  0021               	movlb	1	; select bank1
 12241  0FFD  15A0               	bsf	_myMain^(0+128),3
 12242                           
 12243                           ;MCU_B1.c: 896: myMain.First = 1;
 12244  0FFE  16A0               	bsf	_myMain^(0+128),5
 12245  0FFF  0008               	return
 12246  1000                     __end_of_Flash_Memory_Initialization:	
 12247                           
 12248                           	psect	text67
 12249  1B0B                     __ptext67:	
 12250 ;; *************** function _setMemory_Data *****************
 12251 ;; Defined at:
 12252 ;;		line 1011 in file "../src/MCU_B1.c"
 12253 ;; Parameters:    Size  Location     Type
 12254 ;;  address         1    wreg     unsigned char 
 12255 ;;  data            1    0[BANK0 ] unsigned char 
 12256 ;; Auto vars:     Size  Location     Type
 12257 ;;  address         1    2[BANK0 ] unsigned char 
 12258 ;; Return value:  Size  Location     Type
 12259 ;;		None               void
 12260 ;; Registers used:
 12261 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12262 ;; Tracked objects:
 12263 ;;		On entry : 0/0
 12264 ;;		On exit  : 0/0
 12265 ;;		Unchanged: 0/0
 12266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12267 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;Total ram usage:        3 bytes
 12272 ;; Hardware stack levels used:    1
 12273 ;; Hardware stack levels required when called:    5
 12274 ;; This function calls:
 12275 ;;		Nothing
 12276 ;; This function is called by:
 12277 ;;		_Flash_Memory_Initialization
 12278 ;;		_Flash_Memory_Modify
 12279 ;; This function uses a non-reentrant model
 12280 ;;
 12281                           
 12282                           
 12283                           ;psect for function _setMemory_Data
 12284  1B0B                     _setMemory_Data:	
 12285                           
 12286                           ;incstack = 0
 12287                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12288                           ;setMemory_Data@address stored from wreg
 12289  1B0B  0020               	movlb	0	; select bank0
 12290  1B0C  00A2               	movwf	setMemory_Data@address
 12291                           
 12292                           ;MCU_B1.c: 1012: Memory.Data[address] = data;
 12293  1B0D  0820               	movf	setMemory_Data@data,w
 12294  1B0E  00A1               	movwf	??_setMemory_Data
 12295  1B0F  0822               	movf	setMemory_Data@address,w
 12296  1B10  3E20               	addlw	_Memory& (0+255)
 12297  1B11  0086               	movwf	6
 12298  1B12  3002               	movlw	2	; select bank4/5
 12299  1B13  0087               	movwf	7
 12300  1B14  0821               	movf	??_setMemory_Data,w
 12301  1B15  0081               	movwf	1
 12302  1B16  0008               	return
 12303  1B17                     __end_of_setMemory_Data:	
 12304                           
 12305                           	psect	text68
 12306  10A4                     __ptext68:	
 12307 ;; *************** function _Flash_Memory_Write *****************
 12308 ;; Defined at:
 12309 ;;		line 944 in file "../src/MCU_B1.c"
 12310 ;; Parameters:    Size  Location     Type
 12311 ;;		None
 12312 ;; Auto vars:     Size  Location     Type
 12313 ;;  i               1    1[BANK0 ] unsigned char 
 12314 ;; Return value:  Size  Location     Type
 12315 ;;		None               void
 12316 ;; Registers used:
 12317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12318 ;; Tracked objects:
 12319 ;;		On entry : 0/0
 12320 ;;		On exit  : 0/0
 12321 ;;		Unchanged: 0/0
 12322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12324 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12326 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12327 ;;Total ram usage:        2 bytes
 12328 ;; Hardware stack levels used:    1
 12329 ;; Hardware stack levels required when called:    6
 12330 ;; This function calls:
 12331 ;;		_Flash_Memory_Unlock
 12332 ;; This function is called by:
 12333 ;;		_Flash_Memory_Initialization
 12334 ;;		_Flash_Memory_Modify
 12335 ;; This function uses a non-reentrant model
 12336 ;;
 12337                           
 12338                           
 12339                           ;psect for function _Flash_Memory_Write
 12340  10A4                     _Flash_Memory_Write:	
 12341                           
 12342                           ;MCU_B1.c: 945: char i = 0;
 12343                           
 12344                           ;incstack = 0
 12345                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12346  10A4  0020               	movlb	0	; select bank0
 12347  10A5  01A1               	clrf	Flash_Memory_Write@i
 12348                           
 12349                           ;MCU_B1.c: 946: CFGS = 0;
 12350  10A6  0023               	movlb	3	; select bank3
 12351  10A7  1315               	bcf	21,6	;volatile
 12352                           
 12353                           ;MCU_B1.c: 947: PMADRH = 0x30;
 12354  10A8  3030               	movlw	48
 12355  10A9  0092               	movwf	18	;volatile
 12356                           
 12357                           ;MCU_B1.c: 948: PMDATH = 0;
 12358  10AA  0194               	clrf	20	;volatile
 12359                           
 12360                           ;MCU_B1.c: 949: FREE = 0;
 12361  10AB  1215               	bcf	21,4	;volatile
 12362                           
 12363                           ;MCU_B1.c: 950: LWLO = 1;
 12364  10AC  1695               	bsf	21,5	;volatile
 12365                           
 12366                           ;MCU_B1.c: 951: WREN = 1;
 12367  10AD  1515               	bsf	21,2	;volatile
 12368                           
 12369                           ;MCU_B1.c: 952: for (i = 0; i < 32; i++) {
 12370  10AE  0020               	movlb	0	; select bank0
 12371  10AF  01A1               	clrf	Flash_Memory_Write@i
 12372  10B0  3020               	movlw	32
 12373  10B1  0221               	subwf	Flash_Memory_Write@i,w
 12374  10B2  1803               	btfsc	3,0
 12375  10B3  28CC               	goto	l1352
 12376  10B4                     l9446:	
 12377                           
 12378                           ;MCU_B1.c: 953: PMADRL = i;
 12379  10B4  0821               	movf	Flash_Memory_Write@i,w
 12380  10B5  0023               	movlb	3	; select bank3
 12381  10B6  0091               	movwf	17	;volatile
 12382                           
 12383                           ;MCU_B1.c: 954: PMDATL = Memory.Data[i];
 12384  10B7  0020               	movlb	0	; select bank0
 12385  10B8  0821               	movf	Flash_Memory_Write@i,w
 12386  10B9  3E20               	addlw	_Memory& (0+255)
 12387  10BA  0086               	movwf	6
 12388  10BB  3002               	movlw	2	; select bank4/5
 12389  10BC  0087               	movwf	7
 12390  10BD  0801               	movf	1,w
 12391  10BE  0023               	movlb	3	; select bank3
 12392  10BF  0093               	movwf	19	;volatile
 12393                           
 12394                           ;MCU_B1.c: 955: Flash_Memory_Unlock();
 12395  10C0  319A  22E0  3190   	fcall	_Flash_Memory_Unlock
 12396  10C3  3001               	movlw	1
 12397  10C4  0020               	movlb	0	; select bank0
 12398  10C5  00A0               	movwf	??_Flash_Memory_Write
 12399  10C6  0820               	movf	??_Flash_Memory_Write,w
 12400  10C7  07A1               	addwf	Flash_Memory_Write@i,f
 12401  10C8  3020               	movlw	32
 12402  10C9  0221               	subwf	Flash_Memory_Write@i,w
 12403  10CA  1C03               	skipc
 12404  10CB  28B4               	goto	l9446
 12405  10CC                     l1352:	
 12406                           
 12407                           ;MCU_B1.c: 956: }
 12408                           ;MCU_B1.c: 957: LWLO = 0;
 12409  10CC  0023               	movlb	3	; select bank3
 12410  10CD  1295               	bcf	21,5	;volatile
 12411                           
 12412                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 12413  10CE  319A  22E0         	fcall	_Flash_Memory_Unlock
 12414                           
 12415                           ;MCU_B1.c: 959: WREN = 0;
 12416  10D0  0023               	movlb	3	; select bank3
 12417  10D1  1115               	bcf	21,2	;volatile
 12418  10D2  0008               	return
 12419  10D3                     __end_of_Flash_Memory_Write:	
 12420                           
 12421                           	psect	text69
 12422  1AE0                     __ptext69:	
 12423 ;; *************** function _Flash_Memory_Unlock *****************
 12424 ;; Defined at:
 12425 ;;		line 923 in file "../src/MCU_B1.c"
 12426 ;; Parameters:    Size  Location     Type
 12427 ;;		None
 12428 ;; Auto vars:     Size  Location     Type
 12429 ;;		None
 12430 ;; Return value:  Size  Location     Type
 12431 ;;		None               void
 12432 ;; Registers used:
 12433 ;;		wreg
 12434 ;; Tracked objects:
 12435 ;;		On entry : 0/0
 12436 ;;		On exit  : 0/0
 12437 ;;		Unchanged: 0/0
 12438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12443 ;;Total ram usage:        0 bytes
 12444 ;; Hardware stack levels used:    1
 12445 ;; Hardware stack levels required when called:    5
 12446 ;; This function calls:
 12447 ;;		Nothing
 12448 ;; This function is called by:
 12449 ;;		_Flash_Memory_Write
 12450 ;;		_Flash_Memory_Erasing
 12451 ;; This function uses a non-reentrant model
 12452 ;;
 12453                           
 12454                           
 12455                           ;psect for function _Flash_Memory_Unlock
 12456  1AE0                     _Flash_Memory_Unlock:	
 12457                           
 12458                           ;MCU_B1.c: 924: PMCON2 = 0x55;
 12459                           
 12460                           ;incstack = 0
 12461                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12462  1AE0  3055               	movlw	85
 12463  1AE1  0023               	movlb	3	; select bank3
 12464  1AE2  0096               	movwf	22	;volatile
 12465                           
 12466                           ;MCU_B1.c: 925: PMCON2 = 0xaa;
 12467  1AE3  30AA               	movlw	170
 12468  1AE4  0096               	movwf	22	;volatile
 12469                           
 12470                           ;MCU_B1.c: 926: WR = 1;
 12471  1AE5  1495               	bsf	21,1	;volatile
 12472                           
 12473                           ;MCU_B1.c: 927: __nop();
 12474  1AE6  0000               	nop
 12475                           
 12476                           ;MCU_B1.c: 928: __nop();
 12477  1AE7  0000               	nop
 12478  1AE8  0008               	return
 12479  1AE9                     __end_of_Flash_Memory_Unlock:	
 12480                           
 12481                           	psect	text70
 12482  1D74                     __ptext70:	
 12483 ;; *************** function _Flash_Memory_Read *****************
 12484 ;; Defined at:
 12485 ;;		line 932 in file "../src/MCU_B1.c"
 12486 ;; Parameters:    Size  Location     Type
 12487 ;;  address         1    wreg     unsigned char 
 12488 ;; Auto vars:     Size  Location     Type
 12489 ;;  address         1    2[BANK0 ] unsigned char 
 12490 ;;  ret             1    3[BANK0 ] unsigned char 
 12491 ;;  i               1    1[BANK0 ] unsigned char 
 12492 ;; Return value:  Size  Location     Type
 12493 ;;                  1    wreg      unsigned char 
 12494 ;; Registers used:
 12495 ;;		wreg, status,2
 12496 ;; Tracked objects:
 12497 ;;		On entry : 0/0
 12498 ;;		On exit  : 0/0
 12499 ;;		Unchanged: 0/0
 12500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12502 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12504 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12505 ;;Total ram usage:        4 bytes
 12506 ;; Hardware stack levels used:    1
 12507 ;; Hardware stack levels required when called:    5
 12508 ;; This function calls:
 12509 ;;		Nothing
 12510 ;; This function is called by:
 12511 ;;		_Flash_Memory_Initialization
 12512 ;;		_Flash_Memory_Modify
 12513 ;; This function uses a non-reentrant model
 12514 ;;
 12515                           
 12516                           
 12517                           ;psect for function _Flash_Memory_Read
 12518  1D74                     _Flash_Memory_Read:	
 12519                           
 12520                           ;incstack = 0
 12521                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12522                           ;Flash_Memory_Read@address stored from wreg
 12523  1D74  0020               	movlb	0	; select bank0
 12524  1D75  00A2               	movwf	Flash_Memory_Read@address
 12525                           
 12526                           ;MCU_B1.c: 933: char i = 0, ret = 0;
 12527  1D76  01A1               	clrf	Flash_Memory_Read@i
 12528  1D77  01A3               	clrf	Flash_Memory_Read@ret
 12529                           
 12530                           ;MCU_B1.c: 934: PMADRH = 0x30;
 12531  1D78  3030               	movlw	48
 12532  1D79  0023               	movlb	3	; select bank3
 12533  1D7A  0092               	movwf	18	;volatile
 12534                           
 12535                           ;MCU_B1.c: 935: PMADRL = address;
 12536  1D7B  0020               	movlb	0	; select bank0
 12537  1D7C  0822               	movf	Flash_Memory_Read@address,w
 12538  1D7D  0023               	movlb	3	; select bank3
 12539  1D7E  0091               	movwf	17	;volatile
 12540                           
 12541                           ;MCU_B1.c: 936: CFGS = 0;
 12542  1D7F  1315               	bcf	21,6	;volatile
 12543                           
 12544                           ;MCU_B1.c: 937: RD = 1;
 12545  1D80  1415               	bsf	21,0	;volatile
 12546                           
 12547                           ;MCU_B1.c: 938: i = PMDATH;
 12548  1D81  0814               	movf	20,w	;volatile
 12549  1D82  0020               	movlb	0	; select bank0
 12550  1D83  00A0               	movwf	??_Flash_Memory_Read
 12551  1D84  0820               	movf	??_Flash_Memory_Read,w
 12552  1D85  00A1               	movwf	Flash_Memory_Read@i
 12553                           
 12554                           ;MCU_B1.c: 939: ret = PMDATL;
 12555  1D86  0023               	movlb	3	; select bank3
 12556  1D87  0813               	movf	19,w	;volatile
 12557  1D88  0020               	movlb	0	; select bank0
 12558  1D89  00A0               	movwf	??_Flash_Memory_Read
 12559  1D8A  0820               	movf	??_Flash_Memory_Read,w
 12560  1D8B  00A3               	movwf	Flash_Memory_Read@ret
 12561                           
 12562                           ;MCU_B1.c: 940: return ret;
 12563  1D8C  0823               	movf	Flash_Memory_Read@ret,w
 12564  1D8D  0008               	return
 12565  1D8E                     __end_of_Flash_Memory_Read:	
 12566                           
 12567                           	psect	text71
 12568  1AD0                     __ptext71:	
 12569 ;; *************** function _DimmerLights_Main *****************
 12570 ;; Defined at:
 12571 ;;		line 415 in file "../src/Dimmer_B1.c"
 12572 ;; Parameters:    Size  Location     Type
 12573 ;;		None
 12574 ;; Auto vars:     Size  Location     Type
 12575 ;;		None
 12576 ;; Return value:  Size  Location     Type
 12577 ;;		None               void
 12578 ;; Registers used:
 12579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12580 ;; Tracked objects:
 12581 ;;		On entry : 0/0
 12582 ;;		On exit  : 0/0
 12583 ;;		Unchanged: 0/0
 12584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12589 ;;Total ram usage:        0 bytes
 12590 ;; Hardware stack levels used:    1
 12591 ;; Hardware stack levels required when called:   11
 12592 ;; This function calls:
 12593 ;;		_setDimmerLights_Main
 12594 ;; This function is called by:
 12595 ;;		_main
 12596 ;; This function uses a non-reentrant model
 12597 ;;
 12598                           
 12599                           
 12600                           ;psect for function _DimmerLights_Main
 12601  1AD0                     _DimmerLights_Main:	
 12602                           
 12603                           ;Dimmer_B1.c: 417: setDimmerLights_Main(1);
 12604                           
 12605                           ;incstack = 0
 12606                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12607  1AD0  3001               	movlw	1
 12608  1AD1  318D  25D8  319A   	fcall	_setDimmerLights_Main
 12609                           
 12610                           ;Dimmer_B1.c: 421: setDimmerLights_Main(2);
 12611  1AD4  3002               	movlw	2
 12612  1AD5  318D  25D8         	fcall	_setDimmerLights_Main
 12613  1AD7  0008               	return
 12614  1AD8                     __end_of_DimmerLights_Main:	
 12615                           
 12616                           	psect	text72
 12617  0DD8                     __ptext72:	
 12618 ;; *************** function _setDimmerLights_Main *****************
 12619 ;; Defined at:
 12620 ;;		line 431 in file "../src/Dimmer_B1.c"
 12621 ;; Parameters:    Size  Location     Type
 12622 ;;  lights          1    wreg     unsigned char 
 12623 ;; Auto vars:     Size  Location     Type
 12624 ;;  lights          1   76[BANK0 ] unsigned char 
 12625 ;;  clear           1   71[BANK0 ] unsigned char 
 12626 ;; Return value:  Size  Location     Type
 12627 ;;		None               void
 12628 ;; Registers used:
 12629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12630 ;; Tracked objects:
 12631 ;;		On entry : 0/0
 12632 ;;		On exit  : 0/0
 12633 ;;		Unchanged: 0/0
 12634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12636 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12637 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;Total ram usage:        8 bytes
 12640 ;; Hardware stack levels used:    1
 12641 ;; Hardware stack levels required when called:   10
 12642 ;; This function calls:
 12643 ;;		_DimmerLightsPointSelect
 12644 ;;		_getLoad_OK
 12645 ;;		_getMain_All_Error_Status
 12646 ;;		_setBuz
 12647 ;;		_setDimmerLights
 12648 ;;		_setDimmerLights_Adj
 12649 ;; This function is called by:
 12650 ;;		_DimmerLights_Main
 12651 ;; This function uses a non-reentrant model
 12652 ;;
 12653                           
 12654                           
 12655                           ;psect for function _setDimmerLights_Main
 12656  0DD8                     _setDimmerLights_Main:	
 12657                           
 12658                           ;incstack = 0
 12659                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12660                           ;setDimmerLights_Main@lights stored from wreg
 12661  0DD8  0020               	movlb	0	; select bank0
 12662  0DD9  00EC               	movwf	setDimmerLights_Main@lights
 12663                           
 12664                           ;Dimmer_B1.c: 432: char clear = 1;
 12665  0DDA  01E7               	clrf	setDimmerLights_Main@clear
 12666  0DDB  0AE7               	incf	setDimmerLights_Main@clear,f
 12667                           
 12668                           ;Dimmer_B1.c: 433: DimmerLightsPointSelect(lights);
 12669  0DDC  086C               	movf	setDimmerLights_Main@lights,w
 12670  0DDD  319C  2430  318D   	fcall	_DimmerLightsPointSelect
 12671                           
 12672                           ;Dimmer_B1.c: 434: if (DimmerLights->Trigger == 1) {
 12673  0DE0  0877               	movf	_DimmerLights,w
 12674  0DE1  3E08               	addlw	8
 12675  0DE2  0086               	movwf	6
 12676  0DE3  3001               	movlw	1	; select bank2/3
 12677  0DE4  0087               	movwf	7
 12678  0DE5  1D01               	btfss	1,2
 12679  0DE6  2E29               	goto	l9704
 12680                           
 12681                           ;Dimmer_B1.c: 435: if (getMain_All_Error_Status(0) == 0) {
 12682  0DE7  3000               	movlw	0
 12683  0DE8  3191  2105  318D   	fcall	_getMain_All_Error_Status
 12684  0DEB  3800               	iorlw	0
 12685  0DEC  1D03               	skipz
 12686  0DED  2E0B               	goto	l801
 12687                           
 12688                           ;Dimmer_B1.c: 436: if (Dimmer.LoadOK == 1) {
 12689  0DEE  0021               	movlb	1	; select bank1
 12690  0DEF  1CC8               	btfss	_Dimmer^(0+128),1
 12691  0DF0  2E0D               	goto	l807
 12692                           
 12693                           ;Dimmer_B1.c: 437: Dimmer.LoadOK = getLoad_OK() == 1 ? 0 : Dimmer.LoadOK;
 12694  0DF1  319A  22C8  318D   	fcall	_getLoad_OK
 12695  0DF4  3A01               	xorlw	1
 12696  0DF5  1903               	skipnz
 12697  0DF6  2E02               	goto	l9694
 12698  0DF7  0021               	movlb	1	; select bank1
 12699  0DF8  0C48               	rrf	_Dimmer^(0+128),w
 12700  0DF9  3901               	andlw	1
 12701  0DFA  0020               	movlb	0	; select bank0
 12702  0DFB  00E5               	movwf	??_setDimmerLights_Main
 12703  0DFC  01E6               	clrf	??_setDimmerLights_Main+1
 12704  0DFD  0865               	movf	??_setDimmerLights_Main,w
 12705  0DFE  00E8               	movwf	_setDimmerLights_Main$2503
 12706  0DFF  0866               	movf	??_setDimmerLights_Main+1,w
 12707  0E00  00E9               	movwf	_setDimmerLights_Main$2503+1
 12708  0E01  2E05               	goto	l9696
 12709  0E02                     l9694:	
 12710  0E02  0020               	movlb	0	; select bank0
 12711  0E03  01E8               	clrf	_setDimmerLights_Main$2503
 12712  0E04  01E9               	clrf	_setDimmerLights_Main$2503+1
 12713  0E05                     l9696:	
 12714  0E05  0868               	movf	_setDimmerLights_Main$2503,w
 12715  0E06  0021               	movlb	1	; select bank1
 12716  0E07  10C8               	bcf	_Dimmer^(0+128),1
 12717  0E08  1D03               	skipz
 12718  0E09  14C8               	bsf	_Dimmer^(0+128),1
 12719                           
 12720                           ;Dimmer_B1.c: 438: }
 12721                           ;Dimmer_B1.c: 439: } else {
 12722  0E0A  2E0D               	goto	l807
 12723  0E0B                     l801:	
 12724                           
 12725                           ;Dimmer_B1.c: 440: Dimmer.LoadOK = 0;
 12726  0E0B  0021               	movlb	1	; select bank1
 12727  0E0C  10C8               	bcf	_Dimmer^(0+128),1
 12728  0E0D                     l807:	
 12729                           
 12730                           ;Dimmer_B1.c: 441: }
 12731                           ;Dimmer_B1.c: 442: if (Dimmer.LoadOK == 0) {
 12732  0E0D  18C8               	btfsc	_Dimmer^(0+128),1
 12733  0E0E  0008               	return
 12734                           
 12735                           ;Dimmer_B1.c: 443: DimmerLights->Trigger = 0;
 12736  0E0F  0877               	movf	_DimmerLights,w
 12737  0E10  3E08               	addlw	8
 12738  0E11  0086               	movwf	6
 12739  0E12  3001               	movlw	1	; select bank2/3
 12740  0E13  0087               	movwf	7
 12741  0E14  1101               	bcf	1,2
 12742                           
 12743                           ;Dimmer_B1.c: 445: if (DimmerLights->Switch == 1) {
 12744  0E15  0877               	movf	_DimmerLights,w
 12745  0E16  3E08               	addlw	8
 12746  0E17  0086               	movwf	6
 12747  0E18  3001               	movlw	1	; select bank2/3
 12748  0E19  0087               	movwf	7
 12749  0E1A  1C81               	btfss	1,1
 12750  0E1B  2E23               	goto	l9702
 12751                           
 12752                           ;Dimmer_B1.c: 446: setDimmerLights(lights, 1);
 12753  0E1C  0020               	movlb	0	; select bank0
 12754  0E1D  01A7               	clrf	setDimmerLights@status
 12755  0E1E  0AA7               	incf	setDimmerLights@status,f
 12756  0E1F  086C               	movf	setDimmerLights_Main@lights,w
 12757  0E20  318C  2412         	fcall	_setDimmerLights
 12758                           
 12759                           ;Dimmer_B1.c: 447: } else {
 12760  0E22  0008               	return
 12761  0E23                     l9702:	
 12762                           
 12763                           ;Dimmer_B1.c: 448: setDimmerLights(lights, 0);
 12764  0E23  0020               	movlb	0	; select bank0
 12765  0E24  01A7               	clrf	setDimmerLights@status
 12766  0E25  086C               	movf	setDimmerLights_Main@lights,w
 12767  0E26  318C  2412         	fcall	_setDimmerLights
 12768                           
 12769                           ;Dimmer_B1.c: 449: }
 12770                           ;Dimmer_B1.c: 450: }
 12771                           ;Dimmer_B1.c: 451: } else {
 12772  0E28  0008               	return
 12773  0E29                     l9704:	
 12774                           
 12775                           ;Dimmer_B1.c: 452: if (DimmerLights->TriggerAdj == 1) {
 12776  0E29  0877               	movf	_DimmerLights,w
 12777  0E2A  3E08               	addlw	8
 12778  0E2B  0086               	movwf	6
 12779  0E2C  3001               	movlw	1	; select bank2/3
 12780  0E2D  0087               	movwf	7
 12781  0E2E  1E01               	btfss	1,4
 12782  0E2F  0008               	return
 12783                           
 12784                           ;Dimmer_B1.c: 453: if (getMain_All_Error_Status(0) == 0) {
 12785  0E30  3000               	movlw	0
 12786  0E31  3191  2105  318D   	fcall	_getMain_All_Error_Status
 12787  0E34  3800               	iorlw	0
 12788  0E35  1D03               	skipz
 12789  0E36  2E54               	goto	l813
 12790                           
 12791                           ;Dimmer_B1.c: 454: if (Dimmer.LoadOK == 1) {
 12792  0E37  0021               	movlb	1	; select bank1
 12793  0E38  1CC8               	btfss	_Dimmer^(0+128),1
 12794  0E39  2E56               	goto	l819
 12795                           
 12796                           ;Dimmer_B1.c: 455: Dimmer.LoadOK = getLoad_OK() == 1 ? 0 : Dimmer.LoadOK;
 12797  0E3A  319A  22C8  318D   	fcall	_getLoad_OK
 12798  0E3D  3A01               	xorlw	1
 12799  0E3E  1903               	skipnz
 12800  0E3F  2E4B               	goto	l9714
 12801  0E40  0021               	movlb	1	; select bank1
 12802  0E41  0C48               	rrf	_Dimmer^(0+128),w
 12803  0E42  3901               	andlw	1
 12804  0E43  0020               	movlb	0	; select bank0
 12805  0E44  00E5               	movwf	??_setDimmerLights_Main
 12806  0E45  01E6               	clrf	??_setDimmerLights_Main+1
 12807  0E46  0865               	movf	??_setDimmerLights_Main,w
 12808  0E47  00EA               	movwf	_setDimmerLights_Main$2504
 12809  0E48  0866               	movf	??_setDimmerLights_Main+1,w
 12810  0E49  00EB               	movwf	_setDimmerLights_Main$2504+1
 12811  0E4A  2E4E               	goto	l9716
 12812  0E4B                     l9714:	
 12813  0E4B  0020               	movlb	0	; select bank0
 12814  0E4C  01EA               	clrf	_setDimmerLights_Main$2504
 12815  0E4D  01EB               	clrf	_setDimmerLights_Main$2504+1
 12816  0E4E                     l9716:	
 12817  0E4E  086A               	movf	_setDimmerLights_Main$2504,w
 12818  0E4F  0021               	movlb	1	; select bank1
 12819  0E50  10C8               	bcf	_Dimmer^(0+128),1
 12820  0E51  1D03               	skipz
 12821  0E52  14C8               	bsf	_Dimmer^(0+128),1
 12822                           
 12823                           ;Dimmer_B1.c: 456: }
 12824                           ;Dimmer_B1.c: 457: } else {
 12825  0E53  2E56               	goto	l819
 12826  0E54                     l813:	
 12827                           
 12828                           ;Dimmer_B1.c: 458: Dimmer.LoadOK = 0;
 12829  0E54  0021               	movlb	1	; select bank1
 12830  0E55  10C8               	bcf	_Dimmer^(0+128),1
 12831  0E56                     l819:	
 12832                           
 12833                           ;Dimmer_B1.c: 459: }
 12834                           ;Dimmer_B1.c: 460: if (Dimmer.LoadOK == 0) {
 12835  0E56  18C8               	btfsc	_Dimmer^(0+128),1
 12836  0E57  0008               	return
 12837                           
 12838                           ;Dimmer_B1.c: 461: DimmerLights->TriggerAdj = 0;
 12839  0E58  0877               	movf	_DimmerLights,w
 12840  0E59  3E08               	addlw	8
 12841  0E5A  0086               	movwf	6
 12842  0E5B  3001               	movlw	1	; select bank2/3
 12843  0E5C  0087               	movwf	7
 12844  0E5D  1201               	bcf	1,4
 12845                           
 12846                           ;Dimmer_B1.c: 462: if (DimmerLights->AdjGo == 1) {
 12847  0E5E  0877               	movf	_DimmerLights,w
 12848  0E5F  3E08               	addlw	8
 12849  0E60  0086               	movwf	6
 12850  0E61  3001               	movlw	1	; select bank2/3
 12851  0E62  0087               	movwf	7
 12852  0E63  1D81               	btfss	1,3
 12853  0E64  2E75               	goto	l9724
 12854                           
 12855                           ;Dimmer_B1.c: 463: setDimmerLights_Adj(lights, 1);
 12856  0E65  0020               	movlb	0	; select bank0
 12857  0E66  01E2               	clrf	setDimmerLights_Adj@status
 12858  0E67  0AE2               	incf	setDimmerLights_Adj@status,f
 12859  0E68  086C               	movf	setDimmerLights_Main@lights,w
 12860  0E69  3192  224A  318D   	fcall	_setDimmerLights_Adj
 12861                           
 12862                           ;Dimmer_B1.c: 464: setBuz(1, 100);
 12863  0E6C  3064               	movlw	100
 12864  0E6D  0020               	movlb	0	; select bank0
 12865  0E6E  00A9               	movwf	setBuz@time
 12866  0E6F  3000               	movlw	0
 12867  0E70  00AA               	movwf	setBuz@time+1
 12868  0E71  3001               	movlw	1
 12869  0E72  3195  25D1         	fcall	_setBuz
 12870                           
 12871                           ;Dimmer_B1.c: 465: } else {
 12872  0E74  0008               	return
 12873  0E75                     l9724:	
 12874                           
 12875                           ;Dimmer_B1.c: 466: setDimmerLights_Adj(lights, 0);
 12876  0E75  0020               	movlb	0	; select bank0
 12877  0E76  01E2               	clrf	setDimmerLights_Adj@status
 12878  0E77  086C               	movf	setDimmerLights_Main@lights,w
 12879  0E78  3192  224A         	fcall	_setDimmerLights_Adj
 12880  0E7A  0008               	return
 12881  0E7B                     __end_of_setDimmerLights_Main:	
 12882                           
 12883                           	psect	text73
 12884  124A                     __ptext73:	
 12885 ;; *************** function _setDimmerLights_Adj *****************
 12886 ;; Defined at:
 12887 ;;		line 730 in file "../src/Dimmer_B1.c"
 12888 ;; Parameters:    Size  Location     Type
 12889 ;;  lights          1    wreg     unsigned char 
 12890 ;;  status          1   66[BANK0 ] unsigned char 
 12891 ;; Auto vars:     Size  Location     Type
 12892 ;;  lights          1   68[BANK0 ] unsigned char 
 12893 ;; Return value:  Size  Location     Type
 12894 ;;		None               void
 12895 ;; Registers used:
 12896 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12897 ;; Tracked objects:
 12898 ;;		On entry : 0/0
 12899 ;;		On exit  : 0/0
 12900 ;;		Unchanged: 0/0
 12901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12902 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12904 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12905 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12906 ;;Total ram usage:        3 bytes
 12907 ;; Hardware stack levels used:    1
 12908 ;; Hardware stack levels required when called:    9
 12909 ;; This function calls:
 12910 ;;		_DimmerLightsPointSelect
 12911 ;;		_setRF_DimmerLights
 12912 ;;		_setTxData
 12913 ;; This function is called by:
 12914 ;;		_setDimmerLights_Main
 12915 ;; This function uses a non-reentrant model
 12916 ;;
 12917                           
 12918                           
 12919                           ;psect for function _setDimmerLights_Adj
 12920  124A                     _setDimmerLights_Adj:	
 12921                           
 12922                           ;incstack = 0
 12923                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12924                           ;setDimmerLights_Adj@lights stored from wreg
 12925  124A  0020               	movlb	0	; select bank0
 12926  124B  00E4               	movwf	setDimmerLights_Adj@lights
 12927                           
 12928                           ;Dimmer_B1.c: 731: DimmerLightsPointSelect(lights);
 12929  124C  0864               	movf	setDimmerLights_Adj@lights,w
 12930  124D  319C  2430  3192   	fcall	_DimmerLightsPointSelect
 12931                           
 12932                           ;Dimmer_B1.c: 732: if (status == 1) {
 12933  1250  0020               	movlb	0	; select bank0
 12934  1251  0862               	movf	setDimmerLights_Adj@status,w
 12935  1252  3A01               	xorlw	1
 12936  1253  1D03               	skipz
 12937  1254  2A60               	goto	l9330
 12938                           
 12939                           ;Dimmer_B1.c: 733: DimmerLights->AdjFlag = 1;
 12940  1255  0877               	movf	_DimmerLights,w
 12941  1256  0086               	movwf	6
 12942  1257  3001               	movlw	1	; select bank2/3
 12943  1258  0087               	movwf	7
 12944  1259  1581               	bsf	1,3
 12945                           
 12946                           ;Dimmer_B1.c: 734: DimmerLights->Signal = 1;
 12947  125A  0877               	movf	_DimmerLights,w
 12948  125B  0086               	movwf	6
 12949  125C  3001               	movlw	1	; select bank2/3
 12950  125D  0087               	movwf	7
 12951  125E  1481               	bsf	1,1
 12952                           
 12953                           ;Dimmer_B1.c: 735: } else {
 12954  125F  0008               	return
 12955  1260                     l9330:	
 12956                           
 12957                           ;Dimmer_B1.c: 736: if (DimmerLights->AdjFlag == 1) {
 12958  1260  0877               	movf	_DimmerLights,w
 12959  1261  0086               	movwf	6
 12960  1262  3001               	movlw	1	; select bank2/3
 12961  1263  0087               	movwf	7
 12962  1264  1D81               	btfss	1,3
 12963  1265  0008               	return
 12964                           
 12965                           ;Dimmer_B1.c: 738: DimmerLights->Signal = 0;
 12966  1266  0877               	movf	_DimmerLights,w
 12967  1267  0086               	movwf	6
 12968  1268  3001               	movlw	1	; select bank2/3
 12969  1269  0087               	movwf	7
 12970  126A  1081               	bcf	1,1
 12971                           
 12972                           ;Dimmer_B1.c: 739: DimmerLights->AdjFlag = 0;
 12973  126B  0877               	movf	_DimmerLights,w
 12974  126C  0086               	movwf	6
 12975  126D  3001               	movlw	1	; select bank2/3
 12976  126E  0087               	movwf	7
 12977  126F  1181               	bcf	1,3
 12978                           
 12979                           ;Dimmer_B1.c: 741: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12980  1270  0877               	movf	_DimmerLights,w
 12981  1271  3E04               	addlw	4
 12982  1272  0086               	movwf	6
 12983  1273  3001               	movlw	1	; select bank2/3
 12984  1274  0087               	movwf	7
 12985  1275  0801               	movf	1,w
 12986  1276  00E3               	movwf	??_setDimmerLights_Adj
 12987  1277  0877               	movf	_DimmerLights,w
 12988  1278  3E05               	addlw	5
 12989  1279  0086               	movwf	6
 12990  127A  3001               	movlw	1	; select bank2/3
 12991  127B  0087               	movwf	7
 12992  127C  0863               	movf	??_setDimmerLights_Adj,w
 12993  127D  0081               	movwf	1
 12994                           
 12995                           ;Dimmer_B1.c: 749: setRF_DimmerLights(lights, 1);
 12996  127E  01DD               	clrf	setRF_DimmerLights@on
 12997  127F  0ADD               	incf	setRF_DimmerLights@on,f
 12998  1280  0864               	movf	setDimmerLights_Adj@lights,w
 12999  1281  3189  214B  3192   	fcall	_setRF_DimmerLights
 13000                           
 13001                           ;Dimmer_B1.c: 750: setTxData();
 13002  1284  318C  24A6         	fcall	_setTxData
 13003  1286  0008               	return
 13004  1287                     __end_of_setDimmerLights_Adj:	
 13005                           
 13006                           	psect	text74
 13007  0C12                     __ptext74:	
 13008 ;; *************** function _setDimmerLights *****************
 13009 ;; Defined at:
 13010 ;;		line 672 in file "../src/Dimmer_B1.c"
 13011 ;; Parameters:    Size  Location     Type
 13012 ;;  lights          1    wreg     unsigned char 
 13013 ;;  status          1    7[BANK0 ] unsigned char 
 13014 ;; Auto vars:     Size  Location     Type
 13015 ;;  lights          1   12[BANK0 ] unsigned char 
 13016 ;; Return value:  Size  Location     Type
 13017 ;;		None               void
 13018 ;; Registers used:
 13019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13020 ;; Tracked objects:
 13021 ;;		On entry : 0/0
 13022 ;;		On exit  : 0/0
 13023 ;;		Unchanged: 0/0
 13024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13025 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13028 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13029 ;;Total ram usage:        6 bytes
 13030 ;; Hardware stack levels used:    1
 13031 ;; Hardware stack levels required when called:    7
 13032 ;; This function calls:
 13033 ;;		_DimmerLightsPointSelect
 13034 ;;		_getMain_All_Error_Status
 13035 ;;		_setLED
 13036 ;; This function is called by:
 13037 ;;		_setDimmerLights_Main
 13038 ;; This function uses a non-reentrant model
 13039 ;;
 13040                           
 13041                           
 13042                           ;psect for function _setDimmerLights
 13043  0C12                     _setDimmerLights:	
 13044                           
 13045                           ;incstack = 0
 13046                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13047                           ;setDimmerLights@lights stored from wreg
 13048  0C12  0020               	movlb	0	; select bank0
 13049  0C13  00AC               	movwf	setDimmerLights@lights
 13050                           
 13051                           ;Dimmer_B1.c: 673: DimmerLightsPointSelect(lights);
 13052  0C14  082C               	movf	setDimmerLights@lights,w
 13053  0C15  319C  2430  318C   	fcall	_DimmerLightsPointSelect
 13054                           
 13055                           ;Dimmer_B1.c: 676: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 13056  0C18  3000               	movlw	0
 13057  0C19  3191  2105  318C   	fcall	_getMain_All_Error_Status
 13058  0C1C  3A00               	xorlw	0
 13059  0C1D  3000               	movlw	0
 13060  0C1E  1903               	skipnz
 13061  0C1F  3001               	movlw	1
 13062  0C20  0020               	movlb	0	; select bank0
 13063  0C21  00A8               	movwf	??_setDimmerLights
 13064  0C22  0DA8               	rlf	??_setDimmerLights,f
 13065  0C23  0021               	movlb	1	; select bank1
 13066  0C24  0848               	movf	_Dimmer^(0+128),w
 13067  0C25  0020               	movlb	0	; select bank0
 13068  0C26  0628               	xorwf	??_setDimmerLights,w
 13069  0C27  39FD               	andlw	-3
 13070  0C28  0628               	xorwf	??_setDimmerLights,w
 13071  0C29  0021               	movlb	1	; select bank1
 13072  0C2A  00C8               	movwf	_Dimmer^(0+128)
 13073                           
 13074                           ;Dimmer_B1.c: 677: Dimmer.LoadGO = status == 1 ? 1 : Dimmer.LoadGO;
 13075  0C2B  0020               	movlb	0	; select bank0
 13076  0C2C  0827               	movf	setDimmerLights@status,w
 13077  0C2D  3A01               	xorlw	1
 13078  0C2E  1903               	skipnz
 13079  0C2F  2C3B               	goto	l9308
 13080  0C30  0021               	movlb	1	; select bank1
 13081  0C31  0C48               	rrf	_Dimmer^(0+128),w
 13082  0C32  0C89               	rrf	9,f
 13083  0C33  3901               	andlw	1
 13084  0C34  0020               	movlb	0	; select bank0
 13085  0C35  00A8               	movwf	??_setDimmerLights
 13086  0C36  01A9               	clrf	??_setDimmerLights+1
 13087  0C37  0828               	movf	??_setDimmerLights,w
 13088  0C38  00AA               	movwf	_setDimmerLights$2594
 13089  0C39  0829               	movf	??_setDimmerLights+1,w
 13090  0C3A  2C3E               	goto	L9
 13091  0C3B                     l9308:	
 13092  0C3B  3001               	movlw	1
 13093  0C3C  00AA               	movwf	_setDimmerLights$2594
 13094  0C3D  3000               	movlw	0
 13095  0C3E                     L9:	
 13096  0C3E  00AB               	movwf	_setDimmerLights$2594+1
 13097  0C3F  082A               	movf	_setDimmerLights$2594,w
 13098  0C40  0021               	movlb	1	; select bank1
 13099  0C41  1148               	bcf	_Dimmer^(0+128),2
 13100  0C42  1D03               	skipz
 13101  0C43  1548               	bsf	_Dimmer^(0+128),2
 13102                           
 13103                           ;Dimmer_B1.c: 680: if (status == 1) {
 13104  0C44  0020               	movlb	0	; select bank0
 13105  0C45  0827               	movf	setDimmerLights@status,w
 13106  0C46  3A01               	xorlw	1
 13107  0C47  1D03               	skipz
 13108  0C48  2C7A               	goto	l9322
 13109                           
 13110                           ;Dimmer_B1.c: 682: setLED(lights, 0);
 13111  0C49  01A2               	clrf	setLED@command
 13112  0C4A  082C               	movf	setDimmerLights@lights,w
 13113  0C4B  3188  2082  318C   	fcall	_setLED
 13114                           
 13115                           ;Dimmer_B1.c: 687: DimmerLights->StatusFlag = 1;
 13116  0C4E  0877               	movf	_DimmerLights,w
 13117  0C4F  0086               	movwf	6
 13118  0C50  3001               	movlw	1	; select bank2/3
 13119  0C51  0087               	movwf	7
 13120  0C52  1701               	bsf	1,6
 13121                           
 13122                           ;Dimmer_B1.c: 689: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13123  0C53  0877               	movf	_DimmerLights,w
 13124  0C54  3E05               	addlw	5
 13125  0C55  0086               	movwf	6
 13126  0C56  3001               	movlw	1	; select bank2/3
 13127  0C57  0087               	movwf	7
 13128  0C58  0801               	movf	1,w
 13129  0C59  0020               	movlb	0	; select bank0
 13130  0C5A  00A8               	movwf	??_setDimmerLights
 13131  0C5B  0877               	movf	_DimmerLights,w
 13132  0C5C  3E04               	addlw	4
 13133  0C5D  0086               	movwf	6
 13134  0C5E  3001               	movlw	1	; select bank2/3
 13135  0C5F  0087               	movwf	7
 13136  0C60  0828               	movf	??_setDimmerLights,w
 13137  0C61  0081               	movwf	1
 13138                           
 13139                           ;Dimmer_B1.c: 693: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 13140  0C62  3020               	movlw	32
 13141  0C63  00A8               	movwf	??_setDimmerLights
 13142  0C64  0877               	movf	_DimmerLights,w
 13143  0C65  3E04               	addlw	4
 13144  0C66  0086               	movwf	6
 13145  0C67  3001               	movlw	1	; select bank2/3
 13146  0C68  0087               	movwf	7
 13147  0C69  0828               	movf	??_setDimmerLights,w
 13148  0C6A  0081               	movwf	1
 13149                           
 13150                           ;Dimmer_B1.c: 697: DimmerLights->Signal = 1;
 13151  0C6B  0877               	movf	_DimmerLights,w
 13152  0C6C  0086               	movwf	6
 13153  0C6D  3001               	movlw	1	; select bank2/3
 13154  0C6E  0087               	movwf	7
 13155  0C6F  1481               	bsf	1,1
 13156                           
 13157                           ;Dimmer_B1.c: 698: DimmerLights->DimmingTimeValue = 7;
 13158  0C70  3007               	movlw	7
 13159  0C71  00A8               	movwf	??_setDimmerLights
 13160  0C72  0877               	movf	_DimmerLights,w
 13161  0C73  3E02               	addlw	2
 13162  0C74  0086               	movwf	6
 13163  0C75  3001               	movlw	1	; select bank2/3
 13164  0C76  0087               	movwf	7
 13165  0C77  0828               	movf	??_setDimmerLights,w
 13166  0C78  0081               	movwf	1
 13167                           
 13168                           ;Dimmer_B1.c: 700: } else {
 13169  0C79  0008               	return
 13170  0C7A                     l9322:	
 13171                           
 13172                           ;Dimmer_B1.c: 703: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13173  0C7A  0877               	movf	_DimmerLights,w
 13174  0C7B  3E06               	addlw	6
 13175  0C7C  0086               	movwf	6
 13176  0C7D  3001               	movlw	1	; select bank2/3
 13177  0C7E  0087               	movwf	7
 13178  0C7F  0801               	movf	1,w
 13179  0C80  00A8               	movwf	??_setDimmerLights
 13180  0C81  0877               	movf	_DimmerLights,w
 13181  0C82  3E04               	addlw	4
 13182  0C83  0086               	movwf	6
 13183  0C84  3001               	movlw	1	; select bank2/3
 13184  0C85  0087               	movwf	7
 13185  0C86  0828               	movf	??_setDimmerLights,w
 13186  0C87  0081               	movwf	1
 13187                           
 13188                           ;Dimmer_B1.c: 710: DimmerLights->Signal = 1;
 13189  0C88  0877               	movf	_DimmerLights,w
 13190  0C89  0086               	movwf	6
 13191  0C8A  3001               	movlw	1	; select bank2/3
 13192  0C8B  0087               	movwf	7
 13193  0C8C  1481               	bsf	1,1
 13194                           
 13195                           ;Dimmer_B1.c: 711: DimmerLights->AdjFlag = 0;
 13196  0C8D  0877               	movf	_DimmerLights,w
 13197  0C8E  0086               	movwf	6
 13198  0C8F  3001               	movlw	1	; select bank2/3
 13199  0C90  0087               	movwf	7
 13200  0C91  1181               	bcf	1,3
 13201                           
 13202                           ;Dimmer_B1.c: 712: DimmerLights->AdjStatus = 0;
 13203  0C92  0877               	movf	_DimmerLights,w
 13204  0C93  0086               	movwf	6
 13205  0C94  3001               	movlw	1	; select bank2/3
 13206  0C95  0087               	movwf	7
 13207  0C96  1201               	bcf	1,4
 13208                           
 13209                           ;Dimmer_B1.c: 713: DimmerLights->AdjRF = 0;
 13210  0C97  0877               	movf	_DimmerLights,w
 13211  0C98  0086               	movwf	6
 13212  0C99  3001               	movlw	1	; select bank2/3
 13213  0C9A  0087               	movwf	7
 13214  0C9B  1101               	bcf	1,2
 13215                           
 13216                           ;Dimmer_B1.c: 714: DimmerLights->DimmingTimeValue = 7;
 13217  0C9C  3007               	movlw	7
 13218  0C9D  00A8               	movwf	??_setDimmerLights
 13219  0C9E  0877               	movf	_DimmerLights,w
 13220  0C9F  3E02               	addlw	2
 13221  0CA0  0086               	movwf	6
 13222  0CA1  3001               	movlw	1	; select bank2/3
 13223  0CA2  0087               	movwf	7
 13224  0CA3  0828               	movf	??_setDimmerLights,w
 13225  0CA4  0081               	movwf	1
 13226  0CA5  0008               	return
 13227  0CA6                     __end_of_setDimmerLights:	
 13228                           
 13229                           	psect	text75
 13230  0882                     __ptext75:	
 13231 ;; *************** function _setLED *****************
 13232 ;; Defined at:
 13233 ;;		line 73 in file "../src/LED_B1.c"
 13234 ;; Parameters:    Size  Location     Type
 13235 ;;  led             1    wreg     unsigned char 
 13236 ;;  command         1    2[BANK0 ] unsigned char 
 13237 ;; Auto vars:     Size  Location     Type
 13238 ;;  led             1    3[BANK0 ] unsigned char 
 13239 ;; Return value:  Size  Location     Type
 13240 ;;		None               void
 13241 ;; Registers used:
 13242 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13243 ;; Tracked objects:
 13244 ;;		On entry : 0/0
 13245 ;;		On exit  : 0/0
 13246 ;;		Unchanged: 0/0
 13247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13248 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;Total ram usage:        2 bytes
 13253 ;; Hardware stack levels used:    1
 13254 ;; Hardware stack levels required when called:    6
 13255 ;; This function calls:
 13256 ;;		_LedPointSelect
 13257 ;; This function is called by:
 13258 ;;		_setDimmerLights
 13259 ;;		_setLED_Initialization
 13260 ;;		_setMain_Exception
 13261 ;;		_setSw_Initialization
 13262 ;; This function uses a non-reentrant model
 13263 ;;
 13264                           
 13265                           
 13266                           ;psect for function _setLED
 13267  0882                     _setLED:	
 13268                           
 13269                           ;incstack = 0
 13270                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13271                           ;setLED@led stored from wreg
 13272  0882  0020               	movlb	0	; select bank0
 13273  0883  00A3               	movwf	setLED@led
 13274                           
 13275                           ;LED_B1.c: 74: LedPointSelect(led);
 13276  0884  0823               	movf	setLED@led,w
 13277  0885  319E  2685  3188   	fcall	_LedPointSelect
 13278                           
 13279                           ;LED_B1.c: 75: if (command == 0) {
 13280  0888  0020               	movlb	0	; select bank0
 13281  0889  08A2               	movf	setLED@command,f
 13282  088A  1D03               	skipz
 13283  088B  289E               	goto	l9072
 13284                           
 13285                           ;LED_B1.c: 77: if (led == 1) {
 13286  088C  0823               	movf	setLED@led,w
 13287  088D  3A01               	xorlw	1
 13288  088E  1D03               	skipz
 13289  088F  2892               	goto	l9064
 13290                           
 13291                           ;LED_B1.c: 81: RA3 = 1;
 13292  0890  158C               	bsf	12,3	;volatile
 13293                           
 13294                           ;LED_B1.c: 83: }
 13295  0891  0008               	return
 13296  0892                     l9064:	
 13297                           
 13298                           ;LED_B1.c: 86: else if (led == 2) {
 13299  0892  0823               	movf	setLED@led,w
 13300  0893  3A02               	xorlw	2
 13301  0894  1D03               	skipz
 13302  0895  2898               	goto	l9068
 13303                           
 13304                           ;LED_B1.c: 90: RC7 = 1;
 13305  0896  178E               	bsf	14,7	;volatile
 13306                           
 13307                           ;LED_B1.c: 92: }
 13308  0897  0008               	return
 13309  0898                     l9068:	
 13310                           
 13311                           ;LED_B1.c: 104: else if (led == 99) {
 13312  0898  0823               	movf	setLED@led,w
 13313  0899  3A63               	xorlw	99
 13314  089A  1D03               	skipz
 13315  089B  0008               	return
 13316                           
 13317                           ;LED_B1.c: 108: RB5 = 1;
 13318  089C  168D               	bsf	13,5	;volatile
 13319                           
 13320                           ;LED_B1.c: 110: }
 13321                           ;LED_B1.c: 112: } else if (command == 1) {
 13322  089D  0008               	return
 13323  089E                     l9072:	
 13324  089E  0822               	movf	setLED@command,w
 13325  089F  3A01               	xorlw	1
 13326  08A0  1D03               	skipz
 13327  08A1  28B4               	goto	l9086
 13328                           
 13329                           ;LED_B1.c: 114: if (led == 1) {
 13330  08A2  0823               	movf	setLED@led,w
 13331  08A3  3A01               	xorlw	1
 13332  08A4  1D03               	skipz
 13333  08A5  28A8               	goto	l9078
 13334                           
 13335                           ;LED_B1.c: 118: RA3 = 0;
 13336  08A6  118C               	bcf	12,3	;volatile
 13337                           
 13338                           ;LED_B1.c: 120: }
 13339  08A7  0008               	return
 13340  08A8                     l9078:	
 13341                           
 13342                           ;LED_B1.c: 123: else if (led == 2) {
 13343  08A8  0823               	movf	setLED@led,w
 13344  08A9  3A02               	xorlw	2
 13345  08AA  1D03               	skipz
 13346  08AB  28AE               	goto	l9082
 13347                           
 13348                           ;LED_B1.c: 127: RC7 = 0;
 13349  08AC  138E               	bcf	14,7	;volatile
 13350                           
 13351                           ;LED_B1.c: 129: }
 13352  08AD  0008               	return
 13353  08AE                     l9082:	
 13354                           
 13355                           ;LED_B1.c: 141: else if (led == 99) {
 13356  08AE  0823               	movf	setLED@led,w
 13357  08AF  3A63               	xorlw	99
 13358  08B0  1D03               	skipz
 13359  08B1  0008               	return
 13360                           
 13361                           ;LED_B1.c: 145: RB5 = 0;
 13362  08B2  128D               	bcf	13,5	;volatile
 13363                           
 13364                           ;LED_B1.c: 147: }
 13365                           ;LED_B1.c: 149: } else if (command == 10) {
 13366  08B3  0008               	return
 13367  08B4                     l9086:	
 13368  08B4  0822               	movf	setLED@command,w
 13369  08B5  3A0A               	xorlw	10
 13370  08B6  1D03               	skipz
 13371  08B7  28D8               	goto	l9102
 13372                           
 13373                           ;LED_B1.c: 150: LED->GO = 0;
 13374  08B8  0021               	movlb	1	; select bank1
 13375  08B9  084F               	movf	_LED^(0+128),w
 13376  08BA  0086               	movwf	6
 13377  08BB  3001               	movlw	1	; select bank2/3
 13378  08BC  0087               	movwf	7
 13379  08BD  1081               	bcf	1,1
 13380                           
 13381                           ;LED_B1.c: 151: LED->Time = 0;
 13382  08BE  0A4F               	incf	_LED^(0+128),w
 13383  08BF  0086               	movwf	6
 13384  08C0  3001               	movlw	1	; select bank2/3
 13385  08C1  0087               	movwf	7
 13386  08C2  3000               	movlw	0
 13387  08C3  3FC0               	movwi [0]fsr1
 13388  08C4  3FC1               	movwi [1]fsr1
 13389                           
 13390                           ;LED_B1.c: 153: if (led == 1) {
 13391  08C5  0020               	movlb	0	; select bank0
 13392  08C6  0823               	movf	setLED@led,w
 13393  08C7  3A01               	xorlw	1
 13394  08C8  1D03               	skipz
 13395  08C9  28CC               	goto	l9094
 13396                           
 13397                           ;LED_B1.c: 157: RA3 = 1;
 13398  08CA  158C               	bsf	12,3	;volatile
 13399                           
 13400                           ;LED_B1.c: 159: }
 13401  08CB  0008               	return
 13402  08CC                     l9094:	
 13403                           
 13404                           ;LED_B1.c: 162: else if (led == 2) {
 13405  08CC  0823               	movf	setLED@led,w
 13406  08CD  3A02               	xorlw	2
 13407  08CE  1D03               	skipz
 13408  08CF  28D2               	goto	l9098
 13409                           
 13410                           ;LED_B1.c: 166: RC7 = 1;
 13411  08D0  178E               	bsf	14,7	;volatile
 13412                           
 13413                           ;LED_B1.c: 168: }
 13414  08D1  0008               	return
 13415  08D2                     l9098:	
 13416                           
 13417                           ;LED_B1.c: 180: else if (led == 99) {
 13418  08D2  0823               	movf	setLED@led,w
 13419  08D3  3A63               	xorlw	99
 13420  08D4  1D03               	skipz
 13421  08D5  0008               	return
 13422                           
 13423                           ;LED_B1.c: 184: RB5 = 1;
 13424  08D6  168D               	bsf	13,5	;volatile
 13425                           
 13426                           ;LED_B1.c: 186: }
 13427                           ;LED_B1.c: 188: } else if (command == 11) {
 13428  08D7  0008               	return
 13429  08D8                     l9102:	
 13430  08D8  0822               	movf	setLED@command,w
 13431  08D9  3A0B               	xorlw	11
 13432  08DA  1D03               	skipz
 13433  08DB  0008               	return
 13434                           
 13435                           ;LED_B1.c: 189: LED->GO = 1;
 13436  08DC  0021               	movlb	1	; select bank1
 13437  08DD  084F               	movf	_LED^(0+128),w
 13438  08DE  0086               	movwf	6
 13439  08DF  3001               	movlw	1	; select bank2/3
 13440  08E0  0087               	movwf	7
 13441  08E1  1481               	bsf	1,1
 13442  08E2  0008               	return
 13443  08E3                     __end_of_setLED:	
 13444                           
 13445                           	psect	text76
 13446  1E85                     __ptext76:	
 13447 ;; *************** function _LedPointSelect *****************
 13448 ;; Defined at:
 13449 ;;		line 7 in file "../src/LED_B1.c"
 13450 ;; Parameters:    Size  Location     Type
 13451 ;;  led             1    wreg     unsigned char 
 13452 ;; Auto vars:     Size  Location     Type
 13453 ;;  led             1    1[BANK0 ] unsigned char 
 13454 ;; Return value:  Size  Location     Type
 13455 ;;		None               void
 13456 ;; Registers used:
 13457 ;;		wreg
 13458 ;; Tracked objects:
 13459 ;;		On entry : 0/0
 13460 ;;		On exit  : 0/0
 13461 ;;		Unchanged: 0/0
 13462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13464 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13465 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13467 ;;Total ram usage:        2 bytes
 13468 ;; Hardware stack levels used:    1
 13469 ;; Hardware stack levels required when called:    5
 13470 ;; This function calls:
 13471 ;;		Nothing
 13472 ;; This function is called by:
 13473 ;;		_setLED_Initialization
 13474 ;;		_setLED
 13475 ;;		_setLED_Main
 13476 ;; This function uses a non-reentrant model
 13477 ;;
 13478                           
 13479                           
 13480                           ;psect for function _LedPointSelect
 13481  1E85                     _LedPointSelect:	
 13482                           
 13483                           ;incstack = 0
 13484                           ; Regs used in _LedPointSelect: [wreg]
 13485                           ;LedPointSelect@led stored from wreg
 13486  1E85  0020               	movlb	0	; select bank0
 13487  1E86  00A1               	movwf	LedPointSelect@led
 13488                           
 13489                           ;LED_B1.c: 9: if (led == 1) {
 13490  1E87  0821               	movf	LedPointSelect@led,w
 13491  1E88  3A01               	xorlw	1
 13492  1E89  1D03               	skipz
 13493  1E8A  2E91               	goto	l8964
 13494                           
 13495                           ;LED_B1.c: 10: LED = &VarLED1;
 13496  1E8B  3061               	movlw	_VarLED1& (0+255)
 13497  1E8C  00A0               	movwf	??_LedPointSelect
 13498  1E8D  0820               	movf	??_LedPointSelect,w
 13499  1E8E  0021               	movlb	1	; select bank1
 13500  1E8F  00CF               	movwf	_LED^(0+128)
 13501                           
 13502                           ;LED_B1.c: 11: }
 13503  1E90  0008               	return
 13504  1E91                     l8964:	
 13505                           
 13506                           ;LED_B1.c: 14: else if (led == 2) {
 13507  1E91  0020               	movlb	0	; select bank0
 13508  1E92  0821               	movf	LedPointSelect@led,w
 13509  1E93  3A02               	xorlw	2
 13510  1E94  1D03               	skipz
 13511  1E95  2E9C               	goto	l8968
 13512                           
 13513                           ;LED_B1.c: 15: LED = &VarLED2;
 13514  1E96  3065               	movlw	_VarLED2& (0+255)
 13515  1E97  00A0               	movwf	??_LedPointSelect
 13516  1E98  0820               	movf	??_LedPointSelect,w
 13517  1E99  0021               	movlb	1	; select bank1
 13518  1E9A  00CF               	movwf	_LED^(0+128)
 13519                           
 13520                           ;LED_B1.c: 16: }
 13521  1E9B  0008               	return
 13522  1E9C                     l8968:	
 13523                           
 13524                           ;LED_B1.c: 24: else if (led == 99) {
 13525  1E9C  0020               	movlb	0	; select bank0
 13526  1E9D  0821               	movf	LedPointSelect@led,w
 13527  1E9E  3A63               	xorlw	99
 13528  1E9F  1D03               	skipz
 13529  1EA0  0008               	return
 13530                           
 13531                           ;LED_B1.c: 25: LED = &VarErrLED;
 13532  1EA1  305D               	movlw	_VarErrLED& (0+255)
 13533  1EA2  00A0               	movwf	??_LedPointSelect
 13534  1EA3  0820               	movf	??_LedPointSelect,w
 13535  1EA4  0021               	movlb	1	; select bank1
 13536  1EA5  00CF               	movwf	_LED^(0+128)
 13537  1EA6  0008               	return
 13538  1EA7                     __end_of_LedPointSelect:	
 13539                           
 13540                           	psect	text77
 13541  1105                     __ptext77:	
 13542 ;; *************** function _getMain_All_Error_Status *****************
 13543 ;; Defined at:
 13544 ;;		line 360 in file "../src/Main_B1.c"
 13545 ;; Parameters:    Size  Location     Type
 13546 ;;  command         1    wreg     unsigned char 
 13547 ;; Auto vars:     Size  Location     Type
 13548 ;;  command         1    5[BANK0 ] unsigned char 
 13549 ;;  status          1    6[BANK0 ] unsigned char 
 13550 ;; Return value:  Size  Location     Type
 13551 ;;                  1    wreg      unsigned char 
 13552 ;; Registers used:
 13553 ;;		wreg, status,2, status,0
 13554 ;; Tracked objects:
 13555 ;;		On entry : 0/0
 13556 ;;		On exit  : 0/0
 13557 ;;		Unchanged: 0/0
 13558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13562 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13563 ;;Total ram usage:        7 bytes
 13564 ;; Hardware stack levels used:    1
 13565 ;; Hardware stack levels required when called:    5
 13566 ;; This function calls:
 13567 ;;		Nothing
 13568 ;; This function is called by:
 13569 ;;		_setDimmerLights_Main
 13570 ;;		_setDimmerLights
 13571 ;;		_Load_Main
 13572 ;;		_setTemp_Main
 13573 ;;		_setRF_Main
 13574 ;;		_getRxData
 13575 ;;		_Switch_Main
 13576 ;; This function uses a non-reentrant model
 13577 ;;
 13578                           
 13579                           
 13580                           ;psect for function _getMain_All_Error_Status
 13581  1105                     _getMain_All_Error_Status:	
 13582                           
 13583                           ;incstack = 0
 13584                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 13585                           ;getMain_All_Error_Status@command stored from wreg
 13586  1105  0020               	movlb	0	; select bank0
 13587  1106  00A5               	movwf	getMain_All_Error_Status@command
 13588                           
 13589                           ;Main_B1.c: 361: char status = 0;
 13590  1107  01A6               	clrf	getMain_All_Error_Status@status
 13591                           
 13592                           ;Main_B1.c: 372: if (status == 0 && command != 2) {
 13593  1108  08A6               	movf	getMain_All_Error_Status@status,f
 13594  1109  1D03               	skipz
 13595  110A  291F               	goto	l9044
 13596  110B  0825               	movf	getMain_All_Error_Status@command,w
 13597  110C  3A02               	xorlw	2
 13598  110D  1903               	skipnz
 13599  110E  291F               	goto	l9044
 13600                           
 13601                           ;Main_B1.c: 373: status = Temp.ERROR == 1 ? 2 : 0;
 13602  110F  0021               	movlb	1	; select bank1
 13603  1110  18D8               	btfsc	_Temp^(0+128),1
 13604  1111  2916               	goto	l9042
 13605  1112  0020               	movlb	0	; select bank0
 13606  1113  01A1               	clrf	_getMain_All_Error_Status$3927
 13607  1114  01A2               	clrf	_getMain_All_Error_Status$3927+1
 13608  1115  291B               	goto	l1593
 13609  1116                     l9042:	
 13610  1116  3002               	movlw	2
 13611  1117  0020               	movlb	0	; select bank0
 13612  1118  00A1               	movwf	_getMain_All_Error_Status$3927
 13613  1119  3000               	movlw	0
 13614  111A  00A2               	movwf	_getMain_All_Error_Status$3927+1
 13615  111B                     l1593:	
 13616  111B  0821               	movf	_getMain_All_Error_Status$3927,w
 13617  111C  00A0               	movwf	??_getMain_All_Error_Status
 13618  111D  0820               	movf	??_getMain_All_Error_Status,w
 13619  111E  00A6               	movwf	getMain_All_Error_Status@status
 13620  111F                     l9044:	
 13621                           
 13622                           ;Main_B1.c: 374: }
 13623                           ;Main_B1.c: 379: if (status == 0 && command != 3) {
 13624  111F  08A6               	movf	getMain_All_Error_Status@status,f
 13625  1120  1D03               	skipz
 13626  1121  2936               	goto	l1594
 13627  1122  0825               	movf	getMain_All_Error_Status@command,w
 13628  1123  3A03               	xorlw	3
 13629  1124  1903               	skipnz
 13630  1125  2936               	goto	l1594
 13631                           
 13632                           ;Main_B1.c: 380: status = Load.ERROR == 1 ? 3 : 0;
 13633  1126  0022               	movlb	2	; select bank2
 13634  1127  1AA7               	btfsc	_Load^(0+256),5
 13635  1128  292D               	goto	l9052
 13636  1129  0020               	movlb	0	; select bank0
 13637  112A  01A3               	clrf	_getMain_All_Error_Status$3936
 13638  112B  01A4               	clrf	_getMain_All_Error_Status$3936+1
 13639  112C  2932               	goto	l1598
 13640  112D                     l9052:	
 13641  112D  3003               	movlw	3
 13642  112E  0020               	movlb	0	; select bank0
 13643  112F  00A3               	movwf	_getMain_All_Error_Status$3936
 13644  1130  3000               	movlw	0
 13645  1131  00A4               	movwf	_getMain_All_Error_Status$3936+1
 13646  1132                     l1598:	
 13647  1132  0823               	movf	_getMain_All_Error_Status$3936,w
 13648  1133  00A0               	movwf	??_getMain_All_Error_Status
 13649  1134  0820               	movf	??_getMain_All_Error_Status,w
 13650  1135  00A6               	movwf	getMain_All_Error_Status@status
 13651  1136                     l1594:	
 13652                           
 13653                           ;Main_B1.c: 381: }
 13654                           ;Main_B1.c: 397: return status;
 13655  1136  0826               	movf	getMain_All_Error_Status@status,w
 13656  1137  0008               	return
 13657  1138                     __end_of_getMain_All_Error_Status:	
 13658                           
 13659                           	psect	text78
 13660  1AC8                     __ptext78:	
 13661 ;; *************** function _getLoad_OK *****************
 13662 ;; Defined at:
 13663 ;;		line 217 in file "../src/OverLoad_B1.c"
 13664 ;; Parameters:    Size  Location     Type
 13665 ;;		None
 13666 ;; Auto vars:     Size  Location     Type
 13667 ;;  ok              1    0[BANK0 ] unsigned char 
 13668 ;; Return value:  Size  Location     Type
 13669 ;;                  1    wreg      unsigned char 
 13670 ;; Registers used:
 13671 ;;		wreg, status,2
 13672 ;; Tracked objects:
 13673 ;;		On entry : 0/0
 13674 ;;		On exit  : 0/0
 13675 ;;		Unchanged: 0/0
 13676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13678 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13680 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13681 ;;Total ram usage:        1 bytes
 13682 ;; Hardware stack levels used:    1
 13683 ;; Hardware stack levels required when called:    5
 13684 ;; This function calls:
 13685 ;;		Nothing
 13686 ;; This function is called by:
 13687 ;;		_setDimmerLights_Main
 13688 ;; This function uses a non-reentrant model
 13689 ;;
 13690                           
 13691                           
 13692                           ;psect for function _getLoad_OK
 13693  1AC8                     _getLoad_OK:	
 13694                           
 13695                           ;OverLoad_B1.c: 218: char ok = Load.OK == 1 ? 1 : 0;
 13696                           
 13697                           ;incstack = 0
 13698                           ; Regs used in _getLoad_OK: [wreg+status,2]
 13699  1AC8  3000               	movlw	0
 13700  1AC9  0022               	movlb	2	; select bank2
 13701  1ACA  1BA7               	btfsc	_Load^(0+256),7
 13702  1ACB  3001               	movlw	1
 13703  1ACC  0020               	movlb	0	; select bank0
 13704  1ACD  00A0               	movwf	getLoad_OK@ok
 13705                           
 13706                           ;OverLoad_B1.c: 219: return ok;
 13707  1ACE  0820               	movf	getLoad_OK@ok,w
 13708  1ACF  0008               	return
 13709  1AD0                     __end_of_getLoad_OK:	
 13710                           
 13711                           	psect	text79
 13712  1D11                     __ptext79:	
 13713 ;; *************** function _DimmerLights_Initialization *****************
 13714 ;; Defined at:
 13715 ;;		line 342 in file "../src/Dimmer_B1.c"
 13716 ;; Parameters:    Size  Location     Type
 13717 ;;		None
 13718 ;; Auto vars:     Size  Location     Type
 13719 ;;		None
 13720 ;; Return value:  Size  Location     Type
 13721 ;;		None               void
 13722 ;; Registers used:
 13723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13724 ;; Tracked objects:
 13725 ;;		On entry : 0/0
 13726 ;;		On exit  : 0/0
 13727 ;;		Unchanged: 0/0
 13728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;Total ram usage:        1 bytes
 13734 ;; Hardware stack levels used:    1
 13735 ;; Hardware stack levels required when called:    7
 13736 ;; This function calls:
 13737 ;;		_Dimmer_Initialization
 13738 ;;		_setDimmerLights_Initialization
 13739 ;; This function is called by:
 13740 ;;		_main
 13741 ;; This function uses a non-reentrant model
 13742 ;;
 13743                           
 13744                           
 13745                           ;psect for function _DimmerLights_Initialization
 13746  1D11                     _DimmerLights_Initialization:	
 13747                           
 13748                           ;Dimmer_B1.c: 345: DimmerLights11 = &DimmerLights1;
 13749                           
 13750                           ;incstack = 0
 13751                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13752  1D11  30BE               	movlw	_DimmerLights1& (0+255)
 13753  1D12  0020               	movlb	0	; select bank0
 13754  1D13  00A4               	movwf	??_DimmerLights_Initialization
 13755  1D14  0824               	movf	??_DimmerLights_Initialization,w
 13756  1D15  0021               	movlb	1	; select bank1
 13757  1D16  00CC               	movwf	_DimmerLights11^(0+128)
 13758                           
 13759                           ;Dimmer_B1.c: 346: setDimmerLights_Initialization(1);
 13760  1D17  3001               	movlw	1
 13761  1D18  3187  27D9  319D   	fcall	_setDimmerLights_Initialization
 13762                           
 13763                           ;Dimmer_B1.c: 350: DimmerLights22 = &DimmerLights2;
 13764  1D1B  30CD               	movlw	_DimmerLights2& (0+255)
 13765  1D1C  0020               	movlb	0	; select bank0
 13766  1D1D  00A4               	movwf	??_DimmerLights_Initialization
 13767  1D1E  0824               	movf	??_DimmerLights_Initialization,w
 13768  1D1F  0021               	movlb	1	; select bank1
 13769  1D20  00CD               	movwf	_DimmerLights22^(0+128)
 13770                           
 13771                           ;Dimmer_B1.c: 351: setDimmerLights_Initialization(2);
 13772  1D21  3002               	movlw	2
 13773  1D22  3187  27D9  319D   	fcall	_setDimmerLights_Initialization
 13774                           
 13775                           ;Dimmer_B1.c: 360: Dimmer_Initialization();
 13776  1D25  319A  2273         	fcall	_Dimmer_Initialization
 13777  1D27  0008               	return
 13778  1D28                     __end_of_DimmerLights_Initialization:	
 13779                           
 13780                           	psect	text80
 13781  07D9                     __ptext80:	
 13782 ;; *************** function _setDimmerLights_Initialization *****************
 13783 ;; Defined at:
 13784 ;;		line 366 in file "../src/Dimmer_B1.c"
 13785 ;; Parameters:    Size  Location     Type
 13786 ;;  lights          1    wreg     unsigned char 
 13787 ;; Auto vars:     Size  Location     Type
 13788 ;;  lights          1    3[BANK0 ] unsigned char 
 13789 ;; Return value:  Size  Location     Type
 13790 ;;		None               void
 13791 ;; Registers used:
 13792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13793 ;; Tracked objects:
 13794 ;;		On entry : 0/0
 13795 ;;		On exit  : 0/0
 13796 ;;		Unchanged: 0/0
 13797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13802 ;;Total ram usage:        2 bytes
 13803 ;; Hardware stack levels used:    1
 13804 ;; Hardware stack levels required when called:    6
 13805 ;; This function calls:
 13806 ;;		_DimmerLightsPointSelect
 13807 ;; This function is called by:
 13808 ;;		_DimmerLights_Initialization
 13809 ;; This function uses a non-reentrant model
 13810 ;;
 13811                           
 13812                           
 13813                           ;psect for function _setDimmerLights_Initialization
 13814  07D9                     _setDimmerLights_Initialization:	
 13815                           
 13816                           ;incstack = 0
 13817                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13818                           ;setDimmerLights_Initialization@lights stored from wreg
 13819  07D9  0020               	movlb	0	; select bank0
 13820  07DA  00A3               	movwf	setDimmerLights_Initialization@lights
 13821                           
 13822                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 13823  07DB  0823               	movf	setDimmerLights_Initialization@lights,w
 13824  07DC  319C  2430         	fcall	_DimmerLightsPointSelect
 13825                           
 13826                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13827  07DE  3020               	movlw	32
 13828  07DF  0020               	movlb	0	; select bank0
 13829  07E0  00A2               	movwf	??_setDimmerLights_Initialization
 13830  07E1  0877               	movf	_DimmerLights,w
 13831  07E2  3E05               	addlw	5
 13832  07E3  0086               	movwf	6
 13833  07E4  3001               	movlw	1	; select bank2/3
 13834  07E5  0087               	movwf	7
 13835  07E6  0822               	movf	??_setDimmerLights_Initialization,w
 13836  07E7  0081               	movwf	1
 13837                           
 13838                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13839  07E8  303C               	movlw	60
 13840  07E9  00A2               	movwf	??_setDimmerLights_Initialization
 13841  07EA  0877               	movf	_DimmerLights,w
 13842  07EB  3E06               	addlw	6
 13843  07EC  0086               	movwf	6
 13844  07ED  3001               	movlw	1	; select bank2/3
 13845  07EE  0087               	movwf	7
 13846  07EF  0822               	movf	??_setDimmerLights_Initialization,w
 13847  07F0  0081               	movwf	1
 13848                           
 13849                           ;Dimmer_B1.c: 385: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13850  07F1  0877               	movf	_DimmerLights,w
 13851  07F2  3E06               	addlw	6
 13852  07F3  0086               	movwf	6
 13853  07F4  3001               	movlw	1	; select bank2/3
 13854  07F5  0087               	movwf	7
 13855  07F6  0801               	movf	1,w
 13856  07F7  00A2               	movwf	??_setDimmerLights_Initialization
 13857  07F8  0877               	movf	_DimmerLights,w
 13858  07F9  3E04               	addlw	4
 13859  07FA  0086               	movwf	6
 13860  07FB  3001               	movlw	1	; select bank2/3
 13861  07FC  0087               	movwf	7
 13862  07FD  0822               	movf	??_setDimmerLights_Initialization,w
 13863  07FE  0081               	movwf	1
 13864  07FF  0008               	return
 13865  0800                     __end_of_setDimmerLights_Initialization:	
 13866                           
 13867                           	psect	text81
 13868  1A73                     __ptext81:	
 13869 ;; *************** function _Dimmer_Initialization *****************
 13870 ;; Defined at:
 13871 ;;		line 936 in file "../src/Dimmer_B1.c"
 13872 ;; Parameters:    Size  Location     Type
 13873 ;;		None
 13874 ;; Auto vars:     Size  Location     Type
 13875 ;;		None
 13876 ;; Return value:  Size  Location     Type
 13877 ;;		None               void
 13878 ;; Registers used:
 13879 ;;		None
 13880 ;; Tracked objects:
 13881 ;;		On entry : 0/0
 13882 ;;		On exit  : 0/0
 13883 ;;		Unchanged: 0/0
 13884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13889 ;;Total ram usage:        0 bytes
 13890 ;; Hardware stack levels used:    1
 13891 ;; Hardware stack levels required when called:    5
 13892 ;; This function calls:
 13893 ;;		Nothing
 13894 ;; This function is called by:
 13895 ;;		_DimmerLights_Initialization
 13896 ;; This function uses a non-reentrant model
 13897 ;;
 13898                           
 13899                           
 13900                           ;psect for function _Dimmer_Initialization
 13901  1A73                     _Dimmer_Initialization:	
 13902                           
 13903                           ;incstack = 0
 13904                           ; Regs used in _Dimmer_Initialization: []
 13905  1A73  0008               	return
 13906  1A74                     __end_of_Dimmer_Initialization:	
 13907                           
 13908                           	psect	text82
 13909  1AC0                     __ptext82:	
 13910 ;; *************** function _DelayOff_Main *****************
 13911 ;; Defined at:
 13912 ;;		line 41 in file "../src/DelayOff_B1.c"
 13913 ;; Parameters:    Size  Location     Type
 13914 ;;		None
 13915 ;; Auto vars:     Size  Location     Type
 13916 ;;		None
 13917 ;; Return value:  Size  Location     Type
 13918 ;;		None               void
 13919 ;; Registers used:
 13920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13921 ;; Tracked objects:
 13922 ;;		On entry : 0/0
 13923 ;;		On exit  : 0/0
 13924 ;;		Unchanged: 0/0
 13925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13930 ;;Total ram usage:        0 bytes
 13931 ;; Hardware stack levels used:    1
 13932 ;; Hardware stack levels required when called:   11
 13933 ;; This function calls:
 13934 ;;		_DlyOff_Main
 13935 ;; This function is called by:
 13936 ;;		_main
 13937 ;; This function uses a non-reentrant model
 13938 ;;
 13939                           
 13940                           
 13941                           ;psect for function _DelayOff_Main
 13942  1AC0                     _DelayOff_Main:	
 13943                           
 13944                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13945                           
 13946                           ;incstack = 0
 13947                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13948  1AC0  3001               	movlw	1
 13949  1AC1  3188  2021  319A   	fcall	_DlyOff_Main
 13950                           
 13951                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 13952  1AC4  3002               	movlw	2
 13953  1AC5  3188  2021         	fcall	_DlyOff_Main
 13954  1AC7  0008               	return
 13955  1AC8                     __end_of_DelayOff_Main:	
 13956                           
 13957                           	psect	text83
 13958  0821                     __ptext83:	
 13959 ;; *************** function _DlyOff_Main *****************
 13960 ;; Defined at:
 13961 ;;		line 62 in file "../src/DelayOff_B1.c"
 13962 ;; Parameters:    Size  Location     Type
 13963 ;;  sw              1    wreg     unsigned char 
 13964 ;; Auto vars:     Size  Location     Type
 13965 ;;  sw              1   72[BANK0 ] unsigned char 
 13966 ;; Return value:  Size  Location     Type
 13967 ;;		None               void
 13968 ;; Registers used:
 13969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13970 ;; Tracked objects:
 13971 ;;		On entry : 0/0
 13972 ;;		On exit  : 0/0
 13973 ;;		Unchanged: 0/0
 13974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13977 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13978 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13979 ;;Total ram usage:        3 bytes
 13980 ;; Hardware stack levels used:    1
 13981 ;; Hardware stack levels required when called:   10
 13982 ;; This function calls:
 13983 ;;		_DelayOffPointSelect
 13984 ;;		_getDimmerLights_Status
 13985 ;;		_setDimmerLights_SwOff
 13986 ;;		_setDimmerLights_SwOn
 13987 ;;		_setRF_DimmerLights
 13988 ;; This function is called by:
 13989 ;;		_DelayOff_Main
 13990 ;; This function uses a non-reentrant model
 13991 ;;
 13992                           
 13993                           
 13994                           ;psect for function _DlyOff_Main
 13995  0821                     _DlyOff_Main:	
 13996                           
 13997                           ;incstack = 0
 13998                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13999                           ;DlyOff_Main@sw stored from wreg
 14000  0821  0020               	movlb	0	; select bank0
 14001  0822  00E8               	movwf	DlyOff_Main@sw
 14002                           
 14003                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 14004  0823  0868               	movf	DlyOff_Main@sw,w
 14005  0824  319C  247D  3188   	fcall	_DelayOffPointSelect
 14006                           
 14007                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 14008  0827  0876               	movf	_DelayOff,w
 14009  0828  0086               	movwf	6
 14010  0829  3001               	movlw	1	; select bank2/3
 14011  082A  0087               	movwf	7
 14012  082B  1C81               	btfss	1,1
 14013  082C  0008               	return
 14014                           
 14015                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 14016  082D  0876               	movf	_DelayOff,w
 14017  082E  0086               	movwf	6
 14018  082F  3001               	movlw	1	; select bank2/3
 14019  0830  0087               	movwf	7
 14020  0831  3001               	movlw	1
 14021  0832  0781               	addwf	1,f
 14022  0833  3141               	addfsr 1,1
 14023  0834  1803               	skipnc
 14024  0835  0A81               	incf	1,f
 14025                           
 14026                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 14027  0836  0876               	movf	_DelayOff,w
 14028  0837  0086               	movwf	6
 14029  0838  3001               	movlw	1	; select bank2/3
 14030  0839  0087               	movwf	7
 14031  083A  3F40               	moviw [0]fsr1
 14032  083B  0020               	movlb	0	; select bank0
 14033  083C  00E6               	movwf	??_DlyOff_Main
 14034  083D  3F41               	moviw [1]fsr1
 14035  083E  00E7               	movwf	??_DlyOff_Main+1
 14036  083F  3016               	movlw	22
 14037  0840  0267               	subwf	??_DlyOff_Main+1,w
 14038  0841  3012               	movlw	18
 14039  0842  1903               	skipnz
 14040  0843  0266               	subwf	??_DlyOff_Main,w
 14041  0844  1C03               	skipc
 14042  0845  0008               	return
 14043                           
 14044                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 14045  0846  0876               	movf	_DelayOff,w
 14046  0847  0086               	movwf	6
 14047  0848  3001               	movlw	1	; select bank2/3
 14048  0849  0087               	movwf	7
 14049  084A  3000               	movlw	0
 14050  084B  3FC0               	movwi [0]fsr1
 14051  084C  3FC1               	movwi [1]fsr1
 14052                           
 14053                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 14054  084D  3001               	movlw	1
 14055  084E  00E6               	movwf	??_DlyOff_Main
 14056  084F  0876               	movf	_DelayOff,w
 14057  0850  0086               	movwf	6
 14058  0851  3001               	movlw	1	; select bank2/3
 14059  0852  0087               	movwf	7
 14060  0853  0866               	movf	??_DlyOff_Main,w
 14061  0854  0781               	addwf	1,f
 14062                           
 14063                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 14064  0855  0876               	movf	_DelayOff,w
 14065  0856  0086               	movwf	6
 14066  0857  3001               	movlw	1	; select bank2/3
 14067  0858  0087               	movwf	7
 14068  0859  0876               	movf	_DelayOff,w
 14069  085A  0084               	movwf	4
 14070  085B  3001               	movlw	1	; select bank2/3
 14071  085C  0085               	movwf	5
 14072  085D  0800               	movf	0,w
 14073  085E  0201               	subwf	1,w
 14074  085F  1C03               	skipc
 14075  0860  0008               	return
 14076                           
 14077                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 14078  0861  0876               	movf	_DelayOff,w
 14079  0862  0086               	movwf	6
 14080  0863  3001               	movlw	1	; select bank2/3
 14081  0864  0087               	movwf	7
 14082  0865  0181               	clrf	1
 14083                           
 14084                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14085  0866  0876               	movf	_DelayOff,w
 14086  0867  0086               	movwf	6
 14087  0868  3001               	movlw	1	; select bank2/3
 14088  0869  0087               	movwf	7
 14089  086A  1081               	bcf	1,1
 14090                           
 14091                           ;DelayOff_B1.c: 74: setDimmerLights_SwOn(sw);
 14092  086B  0868               	movf	DlyOff_Main@sw,w
 14093  086C  3192  2287  3188   	fcall	_setDimmerLights_SwOn
 14094                           
 14095                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 14096  086F  0020               	movlb	0	; select bank0
 14097  0870  0868               	movf	DlyOff_Main@sw,w
 14098  0871  319B  23A4  3188   	fcall	_getDimmerLights_Status
 14099  0874  3A01               	xorlw	1
 14100  0875  1D03               	skipz
 14101  0876  287C               	goto	l582
 14102                           
 14103                           ;DelayOff_B1.c: 76: setDimmerLights_SwOff(sw);
 14104  0877  0020               	movlb	0	; select bank0
 14105  0878  0868               	movf	DlyOff_Main@sw,w
 14106  0879  3196  26DF  3188   	fcall	_setDimmerLights_SwOff
 14107  087C                     l582:	
 14108                           
 14109                           ;DelayOff_B1.c: 77: }
 14110                           ;DelayOff_B1.c: 78: setRF_DimmerLights(sw, 0);
 14111  087C  0020               	movlb	0	; select bank0
 14112  087D  01DD               	clrf	setRF_DimmerLights@on
 14113  087E  0868               	movf	DlyOff_Main@sw,w
 14114  087F  3189  214B         	fcall	_setRF_DimmerLights
 14115  0881  0008               	return
 14116  0882                     __end_of_DlyOff_Main:	
 14117                           
 14118                           	psect	text84
 14119  1287                     __ptext84:	
 14120 ;; *************** function _setDimmerLights_SwOn *****************
 14121 ;; Defined at:
 14122 ;;		line 562 in file "../src/Dimmer_B1.c"
 14123 ;; Parameters:    Size  Location     Type
 14124 ;;  sw              1    wreg     unsigned char 
 14125 ;; Auto vars:     Size  Location     Type
 14126 ;;  sw              1   68[BANK0 ] unsigned char 
 14127 ;;  idle            1   67[BANK0 ] unsigned char 
 14128 ;; Return value:  Size  Location     Type
 14129 ;;		None               void
 14130 ;; Registers used:
 14131 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14132 ;; Tracked objects:
 14133 ;;		On entry : 0/0
 14134 ;;		On exit  : 0/0
 14135 ;;		Unchanged: 0/0
 14136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14140 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14141 ;;Total ram usage:        3 bytes
 14142 ;; Hardware stack levels used:    1
 14143 ;; Hardware stack levels required when called:    9
 14144 ;; This function calls:
 14145 ;;		_DimmerLightsPointSelect
 14146 ;;		_getAll_DimmerLights_AdjGO
 14147 ;;		_setBuz
 14148 ;;		_setDimmerLights_Trigger
 14149 ;;		_setRF_DimmerLights
 14150 ;;		_setTxData
 14151 ;; This function is called by:
 14152 ;;		_DlyOff_Main
 14153 ;;		_setRFSW_Control
 14154 ;;		_setSw_Main
 14155 ;; This function uses a non-reentrant model
 14156 ;;
 14157                           
 14158                           
 14159                           ;psect for function _setDimmerLights_SwOn
 14160  1287                     _setDimmerLights_SwOn:	
 14161                           
 14162                           ;incstack = 0
 14163                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14164                           ;setDimmerLights_SwOn@sw stored from wreg
 14165  1287  0020               	movlb	0	; select bank0
 14166  1288  00E4               	movwf	setDimmerLights_SwOn@sw
 14167                           
 14168                           ;Dimmer_B1.c: 563: DimmerLightsPointSelect(sw);
 14169  1289  0864               	movf	setDimmerLights_SwOn@sw,w
 14170  128A  319C  2430  3192   	fcall	_DimmerLightsPointSelect
 14171                           
 14172                           ;Dimmer_B1.c: 564: char idle = 0;
 14173  128D  0020               	movlb	0	; select bank0
 14174  128E  01E3               	clrf	setDimmerLights_SwOn@idle
 14175                           
 14176                           ;Dimmer_B1.c: 566: idle = getAll_DimmerLights_AdjGO();
 14177  128F  319C  24FA  3192   	fcall	_getAll_DimmerLights_AdjGO
 14178  1292  0020               	movlb	0	; select bank0
 14179  1293  00E2               	movwf	??_setDimmerLights_SwOn
 14180  1294  0862               	movf	??_setDimmerLights_SwOn,w
 14181  1295  00E3               	movwf	setDimmerLights_SwOn@idle
 14182                           
 14183                           ;Dimmer_B1.c: 568: if (idle == 0) {
 14184  1296  08E3               	movf	setDimmerLights_SwOn@idle,f
 14185  1297  1D03               	skipz
 14186  1298  0008               	return
 14187                           
 14188                           ;Dimmer_B1.c: 569: DimmerLights->SwFlag = 1;
 14189  1299  0877               	movf	_DimmerLights,w
 14190  129A  3E09               	addlw	9
 14191  129B  0086               	movwf	6
 14192  129C  3001               	movlw	1	; select bank2/3
 14193  129D  0087               	movwf	7
 14194  129E  1701               	bsf	1,6
 14195                           
 14196                           ;Dimmer_B1.c: 570: setBuz(1, 100);
 14197  129F  3064               	movlw	100
 14198  12A0  00A9               	movwf	setBuz@time
 14199  12A1  3000               	movlw	0
 14200  12A2  00AA               	movwf	setBuz@time+1
 14201  12A3  3001               	movlw	1
 14202  12A4  3195  25D1  3192   	fcall	_setBuz
 14203                           
 14204                           ;Dimmer_B1.c: 571: if (DimmerLights->Status == 0) {
 14205  12A7  0877               	movf	_DimmerLights,w
 14206  12A8  0086               	movwf	6
 14207  12A9  3001               	movlw	1	; select bank2/3
 14208  12AA  0087               	movwf	7
 14209  12AB  1A81               	btfsc	1,5
 14210  12AC  2AC3               	goto	l8870
 14211                           
 14212                           ;Dimmer_B1.c: 572: DimmerLights->Status = 1;
 14213  12AD  0877               	movf	_DimmerLights,w
 14214  12AE  0086               	movwf	6
 14215  12AF  3001               	movlw	1	; select bank2/3
 14216  12B0  0087               	movwf	7
 14217  12B1  1681               	bsf	1,5
 14218                           
 14219                           ;Dimmer_B1.c: 573: setDimmerLights_Trigger(sw, 1);
 14220  12B2  0020               	movlb	0	; select bank0
 14221  12B3  01A2               	clrf	setDimmerLights_Trigger@command
 14222  12B4  0AA2               	incf	setDimmerLights_Trigger@command,f
 14223  12B5  0864               	movf	setDimmerLights_SwOn@sw,w
 14224  12B6  319D  25C7  3192   	fcall	_setDimmerLights_Trigger
 14225                           
 14226                           ;Dimmer_B1.c: 574: setRF_DimmerLights(sw, 1);
 14227  12B9  0020               	movlb	0	; select bank0
 14228  12BA  01DD               	clrf	setRF_DimmerLights@on
 14229  12BB  0ADD               	incf	setRF_DimmerLights@on,f
 14230  12BC  0864               	movf	setDimmerLights_SwOn@sw,w
 14231  12BD  3189  214B  3192   	fcall	_setRF_DimmerLights
 14232                           
 14233                           ;Dimmer_B1.c: 575: setTxData();
 14234  12C0  318C  24A6         	fcall	_setTxData
 14235                           
 14236                           ;Dimmer_B1.c: 576: } else {
 14237  12C2  0008               	return
 14238  12C3                     l8870:	
 14239                           
 14240                           ;Dimmer_B1.c: 577: DimmerLights->Status = 0;
 14241  12C3  0877               	movf	_DimmerLights,w
 14242  12C4  0086               	movwf	6
 14243  12C5  3001               	movlw	1	; select bank2/3
 14244  12C6  0087               	movwf	7
 14245  12C7  1281               	bcf	1,5
 14246  12C8  0008               	return
 14247  12C9                     __end_of_setDimmerLights_SwOn:	
 14248                           
 14249                           	psect	text85
 14250  15D1                     __ptext85:	
 14251 ;; *************** function _setBuz *****************
 14252 ;; Defined at:
 14253 ;;		line 22 in file "../src/Buzzer_B1.c"
 14254 ;; Parameters:    Size  Location     Type
 14255 ;;  count           1    wreg     unsigned char 
 14256 ;;  time            2    9[BANK0 ] int 
 14257 ;; Auto vars:     Size  Location     Type
 14258 ;;  count           1   12[BANK0 ] unsigned char 
 14259 ;; Return value:  Size  Location     Type
 14260 ;;		None               void
 14261 ;; Registers used:
 14262 ;;		wreg, status,2, status,0, pclath, cstack
 14263 ;; Tracked objects:
 14264 ;;		On entry : 0/0
 14265 ;;		On exit  : 0/0
 14266 ;;		Unchanged: 0/0
 14267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14268 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;Total ram usage:        4 bytes
 14273 ;; Hardware stack levels used:    1
 14274 ;; Hardware stack levels required when called:    6
 14275 ;; This function calls:
 14276 ;;		___awdiv
 14277 ;; This function is called by:
 14278 ;;		_setDimmerLights_Main
 14279 ;;		_setDimmerLights_SwOn
 14280 ;;		_my_MainTimer
 14281 ;;		_setMain_Exception
 14282 ;;		_setLog_Code
 14283 ;;		_setControl_Lights_Table
 14284 ;;		_setSw_Main
 14285 ;; This function uses a non-reentrant model
 14286 ;;
 14287                           
 14288                           
 14289                           ;psect for function _setBuz
 14290  15D1                     _setBuz:	
 14291                           
 14292                           ;incstack = 0
 14293                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 14294                           ;setBuz@count stored from wreg
 14295  15D1  0020               	movlb	0	; select bank0
 14296  15D2  00AC               	movwf	setBuz@count
 14297                           
 14298                           ;Buzzer_B1.c: 23: time /= 10;
 14299  15D3  300A               	movlw	10
 14300  15D4  00A0               	movwf	___awdiv@divisor
 14301  15D5  3000               	movlw	0
 14302  15D6  00A1               	movwf	___awdiv@divisor+1
 14303  15D7  082A               	movf	setBuz@time+1,w
 14304  15D8  01A3               	clrf	___awdiv@dividend+1
 14305  15D9  07A3               	addwf	___awdiv@dividend+1,f
 14306  15DA  0829               	movf	setBuz@time,w
 14307  15DB  01A2               	clrf	___awdiv@dividend
 14308  15DC  07A2               	addwf	___awdiv@dividend,f
 14309  15DD  3194  24CF  3195   	fcall	___awdiv
 14310  15E0  0020               	movlb	0	; select bank0
 14311  15E1  0821               	movf	?___awdiv+1,w
 14312  15E2  01AA               	clrf	setBuz@time+1
 14313  15E3  07AA               	addwf	setBuz@time+1,f
 14314  15E4  0820               	movf	?___awdiv,w
 14315  15E5  01A9               	clrf	setBuz@time
 14316  15E6  07A9               	addwf	setBuz@time,f
 14317                           
 14318                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 14319  15E7  0021               	movlb	1	; select bank1
 14320  15E8  1C30               	btfss	_Buz1^(0+128),0
 14321  15E9  0008               	return
 14322                           
 14323                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 14324  15EA  18B0               	btfsc	_Buz1^(0+128),1
 14325  15EB  2E02               	goto	l96
 14326                           
 14327                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 14328  15EC  14B0               	bsf	_Buz1^(0+128),1
 14329                           
 14330                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 14331  15ED  01B1               	clrf	(_Buz1^(0+128)+1)
 14332  15EE  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 14333                           
 14334                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 14335  15EF  0020               	movlb	0	; select bank0
 14336  15F0  082C               	movf	setBuz@count,w
 14337  15F1  00AB               	movwf	??_setBuz
 14338  15F2  082B               	movf	??_setBuz,w
 14339  15F3  0021               	movlb	1	; select bank1
 14340  15F4  00B3               	movwf	(_Buz1^(0+128)+3)
 14341                           
 14342                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 14343  15F5  0020               	movlb	0	; select bank0
 14344  15F6  082A               	movf	setBuz@time+1,w
 14345  15F7  0021               	movlb	1	; select bank1
 14346  15F8  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 14347  15F9  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 14348  15FA  0020               	movlb	0	; select bank0
 14349  15FB  0829               	movf	setBuz@time,w
 14350  15FC  0021               	movlb	1	; select bank1
 14351  15FD  01B6               	clrf	(_Buz1^(0+128)+6)
 14352  15FE  07B6               	addwf	(_Buz1^(0+128)+6),f
 14353                           
 14354                           ;Buzzer_B1.c: 30: RB3 = 1;
 14355  15FF  0020               	movlb	0	; select bank0
 14356  1600  158D               	bsf	13,3	;volatile
 14357                           
 14358                           ;Buzzer_B1.c: 31: } else {
 14359  1601  0008               	return
 14360  1602                     l96:	
 14361                           
 14362                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 14363  1602  19B0               	btfsc	_Buz1^(0+128),3
 14364  1603  2E16               	goto	l98
 14365                           
 14366                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 14367  1604  15B0               	bsf	_Buz1^(0+128),3
 14368                           
 14369                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 14370  1605  0020               	movlb	0	; select bank0
 14371  1606  082C               	movf	setBuz@count,w
 14372  1607  00AB               	movwf	??_setBuz
 14373  1608  082B               	movf	??_setBuz,w
 14374  1609  0021               	movlb	1	; select bank1
 14375  160A  00B4               	movwf	(_Buz1^(0+128)+4)
 14376                           
 14377                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 14378  160B  0020               	movlb	0	; select bank0
 14379  160C  082A               	movf	setBuz@time+1,w
 14380  160D  0021               	movlb	1	; select bank1
 14381  160E  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 14382  160F  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 14383  1610  0020               	movlb	0	; select bank0
 14384  1611  0829               	movf	setBuz@time,w
 14385  1612  0021               	movlb	1	; select bank1
 14386  1613  01B8               	clrf	(_Buz1^(0+128)+8)
 14387  1614  07B8               	addwf	(_Buz1^(0+128)+8),f
 14388                           
 14389                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 14390  1615  0008               	return
 14391  1616                     l98:	
 14392  1616  1A30               	btfsc	_Buz1^(0+128),4
 14393  1617  0008               	return
 14394                           
 14395                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 14396  1618  1630               	bsf	_Buz1^(0+128),4
 14397                           
 14398                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 14399  1619  0020               	movlb	0	; select bank0
 14400  161A  082C               	movf	setBuz@count,w
 14401  161B  00AB               	movwf	??_setBuz
 14402  161C  082B               	movf	??_setBuz,w
 14403  161D  0021               	movlb	1	; select bank1
 14404  161E  00B5               	movwf	(_Buz1^(0+128)+5)
 14405                           
 14406                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 14407  161F  0020               	movlb	0	; select bank0
 14408  1620  082A               	movf	setBuz@time+1,w
 14409  1621  0021               	movlb	1	; select bank1
 14410  1622  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 14411  1623  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 14412  1624  0020               	movlb	0	; select bank0
 14413  1625  0829               	movf	setBuz@time,w
 14414  1626  0021               	movlb	1	; select bank1
 14415  1627  01BA               	clrf	(_Buz1^(0+128)+10)
 14416  1628  07BA               	addwf	(_Buz1^(0+128)+10),f
 14417  1629  0008               	return
 14418  162A                     __end_of_setBuz:	
 14419                           
 14420                           	psect	text86
 14421  14CF                     __ptext86:	
 14422 ;; *************** function ___awdiv *****************
 14423 ;; Defined at:
 14424 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14425 ;; Parameters:    Size  Location     Type
 14426 ;;  divisor         2    0[BANK0 ] int 
 14427 ;;  dividend        2    2[BANK0 ] int 
 14428 ;; Auto vars:     Size  Location     Type
 14429 ;;  quotient        2    7[BANK0 ] int 
 14430 ;;  sign            1    6[BANK0 ] unsigned char 
 14431 ;;  counter         1    5[BANK0 ] unsigned char 
 14432 ;; Return value:  Size  Location     Type
 14433 ;;                  2    0[BANK0 ] int 
 14434 ;; Registers used:
 14435 ;;		wreg, status,2, status,0
 14436 ;; Tracked objects:
 14437 ;;		On entry : 0/0
 14438 ;;		On exit  : 0/0
 14439 ;;		Unchanged: 0/0
 14440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14441 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14442 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14445 ;;Total ram usage:        9 bytes
 14446 ;; Hardware stack levels used:    1
 14447 ;; Hardware stack levels required when called:    5
 14448 ;; This function calls:
 14449 ;;		Nothing
 14450 ;; This function is called by:
 14451 ;;		_setBuz
 14452 ;; This function uses a non-reentrant model
 14453 ;;
 14454                           
 14455                           
 14456                           ;psect for function ___awdiv
 14457  14CF                     ___awdiv:	
 14458                           
 14459                           ;incstack = 0
 14460                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14461  14CF  0020               	movlb	0	; select bank0
 14462  14D0  01A6               	clrf	___awdiv@sign
 14463  14D1  1FA1               	btfss	___awdiv@divisor+1,7
 14464  14D2  2CDA               	goto	l8664
 14465  14D3  09A0               	comf	___awdiv@divisor,f
 14466  14D4  09A1               	comf	___awdiv@divisor+1,f
 14467  14D5  0AA0               	incf	___awdiv@divisor,f
 14468  14D6  1903               	skipnz
 14469  14D7  0AA1               	incf	___awdiv@divisor+1,f
 14470  14D8  01A6               	clrf	___awdiv@sign
 14471  14D9  0AA6               	incf	___awdiv@sign,f
 14472  14DA                     l8664:	
 14473  14DA  1FA3               	btfss	___awdiv@dividend+1,7
 14474  14DB  2CE5               	goto	l8670
 14475  14DC  09A2               	comf	___awdiv@dividend,f
 14476  14DD  09A3               	comf	___awdiv@dividend+1,f
 14477  14DE  0AA2               	incf	___awdiv@dividend,f
 14478  14DF  1903               	skipnz
 14479  14E0  0AA3               	incf	___awdiv@dividend+1,f
 14480  14E1  3001               	movlw	1
 14481  14E2  00A4               	movwf	??___awdiv
 14482  14E3  0824               	movf	??___awdiv,w
 14483  14E4  06A6               	xorwf	___awdiv@sign,f
 14484  14E5                     l8670:	
 14485  14E5  01A7               	clrf	___awdiv@quotient
 14486  14E6  01A8               	clrf	___awdiv@quotient+1
 14487  14E7  0821               	movf	___awdiv@divisor+1,w
 14488  14E8  0420               	iorwf	___awdiv@divisor,w
 14489  14E9  1903               	skipnz
 14490  14EA  2D14               	goto	l8692
 14491  14EB  01A5               	clrf	___awdiv@counter
 14492  14EC  0AA5               	incf	___awdiv@counter,f
 14493  14ED                     l8680:	
 14494  14ED  1BA1               	btfsc	___awdiv@divisor+1,7
 14495  14EE  2CF9               	goto	l8682
 14496  14EF  3001               	movlw	1
 14497  14F0                     u9175:	
 14498  14F0  35A0               	lslf	___awdiv@divisor,f
 14499  14F1  0DA1               	rlf	___awdiv@divisor+1,f
 14500  14F2  0B89               	decfsz	9,f
 14501  14F3  2CF0               	goto	u9175
 14502  14F4  3001               	movlw	1
 14503  14F5  00A4               	movwf	??___awdiv
 14504  14F6  0824               	movf	??___awdiv,w
 14505  14F7  07A5               	addwf	___awdiv@counter,f
 14506  14F8  2CED               	goto	l8680
 14507  14F9                     l8682:	
 14508  14F9  3001               	movlw	1
 14509  14FA                     u9195:	
 14510  14FA  35A7               	lslf	___awdiv@quotient,f
 14511  14FB  0DA8               	rlf	___awdiv@quotient+1,f
 14512  14FC  0B89               	decfsz	9,f
 14513  14FD  2CFA               	goto	u9195
 14514  14FE  0821               	movf	___awdiv@divisor+1,w
 14515  14FF  0223               	subwf	___awdiv@dividend+1,w
 14516  1500  1D03               	skipz
 14517  1501  2D04               	goto	u9205
 14518  1502  0820               	movf	___awdiv@divisor,w
 14519  1503  0222               	subwf	___awdiv@dividend,w
 14520  1504                     u9205:	
 14521  1504  1C03               	skipc
 14522  1505  2D0B               	goto	l8688
 14523  1506  0820               	movf	___awdiv@divisor,w
 14524  1507  02A2               	subwf	___awdiv@dividend,f
 14525  1508  0821               	movf	___awdiv@divisor+1,w
 14526  1509  3BA3               	subwfb	___awdiv@dividend+1,f
 14527  150A  1427               	bsf	___awdiv@quotient,0
 14528  150B                     l8688:	
 14529  150B  3001               	movlw	1
 14530  150C                     u9215:	
 14531  150C  36A1               	lsrf	___awdiv@divisor+1,f
 14532  150D  0CA0               	rrf	___awdiv@divisor,f
 14533  150E  0B89               	decfsz	9,f
 14534  150F  2D0C               	goto	u9215
 14535  1510  3001               	movlw	1
 14536  1511  02A5               	subwf	___awdiv@counter,f
 14537  1512  1D03               	btfss	3,2
 14538  1513  2CF9               	goto	l8682
 14539  1514                     l8692:	
 14540  1514  0826               	movf	___awdiv@sign,w
 14541  1515  1903               	btfsc	3,2
 14542  1516  2D1C               	goto	l8696
 14543  1517  09A7               	comf	___awdiv@quotient,f
 14544  1518  09A8               	comf	___awdiv@quotient+1,f
 14545  1519  0AA7               	incf	___awdiv@quotient,f
 14546  151A  1903               	skipnz
 14547  151B  0AA8               	incf	___awdiv@quotient+1,f
 14548  151C                     l8696:	
 14549  151C  0828               	movf	___awdiv@quotient+1,w
 14550  151D  01A1               	clrf	?___awdiv+1
 14551  151E  07A1               	addwf	?___awdiv+1,f
 14552  151F  0827               	movf	___awdiv@quotient,w
 14553  1520  01A0               	clrf	?___awdiv
 14554  1521  07A0               	addwf	?___awdiv,f
 14555  1522  0008               	return
 14556  1523                     __end_of___awdiv:	
 14557                           
 14558                           	psect	text87
 14559  1CFA                     __ptext87:	
 14560 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 14561 ;; Defined at:
 14562 ;;		line 547 in file "../src/Dimmer_B1.c"
 14563 ;; Parameters:    Size  Location     Type
 14564 ;;		None
 14565 ;; Auto vars:     Size  Location     Type
 14566 ;;  adjgo           1    2[BANK0 ] unsigned char 
 14567 ;; Return value:  Size  Location     Type
 14568 ;;                  1    wreg      unsigned char 
 14569 ;; Registers used:
 14570 ;;		wreg, status,2
 14571 ;; Tracked objects:
 14572 ;;		On entry : 0/0
 14573 ;;		On exit  : 0/0
 14574 ;;		Unchanged: 0/0
 14575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;Total ram usage:        3 bytes
 14581 ;; Hardware stack levels used:    1
 14582 ;; Hardware stack levels required when called:    5
 14583 ;; This function calls:
 14584 ;;		Nothing
 14585 ;; This function is called by:
 14586 ;;		_setDimmerLights_SwOn
 14587 ;;		_setDimmerLights_AdjControl
 14588 ;; This function uses a non-reentrant model
 14589 ;;
 14590                           
 14591                           
 14592                           ;psect for function _getAll_DimmerLights_AdjGO
 14593  1CFA                     _getAll_DimmerLights_AdjGO:	
 14594                           
 14595                           ;Dimmer_B1.c: 548: char adjgo = 0;
 14596                           
 14597                           ;incstack = 0
 14598                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 14599  1CFA  0020               	movlb	0	; select bank0
 14600  1CFB  01A2               	clrf	getAll_DimmerLights_AdjGO@adjgo
 14601                           
 14602                           ;Dimmer_B1.c: 553: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 14603  1CFC  01A1               	clrf	_getAll_DimmerLights_AdjGO$2562
 14604  1CFD  0AA1               	incf	_getAll_DimmerLights_AdjGO$2562,f
 14605  1CFE  0023               	movlb	3	; select bank3
 14606  1CFF  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
 14607  1D00  19D5               	btfsc	(_DimmerLights2^(0+384)+8),3
 14608  1D01  2D04               	goto	l8782
 14609  1D02  0020               	movlb	0	; select bank0
 14610  1D03  01A1               	clrf	_getAll_DimmerLights_AdjGO$2562
 14611  1D04                     l8782:	
 14612  1D04  0020               	movlb	0	; select bank0
 14613  1D05  0821               	movf	_getAll_DimmerLights_AdjGO$2562,w
 14614  1D06  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 14615  1D07  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 14616  1D08  00A2               	movwf	getAll_DimmerLights_AdjGO@adjgo
 14617                           
 14618                           ;Dimmer_B1.c: 556: adjgo = DimmerLights1.AdjGo == 1;
 14619  1D09  3000               	movlw	0
 14620  1D0A  0023               	movlb	3	; select bank3
 14621  1D0B  19C6               	btfsc	(_DimmerLights1^(0+384)+8),3
 14622  1D0C  3001               	movlw	1
 14623  1D0D  0020               	movlb	0	; select bank0
 14624  1D0E  00A2               	movwf	getAll_DimmerLights_AdjGO@adjgo
 14625                           
 14626                           ;Dimmer_B1.c: 558: return adjgo;
 14627  1D0F  0822               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 14628  1D10  0008               	return
 14629  1D11                     __end_of_getAll_DimmerLights_AdjGO:	
 14630                           
 14631                           	psect	text88
 14632  16DF                     __ptext88:	
 14633 ;; *************** function _setDimmerLights_SwOff *****************
 14634 ;; Defined at:
 14635 ;;		line 583 in file "../src/Dimmer_B1.c"
 14636 ;; Parameters:    Size  Location     Type
 14637 ;;  sw              1    wreg     unsigned char 
 14638 ;; Auto vars:     Size  Location     Type
 14639 ;;  sw              1   69[BANK0 ] unsigned char 
 14640 ;;  command         1   68[BANK0 ] unsigned char 
 14641 ;; Return value:  Size  Location     Type
 14642 ;;		None               void
 14643 ;; Registers used:
 14644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14645 ;; Tracked objects:
 14646 ;;		On entry : 0/0
 14647 ;;		On exit  : 0/0
 14648 ;;		Unchanged: 0/0
 14649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14651 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14652 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14653 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14654 ;;Total ram usage:        4 bytes
 14655 ;; Hardware stack levels used:    1
 14656 ;; Hardware stack levels required when called:    9
 14657 ;; This function calls:
 14658 ;;		_DimmerLightsPointSelect
 14659 ;;		_setDelayOff_GO
 14660 ;;		_setDimmerLights_Trigger
 14661 ;;		_setDimmerLights_TriggerAdj
 14662 ;;		_setRF_DimmerLights
 14663 ;;		_setTxData
 14664 ;; This function is called by:
 14665 ;;		_DlyOff_Main
 14666 ;;		_setDimmerLights_ErrorClose
 14667 ;;		_setRFSW_Control
 14668 ;;		_setSw_Main
 14669 ;; This function uses a non-reentrant model
 14670 ;;
 14671                           
 14672                           
 14673                           ;psect for function _setDimmerLights_SwOff
 14674  16DF                     _setDimmerLights_SwOff:	
 14675                           
 14676                           ;incstack = 0
 14677                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14678                           ;setDimmerLights_SwOff@sw stored from wreg
 14679  16DF  0020               	movlb	0	; select bank0
 14680  16E0  00E5               	movwf	setDimmerLights_SwOff@sw
 14681                           
 14682                           ;Dimmer_B1.c: 584: DimmerLightsPointSelect(sw);
 14683  16E1  0865               	movf	setDimmerLights_SwOff@sw,w
 14684  16E2  319C  2430  3196   	fcall	_DimmerLightsPointSelect
 14685                           
 14686                           ;Dimmer_B1.c: 585: char command = DimmerLights->Status == 1 ? 1 : 0;
 14687  16E5  0877               	movf	_DimmerLights,w
 14688  16E6  0086               	movwf	6
 14689  16E7  3001               	movlw	1	; select bank2/3
 14690  16E8  0087               	movwf	7
 14691  16E9  3000               	movlw	0
 14692  16EA  1A81               	btfsc	1,5
 14693  16EB  3001               	movlw	1
 14694  16EC  0020               	movlb	0	; select bank0
 14695  16ED  00E4               	movwf	setDimmerLights_SwOff@command
 14696                           
 14697                           ;Dimmer_B1.c: 586: if (DimmerLights->SwFlag == 1) {
 14698  16EE  0877               	movf	_DimmerLights,w
 14699  16EF  3E09               	addlw	9
 14700  16F0  0086               	movwf	6
 14701  16F1  3001               	movlw	1	; select bank2/3
 14702  16F2  0087               	movwf	7
 14703  16F3  1F01               	btfss	1,6
 14704  16F4  0008               	return
 14705                           
 14706                           ;Dimmer_B1.c: 587: DimmerLights->SwFlag = 0;
 14707  16F5  0877               	movf	_DimmerLights,w
 14708  16F6  3E09               	addlw	9
 14709  16F7  0086               	movwf	6
 14710  16F8  3001               	movlw	1	; select bank2/3
 14711  16F9  0087               	movwf	7
 14712  16FA  1301               	bcf	1,6
 14713                           
 14714                           ;Dimmer_B1.c: 588: if (DimmerLights->Status == 1) {
 14715  16FB  0877               	movf	_DimmerLights,w
 14716  16FC  0086               	movwf	6
 14717  16FD  3001               	movlw	1	; select bank2/3
 14718  16FE  0087               	movwf	7
 14719  16FF  1E81               	btfss	1,5
 14720  1700  2F26               	goto	l8896
 14721                           
 14722                           ;Dimmer_B1.c: 589: if (DimmerLights->SwAdj == 1) {
 14723  1701  0877               	movf	_DimmerLights,w
 14724  1702  3E09               	addlw	9
 14725  1703  0086               	movwf	6
 14726  1704  3001               	movlw	1	; select bank2/3
 14727  1705  0087               	movwf	7
 14728  1706  1F81               	btfss	1,7
 14729  1707  2F32               	goto	l863
 14730                           
 14731                           ;Dimmer_B1.c: 590: DimmerLights->SwAdj = 0;
 14732  1708  0877               	movf	_DimmerLights,w
 14733  1709  3E09               	addlw	9
 14734  170A  0086               	movwf	6
 14735  170B  3001               	movlw	1	; select bank2/3
 14736  170C  0087               	movwf	7
 14737  170D  1381               	bcf	1,7
 14738                           
 14739                           ;Dimmer_B1.c: 591: setDimmerLights_TriggerAdj(sw, 0);
 14740  170E  01A2               	clrf	setDimmerLights_TriggerAdj@command
 14741  170F  0865               	movf	setDimmerLights_SwOff@sw,w
 14742  1710  319E  2623  3196   	fcall	_setDimmerLights_TriggerAdj
 14743                           
 14744                           ;Dimmer_B1.c: 592: product->Data[17]=product->Data[26 + sw];
 14745  1713  0020               	movlb	0	; select bank0
 14746  1714  0865               	movf	setDimmerLights_SwOff@sw,w
 14747  1715  3E1A               	addlw	26
 14748  1716  077B               	addwf	_product,w
 14749  1717  00E2               	movwf	??_setDimmerLights_SwOff
 14750  1718  0862               	movf	??_setDimmerLights_SwOff,w
 14751  1719  0086               	movwf	6
 14752  171A  3002               	movlw	2	; select bank4/5
 14753  171B  0087               	movwf	7
 14754  171C  0801               	movf	1,w
 14755  171D  00E3               	movwf	??_setDimmerLights_SwOff+1
 14756  171E  087B               	movf	_product,w
 14757  171F  3E11               	addlw	17
 14758  1720  0086               	movwf	6
 14759  1721  3002               	movlw	2	; select bank4/5
 14760  1722  0087               	movwf	7
 14761  1723  0863               	movf	??_setDimmerLights_SwOff+1,w
 14762  1724  0081               	movwf	1
 14763                           
 14764                           ;Dimmer_B1.c: 595: }
 14765                           ;Dimmer_B1.c: 596: } else {
 14766  1725  2F32               	goto	l863
 14767  1726                     l8896:	
 14768                           
 14769                           ;Dimmer_B1.c: 597: setDimmerLights_Trigger(sw, 0);
 14770  1726  01A2               	clrf	setDimmerLights_Trigger@command
 14771  1727  0865               	movf	setDimmerLights_SwOff@sw,w
 14772  1728  319D  25C7  3196   	fcall	_setDimmerLights_Trigger
 14773                           
 14774                           ;Dimmer_B1.c: 598: setDelayOff_GO(sw, 0, 0);
 14775  172B  0020               	movlb	0	; select bank0
 14776  172C  01AA               	clrf	setDelayOff_GO@command
 14777  172D  01AB               	clrf	setDelayOff_GO@value
 14778  172E  0865               	movf	setDimmerLights_SwOff@sw,w
 14779  172F  3197  273E  3196   	fcall	_setDelayOff_GO
 14780  1732                     l863:	
 14781                           
 14782                           ;Dimmer_B1.c: 599: }
 14783                           ;Dimmer_B1.c: 600: setRF_DimmerLights(sw, command);
 14784  1732  0020               	movlb	0	; select bank0
 14785  1733  0864               	movf	setDimmerLights_SwOff@command,w
 14786  1734  00E2               	movwf	??_setDimmerLights_SwOff
 14787  1735  0862               	movf	??_setDimmerLights_SwOff,w
 14788  1736  00DD               	movwf	setRF_DimmerLights@on
 14789  1737  0865               	movf	setDimmerLights_SwOff@sw,w
 14790  1738  3189  214B  3196   	fcall	_setRF_DimmerLights
 14791                           
 14792                           ;Dimmer_B1.c: 601: setTxData();
 14793  173B  318C  24A6         	fcall	_setTxData
 14794  173D  0008               	return
 14795  173E                     __end_of_setDimmerLights_SwOff:	
 14796                           
 14797                           	psect	text89
 14798  0CA6                     __ptext89:	
 14799 ;; *************** function _setTxData *****************
 14800 ;; Defined at:
 14801 ;;		line 207 in file "../src/RF_Control_B1.c"
 14802 ;; Parameters:    Size  Location     Type
 14803 ;;		None
 14804 ;; Auto vars:     Size  Location     Type
 14805 ;;  i               1    0        unsigned char 
 14806 ;; Return value:  Size  Location     Type
 14807 ;;		None               void
 14808 ;; Registers used:
 14809 ;;		wreg, fsr1l, fsr1h
 14810 ;; Tracked objects:
 14811 ;;		On entry : 0/0
 14812 ;;		On exit  : 0/0
 14813 ;;		Unchanged: 0/0
 14814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14819 ;;Total ram usage:        1 bytes
 14820 ;; Hardware stack levels used:    1
 14821 ;; Hardware stack levels required when called:    5
 14822 ;; This function calls:
 14823 ;;		Nothing
 14824 ;; This function is called by:
 14825 ;;		_setDimmerLights_SwOn
 14826 ;;		_setDimmerLights_SwOff
 14827 ;;		_setDimmerLights_Adj
 14828 ;;		_my_MainTimer
 14829 ;;		_setControl_Lights_Table
 14830 ;;		_setRFSW_AdjControl
 14831 ;; This function uses a non-reentrant model
 14832 ;;
 14833                           
 14834                           
 14835                           ;psect for function _setTxData
 14836  0CA6                     _setTxData:	
 14837                           
 14838                           ;RF_Control_B1.c: 208: char i;
 14839                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
 14840                           
 14841                           ;incstack = 0
 14842                           ; Regs used in _setTxData: [wregfsr1]
 14843  0CA6  0021               	movlb	1	; select bank1
 14844  0CA7  1C3C               	btfss	_RF1^(0+128),0
 14845  0CA8  0008               	return
 14846                           
 14847                           ;RF_Control_B1.c: 211: RF1.TransceiveGO = 1;
 14848  0CA9  153C               	bsf	_RF1^(0+128),2
 14849                           
 14850                           ;RF_Control_B1.c: 212: RF1.RunTime = 20;
 14851  0CAA  3014               	movlw	20
 14852  0CAB  00C3               	movwf	(_RF1^(0+128)+7)
 14853  0CAC  3000               	movlw	0
 14854  0CAD  00C4               	movwf	(_RF1^(0+128)+8)
 14855                           
 14856                           ;RF_Control_B1.c: 222: RF_Data[0] = 0x63;
 14857  0CAE  3063               	movlw	99
 14858  0CAF  0020               	movlb	0	; select bank0
 14859  0CB0  00A0               	movwf	??_setTxData
 14860  0CB1  0820               	movf	??_setTxData,w
 14861  0CB2  0023               	movlb	3	; select bank3
 14862  0CB3  00A0               	movwf	_RF_Data^(0+384)
 14863                           
 14864                           ;RF_Control_B1.c: 223: RF_Data[1] = 0x02;
 14865  0CB4  3002               	movlw	2
 14866  0CB5  0020               	movlb	0	; select bank0
 14867  0CB6  00A0               	movwf	??_setTxData
 14868  0CB7  0820               	movf	??_setTxData,w
 14869  0CB8  0023               	movlb	3	; select bank3
 14870  0CB9  00A1               	movwf	(_RF_Data^(0+384)+1)
 14871                           
 14872                           ;RF_Control_B1.c: 224: RF_Data[2] = product->Data[2];
 14873  0CBA  087B               	movf	_product,w
 14874  0CBB  0086               	movwf	6
 14875  0CBC  3002               	movlw	2	; select bank4/5
 14876  0CBD  0087               	movwf	7
 14877  0CBE  3002               	movlw	2	; select bank4/5
 14878  0CBF  3F42               	moviw [2]fsr1
 14879  0CC0  00A2               	movwf	(_RF_Data^(0+384)+2)
 14880                           
 14881                           ;RF_Control_B1.c: 225: RF_Data[3] = product->Data[3];
 14882  0CC1  087B               	movf	_product,w
 14883  0CC2  0086               	movwf	6
 14884  0CC3  3002               	movlw	2	; select bank4/5
 14885  0CC4  0087               	movwf	7
 14886  0CC5  3002               	movlw	2	; select bank4/5
 14887  0CC6  3F43               	moviw [3]fsr1
 14888  0CC7  00A3               	movwf	(_RF_Data^(0+384)+3)
 14889                           
 14890                           ;RF_Control_B1.c: 226: RF_Data[4] = product->Data[4];
 14891  0CC8  087B               	movf	_product,w
 14892  0CC9  0086               	movwf	6
 14893  0CCA  3002               	movlw	2	; select bank4/5
 14894  0CCB  0087               	movwf	7
 14895  0CCC  3002               	movlw	2	; select bank4/5
 14896  0CCD  3F44               	moviw [4]fsr1
 14897  0CCE  00A4               	movwf	(_RF_Data^(0+384)+4)
 14898                           
 14899                           ;RF_Control_B1.c: 227: RF_Data[5] = product->Data[5];
 14900  0CCF  087B               	movf	_product,w
 14901  0CD0  0086               	movwf	6
 14902  0CD1  3002               	movlw	2	; select bank4/5
 14903  0CD2  0087               	movwf	7
 14904  0CD3  3002               	movlw	2	; select bank4/5
 14905  0CD4  3F45               	moviw [5]fsr1
 14906  0CD5  00A5               	movwf	(_RF_Data^(0+384)+5)
 14907                           
 14908                           ;RF_Control_B1.c: 228: RF_Data[6] = product->Data[6];
 14909  0CD6  087B               	movf	_product,w
 14910  0CD7  0086               	movwf	6
 14911  0CD8  3002               	movlw	2	; select bank4/5
 14912  0CD9  0087               	movwf	7
 14913  0CDA  3002               	movlw	2	; select bank4/5
 14914  0CDB  3F46               	moviw [6]fsr1
 14915  0CDC  00A6               	movwf	(_RF_Data^(0+384)+6)
 14916                           
 14917                           ;RF_Control_B1.c: 229: RF_Data[7] = product->Data[7];
 14918  0CDD  087B               	movf	_product,w
 14919  0CDE  0086               	movwf	6
 14920  0CDF  3002               	movlw	2	; select bank4/5
 14921  0CE0  0087               	movwf	7
 14922  0CE1  3002               	movlw	2	; select bank4/5
 14923  0CE2  3F47               	moviw [7]fsr1
 14924  0CE3  00A7               	movwf	(_RF_Data^(0+384)+7)
 14925                           
 14926                           ;RF_Control_B1.c: 230: RF_Data[8] = product->Data[8];
 14927  0CE4  087B               	movf	_product,w
 14928  0CE5  0086               	movwf	6
 14929  0CE6  3002               	movlw	2	; select bank4/5
 14930  0CE7  0087               	movwf	7
 14931  0CE8  3002               	movlw	2	; select bank4/5
 14932  0CE9  3F48               	moviw [8]fsr1
 14933  0CEA  00A8               	movwf	(_RF_Data^(0+384)+8)
 14934                           
 14935                           ;RF_Control_B1.c: 231: RF_Data[9] = product->Data[9];
 14936  0CEB  087B               	movf	_product,w
 14937  0CEC  0086               	movwf	6
 14938  0CED  3002               	movlw	2	; select bank4/5
 14939  0CEE  0087               	movwf	7
 14940  0CEF  3002               	movlw	2	; select bank4/5
 14941  0CF0  3F49               	moviw [9]fsr1
 14942  0CF1  00A9               	movwf	(_RF_Data^(0+384)+9)
 14943                           
 14944                           ;RF_Control_B1.c: 232: RF_Data[10] = product->Data[10];
 14945  0CF2  087B               	movf	_product,w
 14946  0CF3  0086               	movwf	6
 14947  0CF4  3002               	movlw	2	; select bank4/5
 14948  0CF5  0087               	movwf	7
 14949  0CF6  3002               	movlw	2	; select bank4/5
 14950  0CF7  3F4A               	moviw [10]fsr1
 14951  0CF8  00AA               	movwf	(_RF_Data^(0+384)+10)
 14952                           
 14953                           ;RF_Control_B1.c: 233: RF_Data[11] = product->Data[11];
 14954  0CF9  087B               	movf	_product,w
 14955  0CFA  0086               	movwf	6
 14956  0CFB  3002               	movlw	2	; select bank4/5
 14957  0CFC  0087               	movwf	7
 14958  0CFD  3002               	movlw	2	; select bank4/5
 14959  0CFE  3F4B               	moviw [11]fsr1
 14960  0CFF  00AB               	movwf	(_RF_Data^(0+384)+11)
 14961                           
 14962                           ;RF_Control_B1.c: 234: RF_Data[12] = product->Data[12];
 14963  0D00  087B               	movf	_product,w
 14964  0D01  0086               	movwf	6
 14965  0D02  3002               	movlw	2	; select bank4/5
 14966  0D03  0087               	movwf	7
 14967  0D04  3002               	movlw	2	; select bank4/5
 14968  0D05  3F4C               	moviw [12]fsr1
 14969  0D06  00AC               	movwf	(_RF_Data^(0+384)+12)
 14970                           
 14971                           ;RF_Control_B1.c: 235: RF_Data[13] = product->Data[13];
 14972  0D07  087B               	movf	_product,w
 14973  0D08  0086               	movwf	6
 14974  0D09  3002               	movlw	2	; select bank4/5
 14975  0D0A  0087               	movwf	7
 14976  0D0B  3002               	movlw	2	; select bank4/5
 14977  0D0C  3F4D               	moviw [13]fsr1
 14978  0D0D  00AD               	movwf	(_RF_Data^(0+384)+13)
 14979                           
 14980                           ;RF_Control_B1.c: 236: RF_Data[14] = product->Data[14];
 14981  0D0E  087B               	movf	_product,w
 14982  0D0F  0086               	movwf	6
 14983  0D10  3002               	movlw	2	; select bank4/5
 14984  0D11  0087               	movwf	7
 14985  0D12  3002               	movlw	2	; select bank4/5
 14986  0D13  3F4E               	moviw [14]fsr1
 14987  0D14  00AE               	movwf	(_RF_Data^(0+384)+14)
 14988                           
 14989                           ;RF_Control_B1.c: 237: RF_Data[15] = product->Data[15];
 14990  0D15  087B               	movf	_product,w
 14991  0D16  0086               	movwf	6
 14992  0D17  3002               	movlw	2	; select bank4/5
 14993  0D18  0087               	movwf	7
 14994  0D19  3002               	movlw	2	; select bank4/5
 14995  0D1A  3F4F               	moviw [15]fsr1
 14996  0D1B  00AF               	movwf	(_RF_Data^(0+384)+15)
 14997                           
 14998                           ;RF_Control_B1.c: 238: RF_Data[16] = product->Data[16];
 14999  0D1C  087B               	movf	_product,w
 15000  0D1D  0086               	movwf	6
 15001  0D1E  3002               	movlw	2	; select bank4/5
 15002  0D1F  0087               	movwf	7
 15003  0D20  3002               	movlw	2	; select bank4/5
 15004  0D21  3F50               	moviw [16]fsr1
 15005  0D22  00B0               	movwf	(_RF_Data^(0+384)+16)
 15006                           
 15007                           ;RF_Control_B1.c: 239: RF_Data[17] = product->Data[17];
 15008  0D23  087B               	movf	_product,w
 15009  0D24  0086               	movwf	6
 15010  0D25  3002               	movlw	2	; select bank4/5
 15011  0D26  0087               	movwf	7
 15012  0D27  3002               	movlw	2	; select bank4/5
 15013  0D28  3F51               	moviw [17]fsr1
 15014  0D29  00B1               	movwf	(_RF_Data^(0+384)+17)
 15015                           
 15016                           ;RF_Control_B1.c: 240: RF_Data[18] = product->Data[18];
 15017  0D2A  087B               	movf	_product,w
 15018  0D2B  0086               	movwf	6
 15019  0D2C  3002               	movlw	2	; select bank4/5
 15020  0D2D  0087               	movwf	7
 15021  0D2E  3002               	movlw	2	; select bank4/5
 15022  0D2F  3F52               	moviw [18]fsr1
 15023  0D30  00B2               	movwf	(_RF_Data^(0+384)+18)
 15024                           
 15025                           ;RF_Control_B1.c: 241: RF_Data[19] = product->Data[19];
 15026  0D31  087B               	movf	_product,w
 15027  0D32  0086               	movwf	6
 15028  0D33  3002               	movlw	2	; select bank4/5
 15029  0D34  0087               	movwf	7
 15030  0D35  3002               	movlw	2	; select bank4/5
 15031  0D36  3F53               	moviw [19]fsr1
 15032  0D37  00B3               	movwf	(_RF_Data^(0+384)+19)
 15033                           
 15034                           ;RF_Control_B1.c: 242: RF_Data[20] = 210;
 15035  0D38  30D2               	movlw	210
 15036  0D39  0020               	movlb	0	; select bank0
 15037  0D3A  00A0               	movwf	??_setTxData
 15038  0D3B  0820               	movf	??_setTxData,w
 15039  0D3C  0023               	movlb	3	; select bank3
 15040  0D3D  00B4               	movwf	(_RF_Data^(0+384)+20)
 15041  0D3E  0008               	return
 15042  0D3F                     __end_of_setTxData:	
 15043                           
 15044                           	psect	text90
 15045  094B                     __ptext90:	
 15046 ;; *************** function _setRF_DimmerLights *****************
 15047 ;; Defined at:
 15048 ;;		line 529 in file "../src/RF_Control_B1.c"
 15049 ;; Parameters:    Size  Location     Type
 15050 ;;  lights          1    wreg     unsigned char 
 15051 ;;  on              1   61[BANK0 ] unsigned char 
 15052 ;; Auto vars:     Size  Location     Type
 15053 ;;  lights          1   65[BANK0 ] unsigned char 
 15054 ;;  status          1   64[BANK0 ] unsigned char 
 15055 ;; Return value:  Size  Location     Type
 15056 ;;		None               void
 15057 ;; Registers used:
 15058 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15059 ;; Tracked objects:
 15060 ;;		On entry : 0/0
 15061 ;;		On exit  : 0/0
 15062 ;;		Unchanged: 0/0
 15063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15064 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15065 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15066 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15067 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15068 ;;Total ram usage:        5 bytes
 15069 ;; Hardware stack levels used:    1
 15070 ;; Hardware stack levels required when called:    8
 15071 ;; This function calls:
 15072 ;;		_setPercentValue
 15073 ;; This function is called by:
 15074 ;;		_DlyOff_Main
 15075 ;;		_setDimmerLights_SwOn
 15076 ;;		_setDimmerLights_SwOff
 15077 ;;		_setDimmerLights_Adj
 15078 ;;		_setRFSW_Control
 15079 ;; This function uses a non-reentrant model
 15080 ;;
 15081                           
 15082                           
 15083                           ;psect for function _setRF_DimmerLights
 15084  094B                     _setRF_DimmerLights:	
 15085                           
 15086                           ;incstack = 0
 15087                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15088                           ;setRF_DimmerLights@lights stored from wreg
 15089  094B  0020               	movlb	0	; select bank0
 15090  094C  00E1               	movwf	setRF_DimmerLights@lights
 15091                           
 15092                           ;RF_Control_B1.c: 530: char status = 1;
 15093  094D  01E0               	clrf	setRF_DimmerLights@status
 15094  094E  0AE0               	incf	setRF_DimmerLights@status,f
 15095                           
 15096                           ;RF_Control_B1.c: 531: status <<= (lights - 1);
 15097  094F  0861               	movf	setRF_DimmerLights@lights,w
 15098  0950  3EFF               	addlw	-1
 15099  0951  0A89               	incf	9,f
 15100  0952  2955               	goto	u9280
 15101  0953                     u9285:	
 15102  0953  1003               	clrc
 15103  0954  0DE0               	rlf	setRF_DimmerLights@status,f
 15104  0955                     u9280:	
 15105  0955  3EFF               	addlw	-1
 15106  0956  1D03               	skipz
 15107  0957  2953               	goto	u9285
 15108                           
 15109                           ;RF_Control_B1.c: 532: product->Data[11]=lights;
 15110  0958  0861               	movf	setRF_DimmerLights@lights,w
 15111  0959  00DE               	movwf	??_setRF_DimmerLights
 15112  095A  087B               	movf	_product,w
 15113  095B  3E0B               	addlw	11
 15114  095C  0086               	movwf	6
 15115  095D  3002               	movlw	2	; select bank4/5
 15116  095E  0087               	movwf	7
 15117  095F  085E               	movf	??_setRF_DimmerLights,w
 15118  0960  0081               	movwf	1
 15119                           
 15120                           ;RF_Control_B1.c: 535: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 15121  0961  3020               	movlw	32
 15122  0962  3193  2351  3189   	fcall	_setPercentValue
 15123  0965  0020               	movlb	0	; select bank0
 15124  0966  00DE               	movwf	??_setRF_DimmerLights
 15125  0967  0861               	movf	setRF_DimmerLights@lights,w
 15126  0968  3E14               	addlw	20
 15127  0969  077B               	addwf	_product,w
 15128  096A  00DF               	movwf	??_setRF_DimmerLights+1
 15129  096B  085F               	movf	??_setRF_DimmerLights+1,w
 15130  096C  0086               	movwf	6
 15131  096D  3002               	movlw	2	; select bank4/5
 15132  096E  0087               	movwf	7
 15133  096F  085E               	movf	??_setRF_DimmerLights,w
 15134  0970  0081               	movwf	1
 15135                           
 15136                           ;RF_Control_B1.c: 538: product->Data[9]=product->Data[20 + lights];
 15137  0971  0861               	movf	setRF_DimmerLights@lights,w
 15138  0972  3E14               	addlw	20
 15139  0973  077B               	addwf	_product,w
 15140  0974  00DE               	movwf	??_setRF_DimmerLights
 15141  0975  085E               	movf	??_setRF_DimmerLights,w
 15142  0976  0086               	movwf	6
 15143  0977  3002               	movlw	2	; select bank4/5
 15144  0978  0087               	movwf	7
 15145  0979  0801               	movf	1,w
 15146  097A  00DF               	movwf	??_setRF_DimmerLights+1
 15147  097B  087B               	movf	_product,w
 15148  097C  3E09               	addlw	9
 15149  097D  0086               	movwf	6
 15150  097E  3002               	movlw	2	; select bank4/5
 15151  097F  0087               	movwf	7
 15152  0980  085F               	movf	??_setRF_DimmerLights+1,w
 15153  0981  0081               	movwf	1
 15154                           
 15155                           ;RF_Control_B1.c: 539: product->Data[17]=product->Data[26 + lights];
 15156  0982  0861               	movf	setRF_DimmerLights@lights,w
 15157  0983  3E1A               	addlw	26
 15158  0984  077B               	addwf	_product,w
 15159  0985  00DE               	movwf	??_setRF_DimmerLights
 15160  0986  085E               	movf	??_setRF_DimmerLights,w
 15161  0987  0086               	movwf	6
 15162  0988  3002               	movlw	2	; select bank4/5
 15163  0989  0087               	movwf	7
 15164  098A  0801               	movf	1,w
 15165  098B  00DF               	movwf	??_setRF_DimmerLights+1
 15166  098C  087B               	movf	_product,w
 15167  098D  3E11               	addlw	17
 15168  098E  0086               	movwf	6
 15169  098F  3002               	movlw	2	; select bank4/5
 15170  0990  0087               	movwf	7
 15171  0991  085F               	movf	??_setRF_DimmerLights+1,w
 15172  0992  0081               	movwf	1
 15173                           
 15174                           ;RF_Control_B1.c: 540: if (on == 1) {
 15175  0993  085D               	movf	setRF_DimmerLights@on,w
 15176  0994  3A01               	xorlw	1
 15177  0995  1D03               	skipz
 15178  0996  29A7               	goto	l8744
 15179                           
 15180                           ;RF_Control_B1.c: 541: product->Data[15]=(product->Data[15] | status);
 15181  0997  087B               	movf	_product,w
 15182  0998  3E0F               	addlw	15
 15183  0999  0086               	movwf	6
 15184  099A  3002               	movlw	2	; select bank4/5
 15185  099B  0087               	movwf	7
 15186  099C  0801               	movf	1,w
 15187  099D  0460               	iorwf	setRF_DimmerLights@status,w
 15188  099E  00DE               	movwf	??_setRF_DimmerLights
 15189  099F  087B               	movf	_product,w
 15190  09A0  3E0F               	addlw	15
 15191  09A1  0086               	movwf	6
 15192  09A2  3002               	movlw	2	; select bank4/5
 15193  09A3  0087               	movwf	7
 15194  09A4  085E               	movf	??_setRF_DimmerLights,w
 15195  09A5  0081               	movwf	1
 15196                           
 15197                           ;RF_Control_B1.c: 542: } else {
 15198  09A6  0008               	return
 15199  09A7                     l8744:	
 15200                           
 15201                           ;RF_Control_B1.c: 543: product->Data[15]=(product->Data[15]&(~status));
 15202  09A7  087B               	movf	_product,w
 15203  09A8  3E0F               	addlw	15
 15204  09A9  0086               	movwf	6
 15205  09AA  3002               	movlw	2	; select bank4/5
 15206  09AB  0087               	movwf	7
 15207  09AC  0960               	comf	setRF_DimmerLights@status,w
 15208  09AD  0501               	andwf	1,w
 15209  09AE  00DE               	movwf	??_setRF_DimmerLights
 15210  09AF  087B               	movf	_product,w
 15211  09B0  3E0F               	addlw	15
 15212  09B1  0086               	movwf	6
 15213  09B2  3002               	movlw	2	; select bank4/5
 15214  09B3  0087               	movwf	7
 15215  09B4  085E               	movf	??_setRF_DimmerLights,w
 15216  09B5  0081               	movwf	1
 15217  09B6  0008               	return
 15218  09B7                     __end_of_setRF_DimmerLights:	
 15219                           
 15220                           	psect	text91
 15221  1351                     __ptext91:	
 15222 ;; *************** function _setPercentValue *****************
 15223 ;; Defined at:
 15224 ;;		line 918 in file "../src/Dimmer_B1.c"
 15225 ;; Parameters:    Size  Location     Type
 15226 ;;  value           1    wreg     unsigned char 
 15227 ;; Auto vars:     Size  Location     Type
 15228 ;;  value           1   57[BANK0 ] unsigned char 
 15229 ;;  i               3   58[BANK0 ] float 
 15230 ;; Return value:  Size  Location     Type
 15231 ;;                  1    wreg      unsigned char 
 15232 ;; Registers used:
 15233 ;;		wreg, status,2, status,0, pclath, cstack
 15234 ;; Tracked objects:
 15235 ;;		On entry : 0/0
 15236 ;;		On exit  : 0/0
 15237 ;;		Unchanged: 0/0
 15238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15242 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15243 ;;Total ram usage:        4 bytes
 15244 ;; Hardware stack levels used:    1
 15245 ;; Hardware stack levels required when called:    7
 15246 ;; This function calls:
 15247 ;;		___awtoft
 15248 ;;		___ftdiv
 15249 ;;		___fttol
 15250 ;; This function is called by:
 15251 ;;		_Flash_Memory_Initialization
 15252 ;;		_setRF_DimmerLights
 15253 ;; This function uses a non-reentrant model
 15254 ;;
 15255                           
 15256                           
 15257                           ;psect for function _setPercentValue
 15258  1351                     _setPercentValue:	
 15259                           
 15260                           ;incstack = 0
 15261                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15262                           ;setPercentValue@value stored from wreg
 15263  1351  0020               	movlb	0	; select bank0
 15264  1352  00D9               	movwf	setPercentValue@value
 15265                           
 15266                           ;Dimmer_B1.c: 920: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 15267  1353  3000               	movlw	0
 15268  1354  00DA               	movwf	setPercentValue@i
 15269  1355  30E0               	movlw	224
 15270  1356  00DB               	movwf	setPercentValue@i+1
 15271  1357  3041               	movlw	65
 15272  1358  00DC               	movwf	setPercentValue@i+2
 15273                           
 15274                           ;Dimmer_B1.c: 921: i /= 100;
 15275  1359  3000               	movlw	0
 15276  135A  00AE               	movwf	___ftdiv@f2
 15277  135B  30C8               	movlw	200
 15278  135C  00AF               	movwf	___ftdiv@f2+1
 15279  135D  3042               	movlw	66
 15280  135E  00B0               	movwf	___ftdiv@f2+2
 15281  135F  085A               	movf	setPercentValue@i,w
 15282  1360  00B1               	movwf	___ftdiv@f1
 15283  1361  085B               	movf	setPercentValue@i+1,w
 15284  1362  00B2               	movwf	___ftdiv@f1+1
 15285  1363  085C               	movf	setPercentValue@i+2,w
 15286  1364  00B3               	movwf	___ftdiv@f1+2
 15287  1365  318E  267B  3193   	fcall	___ftdiv
 15288  1368  0020               	movlb	0	; select bank0
 15289  1369  082E               	movf	?___ftdiv,w
 15290  136A  00DA               	movwf	setPercentValue@i
 15291  136B  082F               	movf	?___ftdiv+1,w
 15292  136C  00DB               	movwf	setPercentValue@i+1
 15293  136D  0830               	movf	?___ftdiv+2,w
 15294  136E  00DC               	movwf	setPercentValue@i+2
 15295                           
 15296                           ;Dimmer_B1.c: 922: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 15297  136F  0859               	movf	setPercentValue@value,w
 15298  1370  3EE0               	addlw	224
 15299  1371  00A8               	movwf	___awtoft@c
 15300  1372  30FF               	movlw	255
 15301  1373  1803               	skipnc
 15302  1374  3000               	movlw	0
 15303  1375  00A9               	movwf	___awtoft@c+1
 15304  1376  319E  2663  3193   	fcall	___awtoft
 15305  1379  0020               	movlb	0	; select bank0
 15306  137A  0828               	movf	?___awtoft,w
 15307  137B  00B1               	movwf	___ftdiv@f1
 15308  137C  0829               	movf	?___awtoft+1,w
 15309  137D  00B2               	movwf	___ftdiv@f1+1
 15310  137E  082A               	movf	?___awtoft+2,w
 15311  137F  00B3               	movwf	___ftdiv@f1+2
 15312  1380  085A               	movf	setPercentValue@i,w
 15313  1381  00AE               	movwf	___ftdiv@f2
 15314  1382  085B               	movf	setPercentValue@i+1,w
 15315  1383  00AF               	movwf	___ftdiv@f2+1
 15316  1384  085C               	movf	setPercentValue@i+2,w
 15317  1385  00B0               	movwf	___ftdiv@f2+2
 15318  1386  318E  267B  3193   	fcall	___ftdiv
 15319  1389  0020               	movlb	0	; select bank0
 15320  138A  082E               	movf	?___ftdiv,w
 15321  138B  00CB               	movwf	___fttol@f1
 15322  138C  082F               	movf	?___ftdiv+1,w
 15323  138D  00CC               	movwf	___fttol@f1+1
 15324  138E  0830               	movf	?___ftdiv+2,w
 15325  138F  00CD               	movwf	___fttol@f1+2
 15326  1390  318B  238B         	fcall	___fttol
 15327  1392  0020               	movlb	0	; select bank0
 15328  1393  034B               	decf	?___fttol,w
 15329  1394  3AFF               	xorlw	255
 15330  1395  3E64               	addlw	100
 15331  1396  0008               	return
 15332  1397                     __end_of_setPercentValue:	
 15333                           
 15334                           	psect	text92
 15335  0B8B                     __ptext92:	
 15336 ;; *************** function ___fttol *****************
 15337 ;; Defined at:
 15338 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15339 ;; Parameters:    Size  Location     Type
 15340 ;;  f1              3   43[BANK0 ] float 
 15341 ;; Auto vars:     Size  Location     Type
 15342 ;;  lval            4   52[BANK0 ] unsigned long 
 15343 ;;  exp1            1   56[BANK0 ] unsigned char 
 15344 ;;  sign1           1   51[BANK0 ] unsigned char 
 15345 ;; Return value:  Size  Location     Type
 15346 ;;                  4   43[BANK0 ] long 
 15347 ;; Registers used:
 15348 ;;		wreg, status,2, status,0
 15349 ;; Tracked objects:
 15350 ;;		On entry : 0/0
 15351 ;;		On exit  : 0/0
 15352 ;;		Unchanged: 0/0
 15353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15354 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15355 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15356 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15357 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15358 ;;Total ram usage:       14 bytes
 15359 ;; Hardware stack levels used:    1
 15360 ;; Hardware stack levels required when called:    5
 15361 ;; This function calls:
 15362 ;;		Nothing
 15363 ;; This function is called by:
 15364 ;;		_getPercentValue
 15365 ;;		_setPercentValue
 15366 ;; This function uses a non-reentrant model
 15367 ;;
 15368                           
 15369                           
 15370                           ;psect for function ___fttol
 15371  0B8B                     ___fttol:	
 15372                           
 15373                           ;incstack = 0
 15374                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15375  0B8B  0020               	movlb	0	; select bank0
 15376  0B8C  084B               	movf	___fttol@f1,w
 15377  0B8D  00CF               	movwf	??___fttol
 15378  0B8E  084C               	movf	___fttol@f1+1,w
 15379  0B8F  00D0               	movwf	??___fttol+1
 15380  0B90  084D               	movf	___fttol@f1+2,w
 15381  0B91  00D1               	movwf	??___fttol+2
 15382  0B92  1003               	clrc
 15383  0B93  0D50               	rlf	??___fttol+1,w
 15384  0B94  0D51               	rlf	??___fttol+2,w
 15385  0B95  00D2               	movwf	??___fttol+3
 15386  0B96  0852               	movf	??___fttol+3,w
 15387  0B97  00D8               	movwf	___fttol@exp1
 15388  0B98  08D8               	movf	___fttol@exp1,f
 15389  0B99  1D03               	skipz
 15390  0B9A  2BA4               	goto	l8572
 15391  0B9B  3000               	movlw	0
 15392  0B9C  00CE               	movwf	?___fttol+3
 15393  0B9D  3000               	movlw	0
 15394  0B9E  00CD               	movwf	?___fttol+2
 15395  0B9F  3000               	movlw	0
 15396  0BA0  00CC               	movwf	?___fttol+1
 15397  0BA1  3000               	movlw	0
 15398  0BA2  00CB               	movwf	?___fttol
 15399  0BA3  0008               	return
 15400  0BA4                     l8572:	
 15401  0BA4  084B               	movf	___fttol@f1,w
 15402  0BA5  00CF               	movwf	??___fttol
 15403  0BA6  084C               	movf	___fttol@f1+1,w
 15404  0BA7  00D0               	movwf	??___fttol+1
 15405  0BA8  084D               	movf	___fttol@f1+2,w
 15406  0BA9  00D1               	movwf	??___fttol+2
 15407  0BAA  3017               	movlw	23
 15408  0BAB                     u8995:	
 15409  0BAB  36D1               	lsrf	??___fttol+2,f
 15410  0BAC  0CD0               	rrf	??___fttol+1,f
 15411  0BAD  0CCF               	rrf	??___fttol,f
 15412  0BAE  0B89               	decfsz	9,f
 15413  0BAF  2BAB               	goto	u8995
 15414  0BB0  084F               	movf	??___fttol,w
 15415  0BB1  00D2               	movwf	??___fttol+3
 15416  0BB2  0852               	movf	??___fttol+3,w
 15417  0BB3  00D3               	movwf	___fttol@sign1
 15418  0BB4  17CC               	bsf	___fttol@f1+1,7
 15419  0BB5  30FF               	movlw	255
 15420  0BB6  05CB               	andwf	___fttol@f1,f
 15421  0BB7  30FF               	movlw	255
 15422  0BB8  05CC               	andwf	___fttol@f1+1,f
 15423  0BB9  3000               	movlw	0
 15424  0BBA  05CD               	andwf	___fttol@f1+2,f
 15425  0BBB  084B               	movf	___fttol@f1,w
 15426  0BBC  00D4               	movwf	___fttol@lval
 15427  0BBD  084C               	movf	___fttol@f1+1,w
 15428  0BBE  00D5               	movwf	___fttol@lval+1
 15429  0BBF  084D               	movf	___fttol@f1+2,w
 15430  0BC0  00D6               	movwf	___fttol@lval+2
 15431  0BC1  01D7               	clrf	___fttol@lval+3
 15432  0BC2  308E               	movlw	142
 15433  0BC3  02D8               	subwf	___fttol@exp1,f
 15434  0BC4  1FD8               	btfss	___fttol@exp1,7
 15435  0BC5  2BE2               	goto	l8592
 15436  0BC6  0858               	movf	___fttol@exp1,w
 15437  0BC7  3A80               	xorlw	128
 15438  0BC8  3E8F               	addlw	143
 15439  0BC9  1803               	skipnc
 15440  0BCA  2BD4               	goto	l8590
 15441  0BCB  3000               	movlw	0
 15442  0BCC  00CE               	movwf	?___fttol+3
 15443  0BCD  3000               	movlw	0
 15444  0BCE  00CD               	movwf	?___fttol+2
 15445  0BCF  3000               	movlw	0
 15446  0BD0  00CC               	movwf	?___fttol+1
 15447  0BD1  3000               	movlw	0
 15448  0BD2  00CB               	movwf	?___fttol
 15449  0BD3  0008               	return
 15450  0BD4                     l8590:	
 15451  0BD4  3001               	movlw	1
 15452  0BD5                     u9025:	
 15453  0BD5  36D7               	lsrf	___fttol@lval+3,f
 15454  0BD6  0CD6               	rrf	___fttol@lval+2,f
 15455  0BD7  0CD5               	rrf	___fttol@lval+1,f
 15456  0BD8  0CD4               	rrf	___fttol@lval,f
 15457  0BD9  0B89               	decfsz	9,f
 15458  0BDA  2BD5               	goto	u9025
 15459  0BDB  3001               	movlw	1
 15460  0BDC  00CF               	movwf	??___fttol
 15461  0BDD  084F               	movf	??___fttol,w
 15462  0BDE  07D8               	addwf	___fttol@exp1,f
 15463  0BDF  1903               	btfsc	3,2
 15464  0BE0  2BFB               	goto	l8602
 15465  0BE1  2BD4               	goto	l8590
 15466  0BE2                     l8592:	
 15467  0BE2  3018               	movlw	24
 15468  0BE3  0258               	subwf	___fttol@exp1,w
 15469  0BE4  1C03               	skipc
 15470  0BE5  2BF8               	goto	l8600
 15471  0BE6  3000               	movlw	0
 15472  0BE7  00CE               	movwf	?___fttol+3
 15473  0BE8  3000               	movlw	0
 15474  0BE9  00CD               	movwf	?___fttol+2
 15475  0BEA  3000               	movlw	0
 15476  0BEB  00CC               	movwf	?___fttol+1
 15477  0BEC  3000               	movlw	0
 15478  0BED  00CB               	movwf	?___fttol
 15479  0BEE  0008               	return
 15480  0BEF                     l8598:	
 15481  0BEF  3001               	movlw	1
 15482  0BF0                     u9055:	
 15483  0BF0  35D4               	lslf	___fttol@lval,f
 15484  0BF1  0DD5               	rlf	___fttol@lval+1,f
 15485  0BF2  0DD6               	rlf	___fttol@lval+2,f
 15486  0BF3  0DD7               	rlf	___fttol@lval+3,f
 15487  0BF4  0B89               	decfsz	9,f
 15488  0BF5  2BF0               	goto	u9055
 15489  0BF6  3001               	movlw	1
 15490  0BF7  02D8               	subwf	___fttol@exp1,f
 15491  0BF8                     l8600:	
 15492  0BF8  08D8               	movf	___fttol@exp1,f
 15493  0BF9  1D03               	skipz
 15494  0BFA  2BEF               	goto	l8598
 15495  0BFB                     l8602:	
 15496  0BFB  0853               	movf	___fttol@sign1,w
 15497  0BFC  1903               	btfsc	3,2
 15498  0BFD  2C09               	goto	l8606
 15499  0BFE  09D4               	comf	___fttol@lval,f
 15500  0BFF  09D5               	comf	___fttol@lval+1,f
 15501  0C00  09D6               	comf	___fttol@lval+2,f
 15502  0C01  09D7               	comf	___fttol@lval+3,f
 15503  0C02  0AD4               	incf	___fttol@lval,f
 15504  0C03  1903               	skipnz
 15505  0C04  0AD5               	incf	___fttol@lval+1,f
 15506  0C05  1903               	skipnz
 15507  0C06  0AD6               	incf	___fttol@lval+2,f
 15508  0C07  1903               	skipnz
 15509  0C08  0AD7               	incf	___fttol@lval+3,f
 15510  0C09                     l8606:	
 15511  0C09  0857               	movf	___fttol@lval+3,w
 15512  0C0A  00CE               	movwf	?___fttol+3
 15513  0C0B  0856               	movf	___fttol@lval+2,w
 15514  0C0C  00CD               	movwf	?___fttol+2
 15515  0C0D  0855               	movf	___fttol@lval+1,w
 15516  0C0E  00CC               	movwf	?___fttol+1
 15517  0C0F  0854               	movf	___fttol@lval,w
 15518  0C10  00CB               	movwf	?___fttol
 15519  0C11  0008               	return
 15520  0C12                     __end_of___fttol:	
 15521                           
 15522                           	psect	text93
 15523  0E7B                     __ptext93:	
 15524 ;; *************** function ___ftdiv *****************
 15525 ;; Defined at:
 15526 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15527 ;; Parameters:    Size  Location     Type
 15528 ;;  f2              3   14[BANK0 ] float 
 15529 ;;  f1              3   17[BANK0 ] float 
 15530 ;; Auto vars:     Size  Location     Type
 15531 ;;  f3              3   25[BANK0 ] float 
 15532 ;;  sign            1   29[BANK0 ] unsigned char 
 15533 ;;  exp             1   28[BANK0 ] unsigned char 
 15534 ;;  cntr            1   24[BANK0 ] unsigned char 
 15535 ;; Return value:  Size  Location     Type
 15536 ;;                  3   14[BANK0 ] float 
 15537 ;; Registers used:
 15538 ;;		wreg, status,2, status,0, pclath, cstack
 15539 ;; Tracked objects:
 15540 ;;		On entry : 0/0
 15541 ;;		On exit  : 0/0
 15542 ;;		Unchanged: 0/0
 15543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15544 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15545 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15546 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15547 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15548 ;;Total ram usage:       16 bytes
 15549 ;; Hardware stack levels used:    1
 15550 ;; Hardware stack levels required when called:    6
 15551 ;; This function calls:
 15552 ;;		___ftpack
 15553 ;; This function is called by:
 15554 ;;		_getPercentValue
 15555 ;;		_setPercentValue
 15556 ;; This function uses a non-reentrant model
 15557 ;;
 15558                           
 15559                           
 15560                           ;psect for function ___ftdiv
 15561  0E7B                     ___ftdiv:	
 15562                           
 15563                           ;incstack = 0
 15564                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15565  0E7B  0020               	movlb	0	; select bank0
 15566  0E7C  0831               	movf	___ftdiv@f1,w
 15567  0E7D  00B4               	movwf	??___ftdiv
 15568  0E7E  0832               	movf	___ftdiv@f1+1,w
 15569  0E7F  00B5               	movwf	??___ftdiv+1
 15570  0E80  0833               	movf	___ftdiv@f1+2,w
 15571  0E81  00B6               	movwf	??___ftdiv+2
 15572  0E82  1003               	clrc
 15573  0E83  0D35               	rlf	??___ftdiv+1,w
 15574  0E84  0D36               	rlf	??___ftdiv+2,w
 15575  0E85  00B7               	movwf	??___ftdiv+3
 15576  0E86  0837               	movf	??___ftdiv+3,w
 15577  0E87  00BC               	movwf	___ftdiv@exp
 15578  0E88  08BC               	movf	___ftdiv@exp,f
 15579  0E89  1D03               	skipz
 15580  0E8A  2E92               	goto	l8480
 15581  0E8B  3000               	movlw	0
 15582  0E8C  00AE               	movwf	?___ftdiv
 15583  0E8D  3000               	movlw	0
 15584  0E8E  00AF               	movwf	?___ftdiv+1
 15585  0E8F  3000               	movlw	0
 15586  0E90  00B0               	movwf	?___ftdiv+2
 15587  0E91  0008               	return
 15588  0E92                     l8480:	
 15589  0E92  082E               	movf	___ftdiv@f2,w
 15590  0E93  00B4               	movwf	??___ftdiv
 15591  0E94  082F               	movf	___ftdiv@f2+1,w
 15592  0E95  00B5               	movwf	??___ftdiv+1
 15593  0E96  0830               	movf	___ftdiv@f2+2,w
 15594  0E97  00B6               	movwf	??___ftdiv+2
 15595  0E98  1003               	clrc
 15596  0E99  0D35               	rlf	??___ftdiv+1,w
 15597  0E9A  0D36               	rlf	??___ftdiv+2,w
 15598  0E9B  00B7               	movwf	??___ftdiv+3
 15599  0E9C  0837               	movf	??___ftdiv+3,w
 15600  0E9D  00BD               	movwf	___ftdiv@sign
 15601  0E9E  08BD               	movf	___ftdiv@sign,f
 15602  0E9F  1D03               	skipz
 15603  0EA0  2EA8               	goto	l8486
 15604  0EA1  3000               	movlw	0
 15605  0EA2  00AE               	movwf	?___ftdiv
 15606  0EA3  3000               	movlw	0
 15607  0EA4  00AF               	movwf	?___ftdiv+1
 15608  0EA5  3000               	movlw	0
 15609  0EA6  00B0               	movwf	?___ftdiv+2
 15610  0EA7  0008               	return
 15611  0EA8                     l8486:	
 15612  0EA8  3000               	movlw	0
 15613  0EA9  00B9               	movwf	___ftdiv@f3
 15614  0EAA  3000               	movlw	0
 15615  0EAB  00BA               	movwf	___ftdiv@f3+1
 15616  0EAC  3000               	movlw	0
 15617  0EAD  00BB               	movwf	___ftdiv@f3+2
 15618  0EAE  3089               	movlw	137
 15619  0EAF  073D               	addwf	___ftdiv@sign,w
 15620  0EB0  00B4               	movwf	??___ftdiv
 15621  0EB1  0834               	movf	??___ftdiv,w
 15622  0EB2  02BC               	subwf	___ftdiv@exp,f
 15623  0EB3  0831               	movf	___ftdiv@f1,w
 15624  0EB4  00B4               	movwf	??___ftdiv
 15625  0EB5  0832               	movf	___ftdiv@f1+1,w
 15626  0EB6  00B5               	movwf	??___ftdiv+1
 15627  0EB7  0833               	movf	___ftdiv@f1+2,w
 15628  0EB8  00B6               	movwf	??___ftdiv+2
 15629  0EB9  3010               	movlw	16
 15630  0EBA                     u8805:	
 15631  0EBA  36B6               	lsrf	??___ftdiv+2,f
 15632  0EBB  0CB5               	rrf	??___ftdiv+1,f
 15633  0EBC  0CB4               	rrf	??___ftdiv,f
 15634  0EBD  0B89               	decfsz	9,f
 15635  0EBE  2EBA               	goto	u8805
 15636  0EBF  0834               	movf	??___ftdiv,w
 15637  0EC0  00B7               	movwf	??___ftdiv+3
 15638  0EC1  0837               	movf	??___ftdiv+3,w
 15639  0EC2  00BD               	movwf	___ftdiv@sign
 15640  0EC3  082E               	movf	___ftdiv@f2,w
 15641  0EC4  00B4               	movwf	??___ftdiv
 15642  0EC5  082F               	movf	___ftdiv@f2+1,w
 15643  0EC6  00B5               	movwf	??___ftdiv+1
 15644  0EC7  0830               	movf	___ftdiv@f2+2,w
 15645  0EC8  00B6               	movwf	??___ftdiv+2
 15646  0EC9  3010               	movlw	16
 15647  0ECA                     u8815:	
 15648  0ECA  36B6               	lsrf	??___ftdiv+2,f
 15649  0ECB  0CB5               	rrf	??___ftdiv+1,f
 15650  0ECC  0CB4               	rrf	??___ftdiv,f
 15651  0ECD  0B89               	decfsz	9,f
 15652  0ECE  2ECA               	goto	u8815
 15653  0ECF  0834               	movf	??___ftdiv,w
 15654  0ED0  00B7               	movwf	??___ftdiv+3
 15655  0ED1  0837               	movf	??___ftdiv+3,w
 15656  0ED2  06BD               	xorwf	___ftdiv@sign,f
 15657  0ED3  3080               	movlw	128
 15658  0ED4  00B4               	movwf	??___ftdiv
 15659  0ED5  0834               	movf	??___ftdiv,w
 15660  0ED6  05BD               	andwf	___ftdiv@sign,f
 15661  0ED7  17B2               	bsf	___ftdiv@f1+1,7
 15662  0ED8  30FF               	movlw	255
 15663  0ED9  05B1               	andwf	___ftdiv@f1,f
 15664  0EDA  30FF               	movlw	255
 15665  0EDB  05B2               	andwf	___ftdiv@f1+1,f
 15666  0EDC  3000               	movlw	0
 15667  0EDD  05B3               	andwf	___ftdiv@f1+2,f
 15668  0EDE  17AF               	bsf	___ftdiv@f2+1,7
 15669  0EDF  30FF               	movlw	255
 15670  0EE0  05AE               	andwf	___ftdiv@f2,f
 15671  0EE1  30FF               	movlw	255
 15672  0EE2  05AF               	andwf	___ftdiv@f2+1,f
 15673  0EE3  3000               	movlw	0
 15674  0EE4  05B0               	andwf	___ftdiv@f2+2,f
 15675  0EE5  3018               	movlw	24
 15676  0EE6  00B4               	movwf	??___ftdiv
 15677  0EE7  0834               	movf	??___ftdiv,w
 15678  0EE8  00B8               	movwf	___ftdiv@cntr
 15679  0EE9                     l8500:	
 15680  0EE9  3001               	movlw	1
 15681  0EEA                     u8825:	
 15682  0EEA  35B9               	lslf	___ftdiv@f3,f
 15683  0EEB  0DBA               	rlf	___ftdiv@f3+1,f
 15684  0EEC  0DBB               	rlf	___ftdiv@f3+2,f
 15685  0EED  0B89               	decfsz	9,f
 15686  0EEE  2EEA               	goto	u8825
 15687  0EEF  0830               	movf	___ftdiv@f2+2,w
 15688  0EF0  0233               	subwf	___ftdiv@f1+2,w
 15689  0EF1  1D03               	skipz
 15690  0EF2  2EF9               	goto	u8835
 15691  0EF3  082F               	movf	___ftdiv@f2+1,w
 15692  0EF4  0232               	subwf	___ftdiv@f1+1,w
 15693  0EF5  1D03               	skipz
 15694  0EF6  2EF9               	goto	u8835
 15695  0EF7  082E               	movf	___ftdiv@f2,w
 15696  0EF8  0231               	subwf	___ftdiv@f1,w
 15697  0EF9                     u8835:	
 15698  0EF9  1C03               	skipc
 15699  0EFA  2F02               	goto	l8508
 15700  0EFB  082E               	movf	___ftdiv@f2,w
 15701  0EFC  02B1               	subwf	___ftdiv@f1,f
 15702  0EFD  082F               	movf	___ftdiv@f2+1,w
 15703  0EFE  3BB2               	subwfb	___ftdiv@f1+1,f
 15704  0EFF  0830               	movf	___ftdiv@f2+2,w
 15705  0F00  3BB3               	subwfb	___ftdiv@f1+2,f
 15706  0F01  1439               	bsf	___ftdiv@f3,0
 15707  0F02                     l8508:	
 15708  0F02  3001               	movlw	1
 15709  0F03                     u8845:	
 15710  0F03  35B1               	lslf	___ftdiv@f1,f
 15711  0F04  0DB2               	rlf	___ftdiv@f1+1,f
 15712  0F05  0DB3               	rlf	___ftdiv@f1+2,f
 15713  0F06  0B89               	decfsz	9,f
 15714  0F07  2F03               	goto	u8845
 15715  0F08  3001               	movlw	1
 15716  0F09  02B8               	subwf	___ftdiv@cntr,f
 15717  0F0A  1D03               	btfss	3,2
 15718  0F0B  2EE9               	goto	l8500
 15719  0F0C  0839               	movf	___ftdiv@f3,w
 15720  0F0D  00A0               	movwf	___ftpack@arg
 15721  0F0E  083A               	movf	___ftdiv@f3+1,w
 15722  0F0F  00A1               	movwf	___ftpack@arg+1
 15723  0F10  083B               	movf	___ftdiv@f3+2,w
 15724  0F11  00A2               	movwf	___ftpack@arg+2
 15725  0F12  083C               	movf	___ftdiv@exp,w
 15726  0F13  00B4               	movwf	??___ftdiv
 15727  0F14  0834               	movf	??___ftdiv,w
 15728  0F15  00A3               	movwf	___ftpack@exp
 15729  0F16  083D               	movf	___ftdiv@sign,w
 15730  0F17  00B5               	movwf	??___ftdiv+1
 15731  0F18  0835               	movf	??___ftdiv+1,w
 15732  0F19  00A4               	movwf	___ftpack@sign
 15733  0F1A  3197  279F         	fcall	___ftpack
 15734  0F1C  0020               	movlb	0	; select bank0
 15735  0F1D  0820               	movf	?___ftpack,w
 15736  0F1E  00AE               	movwf	?___ftdiv
 15737  0F1F  0821               	movf	?___ftpack+1,w
 15738  0F20  00AF               	movwf	?___ftdiv+1
 15739  0F21  0822               	movf	?___ftpack+2,w
 15740  0F22  00B0               	movwf	?___ftdiv+2
 15741  0F23  0008               	return
 15742  0F24                     __end_of___ftdiv:	
 15743                           
 15744                           	psect	text94
 15745  1E63                     __ptext94:	
 15746 ;; *************** function ___awtoft *****************
 15747 ;; Defined at:
 15748 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15749 ;; Parameters:    Size  Location     Type
 15750 ;;  c               2    8[BANK0 ] int 
 15751 ;; Auto vars:     Size  Location     Type
 15752 ;;  sign            1   13[BANK0 ] unsigned char 
 15753 ;; Return value:  Size  Location     Type
 15754 ;;                  3    8[BANK0 ] float 
 15755 ;; Registers used:
 15756 ;;		wreg, status,2, status,0, pclath, cstack
 15757 ;; Tracked objects:
 15758 ;;		On entry : 0/0
 15759 ;;		On exit  : 0/0
 15760 ;;		Unchanged: 0/0
 15761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15762 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15764 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15765 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15766 ;;Total ram usage:        6 bytes
 15767 ;; Hardware stack levels used:    1
 15768 ;; Hardware stack levels required when called:    6
 15769 ;; This function calls:
 15770 ;;		___ftpack
 15771 ;; This function is called by:
 15772 ;;		_getPercentValue
 15773 ;;		_setPercentValue
 15774 ;; This function uses a non-reentrant model
 15775 ;;
 15776                           
 15777                           
 15778                           ;psect for function ___awtoft
 15779  1E63                     ___awtoft:	
 15780                           
 15781                           ;incstack = 0
 15782                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15783  1E63  0020               	movlb	0	; select bank0
 15784  1E64  01AD               	clrf	___awtoft@sign
 15785  1E65  1FA9               	btfss	___awtoft@c+1,7
 15786  1E66  2E6E               	goto	l8398
 15787  1E67  09A8               	comf	___awtoft@c,f
 15788  1E68  09A9               	comf	___awtoft@c+1,f
 15789  1E69  0AA8               	incf	___awtoft@c,f
 15790  1E6A  1903               	skipnz
 15791  1E6B  0AA9               	incf	___awtoft@c+1,f
 15792  1E6C  01AD               	clrf	___awtoft@sign
 15793  1E6D  0AAD               	incf	___awtoft@sign,f
 15794  1E6E                     l8398:	
 15795  1E6E  0828               	movf	___awtoft@c,w
 15796  1E6F  00A0               	movwf	___ftpack@arg
 15797  1E70  0829               	movf	___awtoft@c+1,w
 15798  1E71  00A1               	movwf	___ftpack@arg+1
 15799  1E72  01A2               	clrf	___ftpack@arg+2
 15800  1E73  308E               	movlw	142
 15801  1E74  00AB               	movwf	??___awtoft
 15802  1E75  082B               	movf	??___awtoft,w
 15803  1E76  00A3               	movwf	___ftpack@exp
 15804  1E77  082D               	movf	___awtoft@sign,w
 15805  1E78  00AC               	movwf	??___awtoft+1
 15806  1E79  082C               	movf	??___awtoft+1,w
 15807  1E7A  00A4               	movwf	___ftpack@sign
 15808  1E7B  3197  279F         	fcall	___ftpack
 15809  1E7D  0020               	movlb	0	; select bank0
 15810  1E7E  0820               	movf	?___ftpack,w
 15811  1E7F  00A8               	movwf	?___awtoft
 15812  1E80  0821               	movf	?___ftpack+1,w
 15813  1E81  00A9               	movwf	?___awtoft+1
 15814  1E82  0822               	movf	?___ftpack+2,w
 15815  1E83  00AA               	movwf	?___awtoft+2
 15816  1E84  0008               	return
 15817  1E85                     __end_of___awtoft:	
 15818                           
 15819                           	psect	text95
 15820  179F                     __ptext95:	
 15821 ;; *************** function ___ftpack *****************
 15822 ;; Defined at:
 15823 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15824 ;; Parameters:    Size  Location     Type
 15825 ;;  arg             3    0[BANK0 ] unsigned um
 15826 ;;  exp             1    3[BANK0 ] unsigned char 
 15827 ;;  sign            1    4[BANK0 ] unsigned char 
 15828 ;; Auto vars:     Size  Location     Type
 15829 ;;		None
 15830 ;; Return value:  Size  Location     Type
 15831 ;;                  3    0[BANK0 ] float 
 15832 ;; Registers used:
 15833 ;;		wreg, status,2, status,0
 15834 ;; Tracked objects:
 15835 ;;		On entry : 0/0
 15836 ;;		On exit  : 0/0
 15837 ;;		Unchanged: 0/0
 15838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15839 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15841 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15842 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;Total ram usage:        8 bytes
 15844 ;; Hardware stack levels used:    1
 15845 ;; Hardware stack levels required when called:    5
 15846 ;; This function calls:
 15847 ;;		Nothing
 15848 ;; This function is called by:
 15849 ;;		___awtoft
 15850 ;;		___ftadd
 15851 ;;		___ftdiv
 15852 ;;		___ftmul
 15853 ;; This function uses a non-reentrant model
 15854 ;;
 15855                           
 15856                           
 15857                           ;psect for function ___ftpack
 15858  179F                     ___ftpack:	
 15859                           
 15860                           ;incstack = 0
 15861                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15862  179F  0020               	movlb	0	; select bank0
 15863  17A0  0823               	movf	___ftpack@exp,w
 15864  17A1  1903               	btfsc	3,2
 15865  17A2  2FA8               	goto	l8348
 15866  17A3  0822               	movf	___ftpack@arg+2,w
 15867  17A4  0421               	iorwf	___ftpack@arg+1,w
 15868  17A5  0420               	iorwf	___ftpack@arg,w
 15869  17A6  1D03               	skipz
 15870  17A7  2FB9               	goto	l8354
 15871  17A8                     l8348:	
 15872  17A8  3000               	movlw	0
 15873  17A9  00A0               	movwf	?___ftpack
 15874  17AA  3000               	movlw	0
 15875  17AB  00A1               	movwf	?___ftpack+1
 15876  17AC  3000               	movlw	0
 15877  17AD  00A2               	movwf	?___ftpack+2
 15878  17AE  0008               	return
 15879  17AF                     l8352:	
 15880  17AF  3001               	movlw	1
 15881  17B0  00A5               	movwf	??___ftpack
 15882  17B1  0825               	movf	??___ftpack,w
 15883  17B2  07A3               	addwf	___ftpack@exp,f
 15884  17B3  3001               	movlw	1
 15885  17B4                     u8435:	
 15886  17B4  36A2               	lsrf	___ftpack@arg+2,f
 15887  17B5  0CA1               	rrf	___ftpack@arg+1,f
 15888  17B6  0CA0               	rrf	___ftpack@arg,f
 15889  17B7  0B89               	decfsz	9,f
 15890  17B8  2FB4               	goto	u8435
 15891  17B9                     l8354:	
 15892  17B9  30FE               	movlw	254
 15893  17BA  0522               	andwf	___ftpack@arg+2,w
 15894  17BB  1903               	btfsc	3,2
 15895  17BC  2FD2               	goto	l2916
 15896  17BD  2FAF               	goto	l8352
 15897  17BE                     l8356:	
 15898  17BE  3001               	movlw	1
 15899  17BF  00A5               	movwf	??___ftpack
 15900  17C0  0825               	movf	??___ftpack,w
 15901  17C1  07A3               	addwf	___ftpack@exp,f
 15902  17C2  3001               	movlw	1
 15903  17C3  07A0               	addwf	___ftpack@arg,f
 15904  17C4  3000               	movlw	0
 15905  17C5  1803               	skipnc
 15906  17C6  3001               	movlw	1
 15907  17C7  07A1               	addwf	___ftpack@arg+1,f
 15908  17C8  3000               	movlw	0
 15909  17C9  1803               	skipnc
 15910  17CA  3001               	movlw	1
 15911  17CB  07A2               	addwf	___ftpack@arg+2,f
 15912  17CC  3001               	movlw	1
 15913  17CD                     u8455:	
 15914  17CD  36A2               	lsrf	___ftpack@arg+2,f
 15915  17CE  0CA1               	rrf	___ftpack@arg+1,f
 15916  17CF  0CA0               	rrf	___ftpack@arg,f
 15917  17D0  0B89               	decfsz	9,f
 15918  17D1  2FCD               	goto	u8455
 15919  17D2                     l2916:	
 15920  17D2  30FF               	movlw	255
 15921  17D3  0522               	andwf	___ftpack@arg+2,w
 15922  17D4  1903               	btfsc	3,2
 15923  17D5  2FDF               	goto	l8364
 15924  17D6  2FBE               	goto	l8356
 15925  17D7                     l8362:	
 15926  17D7  3001               	movlw	1
 15927  17D8  02A3               	subwf	___ftpack@exp,f
 15928  17D9  3001               	movlw	1
 15929  17DA                     u8475:	
 15930  17DA  35A0               	lslf	___ftpack@arg,f
 15931  17DB  0DA1               	rlf	___ftpack@arg+1,f
 15932  17DC  0DA2               	rlf	___ftpack@arg+2,f
 15933  17DD  0B89               	decfsz	9,f
 15934  17DE  2FDA               	goto	u8475
 15935  17DF                     l8364:	
 15936  17DF  1FA1               	btfss	___ftpack@arg+1,7
 15937  17E0  2FD7               	goto	l8362
 15938  17E1  1823               	btfsc	___ftpack@exp,0
 15939  17E2  2FE9               	goto	l2922
 15940  17E3  30FF               	movlw	255
 15941  17E4  05A0               	andwf	___ftpack@arg,f
 15942  17E5  307F               	movlw	127
 15943  17E6  05A1               	andwf	___ftpack@arg+1,f
 15944  17E7  30FF               	movlw	255
 15945  17E8  05A2               	andwf	___ftpack@arg+2,f
 15946  17E9                     l2922:	
 15947  17E9  1003               	clrc
 15948  17EA  0CA3               	rrf	___ftpack@exp,f
 15949  17EB  0823               	movf	___ftpack@exp,w
 15950  17EC  00A5               	movwf	??___ftpack
 15951  17ED  01A6               	clrf	??___ftpack+1
 15952  17EE  01A7               	clrf	??___ftpack+2
 15953  17EF  3010               	movlw	16
 15954  17F0                     u8505:	
 15955  17F0  35A5               	lslf	??___ftpack,f
 15956  17F1  0DA6               	rlf	??___ftpack+1,f
 15957  17F2  0DA7               	rlf	??___ftpack+2,f
 15958  17F3  0B89               	decfsz	9,f
 15959  17F4  2FF0               	goto	u8505
 15960  17F5  0825               	movf	??___ftpack,w
 15961  17F6  04A0               	iorwf	___ftpack@arg,f
 15962  17F7  0826               	movf	??___ftpack+1,w
 15963  17F8  04A1               	iorwf	___ftpack@arg+1,f
 15964  17F9  0827               	movf	??___ftpack+2,w
 15965  17FA  04A2               	iorwf	___ftpack@arg+2,f
 15966  17FB  0824               	movf	___ftpack@sign,w
 15967  17FC  1903               	btfsc	3,2
 15968  17FD  0008               	return
 15969  17FE  17A2               	bsf	___ftpack@arg+2,7
 15970  17FF  0008               	return
 15971  1800                     __end_of___ftpack:	
 15972                           
 15973                           	psect	text96
 15974  1E23                     __ptext96:	
 15975 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15976 ;; Defined at:
 15977 ;;		line 783 in file "../src/Dimmer_B1.c"
 15978 ;; Parameters:    Size  Location     Type
 15979 ;;  lights          1    wreg     unsigned char 
 15980 ;;  command         1    2[BANK0 ] unsigned char 
 15981 ;; Auto vars:     Size  Location     Type
 15982 ;;  lights          1    4[BANK0 ] unsigned char 
 15983 ;; Return value:  Size  Location     Type
 15984 ;;		None               void
 15985 ;; Registers used:
 15986 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15987 ;; Tracked objects:
 15988 ;;		On entry : 0/0
 15989 ;;		On exit  : 0/0
 15990 ;;		Unchanged: 0/0
 15991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15992 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15993 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15994 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15995 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15996 ;;Total ram usage:        3 bytes
 15997 ;; Hardware stack levels used:    1
 15998 ;; Hardware stack levels required when called:    6
 15999 ;; This function calls:
 16000 ;;		_DimmerLightsPointSelect
 16001 ;; This function is called by:
 16002 ;;		_setDimmerLights_SwOff
 16003 ;;		_setDimmerLights_AdjControl
 16004 ;; This function uses a non-reentrant model
 16005 ;;
 16006                           
 16007                           
 16008                           ;psect for function _setDimmerLights_TriggerAdj
 16009  1E23                     _setDimmerLights_TriggerAdj:	
 16010                           
 16011                           ;incstack = 0
 16012                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16013                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 16014  1E23  0020               	movlb	0	; select bank0
 16015  1E24  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 16016                           
 16017                           ;Dimmer_B1.c: 784: DimmerLightsPointSelect(lights);
 16018  1E25  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 16019  1E26  319C  2430         	fcall	_DimmerLightsPointSelect
 16020                           
 16021                           ;Dimmer_B1.c: 785: DimmerLights->TriggerAdj = 1;
 16022  1E28  0877               	movf	_DimmerLights,w
 16023  1E29  3E08               	addlw	8
 16024  1E2A  0086               	movwf	6
 16025  1E2B  3001               	movlw	1	; select bank2/3
 16026  1E2C  0087               	movwf	7
 16027  1E2D  1601               	bsf	1,4
 16028                           
 16029                           ;Dimmer_B1.c: 786: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 16030  1E2E  0020               	movlb	0	; select bank0
 16031  1E2F  0822               	movf	setDimmerLights_TriggerAdj@command,w
 16032  1E30  3A01               	xorlw	1
 16033  1E31  3000               	movlw	0
 16034  1E32  1903               	skipnz
 16035  1E33  3001               	movlw	1
 16036  1E34  00A3               	movwf	??_setDimmerLights_TriggerAdj
 16037  1E35  0877               	movf	_DimmerLights,w
 16038  1E36  3E08               	addlw	8
 16039  1E37  0086               	movwf	6
 16040  1E38  3001               	movlw	1	; select bank2/3
 16041  1E39  0087               	movwf	7
 16042  1E3A  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16043  1E3B  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16044  1E3C  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16045  1E3D  0801               	movf	1,w
 16046  1E3E  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16047  1E3F  39F7               	andlw	-9
 16048  1E40  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16049  1E41  0081               	movwf	1
 16050  1E42  0008               	return
 16051  1E43                     __end_of_setDimmerLights_TriggerAdj:	
 16052                           
 16053                           	psect	text97
 16054  1DC7                     __ptext97:	
 16055 ;; *************** function _setDimmerLights_Trigger *****************
 16056 ;; Defined at:
 16057 ;;		line 777 in file "../src/Dimmer_B1.c"
 16058 ;; Parameters:    Size  Location     Type
 16059 ;;  lights          1    wreg     unsigned char 
 16060 ;;  command         1    2[BANK0 ] unsigned char 
 16061 ;; Auto vars:     Size  Location     Type
 16062 ;;  lights          1    4[BANK0 ] unsigned char 
 16063 ;; Return value:  Size  Location     Type
 16064 ;;		None               void
 16065 ;; Registers used:
 16066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16067 ;; Tracked objects:
 16068 ;;		On entry : 0/0
 16069 ;;		On exit  : 0/0
 16070 ;;		Unchanged: 0/0
 16071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16072 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16075 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16076 ;;Total ram usage:        3 bytes
 16077 ;; Hardware stack levels used:    1
 16078 ;; Hardware stack levels required when called:    6
 16079 ;; This function calls:
 16080 ;;		_DimmerLightsPointSelect
 16081 ;; This function is called by:
 16082 ;;		_setDimmerLights_SwOn
 16083 ;;		_setDimmerLights_SwOff
 16084 ;; This function uses a non-reentrant model
 16085 ;;
 16086                           
 16087                           
 16088                           ;psect for function _setDimmerLights_Trigger
 16089  1DC7                     _setDimmerLights_Trigger:	
 16090                           
 16091                           ;incstack = 0
 16092                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16093                           ;setDimmerLights_Trigger@lights stored from wreg
 16094  1DC7  0020               	movlb	0	; select bank0
 16095  1DC8  00A4               	movwf	setDimmerLights_Trigger@lights
 16096                           
 16097                           ;Dimmer_B1.c: 778: DimmerLightsPointSelect(lights);
 16098  1DC9  0824               	movf	setDimmerLights_Trigger@lights,w
 16099  1DCA  319C  2430         	fcall	_DimmerLightsPointSelect
 16100                           
 16101                           ;Dimmer_B1.c: 779: DimmerLights->Trigger = 1;
 16102  1DCC  0877               	movf	_DimmerLights,w
 16103  1DCD  3E08               	addlw	8
 16104  1DCE  0086               	movwf	6
 16105  1DCF  3001               	movlw	1	; select bank2/3
 16106  1DD0  0087               	movwf	7
 16107  1DD1  1501               	bsf	1,2
 16108                           
 16109                           ;Dimmer_B1.c: 780: DimmerLights->Switch = command == 1 ? 1 : 0;
 16110  1DD2  0020               	movlb	0	; select bank0
 16111  1DD3  0822               	movf	setDimmerLights_Trigger@command,w
 16112  1DD4  3A01               	xorlw	1
 16113  1DD5  3000               	movlw	0
 16114  1DD6  1903               	skipnz
 16115  1DD7  3001               	movlw	1
 16116  1DD8  00A3               	movwf	??_setDimmerLights_Trigger
 16117  1DD9  0877               	movf	_DimmerLights,w
 16118  1DDA  3E08               	addlw	8
 16119  1DDB  0086               	movwf	6
 16120  1DDC  3001               	movlw	1	; select bank2/3
 16121  1DDD  0087               	movwf	7
 16122  1DDE  0DA3               	rlf	??_setDimmerLights_Trigger,f
 16123  1DDF  0801               	movf	1,w
 16124  1DE0  0623               	xorwf	??_setDimmerLights_Trigger,w
 16125  1DE1  39FD               	andlw	-3
 16126  1DE2  0623               	xorwf	??_setDimmerLights_Trigger,w
 16127  1DE3  0081               	movwf	1
 16128  1DE4  0008               	return
 16129  1DE5                     __end_of_setDimmerLights_Trigger:	
 16130                           
 16131                           	psect	text98
 16132  173E                     __ptext98:	
 16133 ;; *************** function _setDelayOff_GO *****************
 16134 ;; Defined at:
 16135 ;;		line 86 in file "../src/DelayOff_B1.c"
 16136 ;; Parameters:    Size  Location     Type
 16137 ;;  sw              1    wreg     unsigned char 
 16138 ;;  command         1   10[BANK0 ] unsigned char 
 16139 ;;  value           1   11[BANK0 ] unsigned char 
 16140 ;; Auto vars:     Size  Location     Type
 16141 ;;  sw              1   14[BANK0 ] unsigned char 
 16142 ;; Return value:  Size  Location     Type
 16143 ;;		None               void
 16144 ;; Registers used:
 16145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16146 ;; Tracked objects:
 16147 ;;		On entry : 0/0
 16148 ;;		On exit  : 0/0
 16149 ;;		Unchanged: 0/0
 16150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16151 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16153 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16154 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16155 ;;Total ram usage:        5 bytes
 16156 ;; Hardware stack levels used:    1
 16157 ;; Hardware stack levels required when called:    7
 16158 ;; This function calls:
 16159 ;;		_DelayOffPointSelect
 16160 ;;		_DelayTimejudge
 16161 ;; This function is called by:
 16162 ;;		_setDimmerLights_SwOff
 16163 ;;		_setRFSW_Control
 16164 ;; This function uses a non-reentrant model
 16165 ;;
 16166                           
 16167                           
 16168                           ;psect for function _setDelayOff_GO
 16169  173E                     _setDelayOff_GO:	
 16170                           
 16171                           ;incstack = 0
 16172                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16173                           ;setDelayOff_GO@sw stored from wreg
 16174  173E  0020               	movlb	0	; select bank0
 16175  173F  00AE               	movwf	setDelayOff_GO@sw
 16176                           
 16177                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
 16178  1740  082E               	movf	setDelayOff_GO@sw,w
 16179  1741  319C  247D  3197   	fcall	_DelayOffPointSelect
 16180                           
 16181                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
 16182  1744  0876               	movf	_DelayOff,w
 16183  1745  0086               	movwf	6
 16184  1746  3001               	movlw	1	; select bank2/3
 16185  1747  0087               	movwf	7
 16186  1748  1C01               	btfss	1,0
 16187  1749  0008               	return
 16188                           
 16189                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
 16190  174A  0020               	movlb	0	; select bank0
 16191  174B  082A               	movf	setDelayOff_GO@command,w
 16192  174C  3A01               	xorlw	1
 16193  174D  3000               	movlw	0
 16194  174E  1903               	skipnz
 16195  174F  3001               	movlw	1
 16196  1750  00AC               	movwf	??_setDelayOff_GO
 16197  1751  0876               	movf	_DelayOff,w
 16198  1752  0086               	movwf	6
 16199  1753  3001               	movlw	1	; select bank2/3
 16200  1754  0087               	movwf	7
 16201  1755  0DAC               	rlf	??_setDelayOff_GO,f
 16202  1756  0801               	movf	1,w
 16203  1757  062C               	xorwf	??_setDelayOff_GO,w
 16204  1758  39FD               	andlw	-3
 16205  1759  062C               	xorwf	??_setDelayOff_GO,w
 16206  175A  0081               	movwf	1
 16207                           
 16208                           ;DelayOff_B1.c: 90: if (command == 1) {
 16209  175B  082A               	movf	setDelayOff_GO@command,w
 16210  175C  3A01               	xorlw	1
 16211  175D  1D03               	skipz
 16212  175E  2F89               	goto	l8766
 16213                           
 16214                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
 16215  175F  082B               	movf	setDelayOff_GO@value,w
 16216  1760  319F  27D6  3197   	fcall	_DelayTimejudge
 16217  1763  0020               	movlb	0	; select bank0
 16218  1764  00AC               	movwf	??_setDelayOff_GO
 16219  1765  0876               	movf	_DelayOff,w
 16220  1766  0086               	movwf	6
 16221  1767  3001               	movlw	1	; select bank2/3
 16222  1768  0087               	movwf	7
 16223  1769  082C               	movf	??_setDelayOff_GO,w
 16224  176A  0081               	movwf	1
 16225                           
 16226                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16227  176B  300F               	movlw	15
 16228  176C  052B               	andwf	setDelayOff_GO@value,w
 16229  176D  00AC               	movwf	??_setDelayOff_GO
 16230  176E  082C               	movf	??_setDelayOff_GO,w
 16231  176F  3A05               	xorlw	5
 16232  1770  1903               	skipnz
 16233  1771  2F76               	goto	l8760
 16234  1772  082B               	movf	setDelayOff_GO@value,w
 16235  1773  390F               	andlw	15
 16236  1774  1D03               	btfss	3,2
 16237  1775  2F7C               	goto	l8764
 16238  1776                     l8760:	
 16239  1776  3026               	movlw	38
 16240  1777  022B               	subwf	setDelayOff_GO@value,w
 16241  1778  1803               	skipnc
 16242  1779  2F7C               	goto	l8764
 16243                           
 16244                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
 16245  177A  082B               	movf	setDelayOff_GO@value,w
 16246  177B  2F7D               	goto	L10
 16247  177C                     l8764:	
 16248                           ;DelayOff_B1.c: 94: } else {
 16249                           
 16250                           
 16251                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
 16252  177C  3005               	movlw	5
 16253  177D                     L10:	
 16254  177D  00AC               	movwf	??_setDelayOff_GO
 16255  177E  082E               	movf	setDelayOff_GO@sw,w
 16256  177F  3E1A               	addlw	26
 16257  1780  077B               	addwf	_product,w
 16258  1781  00AD               	movwf	??_setDelayOff_GO+1
 16259  1782  082D               	movf	??_setDelayOff_GO+1,w
 16260  1783  0086               	movwf	6
 16261  1784  3002               	movlw	2	; select bank4/5
 16262  1785  0087               	movwf	7
 16263  1786  082C               	movf	??_setDelayOff_GO,w
 16264  1787  0081               	movwf	1
 16265                           
 16266                           ;DelayOff_B1.c: 96: }
 16267                           ;DelayOff_B1.c: 97: } else {
 16268  1788  2F92               	goto	l8768
 16269  1789                     l8766:	
 16270                           
 16271                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
 16272  1789  082E               	movf	setDelayOff_GO@sw,w
 16273  178A  3E1A               	addlw	26
 16274  178B  077B               	addwf	_product,w
 16275  178C  00AC               	movwf	??_setDelayOff_GO
 16276  178D  082C               	movf	??_setDelayOff_GO,w
 16277  178E  0086               	movwf	6
 16278  178F  3002               	movlw	2	; select bank4/5
 16279  1790  0087               	movwf	7
 16280  1791  0181               	clrf	1
 16281  1792                     l8768:	
 16282                           
 16283                           ;DelayOff_B1.c: 99: }
 16284                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
 16285  1792  0876               	movf	_DelayOff,w
 16286  1793  0086               	movwf	6
 16287  1794  3001               	movlw	1	; select bank2/3
 16288  1795  0087               	movwf	7
 16289  1796  3000               	movlw	0
 16290  1797  3FC0               	movwi [0]fsr1
 16291  1798  3FC1               	movwi [1]fsr1
 16292                           
 16293                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
 16294  1799  0876               	movf	_DelayOff,w
 16295  179A  0086               	movwf	6
 16296  179B  3001               	movlw	1	; select bank2/3
 16297  179C  0087               	movwf	7
 16298  179D  0181               	clrf	1
 16299  179E  0008               	return
 16300  179F                     __end_of_setDelayOff_GO:	
 16301                           
 16302                           	psect	text99
 16303  1FD6                     __ptext99:	
 16304 ;; *************** function _DelayTimejudge *****************
 16305 ;; Defined at:
 16306 ;;		line 106 in file "../src/DelayOff_B1.c"
 16307 ;; Parameters:    Size  Location     Type
 16308 ;;  value           1    wreg     unsigned char 
 16309 ;; Auto vars:     Size  Location     Type
 16310 ;;  value           1    9[BANK0 ] unsigned char 
 16311 ;;  k               1    8[BANK0 ] unsigned char 
 16312 ;;  j               1    7[BANK0 ] unsigned char 
 16313 ;;  i               1    6[BANK0 ] unsigned char 
 16314 ;; Return value:  Size  Location     Type
 16315 ;;                  1    wreg      unsigned char 
 16316 ;; Registers used:
 16317 ;;		wreg, status,2, status,0, pclath, cstack
 16318 ;; Tracked objects:
 16319 ;;		On entry : 0/0
 16320 ;;		On exit  : 0/0
 16321 ;;		Unchanged: 0/0
 16322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16324 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;Total ram usage:        6 bytes
 16328 ;; Hardware stack levels used:    1
 16329 ;; Hardware stack levels required when called:    6
 16330 ;; This function calls:
 16331 ;;		___bmul
 16332 ;; This function is called by:
 16333 ;;		_setDelayOff_GO
 16334 ;; This function uses a non-reentrant model
 16335 ;;
 16336                           
 16337                           
 16338                           ;psect for function _DelayTimejudge
 16339  1FD6                     _DelayTimejudge:	
 16340                           
 16341                           ;incstack = 0
 16342                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16343                           ;DelayTimejudge@value stored from wreg
 16344  1FD6  0020               	movlb	0	; select bank0
 16345  1FD7  00A9               	movwf	DelayTimejudge@value
 16346                           
 16347                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
 16348  1FD8  3005               	movlw	5
 16349  1FD9  00A4               	movwf	??_DelayTimejudge
 16350  1FDA  0824               	movf	??_DelayTimejudge,w
 16351  1FDB  00A6               	movwf	DelayTimejudge@i
 16352  1FDC  01A7               	clrf	DelayTimejudge@j
 16353  1FDD  01A8               	clrf	DelayTimejudge@k
 16354                           
 16355                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
 16356  1FDE  3031               	movlw	49
 16357  1FDF  0229               	subwf	DelayTimejudge@value,w
 16358  1FE0  1803               	skipnc
 16359  1FE1  2FFE               	goto	l8630
 16360                           
 16361                           ;DelayOff_B1.c: 109: j = value & 0x0f;
 16362  1FE2  0829               	movf	DelayTimejudge@value,w
 16363  1FE3  390F               	andlw	15
 16364  1FE4  00A4               	movwf	??_DelayTimejudge
 16365  1FE5  0824               	movf	??_DelayTimejudge,w
 16366  1FE6  00A7               	movwf	DelayTimejudge@j
 16367                           
 16368                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
 16369  1FE7  0829               	movf	DelayTimejudge@value,w
 16370  1FE8  00A4               	movwf	??_DelayTimejudge
 16371  1FE9  3004               	movlw	4
 16372  1FEA                     u9115:	
 16373  1FEA  36A4               	lsrf	??_DelayTimejudge,f
 16374  1FEB  0B89               	decfsz	9,f
 16375  1FEC  2FEA               	goto	u9115
 16376  1FED  0824               	movf	??_DelayTimejudge,w
 16377  1FEE  390F               	andlw	15
 16378  1FEF  00A5               	movwf	??_DelayTimejudge+1
 16379  1FF0  0825               	movf	??_DelayTimejudge+1,w
 16380  1FF1  00A8               	movwf	DelayTimejudge@k
 16381                           
 16382                           ;DelayOff_B1.c: 111: i = j + (k * 10);
 16383  1FF2  300A               	movlw	10
 16384  1FF3  00A4               	movwf	??_DelayTimejudge
 16385  1FF4  0824               	movf	??_DelayTimejudge,w
 16386  1FF5  00A0               	movwf	___bmul@multiplicand
 16387  1FF6  0828               	movf	DelayTimejudge@k,w
 16388  1FF7  319B  23E8         	fcall	___bmul
 16389  1FF9  0020               	movlb	0	; select bank0
 16390  1FFA  0727               	addwf	DelayTimejudge@j,w
 16391  1FFB  00A5               	movwf	??_DelayTimejudge+1
 16392  1FFC  0825               	movf	??_DelayTimejudge+1,w
 16393  1FFD  00A6               	movwf	DelayTimejudge@i
 16394  1FFE                     l8630:	
 16395                           
 16396                           ;DelayOff_B1.c: 112: }
 16397                           ;DelayOff_B1.c: 133: return i;
 16398  1FFE  0826               	movf	DelayTimejudge@i,w
 16399  1FFF  0008               	return
 16400  2000                     __end_of_DelayTimejudge:	
 16401                           
 16402                           	psect	text100
 16403  1BE8                     __ptext100:	
 16404 ;; *************** function ___bmul *****************
 16405 ;; Defined at:
 16406 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16407 ;; Parameters:    Size  Location     Type
 16408 ;;  multiplier      1    wreg     unsigned char 
 16409 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16410 ;; Auto vars:     Size  Location     Type
 16411 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16412 ;;  product         1    2[BANK0 ] unsigned char 
 16413 ;; Return value:  Size  Location     Type
 16414 ;;                  1    wreg      unsigned char 
 16415 ;; Registers used:
 16416 ;;		wreg, status,2, status,0
 16417 ;; Tracked objects:
 16418 ;;		On entry : 0/0
 16419 ;;		On exit  : 0/0
 16420 ;;		Unchanged: 0/0
 16421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16422 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;Total ram usage:        4 bytes
 16427 ;; Hardware stack levels used:    1
 16428 ;; Hardware stack levels required when called:    5
 16429 ;; This function calls:
 16430 ;;		Nothing
 16431 ;; This function is called by:
 16432 ;;		_DelayTimejudge
 16433 ;; This function uses a non-reentrant model
 16434 ;;
 16435                           
 16436                           
 16437                           ;psect for function ___bmul
 16438  1BE8                     ___bmul:	
 16439                           
 16440                           ;incstack = 0
 16441                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16442                           ;___bmul@multiplier stored from wreg
 16443  1BE8  0020               	movlb	0	; select bank0
 16444  1BE9  00A3               	movwf	___bmul@multiplier
 16445  1BEA  01A2               	clrf	___bmul@product
 16446  1BEB                     l8376:	
 16447  1BEB  1C23               	btfss	___bmul@multiplier,0
 16448  1BEC  2BF1               	goto	l8380
 16449  1BED  0820               	movf	___bmul@multiplicand,w
 16450  1BEE  00A1               	movwf	??___bmul
 16451  1BEF  0821               	movf	??___bmul,w
 16452  1BF0  07A2               	addwf	___bmul@product,f
 16453  1BF1                     l8380:	
 16454  1BF1  1003               	clrc
 16455  1BF2  0DA0               	rlf	___bmul@multiplicand,f
 16456  1BF3  1003               	clrc
 16457  1BF4  0CA3               	rrf	___bmul@multiplier,f
 16458  1BF5  08A3               	movf	___bmul@multiplier,f
 16459  1BF6  1D03               	skipz
 16460  1BF7  2BEB               	goto	l8376
 16461  1BF8  0822               	movf	___bmul@product,w
 16462  1BF9  0008               	return
 16463  1BFA                     __end_of___bmul:	
 16464                           
 16465                           	psect	text101
 16466  1BA4                     __ptext101:	
 16467 ;; *************** function _getDimmerLights_Status *****************
 16468 ;; Defined at:
 16469 ;;		line 474 in file "../src/Dimmer_B1.c"
 16470 ;; Parameters:    Size  Location     Type
 16471 ;;  lights          1    wreg     unsigned char 
 16472 ;; Auto vars:     Size  Location     Type
 16473 ;;  lights          1    2[BANK0 ] unsigned char 
 16474 ;;  status          1    3[BANK0 ] unsigned char 
 16475 ;; Return value:  Size  Location     Type
 16476 ;;                  1    wreg      unsigned char 
 16477 ;; Registers used:
 16478 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16479 ;; Tracked objects:
 16480 ;;		On entry : 0/0
 16481 ;;		On exit  : 0/0
 16482 ;;		Unchanged: 0/0
 16483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16485 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16487 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16488 ;;Total ram usage:        2 bytes
 16489 ;; Hardware stack levels used:    1
 16490 ;; Hardware stack levels required when called:    6
 16491 ;; This function calls:
 16492 ;;		_DimmerLightsPointSelect
 16493 ;; This function is called by:
 16494 ;;		_DlyOff_Main
 16495 ;;		_setDimmerLights_ErrorClose
 16496 ;;		_getMain_LightsStatus
 16497 ;;		_setRFSW_Control
 16498 ;;		_setRFSW_AdjControl
 16499 ;; This function uses a non-reentrant model
 16500 ;;
 16501                           
 16502                           
 16503                           ;psect for function _getDimmerLights_Status
 16504  1BA4                     _getDimmerLights_Status:	
 16505                           
 16506                           ;incstack = 0
 16507                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16508                           ;getDimmerLights_Status@lights stored from wreg
 16509  1BA4  0020               	movlb	0	; select bank0
 16510  1BA5  00A2               	movwf	getDimmerLights_Status@lights
 16511                           
 16512                           ;Dimmer_B1.c: 475: DimmerLightsPointSelect(lights);
 16513  1BA6  0822               	movf	getDimmerLights_Status@lights,w
 16514  1BA7  319C  2430         	fcall	_DimmerLightsPointSelect
 16515                           
 16516                           ;Dimmer_B1.c: 476: char status = DimmerLights->Status == 1 ? 1 : 0;
 16517  1BA9  0877               	movf	_DimmerLights,w
 16518  1BAA  0086               	movwf	6
 16519  1BAB  3001               	movlw	1	; select bank2/3
 16520  1BAC  0087               	movwf	7
 16521  1BAD  3000               	movlw	0
 16522  1BAE  1A81               	btfsc	1,5
 16523  1BAF  3001               	movlw	1
 16524  1BB0  0020               	movlb	0	; select bank0
 16525  1BB1  00A3               	movwf	getDimmerLights_Status@status
 16526                           
 16527                           ;Dimmer_B1.c: 477: return status;
 16528  1BB2  0823               	movf	getDimmerLights_Status@status,w
 16529  1BB3  0008               	return
 16530  1BB4                     __end_of_getDimmerLights_Status:	
 16531                           
 16532                           	psect	text102
 16533  1C30                     __ptext102:	
 16534 ;; *************** function _DimmerLightsPointSelect *****************
 16535 ;; Defined at:
 16536 ;;		line 323 in file "../src/Dimmer_B1.c"
 16537 ;; Parameters:    Size  Location     Type
 16538 ;;  lights          1    wreg     unsigned char 
 16539 ;; Auto vars:     Size  Location     Type
 16540 ;;  lights          1    1[BANK0 ] unsigned char 
 16541 ;; Return value:  Size  Location     Type
 16542 ;;		None               void
 16543 ;; Registers used:
 16544 ;;		wreg
 16545 ;; Tracked objects:
 16546 ;;		On entry : 0/0
 16547 ;;		On exit  : 0/0
 16548 ;;		Unchanged: 0/0
 16549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16552 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16553 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;Total ram usage:        2 bytes
 16555 ;; Hardware stack levels used:    1
 16556 ;; Hardware stack levels required when called:    5
 16557 ;; This function calls:
 16558 ;;		Nothing
 16559 ;; This function is called by:
 16560 ;;		_setDimmerLights_Initialization
 16561 ;;		_setDimmerLights_Main
 16562 ;;		_getDimmerLights_Status
 16563 ;;		_setDimmerLights_SwOn
 16564 ;;		_setDimmerLights_SwOff
 16565 ;;		_setDimmerLights_AdjControl
 16566 ;;		_setDimmerLights_ErrorClose
 16567 ;;		_setDimmerLights
 16568 ;;		_setDimmerLights_Adj
 16569 ;;		_setDimmerLights_AdjRF
 16570 ;;		_setDimmerLights_Trigger
 16571 ;;		_setDimmerLights_TriggerAdj
 16572 ;;		_setDimmerLights_Status
 16573 ;;		_setDimmerLights_GO
 16574 ;;		_setDimmerLights_MaxmumValue
 16575 ;; This function uses a non-reentrant model
 16576 ;;
 16577                           
 16578                           
 16579                           ;psect for function _DimmerLightsPointSelect
 16580  1C30                     _DimmerLightsPointSelect:	
 16581                           
 16582                           ;incstack = 0
 16583                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16584                           ;DimmerLightsPointSelect@lights stored from wreg
 16585  1C30  0020               	movlb	0	; select bank0
 16586  1C31  00A1               	movwf	DimmerLightsPointSelect@lights
 16587                           
 16588                           ;Dimmer_B1.c: 325: if (lights == 1) {
 16589  1C32  0821               	movf	DimmerLightsPointSelect@lights,w
 16590  1C33  3A01               	xorlw	1
 16591  1C34  1D03               	skipz
 16592  1C35  2C3A               	goto	l786
 16593                           
 16594                           ;Dimmer_B1.c: 326: DimmerLights = &DimmerLights1;
 16595  1C36  30BE               	movlw	_DimmerLights1& (0+255)
 16596  1C37  00A0               	movwf	??_DimmerLightsPointSelect
 16597  1C38  0820               	movf	??_DimmerLightsPointSelect,w
 16598  1C39  00F7               	movwf	_DimmerLights
 16599  1C3A                     l786:	
 16600                           
 16601                           ;Dimmer_B1.c: 327: }
 16602                           ;Dimmer_B1.c: 330: if (lights == 2) {
 16603  1C3A  0821               	movf	DimmerLightsPointSelect@lights,w
 16604  1C3B  3A02               	xorlw	2
 16605  1C3C  1D03               	skipz
 16606  1C3D  0008               	return
 16607                           
 16608                           ;Dimmer_B1.c: 331: DimmerLights = &DimmerLights2;
 16609  1C3E  30CD               	movlw	_DimmerLights2& (0+255)
 16610  1C3F  00A0               	movwf	??_DimmerLightsPointSelect
 16611  1C40  0820               	movf	??_DimmerLightsPointSelect,w
 16612  1C41  00F7               	movwf	_DimmerLights
 16613  1C42  0008               	return
 16614  1C43                     __end_of_DimmerLightsPointSelect:	
 16615                           
 16616                           	psect	text103
 16617  1AB8                     __ptext103:	
 16618 ;; *************** function _DelayOff_Initialization *****************
 16619 ;; Defined at:
 16620 ;;		line 26 in file "../src/DelayOff_B1.c"
 16621 ;; Parameters:    Size  Location     Type
 16622 ;;		None
 16623 ;; Auto vars:     Size  Location     Type
 16624 ;;		None
 16625 ;; Return value:  Size  Location     Type
 16626 ;;		None               void
 16627 ;; Registers used:
 16628 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16629 ;; Tracked objects:
 16630 ;;		On entry : 0/0
 16631 ;;		On exit  : 0/0
 16632 ;;		Unchanged: 0/0
 16633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16638 ;;Total ram usage:        0 bytes
 16639 ;; Hardware stack levels used:    1
 16640 ;; Hardware stack levels required when called:    7
 16641 ;; This function calls:
 16642 ;;		_DlyOff_Initialization
 16643 ;; This function is called by:
 16644 ;;		_main
 16645 ;; This function uses a non-reentrant model
 16646 ;;
 16647                           
 16648                           
 16649                           ;psect for function _DelayOff_Initialization
 16650  1AB8                     _DelayOff_Initialization:	
 16651                           
 16652                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16653                           
 16654                           ;incstack = 0
 16655                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16656  1AB8  3001               	movlw	1
 16657  1AB9  319A  22E9  319A   	fcall	_DlyOff_Initialization
 16658                           
 16659                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16660  1ABC  3002               	movlw	2
 16661  1ABD  319A  22E9         	fcall	_DlyOff_Initialization
 16662  1ABF  0008               	return
 16663  1AC0                     __end_of_DelayOff_Initialization:	
 16664                           
 16665                           	psect	text104
 16666  1AE9                     __ptext104:	
 16667 ;; *************** function _DlyOff_Initialization *****************
 16668 ;; Defined at:
 16669 ;;		line 56 in file "../src/DelayOff_B1.c"
 16670 ;; Parameters:    Size  Location     Type
 16671 ;;  sw              1    wreg     unsigned char 
 16672 ;; Auto vars:     Size  Location     Type
 16673 ;;  sw              1    2[BANK0 ] unsigned char 
 16674 ;; Return value:  Size  Location     Type
 16675 ;;		None               void
 16676 ;; Registers used:
 16677 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16678 ;; Tracked objects:
 16679 ;;		On entry : 0/0
 16680 ;;		On exit  : 0/0
 16681 ;;		Unchanged: 0/0
 16682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16686 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16687 ;;Total ram usage:        1 bytes
 16688 ;; Hardware stack levels used:    1
 16689 ;; Hardware stack levels required when called:    6
 16690 ;; This function calls:
 16691 ;;		_DelayOffPointSelect
 16692 ;; This function is called by:
 16693 ;;		_DelayOff_Initialization
 16694 ;; This function uses a non-reentrant model
 16695 ;;
 16696                           
 16697                           
 16698                           ;psect for function _DlyOff_Initialization
 16699  1AE9                     _DlyOff_Initialization:	
 16700                           
 16701                           ;incstack = 0
 16702                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16703                           ;DlyOff_Initialization@sw stored from wreg
 16704  1AE9  0020               	movlb	0	; select bank0
 16705  1AEA  00A2               	movwf	DlyOff_Initialization@sw
 16706                           
 16707                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16708  1AEB  0822               	movf	DlyOff_Initialization@sw,w
 16709  1AEC  319C  247D         	fcall	_DelayOffPointSelect
 16710                           
 16711                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 16712  1AEE  0876               	movf	_DelayOff,w
 16713  1AEF  0086               	movwf	6
 16714  1AF0  3001               	movlw	1	; select bank2/3
 16715  1AF1  0087               	movwf	7
 16716  1AF2  1401               	bsf	1,0
 16717  1AF3  0008               	return
 16718  1AF4                     __end_of_DlyOff_Initialization:	
 16719                           
 16720                           	psect	text105
 16721  1C7D                     __ptext105:	
 16722 ;; *************** function _DelayOffPointSelect *****************
 16723 ;; Defined at:
 16724 ;;		line 7 in file "../src/DelayOff_B1.c"
 16725 ;; Parameters:    Size  Location     Type
 16726 ;;  sw              1    wreg     unsigned char 
 16727 ;; Auto vars:     Size  Location     Type
 16728 ;;  sw              1    1[BANK0 ] unsigned char 
 16729 ;; Return value:  Size  Location     Type
 16730 ;;		None               void
 16731 ;; Registers used:
 16732 ;;		wreg
 16733 ;; Tracked objects:
 16734 ;;		On entry : 0/0
 16735 ;;		On exit  : 0/0
 16736 ;;		Unchanged: 0/0
 16737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16739 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16740 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;Total ram usage:        2 bytes
 16743 ;; Hardware stack levels used:    1
 16744 ;; Hardware stack levels required when called:    5
 16745 ;; This function calls:
 16746 ;;		Nothing
 16747 ;; This function is called by:
 16748 ;;		_DlyOff_Initialization
 16749 ;;		_DlyOff_Main
 16750 ;;		_setDelayOff_GO
 16751 ;; This function uses a non-reentrant model
 16752 ;;
 16753                           
 16754                           
 16755                           ;psect for function _DelayOffPointSelect
 16756  1C7D                     _DelayOffPointSelect:	
 16757                           
 16758                           ;incstack = 0
 16759                           ; Regs used in _DelayOffPointSelect: [wreg]
 16760                           ;DelayOffPointSelect@sw stored from wreg
 16761  1C7D  0020               	movlb	0	; select bank0
 16762  1C7E  00A1               	movwf	DelayOffPointSelect@sw
 16763                           
 16764                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16765  1C7F  0821               	movf	DelayOffPointSelect@sw,w
 16766  1C80  3A01               	xorlw	1
 16767  1C81  1D03               	skipz
 16768  1C82  2C88               	goto	l8614
 16769                           
 16770                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16771  1C83  3069               	movlw	_DlySw1& (0+255)
 16772  1C84  00A0               	movwf	??_DelayOffPointSelect
 16773  1C85  0820               	movf	??_DelayOffPointSelect,w
 16774  1C86  00F6               	movwf	_DelayOff
 16775                           
 16776                           ;DelayOff_B1.c: 11: }
 16777  1C87  0008               	return
 16778  1C88                     l8614:	
 16779                           
 16780                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 16781  1C88  0821               	movf	DelayOffPointSelect@sw,w
 16782  1C89  3A02               	xorlw	2
 16783  1C8A  1D03               	skipz
 16784  1C8B  0008               	return
 16785                           
 16786                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 16787  1C8C  306B               	movlw	_DlySw2& (0+255)
 16788  1C8D  00A0               	movwf	??_DelayOffPointSelect
 16789  1C8E  0820               	movf	??_DelayOffPointSelect,w
 16790  1C8F  00F6               	movwf	_DelayOff
 16791  1C90  0008               	return
 16792  1C91                     __end_of_DelayOffPointSelect:	
 16793                           
 16794                           	psect	text106
 16795  1CBA                     __ptext106:	
 16796 ;; *************** function _CC2500_PowerOnInitial *****************
 16797 ;; Defined at:
 16798 ;;		line 122 in file "../src/CC2500_B1.c"
 16799 ;; Parameters:    Size  Location     Type
 16800 ;;		None
 16801 ;; Auto vars:     Size  Location     Type
 16802 ;;		None
 16803 ;; Return value:  Size  Location     Type
 16804 ;;		None               void
 16805 ;; Registers used:
 16806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16807 ;; Tracked objects:
 16808 ;;		On entry : 0/0
 16809 ;;		On exit  : 0/0
 16810 ;;		Unchanged: 0/0
 16811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16816 ;;Total ram usage:        0 bytes
 16817 ;; Hardware stack levels used:    1
 16818 ;; Hardware stack levels required when called:    8
 16819 ;; This function calls:
 16820 ;;		_CC2500_ClearRXFIFO
 16821 ;;		_CC2500_ClearTXFIFO
 16822 ;;		_CC2500_FrequencyCabr
 16823 ;;		_CC2500_InitPATable
 16824 ;;		_CC2500_InitSetREG
 16825 ;;		_CC2500_PowerRST
 16826 ;;		_CC2500_SIDLEMode
 16827 ;; This function is called by:
 16828 ;;		_main
 16829 ;; This function uses a non-reentrant model
 16830 ;;
 16831                           
 16832                           
 16833                           ;psect for function _CC2500_PowerOnInitial
 16834  1CBA                     _CC2500_PowerOnInitial:	
 16835                           
 16836                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 16837                           
 16838                           ;incstack = 0
 16839                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16840  1CBA  3192  22C9  319C   	fcall	_CC2500_PowerRST
 16841                           
 16842                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 16843  1CBD  319F  27AC  319C   	fcall	_CC2500_InitSetREG
 16844                           
 16845                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 16846  1CC0  319D  25E5  319C   	fcall	_CC2500_InitPATable
 16847                           
 16848                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 16849  1CC3  319A  2287  319C   	fcall	_CC2500_ClearTXFIFO
 16850                           
 16851                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 16852  1CC6  319A  2283  319C   	fcall	_CC2500_ClearRXFIFO
 16853                           
 16854                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 16855  1CC9  319A  22FF  319C   	fcall	_CC2500_FrequencyCabr
 16856                           
 16857                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 16858  1CCC  319A  228B         	fcall	_CC2500_SIDLEMode
 16859  1CCE  0008               	return
 16860  1CCF                     __end_of_CC2500_PowerOnInitial:	
 16861                           
 16862                           	psect	text107
 16863  1A8B                     __ptext107:	
 16864 ;; *************** function _CC2500_SIDLEMode *****************
 16865 ;; Defined at:
 16866 ;;		line 212 in file "../src/CC2500_B1.c"
 16867 ;; Parameters:    Size  Location     Type
 16868 ;;		None
 16869 ;; Auto vars:     Size  Location     Type
 16870 ;;		None
 16871 ;; Return value:  Size  Location     Type
 16872 ;;		None               void
 16873 ;; Registers used:
 16874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16875 ;; Tracked objects:
 16876 ;;		On entry : 0/0
 16877 ;;		On exit  : 0/0
 16878 ;;		Unchanged: 0/0
 16879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16884 ;;Total ram usage:        0 bytes
 16885 ;; Hardware stack levels used:    1
 16886 ;; Hardware stack levels required when called:    7
 16887 ;; This function calls:
 16888 ;;		_CC2500_WriteCommand
 16889 ;; This function is called by:
 16890 ;;		_CC2500_PowerOnInitial
 16891 ;; This function uses a non-reentrant model
 16892 ;;
 16893                           
 16894                           
 16895                           ;psect for function _CC2500_SIDLEMode
 16896  1A8B                     _CC2500_SIDLEMode:	
 16897                           
 16898                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 16899                           
 16900                           ;incstack = 0
 16901                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16902  1A8B  3036               	movlw	54
 16903  1A8C  319D  255A         	fcall	_CC2500_WriteCommand
 16904  1A8E  0008               	return
 16905  1A8F                     __end_of_CC2500_SIDLEMode:	
 16906                           
 16907                           	psect	text108
 16908  12C9                     __ptext108:	
 16909 ;; *************** function _CC2500_PowerRST *****************
 16910 ;; Defined at:
 16911 ;;		line 135 in file "../src/CC2500_B1.c"
 16912 ;; Parameters:    Size  Location     Type
 16913 ;;		None
 16914 ;; Auto vars:     Size  Location     Type
 16915 ;;		None
 16916 ;; Return value:  Size  Location     Type
 16917 ;;		None               void
 16918 ;; Registers used:
 16919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16920 ;; Tracked objects:
 16921 ;;		On entry : 0/0
 16922 ;;		On exit  : 0/0
 16923 ;;		Unchanged: 0/0
 16924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16928 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16929 ;;Total ram usage:        1 bytes
 16930 ;; Hardware stack levels used:    1
 16931 ;; Hardware stack levels required when called:    6
 16932 ;; This function calls:
 16933 ;;		_CC2500_WriteByte
 16934 ;;		_DelayTime_1us
 16935 ;;		_Timeout_Counter
 16936 ;;		_set_TimeoutCleared
 16937 ;; This function is called by:
 16938 ;;		_CC2500_PowerOnInitial
 16939 ;; This function uses a non-reentrant model
 16940 ;;
 16941                           
 16942                           
 16943                           ;psect for function _CC2500_PowerRST
 16944  12C9                     _CC2500_PowerRST:	
 16945                           
 16946                           ;CC2500_B1.c: 136: RC1 = 0;
 16947                           
 16948                           ;incstack = 0
 16949                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16950  12C9  0020               	movlb	0	; select bank0
 16951  12CA  108E               	bcf	14,1	;volatile
 16952                           
 16953                           ;CC2500_B1.c: 137: RC0 = 0;
 16954  12CB  100E               	bcf	14,0	;volatile
 16955                           
 16956                           ;CC2500_B1.c: 138: RC4 = 1;
 16957  12CC  160E               	bsf	14,4	;volatile
 16958                           
 16959                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 16960  12CD  300A               	movlw	10
 16961  12CE  00A0               	movwf	DelayTime_1us@count
 16962  12CF  3000               	movlw	0
 16963  12D0  00A1               	movwf	DelayTime_1us@count+1
 16964  12D1  319F  2735  3192   	fcall	_DelayTime_1us
 16965                           
 16966                           ;CC2500_B1.c: 140: RC4 = 0;
 16967  12D4  0020               	movlb	0	; select bank0
 16968  12D5  120E               	bcf	14,4	;volatile
 16969                           
 16970                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 16971  12D6  300A               	movlw	10
 16972  12D7  00A0               	movwf	DelayTime_1us@count
 16973  12D8  3000               	movlw	0
 16974  12D9  00A1               	movwf	DelayTime_1us@count+1
 16975  12DA  319F  2735  3192   	fcall	_DelayTime_1us
 16976                           
 16977                           ;CC2500_B1.c: 142: RC4 = 1;
 16978  12DD  0020               	movlb	0	; select bank0
 16979  12DE  160E               	bsf	14,4	;volatile
 16980                           
 16981                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 16982  12DF  3028               	movlw	40
 16983  12E0  00A0               	movwf	DelayTime_1us@count
 16984  12E1  3000               	movlw	0
 16985  12E2  00A1               	movwf	DelayTime_1us@count+1
 16986  12E3  319F  2735  3192   	fcall	_DelayTime_1us
 16987                           
 16988                           ;CC2500_B1.c: 144: RC4 = 0;
 16989  12E6  0020               	movlb	0	; select bank0
 16990  12E7  120E               	bcf	14,4	;volatile
 16991                           
 16992                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 16993  12E8  3030               	movlw	48
 16994  12E9  00A6               	movwf	??_CC2500_PowerRST
 16995  12EA  0826               	movf	??_CC2500_PowerRST,w
 16996  12EB  0021               	movlb	1	; select bank1
 16997  12EC  00D2               	movwf	_SPI0Buffer^(0+128)
 16998                           
 16999                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 17000  12ED  2AF1               	goto	l9586
 17001  12EE                     l9584:	
 17002                           
 17003                           ;CC2500_B1.c: 147: Timeout_Counter();
 17004  12EE  319C  24A5  3192   	fcall	_Timeout_Counter
 17005  12F1                     l9586:	
 17006  12F1  0020               	movlb	0	; select bank0
 17007  12F2  1D0E               	btfss	14,2	;volatile
 17008  12F3  2AF7               	goto	l9590
 17009  12F4  0021               	movlb	1	; select bank1
 17010  12F5  1D2D               	btfss	(_myMain^(0+128)+13),2
 17011  12F6  2AEE               	goto	l9584
 17012  12F7                     l9590:	
 17013                           
 17014                           ;CC2500_B1.c: 148: };
 17015                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 17016  12F7  319A  2293  3192   	fcall	_set_TimeoutCleared
 17017                           
 17018                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 17019  12FA  319D  2528  3192   	fcall	_CC2500_WriteByte
 17020                           
 17021                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 17022  12FD  2B01               	goto	l9596
 17023  12FE                     l9594:	
 17024                           
 17025                           ;CC2500_B1.c: 152: Timeout_Counter();
 17026  12FE  319C  24A5  3192   	fcall	_Timeout_Counter
 17027  1301                     l9596:	
 17028  1301  0020               	movlb	0	; select bank0
 17029  1302  1D0E               	btfss	14,2	;volatile
 17030  1303  2B07               	goto	l9600
 17031  1304  0021               	movlb	1	; select bank1
 17032  1305  1D2D               	btfss	(_myMain^(0+128)+13),2
 17033  1306  2AFE               	goto	l9594
 17034  1307                     l9600:	
 17035                           
 17036                           ;CC2500_B1.c: 153: };
 17037                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 17038  1307  319A  2293         	fcall	_set_TimeoutCleared
 17039                           
 17040                           ;CC2500_B1.c: 155: RC0 = 0;
 17041  1309  0020               	movlb	0	; select bank0
 17042  130A  100E               	bcf	14,0	;volatile
 17043                           
 17044                           ;CC2500_B1.c: 156: RC4 = 1;
 17045  130B  160E               	bsf	14,4	;volatile
 17046  130C  0008               	return
 17047  130D                     __end_of_CC2500_PowerRST:	
 17048                           
 17049                           	psect	text109
 17050  1FAC                     __ptext109:	
 17051 ;; *************** function _CC2500_InitSetREG *****************
 17052 ;; Defined at:
 17053 ;;		line 162 in file "../src/CC2500_B1.c"
 17054 ;; Parameters:    Size  Location     Type
 17055 ;;		None
 17056 ;; Auto vars:     Size  Location     Type
 17057 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17058 ;;  temp2           1    7[BANK0 ] unsigned char 
 17059 ;;  temp1           1    6[BANK0 ] unsigned char 
 17060 ;; Return value:  Size  Location     Type
 17061 ;;		None               void
 17062 ;; Registers used:
 17063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17064 ;; Tracked objects:
 17065 ;;		On entry : 0/0
 17066 ;;		On exit  : 0/0
 17067 ;;		Unchanged: 0/0
 17068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17070 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17072 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17073 ;;Total ram usage:        4 bytes
 17074 ;; Hardware stack levels used:    1
 17075 ;; Hardware stack levels required when called:    7
 17076 ;; This function calls:
 17077 ;;		_CC2500_WriteREG
 17078 ;; This function is called by:
 17079 ;;		_CC2500_PowerOnInitial
 17080 ;; This function uses a non-reentrant model
 17081 ;;
 17082                           
 17083                           
 17084                           ;psect for function _CC2500_InitSetREG
 17085  1FAC                     _CC2500_InitSetREG:	
 17086                           
 17087                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17088                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17089                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17090                           
 17091                           ;incstack = 0
 17092                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17093  1FAC  0020               	movlb	0	; select bank0
 17094  1FAD  01A8               	clrf	CC2500_InitSetREG@loop_c
 17095  1FAE                     L11:	
 17096  1FAE  302F               	movlw	47
 17097  1FAF  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17098  1FB0  1803               	btfsc	3,0
 17099  1FB1  0008               	return
 17100                           
 17101                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17102  1FB2  0828               	movf	CC2500_InitSetREG@loop_c,w
 17103  1FB3  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17104  1FB4  0084               	movwf	4
 17105  1FB5  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17106  1FB6  1803               	skipnc
 17107  1FB7  3E01               	addlw	1
 17108  1FB8  0085               	movwf	5
 17109  1FB9  0800               	movf	0,w	;code access
 17110  1FBA  00A5               	movwf	??_CC2500_InitSetREG
 17111  1FBB  0825               	movf	??_CC2500_InitSetREG,w
 17112  1FBC  00A6               	movwf	CC2500_InitSetREG@temp1
 17113                           
 17114                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17115  1FBD  0828               	movf	CC2500_InitSetREG@loop_c,w
 17116  1FBE  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17117  1FBF  0084               	movwf	4
 17118  1FC0  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17119  1FC1  1803               	skipnc
 17120  1FC2  3E01               	addlw	1
 17121  1FC3  0085               	movwf	5
 17122  1FC4  0800               	movf	0,w	;code access
 17123  1FC5  00A5               	movwf	??_CC2500_InitSetREG
 17124  1FC6  0825               	movf	??_CC2500_InitSetREG,w
 17125  1FC7  00A7               	movwf	CC2500_InitSetREG@temp2
 17126                           
 17127                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17128  1FC8  0827               	movf	CC2500_InitSetREG@temp2,w
 17129  1FC9  00A5               	movwf	??_CC2500_InitSetREG
 17130  1FCA  0825               	movf	??_CC2500_InitSetREG,w
 17131  1FCB  00A2               	movwf	CC2500_WriteREG@value
 17132  1FCC  0826               	movf	CC2500_InitSetREG@temp1,w
 17133  1FCD  319E  26C9  319F   	fcall	_CC2500_WriteREG
 17134  1FD0  3001               	movlw	1
 17135  1FD1  0020               	movlb	0	; select bank0
 17136  1FD2  00A5               	movwf	??_CC2500_InitSetREG
 17137  1FD3  0825               	movf	??_CC2500_InitSetREG,w
 17138  1FD4  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17139  1FD5  2FAE               	goto	L11
 17140  1FD6                     __end_of_CC2500_InitSetREG:	
 17141                           
 17142                           	psect	text110
 17143  1DE5                     __ptext110:	
 17144 ;; *************** function _CC2500_InitPATable *****************
 17145 ;; Defined at:
 17146 ;;		line 177 in file "../src/CC2500_B1.c"
 17147 ;; Parameters:    Size  Location     Type
 17148 ;;		None
 17149 ;; Auto vars:     Size  Location     Type
 17150 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17151 ;;  temp            1    6[BANK0 ] unsigned char 
 17152 ;; Return value:  Size  Location     Type
 17153 ;;		None               void
 17154 ;; Registers used:
 17155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17156 ;; Tracked objects:
 17157 ;;		On entry : 0/0
 17158 ;;		On exit  : 0/0
 17159 ;;		Unchanged: 0/0
 17160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17162 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17164 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17165 ;;Total ram usage:        3 bytes
 17166 ;; Hardware stack levels used:    1
 17167 ;; Hardware stack levels required when called:    7
 17168 ;; This function calls:
 17169 ;;		_CC2500_WriteREG
 17170 ;; This function is called by:
 17171 ;;		_CC2500_PowerOnInitial
 17172 ;; This function uses a non-reentrant model
 17173 ;;
 17174                           
 17175                           
 17176                           ;psect for function _CC2500_InitPATable
 17177  1DE5                     _CC2500_InitPATable:	
 17178                           
 17179                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17180                           ;CC2500_B1.c: 179: unsigned char temp;
 17181                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17182                           
 17183                           ;incstack = 0
 17184                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17185  1DE5  0020               	movlb	0	; select bank0
 17186  1DE6  01A7               	clrf	CC2500_InitPATable@loop_d
 17187  1DE7                     L12:	
 17188  1DE7  3008               	movlw	8
 17189  1DE8  0227               	subwf	CC2500_InitPATable@loop_d,w
 17190  1DE9  1803               	btfsc	3,0
 17191  1DEA  0008               	return
 17192                           
 17193                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17194  1DEB  0827               	movf	CC2500_InitPATable@loop_d,w
 17195  1DEC  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17196  1DED  0084               	movwf	4
 17197  1DEE  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17198  1DEF  1803               	skipnc
 17199  1DF0  3E01               	addlw	1
 17200  1DF1  0085               	movwf	5
 17201  1DF2  0800               	movf	0,w	;code access
 17202  1DF3  00A5               	movwf	??_CC2500_InitPATable
 17203  1DF4  0825               	movf	??_CC2500_InitPATable,w
 17204  1DF5  00A6               	movwf	CC2500_InitPATable@temp
 17205                           
 17206                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17207  1DF6  0826               	movf	CC2500_InitPATable@temp,w
 17208  1DF7  00A5               	movwf	??_CC2500_InitPATable
 17209  1DF8  0825               	movf	??_CC2500_InitPATable,w
 17210  1DF9  00A2               	movwf	CC2500_WriteREG@value
 17211  1DFA  303E               	movlw	62
 17212  1DFB  319E  26C9  319D   	fcall	_CC2500_WriteREG
 17213  1DFE  3001               	movlw	1
 17214  1DFF  0020               	movlb	0	; select bank0
 17215  1E00  00A5               	movwf	??_CC2500_InitPATable
 17216  1E01  0825               	movf	??_CC2500_InitPATable,w
 17217  1E02  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17218  1E03  2DE7               	goto	L12
 17219  1E04                     __end_of_CC2500_InitPATable:	
 17220                           
 17221                           	psect	text111
 17222  1EC9                     __ptext111:	
 17223 ;; *************** function _CC2500_WriteREG *****************
 17224 ;; Defined at:
 17225 ;;		line 254 in file "../src/CC2500_B1.c"
 17226 ;; Parameters:    Size  Location     Type
 17227 ;;  w_addr          1    wreg     unsigned char 
 17228 ;;  value           1    2[BANK0 ] unsigned char 
 17229 ;; Auto vars:     Size  Location     Type
 17230 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17231 ;; Return value:  Size  Location     Type
 17232 ;;		None               void
 17233 ;; Registers used:
 17234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17235 ;; Tracked objects:
 17236 ;;		On entry : 0/0
 17237 ;;		On exit  : 0/0
 17238 ;;		Unchanged: 0/0
 17239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17240 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17242 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17243 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17244 ;;Total ram usage:        3 bytes
 17245 ;; Hardware stack levels used:    1
 17246 ;; Hardware stack levels required when called:    6
 17247 ;; This function calls:
 17248 ;;		_CC2500_WriteByte
 17249 ;;		_Timeout_Counter
 17250 ;;		_set_TimeoutCleared
 17251 ;; This function is called by:
 17252 ;;		_CC2500_InitSetREG
 17253 ;;		_CC2500_InitPATable
 17254 ;; This function uses a non-reentrant model
 17255 ;;
 17256                           
 17257                           
 17258                           ;psect for function _CC2500_WriteREG
 17259  1EC9                     _CC2500_WriteREG:	
 17260                           
 17261                           ;incstack = 0
 17262                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17263                           ;CC2500_WriteREG@w_addr stored from wreg
 17264  1EC9  0020               	movlb	0	; select bank0
 17265  1ECA  00A4               	movwf	CC2500_WriteREG@w_addr
 17266                           
 17267                           ;CC2500_B1.c: 255: RC4 = 0;
 17268  1ECB  120E               	bcf	14,4	;volatile
 17269                           
 17270                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17271  1ECC  0824               	movf	CC2500_WriteREG@w_addr,w
 17272  1ECD  00A3               	movwf	??_CC2500_WriteREG
 17273  1ECE  0823               	movf	??_CC2500_WriteREG,w
 17274  1ECF  0021               	movlb	1	; select bank1
 17275  1ED0  00D2               	movwf	_SPI0Buffer^(0+128)
 17276                           
 17277                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17278  1ED1  2ED5               	goto	l9284
 17279  1ED2                     l9282:	
 17280                           
 17281                           ;CC2500_B1.c: 258: Timeout_Counter();
 17282  1ED2  319C  24A5  319E   	fcall	_Timeout_Counter
 17283  1ED5                     l9284:	
 17284  1ED5  0020               	movlb	0	; select bank0
 17285  1ED6  1D0E               	btfss	14,2	;volatile
 17286  1ED7  2EDB               	goto	l9288
 17287  1ED8  0021               	movlb	1	; select bank1
 17288  1ED9  1D2D               	btfss	(_myMain^(0+128)+13),2
 17289  1EDA  2ED2               	goto	l9282
 17290  1EDB                     l9288:	
 17291                           
 17292                           ;CC2500_B1.c: 259: };
 17293                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17294  1EDB  319A  2293  319E   	fcall	_set_TimeoutCleared
 17295                           
 17296                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17297  1EDE  319D  2528  319E   	fcall	_CC2500_WriteByte
 17298                           
 17299                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17300  1EE1  0020               	movlb	0	; select bank0
 17301  1EE2  0822               	movf	CC2500_WriteREG@value,w
 17302  1EE3  00A3               	movwf	??_CC2500_WriteREG
 17303  1EE4  0823               	movf	??_CC2500_WriteREG,w
 17304  1EE5  0021               	movlb	1	; select bank1
 17305  1EE6  00D2               	movwf	_SPI0Buffer^(0+128)
 17306                           
 17307                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17308  1EE7  319D  2528         	fcall	_CC2500_WriteByte
 17309                           
 17310                           ;CC2500_B1.c: 265: RC4 = 1;
 17311  1EE9  0020               	movlb	0	; select bank0
 17312  1EEA  160E               	bsf	14,4	;volatile
 17313  1EEB  0008               	return
 17314  1EEC                     __end_of_CC2500_WriteREG:	
 17315                           
 17316                           	psect	text112
 17317  1AFF                     __ptext112:	
 17318 ;; *************** function _CC2500_FrequencyCabr *****************
 17319 ;; Defined at:
 17320 ;;		line 204 in file "../src/CC2500_B1.c"
 17321 ;; Parameters:    Size  Location     Type
 17322 ;;		None
 17323 ;; Auto vars:     Size  Location     Type
 17324 ;;		None
 17325 ;; Return value:  Size  Location     Type
 17326 ;;		None               void
 17327 ;; Registers used:
 17328 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17329 ;; Tracked objects:
 17330 ;;		On entry : 0/0
 17331 ;;		On exit  : 0/0
 17332 ;;		Unchanged: 0/0
 17333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17338 ;;Total ram usage:        0 bytes
 17339 ;; Hardware stack levels used:    1
 17340 ;; Hardware stack levels required when called:    7
 17341 ;; This function calls:
 17342 ;;		_CC2500_WriteCommand
 17343 ;;		_DelayTime_1us
 17344 ;; This function is called by:
 17345 ;;		_CC2500_PowerOnInitial
 17346 ;; This function uses a non-reentrant model
 17347 ;;
 17348                           
 17349                           
 17350                           ;psect for function _CC2500_FrequencyCabr
 17351  1AFF                     _CC2500_FrequencyCabr:	
 17352                           
 17353                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17354                           
 17355                           ;incstack = 0
 17356                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17357  1AFF  3033               	movlw	51
 17358  1B00  319D  255A  319A   	fcall	_CC2500_WriteCommand
 17359                           
 17360                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17361  1B03  30E8               	movlw	232
 17362  1B04  0020               	movlb	0	; select bank0
 17363  1B05  00A0               	movwf	DelayTime_1us@count
 17364  1B06  3003               	movlw	3
 17365  1B07  00A1               	movwf	DelayTime_1us@count+1
 17366  1B08  319F  2735         	fcall	_DelayTime_1us
 17367  1B0A  0008               	return
 17368  1B0B                     __end_of_CC2500_FrequencyCabr:	
 17369                           
 17370                           	psect	text113
 17371  1F35                     __ptext113:	
 17372 ;; *************** function _DelayTime_1us *****************
 17373 ;; Defined at:
 17374 ;;		line 323 in file "../src/CC2500_B1.c"
 17375 ;; Parameters:    Size  Location     Type
 17376 ;;  count           2    0[BANK0 ] int 
 17377 ;; Auto vars:     Size  Location     Type
 17378 ;;  j               2    4[BANK0 ] unsigned int 
 17379 ;;  i               2    2[BANK0 ] unsigned int 
 17380 ;; Return value:  Size  Location     Type
 17381 ;;		None               void
 17382 ;; Registers used:
 17383 ;;		wreg, status,2
 17384 ;; Tracked objects:
 17385 ;;		On entry : 0/0
 17386 ;;		On exit  : 0/0
 17387 ;;		Unchanged: 0/0
 17388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17389 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17390 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17392 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17393 ;;Total ram usage:        6 bytes
 17394 ;; Hardware stack levels used:    1
 17395 ;; Hardware stack levels required when called:    5
 17396 ;; This function calls:
 17397 ;;		Nothing
 17398 ;; This function is called by:
 17399 ;;		_CC2500_PowerRST
 17400 ;;		_CC2500_FrequencyCabr
 17401 ;; This function uses a non-reentrant model
 17402 ;;
 17403                           
 17404                           
 17405                           ;psect for function _DelayTime_1us
 17406  1F35                     _DelayTime_1us:	
 17407                           
 17408                           ;CC2500_B1.c: 324: unsigned int i, j;
 17409                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 17410                           
 17411                           ;incstack = 0
 17412                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17413  1F35  3001               	movlw	1
 17414  1F36  0020               	movlb	0	; select bank0
 17415  1F37  00A2               	movwf	DelayTime_1us@i
 17416  1F38  3000               	movlw	0
 17417  1F39  00A3               	movwf	DelayTime_1us@i+1
 17418  1F3A                     l374:	
 17419  1F3A  0821               	movf	DelayTime_1us@count+1,w
 17420  1F3B  0223               	subwf	DelayTime_1us@i+1,w
 17421  1F3C  1D03               	skipz
 17422  1F3D  2F40               	goto	u10005
 17423  1F3E  0820               	movf	DelayTime_1us@count,w
 17424  1F3F  0222               	subwf	DelayTime_1us@i,w
 17425  1F40                     u10005:	
 17426  1F40  1803               	btfsc	3,0
 17427  1F41  0008               	return
 17428                           
 17429                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 17430  1F42  01A4               	clrf	DelayTime_1us@j
 17431  1F43  01A5               	clrf	DelayTime_1us@j+1
 17432  1F44  3000               	movlw	0
 17433  1F45  0225               	subwf	DelayTime_1us@j+1,w
 17434  1F46  3002               	movlw	2
 17435  1F47  1903               	skipnz
 17436  1F48  0224               	subwf	DelayTime_1us@j,w
 17437  1F49  1803               	btfsc	3,0
 17438  1F4A  2F56               	goto	l9276
 17439  1F4B                     l9274:	
 17440  1F4B  3001               	movlw	1
 17441  1F4C  07A4               	addwf	DelayTime_1us@j,f
 17442  1F4D  3000               	movlw	0
 17443  1F4E  3DA5               	addwfc	DelayTime_1us@j+1,f
 17444  1F4F  3000               	movlw	0
 17445  1F50  0225               	subwf	DelayTime_1us@j+1,w
 17446  1F51  3002               	movlw	2
 17447  1F52  1903               	skipnz
 17448  1F53  0224               	subwf	DelayTime_1us@j,w
 17449  1F54  1C03               	skipc
 17450  1F55  2F4B               	goto	l9274
 17451  1F56                     l9276:	
 17452  1F56  3001               	movlw	1
 17453  1F57  07A2               	addwf	DelayTime_1us@i,f
 17454  1F58  3000               	movlw	0
 17455  1F59  3DA3               	addwfc	DelayTime_1us@i+1,f
 17456  1F5A  2F3A               	goto	l374
 17457  1F5B                     __end_of_DelayTime_1us:	
 17458                           
 17459                           	psect	text114
 17460  1A87                     __ptext114:	
 17461 ;; *************** function _CC2500_ClearTXFIFO *****************
 17462 ;; Defined at:
 17463 ;;		line 190 in file "../src/CC2500_B1.c"
 17464 ;; Parameters:    Size  Location     Type
 17465 ;;		None
 17466 ;; Auto vars:     Size  Location     Type
 17467 ;;		None
 17468 ;; Return value:  Size  Location     Type
 17469 ;;		None               void
 17470 ;; Registers used:
 17471 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17472 ;; Tracked objects:
 17473 ;;		On entry : 0/0
 17474 ;;		On exit  : 0/0
 17475 ;;		Unchanged: 0/0
 17476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17481 ;;Total ram usage:        0 bytes
 17482 ;; Hardware stack levels used:    1
 17483 ;; Hardware stack levels required when called:    7
 17484 ;; This function calls:
 17485 ;;		_CC2500_WriteCommand
 17486 ;; This function is called by:
 17487 ;;		_CC2500_PowerOnInitial
 17488 ;; This function uses a non-reentrant model
 17489 ;;
 17490                           
 17491                           
 17492                           ;psect for function _CC2500_ClearTXFIFO
 17493  1A87                     _CC2500_ClearTXFIFO:	
 17494                           
 17495                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 17496                           
 17497                           ;incstack = 0
 17498                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17499  1A87  303B               	movlw	59
 17500  1A88  319D  255A         	fcall	_CC2500_WriteCommand
 17501  1A8A  0008               	return
 17502  1A8B                     __end_of_CC2500_ClearTXFIFO:	
 17503                           
 17504                           	psect	text115
 17505  1A83                     __ptext115:	
 17506 ;; *************** function _CC2500_ClearRXFIFO *****************
 17507 ;; Defined at:
 17508 ;;		line 197 in file "../src/CC2500_B1.c"
 17509 ;; Parameters:    Size  Location     Type
 17510 ;;		None
 17511 ;; Auto vars:     Size  Location     Type
 17512 ;;		None
 17513 ;; Return value:  Size  Location     Type
 17514 ;;		None               void
 17515 ;; Registers used:
 17516 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17517 ;; Tracked objects:
 17518 ;;		On entry : 0/0
 17519 ;;		On exit  : 0/0
 17520 ;;		Unchanged: 0/0
 17521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17526 ;;Total ram usage:        0 bytes
 17527 ;; Hardware stack levels used:    1
 17528 ;; Hardware stack levels required when called:    7
 17529 ;; This function calls:
 17530 ;;		_CC2500_WriteCommand
 17531 ;; This function is called by:
 17532 ;;		_CC2500_PowerOnInitial
 17533 ;; This function uses a non-reentrant model
 17534 ;;
 17535                           
 17536                           
 17537                           ;psect for function _CC2500_ClearRXFIFO
 17538  1A83                     _CC2500_ClearRXFIFO:	
 17539                           
 17540                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 17541                           
 17542                           ;incstack = 0
 17543                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17544  1A83  303A               	movlw	58
 17545  1A84  319D  255A         	fcall	_CC2500_WriteCommand
 17546  1A86  0008               	return
 17547  1A87                     __end_of_CC2500_ClearRXFIFO:	
 17548                           
 17549                           	psect	text116
 17550  1D5A                     __ptext116:	
 17551 ;; *************** function _CC2500_WriteCommand *****************
 17552 ;; Defined at:
 17553 ;;		line 288 in file "../src/CC2500_B1.c"
 17554 ;; Parameters:    Size  Location     Type
 17555 ;;  command         1    wreg     unsigned char 
 17556 ;; Auto vars:     Size  Location     Type
 17557 ;;  command         1    3[BANK0 ] unsigned char 
 17558 ;; Return value:  Size  Location     Type
 17559 ;;		None               void
 17560 ;; Registers used:
 17561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17562 ;; Tracked objects:
 17563 ;;		On entry : 0/0
 17564 ;;		On exit  : 0/0
 17565 ;;		Unchanged: 0/0
 17566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17568 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17570 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;Total ram usage:        2 bytes
 17572 ;; Hardware stack levels used:    1
 17573 ;; Hardware stack levels required when called:    6
 17574 ;; This function calls:
 17575 ;;		_CC2500_WriteByte
 17576 ;;		_Timeout_Counter
 17577 ;;		_set_TimeoutCleared
 17578 ;; This function is called by:
 17579 ;;		_CC2500_TxData
 17580 ;;		_CC2500_ClearTXFIFO
 17581 ;;		_CC2500_ClearRXFIFO
 17582 ;;		_CC2500_FrequencyCabr
 17583 ;;		_CC2500_SIDLEMode
 17584 ;;		_setRF_Main
 17585 ;;		_RF_RxDisable
 17586 ;; This function uses a non-reentrant model
 17587 ;;
 17588                           
 17589                           
 17590                           ;psect for function _CC2500_WriteCommand
 17591  1D5A                     _CC2500_WriteCommand:	
 17592                           
 17593                           ;incstack = 0
 17594                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17595                           ;CC2500_WriteCommand@command stored from wreg
 17596  1D5A  0020               	movlb	0	; select bank0
 17597  1D5B  00A3               	movwf	CC2500_WriteCommand@command
 17598                           
 17599                           ;CC2500_B1.c: 289: RC4 = 0;
 17600  1D5C  120E               	bcf	14,4	;volatile
 17601                           
 17602                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 17603  1D5D  0823               	movf	CC2500_WriteCommand@command,w
 17604  1D5E  00A2               	movwf	??_CC2500_WriteCommand
 17605  1D5F  0822               	movf	??_CC2500_WriteCommand,w
 17606  1D60  0021               	movlb	1	; select bank1
 17607  1D61  00D2               	movwf	_SPI0Buffer^(0+128)
 17608                           
 17609                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 17610  1D62  2D66               	goto	l9002
 17611  1D63                     l9000:	
 17612                           
 17613                           ;CC2500_B1.c: 293: Timeout_Counter();
 17614  1D63  319C  24A5  319D   	fcall	_Timeout_Counter
 17615  1D66                     l9002:	
 17616  1D66  0020               	movlb	0	; select bank0
 17617  1D67  1D0E               	btfss	14,2	;volatile
 17618  1D68  2D6C               	goto	l9006
 17619  1D69  0021               	movlb	1	; select bank1
 17620  1D6A  1D2D               	btfss	(_myMain^(0+128)+13),2
 17621  1D6B  2D63               	goto	l9000
 17622  1D6C                     l9006:	
 17623                           
 17624                           ;CC2500_B1.c: 294: };
 17625                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 17626  1D6C  319A  2293  319D   	fcall	_set_TimeoutCleared
 17627                           
 17628                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 17629  1D6F  319D  2528         	fcall	_CC2500_WriteByte
 17630                           
 17631                           ;CC2500_B1.c: 298: RC4 = 1;
 17632  1D71  0020               	movlb	0	; select bank0
 17633  1D72  160E               	bsf	14,4	;volatile
 17634  1D73  0008               	return
 17635  1D74                     __end_of_CC2500_WriteCommand:	
 17636                           
 17637                           	psect	text117
 17638  1A93                     __ptext117:	
 17639 ;; *************** function _set_TimeoutCleared *****************
 17640 ;; Defined at:
 17641 ;;		line 270 in file "../src/Main_B1.c"
 17642 ;; Parameters:    Size  Location     Type
 17643 ;;		None
 17644 ;; Auto vars:     Size  Location     Type
 17645 ;;		None
 17646 ;; Return value:  Size  Location     Type
 17647 ;;		None               void
 17648 ;; Registers used:
 17649 ;;		status,2
 17650 ;; Tracked objects:
 17651 ;;		On entry : 0/0
 17652 ;;		On exit  : 0/0
 17653 ;;		Unchanged: 0/0
 17654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17659 ;;Total ram usage:        0 bytes
 17660 ;; Hardware stack levels used:    1
 17661 ;; Hardware stack levels required when called:    5
 17662 ;; This function calls:
 17663 ;;		Nothing
 17664 ;; This function is called by:
 17665 ;;		_CC2500_TxData
 17666 ;;		_CC2500_RxData
 17667 ;;		_CC2500_PowerRST
 17668 ;;		_CC2500_WriteREG
 17669 ;;		_CC2500_WriteCommand
 17670 ;;		_CC2500_ReadStatus
 17671 ;;		_getAD
 17672 ;;		_TouchPower
 17673 ;;		_CC2500_ReadREG
 17674 ;; This function uses a non-reentrant model
 17675 ;;
 17676                           
 17677                           
 17678                           ;psect for function _set_TimeoutCleared
 17679  1A93                     _set_TimeoutCleared:	
 17680                           
 17681                           ;Main_B1.c: 271: myMain.Timeout = 0;
 17682                           
 17683                           ;incstack = 0
 17684                           ; Regs used in _set_TimeoutCleared: [status,2]
 17685  1A93  0021               	movlb	1	; select bank1
 17686  1A94  112D               	bcf	(_myMain^(0+128)+13),2
 17687                           
 17688                           ;Main_B1.c: 272: myMain.Timeout_Counter = 0;
 17689  1A95  01AE               	clrf	(_myMain^(0+128)+14)
 17690  1A96  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17691  1A97  0008               	return
 17692  1A98                     __end_of_set_TimeoutCleared:	
 17693                           
 17694                           	psect	text118
 17695  1CA5                     __ptext118:	
 17696 ;; *************** function _Timeout_Counter *****************
 17697 ;; Defined at:
 17698 ;;		line 261 in file "../src/Main_B1.c"
 17699 ;; Parameters:    Size  Location     Type
 17700 ;;		None
 17701 ;; Auto vars:     Size  Location     Type
 17702 ;;		None
 17703 ;; Return value:  Size  Location     Type
 17704 ;;		None               void
 17705 ;; Registers used:
 17706 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17707 ;; Tracked objects:
 17708 ;;		On entry : 0/0
 17709 ;;		On exit  : 0/0
 17710 ;;		Unchanged: 0/0
 17711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17716 ;;Total ram usage:        0 bytes
 17717 ;; Hardware stack levels used:    1
 17718 ;; Hardware stack levels required when called:    5
 17719 ;; This function calls:
 17720 ;;		Nothing
 17721 ;; This function is called by:
 17722 ;;		_CC2500_TxData
 17723 ;;		_CC2500_RxData
 17724 ;;		_CC2500_PowerRST
 17725 ;;		_CC2500_WriteREG
 17726 ;;		_CC2500_WriteCommand
 17727 ;;		_CC2500_ReadStatus
 17728 ;;		_getAD
 17729 ;;		_TouchPower
 17730 ;;		_CC2500_ReadREG
 17731 ;; This function uses a non-reentrant model
 17732 ;;
 17733                           
 17734                           
 17735                           ;psect for function _Timeout_Counter
 17736  1CA5                     _Timeout_Counter:	
 17737                           
 17738                           ;Main_B1.c: 262: myMain.Timeout_Counter++;
 17739                           
 17740                           ;incstack = 0
 17741                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17742  1CA5  3001               	movlw	1
 17743  1CA6  0021               	movlb	1	; select bank1
 17744  1CA7  07AE               	addwf	(_myMain^(0+128)+14),f
 17745  1CA8  3000               	movlw	0
 17746  1CA9  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 17747                           
 17748                           ;Main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
 17749  1CAA  300E               	movlw	14
 17750  1CAB  3EA0               	addlw	_myMain& (0+255)
 17751  1CAC  0086               	movwf	6
 17752  1CAD  0187               	clrf	7
 17753  1CAE  3F40               	moviw [0]fsr1
 17754  1CAF  3A10               	xorlw	16
 17755  1CB0  1D03               	skipz
 17756  1CB1  2CB4               	goto	u9445
 17757  1CB2  3F41               	moviw [1]fsr1
 17758  1CB3  3A27               	xorlw	39
 17759  1CB4                     u9445:	
 17760  1CB4  1D03               	skipz
 17761  1CB5  0008               	return
 17762                           
 17763                           ;Main_B1.c: 264: myMain.Timeout_Counter = 0;
 17764  1CB6  01AE               	clrf	(_myMain^(0+128)+14)
 17765  1CB7  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17766                           
 17767                           ;Main_B1.c: 265: myMain.Timeout = 1;
 17768  1CB8  152D               	bsf	(_myMain^(0+128)+13),2
 17769  1CB9  0008               	return
 17770  1CBA                     __end_of_Timeout_Counter:	
 17771                           
 17772                           	psect	text119
 17773  1D28                     __ptext119:	
 17774 ;; *************** function _CC2500_WriteByte *****************
 17775 ;; Defined at:
 17776 ;;		line 222 in file "../src/CC2500_B1.c"
 17777 ;; Parameters:    Size  Location     Type
 17778 ;;		None
 17779 ;; Auto vars:     Size  Location     Type
 17780 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17781 ;; Return value:  Size  Location     Type
 17782 ;;		None               void
 17783 ;; Registers used:
 17784 ;;		wreg, status,2, status,0
 17785 ;; Tracked objects:
 17786 ;;		On entry : 0/0
 17787 ;;		On exit  : 0/0
 17788 ;;		Unchanged: 0/0
 17789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17792 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17794 ;;Total ram usage:        2 bytes
 17795 ;; Hardware stack levels used:    1
 17796 ;; Hardware stack levels required when called:    5
 17797 ;; This function calls:
 17798 ;;		Nothing
 17799 ;; This function is called by:
 17800 ;;		_CC2500_TxData
 17801 ;;		_CC2500_RxData
 17802 ;;		_CC2500_PowerRST
 17803 ;;		_CC2500_WriteREG
 17804 ;;		_CC2500_WriteCommand
 17805 ;;		_CC2500_ReadStatus
 17806 ;;		_CC2500_ReadREG
 17807 ;; This function uses a non-reentrant model
 17808 ;;
 17809                           
 17810                           
 17811                           ;psect for function _CC2500_WriteByte
 17812  1D28                     _CC2500_WriteByte:	
 17813                           
 17814                           ;CC2500_B1.c: 223: unsigned char loop_a;
 17815                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 17816                           
 17817                           ;incstack = 0
 17818                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17819  1D28  0020               	movlb	0	; select bank0
 17820  1D29  01A1               	clrf	CC2500_WriteByte@loop_a
 17821  1D2A                     L13:	
 17822  1D2A  3008               	movlw	8
 17823  1D2B  0221               	subwf	CC2500_WriteByte@loop_a,w
 17824  1D2C  1803               	btfsc	3,0
 17825  1D2D  0008               	return
 17826                           
 17827                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 17828  1D2E  0021               	movlb	1	; select bank1
 17829  1D2F  1FD2               	btfss	_SPI0Buffer^(0+128),7
 17830  1D30  2D34               	goto	l330
 17831                           
 17832                           ;CC2500_B1.c: 226: RC0 = 1;
 17833  1D31  0020               	movlb	0	; select bank0
 17834  1D32  140E               	bsf	14,0	;volatile
 17835  1D33  2D36               	goto	l331
 17836  1D34                     l330:	
 17837                           
 17838                           ;CC2500_B1.c: 227: else
 17839                           ;CC2500_B1.c: 228: RC0 = 0;
 17840  1D34  0020               	movlb	0	; select bank0
 17841  1D35  100E               	bcf	14,0	;volatile
 17842  1D36                     l331:	
 17843                           
 17844                           ;CC2500_B1.c: 229: RC1 = 1;
 17845  1D36  148E               	bsf	14,1	;volatile
 17846                           
 17847                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 17848  1D37  1003               	clrc
 17849  1D38  0021               	movlb	1	; select bank1
 17850  1D39  0DD2               	rlf	_SPI0Buffer^(0+128),f
 17851                           
 17852                           ;CC2500_B1.c: 231: RC1 = 0;
 17853  1D3A  0020               	movlb	0	; select bank0
 17854  1D3B  108E               	bcf	14,1	;volatile
 17855  1D3C  3001               	movlw	1
 17856  1D3D  00A0               	movwf	??_CC2500_WriteByte
 17857  1D3E  0820               	movf	??_CC2500_WriteByte,w
 17858  1D3F  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17859  1D40  2D2A               	goto	L13
 17860  1D41                     __end_of_CC2500_WriteByte:	
 17861                           
 17862                           	psect	text120
 17863  1397                     __ptext120:	
 17864 ;; *************** function _Buzzer_Main *****************
 17865 ;; Defined at:
 17866 ;;		line 46 in file "../src/Buzzer_B1.c"
 17867 ;; Parameters:    Size  Location     Type
 17868 ;;		None
 17869 ;; Auto vars:     Size  Location     Type
 17870 ;;		None
 17871 ;; Return value:  Size  Location     Type
 17872 ;;		None               void
 17873 ;; Registers used:
 17874 ;;		wreg, status,2, status,0
 17875 ;; Tracked objects:
 17876 ;;		On entry : 0/0
 17877 ;;		On exit  : 0/0
 17878 ;;		Unchanged: 0/0
 17879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17883 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17884 ;;Total ram usage:        1 bytes
 17885 ;; Hardware stack levels used:    1
 17886 ;; Hardware stack levels required when called:    5
 17887 ;; This function calls:
 17888 ;;		Nothing
 17889 ;; This function is called by:
 17890 ;;		_main
 17891 ;; This function uses a non-reentrant model
 17892 ;;
 17893                           
 17894                           
 17895                           ;psect for function _Buzzer_Main
 17896  1397                     _Buzzer_Main:	
 17897                           
 17898                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17899                           
 17900                           ;incstack = 0
 17901                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17902  1397  0021               	movlb	1	; select bank1
 17903  1398  1CB0               	btfss	_Buz1^(0+128),1
 17904  1399  0008               	return
 17905                           
 17906                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17907  139A  3001               	movlw	1
 17908  139B  07B1               	addwf	(_Buz1^(0+128)+1),f
 17909  139C  3000               	movlw	0
 17910  139D  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 17911                           
 17912                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17913  139E  0837               	movf	((_Buz1+1)^(0+128)+6),w
 17914  139F  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 17915  13A0  1D03               	skipz
 17916  13A1  2BA4               	goto	u11455
 17917  13A2  0836               	movf	(_Buz1^(0+128)+6),w
 17918  13A3  0231               	subwf	(_Buz1^(0+128)+1),w
 17919  13A4                     u11455:	
 17920  13A4  1C03               	skipc
 17921  13A5  0008               	return
 17922                           
 17923                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17924  13A6  01B1               	clrf	(_Buz1^(0+128)+1)
 17925  13A7  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 17926                           
 17927                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17928  13A8  12B0               	bcf	_Buz1^(0+128),5
 17929  13A9  0020               	movlb	0	; select bank0
 17930  13AA  1D8D               	btfss	13,3	;volatile
 17931  13AB  2BAE               	goto	l10190
 17932  13AC  0021               	movlb	1	; select bank1
 17933  13AD  16B0               	bsf	_Buz1^(0+128),5
 17934  13AE                     l10190:	
 17935                           
 17936                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17937  13AE  0021               	movlb	1	; select bank1
 17938  13AF  1AB0               	btfsc	_Buz1^(0+128),5
 17939  13B0  2BDA               	goto	l106
 17940                           
 17941                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17942  13B1  08B3               	movf	(_Buz1^(0+128)+3),f
 17943  13B2  1D03               	skipz
 17944  13B3  2BD6               	goto	l107
 17945                           
 17946                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17947  13B4  1DB0               	btfss	_Buz1^(0+128),3
 17948  13B5  2BC4               	goto	l108
 17949                           
 17950                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17951  13B6  11B0               	bcf	_Buz1^(0+128),3
 17952                           
 17953                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17954  13B7  0834               	movf	(_Buz1^(0+128)+4),w
 17955  13B8  0020               	movlb	0	; select bank0
 17956  13B9  00A0               	movwf	??_Buzzer_Main
 17957  13BA  0820               	movf	??_Buzzer_Main,w
 17958  13BB  0021               	movlb	1	; select bank1
 17959  13BC  00B3               	movwf	(_Buz1^(0+128)+3)
 17960                           
 17961                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17962  13BD  0839               	movf	((_Buz1+1)^(0+128)+8),w
 17963  13BE  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17964  13BF  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17965  13C0  0838               	movf	(_Buz1^(0+128)+8),w
 17966  13C1  01B6               	clrf	(_Buz1^(0+128)+6)
 17967  13C2  07B6               	addwf	(_Buz1^(0+128)+6),f
 17968                           
 17969                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17970  13C3  0008               	return
 17971  13C4                     l108:	
 17972  13C4  1E30               	btfss	_Buz1^(0+128),4
 17973  13C5  2BD4               	goto	l110
 17974                           
 17975                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17976  13C6  1230               	bcf	_Buz1^(0+128),4
 17977                           
 17978                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17979  13C7  0835               	movf	(_Buz1^(0+128)+5),w
 17980  13C8  0020               	movlb	0	; select bank0
 17981  13C9  00A0               	movwf	??_Buzzer_Main
 17982  13CA  0820               	movf	??_Buzzer_Main,w
 17983  13CB  0021               	movlb	1	; select bank1
 17984  13CC  00B3               	movwf	(_Buz1^(0+128)+3)
 17985                           
 17986                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17987  13CD  083B               	movf	((_Buz1+1)^(0+128)+10),w
 17988  13CE  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17989  13CF  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17990  13D0  083A               	movf	(_Buz1^(0+128)+10),w
 17991  13D1  01B6               	clrf	(_Buz1^(0+128)+6)
 17992  13D2  07B6               	addwf	(_Buz1^(0+128)+6),f
 17993                           
 17994                           ;Buzzer_B1.c: 62: } else {
 17995  13D3  0008               	return
 17996  13D4                     l110:	
 17997                           
 17998                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17999  13D4  10B0               	bcf	_Buz1^(0+128),1
 18000                           
 18001                           ;Buzzer_B1.c: 64: }
 18002                           ;Buzzer_B1.c: 65: } else {
 18003  13D5  0008               	return
 18004  13D6                     l107:	
 18005                           
 18006                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18007  13D6  16B0               	bsf	_Buz1^(0+128),5
 18008                           
 18009                           ;Buzzer_B1.c: 68: RB3 = 1;
 18010  13D7  0020               	movlb	0	; select bank0
 18011  13D8  158D               	bsf	13,3	;volatile
 18012                           
 18013                           ;Buzzer_B1.c: 69: }
 18014                           ;Buzzer_B1.c: 70: } else {
 18015  13D9  0008               	return
 18016  13DA                     l106:	
 18017                           
 18018                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18019  13DA  12B0               	bcf	_Buz1^(0+128),5
 18020                           
 18021                           ;Buzzer_B1.c: 73: RB3 = 0;
 18022  13DB  0020               	movlb	0	; select bank0
 18023  13DC  118D               	bcf	13,3	;volatile
 18024                           
 18025                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18026  13DD  3001               	movlw	1
 18027  13DE  0021               	movlb	1	; select bank1
 18028  13DF  02B3               	subwf	(_Buz1^(0+128)+3),f
 18029  13E0  0008               	return
 18030  13E1                     __end_of_Buzzer_Main:	
 18031                           
 18032                           	psect	text121
 18033  1A74                     __ptext121:	
 18034 ;; *************** function _Buzzer_Initialization *****************
 18035 ;; Defined at:
 18036 ;;		line 11 in file "../src/Buzzer_B1.c"
 18037 ;; Parameters:    Size  Location     Type
 18038 ;;		None
 18039 ;; Auto vars:     Size  Location     Type
 18040 ;;		None
 18041 ;; Return value:  Size  Location     Type
 18042 ;;		None               void
 18043 ;; Registers used:
 18044 ;;		None
 18045 ;; Tracked objects:
 18046 ;;		On entry : 0/0
 18047 ;;		On exit  : 0/0
 18048 ;;		Unchanged: 0/0
 18049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18054 ;;Total ram usage:        0 bytes
 18055 ;; Hardware stack levels used:    1
 18056 ;; Hardware stack levels required when called:    5
 18057 ;; This function calls:
 18058 ;;		Nothing
 18059 ;; This function is called by:
 18060 ;;		_main
 18061 ;; This function uses a non-reentrant model
 18062 ;;
 18063                           
 18064                           
 18065                           ;psect for function _Buzzer_Initialization
 18066  1A74                     _Buzzer_Initialization:	
 18067                           
 18068                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18069                           
 18070                           ;incstack = 0
 18071                           ; Regs used in _Buzzer_Initialization: []
 18072  1A74  0021               	movlb	1	; select bank1
 18073  1A75  1430               	bsf	_Buz1^(0+128),0
 18074  1A76  0008               	return
 18075  1A77                     __end_of_Buzzer_Initialization:	
 18076                           
 18077                           	psect	intentry
 18078  0004                     __pintentry:	
 18079 ;; *************** function _ISR *****************
 18080 ;; Defined at:
 18081 ;;		line 107 in file "../src/MCU_B1.c"
 18082 ;; Parameters:    Size  Location     Type
 18083 ;;		None
 18084 ;; Auto vars:     Size  Location     Type
 18085 ;;		None
 18086 ;; Return value:  Size  Location     Type
 18087 ;;		None               void
 18088 ;; Registers used:
 18089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18090 ;; Tracked objects:
 18091 ;;		On entry : 0/0
 18092 ;;		On exit  : 0/0
 18093 ;;		Unchanged: 0/0
 18094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18097 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18098 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18099 ;;Total ram usage:        1 bytes
 18100 ;; Hardware stack levels used:    1
 18101 ;; Hardware stack levels required when called:    4
 18102 ;; This function calls:
 18103 ;;		_IOC_ISR
 18104 ;;		_TMR1_ISR
 18105 ;; This function is called by:
 18106 ;;		Interrupt level 1
 18107 ;; This function uses a non-reentrant model
 18108 ;;
 18109                           
 18110  0004                     _ISR:	
 18111                           
 18112                           ;incstack = 0
 18113                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18114  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18115  0005  3180               	pagesel	$
 18116  0006  0020               	movlb	0	; select bank0
 18117  0007  087F               	movf	127,w
 18118  0008  00F5               	movwf	??_ISR
 18119                           
 18120                           ;MCU_B1.c: 109: IOC_ISR();
 18121  0009  319B  2386  3180   	fcall	_IOC_ISR
 18122                           
 18123                           ;MCU_B1.c: 111: ;;
 18124                           ;MCU_B1.c: 113: TMR1_ISR();
 18125  000C  319F  2783         	fcall	_TMR1_ISR
 18126  000E  0875               	movf	??_ISR,w
 18127  000F  0020               	movlb	0	; select bank0
 18128  0010  00FF               	movwf	127
 18129  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18130  0012  0009               	retfie
 18131  0013                     __end_of_ISR:	
 18132                           
 18133                           	psect	text123
 18134  1F83                     __ptext123:	
 18135 ;; *************** function _TMR1_ISR *****************
 18136 ;; Defined at:
 18137 ;;		line 209 in file "../src/MCU_B1.c"
 18138 ;; Parameters:    Size  Location     Type
 18139 ;;		None
 18140 ;; Auto vars:     Size  Location     Type
 18141 ;;		None
 18142 ;; Return value:  Size  Location     Type
 18143 ;;		None               void
 18144 ;; Registers used:
 18145 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18146 ;; Tracked objects:
 18147 ;;		On entry : 0/0
 18148 ;;		On exit  : 0/0
 18149 ;;		Unchanged: 0/0
 18150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18155 ;;Total ram usage:        0 bytes
 18156 ;; Hardware stack levels used:    1
 18157 ;; Hardware stack levels required when called:    2
 18158 ;; This function calls:
 18159 ;;		_setDimmerLights_IntrControl
 18160 ;; This function is called by:
 18161 ;;		_ISR
 18162 ;; This function uses a non-reentrant model
 18163 ;;
 18164                           
 18165                           
 18166                           ;psect for function _TMR1_ISR
 18167  1F83                     _TMR1_ISR:	
 18168                           
 18169                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18170                           
 18171                           ;incstack = 0
 18172                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18173  1F83  0021               	movlb	1	; select bank1
 18174  1F84  1C11               	btfss	17,0	;volatile
 18175  1F85  0008               	return
 18176  1F86  0020               	movlb	0	; select bank0
 18177  1F87  1C11               	btfss	17,0	;volatile
 18178  1F88  0008               	return
 18179                           
 18180                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18181  1F89  30FA               	movlw	250
 18182  1F8A  0097               	movwf	23	;volatile
 18183                           
 18184                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18185  1F8B  3038               	movlw	56
 18186  1F8C  0096               	movwf	22	;volatile
 18187                           
 18188                           ;MCU_B1.c: 214: TMR1IF = 0;
 18189  1F8D  1011               	bcf	17,0	;volatile
 18190                           
 18191                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18192  1F8E  3001               	movlw	1
 18193  1F8F  3182  2223  319F   	fcall	_setDimmerLights_IntrControl
 18194                           
 18195                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18196  1F92  3002               	movlw	2
 18197  1F93  3182  2223  319F   	fcall	_setDimmerLights_IntrControl
 18198                           
 18199                           ;MCU_B1.c: 234: Timer1.Count++;
 18200  1F96  3001               	movlw	1
 18201  1F97  0022               	movlb	2	; select bank2
 18202  1F98  07A1               	addwf	(_Timer1^(0+256)+1),f
 18203  1F99  3000               	movlw	0
 18204  1F9A  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18205                           
 18206                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18207  1F9B  3001               	movlw	1
 18208  1F9C  3E20               	addlw	_Timer1& (0+255)
 18209  1F9D  0086               	movwf	6
 18210  1F9E  3001               	movlw	1	; select bank2/3
 18211  1F9F  0087               	movwf	7
 18212  1FA0  3F40               	moviw [0]fsr1
 18213  1FA1  3A64               	xorlw	100
 18214  1FA2  1D03               	skipz
 18215  1FA3  2FA6               	goto	u771_25
 18216  1FA4  3F41               	moviw [1]fsr1
 18217  1FA5  3A00               	xorlw	0
 18218  1FA6                     u771_25:	
 18219  1FA6  1D03               	skipz
 18220  1FA7  0008               	return
 18221                           
 18222                           ;MCU_B1.c: 236: {
 18223                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18224  1FA8  01A1               	clrf	(_Timer1^(0+256)+1)
 18225  1FA9  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18226                           
 18227                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18228  1FAA  1420               	bsf	_Timer1^(0+256),0
 18229  1FAB  0008               	return
 18230  1FAC                     __end_of_TMR1_ISR:	
 18231                           
 18232                           	psect	text124
 18233  0223                     __ptext124:	
 18234 ;; *************** function _setDimmerLights_IntrControl *****************
 18235 ;; Defined at:
 18236 ;;		line 94 in file "../src/Dimmer_B1.c"
 18237 ;; Parameters:    Size  Location     Type
 18238 ;;  lights          1    wreg     unsigned char 
 18239 ;; Auto vars:     Size  Location     Type
 18240 ;;  lights          1    4[COMMON] unsigned char 
 18241 ;; Return value:  Size  Location     Type
 18242 ;;		None               void
 18243 ;; Registers used:
 18244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18245 ;; Tracked objects:
 18246 ;;		On entry : 0/0
 18247 ;;		On exit  : 0/0
 18248 ;;		Unchanged: 0/0
 18249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18251 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18252 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18253 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18254 ;;Total ram usage:        3 bytes
 18255 ;; Hardware stack levels used:    1
 18256 ;; Hardware stack levels required when called:    1
 18257 ;; This function calls:
 18258 ;;		_DimmerIntrPointSelect
 18259 ;; This function is called by:
 18260 ;;		_TMR1_ISR
 18261 ;; This function uses a non-reentrant model
 18262 ;;
 18263                           
 18264                           
 18265                           ;psect for function _setDimmerLights_IntrControl
 18266  0223                     _setDimmerLights_IntrControl:	
 18267                           
 18268                           ;incstack = 0
 18269                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18270                           ;setDimmerLights_IntrControl@lights stored from wreg
 18271  0223  00F4               	movwf	setDimmerLights_IntrControl@lights
 18272                           
 18273                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 18274  0224  0874               	movf	setDimmerLights_IntrControl@lights,w
 18275  0225  319B  23D6  3182   	fcall	_DimmerIntrPointSelect
 18276                           
 18277                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 18278  0228  0878               	movf	_DimmerLightsIntr,w
 18279  0229  0086               	movwf	6
 18280  022A  3001               	movlw	1	; select bank2/3
 18281  022B  0087               	movwf	7
 18282  022C  1C01               	btfss	1,0
 18283  022D  2A7A               	goto	i1l7122
 18284                           
 18285                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 18286  022E  3001               	movlw	1
 18287  022F  00F2               	movwf	??_setDimmerLights_IntrControl
 18288  0230  0878               	movf	_DimmerLightsIntr,w
 18289  0231  3E03               	addlw	3
 18290  0232  0086               	movwf	6
 18291  0233  3001               	movlw	1	; select bank2/3
 18292  0234  0087               	movwf	7
 18293  0235  0872               	movf	??_setDimmerLights_IntrControl,w
 18294  0236  0781               	addwf	1,f
 18295                           
 18296                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r.Correction)) {
 18297  0237  0878               	movf	_DimmerLightsIntr,w
 18298  0238  3E04               	addlw	4
 18299  0239  0086               	movwf	6
 18300  023A  3001               	movlw	1	; select bank2/3
 18301  023B  0087               	movwf	7
 18302  023C  0801               	movf	1,w
 18303  023D  0021               	movlb	1	; select bank1
 18304  023E  074A               	addwf	(_Dimmer^(0+128)+2),w
 18305  023F  00F2               	movwf	??_setDimmerLights_IntrControl
 18306  0240  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18307  0241  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 18308  0242  0878               	movf	_DimmerLightsIntr,w
 18309  0243  3E03               	addlw	3
 18310  0244  0086               	movwf	6
 18311  0245  3001               	movlw	1	; select bank2/3
 18312  0246  0087               	movwf	7
 18313  0247  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18314  0248  3A80               	xorlw	128
 18315  0249  3C80               	sublw	128
 18316  024A  1D03               	skipz
 18317  024B  2A4E               	goto	u645_25
 18318  024C  0872               	movf	??_setDimmerLights_IntrControl,w
 18319  024D  0201               	subwf	1,w
 18320  024E                     u645_25:	
 18321  024E  1C03               	skipc
 18322  024F  2B78               	goto	i1l7184
 18323                           
 18324                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 18325  0250  0878               	movf	_DimmerLightsIntr,w
 18326  0251  3E03               	addlw	3
 18327  0252  0086               	movwf	6
 18328  0253  3001               	movlw	1	; select bank2/3
 18329  0254  0087               	movwf	7
 18330  0255  0181               	clrf	1
 18331                           
 18332                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 18333  0256  0878               	movf	_DimmerLightsIntr,w
 18334  0257  0086               	movwf	6
 18335  0258  3001               	movlw	1	; select bank2/3
 18336  0259  0087               	movwf	7
 18337  025A  1001               	bcf	1,0
 18338                           
 18339                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 18340  025B  0878               	movf	_DimmerLightsIntr,w
 18341  025C  0086               	movwf	6
 18342  025D  3001               	movlw	1	; select bank2/3
 18343  025E  0087               	movwf	7
 18344  025F  1F01               	btfss	1,6
 18345  0260  2B78               	goto	i1l7184
 18346                           
 18347                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 18348  0261  0878               	movf	_DimmerLightsIntr,w
 18349  0262  3E08               	addlw	8
 18350  0263  0086               	movwf	6
 18351  0264  3001               	movlw	1	; select bank2/3
 18352  0265  0087               	movwf	7
 18353  0266  1401               	bsf	1,0
 18354                           
 18355                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 18356  0267  0878               	movf	_DimmerLightsIntr,w
 18357  0268  3E08               	addlw	8
 18358  0269  0086               	movwf	6
 18359  026A  3001               	movlw	1	; select bank2/3
 18360  026B  0087               	movwf	7
 18361  026C  1681               	bsf	1,5
 18362                           
 18363                           ;Dimmer_B1.c: 107: if (lights == 1) {
 18364  026D  0874               	movf	setDimmerLights_IntrControl@lights,w
 18365  026E  3A01               	xorlw	1
 18366  026F  1D03               	skipz
 18367  0270  2A73               	goto	i1l7118
 18368                           
 18369                           ;Dimmer_B1.c: 108: RA7 = 1;
 18370  0271  0020               	movlb	0	; select bank0
 18371  0272  178C               	bsf	12,7	;volatile
 18372  0273                     i1l7118:	
 18373                           ;Dimmer_B1.c: 109: ;;
 18374                           
 18375                           
 18376                           ;Dimmer_B1.c: 110: }
 18377                           ;Dimmer_B1.c: 113: if (lights == 2) {
 18378  0273  0874               	movf	setDimmerLights_IntrControl@lights,w
 18379  0274  3A02               	xorlw	2
 18380  0275  1D03               	skipz
 18381  0276  2B78               	goto	i1l7184
 18382                           
 18383                           ;Dimmer_B1.c: 114: RB4 = 1;
 18384  0277  0020               	movlb	0	; select bank0
 18385  0278  160D               	bsf	13,4	;volatile
 18386                           
 18387                           ;Dimmer_B1.c: 115: }
 18388                           ;Dimmer_B1.c: 122: }
 18389                           ;Dimmer_B1.c: 123: }
 18390                           ;Dimmer_B1.c: 124: } else {
 18391  0279  2B78               	goto	i1l7184
 18392  027A                     i1l7122:	
 18393                           
 18394                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 18395  027A  0878               	movf	_DimmerLightsIntr,w
 18396  027B  3E08               	addlw	8
 18397  027C  0086               	movwf	6
 18398  027D  3001               	movlw	1	; select bank2/3
 18399  027E  0087               	movwf	7
 18400  027F  1C01               	btfss	1,0
 18401  0280  2B78               	goto	i1l7184
 18402                           
 18403                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 18404  0281  0878               	movf	_DimmerLightsIntr,w
 18405  0282  3E08               	addlw	8
 18406  0283  0086               	movwf	6
 18407  0284  3001               	movlw	1	; select bank2/3
 18408  0285  0087               	movwf	7
 18409  0286  1001               	bcf	1,0
 18410                           
 18411                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 18412  0287  0878               	movf	_DimmerLightsIntr,w
 18413  0288  0086               	movwf	6
 18414  0289  3001               	movlw	1	; select bank2/3
 18415  028A  0087               	movwf	7
 18416  028B  1C81               	btfss	1,1
 18417  028C  2B78               	goto	i1l7184
 18418                           
 18419                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 18420  028D  3001               	movlw	1
 18421  028E  00F2               	movwf	??_setDimmerLights_IntrControl
 18422  028F  0A78               	incf	_DimmerLightsIntr,w
 18423  0290  0086               	movwf	6
 18424  0291  3001               	movlw	1	; select bank2/3
 18425  0292  0087               	movwf	7
 18426  0293  0872               	movf	??_setDimmerLights_IntrControl,w
 18427  0294  0781               	addwf	1,f
 18428                           
 18429                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18430  0295  0A78               	incf	_DimmerLightsIntr,w
 18431  0296  0086               	movwf	6
 18432  0297  3001               	movlw	1	; select bank2/3
 18433  0298  0087               	movwf	7
 18434  0299  0878               	movf	_DimmerLightsIntr,w
 18435  029A  3E02               	addlw	2
 18436  029B  0084               	movwf	4
 18437  029C  3001               	movlw	1	; select bank2/3
 18438  029D  0085               	movwf	5
 18439  029E  0800               	movf	0,w
 18440  029F  0201               	subwf	1,w
 18441  02A0  1C03               	skipc
 18442  02A1  2B78               	goto	i1l7184
 18443                           
 18444                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 18445  02A2  0A78               	incf	_DimmerLightsIntr,w
 18446  02A3  0086               	movwf	6
 18447  02A4  3001               	movlw	1	; select bank2/3
 18448  02A5  0087               	movwf	7
 18449  02A6  0181               	clrf	1
 18450                           
 18451                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 18452  02A7  0878               	movf	_DimmerLightsIntr,w
 18453  02A8  0086               	movwf	6
 18454  02A9  3001               	movlw	1	; select bank2/3
 18455  02AA  0087               	movwf	7
 18456  02AB  1D81               	btfss	1,3
 18457  02AC  2AE3               	goto	i1l7148
 18458                           
 18459                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 18460  02AD  0878               	movf	_DimmerLightsIntr,w
 18461  02AE  0086               	movwf	6
 18462  02AF  3001               	movlw	1	; select bank2/3
 18463  02B0  0087               	movwf	7
 18464  02B1  1A01               	btfsc	1,4
 18465  02B2  2ACA               	goto	i1l7142
 18466                           
 18467                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 18468  02B3  0878               	movf	_DimmerLightsIntr,w
 18469  02B4  3E04               	addlw	4
 18470  02B5  0086               	movwf	6
 18471  02B6  3001               	movlw	1	; select bank2/3
 18472  02B7  0087               	movwf	7
 18473  02B8  3021               	movlw	33
 18474  02B9  0201               	subwf	1,w
 18475  02BA  1C03               	skipc
 18476  02BB  2AC4               	goto	i1l7140
 18477                           
 18478                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 18479  02BC  0878               	movf	_DimmerLightsIntr,w
 18480  02BD  3E04               	addlw	4
 18481  02BE  0086               	movwf	6
 18482  02BF  3001               	movlw	1	; select bank2/3
 18483  02C0  0087               	movwf	7
 18484  02C1  3001               	movlw	1
 18485  02C2  0281               	subwf	1,f
 18486                           
 18487                           ;Dimmer_B1.c: 135: } else {
 18488  02C3  2B78               	goto	i1l7184
 18489  02C4                     i1l7140:	
 18490                           
 18491                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 18492  02C4  0878               	movf	_DimmerLightsIntr,w
 18493  02C5  0086               	movwf	6
 18494  02C6  3001               	movlw	1	; select bank2/3
 18495  02C7  0087               	movwf	7
 18496  02C8  1601               	bsf	1,4
 18497                           
 18498                           ;Dimmer_B1.c: 137: }
 18499                           ;Dimmer_B1.c: 138: } else {
 18500  02C9  2B78               	goto	i1l7184
 18501  02CA                     i1l7142:	
 18502                           
 18503                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 18504  02CA  0878               	movf	_DimmerLightsIntr,w
 18505  02CB  3E04               	addlw	4
 18506  02CC  0086               	movwf	6
 18507  02CD  3001               	movlw	1	; select bank2/3
 18508  02CE  0087               	movwf	7
 18509  02CF  303C               	movlw	60
 18510  02D0  0201               	subwf	1,w
 18511  02D1  1803               	skipnc
 18512  02D2  2ADD               	goto	i1l7146
 18513                           
 18514                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 18515  02D3  3001               	movlw	1
 18516  02D4  00F2               	movwf	??_setDimmerLights_IntrControl
 18517  02D5  0878               	movf	_DimmerLightsIntr,w
 18518  02D6  3E04               	addlw	4
 18519  02D7  0086               	movwf	6
 18520  02D8  3001               	movlw	1	; select bank2/3
 18521  02D9  0087               	movwf	7
 18522  02DA  0872               	movf	??_setDimmerLights_IntrControl,w
 18523  02DB  0781               	addwf	1,f
 18524                           
 18525                           ;Dimmer_B1.c: 141: } else {
 18526  02DC  2B78               	goto	i1l7184
 18527  02DD                     i1l7146:	
 18528                           
 18529                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 18530  02DD  0878               	movf	_DimmerLightsIntr,w
 18531  02DE  0086               	movwf	6
 18532  02DF  3001               	movlw	1	; select bank2/3
 18533  02E0  0087               	movwf	7
 18534  02E1  1201               	bcf	1,4
 18535                           
 18536                           ;Dimmer_B1.c: 143: }
 18537                           ;Dimmer_B1.c: 144: }
 18538                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 18539  02E2  2B78               	goto	i1l7184
 18540  02E3                     i1l7148:	
 18541  02E3  0878               	movf	_DimmerLightsIntr,w
 18542  02E4  0086               	movwf	6
 18543  02E5  3001               	movlw	1	; select bank2/3
 18544  02E6  0087               	movwf	7
 18545  02E7  1D01               	btfss	1,2
 18546  02E8  2B2A               	goto	i1l7162
 18547                           
 18548                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 18549  02E9  0878               	movf	_DimmerLightsIntr,w
 18550  02EA  3E05               	addlw	5
 18551  02EB  0086               	movwf	6
 18552  02EC  3001               	movlw	1	; select bank2/3
 18553  02ED  0087               	movwf	7
 18554  02EE  0878               	movf	_DimmerLightsIntr,w
 18555  02EF  3E04               	addlw	4
 18556  02F0  0084               	movwf	4
 18557  02F1  3001               	movlw	1	; select bank2/3
 18558  02F2  0085               	movwf	5
 18559  02F3  0800               	movf	0,w
 18560  02F4  0201               	subwf	1,w
 18561  02F5  1803               	skipnc
 18562  02F6  2AFF               	goto	i1l7154
 18563                           
 18564                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 18565  02F7  0878               	movf	_DimmerLightsIntr,w
 18566  02F8  3E04               	addlw	4
 18567  02F9  0086               	movwf	6
 18568  02FA  3001               	movlw	1	; select bank2/3
 18569  02FB  0087               	movwf	7
 18570  02FC  3001               	movlw	1
 18571  02FD  0281               	subwf	1,f
 18572                           
 18573                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 18574  02FE  2B16               	goto	i1l7158
 18575  02FF                     i1l7154:	
 18576  02FF  0878               	movf	_DimmerLightsIntr,w
 18577  0300  3E04               	addlw	4
 18578  0301  0086               	movwf	6
 18579  0302  3001               	movlw	1	; select bank2/3
 18580  0303  0087               	movwf	7
 18581  0304  0878               	movf	_DimmerLightsIntr,w
 18582  0305  3E05               	addlw	5
 18583  0306  0084               	movwf	4
 18584  0307  3001               	movlw	1	; select bank2/3
 18585  0308  0085               	movwf	5
 18586  0309  0800               	movf	0,w
 18587  030A  0201               	subwf	1,w
 18588  030B  1803               	skipnc
 18589  030C  2B16               	goto	i1l7158
 18590                           
 18591                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 18592  030D  3001               	movlw	1
 18593  030E  00F2               	movwf	??_setDimmerLights_IntrControl
 18594  030F  0878               	movf	_DimmerLightsIntr,w
 18595  0310  3E04               	addlw	4
 18596  0311  0086               	movwf	6
 18597  0312  3001               	movlw	1	; select bank2/3
 18598  0313  0087               	movwf	7
 18599  0314  0872               	movf	??_setDimmerLights_IntrControl,w
 18600  0315  0781               	addwf	1,f
 18601  0316                     i1l7158:	
 18602                           
 18603                           ;Dimmer_B1.c: 150: }
 18604                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18605  0316  0878               	movf	_DimmerLightsIntr,w
 18606  0317  3E05               	addlw	5
 18607  0318  0086               	movwf	6
 18608  0319  3001               	movlw	1	; select bank2/3
 18609  031A  0087               	movwf	7
 18610  031B  0878               	movf	_DimmerLightsIntr,w
 18611  031C  3E04               	addlw	4
 18612  031D  0084               	movwf	4
 18613  031E  3001               	movlw	1	; select bank2/3
 18614  031F  0085               	movwf	5
 18615  0320  0800               	movf	0,w
 18616  0321  0601               	xorwf	1,w
 18617  0322  1D03               	skipz
 18618  0323  2B78               	goto	i1l7184
 18619                           
 18620                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 18621  0324  0878               	movf	_DimmerLightsIntr,w
 18622  0325  0086               	movwf	6
 18623  0326  3001               	movlw	1	; select bank2/3
 18624  0327  0087               	movwf	7
 18625  0328  1101               	bcf	1,2
 18626  0329  2B45               	goto	i1l7168
 18627  032A                     i1l7162:	
 18628                           ;Dimmer_B1.c: 154: }
 18629                           ;Dimmer_B1.c: 155: } else {
 18630                           
 18631                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 18632                           
 18633                           
 18634                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 18635  032A  0878               	movf	_DimmerLightsIntr,w
 18636  032B  0086               	movwf	6
 18637  032C  3001               	movlw	1	; select bank2/3
 18638  032D  0087               	movwf	7
 18639  032E  1E81               	btfss	1,5
 18640  032F  2B4B               	goto	i1l7170
 18641                           
 18642                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 18643  0330  0878               	movf	_DimmerLightsIntr,w
 18644  0331  3E04               	addlw	4
 18645  0332  0086               	movwf	6
 18646  0333  3001               	movlw	1	; select bank2/3
 18647  0334  0087               	movwf	7
 18648  0335  3001               	movlw	1
 18649  0336  0281               	subwf	1,f
 18650                           
 18651                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 18652  0337  0878               	movf	_DimmerLightsIntr,w
 18653  0338  3E05               	addlw	5
 18654  0339  0086               	movwf	6
 18655  033A  3001               	movlw	1	; select bank2/3
 18656  033B  0087               	movwf	7
 18657  033C  0878               	movf	_DimmerLightsIntr,w
 18658  033D  3E04               	addlw	4
 18659  033E  0084               	movwf	4
 18660  033F  3001               	movlw	1	; select bank2/3
 18661  0340  0085               	movwf	5
 18662  0341  0800               	movf	0,w
 18663  0342  0201               	subwf	1,w
 18664  0343  1C03               	skipc
 18665  0344  2B78               	goto	i1l7184
 18666  0345                     i1l7168:	
 18667                           
 18668                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 18669  0345  0878               	movf	_DimmerLightsIntr,w
 18670  0346  0086               	movwf	6
 18671  0347  3001               	movlw	1	; select bank2/3
 18672  0348  0087               	movwf	7
 18673  0349  1081               	bcf	1,1
 18674                           
 18675                           ;Dimmer_B1.c: 160: }
 18676                           ;Dimmer_B1.c: 161: } else {
 18677  034A  2B78               	goto	i1l7184
 18678  034B                     i1l7170:	
 18679                           
 18680                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 18681  034B  3001               	movlw	1
 18682  034C  00F2               	movwf	??_setDimmerLights_IntrControl
 18683  034D  0878               	movf	_DimmerLightsIntr,w
 18684  034E  3E04               	addlw	4
 18685  034F  0086               	movwf	6
 18686  0350  3001               	movlw	1	; select bank2/3
 18687  0351  0087               	movwf	7
 18688  0352  0872               	movf	??_setDimmerLights_IntrControl,w
 18689  0353  0781               	addwf	1,f
 18690                           
 18691                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 18692  0354  0878               	movf	_DimmerLightsIntr,w
 18693  0355  3E04               	addlw	4
 18694  0356  0086               	movwf	6
 18695  0357  3001               	movlw	1	; select bank2/3
 18696  0358  0087               	movwf	7
 18697  0359  0878               	movf	_DimmerLightsIntr,w
 18698  035A  3E06               	addlw	6
 18699  035B  0084               	movwf	4
 18700  035C  3001               	movlw	1	; select bank2/3
 18701  035D  0085               	movwf	5
 18702  035E  0800               	movf	0,w
 18703  035F  0201               	subwf	1,w
 18704  0360  1C03               	skipc
 18705  0361  2B78               	goto	i1l7184
 18706                           
 18707                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 18708  0362  0878               	movf	_DimmerLightsIntr,w
 18709  0363  0086               	movwf	6
 18710  0364  3001               	movlw	1	; select bank2/3
 18711  0365  0087               	movwf	7
 18712  0366  1081               	bcf	1,1
 18713                           
 18714                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 18715  0367  0878               	movf	_DimmerLightsIntr,w
 18716  0368  0086               	movwf	6
 18717  0369  3001               	movlw	1	; select bank2/3
 18718  036A  0087               	movwf	7
 18719  036B  1301               	bcf	1,6
 18720                           
 18721                           ;Dimmer_B1.c: 167: if (lights == 1) {
 18722  036C  0874               	movf	setDimmerLights_IntrControl@lights,w
 18723  036D  3A01               	xorlw	1
 18724  036E  1D03               	skipz
 18725  036F  2B72               	goto	i1l7180
 18726                           
 18727                           ;Dimmer_B1.c: 168: RA3 = 0;
 18728  0370  0020               	movlb	0	; select bank0
 18729  0371  118C               	bcf	12,3	;volatile
 18730  0372                     i1l7180:	
 18731                           
 18732                           ;Dimmer_B1.c: 170: }
 18733                           ;Dimmer_B1.c: 173: if (lights == 2) {
 18734  0372  0874               	movf	setDimmerLights_IntrControl@lights,w
 18735  0373  3A02               	xorlw	2
 18736  0374  1D03               	skipz
 18737  0375  2B78               	goto	i1l7184
 18738                           
 18739                           ;Dimmer_B1.c: 174: RC7 = 0;
 18740  0376  0020               	movlb	0	; select bank0
 18741  0377  138E               	bcf	14,7	;volatile
 18742  0378                     i1l7184:	
 18743                           
 18744                           ;Dimmer_B1.c: 175: }
 18745                           ;Dimmer_B1.c: 182: }
 18746                           ;Dimmer_B1.c: 183: }
 18747                           ;Dimmer_B1.c: 184: }
 18748                           ;Dimmer_B1.c: 185: }
 18749                           ;Dimmer_B1.c: 186: }
 18750                           ;Dimmer_B1.c: 187: }
 18751                           ;Dimmer_B1.c: 188: }
 18752                           ;Dimmer_B1.c: 189: if (DimmerLightsIntr->Triac == 1) {
 18753  0378  0878               	movf	_DimmerLightsIntr,w
 18754  0379  3E08               	addlw	8
 18755  037A  0086               	movwf	6
 18756  037B  3001               	movlw	1	; select bank2/3
 18757  037C  0087               	movwf	7
 18758  037D  1E81               	btfss	1,5
 18759  037E  2BA9               	goto	i1l7202
 18760                           
 18761                           ;Dimmer_B1.c: 190: DimmerLightsIntr->TriacTime++;
 18762  037F  3001               	movlw	1
 18763  0380  00F2               	movwf	??_setDimmerLights_IntrControl
 18764  0381  0878               	movf	_DimmerLightsIntr,w
 18765  0382  3E07               	addlw	7
 18766  0383  0086               	movwf	6
 18767  0384  3001               	movlw	1	; select bank2/3
 18768  0385  0087               	movwf	7
 18769  0386  0872               	movf	??_setDimmerLights_IntrControl,w
 18770  0387  0781               	addwf	1,f
 18771                           
 18772                           ;Dimmer_B1.c: 191: if (DimmerLightsIntr->TriacTime >= 5) {
 18773  0388  0878               	movf	_DimmerLightsIntr,w
 18774  0389  3E07               	addlw	7
 18775  038A  0086               	movwf	6
 18776  038B  3001               	movlw	1	; select bank2/3
 18777  038C  0087               	movwf	7
 18778  038D  3005               	movlw	5
 18779  038E  0201               	subwf	1,w
 18780  038F  1C03               	skipc
 18781  0390  2BA9               	goto	i1l7202
 18782                           
 18783                           ;Dimmer_B1.c: 192: DimmerLightsIntr->TriacTime = 0;
 18784  0391  0878               	movf	_DimmerLightsIntr,w
 18785  0392  3E07               	addlw	7
 18786  0393  0086               	movwf	6
 18787  0394  3001               	movlw	1	; select bank2/3
 18788  0395  0087               	movwf	7
 18789  0396  0181               	clrf	1
 18790                           
 18791                           ;Dimmer_B1.c: 193: DimmerLightsIntr->Triac = 0;
 18792  0397  0878               	movf	_DimmerLightsIntr,w
 18793  0398  3E08               	addlw	8
 18794  0399  0086               	movwf	6
 18795  039A  3001               	movlw	1	; select bank2/3
 18796  039B  0087               	movwf	7
 18797  039C  1281               	bcf	1,5
 18798                           
 18799                           ;Dimmer_B1.c: 196: if (lights == 1) {
 18800  039D  0874               	movf	setDimmerLights_IntrControl@lights,w
 18801  039E  3A01               	xorlw	1
 18802  039F  1D03               	skipz
 18803  03A0  2BA3               	goto	i1l7198
 18804                           
 18805                           ;Dimmer_B1.c: 197: RA7 = 0;
 18806  03A1  0020               	movlb	0	; select bank0
 18807  03A2  138C               	bcf	12,7	;volatile
 18808  03A3                     i1l7198:	
 18809                           ;Dimmer_B1.c: 198: ;;
 18810                           
 18811                           
 18812                           ;Dimmer_B1.c: 199: }
 18813                           ;Dimmer_B1.c: 202: if (lights == 2) {
 18814  03A3  0874               	movf	setDimmerLights_IntrControl@lights,w
 18815  03A4  3A02               	xorlw	2
 18816  03A5  1D03               	skipz
 18817  03A6  2BA9               	goto	i1l7202
 18818                           
 18819                           ;Dimmer_B1.c: 203: RB4 = 0;
 18820  03A7  0020               	movlb	0	; select bank0
 18821  03A8  120D               	bcf	13,4	;volatile
 18822  03A9                     i1l7202:	
 18823                           
 18824                           ;Dimmer_B1.c: 204: }
 18825                           ;Dimmer_B1.c: 211: }
 18826                           ;Dimmer_B1.c: 212: }
 18827                           ;Dimmer_B1.c: 213: if (DimmerLightsIntr->TriacFlag == 1) {
 18828  03A9  0878               	movf	_DimmerLightsIntr,w
 18829  03AA  3E09               	addlw	9
 18830  03AB  0086               	movwf	6
 18831  03AC  3001               	movlw	1	; select bank2/3
 18832  03AD  0087               	movwf	7
 18833  03AE  1E81               	btfss	1,5
 18834  03AF  0008               	return
 18835                           
 18836                           ;Dimmer_B1.c: 214: DimmerLightsIntr->TriacCount++;
 18837  03B0  3001               	movlw	1
 18838  03B1  00F2               	movwf	??_setDimmerLights_IntrControl
 18839  03B2  0878               	movf	_DimmerLightsIntr,w
 18840  03B3  3E0A               	addlw	10
 18841  03B4  0086               	movwf	6
 18842  03B5  3001               	movlw	1	; select bank2/3
 18843  03B6  0087               	movwf	7
 18844  03B7  0872               	movf	??_setDimmerLights_IntrControl,w
 18845  03B8  0781               	addwf	1,f
 18846                           
 18847                           ;Dimmer_B1.c: 215: if (DimmerLightsIntr->TriacCount == 60) {
 18848  03B9  0878               	movf	_DimmerLightsIntr,w
 18849  03BA  3E0A               	addlw	10
 18850  03BB  0086               	movwf	6
 18851  03BC  3001               	movlw	1	; select bank2/3
 18852  03BD  0087               	movwf	7
 18853  03BE  0801               	movf	1,w
 18854  03BF  3A3C               	xorlw	60
 18855  03C0  1D03               	skipz
 18856  03C1  0008               	return
 18857                           
 18858                           ;Dimmer_B1.c: 216: DimmerLightsIntr->TriacCount = 0;
 18859  03C2  0878               	movf	_DimmerLightsIntr,w
 18860  03C3  3E0A               	addlw	10
 18861  03C4  0086               	movwf	6
 18862  03C5  3001               	movlw	1	; select bank2/3
 18863  03C6  0087               	movwf	7
 18864  03C7  0181               	clrf	1
 18865                           
 18866                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacFlag = 0;
 18867  03C8  0878               	movf	_DimmerLightsIntr,w
 18868  03C9  3E09               	addlw	9
 18869  03CA  0086               	movwf	6
 18870  03CB  3001               	movlw	1	; select bank2/3
 18871  03CC  0087               	movwf	7
 18872  03CD  1281               	bcf	1,5
 18873  03CE  0008               	return
 18874  03CF                     __end_of_setDimmerLights_IntrControl:	
 18875                           
 18876                           	psect	text125
 18877  1BD6                     __ptext125:	
 18878 ;; *************** function _DimmerIntrPointSelect *****************
 18879 ;; Defined at:
 18880 ;;		line 72 in file "../src/Dimmer_B1.c"
 18881 ;; Parameters:    Size  Location     Type
 18882 ;;  lights          1    wreg     unsigned char 
 18883 ;; Auto vars:     Size  Location     Type
 18884 ;;  lights          1    1[COMMON] unsigned char 
 18885 ;; Return value:  Size  Location     Type
 18886 ;;		None               void
 18887 ;; Registers used:
 18888 ;;		wreg
 18889 ;; Tracked objects:
 18890 ;;		On entry : 0/0
 18891 ;;		On exit  : 0/0
 18892 ;;		Unchanged: 0/0
 18893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18895 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18896 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18897 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18898 ;;Total ram usage:        2 bytes
 18899 ;; Hardware stack levels used:    1
 18900 ;; This function calls:
 18901 ;;		Nothing
 18902 ;; This function is called by:
 18903 ;;		_setDimmerLights_IntrControl
 18904 ;; This function uses a non-reentrant model
 18905 ;;
 18906                           
 18907                           
 18908                           ;psect for function _DimmerIntrPointSelect
 18909  1BD6                     _DimmerIntrPointSelect:	
 18910                           
 18911                           ;incstack = 0
 18912                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18913                           ;DimmerIntrPointSelect@lights stored from wreg
 18914  1BD6  00F1               	movwf	DimmerIntrPointSelect@lights
 18915                           
 18916                           ;Dimmer_B1.c: 74: if (lights == 1) {
 18917  1BD7  0871               	movf	DimmerIntrPointSelect@lights,w
 18918  1BD8  3A01               	xorlw	1
 18919  1BD9  1D03               	skipz
 18920  1BDA  2BDF               	goto	i1l743
 18921                           
 18922                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 18923  1BDB  30BE               	movlw	_DimmerLights1& (0+255)
 18924  1BDC  00F0               	movwf	??_DimmerIntrPointSelect
 18925  1BDD  0870               	movf	??_DimmerIntrPointSelect,w
 18926  1BDE  00F8               	movwf	_DimmerLightsIntr
 18927  1BDF                     i1l743:	
 18928                           
 18929                           ;Dimmer_B1.c: 76: }
 18930                           ;Dimmer_B1.c: 79: if (lights == 2) {
 18931  1BDF  0871               	movf	DimmerIntrPointSelect@lights,w
 18932  1BE0  3A02               	xorlw	2
 18933  1BE1  1D03               	skipz
 18934  1BE2  0008               	return
 18935                           
 18936                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 18937  1BE3  30CD               	movlw	_DimmerLights2& (0+255)
 18938  1BE4  00F0               	movwf	??_DimmerIntrPointSelect
 18939  1BE5  0870               	movf	??_DimmerIntrPointSelect,w
 18940  1BE6  00F8               	movwf	_DimmerLightsIntr
 18941  1BE7  0008               	return
 18942  1BE8                     __end_of_DimmerIntrPointSelect:	
 18943                           
 18944                           	psect	text126
 18945  1B86                     __ptext126:	
 18946 ;; *************** function _IOC_ISR *****************
 18947 ;; Defined at:
 18948 ;;		line 402 in file "../src/MCU_B1.c"
 18949 ;; Parameters:    Size  Location     Type
 18950 ;;		None
 18951 ;; Auto vars:     Size  Location     Type
 18952 ;;		None
 18953 ;; Return value:  Size  Location     Type
 18954 ;;		None               void
 18955 ;; Registers used:
 18956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18957 ;; Tracked objects:
 18958 ;;		On entry : 0/0
 18959 ;;		On exit  : 0/0
 18960 ;;		Unchanged: 0/0
 18961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18966 ;;Total ram usage:        0 bytes
 18967 ;; Hardware stack levels used:    1
 18968 ;; Hardware stack levels required when called:    3
 18969 ;; This function calls:
 18970 ;;		_setDimmerReClock
 18971 ;; This function is called by:
 18972 ;;		_ISR
 18973 ;; This function uses a non-reentrant model
 18974 ;;
 18975                           
 18976                           
 18977                           ;psect for function _IOC_ISR
 18978  1B86                     _IOC_ISR:	
 18979                           
 18980                           ;MCU_B1.c: 403: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18981                           
 18982                           ;incstack = 0
 18983                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18984  1B86  1D8B               	btfss	11,3	;volatile
 18985  1B87  0008               	return
 18986  1B88  1C0B               	btfss	11,0	;volatile
 18987  1B89  0008               	return
 18988  1B8A  0027               	movlb	7	; select bank7
 18989  1B8B  1D16               	btfss	22,2	;volatile
 18990  1B8C  0008               	return
 18991                           
 18992                           ;MCU_B1.c: 404: IOCBF2 = 0;
 18993  1B8D  1116               	bcf	22,2	;volatile
 18994                           
 18995                           ;MCU_B1.c: 405: IOCIF = 0;
 18996  1B8E  100B               	bcf	11,0	;volatile
 18997                           
 18998                           ;MCU_B1.c: 406: if (myMain.PowerON == 1) {
 18999  1B8F  0021               	movlb	1	; select bank1
 19000  1B90  1C20               	btfss	_myMain^(0+128),0
 19001  1B91  0008               	return
 19002                           
 19003                           ;MCU_B1.c: 408: setDimmerReClock();
 19004  1B92  319A  22B0         	fcall	_setDimmerReClock
 19005  1B94  0008               	return
 19006  1B95                     __end_of_IOC_ISR:	
 19007                           
 19008                           	psect	text127
 19009  1AB0                     __ptext127:	
 19010 ;; *************** function _setDimmerReClock *****************
 19011 ;; Defined at:
 19012 ;;		line 244 in file "../src/MCU_B1.c"
 19013 ;; Parameters:    Size  Location     Type
 19014 ;;		None
 19015 ;; Auto vars:     Size  Location     Type
 19016 ;;		None
 19017 ;; Return value:  Size  Location     Type
 19018 ;;		None               void
 19019 ;; Registers used:
 19020 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19021 ;; Tracked objects:
 19022 ;;		On entry : 0/0
 19023 ;;		On exit  : 0/0
 19024 ;;		Unchanged: 0/0
 19025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19030 ;;Total ram usage:        0 bytes
 19031 ;; Hardware stack levels used:    1
 19032 ;; Hardware stack levels required when called:    2
 19033 ;; This function calls:
 19034 ;;		_setDimmerLights_IntrIOC_GO
 19035 ;; This function is called by:
 19036 ;;		_IOC_ISR
 19037 ;; This function uses a non-reentrant model
 19038 ;;
 19039                           
 19040                           
 19041                           ;psect for function _setDimmerReClock
 19042  1AB0                     _setDimmerReClock:	
 19043                           
 19044                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 19045                           
 19046                           ;incstack = 0
 19047                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19048  1AB0  3001               	movlw	1
 19049  1AB1  319F  275B  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19050                           
 19051                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 19052  1AB4  3002               	movlw	2
 19053  1AB5  319F  275B         	fcall	_setDimmerLights_IntrIOC_GO
 19054  1AB7  0008               	return
 19055  1AB8                     __end_of_setDimmerReClock:	
 19056                           
 19057                           	psect	text128
 19058  1F5B                     __ptext128:	
 19059 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19060 ;; Defined at:
 19061 ;;		line 28 in file "../src/Dimmer_B1.c"
 19062 ;; Parameters:    Size  Location     Type
 19063 ;;  lights          1    wreg     unsigned char 
 19064 ;; Auto vars:     Size  Location     Type
 19065 ;;  lights          1    2[COMMON] unsigned char 
 19066 ;; Return value:  Size  Location     Type
 19067 ;;		None               void
 19068 ;; Registers used:
 19069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19070 ;; Tracked objects:
 19071 ;;		On entry : 0/0
 19072 ;;		On exit  : 0/0
 19073 ;;		Unchanged: 0/0
 19074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19076 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19078 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19079 ;;Total ram usage:        1 bytes
 19080 ;; Hardware stack levels used:    1
 19081 ;; Hardware stack levels required when called:    1
 19082 ;; This function calls:
 19083 ;;		_DimmerIntrIOCPointSelect
 19084 ;; This function is called by:
 19085 ;;		_setDimmerReClock
 19086 ;; This function uses a non-reentrant model
 19087 ;;
 19088                           
 19089                           
 19090                           ;psect for function _setDimmerLights_IntrIOC_GO
 19091  1F5B                     _setDimmerLights_IntrIOC_GO:	
 19092                           
 19093                           ;incstack = 0
 19094                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19095                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19096  1F5B  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19097                           
 19098                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 19099  1F5C  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19100  1F5D  319C  2469  319F   	fcall	_DimmerIntrIOCPointSelect
 19101                           
 19102                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 19103  1F60  0021               	movlb	1	; select bank1
 19104  1F61  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19105  1F62  0086               	movwf	6
 19106  1F63  3001               	movlw	1	; select bank2/3
 19107  1F64  0087               	movwf	7
 19108  1F65  1801               	btfsc	1,0
 19109  1F66  0008               	return
 19110  1F67  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19111  1F68  3E09               	addlw	9
 19112  1F69  0086               	movwf	6
 19113  1F6A  3001               	movlw	1	; select bank2/3
 19114  1F6B  0087               	movwf	7
 19115  1F6C  1A81               	btfsc	1,5
 19116  1F6D  0008               	return
 19117                           
 19118                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 19119  1F6E  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19120  1F6F  0086               	movwf	6
 19121  1F70  3001               	movlw	1	; select bank2/3
 19122  1F71  0087               	movwf	7
 19123  1F72  1401               	bsf	1,0
 19124                           
 19125                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 19126  1F73  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19127  1F74  3E09               	addlw	9
 19128  1F75  0086               	movwf	6
 19129  1F76  3001               	movlw	1	; select bank2/3
 19130  1F77  0087               	movwf	7
 19131  1F78  1681               	bsf	1,5
 19132                           
 19133                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 19134  1F79  0020               	movlb	0	; select bank0
 19135  1F7A  1D0D               	btfss	13,2	;volatile
 19136  1F7B  2F80               	goto	i1l6714
 19137                           
 19138                           ;Dimmer_B1.c: 36: Dimmer.Correction = 1;
 19139  1F7C  0021               	movlb	1	; select bank1
 19140  1F7D  01CA               	clrf	(_Dimmer^(0+128)+2)
 19141  1F7E  0ACA               	incf	(_Dimmer^(0+128)+2),f
 19142                           
 19143                           ;Dimmer_B1.c: 37: } else {
 19144  1F7F  0008               	return
 19145  1F80                     i1l6714:	
 19146                           
 19147                           ;Dimmer_B1.c: 38: Dimmer.Correction = 0;
 19148  1F80  0021               	movlb	1	; select bank1
 19149  1F81  01CA               	clrf	(_Dimmer^(0+128)+2)
 19150  1F82  0008               	return
 19151  1F83                     __end_of_setDimmerLights_IntrIOC_GO:	
 19152                           
 19153                           	psect	text129
 19154  1C69                     __ptext129:	
 19155 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19156 ;; Defined at:
 19157 ;;		line 8 in file "../src/Dimmer_B1.c"
 19158 ;; Parameters:    Size  Location     Type
 19159 ;;  lights          1    wreg     unsigned char 
 19160 ;; Auto vars:     Size  Location     Type
 19161 ;;  lights          1    1[COMMON] unsigned char 
 19162 ;; Return value:  Size  Location     Type
 19163 ;;		None               void
 19164 ;; Registers used:
 19165 ;;		wreg
 19166 ;; Tracked objects:
 19167 ;;		On entry : 0/0
 19168 ;;		On exit  : 0/0
 19169 ;;		Unchanged: 0/0
 19170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19173 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19174 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19175 ;;Total ram usage:        2 bytes
 19176 ;; Hardware stack levels used:    1
 19177 ;; This function calls:
 19178 ;;		Nothing
 19179 ;; This function is called by:
 19180 ;;		_setDimmerLights_IntrIOC_GO
 19181 ;; This function uses a non-reentrant model
 19182 ;;
 19183                           
 19184                           
 19185                           ;psect for function _DimmerIntrIOCPointSelect
 19186  1C69                     _DimmerIntrIOCPointSelect:	
 19187                           
 19188                           ;incstack = 0
 19189                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19190                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19191  1C69  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19192                           
 19193                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19194  1C6A  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19195  1C6B  3A01               	xorlw	1
 19196  1C6C  1D03               	skipz
 19197  1C6D  2C73               	goto	i1l732
 19198                           
 19199                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19200  1C6E  30BE               	movlw	_DimmerLights1& (0+255)
 19201  1C6F  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19202  1C70  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19203  1C71  0021               	movlb	1	; select bank1
 19204  1C72  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19205  1C73                     i1l732:	
 19206                           
 19207                           ;Dimmer_B1.c: 12: }
 19208                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19209  1C73  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19210  1C74  3A02               	xorlw	2
 19211  1C75  1D03               	skipz
 19212  1C76  0008               	return
 19213                           
 19214                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19215  1C77  30CD               	movlw	_DimmerLights2& (0+255)
 19216  1C78  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19217  1C79  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19218  1C7A  0021               	movlb	1	; select bank1
 19219  1C7B  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19220  1C7C  0008               	return
 19221  1C7D                     __end_of_DimmerIntrIOCPointSelect:	
 19222  007E                     btemp	set	126	;btemp
 19223  007E                     pic14e$flags	set	126
 19224  007E                     wtemp	set	126
 19225  007E                     wtemp0	set	126
 19226  0080                     wtemp1	set	128
 19227  0082                     wtemp2	set	130
 19228  0084                     wtemp3	set	132
 19229  0086                     wtemp4	set	134
 19230  0088                     wtemp5	set	136
 19231  007F                     wtemp6	set	127
 19232  007E                     ttemp	set	126
 19233  007E                     ttemp0	set	126
 19234  0081                     ttemp1	set	129
 19235  0084                     ttemp2	set	132
 19236  0087                     ttemp3	set	135
 19237  007F                     ttemp4	set	127
 19238  007E                     ltemp	set	126
 19239  007E                     ltemp0	set	126
 19240  0082                     ltemp1	set	130
 19241  0086                     ltemp2	set	134
 19242  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         261
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     78      78
    BANK1            80      5      79
    BANK2            80      0      77
    BANK3            80      4      73
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK2[2]), DlySw1(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _main->_Switch_Main
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _getMain_LightsStatus->_getDimmerLights_Status
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_getMain_All_Error_Status
    _setLED->_LedPointSelect
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setRF_DimmerLights
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setRF_DimmerLights
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Switch_Main->_setMain_Exception

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  172281
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1705
                             _setBuz
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     669
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     238
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0     238
                                              7 BANK0      2     2      0
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   43401
                                             76 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   27016
                                             70 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           3     3      0     570
                                              5 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    6     6      0   16051
                                             75 BANK0      1     1      0
                                              0 BANK1      5     5      0
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0   12795
                                             70 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1078
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1078
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   59190
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   59190
                                             74 BANK0      4     4      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   57963
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1767
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   55924
                             _setBuz
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   36095
                                             70 BANK0      2     2      0
             _getDimmerLights_Status
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   18124
                                             68 BANK0      3     3      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   17842
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   17749
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   17656
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    4020
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4925
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1032
                                              9 BANK0      6     6      0
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      71
                                              2 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0     114
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1202
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1202
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1745
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     303
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1442
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   10215
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1102
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   14043
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 8     8      0   14043
                                             69 BANK0      8     8      0
            _DimmerLightsPointSelect
                         _getLoad_OK
           _getMain_All_Error_Status
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   10056
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      6     5      1    1716
                                              7 BANK0      6     5      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1047
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   34354
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   34354
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0   11999
                                             66 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1705
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      77
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                4     4      0   12318
                                             66 BANK0      4     4      0
            _DimmerLightsPointSelect
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    9693
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    8711
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     579
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    4368
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3665
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1679
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     264
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     198
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     198
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getLoad_OK
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setLED
           _LedPointSelect
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
           _setRF_DimmerLights
             _setPercentValue
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _setTxData
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setTxData

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      5      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      49      11       91.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     184      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     184      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Nov 10 16:55:31 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 1602                                       l98 1616  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1EEC  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 0079                   __end_of_setDelayOff_GO 179F  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                 __size_of_getRF_KeyStatus 0011  
                   _setDimmerLights_Main 0DD8                             ___ftadd@sign 0048  
                                    l110 13D4                                      l106 13DA  
                                    l107 13D6                                      l108 13C4  
                                    l330 1D34                                      l331 1D36  
                   _setDimmerLights_SwOn 1287                                      l255 091F  
                                    l280 0ABD                                      l281 0B04  
                                    l374 1F3A                                      l801 0E0B  
                                    l813 0E54                                      l582 087C  
                                    l807 0E0D                                      l819 0E56  
                                    l863 1732                                      l786 1C3A  
                                    _GIE 005F                                      _CRC 00CB  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 00CF                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BC  
                                    _ISR 0004                                      _WDT 0125  
           getDimmerLights_Status@lights 0022                                      _Sw1 0154  
                                    _Sw2 01DC                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1D41                    _Buzzer_Initialization 1A74  
                        __end_of_ADC_Set 1AB0                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0C12  
                 _setMain_Exception$3910 00EB                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1EA7                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0067                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1B95                               Load_Main@i 002E  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l2230 0660                                     l2231 0668  
                                   l1352 10CC                                     l2320 1235  
                                   l2312 149D                                     l1361 1427  
                                   l1338 119D                 ?_DimmerLightsPointSelect 0070  
                                   l2227 0721                                     l2308 0A24  
                                   l2236 06A0                                     l2237 069C  
                                   l2229 065E                                     l2239 06D9  
                                   l1720 021D                                     l1725 01C3  
                        __end_of_IOC_Set 1B53                                     l1549 1467  
                                   l1726 01C1                                     l2294 11D5  
                                   l2278 0A40                                     l2288 0A91  
                         _Load_Main$4290 002D                                     l1593 111B  
                                   l1594 1136                                     l2618 1CD6  
                                   l2634 1EFC                                     l2644 0535  
                                   l1598 1132                                     l2646 040E  
                                   l2922 17E9                                     l2916 17D2  
                                   l1876 0DD4                                     l2945 05DD  
                                   l9000 1D63                                     l9002 1D66  
                  _setDimmerLights_SwOff 16DF                                     l9006 1D6C  
                                   l9102 08D8                                     l9022 1F23  
                                   l9016 1F1A                                     l9042 1116  
                                   l9018 1F1D                                     l9202 093B  
                                   l8410 0566                                     l8500 0EE9  
                                   l9052 112D                                     l9044 111F  
                                   l8420 057C                                     l9140 09E4  
                                   l9222 0AA1                                     l8414 056D  
                                   l9150 0A05                                     l9126 09B8  
                                   l8352 17AF                                     l8600 0BF8  
                                   l9064 0892                                     l9072 089E  
                                   l9216 0A98                                     l9224 0AA4  
                                   l8440 05B3                                     l8432 0596  
                                   l9144 09F9                                     l8362 17D7  
                                   l8354 17B9                                     l8602 0BFB  
                                   l9082 08AE                                     l9322 0C7A  
                                   l9330 1260                                     l9250 0ACF  
                                   l9234 0ABA                                     l9218 0A9B  
                                   l9170 08F4                                     l8450 05CF  
                                   l8442 05B8                                     l8522 073C  
                                   l9146 09FD                                     l9154 0A09  
                                   l8380 1BF1                                     l8364 17DF  
                                   l8356 17BE                                     l8348 17A8  
                                   l8508 0F02                                     l9068 0898  
                                   l9308 0C3B                                     l9252 0AE8  
                                   l9236 0AB4                                     l9164 08EB  
                                   l8460 0601                                     l8452 05D9  
                                   l8444 05BC                                     l8540 078D  
                                   l9148 0A01                                     l8614 1C88  
                                   l8630 1FFE                                     l8606 0C09  
                                   l9094 08CC                                     l9078 08A8  
                                   l9086 08B4                                     l9190 0928  
                                   l9166 08EE                                     l9510 1BD0  
                                   l8470 061C                                     l8438 05A9  
                                   l9350 1E13                                     l9600 1307  
                                   l8376 1BEB                                     l8480 0E92  
                                   l9264 0B06                                     l9184 0906  
                                   l8456 05EF                                     l8552 07A9  
                                   l8544 0795                                     l8528 0752  
                                   l9360 1E21                                     l9274 1F4B  
                                   l9282 1ED2                                     l9098 08D2  
                                   l9194 092E                                     l9530 0A43  
                                   l9276 1F56                                     l9284 1ED5  
                                   l8572 0BA4                                     l9196 0932  
                                   l9188 0925                                     l8556 07B1  
                                   l9348 1E11                    _myMain_Initialization 1B95  
                                   l8398 1E6E                                     l8486 0EA8  
                                   l8590 0BD4                                     l8670 14E5  
                                   l9702 0E23                                     l9446 10B4  
                                   l9198 0935                                     l9542 0A5B  
                                   l9390 1661                                     l9358 1E1D  
                                   l9288 1EDB                                     l8760 1776  
                                   l8592 0BE2                                     l8744 09A7  
                                   l8680 14ED                                     l8664 14DA  
                                   l9704 0E29                                     l9472 10FD  
                                   l9552 0A7C                                     l9392 1636  
                                   l8682 14F9                                     l9714 0E4B  
                                   l9474 10E1                                     l8906 1145  
                                   l9394 1667                                     l9810 1E51  
                                   l8764 177C                                     l8692 1514  
                                   l9724 0E75                                     l9716 0E4E  
                                   l9476 1102                                     l9590 12F7  
                                   l8766 1789                                     l8598 0BEF  
                                   l8782 1D04                                     l8870 12C3  
                                   l9750 134A                                     l9558 0A87  
                                   l9814 1E56                                     l9584 12EE  
                                   l8768 1792                                     l8696 151C  
                                   l8688 150B                                     l9832 13FD  
                                   l9568 1C9C                                     l9808 1E4E  
                                   _CFGS 0CAE                                     l9594 12FE  
                                   l9586 12F1                                     l9826 13E8  
                                   l9746 1343                                     l8954 1DBA  
                                   l9596 1301                                     l8964 1E91  
                                   l8956 1DC0                                     l8980 14A4  
                                   l9852 152D                                     l9694 0E02  
                                   l9918 0D53                                     l8896 1726  
                                   l8968 1E9C                                     l9696 0E05  
                                   l8992 1223                                     l8984 14BD  
                                   l9864 154A                                     l9960 0DB9  
                           __CFG_WDTE$ON 0000                                     l9874 156A  
                                   l9858 153C                                     l9868 155A  
                                   l9876 1573                                     l9948 0DA3  
                                   l9958 0DB8                                     l9998 067F  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   _PEIE 005E                                     u9025 0BD5  
                                   u9115 1FEA                                     u9205 1504  
                                   u9055 0BF0                                     u9215 150C  
                                   u8505 17F0                                     u8435 17B4  
                                   u8455 17CD                                     u9175 14F0  
                                   u9280 0955                                     u8705 05BD  
                                   u8475 17DA                                     u9195 14FA  
                                   u9445 1CB4                                     u8805 0EBA  
                                   u9285 0953                                     u8645 0597  
                                   u8815 0ECA                                     u8735 05D0  
                                   u8825 0EEA                                     u8835 0EF9  
                                   u8675 05AA                                     u8915 0796  
                                   u8845 0F03                                     u8925 079C  
                                   u8955 07B2                                     _LWLO 0CAD  
                                   u8965 07B8                                     u8885 075E  
                                   u8895 076E                                     u8995 0BAB  
                                   _RSSI 00D0                                     _WREN 0CAA  
                                   _Buz1 00B0                                     _Load 0127  
                                   _Temp 00D8                                     _main 1579  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0882  
                        __end_of_RF_Main 1A7D                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0020                                     btemp 007E  
                        __end_of_WDT_Set 1B6B                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1AB0  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 124A                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                        ?_getDimmer_LoadOK 0070  
                                  ??_ISR 0075                             ___fttol@exp1 0058  
                           ___fttol@lval 0054                   _getDimmerLights_Status 1BA4  
                     ??_getDimmer_LoadOK 0020           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1B3B         setDimmerLights_ErrorClose@lights 0068  
          __end_of_DimmerIntrPointSelect 1BE8                                    l10100 03F9  
                                  l10032 06BE                                    l10034 06C0  
                                  l10050 06EE                                    l10140 04AC  
                                  l10116 043C                                    l10062 070F  
                                  l10126 046E                                    l10150 04DE  
                                  l10082 1CDB                                    l10410 1451  
                                  l10420 1468                                    l10190 13AE  
                                  l10502 0107                                    l10510 011A  
                                  l10086 1CE1                                    l10350 0B2B  
                                  l10176 0531                                    l10258 0F96  
                                  l10610 1F05                                    l10362 0B58  
                                  l10508 0114                                    l10444 0063  
                                  l10454 0074                                    l10358 0B50  
                                  l10528 0165                                    l10472 0096  
                                  l10392 1201                                    l10546 0184  
                                  l10378 0B85                                    l10548 018A  
                                  l10478 00C0                    ?_setDimmerLights_Main 0070  
                                  l10586 020B                                    l10674 159D  
                                  l10678 15A8                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 01E5  
                        __end_of___awdiv 1523                          __end_of___ftadd 0634  
                        __end_of___ftdiv 0F24                                    u10005 1F40  
                                  u10225 10EA                          __end_of___ftmul 07D9  
                                  u11055 0679                                    u10175 163F  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                                  u11185 06FF                          __end_of___fttol 0C12  
                                  u11455 13A4                                    u11635 0B3E  
                                  u11725 11F8                                    u11575 1194  
                                  u10935 0D94                                    u11735 1207  
                                  u11905 00CA                                    u11915 00D7  
                                  u10955 0DA9                                    u11755 1440  
                                  u11685 0B72                                    u11765 145F  
                                  u11785 1476                                    u11965 0120  
                                  _IOCBF 0396                                    u11895 00C5  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l732 1C73                                    i1l743 1BDF  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 00EA                  __end_of_Timeout_Counter 1CBA  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 1F83  
             _setDimmerLights_IntrIOC_GO 1F5B                         __end_of_TMR1_ISR 1FAC  
           __size_of_CC2500_WriteCommand 001A       __end_of_setDimmerLights_ErrorClose 1684  
             _setDimmerLights_ErrorClose 162A                         __end_of_TMR1_Set 1B5F  
                                  _getAD 1E43                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1C30              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03D0  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1CFA  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0012             __end_of_getMain_LightsStatus 1105  
          __end_of_setLED_Initialization 1C0C                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 094B  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                setDimmerLights_Main@clear 0067  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 1684  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                      ??_setPercentValue 0059                             __end_of_main 15D1  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1A93  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0CA6  
                   _setSw_Initialization 1AD8                                   ??_main 006E  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 09B7                           _setMemory_Data 1B0B  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0014  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03D0  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C43  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 0052  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0027  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 0821                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1E85  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 1800  
               _getMain_All_Error_Status 1105                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1DC7                                   i1l7202 03A9  
                                 i1l7122 027A                                   i1l7140 02C4  
                                 i1l7142 02CA                                   i1l7118 0273  
                                 i1l7170 034B                                   i1l7154 02FF  
                                 i1l7162 032A                                   i1l7146 02DD  
                                 i1l7180 0372                                   i1l7148 02E3  
                                 i1l7158 0316                                   i1l7168 0345  
                                 i1l7184 0378                                   i1l6714 1F80  
                                 i1l7198 03A3                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                                 u645_25 024E                       __size_of_Load_Main 01DA  
                                 u771_25 1FA6                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1D41  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1A73           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1CCF                                   _Dimmer 00C8  
                                 _DlySw1 0169                                   _DlySw2 016B  
             __end_of_Mcu_Initialization 1C1E                      __end_of_Buzzer_Main 13E1  
                                 _Memory 0220                                   _Timer1 0120  
     __end_of_setDimmerLights_TriggerAdj 1E43               _setDimmerLights_TriggerAdj 1E23  
                                 ___bmul 1BE8                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                    setDimmerLights@lights 002C  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00D6  
                                 _s_data 00D7                   ??_setDimmerLights_SwOn 0062  
                                 _setLED 0882                                   _myMain 00A0  
              _setDimmerLights_Main$2503 0068                _setDimmerLights_Main$2504 006A  
                 __end_of_setMemory_Data 1B17                         _DimmerLightsIntr 0078  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0027  
                       ___awdiv@quotient 0027                                   _setBuz 15D1  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 1A9D  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039              ?_setDimmerLights_AdjControl 0070  
    __end_of_setDimmerLights_IntrControl 03CF              _setDimmerLights_IntrControl 0223  
               Flash_Memory_Read@address 0022                         ?_Timeout_Counter 0070  
             __end_of_setMemory_LoopSave 1C69              getMain_Lights_Count@status1 0022  
            getMain_Lights_Count@status2 0023              getMain_Lights_Count@status3 0021  
                  __end_of_SwPointSelect 1CA5             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0074                  __size_of_LedPointSelect 0022  
                __size_of_getMain_LoadOK 000E                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009               getMain_LightsStatus@status 0028  
                             _TouchPower 1CCF               ?_getAll_DimmerLights_AdjGO 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 16DF         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0045                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                   _getRF_KeyStatus$5691 0022                            ?_my_MainTimer 0070  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                             __pidataBANK4 0801  
                          __end_of_getAD 1E63                                ?_TMR1_ISR 0070  
                              ?_TMR1_Set 0070                   setLoad_AH_AL_Restore@i 0021  
              setMemory_LoopSave@command 0021             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1B23                          _getSw_KeyStatus 1E04  
              ??_setControl_Lights_Table 0068                       getRF_KeyStatus@key 0021  
                       ??_DelayTimejudge 0024                          ?_setMemory_Data 0020  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0027  
                   _getMain_Lights_Count 1CE4                                ?_WDT_Main 0070  
                      __end_of_Load_Main 0223                       __size_of_getBuz_GO 0011  
                   _getMain_LightsStatus 10D3               __end_of_set_TimeoutCleared 1A98  
               __end_of_setDimmerReClock 1AB8                       __size_of_getRxData 006F  
                    ?_LED_Initialization 0070                    getMain_LightsStatus@i 0026  
                      ?_CC2500_WriteByte 0070                           _DimmerLights11 00CC  
                         _DimmerLights22 00CD                     __size_of_setLED_Main 0044  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1A7D                       ??_CC2500_WriteByte 0020  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0220  
                              ?_Fosc_Set 0070                              _Buzzer_Main 1397  
                      ??_setRFSW_Control 0066                        __end_of_Temp_Main 1A83  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1AB8  
                             __pnvCOMMON 007B                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 006C                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0077                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 1579                      _CC2500_WriteCommand 1D5A  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0075  
                          ?_setTemp_Main 0070                               _getLoad_AD 0B0A  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1AC8  
                     __size_of_setTxData 0099                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1AA9                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 11D9                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1AFF  
                     _setRFSW_AdjControl 1210                                  _IOC_ISR 1B86  
                                _IOC_Set 1B47                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 116D  
              __size_of_getDimmer_LoadOK 000C                        _Flash_Memory_Read 1D74  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0076  
                 __size_of_CC2500_TxData 0068              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 01A0  
                                _RF_Main 1A7A                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1B5F  
        __end_of_setControl_Lights_Table 0A25                          setRF_Main@error 006D  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 1351                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1B0B  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1BC5  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                                _VarLED1 0161                                  _VarLED2 0165  
         __end_of_getDimmerLights_Status 1BB4                        __end_of_getRxData 0A94  
                __end_of_getSw_KeyStatus 1E23                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1C7D                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1DE5                     ??_setRFSW_AdjControl 0064  
                         ??_setTemp_Main 0027                          __size_of___bmul 0012  
                                ___awdiv 14CF                                  ___ftadd 053E  
                                ___ftdiv 0E7B                                  ___ftmul 0725  
                                ___fttol 0B8B                      __end_of_Switch_Main 1F10  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1BC5  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0061                     setRFSW_AdjControl@sw 0066  
                        __size_of_setBuz 0059                                  __ptext1 142F  
                                __ptext2 1B95                                  __ptext3 11D9  
                                __ptext4 0B0A                                  __ptext5 1E43  
                                __ptext6 1C1E                                  __ptext7 0002  
                                __ptext8 1A80                                  __ptext9 0D3F  
                ??_setDimmerLights_AdjRF 005F                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1BD6                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 11A3  
              __end_of_Flash_Memory_Read 1D8E                  ??_setDimmerLights_SwOff 0062  
                             _setRF_Main 0634                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1AC0                        _DimmerLights_Main 1AD0  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1AF4  
             __end_of_CC2500_ClearRXFIFO 1A87                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1A8B            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 007B                           _LedPointSelect 1E85  
                    _DelayOffPointSelect 1C7D                           _getMain_LoadOK 1B78  
                                clrloop0 1AA4           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1B78                     end_of_initialization 0045  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1FAC  
                          _DelayTime_1us 1F35                        __end_of_setTxData 0D3F  
             __end_of_Flash_Memory_Write 10D3                                  init_ram 1A9D  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 006D  
                   Flash_Memory_Read@ret 0023                                  initloop 1A9E  
                             _setSw_Main 03CF                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 0064                        _CC2500_ReadStatus 1F10  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1BFA  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0A94  
                          _CC2500_TxData 08E3                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 13E1  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1AE0                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1AD8                       _Mcu_Initialization 1C0C  
               __size_of_CC2500_PowerRST 0044                     __end_of_my_MainTimer 147D  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1EA7                  __end_of_setPercentValue 1397  
                 __end_of_getMain_LoadOK 1B86                 __size_of_CC2500_WriteREG 0023  
              __end_of_CC2500_InitSetREG 1FD6                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 124A  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1F35  
            ??_getAll_DimmerLights_AdjGO 0020          getMain_All_Error_Status@command 0025  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1D5A  
                   _setRF_Initialization 1AF4                       _setMemory_LoopSave 1C56  
                            _Switch_Main 1EEC                        __size_of_LED_Main 000C  
                       ?_getSw_KeyStatus 0070                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C30  
                __end_of_getRF_KeyStatus 1BD6                        _setMain_Exception 1523  
                       ??_setMemory_Data 0021                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1CBA                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                     ?_setMain_Exception 0070                      ?_setMemory_LoopSave 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1BFA  
               setMain_Exception@command 00EE                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1C69                        getSw_KeyStatus@sw 0024  
                      __size_of_TMR1_ISR 0029                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C            __size_of_setDimmerLights_Main 00A3  
                         __end_of_setLED 08E3            __size_of_setDimmerLights_SwOn 0042  
                         __end_of_setBuz 162A                      ??_setMain_Exception 006B  
                   _CC2500_FrequencyCabr 1AFF               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 147D                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 1138                          ?_LedPointSelect 0070  
                              _Load_Main 0049                              __end_of_ISR 0013  
                        ?_getMain_LoadOK 0070                         _getDimmer_LoadOK 1B3B  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1E04          __size_of_setTemp_Initialization 0001  
                   ??_setMemory_LoopSave 0020                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0DD8  
                    __size_of_getLoad_AD 0081                             ?_Buzzer_Main 0070  
                    __size_of_getLoad_OK 0008                       _set_TimeoutCleared 1A93  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 015D                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 0037  
                 ?_setLED_Initialization 0070                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                __end_of_setMain_Exception 1579  
              __size_of_CC2500_WriteByte 0019                                _Temp_Main 1A80  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D1                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00D4  
                            __pdataBANK4 0245                _getAll_DimmerLights_AdjGO 1CFA  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0069  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 1138  
                       _CC2500_SIDLEMode 1A8B               __size_of_DimmerLights_Main 0008  
              __end_of_setRF_DimmerValue 116D                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070           _getAll_DimmerLights_AdjGO$2562 0021  
                            __pbssCOMMON 0076                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1C43  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00EA                            __pcstackBANK3 01E5  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0094                            DlyOff_Main@sw 0068  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 0061               __size_of_CC2500_ReadStatus 0025  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01BE                            _DimmerLights2 01CD  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1DAA  
                        ??_CC2500_TxData 0024                           getRxData@error 0069  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00F1  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                       ?_getRF_KeyStatus 0070                           Load_Main@error 002C  
                 _setTemp_Initialization 0800                                _getBuz_GO 1BB4  
    __end_of_Flash_Memory_Initialization 1000              _Flash_Memory_Initialization 0F24  
                               ?___awdiv 0020                                __ptext100 1BE8  
                              __ptext101 1BA4                                __ptext110 1DE5  
                              __ptext102 1C30                                __ptext111 1EC9  
                              __ptext103 1AB8                                __ptext120 1397  
                              __ptext112 1AFF                                __ptext104 1AE9  
                              __ptext121 1A74                                __ptext113 1F35  
                              __ptext105 1C7D                                __ptext114 1A87  
                              __ptext106 1CBA                                __ptext123 1F83  
                              __ptext115 1A83                                __ptext107 1A8B  
                              __ptext124 0223                                __ptext116 1D5A  
                              __ptext108 12C9                                __ptext125 1BD6  
                              __ptext117 1A93                                __ptext109 1FAC  
                               ?___ftadd 003E                                __ptext126 1B86  
                              __ptext118 1CA5                                __ptext127 1AB0  
                              __ptext119 1D28                                __ptext128 1F5B  
                              __ptext129 1C69                                _getRxData 0A25  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                    __size_of_my_MainTimer 004E  
                __end_of_setRFSW_Control 14CF            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 0003                         getMain_LoadOK@ok 0023  
          __end_of_Buzzer_Initialization 1A77                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1CE4                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
          __end_of_setDimmerLights_AdjRF 1EC9                   CC2500_WriteByte@loop_a 0021  
                              _r_address 00D5           __size_of_setDimmerLights_SwOff 005F  
         __size_of_myMain_Initialization 000F            __end_of_setDimmerLights_SwOff 173E  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1BA4  
                         __size_of_getAD 0020                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1C91                      __end_of_setLED_Main 1351  
                    _DimmerLightsIntrIOC 00CE                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1A80             setDimmerLights_SwOff@command 0064  
                      _CC2500_rfSettings 102F                                 _LED_Main 1B2F  
                        SwPointSelect@sw 0021                                clear_ram0 1AA3  
               CC2500_InitPATable@loop_d 0027               __size_of_setMain_Exception 0056  
                           _my_MainTimer 142F                                _setTxData 0CA6  
    __end_of_DimmerLights_Initialization 1D28              _DimmerLights_Initialization 1D11  
                     _CC2500_ClearRXFIFO 1A83                       _CC2500_ClearTXFIFO 1A87  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 107A  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
            __size_of_setRFSW_AdjControl 003A                       _Flash_Memory_Write 10A4  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 1F83                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                             ??_getLoad_OK 0020  
                               _TMR1_Set 1B53                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 0123                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1D74                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1C1E                  DlyOff_Initialization@sw 0022  
                  getSw_KeyStatus@status 0023                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       setRF_Main@loop_f 006B                    __size_of_setTemp_Main 0099  
                __size_of_setDelayOff_GO 0061             ??_setDimmerLights_AdjControl 0025  
                               _DelayOff 0076                             setSw_Main@sw 0068  
       setDimmerLights_IntrIOC_GO@lights 0072                              ??_Load_Main 0029  
                       __size_of_IOC_ISR 000F             ?_setDimmerLights_IntrControl 0070  
         getMain_All_Error_Status@status 0026                         __size_of_IOC_Set 000C  
           __end_of_Flash_Memory_Erasing 1B23                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 11D9                    _DlyOff_Initialization 1AE9  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1A8F                         __size_of_WDT_Set 000C  
                setMain_Exception@status 00ED                       __end_of_getLoad_AD 0B8B  
                     __end_of_getLoad_OK 1AD0                    _Switch_Initialization 1B6B  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0028                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 1210  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1D28  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 005E  
                               _SwDetect 00D3                              ??_Temp_Main 0029  
                      setRFSW_Control@sw 0067            _getMain_All_Error_Status$3927 0021  
          _getMain_All_Error_Status$3936 0023                 __end_of_getDimmer_LoadOK 1B47  
                    _Load_Initialization 1A98                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 002A  
                           _setTemp_Main 0D3F                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 setDimmerLights_SwOn@idle 0063  
                               ___awtoft 1E63                         ??_LedPointSelect 0020  
                               ___ftpack 179F            __size_of_getMain_Lights_Count 0016  
                       ??_getMain_LoadOK 0022            __size_of_getMain_LightsStatus 0032  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006A  
                   CC2500_WriteREG@value 0022                              _setLED_Main 130D  
             __end_of_setRF_DimmerLights 09B7                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E       __size_of_getAll_DimmerLights_AdjGO 0017  
                   ?_Load_Initialization 0070                                 __ptext10 1A7D  
                               __ptext11 0800                                 __ptext20 1B6B  
                               __ptext12 1EEC                                 __ptext21 1AD8  
                               __ptext13 03CF                                 __ptext30 1210  
                               __ptext22 1CCF                                 __ptext14 1066  
                               __ptext31 1138                                 __ptext23 1A7A  
                               __ptext15 107A                                 __ptext40 0A94  
                               __ptext32 1EA7                                 __ptext24 0634  
                               __ptext16 1E04                                 __ptext41 1F10  
                               __ptext33 1684                                 __ptext25 0A25  
                               __ptext17 1C91                                 __ptext50 1A8F  
                               __ptext42 1DAA                                 __ptext34 0725  
                               __ptext26 11A3                                 __ptext18 1523  
                               __ptext51 1AA9                                 __ptext43 1A77  
                               __ptext35 053E                                 __ptext27 1C56  
                               __ptext19 162A                                 __ptext60 1B23  
                               __ptext52 0049                                 __ptext44 1AF4  
                               __ptext36 1C43                                 __ptext28 09B7  
                               __ptext61 1BFA                                 __ptext53 1B78  
                               __ptext45 1C0C                                 __ptext37 1BC5  
                               __ptext29 147D                                 __ptext70 1D74  
                               __ptext62 116D                                 __ptext54 1B3B  
                               __ptext46 1B5F                                 __ptext38 1BB4  
                               __ptext71 1AD0                                 __ptext63 10D3  
                               __ptext55 1CE4                                 __ptext47 1B53  
                               __ptext39 08E3                                 __ptext80 07D9  
                               __ptext72 0DD8                                 __ptext64 13E1  
                               __ptext56 1A98                                 __ptext48 1D41  
                               __ptext81 1A73                                 __ptext73 124A  
                               __ptext65 1B17                                 __ptext57 1D8E  
                               __ptext49 1B47                                 __ptext90 094B  
                               __ptext82 1AC0                                 __ptext74 0C12  
                               __ptext66 0F24                                 __ptext58 1B2F  
                               __ptext91 1351                                 __ptext83 0821  
                               __ptext75 0882                                 __ptext67 1B0B  
                               __ptext59 130D                                 __ptext92 0B8B  
                               __ptext84 1287                                 __ptext76 1E85  
                               __ptext68 10A4                                 __ptext93 0E7B  
                               __ptext85 15D1                                 __ptext77 1105  
                               __ptext69 1AE0                                 __ptext94 1E63  
                               __ptext86 14CF                                 __ptext78 1AC8  
                               __ptext95 179F                                 __ptext87 1CFA  
                               __ptext79 1D11                                 __ptext96 1E23  
                               __ptext88 16DF                                 __ptext97 1DC7  
                               __ptext89 0CA6                                 __ptext98 173E  
                               __ptext99 1FD6                                 __product 0245  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
          __end_of_Dimmer_Initialization 1A74             __end_of_setDimmerLights_Main 0E7B  
                       Switch_Main@error 006D             __end_of_setDimmerLights_SwOn 12C9  
                 getDimmer_LoadOK@status 0021                             ??_setSw_Main 0066  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1066                 __end_of_CC2500_SIDLEMode 1A8F  
             setDimmerLights_Main@lights 006C              __end_of_DelayOffPointSelect 1C91  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 006C  
              __size_of_setDimmerReClock 0008           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 1DAA                       _CC2500_InitPATable 1DE5  
               __end_of_setMemory_Modify 1C56            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 0725                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0069  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0068  
                           getLoad_OK@ok 0020         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 01E5                                 main@argv 01E7  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$2558 0021  
                   _getSw_KeyStatus$2559 0022                          _CC2500_PowerRST 12C9  
               __size_of_getSw_KeyStatus 001F              __end_of_Flash_Memory_Modify 142F  
                      ??_getPercentValue 0059                              _setLog_Code 11A3  
            __end_of_Flash_Memory_Unlock 1AE9                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1EC9                       __end_of_setSw_Main 053E  
                  ??_Load_Initialization 0022                            _Transceive_OK 03D1  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 1FD6  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
           ??_setDimmerLights_ErrorClose 0066                  setDimmerLights_SwOff@sw 0065  
      __end_of_getAll_DimmerLights_AdjGO 1D11              __size_of_setMemory_LoopSave 0013  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 0800  __size_of_setDimmerLights_Initialization 0027  
         _setDimmerLights_Initialization 07D9              __end_of_setDimmerLights_Adj 1287  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 1A77  
   __size_of_setDimmerLights_IntrControl 01AC                              getLoad_AD@i 0029  
                            getLoad_AD@j 0028                              getLoad_AD@k 0027  
                   _Flash_Memory_Erasing 1B17                       ?_RF_Initialization 0070  
                             _SPI0Buffer 00D2          __end_of_DelayOff_Initialization 1AC0  
    __size_of_setDimmerLights_IntrIOC_GO 0028      __size_of_setDimmerLights_ErrorClose 005A  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1AC8  
     __end_of_setDimmerLights_AdjControl 10A4               _setDimmerLights_AdjControl 107A  
                    ??_RF_Initialization 0021                  __size_of_setMemory_Data 000C  
                         _setDelayOff_GO 173E         __size_of_setControl_Lights_Table 006E  
                 __end_of_DelayTimejudge 2000     __size_of_Flash_Memory_Initialization 00DC  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0066  
                  setMemory_Data@address 0022                    __end_of_DelayTime_1us 1F5B  
                __end_of_CC2500_ReadByte 1DC7             __end_of_setSw_Initialization 1AE0  
                        _Timeout_Counter 1CA5          __size_of_getDimmerLights_Status 0010  
                   getPercentValue@value 005B               __end_of_LED_Initialization 1B2F  
       __size_of_setDimmerLights_Trigger 001E           __end_of_setTemp_Initialization 0801  
               __size_of_setPercentValue 0046                  setMemory_Modify@command 0021  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1A7A  
                   _setDimmerLights$2594 002A                    __end_of_CC2500_RxData 0B0A  
                  __end_of_CC2500_TxData 094B                    _setLoad_AH_AL_Restore 1D8E  
                __end_of_CC2500_PowerRST 130D           getAll_DimmerLights_AdjGO@adjgo 0022  
